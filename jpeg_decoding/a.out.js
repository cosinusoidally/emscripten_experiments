// Note: Some Emscripten settings will significantly limit the speed of the generated code.
// Note: Some Emscripten settings may limit the speed of the generated code.
// The Module object: Our interface to the outside world. We import
// and export values on it, and do the work to get that through
// closure compiler if necessary. There are various ways Module can be used:
// 1. Not defined. We create it here
// 2. A function parameter, function(Module) { ..generated code.. }
// 3. pre-run appended it, var Module = {}; ..generated code..
// 4. External script tag defines var Module.
// We need to do an eval in order to handle the closure compiler
// case, where this code here is minified but Module was defined
// elsewhere (e.g. case 4 above). We also need to check if Module
// already exists (e.g. case 3 above).
// Note that if you want to run closure, and also to use Module
// after the generated code, you will need to define   var Module = {};
// before the code. Then that object will be used in the code, and you
// can continue to use Module afterwards as well.
var Module;
if (!Module) Module = (typeof Module !== 'undefined' ? Module : null) || {};

// Sometimes an existing Module object exists with properties
// meant to overwrite the default module functionality. Here
// we collect those properties and reapply _after_ we configure
// the current environment's defaults to avoid having to be so
// defensive during initialization.
var moduleOverrides = {};
for (var key in Module) {
  if (Module.hasOwnProperty(key)) {
    moduleOverrides[key] = Module[key];
  }
}

// The environment setup code below is customized to use Module.
// *** Environment setup code ***
var ENVIRONMENT_IS_NODE = typeof process === 'object' && typeof require === 'function';
var ENVIRONMENT_IS_WEB = typeof window === 'object';
var ENVIRONMENT_IS_WORKER = typeof importScripts === 'function';
var ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;

if (ENVIRONMENT_IS_NODE) {
  // Expose functionality in the same simple way that the shells work
  // Note that we pollute the global namespace here, otherwise we break in node
  if (!Module['print']) Module['print'] = function print(x) {
    process['stdout'].write(x + '\n');
  };
  if (!Module['printErr']) Module['printErr'] = function printErr(x) {
    process['stderr'].write(x + '\n');
  };

  var nodeFS = require('fs');
  var nodePath = require('path');

  Module['read'] = function read(filename, binary) {
    filename = nodePath['normalize'](filename);
    var ret = nodeFS['readFileSync'](filename);
    // The path is absolute if the normalized version is the same as the resolved.
    if (!ret && filename != nodePath['resolve'](filename)) {
      filename = path.join(__dirname, '..', 'src', filename);
      ret = nodeFS['readFileSync'](filename);
    }
    if (ret && !binary) ret = ret.toString();
    return ret;
  };

  Module['readBinary'] = function readBinary(filename) { return Module['read'](filename, true) };

  Module['load'] = function load(f) {
    globalEval(read(f));
  };

  Module['arguments'] = process['argv'].slice(2);

  module['exports'] = Module;
}
else if (ENVIRONMENT_IS_SHELL) {
  if (!Module['print']) Module['print'] = print;
  if (typeof printErr != 'undefined') Module['printErr'] = printErr; // not present in v8 or older sm

  if (typeof read != 'undefined') {
    Module['read'] = read;
  } else {
    Module['read'] = function read() { throw 'no read() available (jsc?)' };
  }

  Module['readBinary'] = function readBinary(f) {
    return read(f, 'binary');
  };

  if (typeof scriptArgs != 'undefined') {
    Module['arguments'] = scriptArgs;
  } else if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  this['Module'] = Module;

  eval("if (typeof gc === 'function' && gc.toString().indexOf('[native code]') > 0) var gc = undefined"); // wipe out the SpiderMonkey shell 'gc' function, which can confuse closure (uses it as a minified name, and it is then initted to a non-falsey value unexpectedly)
}
else if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
  Module['read'] = function read(url) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, false);
    xhr.send(null);
    return xhr.responseText;
  };

  if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  if (typeof console !== 'undefined') {
    if (!Module['print']) Module['print'] = function print(x) {
      console.log(x);
    };
    if (!Module['printErr']) Module['printErr'] = function printErr(x) {
      console.log(x);
    };
  } else {
    // Probably a worker, and without console.log. We can do very little here...
    var TRY_USE_DUMP = false;
    if (!Module['print']) Module['print'] = (TRY_USE_DUMP && (typeof(dump) !== "undefined") ? (function(x) {
      dump(x);
    }) : (function(x) {
      // self.postMessage(x); // enable this if you want stdout to be sent as messages
    }));
  }

  if (ENVIRONMENT_IS_WEB) {
    window['Module'] = Module;
  } else {
    Module['load'] = importScripts;
  }
}
else {
  // Unreachable because SHELL is dependant on the others
  throw 'Unknown runtime environment. Where are we?';
}

function globalEval(x) {
  eval.call(null, x);
}
if (!Module['load'] == 'undefined' && Module['read']) {
  Module['load'] = function load(f) {
    globalEval(Module['read'](f));
  };
}
if (!Module['print']) {
  Module['print'] = function(){};
}
if (!Module['printErr']) {
  Module['printErr'] = Module['print'];
}
if (!Module['arguments']) {
  Module['arguments'] = [];
}
// *** Environment setup code ***

// Closure helpers
Module.print = Module['print'];
Module.printErr = Module['printErr'];

// Callbacks
Module['preRun'] = [];
Module['postRun'] = [];

// Merge back in the overrides
for (var key in moduleOverrides) {
  if (moduleOverrides.hasOwnProperty(key)) {
    Module[key] = moduleOverrides[key];
  }
}



// === Auto-generated preamble library stuff ===

//========================================
// Runtime code shared with compiler
//========================================

var Runtime = {
  stackSave: function () {
    return STACKTOP;
  },
  stackRestore: function (stackTop) {
    STACKTOP = stackTop;
  },
  forceAlign: function (target, quantum) {
    quantum = quantum || 4;
    if (quantum == 1) return target;
    if (isNumber(target) && isNumber(quantum)) {
      return Math.ceil(target/quantum)*quantum;
    } else if (isNumber(quantum) && isPowerOfTwo(quantum)) {
      return '(((' +target + ')+' + (quantum-1) + ')&' + -quantum + ')';
    }
    return 'Math.ceil((' + target + ')/' + quantum + ')*' + quantum;
  },
  isNumberType: function (type) {
    return type in Runtime.INT_TYPES || type in Runtime.FLOAT_TYPES;
  },
  isPointerType: function isPointerType(type) {
  return type[type.length-1] == '*';
},
  isStructType: function isStructType(type) {
  if (isPointerType(type)) return false;
  if (isArrayType(type)) return true;
  if (/<?\{ ?[^}]* ?\}>?/.test(type)) return true; // { i32, i8 } etc. - anonymous struct types
  // See comment in isStructPointerType()
  return type[0] == '%';
},
  INT_TYPES: {"i1":0,"i8":0,"i16":0,"i32":0,"i64":0},
  FLOAT_TYPES: {"float":0,"double":0},
  or64: function (x, y) {
    var l = (x | 0) | (y | 0);
    var h = (Math.round(x / 4294967296) | Math.round(y / 4294967296)) * 4294967296;
    return l + h;
  },
  and64: function (x, y) {
    var l = (x | 0) & (y | 0);
    var h = (Math.round(x / 4294967296) & Math.round(y / 4294967296)) * 4294967296;
    return l + h;
  },
  xor64: function (x, y) {
    var l = (x | 0) ^ (y | 0);
    var h = (Math.round(x / 4294967296) ^ Math.round(y / 4294967296)) * 4294967296;
    return l + h;
  },
  getNativeTypeSize: function (type) {
    switch (type) {
      case 'i1': case 'i8': return 1;
      case 'i16': return 2;
      case 'i32': return 4;
      case 'i64': return 8;
      case 'float': return 4;
      case 'double': return 8;
      default: {
        if (type[type.length-1] === '*') {
          return Runtime.QUANTUM_SIZE; // A pointer
        } else if (type[0] === 'i') {
          var bits = parseInt(type.substr(1));
          assert(bits % 8 === 0);
          return bits/8;
        } else {
          return 0;
        }
      }
    }
  },
  getNativeFieldSize: function (type) {
    return Math.max(Runtime.getNativeTypeSize(type), Runtime.QUANTUM_SIZE);
  },
  dedup: function dedup(items, ident) {
  var seen = {};
  if (ident) {
    return items.filter(function(item) {
      if (seen[item[ident]]) return false;
      seen[item[ident]] = true;
      return true;
    });
  } else {
    return items.filter(function(item) {
      if (seen[item]) return false;
      seen[item] = true;
      return true;
    });
  }
},
  set: function set() {
  var args = typeof arguments[0] === 'object' ? arguments[0] : arguments;
  var ret = {};
  for (var i = 0; i < args.length; i++) {
    ret[args[i]] = 0;
  }
  return ret;
},
  STACK_ALIGN: 8,
  getAlignSize: function (type, size, vararg) {
    // we align i64s and doubles on 64-bit boundaries, unlike x86
    if (vararg) return 8;
    if (!vararg && (type == 'i64' || type == 'double')) return 8;
    if (!type) return Math.min(size, 8); // align structures internally to 64 bits
    return Math.min(size || (type ? Runtime.getNativeFieldSize(type) : 0), Runtime.QUANTUM_SIZE);
  },
  calculateStructAlignment: function calculateStructAlignment(type) {
    type.flatSize = 0;
    type.alignSize = 0;
    var diffs = [];
    var prev = -1;
    var index = 0;
    type.flatIndexes = type.fields.map(function(field) {
      index++;
      var size, alignSize;
      if (Runtime.isNumberType(field) || Runtime.isPointerType(field)) {
        size = Runtime.getNativeTypeSize(field); // pack char; char; in structs, also char[X]s.
        alignSize = Runtime.getAlignSize(field, size);
      } else if (Runtime.isStructType(field)) {
        if (field[1] === '0') {
          // this is [0 x something]. When inside another structure like here, it must be at the end,
          // and it adds no size
          // XXX this happens in java-nbody for example... assert(index === type.fields.length, 'zero-length in the middle!');
          size = 0;
          if (Types.types[field]) {
            alignSize = Runtime.getAlignSize(null, Types.types[field].alignSize);
          } else {
            alignSize = type.alignSize || QUANTUM_SIZE;
          }
        } else {
          size = Types.types[field].flatSize;
          alignSize = Runtime.getAlignSize(null, Types.types[field].alignSize);
        }
      } else if (field[0] == 'b') {
        // bN, large number field, like a [N x i8]
        size = field.substr(1)|0;
        alignSize = 1;
      } else if (field[0] === '<') {
        // vector type
        size = alignSize = Types.types[field].flatSize; // fully aligned
      } else if (field[0] === 'i') {
        // illegal integer field, that could not be legalized because it is an internal structure field
        // it is ok to have such fields, if we just use them as markers of field size and nothing more complex
        size = alignSize = parseInt(field.substr(1))/8;
        assert(size % 1 === 0, 'cannot handle non-byte-size field ' + field);
      } else {
        assert(false, 'invalid type for calculateStructAlignment');
      }
      if (type.packed) alignSize = 1;
      type.alignSize = Math.max(type.alignSize, alignSize);
      var curr = Runtime.alignMemory(type.flatSize, alignSize); // if necessary, place this on aligned memory
      type.flatSize = curr + size;
      if (prev >= 0) {
        diffs.push(curr-prev);
      }
      prev = curr;
      return curr;
    });
    if (type.name_ && type.name_[0] === '[') {
      // arrays have 2 elements, so we get the proper difference. then we scale here. that way we avoid
      // allocating a potentially huge array for [999999 x i8] etc.
      type.flatSize = parseInt(type.name_.substr(1))*type.flatSize/2;
    }
    type.flatSize = Runtime.alignMemory(type.flatSize, type.alignSize);
    if (diffs.length == 0) {
      type.flatFactor = type.flatSize;
    } else if (Runtime.dedup(diffs).length == 1) {
      type.flatFactor = diffs[0];
    }
    type.needsFlattening = (type.flatFactor != 1);
    return type.flatIndexes;
  },
  generateStructInfo: function (struct, typeName, offset) {
    var type, alignment;
    if (typeName) {
      offset = offset || 0;
      type = (typeof Types === 'undefined' ? Runtime.typeInfo : Types.types)[typeName];
      if (!type) return null;
      if (type.fields.length != struct.length) {
        printErr('Number of named fields must match the type for ' + typeName + ': possibly duplicate struct names. Cannot return structInfo');
        return null;
      }
      alignment = type.flatIndexes;
    } else {
      var type = { fields: struct.map(function(item) { return item[0] }) };
      alignment = Runtime.calculateStructAlignment(type);
    }
    var ret = {
      __size__: type.flatSize
    };
    if (typeName) {
      struct.forEach(function(item, i) {
        if (typeof item === 'string') {
          ret[item] = alignment[i] + offset;
        } else {
          // embedded struct
          var key;
          for (var k in item) key = k;
          ret[key] = Runtime.generateStructInfo(item[key], type.fields[i], alignment[i]);
        }
      });
    } else {
      struct.forEach(function(item, i) {
        ret[item[1]] = alignment[i];
      });
    }
    return ret;
  },
  dynCall: function (sig, ptr, args) {
    if (args && args.length) {
      assert(args.length == sig.length-1);
      return FUNCTION_TABLE[ptr].apply(null, args);
    } else {
      assert(sig.length == 1);
      return FUNCTION_TABLE[ptr]();
    }
  },
  addFunction: function (func) {
    var table = FUNCTION_TABLE;
    var ret = table.length;
    assert(ret % 2 === 0);
    table.push(func);
    for (var i = 0; i < 2-1; i++) table.push(0);
    return ret;
  },
  removeFunction: function (index) {
    var table = FUNCTION_TABLE;
    table[index] = null;
  },
  getAsmConst: function (code, numArgs) {
    // code is a constant string on the heap, so we can cache these
    if (!Runtime.asmConstCache) Runtime.asmConstCache = {};
    var func = Runtime.asmConstCache[code];
    if (func) return func;
    var args = [];
    for (var i = 0; i < numArgs; i++) {
      args.push(String.fromCharCode(36) + i); // $0, $1 etc
    }
    var source = Pointer_stringify(code);
    if (source[0] === '"') {
      // tolerate EM_ASM("..code..") even though EM_ASM(..code..) is correct
      if (source.indexOf('"', 1) === source.length-1) {
        source = source.substr(1, source.length-2);
      } else {
        // something invalid happened, e.g. EM_ASM("..code($0)..", input)
        abort('invalid EM_ASM input |' + source + '|. Please use EM_ASM(..code..) (no quotes) or EM_ASM({ ..code($0).. }, input) (to input values)');
      }
    }
    try {
      var evalled = eval('(function(' + args.join(',') + '){ ' + source + ' })'); // new Function does not allow upvars in node
    } catch(e) {
      Module.printErr('error in executing inline EM_ASM code: ' + e + ' on: \n\n' + source + '\n\nwith args |' + args + '| (make sure to use the right one out of EM_ASM, EM_ASM_ARGS, etc.)');
      throw e;
    }
    return Runtime.asmConstCache[code] = evalled;
  },
  warnOnce: function (text) {
    if (!Runtime.warnOnce.shown) Runtime.warnOnce.shown = {};
    if (!Runtime.warnOnce.shown[text]) {
      Runtime.warnOnce.shown[text] = 1;
      Module.printErr(text);
    }
  },
  funcWrappers: {},
  getFuncWrapper: function (func, sig) {
    assert(sig);
    if (!Runtime.funcWrappers[func]) {
      Runtime.funcWrappers[func] = function dynCall_wrapper() {
        return Runtime.dynCall(sig, func, arguments);
      };
    }
    return Runtime.funcWrappers[func];
  },
  UTF8Processor: function () {
    var buffer = [];
    var needed = 0;
    this.processCChar = function (code) {
      code = code & 0xFF;

      if (buffer.length == 0) {
        if ((code & 0x80) == 0x00) {        // 0xxxxxxx
          return String.fromCharCode(code);
        }
        buffer.push(code);
        if ((code & 0xE0) == 0xC0) {        // 110xxxxx
          needed = 1;
        } else if ((code & 0xF0) == 0xE0) { // 1110xxxx
          needed = 2;
        } else {                            // 11110xxx
          needed = 3;
        }
        return '';
      }

      if (needed) {
        buffer.push(code);
        needed--;
        if (needed > 0) return '';
      }

      var c1 = buffer[0];
      var c2 = buffer[1];
      var c3 = buffer[2];
      var c4 = buffer[3];
      var ret;
      if (buffer.length == 2) {
        ret = String.fromCharCode(((c1 & 0x1F) << 6)  | (c2 & 0x3F));
      } else if (buffer.length == 3) {
        ret = String.fromCharCode(((c1 & 0x0F) << 12) | ((c2 & 0x3F) << 6)  | (c3 & 0x3F));
      } else {
        // http://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae
        var codePoint = ((c1 & 0x07) << 18) | ((c2 & 0x3F) << 12) |
                        ((c3 & 0x3F) << 6)  | (c4 & 0x3F);
        ret = String.fromCharCode(
          Math.floor((codePoint - 0x10000) / 0x400) + 0xD800,
          (codePoint - 0x10000) % 0x400 + 0xDC00);
      }
      buffer.length = 0;
      return ret;
    }
    this.processJSString = function processJSString(string) {
      /* TODO: use TextEncoder when present,
        var encoder = new TextEncoder();
        encoder['encoding'] = "utf-8";
        var utf8Array = encoder['encode'](aMsg.data);
      */
      string = unescape(encodeURIComponent(string));
      var ret = [];
      for (var i = 0; i < string.length; i++) {
        ret.push(string.charCodeAt(i));
      }
      return ret;
    }
  },
  getCompilerSetting: function (name) {
    throw 'You must build with -s RETAIN_COMPILER_SETTINGS=1 for Runtime.getCompilerSetting or emscripten_get_compiler_setting to work';
  },
  stackAlloc: function (size) { var ret = STACKTOP;STACKTOP = (STACKTOP + size)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0); return ret; },
  staticAlloc: function (size) { var ret = STATICTOP;STATICTOP = (STATICTOP + (assert(!staticSealed),size))|0;STATICTOP = (((STATICTOP)+7)&-8); return ret; },
  dynamicAlloc: function (size) { var ret = DYNAMICTOP;DYNAMICTOP = (DYNAMICTOP + (assert(DYNAMICTOP > 0),size))|0;DYNAMICTOP = (((DYNAMICTOP)+7)&-8); if (DYNAMICTOP >= TOTAL_MEMORY) enlargeMemory();; return ret; },
  alignMemory: function (size,quantum) { var ret = size = Math.ceil((size)/(quantum ? quantum : 8))*(quantum ? quantum : 8); return ret; },
  makeBigInt: function (low,high,unsigned) { var ret = (unsigned ? ((low>>>0)+((high>>>0)*4294967296)) : ((low>>>0)+((high|0)*4294967296))); return ret; },
  GLOBAL_BASE: 8,
  QUANTUM_SIZE: 4,
  __dummy__: 0
}


Module['Runtime'] = Runtime;









//========================================
// Runtime essentials
//========================================

var __THREW__ = 0; // Used in checking for thrown exceptions.
var setjmpId = 1; // Used in setjmp/longjmp
var setjmpLabels = {};

var ABORT = false; // whether we are quitting the application. no code should run after this. set in exit() and abort()
var EXITSTATUS = 0;

var undef = 0;
// tempInt is used for 32-bit signed values or smaller. tempBigInt is used
// for 32-bit unsigned values or more than 32 bits. TODO: audit all uses of tempInt
var tempValue, tempInt, tempBigInt, tempInt2, tempBigInt2, tempPair, tempBigIntI, tempBigIntR, tempBigIntS, tempBigIntP, tempBigIntD, tempDouble, tempFloat;
var tempI64, tempI64b;
var tempRet0, tempRet1, tempRet2, tempRet3, tempRet4, tempRet5, tempRet6, tempRet7, tempRet8, tempRet9;

function assert(condition, text) {
  if (!condition) {
    abort('Assertion failed: ' + text);
  }
}

var globalScope = this;

// C calling interface. A convenient way to call C functions (in C files, or
// defined with extern "C").
//
// Note: LLVM optimizations can inline and remove functions, after which you will not be
//       able to call them. Closure can also do so. To avoid that, add your function to
//       the exports using something like
//
//         -s EXPORTED_FUNCTIONS='["_main", "_myfunc"]'
//
// @param ident      The name of the C function (note that C++ functions will be name-mangled - use extern "C")
// @param returnType The return type of the function, one of the JS types 'number', 'string' or 'array' (use 'number' for any C pointer, and
//                   'array' for JavaScript arrays and typed arrays; note that arrays are 8-bit).
// @param argTypes   An array of the types of arguments for the function (if there are no arguments, this can be ommitted). Types are as in returnType,
//                   except that 'array' is not possible (there is no way for us to know the length of the array)
// @param args       An array of the arguments to the function, as native JS values (as in returnType)
//                   Note that string arguments will be stored on the stack (the JS string will become a C string on the stack).
// @return           The return value, as a native JS value (as in returnType)
function ccall(ident, returnType, argTypes, args) {
  return ccallFunc(getCFunc(ident), returnType, argTypes, args);
}
Module["ccall"] = ccall;

// Returns the C function with a specified identifier (for C++, you need to do manual name mangling)
function getCFunc(ident) {
  try {
    var func = Module['_' + ident]; // closure exported function
    if (!func) func = eval('_' + ident); // explicit lookup
  } catch(e) {
  }
  assert(func, 'Cannot call unknown function ' + ident + ' (perhaps LLVM optimizations or closure removed it?)');
  return func;
}

// Internal function that does a C call using a function, not an identifier
function ccallFunc(func, returnType, argTypes, args) {
  var stack = 0;
  function toC(value, type) {
    if (type == 'string') {
      if (value === null || value === undefined || value === 0) return 0; // null string
      value = intArrayFromString(value);
      type = 'array';
    }
    if (type == 'array') {
      if (!stack) stack = Runtime.stackSave();
      var ret = Runtime.stackAlloc(value.length);
      writeArrayToMemory(value, ret);
      return ret;
    }
    return value;
  }
  function fromC(value, type) {
    if (type == 'string') {
      return Pointer_stringify(value);
    }
    assert(type != 'array');
    return value;
  }
  var i = 0;
  var cArgs = args ? args.map(function(arg) {
    return toC(arg, argTypes[i++]);
  }) : [];
  var ret = fromC(func.apply(null, cArgs), returnType);
  if (stack) Runtime.stackRestore(stack);
  return ret;
}

// Returns a native JS wrapper for a C function. This is similar to ccall, but
// returns a function you can call repeatedly in a normal way. For example:
//
//   var my_function = cwrap('my_c_function', 'number', ['number', 'number']);
//   alert(my_function(5, 22));
//   alert(my_function(99, 12));
//
function cwrap(ident, returnType, argTypes) {
  var func = getCFunc(ident);
  return function() {
    return ccallFunc(func, returnType, argTypes, Array.prototype.slice.call(arguments));
  }
}
Module["cwrap"] = cwrap;

// Sets a value in memory in a dynamic way at run-time. Uses the
// type data. This is the same as makeSetValue, except that
// makeSetValue is done at compile-time and generates the needed
// code then, whereas this function picks the right code at
// run-time.
// Note that setValue and getValue only do *aligned* writes and reads!
// Note that ccall uses JS types as for defining types, while setValue and
// getValue need LLVM types ('i8', 'i32') - this is a lower-level operation
function setValue(ptr, value, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': HEAP8[(ptr)]=value; break;
      case 'i8': HEAP8[(ptr)]=value; break;
      case 'i16': HEAP16[((ptr)>>1)]=value; break;
      case 'i32': HEAP32[((ptr)>>2)]=value; break;
      case 'i64': (tempI64 = [value>>>0,(tempDouble=value,Math_abs(tempDouble) >= 1 ? (tempDouble > 0 ? Math_min(Math_floor((tempDouble)/4294967296), 4294967295)>>>0 : (~~(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296)))>>>0) : 0)],HEAP32[((ptr)>>2)]=tempI64[0],HEAP32[(((ptr)+(4))>>2)]=tempI64[1]); break;
      case 'float': HEAPF32[((ptr)>>2)]=value; break;
      case 'double': HEAPF64[((ptr)>>3)]=value; break;
      default: abort('invalid type for setValue: ' + type);
    }
}
Module['setValue'] = setValue;

// Parallel to setValue.
function getValue(ptr, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': return HEAP8[(ptr)];
      case 'i8': return HEAP8[(ptr)];
      case 'i16': return HEAP16[((ptr)>>1)];
      case 'i32': return HEAP32[((ptr)>>2)];
      case 'i64': return HEAP32[((ptr)>>2)];
      case 'float': return HEAPF32[((ptr)>>2)];
      case 'double': return HEAPF64[((ptr)>>3)];
      default: abort('invalid type for setValue: ' + type);
    }
  return null;
}
Module['getValue'] = getValue;

var ALLOC_NORMAL = 0; // Tries to use _malloc()
var ALLOC_STACK = 1; // Lives for the duration of the current function call
var ALLOC_STATIC = 2; // Cannot be freed
var ALLOC_DYNAMIC = 3; // Cannot be freed except through sbrk
var ALLOC_NONE = 4; // Do not allocate
Module['ALLOC_NORMAL'] = ALLOC_NORMAL;
Module['ALLOC_STACK'] = ALLOC_STACK;
Module['ALLOC_STATIC'] = ALLOC_STATIC;
Module['ALLOC_DYNAMIC'] = ALLOC_DYNAMIC;
Module['ALLOC_NONE'] = ALLOC_NONE;

// allocate(): This is for internal use. You can use it yourself as well, but the interface
//             is a little tricky (see docs right below). The reason is that it is optimized
//             for multiple syntaxes to save space in generated code. So you should
//             normally not use allocate(), and instead allocate memory using _malloc(),
//             initialize it with setValue(), and so forth.
// @slab: An array of data, or a number. If a number, then the size of the block to allocate,
//        in *bytes* (note that this is sometimes confusing: the next parameter does not
//        affect this!)
// @types: Either an array of types, one for each byte (or 0 if no type at that position),
//         or a single type which is used for the entire block. This only matters if there
//         is initial data - if @slab is a number, then this does not matter at all and is
//         ignored.
// @allocator: How to allocate memory, see ALLOC_*
function allocate(slab, types, allocator, ptr) {
  var zeroinit, size;
  if (typeof slab === 'number') {
    zeroinit = true;
    size = slab;
  } else {
    zeroinit = false;
    size = slab.length;
  }

  var singleType = typeof types === 'string' ? types : null;

  var ret;
  if (allocator == ALLOC_NONE) {
    ret = ptr;
  } else {
    ret = [_malloc, Runtime.stackAlloc, Runtime.staticAlloc, Runtime.dynamicAlloc][allocator === undefined ? ALLOC_STATIC : allocator](Math.max(size, singleType ? 1 : types.length));
  }

  if (zeroinit) {
    var ptr = ret, stop;
    assert((ret & 3) == 0);
    stop = ret + (size & ~3);
    for (; ptr < stop; ptr += 4) {
      HEAP32[((ptr)>>2)]=0;
    }
    stop = ret + size;
    while (ptr < stop) {
      HEAP8[((ptr++)|0)]=0;
    }
    return ret;
  }

  if (singleType === 'i8') {
    if (slab.subarray || slab.slice) {
      HEAPU8.set(slab, ret);
    } else {
      HEAPU8.set(new Uint8Array(slab), ret);
    }
    return ret;
  }

  var i = 0, type, typeSize, previousType;
  while (i < size) {
    var curr = slab[i];

    if (typeof curr === 'function') {
      curr = Runtime.getFunctionIndex(curr);
    }

    type = singleType || types[i];
    if (type === 0) {
      i++;
      continue;
    }
    assert(type, 'Must know what type to store in allocate!');

    if (type == 'i64') type = 'i32'; // special case: we have one i32 here, and one i32 later

    setValue(ret+i, curr, type);

    // no need to look up size unless type changes, so cache it
    if (previousType !== type) {
      typeSize = Runtime.getNativeTypeSize(type);
      previousType = type;
    }
    i += typeSize;
  }

  return ret;
}
Module['allocate'] = allocate;

function Pointer_stringify(ptr, /* optional */ length) {
  // TODO: use TextDecoder
  // Find the length, and check for UTF while doing so
  var hasUtf = false;
  var t;
  var i = 0;
  while (1) {
    assert(ptr + i < TOTAL_MEMORY);
    t = HEAPU8[(((ptr)+(i))|0)];
    if (t >= 128) hasUtf = true;
    else if (t == 0 && !length) break;
    i++;
    if (length && i == length) break;
  }
  if (!length) length = i;

  var ret = '';

  if (!hasUtf) {
    var MAX_CHUNK = 1024; // split up into chunks, because .apply on a huge string can overflow the stack
    var curr;
    while (length > 0) {
      curr = String.fromCharCode.apply(String, HEAPU8.subarray(ptr, ptr + Math.min(length, MAX_CHUNK)));
      ret = ret ? ret + curr : curr;
      ptr += MAX_CHUNK;
      length -= MAX_CHUNK;
    }
    return ret;
  }

  var utf8 = new Runtime.UTF8Processor();
  for (i = 0; i < length; i++) {
    assert(ptr + i < TOTAL_MEMORY);
    t = HEAPU8[(((ptr)+(i))|0)];
    ret += utf8.processCChar(t);
  }
  return ret;
}
Module['Pointer_stringify'] = Pointer_stringify;

// Given a pointer 'ptr' to a null-terminated UTF16LE-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.
function UTF16ToString(ptr) {
  var i = 0;

  var str = '';
  while (1) {
    var codeUnit = HEAP16[(((ptr)+(i*2))>>1)];
    if (codeUnit == 0)
      return str;
    ++i;
    // fromCharCode constructs a character from a UTF-16 code unit, so we can pass the UTF16 string right through.
    str += String.fromCharCode(codeUnit);
  }
}
Module['UTF16ToString'] = UTF16ToString;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF16LE form. The copy will require at most (str.length*2+1)*2 bytes of space in the HEAP.
function stringToUTF16(str, outPtr) {
  for(var i = 0; i < str.length; ++i) {
    // charCodeAt returns a UTF-16 encoded code unit, so it can be directly written to the HEAP.
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    HEAP16[(((outPtr)+(i*2))>>1)]=codeUnit;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP16[(((outPtr)+(str.length*2))>>1)]=0;
}
Module['stringToUTF16'] = stringToUTF16;

// Given a pointer 'ptr' to a null-terminated UTF32LE-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.
function UTF32ToString(ptr) {
  var i = 0;

  var str = '';
  while (1) {
    var utf32 = HEAP32[(((ptr)+(i*4))>>2)];
    if (utf32 == 0)
      return str;
    ++i;
    // Gotcha: fromCharCode constructs a character from a UTF-16 encoded code (pair), not from a Unicode code point! So encode the code point to UTF-16 for constructing.
    if (utf32 >= 0x10000) {
      var ch = utf32 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    } else {
      str += String.fromCharCode(utf32);
    }
  }
}
Module['UTF32ToString'] = UTF32ToString;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF32LE form. The copy will require at most (str.length+1)*4 bytes of space in the HEAP,
// but can use less, since str.length does not return the number of characters in the string, but the number of UTF-16 code units in the string.
function stringToUTF32(str, outPtr) {
  var iChar = 0;
  for(var iCodeUnit = 0; iCodeUnit < str.length; ++iCodeUnit) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    var codeUnit = str.charCodeAt(iCodeUnit); // possibly a lead surrogate
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) {
      var trailSurrogate = str.charCodeAt(++iCodeUnit);
      codeUnit = 0x10000 + ((codeUnit & 0x3FF) << 10) | (trailSurrogate & 0x3FF);
    }
    HEAP32[(((outPtr)+(iChar*4))>>2)]=codeUnit;
    ++iChar;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP32[(((outPtr)+(iChar*4))>>2)]=0;
}
Module['stringToUTF32'] = stringToUTF32;

function demangle(func) {
  var i = 3;
  // params, etc.
  var basicTypes = {
    'v': 'void',
    'b': 'bool',
    'c': 'char',
    's': 'short',
    'i': 'int',
    'l': 'long',
    'f': 'float',
    'd': 'double',
    'w': 'wchar_t',
    'a': 'signed char',
    'h': 'unsigned char',
    't': 'unsigned short',
    'j': 'unsigned int',
    'm': 'unsigned long',
    'x': 'long long',
    'y': 'unsigned long long',
    'z': '...'
  };
  var subs = [];
  var first = true;
  function dump(x) {
    //return;
    if (x) Module.print(x);
    Module.print(func);
    var pre = '';
    for (var a = 0; a < i; a++) pre += ' ';
    Module.print (pre + '^');
  }
  function parseNested() {
    i++;
    if (func[i] === 'K') i++; // ignore const
    var parts = [];
    while (func[i] !== 'E') {
      if (func[i] === 'S') { // substitution
        i++;
        var next = func.indexOf('_', i);
        var num = func.substring(i, next) || 0;
        parts.push(subs[num] || '?');
        i = next+1;
        continue;
      }
      if (func[i] === 'C') { // constructor
        parts.push(parts[parts.length-1]);
        i += 2;
        continue;
      }
      var size = parseInt(func.substr(i));
      var pre = size.toString().length;
      if (!size || !pre) { i--; break; } // counter i++ below us
      var curr = func.substr(i + pre, size);
      parts.push(curr);
      subs.push(curr);
      i += pre + size;
    }
    i++; // skip E
    return parts;
  }
  function parse(rawList, limit, allowVoid) { // main parser
    limit = limit || Infinity;
    var ret = '', list = [];
    function flushList() {
      return '(' + list.join(', ') + ')';
    }
    var name;
    if (func[i] === 'N') {
      // namespaced N-E
      name = parseNested().join('::');
      limit--;
      if (limit === 0) return rawList ? [name] : name;
    } else {
      // not namespaced
      if (func[i] === 'K' || (first && func[i] === 'L')) i++; // ignore const and first 'L'
      var size = parseInt(func.substr(i));
      if (size) {
        var pre = size.toString().length;
        name = func.substr(i + pre, size);
        i += pre + size;
      }
    }
    first = false;
    if (func[i] === 'I') {
      i++;
      var iList = parse(true);
      var iRet = parse(true, 1, true);
      ret += iRet[0] + ' ' + name + '<' + iList.join(', ') + '>';
    } else {
      ret = name;
    }
    paramLoop: while (i < func.length && limit-- > 0) {
      //dump('paramLoop');
      var c = func[i++];
      if (c in basicTypes) {
        list.push(basicTypes[c]);
      } else {
        switch (c) {
          case 'P': list.push(parse(true, 1, true)[0] + '*'); break; // pointer
          case 'R': list.push(parse(true, 1, true)[0] + '&'); break; // reference
          case 'L': { // literal
            i++; // skip basic type
            var end = func.indexOf('E', i);
            var size = end - i;
            list.push(func.substr(i, size));
            i += size + 2; // size + 'EE'
            break;
          }
          case 'A': { // array
            var size = parseInt(func.substr(i));
            i += size.toString().length;
            if (func[i] !== '_') throw '?';
            i++; // skip _
            list.push(parse(true, 1, true)[0] + ' [' + size + ']');
            break;
          }
          case 'E': break paramLoop;
          default: ret += '?' + c; break paramLoop;
        }
      }
    }
    if (!allowVoid && list.length === 1 && list[0] === 'void') list = []; // avoid (void)
    if (rawList) {
      if (ret) {
        list.push(ret + '?');
      }
      return list;
    } else {
      return ret + flushList();
    }
  }
  try {
    // Special-case the entry point, since its name differs from other name mangling.
    if (func == 'Object._main' || func == '_main') {
      return 'main()';
    }
    if (typeof func === 'number') func = Pointer_stringify(func);
    if (func[0] !== '_') return func;
    if (func[1] !== '_') return func; // C function
    if (func[2] !== 'Z') return func;
    switch (func[3]) {
      case 'n': return 'operator new()';
      case 'd': return 'operator delete()';
    }
    return parse();
  } catch(e) {
    return func;
  }
}

function demangleAll(text) {
  return text.replace(/__Z[\w\d_]+/g, function(x) { var y = demangle(x); return x === y ? x : (x + ' [' + y + ']') });
}

function stackTrace() {
  var stack = new Error().stack;
  return stack ? demangleAll(stack) : '(no stack trace available)'; // Stack trace is not available at least on IE10 and Safari 6.
}

// Memory management

var PAGE_SIZE = 4096;
function alignMemoryPage(x) {
  return (x+4095)&-4096;
}

var HEAP;
var HEAP8, HEAPU8, HEAP16, HEAPU16, HEAP32, HEAPU32, HEAPF32, HEAPF64;

var STATIC_BASE = 0, STATICTOP = 0, staticSealed = false; // static area
var STACK_BASE = 0, STACKTOP = 0, STACK_MAX = 0; // stack area
var DYNAMIC_BASE = 0, DYNAMICTOP = 0; // dynamic area handled by sbrk

function enlargeMemory() {
  abort('Cannot enlarge memory arrays. Either (1) compile with -s TOTAL_MEMORY=X with X higher than the current value ' + TOTAL_MEMORY + ', (2) compile with ALLOW_MEMORY_GROWTH which adjusts the size at runtime but prevents some optimizations, or (3) set Module.TOTAL_MEMORY before the program runs.');
}

var TOTAL_STACK = Module['TOTAL_STACK'] || 524288;
var TOTAL_MEMORY = Module['TOTAL_MEMORY'] || 1572864;
var FAST_MEMORY = Module['FAST_MEMORY'] || 2097152;


// Initialize the runtime's memory
// check for full engine support (use string 'subarray' to avoid closure compiler confusion)
assert(typeof Int32Array !== 'undefined' && typeof Float64Array !== 'undefined' && !!(new Int32Array(1)['subarray']) && !!(new Int32Array(1)['set']),
       'JS engine does not provide full typed array support');

var buffer = new ArrayBuffer(TOTAL_MEMORY);
HEAP8 = new Int8Array(buffer);
HEAP16 = new Int16Array(buffer);
HEAP32 = new Int32Array(buffer);
HEAPU8 = new Uint8Array(buffer);
HEAPU16 = new Uint16Array(buffer);
HEAPU32 = new Uint32Array(buffer);
HEAPF32 = new Float32Array(buffer);
HEAPF64 = new Float64Array(buffer);

// Endianness check (note: assumes compiler arch was little-endian)
HEAP32[0] = 255;
assert(HEAPU8[0] === 255 && HEAPU8[3] === 0, 'Typed arrays 2 must be run on a little-endian system');

Module['HEAP'] = HEAP;
Module['HEAP8'] = HEAP8;
Module['HEAP16'] = HEAP16;
Module['HEAP32'] = HEAP32;
Module['HEAPU8'] = HEAPU8;
Module['HEAPU16'] = HEAPU16;
Module['HEAPU32'] = HEAPU32;
Module['HEAPF32'] = HEAPF32;
Module['HEAPF64'] = HEAPF64;

function callRuntimeCallbacks(callbacks) {
  while(callbacks.length > 0) {
    var callback = callbacks.shift();
    if (typeof callback == 'function') {
      callback();
      continue;
    }
    var func = callback.func;
    if (typeof func === 'number') {
      if (callback.arg === undefined) {
        Runtime.dynCall('v', func);
      } else {
        Runtime.dynCall('vi', func, [callback.arg]);
      }
    } else {
      func(callback.arg === undefined ? null : callback.arg);
    }
  }
}

var __ATPRERUN__  = []; // functions called before the runtime is initialized
var __ATINIT__    = []; // functions called during startup
var __ATMAIN__    = []; // functions called when main() is to be run
var __ATEXIT__    = []; // functions called during shutdown
var __ATPOSTRUN__ = []; // functions called after the runtime has exited

var runtimeInitialized = false;

function preRun() {
  // compatibility - merge in anything from Module['preRun'] at this time
  if (Module['preRun']) {
    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
    while (Module['preRun'].length) {
      addOnPreRun(Module['preRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPRERUN__);
}

function ensureInitRuntime() {
  if (runtimeInitialized) return;
  runtimeInitialized = true;
  callRuntimeCallbacks(__ATINIT__);
}

function preMain() {
  callRuntimeCallbacks(__ATMAIN__);
}

function exitRuntime() {
  if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
    Module.printErr('Exiting runtime. Any attempt to access the compiled C code may fail from now. If you want to keep the runtime alive, set Module["noExitRuntime"] = true or build with -s NO_EXIT_RUNTIME=1');
  }
  callRuntimeCallbacks(__ATEXIT__);
}

function postRun() {
  // compatibility - merge in anything from Module['postRun'] at this time
  if (Module['postRun']) {
    if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
    while (Module['postRun'].length) {
      addOnPostRun(Module['postRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPOSTRUN__);
}

function addOnPreRun(cb) {
  __ATPRERUN__.unshift(cb);
}
Module['addOnPreRun'] = Module.addOnPreRun = addOnPreRun;

function addOnInit(cb) {
  __ATINIT__.unshift(cb);
}
Module['addOnInit'] = Module.addOnInit = addOnInit;

function addOnPreMain(cb) {
  __ATMAIN__.unshift(cb);
}
Module['addOnPreMain'] = Module.addOnPreMain = addOnPreMain;

function addOnExit(cb) {
  __ATEXIT__.unshift(cb);
}
Module['addOnExit'] = Module.addOnExit = addOnExit;

function addOnPostRun(cb) {
  __ATPOSTRUN__.unshift(cb);
}
Module['addOnPostRun'] = Module.addOnPostRun = addOnPostRun;

// Tools

// This processes a JS string into a C-line array of numbers, 0-terminated.
// For LLVM-originating strings, see parser.js:parseLLVMString function
function intArrayFromString(stringy, dontAddNull, length /* optional */) {
  var ret = (new Runtime.UTF8Processor()).processJSString(stringy);
  if (length) {
    ret.length = length;
  }
  if (!dontAddNull) {
    ret.push(0);
  }
  return ret;
}
Module['intArrayFromString'] = intArrayFromString;

function intArrayToString(array) {
  var ret = [];
  for (var i = 0; i < array.length; i++) {
    var chr = array[i];
    if (chr > 0xFF) {
        assert(false, 'Character code ' + chr + ' (' + String.fromCharCode(chr) + ')  at offset ' + i + ' not in 0x00-0xFF.');
      chr &= 0xFF;
    }
    ret.push(String.fromCharCode(chr));
  }
  return ret.join('');
}
Module['intArrayToString'] = intArrayToString;

// Write a Javascript array to somewhere in the heap
function writeStringToMemory(string, buffer, dontAddNull) {
  var array = intArrayFromString(string, dontAddNull);
  var i = 0;
  while (i < array.length) {
    var chr = array[i];
    HEAP8[(((buffer)+(i))|0)]=chr;
    i = i + 1;
  }
}
Module['writeStringToMemory'] = writeStringToMemory;

function writeArrayToMemory(array, buffer) {
  for (var i = 0; i < array.length; i++) {
    HEAP8[(((buffer)+(i))|0)]=array[i];
  }
}
Module['writeArrayToMemory'] = writeArrayToMemory;

function writeAsciiToMemory(str, buffer, dontAddNull) {
  for (var i = 0; i < str.length; i++) {
    assert(str.charCodeAt(i) === str.charCodeAt(i)&0xff);
    HEAP8[(((buffer)+(i))|0)]=str.charCodeAt(i);
  }
  if (!dontAddNull) HEAP8[(((buffer)+(str.length))|0)]=0;
}
Module['writeAsciiToMemory'] = writeAsciiToMemory;

function unSign(value, bits, ignore) {
  if (value >= 0) {
    return value;
  }
  return bits <= 32 ? 2*Math.abs(1 << (bits-1)) + value // Need some trickery, since if bits == 32, we are right at the limit of the bits JS uses in bitshifts
                    : Math.pow(2, bits)         + value;
}
function reSign(value, bits, ignore) {
  if (value <= 0) {
    return value;
  }
  var half = bits <= 32 ? Math.abs(1 << (bits-1)) // abs is needed if bits == 32
                        : Math.pow(2, bits-1);
  if (value >= half && (bits <= 32 || value > half)) { // for huge values, we can hit the precision limit and always get true here. so don't do that
                                                       // but, in general there is no perfect solution here. With 64-bit ints, we get rounding and errors
                                                       // TODO: In i64 mode 1, resign the two parts separately and safely
    value = -2*half + value; // Cannot bitshift half, as it may be at the limit of the bits JS uses in bitshifts
  }
  return value;
}

// check for imul support, and also for correctness ( https://bugs.webkit.org/show_bug.cgi?id=126345 )
if (!Math['imul'] || Math['imul'](0xffffffff, 5) !== -5) Math['imul'] = function imul(a, b) {
  var ah  = a >>> 16;
  var al = a & 0xffff;
  var bh  = b >>> 16;
  var bl = b & 0xffff;
  return (al*bl + ((ah*bl + al*bh) << 16))|0;
};
Math.imul = Math['imul'];


var Math_abs = Math.abs;
var Math_cos = Math.cos;
var Math_sin = Math.sin;
var Math_tan = Math.tan;
var Math_acos = Math.acos;
var Math_asin = Math.asin;
var Math_atan = Math.atan;
var Math_atan2 = Math.atan2;
var Math_exp = Math.exp;
var Math_log = Math.log;
var Math_sqrt = Math.sqrt;
var Math_ceil = Math.ceil;
var Math_floor = Math.floor;
var Math_pow = Math.pow;
var Math_imul = Math.imul;
var Math_fround = Math.fround;
var Math_min = Math.min;

// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// PRE_RUN_ADDITIONS (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
var runDependencies = 0;
var runDependencyWatcher = null;
var dependenciesFulfilled = null; // overridden to take different actions when all run dependencies are fulfilled
var runDependencyTracking = {};

function addRunDependency(id) {
  runDependencies++;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(!runDependencyTracking[id]);
    runDependencyTracking[id] = 1;
    if (runDependencyWatcher === null && typeof setInterval !== 'undefined') {
      // Check for missing dependencies every few seconds
      runDependencyWatcher = setInterval(function() {
        var shown = false;
        for (var dep in runDependencyTracking) {
          if (!shown) {
            shown = true;
            Module.printErr('still waiting on run dependencies:');
          }
          Module.printErr('dependency: ' + dep);
        }
        if (shown) {
          Module.printErr('(end of list)');
        }
      }, 10000);
    }
  } else {
    Module.printErr('warning: run dependency added without ID');
  }
}
Module['addRunDependency'] = addRunDependency;
function removeRunDependency(id) {
  runDependencies--;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(runDependencyTracking[id]);
    delete runDependencyTracking[id];
  } else {
    Module.printErr('warning: run dependency removed without ID');
  }
  if (runDependencies == 0) {
    if (runDependencyWatcher !== null) {
      clearInterval(runDependencyWatcher);
      runDependencyWatcher = null;
    }
    if (dependenciesFulfilled) {
      var callback = dependenciesFulfilled;
      dependenciesFulfilled = null;
      callback(); // can add another dependenciesFulfilled
    }
  }
}
Module['removeRunDependency'] = removeRunDependency;

Module["preloadedImages"] = {}; // maps url to image data
Module["preloadedAudios"] = {}; // maps url to audio data


var memoryInitializer = null;

// === Body ===



STATIC_BASE = 8;

STATICTOP = STATIC_BASE + 141608;


/* global initializers */ __ATINIT__.push({ func: function() { runPostSets() } });















var _stdout;
var _stdout=_stdout=allocate(1, "i32*", ALLOC_STATIC);
var _stderr;
var _stderr=_stderr=allocate(1, "i32*", ALLOC_STATIC);




















































































































































































































































































































































































































var ___progname;
































var __ZTVN10__cxxabiv120__si_class_type_infoE;






var __ZTISt9exception;
var __ZTISt9exception=__ZTISt9exception=allocate([allocate([1,0,0,0,0,0,0], "i8", ALLOC_STATIC)+8, 0], "i32", ALLOC_STATIC);



























var ___iswctype_l;
var _strcoll_l;
var _strxfrm_l;
var ___towlower_l;
var ___towupper_l;
var ___wctype_l;
var _lgamma_r;
var _lgammaf_r;
var _lgammal_r;
var _optreset;
var ___posix_getopt;
var _fputwc_unlocked;
var _putwc_unlocked;
var _fputws_unlocked;
var _memrchr;
var _stpcpy;
var _strchrnul;
var _strdup;
var __ZNSt9bad_allocC1Ev;
var __ZNSt9bad_allocD1Ev;
var __ZNSt20bad_array_new_lengthC1Ev;
var __ZNSt20bad_array_new_lengthD1Ev;
var __ZNSt20bad_array_new_lengthD2Ev;
var __ZNSt16bad_array_lengthC1Ev;
var __ZNSt16bad_array_lengthD1Ev;
var __ZNSt16bad_array_lengthD2Ev;
var ___strtof_l;
var ___strtod_l;
var ___strtold_l;
/* memory initializer */ allocate([16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,18,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,19,16,16,16,16,16,16,16,16,16,16,20,21,22,23,24,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,25,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,26,16,16,16,16,27,16,16,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,28,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,17,17,16,16,16,29,30,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,31,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,32,16,16,16,16,16,16,16,16,16,16,16,16,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,0,0,0,0,0,0,0,0,248,0,0,0,0,0,0,0,0,0,0,252,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,251,255,255,255,255,255,255,255,255,255,255,15,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,63,0,0,0,255,15,255,255,255,255,255,255,255,127,254,255,255,255,255,255,255,255,255,255,127,254,255,255,255,255,255,255,255,255,255,255,255,255,224,255,255,255,255,63,254,255,255,255,255,255,255,255,255,255,255,127,255,255,255,255,255,7,255,255,255,255,15,0,255,255,255,255,255,127,255,255,255,255,255,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,127,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,0,0,0,0,0,0,0,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,31,255,255,255,255,255,255,127,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,31,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,15,0,255,255,127,248,255,255,255,255,255,15,0,0,255,3,0,0,255,255,255,255,247,255,127,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,255,255,255,255,255,255,255,255,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,127,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,0,255,255,255,255,255,7,255,1,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,97,108,110,117,109,0,97,108,112,104,97,0,98,108,97,110,107,0,99,110,116,114,108,0,100,105,103,105,116,0,103,114,97,112,104,0,108,111,119,101,114,0,112,114,105,110,116,0,112,117,110,99,116,0,115,112,97,99,101,0,117,112,112,101,114,0,120,100,105,103,105,116,0,0,0,0,0,0,0,0,116,0,0,0,144,27,2,0,110,0,0,0,24,32,2,0,114,0,0,0,192,30,2,0,102,0,0,0,16,30,2,0,97,0,0,0,232,28,2,0,101,0,0,0,32,28,2,0,119,0,0,0,56,27,2,0,87,0,0,0,56,26,2,0,115,0,0,0,56,25,2,0,83,0,0,0,80,24,2,0,100,0,0,0,80,34,2,0,68,0,0,0,0,33,2,0,0,0,0,0,0,0,0,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,0,1,2,3,4,5,6,7,8,9,255,255,255,255,255,255,255,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,255,255,255,255,255,255,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,0,0,0,0,0,0,0,16,16,16,18,19,20,21,22,23,24,25,26,27,28,29,30,31,16,16,32,16,16,16,33,34,35,36,37,38,39,16,16,40,16,16,16,16,16,16,16,16,16,16,16,41,42,16,16,43,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,44,16,45,46,47,48,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,49,16,16,50,51,16,52,16,16,16,16,16,16,16,16,53,16,16,16,16,16,54,55,16,16,16,16,56,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,57,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,58,59,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,248,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,255,191,182,0,0,0,0,0,0,0,31,0,255,7,0,0,0,0,0,248,255,255,0,0,1,0,0,0,0,0,0,0,0,0,0,0,192,191,159,61,0,0,0,128,2,0,0,0,255,255,255,7,0,0,0,0,0,0,0,0,0,0,192,255,1,0,0,0,0,0,0,248,15,0,0,0,192,251,239,62,0,0,0,0,0,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,240,255,255,127,7,0,0,0,0,0,0,20,254,33,254,0,12,0,0,0,2,0,0,0,0,0,0,16,30,32,0,0,12,0,0,0,6,0,0,0,0,0,0,16,134,57,2,0,0,0,35,0,6,0,0,0,0,0,0,16,190,33,0,0,12,0,0,0,2,0,0,0,0,0,0,144,30,32,64,0,12,0,0,0,4,0,0,0,0,0,0,0,1,32,0,0,0,0,0,0,0,0,0,0,0,0,0,192,193,61,96,0,12,0,0,0,0,0,0,0,0,0,0,144,64,48,0,0,12,0,0,0,0,0,0,0,0,0,0,0,30,32,0,0,12,0,0,0,0,0,0,0,0,0,0,0,0,4,92,0,0,0,0,0,0,0,0,0,0,0,242,7,128,127,0,0,0,0,0,0,0,0,0,0,0,0,242,27,0,63,0,0,0,0,0,0,0,0,0,3,0,0,160,2,0,0,0,0,0,0,254,127,223,224,255,254,255,255,255,31,64,0,0,0,0,0,0,0,0,0,0,0,0,224,253,102,0,0,0,195,1,0,30,0,100,32,0,32,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,224,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,28,0,0,0,28,0,0,0,12,0,0,0,12,0,0,0,0,0,0,0,176,63,64,254,15,32,0,0,0,0,0,56,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,135,1,4,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,1,0,0,0,0,0,0,64,127,229,31,248,159,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,15,0,0,0,0,0,208,23,4,0,0,0,0,248,15,0,3,0,0,0,60,11,0,0,0,0,0,0,64,163,3,0,0,0,0,0,0,240,207,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,247,255,253,33,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,127,0,0,240,0,248,0,0,0,124,0,0,0,0,0,0,31,252,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,0,60,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,247,63,0,0,0,128,0,0,0,0,0,0,0,0,0,0,3,0,68,8,0,0,96,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,0,0,0,255,255,3,0,0,0,0,0,192,63,0,0,128,255,3,0,0,0,0,0,7,0,0,0,0,0,200,19,0,0,0,0,0,0,0,0,0,0,0,0,0,126,102,0,8,16,0,0,0,0,0,0,0,0,0,0,0,0,157,193,2,0,0,0,0,48,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,32,33,0,0,0,0,0,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,0,0,127,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,32,110,240,0,0,0,0,0,135,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,255,127,0,0,0,0,0,0,0,3,0,0,0,0,0,120,38,0,0,0,0,0,0,0,0,7,0,0,0,128,239,31,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,192,127,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,40,191,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,3,248,255,231,15,0,0,0,60,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,28,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,18,16,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,16,16,34,35,16,36,37,38,39,40,41,42,43,16,44,45,46,17,47,48,17,17,49,17,17,17,50,51,52,53,54,55,56,57,17,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,58,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,59,16,60,61,62,63,64,65,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,66,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,67,16,16,68,16,69,70,71,16,72,16,73,16,16,16,16,74,75,76,77,16,16,78,16,79,80,16,16,16,16,81,16,16,16,16,16,16,16,16,16,16,16,16,16,82,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,83,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,84,85,86,87,16,16,88,89,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,90,16,91,92,93,94,95,96,97,98,16,16,16,16,16,16,16,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,0,0,0,0,254,255,0,252,1,0,0,248,1,0,0,120,0,0,0,0,255,251,223,251,0,0,128,0,0,0,128,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,0,252,255,224,175,255,255,255,255,255,255,255,255,255,255,223,255,255,255,255,255,32,64,176,0,0,0,0,0,0,0,0,0,0,0,0,0,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,252,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,252,0,0,0,0,0,134,254,255,255,255,0,64,73,0,0,0,0,0,24,0,223,255,0,200,0,0,0,0,0,0,0,1,0,60,0,0,0,0,0,0,0,0,0,0,0,0,16,224,1,30,0,96,255,191,0,0,0,0,0,0,255,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,248,207,3,0,0,0,3,0,32,255,127,0,0,0,78,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,252,0,0,0,0,0,0,0,0,0,16,0,32,30,0,48,0,1,0,0,0,0,0,0,0,0,16,0,32,0,0,0,0,252,15,0,0,0,0,0,0,0,16,0,32,0,0,0,0,0,0,0,0,0,0,0,0,0,16,0,32,0,0,0,0,3,0,0,0,0,0,0,0,0,16,0,32,0,0,0,0,253,0,0,0,0,0,0,0,0,0,0,32,0,0,0,0,255,7,0,0,0,0,0,0,0,0,0,32,0,0,0,0,0,255,0,0,0,0,0,0,0,16,0,32,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,32,0,0,0,0,63,2,0,0,0,0,0,0,0,0,0,4,0,0,0,0,16,0,0,0,0,0,0,128,0,128,192,223,0,12,0,0,0,0,0,0,0,0,0,0,0,0,0,31,0,0,0,0,0,0,254,255,255,255,0,252,255,255,0,0,0,0,0,0,0,0,252,0,0,0,0,0,0,192,255,223,255,7,0,0,0,0,0,0,0,0,0,0,128,6,0,252,0,0,24,62,0,0,128,191,0,204,0,0,0,0,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,0,0,0,0,96,255,255,255,31,0,0,255,3,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,96,0,0,1,0,0,24,0,0,0,0,0,0,0,0,0,56,0,0,0,0,16,0,0,0,112,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,48,0,0,254,127,47,0,0,255,3,255,127,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,14,49,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,196,255,255,255,255,0,0,0,192,0,0,0,0,0,0,0,0,1,0,224,159,0,0,0,0,127,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,0,16,0,0,252,255,255,255,31,0,0,0,0,0,12,0,0,0,0,0,0,64,0,12,240,0,0,0,0,0,0,192,248,0,0,0,0,0,0,0,192,0,0,0,0,0,0,0,0,255,0,255,255,255,33,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,127,0,0,240,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,160,3,224,0,224,0,224,0,96,128,248,255,255,255,252,255,255,255,255,255,127,31,252,241,127,255,127,0,0,255,255,255,3,0,0,255,255,255,255,1,0,123,3,208,193,175,66,0,12,31,188,255,255,0,0,0,0,0,2,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,15,0,255,255,255,255,127,0,0,0,255,7,0,0,255,255,255,255,255,255,255,255,255,255,63,0,0,0,0,0,0,252,255,255,254,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,31,255,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,224,135,3,254,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,128,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,127,255,15,0,0,0,0,0,0,0,0,255,255,255,251,255,255,255,255,255,255,255,255,255,255,15,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,63,0,0,0,255,15,30,255,255,255,1,252,193,224,0,0,0,0,0,0,0,0,0,0,0,30,1,0,0,0,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,0,0,0,0,255,255,255,255,15,0,0,0,255,255,255,127,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,127,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,255,127,0,0,0,0,0,0,192,0,224,0,0,0,0,0,0,0,0,0,0,0,128,15,112,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,0,255,255,127,0,3,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,68,8,0,0,0,15,255,3,0,0,0,0,0,0,240,0,0,0,0,0,0,0,0,0,16,192,0,0,255,255,3,7,0,0,0,0,0,248,0,0,0,0,8,128,0,0,0,0,0,0,0,0,0,0,8,0,255,63,0,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,240,0,0,128,11,0,0,0,0,0,0,0,128,2,0,0,192,0,0,67,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,56,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,252,255,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,48,255,255,255,3,127,0,255,255,255,255,247,255,127,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,254,255,0,252,1,0,0,248,1,0,0,248,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,127,127,0,48,135,255,255,255,255,255,143,255,0,0,0,0,0,0,224,255,255,7,255,15,0,0,0,0,0,0,255,255,255,255,255,63,0,0,0,0,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,192,143,0,0,0,128,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,135,255,0,255,1,0,0,0,224,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,254,0,0,0,255,0,0,0,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,127,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,192,63,252,255,63,0,0,0,3,0,0,0,0,0,0,254,3,0,0,0,0,0,0,0,0,0,0,0,0,0,24,0,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,225,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,7,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,63,0,255,255,255,255,127,254,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,63,0,0,0,0,255,255,255,255,255,255,255,255,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,255,255,255,255,255,127,0,255,255,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,8,0,0,0,8,0,0,32,0,0,0,32,0,0,128,0,0,0,128,0,0,0,2,0,0,0,2,0,0,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,255,255,255,255,255,15,255,255,255,255,255,255,255,255,255,255,255,255,15,0,255,127,254,127,254,255,254,255,0,0,0,0,255,7,255,255,255,127,255,255,255,255,255,255,255,15,255,255,255,255,255,7,0,0,0,0,0,0,0,0,192,255,255,255,7,0,255,255,255,255,255,7,255,1,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,1,0,191,255,255,255,255,255,255,255,255,31,255,255,15,0,255,255,255,255,223,7,0,0,255,255,1,0,255,255,255,255,255,255,255,127,253,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,30,255,255,255,255,255,255,255,63,15,0,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,248,255,255,255,255,255,255,255,255,225,255,0,0,0,0,0,0,255,255,255,255,255,255,255,255,63,0,0,0,0,0,0,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,18,17,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,17,34,35,36,17,37,38,39,40,41,42,43,44,17,45,46,47,16,16,48,16,16,16,16,16,16,16,49,50,51,16,52,53,16,16,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,54,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,55,17,17,17,17,56,17,57,58,59,60,61,62,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,63,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,17,64,65,17,66,67,68,69,70,71,72,73,16,16,16,74,75,76,77,78,16,16,16,79,80,16,16,16,16,81,16,16,16,16,16,16,16,16,16,17,17,17,82,83,16,16,16,16,16,16,16,16,16,16,16,17,17,17,17,84,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,17,17,85,16,16,16,16,86,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,87,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,88,89,90,91,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,92,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,0,0,0,0,0,0,0,0,254,255,255,7,254,255,255,7,0,0,0,0,0,4,32,4,255,255,127,255,255,255,127,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,195,255,3,0,31,80,0,0,0,0,0,0,0,0,0,0,32,0,0,0,0,0,223,60,64,215,255,255,251,255,255,255,255,255,255,255,255,255,191,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,3,252,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,0,254,255,255,255,127,2,254,255,255,255,255,0,0,0,0,0,255,191,182,0,255,255,255,7,7,0,0,0,255,7,255,255,255,255,255,255,255,254,255,195,255,255,255,255,255,255,255,255,255,255,255,255,239,31,254,225,255,159,0,0,255,255,255,255,255,255,0,224,255,255,255,255,255,255,255,255,255,255,255,255,3,0,255,255,255,255,255,7,48,4,255,255,255,252,255,31,0,0,255,255,255,1,0,0,0,0,0,0,0,0,253,31,0,0,0,0,0,0,240,3,255,127,255,255,255,255,255,255,255,239,255,223,225,255,207,255,254,254,238,159,249,255,255,253,197,227,159,89,128,176,207,255,3,0,238,135,249,255,255,253,109,195,135,25,2,94,192,255,63,0,238,191,251,255,255,253,237,227,191,27,1,0,207,255,0,0,238,159,249,255,255,253,237,227,159,25,192,176,207,255,2,0,236,199,61,214,24,199,255,195,199,29,129,0,192,255,0,0,238,223,253,255,255,253,239,227,223,29,96,3,207,255,0,0,236,223,253,255,255,253,239,227,223,29,96,64,207,255,6,0,236,223,253,255,255,255,255,231,223,93,128,0,207,255,0,252,236,255,127,252,255,255,251,47,127,128,95,255,0,0,12,0,254,255,255,255,255,127,255,7,63,32,255,3,0,0,0,0,150,37,240,254,174,236,255,59,95,32,255,243,0,0,0,0,1,0,0,0,255,3,0,0,255,254,255,255,255,31,254,255,3,255,255,254,255,255,255,31,0,0,0,0,0,0,0,0,255,255,255,255,255,255,127,249,255,3,255,255,231,193,255,255,127,64,255,51,255,255,255,255,191,32,255,255,255,255,255,247,255,255,255,255,255,255,255,255,255,61,127,61,255,255,255,255,255,61,255,255,255,255,61,127,61,255,127,255,255,255,255,255,255,255,61,255,255,255,255,255,255,255,255,135,0,0,0,0,255,255,0,0,255,255,255,255,255,255,255,255,255,255,31,0,254,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,159,255,255,254,255,255,7,255,255,255,255,255,255,255,255,255,199,1,0,255,223,15,0,255,255,15,0,255,255,15,0,255,223,13,0,255,255,255,255,255,255,207,255,255,1,128,16,255,3,0,0,0,0,255,3,255,255,255,255,255,255,255,255,255,255,255,0,255,255,255,255,255,7,255,255,255,255,255,255,255,255,63,0,255,255,255,31,255,15,255,1,192,255,255,255,255,63,31,0,255,255,255,255,255,15,255,255,255,3,255,3,0,0,0,0,255,255,255,15,255,255,255,255,255,255,255,127,254,255,31,0,255,3,255,3,128,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,255,239,255,239,15,255,3,0,0,0,0,255,255,255,255,255,243,255,255,255,255,255,255,191,255,3,0,255,255,255,255,255,255,63,0,255,227,255,255,255,255,255,63,0,0,0,0,0,0,0,0,0,0,0,0,0,222,111,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,0,0,0,0,0,0,0,0,255,255,63,63,255,255,255,255,63,63,255,170,255,255,255,63,255,255,255,255,255,255,223,95,220,31,207,15,255,31,220,31,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,128,0,0,255,31,0,0,0,0,0,0,0,0,0,0,0,0,132,252,47,62,80,189,255,243,224,67,0,0,255,255,255,255,255,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,192,255,255,255,255,255,255,3,0,0,255,255,255,255,255,127,255,255,255,255,255,127,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,31,120,12,0,255,255,255,255,191,32,255,255,255,255,255,255,255,128,0,0,255,255,127,0,127,127,127,127,127,127,127,127,255,255,255,255,0,0,0,0,0,128,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,224,0,0,0,254,3,62,31,254,255,255,255,255,255,255,255,255,255,127,224,254,255,255,255,255,255,255,255,255,255,255,247,224,255,255,255,255,63,254,255,255,255,255,255,255,255,255,255,255,127,0,0,255,255,255,7,0,0,0,0,0,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,63,0,0,0,0,0,0,0,0,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,31,0,0,0,0,0,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,31,0,0,0,0,0,0,0,0,255,255,255,255,255,63,255,31,255,255,255,15,0,0,255,255,255,255,255,127,240,143,255,255,255,128,255,255,255,255,255,255,255,255,255,255,0,0,0,0,128,255,252,255,255,255,255,255,255,255,255,255,255,255,255,121,15,0,255,7,0,0,0,0,0,0,0,0,0,255,187,247,255,255,255,0,0,0,255,255,255,255,255,255,15,0,255,255,255,255,255,255,255,255,15,0,255,3,0,0,252,8,255,255,255,255,255,7,255,255,255,255,7,0,255,255,255,31,255,255,255,255,255,255,247,255,0,128,255,3,0,0,0,0,255,255,255,255,255,255,127,0,255,63,255,3,255,255,127,4,255,255,255,255,255,255,255,127,5,0,0,56,255,255,60,0,126,126,126,0,127,127,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,7,255,3,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,15,0,255,255,127,248,255,255,255,255,255,15,255,255,255,255,255,255,255,255,255,255,255,255,255,63,255,255,255,255,255,255,255,255,255,255,255,255,255,3,0,0,0,0,127,0,248,224,255,253,127,95,219,255,255,255,255,255,255,255,255,255,255,255,255,255,3,0,0,0,248,255,255,255,255,255,255,255,255,255,255,255,255,63,0,0,255,255,255,255,255,255,255,255,252,255,255,255,255,255,255,0,0,0,0,0,255,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,223,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,31,0,0,255,3,254,255,255,7,254,255,255,7,192,255,255,255,255,255,255,255,255,255,255,127,252,252,252,28,0,0,0,0,255,239,255,255,127,255,255,183,255,63,255,63,0,0,0,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,7,0,0,0,0,0,0,0,0,255,255,255,255,255,255,31,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,31,255,255,255,255,255,255,1,0,0,0,0,0,255,255,255,127,0,0,255,255,255,7,0,0,0,0,0,0,255,255,255,63,255,255,255,255,15,255,62,0,0,0,0,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,63,255,3,0,0,0,0,0,0,0,0,0,0,63,253,255,255,255,255,191,145,255,255,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,63,0,255,255,255,3,0,0,0,0,0,0,0,0,255,255,255,255,255,255,255,192,0,0,0,0,0,0,0,0,111,240,239,254,255,255,15,0,0,0,0,0,255,255,255,31,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,255,63,0,255,255,63,0,255,255,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,255,255,255,255,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,255,255,255,63,0,0,0,192,255,0,0,252,255,255,255,255,255,255,1,0,0,255,255,255,1,255,3,255,255,255,255,255,255,199,255,0,0,0,0,0,0,0,0,255,255,255,255,255,255,255,255,30,0,255,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,255,63,0,255,3,0,0,0,0,0,0,255,255,255,255,255,255,255,255,255,255,255,255,255,127,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,255,255,255,255,255,255,255,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,127,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,255,255,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,255,255,255,31,0,255,255,255,255,255,127,0,0,248,255,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,255,255,255,255,255,223,255,255,255,255,255,255,255,255,223,100,222,255,235,239,255,255,255,255,255,255,255,191,231,223,223,255,255,255,123,95,252,253,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,63,255,255,255,253,255,255,247,255,255,255,247,255,255,223,255,255,255,223,255,255,127,255,255,255,127,255,255,255,253,255,255,255,253,255,255,247,207,255,255,255,255,255,255,239,255,255,255,150,254,247,10,132,234,150,170,150,247,247,94,255,251,255,15,238,251,255,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,2,0,0,0,2,0,0,0,2,0,0,0,2,0,0,0,3,0,0,0,3,0,0,0,3,0,0,0,3,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,5,0,0,0,5,0,0,0,5,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,4,0,0,0,5,0,0,0,6,0,0,0,7,0,0,0,8,0,0,0,9,0,0,0,10,0,0,0,11,0,0,0,13,0,0,0,15,0,0,0,17,0,0,0,19,0,0,0,23,0,0,0,27,0,0,0,31,0,0,0,35,0,0,0,43,0,0,0,51,0,0,0,59,0,0,0,67,0,0,0,83,0,0,0,99,0,0,0,115,0,0,0,131,0,0,0,163,0,0,0,195,0,0,0,227,0,0,0,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,2,0,0,0,2,0,0,0,3,0,0,0,3,0,0,0,4,0,0,0,4,0,0,0,5,0,0,0,5,0,0,0,6,0,0,0,6,0,0,0,7,0,0,0,7,0,0,0,8,0,0,0,8,0,0,0,9,0,0,0,9,0,0,0,10,0,0,0,10,0,0,0,11,0,0,0,11,0,0,0,12,0,0,0,12,0,0,0,13,0,0,0,13,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0,5,0,0,0,7,0,0,0,9,0,0,0,13,0,0,0,17,0,0,0,25,0,0,0,33,0,0,0,49,0,0,0,65,0,0,0,97,0,0,0,129,0,0,0,193,0,0,0,1,1,0,0,129,1,0,0,1,2,0,0,1,3,0,0,1,4,0,0,1,6,0,0,1,8,0,0,1,12,0,0,1,16,0,0,1,24,0,0,1,32,0,0,1,48,0,0,1,64,0,0,1,96,0,0,0,0,0,0,0,0,0,0,34,0,0,0,24,0,0,0,82,0,0,0,0,0,0,0,88,88,88,88,32,80,78,71,32,99,104,117,110,107,32,110,111,116,32,107,110,111,119,110,0,0,0,0,0,0,0,0,0,0,128,63,0,0,0,0,205,204,12,64,0,0,0,0,0,1,8,16,9,2,3,10,17,24,32,25,18,11,4,5,12,19,26,33,40,48,41,34,27,20,13,6,7,14,21,28,35,42,49,56,57,50,43,36,29,22,15,23,30,37,44,51,58,59,52,45,38,31,39,46,53,60,61,54,47,55,62,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,0,0,0,0,0,255,255,255,255,253,255,255,255,249,255,255,255], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE);
/* memory initializer */ allocate([241,255,255,255,225,255,255,255,193,255,255,255,129,255,255,255,1,255,255,255,1,254,255,255,1,252,255,255,1,248,255,255,1,240,255,255,1,224,255,255,1,192,255,255,1,128,255,255,0,0,128,63,0,0,0,0,46,186,232,62,0,0,0,0,0,255,85,0,17,0,0,0,1,0,0,0,0,0,0,0,8,0,0,0,8,0,0,0,8,0,0,0,4,0,0,0,4,0,0,0,2,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,8,0,0,0,8,0,0,0,4,0,0,0,4,0,0,0,2,0,0,0,2,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15,0,0,0,0,0,137,80,78,71,13,10,26,10,0,0,0,0,1,0,0,0,3,0,0,0,7,0,0,0,15,0,0,0,31,0,0,0,63,0,0,0,127,0,0,0,255,0,0,0,255,1,0,0,255,3,0,0,255,7,0,0,255,15,0,0,255,31,0,0,255,63,0,0,255,127,0,0,255,255,0,0,0,0,0,0,17,0,10,0,17,17,17,0,0,0,0,5,0,0,0,0,0,0,9,0,0,0,0,11,0,0,0,0,0,0,0,0,17,0,15,10,17,17,17,3,10,7,0,1,19,9,11,11,0,0,9,6,11,0,0,11,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,0,0,0,10,10,0,0,0,0,10,0,0,2,0,9,11,0,0,0,9,0,11,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,12,0,0,0,0,9,12,0,0,0,0,0,12,0,0,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,14,0,0,0,0,0,0,0,0,0,0,0,13,0,0,0,4,13,0,0,0,0,9,14,0,0,0,0,0,14,0,0,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,0,0,0,0,0,0,0,0,0,0,0,15,0,0,0,0,15,0,0,0,0,9,16,0,0,0,0,0,16,0,0,16,0,0,18,0,0,0,18,18,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,18,0,0,0,18,18,18,0,0,0,0,0,0,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,0,0,0,0,10,0,0,0,0,10,0,0,0,0,9,11,0,0,0,0,0,11,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,12,0,0,0,0,9,12,0,0,0,0,0,12,0,0,12,0,0,76,0,0,106,76,76,76,0,106,0,0,0,0,0,106,106,0,0,0,0,106,0,0,106,73,0,49,1,83,0,127,1,48,1,105,0,120,1,255,0,129,1,83,2,130,1,131,1,132,1,133,1,134,1,84,2,135,1,136,1,137,1,86,2,138,1,87,2,139,1,140,1,142,1,221,1,143,1,89,2,144,1,91,2,145,1,146,1,147,1,96,2,148,1,99,2,150,1,105,2,151,1,104,2,152,1,153,1,156,1,111,2,157,1,114,2,159,1,117,2,166,1,128,2,167,1,168,1,169,1,131,2,172,1,173,1,174,1,136,2,175,1,176,1,177,1,138,2,178,1,139,2,183,1,146,2,184,1,185,1,188,1,189,1,196,1,198,1,196,1,197,1,197,1,198,1,199,1,201,1,199,1,200,1,200,1,201,1,202,1,204,1,202,1,203,1,203,1,204,1,241,1,243,1,241,1,242,1,242,1,243,1,244,1,245,1,246,1,149,1,247,1,191,1,32,2,158,1,134,3,172,3,136,3,173,3,137,3,174,3,138,3,175,3,140,3,204,3,142,3,205,3,143,3,206,3,153,3,69,3,153,3,190,31,163,3,194,3,247,3,248,3,250,3,251,3,96,30,155,30,223,0,223,0,158,30,223,0,89,31,81,31,91,31,83,31,93,31,85,31,95,31,87,31,188,31,179,31,204,31,195,31,236,31,229,31,252,31,243,31,58,2,101,44,59,2,60,2,61,2,154,1,62,2,102,44,65,2,66,2,67,2,128,1,68,2,137,2,69,2,140,2,244,3,184,3,249,3,242,3,253,3,123,3,254,3,124,3,255,3,125,3,192,4,207,4,38,33,201,3,42,33,107,0,43,33,229,0,50,33,78,33,131,33,132,33,96,44,97,44,98,44,107,2,99,44,125,29,100,44,125,2,109,44,81,2,110,44,113,2,111,44,80,2,112,44,82,2,114,44,115,44,117,44,118,44,126,44,63,2,127,44,64,2,242,44,243,44,125,167,121,29,139,167,140,167,141,167,101,2,170,167,102,2,199,16,39,45,205,16,45,45,118,3,119,3,156,3,181,0,146,3,208,3,152,3,209,3,166,3,213,3,160,3,214,3,154,3,240,3,161,3,241,3,149,3,245,3,207,3,215,3,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,78,111,32,101,114,114,111,114,0,78,111,32,109,97,116,99,104,0,73,110,118,97,108,105,100,32,114,101,103,101,120,112,0,85,110,107,110,111,119,110,32,99,111,108,108,97,116,105,110,103,32,101,108,101,109,101,110,116,0,85,110,107,110,111,119,110,32,99,104,97,114,97,99,116,101,114,32,99,108,97,115,115,32,110,97,109,101,0,84,114,97,105,108,105,110,103,32,98,97,99,107,115,108,97,115,104,0,73,110,118,97,108,105,100,32,98,97,99,107,32,114,101,102,101,114,101,110,99,101,0,77,105,115,115,105,110,103,32,39,93,39,0,77,105,115,115,105,110,103,32,39,41,39,0,77,105,115,115,105,110,103,32,39,125,39,0,73,110,118,97,108,105,100,32,99,111,110,116,101,110,116,115,32,111,102,32,123,125,0,73,110,118,97,108,105,100,32,99,104,97,114,97,99,116,101,114,32,114,97,110,103,101,0,79,117,116,32,111,102,32,109,101,109,111,114,121,0,82,101,112,101,116,105,116,105,111,110,32,110,111,116,32,112,114,101,99,101,100,101,100,32,98,121,32,118,97,108,105,100,32,101,120,112,114,101,115,115,105,111,110,0,0,85,110,107,110,111,119,110,32,101,114,114,111,114,0,0,0,0,0,1,0,160,0,167,0,168,0,169,0,175,0,176,0,178,0,183,0,184,0,198,0,215,0,216,0,230,0,247,0,248,0,0,1,1,1,2,1,3,1,4,1,5,1,6,1,7,1,8,1,9,1,10,1,11,1,12,1,13,1,14,1,15,1,16,1,17,1,18,1,19,1,22,1,23,1,24,1,25,1,26,1,27,1,28,1,29,1,30,1,31,1,32,1,33,1,34,1,35,1,36,1,37,1,38,1,39,1,40,1,41,1,42,1,43,1,46,1,47,1,48,1,49,1,52,1,53,1,54,1,55,1,56,1,57,1,58,1,59,1,60,1,61,1,62,1,65,1,66,1,67,1,68,1,69,1,70,1,71,1,72,1,74,1,75,1,76,1,77,1,80,1,81,1,82,1,83,1,84,1,85,1,86,1,87,1,88,1,89,1,90,1,91,1,92,1,93,1,94,1,95,1,96,1,97,1,98,1,99,1,100,1,101,1,102,1,103,1,104,1,105,1,106,1,107,1,108,1,109,1,110,1,111,1,112,1,113,1,114,1,115,1,116,1,117,1,118,1,119,1,120,1,121,1,122,1,123,1,124,1,125,1,126,1,146,1,160,1,161,1,175,1,176,1,24,2,25,2,26,2,27,2,198,2,199,2,216,2,217,2,219,2,220,2,221,2,0,3,1,3,3,3,9,3,35,3,122,3,132,3,133,3,134,3,136,3,137,3,138,3,140,3,142,3,143,3,144,3,145,3,146,3,147,3,148,3,149,3,150,3,151,3,152,3,153,3,154,3,155,3,156,3,157,3,158,3,159,3,160,3,161,3,163,3,164,3,165,3,166,3,167,3,168,3,169,3,170,3,171,3,172,3,173,3,174,3,175,3,176,3,177,3,178,3,179,3,180,3,181,3,182,3,183,3,184,3,185,3,186,3,187,3,188,3,189,3,190,3,191,3,192,3,193,3,194,3,195,3,196,3,197,3,198,3,199,3,200,3,201,3,202,3,203,3,204,3,205,3,206,3,1,4,2,4,3,4,4,4,5,4,6,4,7,4,8,4,9,4,10,4,11,4,12,4,14,4,15,4,16,4,17,4,18,4,19,4,20,4,21,4,22,4,23,4,24,4,25,4,26,4,27,4,28,4,29,4,30,4,31,4,32,4,33,4,34,4,35,4,36,4,37,4,38,4,39,4,40,4,41,4,42,4,43,4,44,4,45,4,46,4,47,4,48,4,49,4,50,4,51,4,52,4,53,4,54,4,55,4,56,4,57,4,58,4,59,4,60,4,61,4,62,4,63,4,64,4,65,4,66,4,67,4,68,4,69,4,70,4,71,4,72,4,73,4,74,4,75,4,76,4,77,4,78,4,79,4,81,4,82,4,83,4,84,4,85,4,86,4,87,4,88,4,89,4,90,4,91,4,92,4,94,4,95,4,144,4,145,4,176,5,177,5,178,5,179,5,180,5,181,5,182,5,183,5,184,5,185,5,187,5,188,5,189,5,190,5,191,5,192,5,193,5,194,5,195,5,208,5,209,5,210,5,211,5,212,5,213,5,214,5,215,5,216,5,217,5,218,5,219,5,220,5,221,5,222,5,223,5,224,5,225,5,226,5,227,5,228,5,229,5,230,5,231,5,232,5,233,5,234,5,240,5,241,5,242,5,243,5,244,5,12,6,27,6,31,6,33,6,34,6,35,6,36,6,37,6,38,6,39,6,40,6,41,6,42,6,43,6,44,6,45,6,46,6,47,6,48,6,49,6,50,6,51,6,52,6,53,6,54,6,55,6,56,6,57,6,58,6,64,6,65,6,66,6,67,6,68,6,69,6,70,6,71,6,72,6,73,6,74,6,75,6,76,6,77,6,78,6,79,6,80,6,81,6,82,6,121,6,126,6,134,6,136,6,145,6,152,6,169,6,175,6,186,6,190,6,193,6,210,6,1,14,2,14,3,14,4,14,5,14,6,14,7,14,8,14,9,14,10,14,11,14,12,14,13,14,14,14,15,14,16,14,17,14,18,14,19,14,20,14,21,14,22,14,23,14,24,14,25,14,26,14,27,14,28,14,29,14,30,14,31,14,32,14,33,14,34,14,35,14,36,14,37,14,38,14,39,14,40,14,41,14,42,14,43,14,44,14,45,14,46,14,47,14,48,14,49,14,50,14,51,14,52,14,53,14,54,14,55,14,56,14,57,14,58,14,63,14,64,14,65,14,66,14,67,14,68,14,69,14,70,14,71,14,72,14,73,14,74,14,75,14,76,14,77,14,78,14,79,14,80,14,81,14,82,14,83,14,84,14,85,14,86,14,87,14,88,14,89,14,90,14,91,14,2,30,3,30,10,30,11,30,30,30,31,30,64,30,65,30,86,30,87,30,96,30,97,30,106,30,107,30,128,30,129,30,130,30,131,30,132,30,133,30,242,30,243,30,12,32,13,32,14,32,15,32,19,32,20,32,21,32,23,32,24,32,25,32,26,32,28,32,29,32,30,32,32,32,33,32,34,32,38,32,48,32,57,32,58,32,170,32,171,32,172,32,175,32,22,33,34,33,25,34,26,34,72,34,100,34,101,34,32,35,33,35,0,37,2,37,12,37,16,37,20,37,24,37,28,37,36,37,44,37,52,37,60,37,80,37,81,37,82,37,83,37,84,37,85,37,86,37,87,37,88,37,89,37,90,37,91,37,92,37,93,37,94,37,95,37,96,37,97,37,98,37,99,37,100,37,101,37,102,37,103,37,104,37,105,37,106,37,107,37,108,37,128,37,132,37,136,37,140,37,144,37,145,37,146,37,147,37,160,37,0,0,0,48,1,48,2,48,183,0,37,32,38,32,168,0,3,48,173,0,21,32,37,34,60,255,60,34,24,32,25,32,28,32,29,32,20,48,21,48,8,48,9,48,10,48,11,48,12,48,13,48,14,48,15,48,16,48,17,48,177,0,215,0,247,0,96,34,100,34,101,34,30,34,52,34,176,0,50,32,51,32,3,33,43,33,224,255,225,255,229,255,66,38,64,38,32,34,165,34,18,35,2,34,7,34,97,34,82,34,167,0,59,32,6,38,5,38,203,37,207,37,206,37,199,37,198,37,161,37,160,37,179,37,178,37,189,37,188,37,146,33,144,33,145,33,147,33,148,33,19,48,106,34,107,34,26,34,61,34,29,34,53,34,43,34,44,34,8,34,11,34,134,34,135,34,130,34,131,34,42,34,41,34,39,34,40,34,226,255,210,33,212,33,0,34,3,34,180,0,94,255,199,2,216,2,221,2,218,2,217,2,184,0,219,2,161,0,191,0,208,2,46,34,17,34,15,34,164,0,9,33,48,32,193,37,192,37,183,37,182,37,100,38,96,38,97,38,101,38,103,38,99,38,153,34,200,37,163,37,208,37,209,37,146,37,164,37,165,37,168,37,167,37,166,37,169,37,104,38,15,38,14,38,28,38,30,38,182,0,32,32,33,32,149,33,151,33,153,33,150,33,152,33,109,38,105,38,106,38,108,38,127,50,28,50,22,33,199,51,34,33,194,51,216,51,33,33,172,32,174,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,255,2,255,3,255,4,255,5,255,6,255,7,255,8,255,9,255,10,255,11,255,12,255,13,255,14,255,15,255,16,255,17,255,18,255,19,255,20,255,21,255,22,255,23,255,24,255,25,255,26,255,27,255,28,255,29,255,30,255,31,255,32,255,33,255,34,255,35,255,36,255,37,255,38,255,39,255,40,255,41,255,42,255,43,255,44,255,45,255,46,255,47,255,48,255,49,255,50,255,51,255,52,255,53,255,54,255,55,255,56,255,57,255,58,255,59,255,230,255,61,255,62,255,63,255,64,255,65,255,66,255,67,255,68,255,69,255,70,255,71,255,72,255,73,255,74,255,75,255,76,255,77,255,78,255,79,255,80,255,81,255,82,255,83,255,84,255,85,255,86,255,87,255,88,255,89,255,90,255,91,255,92,255,93,255,227,255,49,49,50,49,51,49,52,49,53,49,54,49,55,49,56,49,57,49,58,49,59,49,60,49,61,49,62,49,63,49,64,49,65,49,66,49,67,49,68,49,69,49,70,49,71,49,72,49,73,49,74,49,75,49,76,49,77,49,78,49,79,49,80,49,81,49,82,49,83,49,84,49,85,49,86,49,87,49,88,49,89,49,90,49,91,49,92,49,93,49,94,49,95,49,96,49,97,49,98,49,99,49,100,49,101,49,102,49,103,49,104,49,105,49,106,49,107,49,108,49,109,49,110,49,111,49,112,49,113,49,114,49,115,49,116,49,117,49,118,49,119,49,120,49,121,49,122,49,123,49,124,49,125,49,126,49,127,49,128,49,129,49,130,49,131,49,132,49,133,49,134,49,135,49,136,49,137,49,138,49,139,49,140,49,141,49,142,49,112,33,113,33,114,33,115,33,116,33,117,33,118,33,119,33,120,33,121,33,0,0,0,0,0,0,0,0,0,0,96,33,97,33,98,33,99,33,100,33,101,33,102,33,103,33,104,33,105,33,0,0,0,0,0,0,0,0,0,0,0,0,0,0,145,3,146,3,147,3,148,3,149,3,150,3,151,3,152,3,153,3,154,3,155,3,156,3,157,3,158,3,159,3,160,3,161,3,163,3,164,3,165,3,166,3,167,3,168,3,169,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,177,3,178,3,179,3,180,3,181,3,182,3,183,3,184,3,185,3,186,3,187,3,188,3,189,3,190,3,191,3,192,3,193,3,195,3,196,3,197,3,198,3,199,3,200,3,201,3,0,0,0,0,0,0,0,0,0,0,0,0,0,37,2,37,12,37,16,37,24,37,20,37,28,37,44,37,36,37,52,37,60,37,1,37,3,37,15,37,19,37,27,37,23,37,35,37,51,37,43,37,59,37,75,37,32,37,47,37,40,37,55,37,63,37,29,37,48,37,37,37,56,37,66,37,18,37,17,37,26,37,25,37,22,37,21,37,14,37,13,37,30,37,31,37,33,37,34,37,38,37,39,37,41,37,42,37,45,37,46,37,49,37,50,37,53,37,54,37,57,37,58,37,61,37,62,37,64,37,65,37,67,37,68,37,69,37,70,37,71,37,72,37,73,37,74,37,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,149,51,150,51,151,51,19,33,152,51,196,51,163,51,164,51,165,51,166,51,153,51,154,51,155,51,156,51,157,51,158,51,159,51,160,51,161,51,162,51,202,51,141,51,142,51,143,51,207,51,136,51,137,51,200,51,167,51,168,51,176,51,177,51,178,51,179,51,180,51,181,51,182,51,183,51,184,51,185,51,128,51,129,51,130,51,131,51,132,51,186,51,187,51,188,51,189,51,190,51,191,51,144,51,145,51,146,51,147,51,148,51,38,33,192,51,193,51,138,51,139,51,140,51,214,51,197,51,173,51,174,51,175,51,219,51,169,51,170,51,171,51,172,51,221,51,208,51,211,51,195,51,201,51,220,51,198,51,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,198,0,208,0,170,0,38,1,0,0,50,1,0,0,63,1,65,1,216,0,82,1,186,0,222,0,102,1,74,1,0,0,96,50,97,50,98,50,99,50,100,50,101,50,102,50,103,50,104,50,105,50,106,50,107,50,108,50,109,50,110,50,111,50,112,50,113,50,114,50,115,50,116,50,117,50,118,50,119,50,120,50,121,50,122,50,123,50,208,36,209,36,210,36,211,36,212,36,213,36,214,36,215,36,216,36,217,36,218,36,219,36,220,36,221,36,222,36,223,36,224,36,225,36,226,36,227,36,228,36,229,36,230,36,231,36,232,36,233,36,96,36,97,36,98,36,99,36,100,36,101,36,102,36,103,36,104,36,105,36,106,36,107,36,108,36,109,36,110,36,189,0,83,33,84,33,188,0,190,0,91,33,92,33,93,33,94,33,230,0,17,1,240,0,39,1,49,1,51,1,56,1,64,1,66,1,248,0,83,1,223,0,254,0,103,1,75,1,73,1,0,50,1,50,2,50,3,50,4,50,5,50,6,50,7,50,8,50,9,50,10,50,11,50,12,50,13,50,14,50,15,50,16,50,17,50,18,50,19,50,20,50,21,50,22,50,23,50,24,50,25,50,26,50,27,50,156,36,157,36,158,36,159,36,160,36,161,36,162,36,163,36,164,36,165,36,166,36,167,36,168,36,169,36,170,36,171,36,172,36,173,36,174,36,175,36,176,36,177,36,178,36,179,36,180,36,181,36,116,36,117,36,118,36,119,36,120,36,121,36,122,36,123,36,124,36,125,36,126,36,127,36,128,36,129,36,130,36,185,0,178,0,179,0,116,32,127,32,129,32,130,32,131,32,132,32,65,48,66,48,67,48,68,48,69,48,70,48,71,48,72,48,73,48,74,48,75,48,76,48,77,48,78,48,79,48,80,48,81,48,82,48,83,48,84,48,85,48,86,48,87,48,88,48,89,48,90,48,91,48,92,48,93,48,94,48,95,48,96,48,97,48,98,48,99,48,100,48,101,48,102,48,103,48,104,48,105,48,106,48,107,48,108,48,109,48,110,48,111,48,112,48,113,48,114,48,115,48,116,48,117,48,118,48,119,48,120,48,121,48,122,48,123,48,124,48,125,48,126,48,127,48,128,48,129,48,130,48,131,48,132,48,133,48,134,48,135,48,136,48,137,48,138,48,139,48,140,48,141,48,142,48,143,48,144,48,145,48,146,48,147,48,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,161,48,162,48,163,48,164,48,165,48,166,48,167,48,168,48,169,48,170,48,171,48,172,48,173,48,174,48,175,48,176,48,177,48,178,48,179,48,180,48,181,48,182,48,183,48,184,48,185,48,186,48,187,48,188,48,189,48,190,48,191,48,192,48,193,48,194,48,195,48,196,48,197,48,198,48,199,48,200,48,201,48,202,48,203,48,204,48,205,48,206,48,207,48,208,48,209,48,210,48,211,48,212,48,213,48,214,48,215,48,216,48,217,48,218,48,219,48,220,48,221,48,222,48,223,48,224,48,225,48,226,48,227,48,228,48,229,48,230,48,231,48,232,48,233,48,234,48,235,48,236,48,237,48,238,48,239,48,240,48,241,48,242,48,243,48,244,48,245,48,246,48,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,4,17,4,18,4,19,4,20,4,21,4,1,4,22,4,23,4,24,4,25,4,26,4,27,4,28,4,29,4,30,4,31,4,32,4,33,4,34,4,35,4,36,4,37,4,38,4,39,4,40,4,41,4,42,4,43,4,44,4,45,4,46,4,47,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,48,4,49,4,50,4,51,4,52,4,53,4,81,4,54,4,55,4,56,4,57,4,58,4,59,4,60,4,61,4,62,4,63,4,64,4,65,4,66,4,67,4,68,4,69,4,70,4,71,4,72,4,73,4,74,4,75,4,76,4,77,4,78,4,79,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,172,1,172,4,172,7,172,8,172,9,172,10,172,16,172,17,172,18,172,19,172,20,172,21,172,22,172,23,172,25,172,26,172,27,172,28,172,29,172,32,172,36,172,44,172,45,172,47,172,48,172,49,172,56,172,57,172,60,172,64,172,75,172,77,172,84,172,88,172,92,172,112,172,113,172,116,172,119,172,120,172,122,172,128,172,129,172,131,172,132,172,133,172,134,172,137,172,138,172,139,172,140,172,144,172,148,172,156,172,157,172,159,172,160,172,161,172,168,172,169,172,170,172,172,172,175,172,176,172,184,172,185,172,187,172,188,172,189,172,193,172,196,172,200,172,204,172,213,172,215,172,224,172,225,172,228,172,231,172,232,172,234,172,236,172,239,172,240,172,241,172,243,172,245,172,246,172,252,172,253,172,0,173,4,173,6,173,12,173,13,173,15,173,17,173,24,173,28,173,32,173,41,173,44,173,45,173,52,173,53,173,56,173,60,173,68,173,69,173,71,173,73,173,80,173,84,173,88,173,97,173,99,173,108,173,109,173,112,173,115,173,116,173,117,173,118,173,123,173,124,173,125,173,127,173,129,173,130,173,136,173,137,173,140,173,144,173,156,173,157,173,164,173,183,173,192,173,193,173,196,173,200,173,208,173,209,173,211,173,220,173,224,173,228,173,248,173,249,173,252,173,255,173,0,174,1,174,8,174,9,174,11,174,13,174,20,174,48,174,49,174,52,174,55,174,56,174,58,174,64,174,65,174,67,174,69,174,70,174,74,174,76,174,77,174,78,174,80,174,84,174,86,174,92,174,93,174,95,174,96,174,97,174,101,174,104,174,105,174,108,174,112,174,120,174,121,174,123,174,124,174,125,174,132,174,133,174,140,174,188,174,189,174,190,174,192,174,196,174,204,174,205,174,207,174,208,174,209,174,216,174,217,174,220,174,232,174,235,174,237,174,244,174,248,174,252,174,7,175,8,175,13,175,16,175,44,175,45,175,48,175,50,175,52,175,60,175,61,175,63,175,65,175,66,175,67,175,72,175,73,175,80,175,92,175,93,175,100,175,101,175,121,175,128,175,132,175,136,175,144,175,145,175,149,175,156,175,184,175,185,175,188,175,192,175,199,175,200,175,201,175,203,175,205,175,206,175,212,175,220,175,232,175,233,175,240,175,241,175,244,175,248,175,0,176,1,176,4,176,12,176,16,176,20,176,28,176,29,176,40,176,68,176,69,176,72,176,74,176,76,176,78,176,83,176,84,176,85,176,87,176,89,176,93,176,124,176,125,176,128,176,132,176,140,176,141,176,143,176,145,176,152,176,153,176,154,176,156,176,159,176,160,176,161,176,162,176,168,176,169,176,171,176,172,176,173,176,174,176,175,176,177,176,179,176,180,176,181,176,184,176,188,176,196,176,197,176,199,176,200,176,201,176,208,176,209,176,212,176,216,176,224,176,229,176,8,177,9,177,11,177,12,177,16,177,18,177,19,177,24,177,25,177,27,177,28,177,29,177,35,177,36,177,37,177,40,177,44,177,52,177,53,177,55,177,56,177,57,177,64,177,65,177,68,177,72,177,80,177,81,177,84,177,85,177,88,177,92,177,96,177,120,177,121,177,124,177,128,177,130,177,136,177,137,177,139,177,141,177,146,177,147,177,148,177,152,177,156,177,168,177,204,177,208,177,212,177,220,177,221,177,223,177,232,177,233,177,236,177,240,177,249,177,251,177,253,177,4,178,5,178,8,178,11,178,12,178,20,178,21,178,23,178,25,178,32,178,52,178,60,178,88,178,92,178,96,178,104,178,105,178,116,178,117,178,124,178,132,178,133,178,137,178,144,178,145,178,148,178,152,178,153,178,154,178,160,178,161,178,163,178,165,178,166,178,170,178,172,178,176,178,180,178,200,178,201,178,204,178,208,178,210,178,216,178,217,178,219,178,221,178,226,178,228,178,229,178,230,178,232,178,235,178,236,178,237,178,238,178,239,178,243,178,244,178,245,178,247,178,248,178,249,178,250,178,251,178,255,178,0,179,1,179,4,179,8,179,16,179,17,179,19,179,20,179,21,179,28,179,84,179,85,179,86,179,88,179,91,179,92,179,94,179,95,179,100,179,101,179,103,179,105,179,107,179,110,179,112,179,113,179,116,179,120,179,128,179,129,179,131,179,132,179,133,179,140,179,144,179,148,179,160,179,161,179,168,179,172,179,196,179,197,179,200,179,203,179,204,179,206,179,208,179,212,179,213,179,215,179,217,179,219,179,221,179,224,179,228,179,232,179,252,179,16,180,24,180,28,180,32,180,40,180,41,180,43,180,52,180,80,180,81,180,84,180,88,180,96,180,97,180,99,180,101,180,108,180,128,180,136,180,157,180,164,180,168,180,172,180,181,180,183,180,185,180,192,180,196,180,200,180,208,180,213,180,220,180,221,180,224,180,227,180,228,180,230,180,236,180,237,180,239,180,241,180,248,180,20,181,21,181,24,181,27,181,28,181,36,181,37,181,39,181,40,181,41,181,42,181,48,181,49,181,52,181,56,181,64,181,65,181,67,181,68,181,69,181,75,181,76,181,77,181,80,181,84,181,92,181,93,181,95,181,96,181,97,181,160,181,161,181,164,181,168,181,170,181,171,181,176,181,177,181,179,181,180,181,181,181,187,181,188,181,189,181,192,181,196,181,204,181,205,181,207,181,208,181,209,181,216,181,236,181,16,182,17,182,20,182,24,182,37,182,44,182,52,182,72,182,100,182,104,182,156,182,157,182,160,182,164,182,171,182,172,182,177,182,212,182,240,182,244,182,248,182,0,183,1,183,5,183,40,183,41,183,44,183,47,183,48,183,56,183,57,183,59,183,68,183,72,183,76,183,84,183,85,183,96,183,100,183,104,183,112,183,113,183,115,183,117,183,124,183,125,183,128,183,132,183,140,183,141,183,143,183,144,183,145,183,146,183,150,183,151,183,152,183,153,183,156,183,160,183,168,183,169,183,171,183,172,183,173,183,180,183,181,183,184,183,199,183,201,183,236,183,237,183,240,183,244,183,252,183,253,183,255,183,0,184,1,184,7,184,8,184,9,184,12,184,16,184,24,184,25,184,27,184,29,184,36,184,37,184,40,184,44,184,52,184,53,184,55,184,56,184,57,184,64,184,68,184,81,184,83,184,92,184,93,184,96,184,100,184,108,184,109,184,111,184,113,184,120,184,124,184,141,184,168,184,176,184,180,184,184,184,192,184,193,184,195,184,197,184,204,184,208,184,212,184,221,184,223,184,225,184,232,184,233,184,236,184,240,184,248,184,249,184,251,184,253,184,4,185,24,185,32,185,60,185,61,185,64,185,68,185,76,185,79,185,81,185,88,185,89,185,92,185,96,185,104,185,105,185,107,185,109,185,116,185,117,185,120,185,124,185,132,185,133,185,135,185,137,185,138,185,141,185,142,185,172,185,173,185,176,185,180,185,188,185,189,185,191,185,193,185,200,185,201,185,204,185,206,185,207,185,208,185,209,185,210,185,216,185,217,185,219,185,221,185,222,185,225,185,227,185,228,185,229,185,232,185,236,185,244,185,245,185,247,185,248,185,249,185,250,185,0,186,1,186,8,186,21,186,56,186,57,186,60,186,64,186,66,186,72,186,73,186,75,186,77,186,78,186,83,186,84,186,85,186,88,186,92,186,100,186,101,186,103,186,104,186,105,186,112,186,113,186,116,186,120,186,131,186,132,186,133,186,135,186,140,186,168,186,169,186,171,186,172,186,176,186,178,186,184,186,185,186,187,186,189,186,196,186,200,186,216,186,217,186,252,186,0,187,4,187,13,187,15,187,17,187,24,187,28,187,32,187,41,187,43,187,52,187,53,187,54,187,56,187,59,187,60,187,61,187,62,187,68,187,69,187,71,187,73,187,77,187,79,187,80,187,84,187,88,187,97,187,99,187,108,187,136,187,140,187,144,187,164,187,168,187,172,187,180,187,183,187,192,187,196,187,200,187,208,187,211,187,248,187,249,187,252,187,255,187,0,188,2,188,8,188,9,188,11,188,12,188,13,188,15,188,17,188,20,188,21,188,22,188,23,188,24,188,27,188,28,188,29,188,30,188,31,188,36,188,37,188,39,188,41,188,45,188,48,188,49,188,52,188,56,188,64,188,65,188,67,188,68,188,69,188,73,188,76,188,77,188,80,188,93,188,132,188,133,188,136,188,139,188,140,188,142,188,148,188,149,188,151,188,153,188,154,188,160,188,161,188,164,188,167,188,168,188,176,188,177,188,179,188,180,188,181,188,188,188,189,188,192,188,196,188,205,188,207,188,208,188,209,188,213,188,216,188,220,188,244,188,245,188,246,188,248,188,252,188,4,189,5,189,7,189,9,189,16,189,20,189,36,189,44,189,64,189,72,189,73,189,76,189,80,189,88,189,89,189,100,189,104,189,128,189,129,189,132,189,135,189,136,189,137,189,138,189,144,189,145,189,147,189,149,189,153,189,154,189,156,189,164,189,176,189,184,189,212,189,213,189,216,189,220,189,233,189,240,189,244,189,248,189,0,190,3,190,5,190,12,190,13,190,16,190,20,190,28,190,29,190,31,190,68,190,69,190,72,190,76,190,78,190,84,190,85,190,87,190,89,190,90,190,91,190,96,190,97,190,100,190,104,190,106,190,112,190,113,190,115,190,116,190,117,190,123,190,124,190,125,190,128,190,132,190,140,190,141,190,143,190,144,190,145,190,152,190,153,190,168,190,208,190,209,190,212,190,215,190,216,190,224,190,227,190,228,190,229,190,236,190,1,191,8,191,9,191,24,191,25,191,27,191,28,191,29,191,64,191,65,191,68,191,72,191,80,191,81,191,85,191,148,191,176,191,197,191,204,191,205,191,208,191,212,191,220,191,223,191,225,191,60,192,81,192,88,192,92,192,96,192,104,192,105,192,144,192,145,192,148,192,152,192,160,192,161,192,163,192,165,192,172,192,173,192,175,192,176,192,179,192,180,192,181,192,182,192,188,192,189,192,191,192,192,192,193,192,197,192,200,192,201,192,204,192,208,192,216,192,217,192,219,192,220,192,221,192,228,192,229,192,232,192,236,192,244,192,245,192,247,192,249,192,0,193,4,193,8,193,16,193,21,193,28,193,29,193,30,193,31,193,32,193,35,193,36,193,38,193,39,193,44,193,45,193,47,193,48,193,49,193,54,193,56,193,57,193,60,193,64,193,72,193,73,193,75,193,76,193,77,193,84,193,85,193,88,193,92,193,100,193,101,193,103,193,104,193,105,193,112,193,116,193,120,193,133,193,140,193,141,193,142,193,144,193,148,193,150,193,156,193,157,193,159,193,161,193,165,193,168,193,169,193,172,193,176,193,189,193,196,193,200,193,204,193,212,193,215,193,216,193,224,193,228,193,232,193,240,193,241,193,243,193,252,193,253,193,0,194,4,194,12,194,13,194,15,194,17,194,24,194,25,194,28,194,31,194,32,194,40,194,41,194,43,194,45,194,47,194,49,194,50,194,52,194,72,194,80,194,81,194,84,194,88,194,96,194,101,194,108,194,109,194,112,194,116,194,124,194,125,194,127,194,129,194,136,194,137,194,144,194,152,194,155,194,157,194,164,194,165,194,168,194,172,194,173,194,180,194,181,194,183,194,185,194,220,194,221,194,224,194,227,194,228,194,235,194,236,194,237,194,239,194,241,194,246,194,248,194,249,194,251,194,252,194,0,195,8,195,9,195,12,195,13,195,19,195,20,195,21,195,24,195,28,195,36,195,37,195,40,195,41,195,69,195,104,195,105,195,108,195,112,195,114,195,120,195,121,195,124,195,125,195,132,195,136,195,140,195,192,195,216,195,217,195,220,195,223,195,224,195,226,195,232,195,233,195,237,195,244,195,245,195,248,195,8,196,16,196,36,196,44,196,48,196,52,196,60,196,61,196,72,196,100,196,101,196,104,196,108,196,116,196,117,196,121,196,128,196,148,196,156,196,184,196,188,196,233,196,240,196,241,196,244,196,248,196,250,196,255,196,0,197,1,197,12,197,16,197,20,197,28,197,40,197,41,197,44,197,48,197,56,197,57,197,59,197,61,197,68,197,69,197,72,197,73,197,74,197,76,197,77,197,78,197,83,197,84,197,85,197,87,197,88,197,89,197,93,197,94,197,96,197,97,197,100,197,104,197,112,197,113,197,115,197,116,197,117,197,124,197,125,197,128,197,132,197,135,197,140,197,141,197,143,197,145,197,149,197,151,197,152,197,156,197,160,197,169,197,180,197,181,197,184,197,185,197,187,197,188,197,189,197,190,197,196,197,197,197,198,197,199,197,200,197,201,197,202,197,204,197,206,197,208,197,209,197,212,197,216,197,224,197,225,197,227,197,229,197,236,197,237,197,238,197,240,197,244,197,246,197,247,197,252,197,253,197,254,197,255,197,0,198,1,198,5,198,6,198,7,198,8,198,12,198,16,198,24,198,25,198,27,198,28,198,36,198,37,198,40,198,44,198,45,198,46,198,48,198,51,198,52,198,53,198,55,198,57,198,59,198,64,198,65,198,68,198,72,198,80,198,81,198,83,198,84,198,85,198,92,198,93,198,96,198,108,198,111,198,113,198,120,198,121,198,124,198,128,198,136,198,137,198,139,198,141,198,148,198,149,198,152,198,156,198,164,198,165,198,167,198,169,198,176,198,177,198,180,198,184,198,185,198,186,198,192,198,193,198,195,198,197,198,204,198,205,198,208,198,212,198,220,198,221,198,224,198,225,198,232,198,233,198,236,198,240,198,248,198,249,198,253,198,4,199,5,199,8,199,12,199,20,199,21,199,23,199,25,199,32,199,33,199,36,199,40,199,48,199,49,199,51,199,53,199,55,199,60,199,61,199,64,199,68,199,74,199,76,199,77,199,79,199,81,199,82,199,83,199,84,199,85,199,86,199,87,199,88,199,92,199,96,199,104,199,107,199,116,199,117,199,120,199,124,199,125,199,126,199,131,199,132,199,133,199,135,199,136,199,137,199,138,199,142,199,144,199,145,199,148,199,150,199,151,199,152,199,154,199,160,199,161,199,163,199,164,199,165,199,166,199,172,199,173,199,176,199,180,199,188,199,189,199,191,199,192,199,193,199,200,199,201,199,204,199,206,199,208,199,216,199,221,199,228,199,232,199,236,199,0,200,1,200,4,200,8,200,10,200,16,200,17,200,19,200,21,200,22,200,28,200,29,200,32,200,36,200,44,200,45,200,47,200,49,200,56,200,60,200,64,200,72,200,73,200,76,200,77,200,84,200,112,200,113,200,116,200,120,200,122,200,128,200,129,200,131,200,133,200,134,200,135,200,139,200,140,200,141,200,148,200,157,200,159,200,161,200,168,200,188,200,189,200,196,200,200,200,204,200,212,200,213,200,215,200,217,200,224,200,225,200,228,200,245,200,252,200,253,200,0,201,4,201,5,201,6,201,12,201,13,201,15,201,17,201,24,201,44,201,52,201,80,201,81,201,84,201,88,201,96,201,97,201,99,201,108,201,112,201,116,201,124,201,136,201,137,201,140,201,144,201,152,201,153,201,155,201,157,201,192,201,193,201,196,201,199,201,200,201,202,201,208,201,209,201,211,201,213,201,214,201,217,201,218,201,220,201,221,201,224,201,226,201,228,201,231,201,236,201,237,201,239,201,240,201,241,201,248,201,249,201,252,201,0,202,8,202,9,202,11,202,12,202,13,202,20,202,24,202,41,202,76,202,77,202,80,202,84,202,92,202,93,202,95,202,96,202,97,202,104,202,125,202,132,202,152,202,188,202,189,202,192,202,196,202,204,202,205,202,207,202,209,202,211,202,216,202,217,202,224,202,236,202,244,202,8,203,16,203,20,203,24,203,32,203,33,203,65,203,72,203,73,203,76,203,80,203,88,203,89,203,93,203,100,203,120,203,121,203,156,203,184,203,212,203,228,203,231,203,233,203,12,204,13,204,16,204,20,204,28,204,29,204,33,204,34,204,39,204,40,204,41,204,44,204,46,204,48,204,56,204,57,204,59,204,60,204,61,204,62,204,68,204,69,204,72,204,76,204,84,204,85,204,87,204,88,204,89,204,96,204,100,204,102,204,104,204,112,204,117,204,152,204,153,204,156,204,160,204,168,204,169,204,171,204,172,204,173,204,180,204,181,204,184,204,188,204,196,204,197,204,199,204,201,204,208,204,212,204,228,204,236,204,240,204,1,205,8,205,9,205,12,205,16,205,24,205,25,205,27,205,29,205,36,205,40,205,44,205,57,205,92,205,96,205,100,205,108,205,109,205,111,205,113,205,120,205,136,205,148,205,149,205,152,205,156,205,164,205,165,205,167,205,169,205,176,205,196,205,204,205,208,205,232,205,236,205,240,205,248,205,249,205,251,205,253,205,4,206,8,206,12,206,20,206,25,206,32,206,33,206,36,206,40,206,48,206,49,206,51,206,53,206,88,206,89,206,92,206,95,206,96,206,97,206,104,206,105,206,107,206,109,206,116,206,117,206,120,206,124,206,132,206,133,206,135,206,137,206,144,206,145,206,148,206,152,206,160,206,161,206,163,206,164,206,165,206,172,206,173,206,193,206,228,206,229,206,232,206,235,206,236,206,244,206,245,206,247,206,248,206,249,206,0,207,1,207,4,207,8,207,16,207,17,207,19,207,21,207,28,207,32,207,36,207,44,207,45,207,47,207,48,207,49,207,56,207,84,207,85,207,88,207,92,207,100,207,101,207,103,207,105,207,112,207,113,207,116,207,120,207,128,207,133,207,140,207,161,207,168,207,176,207,196,207,224,207,225,207,228,207,232,207,240,207,241,207,243,207,245,207,252,207,0,208,4,208,17,208,24,208,45,208,52,208,53,208,56,208,60,208,68,208,69,208,71,208,73,208,80,208,84,208,88,208,96,208,108,208,109,208,112,208,116,208,124,208,125,208,129,208,164,208,165,208,168,208,172,208,180,208,181,208,183,208,185,208,192,208,193,208,196,208,200,208,201,208,208,208,209,208,211,208,212,208,213,208,220,208,221,208,224,208,228,208,236,208,237,208,239,208,240,208,241,208,248,208,13,209,48,209,49,209,52,209,56,209,58,209,64,209,65,209,67,209,68,209,69,209,76,209,77,209,80,209,84,209,92,209,93,209,95,209,97,209,104,209,108,209,124,209,132,209,136,209,160,209,161,209,164,209,168,209,176,209,177,209,179,209,181,209,186,209,188,209,192,209,216,209,244,209,248,209,7,210,9,210,16,210,44,210,45,210,48,210,52,210,60,210,61,210,63,210,65,210,72,210,92,210,100,210,128,210,129,210,132,210,136,210,144,210,145,210,149,210,156,210,160,210,164,210,172,210,177,210,184,210,185,210,188,210,191,210,192,210,194,210,200,210,201,210,203,210,212,210,216,210,220,210,228,210,229,210,240,210,241,210,244,210,248,210,0,211,1,211,3,211,5,211,12,211,13,211,14,211,16,211,20,211,22,211,28,211,29,211,31,211,32,211,33,211,37,211,40,211,41,211,44,211,48,211,56,211,57,211,59,211,60,211,61,211,68,211,69,211,124,211,125,211,128,211,132,211,140,211,141,211,143,211,144,211,145,211,152,211,153,211,156,211,160,211,168,211,169,211,171,211,173,211,180,211,184,211,188,211,196,211,197,211,200,211,201,211,208,211,216,211,225,211,227,211,236,211,237,211,240,211,244,211,252,211,253,211,255,211,1,212,8,212,29,212,64,212,68,212,92,212,96,212,100,212,109,212,111,212,120,212,121,212,124,212,127,212,128,212,130,212,136,212,137,212,139,212,141,212,148,212,169,212,204,212,208,212,212,212,220,212,223,212,232,212,236,212,240,212,248,212,251,212,253,212,4,213,8,213,12,213,20,213,21,213,23,213,60,213,61,213,64,213,68,213,76,213,77,213,79,213,81,213,88,213,89,213,92,213,96,213,101,213,104,213,105,213,107,213,109,213,116,213,117,213,120,213,124,213,132,213,133,213,135,213,136,213,137,213,144,213,165,213,200,213,201,213,204,213,208,213,210,213,216,213,217,213,219,213,221,213,228,213,229,213,232,213,236,213,244,213,245,213,247,213,249,213,0,214,1,214,4,214,8,214,16,214,17,214,19,214,20,214,21,214,28,214,32,214,36,214,45,214,56,214,57,214,60,214,64,214,69,214,72,214,73,214,75,214,77,214,81,214,84,214,85,214,88,214,92,214,103,214,105,214,112,214,113,214,116,214,131,214,133,214,140,214,141,214,144,214,148,214,157,214,159,214,161,214], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+10240);
/* memory initializer */ allocate([168,214,172,214,176,214,185,214,187,214,196,214,197,214,200,214,204,214,209,214,212,214,215,214,217,214,224,214,228,214,232,214,240,214,245,214,252,214,253,214,0,215,4,215,17,215,24,215,25,215,28,215,32,215,40,215,41,215,43,215,45,215,52,215,53,215,56,215,60,215,68,215,71,215,73,215,80,215,81,215,84,215,86,215,87,215,88,215,89,215,96,215,97,215,99,215,101,215,105,215,108,215,112,215,116,215,124,215,125,215,129,215,136,215,137,215,140,215,144,215,152,215,153,215,155,215,157,215,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,61,79,115,79,71,80,249,80,160,82,239,83,117,84,229,84,9,86,193,90,182,91,135,102,182,103,183,103,239,103,76,107,194,115,194,117,60,122,219,130,4,131,87,136,136,136,54,138,200,140,207,141,251,142,230,143,213,153,59,82,116,83,4,84,106,96,100,97,188,107,207,115,26,129,186,137,210,137,163,149,131,79,10,82,190,88,120,89,230,89,114,94,121,94,199,97,192,99,70,103,236,103,127,104,151,111,78,118,11,119,245,120,8,122,255,122,33,124,157,128,110,130,113,130,235,138,147,149,107,78,157,85,247,102,52,110,163,120,237,122,91,132,16,137,78,135,168,151,216,82,78,87,42,88,76,93,31,97,190,97,33,98,98,101,209,103,68,106,27,110,24,117,179,117,227,118,176,119,58,125,175,144,81,148,82,148,149,159,35,83,172,92,50,117,219,128,64,146,152,149,91,82,8,88,220,89,161,92,23,93,183,94,58,95,74,95,119,97,95,108,122,117,134,117,224,124,115,125,177,125,140,127,84,129,33,130,145,133,65,137,27,139,252,146,77,150,71,156,203,78,247,78,11,80,241,81,79,88,55,97,62,97,104,97,57,101,234,105,17,111,165,117,134,118,214,118,135,123,165,130,203,132,0,249,167,147,139,149,128,85,162,91,81,87,1,249,179,124,185,127,181,145,40,80,187,83,69,92,232,93,210,98,110,99,218,100,231,100,32,110,172,112,91,121,221,141,30,142,2,249,125,144,69,146,248,146,126,78,246,78,101,80,254,93,250,94,6,97,87,105,113,129,84,134,71,142,117,147,43,154,94,78,145,80,112,103,64,104,9,81,141,82,146,82,162,106,188,119,16,146,212,158,171,82,47,96,242,143,72,80,169,97,237,99,202,100,60,104,132,106,192,111,136,129,161,137,148,150,5,88,125,114,172,114,4,117,121,125,109,126,169,128,139,137,116,139,99,144,81,157,137,98,122,108,84,111,80,125,58,127,35,138,124,81,74,97,157,123,25,139,87,146,140,147,172,78,211,79,30,80,190,80,6,81,193,82,205,82,127,83,112,87,131,88,154,94,145,95,118,97,172,97,206,100,108,101,111,102,187,102,244,102,151,104,135,109,133,112,241,112,159,116,165,116,202,116,217,117,108,120,236,120,223,122,246,122,69,125,147,125,21,128,63,128,27,129,150,131,102,139,21,143,21,144,225,147,3,152,56,152,90,154,232,155,194,79,83,85,58,88,81,89,99,91,70,92,184,96,18,98,66,104,176,104,232,104,170,110,76,117,120,118,206,120,61,122,251,124,107,126,124,126,8,138,161,138,63,140,142,150,196,157,228,83,233,83,74,84,113,84,250,86,209,89,100,91,59,92,171,94,247,98,55,101,69,101,114,101,160,102,175,103,193,105,189,108,252,117,144,118,126,119,63,122,148,127,3,128,161,128,143,129,230,130,253,130,240,131,193,133,49,136,180,136,165,138,3,249,156,143,46,147,199,150,103,152,216,154,19,159,237,84,155,101,242,102,143,104,64,122,55,140,96,157,240,86,100,87,17,93,6,102,177,104,205,104,254,110,40,116,158,136,228,155,104,108,4,249,168,154,155,79,108,81,113,81,159,82,84,91,229,93,80,96,109,96,241,98,167,99,59,101,217,115,122,122,163,134,162,140,143,151,50,78,225,91,8,98,156,103,220,116,209,121,211,131,135,138,178,138,232,141,78,144,75,147,70,152,211,94,232,105,255,133,237,144,5,249,160,81,152,91,236,91,99,97,250,104,62,107,76,112,47,116,216,116,161,123,80,127,197,131,192,137,171,140,220,149,40,153,46,82,93,96,236,98,2,144,138,79,73,81,33,83,217,88,227,94,224,102,56,109,154,112,194,114,214,115,80,123,241,128,91,148,102,83,155,99,107,127,86,78,128,80,74,88,222,88,42,96,39,97,208,98,208,105,65,155,143,91,24,125,177,128,95,143,164,78,209,80,172,84,172,85,12,91,160,93,231,93,42,101,78,101,33,104,75,106,225,114,142,118,239,119,94,125,249,127,160,129,78,133,223,134,3,143,78,143,202,144,3,153,85,154,171,155,24,78,69,78,93,78,199,78,241,79,119,81,254,82,64,83,227,83,229,83,142,84,20,86,117,87,162,87,199,91,135,93,208,94,252,97,216,98,81,101,184,103,233,103,203,105,80,107,198,107,236,107,66,108,157,110,120,112,215,114,150,115,3,116,191,119,233,119,118,122,127,125,9,128,252,129,5,130,10,130,223,130,98,136,51,139,252,140,192,142,17,144,177,144,100,146,182,146,210,153,69,154,233,156,215,157,156,159,11,87,64,92,202,131,160,151,171,151,180,158,27,84,152,122,164,127,217,136,205,142,225,144,0,88,72,92,152,99,159,122,174,91,19,95,121,122,174,122,142,130,172,142,38,80,56,82,248,82,119,83,8,87,243,98,114,99,10,107,195,109,55,119,165,83,87,115,104,133,118,142,213,149,58,103,195,106,112,111,109,138,204,142,75,153,6,249,119,102,120,107,180,140,60,155,7,249,235,83,45,87,78,89,198,99,251,105,234,115,69,120,186,122,197,122,254,124,117,132,143,137,115,141,53,144,168,149,251,82,71,87,71,117,96,123,204,131,30,146,8,249,88,106,75,81,75,82,135,82,31,98,216,104,117,105,153,150,197,80,164,82,228,82,195,97,164,101,57,104,255,105,126,116,75,123,185,130,235,131,178,137,57,139,209,143,73,153,9,249,202,78,151,89,210,100,17,102,142,106,52,116,129,121,189,121,169,130,126,136,127,136,95,137,10,249,38,147,11,79,202,83,37,96,113,98,114,108,26,125,102,125,152,78,98,81,220,119,175,128,1,79,14,79,118,81,128,81,220,85,104,86,59,87,250,87,252,87,20,89,71,89,147,89,196,91,144,92,14,93,241,93,126,94,204,95,128,98,215,101,227,101,30,103,31,103,94,103,203,104,196,104,95,106,58,107,35,108,125,108,130,108,199,109,152,115,38,116,42,116,130,116,163,116,120,117,127,117,129,120,239,120,65,121,71,121,72,121,122,121,149,123,0,125,186,125,136,127,6,128,45,128,140,128,24,138,79,139,72,140,119,141,33,147,36,147,226,152,81,153,14,154,15,154,101,154,146,158,202,125,118,79,9,84,238,98,84,104,209,145,171,85,58,81,11,249,12,249,28,90,230,97,13,249,207,98,255,98,14,249,15,249,16,249,17,249,18,249,19,249,163,144,20,249,21,249,22,249,23,249,24,249,254,138,25,249,26,249,27,249,28,249,150,102,29,249,86,113,30,249,31,249,227,150,32,249,79,99,122,99,87,83,33,249,143,103,96,105,115,110,34,249,55,117,35,249,36,249,37,249,13,125,38,249,39,249,114,136,202,86,24,90,40,249,41,249,42,249,43,249,44,249,67,78,45,249,103,81,72,89,240,103,16,128,46,249,115,89,116,94,154,100,202,121,245,95,108,96,200,98,123,99,231,91,215,91,170,82,47,249,116,89,41,95,18,96,48,249,49,249,50,249,89,116,51,249,52,249,53,249,54,249,55,249,56,249,209,153,57,249,58,249,59,249,60,249,61,249,62,249,63,249,64,249,65,249,66,249,67,249,195,111,68,249,69,249,191,129,178,143,241,96,70,249,71,249,102,129,72,249,73,249,63,92,74,249,75,249,76,249,77,249,78,249,79,249,80,249,81,249,233,90,37,138,123,103,16,125,82,249,83,249,84,249,85,249,86,249,87,249,253,128,88,249,89,249,60,92,229,108,63,83,186,110,26,89,54,131,57,78,182,78,70,79,174,85,24,87,199,88,86,95,183,101,230,101,128,106,181,107,77,110,237,119,239,122,30,124,222,125,203,134,146,136,50,145,91,147,187,100,190,111,122,115,184,117,84,144,86,85,77,87,186,97,212,100,199,102,225,109,91,110,109,111,185,111,240,117,67,128,189,129,65,133,131,137,199,138,90,139,31,147,147,108,83,117,84,123,15,142,93,144,16,85,2,88,88,88,98,94,7,98,158,100,224,104,118,117,214,124,179,135,232,158,227,78,136,87,110,87,39,89,13,92,177,92,54,94,133,95,52,98,225,100,179,115,250,129,139,136,184,140,138,150,219,158,133,91,183,95,179,96,18,80,0,82,48,82,22,87,53,88,87,88,14,92,96,92,246,92,139,93,166,94,146,95,188,96,17,99,137,99,23,100,67,104,249,104,194,106,216,109,33,110,212,110,228,111,254,113,220,118,121,119,177,121,59,122,4,132,169,137,237,140,243,141,72,142,3,144,20,144,83,144,253,144,77,147,118,150,220,151,210,107,6,112,88,114,162,114,104,115,99,119,191,121,228,123,155,126,128,139,169,88,199,96,102,101,253,101,190,102,140,108,30,113,201,113,90,140,19,152,109,78,129,122,221,78,172,81,205,81,213,82,12,84,167,97,113,103,80,104,223,104,30,109,124,111,188,117,179,119,229,122,244,128,99,132,133,146,92,81,151,101,92,103,147,103,216,117,199,122,115,131,90,249,70,140,23,144,45,152,111,92,192,129,154,130,65,144,111,144,13,146,151,95,157,93,89,106,200,113,123,118,73,123,228,133,4,139,39,145,48,154,135,85,246,97,91,249,105,118,133,127,63,134,186,135,248,136,143,144,92,249,27,109,217,112,222,115,97,125,61,132,93,249,106,145,241,153,94,249,130,78,117,83,4,107,18,107,62,112,27,114,45,134,30,158,76,82,163,143,80,93,229,100,44,101,22,107,235,111,67,124,156,126,205,133,100,137,189,137,201,98,216,129,31,136,202,94,23,103,106,109,252,114,5,116,111,116,130,135,222,144,134,79,13,93,160,95,10,132,183,81,160,99,101,117,174,78,6,80,105,81,201,81,129,104,17,106,174,124,177,124,231,124,111,130,210,138,27,143,207,145,182,79,55,81,245,82,66,84,236,94,110,97,62,98,197,101,218,106,254,111,42,121,220,133,35,136,173,149,98,154,106,154,151,158,206,158,155,82,198,102,119,107,29,112,43,121,98,143,66,151,144,97,0,98,35,101,35,111,73,113,137,116,244,125,111,128,238,132,38,143,35,144,74,147,189,81,23,82,163,82,12,109,200,112,194,136,201,94,130,101,174,107,194,111,62,124,117,115,228,78,54,79,249,86,95,249,186,92,186,93,28,96,178,115,45,123,154,127,206,127,70,128,30,144,52,146,246,150,72,151,24,152,97,159,139,79,167,111,174,121,180,145,183,150,222,82,96,249,136,100,196,100,211,106,94,111,24,112,16,114,231,118,1,128,6,134,92,134,239,141,5,143,50,151,111,155,250,157,117,158,140,120,127,121,160,125,201,131,4,147,127,158,147,158,214,138,223,88,4,95,39,103,39,112,207,116,96,124,126,128,33,81,40,112,98,114,202,120,194,140,218,140,244,140,247,150,134,78,218,80,238,91,214,94,153,101,206,113,66,118,173,119,74,128,252,132,124,144,39,155,141,159,216,88,65,90,98,92,19,106,218,109,15,111,59,118,47,125,55,126,30,133,56,137,228,147,75,150,137,82,210,101,243,103,180,105,65,109,156,110,15,112,9,116,96,116,89,117,36,118,107,120,44,139,94,152,109,81,46,98,120,150,150,79,43,80,25,93,234,109,184,125,42,143,139,95,68,97,23,104,97,249,134,150,210,82,139,128,220,81,204,81,94,105,28,122,190,125,241,131,117,150,218,79,41,82,152,83,15,84,14,85,101,92,167,96,78,103,168,104,108,109,129,114,248,114,6,116,131,116,98,249,226,117,108,124,121,127,184,127,137,131,207,136,225,136,204,145,208,145,226,150,201,155,29,84,126,111,208,113,152,116,250,133,170,142,163,150,87,156,159,158,151,103,203,109,51,116,232,129,22,151,44,120,203,122,32,123,146,124,105,100,106,116,242,117,188,120,232,120,172,153,84,155,187,158,222,91,85,94,32,111,156,129,171,131,136,144,7,78,77,83,41,90,210,93,78,95,98,97,61,99,105,102,252,102,255,110,43,111,99,112,158,119,44,132,19,133,59,136,19,143,69,153,59,156,28,85,185,98,43,103,171,108,9,131,106,137,122,151,161,78,132,89,216,95,217,95,27,103,178,125,84,127,146,130,43,131,189,131,30,143,153,144,203,87,185,89,146,90,208,91,39,102,154,103,133,104,207,107,100,113,117,127,183,140,227,140,129,144,69,155,8,129,138,140,76,150,64,154,165,158,95,91,19,108,27,115,242,118,223,118,12,132,170,81,147,137,77,81,149,81,201,82,201,104,148,108,4,119,32,119,191,125,236,125,98,151,181,158,197,110,17,133,165,81,13,84,125,84,14,102,157,102,39,105,159,110,191,118,145,119,23,131,194,132,159,135,105,145,152,146,244,156,130,136,174,79,146,81,223,82,198,89,61,94,85,97,120,100,121,100,174,102,208,103,33,106,205,107,219,107,95,114,97,114,65,116,56,119,219,119,23,128,188,130,5,131,0,139,40,139,140,140,40,103,144,108,103,114,238,118,102,119,70,122,169,157,127,107,146,108,34,89,38,103,153,132,111,83,147,88,153,89,223,94,207,99,52,102,115,103,58,110,43,115,215,122,215,130,40,147,217,82,235,93,174,97,203,97,10,98,199,98,171,100,224,101,89,105,102,107,203,107,33,113,247,115,93,117,70,126,30,130,2,131,106,133,163,138,191,140,39,151,97,157,168,88,216,158,17,80,14,82,59,84,79,85,135,101,118,108,10,125,11,125,94,128,138,134,128,149,239,150,255,82,149,108,105,114,115,84,154,90,62,92,75,93,76,95,174,95,42,103,182,104,99,105,60,110,68,110,9,119,115,124,142,127,135,133,14,139,247,143,97,151,244,158,183,92,182,96,13,97,171,97,79,101,251,101,252,101,17,108,239,108,159,115,201,115,225,125,148,149,198,91,28,135,16,139,93,82,90,83,205,98,15,100,178,100,52,103,56,106,202,108,192,115,158,116,148,123,149,124,27,126,138,129,54,130,132,133,235,143,249,150,193,153,52,79,74,83,205,83,219,83,204,98,44,100,0,101,145,101,195,105,238,108,88,111,237,115,84,117,34,118,228,118,252,118,208,120,251,120,44,121,70,125,44,130,224,135,212,143,18,152,239,152,195,82,212,98,165,100,36,110,81,111,124,118,203,141,177,145,98,146,238,154,67,155,35,80,141,80,74,87,168,89,40,92,71,94,119,95,63,98,62,101,185,101,193,101,9,102,139,103,156,105,194,110,197,120,33,125,170,128,128,129,43,130,179,130,161,132,140,134,42,138,23,139,166,144,50,150,144,159,13,80,243,79,99,249,249,87,152,95,220,98,146,99,111,103,67,110,25,113,195,118,204,128,218,128,244,136,245,136,25,137,224,140,41,143,77,145,106,150,47,79,112,79,27,94,207,103,34,104,125,118,126,118,68,155,97,94,10,106,105,113,212,113,106,117,100,249,65,126,67,133,233,133,220,152,16,79,79,123,112,127,165,149,225,81,6,94,181,104,62,108,78,108,219,108,175,114,196,123,3,131,213,108,58,116,251,80,136,82,193,88,216,100,151,106,167,116,86,118,167,120,23,134,226,149,57,151,101,249,94,83,1,95,138,139,168,143,175,143,138,144,37,82,165,119,73,156,8,159,25,78,2,80,117,81,91,92,119,94,30,102,58,102,196,103,197,104,179,112,1,117,197,117,201,121,221,122,39,143,32,153,8,154,221,79,33,88,49,88,246,91,110,102,101,107,17,109,122,110,125,111,228,115,43,117,233,131,220,136,19,137,92,139,20,143,15,79,213,80,16,83,92,83,147,91,169,95,13,103,143,121,121,129,47,131,20,133,7,137,134,137,57,143,59,143,165,153,18,156,44,103,118,78,248,79,73,89,1,92,239,92,240,92,103,99,210,104,253,112,162,113,43,116,43,126,236,132,2,135,34,144,210,146,243,156,13,78,216,78,239,79,133,80,86,82,111,82,38,84,144,84,224,87,43,89,102,90,90,91,117,91,204,91,156,94,102,249,118,98,119,101,167,101,110,109,165,110,54,114,38,123,63,124,54,127,80,129,81,129,154,129,64,130,153,130,169,131,3,138,160,140,230,140,251,140,116,141,186,141,232,144,220,145,28,150,68,150,217,153,231,156,23,83,6,82,41,84,116,86,179,88,84,89,110,89,255,95,164,97,110,98,16,102,126,108,26,113,198,118,137,124,222,124,27,125,172,130,193,140,240,150,103,249,91,79,23,95,127,95,194,98,41,93,11,103,218,104,124,120,67,126,108,157,21,78,153,80,21,83,42,83,81,83,131,89,98,90,135,94,178,96,138,97,73,98,121,98,144,101,135,103,167,105,212,107,214,107,215,107,216,107,184,108,104,249,53,116,250,117,18,120,145,120,213,121,216,121,131,124,203,125,225,127,165,128,62,129,194,129,242,131,26,135,232,136,185,138,108,139,187,140,25,145,94,151,219,152,59,159,172,86,42,91,108,95,140,101,179,106,175,107,92,109,241,111,21,112,93,114,173,115,167,140,211,140,59,152,145,97,55,108,88,128,1,154,77,78,139,78,155,78,213,78,58,79,60,79,127,79,223,79,255,80,242,83,248,83,6,85,227,85,219,86,235,88,98,89,17,90,235,91,250,91,4,92,243,93,43,94,153,95,29,96,104,99,156,101,175,101,246,103,251,103,173,104,123,107,153,108,215,108,35,110,9,112,69,115,2,120,62,121,64,121,96,121,193,121,233,123,23,125,114,125,134,128,13,130,142,131,209,132,199,134,223,136,80,138,94,138,29,139,220,140,102,141,173,143,170,144,252,152,223,153,157,158,74,82,105,249,20,103,106,249,152,80,42,82,113,92,99,101,85,108,202,115,35,117,157,117,151,123,156,132,120,145,48,151,119,78,146,100,186,107,94,113,169,133,9,78,107,249,73,103,238,104,23,110,159,130,24,133,107,136,247,99,129,111,18,146,175,152,10,78,183,80,207,80,31,81,70,85,170,85,23,86,64,91,25,92,224,92,56,94,138,94,160,94,194,94,243,96,81,104,97,106,88,110,61,114,64,114,192,114,248,118,101,121,177,123,212,127,243,136,244,137,115,138,97,140,222,140,28,151,94,88,189,116,253,140,199,85,108,249,97,122,34,125,114,130,114,114,31,117,37,117,109,249,25,123,133,88,251,88,188,93,143,94,182,94,144,95,85,96,146,98,127,99,77,101,145,102,217,102,248,102,22,104,242,104,128,114,94,116,110,123,110,125,214,125,114,127,229,128,18,130,175,133,127,137,147,138,29,144,228,146,205,158,32,159,21,89,109,89,45,94,220,96,20,102,115,102,144,103,80,108,197,109,95,111,243,119,169,120,198,132,203,145,43,147,217,78,202,80,72,81,132,85,11,91,163,91,71,98,126,101,203,101,50,110,125,113,1,116,68,116,135,116,191,116,108,118,170,121,218,125,85,126,168,127,122,129,179,129,57,130,26,134,236,135,117,138,227,141,120,144,145,146,37,148,77,153,174,155,104,83,81,92,84,105,196,108,41,109,43,110,12,130,155,133,59,137,45,138,170,138,234,150,103,159,97,82,185,102,178,107,150,126,254,135,13,141,131,149,93,150,29,101,137,109,238,113,110,249,206,87,211,89,172,91,39,96,250,96,16,98,31,102,95,102,41,115,249,115,219,118,1,119,108,123,86,128,114,128,101,129,160,138,146,145,22,78,226,82,114,107,23,109,5,122,57,123,48,125,111,249,176,140,236,83,47,86,81,88,181,91,15,92,17,92,226,93,64,98,131,99,20,100,45,102,179,104,188,108,136,109,175,110,31,112,164,112,210,113,38,117,143,117,142,117,25,118,17,123,224,123,43,124,32,125,57,125,44,133,109,133,7,134,52,138,13,144,97,144,181,144,183,146,246,151,55,154,215,79,108,92,95,103,145,109,159,124,140,126,22,139,22,141,31,144,107,91,253,93,13,100,192,132,92,144,225,152,135,115,139,91,154,96,126,103,222,109,31,138,166,138,1,144,12,152,55,82,112,249,81,112,142,120,150,147,112,136,215,145,238,79,215,83,253,85,218,86,130,87,253,88,194,90,136,91,171,92,192,92,37,94,1,97,13,98,75,98,136,99,28,100,54,101,120,101,57,106,138,107,52,108,25,109,49,111,231,113,233,114,120,115,7,116,178,116,38,118,97,119,192,121,87,122,234,122,185,124,143,125,172,125,97,126,158,127,41,129,49,131,144,132,218,132,234,133,150,136,176,138,144,139,56,143,66,144,131,144,108,145,150,146,185,146,139,150,167,150,168,150,214,150,0,151,8,152,150,153,211,154,26,155,212,83,126,88,25,89,112,91,191,91,209,109,90,111,159,113,33,116,185,116,133,128,253,131,225,93,135,95,170,95,66,96,236,101,18,104,111,105,83,106,137,107,53,109,243,109,227,115,254,118,172,119,77,123,20,125,35,129,28,130,64,131,244,132,99,133,98,138,196,138,135,145,30,147,6,152,180,153,12,98,83,136,240,143,101,146,7,93,39,93,105,93,95,116,157,129,104,135,213,111,254,98,210,127,54,137,114,137,30,78,88,78,231,80,221,82,71,83,127,98,7,102,105,126,5,136,94,150,141,79,25,83,54,86,203,89,164,90,56,92,78,92,77,92,2,94,17,95,67,96,189,101,47,102,66,102,190,103,244,103,28,115,226,119,58,121,197,127,148,132,205,132,150,137,102,138,105,138,225,138,85,140,122,140,244,87,212,91,15,95,111,96,237,98,13,105,150,107,92,110,132,113,210,123,85,135,88,139,254,142,223,152,254,152,56,79,129,79,225,79,123,84,32,90,184,91,60,97,176,101,104,102,252,113,51,117,94,121,51,125,78,129,227,129,152,131,170,133,206,133,3,135,10,138,171,142,155,143,113,249,197,143,49,89,164,91,230,91,137,96,233,91,11,92,195,95,129,108,114,249,241,109,11,112,26,117,175,130,246,138,192,78,65,83,115,249,217,150,15,108,158,78,196,79,82,81,94,85,37,90,232,92,17,98,89,114,189,130,170,131,254,134,89,136,29,138,63,150,197,150,19,153,9,157,93,157,10,88,179,92,189,93,68,94,225,96,21,97,225,99,2,106,37,110,2,145,84,147,78,152,16,156,119,159,137,91,184,92,9,99,79,102,72,104,60,119,193,150,141,151,84,152,159,155,161,101,1,139,203,142,188,149,53,85,169,92,214,93,181,94,151,102,76,118,244,131,199,149,211,88,188,98,206,114,40,157,240,78,46,89,15,96,59,102,131,107,231,121,38,157,147,83,192,84,195,87,22,93,27,97,214,102,175,109,141,120,126,130,152,150,68,151,132,83,124,98,150,99,178,109,10,126,75,129,77,152,251,106,76,127,175,157,26,158,95,78,59,80,182,81,28,89,249,96,246,99,48,105,58,114,54,128,116,249,206,145,49,95,117,249,118,249,4,125,229,130,111,132,187,132,229,133,141,142,119,249,111,79,120,249,121,249,228,88,67,91,89,96,218,99,24,101,109,101,152,102,122,249,74,105,35,106,11,109,1,112,108,113,210,117,13,118,179,121,112,122,123,249,138,127,124,249,68,137,125,249,147,139,192,145,125,150,126,249,10,153,4,87,161,95,188,101,1,111,0,118,166,121,158,138,173,153,90,155,108,159,4,81,182,97,145,98,141,106,198,129,67,80,48,88,102,95,9,113,0,138,250,138,124,91,22,134,250,79,60,81,180,86,68,89,169,99,249,109,170,93,109,105,134,81,136,78,89,79,127,249,128,249,129,249,130,89,130,249,131,249,95,107,93,108,132,249,181,116,22,121,133,249,7,130,69,130,57,131,63,143,93,143,134,249,24,153,135,249,136,249,137,249,166,78,138,249,223,87,121,95,19,102,139,249,140,249,171,117,121,126,111,139,141,249,6,144,91,154,165,86,39,88,248,89,31,90,180,91,142,249,246,94,143,249,144,249,80,99,59,99,145,249,61,105,135,108,191,108,142,109,147,109,245,109,20,111,146,249,223,112,54,113,89,113,147,249,195,113,213,113,148,249,79,120,111,120,149,249,117,123,227,125,150,249,47,126,151,249,77,136,223,142,152,249,153,249,154,249,91,146,155,249,246,156,156,249,157,249,158,249,133,96,133,109,159,249,177,113,160,249,161,249,177,149,173,83,162,249,163,249,164,249,211,103,165,249,142,112,48,113,48,116,118,130,210,130,166,249,187,149,229,154,125,158,196,102,167,249,193,113,73,132,168,249,169,249,75,88,170,249,171,249,184,93,113,95,172,249,32,102,142,102,121,105,174,105,56,108,243,108,54,110,65,111,218,111,27,112,47,112,80,113,223,113,112,115,173,249,91,116,174,249,212,116,200,118,78,122,147,126,175,249,176,249,241,130,96,138,206,143,177,249,72,147,178,249,25,151,179,249,180,249,66,78,42,80,181,249,8,82,225,83,243,102,109,108,202,111,10,115,127,119,98,122,174,130,221,133,2,134,182,249,212,136,99,138,125,139,107,140,183,249,179,146,184,249,19,151,16,152,148,78,13,79,201,79,178,80,72,83,62,84,51,84,218,85,98,88,186,88,103,89,27,90,228,91,159,96,185,249,202,97,86,101,255,101,100,102,167,104,90,108,179,111,207,112,172,113,82,115,125,123,8,135,164,138,50,156,7,159,75,92,131,108,68,115,137,115,58,146,171,110,101,116,31,118,105,122,21,126,10,134,64,81,197,88,193,100,238,116,21,117,112,118,193,127,149,144,205,150,84,153,38,110,230,116,169,122,170,122,229,129,217,134,120,135,27,138,73,90,140,91,155,91,161,104,0,105,99,109,169,115,19,116,44,116,151,120,233,125,235,127,24,129,85,129,158,131,76,140,46,150,17,152,240,102,128,95,250,101,137,103,106,108,139,115,45,80,3,90,106,107,238,119,22,89,108,93,205,93,37,115,79,117,186,249,187,249,229,80,249,81,47,88,45,89,150,89,218,89,229,91,188,249,189,249,162,93,215,98,22,100,147,100,254,100,190,249,220,102,191,249,72,106,192,249,255,113,100,116,193,249,136,122,175,122,71,126,94,126,0,128,112,129,194,249,239,135,129,137,32,139,89,144,195,249,128,144,82,153,126,97,50,107,116,109,31,126,37,137,177,143,209,79,173,80,151,81,199,82,199,87,137,88,185,91,184,94,66,97,149,105,140,109,103,110,182,110,148,113,98,116,40,117,44,117,115,128,56,131,201,132,10,142,148,147,222,147,196,249,142,78,81,79,118,80,42,81,200,83,203,83,243,83,135,91,211,91,36,92,26,97,130,97,244,101,91,114,151,115,64,116,194,118,80,121,145,121,185,121,6,125,189,127,139,130,213,133,94,134,194,143,71,144,245,144,234,145,133,150,232,150,233,150,214,82,103,95,237,101,49,102,47,104,92,113,54,122,193,144,10,152,145,78,197,249,82,106,158,107,144,111,137,113,24,128,184,130,83,133,75,144,149,150,242,150,251,151,26,133,49,155,144,78,138,113,196,150,67,81,159,83,225,84,19,87,18,87,163,87,155,90,196,90,195,91,40,96,63,97,244,99,133,108,57,109,114,110,144,110,48,114,63,115,87,116,209,130,129,136,69,143,96,144,198,249,98,150,88,152,27,157,8,103,138,141,94,146,77,79,73,80,222,80,113,83,13,87,212,89,1,90,9,92,112,97,144,102,45,110,50,114,75,116,239,125,195,128,14,132,102,132,63,133,95,135,91,136,24,137,2,139,85,144,203,151,79,155,115,78,145,79,18,81,106,81,199,249,47,85,169,85,122,91,165,91,124,94,125,94,190,94,160,96,223,96,8,97,9,97,196,99,56,101,9,103,200,249,212,103,218,103,201,249,97,105,98,105,185,108,39,109,202,249,56,110,203,249,225,111,54,115,55,115,204,249,92,116,49,117,205,249,82,118,206,249,207,249,173,125,254,129,56,132,213,136,152,138,219,138,237,138,48,142,66,142,74,144,62,144,122,144,73,145,201,145,110,147,208,249,209,249,9,88,210,249,211,107,137,128,178,128,211,249,212,249,65,81,107,89,57,92,213,249,214,249,100,111,167,115,228,128,7,141,215,249,23,146,143,149,216,249,217,249,218,249,219,249,127,128,14,98,28,112,104,125,141,135,220,249,160,87,105,96,71,97,183,107,190,138,128,146,177,150,89,78,31,84,235,109,45,133,112,150,243,151,238,152,214,99,227,108,145,144,221,81,201,97,186,129,249,157,157,79,26,80,0,81,156,91,15,97,255,97,236,100,5,105,197,107,145,117,227,119,169,127,100,130,143,133,251,135,99,136,188,138,112,139,171,145,140,78,229,78,10,79,221,249,222,249,55,89,232,89,223,249,242,93,27,95,91,95,33,96,224,249,225,249,226,249,227,249,62,114,229,115,228,249,112,117,205,117,229,249,251,121,230,249,12,128,51,128,132,128,225,130,81,131,231,249,232,249,189,140,179,140,135,144,233,249,234,249,244,152,12,153,235,249,236,249,55,112,202,118,202,127,204,127,252,127,26,139,186,78,193,78,3,82,112,83,237,249,189,84,224,86,251,89,197,91,21,95,205,95,110,110,238,249,239,249,106,125,53,131,240,249,147,134,141,138,241,249,109,151,119,151,242,249,243,249,0,78,90,79,126,79,249,88,229,101,162,110,56,144,176,147,185,153,251,78,236,88,138,89,217,89,65,96,244,249,245,249,20,122,246,249,79,131,195,140,101,81,68,83,247,249,248,249,249,249,205,78,105,82,85,91,191,130,212,78,58,82,168,84,201,89,255,89,80,91,87,91,92,91,99,96,72,97,203,110,153,112,110,113,134,115,247,116,181,117,193,120,43,125,5,128,234,129,40,131,23,133,201,133,238,138,199,140,204,150,92,79,250,82,188,86,171,101,40,102,124,112,184,112,53,114,189,125,141,130,76,145,192,150,114,157,113,91,231,104,152,107,122,111,222,118,145,92,171,102,91,111,180,123,42,124,54,136,220,150,8,78,215,78,32,83,52,88,187,88,239,88,108,89,7,92,51,94,132,94,53,95,140,99,178,102,86,103,31,106,163,106,12,107,63,111,70,114,250,249,80,115,139,116,224,122,167,124,120,129,223,129,231,129,138,131,108,132,35,133,148,133,207,133,221,136,19,141,172,145,119,149,156,150,141,81,201,84,40,87,176,91,77,98,80,103,61,104,147,104,61,110,211,110,125,112,33,126,193,136,161,140,9,143,75,159,78,159,45,114,143,123,205,138,26,147,71,79,78,79,50,81,128,84,208,89,149,94,181,98,117,103,110,105,23,106,174,108,26,110,217,114,42,115,189,117,184,123,53,125,231,130,249,131,87,132,247,133,91,138,175,140,135,142,25,144,184,144,206,150,95,159,227,82,10,84,225,90,194,91,88,100,117,101,244,110,196,114,251,249,132,118,77,122,27,123,77,124,62,126,223,127,123,131,43,139,202,140,100,141,225,141,95,142,234,143,249,143,105,144,209,147,67,79,122,79,179,80,104,81,120,81,77,82,106,82,97,88,124,88,96,89,8,92,85,92,219,94,155,96,48,98,19,104,191,107,8,108,177,111,78,113,32,116,48,117,56,117,81,117,114,118,76,123,139,123,173,123,198,123,143,126,110,138,62,143,73,143,63,146,147,146,34,147,43,148,251,150,90,152,107,152,30,153,7,82,42,98,152,98,89,109,100,118,202,122,192,123,118,125,96,83,190,92,151,94,56,111,185,112,152,124,17,151,142,155,222,158,165,99,122,100,118,135,1,78,149,78,173,78,92,80,117,80,72,84,195,89,154,91,64,94,173,94,247,94,129,95,197,96,58,99,63,101,116,101,204,101,118,102,120,102,254,103,104,105,137,106,99,107,64,108,192,109,232,109,31,110,94,110,30,112,161,112,142,115,253,115,58,117,91,119,135,120,142,121,11,122,125,122,190,124,142,125,71,130,2,138,234,138,158,140,45,145,74,145,216,145,102,146,204,146,32,147,6,151,86,151,92,151,2,152,14,159,54,82,145,82,124,85,36,88,29,94,31,95,140,96,208,99,175,104,223,111,109,121,44,123,205,129,186,133,253,136,248,138,68,142,141,145,100,150,155,150,61,151,76,152,74,159,206,79,70,81,203,81,169,82,50,86,20,95,107,95,170,99,205,100,233,101,65,102,250,102,249,102,29,103,157,104,215,104,253,105,21,111,110,111,103,113,229,113,42,114,170,116,58,119,86,121,90,121,223,121,32,122,149,122,151,124,223,124,68,125,112,126,135,128,251,133,164,134,84,138,191,138,153,141,129,142,32,144,109,144,227,145,59,150,213,150,229,156,207,101,7,124,179,141,195,147,88,91,10,92,82,83,217,98,29,115,39,80,151,91,158,95,176,96,107,97,213,104,217,109,46,116,46,122,66,125,156,125,49,126,107,129,42,142,53,142,126,147,24,148,80,79,80,87,230,93,167,94,43,99,106,127,59,78,79,79,143,79,90,80,221,89,196,128,106,84,104,84,254,85,79,89,153,91,222,93,218,94,93,102,49,103,241,103,42,104,232,108,50,109,74,110,141,111,183,112,224,115,135,117,76,124,2,125,44,125,162,125,31,130,219,134,59,138,133,138,112,141,138,142,51,143,49,144,78,145,82,145,68,148,208,153,249,122,165,124,202,79,1,81,198,81,200,87,239,91,251,92,89,102,61,106,90,109,150,110,236,111,12,113,111,117,227,122,34,136,33,144,117,144,203,150,255,153,1,131,45,78,242,78,70,136,205,145,125,83,219,106,107,105,65,108,122,132,158,88,142,97,254,102,239,98,221,112,17,117,199,117,82,126,184,132,73,139,8,141,75,78,234,83,171,84,48,87,64,87,215,95,1,99,7,99,111,100,47,101,232,101,122,102,157,103,179,103,98,107,96,108,154,108,44,111,229,119,37,120,73,121,87,121,25,125,162,128,2,129,243,129,157,130,183,130,24,135,140,138,252,249,4,141,190,141,114,144,244,118,25,122,55,122,84,126,119,128,7,85,212,85,117,88,47,99,34,100,73,102,75,102,109,104,155,105,132,107,37,109,177,110,205,115,104,116,161,116,91,117,185,117,225,118,30,119,139,119,230,121,9,126,29,126,251,129,47,133,151,136,58,138,209,140,235,142,176,143,50,144,173,147,99,150,115,150,7,151,132,79,241,83,234,89,201,90,25,94,78,104,198,116,190,117,233,121,146,122,163,129,237,134,234,140,204,141,237,143,159,101,21,103,253,249,247,87,87,111,221,125,47,143,246,147,198,150,181,95,242,97,132,111,20,78,152,79,31,80,201,83,223,85,111,93,238,93,33,107,100,107,203,120,154,123,254,249,73,142,202,142,110,144,73,99,62,100,64,119,132,122,47,147,127,148,106,159,176,100,175,111,230,113,168,116,218,116,196,122,18,124,130,126,178,124,152,126,154,139,10,141,125,148,16,153,76,153,57,82,223,91,230,100,45,103,46,125,237,80,195,83,121,88,88,97,89,97,250,97,172,101,217,122,146,139,150,139,9,80,33,80,117,82,49,85,60,90,224,94,112,95,52,97,94,101,12,102,54,102,162,102,205,105,196,110,50,111,22,115,33,118,147,122,57,129,89,130,214,131,188,132,181,80,240,87,192,91,232,91,105,95,161,99,38,120,181,125,220,131,33,133,199,145,245,145,138,81,245,103,86,123,172,140,196,81,187,89,189,96,85,134,28,80,255,249,84,82,58,92,125,97,26,98,211,98,242,100,165,101,204,110,32,118,10,129,96,142,95,150,187,150,223,78,67,83,152,85,41,89,221,93,197,100,201,108,250,109,148,115,127,122,27,130,166,133,228,140,16,142,119,144,231,145,225,149,33,150,198,151,248,81,242,84,134,85,185,95,164,100,136,111,180,125,31,143,77,143,53,148,201,80,22,92,190,108,251,109,27,117,187,119,61,124,100,124,121,138,194,138,30,88,190,89,22,94,119,99,82,114,138,117,107,119,220,138,188,140,18,143,243,94,116,102,248,109,125,128,193,131,203,138,81,151,214,155,0,250,67,82,255,102,149,109,239,110,224,125,230,138,46,144,94,144,212,154,29,82,127,82,232,84,148,97,132,98,219,98,162,104,18,105,90,105,53,106,146,112,38,113,93,120,1,121,14,121,210,121,13,122,150,128,120,130,213,130,73,131,73,133,130,140,133,141,98,145,139,145,174,145,195,79,209,86,237,113,215,119,0,135,248,137,248,91,214,95,81,103,168,144,226,83,90,88,245,91,164,96,129,97,96,100,61,126,112,128,37,133,131,146,174,100,172,80,20,93,0,103,156,88,189,98,168,99,14,105,120,105,30,106,107,110,186,118,203,121,187,130,41,132,207,138,168,141,253,143,18,145,75,145,156,145,16,147,24,147,154,147,219,150,54,154,13,156,17,78,92,117,93,121,250,122,81,123,201,123,46,126,196,132,89,142,116,142,248,142,16,144,37,102,63,105,67,116,250,81,46,103,220,158,69,81,224,95,150,108,242,135,93,136,119,136,180,96,181,129,3,132,5,141,214,83,57,84,52,86,54,90,49,92,138,112,224,127,90,128,6,129,237,129,163,141,137,145,95,154,242,157,116,80,196,78,160,83,251,96,44,110,100,92,136,79,36,80,228,85,217,92,95,94,101,96,148,104,187,108,196,109,190,113,212,117,244,117,97,118,26,122,73,122,199,125,251,125,110,127,244,129,169,134,28,143,201,150,179,153,82,159,71,82,197,82,237,152,170,137,3,78,210,103,6,111,181,79,226,91,149,103,136,108,120,109,27,116,39,120,221,145,124,147,196,135,228,121,49,122,235,95,214,78,164,84,62,85,174,88,165,89,240,96,83,98,214,98,54,103,85,105,53,130,64,150,177,153,221,153,44,80,83,83,68,85,124,87,1,250,88,98,2,250,226,100,107,102,221,103,193,111,239,111,34,116,56,116,23,138,56,148,81,84,6,86,102,87,72,95,154,97,78,107,88,112,173,112,187,125,149,138,106,89,43,129,162,99,8,119,61,128,170,140,84,88,45,100,187,105,149,91,17,94,111,110,3,250,105,133,76,81,240,83,42,89,32,96,75,97,134,107,112,108,240,108,30,123,206,128,212,130,198,141,176,144,177,152,4,250,199,100,164,111,145,100,4,101,78,81,16,84,31,87,14,138,95,97,118,104,5,250,219,117,82,123,113,125,26,144,6,88,204,105,127,129,42,137,0,144,57,152,120,80,87,89,172,89,149,98,15,144,42,155,93,97,121,114,214,149,97,87,70,90,244,93,138,98,173,100,250,100,119,103,226,108,62,109,44,114,54,116,52,120,119,127,173,130,219,141,23,152,36,82,66,87,127,103,72,114,227,116,169,140,166,143,17,146,42,150,107,81,237,83,76,99,105,79,4,85,150,96,87,101,155,108,127,109,76,114,253,114,23,122,135,137,157,140,109,95,142,111,249,112,168,129,14,97,191,79,79,80,65,98,71,114,199,123,232,125,233,127,77,144,173,151,25,154,182,140,106,87,115,94,176,103,13,132,85,138,32,84,22,91,99,94,226,94,10,95,131,101,186,128,61,133,137,149,91,150,72,79,5,83,13,83,15,83,134,84,250,84,3,87,3,94,22,96,155,98,177,98,85,99,6,250,225,108,102,109,177,117,50,120,222,128,47,129,222,130,97,132,178,132,141,136,18,137,11,144,234,146,253,152,145,155,69,94,180,102,221,102,17,112,6,114,7,250,245,79,125,82,106,95,83,97,83,103,25,106,2,111,226,116,104,121,104,136,121,140,199,152,196,152,67,154,193,84,31,122,83,105,247,138,74,140,168,152,174,153,124,95,171,98,178,117,174,118,171,136,127,144,66,150,57,83,60,95,197,95,204,108,204,115,98,117,139,117,70,123,254,130,157,153,79,78,60,144,11,78,85,79,166,83,15,89,200,94,48,102,179,108,85,116,119,131,102,135,192,140,80,144,30,151,21,156,209,88,120,91,80,134,20,139,180,157,210,91,104,96,141,96,241,101,87,108,34,111,163,111,26,112,85,127,240,127,145,149,146,149,80,150,211,151,114,82,68,143,253,81,43,84,184,84,99,85,138,85,187,106,181,109,216,125,102,130,156,146,119,150,121,158,8,84,200,84,210,118,228,134,164,149,212,149,92,150,162,78,9,79,238,89,230,90,247,93,82,96,151,98,109,103,65,104,134,108,47,110,56,127,155,128,42,130,8,250,9,250,5,152,165,78,85,80,179,84,147,87,90,89,105,91,179,91,200,97,119,105,119,109,35,112,249,135,227,137,114,138,231,138,130,144,237,153,184,154,190,82,56,104,22,80,120,94,79,103,71,131,76,136,171,78,17,84,174,86,230,115,21,145,255,151,9,153,87,153,153,153,83,86,159,88,91,134,49,138,178,97,246,106,123,115,210,142,71,107,170,150,87,154,85,89,0,114,107,141,105,151,212,79,244,92,38,95,248,97,91,102,235,108,171,112,132,115,185,115,254,115,41,119,77,119,67,125,98,125,35,126,55,130,82,136,10,250,226,140,73,146,111,152,81,91,116,122,64,136,1,152,204,90,224,79,84,83,62,89,253,92,62,99,121,109,249,114,5,129,7,129,162,131,207,146,48,152,168,78,68,81,17,82,139,87,98,95,194,108,206,110,5,112,80,112,175,112,146,113,233,115,105,116,74,131,162,135,97,136,8,144,162,144,163,147,168,153,110,81,87,95,224,96,103,97,179,102,89,133,74,142,175,145,139,151,78,78,146,78,124,84,213,88,250,88,125,89,181,92,39,95,54,98,72,98,10,102,103,102,235,107,105,109,207,109,86,110,248,110,148,111,224,111,233,111,93,112,208,114,37,116,90,116,224,116,147,118,92,121,202,124,30,126,225,128,166,130,107,132,191,132,78,134,95,134,116,135,119,139,106,140,172,147,0,152,101,152,209,96,22,98,119,145,90,90,15,102,247,109,62,110,63,116,66,155,253,95,218,96,15,123,196,84,24,95,94,108,211,108,42,109,216,112,5,125,121,134,12,138,59,157,22,83,140,84,5,91,58,106,107,112,117,117,141,121,190,121,177,130,239,131,113,138,65,139,168,140,116,151,11,250,244,100,43,101,186,120,187,120,107,122,56,78,154,85,80,89,166,91,123,94,163,96,219,99,97,107,101,102,83,104,25,110,101,113,176,116,8,125,132,144,105,154,37,156,59,109,209,110,62,115,65,140,202,149,240,81,76,94,168,95,77,96,246,96,48,97,76,97,67,102,68,102,165,105,193,108,95,110,201,110,98,111,76,113,156,116,135,118,193,123,39,124,82,131,87,135,81,144,141,150,195,158,47,83,222,86,251,94,138,95,98,96,148,96,247,97,102,102,3,103,156,106,238,109,174,111,112,112,106,115,106,126,190,129,52,131,212,134,168,138,196,140,131,82,114,115,150,91,107,106,4,148,238,84,134,86,93,91,72,101,133,101,201,102,159,104,141,109,198,109,59,114,180,128,117,145,77,154,175,79,25,80,154,83,14,84,60,84,137,85,197,85,63,94,140,95,61,103,102,113,221,115,5,144,219,82,243,82,100,88,206,88,4,113,143,113,251,113,176,133,19,138,136,102,168,133,167,85,132,102,74,113,49,132,73,83,153,85,193,107,89,95,189,95,238,99,137,102,71,113,241,138,29,143,190,158,17,79,58,100,203,112,102,117,103,134,100,96,78,139,248,157,71,81,246,81,8,83,54,109,248,128,209,158,21,102,35,107,152,112,213,117,3,84,121,92,7,125,22,138,32,107,61,107,70,107,56,84,112,96,61,109,213,127,8,130,214,80,222,81,156,85,107,86,205,86,236,89,9,91,12,94,153,97,152,97,49,98,94,102,230,102,153,113,185,113,186,113,167,114,167,121,0,122,178,127,112,138,0,0,0,0,0,48,1,48,2,48,12,255,14,255,251,48,26,255,27,255,31,255,1,255,155,48,156,48,180,0,64,255,168,0,62,255,227,255,63,255,253,48,254,48,157,48,158,48,3,48,221,78,5,48,6,48,7,48,252,48,21,32,16,32,15,255,92,0,28,48,22,32,92,255,38,32,37,32,24,32,25,32,28,32,29,32,8,255,9,255,20,48,21,48,59,255,61,255,91,255,93,255,8,48,9,48,10,48,11,48,12,48,13,48,14,48,15,48,16,48,17,48,11,255,18,34,177,0,215,0,247,0,29,255,96,34,28,255,30,255,102,34,103,34,30,34,52,34], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+20480);
/* memory initializer */ allocate([66,38,64,38,176,0,50,32,51,32,3,33,229,255,4,255,162,0,163,0,5,255,3,255,6,255,10,255,32,255,167,0,6,38,5,38,203,37,207,37,206,37,199,37,198,37,161,37,160,37,179,37,178,37,189,37,188,37,59,32,18,48,146,33,144,33,145,33,147,33,19,48,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,34,11,34,134,34,135,34,130,34,131,34,42,34,41,34,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,39,34,40,34,172,0,210,33,212,33,0,34,3,34,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,32,34,165,34,18,35,2,34,7,34,97,34,82,34,106,34,107,34,26,34,61,34,29,34,53,34,43,34,44,34,0,0,0,0,0,0,0,0,0,0,0,0,0,0,43,33,48,32,111,38,109,38,106,38,32,32,33,32,182,0,0,0,0,0,0,0,0,0,239,37,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,255,17,255,18,255,19,255,20,255,21,255,22,255,23,255,24,255,25,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,33,255,34,255,35,255,36,255,37,255,38,255,39,255,40,255,41,255,42,255,43,255,44,255,45,255,46,255,47,255,48,255,49,255,50,255,51,255,52,255,53,255,54,255,55,255,56,255,57,255,58,255,0,0,0,0,0,0,0,0,0,0,0,0,65,255,66,255,67,255,68,255,69,255,70,255,71,255,72,255,73,255,74,255,75,255,76,255,77,255,78,255,79,255,80,255,81,255,82,255,83,255,84,255,85,255,86,255,87,255,88,255,89,255,90,255,0,0,0,0,0,0,0,0,65,48,66,48,67,48,68,48,69,48,70,48,71,48,72,48,73,48,74,48,75,48,76,48,77,48,78,48,79,48,80,48,81,48,82,48,83,48,84,48,85,48,86,48,87,48,88,48,89,48,90,48,91,48,92,48,93,48,94,48,95,48,96,48,97,48,98,48,99,48,100,48,101,48,102,48,103,48,104,48,105,48,106,48,107,48,108,48,109,48,110,48,111,48,112,48,113,48,114,48,115,48,116,48,117,48,118,48,119,48,120,48,121,48,122,48,123,48,124,48,125,48,126,48,127,48,128,48,129,48,130,48,131,48,132,48,133,48,134,48,135,48,136,48,137,48,138,48,139,48,140,48,141,48,142,48,143,48,144,48,145,48,146,48,147,48,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,161,48,162,48,163,48,164,48,165,48,166,48,167,48,168,48,169,48,170,48,171,48,172,48,173,48,174,48,175,48,176,48,177,48,178,48,179,48,180,48,181,48,182,48,183,48,184,48,185,48,186,48,187,48,188,48,189,48,190,48,191,48,192,48,193,48,194,48,195,48,196,48,197,48,198,48,199,48,200,48,201,48,202,48,203,48,204,48,205,48,206,48,207,48,208,48,209,48,210,48,211,48,212,48,213,48,214,48,215,48,216,48,217,48,218,48,219,48,220,48,221,48,222,48,223,48,224,48,225,48,226,48,227,48,228,48,229,48,230,48,231,48,232,48,233,48,234,48,235,48,236,48,237,48,238,48,239,48,240,48,241,48,242,48,243,48,244,48,245,48,246,48,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,145,3,146,3,147,3,148,3,149,3,150,3,151,3,152,3,153,3,154,3,155,3,156,3,157,3,158,3,159,3,160,3,161,3,163,3,164,3,165,3,166,3,167,3,168,3,169,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,177,3,178,3,179,3,180,3,181,3,182,3,183,3,184,3,185,3,186,3,187,3,188,3,189,3,190,3,191,3,192,3,193,3,195,3,196,3,197,3,198,3,199,3,200,3,201,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,4,17,4,18,4,19,4,20,4,21,4,1,4,22,4,23,4,24,4,25,4,26,4,27,4,28,4,29,4,30,4,31,4,32,4,33,4,34,4,35,4,36,4,37,4,38,4,39,4,40,4,41,4,42,4,43,4,44,4,45,4,46,4,47,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,48,4,49,4,50,4,51,4,52,4,53,4,81,4,54,4,55,4,56,4,57,4,58,4,59,4,60,4,61,4,62,4,63,4,64,4,65,4,66,4,67,4,68,4,69,4,70,4,71,4,72,4,73,4,74,4,75,4,76,4,77,4,78,4,79,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,2,37,12,37,16,37,24,37,20,37,28,37,44,37,36,37,52,37,60,37,1,37,3,37,15,37,19,37,27,37,23,37,35,37,51,37,43,37,59,37,75,37,32,37,47,37,40,37,55,37,63,37,29,37,48,37,37,37,56,37,66,37], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+30720);
/* memory initializer */ allocate([156,78,22,85,3,90,63,150,192,84,27,97,40,99,246,89,34,144,117,132,28,131,80,122,170,96,225,99,37,110,237,101,102,132,166,130,245,155,147,104,39,87,161,101,113,98,155,91,208,89,123,134,244,152,98,125,190,125,142,155,22,98,159,124,183,136,137,91,181,94,9,99,151,102,72,104,199,149,141,151,79,103,229,78,10,79,77,79,157,79,73,80,242,86,55,89,212,89,1,90,9,92,223,96,15,97,112,97,19,102,5,105,186,112,79,117,112,117,251,121,173,125,239,125,195,128,14,132,99,136,2,139,85,144,122,144,59,83,149,78,165,78,223,87,178,128,193,144,239,120,0,78,241,88,162,110,56,144,50,122,40,131,139,130,47,156,65,81,112,83,189,84,225,84,224,86,251,89,21,95,242,152,235,109,228,128,45,133,98,150,112,150,160,150,251,151,11,84,243,83,135,91,207,112,189,127,194,143,232,150,111,83,92,157,186,122,17,78,147,120,252,129,38,110,24,86,4,85,29,107,26,133,59,156,229,89,169,83,102,109,220,116,143,149,66,86,145,78,75,144,242,150,79,131,12,153,225,83,182,85,48,91,113,95,32,102,243,102,4,104,56,108,243,108,41,109,91,116,200,118,78,122,52,152,241,130,91,136,96,138,237,146,178,109,171,117,202,118,197,153,166,96,1,139,138,141,178,149,142,105,173,83,134,81,18,87,48,88,68,89,180,91,246,94,40,96,169,99,244,99,191,108,20,111,142,112,20,113,89,113,213,113,63,115,1,126,118,130,209,130,151,133,96,144,91,146,27,157,105,88,188,101,90,108,37,117,249,81,46,89,101,89,128,95,220,95,188,98,250,101,42,106,39,107,180,107,139,115,193,127,86,137,44,157,14,157,196,158,161,92,150,108,123,131,4,81,75,92,182,97,198,129,118,104,97,114,89,78,250,79,120,83,105,96,41,110,79,122,243,151,11,78,22,83,238,78,85,79,61,79,161,79,115,79,160,82,239,83,9,86,15,89,193,90,182,91,225,91,209,121,135,102,156,103,182,103,76,107,179,108,107,112,194,115,141,121,190,121,60,122,135,123,177,130,219,130,4,131,119,131,239,131,211,131,102,135,178,138,41,86,168,140,230,143,78,144,30,151,138,134,196,79,232,92,17,98,89,114,59,117,229,129,189,130,254,134,192,140,197,150,19,153,213,153,203,78,26,79,227,137,222,86,74,88,202,88,251,94,235,95,42,96,148,96,98,96,208,97,18,98,208,98,57,101,65,155,102,102,176,104,119,109,112,112,76,117,134,118,117,125,165,130,249,135,139,149,142,150,157,140,241,81,190,82,22,89,179,84,179,91,22,93,104,97,130,105,175,109,141,120,203,132,87,136,114,138,167,147,184,154,108,109,168,153,217,134,163,87,255,103,206,134,14,146,131,82,135,86,4,84,211,94,225,98,185,100,60,104,56,104,187,107,114,115,186,120,107,122,154,137,210,137,107,141,3,143,237,144,163,149,148,150,105,151,102,91,179,92,125,105,77,152,78,152,155,99,32,123,43,106,127,106,182,104,13,156,95,111,114,82,157,85,112,96,236,98,59,109,7,110,209,110,91,132,16,137,68,143,20,78,57,156,246,83,27,105,58,106,132,151,42,104,92,81,195,122,178,132,220,145,140,147,91,86,40,157,34,104,5,131,49,132,165,124,8,82,197,130,230,116,126,78,131,79,160,81,210,91,10,82,216,82,231,82,251,93,154,85,42,88,230,89,140,91,152,91,219,91,114,94,121,94,163,96,31,97,99,97,190,97,219,99,98,101,209,103,83,104,250,104,62,107,83,107,87,108,34,111,151,111,69,111,176,116,24,117,227,118,11,119,255,122,161,123,33,124,233,125,54,127,240,127,157,128,102,130,158,131,179,137,204,138,171,140,132,144,81,148,147,149,145,149,162,149,101,150,211,151,40,153,24,130,56,78,43,84,184,92,204,93,169,115,76,118,60,119,169,92,235,127,11,141,193,150,17,152,84,152,88,152,1,79,14,79,113,83,156,85,104,86,250,87,71,89,9,91,196,91,144,92,12,94,126,94,204,95,238,99,58,103,215,101,226,101,31,103,203,104,196,104,95,106,48,94,197,107,23,108,125,108,127,117,72,121,99,91,0,122,0,125,189,95,143,137,24,138,180,140,119,141,204,142,29,143,226,152,14,154,60,155,128,78,125,80,0,81,147,89,156,91,47,98,128,98,236,100,58,107,160,114,145,117,71,121,169,127,251,135,188,138,112,139,172,99,202,131,160,151,9,84,3,84,171,85,84,104,88,106,112,138,39,120,117,103,205,158,116,83,162,91,26,129,80,134,6,144,24,78,69,78,199,78,17,79,202,83,56,84,174,91,19,95,37,96,81,101,61,103,66,108,114,108,227,108,120,112,3,116,118,122,174,122,8,123,26,125,254,124,102,125,231,101,91,114,187,83,69,92,232,93,210,98,224,98,25,99,32,110,90,134,49,138,221,141,248,146,1,111,166,121,90,155,168,78,171,78,172,78,155,79,160,79,209,80,71,81,246,122,113,81,246,81,84,83,33,83,127,83,235,83,172,85,131,88,225,92,55,95,74,95,47,96,80,96,109,96,31,99,89,101,75,106,193,108,194,114,237,114,239,119,248,128,5,129,8,130,78,133,247,144,225,147,255,151,87,153,90,154,240,78,221,81,45,92,129,102,109,105,64,92,242,102,117,105,137,115,80,104,129,124,197,80,228,82,71,87,254,93,38,147,164,101,35,107,61,107,52,116,129,121,189,121,75,123,202,125,185,130,204,131,127,136,95,137,57,139,209,143,209,145,31,84,128,146,93,78,54,80,229,83,58,83,215,114,150,115,233,119,230,130,175,142,198,153,200,153,210,153,119,81,26,97,94,134,176,85,122,122,118,80,211,91,71,144,133,150,50,78,219,106,231,145,81,92,72,92,152,99,159,122,147,108,116,151,97,143,170,122,138,113,136,150,130,124,23,104,112,126,81,104,108,147,242,82,27,84,171,133,19,138,164,127,205,142,225,144,102,83,136,136,65,121,194,79,190,80,17,82,68,81,83,85,45,87,234,115,139,87,81,89,98,95,132,95,117,96,118,97,103,97,169,97,178,99,58,100,108,101,111,102,66,104,19,110,102,117,61,122,251,124,76,125,153,125,75,126,107,127,14,131,74,131,205,134,8,138,99,138,102,139,253,142,26,152,143,157,184,130,206,143,232,155,135,82,31,98,131,100,192,111,153,150,65,104,145,80,32,107,122,108,84,111,116,122,80,125,64,136,35,138,8,103,246,78,57,80,38,80,101,80,124,81,56,82,99,82,167,85,15,87,5,88,204,90,250,94,178,97,248,97,243,98,114,99,28,105,41,106,125,114,172,114,46,115,20,120,111,120,121,125,12,119,169,128,139,137,25,139,226,140,210,142,99,144,117,147,122,150,85,152,19,154,120,158,67,81,159,83,179,83,123,94,38,95,27,110,144,110,132,115,254,115,67,125,55,130,0,138,250,138,80,150,78,78,11,80,228,83,124,84,250,86,209,89,100,91,241,93,171,94,39,95,56,98,69,101,175,103,86,110,208,114,202,124,180,136,161,128,225,128,240,131,78,134,135,138,232,141,55,146,199,150,103,152,19,159,148,78,146,78,13,79,72,83,73,84,62,84,47,90,140,95,161,95,159,96,167,104,142,106,90,116,129,120,158,138,164,138,119,139,144,145,94,78,201,155,164,78,124,79,175,79,25,80,22,80,73,81,108,81,159,82,185,82,254,82,154,83,227,83,17,84,14,84,137,85,81,87,162,87,125,89,84,91,93,91,143,91,229,93,231,93,247,93,120,94,131,94,154,94,183,94,24,95,82,96,76,97,151,98,216,98,167,99,59,101,2,102,67,102,244,102,109,103,33,104,151,104,203,105,95,108,42,109,105,109,47,110,157,110,50,117,135,118,108,120,63,122,224,124,5,125,24,125,94,125,177,125,21,128,3,128,175,128,177,128,84,129,143,129,42,130,82,131,76,136,97,136,27,139,162,140,252,140,202,144,117,145,113,146,63,120,252,146,164,149,77,150,5,152,153,153,216,154,59,157,91,82,171,82,247,83,8,84,213,88,247,98,224,111,106,140,95,143,185,158,75,81,59,82,74,84,253,86,64,122,119,145,96,157,210,158,68,115,9,111,112,129,17,117,253,95,218,96,168,154,219,114,188,143,100,107,3,152,202,78,240,86,100,87,190,88,90,90,104,96,199,97,15,102,6,102,57,104,177,104,247,109,213,117,58,125,110,130,66,155,155,78,80,79,201,83,6,85,111,93,230,93,238,93,251,103,153,108,115,116,2,120,80,138,150,147,223,136,80,87,167,94,43,99,181,80,172,80,141,81,0,103,201,84,94,88,187,89,176,91,105,95,77,98,161,99,61,104,115,107,8,110,125,112,199,145,128,114,21,120,38,120,109,121,142,101,48,125,220,131,193,136,9,143,155,150,100,82,40,87,80,103,106,127,161,140,180,81,66,87,42,150,58,88,138,105,180,128,178,84,14,93,252,87,149,120,250,157,92,79,74,82,139,84,62,100,40,102,20,103,245,103,132,122,86,123,34,125,47,147,92,104,173,155,57,123,25,83,138,81,55,82,223,91,246,98,174,100,230,100,45,103,186,107,169,133,209,150,144,118,214,155,76,99,6,147,171,155,191,118,82,102,9,78,152,80,194,83,113,92,232,96,146,100,99,101,95,104,230,113,202,115,35,117,151,123,130,126,149,134,131,139,219,140,120,145,16,153,172,101,171,102,139,107,213,78,212,78,58,79,127,79,58,82,248,83,242,83,227,85,219,86,235,88,203,89,201,89,255,89,80,91,77,92,2,94,43,94,215,95,29,96,7,99,47,101,92,91,175,101,189,101,232,101,157,103,98,107,123,107,15,108,69,115,73,121,193,121,248,124,25,125,43,125,162,128,2,129,243,129,150,137,94,138,105,138,102,138,140,138,238,138,199,140,220,140,204,150,252,152,111,107,139,78,60,79,141,79,80,81,87,91,250,91,72,97,1,99,66,102,33,107,203,110,187,108,62,114,189,116,212,117,193,120,58,121,12,128,51,128,234,129,148,132,158,143,80,108,127,158,15,95,88,139,43,157,250,122,248,142,141,91,235,150,3,78,241,83,247,87,49,89,201,90,164,91,137,96,127,110,6,111,190,117,234,140,159,91,0,133,224,123,114,80,244,103,157,130,97,92,74,133,30,126,14,130,153,81,4,92,104,99,102,141,156,101,110,113,62,121,23,125,5,128,29,139,202,142,110,144,199,134,170,144,31,80,250,82,58,92,83,103,124,112,53,114,76,145,200,145,43,147,229,130,194,91,49,95,249,96,59,78,214,83,136,91,75,98,49,103,138,107,233,114,224,115,46,122,107,129,163,141,82,145,150,153,18,81,215,83,106,84,255,91,136,99,57,106,172,125,0,151,218,86,206,83,104,84,151,91,49,92,222,93,238,79,1,97,254,98,50,109,192,121,203,121,66,125,77,126,210,127,237,129,31,130,144,132,70,136,114,137,144,139,116,142,47,143,49,144,75,145,108,145,198,150,156,145,192,78,79,79,69,81,65,83,147,95,14,98,212,103,65,108,11,110,99,115,38,126,205,145,131,146,212,83,25,89,191,91,209,109,93,121,46,126,155,124,126,88,159,113,250,81,83,136,240,143,202,79,251,92,37,102,172,119,227,122,28,130,255,153,198,81,170,95,236,101,111,105,137,107,243,109,150,110,100,111,254,118,20,125,225,93,117,144,135,145,6,152,230,81,29,82,64,98,145,102,217,102,26,110,182,94,210,125,114,127,248,102,175,133,247,133,248,138,169,82,217,83,115,89,143,94,144,95,85,96,228,146,100,150,183,80,31,81,221,82,32,83,71,83,236,83,232,84,70,85,49,85,23,86,104,89,190,89,60,90,181,91,6,92,15,92,17,92,26,92,132,94,138,94,224,94,112,95,127,98,132,98,219,98,140,99,119,99,7,102,12,102,45,102,118,102,126,103,162,104,31,106,53,106,188,108,136,109,9,110,88,110,60,113,38,113,103,113,199,117,1,119,93,120,1,121,101,121,240,121,224,122,17,123,167,124,57,125,150,128,214,131,139,132,73,133,93,136,243,136,31,138,60,138,84,138,115,138,97,140,222,140,164,145,102,146,126,147,24,148,156,150,152,151,10,78,8,78,30,78,87,78,151,81,112,82,206,87,52,88,204,88,34,91,56,94,197,96,254,100,97,103,86,103,68,109,182,114,115,117,99,122,184,132,114,139,184,145,32,147,49,86,244,87,254,152,237,98,13,105,150,107,237,113,84,126,119,128,114,130,230,137,223,152,85,135,177,143,59,92,56,79,225,79,181,79,7,85,32,90,221,91,233,91,195,95,78,97,47,99,176,101,75,102,238,104,155,105,120,109,241,109,51,117,185,117,31,119,94,121,230,121,51,125,227,129,175,130,170,133,170,137,58,138,171,142,155,143,50,144,221,145,7,151,186,78,193,78,3,82,117,88,236,88,11,92,26,117,61,92,78,129,10,138,197,143,99,150,109,151,37,123,207,138,8,152,98,145,243,86,168,83,23,144,57,84,130,87,37,94,168,99,52,108,138,112,97,119,139,124,224,127,112,136,66,144,84,145,16,147,24,147,143,150,94,116,196,154,7,93,105,93,112,101,162,103,168,141,219,150,110,99,73,103,25,105,197,131,23,152,192,150,254,136,132,111,122,100,248,91,22,78,44,112,93,117,47,102,196,81,54,82,226,82,211,89,129,95,39,96,16,98,63,101,116,101,31,102,116,102,242,104,22,104,99,107,5,110,114,114,31,117,219,118,190,124,86,128,240,88,253,136,127,137,160,138,147,138,203,138,29,144,146,145,82,151,89,151,137,101,14,122,6,129,187,150,45,94,220,96,26,98,165,101,20,102,144,103,243,119,77,122,77,124,62,126,10,129,172,140,100,141,225,141,95,142,169,120,7,82,217,98,165,99,66,100,152,98,45,138,131,122,192,123,172,138,234,150,118,125,12,130,73,135,217,78,72,81,67,83,96,83,163,91,2,92,22,92,221,93,38,98,71,98,176,100,19,104,52,104,201,108,69,109,23,109,211,103,92,111,78,113,125,113,203,101,127,122,173,123,218,125,74,126,168,127,122,129,27,130,57,130,166,133,110,138,206,140,245,141,120,144,119,144,173,146,145,146,131,149,174,155,77,82,132,85,56,111,54,113,104,81,133,121,85,126,179,129,206,124,76,86,81,88,168,92,170,99,254,102,253,102,90,105,217,114,143,117,142,117,14,121,86,121,223,121,151,124,32,125,68,125,7,134,52,138,59,150,97,144,32,159,231,80,117,82,204,83,226,83,9,80,170,85,238,88,79,89,61,114,139,91,100,92,29,83,227,96,243,96,92,99,131,99,63,99,187,99,205,100,233,101,249,102,227,93,205,105,253,105,21,111,229,113,137,78,233,117,248,118,147,122,223,124,207,125,156,125,97,128,73,131,88,131,108,132,188,132,251,133,197,136,112,141,1,144,109,144,151,147,28,151,18,154,207,80,151,88,142,97,211,129,53,133,8,141,32,144,195,79,116,80,71,82,115,83,111,96,73,99,95,103,44,110,179,141,31,144,215,79,94,92,202,140,207,101,154,125,82,83,150,136,118,81,195,99,88,91,107,91,10,92,13,100,81,103,92,144,214,78,26,89,42,89,112,108,81,138,62,85,21,88,165,89,240,96,83,98,193,103,53,130,85,105,64,150,196,153,40,154,83,79,6,88,254,91,16,128,177,92,47,94,133,95,32,96,75,97,52,98,255,102,240,108,222,110,206,128,127,129,212,130,139,136,184,140,0,144,46,144,138,150,219,158,219,155,227,78,240,83,39,89,44,123,141,145,76,152,249,157,221,110,39,112,83,83,68,85,133,91,88,98,158,98,211,98,162,108,239,111,34,116,23,138,56,148,193,111,254,138,56,131,231,81,248,134,234,83,233,83,70,79,84,144,176,143,106,89,49,129,253,93,234,122,191,143,218,104,55,140,248,114,72,156,61,106,176,138,57,78,88,83,6,86,102,87,197,98,162,99,230,101,78,107,225,109,91,110,173,112,237,119,239,122,170,123,187,125,61,128,198,128,203,134,149,138,91,147,227,86,199,88,62,95,173,101,150,102,128,106,181,107,55,117,199,138,36,80,229,119,48,87,27,95,101,96,122,102,96,108,244,117,26,122,110,127,244,129,24,135,69,144,179,153,201,123,92,117,249,122,81,123,196,132,16,144,233,121,146,122,54,131,225,90,64,119,45,78,242,78,153,91,224,95,189,98,60,102,241,103,232,108,107,134,119,136,59,138,78,145,243,146,208,153,23,106,38,112,42,115,231,130,87,132,175,140,1,78,70,81,203,81,139,85,245,91,22,94,51,94,129,94,20,95,53,95,107,95,180,95,242,97,17,99,162,102,29,103,110,111,82,114,58,117,58,119,116,128,57,129,120,129,118,135,191,138,220,138,133,141,243,141,154,146,119,149,2,152,229,156,197,82,87,99,244,118,21,103,136,108,205,115,195,140,174,147,115,150,37,109,156,88,14,105,204,105,253,143,154,147,219,117,26,144,90,88,2,104,180,99,251,105,67,79,44,111,216,103,187,143,38,133,180,125,84,147,63,105,112,111,106,87,247,88,44,91,44,125,42,114,10,84,227,145,180,157,173,78,78,79,92,80,117,80,67,82,158,140,72,84,36,88,154,91,29,94,149,94,173,94,247,94,31,95,140,96,181,98,58,99,208,99,175,104,64,108,135,120,142,121,11,122,224,125,71,130,2,138,230,138,68,142,19,144,184,144,45,145,216,145,14,159,229,108,88,100,226,100,117,101,244,110,132,118,27,123,105,144,209,147,186,110,242,84,185,95,164,100,77,143,237,143,68,146,120,81,107,88,41,89,85,92,151,94,251,109,143,126,28,117,188,140,226,142,91,152,185,112,29,79,191,107,177,111,48,117,251,150,78,81,16,84,53,88,87,88,172,89,96,92,146,95,151,101,92,103,33,110,123,118,223,131,237,140,20,144,253,144,77,147,37,120,58,120,170,82,166,94,31,87,116,89,18,96,18,80,90,81,172,81,205,81,0,82,16,85,84,88,88,88,87,89,149,91,246,92,139,93,188,96,149,98,45,100,113,103,67,104,188,104,223,104,215,118,216,109,111,110,155,109,111,112,200,113,83,95,216,117,119,121,73,123,84,123,82,123,214,124,113,125,48,82,99,132,105,133,228,133,14,138,4,139,70,140,15,142,3,144,15,144,25,148,118,150,45,152,48,154,216,149,205,80,213,82,12,84,2,88,14,92,167,97,158,100,30,109,179,119,229,122,244,128,4,132,83,144,133,146,224,92,7,157,63,83,151,95,179,95,156,109,121,114,99,119,191,121,228,123,210,107,236,114,173,138,3,104,97,106,248,81,129,122,52,105,74,92,246,156,235,130,197,91,73,145,30,112,120,86,111,92,199,96,102,101,140,108,90,140,65,144,19,152,81,84,199,102,13,146,72,89,163,144,133,81,77,78,234,81,153,133,14,139,88,112,122,99,75,147,98,105,180,153,4,126,119,117,87,83,96,105,223,142,227,150,93,108,140,78,60,92,16,95,233,143,2,83,209,140,137,128,121,134,255,94,229,101,115,78,101,81,130,89,63,92,238,151,251,78,138,89,205,95,141,138,225,111,176,121,98,121,231,91,113,132,43,115,177,113,116,94,245,95,123,99,154,100,195,113,152,124,67,78,252,94,75,78,220,87,162,86,169,96,195,111,13,125,253,128,51,129,191,129,178,143,151,137,164,134,244,93,138,98,173,100,135,137,119,103,226,108,62,109,54,116,52,120,70,90,117,127,173,130,172,153,243,79,195,94,221,98,146,99,87,101,111,103,195,118,76,114,204,128,186,128,41,143,77,145,13,80,249,87,146,90,133,104,115,105,100,113,253,114,183,140,242,88,224,140,106,150,25,144,127,135,228,121,231,119,41,132,47,79,101,82,90,83,205,98,207,103,202,108,125,118,148,123,149,124,54,130,132,133,235,143,221,102,32,111,6,114,27,126,171,131,193,153,166,158,253,81,177,123,114,120,184,123,135,128,72,123,232,106,97,94,140,128,81,117,96,117,107,81,98,146,140,110,122,118,151,145,234,154,16,79,112,127,156,98,79,123,165,149,233,156,122,86,89,88,228,134,188,150,52,79,36,82,74,83,205,83,219,83,6,94,44,100,145,101,127,103,62,108,78,108,72,114,175,114,237,115,84,117,65,126,44,130,233,133,169,140,196,123,198,145,105,113,18,152,239,152,61,99,105,102,106,117,228,118,208,120,67,133,238,134,42,83,81,83,38,84,131,89,135,94,124,95,178,96,73,98,121,98,171,98,144,101,212,107,204,108,178,117,174,118,145,120,216,121,203,125,119,127,165,128,171,136,185,138,187,140,127,144,94,151,219,152,11,106,56,124,153,80,62,92,174,95,135,103,216,107,53,116,9,119,142,127,59,159,202,103,23,122,57,83,139,117,237,154,102,95,157,129,241,131,152,128,60,95,197,95,98,117,70,123,60,144,103,104,235,89,155,90,16,125,126,118,44,139,245,79,106,95,25,106,55,108,2,111,226,116,104,121,104,136,85,138,121,140,223,94,207,99,197,117,210,121,215,130,40,147,242,146,156,132,237,134,45,156,193,84,108,95,140,101,92,109,21,112,167,140,211,140,59,152,79,101,246,116,13,78,216,78,224,87,43,89,102,90,204,91,168,81,3,94,156,94,22,96,118,98,119,101,167,101,110,102,110,109,54,114,38,123,80,129,154,129,153,130,92,139,160,140,230,140,116,141,28,150,68,150,174,79,171,100,102,107,30,130,97,132,106,133,232,144,1,92,83,105,168,152,122,132,87,133,15,79,111,82,169,95,69,94,13,103,143,121,121,129,7,137,134,137,245,109,23,95,85,98,184,108,207,78,105,114,146,155,6,82,59,84,116,86,179,88,164,97,110,98,26,113,110,89,137,124,222,124,27,125,240,150,135,101,94,128,25,78,117,79,117,81,64,88,99,94,115,94,10,95,196,103,38,78,61,133,137,149,91,150,115,124,1,152,251,80,193,88,86,118,167,120,37,82,165,119,17,133,134,123,79,80,9,89,71,114,199,123,232,125,186,143,212,143,77,144,191,79,201,82,41,90,1,95,173,151,221,79,23,130,234,146,3,87,85,99,105,107,43,117,220,136,20,143,66,122,223,82,147,88,85,97,10,98,174,102,205,107,63,124,233,131,35,80,248,79,5,83,70,84,49,88,73,89,157,91,240,92,239,92,41,93,150,94,177,98,103,99,62,101,185,101,11,103,213,108,225,108,249,112,50,120,43,126,222,128,179,130,12,132,236,132,2,135,18,137,42,138,74,140,166,144,210,146,253,152,243,156,108,157,79,78,161,78,141,80,86,82,74,87,168,89,61,94,216,95,217,95,63,98,180,102,27,103,208,103,210,104,146,81,33,125,170,128,168,129,0,139,140,140,191,140,126,146,50,150,32,84,44,152,23,83,213,80,92,83,168,88,178,100,52,103,103,114,102,119,70,122,230,145,195,82,161,108,134,107,0,88,76,94,84,89,44,103,251,127,225,81,198,118,105,100,232,120,84,155,187,158,203,87,185,89,39,102,154,103,206,107,233,84,217,105,85,94,156,129,149,103,170,155,254,103,82,156,93,104,166,78,227,79,200,83,185,98,43,103,171,108,196,143,173,79,109,126,191,158,7,78,98,97,128,110,43,111,19,133,115,84,42,103,69,155,243,93,149,123,172,92,198,91,28,135,74,110,209,132,20,122,8,129,153,89,141,124,17,108,32,119,217,82,34,89,33,113,95,114,219,119,39,151,97,157,11,105,127,90,24,90,165,81,13,84,125,84,14,102,223,118,247,143,152,146,244,156,234,89,93,114,197,110,77,81,201,104,191,125,236,125,98,151,186,158,120,100,33,106,2,131,132,89,95,91,219,107,27,115,242,118,178,125,23,128,153,132,50,81,40,103,217,158,238,118,98,103,255,82,5,153,36,92,59,98,126,124,176,140,79,85,182,96,11,125,128,149,1,83,95,78,182,81,28,89,58,114,54,128,206,145,37,95,226,119,132,83,121,95,4,125,172,133,51,138,141,142,86,151,243,103,174,133,83,148,9,97,8,97,185,108,82,118,237,138,56,143,47,85,81,79,42,81,199,82,203,83,165,91,125,94,160,96,130,97,214,99,9,103,218,103,103,110,140,109,54,115,55,115,49,117,80,121,213,136,152,138,74,144,145,144,245,144,196,150,141,135,21,89,136,78,89,79,14,78,137,138,63,143,16,152,173,80,124,94,150,89,185,91,184,94,218,99,250,99,193,100,220,102,74,105,216,105,11,109,182,110,148,113,40,117,175,122,138,127,0,128,73,132,201,132,129,137,33,139,10,142,101,144,125,150,10,153,126,97,145,98,50,107,131,108,116,109,204,127,252,127,192,109,133,127,186,135,248,136,101,103,177,131,60,152,247,150,27,109,97,125,61,132,106,145,113,78,117,83,80,93,4,107,235,111,205,133,45,134,167,137,41,82,15,84,101,92,78,103,168,104,6,116,131,116,226,117,207,136,225,136,204,145,226,150,120,150,139,95,135,115,203,122,78,132,160,99,101,117,137,82,65,109,156,110,9,116,89,117,107,120,146,124,134,150,220,122,141,159,182,79,110,97,197,101,92,134,134,78,174,78,218,80,33,78,204,81,238,91,153,101,129,104,188,109,31,115,66,118,173,119,28,122,231,124,111,130,210,138,124,144,207,145,117,150,24,152,155,82,209,125,43,80,152,83,151,103,203,109,208,113,51,116,232,129,42,143,163,150,87,156,159,158,96,116,65,88,153,109,47,125,94,152,228,78,54,79,139,79,183,81,177,82,186,93,28,96,178,115,60,121,211,130,52,146,183,150,246,150,10,151,151,158,98,159,166,102,116,107,23,82,163,82,200,112,194,136,201,94,75,96,144,97,35,111,73,113,62,124,244,125,111,128,238,132,35,144,44,147,66,84,111,155,211,106,137,112,194,140,239,141,50,151,180,82,65,90,202,94,4,95,23,103,124,105,148,105,106,109,15,111,98,114,252,114,237,123,1,128,126,128,75,135,206,144,109,81,147,158,132,121,139,128,50,147,214,138,45,80,140,84,113,138,106,107,196,140,7,129,209,96,160,103,242,157,153,78,152,78,16,156,107,138,193,133,104,133,0,105,126,110,151,120,85,129,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,95,16,78,21,78,42,78,49,78,54,78,60,78,63,78,66,78,86,78,88,78,130,78,133,78,107,140,138,78,18,130,13,95,142,78,158,78,159,78,160,78,162,78,176,78,179,78,182,78,206,78,205,78,196,78,198,78,194,78,215,78,222,78,237,78,223,78,247,78,9,79,90,79,48,79,91,79,93,79,87,79,71,79,118,79,136,79,143,79,152,79,123,79,105,79,112,79,145,79,111,79,134,79,150,79,24,81,212,79,223,79,206,79,216,79,219,79,209,79,218,79,208,79,228,79,229,79,26,80,40,80,20,80,42,80,37,80,5,80,28,79,246,79,33,80,41,80,44,80,254,79,239,79,17,80,6,80,67,80,71,80,3,103,85,80,80,80,72,80,90,80,86,80,108,80,120,80,128,80,154,80,133,80,180,80,178,80,201,80,202,80,179,80,194,80,214,80,222,80,229,80,237,80,227,80,238,80,249,80,245,80,9,81,1,81,2,81,22,81,21,81,20,81,26,81,33,81,58,81,55,81,60,81,59,81,63,81,64,81,82,81,76,81,84,81,98,81,248,122,105,81,106,81,110,81,128,81,130,81,216,86,140,81,137,81,143,81,145,81,147,81,149,81,150,81,164,81,166,81,162,81,169,81,170,81,171,81,179,81,177,81,178,81,176,81,181,81,189,81,197,81,201,81,219,81,224,81,85,134,233,81,237,81,240,81,245,81,254,81,4,82,11,82,20,82,14,82,39,82,42,82,46,82,51,82,57,82,79,82,68,82,75,82,76,82,94,82,84,82,106,82,116,82,105,82,115,82,127,82,125,82,141,82,148,82,146,82,113,82,136,82,145,82,168,143,167,143,172,82,173,82,188,82,181,82,193,82,205,82,215,82,222,82,227,82,230,82,237,152,224,82,243,82,245,82,248,82,249,82,6,83,8,83,56,117,13,83,16,83,15,83,21,83,26,83,35,83,47,83,49,83,51,83,56,83,64,83,70,83,69,83,23,78,73,83,77,83,214,81,94,83,105,83,110,83,24,89,123,83,119,83,130,83,150,83,160,83,166,83,165,83,174,83,176,83,182,83,195,83,18,124,217,150,223,83,252,102,238,113,238,83,232,83,237,83,250,83,1,84,61,84,64,84,44,84,45,84,60,84,46,84,54,84,41,84,29,84,78,84,143,84,117,84,142,84,95,84,113,84,119,84,112,84,146,84,123,84,128,84,118,84,132,84,144,84,134,84,199,84,162,84,184,84,165,84,172,84,196,84,200,84,168,84,171,84,194,84,164,84,190,84,188,84,216,84,229,84,230,84,15,85,20,85,253,84,238,84,237,84,250,84,226,84,57,85,64,85,99,85,76,85,46,85,92,85,69,85,86,85,87,85,56,85,51,85,93,85,153,85,128,85,175,84,138,85,159,85,123,85,126,85,152,85,158,85,174,85,124,85,131,85,169,85,135,85,168,85,218,85,197,85,223,85,196,85,220,85,228,85,212,85,20,86,247,85,22,86,254,85,253,85,27,86,249,85,78,86,80,86,223,113,52,86,54,86,50,86,56,86,107,86,100,86,47,86,108,86,106,86,134,86,128,86,138,86,160,86,148,86,143,86,165,86,174,86,182,86,180,86,194,86,188,86,193,86,195,86,192,86,200,86,206,86,209,86,211,86,215,86,238,86,249,86,0,87,255,86,4,87,9,87,8,87,11,87,13,87,19,87,24,87,22,87,199,85,28,87,38,87,55,87,56,87,78,87,59,87,64,87,79,87,105,87,192,87,136,87,97,87,127,87,137,87,147,87,160,87,179,87,164,87,170,87,176,87,195,87,198,87,212,87,210,87,211,87,10,88,214,87,227,87,11,88,25,88,29,88,114,88,33,88,98,88,75,88,112,88,192,107,82,88,61,88,121,88,133,88,185,88,159,88,171,88,186,88,222,88,187,88,184,88,174,88,197,88,211,88,209,88,215,88,217,88,216,88,229,88,220,88,228,88,223,88,239,88,250,88,249,88,251,88,252,88,253,88,2,89,10,89,16,89,27,89,166,104,37,89,44,89,45,89,50,89,56,89,62,89,210,122,85,89,80,89,78,89,90,89,88,89,98,89,96,89,103,89,108,89,105,89,120,89,129,89,157,89,94,79,171,79,163,89,178,89,198,89,232,89,220,89,141,89,217,89,218,89,37,90,31,90,17,90,28,90,9,90,26,90,64,90,108,90,73,90,53,90,54,90,98,90,106,90,154,90,188,90,190,90,203,90,194,90,189,90,227,90,215,90,230,90,233,90,214,90,250,90,251,90,12,91,11,91,22,91,50,91,208,90,42,91,54,91,62,91,67,91,69,91,64,91,81,91,85,91,90,91,91,91,101,91,105,91,112,91,115,91,117,91,120,91,136,101,122,91,128,91,131,91,166,91,184,91,195,91,199,91,201,91,212,91,208,91,228,91,230,91,226,91,222,91,229,91,235,91,240,91,246,91,243,91,5,92,7,92,8,92,13,92,19,92,32,92,34,92,40,92,56,92,57,92,65,92,70,92,78,92,83,92,80,92,79,92,113,91,108,92,110,92,98,78,118,92,121,92,140,92,145,92,148,92,155,89,171,92,187,92,182,92,188,92,183,92,197,92,190,92,199,92,217,92,233,92,253,92,250,92,237,92,140,93,234,92,11,93,21,93,23,93,92,93,31,93,27,93,17,93,20,93,34,93,26,93,25,93,24,93,76,93,82,93,78,93,75,93,108,93,115,93,118,93,135,93,132,93,130,93,162,93,157,93,172,93,174,93,189,93,144,93,183,93,188,93,201,93,205,93,211,93,210,93,214,93,219,93,235,93,242,93,245,93,11,94,26,94,25,94,17,94,27,94,54,94,55,94,68,94,67,94,64,94,78,94,87,94,84,94,95,94,98,94,100,94,71,94,117,94,118,94,122,94,188,158,127,94,160,94,193,94,194,94,200,94,208,94,207,94,214,94,227,94,221,94,218,94,219,94,226,94,225,94,232,94,233,94,236,94,241,94,243,94,240,94,244,94,248,94,254,94,3,95,9,95,93,95,92,95,11,95,17,95,22,95,41,95,45,95,56,95,65,95,72,95,76,95,78,95,47,95,81,95,86,95,87,95,89,95,97,95,109,95,115,95,119,95,131,95,130,95,127,95,138,95,136,95,145,95,135,95,158,95,153,95,152,95,160,95,168,95,173,95,188,95,214,95,251,95,228,95,248,95,241,95,221,95,179,96,255,95,33,96,96,96,25,96,16,96,41,96,14,96,49,96,27,96,21,96,43,96,38,96,15,96,58,96,90,96,65,96,106,96,119,96,95,96,74,96,70,96,77,96,99,96,67,96,100,96,66,96,108,96,107,96,89,96,129,96,141,96,231,96,131,96,154,96,132,96,155,96,150,96,151,96,146,96,167,96,139,96,225,96,184,96,224,96,211,96,180,96,240,95,189,96,198,96,181,96,216,96,77,97,21,97,6,97,246,96,247,96,0,97,244,96,250,96,3,97,33,97,251,96,241,96,13,97,14,97,71,97,62,97,40,97,39,97,74,97,63,97,60,97,44,97,52,97,61,97,66,97,68,97,115,97,119,97,88,97,89,97,90,97,107,97,116,97,111,97,101,97,113,97,95,97,93,97,83,97,117,97,153,97,150,97,135,97,172,97,148,97,154,97,138,97,145,97,171,97,174,97,204,97,202,97,201,97,247,97,200,97,195,97,198,97,186,97,203,97,121,127,205,97,230,97,227,97,246,97,250,97,244,97,255,97,253,97,252,97,254,97,0,98,8,98,9,98,13,98,12,98,20,98,27,98,30,98,33,98,42,98,46,98,48,98,50,98,51,98,65,98,78,98,94,98,99,98,91,98,96,98,104,98,124,98,130,98,137,98,126,98,146,98,147,98,150,98,212,98,131,98,148,98,215,98,209,98,187,98,207,98,255,98,198,98,212,100,200,98,220,98,204,98,202,98,194,98,199,98,155,98,201,98,12,99,238,98,241,98,39,99,2,99,8,99,239,98,245,98,80,99,62,99,77,99,28,100,79,99,150,99,142,99,128,99,171,99,118,99,163,99,143,99,137,99,159,99,181,99,107,99,105,99,190,99,233,99,192,99,198,99,227,99,201,99,210,99,246,99,196,99,22,100,52,100,6,100,19,100,38,100,54,100,29,101,23,100,40,100,15,100,103,100,111,100,118,100,78,100,42,101,149,100,147,100,165,100,169,100,136,100,188,100,218,100,210,100,197,100,199,100,187,100,216,100,194,100,241,100,231,100,9,130,224,100,225,100,172,98,227,100,239,100,44,101,246,100,244,100,242,100,250,100,0,101,253,100,24,101,28,101,5,101,36,101,35,101,43,101,52,101,53,101,55,101,54,101,56,101,75,117,72,101,86,101,85,101,77,101,88,101,94,101,93,101,114,101,120,101,130,101,131,101,138,139,155,101,159,101,171,101,183,101,195,101,198,101,193,101,196,101,204,101,210,101,219,101,217,101,224,101,225,101,241,101,114,103,10,102,3,102,251,101,115,103,53,102,54,102,52,102,28,102,79,102,68,102,73,102,65,102,94,102,93,102,100,102,103,102,104,102,95,102,98,102,112,102,131,102,136,102,142,102,137,102,132,102,152,102,157,102,193,102,185,102,201,102,190,102,188,102,196,102,184,102,214,102,218,102,224,102,63,102,230,102,233,102,240,102,245,102,247,102,15,103,22,103,30,103,38,103,39,103,56,151,46,103,63,103,54,103,65,103,56,103,55,103,70,103,94,103,96,103,89,103,99,103,100,103,137,103,112,103,169,103,124,103,106,103,140,103,139,103,166,103,161,103,133,103,183,103,239,103,180,103,236,103,179,103,233,103,184,103,228,103,222,103,221,103,226,103,238,103,185,103,206,103,198,103,231,103,156,106,30,104,70,104,41,104,64,104,77,104,50,104,78,104,179,104,43,104,89,104,99,104,119,104,127,104,159,104,143,104,173,104,148,104,157,104,155,104,131,104,174,106,185,104,116,104,181,104,160,104,186,104,15,105,141,104,126,104,1,105,202,104,8,105,216,104,34,105,38,105,225,104,12,105,205,104,212,104,231,104,213,104,54,105,18,105,4,105,215,104,227,104,37,105,249,104,224,104,239,104,40,105,42,105,26,105,35,105,33,105,198,104,121,105,119,105,92,105,120,105,107,105,84,105,126,105,110,105,57,105,116,105,61,105,89,105,48,105,97,105,94,105,93,105,129,105,106,105,178,105,174,105,208,105,191,105,193,105,211,105,190,105,206,105,232,91,202,105,221,105,187,105,195,105,167,105,46,106,145,105,160,105,156,105,149,105,180,105,222,105,232,105,2,106,27,106,255,105,10,107,249,105,242,105,231,105,5,106,177,105,30,106,237,105,20,106,235,105,10,106,18,106,193,106,35,106,19,106,68,106,12,106,114,106,54,106,120,106,71,106,98,106,89,106,102,106,72,106,56,106,34,106,144,106,141,106,160,106,132,106,162,106,163,106,151,106,23,134,187,106,195,106,194,106,184,106,179,106,172,106,222,106,209,106,223,106,170,106,218,106,234,106,251,106,5,107,22,134,250,106,18,107,22,107,49,155,31,107,56,107,55,107,220,118,57,107,238,152,71,107,67,107,73,107,80,107,89,107,84,107,91,107,95,107,97,107,120,107,121,107,127,107,128,107,132,107,131,107,141,107,152,107,149,107,158,107,164,107,170,107,171,107,175,107,178,107,177,107,179,107,183,107,188,107,198,107,203,107,211,107,223,107,236,107,235,107,243,107,239,107,190,158,8,108,19,108,20,108,27,108,36,108,35,108,94,108,85,108,98,108,106,108,130,108,141,108,154,108,129,108,155,108,126,108,104,108,115,108,146,108,144,108,196,108,241,108,211,108,189,108,215,108,197,108,221,108,174,108,177,108,190,108,186,108,219,108,239,108,217,108,234,108,31,109,77,136,54,109,43,109,61,109,56,109,25,109,53,109,51,109,18,109,12,109,99,109,147,109,100,109,90,109,121,109,89,109,142,109,149,109,228,111,133,109,249,109,21,110,10,110,181,109,199,109,230,109,184,109,198,109,236,109,222,109,204,109,232,109,210,109,197,109,250,109,217,109,228,109,213,109,234,109,238,109,45,110,110,110,46,110,25,110,114,110,95,110,62,110,35,110,107,110,43,110,118,110,77,110,31,110,67,110,58,110,78,110,36,110,255,110,29,110,56,110,130,110,170,110,152,110,201,110,183,110,211,110,189,110,175,110,196,110,178,110,212,110,213,110,143,110,165,110,194,110,159,110,65,111,17,111,76,112,236,110,248,110,254,110,63,111,242,110,49,111,239,110,50,111,204,110,62,111,19,111,247,110,134,111,122,111,120,111,129,111,128,111,111,111,91,111,243,111,109,111,130,111,124,111,88,111,142,111,145,111,194,111,102,111,179,111,163,111,161,111,164,111,185,111,198,111,170,111,223,111,213,111,236,111,212,111,216,111,241,111,238,111,219,111,9,112,11,112,250,111,17,112,1,112,15,112,254,111,27,112,26,112,116,111,29,112,24,112,31,112,48,112,62,112,50,112,81,112,99,112,153,112,146,112,175,112,241,112,172,112,184,112,179,112,174,112,223,112,203,112,221,112,217,112,9,113,253,112,28,113,25,113,101,113,85,113,136,113,102,113,98,113,76,113,86,113,108,113,143,113,251,113,132,113,149,113,168,113,172,113,215,113,185,113,190,113,210,113,201,113,212,113,206,113,224,113,236,113,231,113,245,113,252,113,249,113,255,113,13,114,16,114,27,114,40,114,45,114,44,114,48,114,50,114,59,114,60,114,63,114,64,114,70,114,75,114,88,114,116,114,126,114,130,114,129,114,135,114,146,114,150,114,162,114,167,114,185,114,178,114,195,114,198,114,196,114,206,114,210,114,226,114,224,114,225,114,249,114,247,114,15,80,23,115,10,115,28,115,22,115,29,115,52,115,47,115,41,115,37,115,62,115,78,115,79,115,216,158,87,115,106,115,104,115,112,115,120,115,117,115,123,115,122,115,200,115,179,115,206,115,187,115,192,115,229,115,238,115,222,115,162,116,5,116,111,116,37,116,248,115,50,116,58,116,85,116,63,116,95,116,89,116,65,116,92,116,105,116,112,116,99,116,106,116,118,116,126,116,139,116,158,116,167,116,202,116,207,116,212,116,241,115,224,116,227,116,231,116,233,116,238,116,242,116,240,116,241,116,248,116,247,116,4,117,3,117,5,117,12,117,14,117,13,117,21,117,19,117,30,117,38,117,44,117,60,117,68,117,77,117,74,117,73,117,91,117,70,117,90,117,105,117,100,117,103,117,107,117,109,117,120,117,118,117,134,117,135,117,116,117,138,117,137,117,130,117,148,117,154,117,157,117,165,117,163,117,194,117,179,117,195,117,181,117,189,117,184,117,188,117,177,117,205,117,202,117,210,117,217,117,227,117,222,117,254,117,255,117,252,117,1,118,240,117,250,117,242,117,243,117,11,118,13,118,9,118,31,118,39,118,32,118,33,118,34,118,36,118,52,118,48,118,59,118,71,118,72,118,70,118,92,118,88,118,97,118,98,118,104,118,105,118,106,118,103,118,108,118,112,118,114,118,118,118,120,118,124,118,128,118,131,118,136,118,139,118,142,118,150,118,147,118,153,118,154,118,176,118,180,118,184,118,185,118,186,118,194,118,205,118,214,118,210,118,222,118,225,118,229,118,231,118,234,118,47,134,251,118,8,119,7,119,4,119,41,119,36,119,30,119,37,119,38,119,27,119,55,119,56,119,71,119,90,119,104,119,107,119,91,119,101,119,127,119,126,119,121,119,142,119,139,119,145,119,160,119,158,119,176,119,182,119,185,119,191,119,188,119,189,119,187,119,199,119,205,119,215,119,218,119,220,119,227,119,238,119,252,119,12,120,18,120,38,121,32,120,42,121,69,120,142,120,116,120,134,120,124,120,154,120,140,120,163,120,181,120,170,120,175,120,209,120,198,120,203,120,212,120,190,120,188,120,197,120,202,120,236,120,231,120,218,120,253,120,244,120,7,121,18,121,17,121,25,121,44,121,43,121,64,121,96,121,87,121,95,121,90,121,85,121,83,121,122,121,127,121,138,121,157,121,167,121,75,159,170,121,174,121,179,121,185,121,186,121,201,121,213,121,231,121,236,121,225,121,227,121,8,122,13,122,24,122,25,122,32,122,31,122,128,121,49,122,59,122,62,122,55,122,67,122,87,122,73,122,97,122,98,122,105,122,157,159,112,122,121,122,125,122,136,122,151,122,149,122,152,122,150,122,169,122,200,122,176,122,182,122,197,122,196,122,191,122,131,144,199,122,202,122,205,122,207,122,213,122,211,122,217,122,218,122,221,122,225,122,226,122,230,122,237,122,240,122,2,123,15,123,10,123,6,123,51,123,24,123,25,123,30,123,53,123,40,123,54,123,80,123,122,123,4,123,77,123,11,123,76,123,69,123,117,123,101,123,116,123,103,123,112,123,113,123,108,123,110,123,157,123,152,123,159,123,141,123,156,123,154,123,139,123,146,123,143,123,93,123,153,123,203,123,193,123,204,123,207,123,180,123,198,123,221,123,233,123,17,124,20,124,230,123,229,123,96,124,0,124,7,124,19,124,243,123,247,123,23,124,13,124,246,123,35,124,39,124,42,124,31,124,55,124,43,124,61,124,76,124,67,124,84,124,79,124,64,124,80,124,88,124,95,124,100,124,86,124,101,124,108,124,117,124,131,124,144,124,164,124,173,124,162,124,171,124,161,124,168,124,179,124,178,124,177,124,174,124,185,124,189,124,192,124,197,124,194,124,216,124,210,124,220,124,226,124,59,155,239,124,242,124,244,124,246,124,250,124,6,125,2,125,28,125,21,125,10,125,69,125,75,125,46,125,50,125,63,125,53,125,70,125,115,125,86,125,78,125,114,125,104,125,110,125,79,125,99,125,147,125,137,125,91,125,143,125,125,125,155,125,186,125,174,125,163,125,181,125,199,125,189,125,171,125,61,126,162,125,175,125,220,125,184,125,159,125,176,125,216,125,221,125,228,125,222,125,251,125,242,125,225,125,5,126,10,126,35,126,33,126,18,126,49,126,31,126,9,126,11,126,34,126,70,126,102,126,59,126,53,126,57,126,67,126,55,126,50,126,58,126,103,126,93,126,86,126,94,126,89,126,90,126,121,126,106,126,105,126,124,126,123,126,131,126,213,125,125,126,174,143,127,126,136,126,137,126,140,126,146,126,144,126,147,126,148,126,150,126,142,126,155,126,156,126,56,127,58,127,69,127,76,127,77,127,78,127,80,127,81,127,85,127,84,127,88,127,95,127,96,127,104,127,105,127,103,127,120,127,130,127,134,127,131,127,136,127,135,127,140,127,148,127,158,127,157,127,154,127,163,127,175,127,178,127,185,127,174,127,182,127,184,127,113,139,197,127,198,127,202,127,213,127,212,127,225,127,230,127,233,127,243,127,249,127,220,152], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+33396);
/* memory initializer */ allocate([6,128,4,128,11,128,18,128,24,128,25,128,28,128,33,128,40,128,63,128,59,128,74,128,70,128,82,128,88,128,90,128,95,128,98,128,104,128,115,128,114,128,112,128,118,128,121,128,125,128,127,128,132,128,134,128,133,128,155,128,147,128,154,128,173,128,144,81,172,128,219,128,229,128,217,128,221,128,196,128,218,128,214,128,9,129,239,128,241,128,27,129,41,129,35,129,47,129,75,129,139,150,70,129,62,129,83,129,81,129,252,128,113,129,110,129,101,129,102,129,116,129,131,129,136,129,138,129,128,129,130,129,160,129,149,129,164,129,163,129,95,129,147,129,169,129,176,129,181,129,190,129,184,129,189,129,192,129,194,129,186,129,201,129,205,129,209,129,217,129,216,129,200,129,218,129,223,129,224,129,231,129,250,129,251,129,254,129,1,130,2,130,5,130,7,130,10,130,13,130,16,130,22,130,41,130,43,130,56,130,51,130,64,130,89,130,88,130,93,130,90,130,95,130,100,130,98,130,104,130,106,130,107,130,46,130,113,130,119,130,120,130,126,130,141,130,146,130,171,130,159,130,187,130,172,130,225,130,227,130,223,130,210,130,244,130,243,130,250,130,147,131,3,131,251,130,249,130,222,130,6,131,220,130,9,131,217,130,53,131,52,131,22,131,50,131,49,131,64,131,57,131,80,131,69,131,47,131,43,131,23,131,24,131,133,131,154,131,170,131,159,131,162,131,150,131,35,131,142,131,135,131,138,131,124,131,181,131,115,131,117,131,160,131,137,131,168,131,244,131,19,132,235,131,206,131,253,131,3,132,216,131,11,132,193,131,247,131,7,132,224,131,242,131,13,132,34,132,32,132,189,131,56,132,6,133,251,131,109,132,42,132,60,132,90,133,132,132,119,132,107,132,173,132,110,132,130,132,105,132,70,132,44,132,111,132,121,132,53,132,202,132,98,132,185,132,191,132,159,132,217,132,205,132,187,132,218,132,208,132,193,132,198,132,214,132,161,132,33,133,255,132,244,132,23,133,24,133,44,133,31,133,21,133,20,133,252,132,64,133,99,133,88,133,72,133,65,133,2,134,75,133,85,133,128,133,164,133,136,133,145,133,138,133,168,133,109,133,148,133,155,133,234,133,135,133,156,133,119,133,126,133,144,133,201,133,186,133,207,133,185,133,208,133,213,133,221,133,229,133,220,133,249,133,10,134,19,134,11,134,254,133,250,133,6,134,34,134,26,134,48,134,63,134,77,134,85,78,84,134,95,134,103,134,113,134,147,134,163,134,169,134,170,134,139,134,140,134,182,134,175,134,196,134,198,134,176,134,201,134,35,136,171,134,212,134,222,134,233,134,236,134,223,134,219,134,239,134,18,135,6,135,8,135,0,135,3,135,251,134,17,135,9,135,13,135,249,134,10,135,52,135,63,135,55,135,59,135,37,135,41,135,26,135,96,135,95,135,120,135,76,135,78,135,116,135,87,135,104,135,110,135,89,135,83,135,99,135,106,135,5,136,162,135,159,135,130,135,175,135,203,135,189,135,192,135,208,135,214,150,171,135,196,135,179,135,199,135,198,135,187,135,239,135,242,135,224,135,15,136,13,136,254,135,246,135,247,135,14,136,210,135,17,136,22,136,21,136,34,136,33,136,49,136,54,136,57,136,39,136,59,136,68,136,66,136,82,136,89,136,94,136,98,136,107,136,129,136,126,136,158,136,117,136,125,136,181,136,114,136,130,136,151,136,146,136,174,136,153,136,162,136,141,136,164,136,176,136,191,136,177,136,195,136,196,136,212,136,216,136,217,136,221,136,249,136,2,137,252,136,244,136,232,136,242,136,4,137,12,137,10,137,19,137,67,137,30,137,37,137,42,137,43,137,65,137,68,137,59,137,54,137,56,137,76,137,29,137,96,137,94,137,102,137,100,137,109,137,106,137,111,137,116,137,119,137,126,137,131,137,136,137,138,137,147,137,152,137,161,137,169,137,166,137,172,137,175,137,178,137,186,137,189,137,191,137,192,137,218,137,220,137,221,137,231,137,244,137,248,137,3,138,22,138,16,138,12,138,27,138,29,138,37,138,54,138,65,138,91,138,82,138,70,138,72,138,124,138,109,138,108,138,98,138,133,138,130,138,132,138,168,138,161,138,145,138,165,138,166,138,154,138,163,138,196,138,205,138,194,138,218,138,235,138,243,138,231,138,228,138,241,138,20,139,224,138,226,138,247,138,222,138,219,138,12,139,7,139,26,139,225,138,22,139,16,139,23,139,32,139,51,139,171,151,38,139,43,139,62,139,40,139,65,139,76,139,79,139,78,139,73,139,86,139,91,139,90,139,107,139,95,139,108,139,111,139,116,139,125,139,128,139,140,139,142,139,146,139,147,139,150,139,153,139,154,139,58,140,65,140,63,140,72,140,76,140,78,140,80,140,85,140,98,140,108,140,120,140,122,140,130,140,137,140,133,140,138,140,141,140,142,140,148,140,124,140,152,140,29,98,173,140,170,140,189,140,178,140,179,140,174,140,182,140,200,140,193,140,228,140,227,140,218,140,253,140,250,140,251,140,4,141,5,141,10,141,7,141,15,141,13,141,16,141,78,159,19,141,205,140,20,141,22,141,103,141,109,141,113,141,115,141,129,141,153,141,194,141,190,141,186,141,207,141,218,141,214,141,204,141,219,141,203,141,234,141,235,141,223,141,227,141,252,141,8,142,9,142,255,141,29,142,30,142,16,142,31,142,66,142,53,142,48,142,52,142,74,142,71,142,73,142,76,142,80,142,72,142,89,142,100,142,96,142,42,142,99,142,85,142,118,142,114,142,124,142,129,142,135,142,133,142,132,142,139,142,138,142,147,142,145,142,148,142,153,142,170,142,161,142,172,142,176,142,198,142,177,142,190,142,197,142,200,142,203,142,219,142,227,142,252,142,251,142,235,142,254,142,10,143,5,143,21,143,18,143,25,143,19,143,28,143,31,143,27,143,12,143,38,143,51,143,59,143,57,143,69,143,66,143,62,143,76,143,73,143,70,143,78,143,87,143,92,143,98,143,99,143,100,143,156,143,159,143,163,143,173,143,175,143,183,143,218,143,229,143,226,143,234,143,239,143,135,144,244,143,5,144,249,143,250,143,17,144,21,144,33,144,13,144,30,144,22,144,11,144,39,144,54,144,53,144,57,144,248,143,79,144,80,144,81,144,82,144,14,144,73,144,62,144,86,144,88,144,94,144,104,144,111,144,118,144,168,150,114,144,130,144,125,144,129,144,128,144,138,144,137,144,143,144,168,144,175,144,177,144,181,144,226,144,228,144,72,98,219,144,2,145,18,145,25,145,50,145,48,145,74,145,86,145,88,145,99,145,101,145,105,145,115,145,114,145,139,145,137,145,130,145,162,145,171,145,175,145,170,145,181,145,180,145,186,145,192,145,193,145,201,145,203,145,208,145,214,145,223,145,225,145,219,145,252,145,245,145,246,145,30,146,255,145,20,146,44,146,21,146,17,146,94,146,87,146,69,146,73,146,100,146,72,146,149,146,63,146,75,146,80,146,156,146,150,146,147,146,155,146,90,146,207,146,185,146,183,146,233,146,15,147,250,146,68,147,46,147,25,147,34,147,26,147,35,147,58,147,53,147,59,147,92,147,96,147,124,147,110,147,86,147,176,147,172,147,173,147,148,147,185,147,214,147,215,147,232,147,229,147,216,147,195,147,221,147,208,147,200,147,228,147,26,148,20,148,19,148,3,148,7,148,16,148,54,148,43,148,53,148,33,148,58,148,65,148,82,148,68,148,91,148,96,148,98,148,94,148,106,148,41,146,112,148,117,148,119,148,125,148,90,148,124,148,126,148,129,148,127,148,130,149,135,149,138,149,148,149,150,149,152,149,153,149,160,149,168,149,167,149,173,149,188,149,187,149,185,149,190,149,202,149,246,111,195,149,205,149,204,149,213,149,212,149,214,149,220,149,225,149,229,149,226,149,33,150,40,150,46,150,47,150,66,150,76,150,79,150,75,150,119,150,92,150,94,150,93,150,95,150,102,150,114,150,108,150,141,150,152,150,149,150,151,150,170,150,167,150,177,150,178,150,176,150,180,150,182,150,184,150,185,150,206,150,203,150,201,150,205,150,77,137,220,150,13,151,213,150,249,150,4,151,6,151,8,151,19,151,14,151,17,151,15,151,22,151,25,151,36,151,42,151,48,151,57,151,61,151,62,151,68,151,70,151,72,151,66,151,73,151,92,151,96,151,100,151,102,151,104,151,210,82,107,151,113,151,121,151,133,151,124,151,129,151,122,151,134,151,139,151,143,151,144,151,156,151,168,151,166,151,163,151,179,151,180,151,195,151,198,151,200,151,203,151,220,151,237,151,79,159,242,151,223,122,246,151,245,151,15,152,12,152,56,152,36,152,33,152,55,152,61,152,70,152,79,152,75,152,107,152,111,152,112,152,113,152,116,152,115,152,170,152,175,152,177,152,182,152,196,152,195,152,198,152,233,152,235,152,3,153,9,153,18,153,20,153,24,153,33,153,29,153,30,153,36,153,32,153,44,153,46,153,61,153,62,153,66,153,73,153,69,153,80,153,75,153,81,153,82,153,76,153,85,153,151,153,152,153,165,153,173,153,174,153,188,153,223,153,219,153,221,153,216,153,209,153,237,153,238,153,241,153,242,153,251,153,248,153,1,154,15,154,5,154,226,153,25,154,43,154,55,154,69,154,66,154,64,154,67,154,62,154,85,154,77,154,91,154,87,154,95,154,98,154,101,154,100,154,105,154,107,154,106,154,173,154,176,154,188,154,192,154,207,154,209,154,211,154,212,154,222,154,223,154,226,154,227,154,230,154,239,154,235,154,238,154,244,154,241,154,247,154,251,154,6,155,24,155,26,155,31,155,34,155,35,155,37,155,39,155,40,155,41,155,42,155,46,155,47,155,50,155,68,155,67,155,79,155,77,155,78,155,81,155,88,155,116,155,147,155,131,155,145,155,150,155,151,155,159,155,160,155,168,155,180,155,192,155,202,155,185,155,198,155,207,155,209,155,210,155,227,155,226,155,228,155,212,155,225,155,58,156,242,155,241,155,240,155,21,156,20,156,9,156,19,156,12,156,6,156,8,156,18,156,10,156,4,156,46,156,27,156,37,156,36,156,33,156,48,156,71,156,50,156,70,156,62,156,90,156,96,156,103,156,118,156,120,156,231,156,236,156,240,156,9,157,8,157,235,156,3,157,6,157,42,157,38,157,175,157,35,157,31,157,68,157,21,157,18,157,65,157,63,157,62,157,70,157,72,157,93,157,94,157,100,157,81,157,80,157,89,157,114,157,137,157,135,157,171,157,111,157,122,157,154,157,164,157,169,157,178,157,196,157,193,157,187,157,184,157,186,157,198,157,207,157,194,157,217,157,211,157,248,157,230,157,237,157,239,157,253,157,26,158,27,158,30,158,117,158,121,158,125,158,129,158,136,158,139,158,140,158,146,158,149,158,145,158,157,158,165,158,169,158,184,158,170,158,173,158,97,151,204,158,206,158,207,158,208,158,212,158,220,158,222,158,221,158,224,158,229,158,232,158,239,158,244,158,246,158,247,158,249,158,251,158,252,158,253,158,7,159,8,159,183,118,21,159,33,159,44,159,62,159,74,159,82,159,84,159,99,159,95,159,96,159,97,159,102,159,103,159,108,159,106,159,119,159,114,159,118,159,149,159,156,159,160,159,47,88,199,105,89,144,100,116,220,81,153,113,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,32,0,0,0,9,0,0,0,10,0,0,0,13,0,0,0,11,0,0,0,12,0,0,0,133,0,0,0,0,32,0,0,1,32,0,0,2,32,0,0,3,32,0,0,4,32,0,0,5,32,0,0,6,32,0,0,8,32,0,0,9,32,0,0,10,32,0,0,40,32,0,0,41,32,0,0,95,32,0,0,0,48,0,0,0,0,0,0,240,67,50,76,3,70,166,69,120,69,103,114,119,77,179,69,177,124,226,76,197,124,149,59,54,71,68,71,71,76,64,76,191,66,23,54,82,115,139,110,210,112,87,76,81,163,79,71,218,69,133,76,108,124,7,77,164,74,161,70,35,107,37,114,84,90,99,26,6,62,97,63,77,102,251,86,0,0,149,125,29,89,185,139,244,61,52,151,239,123,219,91,94,29,164,90,37,54,176,158,209,90,183,91,252,92,110,103,147,133,69,153,97,116,157,116,117,56,83,29,158,54,33,96,236,62,222,88,245,58,252,122,151,159,97,65,13,137,234,49,138,10,94,50,10,67,132,132,150,159,47,148,48,73,19,134,150,88,74,151,24,146,208,121,50,122,96,102,41,106,157,136,76,116,197,123,130,103,44,122,79,82,70,144,230,52,196,115,185,93,198,116,199,159,179,87,47,73,76,84,49,65,142,54,24,88,114,122,101,123,143,139,174,70,136,110,129,65,153,93,174,123,188,36,200,159,193,36,201,36,204,36,201,159,4,133,187,53,180,64,202,159,225,68,255,173,193,98,110,112,203,159,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,192,49,193,49,194,49,195,49,196,49,12,1,197,49,209,0,205,0,198,49,199,49,203,0,232,31,200,49,202,0,201,49,202,49,203,49,204,49,14,1,205,49,206,49,0,1,193,0,205,1,192,0,18,1,201,0,26,1,200,0,76,1,211,0,209,1,210,0,0,220,190,30,4,220,192,30,202,0,1,1,225,0,206,1,224,0,81,2,19,1,233,0,27,1,232,0,43,1,237,0,208,1,236,0,77,1,243,0,210,1,242,0,107,1,250,0,212,1,249,0,214,1,216,1,218,1,220,1,252,0,8,220,191,30,12,220,193,30,234,0,97,2,218,35,219,35,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,169,163,69,17,0,0,10,101,0,0,0,0,61,78,221,110,78,157,223,145,0,0,0,0,53,119,145,100,26,79,40,79,168,79,86,81,116,81,156,81,228,81,161,82,168,82,59,83,78,83,209,83,216,83,226,86,240,88,4,89,7,89,50,89,52,89,102,91,158,91,159,91,154,92,134,94,59,96,137,101,254,103,4,104,101,104,78,109,188,112,53,117,164,126,172,126,186,126,199,126,207,126,223,126,6,127,55,127,122,130,207,130,111,131,198,137,190,139,226,139,102,143,103,143,110,143,17,116,252,124,205,125,70,105,201,122,39,82,0,0,0,0,0,0,0,0,140,145,184,120,94,145,188,128,0,0,11,141,246,128,231,9,0,0,0,0,159,128,199,158,205,76,201,157,12,158,62,76,246,157,14,112,10,158,51,161,193,53,0,0,154,110,62,130,25,117,0,0,17,73,108,154,143,154,153,159,135,121,108,132,202,29,208,5,230,42,36,78,129,78,128,78,135,78,191,78,235,78,55,79,76,52,189,79,72,62,3,80,136,80,125,52,147,52,165,52,134,81,5,89,219,81,252,81,5,82,137,78,121,82,144,82,39,83,199,53,169,83,81,53,176,83,83,53,194,83,35,84,109,53,114,53,129,54,147,84,163,84,180,84,185,84,208,84,239,84,24,85,35,85,40,85,152,53,63,85,165,53,191,53,215,85,197,53,132,125,37,85,0,0,66,12,21,13,43,81,144,85,198,44,236,57,65,3,70,142,184,77,229,148,83,64,190,128,122,119,56,44,52,58,213,71,93,129,242,105,234,77,221,100,124,13,180,15,213,12,244,16,141,100,126,142,150,14,11,12,100,15,169,44,86,130,211,68,0,0,70,13,77,154,233,128,244,71,167,78,194,44,178,154,103,58,244,149,237,63,6,53,199,82,212,151,200,120,68,45,110,157,21,152,0,0,217,67,165,96,180,100,227,84,76,45,202,43,119,16,251,57,111,16,218,102,22,103,160,121,234,100,82,80,67,12,104,142,161,33,76,139,49,7,0,0,11,72,169,1,250,63,115,88,141,45,0,0,200,69,252,4,151,96,76,15,150,13,121,85,187,64,186,67,0,0,180,74,102,42,157,16,170,129,245,152,156,13,121,99,254,57,117,39,192,141,161,86,124,100,67,62,0,0,1,166,9,14,207,42,201,44,0,0,200,16,194,57,146,57,6,58,155,130,120,53,73,94,199,32,82,86,49,15,178,44,32,151,188,52,61,108,59,78,0,0,0,0,116,117,139,46,8,34,91,166,205,140,122,14,52,12,28,104,147,127,207,16,3,40,57,41,251,53,227,81,140,14,141,15,170,14,147,63,48,15,71,13,79,17,76,14,0,0,171,14,169,11,72,13,192,16,61,17,249,63,150,38,50,100,173,15,244,51,57,118,206,43,126,13,127,13,81,44,85,44,24,58,152,14,199,16,46,15,50,166,80,107,210,140,153,141,202,140,170,149,204,84,196,130,185,85,0,0,195,158,38,156,182,154,94,119,238,45,64,113,109,129,236,128,28,92,114,101,52,129,151,55,95,83,189,128,182,145,250,14,15,14,119,14,251,14,221,53,235,77,9,54,214,12,175,86,181,39,201,16,16,14,120,14,120,16,72,17,7,130,85,20,121,14,80,78,164,45,84,90,29,16,30,16,245,16,246,16,156,87,17,14,148,118,205,130,181,15,123,14,126,81,3,55,182,15,128,17,216,82,189,162,218,73,58,24,119,65,124,130,153,88,104,82,26,54,61,87,178,123,104,91,0,72,44,75,39,159,231,73,31,156,141,155,116,91,61,49,251,85,242,53,137,86,40,78,2,89,193,27,120,248,81,151,134,0,91,78,187,78,62,53,35,92,81,95,196,95,250,56,76,98,53,101,122,107,53,108,58,108,108,112,43,114,44,78,173,114,233,72,82,127,59,121,249,124,83,127,106,98,193,52,0,0,75,99,2,128,128,128,18,102,81,105,93,83,100,136,193,137,178,120,160,139,29,141,133,148,120,149,127,149,232,149,15,142,230,151,117,152,206,152,222,152,99,153,16,152,124,156,31,158,196,158,111,107,7,249,55,78,135,0,29,150,55,98,162,148,0,0,59,80,254,109,115,156,166,159,201,61,143,136,78,65,119,112,245,92,32,75,205,81,89,53,48,93,34,97,50,138,167,143,246,145,145,113,25,103,186,115,129,50,7,161,139,60,128,25,16,75,228,120,2,116,174,81,15,135,9,64,99,106,186,162,35,66,15,134,111,10,42,122,71,153,234,138,85,151,77,112,36,83,126,32,244,147,217,118,227,137,167,159,221,119,163,78,240,79,188,80,47,78,23,79,168,159,52,84,139,125,146,88,208,88,182,29,146,94,153,94,194,95,18,39,139,101,249,51,25,105,67,106,99,60,255,108,0,0,0,114,5,69,140,115,219,62,19,74,21,91,185,116,131,139,164,92,149,86,147,122,236,123,195,124,108,126,248,130,151,133,169,159,144,136,170,159,185,142,171,159,207,143,95,133,224,153,33,146,172,159,185,141,63,20,113,64,162,66,26,90,0,0,0,0,0,0,104,152,107,103,118,66,61,87,0,0,214,133,123,73,191,130,13,113,129,76,116,109,123,93,21,107,190,111,173,159,174,159,150,91,175,159,231,102,91,126,87,110,202,121,136,61,195,68,86,50,150,39,154,67,54,69,0,0,213,92,26,59,249,138,120,92,18,61,81,53,120,93,178,159,87,113,88,69,236,64,35,30,119,76,120,57,74,52,164,1,65,108,204,138,180,79,57,2,191,89,108,129,86,152,250,152,59,95,159,11,0,0,193,33,109,137,2,65,187,70,121,144,7,63,179,159,181,161,248,64,214,55,247,70,70,108,124,65,178,134,255,115,109,69,212,56,154,84,97,69,27,69,137,77,123,76,118,77,234,69,200,63,15,75,97,54,222,68,189,68,237,65,62,93,72,93,86,93,252,61,15,56,164,93,185,93,32,56,56,56,66,94,189,94,37,95,131,95,8,57,20,57,63,57,77,57,215,96,61,97,229,92,137,57,183,97,185,97,207,97,184,57,44,98,144,98,229,98,24,99,248,57,177,86,3,58,226,99,251,99,7,100,90,100,75,58,192,100,21,93,33,86,159,159,151,58,134,101,189,58,255,101,83,102,242,58,146,102,34,59,22,103,66,59,164,103,0,104,88,59,74,104,132,104,114,59,113,59,123,59,9,105,67,105,92,114,100,105,159,105,133,105,188,59,214,105,221,59,101,106,116,106,113,106,130,106,236,59,153,106,242,59,171,106,181,106,212,106,246,106,129,107,193,107,234,107,117,108,170,108,203,60,2,109,6,109,38,109,129,109,239,60,164,109,177,109,21,110,24,110,41,110,134,110,192,137,187,110,226,110,218,110,127,159,232,110,233,110,36,111,52,111,70,61,65,63,129,111,190,111,106,61,117,61,183,113,153,92,138,61,44,112,145,61,80,112,84,112,111,112,127,112,137,112,37,3,193,67,241,53,216,14,215,62,190,87,211,110,62,113,224,87,78,54,162,105,233,139,116,91,73,122,225,88,217,148,101,122,125,122,172,89,187,122,176,122,194,122,195,122,209,113,141,100,202,65,218,122,221,122,234,122,239,65,178,84,1,92,11,123,85,123,41,123,14,83,254,92,162,123,111,123,156,131,180,91,127,108,208,123,33,132,146,123,0,0,32,93,173,61,101,92,146,132,250,123,0,0,53,124,193,92,68,124,131,124,130,72,166,124,125,102,120,69,201,124,199,124,230,124,116,124,243,124,245,124,0,0,103,126,29,69,68,110,93,125,214,110,141,116,137,125,171,125,53,113,179,125,0,0,87,64,41,96,228,125,19,61,245,125,249,23,229,125,109,131,0,0,33,97,90,97,110,126,146,126,43,67,108,148,39,126,64,127,65,127,71,127,54,121,208,98,225,153,151,127,81,99,163,127,97,22,104,0,92,69,102,55,3,69,58,131,250,127,137,100,0,0,8,128,29,128,0,0,47,128,135,160,195,108,59,128,60,128,97,128,20,39,137,73,38,102,227,61,232,102,37,103,167,128,72,138,7,129,26,129,176,88,246,38,127,108,152,100,184,79,231,100,138,20,24,130,94,24,83,106,101,74,149,74,122,68,41,130,13,11,82,106,126,61,249,79,253,20,226,132,98,131,10,107,167,73,48,53,115,23,248,61,170,130,27,105,148,249,219,65,75,133,208,130,26,131,22,14,180,23,193,54,125,49,90,53,123,130,226,130,24,131,139,62,163,109,5,107,151,107,206,53,191,61,29,131,236,85,133,131,11,69,165,109,172,131,0,0,211,131,126,52,212,110,87,106,90,133,150,52,66,110,239,46,88,132,228,91,113,132,211,61,228,68,167,106,74,132,181,60,88,121,0,0,150,107,119,110,67,110,222,132,0,0,145,131,160,68,147,132,228,132,145,92,64,66,192,92,67,69,52,133,242,90,153,110,39,69,115,133,22,69,191,103,22,134,37,134,59,134,193,133,136,112,2,134,130,21,205,112,178,249,106,69,40,134,72,54,162,24,247,83,154,115,126,134,113,135,248,160,238,135,39,44,177,135,218,135,15,136,97,86,108,134,86,104,15,70,69,136,70,136,224,117,185,61,228,117,94,136,156,136,91,70,180,136,181,136,193,99,197,136,119,119,15,119,135,137,138,137,0,0,0,0,167,137,188,137,37,138,231,137,36,121,189,122,156,138,147,119,254,145,144,138,89,122,233,122,58,123,143,63,19,71,56,123,124,113,12,139,31,139,48,84,101,85,63,139,76,139,77,139,169,138,122,74,144,139,155,139,175,138,223,22,21,70,79,136,155,140,84,125,143,125,212,249,37,55,83,125,214,140,152,125,189,125,18,141,3,141,16,25,219,140,92,112,17,141,201,76,208,62,0,0,169,141,2,128,20,16,138,73,124,59,188,129,12,113,231,122,173,142,182,142,195,142,212,146,25,143,45,143,101,131,18,132,165,143,3,147,159,162,80,10,179,143,42,73,222,137,61,133,187,61,248,94,98,50,249,143,20,160,188,134,1,133,37,35,128,57,215,110,55,144,60,133,190,122,97,144,108,133,11,134,168,144,19,135,196,144,230,134,174,144,0,0,103,145,240,58,169,145,196,145,172,124,51,137,137,30,14,146,159,108,65,146,98,146,185,85,0,0,198,138,155,60,12,139,219,85,49,13,44,147,107,147,225,138,235,139,143,112,195,90,226,138,229,138,101,73,68,146,236,139,57,140,255,139,115,147,91,148,188,142,133,149,166,149,38,148,160,149,246,111,185,66,122,38,216,134,124,18,46,62,223,73,28,108,123,150,150,150,108,65,163,150,213,110,218,97,182,150,245,120,224,138,189,150,204,83,161,73,184,108,116,2,16,100,175,144,229,144,209,74,21,25,10,51,49,151,66,134,54,151,15,74,61,69,133,69,233,74,117,112,65,91,27,151,0,0,213,145,87,151,74,91,235,145,95,151,37,148,208,80,183,48,188,48,137,151,159,151,177,151,190,151,192,151,210,151,224,151,108,84,238,151,28,116,51,148,0,0,245,151,29,148,122,121,209,74,52,152,51,152,75,152,102,152,14,59,117,113,81,61,48,6,92,65,6,87,202,152,183,152,200,152,199,152,255,74,39,109,211,22,176,85,225,152,230,152,236,152,120,147,57,153,41,74,114,75,87,152,5,153,245,153,12,154,59,154,16,154,88,154,37,87,196,54,177,144,213,155,224,154,226,154,5,155,244,154,14,76,20,155,45,155,0,134,52,80,52,155,168,105,195,56,125,48,80,155,64,155,62,157,69,90,99,24,142,155,75,66,2,156,255,155,12,156,104,158,212,157,183,159,146,161,171,161,225,160,35,161,223,161,126,157,131,157,52,161,14,158,136,104,196,157,91,33,147,161,32,162,59,25,51,162,57,157,185,160,180,162,144,158,149,158,158,158,162,158,52,77,170,158,175,158,100,67,193,158,96,59,229,57,29,61,50,79,190,55,43,140,2,159,8,159,150,75,36,148,162,109,23,159,0,0,57,159,159,86,138,86,69,159,184,153,139,144,242,151,127,132,98,159,105,159,220,122,142,159,22,114,190,75,117,73,187,73,119,113,248,73,72,67,81,74,158,115,218,139,250,24,159,121,126,137,54,142,105,147,243,147,68,138,236,146,129,147,203,147,108,137,185,68,23,114,235,62,114,119,67,122,208,112,115,68,248,67,126,113,239,23,163,112,190,24,153,53,199,62,133,24,47,84,248,23,34,55,251,22,57,24,225,54,116,23,209,24,75,95,35,55,192,22,91,87,37,74,254,19,168,18,198,19,182,20,3,133,166,54,0,0,85,132,148,73,101,113,49,62,92,85,251,62,82,112,244,68,238,54,157,153,38,111,249,103,51,55,21,60,231,61,108,88,34,25,16,104,87,64,63,55,225,64,139,64,15,65,33,108,203,84,158,86,177,102,146,86,223,15,168,11,13,14,198,147,19,139,156,147,248,78,43,81,25,56,54,68,188,78,101,4,127,3,75,79,138,79,81,86,104,90,171,1,203,3,153,57,10,3,20,4,53,52,41,79,192,2,179,142,117,2,218,138,12,2,152,78,205,80,13,81,162,79,3,79,14,74,138,62,66,79,46,80,108,80,129,80,204,79,229,79,88,80,252,80,0,0,0,0,0,0,0,0,118,110,149,53,57,62,191,62,114,109,132,24,137,62,168,81,195,81,224,5,221,68,163,4,146,4,145,4,122,141,156,138,14,7,89,82,164,82,115,8,225,82,0,0,122,70,140,113,140,67,32,12,172,73,228,16,209,105,29,14,0,0,222,62,153,116,20,116,86,116,152,115,142,75,188,74,141,64,208,83,132,53,15,114,201,64,180,85,69,3,205,84,198,11,29,87,93,146,244,150,102,147,221,87,141,87,127,87,62,54,203,88,153,90,70,138,250,22,111,23,16,23,44,90,184,89,143,146,126,90,207,90,18,90,70,89,243,25,97,24,149,66,245,54,5,109,67,116,33,90,131,94,129,90,215,139,19,4,224,147,140,116,3,19,5,113,114,73,8,148,251,137,189,147,160,55,30,92,158,92,94,94,72,94,150,25,124,25,238,58,205,94,79,91,3,25,4,25,1,55,160,24,221,54,254,22,211,54,42,129,71,138,186,29,114,52,168,137,12,95,14,95,39,25,171,23,107,90,59,23,68,91,20,134,253,117,96,136,126,96,96,40,43,38,219,95,184,62,175,37,190,37,136,144,115,111,192,97,62,0,70,0,27,38,153,97,152,97,117,96,155,44,7,45,212,70,77,145,113,100,101,70,106,43,41,58,34,43,80,52,234,152,120,46,55,99,91,164,182,100,49,99,209,99,227,73,103,45,164,98,161,44,59,100,107,101,114,105,244,59,142,48,173,50,137,73,171,50,13,85,224,50,217,24,63,148,206,102,137,50,179,49,224,58,144,65,132,85,34,139,143,85,252,22,91,85,37,84,238,120,3,49,42,24,52,50,100,52,15,50,130,49,201,66,142,102,36,109,107,102,147,75,48,102,112,120,235,29,99,102,210,50,225,50,30,102,114,88,209,56,58,56,188,55,153,59,162,55,254,51,208,116,150,59,143,103,42,70,182,104,30,104,196,59,190,106,99,56,213,55,135,68,51,106,82,106,201,106,5,107,18,25,17,101,152,104,76,106,215,59,122,106,87,107,192,63,154,60,160,147,242,146,234,139,203,138,137,146,30,128,220,137,103,148,165,109,11,111,236,73,0,0,127,63,143,61,4,110,60,64,61,90,10,110,71,88,36,109,66,120,59,113,26,67,118,66,241,112,80,114,135,114,148,114,143,71,37,71,121,81,164,74,235,5,122,116,248,62,95,54,74,74,23,73,225,95,6,63,177,62,223,74,35,140,53,63,167,96,243,62,204,116,60,116,135,147,55,116,159,68,234,109,81,69,131,117,99,63,217,76,6,77,88,63,85,117,115,118,198,165,25,59,104,116,204,138,171,73,142,73,251,58,205,61,78,74,255,62,197,73,243,72,250,145,50,87,66,147,227,138,100,24,223,80,33,82,231,81,120,119,50,50,14,119,15,119,123,119,151,70,129,55,94,58,240,72,56,116,155,116,191,62,186,74,199,74,200,64,150,74,174,97,7,147,129,85,30,120,141,120,136,120,210,120,208,115,89,121,65,119,227,86,14,65,0,0,150,132,165,121,45,106,250,62,58,122,244,121,110,65,230,22,50,65,53,146,241,121,76,13,140,73,153,2,186,61,110,23,151,53,107,85,112,53,170,54,212,1,13,12,226,122,89,90,245,38,175,90,156,90,13,90,91,2,240,120,42,90,198,91,254,122,249,65,93,124,109,124,17,66,179,91,188,94,166,94,205,124,249,73,176,23,142,124,124,124,174,124,178,106,220,125,7,126,211,125,78,127,97,98,92,97,72,123,151,125,130,94,106,66,117,107,22,9,214,103,78,0,207,53,196,87,18,100,248,99,98,73,221,127,39,123,44,8,233,90,67,93,12,123,14,94,230,153,69,134,99,154,28,106,63,52,226,57,247,73,173,101,31,154,160,101,128,132,39,113,209,108,234,68,55,129,2,68,198,128,9,129,66,129,180,103,195,152,66,106,98,130,101,130,81,106,83,132,167,109,16,134,27,114,134,90,127,65,64,24,43,91,161,24,228,90,216,24,160,134,188,249,143,61,45,136,34,116,2,90,110,136,69,79,135,136,191,136,230,136,101,137,77,137,131,86,84,137,133,119,132,119,245,139,217,139,156,139,249,137,173,62,163,132,245,70,207,70,242,55,61,138,28,138,72,148,77,95,43,146,132,66,212,101,41,113,196,112,69,24,109,157,159,140,233,140,220,125,154,89,195,119,240,89,110,67,212,54,42,142,167,142,9,76,48,143,74,143,244,66,88,108,187,111,33,35,155,72,121,111,139,110,218,23,233,155,181,54,47,73,187,144,0,0,113,85,6,73,187,145,4,148,75,138,98,64,252,138,39,148,29,140,59,140,229,132,43,138,153,149,167,149,151,149,150,149,52,141,69,116,194,62,255,72,66,74,234,67,231,62,37,50,143,150,231,142,102,142,101,142,204,62,237,73,120,74,238,63,18,116,107,116,252,62,65,151,176,144,71,104,29,74,147,144,223,87,0,0,104,147,137,137,38,140,47,139,190,99,186,146,17,91,105,139,60,73,249,115,27,66,155,151,113,151,56,153,38,15,193,93,197,139,178,74,31,152,218,148,246,146,215,149,229,145,192,68,80,139,103,74,100,139,220,152,69,138,0,63,42,146,37,73,20,132,59,153,77,153,6,123,253,61,155,153,111,75,170,153,92,154,101,139,200,88,143,106,33,154,254,90,47,154,241,152,144,75,72,153,188,153,189,75,151,75,125,147,114,88,2,19,34,88,184,73,232,20,68,120,31,39,184,61,197,104,125,61,88,148,39,57,80,97,129,39,107,41,7,97,79,156,83,156,123,156,53,156,16,156,127,155,207,155,45,158,159,155,245,161,254,160,33,157,174,76,4,65,24,158,176,76,12,157,180,161,237,160,243,160,47,153,165,157,189,132,18,110,223,111,130,107,252,133,51,69,164,109,132,110,240,109,32,132,238,133,0,110,215,55,100,96,226,121,156,53,64,54,45,73,222,73,98,61,219,147,190,146,72,147,191,2,185,120,119,146,77,148,228,79,64,52,100,144,93,85,61,120,84,120,182,120,75,120,87,23,201,49,65,73,154,54,114,79,218,111,217,111,0,0,30,112,20,84,181,65,187,87,243,88,138,87,22,157,215,87,52,113,175,52,172,65,235,113,64,108,151,79,0,0,181,23,73,138,12,97,206,90,11,90,188,66,136,68,44,55,123,75,252,137,187,147,184,147,214,24,29,15,114,132,192,108,19,20,250,66,38,44,193,67,148,89,183,61,65,103,168,125,91,97,164,96,185,73,139,73,250,137,229,146,226,115,233,62,180,116,99,139,159,24,225,62,179,74,216,106,243,115,251,115,214,62,62,74,148,74,217,23,102,74,167,3,36,20,229,73,72,116,22,73,165,112,118,73,132,146,230,115,95,147,254,4,49,147,206,138,22,138,134,147,231,139,213,85,53,73,130,138,107,113,67,73,255,12,164,86,26,6,235,11,184,12,2,85,196,121,250,23,254,125,194,22,80,74,82,24,46,69,1,148,10,55,192,138,173,73,176,89,191,24,131,24,132,116,161,90,226,54,91,61,176,54,95,146,121,90,129,138,98,24,116,147,205,60,180,10,150,74,138,57,244,80,105,61,76,61,156,19,117,113,251,66,24,130,15,110,228,144,235,68,87,109,79,126,103,112,175,108,214,60,237,63,45,62,2,110,12,111,111,61,245,3,81,117,188,54,200,52,128,70,218,62,113,72,196,89,110,146,62,73,65,143,28,140,192,107,18,88,200,87,214,54,82,20,254,112,98,67,113,74,227,47,176,18,189,35,185,104,103,105,152,19,229,52,244,123,223,54,131,138,214,55,250,51,159,76,26,106,173,54,183,108,62,132,223,68,206,68,38,109,81,109,130,108,222,111,23,111,9,113,61,131,58,23,237,131,128,108,83,112,219,23,137,89,130,90,179,23,97,90,113,90,5,25,252,65,45,55,239,89,60,23,199,54,142,113,144,147,154,102,165,66,110,90,43,90,147,66,43,106,249,62,54,119,91,68,202,66,29,113,89,66,225,137,176,79,40,109,194,92,206,68,77,126,189,67,12,106,86,66,4,19,166,112,51,113,233,67,165,61,223,108,37,248,79,74,101,126,235,89,47,93,243,61,92,95,93,74,223,23,164,125,38,132,133,84,250,58,0,51,20,2,126,87,213,8,25,6,229,63,158,31,182,162,3,112,91,145,112,93,143,115,211,124,89,138,32,148,200,79,231,127,205,114,16,115,244,122,56,115,57,115,246,86,65,115,72,115,169,62,24,123,108,144,245,113,242,72,225,115,246,129,202,62,12,119,209,62,162,108,253,86,25,116,30,116,31,116,226,62,240,62,244,62,250,62,211,116,14,63,83,63,66,117,109,117,114,117,141,117,124,63,200,117,220,117,192,63,77,118,215,63,116,118,220,63,122,118,92,79,136,113,35,86,128,137,105,88,29,64,67,119,57,64,97,103,69,64,219,53,152,119,106,64,111,64,94,92,190,119,203,119,242,88,24,120,185,112,28,120,168,64,57,120,71,120,81,120,102,120,72,132,53,85,51,121,3,104,50,121,3,65,9,65,145,121,153,121,187,143,6,122,188,143,103,65,145,122,178,65,188,122,121,130,196,65,207,122,219,122,207,65,33,78,98,123,108,123,123,123,18,124,27,124,96,66,122,66,123,124,156,124,140,66,184,124,148,66,237,124,147,143,192,112,207,12,207,125,212,125,208,125,253,125,174,127,180,127,159,114,151,67,32,128,37,128,57,123,46,128,49,128,84,128,204,61,180,87,160,112,183,128,233,128,237,67,12,129,42,115,14,129,18,129,96,117,20,129,1,68,57,59,86,129,89,129,90,129,19,68,58,88,124,129,132,129,37,68,147,129,45,68,165,129,239,87,193,129,228,129,84,130,143,68,166,130,118,130,202,130,216,130,255,130,176,68,87,131,105,150,138,105,5,132,245,112,100,132,227,96,136,132,4,69,190,132,225,132,248,132,16,133,56,133,82,133,59,69,111,133,112,133,224,133,119,69,114,134,146,134,178,134,239,134,69,150,139,135,6,70,23,70,174,136,255,136,36,137,71,137,145,137,103,121,41,138,56,138,148,138,180,138,81,140,212,140,242,140,28,141,152,71,95,88,195,141,237,71,238,78,58,142,216,85,84,87,113,142,245,85,176,142,55,72,206,142,226,142,228,142,237,142,242,142,183,143,193,143,202,143,204,143,51,144,196,153,173,72,224,152,19,146,30,73,40,146,88,146,107,146,177,146,174,146,191,146,227,146,235,146,243,146,244,146,253,146,67,147,132,147,173,147,69,73,81,73,191,158,23,148,1,83,29,148,45,148,62,148,106,73,84,148,121,148,45,149,162,149,167,73,244,149,51,150,229,73,160,103,36,74,64,151,53,74,178,151,194,151,84,86,228,74,232,96,185,152,25,75,241,152,68,88,14,153,25,153,180,81,28,153,55,153,66,153,93,153,98,153,112,75,197,153,157,75,60,154,15,155,131,122,105,155,129,155,221,155,241,155,244,155,109,76,32,156,111,55,194,27,73,157,58,156,254,158,80,86,147,157,189,157,192,157,252,157,246,148,182,143,123,158,172,158,177,158,189,158,198,158,220,148,226,158,241,158,248,158,200,122,68,159,148,0,183,2,160,3,26,105,195,148,172,89,215,4,64,88,193,148,185,55,213,5,21,6,118,6,186,22,87,87,115,113,194,10,205,10,191,11,106,84,59,248,203,11,158,84,251,11,59,12,83,12,101,12,124,12,231,96,141,12,122,86,181,12,221,12,237,12,111,13,178,13,200,13,85,105,47,156,165,135,4,14,14,14,215,14,144,15,45,15,115,14,32,92,188,15,11,94,92,16,79,16,118,16,30,103,123,16,136,16,150,16,71,54,191,16,211,16,47,17,59,17,100,83,173,132,227,18,117,19,54,19,129,139,119,21,25,22,195,23,199,23,120,78,187,112,45,24,106,25,45,26,69,26,42,28,112,28,172,28,200,30,195,98,213,30,21,31,152,113,85,104,69,32,233,105,200,54,124,34,215,35,250,35,42,39,113,40,79,41,253,130,103,41,147,41,213,42,165,137,232,42,160,143,14,43,184,151,63,43,71,152,189,154,76,44,0,0,136,44,183,44,232,91,8,45,18,45,183,45,149,45,66,46,116,47,204,47,51,48,102,48,31,51,222,51,177,95,72,102,191,102,121,122,103,53,243,53,0,0,186,73,0,0,26,54,22,55,0,0,70,3,181,88,14,103,24,105,167,58,87,118,226,95,17,62,185,62,254,117,154,32,208,72,184,74,25,65,154,138,238,66,13,67,59,64,52,67,150,67,69,74,202,5,210,81,17,6,159,89,168,30,190,59,255,60,4,68,214,68,136,87,116,70,155,57,47,71,232,133,201,153,98,55,195,33,94,139,78,139,0,0,18,72,251,72,21,74,9,114,192,74,120,12,101,89,165,78,134,79,121,7,218,142,44,80,143,82,63,87,113,113,153,82,25,84,74,63,167,74,188,85,70,84,110,84,82,107,0,0,115,52,63,85,50,118,94,85,24,71,98,85,102,85,199,87,63,73,93,88,102,80,251,52,204,51,0,0,3,89,124,71,72,137,174,90,137,91,6,92,144,29,161,87,81,113,0,0,2,97,18,124,86,144,178,97,154,79,98,139,2,100,74,100,91,93,247,107,0,0,132,100,28,25,234,138,246,73,136,100,239,63,18,101,192,75,191,101,181,102,27,39,101,148,225,87,149,97,39,90,205,248,0,0,185,86,33,69,252,102,106,78,52,73,86,150,143,109,189,108,24,54,119,137,153,103,110,104,17,100,94,104,0,0,199,104,66,123,192,144,17,10,38,105,0,0,57,105,69,122,0,0,250,105,38,154,45,106,95,54,105,100,33,0,131,121,52,106,91,107,44,93,25,53,0,0,157,107,208,70,164,108,59,117,101,136,174,109,182,88,28,55,141,37,75,112,205,113,84,60,128,114,133,114,129,146,122,33,139,114,48,147,230,114,208,73,57,108,159,148,80,116,248,14,39,136,245,136,38,41,115,132,177,23,184,110,42,74,32,24,164,57,185,54,0,0,0,0,63,69,182,102,173,156,164,152,67,137,204,119,88,120,214,86,223,64,10,22,161,57,47,55,232,128,197,19,173,113,102,131,221,121,168,145,0,0,183,76,175,112,171,137,253,121,10,122,11,123,102,125,122,65,67,123,126,121,9,128,181,111,223,162,3,106,24,131,162,83,7,110,191,147,54,104,93,151,111,129,35,128,181,105,237,19,47,50,72,128,133,93,48,140,131,128,21,87,35,152,73,137,171,93,136,73,190,101,213,105,210,83,165,74,129,63,17,60,54,103,144,128,244,128,46,129,161,31,79,129,137,129,175,129,26,130,6,131,47,131,138,131,202,53,104,132,170,134,250,72,230,99,86,137,8,120,85,146,184,137,242,67,231,137,223,67,232,137,70,139,212,139,248,89,9,140,0,0,197,143,236,144,0,0,16,145,60,145,247,61,94,145,202,74,208,143,143,114,139,86,231,148,233,149,176,149,184,149,50,151,209,152,73,153,106,153,195,153,40,154,14,155,90,157,155,157,159,126,248,158,35,159,164,76,71,149,147,162,162,113,255,162,145,77,18,144,203,165,156,77,156,12,190,143,193,85,186,143,176,36,185,143,147,74,9,69,127,126,86,111,177,106,234,78,228,52,44,139,157,120,58,55,128,142,245,23,36,128,108,139,153,139,62,122,175,102,235,61,85,118,183,60,53,86,86,89,154,78,129,94,88,98,191,86,109,14,14,142,109,91,136,62,158,76,222,99,0,0,246,23,123,24,48,101,45,86,74,92,26,84,17,83,198,61,152,157,125,76,34,86,30,86,73,127,216,94,117,89,64,61,112,135,28,78,234,15,73,13,186,54,23,129,94,157,24,141,59,118,69,156,78,118,185,119,69,147,50,84,72,129,247,130,37,86,50,129,24,132,189,128,234,85,98,121,67,86,22,84,157,14,206,53,5,86,241,85,241,102,226,130,45,54,52,117,240,85,186,85,151,84,114,85,65,12,150,12,208,94,72,81,118,14,98,44,162,14,171,158,90,125,222,85,117,16,157,98,109,151,148,84,205,140,246,113,118,145,252,99,185,99,254,99,105,85,67,43,114,156,179,46,154,81,223,52,167,13,167,81,77,84,30,85,19,85,102,118,45,142,138,104,177,117,182,128,4,136,134,135,199,136,182,129,28,132,193,16,236,68,4,115,6,71,144,91,11,131,147,104,123,86,244,38,47,125,163,65,115,125,208,110,182,114,112,145,217,17,8,146,252,60,169,166,172,14,249,14,102,114,162,28,78,71,194,79,249,127,235,15,250,64,93,156,31,101,160,45,243,72,224,71,124,157,236,15,10,14,0,0,163,117,237,15,0,0,72,96,135,17,163,113,142,126,80,157,26,78,4,78,119,53,13,91,178,108,103,83,172,54,220,57,125,83,165,54,24,70,154,88,110,75,45,130,75,84,170,87,149,90,121,9], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+43636);
/* memory initializer */ allocate([82,58,101,36,116,115,172,158,9,77,237,155,254,60,48,159,91,76,169,79,158,149,222,159,92,132,182,61,178,114,179,103,32,55,46,99,37,125,247,62,44,62,42,58,8,144,204,82,116,62,122,54,233,69,142,4,64,118,240,90,182,14,122,120,46,127,167,88,191,64,124,86,139,155,116,93,84,118,52,164,133,158,225,76,0,0,251,55,25,97,218,48,242,67,0,0,93,86,169,18,167,87,99,73,6,158,52,82,174,112,173,53,0,0,124,157,86,124,57,155,222,87,108,23,83,92,211,100,208,148,53,99,100,113,173,134,40,13,34,109,226,74,113,13,0,0,254,81,15,31,142,93,3,151,209,29,129,158,76,144,31,123,2,155,209,92,163,123,104,98,53,99,255,154,207,123,42,155,126,124,0,0,66,124,134,124,21,156,252,123,9,155,0,0,27,156,62,73,90,159,115,85,195,91,253,79,152,158,242,79,96,82,6,62,209,82,103,87,86,80,183,89,18,94,200,151,171,157,92,143,105,84,180,151,64,153,186,151,44,83,48,97,44,105,218,83,10,156,2,157,59,76,65,150,128,105,166,80,70,117,109,23,218,153,115,82,0,0,89,145,129,150,92,145,0,0,81,145,151,142,127,99,35,109,202,106,17,86,142,145,122,117,133,98,252,3,79,115,112,124,33,92,253,60,0,0,25,73,214,118,157,155,42,78,212,12,190,131,66,136,0,0,74,92,192,105,0,0,122,87,31,82,245,93,206,78,49,108,242,1,57,79,156,84,218,84,154,82,130,141,254,53,0,0,243,53,0,0,82,107,124,145,165,159,151,155,46,152,180,152,186,154,168,158,132,158,122,113,20,123,0,0,250,107,24,136,120,127,0,0,32,86,74,166,119,142,83,159,0,0,212,141,79,142,28,158,1,142,130,98,125,131,40,142,117,142,211,122,119,74,62,122,216,120,234,108,103,138,7,118,90,138,38,159,206,108,214,135,195,117,178,162,83,120,64,248,12,141,226,114,113,115,45,139,2,115,241,116,235,140,187,74,47,134,186,95,160,136,183,68,0,0,59,24,5,110,0,0,126,138,27,37,0,0,253,96,103,118,215,154,68,157,110,147,143,155,245,135,0,0,0,0,247,140,44,115,33,151,176,155,214,53,178,114,7,76,81,124,74,153,89,97,89,97,4,76,150,158,125,97,0,0,95,87,111,97,166,98,57,98,0,0,92,58,226,97,170,83,245,51,100,99,2,104,210,53,87,93,194,139,218,143,57,142,0,0,217,80,70,29,6,121,50,83,56,150,59,15,101,64,0,0,254,119,0,0,194,124,26,95,218,124,45,122,102,128,99,128,77,125,5,117,242,116,148,137,26,130,12,103,98,128,134,116,91,128,240,116,3,129,36,119,137,137,204,103,83,117,209,110,169,135,206,135,200,129,140,135,73,138,173,140,67,139,43,119,248,116,218,132,53,54,178,105,166,141,0,0,169,137,0,0,185,109,193,135,17,64,231,116,219,61,118,113,164,96,156,97,209,60,0,0,119,96,0,0,113,127,45,139,0,0,233,96,126,75,32,82,24,60,199,60,215,94,86,118,49,85,68,25,254,18,3,153,220,109,173,112,193,92,173,97,15,138,119,54,238,0,70,104,14,79,98,69,31,91,76,99,80,159,166,158,107,98,71,5,219,146,223,5,197,63,76,133,181,66,239,115,181,81,73,54,66,73,228,137,68,147,219,25,238,130,200,60,60,120,68,103,223,98,51,73,170,137,160,2,179,107,5,19,171,79,237,36,8,80,41,109,132,122,0,54,177,74,19,37,0,0,126,3,164,95,128,3,71,3,219,110,31,4,0,0,1,81,122,52,14,81,108,152,67,55,22,132,164,73,135,4,96,81,180,51,106,81,255,11,252,32,229,2,48,37,142,5,51,50,131,25,130,91,125,135,179,5,153,60,178,81,184,81,52,157,201,81,207,81,209,81,220,60,211,81,166,74,179,81,226,81,66,83,237,81,205,131,62,105,45,55,123,95,11,82,38,82,60,82,181,82,87,82,148,82,185,82,197,82,21,124,66,133,224,82,13,134,19,107,0,0,222,138,73,85,217,110,128,63,84,9,236,63,51,83,0,0,226,11,203,108,38,23,27,104,213,115,74,96,170,62,204,56,232,22,221,113,162,68,109,83,116,83,171,134,126,83,0,0,150,21,19,22,230,119,147,83,155,138,160,83,171,83,174,83,167,115,114,87,89,63,156,115,193,83,197,83,73,108,73,78,254,87,217,83,171,58,143,11,224,83,235,63,163,45,246,83,119,12,19,84,121,112,43,85,87,102,91,109,109,84,83,107,116,13,93,85,143,84,164,84,166,71,13,23,221,14,180,61,77,13,188,137,152,38,71,85,237,76,47,84,23,116,134,85,169,85,0,0,215,24,58,64,82,69,53,68,179,102,180,16,55,86,205,102,138,50,164,102,173,102,77,86,79,86,241,120,241,86,135,151,254,83,0,87,239,86,237,86,102,139,35,54,79,18,70,87,165,65,110,108,139,112,66,87,177,54,126,108,230,87,22,20,3,88,84,20,99,67,38,88,245,75,92,88,170,88,97,53,224,88,220,88,60,18,251,88,255,91,67,87,80,161,120,66,211,147,161,53,31,89,166,104,195,54,89,110,62,22,36,90,83,85,146,22,5,133,201,89,78,13,129,108,42,109,220,23,217,89,251,23,178,23,166,109,113,109,40,24,213,22,249,89,69,110,171,90,99,90,230,54,169,73,0,0,8,55,150,90,101,116,211,90,161,111,84,37,133,61,17,25,50,55,184,22,131,94,208,82,118,91,136,101,124,91,14,122,4,64,93,72,4,2,213,91,96,97,52,26,204,89,165,5,243,91,157,91,16,77,5,92,68,27,19,92,206,115,20,92,165,28,40,107,73,92,221,72,133,92,233,92,239,92,139,93,249,29,55,30,16,93,24,93,70,93,164,30,186,92,215,93,252,130,45,56,1,73,73,32,115,33,135,130,54,56,194,59,46,94,138,106,0,0,122,94,188,68,211,12,166,83,183,78,0,0,168,83,113,23,9,94,244,94,130,132,249,94,251,94,160,56,252,94,62,104,27,148,13,95,193,1,148,248,222,58,174,72,58,19,58,95,136,104,208,35,0,0,113,36,99,95,189,151,110,110,114,95,64,147,54,138,167,95,182,93,95,61,80,82,106,31,248,112,104,38,214,145,158,2,41,138,49,96,133,102,119,24,99,57,199,61,57,54,144,87,180,39,113,121,64,62,158,96,0,0,179,96,130,73,143,73,83,122,164,116,225,80,160,90,100,97,36,132,66,97,166,248,210,110,129,97,244,81,86,6,135,97,170,91,183,63,95,40,211,97,157,139,93,153,208,97,50,57,128,41,193,40,35,96,92,97,30,101,139,99,24,1,197,98,112,23,213,98,13,46,108,99,223,73,23,58,56,100,248,99,142,19,252,23,0,0,138,111,54,46,20,152,140,64,29,87,225,100,229,100,123,148,102,58,58,100,87,58,77,101,22,111,40,74,35,74,133,101,109,101,95,101,126,48,181,101,64,73,55,75,209,101,216,64,41,24,224,101,227,101,223,95,0,52,24,102,247,49,248,49,68,102,164,49,165,49,75,102,117,14,103,102,230,81,115,102,0,0,61,30,49,50,244,133,200,49,19,83,197,119,247,40,164,153,2,103,156,67,33,74,43,59,250,105,194,55,0,0,103,103,98,103,205,65,237,144,215,103,233,68,34,104,80,110,60,146,1,104,230,51,160,109,93,104,111,52,225,105,11,106,223,138,115,105,195,104,205,53,1,105,0,105,50,61,1,58,60,54,128,59,172,103,97,105,74,138,252,66,54,105,152,105,161,59,201,3,99,131,144,80,249,105,89,54,42,33,69,106,3,55,157,106,243,59,177,103,200,106,156,145,13,60,29,107,35,9,222,96,53,107,116,107,205,39,181,110,219,58,181,3,88,25,64,55,33,84,90,59,225,107,252,62,220,107,55,108,139,36,241,72,81,107,90,108,38,130,121,108,188,61,197,68,189,61,164,65,12,73,0,73,201,60,229,54,235,60,50,13,131,155,249,49,145,36,143,127,55,104,37,109,161,109,235,109,150,109,92,109,124,110,4,111,127,73,133,64,114,110,51,133,116,111,199,81,0,0,0,0,46,132,33,139,0,0,47,62,83,116,130,63,204,121,79,110,145,90,75,48,248,111,13,55,157,111,48,62,250,110,151,20,61,64,85,69,240,147,68,111,92,111,78,61,116,111,112,145,59,61,159,111,68,65,211,111,145,64,85,65,57,64,240,63,180,63,63,65,223,81,86,65,87,65,64,65,221,97,75,112,126,112,167,112,129,112,204,112,213,112,214,112,223,112,4,65,232,61,180,113,150,113,119,66,43,113,69,113,136,90,74,113,0,0,156,92,101,67,79,113,98,147,193,66,44,113,90,68,39,74,34,74,186,113,232,139,189,112,14,114,66,148,21,114,17,89,67,148,36,114,65,147,5,86,46,114,64,114,116,73,189,104,85,114,87,114,85,62,68,48,13,104,61,111,130,114,0,0,43,115,35,72,43,136,237,72,4,136,40,115,46,115,207,115,170,115,58,12,46,106,201,115,73,116,226,65,231,22,36,74,35,102,197,54,183,73,141,73,251,73,247,115,21,116,3,105,38,74,57,116,195,5,215,62,0,0,173,40,96,116,178,142,71,116,228,115,118,116,185,131,108,116,48,55,116,116,241,147,44,106,130,116,83,73,140,74,95,65,121,74,143,139,70,91,3,140,158,24,200,116,136,25,14,117,0,0,30,117,217,142,75,26,215,91,172,142,133,147,77,117,74,117,103,117,110,117,130,79,4,63,19,77,142,117,93,116,158,117,180,117,2,118,44,118,81,118,79,118,111,118,118,118,245,99,144,118,239,129,248,55,17,105,14,105,161,118,165,118,183,118,204,118,159,111,98,132,157,80,125,81,28,30,30,119,38,119,64,119,175,100,32,82,88,119,172,50,175,119,100,137,104,137,193,22,244,119,0,0,118,19,18,74,202,104,175,120,199,120,211,120,165,150,46,121,224,85,215,120,52,121,177,120,12,118,184,143,132,136,43,139,131,96,28,38,134,121,0,137,2,105,128,121,87,88,157,121,57,123,60,121,169,121,42,110,38,113,168,62,198,121,13,145,212,121,32,5,95,68,15,82,130,184,248,0,0,64,32,169,78,4,0,0,0,0,52,11,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,64,0,0,0,0,0,0,0,0,4,88,0,60,0,0,0,0,0,128,92,173,220,243,187,201,67,238,237,164,15,38,193,155,118,242,239,222,251,250,247,15,50,68,175,254,239,253,254,17,96,176,0,0,33,25,129,32,16,136,168,96,33,105,36,0,68,137,196,0,0,3,64,53,0,67,132,49,81,147,104,2,2,0,0,0,0,0,0,0,0,0,0,0,64,0,1,128,172,100,130,64,140,161,144,4,80,96,212,0,210,42,24,157,104,53,151,79,216,248,32,196,130,28,40,130,117,148,2,56,64,160,161,197,16,113,77,196,13,152,185,94,91,1,67,159,153,3,120,32,226,31,8,137,1,201,64,7,3,13,154,144,82,209,79,124,3,2,33,32,192,110,19,131,181,219,245,229,119,144,79,23,154,54,23,12,0,110,186,9,47,96,84,0,30,120,104,34,112,86,158,37,243,142,183,23,11,239,230,119,23,91,27,193,16,152,141,18,24,182,207,1,49,114,26,91,44,182,192,32,226,195,92,130,27,224,218,206,133,214,64,169,84,11,208,15,72,68,64,16,9,212,64,174,59,100,30,68,43,23,8,134,130,54,24,160,137,231,156,91,8,132,3,2,218,144,236,219,135,133,191,162,173,157,142,157,152,32,37,70,0,70,159,127,227,213,201,132,244,214,77,6,227,182,24,18,9,0,0,0,4,0,0,32,0,0,0,0,2,0,0,0,0,0,0,0,0,0,32,0,0,0,0,0,0,0,0,0,0,0,0,8,0,0,142,120,110,95,63,126,221,61,247,252,155,252,174,210,255,143,107,241,231,191,186,174,110,23,239,220,167,62,182,181,119,201,146,215,165,182,74,110,155,185,129,77,103,254,84,241,155,98,254,111,82,215,54,254,191,41,69,129,249,189,101,166,66,57,0,0,66,96,143,0,148,64,64,210,175,215,209,219,0,160,152,178,123,6,82,32,152,22,200,61,9,0,0,1,0,0,0,1,10,178,8,128,0,0,0,4,136,32,20,16,76,0,0,4,0,161,68,16,0,65,1,0,8,64,240,223,79,54,88,241,245,181,128,245,103,128,64,0,80,78,65,200,132,0,90,96,216,1,43,1,80,161,22,196,64,242,110,17,172,32,57,196,192,8,7,12,9,152,150,196,155,16,28,152,108,134,42,166,1,70,17,109,229,203,196,192,146,16,33,22,18,157,114,244,105,14,23,42,162,129,244,123,0,8,164,11,144,16,44,204,57,74,1,240,22,11,10,64,12,29,234,12,68,14,69,2,0,2,78,4,78,5,78,6,78,15,78,18,78,23,78,31,78,32,78,33,78,35,78,38,78,41,78,46,78,47,78,49,78,51,78,53,78,55,78,60,78,64,78,65,78,66,78,68,78,70,78,74,78,81,78,85,78,87,78,90,78,91,78,98,78,99,78,100,78,101,78,103,78,104,78,106,78,107,78,108,78,109,78,110,78,111,78,114,78,116,78,117,78,118,78,119,78,120,78,121,78,122,78,123,78,124,78,125,78,127,78,128,78,129,78,130,78,131,78,132,78,133,78,135,78,138,78,144,78,150,78,151,78,153,78,156,78,157,78,158,78,163,78,170,78,175,78,176,78,177,78,180,78,182,78,183,78,184,78,185,78,188,78,189,78,190,78,200,78,204,78,207,78,208,78,210,78,218,78,219,78,220,78,224,78,226,78,230,78,231,78,233,78,237,78,238,78,239,78,241,78,244,78,248,78,249,78,250,78,252,78,254,78,0,79,2,79,3,79,4,79,5,79,6,79,7,79,8,79,11,79,12,79,18,79,19,79,20,79,21,79,22,79,28,79,29,79,33,79,35,79,40,79,41,79,44,79,45,79,46,79,49,79,51,79,53,79,55,79,57,79,59,79,62,79,63,79,64,79,65,79,66,79,68,79,69,79,71,79,72,79,73,79,74,79,75,79,76,79,82,79,84,79,86,79,97,79,98,79,102,79,104,79,106,79,107,79,109,79,110,79,113,79,114,79,117,79,119,79,120,79,121,79,122,79,125,79,128,79,129,79,130,79,133,79,134,79,135,79,138,79,140,79,142,79,144,79,146,79,147,79,149,79,150,79,152,79,153,79,154,79,156,79,158,79,159,79,161,79,162,79,164,79,171,79,173,79,176,79,177,79,178,79,179,79,180,79,182,79,183,79,184,79,185,79,186,79,187,79,188,79,189,79,190,79,192,79,193,79,194,79,198,79,199,79,200,79,201,79,203,79,204,79,205,79,210,79,211,79,212,79,213,79,214,79,217,79,219,79,224,79,226,79,228,79,229,79,231,79,235,79,236,79,240,79,242,79,244,79,245,79,246,79,247,79,249,79,251,79,252,79,253,79,255,79,0,80,1,80,2,80,3,80,4,80,5,80,6,80,7,80,8,80,9,80,10,80,11,80,14,80,16,80,17,80,19,80,21,80,22,80,23,80,27,80,29,80,30,80,32,80,34,80,35,80,36,80,39,80,43,80,47,80,48,80,49,80,50,80,51,80,52,80,53,80,54,80,55,80,56,80,57,80,59,80,61,80,63,80,64,80,65,80,66,80,68,80,69,80,70,80,73,80,74,80,75,80,77,80,80,80,81,80,82,80,83,80,84,80,86,80,87,80,88,80,89,80,91,80,93,80,94,80,95,80,96,80,97,80,98,80,99,80,100,80,102,80,103,80,104,80,105,80,106,80,107,80,109,80,110,80,111,80,112,80,113,80,114,80,115,80,116,80,117,80,120,80,121,80,122,80,124,80,125,80,129,80,130,80,131,80,132,80,134,80,135,80,137,80,138,80,139,80,140,80,142,80,143,80,144,80,145,80,146,80,147,80,148,80,149,80,150,80,151,80,152,80,153,80,154,80,155,80,156,80,157,80,158,80,159,80,160,80,161,80,162,80,164,80,166,80,170,80,171,80,173,80,174,80,175,80,176,80,177,80,179,80,180,80,181,80,182,80,183,80,184,80,185,80,188,80,189,80,190,80,191,80,192,80,193,80,194,80,195,80,196,80,197,80,198,80,199,80,200,80,201,80,202,80,203,80,204,80,205,80,206,80,208,80,209,80,210,80,211,80,212,80,213,80,215,80,216,80,217,80,219,80,220,80,221,80,222,80,223,80,224,80,225,80,226,80,227,80,228,80,229,80,232,80,233,80,234,80,235,80,239,80,240,80,241,80,242,80,244,80,246,80,247,80,248,80,249,80,250,80,252,80,253,80,254,80,255,80,0,81,1,81,2,81,3,81,4,81,5,81,8,81,9,81,10,81,12,81,13,81,14,81,15,81,16,81,17,81,19,81,20,81,21,81,22,81,23,81,24,81,25,81,26,81,27,81,28,81,29,81,30,81,31,81,32,81,34,81,35,81,36,81,37,81,38,81,39,81,40,81,41,81,42,81,43,81,44,81,45,81,46,81,47,81,48,81,49,81,50,81,51,81,52,81,53,81,54,81,55,81,56,81,57,81,58,81,59,81,60,81,61,81,62,81,66,81,71,81,74,81,76,81,78,81,79,81,80,81,82,81,83,81,87,81,88,81,89,81,91,81,93,81,94,81,95,81,96,81,97,81,99,81,100,81,102,81,103,81,105,81,106,81,111,81,114,81,122,81,126,81,127,81,131,81,132,81,134,81,135,81,138,81,139,81,142,81,143,81,144,81,145,81,147,81,148,81,152,81,154,81,157,81,158,81,159,81,161,81,163,81,166,81,167,81,168,81,169,81,170,81,173,81,174,81,180,81,184,81,185,81,186,81,190,81,191,81,193,81,194,81,195,81,197,81,200,81,202,81,205,81,206,81,208,81,210,81,211,81,212,81,213,81,214,81,215,81,216,81,217,81,218,81,220,81,222,81,223,81,226,81,227,81,229,81,230,81,231,81,232,81,233,81,234,81,236,81,238,81,241,81,242,81,244,81,247,81,254,81,4,82,5,82,9,82,11,82,12,82,15,82,16,82,19,82,20,82,21,82,28,82,30,82,31,82,33,82,34,82,35,82,37,82,38,82,39,82,42,82,44,82,47,82,49,82,50,82,52,82,53,82,60,82,62,82,68,82,69,82,70,82,71,82,72,82,73,82,75,82,78,82,79,82,82,82,83,82,85,82,87,82,88,82,89,82,90,82,91,82,93,82,95,82,96,82,98,82,99,82,100,82,102,82,104,82,107,82,108,82,109,82,110,82,112,82,113,82,115,82,116,82,117,82,118,82,119,82,120,82,121,82,122,82,123,82,124,82,126,82,128,82,131,82,132,82,133,82,134,82,135,82,137,82,138,82,139,82,140,82,141,82,142,82,143,82,145,82,146,82,148,82,149,82,150,82,151,82,152,82,153,82,154,82,156,82,164,82,165,82,166,82,167,82,174,82,175,82,176,82,180,82,181,82,182,82,183,82,184,82,185,82,186,82,187,82,188,82,189,82,192,82,193,82,194,82,196,82,197,82,198,82,200,82,202,82,204,82,205,82,206,82,207,82,209,82,211,82,212,82,213,82,215,82,217,82,218,82,219,82,220,82,221,82,222,82,224,82,225,82,226,82,227,82,229,82,230,82,231,82,232,82,233,82,234,82,235,82,236,82,237,82,238,82,239,82,241,82,242,82,243,82,244,82,245,82,246,82,247,82,248,82,251,82,252,82,253,82,1,83,2,83,3,83,4,83,7,83,9,83,10,83,11,83,12,83,14,83,17,83,18,83,19,83,20,83,24,83,27,83,28,83,30,83,31,83,34,83,36,83,37,83,39,83,40,83,41,83,43,83,44,83,45,83,47,83,48,83,49,83,50,83,51,83,52,83,53,83,54,83,55,83,56,83,60,83,61,83,64,83,66,83,68,83,70,83,75,83,76,83,77,83,80,83,84,83,88,83,89,83,91,83,93,83,101,83,104,83,106,83,108,83,109,83,114,83,118,83,121,83,123,83,124,83,125,83,126,83,128,83,129,83,131,83,135,83,136,83,138,83,142,83,143,83,144,83,145,83,146,83,147,83,148,83,150,83,151,83,153,83,155,83,156,83,158,83,160,83,161,83,164,83,167,83,170,83,171,83,172,83,173,83,175,83,176,83,177,83,178,83,179,83,180,83,181,83,183,83,184,83,185,83,186,83,188,83,189,83,190,83,192,83,195,83,196,83,197,83,198,83,199,83,206,83,207,83,208,83,210,83,211,83,213,83,218,83,220,83,221,83,222,83,225,83,226,83,231,83,244,83,250,83,254,83,255,83,0,84,2,84,5,84,7,84,11,84,20,84,24,84,25,84,26,84,28,84,34,84,36,84,37,84,42,84,48,84,51,84,54,84,55,84,58,84,61,84,63,84,65,84,66,84,68,84,69,84,71,84,73,84,76,84,77,84,78,84,79,84,81,84,90,84,93,84,94,84,95,84,96,84,97,84,99,84,101,84,103,84,105,84,106,84,107,84,108,84,109,84,110,84,111,84,112,84,116,84,121,84,122,84,126,84,127,84,129,84,131,84,133,84,135,84,136,84,137,84,138,84,141,84,145,84,147,84,151,84,152,84,156,84,158,84,159,84,160,84,161,84,162,84,165,84,174,84,176,84,178,84,181,84,182,84,183,84,185,84,186,84,188,84,190,84,195,84,197,84,202,84,203,84,214,84,216,84,219,84,224,84,225,84,226,84,227,84,228,84,235,84,236,84,239,84,240,84,241,84,244,84,245,84,246,84,247,84,248,84,249,84,251,84,254,84,0,85,2,85,3,85,4,85,5,85,8,85,10,85,11,85,12,85,13,85,14,85,18,85,19,85,21,85,22,85,23,85,24,85,25,85,26,85,28,85,29,85,30,85,31,85,33,85,37,85,38,85,40,85,41,85,43,85,45,85,50,85,52,85,53,85,54,85,56,85,57,85,58,85,59,85,61,85,64,85,66,85,69,85,71,85,72,85,75,85,76,85,77,85,78,85,79,85,81,85,82,85,83,85,84,85,87,85,88,85,89,85,90,85,91,85,93,85,94,85,95,85,96,85,98,85,99,85,104,85,105,85,107,85,111,85,112,85,113,85,114,85,115,85,116,85,121,85,122,85,125,85,127,85,133,85,134,85,140,85,141,85,142,85,144,85,146,85,147,85,149,85,150,85,151,85,154,85,155,85,158,85,160,85,161,85,162,85,163,85,164,85,165,85,166,85,168,85,169,85,170,85,171,85,172,85,173,85,174,85,175,85,176,85,178,85,180,85,182,85,184,85,186,85,188,85,191,85,192,85,193,85,194,85,195,85,198,85,199,85,200,85,202,85,203,85,206,85,207,85,208,85,213,85,215,85,216,85,217,85,218,85,219,85,222,85,224,85,226,85,231,85,233,85,237,85,238,85,240,85,241,85,244,85,246,85,248,85,249,85,250,85,251,85,252,85,255,85,2,86,3,86,4,86,5,86,6,86,7,86,10,86,11,86,13,86,16,86,17,86,18,86,19,86,20,86,21,86,22,86,23,86,25,86,26,86,28,86,29,86,32,86,33,86,34,86,37,86,38,86,40,86,41,86,42,86,43,86,46,86,47,86,48,86,51,86,53,86,55,86,56,86,58,86,60,86,61,86,62,86,64,86,65,86,66,86,67,86,68,86,69,86,70,86,71,86,72,86,73,86,74,86,75,86,79,86,80,86,81,86,82,86,83,86,85,86,86,86,90,86,91,86,93,86,94,86,95,86,96,86,97,86,99,86,101,86,102,86,103,86,109,86,110,86,111,86,112,86,114,86,115,86,116,86,117,86,119,86,120,86,121,86,122,86,125,86,126,86,127,86,128,86,129,86,130,86,131,86,132,86,135,86,136,86,137,86,138,86,139,86,140,86,141,86,144,86,145,86,146,86,148,86,149,86,150,86,151,86,152,86,153,86,154,86,155,86,156,86,157,86,158,86,159,86,160,86,161,86,162,86,164,86,165,86,166,86,167,86,168,86,169,86,170,86,171,86,172,86,173,86,174,86,176,86,177,86,178,86,179,86,180,86,181,86,182,86,184,86,185,86,186,86,187,86,189,86,190,86,191,86,192,86,193,86,194,86,195,86,196,86,197,86,198,86,199,86,200,86,201,86,203,86,204,86,205,86,206,86,207,86,208,86,209,86,210,86,211,86,213,86,214,86,216,86,217,86,220,86,227,86,229,86,230,86,231,86,232,86,233,86,234,86,236,86,238,86,239,86,242,86,243,86,246,86,247,86,248,86,251,86,252,86,0,87,1,87,2,87,5,87,7,87,11,87,12,87,13,87,14,87,15,87,16,87,17,87,18,87,19,87,20,87,21,87,22,87,23,87,24,87,25,87,26,87,27,87,29,87,30,87,32,87,33,87,34,87,36,87,37,87,38,87,39,87,43,87,49,87,50,87,52,87,53,87,54,87,55,87,56,87,60,87,61,87,63,87,65,87,67,87,68,87,69,87,70,87,72,87,73,87,75,87,82,87,83,87,84,87,85,87,86,87,88,87,89,87,98,87,99,87,101,87,103,87,108,87,110,87,112,87,113,87,114,87,116,87,117,87,120,87,121,87,122,87,125,87,126,87,127,87,128,87,129,87,135,87,136,87,137,87,138,87,141,87,142,87,143,87,144,87,145,87,148,87,149,87,150,87,151,87,152,87,153,87,154,87,156,87,157,87,158,87,159,87,165,87,168,87,170,87,172,87,175,87,176,87,177,87,179,87,181,87,182,87,183,87,185,87,186,87,187,87,188,87,189,87,190,87,191,87,192,87,193,87,196,87,197,87,198,87,199,87,200,87,201,87,202,87,204,87,205,87,208,87,209,87,211,87,214,87,215,87,219,87,220,87,222,87,225,87,226,87,227,87,229,87,230,87,231,87,232,87,233,87,234,87,235,87,236,87,238,87,240,87,241,87,242,87,243,87,245,87,246,87,247,87,251,87,252,87,254,87,255,87,1,88,3,88,4,88,5,88,8,88,9,88,10,88,12,88,14,88,15,88,16,88,18,88,19,88,20,88,22,88,23,88,24,88,26,88,27,88,28,88,29,88,31,88,34,88,35,88,37,88,38,88,39,88,40,88,41,88,43,88,44,88,45,88,46,88,47,88,49,88,50,88,51,88,52,88,54,88,55,88,56,88,57,88,58,88,59,88,60,88,61,88,62,88,63,88,64,88,65,88,66,88,67,88,69,88,70,88,71,88,72,88,73,88,74,88,75,88,78,88,79,88,80,88,82,88,83,88,85,88,86,88,87,88,89,88,90,88,91,88,92,88,93,88,95,88,96,88,97,88,98,88,99,88,100,88,102,88,103,88,104,88,105,88,106,88,109,88,110,88,111,88,112,88,113,88,114,88,115,88,116,88,117,88,118,88,119,88,120,88,121,88,122,88,123,88,124,88,125,88,127,88,130,88,132,88,134,88,135,88,136,88,138,88,139,88,140,88,141,88,142,88,143,88,144,88,145,88,148,88,149,88,150,88,151,88,152,88,155,88,156,88,157,88,160,88,161,88,162,88,163,88,164,88,165,88,166,88,167,88,170,88,171,88,172,88,173,88,174,88,175,88,176,88,177,88,178,88,179,88,180,88,181,88,182,88,183,88,184,88,185,88,186,88,187,88,189,88,190,88,191,88,192,88,194,88,195,88,196,88,198,88,199,88,200,88,201,88,202,88,203,88,204,88,205,88,206,88,207,88,208,88,210,88,211,88,212,88,214,88,215,88,216,88,217,88,218,88,219,88,220,88,221,88,222,88,223,88,224,88,225,88,226,88,227,88,229,88,230,88,231,88,232,88,233,88,234,88,237,88,239,88,241,88,242,88,244,88,245,88,247,88,248,88,250,88,251,88,252,88,253,88,254,88,255,88,0,89,1,89,3,89,5,89,6,89,8,89,9,89,10,89,11,89,12,89,14,89,16,89,17,89,18,89,19,89,23,89,24,89,27,89,29,89,30,89,32,89,33,89,34,89,35,89,38,89,40,89,44,89,48,89,50,89,51,89,53,89,54,89,59,89,61,89,62,89,63,89,64,89,67,89,69,89,70,89,74,89,76,89,77,89,80,89,82,89,83,89,89,89,91,89,92,89,93,89,94,89,95,89,97,89,99,89,100,89,102,89,103,89,104,89,105,89,106,89,107,89,108,89,109,89,110,89,111,89,112,89,113,89,114,89,117,89,119,89,122,89,123,89,124,89,126,89,127,89,128,89,133,89,137,89,139,89,140,89,142,89,143,89,144,89,145,89,148,89,149,89,152,89,154,89,155,89,156,89,157,89,159,89,160,89,161,89,162,89,166,89,167,89,172,89,173,89,176,89,177,89,179,89,180,89,181,89,182,89,183,89,184,89,186,89,188,89,189,89,191,89,192,89,193,89,194,89,195,89,196,89,197,89,199,89,200,89,201,89,204,89,205,89,206,89,207,89,213,89,214,89,217,89,219,89,222,89,223,89,224,89,225,89,226,89,228,89,230,89,231,89,233,89,234,89,235,89,237,89,238,89,239,89,240,89,241,89,242,89,243,89,244,89,245,89,246,89,247,89,248,89,250,89,252,89,253,89,254,89,0,90,2,90,10,90,11,90,13,90,14,90,15,90,16,90,18,90,20,90,21,90,22,90,23,90,25,90,26,90,27,90,29,90,30,90,33,90,34,90,36,90,38,90,39,90,40,90,42,90,43,90,44,90,45,90,46,90,47,90,48,90,51,90,53,90,55,90,56,90,57,90,58,90,59,90,61,90,62,90,63,90,65,90,66,90,67,90,68,90,69,90,71,90,72,90,75,90,76,90,77,90,78,90,79,90,80,90,81,90,82,90,83,90,84,90,86,90,87,90,88,90,89,90,91,90,92,90,93,90,94,90,95,90,96,90,97,90,99,90,100,90,101,90,102,90,104,90,105,90,107,90,108,90,109,90,110,90,111,90,112,90,113,90,114,90,115,90,120,90,121,90,123,90,124,90,125,90,126,90,128,90,129,90,130,90,131,90,132,90,133,90,134,90,135,90,136,90,137,90,138,90,139,90,140,90,141,90,142,90,143,90,144,90,145,90,147,90,148,90,149,90,150,90,151,90,152,90,153,90,156,90,157,90,158,90,159,90,160,90,161,90,162,90,163,90,164,90,165,90,166,90,167,90,168,90,169,90,171,90,172,90,173,90,174,90,175,90,176,90,177,90,180,90,182,90,183,90,185,90,186,90,187,90,188,90,189,90,191,90,192,90,195,90,196,90,197,90,198,90,199,90,200,90,202,90,203,90,205,90,206,90,207,90,208,90,209,90,211,90,213,90,215,90,217,90,218,90,219,90,221,90,222,90,223,90,226,90,228,90,229,90,231,90,232,90,234,90,236,90,237,90,238,90,239,90,240,90,242,90,243,90,244,90,245,90,246,90,247,90,248,90,249,90,250,90,251,90,252,90,253,90,254,90,255,90,0,91,1,91,2,91,3,91,4,91,5,91,6,91,7,91,8,91,10,91,11,91,12,91,13,91,14,91,15,91,16,91,17,91,18,91,19,91,20,91,21,91,24,91,25,91,26,91,27,91,28,91,29,91,30,91,31,91,32,91,33,91,34,91,35,91,36,91,37,91,38,91,39,91,40,91,41,91,42,91,43,91,44,91,45,91,46,91,47,91,48,91,49,91,51,91,53,91,54,91,56,91,57,91,58,91,59,91,60,91,61,91,62,91,63,91,65,91,66,91,67,91,68,91,69,91,70,91,71,91,72,91,73,91,74,91,75,91,76,91,77,91,78,91,79,91,82,91,86,91,94,91,96,91,97,91,103,91,104,91,107,91,109,91,110,91,111,91,114,91,116,91,118,91,119,91,120,91,121,91,123,91,124,91,126,91,127,91,130,91,134,91,138,91,141,91,142,91,144,91,145,91,146,91,148,91,150,91,159,91,167,91,168,91,169,91,172,91,173,91,174,91,175,91,177,91,178,91,183,91,186,91,187,91,188,91,192,91,193,91,195,91,200,91,201,91,202,91,203,91,205,91,206,91,207,91,209,91,212,91,213,91,214,91,215,91,216,91,217,91,218,91,219,91,220,91,224,91,226,91,227,91,230,91,231,91,233,91,234,91,235,91,236,91,237,91,239,91,241,91,242,91,243,91,244,91,245,91,246,91,247,91,253,91,254,91,0,92,2,92,3,92,5,92,7,92,8,92,11,92,12,92,13,92,14,92,16,92,18,92,19,92,23,92,25,92,27,92,30,92,31,92,32,92,33,92,35,92,38,92,40,92,41,92,42,92,43,92,45,92,46,92,47,92,48,92,50,92,51,92,53,92,54,92,55,92,67,92,68,92,70,92,71,92,76,92,77,92,82,92,83,92,84,92,86,92,87,92,88,92,90,92,91,92,92,92,93,92,95,92,98,92,100,92,103,92,104,92,105,92,106,92,107,92,108,92,109,92,112,92,114,92,115,92,116,92,117,92,118,92,119,92,120,92,123,92,124,92,125,92,126,92,128,92,131,92,132,92,133,92,134,92,135,92,137,92,138,92,139,92,142,92,143,92,146,92,147,92,149,92,157,92,158,92,159,92,160,92,161,92,164,92,165,92,166,92,167,92,168,92,170,92,174,92,175,92,176,92,178,92,180,92,182,92,185,92,186,92,187,92,188,92,190,92,192,92,194,92,195,92,197,92,198,92,199,92,200,92,201,92,202,92,204,92,205,92,206,92,207,92,208,92,209,92,211,92,212,92,213,92,214,92,215,92,216,92,218,92,219,92,220,92,221,92,222,92,223,92,224,92,226,92,227,92,231,92,233,92,235,92,236,92,238,92,239,92,241,92,242,92,243,92,244,92,245,92,246,92,247,92,248,92,249,92,250,92,252,92,253,92,254,92,255,92,0,93,1,93,4,93,5,93,8,93,9,93,10,93,11,93,12,93,13,93,15,93,16,93,17,93,18,93,19,93,21,93,23,93,24,93,25,93,26,93,28,93,29,93,31,93,32,93,33,93,34,93,35,93,37,93,40,93,42,93,43,93,44,93,47,93,48,93,49,93,50,93,51,93,53,93,54,93,55,93,56,93,57,93,58,93,59,93,60,93,63,93,64,93,65,93,66,93,67,93,68,93,69,93,70,93,72,93,73,93,77,93,78,93,79,93,80,93,81,93,82,93,83,93,84,93,85,93,86,93,87,93,89,93,90,93,92,93,94,93,95,93,96,93,97,93,98,93,99,93,100,93,101,93,102,93,103,93,104,93,106,93,109,93,110,93,112,93,113,93,114,93,115,93,117,93,118,93,119,93,120,93,121,93,122,93,123,93,124,93,125,93,126,93,127,93,128,93,129,93,131,93,132,93,133,93,134,93,135,93,136,93,137,93,138,93,139,93,140,93,141,93,142,93,143,93,144,93,145,93,146,93,147,93,148,93,149,93,150,93,151,93,152,93,154,93,155,93,156,93,158,93,159,93,160,93,161,93,162,93,163,93,164,93,165,93,166,93,167,93,168,93,169,93,170,93,171,93,172,93,173,93,174,93,175,93,176,93,177,93,178,93,179,93,180,93,181,93,182,93,184,93,185,93,186,93,187,93,188,93,189,93,190,93,191,93,192,93,193,93,194,93,195,93,196,93,198,93,199,93,200,93,201,93,202,93,203,93,204,93,206,93,207,93,208,93,209,93,210,93,211,93,212,93,213,93,214,93,215,93,216,93,217,93,218,93,220,93,223,93,224,93,227,93,228,93,234,93,236,93,237,93,240,93,245,93,246,93,248,93,249,93,250,93,251,93,252,93,255,93,0,94,4,94,7,94,9,94,10,94,11,94,13,94,14,94,18,94,19,94,23,94,30,94,31,94,32,94,33,94,34,94,35,94,36,94,37,94,40,94,41,94,42,94,43,94,44,94,47,94,48,94,50,94,51,94,52,94,53,94,54,94,57,94,58,94,62,94,63,94,64,94,65,94,67,94,70,94,71,94,72,94,73,94,74,94,75,94,77,94,78,94,79,94,80,94,81,94,82,94,83,94,86,94,87,94,88,94,89,94,90,94,92,94,93,94,95,94,96,94,99,94,100,94,101,94,102,94,103,94,104,94,105,94,106,94,107,94,108,94,109,94,110,94,111,94,112,94,113,94,117,94,119,94,121,94,126,94,129,94,130,94,131,94,133,94,136,94,137,94,140,94,141,94,142,94,146,94,152,94,155,94,157,94,161,94,162,94,163,94,164,94,168,94,169,94,170,94,171,94,172,94,174,94,175,94,176,94,177,94,178,94,180,94,186,94,187,94,188,94,189,94,191,94,192,94,193,94,194,94,195,94,196,94,197,94,198,94,199,94,200,94,203,94,204,94,205,94,206,94,207,94,208,94,212,94,213,94,215,94,216,94,217,94,218,94,220,94,221,94,222,94,223,94,224,94,225,94,226,94,227,94,228,94,229,94,230,94,231,94,233,94,235,94,236,94,237,94,238,94,239,94,240,94,241,94,242,94,243,94,245,94,248,94,249,94,251,94,252,94,253,94,5,95,6,95,7,95,9,95,12,95,13,95,14,95,16,95,18,95,20,95,22,95,25,95,26,95,28,95,29,95,30,95,33,95,34,95,35,95,36,95,40,95,43,95,44,95,46,95,48,95,50,95,51,95,52,95,53,95,54,95,55,95,56,95,59,95,61,95,62,95,63,95,65,95,66,95,67,95,68,95,69,95,70,95,71,95,72,95,73,95,74,95,75,95,76,95,77,95,78,95,79,95,81,95,84,95,89,95,90,95,91,95,92,95,94,95,95,95,96,95,99,95,101,95,103,95,104,95,107,95,110,95,111,95,114,95,116,95,117,95,118,95,120,95,122,95,125,95,126,95,127,95,131,95,134,95,141,95,142,95,143,95,145,95,147,95,148,95,150,95,154,95,155,95,157,95,158,95,159,95,160,95,162,95,163,95,164,95,165,95,166,95,167,95,169,95,171,95,172,95,175,95,176,95,177,95,178,95,179,95,180,95,182,95,184,95,185,95,186,95,187,95,190,95,191,95,192,95,193,95,194,95,199,95,200,95,202,95,203,95,206,95,211,95,212,95,213,95,218,95,219,95,220,95,222,95,223,95,226,95,227,95,229,95,230,95,232,95,233,95,236,95,239,95,240,95,242,95,243,95,244,95,246,95,247,95,249,95,250,95,252,95,7,96,8,96,9,96,11,96,12,96,16,96,17,96,19,96,23,96,24,96,26,96,30,96,31,96,34,96,35,96,36,96,44,96,45,96,46,96,48,96,49,96,50,96,51,96,52,96,54,96,55,96,56,96,57,96,58,96,61,96,62,96,64,96,68,96,69,96,70,96,71,96,72,96,73,96,74,96,76,96,78,96,79,96,81,96,83,96,84,96,86,96,87,96,88,96,91,96,92,96,94,96,95,96,96,96,97,96,101,96,102,96,110,96,113,96,114,96,116,96,117,96,119,96,126,96,128,96,129,96,130,96,133,96,134,96,135,96,136,96,138,96,139,96,142,96,143,96,144,96,145,96,147,96,149,96,151,96,152,96,153,96,156,96,158,96,161,96,162,96,164,96,165,96,167,96,169,96,170,96,174,96,176,96,179,96,181,96,182,96,183,96,185,96,186,96,189,96,190,96,191,96,192,96,193,96,194,96,195,96,196,96,199,96,200,96,201,96,204,96,205,96,206,96,207,96,208,96,210,96,211,96,212,96,214,96,215,96,217,96,219,96,222,96,225,96,226,96,227,96,228,96,229,96,234,96,241,96,242,96,245,96,247,96,248,96,251,96,252,96,253,96,254,96,255,96,2,97,3,97,4,97,5,97,7,97,10,97,11,97,12,97,16,97,17,97,18,97,19,97,20,97,22,97,23,97,24,97,25,97,27,97,28,97,29,97,30,97,33,97,34,97,37,97,40,97,41,97,42,97,44,97,45,97,46,97,47,97,48,97,49,97,50,97,51,97,52,97,53,97,54,97,55,97,56,97,57,97,58,97,59,97,60,97,61,97,62,97,64,97,65,97,66,97,67,97,68,97,69,97,70,97,71,97,73,97,75,97,77,97,79,97,80,97,82,97,83,97,84,97,86,97,87,97,88,97,89,97,90,97,91,97,92,97,94,97,95,97,96,97,97,97,99,97,100,97,101,97,102,97,105,97,106,97,107,97,108,97,109,97,110,97,111,97,113,97,114,97,115,97,116,97,118,97,120,97,121,97,122,97,123,97,124,97,125,97,126,97,127,97,128,97,129,97,130,97,131,97,132,97,133,97,134,97,135,97,136,97,137,97,138,97,140,97,141,97,143,97,144,97,145,97,146,97,147,97,149,97,150,97,151,97,152,97,153,97,154,97,155,97,156,97,158,97,159,97,160,97,161,97,162,97,163,97,164,97,165,97,166,97,170,97,171,97,173,97,174,97,175,97,176,97,177,97,178,97,179,97,180,97,181,97,182,97,184,97,185,97,186,97,187,97,188,97,189,97,191,97,192,97,193,97,195,97,196,97,197,97,198,97,199,97,201,97,204,97,205,97,206,97,207,97,208,97,211,97,213,97,214,97,215,97,216,97,217,97,218,97,219,97,220,97,221,97,222,97,223,97,224,97,225,97,226,97,227,97,228,97,229,97,231,97,232,97,233,97,234,97,235,97,236,97,237,97,238,97,239,97,240,97,241,97,242,97,243,97,244,97,246,97,247,97,248,97,249,97,250,97,251,97,252,97,253,97,254,97,0,98,1,98,2,98,3,98,4,98,5,98,7,98,9,98,19,98,20,98,25,98,28,98,29,98,30,98,32,98,35,98,38,98,39,98,40,98,41,98,43,98,45,98,47,98,48,98,49,98,50,98,53,98,54,98,56,98,57,98,58,98,59,98,60,98,66,98,68,98,69,98,70,98,74,98,79,98,80,98,85,98,86,98,87,98,89,98,90,98,92,98,93,98,94,98,95,98,96,98,97,98,98,98,100,98,101,98,104,98,113,98,114,98,116,98,117,98,119,98,120,98,122,98,123,98,125,98,129,98,130,98,131,98,133,98,134,98,135,98,136,98,139,98,140,98,141,98,142,98,143,98,144,98,148,98,153,98,156,98,157,98,158,98,163,98,166,98,167,98,169,98,170,98,173,98,174,98,175,98,176,98,178,98,179,98,180,98,182,98,183,98,184,98,186,98,190,98,192,98,193,98,195,98,203,98,207,98,209,98,213,98,221,98,222,98,224,98,225,98,228,98,234,98,235,98,240,98,242,98,245,98,248,98,249,98,250,98,251,98,0,99,3,99,4,99,5,99,6,99,10,99,11,99,12,99,13,99,15,99,16,99,18,99,19,99,20,99,21,99,23,99,24,99,25,99,28,99,38,99,39,99,41,99,44,99,45,99,46,99,48,99,49,99,51,99,52,99,53,99,54,99,55,99,56,99,59,99,60,99,62,99,63,99,64,99,65,99,68,99,71,99,72,99,74,99,81,99,82,99,83,99,84,99,86,99,87,99,88,99,89,99,90,99,91,99,92,99,93,99,96,99,100,99,101,99,102,99,104,99,106,99,107,99,108,99,111,99,112,99,114,99,115,99,116,99,117,99,120,99,121,99,124,99,125,99,126,99,127,99,129,99,131,99,132,99,133,99,134,99,139,99,141,99,145,99,147,99,148,99,149,99,151,99,153,99,154,99,155,99,156,99,157,99,158,99,159,99,161,99,164,99,166,99,171,99,175,99,177,99,178,99,181,99,182,99,185,99,187,99,189,99,191,99,192,99,193,99,194,99,195,99,197,99,199,99,200,99,202,99,203,99,204,99,209,99,211,99,212,99,213,99,215,99,216,99,217,99,218,99,219,99,220,99,221,99,223,99,226,99,228,99,229,99,230,99,231,99,232,99,235,99,236,99,238,99,239,99,240,99,241,99,243,99,245,99,247,99,249,99,250,99,251,99,252,99,254,99,3,100,4,100,6,100,7,100,8,100,9,100,10,100,13,100,14,100,17,100,18,100,21,100,22,100,23,100,24,100,25,100,26,100,29,100,31,100,34,100,35,100,36,100,37,100,39,100,40,100,41,100,43,100,46,100,47,100,48,100,49,100,50,100,51,100,53,100,54,100,55,100,56,100,57,100,59,100,60,100,62,100,64,100,66,100,67,100,73,100,75,100,76,100,77,100,78,100,79,100,80,100,81,100,83,100,85,100,86,100,87,100,89,100,90,100,91,100,92,100,93,100,95,100,96,100,97,100,98,100,99,100,100,100,101,100,102,100,104,100,106,100,107,100,108,100,110,100,111,100,112,100,113,100,114,100,115,100,116,100,117,100,118,100,119,100,123,100,124,100,125,100,126,100,127,100,128,100,129,100,131,100,134,100,136,100,137,100,138,100,139,100,140,100,141,100,142,100,143,100,144,100,147,100,148,100,151,100,152,100,154,100,155,100,156,100,157,100,159,100,160,100,161,100,162,100,163,100,165,100,166,100,167,100,168,100,170,100,171,100,175,100,177,100,178,100,179,100,180,100,182,100,185,100,187,100,189,100,190,100,191,100,193,100,195,100,196,100,198,100,199,100,200,100,201,100,202,100,203,100,204,100,207,100,209,100,211,100,212,100,213,100,214,100,217,100,218,100,219,100,220,100,221,100,223,100,224,100,225,100,227,100,229,100,231,100,232,100,233,100,234,100,235,100,236,100,237,100,238,100,239,100,240,100,241,100,242,100,243,100,244,100,245,100,246,100,247,100,248,100,249,100,250,100,251,100,252,100,253,100,254,100,255,100,1,101,2,101,3,101,4,101,5,101,6,101,7,101,8,101,10,101,11,101,12,101,13,101,14,101,15,101,16,101], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+53876);
/* memory initializer */ allocate([17,101,19,101,20,101,21,101,22,101,23,101,25,101,26,101,27,101,28,101,29,101,30,101,31,101,32,101,33,101,34,101,35,101,36,101,38,101,39,101,40,101,41,101,42,101,44,101,45,101,48,101,49,101,50,101,51,101,55,101,58,101,60,101,61,101,64,101,65,101,66,101,67,101,68,101,70,101,71,101,74,101,75,101,77,101,78,101,80,101,82,101,83,101,84,101,87,101,88,101,90,101,92,101,95,101,96,101,97,101,100,101,101,101,103,101,104,101,105,101,106,101,109,101,110,101,111,101,113,101,115,101,117,101,118,101,120,101,121,101,122,101,123,101,124,101,125,101,126,101,127,101,128,101,129,101,130,101,131,101,132,101,133,101,134,101,136,101,137,101,138,101,141,101,142,101,143,101,146,101,148,101,149,101,150,101,152,101,154,101,157,101,158,101,160,101,162,101,163,101,166,101,168,101,170,101,172,101,174,101,177,101,178,101,179,101,180,101,181,101,182,101,183,101,184,101,186,101,187,101,190,101,191,101,192,101,194,101,199,101,200,101,201,101,202,101,205,101,208,101,209,101,211,101,212,101,213,101,216,101,217,101,218,101,219,101,220,101,221,101,222,101,223,101,225,101,227,101,228,101,234,101,235,101,242,101,243,101,244,101,245,101,248,101,249,101,251,101,252,101,253,101,254,101,255,101,1,102,4,102,5,102,7,102,8,102,9,102,11,102,13,102,16,102,17,102,18,102,22,102,23,102,24,102,26,102,27,102,28,102,30,102,33,102,34,102,35,102,36,102,38,102,41,102,42,102,43,102,44,102,46,102,48,102,50,102,51,102,55,102,56,102,57,102,58,102,59,102,61,102,63,102,64,102,66,102,68,102,69,102,70,102,71,102,72,102,73,102,74,102,77,102,78,102,80,102,81,102,88,102,89,102,91,102,92,102,93,102,94,102,96,102,98,102,99,102,101,102,103,102,105,102,106,102,107,102,108,102,109,102,113,102,114,102,115,102,117,102,120,102,121,102,123,102,124,102,125,102,127,102,128,102,129,102,131,102,133,102,134,102,136,102,137,102,138,102,139,102,141,102,142,102,143,102,144,102,146,102,147,102,148,102,149,102,152,102,153,102,154,102,155,102,156,102,158,102,159,102,160,102,161,102,162,102,163,102,164,102,165,102,166,102,169,102,170,102,171,102,172,102,173,102,175,102,176,102,177,102,178,102,179,102,181,102,182,102,183,102,184,102,186,102,187,102,188,102,189,102,191,102,192,102,193,102,194,102,195,102,196,102,197,102,198,102,199,102,200,102,201,102,202,102,203,102,204,102,205,102,206,102,207,102,208,102,209,102,210,102,211,102,212,102,213,102,214,102,215,102,216,102,218,102,222,102,223,102,224,102,225,102,226,102,227,102,228,102,229,102,231,102,232,102,234,102,235,102,236,102,237,102,238,102,239,102,241,102,245,102,246,102,248,102,250,102,251,102,253,102,1,103,2,103,3,103,4,103,5,103,6,103,7,103,12,103,14,103,15,103,17,103,18,103,19,103,22,103,24,103,25,103,26,103,28,103,30,103,32,103,33,103,34,103,35,103,36,103,37,103,39,103,41,103,46,103,48,103,50,103,51,103,54,103,55,103,56,103,57,103,59,103,60,103,62,103,63,103,65,103,68,103,69,103,71,103,74,103,75,103,77,103,82,103,84,103,85,103,87,103,88,103,89,103,90,103,91,103,93,103,98,103,99,103,100,103,102,103,103,103,107,103,108,103,110,103,113,103,116,103,118,103,120,103,121,103,122,103,123,103,125,103,128,103,130,103,131,103,133,103,134,103,136,103,138,103,140,103,141,103,142,103,143,103,145,103,146,103,147,103,148,103,150,103,153,103,155,103,159,103,160,103,161,103,164,103,166,103,169,103,172,103,174,103,177,103,178,103,180,103,185,103,186,103,187,103,188,103,189,103,190,103,191,103,192,103,194,103,197,103,198,103,199,103,200,103,201,103,202,103,203,103,204,103,205,103,206,103,213,103,214,103,215,103,219,103,223,103,225,103,227,103,228,103,230,103,231,103,232,103,234,103,235,103,237,103,238,103,242,103,245,103,246,103,247,103,248,103,249,103,250,103,251,103,252,103,254,103,1,104,2,104,3,104,4,104,6,104,13,104,16,104,18,104,20,104,21,104,24,104,25,104,26,104,27,104,28,104,30,104,31,104,32,104,34,104,35,104,36,104,37,104,38,104,39,104,40,104,43,104,44,104,45,104,46,104,47,104,48,104,49,104,52,104,53,104,54,104,58,104,59,104,63,104,71,104,75,104,77,104,79,104,82,104,86,104,87,104,88,104,89,104,90,104,91,104,92,104,93,104,94,104,95,104,106,104,108,104,109,104,110,104,111,104,112,104,113,104,114,104,115,104,117,104,120,104,121,104,122,104,123,104,124,104,125,104,126,104,127,104,128,104,130,104,132,104,135,104,136,104,137,104,138,104,139,104,140,104,141,104,142,104,144,104,145,104,146,104,148,104,149,104,150,104,152,104,153,104,154,104,155,104,156,104,157,104,158,104,159,104,160,104,161,104,163,104,164,104,165,104,169,104,170,104,171,104,172,104,174,104,177,104,178,104,180,104,182,104,183,104,184,104,185,104,186,104,187,104,188,104,189,104,190,104,191,104,193,104,195,104,196,104,197,104,198,104,199,104,200,104,202,104,204,104,206,104,207,104,208,104,209,104,211,104,212,104,214,104,215,104,217,104,219,104,220,104,221,104,222,104,223,104,225,104,226,104,228,104,229,104,230,104,231,104,232,104,233,104,234,104,235,104,236,104,237,104,239,104,242,104,243,104,244,104,246,104,247,104,248,104,251,104,253,104,254,104,255,104,0,105,2,105,3,105,4,105,6,105,7,105,8,105,9,105,10,105,12,105,15,105,17,105,19,105,20,105,21,105,22,105,23,105,24,105,25,105,26,105,27,105,28,105,29,105,30,105,33,105,34,105,35,105,37,105,38,105,39,105,40,105,41,105,42,105,43,105,44,105,46,105,47,105,49,105,50,105,51,105,53,105,54,105,55,105,56,105,58,105,59,105,60,105,62,105,64,105,65,105,67,105,68,105,69,105,70,105,71,105,72,105,73,105,74,105,75,105,76,105,77,105,78,105,79,105,80,105,81,105,82,105,83,105,85,105,86,105,88,105,89,105,91,105,92,105,95,105,97,105,98,105,100,105,101,105,103,105,104,105,105,105,106,105,108,105,109,105,111,105,112,105,114,105,115,105,116,105,117,105,118,105,122,105,123,105,125,105,126,105,127,105,129,105,131,105,133,105,138,105,139,105,140,105,142,105,143,105,144,105,145,105,146,105,147,105,150,105,151,105,153,105,154,105,157,105,158,105,159,105,160,105,161,105,162,105,163,105,164,105,165,105,166,105,169,105,170,105,172,105,174,105,175,105,176,105,178,105,179,105,181,105,182,105,184,105,185,105,186,105,188,105,189,105,190,105,191,105,192,105,194,105,195,105,196,105,197,105,198,105,199,105,200,105,201,105,203,105,205,105,207,105,209,105,210,105,211,105,213,105,214,105,215,105,216,105,217,105,218,105,220,105,221,105,222,105,225,105,226,105,227,105,228,105,229,105,230,105,231,105,232,105,233,105,234,105,235,105,236,105,238,105,239,105,240,105,241,105,243,105,244,105,245,105,246,105,247,105,248,105,249,105,250,105,251,105,252,105,254,105,0,106,1,106,2,106,3,106,4,106,5,106,6,106,7,106,8,106,9,106,11,106,12,106,13,106,14,106,15,106,16,106,17,106,18,106,19,106,20,106,21,106,22,106,25,106,26,106,27,106,28,106,29,106,30,106,32,106,34,106,35,106,36,106,37,106,38,106,39,106,41,106,43,106,44,106,45,106,46,106,48,106,50,106,51,106,52,106,54,106,55,106,56,106,57,106,58,106,59,106,60,106,63,106,64,106,65,106,66,106,67,106,69,106,70,106,72,106,73,106,74,106,75,106,76,106,77,106,78,106,79,106,81,106,82,106,83,106,84,106,85,106,86,106,87,106,90,106,92,106,93,106,94,106,95,106,96,106,98,106,99,106,100,106,102,106,103,106,104,106,105,106,106,106,107,106,108,106,109,106,110,106,111,106,112,106,114,106,115,106,116,106,117,106,118,106,119,106,120,106,122,106,123,106,125,106,126,106,127,106,129,106,130,106,131,106,133,106,134,106,135,106,136,106,137,106,138,106,139,106,140,106,141,106,143,106,146,106,147,106,148,106,149,106,150,106,152,106,153,106,154,106,155,106,156,106,157,106,158,106,159,106,161,106,162,106,163,106,164,106,165,106,166,106,167,106,168,106,170,106,173,106,174,106,175,106,176,106,177,106,178,106,179,106,180,106,181,106,182,106,183,106,184,106,185,106,186,106,187,106,188,106,189,106,190,106,191,106,192,106,193,106,194,106,195,106,196,106,197,106,198,106,199,106,200,106,201,106,202,106,203,106,204,106,205,106,206,106,207,106,208,106,209,106,210,106,211,106,212,106,213,106,214,106,215,106,216,106,217,106,218,106,219,106,220,106,221,106,222,106,223,106,224,106,225,106,226,106,227,106,228,106,229,106,230,106,231,106,232,106,233,106,234,106,235,106,236,106,237,106,238,106,239,106,240,106,241,106,242,106,243,106,244,106,245,106,246,106,247,106,248,106,249,106,250,106,251,106,252,106,253,106,254,106,255,106,0,107,1,107,2,107,3,107,4,107,5,107,6,107,7,107,8,107,9,107,10,107,11,107,12,107,13,107,14,107,15,107,16,107,17,107,18,107,19,107,20,107,21,107,22,107,23,107,24,107,25,107,26,107,27,107,28,107,29,107,30,107,31,107,37,107,38,107,40,107,41,107,42,107,43,107,44,107,45,107,46,107,47,107,48,107,49,107,51,107,52,107,53,107,54,107,56,107,59,107,60,107,61,107,63,107,64,107,65,107,66,107,68,107,69,107,72,107,74,107,75,107,77,107,78,107,79,107,80,107,81,107,82,107,83,107,84,107,85,107,86,107,87,107,88,107,90,107,91,107,92,107,93,107,94,107,95,107,96,107,97,107,104,107,105,107,107,107,108,107,109,107,110,107,111,107,112,107,113,107,114,107,115,107,116,107,117,107,118,107,119,107,120,107,122,107,125,107,126,107,127,107,128,107,133,107,136,107,140,107,142,107,143,107,144,107,145,107,148,107,149,107,151,107,152,107,153,107,156,107,157,107,158,107,159,107,160,107,162,107,163,107,164,107,165,107,166,107,167,107,168,107,169,107,171,107,172,107,173,107,174,107,175,107,176,107,177,107,178,107,182,107,184,107,185,107,186,107,187,107,188,107,189,107,190,107,192,107,195,107,196,107,198,107,199,107,200,107,201,107,202,107,204,107,206,107,208,107,209,107,216,107,218,107,220,107,221,107,222,107,223,107,224,107,226,107,227,107,228,107,229,107,230,107,231,107,232,107,233,107,236,107,237,107,238,107,240,107,241,107,242,107,244,107,246,107,247,107,248,107,250,107,251,107,252,107,254,107,255,107,0,108,1,108,2,108,3,108,4,108,8,108,9,108,10,108,11,108,12,108,14,108,18,108,23,108,28,108,29,108,30,108,32,108,35,108,37,108,43,108,44,108,45,108,49,108,51,108,54,108,55,108,57,108,58,108,59,108,60,108,62,108,63,108,67,108,68,108,69,108,72,108,75,108,76,108,77,108,78,108,79,108,81,108,82,108,83,108,86,108,88,108,89,108,90,108,98,108,99,108,101,108,102,108,103,108,107,108,108,108,109,108,110,108,111,108,113,108,115,108,117,108,119,108,120,108,122,108,123,108,124,108,127,108,128,108,132,108,135,108,138,108,139,108,141,108,142,108,145,108,146,108,149,108,150,108,151,108,152,108,154,108,156,108,157,108,158,108,160,108,162,108,168,108,172,108,175,108,176,108,180,108,181,108,182,108,183,108,186,108,192,108,193,108,194,108,195,108,198,108,199,108,200,108,203,108,205,108,206,108,207,108,209,108,210,108,216,108,217,108,218,108,220,108,221,108,223,108,228,108,230,108,231,108,233,108,236,108,237,108,242,108,244,108,249,108,255,108,0,109,2,109,3,109,5,109,6,109,8,109,9,109,10,109,13,109,15,109,16,109,17,109,19,109,20,109,21,109,22,109,24,109,28,109,29,109,31,109,32,109,33,109,34,109,35,109,36,109,38,109,40,109,41,109,44,109,45,109,47,109,48,109,52,109,54,109,55,109,56,109,58,109,63,109,64,109,66,109,68,109,73,109,76,109,80,109,85,109,86,109,87,109,88,109,91,109,93,109,95,109,97,109,98,109,100,109,101,109,103,109,104,109,107,109,108,109,109,109,112,109,113,109,114,109,115,109,117,109,118,109,121,109,122,109,123,109,125,109,126,109,127,109,128,109,129,109,131,109,132,109,134,109,135,109,138,109,139,109,141,109,143,109,144,109,146,109,150,109,151,109,152,109,153,109,154,109,156,109,162,109,165,109,172,109,173,109,176,109,177,109,179,109,180,109,182,109,183,109,185,109,186,109,187,109,188,109,189,109,190,109,193,109,194,109,195,109,200,109,201,109,202,109,205,109,206,109,207,109,208,109,210,109,211,109,212,109,213,109,215,109,218,109,219,109,220,109,223,109,226,109,227,109,229,109,231,109,232,109,233,109,234,109,237,109,239,109,240,109,242,109,244,109,245,109,246,109,248,109,250,109,253,109,254,109,255,109,0,110,1,110,2,110,3,110,4,110,6,110,7,110,8,110,9,110,11,110,15,110,18,110,19,110,21,110,24,110,25,110,27,110,28,110,30,110,31,110,34,110,38,110,39,110,40,110,42,110,44,110,46,110,48,110,49,110,51,110,53,110,54,110,55,110,57,110,59,110,60,110,61,110,62,110,63,110,64,110,65,110,66,110,69,110,70,110,71,110,72,110,73,110,74,110,75,110,76,110,79,110,80,110,81,110,82,110,85,110,87,110,89,110,90,110,92,110,93,110,94,110,96,110,97,110,98,110,99,110,100,110,101,110,102,110,103,110,104,110,105,110,106,110,108,110,109,110,111,110,112,110,113,110,114,110,115,110,116,110,117,110,118,110,119,110,120,110,121,110,122,110,123,110,124,110,125,110,128,110,129,110,130,110,132,110,135,110,136,110,138,110,139,110,140,110,141,110,142,110,145,110,146,110,147,110,148,110,149,110,150,110,151,110,153,110,154,110,155,110,157,110,158,110,160,110,161,110,163,110,164,110,166,110,168,110,169,110,171,110,172,110,173,110,174,110,176,110,179,110,181,110,184,110,185,110,188,110,190,110,191,110,192,110,195,110,196,110,197,110,198,110,200,110,201,110,202,110,204,110,205,110,206,110,208,110,210,110,214,110,216,110,217,110,219,110,220,110,221,110,227,110,231,110,234,110,235,110,236,110,237,110,238,110,239,110,240,110,241,110,242,110,243,110,245,110,246,110,247,110,248,110,250,110,251,110,252,110,253,110,254,110,255,110,0,111,1,111,3,111,4,111,5,111,7,111,8,111,10,111,11,111,12,111,13,111,14,111,16,111,17,111,18,111,22,111,23,111,24,111,25,111,26,111,27,111,28,111,29,111,30,111,31,111,33,111,34,111,35,111,37,111,38,111,39,111,40,111,44,111,46,111,48,111,50,111,52,111,53,111,55,111,56,111,57,111,58,111,59,111,60,111,61,111,63,111,64,111,65,111,66,111,67,111,68,111,69,111,72,111,73,111,74,111,76,111,78,111,79,111,80,111,81,111,82,111,83,111,84,111,85,111,86,111,87,111,89,111,90,111,91,111,93,111,95,111,96,111,97,111,99,111,100,111,101,111,103,111,104,111,105,111,106,111,107,111,108,111,111,111,112,111,113,111,115,111,117,111,118,111,119,111,121,111,123,111,125,111,126,111,127,111,128,111,129,111,130,111,131,111,133,111,134,111,135,111,138,111,139,111,143,111,144,111,145,111,146,111,147,111,148,111,149,111,150,111,151,111,152,111,153,111,154,111,155,111,157,111,158,111,159,111,160,111,162,111,163,111,164,111,165,111,166,111,168,111,169,111,170,111,171,111,172,111,173,111,174,111,175,111,176,111,177,111,178,111,180,111,181,111,183,111,184,111,186,111,187,111,188,111,189,111,190,111,191,111,193,111,195,111,196,111,197,111,198,111,199,111,200,111,202,111,203,111,204,111,205,111,206,111,207,111,208,111,211,111,212,111,213,111,214,111,215,111,216,111,217,111,218,111,219,111,220,111,221,111,223,111,226,111,227,111,228,111,229,111,230,111,231,111,232,111,233,111,234,111,235,111,236,111,237,111,240,111,241,111,242,111,243,111,244,111,245,111,246,111,247,111,248,111,249,111,250,111,251,111,252,111,253,111,254,111,255,111,0,112,1,112,2,112,3,112,4,112,5,112,6,112,7,112,8,112,9,112,10,112,11,112,12,112,13,112,14,112,15,112,16,112,18,112,19,112,20,112,21,112,22,112,23,112,24,112,25,112,28,112,29,112,30,112,31,112,32,112,33,112,34,112,36,112,37,112,38,112,39,112,40,112,41,112,42,112,43,112,44,112,45,112,46,112,47,112,48,112,49,112,50,112,51,112,52,112,54,112,55,112,56,112,58,112,59,112,60,112,61,112,62,112,63,112,64,112,65,112,66,112,67,112,68,112,69,112,70,112,71,112,72,112,73,112,74,112,75,112,77,112,78,112,80,112,81,112,82,112,83,112,84,112,85,112,86,112,87,112,88,112,89,112,90,112,91,112,92,112,93,112,95,112,96,112,97,112,98,112,99,112,100,112,101,112,102,112,103,112,104,112,105,112,106,112,110,112,113,112,114,112,115,112,116,112,119,112,121,112,122,112,123,112,125,112,129,112,130,112,131,112,132,112,134,112,135,112,136,112,139,112,140,112,141,112,143,112,144,112,145,112,147,112,151,112,152,112,154,112,155,112,158,112,159,112,160,112,161,112,162,112,163,112,164,112,165,112,166,112,167,112,168,112,169,112,170,112,176,112,178,112,180,112,181,112,182,112,186,112,190,112,191,112,196,112,197,112,198,112,199,112,201,112,203,112,204,112,205,112,206,112,207,112,208,112,209,112,210,112,211,112,212,112,213,112,214,112,215,112,218,112,220,112,221,112,222,112,224,112,225,112,226,112,227,112,229,112,234,112,238,112,240,112,241,112,242,112,243,112,244,112,245,112,246,112,248,112,250,112,251,112,252,112,254,112,255,112,0,113,1,113,2,113,3,113,4,113,5,113,6,113,7,113,8,113,11,113,12,113,13,113,14,113,15,113,17,113,18,113,20,113,23,113,27,113,28,113,29,113,30,113,31,113,32,113,33,113,34,113,35,113,36,113,37,113,39,113,40,113,41,113,42,113,43,113,44,113,45,113,46,113,50,113,51,113,52,113,53,113,55,113,56,113,57,113,58,113,59,113,60,113,61,113,62,113,63,113,64,113,65,113,66,113,67,113,68,113,70,113,71,113,72,113,73,113,75,113,77,113,79,113,80,113,81,113,82,113,83,113,84,113,85,113,86,113,87,113,88,113,89,113,90,113,91,113,93,113,95,113,96,113,97,113,98,113,99,113,101,113,105,113,106,113,107,113,108,113,109,113,111,113,112,113,113,113,116,113,117,113,118,113,119,113,121,113,123,113,124,113,126,113,127,113,128,113,129,113,130,113,131,113,133,113,134,113,135,113,136,113,137,113,139,113,140,113,141,113,142,113,144,113,145,113,146,113,147,113,149,113,150,113,151,113,154,113,155,113,156,113,157,113,158,113,161,113,162,113,163,113,164,113,165,113,166,113,167,113,169,113,170,113,171,113,173,113,174,113,175,113,176,113,177,113,178,113,180,113,182,113,183,113,184,113,186,113,187,113,188,113,189,113,190,113,191,113,192,113,193,113,194,113,196,113,197,113,198,113,199,113,200,113,201,113,202,113,203,113,204,113,205,113,207,113,208,113,209,113,210,113,211,113,214,113,215,113,216,113,217,113,218,113,219,113,220,113,221,113,222,113,223,113,225,113,226,113,227,113,228,113,230,113,232,113,233,113,234,113,235,113,236,113,237,113,239,113,240,113,241,113,242,113,243,113,244,113,245,113,246,113,247,113,248,113,250,113,251,113,252,113,253,113,254,113,255,113,0,114,1,114,2,114,3,114,4,114,5,114,7,114,8,114,9,114,10,114,11,114,12,114,13,114,14,114,15,114,16,114,17,114,18,114,19,114,20,114,21,114,22,114,23,114,24,114,25,114,26,114,27,114,28,114,30,114,31,114,32,114,33,114,34,114,35,114,36,114,37,114,38,114,39,114,41,114,43,114,45,114,46,114,47,114,50,114,51,114,52,114,58,114,60,114,62,114,64,114,65,114,66,114,67,114,68,114,69,114,70,114,73,114,74,114,75,114,78,114,79,114,80,114,81,114,83,114,84,114,85,114,87,114,88,114,90,114,92,114,94,114,96,114,99,114,100,114,101,114,104,114,106,114,107,114,108,114,109,114,112,114,113,114,115,114,116,114,118,114,119,114,120,114,123,114,124,114,125,114,130,114,131,114,133,114,134,114,135,114,136,114,137,114,140,114,142,114,144,114,145,114,147,114,148,114,149,114,150,114,151,114,152,114,153,114,154,114,155,114,156,114,157,114,158,114,160,114,161,114,162,114,163,114,164,114,165,114,166,114,167,114,168,114,169,114,170,114,171,114,174,114,177,114,178,114,179,114,181,114,186,114,187,114,188,114,189,114,190,114,191,114,192,114,197,114,198,114,199,114,201,114,202,114,203,114,204,114,207,114,209,114,211,114,212,114,213,114,214,114,216,114,218,114,219,114,198,228,199,228,200,228,201,228,202,228,203,228,204,228,205,228,206,228,207,228,208,228,209,228,210,228,211,228,212,228,213,228,214,228,215,228,216,228,217,228,218,228,219,228,220,228,221,228,222,228,223,228,224,228,225,228,226,228,227,228,228,228,229,228,230,228,231,228,232,228,233,228,234,228,235,228,236,228,237,228,238,228,239,228,240,228,241,228,242,228,243,228,244,228,245,228,246,228,247,228,248,228,249,228,250,228,251,228,252,228,253,228,254,228,255,228,0,229,1,229,2,229,3,229,4,229,5,229,6,229,7,229,8,229,9,229,10,229,11,229,12,229,13,229,14,229,15,229,16,229,17,229,18,229,19,229,20,229,21,229,22,229,23,229,24,229,25,229,26,229,27,229,28,229,29,229,30,229,31,229,32,229,33,229,34,229,35,229,36,229,37,229,0,48,1,48,2,48,183,0,201,2,199,2,168,0,3,48,5,48,20,32,94,255,22,32,38,32,24,32,25,32,28,32,29,32,20,48,21,48,8,48,9,48,10,48,11,48,12,48,13,48,14,48,15,48,22,48,23,48,16,48,17,48,177,0,215,0,247,0,54,34,39,34,40,34,17,34,15,34,42,34,41,34,8,34,55,34,26,34,165,34,37,34,32,34,18,35,153,34,43,34,46,34,97,34,76,34,72,34,61,34,29,34,96,34,110,34,111,34,100,34,101,34,30,34,53,34,52,34,66,38,64,38,176,0,50,32,51,32,3,33,4,255,164,0,224,255,225,255,48,32,167,0,22,33,6,38,5,38,203,37,207,37,206,37,199,37,198,37,161,37,160,37,179,37,178,37,59,32,146,33,144,33,145,33,147,33,19,48,38,229,39,229,40,229,41,229,42,229,43,229,44,229,45,229,46,229,47,229,48,229,49,229,50,229,51,229,52,229,53,229,54,229,55,229,56,229,57,229,58,229,59,229,60,229,61,229,62,229,63,229,64,229,65,229,66,229,67,229,68,229,69,229,70,229,71,229,72,229,73,229,74,229,75,229,76,229,77,229,78,229,79,229,80,229,81,229,82,229,83,229,84,229,85,229,86,229,87,229,88,229,89,229,90,229,91,229,92,229,93,229,94,229,95,229,96,229,97,229,98,229,99,229,100,229,101,229,102,229,103,229,104,229,105,229,106,229,107,229,108,229,109,229,110,229,111,229,112,229,113,229,114,229,115,229,116,229,117,229,118,229,119,229,120,229,121,229,122,229,123,229,124,229,125,229,126,229,127,229,128,229,129,229,130,229,131,229,132,229,133,229,112,33,113,33,114,33,115,33,116,33,117,33,118,33,119,33,120,33,121,33,102,231,103,231,104,231,105,231,106,231,107,231,136,36,137,36,138,36,139,36,140,36,141,36,142,36,143,36,144,36,145,36,146,36,147,36,148,36,149,36,150,36,151,36,152,36,153,36,154,36,155,36,116,36,117,36,118,36,119,36,120,36,121,36,122,36,123,36,124,36,125,36,126,36,127,36,128,36,129,36,130,36,131,36,132,36,133,36,134,36,135,36,96,36,97,36,98,36,99,36,100,36,101,36,102,36,103,36,104,36,105,36,172,32,109,231,32,50,33,50,34,50,35,50,36,50,37,50,38,50,39,50,40,50,41,50,110,231,111,231,96,33,97,33,98,33,99,33,100,33,101,33,102,33,103,33,104,33,105,33,106,33,107,33,112,231,113,231,134,229,135,229,136,229,137,229,138,229,139,229,140,229,141,229,142,229,143,229,144,229,145,229,146,229,147,229,148,229,149,229,150,229,151,229,152,229,153,229,154,229,155,229,156,229,157,229,158,229,159,229,160,229,161,229,162,229,163,229,164,229,165,229,166,229,167,229,168,229,169,229,170,229,171,229,172,229,173,229,174,229,175,229,176,229,177,229,178,229,179,229,180,229,181,229,182,229,183,229,184,229,185,229,186,229,187,229,188,229,189,229,190,229,191,229,192,229,193,229,194,229,195,229,196,229,197,229,198,229,199,229,200,229,201,229,202,229,203,229,204,229,205,229,206,229,207,229,208,229,209,229,210,229,211,229,212,229,213,229,214,229,215,229,216,229,217,229,218,229,219,229,220,229,221,229,222,229,223,229,224,229,225,229,226,229,227,229,228,229,229,229,1,255,2,255,3,255,229,255,5,255,6,255,7,255,8,255,9,255,10,255,11,255,12,255,13,255,14,255,15,255,16,255,17,255,18,255,19,255,20,255,21,255,22,255,23,255,24,255,25,255,26,255,27,255,28,255,29,255,30,255,31,255,32,255,33,255,34,255,35,255,36,255,37,255,38,255,39,255,40,255,41,255,42,255,43,255,44,255,45,255,46,255,47,255,48,255,49,255,50,255,51,255,52,255,53,255,54,255,55,255,56,255,57,255,58,255,59,255,60,255,61,255,62,255,63,255,64,255,65,255,66,255,67,255,68,255,69,255,70,255,71,255,72,255,73,255,74,255,75,255,76,255,77,255,78,255,79,255,80,255,81,255,82,255,83,255,84,255,85,255,86,255,87,255,88,255,89,255,90,255,91,255,92,255,93,255,227,255,230,229,231,229,232,229,233,229,234,229,235,229,236,229,237,229,238,229,239,229,240,229,241,229,242,229,243,229,244,229,245,229,246,229,247,229,248,229,249,229,250,229,251,229,252,229,253,229,254,229,255,229,0,230,1,230,2,230,3,230,4,230,5,230,6,230,7,230,8,230,9,230,10,230,11,230,12,230,13,230,14,230,15,230,16,230,17,230,18,230,19,230,20,230,21,230,22,230,23,230,24,230,25,230,26,230,27,230,28,230,29,230,30,230,31,230,32,230,33,230,34,230,35,230,36,230,37,230,38,230,39,230,40,230,41,230,42,230,43,230,44,230,45,230,46,230,47,230,48,230,49,230,50,230,51,230,52,230,53,230,54,230,55,230,56,230,57,230,58,230,59,230,60,230,61,230,62,230,63,230,64,230,65,230,66,230,67,230,68,230,69,230,65,48,66,48,67,48,68,48,69,48,70,48,71,48,72,48,73,48,74,48,75,48,76,48,77,48,78,48,79,48,80,48,81,48,82,48,83,48,84,48,85,48,86,48,87,48,88,48,89,48,90,48,91,48,92,48,93,48,94,48,95,48,96,48,97,48,98,48,99,48,100,48,101,48,102,48,103,48,104,48,105,48,106,48,107,48,108,48,109,48,110,48,111,48,112,48,113,48,114,48,115,48,116,48,117,48,118,48,119,48,120,48,121,48,122,48,123,48,124,48,125,48,126,48,127,48,128,48,129,48,130,48,131,48,132,48,133,48,134,48,135,48,136,48,137,48,138,48,139,48,140,48,141,48,142,48,143,48,144,48,145,48,146,48,147,48,114,231,115,231,116,231,117,231,118,231,119,231,120,231,121,231,122,231,123,231,124,231,70,230,71,230,72,230,73,230,74,230,75,230,76,230,77,230,78,230,79,230,80,230,81,230,82,230,83,230,84,230,85,230,86,230,87,230,88,230,89,230,90,230,91,230,92,230,93,230,94,230,95,230,96,230,97,230,98,230,99,230,100,230,101,230,102,230,103,230,104,230,105,230,106,230,107,230,108,230,109,230,110,230,111,230,112,230,113,230,114,230,115,230,116,230,117,230,118,230,119,230,120,230,121,230,122,230,123,230,124,230,125,230,126,230,127,230,128,230,129,230,130,230,131,230,132,230,133,230,134,230,135,230,136,230,137,230,138,230,139,230,140,230,141,230,142,230,143,230,144,230,145,230,146,230,147,230,148,230,149,230,150,230,151,230,152,230,153,230,154,230,155,230,156,230,157,230,158,230,159,230,160,230,161,230,162,230,163,230,164,230,165,230,161,48,162,48,163,48,164,48,165,48,166,48,167,48,168,48,169,48,170,48,171,48,172,48,173,48,174,48,175,48,176,48,177,48,178,48,179,48,180,48,181,48,182,48,183,48,184,48,185,48,186,48,187,48,188,48,189,48,190,48,191,48,192,48,193,48,194,48,195,48,196,48,197,48,198,48,199,48,200,48,201,48,202,48,203,48,204,48,205,48,206,48,207,48,208,48,209,48,210,48,211,48,212,48,213,48,214,48,215,48,216,48,217,48,218,48,219,48,220,48,221,48,222,48,223,48,224,48,225,48,226,48,227,48,228,48,229,48,230,48,231,48,232,48,233,48,234,48,235,48,236,48,237,48,238,48,239,48,240,48,241,48,242,48,243,48,244,48,245,48,246,48,125,231,126,231,127,231,128,231,129,231,130,231,131,231,132,231,166,230,167,230,168,230,169,230,170,230,171,230,172,230,173,230,174,230,175,230,176,230,177,230,178,230,179,230,180,230,181,230,182,230,183,230,184,230,185,230,186,230,187,230,188,230,189,230,190,230,191,230,192,230,193,230,194,230,195,230,196,230,197,230,198,230,199,230,200,230,201,230,202,230,203,230,204,230,205,230,206,230,207,230,208,230,209,230,210,230,211,230,212,230,213,230,214,230,215,230,216,230,217,230,218,230,219,230,220,230,221,230,222,230,223,230,224,230,225,230,226,230,227,230,228,230,229,230,230,230,231,230,232,230,233,230,234,230,235,230,236,230,237,230,238,230,239,230,240,230,241,230,242,230,243,230,244,230,245,230,246,230,247,230,248,230,249,230,250,230,251,230,252,230,253,230,254,230,255,230,0,231,1,231,2,231,3,231,4,231,5,231,145,3,146,3,147,3,148,3,149,3,150,3,151,3,152,3,153,3,154,3,155,3,156,3,157,3,158,3,159,3,160,3,161,3,163,3,164,3,165,3,166,3,167,3,168,3,169,3,133,231,134,231,135,231,136,231,137,231,138,231,139,231,140,231,177,3,178,3,179,3,180,3,181,3,182,3,183,3,184,3,185,3,186,3,187,3,188,3,189,3,190,3,191,3,192,3,193,3,195,3,196,3,197,3,198,3,199,3,200,3,201,3,141,231,142,231,143,231,144,231,145,231,146,231,147,231,53,254,54,254,57,254,58,254,63,254,64,254,61,254,62,254,65,254,66,254,67,254,68,254,148,231,149,231,59,254,60,254,55,254,56,254,49,254,150,231,51,254,52,254,151,231,152,231,153,231,154,231,155,231,156,231,157,231,158,231,159,231,6,231,7,231,8,231,9,231,10,231,11,231,12,231,13,231,14,231,15,231,16,231,17,231,18,231,19,231,20,231,21,231,22,231,23,231,24,231,25,231,26,231,27,231,28,231,29,231,30,231,31,231,32,231,33,231,34,231,35,231,36,231,37,231,38,231,39,231,40,231,41,231,42,231,43,231,44,231,45,231,46,231,47,231,48,231,49,231,50,231,51,231,52,231,53,231,54,231,55,231,56,231,57,231,58,231,59,231,60,231,61,231,62,231,63,231,64,231,65,231,66,231,67,231,68,231,69,231,70,231,71,231,72,231,73,231,74,231,75,231,76,231,77,231,78,231,79,231,80,231,81,231,82,231,83,231,84,231,85,231,86,231,87,231,88,231,89,231,90,231,91,231,92,231,93,231,94,231,95,231,96,231,97,231,98,231,99,231,100,231,101,231,16,4,17,4,18,4,19,4,20,4,21,4,1,4,22,4,23,4,24,4,25,4,26,4,27,4,28,4,29,4,30,4,31,4,32,4,33,4,34,4,35,4,36,4,37,4,38,4,39,4,40,4,41,4,42,4,43,4,44,4,45,4,46,4,47,4,160,231,161,231,162,231,163,231,164,231,165,231,166,231,167,231,168,231,169,231,170,231,171,231,172,231,173,231,174,231,48,4,49,4,50,4,51,4,52,4,53,4,81,4,54,4,55,4,56,4,57,4,58,4,59,4,60,4,61,4,62,4,63,4,64,4,65,4,66,4,67,4,68,4,69,4,70,4,71,4,72,4,73,4,74,4,75,4,76,4,77,4,78,4,79,4,175,231,176,231,177,231,178,231,179,231,180,231,181,231,182,231,183,231,184,231,185,231,186,231,187,231,202,2,203,2,217,2,19,32,21,32,37,32,53,32,5,33,9,33,150,33,151,33,152,33,153,33,21,34,31,34,35,34,82,34,102,34,103,34,191,34,80,37,81,37,82,37,83,37,84,37,85,37,86,37,87,37,88,37,89,37,90,37,91,37,92,37,93,37,94,37,95,37,96,37,97,37,98,37,99,37,100,37,101,37,102,37,103,37,104,37,105,37,106,37,107,37,108,37,109,37,110,37,111,37,112,37,113,37,114,37,115,37,129,37,130,37,131,37,132,37,133,37,134,37,135,37,136,37,137,37,138,37,139,37,140,37,141,37,142,37,143,37,147,37,148,37,149,37,188,37,189,37,226,37,227,37,228,37,229,37,9,38,149,34,18,48,29,48,30,48,188,231,189,231,190,231,191,231,192,231,193,231,194,231,195,231,196,231,197,231,198,231,1,1,225,0,206,1,224,0,19,1,233,0,27,1,232,0,43,1,237,0,208,1,236,0,77,1,243,0,210,1,242,0,107,1,250,0,212,1,249,0,214,1,216,1,218,1,220,1,252,0,234,0,81,2,199,231,68,1,72,1,249,1,97,2,201,231,202,231,203,231,204,231,5,49,6,49,7,49,8,49,9,49,10,49,11,49,12,49,13,49,14,49,15,49,16,49,17,49,18,49,19,49,20,49,21,49,22,49,23,49,24,49,25,49,26,49,27,49,28,49,29,49,30,49,31,49,32,49,33,49,34,49,35,49,36,49,37,49,38,49,39,49,40,49,41,49,205,231,206,231,207,231,208,231,209,231,210,231,211,231,212,231,213,231,214,231,215,231,216,231,217,231,218,231,219,231,220,231,221,231,222,231,223,231,224,231,225,231,33,48,34,48,35,48,36,48,37,48,38,48,39,48,40,48,41,48,163,50,142,51,143,51,156,51,157,51,158,51,161,51,196,51,206,51,209,51,210,51,213,51,48,254,226,255,228,255,226,231,33,33,49,50,227,231,16,32,228,231,229,231,230,231,252,48,155,48,156,48,253,48,254,48,6,48,157,48,158,48,73,254,74,254,75,254,76,254,77,254,78,254,79,254,80,254,81,254,82,254,84,254,85,254,86,254,87,254,89,254,90,254,91,254,92,254,93,254,94,254,95,254,96,254,97,254,98,254,99,254,100,254,101,254,102,254,104,254,105,254,106,254,107,254,62,48,240,47,241,47,242,47,243,47,244,47,245,47,246,47,247,47,248,47,249,47,250,47,251,47,7,48,244,231,245,231,246,231,247,231,248,231,249,231,250,231,251,231,252,231,253,231,254,231,255,231,0,232,0,37,1,37,2,37,3,37,4,37,5,37,6,37,7,37,8,37,9,37,10,37,11,37,12,37,13,37,14,37,15,37,16,37,17,37,18,37,19,37,20,37,21,37,22,37,23,37,24,37,25,37,26,37,27,37,28,37,29,37,30,37,31,37,32,37,33,37,34,37,35,37,36,37,37,37,38,37,39,37,40,37,41,37,42,37,43,37,44,37,45,37,46,37,47,37,48,37,49,37,50,37,51,37,52,37,53,37,54,37,55,37,56,37,57,37,58,37,59,37,60,37,61,37,62,37,63,37,64,37,65,37,66,37,67,37,68,37,69,37,70,37,71,37,72,37,73,37,74,37,75,37,1,232,2,232,3,232,4,232,5,232,6,232,7,232,8,232,9,232,10,232,11,232,12,232,13,232,14,232,15,232,220,114,221,114,223,114,226,114,227,114,228,114,229,114,230,114,231,114,234,114,235,114,245,114,246,114,249,114,253,114,254,114,255,114,0,115,2,115,4,115,5,115,6,115,7,115,8,115,9,115,11,115,12,115,13,115,15,115,16,115,17,115,18,115,20,115,24,115,25,115,26,115,31,115,32,115,35,115,36,115,38,115,39,115,40,115,45,115,47,115,48,115,50,115,51,115,53,115,54,115,58,115,59,115,60,115,61,115,64,115,65,115,66,115,67,115,68,115,69,115,70,115,71,115,72,115,73,115,74,115,75,115,76,115,78,115,79,115,81,115,83,115,84,115,85,115,86,115,88,115,89,115,90,115,91,115,92,115,93,115,94,115,95,115,97,115,98,115,99,115,100,115,101,115,102,115,103,115,104,115,105,115,106,115,107,115,110,115,112,115,113,115,0,224,1,224,2,224,3,224,4,224,5,224,6,224,7,224,8,224,9,224,10,224,11,224,12,224,13,224,14,224,15,224,16,224,17,224,18,224,19,224,20,224,21,224,22,224,23,224,24,224,25,224,26,224,27,224,28,224,29,224,30,224,31,224,32,224,33,224,34,224,35,224,36,224,37,224,38,224,39,224,40,224,41,224,42,224,43,224,44,224,45,224,46,224,47,224,48,224,49,224,50,224,51,224,52,224,53,224,54,224,55,224,56,224,57,224,58,224,59,224,60,224,61,224,62,224,63,224,64,224,65,224,66,224,67,224,68,224,69,224,70,224,71,224,72,224,73,224,74,224,75,224,76,224,77,224,78,224,79,224,80,224,81,224,82,224,83,224,84,224,85,224,86,224,87,224,88,224,89,224,90,224,91,224,92,224,93,224,114,115,115,115,116,115,117,115,118,115,119,115,120,115,121,115,122,115,123,115,124,115,125,115,127,115,128,115,129,115,130,115,131,115,133,115,134,115,136,115,138,115,140,115,141,115,143,115,144,115,146,115,147,115,148,115,149,115,151,115,152,115,153,115,154,115,156,115,157,115,158,115,160,115,161,115,163,115,164,115,165,115,166,115,167,115,168,115,170,115,172,115,173,115,177,115,180,115,181,115,182,115,184,115,185,115,188,115,189,115,190,115,191,115,193,115,195,115,196,115,197,115,198,115,199,115,203,115,204,115,206,115,210,115,211,115,212,115,213,115,214,115,215,115,216,115,218,115,219,115,220,115,221,115,223,115,225,115,226,115,227,115,228,115,230,115,232,115,234,115,235,115,236,115,238,115,239,115,240,115,241,115,243,115,244,115,245,115,246,115,247,115,94,224,95,224,96,224,97,224,98,224,99,224,100,224,101,224,102,224,103,224,104,224,105,224,106,224,107,224,108,224,109,224,110,224,111,224,112,224,113,224,114,224,115,224,116,224,117,224,118,224,119,224,120,224,121,224,122,224,123,224,124,224,125,224,126,224,127,224,128,224,129,224,130,224,131,224,132,224,133,224,134,224,135,224,136,224,137,224,138,224,139,224,140,224,141,224,142,224,143,224,144,224,145,224,146,224,147,224,148,224,149,224,150,224,151,224,152,224,153,224,154,224,155,224,156,224,157,224,158,224,159,224,160,224,161,224,162,224,163,224,164,224,165,224,166,224,167,224,168,224,169,224,170,224,171,224,172,224,173,224,174,224,175,224,176,224,177,224,178,224,179,224,180,224,181,224,182,224,183,224,184,224,185,224,186,224,187,224,248,115,249,115,250,115,251,115,252,115,253,115,254,115,255,115,0,116,1,116,2,116,4,116,7,116,8,116,11,116,12,116,13,116,14,116,17,116,18,116,19,116,20,116,21,116,22,116,23,116,24,116,25,116,28,116,29,116,30,116,31,116,32,116,33,116,35,116,36,116,39,116,41,116,43,116,45,116,47,116,49,116,50,116,55,116,56,116,57,116,58,116,59,116,61,116,62,116,63,116,64,116,66,116,67,116,68,116,69,116,70,116,71,116,72,116,73,116,74,116,75,116,76,116,77,116,78,116,79,116,80,116,81,116,82,116,83,116,84,116,86,116,88,116,93,116,96,116,97,116,98,116,99,116,100,116,101,116,102,116,103,116,104,116,105,116,106,116,107,116,108,116,110,116,111,116,113,116,114,116,115,116,116,116,117,116,120,116,121,116,122,116,188,224,189,224,190,224,191,224,192,224,193,224,194,224,195,224,196,224,197,224,198,224,199,224,200,224,201,224,202,224,203,224,204,224,205,224,206,224,207,224,208,224,209,224,210,224,211,224,212,224,213,224,214,224,215,224,216,224,217,224,218,224,219,224,220,224,221,224,222,224,223,224,224,224,225,224,226,224,227,224,228,224,229,224,230,224,231,224,232,224,233,224,234,224,235,224,236,224,237,224,238,224,239,224,240,224,241,224,242,224,243,224,244,224,245,224,246,224,247,224,248,224,249,224,250,224,251,224,252,224,253,224,254,224,255,224,0,225,1,225,2,225,3,225,4,225,5,225,6,225,7,225,8,225,9,225,10,225,11,225,12,225,13,225,14,225,15,225,16,225,17,225,18,225,19,225,20,225,21,225,22,225,23,225,24,225,25,225,123,116,124,116,125,116,127,116,130,116,132,116,133,116,134,116,136,116,137,116,138,116,140,116,141,116,143,116,145,116,146,116,147,116,148,116,149,116,150,116,151,116,152,116,153,116,154,116,155,116,157,116,159,116,160,116,161,116,162,116,163,116,164,116,165,116,166,116,170,116,171,116,172,116,173,116,174,116,175,116,176,116,177,116,178,116,179,116,180,116,181,116,182,116,183,116,184,116,185,116,187,116,188,116,189,116,190,116,191,116,192,116,193,116,194,116,195,116,196,116,197,116,198,116,199,116,200,116,201,116,202,116,203,116,204,116,205,116,206,116,207,116,208,116,209,116,211,116,212,116,213,116,214,116,215,116,216,116,217,116,218,116,219,116,221,116,223,116,225,116,229,116,231,116,232,116,233,116,234,116,235,116,236,116,237,116,240,116,241,116,242,116,26,225,27,225,28,225,29,225,30,225,31,225,32,225,33,225,34,225,35,225,36,225,37,225,38,225,39,225,40,225,41,225,42,225,43,225,44,225,45,225,46,225,47,225,48,225,49,225,50,225,51,225,52,225,53,225,54,225,55,225,56,225,57,225,58,225,59,225,60,225,61,225,62,225,63,225,64,225,65,225,66,225,67,225,68,225,69,225,70,225,71,225,72,225,73,225,74,225,75,225,76,225,77,225,78,225,79,225,80,225,81,225,82,225,83,225,84,225,85,225,86,225,87,225,88,225,89,225,90,225,91,225,92,225,93,225,94,225,95,225,96,225,97,225,98,225,99,225,100,225,101,225,102,225,103,225,104,225,105,225,106,225,107,225,108,225,109,225,110,225,111,225,112,225,113,225,114,225,115,225,116,225,117,225,118,225,119,225,243,116,245,116,248,116,249,116,250,116,251,116,252,116,253,116,254,116,0,117,1,117,2,117,3,117,5,117,6,117,7,117,8,117,9,117,10,117,11,117,12,117,14,117,16,117,18,117,20,117,21,117,22,117,23,117,27,117,29,117,30,117,32,117,33,117,34,117,35,117,36,117,38,117,39,117,42,117,46,117,52,117,54,117,57,117,60,117,61,117,63,117,65,117,66,117,67,117,68,117,70,117,71,117,73,117,74,117,77,117,80,117,81,117,82,117,83,117,85,117,86,117,87,117,88,117,93,117,94,117,95,117,96,117,97,117,98,117,99,117,100,117,103,117,104,117,105,117,107,117,108,117,109,117,110,117,111,117,112,117,113,117,115,117,117,117,118,117,119,117,122,117,123,117,124,117,125,117,126,117,128,117,129,117,130,117,132,117,133,117,135,117,120,225,121,225,122,225,123,225,124,225,125,225,126,225,127,225,128,225,129,225,130,225,131,225,132,225,133,225,134,225,135,225,136,225,137,225,138,225,139,225,140,225,141,225,142,225,143,225,144,225,145,225,146,225,147,225,148,225,149,225,150,225,151,225,152,225,153,225,154,225,155,225,156,225,157,225,158,225,159,225,160,225,161,225,162,225,163,225,164,225,165,225,166,225,167,225,168,225,169,225,170,225,171,225,172,225,173,225,174,225,175,225,176,225,177,225,178,225,179,225,180,225,181,225,182,225,183,225,184,225,185,225,186,225,187,225,188,225,189,225,190,225,191,225,192,225,193,225,194,225,195,225,196,225,197,225,198,225,199,225,200,225,201,225,202,225,203,225,204,225,205,225,206,225,207,225,208,225,209,225,210,225,211,225,212,225,213,225,136,117,137,117,138,117,140,117,141,117,142,117,144,117,147,117,149,117,152,117,155,117,156,117,158,117,162,117,166,117,167,117,168,117,169,117,170,117,173,117,182,117,183,117,186,117,187,117,191,117,192,117,193,117,198,117,203,117,204,117,206,117,207,117,208,117,209,117,211,117,215,117,217,117,218,117], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+64116);
/* memory initializer */ allocate([220,117,221,117,223,117,224,117,225,117,229,117,233,117,236,117,237,117,238,117,239,117,242,117,243,117,245,117,246,117,247,117,248,117,250,117,251,117,253,117,254,117,2,118,4,118,6,118,7,118,8,118,9,118,11,118,13,118,14,118,15,118,17,118,18,118,19,118,20,118,22,118,26,118,28,118,29,118,30,118,33,118,35,118,39,118,40,118,44,118,46,118,47,118,49,118,50,118,54,118,55,118,57,118,58,118,59,118,61,118,65,118,66,118,68,118,214,225,215,225,216,225,217,225,218,225,219,225,220,225,221,225,222,225,223,225,224,225,225,225,226,225,227,225,228,225,229,225,230,225,231,225,232,225,233,225,234,225,235,225,236,225,237,225,238,225,239,225,240,225,241,225,242,225,243,225,244,225,245,225,246,225,247,225,248,225,249,225,250,225,251,225,252,225,253,225,254,225,255,225,0,226,1,226,2,226,3,226,4,226,5,226,6,226,7,226,8,226,9,226,10,226,11,226,12,226,13,226,14,226,15,226,16,226,17,226,18,226,19,226,20,226,21,226,22,226,23,226,24,226,25,226,26,226,27,226,28,226,29,226,30,226,31,226,32,226,33,226,34,226,35,226,36,226,37,226,38,226,39,226,40,226,41,226,42,226,43,226,44,226,45,226,46,226,47,226,48,226,49,226,50,226,51,226,69,118,70,118,71,118,72,118,73,118,74,118,75,118,78,118,79,118,80,118,81,118,82,118,83,118,85,118,87,118,88,118,89,118,90,118,91,118,93,118,95,118,96,118,97,118,98,118,100,118,101,118,102,118,103,118,104,118,105,118,106,118,108,118,109,118,110,118,112,118,113,118,114,118,115,118,116,118,117,118,118,118,119,118,121,118,122,118,124,118,127,118,128,118,129,118,131,118,133,118,137,118,138,118,140,118,141,118,143,118,144,118,146,118,148,118,149,118,151,118,152,118,154,118,155,118,156,118,157,118,158,118,159,118,160,118,161,118,162,118,163,118,165,118,166,118,167,118,168,118,169,118,170,118,171,118,172,118,173,118,175,118,176,118,179,118,181,118,182,118,183,118,184,118,185,118,186,118,187,118,188,118,189,118,190,118,192,118,193,118,195,118,74,85,63,150,195,87,40,99,206,84,9,85,192,84,145,118,76,118,60,133,238,119,126,130,141,120,49,114,152,150,141,151,40,108,137,91,250,79,9,99,151,102,184,92,250,128,72,104,174,128,2,102,206,118,249,81,86,101,172,113,241,127,132,136,178,80,101,89,202,97,179,111,173,130,76,99,82,98,237,83,39,84,6,123,107,81,164,117,244,93,212,98,203,141,118,151,138,98,25,128,93,87,56,151,98,127,56,114,125,118,207,103,126,118,70,100,112,79,37,141,220,98,23,122,145,101,237,115,44,100,115,98,44,130,129,152,127,103,72,114,110,98,204,98,52,79,227,116,74,83,158,82,202,126,166,144,46,94,134,104,156,105,128,129,209,126,210,104,197,120,140,134,81,149,141,80,36,140,222,130,222,128,5,83,18,137,101,82,196,118,199,118,201,118,203,118,204,118,211,118,213,118,217,118,218,118,220,118,221,118,222,118,224,118,225,118,226,118,227,118,228,118,230,118,231,118,232,118,233,118,234,118,235,118,236,118,237,118,240,118,243,118,245,118,246,118,247,118,250,118,251,118,253,118,255,118,0,119,2,119,3,119,5,119,6,119,10,119,12,119,14,119,15,119,16,119,17,119,18,119,19,119,20,119,21,119,22,119,23,119,24,119,27,119,28,119,29,119,30,119,33,119,35,119,36,119,37,119,39,119,42,119,43,119,44,119,46,119,48,119,49,119,50,119,51,119,52,119,57,119,59,119,61,119,62,119,63,119,66,119,68,119,69,119,70,119,72,119,73,119,74,119,75,119,76,119,77,119,78,119,79,119,82,119,83,119,84,119,85,119,86,119,87,119,88,119,89,119,92,119,132,133,249,150,221,79,33,88,113,153,157,91,177,98,165,98,180,102,121,140,141,156,6,114,111,103,145,120,178,96,81,83,23,83,136,143,204,128,29,141,161,148,13,80,200,114,7,89,235,96,25,113,171,136,84,89,239,130,44,103,40,123,41,93,247,126,45,117,245,108,102,142,248,143,60,144,59,159,212,107,25,145,20,123,124,95,167,120,214,132,61,133,213,107,217,107,214,107,1,94,135,94,249,117,237,149,93,101,10,95,197,95,159,143,193,88,194,129,127,144,91,150,173,151,185,143,22,127,44,141,65,98,191,79,216,83,94,83,168,143,169,143,171,143,77,144,7,104,106,95,152,129,104,136,214,156,139,97,43,82,42,118,108,95,140,101,210,111,232,110,190,91,72,100,117,81,176,81,196,103,25,78,201,121,124,153,179,112,93,119,94,119,95,119,96,119,100,119,103,119,105,119,106,119,109,119,110,119,111,119,112,119,113,119,114,119,115,119,116,119,117,119,118,119,119,119,120,119,122,119,123,119,124,119,129,119,130,119,131,119,134,119,135,119,136,119,137,119,138,119,139,119,143,119,144,119,147,119,148,119,149,119,150,119,151,119,152,119,153,119,154,119,155,119,156,119,157,119,158,119,161,119,163,119,164,119,166,119,168,119,171,119,173,119,174,119,175,119,177,119,178,119,180,119,182,119,183,119,184,119,185,119,186,119,188,119,190,119,192,119,193,119,194,119,195,119,196,119,197,119,198,119,199,119,200,119,201,119,202,119,203,119,204,119,206,119,207,119,208,119,209,119,210,119,211,119,212,119,213,119,214,119,216,119,217,119,218,119,221,119,222,119,223,119,224,119,225,119,228,119,197,117,118,94,187,115,224,131,173,100,232,98,181,148,226,108,90,83,195,82,15,100,194,148,148,123,47,79,27,94,54,130,22,129,138,129,36,110,202,108,115,154,85,99,92,83,250,84,101,136,224,87,13,78,3,94,101,107,63,124,232,144,22,96,230,100,28,115,193,136,80,103,77,98,34,141,108,119,41,142,199,145,105,95,220,131,33,133,16,153,194,83,149,134,139,107,237,96,232,96,127,112,205,130,49,130,211,78,167,108,207,133,205,100,217,124,253,105,249,102,73,131,149,83,86,123,167,79,140,81,75,109,66,92,109,142,210,99,201,83,44,131,54,131,229,103,180,120,61,100,223,91,148,92,238,93,231,139,198,98,244,103,122,140,0,100,186,99,73,135,139,153,23,140,32,127,242,148,167,78,16,150,164,152,12,102,22,115,230,119,232,119,234,119,239,119,240,119,241,119,242,119,244,119,245,119,247,119,249,119,250,119,251,119,252,119,3,120,4,120,5,120,6,120,7,120,8,120,10,120,11,120,14,120,15,120,16,120,19,120,21,120,25,120,27,120,30,120,32,120,33,120,34,120,36,120,40,120,42,120,43,120,46,120,47,120,49,120,50,120,51,120,53,120,54,120,61,120,63,120,65,120,66,120,67,120,68,120,70,120,72,120,73,120,74,120,75,120,77,120,79,120,81,120,83,120,84,120,88,120,89,120,90,120,91,120,92,120,94,120,95,120,96,120,97,120,98,120,99,120,100,120,101,120,102,120,103,120,104,120,105,120,111,120,112,120,113,120,114,120,115,120,116,120,117,120,118,120,120,120,121,120,122,120,123,120,125,120,126,120,127,120,128,120,129,120,130,120,131,120,58,87,29,92,56,94,127,149,127,80,160,128,130,83,94,101,69,117,49,85,33,80,133,141,132,98,158,148,29,103,50,86,110,111,226,93,53,84,146,112,102,143,111,98,164,100,163,99,123,95,136,111,244,144,227,129,176,143,24,92,104,102,241,95,137,108,72,150,129,141,108,136,145,100,240,121,206,87,89,106,16,98,72,84,88,78,11,122,233,96,132,111,218,139,127,98,30,144,139,154,228,121,3,84,244,117,1,99,25,83,96,108,223,143,27,95,112,154,59,128,127,159,136,79,58,92,100,141,197,127,165,101,189,112,69,81,178,81,107,134,7,93,160,91,189,98,108,145,116,117,12,142,32,122,1,97,121,123,199,78,248,126,133,119,17,78,237,129,29,82,250,81,113,106,168,83,135,142,4,149,207,150,193,110,100,150,90,105,132,120,133,120,134,120,136,120,138,120,139,120,143,120,144,120,146,120,148,120,149,120,150,120,153,120,157,120,158,120,160,120,162,120,164,120,166,120,168,120,169,120,170,120,171,120,172,120,173,120,174,120,175,120,181,120,182,120,183,120,184,120,186,120,187,120,188,120,189,120,191,120,192,120,194,120,195,120,196,120,198,120,199,120,200,120,204,120,205,120,206,120,207,120,209,120,210,120,211,120,214,120,215,120,216,120,218,120,219,120,220,120,221,120,222,120,223,120,224,120,225,120,226,120,227,120,228,120,229,120,230,120,231,120,233,120,234,120,235,120,237,120,238,120,239,120,240,120,241,120,243,120,245,120,246,120,248,120,249,120,251,120,252,120,253,120,254,120,255,120,0,121,2,121,3,121,4,121,6,121,7,121,8,121,9,121,10,121,11,121,12,121,64,120,168,80,215,119,16,100,230,137,4,89,227,99,221,93,127,122,61,105,32,79,57,130,152,85,50,78,174,117,151,122,98,94,138,94,239,149,27,82,57,84,138,112,118,99,36,149,130,87,37,102,63,105,135,145,7,85,243,109,175,126,34,136,51,98,240,126,181,117,40,131,193,120,204,150,158,143,72,97,247,116,205,139,100,107,58,82,80,141,33,107,106,128,113,132,241,86,6,83,206,78,27,78,209,81,151,124,139,145,7,124,195,79,127,142,225,123,156,122,103,100,20,93,172,80,6,129,1,118,185,124,236,109,224,127,81,103,88,91,248,91,203,120,174,100,19,100,170,99,43,99,25,149,45,100,190,143,84,123,41,118,83,98,39,89,70,84,121,107,163,80,52,98,38,94,134,107,227,78,55,141,139,136,133,95,46,144,13,121,14,121,15,121,16,121,17,121,18,121,20,121,21,121,22,121,23,121,24,121,25,121,26,121,27,121,28,121,29,121,31,121,32,121,33,121,34,121,35,121,37,121,38,121,39,121,40,121,41,121,42,121,43,121,44,121,45,121,46,121,47,121,48,121,49,121,50,121,51,121,53,121,54,121,55,121,56,121,57,121,61,121,63,121,66,121,67,121,68,121,69,121,71,121,74,121,75,121,76,121,77,121,78,121,79,121,80,121,81,121,82,121,84,121,85,121,88,121,89,121,97,121,99,121,100,121,102,121,105,121,106,121,107,121,108,121,110,121,112,121,113,121,114,121,115,121,116,121,117,121,118,121,121,121,123,121,124,121,125,121,126,121,127,121,130,121,131,121,134,121,135,121,136,121,137,121,139,121,140,121,141,121,142,121,144,121,145,121,146,121,32,96,61,128,197,98,57,78,85,83,248,144,184,99,198,128,230,101,46,108,70,79,238,96,225,109,222,139,57,95,203,134,83,95,33,99,90,81,97,131,99,104,0,82,99,99,72,142,18,80,155,92,119,121,252,91,48,82,59,122,188,96,83,144,215,118,183,95,151,95,132,118,108,142,111,112,123,118,73,123,170,119,243,81,147,144,36,88,78,79,244,110,234,143,76,101,27,123,196,114,164,109,223,127,225,90,181,98,149,94,48,87,130,132,44,123,29,94,31,95,18,144,20,127,160,152,130,99,199,110,152,120,185,112,120,81,91,151,171,87,53,117,67,79,56,117,151,94,230,96,96,89,192,109,191,107,137,120,252,83,213,150,203,81,1,82,137,99,10,84,147,148,3,140,204,141,57,114,159,120,118,135,237,143,13,140,224,83,147,121,148,121,149,121,150,121,151,121,152,121,153,121,155,121,156,121,157,121,158,121,159,121,160,121,161,121,162,121,163,121,164,121,165,121,166,121,168,121,169,121,170,121,171,121,172,121,173,121,174,121,175,121,176,121,177,121,178,121,180,121,181,121,182,121,183,121,184,121,188,121,191,121,194,121,196,121,197,121,199,121,200,121,202,121,204,121,206,121,207,121,208,121,211,121,212,121,214,121,215,121,217,121,218,121,219,121,220,121,221,121,222,121,224,121,225,121,226,121,229,121,232,121,234,121,236,121,238,121,241,121,242,121,243,121,244,121,245,121,246,121,247,121,249,121,250,121,252,121,254,121,255,121,1,122,4,122,5,122,7,122,8,122,9,122,10,122,12,122,15,122,16,122,17,122,18,122,19,122,21,122,22,122,24,122,25,122,27,122,28,122,1,78,239,118,238,83,137,148,118,152,14,159,45,149,154,91,162,139,34,78,28,78,172,81,99,132,194,97,168,82,11,104,151,79,107,96,187,81,30,109,92,81,150,98,151,101,97,150,70,140,23,144,216,117,253,144,99,119,210,107,138,114,236,114,251,139,53,88,121,119,76,141,92,103,64,149,154,128,166,94,33,110,146,89,239,122,237,119,59,149,181,107,173,101,14,127,6,88,81,81,31,150,249,91,169,88,40,84,114,142,102,101,127,152,228,86,157,148,254,118,65,144,135,99,198,84,26,89,58,89,155,87,178,142,53,103,250,141,53,130,65,82,240,96,21,88,254,134,232,92,69,158,196,79,157,152,185,139,37,90,118,96,132,83,124,98,79,144,2,145,127,153,105,96,12,128,63,81,51,128,20,92,117,153,49,109,140,78,29,122,31,122,33,122,34,122,36,122,37,122,38,122,39,122,40,122,41,122,42,122,43,122,44,122,45,122,46,122,47,122,48,122,49,122,50,122,52,122,53,122,54,122,56,122,58,122,62,122,64,122,65,122,66,122,67,122,68,122,69,122,71,122,72,122,73,122,74,122,75,122,76,122,77,122,78,122,79,122,80,122,82,122,83,122,84,122,85,122,86,122,88,122,89,122,90,122,91,122,92,122,93,122,94,122,95,122,96,122,97,122,98,122,99,122,100,122,101,122,102,122,103,122,104,122,105,122,106,122,107,122,108,122,109,122,110,122,111,122,113,122,114,122,115,122,117,122,123,122,124,122,125,122,126,122,130,122,133,122,135,122,137,122,138,122,139,122,140,122,142,122,143,122,144,122,147,122,148,122,153,122,154,122,155,122,158,122,161,122,162,122,48,141,209,83,90,127,79,123,16,79,79,78,0,150,213,108,208,115,233,133,6,94,106,117,251,127,10,106,254,119,146,148,65,126,225,81,230,112,205,83,212,143,3,131,41,141,175,114,109,153,219,108,74,87,179,130,185,101,170,128,63,98,50,150,168,89,255,78,191,139,186,126,62,101,242,131,94,151,97,85,222,152,165,128,42,83,253,139,32,84,186,128,159,94,184,108,57,141,172,130,90,145,41,84,27,108,6,82,183,126,95,87,26,113,126,108,137,124,75,89,253,78,255,95,36,97,170,124,48,78,1,92,171,103,2,135,240,92,11,149,206,152,175,117,253,112,34,144,175,81,29,127,189,139,73,89,228,81,91,79,38,84,43,89,119,101,164,128,117,91,118,98,194,98,144,143,69,94,31,108,38,123,15,79,216,79,13,103,163,122,164,122,167,122,169,122,170,122,171,122,174,122,175,122,176,122,177,122,178,122,180,122,181,122,182,122,183,122,184,122,185,122,186,122,187,122,188,122,189,122,190,122,192,122,193,122,194,122,195,122,196,122,197,122,198,122,199,122,200,122,201,122,202,122,204,122,205,122,206,122,207,122,208,122,209,122,210,122,211,122,212,122,213,122,215,122,216,122,218,122,219,122,220,122,221,122,225,122,226,122,228,122,231,122,232,122,233,122,234,122,235,122,236,122,238,122,240,122,241,122,242,122,243,122,244,122,245,122,246,122,247,122,248,122,251,122,252,122,254,122,0,123,1,123,2,123,5,123,7,123,9,123,12,123,13,123,14,123,16,123,18,123,19,123,22,123,23,123,24,123,26,123,28,123,29,123,31,123,33,123,34,123,35,123,39,123,41,123,45,123,110,109,170,109,143,121,177,136,23,95,43,117,154,98,133,143,239,79,220,145,167,101,47,129,81,129,156,94,80,129,116,141,111,82,134,137,75,141,13,89,133,80,216,78,28,150,54,114,121,129,31,141,204,91,163,139,68,150,135,89,26,127,144,84,118,86,14,86,229,139,57,101,130,105,153,148,214,118,137,110,114,94,24,117,70,103,209,103,255,122,157,128,118,141,31,97,198,121,98,101,99,141,136,81,26,82,162,148,56,127,155,128,178,126,151,92,47,110,96,103,217,123,139,118,216,154,143,129,148,127,213,124,30,100,80,149,63,122,74,84,229,84,76,107,1,100,8,98,61,158,243,128,153,117,114,82,105,151,91,132,60,104,228,134,1,150,148,150,236,148,42,78,4,84,217,126,57,104,223,141,21,128,244,102,154,94,185,127,47,123,48,123,50,123,52,123,53,123,54,123,55,123,57,123,59,123,61,123,63,123,64,123,65,123,66,123,67,123,68,123,70,123,72,123,74,123,77,123,78,123,83,123,85,123,87,123,89,123,92,123,94,123,95,123,97,123,99,123,100,123,101,123,102,123,103,123,104,123,105,123,106,123,107,123,108,123,109,123,111,123,112,123,115,123,116,123,118,123,120,123,122,123,124,123,125,123,127,123,129,123,130,123,131,123,132,123,134,123,135,123,136,123,137,123,138,123,139,123,140,123,142,123,143,123,145,123,146,123,147,123,150,123,152,123,153,123,154,123,155,123,158,123,159,123,160,123,163,123,164,123,165,123,174,123,175,123,176,123,178,123,179,123,181,123,182,123,183,123,185,123,186,123,187,123,188,123,189,123,190,123,191,123,192,123,194,123,195,123,196,123,194,87,63,128,151,104,229,93,59,101,159,82,109,96,154,159,155,79,172,142,108,81,171,91,19,95,233,93,94,108,241,98,33,141,113,81,169,148,254,82,159,108,223,130,215,114,162,87,132,103,45,141,31,89,156,143,199,131,149,84,141,123,48,79,189,108,100,91,209,89,19,159,228,83,202,134,168,154,55,140,161,128,69,101,126,152,250,86,199,150,46,82,220,116,80,82,225,91,2,99,2,137,86,78,208,98,42,96,250,104,115,81,152,91,160,81,194,137,161,123,134,153,80,127,239,96,76,112,47,141,73,81,127,94,27,144,112,116,196,137,45,87,69,120,82,95,159,159,250,149,104,143,60,155,225,139,120,118,66,104,220,103,234,141,53,141,61,82,138,143,218,110,205,104,5,149,237,144,253,86,156,103,249,136,199,143,200,84,197,123,200,123,201,123,202,123,203,123,205,123,206,123,207,123,208,123,210,123,212,123,213,123,214,123,215,123,216,123,219,123,220,123,222,123,223,123,224,123,226,123,227,123,228,123,231,123,232,123,233,123,235,123,236,123,237,123,239,123,240,123,242,123,243,123,244,123,245,123,246,123,248,123,249,123,250,123,251,123,253,123,255,123,0,124,1,124,2,124,3,124,4,124,5,124,6,124,8,124,9,124,10,124,13,124,14,124,16,124,17,124,18,124,19,124,20,124,21,124,23,124,24,124,25,124,26,124,27,124,28,124,29,124,30,124,32,124,33,124,34,124,35,124,36,124,37,124,40,124,41,124,43,124,44,124,45,124,46,124,47,124,48,124,49,124,50,124,51,124,52,124,53,124,54,124,55,124,57,124,58,124,59,124,60,124,61,124,62,124,66,124,184,154,105,91,119,109,38,108,165,78,179,91,135,154,99,145,168,97,175,144,233,151,43,84,181,109,210,91,253,81,138,85,85,127,240,127,188,100,77,99,241,101,190,97,141,96,10,113,87,108,73,108,47,89,109,103,42,130,213,88,142,86,106,140,235,107,221,144,125,89,23,128,247,83,105,109,117,84,157,85,119,131,207,131,56,104,190,121,140,84,85,79,8,84,210,118,137,140,2,150,179,108,184,109,107,141,16,137,100,158,58,141,63,86,209,158,213,117,136,95,224,114,104,96,252,84,168,78,42,106,97,136,82,96,112,143,196,84,216,112,121,134,63,158,42,109,143,91,24,95,162,126,137,85,175,79,52,115,60,84,154,83,25,80,14,84,124,84,78,78,253,95,90,116,246,88,107,132,225,128,116,135,208,114,202,124,86,110,67,124,68,124,69,124,70,124,71,124,72,124,73,124,74,124,75,124,76,124,78,124,79,124,80,124,81,124,82,124,83,124,84,124,85,124,86,124,87,124,88,124,89,124,90,124,91,124,92,124,93,124,94,124,95,124,96,124,97,124,98,124,99,124,100,124,101,124,102,124,103,124,104,124,105,124,106,124,107,124,108,124,109,124,110,124,111,124,112,124,113,124,114,124,117,124,118,124,119,124,120,124,121,124,122,124,126,124,127,124,128,124,129,124,130,124,131,124,132,124,133,124,134,124,135,124,136,124,138,124,139,124,140,124,141,124,142,124,143,124,144,124,147,124,148,124,150,124,153,124,154,124,155,124,160,124,161,124,163,124,166,124,167,124,168,124,169,124,171,124,172,124,173,124,175,124,176,124,180,124,181,124,182,124,183,124,184,124,186,124,187,124,39,95,78,134,44,85,164,98,146,78,170,108,55,98,177,130,215,84,78,83,62,115,209,110,59,117,18,82,22,83,221,139,208,105,138,95,0,96,238,109,79,87,34,107,175,115,83,104,216,143,19,127,98,99,163,96,36,85,234,117,98,140,21,113,163,109,166,91,123,94,82,131,76,97,196,158,250,120,87,135,39,124,135,118,240,81,246,96,76,113,67,102,76,94,77,96,14,140,112,112,37,99,137,143,189,95,98,96,212,134,222,86,193,107,148,96,103,97,73,83,224,96,102,102,63,141,253,121,26,79,233,112,71,108,179,139,242,139,216,126,100,131,15,102,90,90,66,155,81,109,247,109,65,140,59,109,25,79,107,112,183,131,22,98,209,96,13,151,39,141,120,121,251,81,62,87,250,87,58,103,120,117,61,122,239,121,149,123,191,124,192,124,194,124,195,124,196,124,198,124,201,124,203,124,206,124,207,124,208,124,209,124,210,124,211,124,212,124,216,124,218,124,219,124,221,124,222,124,225,124,226,124,227,124,228,124,229,124,230,124,231,124,233,124,234,124,235,124,236,124,237,124,238,124,240,124,241,124,242,124,243,124,244,124,245,124,246,124,247,124,249,124,250,124,252,124,253,124,254,124,255,124,0,125,1,125,2,125,3,125,4,125,5,125,6,125,7,125,8,125,9,125,11,125,12,125,13,125,14,125,15,125,16,125,17,125,18,125,19,125,20,125,21,125,22,125,23,125,24,125,25,125,26,125,27,125,28,125,29,125,30,125,31,125,33,125,35,125,36,125,37,125,38,125,40,125,41,125,42,125,44,125,45,125,46,125,48,125,49,125,50,125,51,125,52,125,53,125,54,125,140,128,101,153,249,143,192,111,165,139,33,158,236,89,233,126,9,127,9,84,129,103,216,104,145,143,77,124,198,150,202,83,37,96,190,117,114,108,115,83,201,90,167,126,36,99,224,81,10,129,241,93,223,132,128,98,128,81,99,91,14,79,109,121,66,82,184,96,78,109,196,91,194,91,161,139,176,139,226,101,204,95,69,150,147,89,231,126,170,126,9,86,183,103,57,89,115,79,182,91,160,82,90,131,138,152,62,141,50,117,190,148,71,80,60,122,247,78,182,103,126,154,193,90,124,107,209,118,90,87,22,92,58,123,244,149,78,113,124,81,169,128,112,130,120,89,4,127,39,131,192,104,236,103,177,120,119,120,227,98,97,99,128,123,237,79,106,82,207,81,80,131,219,105,116,146,245,141,49,141,193,137,46,149,173,123,246,78,55,125,56,125,57,125,58,125,59,125,60,125,61,125,62,125,63,125,64,125,65,125,66,125,67,125,68,125,69,125,70,125,71,125,72,125,73,125,74,125,75,125,76,125,77,125,78,125,79,125,80,125,81,125,82,125,83,125,84,125,85,125,86,125,87,125,88,125,89,125,90,125,91,125,92,125,93,125,94,125,95,125,96,125,97,125,98,125,99,125,100,125,101,125,102,125,103,125,104,125,105,125,106,125,107,125,108,125,109,125,111,125,112,125,113,125,114,125,115,125,116,125,117,125,118,125,120,125,121,125,122,125,123,125,124,125,125,125,126,125,127,125,128,125,129,125,130,125,131,125,132,125,133,125,134,125,135,125,136,125,137,125,138,125,139,125,140,125,141,125,142,125,143,125,144,125,145,125,146,125,147,125,148,125,149,125,150,125,151,125,152,125,101,80,48,130,81,82,111,153,16,110,133,110,167,109,250,94,245,80,220,89,6,92,70,109,95,108,134,117,139,132,104,104,86,89,178,139,32,83,113,145,77,150,73,133,18,105,1,121,38,113,246,128,164,78,202,144,71,109,132,154,7,90,188,86,5,100,240,148,235,119,165,79,26,129,225,114,210,137,122,153,52,127,222,126,127,82,89,101,117,145,127,143,131,143,235,83,150,122,237,99,165,99,134,118,248,121,87,136,54,150,42,98,171,82,130,130,84,104,112,103,119,99,107,119,237,122,1,109,211,126,227,137,208,89,18,98,201,133,165,130,76,117,31,80,203,78,165,117,235,139,74,92,254,93,75,123,164,101,209,145,202,78,37,109,95,137,39,125,38,149,197,78,40,140,219,143,115,151,75,102,129,121,209,143,236,112,120,109,153,125,154,125,155,125,156,125,157,125,158,125,159,125,160,125,161,125,162,125,163,125,164,125,165,125,167,125,168,125,169,125,170,125,171,125,172,125,173,125,175,125,176,125,177,125,178,125,179,125,180,125,181,125,182,125,183,125,184,125,185,125,186,125,187,125,188,125,189,125,190,125,191,125,192,125,193,125,194,125,195,125,196,125,197,125,198,125,199,125,200,125,201,125,202,125,203,125,204,125,205,125,206,125,207,125,208,125,209,125,210,125,211,125,212,125,213,125,214,125,215,125,216,125,217,125,218,125,219,125,220,125,221,125,222,125,223,125,224,125,225,125,226,125,227,125,228,125,229,125,230,125,231,125,232,125,233,125,234,125,235,125,236,125,237,125,238,125,239,125,240,125,241,125,242,125,243,125,244,125,245,125,246,125,247,125,248,125,249,125,250,125,61,92,178,82,70,131,98,81,14,131,91,119,118,102,184,156,172,78,202,96,190,124,179,124,207,126,149,78,102,139,111,102,136,152,89,151,131,88,108,101,92,149,132,95,201,117,86,151,223,122,222,122,192,81,175,112,152,122,234,99,118,122,160,126,150,115,237,151,69,78,120,112,93,78,82,145,169,83,81,101,231,101,252,129,5,130,142,84,49,92,154,117,160,151,216,98,217,114,189,117,69,92,121,154,202,131,64,92,128,84,233,119,62,78,174,108,90,128,210,98,110,99,232,93,119,81,221,141,30,142,47,149,241,79,229,83,231,96,172,112,103,82,80,99,67,158,31,90,38,80,55,119,119,83,226,126,133,100,43,101,137,98,152,99,20,80,53,114,201,137,179,81,192,139,221,126,71,87,204,131,167,148,155,81,27,84,251,92,251,125,252,125,253,125,254,125,255,125,0,126,1,126,2,126,3,126,4,126,5,126,6,126,7,126,8,126,9,126,10,126,11,126,12,126,13,126,14,126,15,126,16,126,17,126,18,126,19,126,20,126,21,126,22,126,23,126,24,126,25,126,26,126,27,126,28,126,29,126,30,126,31,126,32,126,33,126,34,126,35,126,36,126,37,126,38,126,39,126,40,126,41,126,42,126,43,126,44,126,45,126,46,126,47,126,48,126,49,126,50,126,51,126,52,126,53,126,54,126,55,126,56,126,57,126,58,126,60,126,61,126,62,126,63,126,64,126,66,126,67,126,68,126,69,126,70,126,72,126,73,126,74,126,75,126,76,126,77,126,78,126,79,126,80,126,81,126,82,126,83,126,84,126,85,126,86,126,87,126,88,126,89,126,90,126,91,126,92,126,93,126,202,79,227,122,90,109,225,144,143,154,128,85,150,84,97,83,175,84,0,95,233,99,119,105,239,81,104,97,10,82,42,88,216,82,78,87,13,120,11,119,183,94,119,97,224,124,91,98,151,98,162,78,149,112,3,128,247,98,228,112,96,151,119,87,219,130,239,103,245,104,213,120,151,152,209,121,243,88,179,84,239,83,52,110,75,81,59,82,162,91,254,139,175,128,67,85,166,87,115,96,81,87,45,84,122,122,80,96,84,91,167,99,160,98,227,83,99,98,199,91,175,103,237,84,159,122,230,130,119,145,147,94,228,136,56,89,174,87,14,99,232,141,239,128,87,87,119,123,169,79,235,95,189,91,62,107,33,83,80,123,194,114,70,104,255,119,54,119,247,101,181,81,143,78,212,118,191,92,165,122,117,132,78,89,65,155,128,80,94,126,95,126,96,126,97,126,98,126,99,126,100,126,101,126,102,126,103,126,104,126,105,126,106,126,107,126,108,126,109,126,110,126,111,126,112,126,113,126,114,126,115,126,116,126,117,126,118,126,119,126,120,126,121,126,122,126,123,126,124,126,125,126,126,126,127,126,128,126,129,126,131,126,132,126,133,126,134,126,135,126,136,126,137,126,138,126,139,126,140,126,141,126,142,126,143,126,144,126,145,126,146,126,147,126,148,126,149,126,150,126,151,126,152,126,153,126,154,126,156,126,157,126,158,126,174,126,180,126,187,126,188,126,214,126,228,126,236,126,249,126,10,127,16,127,30,127,55,127,57,127,59,127,60,127,61,127,62,127,63,127,64,127,65,127,67,127,70,127,71,127,72,127,73,127,74,127,75,127,76,127,77,127,78,127,79,127,82,127,83,127,136,153,39,97,131,110,100,87,6,102,70,99,240,86,236,98,105,98,211,94,20,150,131,87,201,98,135,85,33,135,74,129,163,143,102,85,177,131,101,103,86,141,221,132,106,90,15,104,230,98,238,123,17,150,112,81,156,111,48,140,253,99,200,137,210,97,6,127,194,112,229,110,5,116,148,105,252,114,202,94,206,144,23,103,106,109,94,99,179,82,98,114,1,128,108,79,229,89,106,145,217,112,157,109,210,82,80,78,247,150,109,149,126,133,202,120,47,125,33,81,146,87,194,100,139,128,123,124,234,108,241,104,94,105,183,81,152,83,168,104,129,114,206,158,241,123,248,114,187,121,19,111,6,116,78,103,204,145,164,156,60,121,137,131,84,131,15,84,23,104,61,78,137,83,177,82,62,120,134,83,41,82,136,80,139,79,208,79,86,127,89,127,91,127,92,127,93,127,94,127,96,127,99,127,100,127,101,127,102,127,103,127,107,127,108,127,109,127,111,127,112,127,115,127,117,127,118,127,119,127,120,127,122,127,123,127,124,127,125,127,127,127,128,127,130,127,131,127,132,127,133,127,134,127,135,127,136,127,137,127,139,127,141,127,143,127,144,127,145,127,146,127,147,127,149,127,150,127,151,127,152,127,153,127,155,127,156,127,160,127,162,127,163,127,165,127,166,127,168,127,169,127,170,127,171,127,172,127,173,127,174,127,177,127,179,127,180,127,181,127,182,127,183,127,186,127,187,127,190,127,192,127,194,127,195,127,196,127,198,127,199,127,200,127,201,127,203,127,205,127,207,127,208,127,209,127,210,127,211,127,214,127,215,127,217,127,218,127,219,127,220,127,221,127,222,127,226,127,227,127,226,117,203,122,146,124,165,108,182,150,155,82,131,116,233,84,233,79,84,128,178,131,222,143,112,149,201,94,28,96,159,109,24,94,91,101,56,129,254,148,75,96,188,112,195,126,174,124,201,81,129,104,177,124,111,130,36,78,134,143,207,145,126,102,174,78,5,140,169,100,74,128,218,80,151,117,206,113,229,91,189,143,102,111,134,78,130,100,99,149,214,94,153,101,23,82,194,136,200,112,163,82,14,115,51,116,151,103,247,120,22,151,52,78,187,144,222,156,203,109,219,81,65,141,29,84,206,98,178,115,241,131,246,150,132,159,195,148,54,79,154,127,204,81,117,112,117,150,173,92,134,152,230,83,228,78,156,110,9,116,180,105,107,120,143,153,89,117,24,82,36,118,65,109,243,103,109,81,153,159,75,128,153,84,60,123,191,122,228,127,231,127,232,127,234,127,235,127,236,127,237,127,239,127,242,127,244,127,245,127,246,127,247,127,248,127,249,127,250,127,253,127,254,127,255,127,2,128,7,128,8,128,9,128,10,128,14,128,15,128,17,128,19,128,26,128,27,128,29,128,30,128,31,128,33,128,35,128,36,128,43,128,44,128,45,128,46,128,47,128,48,128,50,128,52,128,57,128,58,128,60,128,62,128,64,128,65,128,68,128,69,128,71,128,72,128,73,128,78,128,79,128,80,128,81,128,83,128,85,128,86,128,87,128,89,128,91,128,92,128,93,128,94,128,95,128,96,128,97,128,98,128,99,128,100,128,101,128,102,128,103,128,104,128,107,128,108,128,109,128,110,128,111,128,112,128,114,128,115,128,116,128,117,128,118,128,119,128,120,128,121,128,122,128,123,128,124,128,125,128,134,150,132,87,226,98,71,150,124,105,4,90,2,100,211,123,15,111,75,150,166,130,98,83,133,152,144,94,137,112,179,99,100,83,79,134,129,156,147,158,140,120,50,151,239,141,66,141,127,158,94,111,132,121,85,95,70,150,46,98,116,154,21,84,221,148,163,79,197,101,101,92,97,92,21,127,81,134,47,108,139,95,135,115,228,110,255,126,230,92,27,99,106,91,230,110,117,83,113,78,160,99,101,117,161,98,110,143,38,79,209,78,166,108,182,126,186,139,29,132,186,135,87,127,59,144,35,149,169,123,161,154,248,136,61,132,27,109,134,154,220,126,136,89,187,158,155,115,1,120,130,134,108,154,130,154,27,86,23,84,203,87,112,78,166,158,86,83,200,143,9,129,146,119,146,153,238,134,225,110,19,133,252,102,98,97,43,111,126,128,129,128,130,128,133,128,136,128,138,128,141,128,142,128,143,128,144,128,145,128,146,128,148,128,149,128,151,128,153,128,158,128,163,128,166,128,167,128,168,128,172,128,176,128,179,128,181,128,182,128,184,128,185,128,187,128,197,128,199,128,200,128,201,128,202,128,203,128,207,128,208,128,209,128,210,128,211,128,212,128,213,128,216,128,223,128,224,128,226,128,227,128,230,128,238,128,245,128,247,128,249,128,251,128,254,128,255,128,0,129,1,129,3,129,4,129,5,129,7,129,8,129,11,129,12,129,21,129,23,129,25,129,27,129,28,129,29,129,31,129,32,129,33,129,34,129,35,129,36,129,37,129,38,129,39,129,40,129,41,129,42,129,43,129,45,129,46,129,48,129,51,129,52,129,53,129,55,129,57,129,58,129,59,129,60,129,61,129,63,129,41,140,146,130,43,131,242,118,19,108,217,95,189,131,43,115,5,131,26,149,219,107,219,119,198,148,111,83,2,131,146,81,61,94,140,140,56,141,72,78,171,115,154,103,133,104,118,145,9,151,100,113,161,108,9,119,146,90,65,149,207,107,142,127,39,102,208,91,185,89,154,90,232,149,247,149,236,78,12,132,153,132,172,106,223,118,48,149,27,115,166,104,95,91,47,119,154,145,97,151,220,124,247,143,28,140,37,95,115,124,216,121,197,137,204,108,28,135,198,91,66,94,201,104,32,119,245,126,149,81,77,81,201,82,41,90,5,127,98,151,215,130,207,99,132,119,208,133,210,121,58,110,153,94,153,89,17,133,109,112,17,108,191,98,191,118,79,101,175,96,253,149,14,102,159,135,35,158,237,148,13,84,125,84,44,140,120,100,64,129,65,129,66,129,67,129,68,129,69,129,71,129,73,129,77,129,78,129,79,129,82,129,86,129,87,129,88,129,91,129,92,129,93,129,94,129,95,129,97,129,98,129,99,129,100,129,102,129,104,129,106,129,107,129,108,129,111,129,114,129,115,129,117,129,118,129,119,129,120,129,129,129,131,129,132,129,133,129,134,129,135,129,137,129,139,129,140,129,141,129,142,129,144,129,146,129,147,129,148,129,149,129,150,129,151,129,153,129,154,129,158,129,159,129,160,129,161,129,162,129,164,129,165,129,167,129,169,129,171,129,172,129,173,129,174,129,175,129,176,129,177,129,178,129,180,129,181,129,182,129,183,129,184,129,185,129,188,129,189,129,190,129,191,129,196,129,197,129,199,129,200,129,201,129,203,129,205,129,206,129,207,129,208,129,209,129,210,129,211,129,121,100,17,134,33,106,156,129,232,120,105,100,84,155,185,98,43,103,171,131,168,88,216,158,171,108,32,111,222,91,76,150,11,140,95,114,208,103,199,98,97,114,169,78,198,89,205,107,147,88,174,102,85,94,223,82,85,97,40,103,238,118,102,119,103,114,70,122,255,98,234,84,80,84,160,148,163,144,28,90,179,126,22,108,67,78,118,89,16,128,72,89,87,83,55,117,190,150,202,86,32,99,17,129,124,96,249,149,214,109,98,84,129,153,133,81,233,90,253,128,174,89,19,151,42,80,229,108,60,92,223,98,96,79,63,83,123,129,6,144,186,110,43,133,200,98,116,94,190,120,181,100,123,99,245,95,24,90,127,145,31,158,63,92,79,99,66,128,125,91,110,85,74,149,77,149,133,109,168,96,224,103,222,114,221,81,129,91,212,129,213,129,214,129,215,129,216,129,217,129,218,129,219,129,220,129,221,129,222,129,223,129,224,129,225,129,226,129,228,129,229,129,230,129,232,129,233,129,235,129,238,129,239,129,240,129,241,129,242,129,245,129,246,129,247,129,248,129,249,129,250,129,253,129,255,129,3,130,7,130,8,130,9,130,10,130,11,130,14,130,15,130,17,130,19,130,21,130,22,130,23,130,24,130,25,130,26,130,29,130,32,130,36,130,37,130,38,130,39,130,41,130,46,130,50,130,58,130,60,130,61,130,63,130,64,130,65,130,66,130,67,130,69,130,70,130,72,130,74,130,76,130,77,130,78,130,80,130,81,130,82,130,83,130,84,130,85,130,86,130,87,130,89,130,91,130,92,130,93,130,94,130,96,130,97,130,98,130,99,130,100,130,101,130,102,130,103,130,105,130,231,98,222,108,91,114,109,98,174,148,189,126,19,129,83,109,156,81,4,95,116,89,170,82,18,96,115,89,150,102,80,134,159,117,42,99,230,97,239,124,250,139,230,84,39,107,37,158,180,107,213,133,85,84,118,80,164,108,106,85,180,141,44,114,21,94,21,96,54,116,205,98,146,99,76,114,152,95,67,110,62,109,0,101,88,111,216,118,208,120,252,118,84,117,36,82,219,83,83,78,158,94,193,101,42,128,214,128,155,98,134,84,40,82,174,112,141,136,209,141,225,108,120,84,218,128,249,87,244,136,84,141,106,150,77,145,105,79,155,108,183,85,198,118,48,120,168,98,249,112,142,111,109,95,236,132,218,104,124,120,247,123,168,129,11,103,79,158,103,99,176,120,111,87,18,120,57,151,121,98,171,98,136,82,53,116,215,107,106,130,107,130,108,130,109,130,113,130,117,130,118,130,119,130,120,130,123,130,124,130,128,130,129,130,131,130,133,130,134,130,135,130,137,130,140,130,144,130,147,130,148,130,149,130,150,130,154,130,155,130,158,130,160,130,162,130,163,130,167,130,178,130,181,130,182,130,186,130,187,130,188,130,191,130,192,130,194,130,195,130,197,130,198,130,201,130,208,130,214,130,217,130,218,130,221,130,226,130,231,130,232,130,233,130,234,130,236,130,237,130,238,130,240,130,242,130,243,130,245,130,246,130,248,130,250,130,252,130,253,130,254,130,255,130,0,131,10,131,11,131,13,131,16,131,18,131,19,131,22,131,24,131,25,131,29,131,30,131,31,131,32,131,33,131,34,131,35,131,36,131,37,131,38,131,41,131,42,131,46,131,48,131,50,131,55,131,59,131,61,131,100,85,62,129,178,117,174,118,57,83,222,117,251,80,65,92,108,139,199,123,79,80,71,114,151,154,216,152,2,111,226,116,104,121,135,100,165,119,252,98,145,152,43,141,193,84,88,128,82,78,106,87,249,130,13,132,115,94,237,81,246,116,196,139,79,92,97,87,252,108,135,152,70,90,52,120,68,155,235,143,149,124,86,82,81,98,250,148,198,78,134,131,97,132,233,131,178,132,212,87,52,103,3,87,110,102,102,109,49,140,221,102,17,112,31,103,58,107,22,104,26,98,187,89,3,78,196,81,6,111,210,103,143,108,118,81,203,104,71,89,103,107,102,117,14,93,16,129,80,159,215,101,72,121,65,121,145,154,119,141,130,92,94,78,1,79,47,84,81,89,12,120,104,86,20,108,196,143,3,95,125,108,227,108,171,139,144,99,62,131,63,131,65,131,66,131,68,131,69,131,72,131,74,131,75,131,76,131,77,131,78,131,83,131,85,131,86,131,87,131,88,131,89,131,93,131,98,131,112,131,113,131,114,131,115,131,116,131,117,131,118,131,121,131,122,131,126,131,127,131,128,131,129,131,130,131,131,131,132,131,135,131,136,131,138,131,139,131,140,131,141,131,143,131,144,131,145,131,148,131,149,131,150,131,151,131,153,131,154,131,157,131,159,131,161,131,162,131,163,131,164,131,165,131,166,131,167,131,172,131,173,131,174,131,175,131,181,131,187,131,190,131,191,131,194,131,195,131,196,131,198,131,200,131,201,131,203,131,205,131,206,131,208,131,209,131,210,131,211,131,213,131,215,131,217,131,218,131,219,131,222,131,226,131,227,131,228,131,230,131,231,131,232,131,235,131,236,131,237,131,112,96,61,109,117,114,102,98,142,148,197,148,67,83,193,143,126,123,223,78,38,140,126,78,212,158,177,148,179,148,77,82,92,111,99,144,69,109,52,140,17,88,76,93,32,107,73,107,170,103,91,84,84,129,140,127,153,88,55,133,58,95,162,98,71,106,57,149,114,101,132,96,101,104,167,119,84,78,168,79,231,93,152,151,172,100,216,127,237,92,207,79,141,122,7,82,4,131,20,78,47,96,131,122,166,148,181,79,178,78,230,121,52,116,228,82,185,130,210,100,189,121,221,91,129,108,82,151,123,143,34,108,62,80,127,83,5,110,206,100,116,102,48,108,197,96,119,152,247,139,134,94,60,116,119,122,203,121,24,78,177,144,3,116,66,108,218,86,75,145,197,108,139,141,58,83,198,134,242,102,175,142,72,92,113,154,32,110,238,131,239,131,243,131,244,131,245,131,246,131,247,131,250,131,251,131,252,131,254,131,255,131,0,132,2,132,5,132,7,132,8,132,9,132,10,132,16,132,18,132,19,132,20,132,21,132,22,132,23,132,25,132,26,132,27,132,30,132,31,132,32,132,33,132,34,132,35,132,41,132,42,132,43,132,44,132,45,132,46,132,47,132,48,132,50,132,51,132,52,132,53,132,54,132,55,132,57,132,58,132,59,132,62,132,63,132,64,132,65,132,66,132,67,132,68,132,69,132,71,132,72,132,73,132,74,132,75,132,76,132,77,132,78,132,79,132,80,132,82,132,83,132,84,132,85,132,86,132,88,132,93,132,94,132,95,132,96,132,98,132,100,132,101,132,102,132,103,132,104,132,106,132,110,132,111,132,112,132,114,132,116,132,119,132,121,132,123,132,124,132,214,83,54,90,139,159,163,141,187,83,8,87,167,152,67,103,155,145,201,108,104,81,202,117,243,98,172,114,56,82,157,82,58,127,148,112,56,118,116,83,74,158,183,105,110,120,192,150,217,136,164,127,54,113,195,113,137,81,211,103,228,116,228,88,24,101,183,86,169,139,118,153,112,98,213,126,249,96,237,112,236,88,193,78,186,78,205,95,231,151,251,78,164,139,3,82,138,89,171,126,84,98,205,78,229,101,14,98,56,131,201,132,99,131,141,135,148,113,182,110,185,91,210,126,151,81,201,99,212,103,137,128,57,131,21,136,18,81,122,91,130,89,177,143,115,78,93,108,101,81,37,137,111,143,46,150,74,133,94,116,16,149,240,149,166,109,229,130,49,95,146,100,18,109,40,132,110,129,195,156,94,88,91,141,9,78,193,83,125,132,126,132,127,132,128,132,129,132,131,132,132,132,133,132,134,132,138,132,141,132,143,132,144,132,145,132,146,132,147,132,148,132,149,132,150,132,152,132,154,132,155,132,157,132,158,132,159,132,160,132,162,132,163,132,164,132,165,132,166,132,167,132,168,132,169,132,170,132,171,132,172,132,173,132,174,132,176,132,177,132,179,132,181,132,182,132,183,132,187,132,188,132,190,132,192,132,194,132,195,132,197,132,198,132,199,132,200,132,203,132,204,132,206,132,207,132,210,132,212,132,213,132,215,132,216,132,217,132,218,132,219,132,220,132,222,132,225,132,226,132,228,132,231,132,232,132,233,132,234,132,235,132,237,132,238,132,239,132,241,132,242,132,243,132,244,132,245,132,246,132,247,132,248,132,249,132,250,132,251,132,253,132,254,132,0,133,1,133,2,133,30,79,99,101,81,104,211,85,39,78,20,100,154,154,107,98,194,90,95,116,114,130,169,109,238,104,231,80,142,131,2,120,64,103,57,82,153,108,177,126,187,80,101,85,94,113,91,123,82,102,202,115,235,130,73,103,113,92,32,82,125,113,107,136,234,149,85,150,197,100,97,141,179,129,132,85,85,108,71,98,46,127,146,88,36,79,70,85,79,141,76,102,10,78,26,92,243,136,162,104,78,99,13,122,231,112,141,130,250,82,246,151,17,92,232,84,181,144,205,126,98,89,74,141,199,134,12,130,13,130,102,141,68,100,4,92,81,97,137,109,62,121,190,139,55,120,51,117,123,84,56,79,171,142,241,109,32,90,197,126,94,121,136,108,161,91,118,90,26,117,190,128,78,97,23,110,240,88,31,117,37,117,114,114,71,83,243,126,3,133,4,133,5,133,6,133,7,133,8,133,9,133,10,133,11,133,13,133,14,133,15,133,16,133,18,133,20,133,21,133,22,133,24,133,25,133,27,133,28,133,29,133,30,133,32,133,34,133,35,133,36,133,37,133], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+74356);
/* memory initializer */ allocate([38,133,39,133,40,133,41,133,42,133,45,133,46,133,47,133,48,133,49,133,50,133,51,133,52,133,53,133,54,133,62,133,63,133,64,133,65,133,66,133,68,133,69,133,70,133,71,133,75,133,76,133,77,133,78,133,79,133,80,133,81,133,82,133,83,133,84,133,85,133,87,133,88,133,90,133,91,133,92,133,93,133,95,133,96,133,97,133,98,133,99,133,101,133,102,133,103,133,105,133,106,133,107,133,108,133,109,133,110,133,111,133,112,133,113,133,115,133,117,133,118,133,119,133,120,133,124,133,125,133,127,133,128,133,129,133,1,119,219,118,105,82,220,128,35,87,8,94,49,89,238,114,189,101,127,110,215,139,56,92,113,134,65,83,243,119,254,98,246,101,192,78,223,152,128,134,158,91,198,139,242,83,226,119,127,79,78,92,118,154,203,89,15,95,58,121,235,88,22,78,255,103,139,78,237,98,147,138,29,144,191,82,47,102,220,85,108,86,2,144,213,78,141,79,202,145,112,153,15,108,2,94,67,96,164,91,198,137,213,139,54,101,75,98,150,153,136,91,255,91,136,99,46,85,215,83,38,118,125,81,44,133,162,103,179,104,138,107,146,98,147,143,212,83,18,130,209,109,143,117,102,78,78,141,112,91,159,113,175,133,145,102,217,102,114,127,0,135,205,158,32,159,94,92,47,103,240,143,17,104,95,103,13,98,214,122,133,88,182,94,112,101,49,111,130,133,131,133,134,133,136,133,137,133,138,133,139,133,140,133,141,133,142,133,144,133,145,133,146,133,147,133,148,133,149,133,150,133,151,133,152,133,153,133,154,133,157,133,158,133,159,133,160,133,161,133,162,133,163,133,165,133,166,133,167,133,169,133,171,133,172,133,173,133,177,133,178,133,179,133,180,133,181,133,182,133,184,133,186,133,187,133,188,133,189,133,190,133,191,133,192,133,194,133,195,133,196,133,197,133,198,133,199,133,200,133,202,133,203,133,204,133,205,133,206,133,209,133,210,133,212,133,214,133,215,133,216,133,217,133,218,133,219,133,221,133,222,133,223,133,224,133,225,133,226,133,227,133,229,133,230,133,231,133,232,133,234,133,235,133,236,133,237,133,238,133,239,133,240,133,241,133,242,133,243,133,244,133,245,133,246,133,247,133,248,133,85,96,55,82,13,128,84,100,112,136,41,117,5,94,19,104,244,98,28,151,204,83,61,114,1,140,52,108,97,119,14,122,46,84,172,119,122,152,28,130,244,139,85,120,20,103,193,112,175,101,149,100,54,86,29,96,193,121,248,83,29,78,123,107,134,128,250,91,227,85,219,86,58,79,60,79,114,153,243,93,126,103,56,128,2,96,130,152,1,144,139,91,188,139,245,139,28,100,88,130,222,100,253,85,207,130,101,145,215,79,32,125,31,144,159,124,243,80,81,88,175,110,191,91,201,139,131,128,120,145,156,132,151,123,125,134,139,150,143,150,229,126,211,154,142,120,129,92,87,122,66,144,167,150,95,121,89,91,95,99,11,123,209,132,173,104,6,85,41,127,16,116,34,125,1,149,64,98,76,88,214,78,131,91,121,89,84,88,249,133,250,133,252,133,253,133,254,133,0,134,1,134,2,134,3,134,4,134,6,134,7,134,8,134,9,134,10,134,11,134,12,134,13,134,14,134,15,134,16,134,18,134,19,134,20,134,21,134,23,134,24,134,25,134,26,134,27,134,28,134,29,134,30,134,31,134,32,134,33,134,34,134,35,134,36,134,37,134,38,134,40,134,42,134,43,134,44,134,45,134,46,134,47,134,48,134,49,134,50,134,51,134,52,134,53,134,54,134,55,134,57,134,58,134,59,134,61,134,62,134,63,134,64,134,65,134,66,134,67,134,68,134,69,134,70,134,71,134,72,134,73,134,74,134,75,134,76,134,82,134,83,134,85,134,86,134,87,134,88,134,89,134,91,134,92,134,93,134,95,134,96,134,97,134,99,134,100,134,101,134,102,134,103,134,104,134,105,134,106,134,109,115,30,99,75,142,15,142,206,128,212,130,172,98,240,83,240,108,94,145,42,89,1,96,112,108,77,87,74,100,42,141,43,118,233,110,91,87,128,106,240,117,109,111,45,140,8,140,102,87,239,107,146,136,179,120,162,99,249,83,173,112,100,108,88,88,42,100,2,88,224,104,155,129,16,85,214,124,24,80,186,142,204,109,159,141,235,112,143,99,155,109,212,110,230,126,4,132,67,104,3,144,216,109,118,150,168,139,87,89,121,114,228,133,126,129,188,117,138,138,175,104,84,82,34,142,17,149,208,99,152,152,68,142,124,85,83,79,255,102,143,86,213,96,149,109,67,82,73,92,41,89,251,109,107,88,48,117,28,117,108,96,20,130,70,129,17,99,97,103,226,143,58,119,243,141,52,141,193,148,22,94,133,83,44,84,195,112,109,134,111,134,112,134,114,134,115,134,116,134,117,134,118,134,119,134,120,134,131,134,132,134,133,134,134,134,135,134,136,134,137,134,142,134,143,134,144,134,145,134,146,134,148,134,150,134,151,134,152,134,153,134,154,134,155,134,158,134,159,134,160,134,161,134,162,134,165,134,166,134,171,134,173,134,174,134,178,134,179,134,183,134,184,134,185,134,187,134,188,134,189,134,190,134,191,134,193,134,194,134,195,134,197,134,200,134,204,134,205,134,210,134,211,134,213,134,214,134,215,134,218,134,220,134,221,134,224,134,225,134,226,134,227,134,229,134,230,134,231,134,232,134,234,134,235,134,236,134,239,134,245,134,246,134,247,134,250,134,251,134,252,134,253,134,255,134,1,135,4,135,5,135,6,135,11,135,12,135,14,135,15,135,16,135,17,135,20,135,22,135,64,108,247,94,92,80,173,78,173,94,58,99,71,130,26,144,80,104,110,145,179,119,12,84,220,148,100,95,229,122,118,104,69,99,82,123,223,126,219,117,119,80,149,98,52,89,15,144,248,81,195,121,129,122,254,86,146,95,20,144,130,109,96,92,31,87,16,84,84,81,77,110,226,86,168,99,147,152,127,129,21,135,42,137,0,144,30,84,111,92,192,129,214,98,88,98,49,129,53,158,64,150,110,154,124,154,45,105,165,89,211,98,62,85,22,99,199,84,217,134,60,109,3,90,230,116,156,136,106,107,22,89,76,140,47,95,126,110,169,115,125,152,56,78,247,112,140,91,151,120,61,99,90,102,150,118,203,96,155,91,73,90,7,78,85,129,106,108,139,115,161,78,137,103,81,127,128,95,250,101,27,103,216,95,132,89,1,90,25,135,27,135,29,135,31,135,32,135,36,135,38,135,39,135,40,135,42,135,43,135,44,135,45,135,47,135,48,135,50,135,51,135,53,135,54,135,56,135,57,135,58,135,60,135,61,135,64,135,65,135,66,135,67,135,68,135,69,135,70,135,74,135,75,135,77,135,79,135,80,135,81,135,82,135,84,135,85,135,86,135,88,135,90,135,91,135,92,135,93,135,94,135,95,135,97,135,98,135,102,135,103,135,104,135,105,135,106,135,107,135,108,135,109,135,111,135,113,135,114,135,115,135,117,135,119,135,120,135,121,135,122,135,127,135,128,135,129,135,132,135,134,135,135,135,137,135,138,135,140,135,142,135,143,135,144,135,145,135,146,135,148,135,149,135,150,135,152,135,153,135,154,135,155,135,156,135,157,135,158,135,160,135,161,135,162,135,163,135,164,135,205,93,174,95,113,83,230,151,221,143,69,104,244,86,47,85,223,96,58,78,77,111,244,126,199,130,14,132,212,89,31,79,42,79,62,92,172,126,42,103,26,133,115,84,79,117,195,128,130,85,79,155,77,79,45,110,19,140,9,92,112,97,107,83,31,118,41,110,138,134,135,101,251,149,185,126,59,84,51,122,10,125,238,149,225,85,193,127,238,116,29,99,23,135,161,109,157,122,17,98,161,101,103,83,225,99,131,108,235,93,92,84,168,148,76,78,97,108,236,139,75,92,224,101,156,130,167,104,62,84,52,84,203,107,102,107,148,78,66,99,72,83,30,130,13,79,174,79,94,87,10,98,254,150,100,102,105,114,255,82,161,82,159,96,239,139,20,102,153,113,144,103,127,137,82,120,253,119,112,102,59,86,56,84,33,149,122,114,165,135,166,135,167,135,169,135,170,135,174,135,176,135,177,135,178,135,180,135,182,135,183,135,184,135,185,135,187,135,188,135,190,135,191,135,193,135,194,135,195,135,196,135,197,135,199,135,200,135,201,135,204,135,205,135,206,135,207,135,208,135,212,135,213,135,214,135,215,135,216,135,217,135,218,135,220,135,221,135,222,135,223,135,225,135,226,135,227,135,228,135,230,135,231,135,232,135,233,135,235,135,236,135,237,135,239,135,240,135,241,135,242,135,243,135,244,135,245,135,246,135,247,135,248,135,250,135,251,135,252,135,253,135,255,135,0,136,1,136,2,136,4,136,5,136,6,136,7,136,8,136,9,136,11,136,12,136,13,136,14,136,15,136,16,136,17,136,18,136,20,136,23,136,24,136,25,136,26,136,28,136,29,136,30,136,31,136,32,136,35,136,0,122,111,96,12,94,137,96,157,129,21,89,220,96,132,113,239,112,170,110,80,108,128,114,132,106,173,136,45,94,96,78,179,90,156,85,227,148,23,109,251,124,153,150,15,98,198,126,142,119,126,134,35,83,30,151,150,143,135,102,225,92,160,79,237,114,11,78,166,83,15,89,19,84,128,99,40,149,72,81,217,78,156,156,164,126,184,84,36,141,84,136,55,130,242,149,142,109,38,95,204,90,62,102,105,150,176,115,46,115,191,83,122,129,133,153,161,127,170,91,119,150,80,150,191,126,248,118,162,83,118,149,153,153,177,123,68,137,88,110,97,78,212,127,101,121,230,139,243,96,205,84,171,78,121,152,247,93,97,106,207,80,17,84,97,140,39,132,93,120,4,151,74,82,238,84,163,86,0,149,136,109,181,91,198,109,83,102,36,136,37,136,38,136,39,136,40,136,41,136,42,136,43,136,44,136,45,136,46,136,47,136,48,136,49,136,51,136,52,136,53,136,54,136,55,136,56,136,58,136,59,136,61,136,62,136,63,136,65,136,66,136,67,136,70,136,71,136,72,136,73,136,74,136,75,136,78,136,79,136,80,136,81,136,82,136,83,136,85,136,86,136,88,136,90,136,91,136,92,136,93,136,94,136,95,136,96,136,102,136,103,136,106,136,109,136,111,136,113,136,115,136,116,136,117,136,118,136,120,136,121,136,122,136,123,136,124,136,128,136,131,136,134,136,135,136,137,136,138,136,140,136,142,136,143,136,144,136,145,136,147,136,148,136,149,136,151,136,152,136,153,136,154,136,155,136,157,136,158,136,159,136,160,136,161,136,163,136,165,136,166,136,167,136,168,136,169,136,170,136,15,92,93,91,33,104,150,128,120,85,17,123,72,101,84,105,155,78,71,107,78,135,139,151,79,83,31,99,58,100,170,144,156,101,193,128,16,140,153,81,176,104,120,83,249,135,200,97,196,108,251,108,34,140,81,92,170,133,175,130,12,149,35,107,155,143,176,101,251,95,195,95,225,79,69,136,31,102,101,129,41,115,250,96,116,81,17,82,139,87,98,95,162,144,76,136,146,145,120,94,79,103,39,96,211,89,68,81,246,81,248,128,8,83,121,108,196,150,138,113,17,79,238,79,158,127,61,103,197,85,8,149,192,121,150,136,227,126,159,88,12,98,0,151,90,134,24,86,123,152,144,95,184,139,196,132,87,145,217,83,237,101,143,94,92,117,100,96,110,125,127,90,234,126,237,126,105,143,167,85,163,91,172,96,203,101,132,115,172,136,174,136,175,136,176,136,178,136,179,136,180,136,181,136,182,136,184,136,185,136,186,136,187,136,189,136,190,136,191,136,192,136,195,136,196,136,199,136,200,136,202,136,203,136,204,136,205,136,207,136,208,136,209,136,211,136,214,136,215,136,218,136,219,136,220,136,221,136,222,136,224,136,225,136,230,136,231,136,233,136,234,136,235,136,236,136,237,136,238,136,239,136,242,136,245,136,246,136,247,136,250,136,251,136,253,136,255,136,0,137,1,137,3,137,4,137,5,137,6,137,7,137,8,137,9,137,11,137,12,137,13,137,14,137,15,137,17,137,20,137,21,137,22,137,23,137,24,137,28,137,29,137,30,137,31,137,32,137,34,137,35,137,36,137,38,137,39,137,40,137,41,137,44,137,45,137,46,137,47,137,49,137,50,137,51,137,53,137,55,137,9,144,99,118,41,119,218,126,116,151,155,133,102,91,116,122,234,150,64,136,203,82,143,113,170,95,236,101,226,139,251,91,111,154,225,93,137,107,91,108,173,139,175,139,10,144,197,143,139,83,188,98,38,158,45,158,64,84,43,78,189,130,89,114,156,134,22,93,89,136,175,109,197,150,209,84,154,78,182,139,9,113,189,84,9,150,223,112,249,109,208,118,37,78,20,120,18,135,169,92,246,94,0,138,156,152,14,150,142,112,191,108,68,89,169,99,60,119,77,136,20,111,115,130,48,88,213,113,140,83,26,120,193,150,1,85,102,95,48,113,180,91,26,140,140,154,131,107,46,89,47,158,231,121,104,103,108,98,111,79,161,117,138,127,11,109,51,150,39,108,240,78,210,117,123,81,55,104,62,111,128,144,112,129,150,89,118,116,56,137,57,137,58,137,59,137,60,137,61,137,62,137,63,137,64,137,66,137,67,137,69,137,70,137,71,137,72,137,73,137,74,137,75,137,76,137,77,137,78,137,79,137,80,137,81,137,82,137,83,137,84,137,85,137,86,137,87,137,88,137,89,137,90,137,91,137,92,137,93,137,96,137,97,137,98,137,99,137,100,137,101,137,103,137,104,137,105,137,106,137,107,137,108,137,109,137,110,137,111,137,112,137,113,137,114,137,115,137,116,137,117,137,118,137,119,137,120,137,121,137,122,137,124,137,125,137,126,137,128,137,130,137,132,137,133,137,135,137,136,137,137,137,138,137,139,137,140,137,141,137,142,137,143,137,144,137,145,137,146,137,147,137,148,137,149,137,150,137,151,137,152,137,153,137,154,137,155,137,156,137,157,137,158,137,159,137,160,137,161,137,71,100,39,92,101,144,145,122,35,140,218,89,172,84,0,130,111,131,129,137,0,128,48,105,78,86,54,128,55,114,206,145,182,81,95,78,117,152,150,99,26,78,246,83,243,102,75,129,28,89,178,109,0,78,249,88,59,83,214,99,241,148,157,79,10,79,99,136,144,152,55,89,87,144,251,121,234,78,240,128,145,117,130,108,156,91,232,89,93,95,5,105,129,134,26,80,242,93,89,78,227,119,229,78,122,130,145,98,19,102,145,144,121,92,191,78,121,95,198,129,56,144,132,128,171,117,166,78,212,136,15,97,197,107,198,95,73,78,202,118,162,110,227,139,174,139,10,140,209,139,2,95,252,127,204,127,206,126,53,131,107,131,224,86,183,107,243,151,52,150,251,89,31,84,246,148,235,109,197,91,110,153,57,92,21,95,144,150,162,137,163,137,164,137,165,137,166,137,167,137,168,137,169,137,170,137,171,137,172,137,173,137,174,137,175,137,176,137,177,137,178,137,179,137,180,137,181,137,182,137,183,137,184,137,185,137,186,137,187,137,188,137,189,137,190,137,191,137,192,137,195,137,205,137,211,137,212,137,213,137,215,137,216,137,217,137,219,137,221,137,223,137,224,137,225,137,226,137,228,137,231,137,232,137,233,137,234,137,236,137,237,137,238,137,240,137,241,137,242,137,244,137,245,137,246,137,247,137,248,137,249,137,250,137,251,137,252,137,253,137,254,137,255,137,1,138,2,138,3,138,4,138,5,138,6,138,8,138,9,138,10,138,11,138,12,138,13,138,14,138,15,138,16,138,17,138,18,138,19,138,20,138,21,138,22,138,23,138,24,138,25,138,26,138,27,138,28,138,29,138,112,83,241,130,49,106,116,90,112,158,148,94,40,127,185,131,36,132,37,132,103,131,71,135,206,143,98,141,200,118,113,95,150,152,108,120,32,102,223,84,229,98,99,79,195,129,200,117,184,94,205,150,10,142,249,134,143,84,243,108,140,109,56,108,127,96,199,82,40,117,125,94,24,79,160,96,231,95,36,92,49,117,174,144,192,148,185,114,185,108,56,110,73,145,9,103,203,83,243,83,81,79,201,145,241,139,200,83,124,94,194,143,228,109,142,78,194,118,134,105,94,134,26,97,6,130,89,79,222,79,62,144,124,156,9,97,29,110,20,110,133,150,136,78,49,90,232,150,14,78,127,92,185,121,135,91,237,139,189,127,137,115,223,87,139,130,193,144,1,84,71,144,187,85,234,92,161,95,8,97,50,107,241,114,178,128,137,138,30,138,31,138,32,138,33,138,34,138,35,138,36,138,37,138,38,138,39,138,40,138,41,138,42,138,43,138,44,138,45,138,46,138,47,138,48,138,49,138,50,138,51,138,52,138,53,138,54,138,55,138,56,138,57,138,58,138,59,138,60,138,61,138,63,138,64,138,65,138,66,138,67,138,68,138,69,138,70,138,71,138,73,138,74,138,75,138,76,138,77,138,78,138,79,138,80,138,81,138,82,138,83,138,84,138,85,138,86,138,87,138,88,138,89,138,90,138,91,138,92,138,93,138,94,138,95,138,96,138,97,138,98,138,99,138,100,138,101,138,102,138,103,138,104,138,105,138,106,138,107,138,108,138,109,138,110,138,111,138,112,138,113,138,114,138,115,138,116,138,117,138,118,138,119,138,120,138,122,138,123,138,124,138,125,138,126,138,127,138,128,138,116,109,211,91,213,136,132,152,107,140,109,154,51,158,10,110,164,81,67,81,163,87,129,136,159,83,244,99,149,143,237,86,88,84,6,87,63,115,144,110,24,127,220,143,209,130,63,97,40,96,98,150,240,102,166,126,138,141,195,141,165,148,179,92,164,124,8,103,166,96,5,150,24,128,145,78,231,144,0,83,104,150,65,81,208,143,116,133,93,145,85,102,245,151,85,91,29,83,56,120,66,103,61,104,201,84,126,112,176,91,125,143,141,81,40,87,177,84,18,101,130,102,94,141,67,141,15,129,108,132,109,144,223,124,255,81,251,133,163,103,233,101,161,111,164,134,129,142,106,86,32,144,130,118,118,112,229,113,35,141,233,98,25,82,253,108,60,141,14,96,158,88,142,97,254,102,96,141,78,98,179,85,35,110,45,103,103,143,129,138,130,138,131,138,132,138,133,138,134,138,135,138,136,138,139,138,140,138,141,138,142,138,143,138,144,138,145,138,146,138,148,138,149,138,150,138,151,138,152,138,153,138,154,138,155,138,156,138,157,138,158,138,159,138,160,138,161,138,162,138,163,138,164,138,165,138,166,138,167,138,168,138,169,138,170,138,171,138,172,138,173,138,174,138,175,138,176,138,177,138,178,138,179,138,180,138,181,138,182,138,183,138,184,138,185,138,186,138,187,138,188,138,189,138,190,138,191,138,192,138,193,138,194,138,195,138,196,138,197,138,198,138,199,138,200,138,201,138,202,138,203,138,204,138,205,138,206,138,207,138,208,138,209,138,210,138,211,138,212,138,213,138,214,138,215,138,216,138,217,138,218,138,219,138,220,138,221,138,222,138,223,138,224,138,225,138,226,138,227,138,225,148,248,149,40,119,5,104,168,105,139,84,77,78,184,112,200,139,88,100,139,101,133,91,132,122,58,80,232,91,187,119,225,107,121,138,152,124,190,108,207,118,169,101,151,143,45,93,85,92,56,134,8,104,96,83,24,98,217,122,91,110,253,126,31,106,224,122,112,95,51,111,32,95,140,99,168,109,86,103,8,78,16,94,38,141,215,78,192,128,52,118,156,150,219,98,45,102,126,98,188,108,117,141,103,113,105,127,70,81,135,128,236,83,110,144,152,98,242,84,240,134,153,143,5,128,23,149,23,133,217,143,89,109,205,115,159,101,31,119,4,117,39,120,251,129,30,141,136,148,166,79,149,103,185,117,202,139,7,151,47,99,71,149,53,150,184,132,35,99,65,119,129,95,240,114,137,78,20,96,116,101,239,98,99,107,63,101,228,138,229,138,230,138,231,138,232,138,233,138,234,138,235,138,236,138,237,138,238,138,239,138,240,138,241,138,242,138,243,138,244,138,245,138,246,138,247,138,248,138,249,138,250,138,251,138,252,138,253,138,254,138,255,138,0,139,1,139,2,139,3,139,4,139,5,139,6,139,8,139,9,139,10,139,11,139,12,139,13,139,14,139,15,139,16,139,17,139,18,139,19,139,20,139,21,139,22,139,23,139,24,139,25,139,26,139,27,139,28,139,29,139,30,139,31,139,32,139,33,139,34,139,35,139,36,139,37,139,39,139,40,139,41,139,42,139,43,139,44,139,45,139,46,139,47,139,48,139,49,139,50,139,51,139,52,139,53,139,54,139,55,139,56,139,57,139,58,139,59,139,60,139,61,139,62,139,63,139,64,139,65,139,66,139,67,139,68,139,69,139,39,94,199,117,209,144,193,139,157,130,157,103,47,101,49,84,24,135,229,119,162,128,2,129,65,108,75,78,199,126,76,128,244,118,13,105,150,107,103,98,60,80,132,79,64,87,7,99,98,107,190,141,234,83,232,101,184,126,215,95,26,99,183,99,243,129,244,129,110,127,28,94,217,92,54,82,122,102,233,121,26,122,40,141,153,112,212,117,222,110,187,108,146,122,45,78,197,118,224,95,159,148,119,136,200,126,205,121,191,128,205,145,242,78,23,79,31,130,104,84,222,93,50,109,204,139,165,124,116,143,152,128,26,94,146,84,177,118,153,91,60,102,164,154,224,115,42,104,219,134,49,103,42,115,248,139,219,139,16,144,249,122,219,112,110,113,196,98,169,119,49,86,59,78,87,132,241,103,169,82,192,134,46,141,248,148,81,123,70,139,71,139,72,139,73,139,74,139,75,139,76,139,77,139,78,139,79,139,80,139,81,139,82,139,83,139,84,139,85,139,86,139,87,139,88,139,89,139,90,139,91,139,92,139,93,139,94,139,95,139,96,139,97,139,98,139,99,139,100,139,101,139,103,139,104,139,105,139,106,139,107,139,109,139,110,139,111,139,112,139,113,139,114,139,115,139,116,139,117,139,118,139,119,139,120,139,121,139,122,139,123,139,124,139,125,139,126,139,127,139,128,139,129,139,130,139,131,139,132,139,133,139,134,139,135,139,136,139,137,139,138,139,139,139,140,139,141,139,142,139,143,139,144,139,145,139,146,139,147,139,148,139,149,139,150,139,151,139,152,139,153,139,154,139,155,139,156,139,157,139,158,139,159,139,172,139,177,139,187,139,199,139,208,139,234,139,9,140,30,140,79,79,232,108,93,121,123,154,147,98,42,114,253,98,19,78,22,120,108,143,176,100,90,141,198,123,105,104,132,94,197,136,134,89,158,100,238,88,182,114,14,105,37,149,253,143,88,141,96,87,0,127,6,140,198,81,73,99,217,98,83,83,76,104,34,116,1,131,76,145,68,85,64,119,124,112,74,109,121,81,168,84,68,141,255,89,203,110,196,109,92,91,43,125,212,78,125,124,211,110,80,91,234,129,13,110,87,91,3,155,213,104,42,142,151,91,252,126,59,96,181,126,185,144,112,141,79,89,205,99,223,121,179,141,82,83,207,101,86,121,197,139,59,150,196,126,187,148,130,126,52,86,137,145,0,103,106,127,10,92,117,144,40,102,230,93,80,79,222,103,90,80,92,79,80,87,167,94,16,232,17,232,18,232,19,232,20,232,56,140,57,140,58,140,59,140,60,140,61,140,62,140,63,140,64,140,66,140,67,140,68,140,69,140,72,140,74,140,75,140,77,140,78,140,79,140,80,140,81,140,82,140,83,140,84,140,86,140,87,140,88,140,89,140,91,140,92,140,93,140,94,140,95,140,96,140,99,140,100,140,101,140,102,140,103,140,104,140,105,140,108,140,109,140,110,140,111,140,112,140,113,140,114,140,116,140,117,140,118,140,119,140,123,140,124,140,125,140,126,140,127,140,128,140,129,140,131,140,132,140,134,140,135,140,136,140,139,140,141,140,142,140,143,140,144,140,145,140,146,140,147,140,149,140,150,140,151,140,153,140,154,140,155,140,156,140,157,140,158,140,159,140,160,140,161,140,162,140,163,140,164,140,165,140,166,140,167,140,168,140,169,140,170,140,171,140,172,140,173,140,141,78,12,78,64,81,16,78,255,94,69,83,21,78,152,78,30,78,50,155,108,91,105,86,40,78,186,121,63,78,21,83,71,78,45,89,59,114,110,83,16,108,223,86,228,128,151,153,211,107,126,119,23,159,54,78,159,78,16,159,92,78,105,78,147,78,136,130,91,91,108,85,15,86,196,78,141,83,157,83,163,83,165,83,174,83,101,151,93,141,26,83,245,83,38,83,46,83,62,83,92,141,102,83,99,83,2,82,8,82,14,82,45,82,51,82,63,82,64,82,76,82,94,82,97,82,92,82,175,132,125,82,130,82,129,82,144,82,147,82,130,81,84,127,187,78,195,78,201,78,194,78,232,78,225,78,235,78,222,78,27,79,243,78,34,79,100,79,245,78,37,79,39,79,9,79,43,79,94,79,103,79,56,101,90,79,93,79,174,140,175,140,176,140,177,140,178,140,179,140,180,140,181,140,182,140,183,140,184,140,185,140,186,140,187,140,188,140,189,140,190,140,191,140,192,140,193,140,194,140,195,140,196,140,197,140,198,140,199,140,200,140,201,140,202,140,203,140,204,140,205,140,206,140,207,140,208,140,209,140,210,140,211,140,212,140,213,140,214,140,215,140,216,140,217,140,218,140,219,140,220,140,221,140,222,140,223,140,224,140,225,140,226,140,227,140,228,140,229,140,230,140,231,140,232,140,233,140,234,140,235,140,236,140,237,140,238,140,239,140,240,140,241,140,242,140,243,140,244,140,245,140,246,140,247,140,248,140,249,140,250,140,251,140,252,140,253,140,254,140,255,140,0,141,1,141,2,141,3,141,4,141,5,141,6,141,7,141,8,141,9,141,10,141,11,141,12,141,13,141,95,79,87,79,50,79,61,79,118,79,116,79,145,79,137,79,131,79,143,79,126,79,123,79,170,79,124,79,172,79,148,79,230,79,232,79,234,79,197,79,218,79,227,79,220,79,209,79,223,79,248,79,41,80,76,80,243,79,44,80,15,80,46,80,45,80,254,79,28,80,12,80,37,80,40,80,126,80,67,80,85,80,72,80,78,80,108,80,123,80,165,80,167,80,169,80,186,80,214,80,6,81,237,80,236,80,230,80,238,80,7,81,11,81,221,78,61,108,88,79,101,79,206,79,160,159,70,108,116,124,110,81,253,93,201,158,152,153,129,81,20,89,249,82,13,83,7,138,16,83,235,81,25,89,85,81,160,78,86,81,179,78,110,136,164,136,181,78,20,129,210,136,128,121,52,91,3,136,184,127,171,81,177,81,189,81,188,81,14,141,15,141,16,141,17,141,18,141,19,141,20,141,21,141,22,141,23,141,24,141,25,141,26,141,27,141,28,141,32,141,81,141,82,141,87,141,95,141,101,141,104,141,105,141,106,141,108,141,110,141,111,141,113,141,114,141,120,141,121,141,122,141,123,141,124,141,125,141,126,141,127,141,128,141,130,141,131,141,134,141,135,141,136,141,137,141,140,141,141,141,142,141,143,141,144,141,146,141,147,141,149,141,150,141,151,141,152,141,153,141,154,141,155,141,156,141,157,141,158,141,160,141,161,141,162,141,164,141,165,141,166,141,167,141,168,141,169,141,170,141,171,141,172,141,173,141,174,141,175,141,176,141,178,141,182,141,183,141,185,141,187,141,189,141,192,141,193,141,194,141,197,141,199,141,200,141,201,141,202,141,205,141,208,141,210,141,211,141,212,141,199,81,150,81,162,81,165,81,160,139,166,139,167,139,170,139,180,139,181,139,183,139,194,139,195,139,203,139,207,139,206,139,210,139,211,139,212,139,214,139,216,139,217,139,220,139,223,139,224,139,228,139,232,139,233,139,238,139,240,139,243,139,246,139,249,139,252,139,255,139,0,140,2,140,4,140,7,140,12,140,15,140,17,140,18,140,20,140,21,140,22,140,25,140,27,140,24,140,29,140,31,140,32,140,33,140,37,140,39,140,42,140,43,140,46,140,47,140,50,140,51,140,53,140,54,140,105,83,122,83,29,150,34,150,33,150,49,150,42,150,61,150,60,150,66,150,73,150,84,150,95,150,103,150,108,150,114,150,116,150,136,150,141,150,151,150,176,150,151,144,155,144,157,144,153,144,172,144,161,144,180,144,179,144,182,144,186,144,213,141,216,141,217,141,220,141,224,141,225,141,226,141,229,141,230,141,231,141,233,141,237,141,238,141,240,141,241,141,242,141,244,141,246,141,252,141,254,141,255,141,0,142,1,142,2,142,3,142,4,142,6,142,7,142,8,142,11,142,13,142,14,142,16,142,17,142,18,142,19,142,21,142,22,142,23,142,24,142,25,142,26,142,27,142,28,142,32,142,33,142,36,142,37,142,38,142,39,142,40,142,43,142,45,142,48,142,50,142,51,142,52,142,54,142,55,142,56,142,59,142,60,142,62,142,63,142,67,142,69,142,70,142,76,142,77,142,78,142,79,142,80,142,83,142,84,142,85,142,86,142,87,142,88,142,90,142,91,142,92,142,93,142,94,142,95,142,96,142,97,142,98,142,99,142,100,142,101,142,103,142,104,142,106,142,107,142,110,142,113,142,184,144,176,144,207,144,197,144,190,144,208,144,196,144,199,144,211,144,230,144,226,144,220,144,215,144,219,144,235,144,239,144,254,144,4,145,34,145,30,145,35,145,49,145,47,145,57,145,67,145,70,145,13,82,66,89,162,82,172,82,173,82,190,82,255,84,208,82,214,82,240,82,223,83,238,113,205,119,244,94,245,81,252,81,47,155,182,83,1,95,90,117,239,93,76,87,169,87,161,87,126,88,188,88,197,88,209,88,41,87,44,87,42,87,51,87,57,87,46,87,47,87,92,87,59,87,66,87,105,87,133,87,107,87,134,87,124,87,123,87,104,87,109,87,118,87,115,87,173,87,164,87,140,87,178,87,207,87,167,87,180,87,147,87,160,87,213,87,216,87,218,87,217,87,210,87,184,87,244,87,239,87,248,87,228,87,221,87,115,142,117,142,119,142,120,142,121,142,122,142,123,142,125,142,126,142,128,142,130,142,131,142,132,142,134,142,136,142,137,142,138,142,139,142,140,142,141,142,142,142,145,142,146,142,147,142,149,142,150,142,151,142,152,142,153,142,154,142,155,142,157,142,159,142,160,142,161,142,162,142,163,142,164,142,165,142,166,142,167,142,168,142,169,142,170,142,173,142,174,142,176,142,177,142,179,142,180,142,181,142,182,142,183,142,184,142,185,142,187,142,188,142,189,142,190,142,191,142,192,142,193,142,194,142,195,142,196,142,197,142,198,142,199,142,200,142,201,142,202,142,203,142,204,142,205,142,207,142,208,142,209,142,210,142,211,142,212,142,213,142,214,142,215,142,216,142,217,142,218,142,219,142,220,142,221,142,222,142,223,142,224,142,225,142,226,142,227,142,228,142,11,88,13,88,253,87,237,87,0,88,30,88,25,88,68,88,32,88,101,88,108,88,129,88,137,88,154,88,128,88,168,153,25,159,255,97,121,130,125,130,127,130,143,130,138,130,168,130,132,130,142,130,145,130,151,130,153,130,171,130,184,130,190,130,176,130,200,130,202,130,227,130,152,130,183,130,174,130,203,130,204,130,193,130,169,130,180,130,161,130,170,130,159,130,196,130,206,130,164,130,225,130,9,131,247,130,228,130,15,131,7,131,220,130,244,130,210,130,216,130,12,131,251,130,211,130,17,131,26,131,6,131,20,131,21,131,224,130,213,130,28,131,81,131,91,131,92,131,8,131,146,131,60,131,52,131,49,131,155,131,94,131,47,131,79,131,71,131,67,131,95,131,64,131,23,131,96,131,45,131,58,131,51,131,102,131,101,131,229,142,230,142,231,142,232,142,233,142,234,142,235,142,236,142,237,142,238,142,239,142,240,142,241,142,242,142,243,142,244,142,245,142,246,142,247,142,248,142,249,142,250,142,251,142,252,142,253,142,254,142,255,142,0,143,1,143,2,143,3,143,4,143,5,143,6,143,7,143,8,143,9,143,10,143,11,143,12,143,13,143,14,143,15,143,16,143,17,143,18,143,19,143,20,143,21,143,22,143,23,143,24,143,25,143,26,143,27,143,28,143,29,143,30,143,31,143,32,143,33,143,34,143,35,143,36,143,37,143,38,143,39,143,40,143,41,143,42,143,43,143,44,143,45,143,46,143,47,143,48,143,49,143,50,143,51,143,52,143,53,143,54,143,55,143,56,143,57,143,58,143,59,143,60,143,61,143,62,143,63,143,64,143,65,143,66,143,67,143,68,143,104,131,27,131,105,131,108,131,106,131,109,131,110,131,176,131,120,131,179,131,180,131,160,131,170,131,147,131,156,131,133,131,124,131,182,131,169,131,125,131,184,131,123,131,152,131,158,131,168,131,186,131,188,131,193,131,1,132,229,131,216,131,7,88,24,132,11,132,221,131,253,131,214,131,28,132,56,132,17,132,6,132,212,131,223,131,15,132,3,132,248,131,249,131,234,131,197,131,192,131,38,132,240,131,225,131,92,132,81,132,90,132,89,132,115,132,135,132,136,132,122,132,137,132,120,132,60,132,70,132,105,132,118,132,140,132,142,132,49,132,109,132,193,132,205,132,208,132,230,132,189,132,211,132,202,132,191,132,186,132,224,132,161,132,185,132,180,132,151,132,229,132,227,132,12,133,13,117,56,133,240,132,57,133,31,133,58,133,69,143,70,143,71,143,72,143,73,143,74,143,75,143,76,143,77,143,78,143,79,143,80,143,81,143,82,143,83,143,84,143,85,143,86,143,87,143,88,143,89,143,90,143,91,143,92,143,93,143,94,143,95,143,96,143,97,143,98,143,99,143,100,143,101,143,106,143,128,143,140,143,146,143,157,143,160,143,161,143,162,143,164,143,165,143,166,143,167,143,170,143,172,143,173,143,174,143,175,143,178,143,179,143,180,143,181,143,183,143,184,143,186,143,187,143,188,143,191,143,192,143,195,143,198,143,201,143,202,143,203,143,204,143,205,143,207,143,210,143,214,143,215,143,218,143,224,143,225,143,227,143,231,143,236,143,239,143,241,143,242,143,244,143,245,143,246,143,250,143,251,143,252,143,254,143,255,143,7,144,8,144,12,144,14,144,19,144,21,144,24,144,86,133,59,133,255,132,252,132,89,133,72,133,104,133,100,133,94,133,122,133,162,119,67,133,114,133,123,133,164,133,168,133,135,133,143,133,121,133,174,133,156,133,133,133,185,133,183,133,176,133,211,133,193,133,220,133,255,133,39,134,5,134,41,134,22,134,60,134,254,94,8,95,60,89,65,89,55,128,85,89,90,89,88,89,15,83,34,92,37,92,44,92,52,92,76,98,106,98,159,98,187,98,202,98,218,98,215,98,238,98,34,99,246,98,57,99,75,99,67,99,173,99,246,99,113,99,122,99,142,99,180,99,109,99,172,99,138,99,105,99,174,99,188,99,242,99,248,99,224,99,255,99,196,99,222,99,206,99,82,100,198,99,190,99,69,100,65,100,11,100,27,100,32,100,12,100,38,100,33,100,94,100,132,100,109,100,150,100,25,144,28,144,35,144,36,144,37,144,39,144,40,144,41,144,42,144,43,144,44,144,48,144,49,144,50,144,51,144,52,144,55,144,57,144,58,144,61,144,63,144,64,144,67,144,69,144,70,144,72,144,73,144,74,144,75,144,76,144,78,144,84,144,85,144,86,144,89,144,90,144,92,144,93,144,94,144,95,144,96,144,97,144,100,144,102,144,103,144,105,144,106,144,107,144,108,144,111,144,112,144,113,144,114,144,115,144,118,144,119,144,120,144,121,144,122,144,123,144,124,144,126,144,129,144,132,144,133,144,134,144,135,144,137,144,138,144,140,144,141,144,142,144,143,144,144,144,146,144,148,144,150,144,152,144,154,144,156,144,158,144,159,144,160,144,164,144,165,144,167,144,168,144,169,144,171,144,173,144,178,144,183,144,188,144,189,144,191,144,192,144,122,100,183,100,184,100,153,100,186,100,192,100,208,100,215,100,228,100,226,100,9,101,37,101,46,101,11,95,210,95,25,117,17,95,95,83,241,83,253,83,233,83,232,83,251,83,18,84,22,84,6,84,75,84,82,84,83,84,84,84,86,84,67,84,33,84,87,84,89,84,35,84,50,84,130,84,148,84,119,84,113,84,100,84,154,84,155,84,132,84,118,84,102,84,157,84,208,84,173,84,194,84,180,84,210,84,167,84,166,84,211,84,212,84,114,84,163,84,213,84,187,84,191,84,204,84,217,84,218,84,220,84,169,84,170,84,164,84,221,84,207,84,222,84,27,85,231,84,32,85,253,84,20,85,243,84,34,85,35,85,15,85,17,85,39,85,42,85,103,85,143,85,181,85,73,85,109,85,65,85,85,85,63,85,80,85,60,85,194,144,195,144,198,144,200,144,201,144,203,144,204,144,205,144,210,144,212,144,213,144,214,144,216,144,217,144,218,144,222,144,223,144,224,144,227,144,228,144,229,144,233,144,234,144,236,144,238,144,240,144,241,144,242,144,243,144,245,144,246,144,247,144,249,144,250,144,251,144,252,144,255,144,0,145,1,145,3,145,5,145,6,145,7,145,8,145,9,145,10,145,11,145,12,145,13,145,14,145,15,145,16,145,17,145,18,145,19,145,20,145,21,145,22,145,23,145,24,145,26,145,27,145,28,145,29,145,31,145,32,145,33,145,36,145,37,145,38,145,39,145,40,145,41,145,42,145,43,145,44,145,45,145,46,145,48,145,50,145,51,145,52,145,53,145,54,145,55,145,56,145,58,145,59,145,60,145,61,145,62,145,63,145,64,145,65,145,66,145,68,145,55,85,86,85,117,85,118,85,119,85,51,85,48,85,92,85,139,85,210,85,131,85,177,85,185,85,136,85,129,85,159,85,126,85,214,85,145,85,123,85,223,85,189,85,190,85,148,85,153,85,234,85,247,85,201,85,31,86,209,85,235,85,236,85,212,85,230,85,221,85,196,85,239,85,229,85,242,85,243,85,204,85,205,85,232,85,245,85,228,85,148,143,30,86,8,86,12,86,1,86,36,86,35,86,254,85,0,86,39,86,45,86,88,86,57,86,87,86,44,86,77,86,98,86,89,86,92,86,76,86,84,86,134,86,100,86,113,86,107,86,123,86,124,86,133,86,147,86,175,86,212,86,215,86,221,86,225,86,245,86,235,86,249,86,255,86,4,87,10,87,9,87,28,87,15,94,25,94,20,94,17,94,49,94,59,94,60,94,69,145,71,145,72,145,81,145,83,145,84,145,85,145,86,145,88,145,89,145,91,145,92,145,95,145,96,145,102,145,103,145,104,145,107,145,109,145,115,145,122,145,123,145,124,145,128,145,129,145,130,145,131,145,132,145,134,145,136,145,138,145,142,145,143,145,147,145,148,145,149,145,150,145,151,145,152,145,153,145,156,145,157,145,158,145,159,145,160,145,161,145,164,145,165,145,166,145,167,145,168,145,169,145,171,145,172,145,176,145,177,145,178,145,179,145,182,145,183,145,184,145,185,145,187,145,188,145,189,145,190,145,191,145,192,145,193,145,194,145,195,145,196,145,197,145,198,145,200,145,203,145,208,145,210,145,211,145,212,145,213,145,214,145,215,145,216,145,217,145,218,145,219,145,221,145,222,145,223,145,224,145,225,145,226,145,227,145,228,145,229,145,55,94,68,94,84,94,91,94,94,94,97,94,140,92,122,92,141,92,144,92,150,92,136,92,152,92,153,92,145,92,154,92,156,92,181,92,162,92,189,92,172,92,171,92,177,92,163,92,193,92,183,92,196,92,210,92,228,92,203,92,229,92,2,93,3,93,39,93,38,93,46,93,36,93,30,93,6,93,27,93,88,93,62,93,52,93,61,93,108,93,91,93,111,93,93,93,107,93,75,93,74,93,105,93,116,93,130,93,153,93,157,93,115,140,183,93,197,93,115,95,119,95,130,95,135,95,137,95,140,95,149,95,153,95,156,95,168,95,173,95,181,95,188,95,98,136,97,95,173,114,176,114,180,114,183,114,184,114,195,114,193,114,206,114,205,114,210,114,232,114,239,114,233,114,242,114,244,114,247,114,1,115,243,114,3,115,250,114,230,145,231,145,232,145,233,145,234,145,235,145,236,145,237,145,238,145,239,145,240,145,241,145,242,145,243,145,244,145,245,145,246,145,247,145,248,145,249,145,250,145,251,145,252,145,253,145,254,145,255,145,0,146,1,146,2,146,3,146,4,146,5,146,6,146,7,146,8,146,9,146,10,146,11,146,12,146,13,146,14,146,15,146,16,146,17,146,18,146,19,146,20,146,21,146,22,146,23,146,24,146,25,146,26,146,27,146,28,146,29,146,30,146,31,146,32,146,33,146,34,146,35,146,36,146,37,146,38,146,39,146,40,146,41,146,42,146,43,146,44,146,45,146,46,146,47,146,48,146,49,146,50,146,51,146,52,146,53,146,54,146,55,146,56,146,57,146,58,146,59,146,60,146,61,146,62,146,63,146,64,146,65,146,66,146,67,146,68,146,69,146,251,114,23,115,19,115,33,115,10,115,30,115,29,115,21,115,34,115,57,115,37,115,44,115,56,115,49,115,80,115,77,115,87,115,96,115,108,115,111,115,126,115,27,130,37,89,231,152,36,89,2,89,99,153,103,153,104,153,105,153,106,153,107,153,108,153,116,153,119,153,125,153,128,153,132,153,135,153,138,153,141,153,144,153,145,153,147,153,148,153,149,153,128,94,145,94,139,94,150,94,165,94,160,94,185,94,181,94,190,94,179,94,83,141,210,94,209,94,219,94,232,94,234,94,186,129,196,95,201,95,214,95,207,95,3,96,238,95,4,96,225,95,228,95,254,95,5,96,6,96,234,95,237,95,248,95,25,96,53,96,38,96,27,96,15,96,13,96,41,96,43,96,10,96,63,96,33,96,120,96,121,96,123,96,122,96,66,96,70,146,71,146,72,146,73,146,74,146,75,146,76,146,77,146,78,146,79,146,80,146,81,146,82,146,83,146,84,146,85,146,86,146,87,146,88,146,89,146,90,146,91,146,92,146,93,146,94,146,95,146,96,146,97,146,98,146,99,146,100,146,101,146,102,146,103,146,104,146,105,146,106,146,107,146,108,146,109,146,110,146,111,146,112,146,113,146,114,146,115,146,117,146,118,146,119,146,120,146,121,146,122,146,123,146,124,146,125,146,126,146,127,146,128,146,129,146,130,146,131,146,132,146,133,146,134,146,135,146,136,146,137,146,138,146,139,146,140,146,141,146,143,146,144,146,145,146,146,146,147,146,148,146,149,146,150,146,151,146,152,146,153,146,154,146,155,146,156,146,157,146,158,146,159,146,160,146,161,146,162,146,163,146,164,146,165,146,166,146,167,146,106,96,125,96,150,96,154,96,173,96,157,96,131,96,146,96,140,96,155,96,236,96,187,96,177,96,221,96,216,96,198,96,218,96,180,96,32,97,38,97,21,97,35,97,244,96,0,97,14,97,43,97,74,97,117,97,172,97,148,97,167,97,183,97,212,97,245,97,221,95,179,150,233,149,235,149,241,149,243,149,245,149,246,149,252,149,254,149,3,150,4,150,6,150,8,150,10,150,11,150,12,150,13,150,15,150,18,150,21,150,22,150,23,150,25,150,26,150,44,78,63,114,21,98,53,108,84,108,92,108,74,108,163,108,133,108,144,108,148,108,140,108,104,108,105,108,116,108,118,108,134,108,169,108,208,108,212,108,173,108,247,108,248,108,241,108,215,108,178,108,224,108,214,108,250,108,235,108,238,108,177,108,211,108,239,108,254,108,168,146,169,146,170,146,171,146,172,146,173,146,175,146,176,146,177,146,178,146,179,146,180,146,181,146,182,146,183,146,184,146,185,146,186,146,187,146,188,146,189,146,190,146,191,146,192,146,193,146,194,146,195,146,196,146,197,146,198,146,199,146,201,146,202,146,203,146,204,146,205,146,206,146,207,146,208,146,209,146,210,146,211,146,212,146,213,146,214,146,215,146,216,146,217,146,218,146,219,146,220,146,221,146,222,146,223,146,224,146,225,146,226,146,227,146,228,146,229,146,230,146,231,146,232,146,233,146,234,146,235,146,236,146,237,146,238,146,239,146,240,146,241,146,242,146,243,146,244,146,245,146,246,146,247,146,248,146,249,146,250,146,251,146,252,146,253,146,254,146,255,146,0,147,1,147,2,147,3,147,4,147,5,147,6,147,7,147,8,147,9,147,57,109,39,109,12,109,67,109,72,109,7,109,4,109,25,109,14,109,43,109,77,109,46,109,53,109,26,109,79,109,82,109,84,109,51,109,145,109,111,109,158,109,160,109,94,109,147,109,148,109,92,109,96,109,124,109,99,109,26,110,199,109,197,109,222,109,14,110,191,109,224,109,17,110,230,109,221,109,217,109,22,110,171,109,12,110,174,109,43,110,110,110,78,110,107,110,178,110,95,110,134,110,83,110,84,110,50,110,37,110,68,110,223,110,177,110,152,110,224,110,45,111,226,110,165,110,167,110,189,110,187,110,183,110,215,110,180,110,207,110,143,110,194,110,159,110,98,111,70,111,71,111,36,111,21,111,249,110,47,111,54,111,75,111,116,111,42,111,9,111,41,111,137,111,141,111,140,111,120,111,114,111,124,111,122,111,209,111,10,147,11,147,12,147,13,147,14,147,15,147,16,147,17,147,18,147,19,147,20,147,21,147,22,147,23,147,24,147,25,147,26,147,27,147], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+84596);
/* memory initializer */ allocate([28,147,29,147,30,147,31,147,32,147,33,147,34,147,35,147,36,147,37,147,38,147,39,147,40,147,41,147,42,147,43,147,44,147,45,147,46,147,47,147,48,147,49,147,50,147,51,147,52,147,53,147,54,147,55,147,56,147,57,147,58,147,59,147,60,147,61,147,63,147,64,147,65,147,66,147,67,147,68,147,69,147,70,147,71,147,72,147,73,147,74,147,75,147,76,147,77,147,78,147,79,147,80,147,81,147,82,147,83,147,84,147,85,147,86,147,87,147,88,147,89,147,90,147,91,147,92,147,93,147,94,147,95,147,96,147,97,147,98,147,99,147,100,147,101,147,102,147,103,147,104,147,105,147,107,147,201,111,167,111,185,111,182,111,194,111,225,111,238,111,222,111,224,111,239,111,26,112,35,112,27,112,57,112,53,112,79,112,94,112,128,91,132,91,149,91,147,91,165,91,184,91,47,117,158,154,52,100,228,91,238,91,48,137,240,91,71,142,7,139,182,143,211,143,213,143,229,143,238,143,228,143,233,143,230,143,243,143,232,143,5,144,4,144,11,144,38,144,17,144,13,144,22,144,33,144,53,144,54,144,45,144,47,144,68,144,81,144,82,144,80,144,104,144,88,144,98,144,91,144,185,102,116,144,125,144,130,144,136,144,131,144,139,144,80,95,87,95,86,95,88,95,59,92,171,84,80,92,89,92,113,91,99,92,102,92,188,127,42,95,41,95,45,95,116,130,60,95,59,155,110,92,129,89,131,89,141,89,169,89,170,89,163,89,108,147,109,147,110,147,111,147,112,147,113,147,114,147,115,147,116,147,117,147,118,147,119,147,120,147,121,147,122,147,123,147,124,147,125,147,126,147,127,147,128,147,129,147,130,147,131,147,132,147,133,147,134,147,135,147,136,147,137,147,138,147,139,147,140,147,141,147,142,147,144,147,145,147,146,147,147,147,148,147,149,147,150,147,151,147,152,147,153,147,154,147,155,147,156,147,157,147,158,147,159,147,160,147,161,147,162,147,163,147,164,147,165,147,166,147,167,147,168,147,169,147,170,147,171,147,172,147,173,147,174,147,175,147,176,147,177,147,178,147,179,147,180,147,181,147,182,147,183,147,184,147,185,147,186,147,187,147,188,147,189,147,190,147,191,147,192,147,193,147,194,147,195,147,196,147,197,147,198,147,199,147,200,147,201,147,203,147,204,147,205,147,151,89,202,89,171,89,158,89,164,89,210,89,178,89,175,89,215,89,190,89,5,90,6,90,221,89,8,90,227,89,216,89,249,89,12,90,9,90,50,90,52,90,17,90,35,90,19,90,64,90,103,90,74,90,85,90,60,90,98,90,117,90,236,128,170,90,155,90,119,90,122,90,190,90,235,90,178,90,210,90,212,90,184,90,224,90,227,90,241,90,214,90,230,90,216,90,220,90,9,91,23,91,22,91,50,91,55,91,64,91,21,92,28,92,90,91,101,91,115,91,81,91,83,91,98,91,117,154,119,154,120,154,122,154,127,154,125,154,128,154,129,154,133,154,136,154,138,154,144,154,146,154,147,154,150,154,152,154,155,154,156,154,157,154,159,154,160,154,162,154,163,154,165,154,167,154,159,126,161,126,163,126,165,126,168,126,169,126,206,147,207,147,208,147,209,147,210,147,211,147,212,147,213,147,215,147,216,147,217,147,218,147,219,147,220,147,221,147,222,147,223,147,224,147,225,147,226,147,227,147,228,147,229,147,230,147,231,147,232,147,233,147,234,147,235,147,236,147,237,147,238,147,239,147,240,147,241,147,242,147,243,147,244,147,245,147,246,147,247,147,248,147,249,147,250,147,251,147,252,147,253,147,254,147,255,147,0,148,1,148,2,148,3,148,4,148,5,148,6,148,7,148,8,148,9,148,10,148,11,148,12,148,13,148,14,148,15,148,16,148,17,148,18,148,19,148,20,148,21,148,22,148,23,148,24,148,25,148,26,148,27,148,28,148,29,148,30,148,31,148,32,148,33,148,34,148,35,148,36,148,37,148,38,148,39,148,40,148,41,148,42,148,43,148,44,148,45,148,46,148,173,126,176,126,190,126,192,126,193,126,194,126,201,126,203,126,204,126,208,126,212,126,215,126,219,126,224,126,225,126,232,126,235,126,238,126,239,126,241,126,242,126,13,127,246,126,250,126,251,126,254,126,1,127,2,127,3,127,7,127,8,127,11,127,12,127,15,127,17,127,18,127,23,127,25,127,28,127,27,127,31,127,33,127,34,127,35,127,36,127,37,127,38,127,39,127,42,127,43,127,44,127,45,127,47,127,48,127,49,127,50,127,51,127,53,127,122,94,127,117,219,93,62,117,149,144,142,115,145,115,174,115,162,115,159,115,207,115,194,115,209,115,183,115,179,115,192,115,201,115,200,115,229,115,217,115,124,152,10,116,233,115,231,115,222,115,186,115,242,115,15,116,42,116,91,116,38,116,37,116,40,116,48,116,46,116,44,116,47,148,48,148,49,148,50,148,51,148,52,148,53,148,54,148,55,148,56,148,57,148,58,148,59,148,60,148,61,148,63,148,64,148,65,148,66,148,67,148,68,148,69,148,70,148,71,148,72,148,73,148,74,148,75,148,76,148,77,148,78,148,79,148,80,148,81,148,82,148,83,148,84,148,85,148,86,148,87,148,88,148,89,148,90,148,91,148,92,148,93,148,94,148,95,148,96,148,97,148,98,148,99,148,100,148,101,148,102,148,103,148,104,148,105,148,106,148,108,148,109,148,110,148,111,148,112,148,113,148,114,148,115,148,116,148,117,148,118,148,119,148,120,148,121,148,122,148,123,148,124,148,125,148,126,148,127,148,128,148,129,148,130,148,131,148,132,148,145,148,150,148,152,148,199,148,207,148,211,148,212,148,218,148,230,148,251,148,28,149,32,149,27,116,26,116,65,116,92,116,87,116,85,116,89,116,119,116,109,116,126,116,156,116,142,116,128,116,129,116,135,116,139,116,158,116,168,116,169,116,144,116,167,116,210,116,186,116,234,151,235,151,236,151,76,103,83,103,94,103,72,103,105,103,165,103,135,103,106,103,115,103,152,103,167,103,117,103,168,103,158,103,173,103,139,103,119,103,124,103,240,103,9,104,216,103,10,104,233,103,176,103,12,104,217,103,181,103,218,103,179,103,221,103,0,104,195,103,184,103,226,103,14,104,193,103,253,103,50,104,51,104,96,104,97,104,78,104,98,104,68,104,100,104,131,104,29,104,85,104,102,104,65,104,103,104,64,104,62,104,74,104,73,104,41,104,181,104,143,104,116,104,119,104,147,104,107,104,194,104,110,105,252,104,31,105,32,105,249,104,39,149,51,149,61,149,67,149,72,149,75,149,85,149,90,149,96,149,110,149,116,149,117,149,119,149,120,149,121,149,122,149,123,149,124,149,125,149,126,149,128,149,129,149,130,149,131,149,132,149,133,149,134,149,135,149,136,149,137,149,138,149,139,149,140,149,141,149,142,149,143,149,144,149,145,149,146,149,147,149,148,149,149,149,150,149,151,149,152,149,153,149,154,149,155,149,156,149,157,149,158,149,159,149,160,149,161,149,162,149,163,149,164,149,165,149,166,149,167,149,168,149,169,149,170,149,171,149,172,149,173,149,174,149,175,149,176,149,177,149,178,149,179,149,180,149,181,149,182,149,183,149,184,149,185,149,186,149,187,149,188,149,189,149,190,149,191,149,192,149,193,149,194,149,195,149,196,149,197,149,198,149,199,149,200,149,201,149,202,149,203,149,36,105,240,104,11,105,1,105,87,105,227,104,16,105,113,105,57,105,96,105,66,105,93,105,132,105,107,105,128,105,152,105,120,105,52,105,204,105,135,105,136,105,206,105,137,105,102,105,99,105,121,105,155,105,167,105,187,105,171,105,173,105,212,105,177,105,193,105,202,105,223,105,149,105,224,105,141,105,255,105,47,106,237,105,23,106,24,106,101,106,242,105,68,106,62,106,160,106,80,106,91,106,53,106,142,106,121,106,61,106,40,106,88,106,124,106,145,106,144,106,169,106,151,106,171,106,55,115,82,115,129,107,130,107,135,107,132,107,146,107,147,107,141,107,154,107,155,107,161,107,170,107,107,143,109,143,113,143,114,143,115,143,117,143,118,143,120,143,119,143,121,143,122,143,124,143,126,143,129,143,130,143,132,143,135,143,139,143,204,149,205,149,206,149,207,149,208,149,209,149,210,149,211,149,212,149,213,149,214,149,215,149,216,149,217,149,218,149,219,149,220,149,221,149,222,149,223,149,224,149,225,149,226,149,227,149,228,149,229,149,230,149,231,149,236,149,255,149,7,150,19,150,24,150,27,150,30,150,32,150,35,150,36,150,37,150,38,150,39,150,40,150,41,150,43,150,44,150,45,150,47,150,48,150,55,150,56,150,57,150,58,150,62,150,65,150,67,150,74,150,78,150,79,150,81,150,82,150,83,150,86,150,87,150,88,150,89,150,90,150,92,150,93,150,94,150,96,150,99,150,101,150,102,150,107,150,109,150,110,150,111,150,112,150,113,150,115,150,120,150,121,150,122,150,123,150,124,150,125,150,126,150,127,150,128,150,129,150,130,150,131,150,132,150,135,150,137,150,138,150,141,143,142,143,143,143,152,143,154,143,206,142,11,98,23,98,27,98,31,98,34,98,33,98,37,98,36,98,44,98,231,129,239,116,244,116,255,116,15,117,17,117,19,117,52,101,238,101,239,101,240,101,10,102,25,102,114,103,3,102,21,102,0,102,133,112,247,102,29,102,52,102,49,102,54,102,53,102,6,128,95,102,84,102,65,102,79,102,86,102,97,102,87,102,119,102,132,102,140,102,167,102,157,102,190,102,219,102,220,102,230,102,233,102,50,141,51,141,54,141,59,141,61,141,64,141,69,141,70,141,72,141,73,141,71,141,77,141,85,141,89,141,199,137,202,137,203,137,204,137,206,137,207,137,208,137,209,137,110,114,159,114,93,114,102,114,111,114,126,114,127,114,132,114,139,114,141,114,143,114,146,114,8,99,50,99,176,99,140,150,142,150,145,150,146,150,147,150,149,150,150,150,154,150,155,150,157,150,158,150,159,150,160,150,161,150,162,150,163,150,164,150,165,150,166,150,168,150,169,150,170,150,171,150,172,150,173,150,174,150,175,150,177,150,178,150,180,150,181,150,183,150,184,150,186,150,187,150,191,150,194,150,195,150,200,150,202,150,203,150,208,150,209,150,211,150,212,150,214,150,215,150,216,150,217,150,218,150,219,150,220,150,221,150,222,150,223,150,225,150,226,150,227,150,228,150,229,150,230,150,231,150,235,150,236,150,237,150,238,150,240,150,241,150,242,150,244,150,245,150,248,150,250,150,251,150,252,150,253,150,255,150,2,151,3,151,5,151,10,151,11,151,12,151,16,151,17,151,18,151,20,151,21,151,23,151,24,151,25,151,26,151,27,151,29,151,31,151,32,151,63,100,216,100,4,128,234,107,243,107,253,107,245,107,249,107,5,108,7,108,6,108,13,108,21,108,24,108,25,108,26,108,33,108,41,108,36,108,42,108,50,108,53,101,85,101,107,101,77,114,82,114,86,114,48,114,98,134,22,82,159,128,156,128,147,128,188,128,10,103,189,128,177,128,171,128,173,128,180,128,183,128,231,128,232,128,233,128,234,128,219,128,194,128,196,128,217,128,205,128,215,128,16,103,221,128,235,128,241,128,244,128,237,128,13,129,14,129,242,128,252,128,21,103,18,129,90,140,54,129,30,129,44,129,24,129,50,129,72,129,76,129,83,129,116,129,89,129,90,129,113,129,96,129,105,129,124,129,125,129,109,129,103,129,77,88,181,90,136,129,130,129,145,129,213,110,163,129,170,129,204,129,38,103,202,129,187,129,33,151,34,151,35,151,36,151,37,151,38,151,39,151,40,151,41,151,43,151,44,151,46,151,47,151,49,151,51,151,52,151,53,151,54,151,55,151,58,151,59,151,60,151,61,151,63,151,64,151,65,151,66,151,67,151,68,151,69,151,70,151,71,151,72,151,73,151,74,151,75,151,76,151,77,151,78,151,79,151,80,151,81,151,84,151,85,151,87,151,88,151,90,151,92,151,93,151,95,151,99,151,100,151,102,151,103,151,104,151,106,151,107,151,108,151,109,151,110,151,111,151,112,151,113,151,114,151,117,151,119,151,120,151,121,151,122,151,123,151,125,151,126,151,127,151,128,151,129,151,130,151,131,151,132,151,134,151,135,151,136,151,137,151,138,151,140,151,142,151,143,151,144,151,147,151,149,151,150,151,151,151,153,151,154,151,155,151,156,151,157,151,193,129,166,129,36,107,55,107,57,107,67,107,70,107,89,107,209,152,210,152,211,152,213,152,217,152,218,152,179,107,64,95,194,107,243,137,144,101,81,159,147,101,188,101,198,101,196,101,195,101,204,101,206,101,210,101,214,101,128,112,156,112,150,112,157,112,187,112,192,112,183,112,171,112,177,112,232,112,202,112,16,113,19,113,22,113,47,113,49,113,115,113,92,113,104,113,69,113,114,113,74,113,120,113,122,113,152,113,179,113,181,113,168,113,160,113,224,113,212,113,231,113,249,113,29,114,40,114,108,112,24,113,102,113,185,113,62,98,61,98,67,98,72,98,73,98,59,121,64,121,70,121,73,121,91,121,92,121,83,121,90,121,98,121,87,121,96,121,111,121,103,121,122,121,133,121,138,121,154,121,167,121,179,121,209,95,208,95,158,151,159,151,161,151,162,151,164,151,165,151,166,151,167,151,168,151,169,151,170,151,172,151,174,151,176,151,177,151,179,151,181,151,182,151,183,151,184,151,185,151,186,151,187,151,188,151,189,151,190,151,191,151,192,151,193,151,194,151,195,151,196,151,197,151,198,151,199,151,200,151,201,151,202,151,203,151,204,151,205,151,206,151,207,151,208,151,209,151,210,151,211,151,212,151,213,151,214,151,215,151,216,151,217,151,218,151,219,151,220,151,221,151,222,151,223,151,224,151,225,151,226,151,227,151,228,151,229,151,232,151,238,151,239,151,240,151,241,151,242,151,244,151,247,151,248,151,249,151,250,151,251,151,252,151,253,151,254,151,255,151,0,152,1,152,2,152,3,152,4,152,5,152,6,152,7,152,8,152,9,152,10,152,11,152,12,152,13,152,14,152,60,96,93,96,90,96,103,96,65,96,89,96,99,96,171,96,6,97,13,97,93,97,169,97,157,97,203,97,209,97,6,98,128,128,127,128,147,108,246,108,252,109,246,119,248,119,0,120,9,120,23,120,24,120,17,120,171,101,45,120,28,120,29,120,57,120,58,120,59,120,31,120,60,120,37,120,44,120,35,120,41,120,78,120,109,120,86,120,87,120,38,120,80,120,71,120,76,120,106,120,155,120,147,120,154,120,135,120,156,120,161,120,163,120,178,120,185,120,165,120,212,120,217,120,201,120,236,120,242,120,5,121,244,120,19,121,36,121,30,121,52,121,155,159,249,158,251,158,252,158,241,118,4,119,13,119,249,118,7,119,8,119,26,119,34,119,25,119,45,119,38,119,53,119,56,119,80,119,81,119,71,119,67,119,90,119,104,119,15,152,16,152,17,152,18,152,19,152,20,152,21,152,22,152,23,152,24,152,25,152,26,152,27,152,28,152,29,152,30,152,31,152,32,152,33,152,34,152,35,152,36,152,37,152,38,152,39,152,40,152,41,152,42,152,43,152,44,152,45,152,46,152,47,152,48,152,49,152,50,152,51,152,52,152,53,152,54,152,55,152,56,152,57,152,58,152,59,152,60,152,61,152,62,152,63,152,64,152,65,152,66,152,67,152,68,152,69,152,70,152,71,152,72,152,73,152,74,152,75,152,76,152,77,152,78,152,79,152,80,152,81,152,82,152,83,152,84,152,85,152,86,152,87,152,88,152,89,152,90,152,91,152,92,152,93,152,94,152,95,152,96,152,97,152,98,152,99,152,100,152,101,152,102,152,103,152,104,152,105,152,106,152,107,152,108,152,109,152,110,152,98,119,101,119,127,119,141,119,125,119,128,119,140,119,145,119,159,119,160,119,176,119,181,119,189,119,58,117,64,117,78,117,75,117,72,117,91,117,114,117,121,117,131,117,88,127,97,127,95,127,72,138,104,127,116,127,113,127,121,127,129,127,126,127,205,118,229,118,50,136,133,148,134,148,135,148,139,148,138,148,140,148,141,148,143,148,144,148,148,148,151,148,149,148,154,148,155,148,156,148,163,148,164,148,171,148,170,148,173,148,172,148,175,148,176,148,178,148,180,148,182,148,183,148,184,148,185,148,186,148,188,148,189,148,191,148,196,148,200,148,201,148,202,148,203,148,204,148,205,148,206,148,208,148,209,148,210,148,213,148,214,148,215,148,217,148,216,148,219,148,222,148,223,148,224,148,226,148,228,148,229,148,231,148,232,148,234,148,111,152,112,152,113,152,114,152,115,152,116,152,139,152,142,152,146,152,149,152,153,152,163,152,168,152,169,152,170,152,171,152,172,152,173,152,174,152,175,152,176,152,177,152,178,152,179,152,180,152,181,152,182,152,183,152,184,152,185,152,186,152,187,152,188,152,189,152,190,152,191,152,192,152,193,152,194,152,195,152,196,152,197,152,198,152,199,152,200,152,201,152,202,152,203,152,204,152,205,152,207,152,208,152,212,152,214,152,215,152,219,152,220,152,221,152,224,152,225,152,226,152,227,152,228,152,229,152,230,152,233,152,234,152,235,152,236,152,237,152,238,152,239,152,240,152,241,152,242,152,243,152,244,152,245,152,246,152,247,152,248,152,249,152,250,152,251,152,252,152,253,152,254,152,255,152,0,153,1,153,2,153,3,153,4,153,5,153,6,153,7,153,233,148,235,148,238,148,239,148,243,148,244,148,245,148,247,148,249,148,252,148,253,148,255,148,3,149,2,149,6,149,7,149,9,149,10,149,13,149,14,149,15,149,18,149,19,149,20,149,21,149,22,149,24,149,27,149,29,149,30,149,31,149,34,149,42,149,43,149,41,149,44,149,49,149,50,149,52,149,54,149,55,149,56,149,60,149,62,149,63,149,66,149,53,149,68,149,69,149,70,149,73,149,76,149,78,149,79,149,82,149,83,149,84,149,86,149,87,149,88,149,89,149,91,149,94,149,95,149,93,149,97,149,98,149,100,149,101,149,102,149,103,149,104,149,105,149,106,149,107,149,108,149,111,149,113,149,114,149,115,149,58,149,231,119,236,119,201,150,213,121,237,121,227,121,235,121,6,122,71,93,3,122,2,122,30,122,20,122,8,153,9,153,10,153,11,153,12,153,14,153,15,153,17,153,18,153,19,153,20,153,21,153,22,153,23,153,24,153,25,153,26,153,27,153,28,153,29,153,30,153,31,153,32,153,33,153,34,153,35,153,36,153,37,153,38,153,39,153,40,153,41,153,42,153,43,153,44,153,45,153,47,153,48,153,49,153,50,153,51,153,52,153,53,153,54,153,55,153,56,153,57,153,58,153,59,153,60,153,61,153,62,153,63,153,64,153,65,153,66,153,67,153,68,153,69,153,70,153,71,153,72,153,73,153,74,153,75,153,76,153,77,153,78,153,79,153,80,153,81,153,82,153,83,153,86,153,87,153,88,153,89,153,90,153,91,153,92,153,93,153,94,153,95,153,96,153,97,153,98,153,100,153,102,153,115,153,120,153,121,153,123,153,126,153,130,153,131,153,137,153,57,122,55,122,81,122,207,158,165,153,112,122,136,118,142,118,147,118,153,118,164,118,222,116,224,116,44,117,32,158,34,158,40,158,41,158,42,158,43,158,44,158,50,158,49,158,54,158,56,158,55,158,57,158,58,158,62,158,65,158,66,158,68,158,70,158,71,158,72,158,73,158,75,158,76,158,78,158,81,158,85,158,87,158,90,158,91,158,92,158,94,158,99,158,102,158,103,158,104,158,105,158,106,158,107,158,108,158,113,158,109,158,115,158,146,117,148,117,150,117,160,117,157,117,172,117,163,117,179,117,180,117,184,117,196,117,177,117,176,117,195,117,194,117,214,117,205,117,227,117,232,117,230,117,228,117,235,117,231,117,3,118,241,117,252,117,255,117,16,118,0,118,5,118,12,118,23,118,10,118,37,118,24,118,21,118,25,118,140,153,142,153,154,153,155,153,156,153,157,153,158,153,159,153,160,153,161,153,162,153,163,153,164,153,166,153,167,153,169,153,170,153,171,153,172,153,173,153,174,153,175,153,176,153,177,153,178,153,179,153,180,153,181,153,182,153,183,153,184,153,185,153,186,153,187,153,188,153,189,153,190,153,191,153,192,153,193,153,194,153,195,153,196,153,197,153,198,153,199,153,200,153,201,153,202,153,203,153,204,153,205,153,206,153,207,153,208,153,209,153,210,153,211,153,212,153,213,153,214,153,215,153,216,153,217,153,218,153,219,153,220,153,221,153,222,153,223,153,224,153,225,153,226,153,227,153,228,153,229,153,230,153,231,153,232,153,233,153,234,153,235,153,236,153,237,153,238,153,239,153,240,153,241,153,242,153,243,153,244,153,245,153,246,153,247,153,248,153,249,153,27,118,60,118,34,118,32,118,64,118,45,118,48,118,63,118,53,118,67,118,62,118,51,118,77,118,94,118,84,118,92,118,86,118,107,118,111,118,202,127,230,122,120,122,121,122,128,122,134,122,136,122,149,122,166,122,160,122,172,122,168,122,173,122,179,122,100,136,105,136,114,136,125,136,127,136,130,136,162,136,198,136,183,136,188,136,201,136,226,136,206,136,227,136,229,136,241,136,26,137,252,136,232,136,254,136,240,136,33,137,25,137,19,137,27,137,10,137,52,137,43,137,54,137,65,137,102,137,123,137,139,117,229,128,178,118,180,118,220,119,18,128,20,128,22,128,28,128,32,128,34,128,37,128,38,128,39,128,41,128,40,128,49,128,11,128,53,128,67,128,70,128,77,128,82,128,105,128,113,128,131,137,120,152,128,152,131,152,250,153,251,153,252,153,253,153,254,153,255,153,0,154,1,154,2,154,3,154,4,154,5,154,6,154,7,154,8,154,9,154,10,154,11,154,12,154,13,154,14,154,15,154,16,154,17,154,18,154,19,154,20,154,21,154,22,154,23,154,24,154,25,154,26,154,27,154,28,154,29,154,30,154,31,154,32,154,33,154,34,154,35,154,36,154,37,154,38,154,39,154,40,154,41,154,42,154,43,154,44,154,45,154,46,154,47,154,48,154,49,154,50,154,51,154,52,154,53,154,54,154,55,154,56,154,57,154,58,154,59,154,60,154,61,154,62,154,63,154,64,154,65,154,66,154,67,154,68,154,69,154,70,154,71,154,72,154,73,154,74,154,75,154,76,154,77,154,78,154,79,154,80,154,81,154,82,154,83,154,84,154,85,154,86,154,87,154,88,154,89,154,137,152,140,152,141,152,143,152,148,152,154,152,155,152,158,152,159,152,161,152,162,152,165,152,166,152,77,134,84,134,108,134,110,134,127,134,122,134,124,134,123,134,168,134,141,134,139,134,172,134,157,134,167,134,163,134,170,134,147,134,169,134,182,134,196,134,181,134,206,134,176,134,186,134,177,134,175,134,201,134,207,134,180,134,233,134,241,134,242,134,237,134,243,134,208,134,19,135,222,134,244,134,223,134,216,134,209,134,3,135,7,135,248,134,8,135,10,135,13,135,9,135,35,135,59,135,30,135,37,135,46,135,26,135,62,135,72,135,52,135,49,135,41,135,55,135,63,135,130,135,34,135,125,135,126,135,123,135,96,135,112,135,76,135,110,135,139,135,83,135,99,135,124,135,100,135,89,135,101,135,147,135,175,135,168,135,210,135,90,154,91,154,92,154,93,154,94,154,95,154,96,154,97,154,98,154,99,154,100,154,101,154,102,154,103,154,104,154,105,154,106,154,107,154,114,154,131,154,137,154,141,154,142,154,148,154,149,154,153,154,166,154,169,154,170,154,171,154,172,154,173,154,174,154,175,154,178,154,179,154,180,154,181,154,185,154,187,154,189,154,190,154,191,154,195,154,196,154,198,154,199,154,200,154,201,154,202,154,205,154,206,154,207,154,208,154,210,154,212,154,213,154,214,154,215,154,217,154,218,154,219,154,220,154,221,154,222,154,224,154,226,154,227,154,228,154,229,154,231,154,232,154,233,154,234,154,236,154,238,154,240,154,241,154,242,154,243,154,244,154,245,154,246,154,247,154,248,154,250,154,252,154,253,154,254,154,255,154,0,155,1,155,2,155,4,155,5,155,6,155,198,135,136,135,133,135,173,135,151,135,131,135,171,135,229,135,172,135,181,135,179,135,203,135,211,135,189,135,209,135,192,135,202,135,219,135,234,135,224,135,238,135,22,136,19,136,254,135,10,136,27,136,33,136,57,136,60,136,54,127,66,127,68,127,69,127,16,130,250,122,253,122,8,123,3,123,4,123,21,123,10,123,43,123,15,123,71,123,56,123,42,123,25,123,46,123,49,123,32,123,37,123,36,123,51,123,62,123,30,123,88,123,90,123,69,123,117,123,76,123,93,123,96,123,110,123,123,123,98,123,114,123,113,123,144,123,166,123,167,123,184,123,172,123,157,123,168,123,133,123,170,123,156,123,162,123,171,123,180,123,209,123,193,123,204,123,221,123,218,123,229,123,230,123,234,123,12,124,254,123,252,123,15,124,22,124,11,124,7,155,9,155,10,155,11,155,12,155,13,155,14,155,16,155,17,155,18,155,20,155,21,155,22,155,23,155,24,155,25,155,26,155,27,155,28,155,29,155,30,155,32,155,33,155,34,155,36,155,37,155,38,155,39,155,40,155,41,155,42,155,43,155,44,155,45,155,46,155,48,155,49,155,51,155,52,155,53,155,54,155,55,155,56,155,57,155,58,155,61,155,62,155,63,155,64,155,70,155,74,155,75,155,76,155,78,155,80,155,82,155,83,155,85,155,86,155,87,155,88,155,89,155,90,155,91,155,92,155,93,155,94,155,95,155,96,155,97,155,98,155,99,155,100,155,101,155,102,155,103,155,104,155,105,155,106,155,107,155,108,155,109,155,110,155,111,155,112,155,113,155,114,155,115,155,116,155,117,155,118,155,119,155,120,155,121,155,122,155,123,155,31,124,42,124,38,124,56,124,65,124,64,124,254,129,1,130,2,130,4,130,236,129,68,136,33,130,34,130,35,130,45,130,47,130,40,130,43,130,56,130,59,130,51,130,52,130,62,130,68,130,73,130,75,130,79,130,90,130,95,130,104,130,126,136,133,136,136,136,216,136,223,136,94,137,157,127,159,127,167,127,175,127,176,127,178,127,124,124,73,101,145,124,157,124,156,124,158,124,162,124,178,124,188,124,189,124,193,124,199,124,204,124,205,124,200,124,197,124,215,124,232,124,110,130,168,102,191,127,206,127,213,127,229,127,225,127,230,127,233,127,238,127,243,127,248,124,119,125,166,125,174,125,71,126,155,126,184,158,180,158,115,141,132,141,148,141,145,141,177,141,103,141,109,141,71,140,73,140,74,145,80,145,78,145,79,145,100,145,124,155,125,155,126,155,127,155,128,155,129,155,130,155,131,155,132,155,133,155,134,155,135,155,136,155,137,155,138,155,139,155,140,155,141,155,142,155,143,155,144,155,145,155,146,155,147,155,148,155,149,155,150,155,151,155,152,155,153,155,154,155,155,155,156,155,157,155,158,155,159,155,160,155,161,155,162,155,163,155,164,155,165,155,166,155,167,155,168,155,169,155,170,155,171,155,172,155,173,155,174,155,175,155,176,155,177,155,178,155,179,155,180,155,181,155,182,155,183,155,184,155,185,155,186,155,187,155,188,155,189,155,190,155,191,155,192,155,193,155,194,155,195,155,196,155,197,155,198,155,199,155,200,155,201,155,202,155,203,155,204,155,205,155,206,155,207,155,208,155,209,155,210,155,211,155,212,155,213,155,214,155,215,155,216,155,217,155,218,155,219,155,98,145,97,145,112,145,105,145,111,145,125,145,126,145,114,145,116,145,121,145,140,145,133,145,144,145,141,145,145,145,162,145,163,145,170,145,173,145,174,145,175,145,181,145,180,145,186,145,85,140,126,158,184,141,235,141,5,142,89,142,105,142,181,141,191,141,188,141,186,141,196,141,214,141,215,141,218,141,222,141,206,141,207,141,219,141,198,141,236,141,247,141,248,141,227,141,249,141,251,141,228,141,9,142,253,141,20,142,29,142,31,142,44,142,46,142,35,142,47,142,58,142,64,142,57,142,53,142,61,142,49,142,73,142,65,142,66,142,81,142,82,142,74,142,112,142,118,142,124,142,111,142,116,142,133,142,143,142,148,142,144,142,156,142,158,142,120,140,130,140,138,140,133,140,152,140,148,140,155,101,214,137,222,137,218,137,220,137,220,155,221,155,222,155,223,155,224,155,225,155,226,155,227,155,228,155,229,155,230,155,231,155,232,155,233,155,234,155,235,155,236,155,237,155,238,155,239,155,240,155,241,155,242,155,243,155,244,155,245,155,246,155,247,155,248,155,249,155,250,155,251,155,252,155,253,155,254,155,255,155,0,156,1,156,2,156,3,156,4,156,5,156,6,156,7,156,8,156,9,156,10,156,11,156,12,156,13,156,14,156,15,156,16,156,17,156,18,156,19,156,20,156,21,156,22,156,23,156,24,156,25,156,26,156,27,156,28,156,29,156,30,156,31,156,32,156,33,156,34,156,35,156,36,156,37,156,38,156,39,156,40,156,41,156,42,156,43,156,44,156,45,156,46,156,47,156,48,156,49,156,50,156,51,156,52,156,53,156,54,156,55,156,56,156,57,156,58,156,59,156,229,137,235,137,239,137,62,138,38,139,83,151,233,150,243,150,239,150,6,151,1,151,8,151,15,151,14,151,42,151,45,151,48,151,62,151,128,159,131,159,133,159,134,159,135,159,136,159,137,159,138,159,140,159,254,158,11,159,13,159,185,150,188,150,189,150,206,150,210,150,191,119,224,150,142,146,174,146,200,146,62,147,106,147,202,147,143,147,62,148,107,148,127,156,130,156,133,156,134,156,135,156,136,156,35,122,139,156,142,156,144,156,145,156,146,156,148,156,149,156,154,156,155,156,158,156,159,156,160,156,161,156,162,156,163,156,165,156,166,156,167,156,168,156,169,156,171,156,173,156,174,156,176,156,177,156,178,156,179,156,180,156,181,156,182,156,183,156,186,156,187,156,188,156,189,156,196,156,197,156,198,156,199,156,202,156,203,156,60,156,61,156,62,156,63,156,64,156,65,156,66,156,67,156,68,156,69,156,70,156,71,156,72,156,73,156,74,156,75,156,76,156,77,156,78,156,79,156,80,156,81,156,82,156,83,156,84,156,85,156,86,156,87,156,88,156,89,156,90,156,91,156,92,156,93,156,94,156,95,156,96,156,97,156,98,156,99,156,100,156,101,156,102,156,103,156,104,156,105,156,106,156,107,156,108,156,109,156,110,156,111,156,112,156,113,156,114,156,115,156,116,156,117,156,118,156,119,156,120,156,121,156,122,156,123,156,125,156,126,156,128,156,131,156,132,156,137,156,138,156,140,156,143,156,147,156,150,156,151,156,152,156,153,156,157,156,170,156,172,156,175,156,185,156,190,156,191,156,192,156,193,156,194,156,200,156,201,156,209,156,210,156,218,156,219,156,224,156,225,156,204,156,205,156,206,156,207,156,208,156,211,156,212,156,213,156,215,156,216,156,217,156,220,156,221,156,223,156,226,156,124,151,133,151,145,151,146,151,148,151,175,151,171,151,163,151,178,151,180,151,177,154,176,154,183,154,88,158,182,154,186,154,188,154,193,154,192,154,197,154,194,154,203,154,204,154,209,154,69,155,67,155,71,155,73,155,72,155,77,155,81,155,232,152,13,153,46,153,85,153,84,153,223,154,225,154,230,154,239,154,235,154,251,154,237,154,249,154,8,155,15,155,19,155,31,155,35,155,189,158,190,158,59,126,130,158,135,158,136,158,139,158,146,158,214,147,157,158,159,158,219,158,220,158,221,158,224,158,223,158,226,158,233,158,231,158,229,158,234,158,239,158,34,159,44,159,47,159,57,159,55,159,61,159,62,159,68,159,227,156,228,156,229,156,230,156,231,156,232,156,233,156,234,156,235,156,236,156,237,156,238,156,239,156,240,156,241,156,242,156,243,156,244,156,245,156,246,156,247,156,248,156,249,156,250,156,251,156,252,156,253,156,254,156,255,156,0,157,1,157,2,157,3,157,4,157,5,157,6,157,7,157,8,157,9,157,10,157,11,157,12,157,13,157,14,157,15,157,16,157,17,157,18,157,19,157,20,157,21,157,22,157,23,157,24,157,25,157,26,157,27,157,28,157,29,157,30,157,31,157,32,157,33,157,34,157,35,157,36,157,37,157,38,157,39,157,40,157,41,157,42,157,43,157,44,157,45,157,46,157,47,157,48,157,49,157,50,157,51,157,52,157,53,157,54,157,55,157,56,157,57,157,58,157,59,157,60,157,61,157,62,157,63,157,64,157,65,157,66,157,52,226,53,226,54,226,55,226,56,226,57,226,58,226,59,226,60,226,61,226,62,226,63,226,64,226,65,226,66,226,67,226,68,226,69,226,70,226,71,226,72,226,73,226,74,226,75,226,76,226,77,226,78,226,79,226,80,226,81,226,82,226,83,226,84,226,85,226,86,226,87,226,88,226,89,226,90,226,91,226,92,226,93,226,94,226,95,226,96,226,97,226,98,226,99,226,100,226,101,226,102,226,103,226,104,226,105,226,106,226,107,226,108,226,109,226,110,226,111,226,112,226,113,226,114,226,115,226,116,226,117,226,118,226,119,226,120,226,121,226,122,226,123,226,124,226,125,226,126,226,127,226,128,226,129,226,130,226,131,226,132,226,133,226,134,226,135,226,136,226,137,226,138,226,139,226,140,226,141,226,142,226,143,226,144,226,145,226,67,157,68,157,69,157,70,157,71,157,72,157,73,157,74,157,75,157,76,157,77,157,78,157,79,157,80,157,81,157,82,157,83,157,84,157,85,157,86,157,87,157,88,157,89,157,90,157,91,157,92,157,93,157,94,157,95,157,96,157,97,157,98,157,99,157,100,157,101,157,102,157,103,157,104,157,105,157,106,157,107,157,108,157,109,157,110,157,111,157,112,157,113,157,114,157,115,157,116,157,117,157,118,157,119,157,120,157,121,157,122,157,123,157,124,157,125,157,126,157,127,157,128,157,129,157,130,157,131,157,132,157,133,157,134,157,135,157,136,157,137,157,138,157,139,157,140,157,141,157,142,157,143,157,144,157,145,157,146,157,147,157,148,157,149,157,150,157,151,157,152,157,153,157,154,157,155,157,156,157,157,157,158,157,159,157,160,157,161,157,162,157,146,226,147,226,148,226,149,226,150,226,151,226,152,226,153,226,154,226,155,226,156,226,157,226,158,226,159,226,160,226,161,226,162,226,163,226,164,226,165,226,166,226,167,226,168,226,169,226,170,226,171,226,172,226,173,226,174,226,175,226,176,226,177,226,178,226,179,226,180,226,181,226,182,226,183,226,184,226,185,226,186,226,187,226,188,226,189,226,190,226,191,226,192,226,193,226,194,226,195,226,196,226,197,226,198,226,199,226,200,226,201,226,202,226,203,226,204,226,205,226,206,226,207,226,208,226,209,226,210,226,211,226,212,226,213,226,214,226,215,226,216,226,217,226,218,226,219,226,220,226,221,226,222,226,223,226,224,226,225,226,226,226,227,226,228,226,229,226,230,226,231,226,232,226,233,226,234,226,235,226,236,226,237,226,238,226,239,226,163,157,164,157,165,157,166,157,167,157,168,157,169,157,170,157,171,157,172,157,173,157,174,157,175,157,176,157,177,157,178,157,179,157,180,157,181,157,182,157,183,157,184,157,185,157,186,157,187,157,188,157,189,157,190,157,191,157,192,157,193,157,194,157,195,157,196,157,197,157,198,157,199,157,200,157,201,157,202,157,203,157,204,157,205,157,206,157,207,157,208,157,209,157,210,157,211,157,212,157,213,157,214,157,215,157,216,157,217,157,218,157,219,157,220,157,221,157,222,157,223,157,224,157,225,157,226,157,227,157,228,157,229,157,230,157,231,157,232,157,233,157,234,157,235,157,236,157,237,157,238,157,239,157,240,157,241,157,242,157,243,157,244,157,245,157,246,157,247,157,248,157,249,157,250,157,251,157,252,157,253,157,254,157,255,157,0,158,1,158,2,158,240,226,241,226,242,226,243,226,244,226,245,226,246,226,247,226,248,226,249,226,250,226,251,226,252,226,253,226,254,226,255,226,0,227,1,227,2,227,3,227,4,227,5,227,6,227,7,227,8,227,9,227,10,227,11,227,12,227,13,227,14,227,15,227,16,227,17,227,18,227,19,227,20,227,21,227,22,227,23,227,24,227,25,227,26,227,27,227,28,227,29,227,30,227,31,227,32,227,33,227,34,227,35,227,36,227,37,227,38,227,39,227,40,227,41,227,42,227,43,227,44,227,45,227,46,227,47,227,48,227,49,227,50,227,51,227,52,227,53,227,54,227,55,227,56,227,57,227,58,227,59,227,60,227,61,227,62,227,63,227,64,227,65,227,66,227,67,227,68,227,69,227,70,227,71,227,72,227,73,227,74,227,75,227,76,227,77,227,3,158,4,158,5,158,6,158,7,158,8,158,9,158,10,158,11,158,12,158,13,158,14,158,15,158,16,158,17,158,18,158,19,158,20,158,21,158,22,158,23,158,24,158,25,158,26,158,27,158,28,158,29,158,30,158,36,158,39,158,46,158,48,158,52,158,59,158,60,158,64,158,77,158,80,158,82,158,83,158,84,158,86,158,89,158,93,158,95,158,96,158,97,158,98,158,101,158,110,158,111,158,114,158,116,158,117,158,118,158,119,158,120,158,121,158,122,158,123,158,124,158,125,158,128,158,129,158,131,158,132,158,133,158,134,158,137,158,138,158,140,158,141,158,142,158,143,158,144,158,145,158,148,158,149,158,150,158,151,158,152,158,153,158,154,158,155,158,156,158,158,158,160,158,161,158,162,158,163,158,164,158,165,158,167,158,168,158,169,158,170,158,78,227,79,227,80,227,81,227,82,227,83,227,84,227,85,227,86,227,87,227,88,227,89,227,90,227,91,227,92,227,93,227,94,227,95,227,96,227,97,227,98,227,99,227,100,227,101,227,102,227,103,227,104,227,105,227,106,227,107,227,108,227,109,227,110,227,111,227,112,227,113,227,114,227,115,227,116,227,117,227,118,227,119,227,120,227,121,227,122,227,123,227,124,227,125,227,126,227,127,227,128,227,129,227,130,227,131,227,132,227,133,227,134,227,135,227,136,227,137,227,138,227,139,227,140,227,141,227,142,227,143,227,144,227,145,227,146,227,147,227,148,227,149,227,150,227,151,227,152,227,153,227,154,227,155,227,156,227,157,227,158,227,159,227,160,227,161,227,162,227,163,227,164,227,165,227,166,227,167,227,168,227,169,227,170,227,171,227,171,158,172,158,173,158,174,158,175,158,176,158,177,158,178,158,179,158,181,158,182,158,183,158,185,158,186,158,188,158,191,158,192,158,193,158,194,158,195,158,197,158,198,158,199,158,200,158,202,158,203,158,204,158,208,158,210,158,211,158,213,158,214,158,215,158,217,158,218,158,222,158,225,158,227,158,228,158,230,158,232,158,235,158,236,158,237,158,238,158,240,158,241,158,242,158,243,158,244,158,245,158,246,158,247,158,248,158,250,158,253,158,255,158,0,159,1,159,2,159,3,159,4,159,5,159,6,159,7,159,8,159,9,159,10,159,12,159,15,159,17,159,18,159,20,159,21,159,22,159,24,159,26,159,27,159,28,159,29,159,30,159,31,159,33,159,35,159,36,159,37,159,38,159,39,159,40,159,41,159,42,159,43,159,45,159,46,159,48,159,49,159,172,227,173,227,174,227,175,227,176,227,177,227,178,227,179,227,180,227,181,227,182,227,183,227,184,227,185,227,186,227,187,227,188,227,189,227,190,227,191,227,192,227,193,227,194,227,195,227,196,227,197,227,198,227,199,227,200,227,201,227,202,227,203,227,204,227,205,227,206,227,207,227,208,227,209,227,210,227,211,227,212,227,213,227,214,227,215,227,216,227,217,227,218,227,219,227,220,227,221,227,222,227,223,227,224,227,225,227,226,227,227,227,228,227,229,227,230,227,231,227,232,227,233,227,234,227,235,227,236,227,237,227,238,227,239,227,240,227,241,227,242,227,243,227,244,227,245,227,246,227,247,227,248,227,249,227,250,227,251,227,252,227,253,227,254,227,255,227,0,228,1,228,2,228,3,228,4,228,5,228,6,228,7,228,8,228,9,228,50,159,51,159,52,159,53,159,54,159,56,159,58,159,60,159,63,159,64,159,65,159,66,159,67,159,69,159,70,159,71,159,72,159,73,159,74,159,75,159,76,159,77,159,78,159,79,159,82,159,83,159,84,159,85,159,86,159,87,159,88,159,89,159,90,159,91,159,92,159,93,159,94,159,95,159,96,159,97,159,98,159,99,159,100,159,101,159,102,159,103,159,104,159,105,159,106,159,107,159,108,159,109,159,110,159,111,159,112,159,113,159,114,159,115,159,116,159,117,159,118,159,119,159,120,159,121,159,122,159,123,159,124,159,125,159,126,159,129,159,130,159,141,159,142,159,143,159,144,159,145,159,146,159,147,159,148,159,149,159,150,159,151,159,152,159,156,159,157,159,158,159,161,159,162,159,163,159,164,159,165,159,44,249,121,249,149,249,231,249,241,249,10,228,11,228,12,228,13,228,14,228,15,228,16,228,17,228,18,228,19,228,20,228,21,228,22,228,23,228,24,228,25,228,26,228,27,228,28,228,29,228,30,228,31,228,32,228,33,228,34,228,35,228,36,228,37,228,38,228,39,228,40,228,41,228,42,228,43,228,44,228,45,228,46,228,47,228,48,228,49,228,50,228,51,228,52,228,53,228,54,228,55,228,56,228,57,228,58,228,59,228,60,228,61,228,62,228,63,228,64,228,65,228,66,228,67,228,68,228,69,228,70,228,71,228,72,228,73,228,74,228,75,228,76,228,77,228,78,228,79,228,80,228,81,228,82,228,83,228,84,228,85,228,86,228,87,228,88,228,89,228,90,228,91,228,92,228,93,228,94,228,95,228,96,228,97,228,98,228,99,228,100,228,101,228,102,228,103,228,12,250,13,250,14,250,15,250,17,250,19,250,20,250,24,250,31,250,32,250,33,250,35,250,36,250,39,250,40,250,41,250,129,46,22,232,23,232,24,232,132,46,115,52,71,52,136,46,139,46,30,232,158,53,26,54,14,54,140,46,151,46,110,57,24,57,38,232,207,57,223,57,115,58,208,57,43,232,44,232,78,59,110,60,224,60,167,46,49,232,50,232,170,46,86,64,95,65,174,46,55,67,179,46,182,46,183,46,59,232,177,67,172,67,187,46,221,67,214,68,97,70,76,70,67,232,35,71,41,71,124,71,141,71,202,46,71,73,122,73,125,73,130,73,131,73,133,73,134,73,159,73,155,73,183,73,182,73,84,232,85,232,163,76,159,76,160,76,161,76,119,76,162,76,19,77,20,77,21,77,22,77,23,77,24,77,25,77,174,77,100,232,104,228,105,228,106,228,107,228,108,228,109,228,110,228,111,228,112,228,113,228,114,228,115,228,116,228,117,228,118,228,119,228,120,228,121,228,122,228,123,228,124,228,125,228,126,228,127,228,128,228,129,228,130,228,131,228,132,228,133,228,134,228,135,228,136,228,137,228,138,228,139,228,140,228,141,228,142,228,143,228,144,228,145,228,146,228,147,228,148,228,149,228,150,228,151,228,152,228,153,228,154,228,155,228,156,228,157,228,158,228,159,228,160,228,161,228,162,228,163,228,164,228,165,228,166,228,167,228,168,228,169,228,170,228,171,228,172,228,173,228,174,228,175,228,176,228,177,228,178,228,179,228,180,228,181,228,182,228,183,228,184,228,185,228,186,228,187,228,188,228,189,228,190,228,191,228,192,228,193,228,194,228,195,228,196,228,197,228,0,1,0,5,6,0,0,0,0,0,0,0,0,0,240,63,0,0,0,0,0,0,240,63,0,0,0,0,0,0,0,64,0,0,0,0,0,0,24,64,0,0,0,0,0,0,56,64,0,0,0,0,0,0,94,64,0,0,0,0,0,128,134,64,0,0,0,0,0,176,179,64,0,0,0,0,0,176,227,64,0,0,0,0,0,38,22,65,0,0,0,0,128,175,75,65,0,0,0,0,168,8,131,65,0,0,0,0,252,140,188,65,0,0,0,192,140,50,247,65,0,0,0,40,59,76,52,66,0,0,128,117,119,7,115,66,0,0,128,117,119,7,179,66,0,0,216,236,238,55,244,66,0,0,115,202,236,190,54,67,0,144,104,48,185,2,123,67,0,90,65,190,179,225,192,67,32,198,181,233,59,40,6,68,108,240,89,97,82,119,78,68,95,112,137,0,255,9,47,15,10,0,0,0,100,0,0,0,232,3,0,0,16,39,0,0,160,134,1,0,64,66,15,0,128,150,152,0,0,225,245,5,117,116,102,56,0,0,200,119,99,104,97,114,116,0,0,198,117,99,115,50,0,117,99,115,50,98,101,0,0,196,117,99,115,50,108,101,0,0,197,117,116,102,49,54,0,117,116,102,49,54,98,101,0,0,194,117,116,102,49,54,108,101,0,0,193,117,99,115,52,0,117,99,115,52,98,101,0,117,116,102,51,50,0,117,116,102,51,50,98,101,0,0,192,117,99,115,52,108,101,0,117,116,102,51,50,108,101,0,0,195,97,115,99,105,105,0,117,115,97,115,99,105,105,0,105,115,111,54,52,54,0,105,115,111,54,52,54,117,115,0,0,199,101,117,99,106,112,0,0,208,115,104,105,102,116,106,105,115,0,115,106,105,115], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+94836);
/* memory initializer */ allocate([209,103,98,49,56,48,51,48,0,0,216,103,98,107,0,0,217,103,98,50,51,49,50,0,0,218,98,105,103,53,0,98,105,103,102,105,118,101,0,99,112,57,53,48,0,98,105,103,53,104,107,115,99,115,0,0,224,101,117,99,107,114,0,107,115,99,53,54,48,49,0,107,115,120,49,48,48,49,0,99,112,57,52,57,0,0,232,105,115,111,56,56,53,57,49,0,108,97,116,105,110,49,0,0,128,105,115,111,56,56,53,57,50,0,0,32,0,84,0,137,18,0,32,1,6,0,0,152,65,134,26,127,0,48,72,32,0,88,32,201,18,0,36,17,198,35,0,156,81,198,26,128,80,66,136,32,90,0,0,192,4,0,16,113,1,0,29,0,112,2,0,41,0,0,192,7,33,48,1,5,0,0,88,1,0,0,94,208,1,128,29,0,0,128,6,0,91,0,0,0,5,0,20,129,1,0,30,0,128,2,0,42,0,0,0,8,34,52,17,5,0,0,92,1,0,0,95,212,1,192,29,0,0,144,70,36,105,115,111,56,56,53,57,51,0,0,32,0,212,0,9,0,0,4,48,3,0,0,244,64,70,11,63,0,16,64,32,0,216,0,0,0,0,0,64,3,0,0,248,80,134,11,64,0,16,128,32,0,0,0,64,0,0,108,144,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,188,0,0,0,43,0,0,0,0,0,200,33,6,0,0,0,0,64,0,0,112,160,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,192,0,0,0,44,0,0,0,0,0,204,49,70,36,105,115,111,56,56,53,57,52,0,0,32,0,84,48,4,23,0,220,96,4,0,0,152,49,66,12,108,0,48,8,0,0,88,32,73,23,0,224,112,196,35,0,156,65,130,12,109,72,65,200,20,17,0,0,0,0,0,0,0,192,14,29,0,112,2,0,37,0,0,64,14,33,56,65,69,16,0,0,0,0,0,0,224,1,0,0,0,184,1,7,0,18,0,0,0,0,0,0,0,0,15,30,0,128,2,0,38,0,0,128,14,34,60,81,133,16,0,0,0,0,0,0,228,1,0,0,0,188,17,71,36,105,115,111,56,56,53,57,53,0,0,32,0,136,51,14,57,229,152,115,14,58,233,168,179,14,59,237,0,224,206,59,240,196,35,207,60,244,212,99,207,61,248,228,163,207,62,252,244,227,207,63,0,5,36,208,64,4,21,100,208,65,8,37,164,208,66,12,53,228,208,67,16,69,36,209,68,20,85,100,209,69,24,101,164,209,70,28,117,228,209,71,32,133,36,210,72,36,149,100,210,73,40,165,164,210,74,44,181,228,210,75,53,194,20,147,76,51,209,84,147,77,55,225,148,147,78,59,13,192,83,79,105,115,111,56,56,53,57,54,0,0,32,0,4,16,64,0,0,4,16,64,0,1,4,16,64,0,115,1,16,64,0,1,4,16,64,0,1,4,16,64,0,1,4,16,0,93,1,4,16,64,93,1,216,117,23,94,121,233,181,23,95,125,249,245,23,96,129,9,54,24,97,133,25,118,24,98,137,41,182,24,99,141,57,246,88,0,1,4,16,64,0,144,69,38,217,100,148,85,102,217,101,152,101,166,217,102,156,117,230,217,103,160,133,38,90,0,1,4,16,64,0,1,4,16,64,0,1,4,16,64,0,105,115,111,56,56,53,57,55,0,0,32,0,144,88,34,0,51,210,8,0,0,0,0,160,9,0,0,0,16,128,136,0,0,0,0,0,155,112,210,9,0,158,124,2,10,0,161,0,32,202,40,164,148,98,202,41,168,164,162,202,42,172,180,226,202,43,176,196,34,203,44,180,212,18,128,45,183,224,146,139,46,187,240,210,139,47,191,0,19,140,48,195,16,83,140,49,199,32,147,140,50,203,48,211,140,51,207,64,19,141,52,211,80,83,141,53,215,96,147,141,54,219,112,211,141,55,223,128,19,78,0,105,115,111,56,56,53,57,56,0,0,32,0,4,0,0,0,0,0,0,0,0,0,0,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,240,0,0,0,0,0,64,0,1,4,16,64,0,1,4,16,64,0,1,4,16,64,0,1,4,16,64,0,1,4,16,64,0,1,4,16,64,0,1,4,16,64,0,1,4,16,192,136,83,81,85,149,85,87,97,149,149,86,91,113,213,149,87,95,129,21,150,88,99,145,85,150,89,103,161,149,150,90,107,177,213,86,0,1,120,248,97,0,105,115,111,56,56,53,57,57,0,0,80,45,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,244,64,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,46,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,248,80,6,0,105,115,111,56,56,53,57,49,48,0,0,32,0,84,48,66,12,57,220,16,4,0,70,132,96,6,27,131,0,0,135,20,0,88,64,130,12,58,224,32,4,0,71,136,112,70,27,132,136,24,199,20,17,0,0,0,0,0,0,0,192,14,29,0,112,2,0,37,0,0,0,0,0,56,65,5,0,0,0,0,128,27,0,224,1,0,0,0,0,0,0,0,18,0,0,0,0,0,0,0,0,15,30,0,128,2,0,38,0,0,0,0,0,60,81,5,0,0,0,0,192,27,0,228,1,0,0,0,0,0,192,16,105,115,111,56,56,53,57,49,49,0,116,105,115,54,50,48,0,0,32,0,188,6,91,108,178,205,70,91,109,182,221,134,91,110,186,237,198,91,111,190,253,6,92,112,194,13,71,92,113,198,29,135,92,114,202,45,199,92,115,206,61,7,93,116,210,77,71,93,117,214,93,135,93,118,218,109,199,93,119,222,125,7,94,120,226,141,71,94,121,230,157,135,94,0,1,4,16,64,122,234,173,199,94,123,238,189,7,95,124,242,205,71,95,125,246,221,135,95,126,250,237,199,95,127,254,253,7,96,128,2,14,72,96,129,1,4,16,64,0,105,115,111,56,56,53,57,49,51,0,0,32,0,160,8,0,0,0,164,8,0,0,13,0,192,5,0,0,0,0,192,2,0,0,0,0,0,39,2,0,0,0,16,0,208,5,0,0,0,0,128,3,21,236,16,193,5,0,0,112,194,8,29,0,240,71,9,49,4,145,131,17,102,48,225,4,0,84,0,0,0,0,120,40,1,6,28,0,4,50,8,0,22,240,32,1,6,0,0,128,2,9,30,0,0,136,9,50,8,161,195,17,103,52,241,4,0,85,0,0,0,0,121,44,17,70,28,0,8,66,72,137,105,115,111,56,56,53,57,49,52,0,0,32,0,24,120,32,0,27,112,128,32,0,20,2,96,97,130,26,2,0,128,31,10,46,248,2,12,12,54,8,128,131,21,62,120,33,132,27,98,152,97,132,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,122,0,0,0,0,0,0,0,128,132,0,0,0,0,0,0,0,192,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,123,0,0,0,0,0,0,0,192,132,0,0,0,0,0,0,0,208,7,0,105,115,111,56,56,53,57,49,53,0,108,97,116,105,110,57,0,0,36,51,2,96,6,0,103,0,0,0,0,0,0,0,0,0,0,0,0,0,0,131,0,0,0,0,132,0,0,0,0,88,100,225,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,105,115,111,56,56,53,57,49,54,0,0,32,0,84,96,129,18,51,166,104,6,0,103,0,160,8,0,127,0,0,72,32,0,0,208,193,18,131,160,8,0,0,132,120,176,8,0,88,100,225,135,32,0,0,0,192,4,0,92,0,0,0,0,0,0,0,0,0,0,0,0,0,33,48,1,0,0,0,88,1,0,24,118,0,0,0,0,0,156,192,8,0,0,0,0,0,5,0,96,0,0,0,0,0,0,0,0,0,0,0,0,0,34,52,1,0,0,0,92,1,64,24,119,0,0,0,0,0,160,208,8,0,99,112,49,50,53,48,0,119,105,110,100,111,119,115,49,50,53,48,0,0,0,51,6,96,98,0,41,182,168,226,138,1,184,104,198,139,96,168,49,200,31,1,144,88,226,137,40,178,8,98,136,1,216,120,6,140,97,172,65,8,32,0,60,2,137,18,0,84,0,0,0,0,0,64,6,0,0,0,0,64,32,0,0,32,201,18,0,0,0,0,0,0,88,80,6,0,72,80,146,132,32,90,0,0,192,4,0,16,113,1,0,29,0,112,2,0,41,0,0,192,7,33,48,1,5,0,0,88,1,0,0,94,208,1,128,29,0,0,128,6,0,91,0,0,0,5,0,20,129,1,0,30,0,128,2,0,42,0,0,0,8,34,52,17,5,0,0,92,1,0,0,95,212,1,192,29,0,0,144,70,36,99,112,49,50,53,49,0,119,105,110,100,111,119,115,49,50,53,49,0,0,0,227,144,99,162,76,41,182,168,226,138,51,186,168,206,139,235,180,195,206,59,49,145,88,226,137,40,178,8,98,136,1,216,136,19,140,57,237,164,83,79,0,184,195,83,58,0,248,4,0,0,226,0,80,14,0,0,0,0,0,58,0,0,112,78,77,63,1,0,0,0,48,213,56,19,0,55,153,67,147,77,240,196,35,207,60,244,212,99,207,61,248,228,163,207,62,252,244,227,207,63,0,5,36,208,64,4,21,100,208,65,8,37,164,208,66,12,53,228,208,67,16,69,36,209,68,20,85,100,209,69,24,101,164,209,70,28,117,228,209,71,32,133,36,210,72,36,149,100,210,73,40,165,164,210,74,44,181,228,210,75,99,112,49,50,53,50,0,119,105,110,100,111,119,115,49,50,53,50,0,0,0,51,6,96,98,33,41,182,168,226,138,142,184,104,198,139,88,4,48,72,0,1,144,88,226,137,40,178,8,98,136,147,216,120,6,140,89,4,64,136,31,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,99,112,49,50,53,51,0,119,105,110,100,111,119,115,49,50,53,51,0,0,0,51,6,96,98,33,41,182,168,226,138,1,184,24,192,139,1,4,16,64,0,1,144,88,226,137,40,178,8,98,136,1,216,24,0,140,1,4,16,64,0,0,112,210,9,0,0,0,0,0,0,0,0,16,0,0,0,0,0,128,136,0,0,0,0,0,155,0,0,0,0,158,124,2,10,0,161,0,32,202,40,164,148,98,202,41,168,164,162,202,42,172,180,226,202,43,176,196,34,203,44,180,212,18,128,45,183,224,146,139,46,187,240,210,139,47,191,0,19,140,48,195,16,83,140,49,199,32,147,140,50,203,48,211,140,51,207,64,19,141,52,211,80,83,141,53,215,96,147,141,54,219,112,211,141,55,223,128,19,78,0,99,112,49,50,53,52,0,119,105,110,100,111,119,115,49,50,53,52,0,0,0,51,6,96,98,33,41,182,168,226,138,142,184,104,198,139,88,4,16,64,0,1,144,88,226,137,40,178,8,98,136,147,216,120,6,140,89,4,16,128,31,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,45,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,244,64,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,46,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,248,80,6,0,99,112,49,50,53,53,0,119,105,110,100,111,119,115,49,50,53,53,0,0,0,51,6,96,98,33,41,182,168,226,138,142,184,24,192,139,1,4,16,64,0,1,144,88,226,137,40,178,8,98,136,147,216,24,0,140,1,4,16,64,0,0,0,0,0,0,49,2,0,0,0,0,0,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,240,0,0,0,0,0,0,0,64,5,37,212,80,68,21,101,212,81,72,37,21,128,82,75,49,213,148,83,79,65,21,149,84,110,189,5,87,92,114,5,16,64,0,1,4,16,64,0,83,81,85,149,85,87,97,149,149,86,91,113,213,149,87,95,129,21,150,88,99,145,85,150,89,103,161,149,150,90,107,177,213,86,0,1,120,248,97,0,99,112,49,50,53,54,0,119,105,110,100,111,119,115,49,50,53,54,0,0,0,51,146,102,98,33,41,182,168,226,138,142,184,56,218,139,88,148,134,154,105,170,145,88,226,137,40,178,8,98,136,169,217,120,26,140,89,112,216,225,106,0,204,5,0,0,0,0,0,0,0,0,0,192,26,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,23,0,0,0,0,64,93,173,217,117,23,94,121,233,181,23,95,125,249,245,23,96,129,9,54,24,97,133,25,118,24,98,137,41,182,24,0,140,53,230,216,99,144,69,38,217,100,0,80,6,64,101,150,93,134,25,0,0,0,0,0,0,153,105,6,0,0,155,113,214,153,103,0,124,6,26,0,161,1,32,26,0,0,120,248,161,107,99,112,49,50,53,55,0,119,105,110,100,111,119,115,49,50,53,55,0,0,0,51,6,96,98,0,41,182,168,226,138,1,184,24,192,139,1,16,240,136,2,1,144,88,226,137,40,178,8,98,136,1,216,24,0,140,1,24,32,73,0,0,4,0,0,0,0,4,0,0,0,13,0,192,5,0,0,0,0,192,2,0,0,0,0,0,0,0,0,0,0,16,0,208,5,0,0,0,0,128,3,21,236,16,193,5,0,0,112,194,8,29,0,240,71,9,49,4,145,131,17,102,48,225,4,0,84,0,0,0,0,120,40,1,6,28,0,4,50,8,0,22,240,32,1,6,0,0,128,2,9,30,0,0,136,9,50,8,161,195,17,103,52,241,4,0,85,0,0,0,0,121,44,17,70,28,0,8,66,72,36,99,112,49,50,53,56,0,119,105,110,100,111,119,115,49,50,53,56,0,0,0,51,6,96,98,33,41,182,168,226,138,142,184,24,192,139,88,4,16,64,0,1,144,88,226,137,40,178,8,98,136,147,216,24,0,140,89,4,16,128,31,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,192,4,0,0,0,0,0,0,0,0,0,0,149,0,0,0,0,33,0,128,9,0,0,24,2,0,0,0,0,0,0,0,0,32,114,9,0,0,0,0,0,5,0,0,0,0,0,0,0,0,0,0,150,0,0,0,0,34,0,144,9,0,0,28,2,0,0,0,0,0,0,0,0,36,34,35,0,107,111,105,56,114,0,0,0,62,254,8,100,144,66,14,73,100,145,70,30,137,164,153,103,162,153,166,154,107,178,217,38,143,110,222,136,99,142,58,238,40,64,143,7,32,144,192,3,73,42,185,36,76,76,54,233,228,147,80,70,41,229,148,84,86,105,229,149,88,102,169,165,56,91,114,217,165,151,95,130,25,166,152,99,146,89,102,1,46,65,20,145,73,20,85,68,210,68,37,97,148,145,70,27,113,212,145,71,31,189,4,82,72,34,141,100,145,68,44,173,116,17,74,45,165,116,146,74,14,193,19,143,65,244,212,67,208,60,5,225,147,143,62,251,240,211,143,63,255,60,4,80,64,2,13,100,143,60,12,45,116,15,66,13,37,116,144,66,107,111,105,56,117,0,0,0,62,254,8,100,144,66,14,73,100,145,70,30,137,164,153,103,162,153,166,154,107,178,217,38,143,110,222,136,99,142,58,238,40,64,143,7,32,144,192,3,73,42,185,36,76,51,53,89,147,77,80,70,41,229,148,84,254,100,229,149,88,102,169,165,56,229,112,121,14,58,95,130,25,166,152,99,250,84,102,1,46,65,20,145,73,20,85,68,210,68,37,97,148,145,70,27,113,212,145,71,31,189,4,82,72,34,141,100,145,68,44,173,116,17,74,45,165,116,146,74,14,193,19,143,65,244,212,67,208,60,5,225,147,143,62,251,240,211,143,63,255,60,4,80,64,2,13,100,143,60,12,45,116,15,66,13,37,116,144,66,0,0,0,0,0,0,0,0,65,0,32,26,192,0,32,31,0,1,1,47,50,1,1,5,57,1,1,15,74,1,1,45,121,1,1,5,112,3,1,3,145,3,32,17,163,3,32,9,0,4,80,16,16,4,32,32,96,4,1,33,138,4,1,53,193,4,1,13,208,4,1,63,20,5,1,19,49,5,48,38,160,1,1,5,179,1,1,3,205,1,1,15,222,1,1,17,248,1,1,39,34,2,1,17,216,3,1,23,0,30,1,149,160,30,1,95,8,31,248,8,24,31,248,6,40,31,248,8,56,31,248,8,72,31,248,6,104,31,248,8,136,31,248,8,152,31,248,8,168,31,248,8,184,31,248,2,186,31,182,2,200,31,170,4,216,31,248,2,218,31,156,2,232,31,248,2,234,31,144,2,248,31,128,2,250,31,130,2,70,2,1,9,16,5,1,3,96,33,16,16,0,44,48,47,103,44,1,5,128,44,1,99,235,44,1,3,64,166,1,45,128,166,1,23,34,167,1,13,50,167,1,61,121,167,1,3,126,167,1,9,144,167,1,3,160,167,1,9,33,255,32,26,0,0,0,0,0,48,12,255,1,48,2,48,14,255,39,32,27,255,26,255,31,255,1,255,48,254,38,32,37,32,80,254,81,254,82,254,183,0,84,254,85,254,86,254,87,254,92,255,19,32,49,254,20,32,51,254,116,37,52,254,79,254,8,255,9,255,53,254,54,254,91,255,93,255,55,254,56,254,20,48,21,48,57,254,58,254,16,48,17,48,59,254,60,254,10,48,11,48,61,254,62,254,8,48,9,48,63,254,64,254,12,48,13,48,65,254,66,254,14,48,15,48,67,254,68,254,89,254,90,254,91,254,92,254,93,254,94,254,24,32,25,32,28,32,29,32,29,48,30,48,53,32,50,32,3,255,6,255,10,255,59,32,167,0,3,48,203,37,207,37,179,37,178,37,206,37,6,38,5,38,199,37,198,37,161,37,160,37,189,37,188,37,163,50,5,33,175,0,227,255,63,255,205,2,73,254,74,254,77,254,78,254,75,254,76,254,95,254,96,254,97,254,11,255,13,255,215,0,247,0,177,0,26,34,28,255,30,255,29,255,102,34,103,34,96,34,30,34,82,34,97,34,98,254,99,254,100,254,101,254,102,254,94,255,41,34,42,34,165,34,32,34,31,34,191,34,210,51,209,51,43,34,46,34,53,34,52,34,64,38,66,38,149,34,153,34,145,33,147,33,144,33,146,33,150,33,151,33,153,33,152,33,37,34,35,34,15,255,60,255,21,34,104,254,4,255,229,255,18,48,224,255,225,255,5,255,32,255,3,33,9,33,105,254,106,254,107,254,213,51,156,51,157,51,158,51,206,51,161,51,142,51,143,51,196,51,176,0,89,81,91,81,94,81,93,81,97,81,99,81,231,85,233,116,206,124,129,37,130,37,131,37,132,37,133,37,134,37,135,37,136,37,143,37,142,37,141,37,140,37,139,37,138,37,137,37,60,37,52,37,44,37,36,37,28,37,148,37,0,37,2,37,149,37,12,37,16,37,20,37,24,37,109,37,110,37,112,37,111,37,80,37,94,37,106,37,97,37,226,37,227,37,229,37,228,37,113,37,114,37,115,37,16,255,17,255,18,255,19,255,20,255,21,255,22,255,23,255,24,255,25,255,96,33,97,33,98,33,99,33,100,33,101,33,102,33,103,33,104,33,105,33,33,48,34,48,35,48,36,48,37,48,38,48,39,48,40,48,41,48,65,83,68,83,69,83,33,255,34,255,35,255,36,255,37,255,38,255,39,255,40,255,41,255,42,255,43,255,44,255,45,255,46,255,47,255,48,255,49,255,50,255,51,255,52,255,53,255,54,255,55,255,56,255,57,255,58,255,65,255,66,255,67,255,68,255,69,255,70,255,71,255,72,255,73,255,74,255,75,255,76,255,77,255,78,255,79,255,80,255,81,255,82,255,83,255,84,255,85,255,86,255,87,255,88,255,89,255,90,255,145,3,146,3,147,3,148,3,149,3,150,3,151,3,152,3,153,3,154,3,155,3,156,3,157,3,158,3,159,3,160,3,161,3,163,3,164,3,165,3,166,3,167,3,168,3,169,3,177,3,178,3,179,3,180,3,181,3,182,3,183,3,184,3,185,3,186,3,187,3,188,3,189,3,190,3,191,3,192,3,193,3,195,3,196,3,197,3,198,3,199,3,200,3,201,3,5,49,6,49,7,49,8,49,9,49,10,49,11,49,12,49,13,49,14,49,15,49,16,49,17,49,18,49,19,49,20,49,21,49,22,49,23,49,24,49,25,49,26,49,27,49,28,49,29,49,30,49,31,49,32,49,33,49,34,49,35,49,36,49,37,49,38,49,39,49,40,49,41,49,217,2,201,2,202,2,199,2,203,2,0,36,1,36,2,36,3,36,4,36,5,36,6,36,7,36,8,36,9,36,10,36,11,36,12,36,13,36,14,36,15,36,16,36,17,36,18,36,19,36,20,36,21,36,22,36,23,36,24,36,25,36,26,36,27,36,28,36,29,36,30,36,31,36,33,36,172,32,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,78,89,78,1,78,3,78,67,78,93,78,134,78,140,78,186,78,63,81,101,81,107,81,224,81,0,82,1,82,155,82,21,83,65,83,92,83,200,83,9,78,11,78,8,78,10,78,43,78,56,78,225,81,69,78,72,78,95,78,94,78,142,78,161,78,64,81,3,82,250,82,67,83,201,83,227,83,31,87,235,88,21,89,39,89,115,89,80,91,81,91,83,91,248,91,15,92,34,92,56,92,113,92,221,93,229,93,241,93,242,93,243,93,254,93,114,94,254,94,11,95,19,95,77,98,17,78,16,78,13,78,45,78,48,78,57,78,75,78,57,92,136,78,145,78,149,78,146,78,148,78,162,78,193,78,192,78,195,78,198,78,199,78,205,78,202,78,203,78,196,78,67,81,65,81,103,81,109,81,110,81,108,81,151,81,246,81,6,82,7,82,8,82,251,82,254,82,255,82,22,83,57,83,72,83,71,83,69,83,94,83,132,83,203,83,202,83,205,83,236,88,41,89,43,89,42,89,45,89,84,91,17,92,36,92,58,92,111,92,244,93,123,94,255,94,20,95,21,95,195,95,8,98,54,98,75,98,78,98,47,101,135,101,151,101,164,101,185,101,229,101,240,102,8,103,40,103,32,107,98,107,121,107,203,107,212,107,219,107,15,108,52,108,107,112,42,114,54,114,59,114,71,114,89,114,91,114,172,114,139,115,25,78,22,78,21,78,20,78,24,78,59,78,77,78,79,78,78,78,229,78,216,78,212,78,213,78,214,78,215,78,227,78,228,78,217,78,222,78,69,81,68,81,137,81,138,81,172,81,249,81,250,81,248,81,10,82,160,82,159,82,5,83,6,83,23,83,29,83,223,78,74,83,73,83,97,83,96,83,111,83,110,83,187,83,239,83,228,83,243,83,236,83,238,83,233,83,232,83,252,83,248,83,245,83,235,83,230,83,234,83,242,83,241,83,240,83,229,83,237,83,251,83,219,86,218,86,22,89,46,89,49,89,116,89,118,89,85,91,131,91,60,92,232,93,231,93,230,93,2,94,3,94,115,94,124,94,1,95,24,95,23,95,197,95,10,98,83,98,84,98,82,98,81,98,165,101,230,101,46,103,44,103,42,103,43,103,45,103,99,107,205,107,17,108,16,108,56,108,65,108,64,108,62,108,175,114,132,115,137,115,220,116,230,116,24,117,31,117,40,117,41,117,48,117,49,117,50,117,51,117,139,117,125,118,174,118,191,118,238,118,219,119,226,119,243,119,58,121,190,121,116,122,203,122,30,78,31,78,82,78,83,78,105,78,153,78,164,78,166,78,165,78,255,78,9,79,25,79,10,79,21,79,13,79,16,79,17,79,15,79,242,78,246,78,251,78,240,78,243,78,253,78,1,79,11,79,73,81,71,81,70,81,72,81,104,81,113,81,141,81,176,81,23,82,17,82,18,82,14,82,22,82,163,82,8,83,33,83,32,83,112,83,113,83,9,84,15,84,12,84,10,84,16,84,1,84,11,84,4,84,17,84,13,84,8,84,3,84,14,84,6,84,18,84,224,86,222,86,221,86,51,87,48,87,40,87,45,87,44,87,47,87,41,87,25,89,26,89,55,89,56,89,132,89,120,89,131,89,125,89,121,89,130,89,129,89,87,91,88,91,135,91,136,91,133,91,137,91,250,91,22,92,121,92,222,93,6,94,118,94,116,94,15,95,27,95,217,95,214,95,14,98,12,98,13,98,16,98,99,98,91,98,88,98,54,101,233,101,232,101,236,101,237,101,242,102,243,102,9,103,61,103,52,103,49,103,53,103,33,107,100,107,123,107,22,108,93,108,87,108,89,108,95,108,96,108,80,108,85,108,97,108,91,108,77,108,78,108,112,112,95,114,93,114,126,118,249,122,115,124,248,124,54,127,138,127,189,127,1,128,3,128,12,128,18,128,51,128,127,128,137,128,139,128,140,128,227,129,234,129,243,129,252,129,12,130,27,130,31,130,110,130,114,130,126,130,107,134,64,136,76,136,99,136,127,137,33,150,50,78,168,78,77,79,79,79,71,79,87,79,94,79,52,79,91,79,85,79,48,79,80,79,81,79,61,79,58,79,56,79,67,79,84,79,60,79,70,79,99,79,92,79,96,79,47,79,78,79,54,79,89,79,93,79,72,79,90,79,76,81,75,81,77,81,117,81,182,81,183,81,37,82,36,82,41,82,42,82,40,82,171,82,169,82,170,82,172,82,35,83,115,83,117,83,29,84,45,84,30,84,62,84,38,84,78,84,39,84,70,84,67,84,51,84,72,84,66,84,27,84,41,84,74,84,57,84,59,84,56,84,46,84,53,84,54,84,32,84,60,84,64,84,49,84,43,84,31,84,44,84,234,86,240,86,228,86,235,86,74,87,81,87,64,87,77,87,71,87,78,87,62,87,80,87,79,87,59,87,239,88,62,89,157,89,146,89,168,89,158,89,163,89,153,89,150,89,141,89,164,89,147,89,138,89,165,89,93,91,92,91,90,91,91,91,140,91,139,91,143,91,44,92,64,92,65,92,63,92,62,92,144,92,145,92,148,92,140,92,235,93,12,94,143,94,135,94,138,94,247,94,4,95,31,95,100,95,98,95,119,95,121,95,216,95,204,95,215,95,205,95,241,95,235,95,248,95,234,95,18,98,17,98,132,98,151,98,150,98,128,98,118,98,137,98,109,98,138,98,124,98,126,98,121,98,115,98,146,98,111,98,152,98,110,98,149,98,147,98,145,98,134,98,57,101,59,101,56,101,241,101,244,102,95,103,78,103,79,103,80,103,81,103,92,103,86,103,94,103,73,103,70,103,96,103,83,103,87,103,101,107,207,107,66,108,94,108,153,108,129,108,136,108,137,108,133,108,155,108,106,108,122,108,144,108,112,108,140,108,104,108,150,108,146,108,125,108,131,108,114,108,126,108,116,108,134,108,118,108,141,108,148,108,152,108,130,108,118,112,124,112,125,112,120,112,98,114,97,114,96,114,196,114,194,114,150,115,44,117,43,117,55,117,56,117,130,118,239,118,227,119,193,121,192,121,191,121,118,122,251,124,85,127,150,128,147,128,157,128,152,128,155,128,154,128,178,128,111,130,146,130,139,130,141,130,139,137,210,137,0,138,55,140,70,140,85,140,157,140,100,141,112,141,179,141,171,142,202,142,155,143,176,143,194,143,198,143,197,143,196,143,225,93,145,144,162,144,170,144,166,144,163,144,73,145,198,145,204,145,50,150,46,150,49,150,42,150,44,150,38,78,86,78,115,78,139,78,155,78,158,78,171,78,172,78,111,79,157,79,141,79,115,79,127,79,108,79,155,79,139,79,134,79,131,79,112,79,117,79,136,79,105,79,123,79,150,79,126,79,143,79,145,79,122,79,84,81,82,81,85,81,105,81,119,81,118,81,120,81,189,81,253,81,59,82,56,82,55,82,58,82,48,82,46,82,54,82,65,82,190,82,187,82,82,83,84,83,83,83,81,83,102,83,119,83,120,83,121,83,214,83,212,83,215,83,115,84,117,84,150,84,120,84,149,84,128,84,123,84,119,84,132,84,146,84,134,84,124,84,144,84,113,84,118,84,140,84,154,84,98,84,104,84,139,84,125,84,142,84,250,86,131,87,119,87,106,87,105,87,97,87,102,87,100,87,124,87,28,89,73,89,71,89,72,89,68,89,84,89,190,89,187,89,212,89,185,89,174,89,209,89,198,89,208,89,205,89,203,89,211,89,202,89,175,89,179,89,210,89,197,89,95,91,100,91,99,91,151,91,154,91,152,91,156,91,153,91,155,91,26,92,72,92,69,92,70,92,183,92,161,92,184,92,169,92,171,92,177,92,179,92,24,94,26,94,22,94,21,94,27,94,17,94,120,94,154,94,151,94,156,94,149,94,150,94,246,94,38,95,39,95,41,95,128,95,129,95,127,95,124,95,221,95,224,95,253,95,245,95,255,95,15,96,20,96,47,96,53,96,22,96,42,96,21,96,33,96,39,96,41,96,43,96,27,96,22,98,21,98,63,98,62,98,64,98,127,98,201,98,204,98,196,98,191,98,194,98,185,98,210,98,219,98,171,98,211,98,212,98,203,98,200,98,168,98,189,98,188,98,208,98,217,98,199,98,205,98,181,98,218,98,177,98,216,98,214,98,215,98,198,98,172,98,206,98,62,101,167,101,188,101,250,101,20,102,19,102,12,102,6,102,2,102,14,102,0,102,15,102,21,102,10,102,7,102,13,103,11,103,109,103,139,103,149,103,113,103,156,103,115,103,119,103,135,103,157,103,151,103,111,103,112,103,127,103,137,103,126,103,144,103,117,103,154,103,147,103,124,103,106,103,114,103,35,107,102,107,103,107,127,107,19,108,27,108,227,108,232,108,243,108,177,108,204,108,229,108,179,108,189,108,190,108,188,108,226,108,171,108,213,108,211,108,184,108,196,108,185,108,193,108,174,108,215,108,197,108,241,108,191,108,187,108,225,108,219,108,202,108,172,108,239,108,220,108,214,108,224,108,149,112,142,112,146,112,138,112,153,112,44,114,45,114,56,114,72,114,103,114,105,114,192,114,206,114,217,114,215,114,208,114,169,115,168,115,159,115,171,115,165,115,61,117,157,117,153,117,154,117,132,118,194,118,242,118,244,118,229,119,253,119,62,121,64,121,65,121,201,121,200,121,122,122,121,122,250,122,254,124,84,127,140,127,139,127,5,128,186,128,165,128,162,128,177,128,161,128,171,128,169,128,180,128,170,128,175,128,229,129,254,129,13,130,179,130,157,130,153,130,173,130,189,130,159,130,185,130,177,130,172,130,165,130,175,130,184,130,163,130,176,130,190,130,183,130,78,134,113,134,29,82,104,136,203,142,206,143,212,143,209,143,181,144,184,144,177,144,182,144,199,145,209,145,119,149,128,149,28,150,64,150,63,150,59,150,68,150,66,150,185,150,232,150,82,151,94,151,159,78,173,78,174,78,225,79,181,79,175,79,191,79,224,79,209,79,207,79,221,79,195,79,182,79,216,79,223,79,202,79,215,79,174,79,208,79,196,79,194,79,218,79,206,79,222,79,183,79,87,81,146,81,145,81,160,81,78,82,67,82,74,82,77,82,76,82,75,82,71,82,199,82,201,82,195,82,193,82,13,83,87,83,123,83,154,83,219,83,172,84,192,84,168,84,206,84,201,84,184,84,166,84,179,84,199,84,194,84,189,84,170,84,193,84,196,84,200,84,175,84,171,84,177,84,187,84,169,84,167,84,191,84,255,86,130,87,139,87,160,87,163,87,162,87,206,87,174,87,147,87,85,89,81,89,79,89,78,89,80,89,220,89,216,89,255,89,227,89,232,89,3,90,229,89,234,89,218,89,230,89,1,90,251,89,105,91,163,91,166,91,164,91,162,91,165,91,1,92,78,92,79,92,77,92,75,92,217,92,210,92,247,93,29,94,37,94,31,94,125,94,160,94,166,94,250,94,8,95,45,95,101,95,136,95,133,95,138,95,139,95,135,95,140,95,137,95,18,96,29,96,32,96,37,96,14,96,40,96,77,96,112,96,104,96,98,96,70,96,67,96,108,96,107,96,106,96,100,96,65,98,220,98,22,99,9,99,252,98,237,98,1,99,238,98,253,98,7,99,241,98,247,98,239,98,236,98,254,98,244,98,17,99,2,99,63,101,69,101,171,101,189,101,226,101,37,102,45,102,32,102,39,102,47,102,31,102,40,102,49,102,36,102,247,102,255,103,211,103,241,103,212,103,208,103,236,103,182,103,175,103,245,103,233,103,239,103,196,103,209,103,180,103,218,103,229,103,184,103,207,103,222,103,243,103,176,103,217,103,226,103,221,103,210,103,106,107,131,107,134,107,181,107,210,107,215,107,31,108,201,108,11,109,50,109,42,109,65,109,37,109,12,109,49,109,30,109,23,109,59,109,61,109,62,109,54,109,27,109,245,108,57,109,39,109,56,109,41,109,46,109,53,109,14,109,43,109,171,112,186,112,179,112,172,112,175,112,173,112,184,112,174,112,164,112,48,114,114,114,111,114,116,114,233,114,224,114,225,114,183,115,202,115,187,115,178,115,205,115,192,115,179,115,26,117,45,117,79,117,76,117,78,117,75,117,171,117,164,117,165,117,162,117,163,117,120,118,134,118,135,118,136,118,200,118,198,118,195,118,197,118,1,119,249,118,248,118,9,119,11,119,254,118,252,118,7,119,220,119,2,120,20,120,12,120,13,120,70,121,73,121,72,121,71,121,185,121,186,121,209,121,210,121,203,121,127,122,129,122,255,122,253,122,125,124,2,125,5,125,0,125,9,125,7,125,4,125,6,125,56,127,142,127,191,127,4,128,16,128,13,128,17,128,54,128,214,128,229,128,218,128,195,128,196,128,204,128,225,128,219,128,206,128,222,128,228,128,221,128,244,129,34,130,231,130,3,131,5,131,227,130,219,130,230,130,4,131,229,130,2,131,9,131,210,130,215,130,241,130,1,131,220,130,212,130,209,130,222,130,211,130,223,130,239,130,6,131,80,134,121,134,123,134,122,134,77,136,107,136,129,137,212,137,8,138,2,138,3,138,158,140,160,140,116,141,115,141,180,141,205,142,204,142,240,143,230,143,226,143,234,143,229,143,237,143,235,143,228,143,232,143,202,144,206,144,193,144,195,144,75,145,74,145,205,145,130,149,80,150,75,150,76,150,77,150,98,151,105,151,203,151,237,151,243,151,1,152,168,152,219,152,223,152,150,153,153,153,88,78,179,78,12,80,13,80,35,80,239,79,38,80,37,80,248,79,41,80,22,80,6,80,60,80,31,80,26,80,18,80,17,80,250,79,0,80,20,80,40,80,241,79,33,80,11,80,25,80,24,80,243,79,238,79,45,80,42,80,254,79,43,80,9,80,124,81,164,81,165,81,162,81,205,81,204,81,198,81,203,81,86,82,92,82,84,82,91,82,93,82,42,83,127,83,159,83,157,83,223,83,232,84,16,85,1,85,55,85,252,84,229,84,242,84,6,85,250,84,20,85,233,84,237,84,225,84,9,85,238,84,234,84,230,84,39,85,7,85,253,84,15,85,3,87,4,87,194,87,212,87,203,87,195,87,9,88,15,89,87,89,88,89,90,89,17,90,24,90,28,90,31,90,27,90,19,90,236,89,32,90,35,90,41,90,37,90,12,90,9,90,107,91,88,92,176,91,179,91,182,91,180,91,174,91,181,91,185,91,184,91,4,92,81,92,85,92,80,92,237,92,253,92,251,92,234,92,232,92,240,92,246,92,1,93,244,92,238,93,45,94,43,94,171,94,173,94,167,94,49,95,146,95,145,95,144,95,89,96,99,96,101,96,80,96,85,96,109,96,105,96,111,96,132,96,159,96,154,96,141,96,148,96,140,96,133,96,150,96,71,98,243,98,8,99,255,98,78,99,62,99,47,99,85,99,66,99,70,99,79,99,73,99,58,99,80,99,61,99,42,99,43,99,40,99,77,99,76,99,72,101,73,101,153,101,193,101,197,101,66,102,73,102,79,102,67,102,82,102,76,102,69,102,65,102,248,102,20,103,21,103,23,103,33,104,56,104,72,104,70,104,83,104,57,104,66,104,84,104,41,104,179,104,23,104,76,104,81,104,61,104,244,103,80,104,64,104,60,104,67,104,42,104,69,104,19,104,24,104,65,104,138,107,137,107,183,107,35,108,39,108,40,108,38,108,36,108,240,108,106,109,149,109,136,109,135,109,102,109,120,109,119,109,89,109,147,109,108,109,137,109,110,109,90,109,116,109,105,109,140,109,138,109,121,109,133,109,101,109,148,109,202,112,216,112,228,112,217,112,200,112,207,112,57,114,121,114,252,114,249,114,253,114,248,114,247,114,134,115,237,115,9,116,238,115,224,115,234,115,222,115,84,117,93,117,92,117,90,117,89,117,190,117,197,117,199,117,178,117,179,117,189,117,188,117,185,117,194,117,184,117,139,118,176,118,202,118,205,118,206,118,41,119,31,119,32,119,40,119,233,119,48,120,39,120,56,120,29,120,52,120,55,120,37,120,45,120,32,120,31,120,50,120,85,121,80,121,96,121,95,121,86,121,94,121,93,121,87,121,90,121,228,121,227,121,231,121,223,121,230,121,233,121,216,121,132,122,136,122,217,122,6,123,17,123,137,124,33,125,23,125,11,125,10,125,32,125,34,125,20,125,16,125,21,125,26,125,28,125,13,125,25,125,27,125,58,127,95,127,148,127,197,127,193,127,6,128,24,128,21,128,25,128,23,128,61,128,63,128,241,128,2,129,240,128,5,129,237,128,244,128,6,129,248,128,243,128,8,129,253,128,10,129,252,128,239,128,237,129,236,129,0,130,16,130,42,130,43,130,40,130,44,130,187,130,43,131,82,131,84,131,74,131,56,131,80,131,73,131,53,131,52,131,79,131,50,131,57,131,54,131,23,131,64,131,49,131,40,131,67,131,84,134,138,134,170,134,147,134,164,134,169,134,140,134,163,134,156,134,112,136,119,136,129,136,130,136,125,136,121,136,24,138,16,138,14,138,12,138,21,138,10,138,23,138,19,138,22,138,15,138,17,138,72,140,122,140,121,140,161,140,162,140,119,141,172,142,210,142,212,142,207,142,177,143,1,144,6,144,247,143,0,144,250,143,244,143,3,144,253,143,5,144,248,143,149,144,225,144,221,144,226,144,82,145,77,145,76,145,216,145,221,145,215,145,220,145,217,145,131,149,98,150,99,150,97,150,91,150,93,150,100,150,88,150,94,150,187,150,226,152,172,153,168,154,216,154,37,155,50,155,60,155,126,78,122,80,125,80,92,80,71,80,67,80,76,80,90,80,73,80,101,80,118,80,78,80,85,80,117,80,116,80,119,80,79,80,15,80,111,80,109,80,92,81,149,81,240,81,106,82,111,82,210,82,217,82,216,82,213,82,16,83,15,83,25,83,63,83,64,83,62,83,195,83,252,102,70,85,106,85,102,85,68,85,94,85,97,85,67,85,74,85,49,85,86,85,79,85,85,85,47,85,100,85,56,85,46,85,92,85,44,85,99,85,51,85,65,85,87,85,8,87,11,87,9,87,223,87,5,88,10,88,6,88,224,87,228,87,250,87,2,88,53,88,247,87,249,87,32,89,98,89,54,90,65,90,73,90,102,90,106,90,64,90,60,90,98,90,90,90,70,90,74,90,112,91,199,91,197,91,196,91,194,91,191,91,198,91,9,92,8,92,7,92,96,92,92,92,93,92,7,93,6,93,14,93,27,93,22,93,34,93,17,93,41,93,20,93,25,93,36,93,39,93,23,93,226,93,56,94,54,94,51,94,55,94,183,94,184,94,182,94,181,94,190,94,53,95,55,95,87,95,108,95,105,95,107,95,151,95,153,95,158,95,152,95,161,95,160,95,156,95,127,96,163,96,137,96,160,96,168,96,203,96,180,96,230,96,189,96,197,96,187,96,181,96,220,96,188,96,216,96,213,96,198,96,223,96,184,96,218,96,199,96,26,98,27,98,72,98,160,99,167,99,114,99,150,99,162,99,165,99,119,99,103,99,152,99,170,99,113,99,169,99,137,99,131,99,155,99,107,99,168,99,132,99,136,99,153,99,161,99,172,99,146,99,143,99,128,99,123,99,105,99,104,99,122,99,93,101,86,101,81,101,89,101,87,101,95,85,79,101,88,101,85,101,84,101,156,101,155,101,172,101,207,101,203,101,204,101,206,101,93,102,90,102,100,102,104,102,102,102,94,102,249,102,215,82,27,103,129,104,175,104,162,104,147,104,181,104,127,104,118,104,177,104,167,104,151,104,176,104,131,104,196,104,173,104,134,104,133,104,148,104,157,104,168,104,159,104,161,104,130,104,50,107,186,107,235,107,236,107,43,108,142,109,188,109,243,109,217,109,178,109,225,109,204,109,228,109,251,109,250,109,5,110,199,109,203,109,175,109,209,109,174,109,222,109,249,109,184,109,247,109,245,109,197,109,210,109,26,110,181,109,218,109,235,109,216,109,234,109,241,109,238,109,232,109,198,109,196,109,170,109,236,109,191,109,230,109,249,112,9,113,10,113,253,112,239,112,61,114,125,114,129,114,28,115,27,115,22,115,19,115,25,115,135,115,5,116,10,116,3,116,6,116,254,115,13,116,224,116,246,116,247,116,28,117,34,117,101,117,102,117,98,117,112,117,143,117,212,117,213,117,181,117,202,117,205,117,142,118,212,118,210,118,219,118,55,119,62,119,60,119,54,119,56,119,58,119,107,120,67,120,78,120,101,121,104,121,109,121,251,121,146,122,149,122,32,123,40,123,27,123,44,123,38,123,25,123,30,123,46,123,146,124,151,124,149,124,70,125,67,125,113,125,46,125,57,125,60,125,64,125,48,125,51,125,68,125,47,125,66,125,50,125,49,125,61,127,158,127,154,127,204,127,206,127,210,127,28,128,74,128,70,128,47,129,22,129,35,129,43,129,41,129,48,129,36,129,2,130,53,130,55,130,54,130,57,130,142,131,158,131,152,131,120,131,162,131,150,131,189,131,171,131,146,131,138,131,147,131,137,131,160,131,119,131,123,131,124,131,134,131,167,131,85,134,106,95,199,134,192,134,182,134,196,134,181,134,198,134,203,134,177,134,175,134,201,134,83,136,158,136,136,136,171,136,146,136,150,136,141,136,139,136,147,137,143,137,42,138,29,138,35,138,37,138,49,138,45,138,31,138,27,138,34,138,73,140,90,140,169,140,172,140,171,140,168,140,170,140,167,140,103,141,102,141,190,141,186,141,219,142,223,142,25,144,13,144,26,144,23,144,35,144,31,144,29,144,16,144,21,144,30,144,32,144,15,144,34,144,22,144,27,144,20,144,232,144,237,144,253,144,87,145,206,145,245,145,230,145,227,145,231,145,237,145,233,145,137,149,106,150,117,150,115,150,120,150,112,150,116,150,118,150,119,150,108,150,192,150,234,150,233,150,224,122,223,122,2,152,3,152,90,155,229,156,117,158,127,158,165,158,187,158,162,80,141,80,133,80,153,80,145,80,128,80,150,80,152,80,154,80,0,103,241,81,114,82,116,82,117,82,105,82,222,82,221,82,219,82,90,83,165,83,123,85,128,85,167,85,124,85,138,85,157,85,152,85,130,85,156,85,170,85,148,85,135,85,139,85,131,85,179,85,174,85,159,85,62,85,178,85,154,85,187,85,172,85,177,85,126,85,137,85,171,85,153,85,13,87,47,88,42,88,52,88,36,88,48,88,49,88,33,88,29,88,32,88,249,88,250,88,96,89,119,90,154,90,127,90,146,90,155,90,167,90,115,91,113,91,210,91,204,91,211,91,208,91,10,92,11,92,49,92,76,93,80,93,52,93,71,93,253,93,69,94,61,94,64,94,67,94,126,94,202,94,193,94,194,94,196,94,60,95,109,95,169,95,170,95,168,95,209,96,225,96,178,96,182,96,224,96,28,97,35,97,250,96,21,97,240,96,251,96,244,96,104,97,241,96,14,97,246,96,9,97,0,97,18,97,31,98,73,98,163,99,140,99,207,99,192,99,233,99,201,99,198,99,205,99,210,99,227,99,208,99,225,99,214,99,237,99,238,99,118,99,244,99,234,99,219,99,82,100,218,99,249,99,94,101,102,101,98], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+105077);
/* memory initializer */ allocate([101,99,101,145,101,144,101,175,101,110,102,112,102,116,102,118,102,111,102,145,102,122,102,126,102,119,102,254,102,255,102,31,103,29,103,250,104,213,104,224,104,216,104,215,104,5,105,223,104,245,104,238,104,231,104,249,104,210,104,242,104,227,104,203,104,205,104,13,105,18,105,14,105,201,104,218,104,110,105,251,104,62,107,58,107,61,107,152,107,150,107,188,107,239,107,46,108,47,108,44,108,47,110,56,110,84,110,33,110,50,110,103,110,74,110,32,110,37,110,35,110,27,110,91,110,88,110,36,110,86,110,110,110,45,110,38,110,111,110,52,110,77,110,58,110,44,110,67,110,29,110,62,110,203,110,137,110,25,110,78,110,99,110,68,110,114,110,105,110,95,110,25,113,26,113,38,113,48,113,33,113,54,113,110,113,28,113,76,114,132,114,128,114,54,115,37,115,52,115,41,115,58,116,42,116,51,116,34,116,37,116,53,116,54,116,52,116,47,116,27,116,38,116,40,116,37,117,38,117,107,117,106,117,226,117,219,117,227,117,217,117,216,117,222,117,224,117,123,118,124,118,150,118,147,118,180,118,220,118,79,119,237,119,93,120,108,120,111,120,13,122,8,122,11,122,5,122,0,122,152,122,151,122,150,122,229,122,227,122,73,123,86,123,70,123,80,123,82,123,84,123,77,123,75,123,79,123,81,123,159,124,165,124,94,125,80,125,104,125,85,125,43,125,110,125,114,125,97,125,102,125,98,125,112,125,115,125,132,85,212,127,213,127,11,128,82,128,133,128,85,129,84,129,75,129,81,129,78,129,57,129,70,129,62,129,76,129,83,129,116,129,18,130,28,130,233,131,3,132,248,131,13,132,224,131,197,131,11,132,193,131,239,131,241,131,244,131,87,132,10,132,240,131,12,132,204,131,253,131,242,131,202,131,56,132,14,132,4,132,220,131,7,132,212,131,223,131,91,134,223,134,217,134,237,134,212,134,219,134,228,134,208,134,222,134,87,136,193,136,194,136,177,136,131,137,150,137,59,138,96,138,85,138,94,138,60,138,65,138,84,138,91,138,80,138,70,138,52,138,58,138,54,138,86,138,97,140,130,140,175,140,188,140,179,140,189,140,193,140,187,140,192,140,180,140,183,140,182,140,191,140,184,140,138,141,133,141,129,141,206,141,221,141,203,141,218,141,209,141,204,141,219,141,198,141,251,142,248,142,252,142,156,143,46,144,53,144,49,144,56,144,50,144,54,144,2,145,245,144,9,145,254,144,99,145,101,145,207,145,20,146,21,146,35,146,9,146,30,146,13,146,16,146,7,146,17,146,148,149,143,149,139,149,145,149,147,149,146,149,142,149,138,150,142,150,139,150,125,150,133,150,134,150,141,150,114,150,132,150,193,150,197,150,196,150,198,150,199,150,239,150,242,150,204,151,5,152,6,152,8,152,231,152,234,152,239,152,233,152,242,152,237,152,174,153,173,153,195,158,205,158,209,158,130,78,173,80,181,80,178,80,179,80,197,80,190,80,172,80,183,80,187,80,175,80,199,80,127,82,119,82,125,82,223,82,230,82,228,82,226,82,227,82,47,83,223,85,232,85,211,85,230,85,206,85,220,85,199,85,209,85,227,85,228,85,239,85,218,85,225,85,197,85,198,85,229,85,201,85,18,87,19,87,94,88,81,88,88,88,87,88,90,88,84,88,107,88,76,88,109,88,74,88,98,88,82,88,75,88,103,89,193,90,201,90,204,90,190,90,189,90,188,90,179,90,194,90,178,90,105,93,111,93,76,94,121,94,201,94,200,94,18,95,89,95,172,95,174,95,26,97,15,97,72,97,31,97,243,96,27,97,249,96,1,97,8,97,78,97,76,97,68,97,77,97,62,97,52,97,39,97,13,97,6,97,55,97,33,98,34,98,19,100,62,100,30,100,42,100,45,100,61,100,44,100,15,100,28,100,20,100,13,100,54,100,22,100,23,100,6,100,108,101,159,101,176,101,151,102,137,102,135,102,136,102,150,102,132,102,152,102,141,102,3,103,148,105,109,105,90,105,119,105,96,105,84,105,117,105,48,105,130,105,74,105,104,105,107,105,94,105,83,105,121,105,134,105,93,105,99,105,91,105,71,107,114,107,192,107,191,107,211,107,253,107,162,110,175,110,211,110,182,110,194,110,144,110,157,110,199,110,197,110,165,110,152,110,188,110,186,110,171,110,209,110,150,110,156,110,196,110,212,110,170,110,167,110,180,110,78,113,89,113,105,113,100,113,73,113,103,113,92,113,108,113,102,113,76,113,101,113,94,113,70,113,104,113,86,113,58,114,82,114,55,115,69,115,63,115,62,115,111,116,90,116,85,116,95,116,94,116,65,116,63,116,89,116,91,116,92,116,118,117,120,117,0,118,240,117,1,118,242,117,241,117,250,117,255,117,244,117,243,117,222,118,223,118,91,119,107,119,102,119,94,119,99,119,121,119,106,119,108,119,92,119,101,119,104,119,98,119,238,119,142,120,176,120,151,120,152,120,140,120,137,120,124,120,145,120,147,120,127,120,122,121,127,121,129,121,44,132,189,121,28,122,26,122,32,122,20,122,31,122,30,122,159,122,160,122,119,123,192,123,96,123,110,123,103,123,177,124,179,124,181,124,147,125,121,125,145,125,129,125,143,125,91,125,110,127,105,127,106,127,114,127,169,127,168,127,164,127,86,128,88,128,134,128,132,128,113,129,112,129,120,129,101,129,110,129,115,129,107,129,121,129,122,129,102,129,5,130,71,130,130,132,119,132,61,132,49,132,117,132,102,132,107,132,73,132,108,132,91,132,60,132,53,132,97,132,99,132,105,132,109,132,70,132,94,134,92,134,95,134,249,134,19,135,8,135,7,135,0,135,254,134,251,134,2,135,3,135,6,135,10,135,89,136,223,136,212,136,217,136,220,136,216,136,221,136,225,136,202,136,213,136,210,136,156,137,227,137,107,138,114,138,115,138,102,138,105,138,112,138,135,138,124,138,99,138,160,138,113,138,133,138,109,138,98,138,110,138,108,138,121,138,123,138,62,138,104,138,98,140,138,140,137,140,202,140,199,140,200,140,196,140,178,140,195,140,194,140,197,140,225,141,223,141,232,141,239,141,243,141,250,141,234,141,228,141,230,141,178,142,3,143,9,143,254,142,10,143,159,143,178,143,75,144,74,144,83,144,66,144,84,144,60,144,85,144,80,144,71,144,79,144,78,144,77,144,81,144,62,144,65,144,18,145,23,145,108,145,106,145,105,145,201,145,55,146,87,146,56,146,61,146,64,146,62,146,91,146,75,146,100,146,81,146,52,146,73,146,77,146,69,146,57,146,63,146,90,146,152,149,152,150,148,150,149,150,205,150,203,150,201,150,202,150,247,150,251,150,249,150,246,150,86,151,116,151,118,151,16,152,17,152,19,152,10,152,18,152,12,152,252,152,244,152,253,152,254,152,179,153,177,153,180,153,225,154,233,156,130,158,14,159,19,159,32,159,231,80,238,80,229,80,214,80,237,80,218,80,213,80,207,80,209,80,241,80,206,80,233,80,98,81,243,81,131,82,130,82,49,83,173,83,254,85,0,86,27,86,23,86,253,85,20,86,6,86,9,86,13,86,14,86,247,85,22,86,31,86,8,86,16,86,246,85,24,87,22,87,117,88,126,88,131,88,147,88,138,88,121,88,133,88,125,88,253,88,37,89,34,89,36,89,106,89,105,89,225,90,230,90,233,90,215,90,214,90,216,90,227,90,117,91,222,91,231,91,225,91,229,91,230,91,232,91,226,91,228,91,223,91,13,92,98,92,132,93,135,93,91,94,99,94,85,94,87,94,84,94,211,94,214,94,10,95,70,95,112,95,185,95,71,97,63,97,75,97,119,97,98,97,99,97,95,97,90,97,88,97,117,97,42,98,135,100,88,100,84,100,164,100,120,100,95,100,122,100,81,100,103,100,52,100,109,100,123,100,114,101,161,101,215,101,214,101,162,102,168,102,157,102,156,105,168,105,149,105,193,105,174,105,211,105,203,105,155,105,183,105,187,105,171,105,180,105,208,105,205,105,173,105,204,105,166,105,195,105,163,105,73,107,76,107,51,108,51,111,20,111,254,110,19,111,244,110,41,111,62,111,32,111,44,111,15,111,2,111,34,111,255,110,239,110,6,111,49,111,56,111,50,111,35,111,21,111,43,111,47,111,136,111,42,111,236,110,1,111,242,110,204,110,247,110,148,113,153,113,125,113,138,113,132,113,146,113,62,114,146,114,150,114,68,115,80,115,100,116,99,116,106,116,112,116,109,116,4,117,145,117,39,118,13,118,11,118,9,118,19,118,225,118,227,118,132,119,125,119,127,119,97,119,193,120,159,120,167,120,179,120,169,120,163,120,142,121,143,121,141,121,46,122,49,122,170,122,169,122,237,122,239,122,161,123,149,123,139,123,117,123,151,123,157,123,148,123,143,123,184,123,135,123,132,123,185,124,189,124,190,124,187,125,176,125,156,125,189,125,190,125,160,125,202,125,180,125,178,125,177,125,186,125,162,125,191,125,181,125,184,125,173,125,210,125,199,125,172,125,112,127,224,127,225,127,223,127,94,128,90,128,135,128,80,129,128,129,143,129,136,129,138,129,127,129,130,129,231,129,250,129,7,130,20,130,30,130,75,130,201,132,191,132,198,132,196,132,153,132,158,132,178,132,156,132,203,132,184,132,192,132,211,132,144,132,188,132,209,132,202,132,63,135,28,135,59,135,34,135,37,135,52,135,24,135,85,135,55,135,41,135,243,136,2,137,244,136,249,136,248,136,253,136,232,136,26,137,239,136,166,138,140,138,158,138,163,138,141,138,161,138,147,138,164,138,170,138,165,138,168,138,152,138,145,138,154,138,167,138,106,140,141,140,140,140,211,140,209,140,210,140,107,141,153,141,149,141,252,141,20,143,18,143,21,143,19,143,163,143,96,144,88,144,92,144,99,144,89,144,94,144,98,144,93,144,91,144,25,145,24,145,30,145,117,145,120,145,119,145,116,145,120,146,128,146,133,146,152,146,150,146,123,146,147,146,156,146,168,146,124,146,145,146,161,149,168,149,169,149,163,149,165,149,164,149,153,150,156,150,155,150,204,150,210,150,0,151,124,151,133,151,246,151,23,152,24,152,175,152,177,152,3,153,5,153,12,153,9,153,193,153,175,154,176,154,230,154,65,155,66,155,244,156,246,156,243,156,188,158,59,159,74,159,4,81,0,81,251,80,245,80,249,80,2,81,8,81,9,81,5,81,220,81,135,82,136,82,137,82,141,82,138,82,240,82,178,83,46,86,59,86,57,86,50,86,63,86,52,86,41,86,83,86,78,86,87,86,116,86,54,86,47,86,48,86,128,88,159,88,158,88,179,88,156,88,174,88,169,88,166,88,109,89,9,91,251,90,11,91,245,90,12,91,8,91,238,91,236,91,233,91,235,91,100,92,101,92,157,93,148,93,98,94,95,94,97,94,226,94,218,94,223,94,221,94,227,94,224,94,72,95,113,95,183,95,181,95,118,97,103,97,110,97,93,97,85,97,130,97,124,97,112,97,107,97,126,97,167,97,144,97,171,97,142,97,172,97,154,97,164,97,148,97,174,97,46,98,105,100,111,100,121,100,158,100,178,100,136,100,144,100,176,100,165,100,147,100,149,100,169,100,146,100,174,100,173,100,171,100,154,100,172,100,153,100,162,100,179,100,117,101,119,101,120,101,174,102,171,102,180,102,177,102,35,106,31,106,232,105,1,106,30,106,25,106,253,105,33,106,19,106,10,106,243,105,2,106,5,106,237,105,17,106,80,107,78,107,164,107,197,107,198,107,63,111,124,111,132,111,81,111,102,111,84,111,134,111,109,111,91,111,120,111,110,111,142,111,122,111,112,111,100,111,151,111,88,111,213,110,111,111,96,111,95,111,159,113,172,113,177,113,168,113,86,114,155,114,78,115,87,115,105,116,139,116,131,116,126,116,128,116,127,117,32,118,41,118,31,118,36,118,38,118,33,118,34,118,154,118,186,118,228,118,142,119,135,119,140,119,145,119,139,119,203,120,197,120,186,120,202,120,190,120,213,120,188,120,208,120,63,122,60,122,64,122,61,122,55,122,59,122,175,122,174,122,173,123,177,123,196,123,180,123,198,123,199,123,193,123,160,123,204,123,202,124,224,125,244,125,239,125,251,125,216,125,236,125,221,125,232,125,227,125,218,125,222,125,233,125,158,125,217,125,242,125,249,125,117,127,119,127,175,127,233,127,38,128,155,129,156,129,157,129,160,129,154,129,152,129,23,133,61,133,26,133,238,132,44,133,45,133,19,133,17,133,35,133,33,133,20,133,236,132,37,133,255,132,6,133,130,135,116,135,118,135,96,135,102,135,120,135,104,135,89,135,87,135,76,135,83,135,91,136,93,136,16,137,7,137,18,137,19,137,21,137,10,137,188,138,210,138,199,138,196,138,149,138,203,138,248,138,178,138,201,138,194,138,191,138,176,138,214,138,205,138,182,138,185,138,219,138,76,140,78,140,108,140,224,140,222,140,230,140,228,140,236,140,237,140,226,140,227,140,220,140,234,140,225,140,109,141,159,141,163,141,43,142,16,142,29,142,34,142,15,142,41,142,31,142,33,142,30,142,186,142,29,143,27,143,31,143,41,143,38,143,42,143,28,143,30,143,37,143,105,144,110,144,104,144,109,144,119,144,48,145,45,145,39,145,49,145,135,145,137,145,139,145,131,145,197,146,187,146,183,146,234,146,172,146,228,146,193,146,179,146,188,146,210,146,199,146,240,146,178,146,173,149,177,149,4,151,6,151,7,151,9,151,96,151,141,151,139,151,143,151,33,152,43,152,28,152,179,152,10,153,19,153,18,153,24,153,221,153,208,153,223,153,219,153,209,153,213,153,210,153,217,153,183,154,238,154,239,154,39,155,69,155,68,155,119,155,111,155,6,157,9,157,3,157,169,158,190,158,206,158,168,88,82,159,18,81,24,81,20,81,16,81,21,81,128,81,170,81,221,81,145,82,147,82,243,82,89,86,107,86,121,86,105,86,100,86,120,86,106,86,104,86,101,86,113,86,111,86,108,86,98,86,118,86,193,88,190,88,199,88,197,88,110,89,29,91,52,91,120,91,240,91,14,92,74,95,178,97,145,97,169,97,138,97,205,97,182,97,190,97,202,97,200,97,48,98,197,100,193,100,203,100,187,100,188,100,218,100,196,100,199,100,194,100,205,100,191,100,210,100,212,100,190,100,116,101,198,102,201,102,185,102,196,102,199,102,184,102,61,106,56,106,58,106,89,106,107,106,88,106,57,106,68,106,98,106,97,106,75,106,71,106,53,106,95,106,72,106,89,107,119,107,5,108,194,111,177,111,161,111,195,111,164,111,193,111,167,111,179,111,192,111,185,111,182,111,166,111,160,111,180,111,190,113,201,113,208,113,210,113,200,113,213,113,185,113,206,113,217,113,220,113,195,113,196,113,104,115,156,116,163,116,152,116,159,116,158,116,226,116,12,117,13,117,52,118,56,118,58,118,231,118,229,118,160,119,158,119,159,119,165,119,232,120,218,120,236,120,231,120,166,121,77,122,78,122,70,122,76,122,75,122,186,122,217,123,17,124,201,123,228,123,219,123,225,123,233,123,230,123,213,124,214,124,10,126,17,126,8,126,27,126,35,126,30,126,29,126,9,126,16,126,121,127,178,127,240,127,241,127,238,127,40,128,179,129,169,129,168,129,251,129,8,130,88,130,89,130,74,133,89,133,72,133,104,133,105,133,67,133,73,133,109,133,106,133,94,133,131,135,159,135,158,135,162,135,141,135,97,136,42,137,50,137,37,137,43,137,33,137,170,137,166,137,230,138,250,138,235,138,241,138,0,139,220,138,231,138,238,138,254,138,1,139,2,139,247,138,237,138,243,138,246,138,252,138,107,140,109,140,147,140,244,140,68,142,49,142,52,142,66,142,57,142,53,142,59,143,47,143,56,143,51,143,168,143,166,143,117,144,116,144,120,144,114,144,124,144,122,144,52,145,146,145,32,147,54,147,248,146,51,147,47,147,34,147,252,146,43,147,4,147,26,147,16,147,38,147,33,147,21,147,46,147,25,147,187,149,167,150,168,150,170,150,213,150,14,151,17,151,22,151,13,151,19,151,15,151,91,151,92,151,102,151,152,151,48,152,56,152,59,152,55,152,45,152,57,152,36,152,16,153,40,153,30,153,27,153,33,153,26,153,237,153,226,153,241,153,184,154,188,154,251,154,237,154,40,155,145,155,21,157,35,157,38,157,40,157,18,157,27,157,216,158,212,158,141,159,156,159,42,81,31,81,33,81,50,81,245,82,142,86,128,86,144,86,133,86,135,86,143,86,213,88,211,88,209,88,206,88,48,91,42,91,36,91,122,91,55,92,104,92,188,93,186,93,189,93,184,93,107,94,76,95,189,95,201,97,194,97,199,97,230,97,203,97,50,98,52,98,206,100,202,100,216,100,224,100,240,100,230,100,236,100,241,100,226,100,237,100,130,101,131,101,217,102,214,102,128,106,148,106,132,106,162,106,156,106,219,106,163,106,126,106,151,106,144,106,160,106,92,107,174,107,218,107,8,108,216,111,241,111,223,111,224,111,219,111,228,111,235,111,239,111,128,111,236,111,225,111,233,111,213,111,238,111,240,111,231,113,223,113,238,113,230,113,229,113,237,113,236,113,244,113,224,113,53,114,70,114,112,115,114,115,169,116,176,116,166,116,168,116,70,118,66,118,76,118,234,118,179,119,170,119,176,119,172,119,167,119,173,119,239,119,247,120,250,120,244,120,239,120,1,121,167,121,170,121,87,122,191,122,7,124,13,124,254,123,247,123,12,124,224,123,224,124,220,124,222,124,226,124,223,124,217,124,221,124,46,126,62,126,70,126,55,126,50,126,67,126,43,126,61,126,49,126,69,126,65,126,52,126,57,126,72,126,53,126,63,126,47,126,68,127,243,127,252,127,113,128,114,128,112,128,111,128,115,128,198,129,195,129,186,129,194,129,192,129,191,129,189,129,201,129,190,129,232,129,9,130,113,130,170,133,132,133,126,133,156,133,145,133,148,133,175,133,155,133,135,133,168,133,138,133,103,134,192,135,209,135,179,135,210,135,198,135,171,135,187,135,186,135,200,135,203,135,59,137,54,137,68,137,56,137,61,137,172,137,14,139,23,139,25,139,27,139,10,139,32,139,29,139,4,139,16,139,65,140,63,140,115,140,250,140,253,140,252,140,248,140,251,140,168,141,73,142,75,142,72,142,74,142,68,143,62,143,66,143,69,143,63,143,127,144,125,144,132,144,129,144,130,144,128,144,57,145,163,145,158,145,156,145,77,147,130,147,40,147,117,147,74,147,101,147,75,147,24,147,126,147,108,147,91,147,112,147,90,147,84,147,202,149,203,149,204,149,200,149,198,149,177,150,184,150,214,150,28,151,30,151,160,151,211,151,70,152,182,152,53,153,1,154,255,153,174,155,171,155,170,155,173,155,59,157,63,157,139,158,207,158,222,158,220,158,221,158,219,158,62,159,75,159,226,83,149,86,174,86,217,88,216,88,56,91,93,95,227,97,51,98,244,100,242,100,254,100,6,101,250,100,251,100,247,100,183,101,220,102,38,103,179,106,172,106,195,106,187,106,184,106,194,106,174,106,175,106,95,107,120,107,175,107,9,112,11,112,254,111,6,112,250,111,17,112,15,112,251,113,252,113,254,113,248,113,119,115,117,115,167,116,191,116,21,117,86,118,88,118,82,118,189,119,191,119,187,119,188,119,14,121,174,121,97,122,98,122,96,122,196,122,197,122,43,124,39,124,42,124,30,124,35,124,33,124,231,124,84,126,85,126,94,126,90,126,97,126,82,126,89,126,72,127,249,127,251,127,119,128,118,128,205,129,207,129,10,130,207,133,169,133,205,133,208,133,201,133,176,133,186,133,185,133,166,133,239,135,236,135,242,135,224,135,134,137,178,137,244,137,40,139,57,139,44,139,43,139,80,140,5,141,89,142,99,142,102,142,100,142,95,142,85,142,192,142,73,143,77,143,135,144,131,144,136,144,171,145,172,145,208,145,148,147,138,147,150,147,162,147,179,147,174,147,172,147,176,147,152,147,154,147,151,147,212,149,214,149,208,149,213,149,226,150,220,150,217,150,219,150,222,150,36,151,163,151,166,151,173,151,249,151,77,152,79,152,76,152,78,152,83,152,186,152,62,153,63,153,61,153,46,153,165,153,14,154,193,154,3,155,6,155,79,155,78,155,77,155,202,155,201,155,253,155,200,155,192,155,81,157,93,157,96,157,224,158,21,159,44,159,51,81,165,86,222,88,223,88,226,88,245,91,144,159,236,94,242,97,247,97,246,97,245,97,0,101,15,101,224,102,221,102,229,106,221,106,218,106,211,106,27,112,31,112,40,112,26,112,29,112,21,112,24,112,6,114,13,114,88,114,162,114,120,115,122,115,189,116,202,116,227,116,135,117,134,117,95,118,97,118,199,119,25,121,177,121,107,122,105,122,62,124,63,124,56,124,61,124,55,124,64,124,107,126,109,126,121,126,105,126,106,126,133,127,115,126,182,127,185,127,184,127,216,129,233,133,221,133,234,133,213,133,228,133,229,133,247,133,251,135,5,136,13,136,249,135,254,135,96,137,95,137,86,137,94,137,65,139,92,139,88,139,73,139,90,139,78,139,79,139,70,139,89,139,8,141,10,141,124,142,114,142,135,142,118,142,108,142,122,142,116,142,84,143,78,143,173,143,138,144,139,144,177,145,174,145,225,147,209,147,223,147,195,147,200,147,220,147,221,147,214,147,226,147,205,147,216,147,228,147,215,147,232,147,220,149,180,150,227,150,42,151,39,151,97,151,220,151,251,151,94,152,88,152,91,152,188,152,69,153,73,153,22,154,25,154,13,155,232,155,231,155,214,155,219,155,137,157,97,157,114,157,106,157,108,157,146,158,151,158,147,158,180,158,248,82,168,86,183,86,182,86,180,86,188,86,228,88,64,91,67,91,125,91,246,91,201,93,248,97,250,97,24,101,20,101,25,101,230,102,39,103,236,106,62,112,48,112,50,112,16,114,123,115,207,116,98,118,101,118,38,121,42,121,44,121,43,121,199,122,246,122,76,124,67,124,77,124,239,124,240,124,174,143,125,126,124,126,130,126,76,127,0,128,218,129,102,130,251,133,249,133,17,134,250,133,6,134,11,134,7,134,10,134,20,136,21,136,100,137,186,137,248,137,112,139,108,139,102,139,111,139,95,139,107,139,15,141,13,141,137,142,129,142,133,142,130,142,180,145,203,145,24,148,3,148,253,147,225,149,48,151,196,152,82,153,81,153,168,153,43,154,48,154,55,154,53,154,19,156,13,156,121,158,181,158,232,158,47,159,95,159,99,159,97,159,55,81,56,81,193,86,192,86,194,86,20,89,108,92,205,93,252,97,254,97,29,101,28,101,149,101,233,102,251,106,4,107,250,106,178,107,76,112,27,114,167,114,214,116,212,116,105,118,211,119,80,124,143,126,140,126,188,127,23,134,45,134,26,134,35,136,34,136,33,136,31,136,106,137,108,137,189,137,116,139,119,139,125,139,19,141,138,142,141,142,139,142,95,143,175,143,186,145,46,148,51,148,53,148,58,148,56,148,50,148,43,148,226,149,56,151,57,151,50,151,255,151,103,152,101,152,87,153,69,154,67,154,64,154,62,154,207,154,84,155,81,155,45,156,37,156,175,157,180,157,194,157,184,157,157,158,239,158,25,159,92,159,102,159,103,159,60,81,59,81,200,86,202,86,201,86,127,91,212,93,210,93,78,95,255,97,36,101,10,107,97,107,81,112,88,112,128,115,228,116,138,117,110,118,108,118,179,121,96,124,95,124,126,128,125,128,223,129,114,137,111,137,252,137,128,139,22,141,23,141,145,142,147,142,97,143,72,145,68,148,81,148,82,148,61,151,62,151,195,151,193,151,107,152,85,153,85,154,77,154,210,154,26,155,73,156,49,156,62,156,59,156,211,157,215,157,52,159,108,159,106,159,148,159,204,86,214,93,0,98,35,101,43,101,42,101,236,102,16,107,218,116,202,122,100,124,99,124,101,124,147,126,150,126,148,126,226,129,56,134,63,134,49,136,138,139,144,144,143,144,99,148,96,148,100,148,104,151,111,152,92,153,90,154,91,154,87,154,211,154,212,154,209,154,84,156,87,156,86,156,229,157,159,158,244,158,209,86,233,88,44,101,94,112,113,118,114,118,215,119,80,127,136,127,54,136,57,136,98,136,147,139,146,139,150,139,119,130,27,141,192,145,106,148,66,151,72,151,68,151,198,151,112,152,95,154,34,155,88,155,95,156,249,157,250,157,124,158,125,158,7,159,119,159,114,159,243,94,22,107,99,112,108,124,110,124,59,136,192,137,161,142,193,145,114,148,112,148,113,152,94,153,214,154,35,155,204,158,100,112,218,119,154,139,119,148,201,151,98,154,101,154,156,126,156,139,170,142,197,145,125,148,126,148,124,148,119,156,120,156,247,158,84,140,127,148,26,158,40,114,106,154,49,155,27,158,30,158,114,124,96,36,97,36,98,36,99,36,100,36,101,36,102,36,103,36,104,36,105,36,116,36,117,36,118,36,119,36,120,36,121,36,122,36,123,36,124,36,125,36,112,33,113,33,114,33,115,33,116,33,117,33,118,33,119,33,120,33,121,33,54,78,63,78,133,78,160,78,130,81,150,81,171,81,249,82,56,83,105,83,182,83,10,89,128,91,219,93,122,94,127,94,244,94,80,95,97,95,52,101,224,101,146,117,118,118,181,143,182,150,168,0,198,2,253,48,254,48,157,48,158,48,0,0,0,0,5,48,6,48,7,48,252,48,59,255,61,255,61,39,65,48,66,48,67,48,68,48,69,48,70,48,71,48,72,48,73,48,74,48,75,48,76,48,77,48,78,48,79,48,80,48,81,48,82,48,83,48,84,48,85,48,86,48,87,48,88,48,89,48,90,48,91,48,92,48,93,48,94,48,95,48,96,48,97,48,98,48,99,48,100,48,101,48,102,48,103,48,104,48,105,48,106,48,107,48,108,48,109,48,110,48,111,48,112,48,113,48,114,48,115,48,116,48,117,48,118,48,119,48,120,48,121,48,122,48,123,48,124,48,125,48,126,48,127,48,128,48,129,48,130,48,131,48,132,48,133,48,134,48,135,48,136,48,137,48,138,48,139,48,140,48,141,48,142,48,143,48,144,48,145,48,146,48,147,48,161,48,162,48,163,48,164,48,165,48,166,48,167,48,168,48,169,48,170,48,171,48,172,48,173,48,174,48,175,48,176,48,177,48,178,48,179,48,180,48,181,48,182,48,183,48,184,48,185,48,186,48,187,48,188,48,189,48,190,48,191,48,192,48,193,48,194,48,195,48,196,48,197,48,198,48,199,48,200,48,201,48,202,48,203,48,204,48,205,48,206,48,207,48,208,48,209,48,210,48,211,48,212,48,213,48,214,48,215,48,216,48,217,48,218,48,219,48,220,48,221,48,222,48,223,48,224,48,225,48,226,48,227,48,228,48,229,48,230,48,231,48,232,48,233,48,234,48,235,48,236,48,237,48,238,48,239,48,240,48,241,48,242,48,243,48,244,48,245,48,246,48,16,4,17,4,18,4,19,4,20,4,21,4,1,4,22,4,23,4,24,4,25,4,26,4,27,4,28,4,29,4,30,4,31,4,32,4,33,4,34,4,35,4,36,4,37,4,38,4,39,4,40,4,41,4,42,4,43,4,44,4,45,4,46,4,47,4,48,4,49,4,50,4,51,4,52,4,53,4,81,4,54,4,55,4,56,4,57,4,58,4,59,4,60,4,61,4,62,4,63,4,64,4,65,4,66,4,67,4,68,4,69,4,70,4,71,4,72,4,73,4,74,4,75,4,76,4,77,4,78,4,79,4,231,33,184,33,185,33,207,49,204,0,90,78,138,0,2,82,145,68,176,159,136,81,177,159,7,118,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,226,255,228,255,7,255,2,255,49,50,22,33,33,33,155,48,156,48,128,46,132,46,134,46,135,46,136,46,138,46,140,46,141,46,149,46,156,46,157,46,165,46,167,46,170,46,172,46,174,46,182,46,188,46,190,46,198,46,202,46,204,46,205,46,207,46,214,46,215,46,222,46,227,46,0,0,0,0,0,0,131,2,80,2,91,2,84,2,117,2,83,1,248,0,75,1,138,2,106,2,66,78,92,78,245,81,26,83,130,83,7,78,12,78,71,78,141,78,215,86,12,250,110,92,115,95,15,78,135,81,14,78,46,78,147,78,194,78,201,78,200,78,152,81,252,82,108,83,185,83,32,87,3,89,44,89,16,92,255,93,225,101,179,107,204,107,20,108,63,114,49,78,60,78,232,78,220,78,233,78,225,78,221,78,218,78,12,82,28,83,76,83,34,87,35,87,23,89,47,89,129,91,132,91,18,92,59,92,116,92,115,92,4,94,128,94,130,94,201,95,9,98,80,98,21,108,54,108,67,108,63,108,59,108,174,114,176,114,138,115,184,121,138,128,30,150,14,79,24,79,44,79,245,78,20,79,241,78,0,79,247,78,8,79,29,79,2,79,5,79,34,79,19,79,4,79,244,78,18,79,177,81,19,82,9,82,16,82,166,82,34,83,31,83,77,83,138,83,7,84,225,86,223,86,46,87,42,87,52,87,60,89,128,89,124,89,133,89,123,89,126,89,119,89,127,89,86,91,21,92,37,92,124,92,122,92,123,92,126,92,223,93,117,94,132,94,2,95,26,95,116,95,213,95,212,95,207,95,92,98,94,98,100,98,97,98,102,98,98,98,89,98,96,98,90,98,101,98,239,101,238,101,62,103,57,103,56,103,59,103,58,103,63,103,60,103,51,103,24,108,70,108,82,108,92,108,79,108,74,108,84,108,75,108,76,108,113,112,94,114,180,114,181,114,142,115,42,117,127,118,117,122,81,127,120,130,124,130,128,130,125,130,127,130,77,134,126,137,153,144,151,144,152,144,155,144,148,144,34,150,36,150,32,150,35,150,86,79,59,79,98,79,73,79,83,79,100,79,62,79,103,79,82,79,95,79,65,79,88,79,45,79,51,79,63,79,97,79,143,81,185,81,28,82,30,82,33,82,173,82,174,82,9,83,99,83,114,83,142,83,143,83,48,84,55,84,42,84,84,84,69,84,25,84,28,84,37,84,24,84,61,84,79,84,65,84,40,84,36,84,71,84,238,86,231,86,229,86,65,87,69,87,76,87,73,87,75,87,82,87,6,89,64,89,166,89,152,89,160,89,151,89,142,89,162,89,144,89,143,89,167,89,161,89,142,91,146,91,40,92,42,92,141,92,143,92,136,92,139,92,137,92,146,92,138,92,134,92,147,92,149,92,224,93,10,94,14,94,139,94,137,94,140,94,136,94,141,94,5,95,29,95,120,95,118,95,210,95,209,95,208,95,237,95,232,95,238,95,243,95,225,95,228,95,227,95,250,95,239,95,247,95,251,95,0,96,244,95,58,98,131,98,140,98,142,98,143,98,148,98,135,98,113,98,123,98,122,98,112,98,129,98,136,98,119,98,125,98,114,98,116,98,55,101,240,101,244,101,243,101,242,101,245,101,69,103,71,103,89,103,85,103,76,103,72,103,93,103,77,103,90,103,75,103,208,107,25,108,26,108,120,108,103,108,107,108,132,108,139,108,143,108,113,108,111,108,105,108,154,108,109,108,135,108,149,108,156,108,102,108,115,108,101,108,123,108,142,108,116,112,122,112,99,114,191,114,189,114,195,114,198,114,193,114,186,114,197,114,149,115,151,115,147,115,148,115,146,115,58,117,57,117,148,117,149,117,129,118,61,121,52,128,149,128,153,128,144,128,146,128,156,128,144,130,143,130,133,130,142,130,145,130,147,130,138,130,131,130,132,130,120,140,201,143,191,143,159,144,161,144,165,144,158,144,167,144,160,144,48,150,40,150,47,150,45,150,51,78,152,79,124,79,133,79,125,79,128,79,135,79,118,79,116,79,137,79,132,79,119,79,76,79,151,79,106,79,154,79,121,79,129,79,120,79,144,79,156,79,148,79,158,79,146,79,130,79,149,79,107,79,110,79,158,81,188,81,190,81,53,82,50,82,51,82,70,82,49,82,188,82,10,83,11,83,60,83,146,83,148,83,135,84,127,84,129,84,145,84,130,84,136,84,107,84,122,84,126,84,101,84,108,84,116,84,102,84,141,84,111,84,97,84,96,84,152,84,99,84,103,84,100,84,247,86,249,86,111,87,114,87,109,87,107,87,113,87,112,87,118,87,128,87,117,87,123,87,115,87,116,87,98,87,104,87,125,87,12,89,69,89,181,89,186,89,207,89,206,89,178,89,204,89,193,89,182,89,188,89,195,89,214,89,177,89,189,89,192,89,200,89,180,89,199,89,98,91,101,91,147,91,149,91,68,92,71,92,174,92,164,92,160,92,181,92,175,92,168,92,172,92,159,92,163,92,173,92,162,92,170,92,167,92,157,92,165,92,182,92,176,92,166,92,23,94,20,94,25,94,40,95,34,95,35,95,36,95,84,95,130,95,126,95,125,95,222,95,229,95,45,96,38,96,25,96,50,96,11,96,52,96,10,96,23,96,51,96,26,96,30,96,44,96,34,96,13,96,16,96,46,96,19,96,17,96,12,96,9,96,28,96,20,98,61,98,173,98,180,98,209,98,190,98,170,98,182,98,202,98,174,98,179,98,175,98,187,98,169,98,176,98,184,98,61,101,168,101,187,101,9,102,252,101,4,102,18,102,8,102,251,101,3,102,11,102,13,102,5,102,253,101,17,102,16,102,246,102,10,103,133,103,108,103,142,103,146,103,118,103,123,103,152,103,134,103,132,103,116,103,141,103,140,103,122,103,159,103,145,103,153,103,131,103,125,103,129,103,120,103,121,103,148,103,37,107,128,107,126,107,222,107,29,108,147,108,236,108,235,108,238,108,217,108,182,108,212,108,173,108,231,108,183,108,208,108,194,108,186,108,195,108,198,108,237,108,242,108,210,108,221,108,180,108,138,108,157,108,128,108,222,108,192,108,48,109,205,108,199,108,176,108,249,108,207,108,233,108,209,108,148,112,152,112,133,112,147,112,134,112,132,112,145,112,150,112,130,112,154,112,131,112,106,114,214,114,203,114,216,114,201,114,220,114,210,114,212,114,218,114,204,114,209,114,164,115,161,115,173,115,166,115,162,115,160,115,172,115,157,115,221,116,232,116,63,117,64,117,62,117,140,117,152,117,175,118,243,118,241,118,240,118,245,118,248,119,252,119,249,119,251,119,250,119,247,119,66,121,63,121,197,121,120,122,123,122,251,122,117,124,253,124,53,128,143,128,174,128,163,128,184,128,181,128,173,128,32,130,160,130,192,130,171,130,154,130,152,130,155,130,181,130,167,130,174,130,188,130,158,130,186,130,180,130,168,130,161,130,169,130,194,130,164,130,195,130,182,130,162,130,112,134,111,134,109,134,110,134,86,140,210,143,203,143,211,143,205,143,214,143,213,143,215,143,178,144,180,144,175,144,179,144,176,144,57,150,61,150,60,150,58,150,67,150,205,79,197,79,211,79,178,79,201,79,203,79,193,79,212,79,220,79,217,79,187,79,179,79,219,79,199,79,214,79,186,79,192,79,185,79,236,79,68,82,73,82,192,82,194,82,61,83,124,83,151,83,150,83,153,83,152,83,186,84,161,84,173,84,165,84,207,84,195,84,13,131,183,84,174,84,214,84,182,84,197,84,198,84,160,84,112,84,188,84,162,84,190,84,114,84,222,84,176,84,181,87,158,87,159,87,164,87,140,87,151,87,157,87,155,87,148,87,152,87,143,87,153,87,165,87,154,87,149,87,244,88,13,89,83,89,225,89,222,89,238,89,0,90,241,89,221,89,250,89,253,89,252,89,246,89,228,89,242,89,247,89,219,89,233,89,243,89,245,89,224,89,254,89,244,89,237,89,168,91,76,92,208,92,216,92,204,92,215,92,203,92,219,92,222,92,218,92,201,92,199,92,202,92,214,92,211,92,212,92,207,92,200,92,198,92,206,92,223,92,248,92,249,93,33,94,34,94,35,94,32,94,36,94,176,94,164,94,162,94,155,94,163,94,165,94,7,95,46,95,86,95,134,95,55,96,57,96,84,96,114,96,94,96,69,96,83,96,71,96,73,96,91,96,76,96,64,96,66,96,95,96,36,96,68,96,88,96,102,96,110,96,66,98,67,98,207,98,13,99,11,99,245,98,14,99,3,99,235,98,249,98,15,99,12,99,248,98,246,98,0,99,19,99,20,99,250,98,21,99,251,98,240,98,65,101,67,101,170,101,191,101,54,102,33,102,50,102,53,102,28,102,38,102,34,102,51,102,43,102,58,102,29,102,52,102,57,102,46,102,15,103,16,103,193,103,242,103,200,103,186,103,220,103,187,103,248,103,216,103,192,103,183,103,197,103,235,103,228,103,223,103,181,103,205,103,179,103,247,103,246,103,238,103,227,103,194,103,185,103,206,103,231,103,240,103,178,103,252,103,198,103,237,103,204,103,174,103,230,103,219,103,250,103,201,103,202,103,195,103,234,103,203,103,40,107,130,107,132,107,182,107,214,107,216,107,224,107,32,108,33,108,40,109,52,109,45,109,31,109,60,109,63,109,18,109,10,109,218,108,51,109,4,109,25,109,58,109,26,109,17,109,0,109,29,109,66,109,1,109,24,109,55,109,3,109,15,109,64,109,7,109,32,109,44,109,8,109,34,109,9,109,16,109,183,112,159,112,190,112,177,112,176,112,161,112,180,112,181,112,169,112,65,114,73,114,74,114,108,114,112,114,115,114,110,114,202,114,228,114,232,114,235,114,223,114,234,114,230,114,227,114,133,115,204,115,194,115,200,115,197,115,185,115,182,115,181,115,180,115,235,115,191,115,199,115,190,115,195,115,198,115,184,115,203,115,236,116,238,116,46,117,71,117,72,117,167,117,170,117,121,118,196,118,8,119,3,119,4,119,5,119,10,119,247,118,251,118,250,118,231,119,232,119,6,120,17,120,18,120,5,120,16,120,15,120,14,120,9,120,3,120,19,120,74,121,76,121,75,121,69,121,68,121,213,121,205,121,207,121,214,121,206,121,128,122,126,122,209,122,0,123,1,123,122,124,120,124,121,124,127,124,128,124,129,124,3,125,8,125,1,125,88,127,145,127,141,127,190,127,7,128,14,128,15,128,20,128,55,128,216,128,199,128,224,128,209,128,200,128,194,128,208,128,197,128,227,128,217,128,220,128,202,128,213,128,201,128,207,128,215,128,230,128,205,128,255,129,33,130,148,130,217,130,254,130,249,130,7,131,232,130,0,131,213,130,58,131,235,130,214,130,244,130,236,130,225,130,242,130,245,130,12,131,251,130,246,130,240,130,234,130,228,130,224,130,250,130,243,130,237,130,119,134,116,134,124,134,115,134,65,136,78,136,103,136,106,136,105,136,211,137,4,138,7,138,114,141,227,143,225,143,238,143,224,143,241,144,189,144,191,144,213,144,197,144,190,144,199,144,203,144,200,144,212,145,211,145,84,150,79,150,81,150,83,150,74,150,78,150,30,80,5,80,7,80,19,80,34,80,48,80,27,80,245,79,244,79,51,80,55,80,44,80,246,79,247,79,23,80,28,80,32,80,39,80,53,80,47,80,49,80,14,80,90,81,148,81,147,81,202,81,196,81,197,81,200,81,206,81,97,82,90,82,82,82,94,82,95,82,85,82,98,82,205,82,14,83,158,83,38,85,226,84,23,85,18,85,231,84,243,84,228,84,26,85,255,84,4,85,8,85,235,84,17,85,5,85,241,84,10,85,251,84,247,84,248,84,224,84,14,85,3,85,11,85,1,87,2,87,204,87,50,88,213,87,210,87,186,87,198,87,189,87,188,87,184,87,182,87,191,87,199,87,208,87,185,87,193,87,14,89,74,89,25,90,22,90,45,90,46,90,21,90,15,90,23,90,10,90,30,90,51,90,108,91,167,91,173,91,172,91,3,92,86,92,84,92,236,92,255,92,238,92,241,92,247,92,0,93,249,92,41,94,40,94,168,94,174,94,170,94,172,94,51,95,48,95,103,95,93,96,90,96,103,96,65,96,162,96,136,96,128,96,146,96,129,96,157,96,131,96,149,96,155,96,151,96,135,96,156,96,142,96,25,98,70,98,242,98,16,99,86,99,44,99,68,99,69,99,54,99,67,99,228,99,57,99,75,99,74,99,60,99,41,99,65,99,52,99,88,99,84,99,89,99,45,99,71,99,51,99,90,99,81,99,56,99,87,99,64,99,72,99,74,101,70,101,198,101,195,101,196,101,194,101,74,102,95,102,71,102,81,102,18,103,19,103,31,104,26,104,73,104,50,104,51,104,59,104,75,104,79,104,22,104,49,104,28,104,53,104,43,104,45,104,47,104,78,104,68,104,52,104,29,104,18,104,20,104,38,104,40,104,46,104,77,104,58,104,37,104,32,104,44,107,47,107,45,107,49,107,52,107,109,107,130,128,136,107,230,107,228,107,232,107,227,107,226,107,231,107,37,108,122,109,99,109,100,109,118,109,13,109,97,109,146,109,88,109,98,109,109,109,111,109,145,109,141,109,239,109,127,109,134,109,94,109,103,109,96,109,151,109,112,109,124,109,95,109,130,109,152,109,47,109,104,109,139,109,126,109,128,109,132,109,22,109,131,109,123,109,125,109,117,109,144,109,220,112,211,112,209,112,221,112,203,112,57,127,226,112,215,112,210,112,222,112,224,112,212,112,205,112,197,112,198,112,199,112,218,112,206,112,225,112,66,114,120,114,119,114,118,114,0,115,250,114,244,114,254,114,246,114,243,114,251,114,1,115,211,115,217,115,229,115,214,115,188,115,231,115,227,115,233,115,220,115,210,115,219,115,212,115,221,115,218,115,215,115,216,115,232,115,222,116,223,116,244,116,245,116,33,117,91,117,95,117,176,117,193,117,187,117,196,117,192,117,191,117,182,117,186,117,138,118,201,118,29,119,27,119,16,119,19,119,18,119,35,119,17,119,21,119,25,119,26,119,34,119,39,119,35,120,44,120,34,120,53,120,47,120,40,120,46,120,43,120,33,120,41,120,51,120,42,120,49,120,84,121,91,121,79,121,92,121,83,121,82,121,81,121,235,121,236,121,224,121,238,121,237,121,234,121,220,121,222,121,221,121,134,122,137,122,133,122,139,122,140,122,138,122,135,122,216,122,16,123,4,123,19,123,5,123,15,123,8,123,10,123,14,123,9,123,18,123,132,124,145,124,138,124,140,124,136,124,141,124,133,124,30,125,29,125,17,125,14,125,24,125,22,125,19,125,31,125,18,125,15,125,12,125,92,127,97,127,94,127,96,127,93,127,91,127,150,127,146,127,195,127,194,127,192,127,22,128,62,128,57,128,250,128,242,128,249,128,245,128,1,129,251,128,0,129,1,130,47,130,37,130,51,131,45,131,68,131,25,131,81,131,37,131,86,131,63,131,65,131,38,131,28,131,34,131,66,131,78,131,27,131,42,131,8,131,60,131,77,131,22,131,36,131,32,131,55,131,47,131,41,131,71,131,69,131,76,131,83,131,30,131,44,131,75,131,39,131,72,131,83,134,82,134,162,134,168,134,150,134,141,134,145,134,158,134,135,134,151,134,134,134,139,134,154,134,133,134,165,134,153,134,161,134,167,134,149,134,152,134,142,134,157,134,144,134,148,134,67,136,68,136,109,136,117,136,118,136,114,136,128,136,113,136,127,136,111,136,131,136,126,136,116,136,124,136,18,138,71,140,87,140,123,140,164,140,163,140,118,141,120,141,181,141,183,141,182,141,209,142,211,142,254,143,245,143,2,144,255,143,251,143,4,144,252,143,246,143,214,144,224,144,217,144,218,144,227,144,223,144,229,144,216,144,219,144,215,144,220,144,228,144,80,145,78,145,79,145,213,145,226,145,218,145,92,150,95,150,188,150,227,152,223,154,47,155,127,78,112,80,106,80,97,80,94,80,96,80,83,80,75,80,93,80,114,80,72,80,77,80,65,80,91,80,74,80,98,80,21,80,69,80,95,80,105,80,107,80,99,80,100,80,70,80,64,80,110,80,115,80,87,80,81,80,208,81,107,82,109,82,108,82,110,82,214,82,211,82,45,83,156,83,117,85,118,85,60,85,77,85,80,85,52,85,42,85,81,85,98,85,54,85,53,85,48,85,82,85,69,85,12,85,50,85,101,85,78,85,57,85,72,85,45,85,59,85,64,85,75,85,10,87,7,87,251,87,20,88,226,87,246,87,220,87,244,87,0,88,237,87,253,87,8,88,248,87,11,88,243,87,207,87,7,88,238,87,227,87,242,87,229,87,236,87,225,87,14,88,252,87,16,88,231,87,1,88,12,88,241,87,233,87,240,87,13,88,4,88,92,89,96,90,88,90,85,90,103,90,94,90,56,90,53,90,109,90,80,90,95,90,101,90,108,90,83,90,100,90,87,90,67,90,93,90,82,90,68,90,91,90,72,90,142,90,62,90,77,90,57,90,76,90,112,90,105,90,71,90,81,90,86,90,66,90,92,90,114,91,110,91,193,91,192,91,89,92,30,93,11,93,29,93,26,93,32,93,12,93,40,93,13,93,38,93,37,93,15,93,48,93,18,93,35,93,31,93,46,93,62,94,52,94,177,94,180,94,185,94,178,94,179,94,54,95,56,95,155,95,150,95,159,95,138,96,144], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+115317);
/* memory initializer */ allocate([96,134,96,190,96,176,96,186,96,211,96,212,96,207,96,228,96,217,96,221,96,200,96,177,96,219,96,183,96,202,96,191,96,195,96,205,96,192,96,50,99,101,99,138,99,130,99,125,99,189,99,158,99,173,99,157,99,151,99,171,99,142,99,111,99,135,99,144,99,110,99,175,99,117,99,156,99,109,99,174,99,124,99,164,99,59,99,159,99,120,99,133,99,129,99,145,99,141,99,112,99,83,101,205,101,101,102,97,102,91,102,89,102,92,102,98,102,24,103,121,104,135,104,144,104,156,104,109,104,110,104,174,104,171,104,86,105,111,104,163,104,172,104,169,104,117,104,116,104,178,104,143,104,119,104,146,104,124,104,107,104,114,104,170,104,128,104,113,104,126,104,155,104,150,104,139,104,160,104,137,104,164,104,120,104,123,104,145,104,140,104,138,104,125,104,54,107,51,107,55,107,56,107,145,107,143,107,141,107,142,107,140,107,42,108,192,109,171,109,180,109,179,109,116,110,172,109,233,109,226,109,183,109,246,109,212,109,0,110,200,109,224,109,223,109,214,109,190,109,229,109,220,109,221,109,219,109,244,109,202,109,189,109,237,109,240,109,186,109,213,109,194,109,207,109,201,109,208,109,242,109,211,109,253,109,215,109,205,109,227,109,187,109,250,112,13,113,247,112,23,113,244,112,12,113,240,112,4,113,243,112,16,113,252,112,255,112,6,113,19,113,0,113,248,112,246,112,11,113,2,113,14,113,126,114,123,114,124,114,127,114,29,115,23,115,7,115,17,115,24,115,10,115,8,115,255,114,15,115,30,115,136,115,246,115,248,115,245,115,4,116,1,116,253,115,7,116,0,116,250,115,252,115,255,115,12,116,11,116,244,115,8,116,100,117,99,117,206,117,210,117,207,117,203,117,204,117,209,117,208,117,143,118,137,118,211,118,57,119,47,119,45,119,49,119,50,119,52,119,51,119,61,119,37,119,59,119,53,119,72,120,82,120,73,120,77,120,74,120,76,120,38,120,69,120,80,120,100,121,103,121,105,121,106,121,99,121,107,121,97,121,187,121,250,121,248,121,246,121,247,121,143,122,148,122,144,122,53,123,71,123,52,123,37,123,48,123,34,123,36,123,51,123,24,123,42,123,29,123,49,123,43,123,45,123,47,123,50,123,56,123,26,123,35,123,148,124,152,124,150,124,163,124,53,125,61,125,56,125,54,125,58,125,69,125,44,125,41,125,65,125,71,125,62,125,63,125,74,125,59,125,40,125,99,127,149,127,156,127,157,127,155,127,202,127,203,127,205,127,208,127,209,127,199,127,207,127,201,127,31,128,30,128,27,128,71,128,67,128,72,128,24,129,37,129,25,129,27,129,45,129,31,129,44,129,30,129,33,129,21,129,39,129,29,129,34,129,17,130,56,130,51,130,58,130,52,130,50,130,116,130,144,131,163,131,168,131,141,131,122,131,115,131,164,131,116,131,143,131,129,131,149,131,153,131,117,131,148,131,169,131,125,131,131,131,140,131,157,131,155,131,170,131,139,131,126,131,165,131,175,131,136,131,151,131,176,131,127,131,166,131,135,131,174,131,118,131,154,131,89,134,86,134,191,134,183,134,194,134,193,134,197,134,186,134,176,134,200,134,185,134,179,134,184,134,204,134,180,134,187,134,188,134,195,134,189,134,190,134,82,136,137,136,149,136,168,136,162,136,170,136,154,136,145,136,161,136,159,136,152,136,167,136,153,136,155,136,151,136,164,136,172,136,140,136,147,136,142,136,130,137,214,137,217,137,213,137,48,138,39,138,44,138,30,138,57,140,59,140,92,140,93,140,125,140,165,140,125,141,123,141,121,141,188,141,194,141,185,141,191,141,193,141,216,142,222,142,221,142,220,142,215,142,224,142,225,142,36,144,11,144,17,144,28,144,12,144,33,144,239,144,234,144,240,144,244,144,242,144,243,144,212,144,235,144,236,144,233,144,86,145,88,145,90,145,83,145,85,145,236,145,244,145,241,145,243,145,248,145,228,145,249,145,234,145,235,145,247,145,232,145,238,145,122,149,134,149,136,149,124,150,109,150,107,150,113,150,111,150,191,150,106,151,4,152,229,152,151,153,155,80,149,80,148,80,158,80,139,80,163,80,131,80,140,80,142,80,157,80,104,80,156,80,146,80,130,80,135,80,95,81,212,81,18,83,17,83,164,83,167,83,145,85,168,85,165,85,173,85,119,85,69,86,162,85,147,85,136,85,143,85,181,85,129,85,163,85,146,85,164,85,125,85,140,85,166,85,127,85,149,85,161,85,142,85,12,87,41,88,55,88,25,88,30,88,39,88,35,88,40,88,245,87,72,88,37,88,28,88,27,88,51,88,63,88,54,88,46,88,57,88,56,88,45,88,44,88,59,88,97,89,175,90,148,90,159,90,122,90,162,90,158,90,120,90,166,90,124,90,165,90,172,90,149,90,174,90,55,90,132,90,138,90,151,90,131,90,139,90,169,90,123,90,125,90,140,90,156,90,143,90,147,90,157,90,234,91,205,91,203,91,212,91,209,91,202,91,206,91,12,92,48,92,55,93,67,93,107,93,65,93,75,93,63,93,53,93,81,93,78,93,85,93,51,93,58,93,82,93,61,93,49,93,89,93,66,93,57,93,73,93,56,93,60,93,50,93,54,93,64,93,69,93,68,94,65,94,88,95,166,95,165,95,171,95,201,96,185,96,204,96,226,96,206,96,196,96,20,97,242,96,10,97,22,97,5,97,245,96,19,97,248,96,252,96,254,96,193,96,3,97,24,97,29,97,16,97,255,96,4,97,11,97,74,98,148,99,177,99,176,99,206,99,229,99,232,99,239,99,195,99,157,100,243,99,202,99,224,99,246,99,213,99,242,99,245,99,97,100,223,99,190,99,221,99,220,99,196,99,216,99,211,99,194,99,199,99,204,99,203,99,200,99,240,99,215,99,217,99,50,101,103,101,106,101,100,101,92,101,104,101,101,101,140,101,157,101,158,101,174,101,208,101,210,101,124,102,108,102,123,102,128,102,113,102,121,102,106,102,114,102,1,103,12,105,211,104,4,105,220,104,42,105,236,104,234,104,241,104,15,105,214,104,247,104,235,104,228,104,246,104,19,105,16,105,243,104,225,104,7,105,204,104,8,105,112,105,180,104,17,105,239,104,198,104,20,105,248,104,208,104,253,104,252,104,232,104,11,105,10,105,23,105,206,104,200,104,221,104,222,104,230,104,244,104,209,104,6,105,212,104,233,104,21,105,37,105,199,104,57,107,59,107,63,107,60,107,148,107,151,107,153,107,149,107,189,107,240,107,242,107,243,107,48,108,252,109,70,110,71,110,31,110,73,110,136,110,60,110,61,110,69,110,98,110,43,110,63,110,65,110,93,110,115,110,28,110,51,110,75,110,64,110,81,110,59,110,3,110,46,110,94,110,104,110,92,110,97,110,49,110,40,110,96,110,113,110,107,110,57,110,34,110,48,110,83,110,101,110,39,110,120,110,100,110,119,110,85,110,121,110,82,110,102,110,53,110,54,110,90,110,32,113,30,113,47,113,251,112,46,113,49,113,35,113,37,113,34,113,50,113,31,113,40,113,58,113,27,113,75,114,90,114,136,114,137,114,134,114,133,114,139,114,18,115,11,115,48,115,34,115,49,115,51,115,39,115,50,115,45,115,38,115,35,115,53,115,12,115,46,116,44,116,48,116,43,116,22,116,26,116,33,116,45,116,49,116,36,116,35,116,29,116,41,116,32,116,50,116,251,116,47,117,111,117,108,117,231,117,218,117,225,117,230,117,221,117,223,117,228,117,215,117,149,118,146,118,218,118,70,119,71,119,68,119,77,119,69,119,74,119,78,119,75,119,76,119,222,119,236,119,96,120,100,120,101,120,92,120,109,120,113,120,106,120,110,120,112,120,105,120,104,120,94,120,98,120,116,121,115,121,114,121,112,121,2,122,10,122,3,122,12,122,4,122,153,122,230,122,228,122,74,123,59,123,68,123,72,123,76,123,78,123,64,123,88,123,69,123,162,124,158,124,168,124,161,124,88,125,111,125,99,125,83,125,86,125,103,125,106,125,79,125,109,125,92,125,107,125,82,125,84,125,105,125,81,125,95,125,78,125,62,127,63,127,101,127,102,127,162,127,160,127,161,127,215,127,81,128,79,128,80,128,254,128,212,128,67,129,74,129,82,129,79,129,71,129,61,129,77,129,58,129,230,129,238,129,247,129,248,129,249,129,4,130,60,130,61,130,63,130,117,130,59,131,207,131,249,131,35,132,192,131,232,131,18,132,231,131,228,131,252,131,246,131,16,132,198,131,200,131,235,131,227,131,191,131,1,132,221,131,229,131,216,131,255,131,225,131,203,131,206,131,214,131,245,131,201,131,9,132,15,132,222,131,17,132,6,132,194,131,243,131,213,131,250,131,199,131,209,131,234,131,19,132,195,131,236,131,238,131,196,131,251,131,215,131,226,131,27,132,219,131,254,131,216,134,226,134,230,134,211,134,227,134,218,134,234,134,221,134,235,134,220,134,236,134,233,134,215,134,232,134,209,134,72,136,86,136,85,136,186,136,215,136,185,136,184,136,192,136,190,136,182,136,188,136,183,136,189,136,178,136,1,137,201,136,149,137,152,137,151,137,221,137,218,137,219,137,78,138,77,138,57,138,89,138,64,138,87,138,88,138,68,138,69,138,82,138,72,138,81,138,74,138,76,138,79,138,95,140,129,140,128,140,186,140,190,140,176,140,185,140,181,140,132,141,128,141,137,141,216,141,211,141,205,141,199,141,214,141,220,141,207,141,213,141,217,141,200,141,215,141,197,141,239,142,247,142,250,142,249,142,230,142,238,142,229,142,245,142,231,142,232,142,246,142,235,142,241,142,236,142,244,142,233,142,45,144,52,144,47,144,6,145,44,145,4,145,255,144,252,144,8,145,249,144,251,144,1,145,0,145,7,145,5,145,3,145,97,145,100,145,95,145,98,145,96,145,1,146,10,146,37,146,3,146,26,146,38,146,15,146,12,146,0,146,18,146,255,145,253,145,6,146,4,146,39,146,2,146,28,146,36,146,25,146,23,146,5,146,22,146,123,149,141,149,140,149,144,149,135,150,126,150,136,150,137,150,131,150,128,150,194,150,200,150,195,150,241,150,240,150,108,151,112,151,110,151,7,152,169,152,235,152,230,156,249,158,131,78,132,78,182,78,189,80,191,80,198,80,174,80,196,80,202,80,180,80,200,80,194,80,176,80,193,80,186,80,177,80,203,80,201,80,182,80,184,80,215,81,122,82,120,82,123,82,124,82,195,85,219,85,204,85,208,85,203,85,202,85,221,85,192,85,212,85,196,85,233,85,191,85,210,85,141,85,207,85,213,85,226,85,214,85,200,85,242,85,205,85,217,85,194,85,20,87,83,88,104,88,100,88,79,88,77,88,73,88,111,88,85,88,78,88,93,88,89,88,101,88,91,88,61,88,99,88,113,88,252,88,199,90,196,90,203,90,186,90,184,90,177,90,181,90,176,90,191,90,200,90,187,90,198,90,183,90,192,90,202,90,180,90,182,90,205,90,185,90,144,90,214,91,216,91,217,91,31,92,51,92,113,93,99,93,74,93,101,93,114,93,108,93,94,93,104,93,103,93,98,93,240,93,79,94,78,94,74,94,77,94,75,94,197,94,204,94,198,94,203,94,199,94,64,95,175,95,173,95,247,96,73,97,74,97,43,97,69,97,54,97,50,97,46,97,70,97,47,97,79,97,41,97,64,97,32,98,104,145,35,98,37,98,36,98,197,99,241,99,235,99,16,100,18,100,9,100,32,100,36,100,51,100,67,100,31,100,21,100,24,100,57,100,55,100,34,100,35,100,12,100,38,100,48,100,40,100,65,100,53,100,47,100,10,100,26,100,64,100,37,100,39,100,11,100,231,99,27,100,46,100,33,100,14,100,111,101,146,101,211,101,134,102,140,102,149,102,144,102,139,102,138,102,153,102,148,102,120,102,32,103,102,105,95,105,56,105,78,105,98,105,113,105,63,105,69,105,106,105,57,105,66,105,87,105,89,105,122,105,72,105,73,105,53,105,108,105,51,105,61,105,101,105,240,104,120,105,52,105,105,105,64,105,111,105,68,105,118,105,88,105,65,105,116,105,76,105,59,105,75,105,55,105,92,105,79,105,81,105,50,105,82,105,47,105,123,105,60,105,70,107,69,107,67,107,66,107,72,107,65,107,155,107,13,250,251,107,252,107,249,107,247,107,248,107,155,110,214,110,200,110,143,110,192,110,159,110,147,110,148,110,160,110,177,110,185,110,198,110,210,110,189,110,193,110,158,110,201,110,183,110,176,110,205,110,166,110,207,110,178,110,190,110,195,110,220,110,216,110,153,110,146,110,142,110,141,110,164,110,161,110,191,110,179,110,208,110,202,110,151,110,174,110,163,110,71,113,84,113,82,113,99,113,96,113,65,113,93,113,98,113,114,113,120,113,106,113,97,113,66,113,88,113,67,113,75,113,112,113,95,113,80,113,83,113,68,113,77,113,90,113,79,114,141,114,140,114,145,114,144,114,142,114,60,115,66,115,59,115,58,115,64,115,74,115,73,115,68,116,74,116,75,116,82,116,81,116,87,116,64,116,79,116,80,116,78,116,66,116,70,116,77,116,84,116,225,116,255,116,254,116,253,116,29,117,121,117,119,117,131,105,239,117,15,118,3,118,247,117,254,117,252,117,249,117,248,117,16,118,251,117,246,117,237,117,245,117,253,117,153,118,181,118,221,118,85,119,95,119,96,119,82,119,86,119,90,119,105,119,103,119,84,119,89,119,109,119,224,119,135,120,154,120,148,120,143,120,132,120,149,120,133,120,134,120,161,120,131,120,121,120,153,120,128,120,150,120,123,120,124,121,130,121,125,121,121,121,17,122,24,122,25,122,18,122,23,122,21,122,34,122,19,122,27,122,16,122,163,122,162,122,158,122,235,122,102,123,100,123,109,123,116,123,105,123,114,123,101,123,115,123,113,123,112,123,97,123,120,123,118,123,99,123,178,124,180,124,175,124,136,125,134,125,128,125,141,125,127,125,133,125,122,125,142,125,123,125,131,125,124,125,140,125,148,125,132,125,125,125,146,125,109,127,107,127,103,127,104,127,108,127,166,127,165,127,167,127,219,127,220,127,33,128,100,129,96,129,119,129,92,129,105,129,91,129,98,129,114,129,33,103,94,129,118,129,103,129,111,129,68,129,97,129,29,130,73,130,68,130,64,130,66,130,69,130,241,132,63,132,86,132,118,132,121,132,143,132,141,132,101,132,81,132,64,132,134,132,103,132,48,132,77,132,125,132,90,132,89,132,116,132,115,132,93,132,7,133,94,132,55,132,58,132,52,132,122,132,67,132,120,132,50,132,69,132,41,132,217,131,75,132,47,132,66,132,45,132,95,132,112,132,57,132,78,132,76,132,82,132,111,132,197,132,142,132,59,132,71,132,54,132,51,132,104,132,126,132,68,132,43,132,96,132,84,132,110,132,80,132,11,135,4,135,247,134,12,135,250,134,214,134,245,134,77,135,248,134,14,135,9,135,1,135,246,134,13,135,5,135,214,136,203,136,205,136,206,136,222,136,219,136,218,136,204,136,208,136,133,137,155,137,223,137,229,137,228,137,225,137,224,137,226,137,220,137,230,137,118,138,134,138,127,138,97,138,63,138,119,138,130,138,132,138,117,138,131,138,129,138,116,138,122,138,60,140,75,140,74,140,101,140,100,140,102,140,134,140,132,140,133,140,204,140,104,141,105,141,145,141,140,141,142,141,143,141,141,141,147,141,148,141,144,141,146,141,240,141,224,141,236,141,241,141,238,141,208,141,233,141,227,141,226,141,231,141,242,141,235,141,244,141,6,143,255,142,1,143,0,143,5,143,7,143,8,143,2,143,11,143,82,144,63,144,68,144,73,144,61,144,16,145,13,145,15,145,17,145,22,145,20,145,11,145,14,145,110,145,111,145,72,146,82,146,48,146,58,146,102,146,51,146,101,146,94,146,131,146,46,146,74,146,70,146,109,146,108,146,79,146,96,146,103,146,111,146,54,146,97,146,112,146,49,146,84,146,99,146,80,146,114,146,78,146,83,146,76,146,86,146,50,146,159,149,156,149,158,149,155,149,146,150,147,150,145,150,151,150,206,150,250,150,253,150,248,150,245,150,115,151,119,151,120,151,114,151,15,152,13,152,14,152,172,152,246,152,249,152,175,153,178,153,176,153,181,153,173,154,171,154,91,155,234,156,237,156,231,156,128,158,253,158,230,80,212,80,215,80,232,80,243,80,219,80,234,80,221,80,228,80,211,80,236,80,240,80,239,80,227,80,224,80,216,81,128,82,129,82,233,82,235,82,48,83,172,83,39,86,21,86,12,86,18,86,252,85,15,86,28,86,1,86,19,86,2,86,250,85,29,86,4,86,255,85,249,85,137,88,124,88,144,88,152,88,134,88,129,88,127,88,116,88,139,88,122,88,135,88,145,88,142,88,118,88,130,88,136,88,123,88,148,88,143,88,254,88,107,89,220,90,238,90,229,90,213,90,234,90,218,90,237,90,235,90,243,90,226,90,224,90,219,90,236,90,222,90,221,90,217,90,232,90,223,90,119,91,224,91,227,91,99,92,130,93,128,93,125,93,134,93,122,93,129,93,119,93,138,93,137,93,136,93,126,93,124,93,141,93,121,93,127,93,88,94,89,94,83,94,216,94,209,94,215,94,206,94,220,94,213,94,217,94,210,94,212,94,68,95,67,95,111,95,182,95,44,97,40,97,65,97,94,97,113,97,115,97,82,97,83,97,114,97,108,97,128,97,116,97,84,97,122,97,91,97,101,97,59,97,106,97,97,97,86,97,41,98,39,98,43,98,43,100,77,100,91,100,93,100,116,100,118,100,114,100,115,100,125,100,117,100,102,100,166,100,78,100,130,100,94,100,92,100,75,100,83,100,96,100,80,100,127,100,63,100,108,100,107,100,89,100,101,100,119,100,115,101,160,101,161,102,160,102,159,102,5,103,4,103,34,103,177,105,182,105,201,105,160,105,206,105,150,105,176,105,172,105,188,105,145,105,153,105,142,105,167,105,141,105,169,105,190,105,175,105,191,105,196,105,189,105,164,105,212,105,185,105,202,105,154,105,207,105,179,105,147,105,170,105,161,105,158,105,217,105,151,105,144,105,194,105,181,105,165,105,198,105,74,107,77,107,75,107,158,107,159,107,160,107,195,107,196,107,254,107,206,110,245,110,241,110,3,111,37,111,248,110,55,111,251,110,46,111,9,111,78,111,25,111,26,111,39,111,24,111,59,111,18,111,237,110,10,111,54,111,115,111,249,110,238,110,45,111,64,111,48,111,60,111,53,111,235,110,7,111,14,111,67,111,5,111,253,110,246,110,57,111,28,111,252,110,58,111,31,111,13,111,30,111,8,111,33,111,135,113,144,113,137,113,128,113,133,113,130,113,143,113,123,113,134,113,129,113,151,113,68,114,83,114,151,114,149,114,147,114,67,115,77,115,81,115,76,115,98,116,115,116,113,116,117,116,114,116,103,116,110,116,0,117,2,117,3,117,125,117,144,117,22,118,8,118,12,118,21,118,17,118,10,118,20,118,184,118,129,119,124,119,133,119,130,119,110,119,128,119,111,119,126,119,131,119,178,120,170,120,180,120,173,120,168,120,126,120,171,120,158,120,165,120,160,120,172,120,162,120,164,120,152,121,138,121,139,121,150,121,149,121,148,121,147,121,151,121,136,121,146,121,144,121,43,122,74,122,48,122,47,122,40,122,38,122,168,122,171,122,172,122,238,122,136,123,156,123,138,123,145,123,144,123,150,123,141,123,140,123,155,123,142,123,133,123,152,123,132,82,153,123,164,123,130,123,187,124,191,124,188,124,186,124,167,125,183,125,194,125,163,125,170,125,193,125,192,125,197,125,157,125,206,125,196,125,198,125,203,125,204,125,175,125,185,125,150,125,188,125,159,125,166,125,174,125,169,125,161,125,201,125,115,127,226,127,227,127,229,127,222,127,36,128,93,128,92,128,137,129,134,129,131,129,135,129,141,129,140,129,139,129,21,130,151,132,164,132,161,132,159,132,186,132,206,132,194,132,172,132,174,132,171,132,185,132,180,132,193,132,205,132,170,132,154,132,177,132,208,132,157,132,167,132,187,132,162,132,148,132,199,132,204,132,155,132,169,132,175,132,168,132,214,132,152,132,182,132,207,132,160,132,215,132,212,132,210,132,219,132,176,132,145,132,97,134,51,135,35,135,40,135,107,135,64,135,46,135,30,135,33,135,25,135,27,135,67,135,44,135,65,135,62,135,70,135,32,135,50,135,42,135,45,135,60,135,18,135,58,135,49,135,53,135,66,135,38,135,39,135,56,135,36,135,26,135,48,135,17,135,247,136,231,136,241,136,242,136,250,136,254,136,238,136,252,136,246,136,251,136,240,136,236,136,235,136,157,137,161,137,159,137,158,137,233,137,235,137,232,137,171,138,153,138,139,138,146,138,143,138,150,138,61,140,104,140,105,140,213,140,207,140,215,140,150,141,9,142,2,142,255,141,13,142,253,141,10,142,3,142,7,142,6,142,5,142,254,141,0,142,4,142,16,143,17,143,14,143,13,143,35,145,28,145,32,145,34,145,31,145,29,145,26,145,36,145,33,145,27,145,122,145,114,145,121,145,115,145,165,146,164,146,118,146,155,146,122,146,160,146,148,146,170,146,141,146,166,146,154,146,171,146,121,146,151,146,127,146,163,146,238,146,142,146,130,146,149,146,162,146,125,146,136,146,161,146,138,146,134,146,140,146,153,146,167,146,126,146,135,146,169,146,157,146,139,146,45,146,158,150,161,150,255,150,88,151,125,151,122,151,126,151,131,151,128,151,130,151,123,151,132,151,129,151,127,151,206,151,205,151,22,152,173,152,174,152,2,153,0,153,7,153,157,153,156,153,195,153,185,153,187,153,186,153,194,153,189,153,199,153,177,154,227,154,231,154,62,155,63,155,96,155,97,155,95,155,241,156,242,156,245,156,167,158,255,80,3,81,48,81,248,80,6,81,7,81,246,80,254,80,11,81,12,81,253,80,10,81,139,82,140,82,241,82,239,82,72,86,66,86,76,86,53,86,65,86,74,86,73,86,70,86,88,86,90,86,64,86,51,86,61,86,44,86,62,86,56,86,42,86,58,86,26,87,171,88,157,88,177,88,160,88,163,88,175,88,172,88,165,88,161,88,255,88,255,90,244,90,253,90,247,90,246,90,3,91,248,90,2,91,249,90,1,91,7,91,5,91,15,91,103,92,153,93,151,93,159,93,146,93,162,93,147,93,149,93,160,93,156,93,161,93,154,93,158,93,105,94,93,94,96,94,92,94,243,125,219,94,222,94,225,94,73,95,178,95,139,97,131,97,121,97,177,97,176,97,162,97,137,97,155,97,147,97,175,97,173,97,159,97,146,97,170,97,161,97,141,97,102,97,179,97,45,98,110,100,112,100,150,100,160,100,133,100,151,100,156,100,143,100,139,100,138,100,140,100,163,100,159,100,104,100,177,100,152,100,118,101,122,101,121,101,123,101,178,101,179,101,181,102,176,102,169,102,178,102,183,102,170,102,175,102,0,106,6,106,23,106,229,105,248,105,21,106,241,105,228,105,32,106,255,105,236,105,226,105,27,106,29,106,254,105,39,106,242,105,238,105,20,106,247,105,231,105,64,106,8,106,230,105,251,105,13,106,252,105,235,105,9,106,4,106,24,106,37,106,15,106,246,105,38,106,7,106,244,105,22,106,81,107,165,107,163,107,162,107,166,107,1,108,0,108,255,107,2,108,65,111,38,111,126,111,135,111,198,111,146,111,141,111,137,111,140,111,98,111,79,111,133,111,90,111,150,111,118,111,108,111,130,111,85,111,114,111,82,111,80,111,87,111,148,111,147,111,93,111,0,111,97,111,107,111,125,111,103,111,144,111,83,111,139,111,105,111,127,111,149,111,99,111,119,111,106,111,123,111,178,113,175,113,155,113,176,113,160,113,154,113,169,113,181,113,157,113,165,113,158,113,164,113,161,113,170,113,156,113,167,113,179,113,152,114,154,114,88,115,82,115,94,115,95,115,96,115,93,115,91,115,97,115,90,115,89,115,98,115,135,116,137,116,138,116,134,116,129,116,125,116,133,116,136,116,124,116,121,116,8,117,7,117,126,117,37,118,30,118,25,118,29,118,28,118,35,118,26,118,40,118,27,118,156,118,157,118,158,118,155,118,141,119,143,119,137,119,136,119,205,120,187,120,207,120,204,120,209,120,206,120,212,120,200,120,195,120,196,120,201,120,154,121,161,121,160,121,156,121,162,121,155,121,118,107,57,122,178,122,180,122,179,122,183,123,203,123,190,123,172,123,206,123,175,123,185,123,202,123,181,123,197,124,200,124,204,124,203,124,247,125,219,125,234,125,231,125,215,125,225,125,3,126,250,125,230,125,246,125,241,125,240,125,238,125,223,125,118,127,172,127,176,127,173,127,237,127,235,127,234,127,236,127,230,127,232,127,100,128,103,128,163,129,159,129,158,129,149,129,162,129,153,129,151,129,22,130,79,130,83,130,82,130,80,130,78,130,81,130,36,133,59,133,15,133,0,133,41,133,14,133,9,133,13,133,31,133,10,133,39,133,28,133,251,132,43,133,250,132,8,133,12,133,244,132,42,133,242,132,21,133,247,132,235,132,243,132,252,132,18,133,234,132,233,132,22,133,254,132,40,133,29,133,46,133,2,133,253,132,30,133,246,132,49,133,38,133,231,132,232,132,240,132,239,132,249,132,24,133,32,133,48,133,11,133,25,133,47,133,98,134,86,135,99,135,100,135,119,135,225,135,115,135,88,135,84,135,91,135,82,135,97,135,90,135,81,135,94,135,109,135,106,135,80,135,78,135,95,135,93,135,111,135,108,135,122,135,110,135,92,135,101,135,79,135,123,135,117,135,98,135,103,135,105,135,90,136,5,137,12,137,20,137,11,137,23,137,24,137,25,137,6,137,22,137,17,137,14,137,9,137,162,137,164,137,163,137,237,137,240,137,236,137,207,138,198,138,184,138,211,138,209,138,212,138,213,138,187,138,215,138,190,138,192,138,197,138,216,138,195,138,186,138,189,138,217,138,62,140,77,140,143,140,229,140,223,140,217,140,232,140,218,140,221,140,231,140,160,141,156,141,161,141,155,141,32,142,35,142,37,142,36,142,46,142,21,142,27,142,22,142,17,142,25,142,38,142,39,142,20,142,18,142,24,142,19,142,28,142,23,142,26,142,44,143,36,143,24,143,26,143,32,143,35,143,22,143,23,143,115,144,112,144,111,144,103,144,107,144,47,145,43,145,41,145,42,145,50,145,38,145,46,145,133,145,134,145,138,145,129,145,130,145,132,145,128,145,208,146,195,146,196,146,192,146,217,146,182,146,207,146,241,146,223,146,216,146,233,146,215,146,221,146,204,146,239,146,194,146,232,146,202,146,200,146,206,146,230,146,205,146,213,146,201,146,224,146,222,146,231,146,209,146,211,146,181,146,225,146,198,146,180,146,124,149,172,149,171,149,174,149,176,149,164,150,162,150,211,150,5,151,8,151,2,151,90,151,138,151,142,151,136,151,208,151,207,151,30,152,29,152,38,152,41,152,40,152,32,152,27,152,39,152,178,152,8,153,250,152,17,153,20,153,22,153,23,153,21,153,220,153,205,153,207,153,211,153,212,153,206,153,201,153,214,153,216,153,203,153,215,153,204,153,179,154,236,154,235,154,243,154,242,154,241,154,70,155,67,155,103,155,116,155,113,155,102,155,118,155,117,155,112,155,104,155,100,155,108,155,252,156,250,156,253,156,255,156,247,156,7,157,0,157,249,156,251,156,8,157,5,157,4,157,131,158,211,158,15,159,16,159,28,81,19,81,23,81,26,81,17,81,222,81,52,83,225,83,112,86,96,86,110,86,115,86,102,86,99,86,109,86,114,86,94,86,119,86,28,87,27,87,200,88,189,88,201,88,191,88,186,88,194,88,188,88,198,88,23,91,25,91,27,91,33,91,20,91,19,91,16,91,22,91,40,91,26,91,32,91,30,91,239,91,172,93,177,93,169,93,167,93,181,93,176,93,174,93,170,93,168,93,178,93,173,93,175,93,180,93,103,94,104,94,102,94,111,94,233,94,231,94,230,94,232,94,229,94,75,95,188,95,157,97,168,97,150,97,197,97,180,97,198,97,193,97,204,97,186,97,191,97,184,97,140,97,215,100,214,100,208,100,207,100,201,100,189,100,137,100,195,100,219,100,243,100,217,100,51,101,127,101,124,101,162,101,200,102,190,102,192,102,202,102,203,102,207,102,189,102,187,102,186,102,204,102,35,103,52,106,102,106,73,106,103,106,50,106,104,106,62,106,93,106,109,106,118,106,91,106,81,106,40,106,90,106,59,106,63,106,65,106,106,106,100,106,80,106,79,106,84,106,111,106,105,106,96,106,60,106,94,106,86,106,85,106,77,106,78,106,70,106,85,107,84,107,86,107,167,107,170,107,171,107,200,107,199,107,4,108,3,108,6,108,173,111,203,111,163,111,199,111,188,111,206,111,200,111,94,111,196,111,189,111,158,111,202,111,168,111,4,112,165,111,174,111,186,111,172,111,170,111,207,111,191,111,184,111,162,111,201,111,171,111,205,111,175,111,178,111,176,111,197,113,194,113,191,113,184,113,214,113,192,113,193,113,203,113,212,113,202,113,199,113,207,113,189,113,216,113,188,113,198,113,218,113,219,113,157,114,158,114,105,115,102,115,103,115,108,115,101,115,107,115,106,115,127,116,154,116,160,116,148,116,146,116,149,116,161,116,11,117,128,117,47,118,45,118,49,118,61,118,51,118,60,118,53,118,50,118,48,118,187,118,230,118,154,119,157,119,161,119,156,119,155,119,162,119,163,119,149,119,153,119,151,119,221,120,233,120,229,120,234,120,222,120,227,120,219,120,225,120,226,120,237,120,223,120,224,120,164,121,68,122,72,122,71,122,182,122,184,122,181,122,177,122,183,122,222,123,227,123,231,123,221,123,213,123,229,123,218,123,232,123,249,123,212,123,234,123,226,123,220,123,235,123,216,123,223,123,210,124,212,124,215,124,208,124,209,124,18,126,33,126,23,126,12,126,31,126,32,126,19,126,14,126,28,126,21,126,26,126,34,126,11,126,15,126,22,126,13,126,20,126,37,126,36,126,67,127,123,127,124,127,122,127,177,127,239,127,42,128,41,128,108,128,177,129,166,129,174,129,185,129,181,129,171,129,176,129,172,129,180,129,178,129,183,129,167,129,242,129,85,130,86,130,87,130,86,133,69,133,107,133,77,133,83,133,97,133,88,133,64,133,70,133,100,133,65,133,98,133,68,133,81,133,71,133,99,133,62,133,91,133,113,133,78,133,110,133,117,133,85,133,103,133,96,133,140,133,102,133,93,133,84,133,101,133,108,133,99,134,101,134,100,134,155,135,143,135,151,135,147,135,146,135,136,135,129,135,150,135,152,135,121,135,135,135,163,135,133,135,144,135,145,135,157,135,132,135,148,135,156,135,154,135,137,135,30,137,38,137,48,137,45,137,46,137,39,137,49,137,34,137,41,137,35,137,47,137,44,137,31,137,241,137,224,138,226,138,242,138,244,138,245,138,221,138,20,139,228,138,223,138,240,138,200,138,222,138,225,138,232,138,255,138,239,138,251,138,145,140,146,140,144,140,245,140,238,140,241,140,240,140,243,140,108,141,110,141,165,141,167,141,51,142,62,142,56,142,64,142,69,142,54,142,60,142,61,142,65,142,48,142,63,142,189,142,54,143,46,143,53,143,50,143,57,143,55,143,52,143,118,144,121,144,123,144,134,144,250,144,51,145,53,145,54,145,147,145,144,145,145,145,141,145,143,145,39,147,30,147,8,147,31,147,6,147,15,147,122,147,56,147,60,147,27,147,35,147,18,147,1,147,70,147,45,147,14,147,13,147,203,146,29,147,250,146,37,147,19,147,249,146,247,146,52,147,2,147,36,147,255,146,41,147,57,147,53,147,42,147,20,147,12,147,11,147,254,146,9,147,0,147,251,146,22,147,188,149,205,149,190,149,185,149,186,149,182,149,191,149,181,149,189,149,169,150,212,150,11,151,18,151,16,151,153,151,151,151,148,151,240,151,248,151,53,152,47,152,50,152,36,153,31,153,39,153,41,153,158,153,238,153,236,153,229,153,228,153,240,153,227,153,234,153,233,153,231,153,185,154,191,154,180,154,187,154,246,154,250,154,249,154,247,154,51,155,128,155,133,155,135,155,124,155,126,155,123,155,130,155,147,155,146,155,144,155,122,155,149,155,125,155,136,155,37,157,23,157,32,157,30,157,20,157,41,157,29,157,24,157,34,157,16,157,25,157,31,157,136,158,134,158,135,158,174,158,173,158,213,158,214,158,250,158,18,159,61,159,38,81,37,81,34,81,36,81,32,81,41,81,244,82,147,86,140,86,141,86,134,86,132,86,131,86,126,86,130,86,127,86,129,86,214,88,212,88,207,88,210,88,45,91,37,91,50,91,35,91,44,91,39,91,38,91,47,91,46,91,123,91,241,91,242,91,183,93,108,94,106,94,190,95,187,95,195,97,181,97,188,97,231,97,224,97,229,97,228,97,232,97,222,97,239,100,233,100,227,100,235,100,228,100,232,100,129,101,128,101,182,101,218,101,210,102,141,106,150,106,129,106,165,106,137,106,159,106,155,106,161,106,158,106,135,106,147,106,142,106,149,106,131,106,168,106,164,106,145,106,127,106,166,106,154,106,133,106,140,106,146,106,91,107,173,107,9,108,204,111,169,111,244,111,212,111,227,111,220,111,237,111,231,111,230,111,222,111,242,111,221,111,226,111,232,111,225,113,241,113,232,113,242,113,228,113,240,113,226,113,115,115,110,115,111,115,151,116,178,116,171,116,144,116,170,116,173,116,177,116,165,116,175,116,16,117,17,117,18,117,15,117,132,117,67,118,72,118,73,118,71,118,164,118,233,118,181,119,171,119,178,119,183,119,182,119,180,119,177,119,168,119,240,119,243,120,253,120,2,121,251,120,252,120,242,120,5,121,249,120,254,120,4,121,171,121,168,121,92,122,91,122,86,122,88,122,84,122,90,122,190,122,192,122,193,122,5,124,15,124,242,123,0,124,255,123,251,123,14,124,244,123,11,124,243,123,2,124,9,124,3,124,1,124,248,123,253,123,6,124,240,123,241,123,16,124,10,124,232,124,45,126,60,126,66,126,51,126,72,152,56,126,42,126,73,126,64,126,71,126,41,126,76,126,48,126,59,126,54,126,68,126,58,126,69,127,127,127,126,127,125,127,244,127,242,127,44,128,187,129,196,129,204,129,202,129,197,129,199,129,188,129,233,129,91,130,90,130,92,130,131,133,128,133,143,133,167,133,149,133,160,133,139,133,163,133,123,133,164,133,154,133,158,133,119,133,124,133,137,133,161,133,122,133,120,133,87,133,142,133,150,133,134,133,141,133,153,133,157,133,129,133,162,133,130,133,136,133,133,133,121,133,118,133,152,133,144,133,159,133,104,134,190,135,170,135,173,135,197,135,176,135,172,135,185,135,181,135,188,135,174,135,201,135,195,135,194,135,204,135,183,135,175,135,196,135,202,135,180,135,182,135,191,135,184,135,189,135,222,135,178,135,53,137,51,137,60,137,62,137,65,137,82,137,55,137,66,137,173,137,175,137,174,137,242,137,243,137,30,139,24,139,22,139,17,139,5,139,11,139,34,139,15,139,18,139,21,139,7,139,13,139,8,139,6,139,28,139,19,139,26,139,79,140,112,140,114,140,113,140,111,140,149,140,148,140,249,140,111,141,78,142,77,142,83,142,80,142,76,142,71,142,67,143,64,143,133,144,126,144,56,145,154,145,162,145,155,145,153,145,159,145,161,145,157,145,160,145,161,147,131,147,175,147,100,147,86,147,71,147,124,147,88,147,92,147,118,147,73,147,80,147,81,147,96,147,109,147,143,147,76,147,106,147,121,147,87,147,85,147,82,147,79,147,113,147,119,147,123,147,97,147,94,147,99,147,103,147,128,147,78,147,89,147,199,149,192,149,201,149,195,149,197,149,183,149,174,150,176,150,172,150,32,151,31,151,24,151,29,151,25,151,154,151,161,151,156,151,158,151,157,151,213,151,212,151,241,151,65,152,68,152,74,152,73,152,69,152,67,152,37,153,43,153,44,153,42,153,51,153,50,153,47,153,45,153,49,153,48,153,152,153,163,153,161,153,2,154,250,153,244,153,247,153,249,153,248,153,246,153,251,153,253,153,254,153,252,153,3,154,190,154,254,154,253,154,1,155,252,154,72,155,154,155,168,155,158,155,155,155,166,155,161,155,165,155,164,155,134,155,162,155,160,155,175,155,51,157,65,157,103,157,54,157,46,157,47,157,49,157,56,157,48,157,69,157,66,157,67,157,62,157,55,157,64,157,61,157,245,127,45,157,138,158,137,158,141,158,176,158,200,158,218,158,251,158,255,158,36,159,35,159,34,159,84,159,160,159,49,81,45,81,46,81,152,86,156,86,151,86,154,86,157,86,153,86,112,89,60,91,105,92,106,92,192,93,109,94,110,94,216,97,223,97,237,97,238,97,241,97,234,97,240,97,235,97,214,97,233,97,255,100,4,101,253,100,248,100,1,101,3,101,252,100,148,101,219,101,218,102,219,102,216,102,197,106,185,106,189,106,225,106,198,106,186,106,182,106,183,106,199,106,180,106,173,106,94,107,201,107,11,108,7,112,12,112,13,112,1,112,5,112,20,112,14,112,255,111,0,112,251,111,38,112,252,111,247,111,10,112,1,114,255,113,249,113,3,114,253,113,118,115,184,116,192,116,181,116,193,116,190,116,182,116,187,116,194,116,20,117,19,117,92,118,100,118,89,118,80,118,83,118,87,118,90,118,166,118,189,118,236,118,194,119,186,119,255,120,12,121,19,121,20,121,9,121,16,121,18,121,17,121,173,121,172,121,95,122,28,124,41,124,25,124,32,124,31,124,45,124,29,124,38,124,40,124,34,124,37,124,48,124,92,126,80,126,86,126,99,126,88,126,98,126,95,126,81,126,96,126,87,126,83,126,181,127,179,127,247,127,248,127,117,128,209,129,210,129,208,129,95,130,94,130,180,133,198,133,192,133,195,133,194,133,179,133,181,133,189,133,199,133,196,133,191,133,203,133,206,133,200,133,197,133,177,133,182,133,210,133,36,134,184,133,183,133,190,133,105,134,231,135,230,135,226,135,219,135,235,135,234,135,229,135,223,135,243,135,228,135,212,135,220,135,211,135,237,135,216,135,227,135,164,135,215,135,217,135,1,136,244,135,232,135,221,135,83,137,75,137,79,137,76,137,70,137,80,137,81,137,73,137,42,139,39,139,35,139,51,139,48,139,53,139,71,139,47,139,60,139,62,139,49,139,37,139,55,139,38,139,54,139,46,139,36,139,59,139,61,139,58,139,66,140,117,140,153,140,152,140,151,140,254,140,4,141,2,141,0,141,92,142,98,142,96,142,87,142,86,142,94,142,101,142,103,142,91,142,90,142,97,142,93,142,105,142,84,142,70,143,71,143,72,143,75,143,40,145,58,145,59,145,62,145,168,145,165,145,167,145,175,145,170,145,181,147,140,147,146,147,183,147,155,147,157,147,137,147,167,147,142,147,170,147,158,147,166,147,149,147,136,147,153,147,159,147,141,147,177,147,145,147,178,147,164,147,168,147,180,147,163,147,165,147,210,149,211,149,209,149,179,150,215,150,218,150,194,93,223,150,216,150,221,150,35,151,34,151,37,151,172,151,174,151,168,151,171,151,164,151,170,151,162,151,165,151,215,151,217,151,214,151,216,151,250,151,80,152,81,152,82,152,184,152,65,153,60,153,58,153,15,154,11,154,9,154,13,154,4,154,17,154,10,154,5,154,7,154,6,154,192,154,220,154,8,155,4,155,5,155,41,155,53,155,74,155,76,155,75,155,199,155,198,155,195,155,191,155,193,155,181,155,184,155,211,155,182,155,196,155,185,155,189,155,92,157,83,157,79,157,74,157,91,157,75,157,89,157,86,157,76,157,87,157,82,157,84,157,95,157,88,157,90,157,142,158,140,158,223,158,1,159,0,159,22,159,37,159,43,159,42,159,41,159,40,159,76,159,85,159,52,81,53,81,150,82,247,82,180,83,171,86,173,86,166,86,167,86,170,86,172,86,218,88,221,88,219,88,18,89,61,91,62,91,63,91,195,93,112,94,191,95,251,97,7,101,16,101,13,101,9,101,12,101,14,101,132,101,222,101,221,101,222,102,231,106,224,106,204,106,209,106,217,106,203,106,223,106,220,106,208,106,235,106,207,106,205,106,222,106,96,107,176,107,12,108,25,112,39,112,32,112,22,112,43,112,33,112,34,112,35,112,41,112,23,112,36,112,28,112,42,112,12,114,10,114,7,114,2,114,5,114,165,114,166,114,164,114,163,114,161,114,203,116,197,116,183,116,195,116,22,117,96,118,201,119,202,119,196,119,241,119,29,121,27,121,33,121,28,121,23,121,30,121,176,121,103,122,104,122,51,124,60,124,57,124,44,124,59,124,236,124,234,124,118,126,117,126,120,126,112,126,119,126,111,126,122,126,114,126,116,126,104,126,75,127,74,127,131,127,134,127,183,127,253,127,254,127,120,128,215,129,213,129,100,130,97,130,99,130,235,133,241,133,237,133,217,133,225,133,232,133,218,133,215,133,236,133,242,133,248,133,216,133,223,133,227,133,220,133,209,133,240,133,230,133,239,133,222,133,226,133,0,136,250,135,3,136,246,135,247,135,9,136,12,136,11,136,6,136,252,135,8,136,255,135,10,136,2,136,98,137,90,137,91,137,87,137,97,137,92,137,88,137,93,137,89,137,136,137,183,137,182,137,246,137,80,139,72,139,74,139,64,139,83,139,86,139,84,139,75,139,85,139,81,139,66,139,82,139,87,139,67,140,119,140,118,140,154,140,6,141,7,141,9,141,172,141,170,141,173,141,171,141,109,142,120,142,115,142,106,142,111,142,123,142,194,142,82,143,81,143,79,143,80,143,83,143,180,143,64,145,63,145,176,145,173,145,222,147,199,147,207,147,194,147,218,147,208,147,249,147,236,147,204,147,217,147,169,147,230,147,202,147,212,147,238,147,227,147,213,147,196,147,206,147,192,147,210,147,231,147,125,149,218,149,219,149,225,150,41,151,43,151,44,151,40,151,38,151,179,151,183,151,182,151,221,151,222,151,223,151,92,152,89,152,93,152,87,152,191,152,189,152,187,152,190,152,72,153,71,153,67,153,166,153,167,153,26,154,21,154,37,154,29,154,36,154,27,154,34,154,32,154,39,154,35,154,30,154,28,154,20,154,194,154,11,155,10,155,14,155,12,155,55,155,234,155,235,155,224,155,222,155,228,155,230,155,226,155,240,155,212,155,215,155,236,155,220,155,217,155,229,155,213,155,225,155,218,155,119,157,129,157,138,157,132,157,136,157,113,157,128,157,120,157,134,157,139,157,140,157,125,157,107,157,116,157,117,157,112,157,105,157,133,157,115,157,123,157,130,157,111,157,121,157,127,157,135,157,104,157,148,158,145,158,192,158,252,158,45,159,64,159,65,159,77,159,86,159,87,159,88,159,55,83,178,86,181,86,179,86,227,88,69,91,198,93,199,93,238,94,239,94,192,95,193,95,249,97,23,101,22,101,21,101,19,101,223,101,232,102,227,102,228,102,243,106,240,106,234,106,232,106,249,106,241,106,238,106,239,106,60,112,53,112,47,112,55,112,52,112,49,112,66,112,56,112,63,112,58,112,57,112,64,112,59,112,51,112,65,112,19,114,20,114,168,114,125,115,124,115,186,116,171,118,170,118,190,118,237,118,204,119,206,119,207,119,205,119,242,119,37,121,35,121,39,121,40,121,36,121,41,121,178,121,110,122,108,122,109,122,247,122,73,124,72,124,74,124,71,124,69,124,238,124,123,126,126,126,129,126,128,126,186,127,255,127,121,128,219,129,217,129,11,130,104,130,105,130,34,134,255,133,1,134,254,133,27,134,0,134,246,133,4,134,9,134,5,134,12,134,253,133,25,136,16,136,17,136,23,136,19,136,22,136,99,137,102,137,185,137,247,137,96,139,106,139,93,139,104,139,99,139,101,139,103,139,109,139,174,141,134,142,136,142,132,142,89,143,86,143,87,143,85,143,88,143,90,143,141,144,67,145,65,145,183,145,181,145,178,145,179,145,11,148,19,148,251,147,32,148,15,148,20,148,254,147,21,148,16,148,40,148,25,148,13,148,245,147,0,148,247,147,7,148,14,148,22,148,18,148,250,147,9,148,248,147,10,148,255,147,252,147,12,148,246,147,17,148,6,148,222,149,224,149,223,149,46,151,47,151,185,151,187,151,253,151,254,151,96,152,98,152,99,152,95,152,193,152,194,152,80,153,78,153,89,153,76,153,75,153,83,153,50,154,52,154,49,154,44,154,42,154,54,154,41,154,46,154,56,154,45,154,199,154,202,154,198,154,16,155,18,155,17,155,11,156,8,156,247,155,5,156,18,156,248,155,64,156,7,156,14,156,6,156,23,156,20,156,9,156,159,157,153,157,164,157,157,157,146,157,152,157,144,157,155,157,160,157,148,157,156,157,170,157,151,157,161,157,154,157,162,157,168,157,158,157,163,157,191,157,169,157,150,157,166,157,167,157,153,158,155,158,154,158,229,158,228,158,231,158,230,158,48,159,46,159,91,159,96,159,94,159,93,159,89,159,145,159,58,81,57,81,152,82,151,82,195,86,189,86,190,86,72,91,71,91,203,93,207,93,241,94,253,97,27,101,2,107,252,106,3,107,248,106,0,107,67,112,68], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+125557);
/* memory initializer */ allocate([112,74,112,72,112,73,112,69,112,70,112,29,114,26,114,25,114,126,115,23,117,106,118,208,119,45,121,49,121,47,121,84,124,83,124,242,124,138,126,135,126,136,126,139,126,134,126,141,126,77,127,187,127,48,128,221,129,24,134,42,134,38,134,31,134,35,134,28,134,25,134,39,134,46,134,33,134,32,134,41,134,30,134,37,134,41,136,29,136,27,136,32,136,36,136,28,136,43,136,74,136,109,137,105,137,110,137,107,137,250,137,121,139,120,139,69,139,122,139,123,139,16,141,20,141,175,141,142,142,140,142,94,143,91,143,93,143,70,145,68,145,69,145,185,145,63,148,59,148,54,148,41,148,61,148,60,148,48,148,57,148,42,148,55,148,44,148,64,148,49,148,229,149,228,149,227,149,53,151,58,151,191,151,225,151,100,152,201,152,198,152,192,152,88,153,86,153,57,154,61,154,70,154,68,154,66,154,65,154,58,154,63,154,205,154,21,155,23,155,24,155,22,155,58,155,82,155,43,156,29,156,28,156,44,156,35,156,40,156,41,156,36,156,33,156,183,157,182,157,188,157,193,157,199,157,202,157,207,157,190,157,197,157,195,157,187,157,181,157,206,157,185,157,186,157,172,157,200,157,177,157,173,157,204,157,179,157,205,157,178,157,122,158,156,158,235,158,238,158,237,158,27,159,24,159,26,159,49,159,78,159,101,159,100,159,146,159,185,78,198,86,197,86,203,86,113,89,75,91,76,91,213,93,209,93,242,94,33,101,32,101,38,101,34,101,11,107,8,107,9,107,13,108,85,112,86,112,87,112,82,112,30,114,31,114,169,114,127,115,216,116,213,116,217,116,215,116,109,118,173,118,53,121,180,121,112,122,113,122,87,124,92,124,89,124,91,124,90,124,244,124,241,124,145,126,79,127,135,127,222,129,107,130,52,134,53,134,51,134,44,134,50,134,54,134,44,136,40,136,38,136,42,136,37,136,113,137,191,137,190,137,251,137,126,139,132,139,130,139,134,139,133,139,127,139,21,141,149,142,148,142,154,142,146,142,144,142,150,142,151,142,96,143,98,143,71,145,76,148,80,148,74,148,75,148,79,148,71,148,69,148,72,148,73,148,70,148,63,151,227,151,106,152,105,152,203,152,84,153,91,153,78,154,83,154,84,154,76,154,79,154,72,154,74,154,73,154,82,154,80,154,208,154,25,155,43,155,59,155,86,155,85,155,70,156,72,156,63,156,68,156,57,156,51,156,65,156,60,156,55,156,52,156,50,156,61,156,54,156,219,157,210,157,222,157,218,157,203,157,208,157,220,157,209,157,223,157,233,157,217,157,216,157,214,157,245,157,213,157,221,157,182,158,240,158,53,159,51,159,50,159,66,159,107,159,149,159,162,159,61,81,153,82,232,88,231,88,114,89,77,91,216,93,47,136,79,95,1,98,3,98,4,98,41,101,37,101,150,101,235,102,17,107,18,107,15,107,202,107,91,112,90,112,34,114,130,115,129,115,131,115,112,118,212,119,103,124,102,124,149,126,108,130,58,134,64,134,57,134,60,134,49,134,59,134,62,134,48,136,50,136,46,136,51,136,118,137,116,137,115,137,254,137,140,139,142,139,139,139,136,139,69,140,25,141,152,142,100,143,99,143,188,145,98,148,85,148,93,148,87,148,94,148,196,151,197,151,0,152,86,154,89,154,30,155,31,155,32,155,82,156,88,156,80,156,74,156,77,156,75,156,85,156,89,156,76,156,78,156,251,157,247,157,239,157,227,157,235,157,248,157,228,157,246,157,225,157,238,157,230,157,242,157,240,157,226,157,236,157,244,157,243,157,232,157,237,157,194,158,208,158,242,158,243,158,6,159,28,159,56,159,55,159,54,159,67,159,79,159,113,159,112,159,110,159,111,159,211,86,205,86,78,91,109,92,45,101,237,102,238,102,19,107,95,112,97,112,93,112,96,112,35,114,219,116,229,116,213,119,56,121,183,121,182,121,106,124,151,126,137,127,109,130,67,134,56,136,55,136,53,136,75,136,148,139,149,139,158,142,159,142,160,142,157,142,190,145,189,145,194,145,107,148,104,148,105,148,229,150,70,151,67,151,71,151,199,151,229,151,94,154,213,154,89,155,99,156,103,156,102,156,98,156,94,156,96,156,2,158,254,157,7,158,3,158,6,158,5,158,0,158,1,158,9,158,255,157,253,157,4,158,160,158,30,159,70,159,116,159,117,159,118,159,212,86,46,101,184,101,24,107,25,107,23,107,26,107,98,112,38,114,170,114,216,119,217,119,57,121,105,124,107,124,246,124,154,126,152,126,155,126,153,126,224,129,225,129,70,134,71,134,72,134,121,137,122,137,124,137,123,137,255,137,152,139,153,139,165,142,164,142,163,142,110,148,109,148,111,148,113,148,115,148,73,151,114,152,95,153,104,156,110,156,109,156,11,158,13,158,16,158,15,158,18,158,17,158,161,158,245,158,9,159,71,159,120,159,123,159,122,159,121,159,30,87,102,112,111,124,60,136,178,141,166,142,195,145,116,148,120,148,118,148,117,148,96,154,116,156,115,156,113,156,117,156,20,158,19,158,246,158,10,159,164,159,104,112,101,112,247,124,106,134,62,136,61,136,63,136,158,139,156,140,169,142,201,142,75,151,115,152,116,152,204,152,97,153,171,153,100,154,102,154,103,154,36,155,21,158,23,158,72,159,7,98,30,107,39,114,76,134,168,142,130,148,128,148,129,148,105,154,104,154,46,155,25,158,41,114,75,134,159,139,131,148,121,156,183,158,117,118,107,154,122,156,29,158,105,112,106,112,164,158,126,159,73,159,152,159,129,120,185,146,207,136,187,88,82,96,167,124,250,90,84,37,102,37,87,37,96,37,108,37,99,37,90,37,105,37,93,37,82,37,100,37,85,37,94,37,106,37,97,37,88,37,103,37,91,37,83,37,101,37,86,37,95,37,107,37,98,37,89,37,104,37,92,37,81,37,80,37,109,37,110,37,112,37,111,37,147,37,0,0,0,0,0,0,104,115,122,32,61,61,32,49,48,56,32,124,124,32,104,115,122,32,61,61,32,49,50,52,0,0,0,0,0,0,0,0,66,77,80,32,82,76,69,0,109,111,110,111,99,104,114,111,109,101,0,0,0,0,0,0,98,97,100,32,66,77,80,0,64,0,0,0,0,0,0,0,117,110,107,110,111,119,110,32,66,77,80,0,0,0,0,0,64,0,0,0,0,0,0,0,110,111,116,32,66,77,80,0,105,108,108,101,103,97,108,32,99,111,100,101,32,105,110,32,114,97,115,116,101,114,0,0,116,111,111,32,109,97,110,121,32,99,111,100,101,115,0,0,91,94,91,58,115,112,97,99,101,58,93,93,0,0,0,0,37,46,42,103,0,0,0,0,110,111,32,99,108,101,97,114,32,99,111,100,101,0,0,0,117,110,107,110,111,119,110,32,99,111,100,101,0,0,0,0,109,105,115,115,105,110,103,32,99,111,108,111,114,32,116,97,98,108,101,0,0,0,0,0,98,97,100,32,73,109,97,103,101,32,68,101,115,99,114,105,112,116,111,114,0,0,0,0,48,0,0,0,0,0,0,0,37,46,42,102,0,0,0,0,119,114,111,110,103,32,99,111,108,111,114,32,102,111,114,109,97,116,0,0,0,0,0,0,37,46,42,101,0,0,0,0,117,110,115,117,112,112,111,114,116,101,100,32,98,105,116,32,100,101,112,116,104,0,0,0,119,114,111,110,103,32,99,104,97,110,110,101,108,32,99,111,117,110,116,0,0,0,0,0,119,114,111,110,103,32,118,101,114,115,105,111,110,0,0,0,110,111,116,32,80,83,68,0,80,73,67,84,0,0,0,0,91,91,58,115,112,97,99,101,58,93,93,0,0,0,0,0,83,128,246,52,0,0,0,0,98,97,100,32,102,111,114,109,97,116,0,0,0,0,0,0,110,111,116,32,71,73,70,0,101,109,115,99,114,105,112,116,101,110,46,118,115,119,112,114,105,110,116,102,46,116,101,109,112,46,98,117,102,102,101,114,0,0,0,0,0,0,0,0,98,97,100,32,102,105,108,101,0,0,0,0,0,0,0,0,48,0,0,0,0,0,0,0,32,0,0,0,0,0,0,0,114,101,113,95,99,111,109,112,32,62,61,32,49,32,38,38,32,114,101,113,95,99,111,109,112,32,60,61,32,52,0,0,98,97,100,32,112,97,108,101,116,116,101,0,0,0,0,0,105,110,118,97,108,105,100,32,100,101,99,111,100,101,100,32,115,99,97,110,108,105,110,101,32,108,101,110,103,116,104,0,117,110,115,117,112,112,111,114,116,101,100,32,100,97,116,97,32,108,97,121,111,117,116,0,117,110,115,117,112,112,111,114,116,101,100,32,102,111,114,109,97,116,0,0,0,0,0,0,110,111,116,32,72,68,82,0,91,94,91,58,97,108,110,117,109,58,93,95,93,0,0,0,98,97,100,32,99,111,109,112,114,101,115,115,105,111,110,0,110,111,32,112,114,101,115,101,116,32,100,105,99,116,0,0,109,97,120,32,118,97,108,117,101,32,62,32,50,53,53,0,98,97,100,32,122,108,105,98,32,104,101,97,100,101,114,0,37,0,0,0,0,0,0,0,114,101,97,100,32,112,97,115,116,32,98,117,102,102,101,114,0,0,0,0,0,0,0,0,45,0,0,0,0,0,0,0,122,108,105,98,32,99,111,114,114,117,112,116,0,0,0,0,97,45,62,110,117,109,95,98,105,116,115,32,61,61,32,48,0,0,0,0,0,0,0,0,98,97,100,32,115,105,122,101,115,0,0,0,0,0,0,0,99,32,61,61,32,49,56,0,98,97,100,32,99,111,100,101,108,101,110,103,116,104,115,0,122,45,62,99,111,100,101,95,98,117,102,102,101,114,32,60,32,40,49,85,32,60,60,32,122,45,62,110,117,109,95,98,105,116,115,41,0,0,0,0,105,110,102,105,110,105,116,121,0,0,0,0,0,0,0,0,91,91,58,97,108,110,117,109,58,93,95,93,0,0,0,0,37,115,0,0,0,0,0,0,98,105,116,115,32,60,61,32,49,54,0,0,0,0,0,0,122,45,62,115,105,122,101,91,98,93,32,61,61,32,115,0,43,88,32,0,0,0,0,0,111,117,116,112,117,116,32,98,117,102,102,101,114,32,108,105,109,105,116,0,0,0,0,0,9,0,0,0,0,0,0,0,98,97,100,32,100,105,115,116,0,0,0,0,0,0,0,0,43,0,0,0,0,0,0,0,98,97,100,32,104,117,102,102,109,97,110,32,99,111,100,101,0,0,0,0,0,0,0,0,35,63,82,65,68,73,65,78,67,69,10,0,0,0,0,0,98,97,100,32,99,111,100,101,32,108,101,110,103,116,104,115,0,0,0,0,0,0,0,0,98,97,100,32,68,72,84,32,104,101,97,100,101,114,0,0,98,97,100,32,68,81,84,32,116,97,98,108,101,0,0,0,98,97,100,32,68,81,84,32,116,121,112,101,0,0,0,0,27,0,0,0,0,0,0,0,98,97,100,32,68,82,73,32,108,101,110,0,0,0,0,0,101,120,112,101,99,116,101,100,32,109,97,114,107,101,114,0,45,89,32,0,0,0,0,0,98,97,100,32,84,81,0,0,98,97,100,32,86,0,0,0,35,0,0,0,0,0,0,0,98,97,100,32,72,0,0,0,58,32,105,108,108,101,103,97,108,32,111,112,116,105,111,110,58,32,0,0,0,0,0,0,98,97,100,32,99,111,109,112,111,110,101,110,116,32,73,68,0,0,0,0,0,0,0,0,98,97,100,32,99,111,109,112,111,110,101,110,116,32,99,111,117,110,116,0,0,0,0,0,48,32,119,105,100,116,104,0,110,111,32,104,101,97,100,101,114,32,104,101,105,103,104,116,0,0,0,0,0,0,0,0,111,110,108,121,32,56,45,98,105,116,0,0,0,0,0,0,7,0,0,0,0,0,0,0,98,97,100,32,83,79,70,32,108,101,110,0,0,0,0,0,110,111,32,83,79,70,0,0,70,79,82,77,65,84,61,51,50,45,98,105,116,95,114,108,101,95,114,103,98,101,0,0,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,0,110,111,32,83,79,73,0,0,98,97,100,32,112,110,103,32,115,105,103,0,0,0,0,0,37,37,37,115,37,115,37,115,37,115,37,115,42,46,42,37,99,37,99,0,0,0,0,0,105,109,103,95,110,32,61,61,32,51,0,0,0,0,0,0,105,109,103,95,110,43,49,32,61,61,32,111,117,116,95,110,0,0,0,0,0,0,0,0,105,109,103,95,119,105,100,116,104,95,98,121,116,101,115,32,60,61,32,120,0,0,0,0,105,110,118,97,108,105,100,32,102,105,108,116,101,114,0,0,37,42,46,42,102,0,0,0,110,111,116,32,101,110,111,117,103,104,32,112,105,120,101,108,115,0,0,0,0,0,0,0,111,117,116,95,110,32,61,61,32,115,45,62,105,109,103,95,110,32,124,124,32,111,117,116,95,110,32,61,61,32,115,45,62,105,109,103,95,110,43,49,0,0,0,0,0,0,0,0,115,116,100,58,58,98,97,100,95,97,108,108,111,99,0,0,12,0,0,0,0,0,0,0,8,4,4,8,4,4,8,2,4,0,0,0,0,0,0,0,111,117,116,95,110,32,61,61,32,50,32,124,124,32,111,117,116,95,110,32,61,61,32,52,0,0,0,0,0,0,0,0,46,47,115,116,98,95,105,109,97,103,101,46,104,0,0,0,35,63,82,65,68,73,65,78,67,69,0,0,0,0,0,0,37,115,58,32,0,0,0,0,115,45,62,105,109,103,95,111,117,116,95,110,32,61,61,32,52,0,0,0,0,0,0,0,46,0,0,0,0,0,0,0,0,1,2,4,7,3,6,5,0,0,0,0,0,0,0,0,114,98,0,0,0,0,0,0,110,111,32,73,68,65,84,0,111,117,116,111,102,100,97,116,97,0,0,0,0,0,0,0,13,0,0,0,0,0,0,0,111,117,116,111,102,109,101,109,0,0,0,0,0,0,0,0,98,97,100,95,97,114,114,97,121,95,110,101,119,95,108,101,110,103,116,104,0,0,0,0,110,111,32,80,76,84,69,0,116,82,78,83,32,119,105,116,104,32,97,108,112,104,97,0,98,97,100,32,116,82,78,83,32,108,101,110,0,0,0,0,116,82,78,83,32,98,101,102,111,114,101,32,80,76,84,69,0,0,0,0,0,0,0,0,105,110,32,117,115,101,32,98,121,116,101,115,32,32,32,32,32,61,32,37,49,48,108,117,10,0,0,0,0,0,0,0,58,32,111,112,116,105,111,110,32,114,101,113,117,105,114,101,115,32,97,110,32,97,114,103,117,109,101,110,116,58,32,0,116,82,78,83,32,97,102,116,101,114,32,73,68,65,84,0,105,110,118,97,108,105,100,32,80,76,84,69,0,0,0,0,117,110,107,110,111,119,110,32,105,109,97,103,101,32,116,121,112,101,0,0,0,0,0,0,102,105,114,115,116,32,110,111,116,32,73,72,68,82,0,0,48,0,0,0,0,0,0,0,119,98,0,0,0,0,0,0,48,45,112,105,120,101,108,32,105,109,97,103,101,0,0,0,110,97,110,0,0,0,0,0,98,97,100,32,105,110,116,101,114,108,97,99,101,32,109,101,116,104,111,100,0,0,0,0,37,46,42,115,0,0,0,0,98,97,100,32,102,105,108,116,101,114,32,109,101,116,104,111,100,0,0,0,0,0,0,0,10,0,0,0,0,0,0,0,98,97,100,32,99,111,109,112,32,109,101,116,104,111,100,0,10,0,0,0,0,0,0,0,98,97,100,95,97,114,114,97,121,95,108,101,110,103,116,104,0,0,0,0,0,0,0,0,109,97,120,32,115,121,115,116,101,109,32,98,121,116,101,115,32,61,32,37,49,48,108,117,10,0,0,0,0,0,0,0,98,97,100,32,99,116,121,112,101,0,0,0,0,0,0,0,195,138,204,132,195,138,204,140,195,170,204,132,195,170,204,140,0,0,0,0,0,0,0,0,58,32,0,0,0,0,0,0,49,47,50,47,52,47,56,45,98,105,116,32,111,110,108,121,0,0,0,0,0,0,0,0,116,111,111,32,108,97,114,103,101,0,0,0,0,0,0,0,115,121,115,116,101,109,32,98,121,116,101,115,32,32,32,32,32,61,32,37,49,48,108,117,10,0,0,0,0,0,0,0,116,111,117,112,112,101,114,0,98,97,100,32,83,79,83,0,116,111,108,111,119,101,114,0,91,94,91,58,100,105,103,105,116,58,93,93,0,0,0,0,98,97,100,32,65,67,32,104,117,102,102,0,0,0,0,0,98,97,100,32,68,67,32,104,117,102,102,0,0,0,0,0,98,97,100,32,73,72,68,82,32,108,101,110,0,0,0,0,98,97,100,32,83,79,83,32,108,101,110,0,0,0,0,0,98,97,100,32,83,79,83,32,99,111,109,112,111,110,101,110,116,32,99,111,117,110,116,0,40,40,40,106,45,62,99,111,100,101,95,98,117,102,102,101,114,41,32,62,62,32,40,51,50,32,45,32,104,45,62,115,105,122,101,91,99,93,41,41,32,38,32,115,116,98,105,95,95,98,109,97,115,107,91,104,45,62,115,105,122,101,91,99,93,93,41,32,61,61,32,104,45,62,99,111,100,101,91,99,93,0,0,0,0,0,0,0,110,32,62,61,32,48,32,38,38,32,110,32,60,32,40,105,110,116,41,32,40,115,105,122,101,111,102,40,115,116,98,105,95,95,98,109,97,115,107,41,47,115,105,122,101,111,102,40,42,115,116,98,105,95,95,98,109,97,115,107,41,41,0,0,99,97,110,39,116,32,109,101,114,103,101,32,100,99,32,97,110,100,32,97,99,0,0,0,106,117,110,107,32,98,101,102,111,114,101,32,109,97,114,107,101,114,0,0,0,0,0,0,98,97,100,32,114,101,113,95,99,111,109,112,0,0,0,0,98,97,100,32,109,97,115,107,115,0,0,0,0,0,0,0,91,91,58,100,105,103,105,116,58,93,93,0,0,0,0,0,98,97,100,32,98,112,112,0,105,110,118,97,108,105,100,0,109,117,108,116,105,112,108,101,32,73,72,68,82,0,0,0,99,97,110,39,116,32,102,111,112,101,110,0,0,0,0,0,114,98,0,0,0,0,0,0,115,116,98,105,95,95,122,104,117,102,102,109,97,110,95,100,101,99,111,100,101,95,115,108,111,119,112,97,116,104,0,0,115,116,98,105,95,95,112,97,114,115,101,95,117,110,99,111,109,112,101,114,115,115,101,100,95,98,108,111,99,107,0,0,115,116,98,105,95,95,106,112,101,103,95,104,117,102,102,95,100,101,99,111,100,101,0,0,115,116,98,105,95,95,102,105,108,108,95,98,105,116,115,0,115,116,98,105,95,95,101,120,116,101,110,100,95,114,101,99,101,105,118,101,0,0,0,0,115,116,98,105,95,95,100,101,95,105,112,104,111,110,101,0,115,116,98,105,95,95,99,114,101,97,116,101,95,112,110,103,95,105,109,97,103,101,95,114,97,119,0,0,0,0,0,0,115,116,98,105,95,95,99,111,110,118,101,114,116,95,102,111,114,109,97,116,0,0,0,0,115,116,98,105,95,95,99,111,109,112,117,116,101,95,116,114,97,110,115,112,97,114,101,110,99,121,0,0,0,0,0,0,115,116,98,105,95,95,99,111,109,112,117,116,101,95,104,117,102,102,109,97,110,95,99,111,100,101,115,0,0,0,0,0,115,116,98,105,95,95,98,109,112,95,108,111,97,100,0,0,115,116,98,105,95,95,98,105,116,95,114,101,118,101,114,115,101,0,0,0,0,0,0,0,2,0,0,192,3,0,0,192,4,0,0,192,5,0,0,192,6,0,0,192,7,0,0,192,8,0,0,192,9,0,0,192,10,0,0,192,11,0,0,192,12,0,0,192,13,0,0,192,14,0,0,192,15,0,0,192,16,0,0,192,17,0,0,192,18,0,0,192,19,0,0,192,20,0,0,192,21,0,0,192,22,0,0,192,23,0,0,192,24,0,0,192,25,0,0,192,26,0,0,192,27,0,0,192,28,0,0,192,29,0,0,192,30,0,0,192,31,0,0,192,0,0,0,179,1,0,0,195,2,0,0,195,3,0,0,195,4,0,0,195,5,0,0,195,6,0,0,195,7,0,0,195,8,0,0,195,9,0,0,195,10,0,0,195,11,0,0,195,12,0,0,195,13,0,0,211,14,0,0,195,15,0,0,195,0,0,12,187,1,0,12,195,2,0,12,195,3,0,12,195,4,0,12,211,0,0,0,0,0,0,0,0,64,37,2,0,40,0,0,0,20,0,0,0,72,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,80,37,2,0,40,0,0,0,6,0,0,0,74,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,96,37,2,0,40,0,0,0,42,0,0,0,22,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,83,116,57,98,97,100,95,97,108,108,111,99,0,0,0,0,83,116,50,48,98,97,100,95,97,114,114,97,121,95,110,101,119,95,108,101,110,103,116,104,0,0,0,0,0,0,0,0,83,116,49,54,98,97,100,95,97,114,114,97,121,95,108,101,110,103,116,104,0,0,0,0,0,0,0,0,248,36,2,0,0,0,0,0,0,0,0,0,0,0,0,0,8,37,2,0,64,37,2,0,0,0,0,0,0,0,0,0,40,37,2,0,64,37,2,0,0,0,0,0], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+135797);
function runPostSets() {

HEAP32[((140608 )>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((140616 )>>2)]=__ZTISt9exception;
HEAP32[((140624 )>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((140640 )>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
}

var tempDoublePtr = Runtime.alignMemory(allocate(12, "i8", ALLOC_STATIC), 8);

assert(tempDoublePtr % 8 == 0);

function copyTempFloat(ptr) { // functions, because inlining this code increases code size too much

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

}

function copyTempDouble(ptr) {

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

  HEAP8[tempDoublePtr+4] = HEAP8[ptr+4];

  HEAP8[tempDoublePtr+5] = HEAP8[ptr+5];

  HEAP8[tempDoublePtr+6] = HEAP8[ptr+6];

  HEAP8[tempDoublePtr+7] = HEAP8[ptr+7];

}


  var _llvm_dbg_declare=undefined;

  
  
  
  var ERRNO_CODES={EPERM:1,ENOENT:2,ESRCH:3,EINTR:4,EIO:5,ENXIO:6,E2BIG:7,ENOEXEC:8,EBADF:9,ECHILD:10,EAGAIN:11,EWOULDBLOCK:11,ENOMEM:12,EACCES:13,EFAULT:14,ENOTBLK:15,EBUSY:16,EEXIST:17,EXDEV:18,ENODEV:19,ENOTDIR:20,EISDIR:21,EINVAL:22,ENFILE:23,EMFILE:24,ENOTTY:25,ETXTBSY:26,EFBIG:27,ENOSPC:28,ESPIPE:29,EROFS:30,EMLINK:31,EPIPE:32,EDOM:33,ERANGE:34,ENOMSG:42,EIDRM:43,ECHRNG:44,EL2NSYNC:45,EL3HLT:46,EL3RST:47,ELNRNG:48,EUNATCH:49,ENOCSI:50,EL2HLT:51,EDEADLK:35,ENOLCK:37,EBADE:52,EBADR:53,EXFULL:54,ENOANO:55,EBADRQC:56,EBADSLT:57,EDEADLOCK:35,EBFONT:59,ENOSTR:60,ENODATA:61,ETIME:62,ENOSR:63,ENONET:64,ENOPKG:65,EREMOTE:66,ENOLINK:67,EADV:68,ESRMNT:69,ECOMM:70,EPROTO:71,EMULTIHOP:72,EDOTDOT:73,EBADMSG:74,ENOTUNIQ:76,EBADFD:77,EREMCHG:78,ELIBACC:79,ELIBBAD:80,ELIBSCN:81,ELIBMAX:82,ELIBEXEC:83,ENOSYS:38,ENOTEMPTY:39,ENAMETOOLONG:36,ELOOP:40,EOPNOTSUPP:95,EPFNOSUPPORT:96,ECONNRESET:104,ENOBUFS:105,EAFNOSUPPORT:97,EPROTOTYPE:91,ENOTSOCK:88,ENOPROTOOPT:92,ESHUTDOWN:108,ECONNREFUSED:111,EADDRINUSE:98,ECONNABORTED:103,ENETUNREACH:101,ENETDOWN:100,ETIMEDOUT:110,EHOSTDOWN:112,EHOSTUNREACH:113,EINPROGRESS:115,EALREADY:114,EDESTADDRREQ:89,EMSGSIZE:90,EPROTONOSUPPORT:93,ESOCKTNOSUPPORT:94,EADDRNOTAVAIL:99,ENETRESET:102,EISCONN:106,ENOTCONN:107,ETOOMANYREFS:109,EUSERS:87,EDQUOT:122,ESTALE:116,ENOTSUP:95,ENOMEDIUM:123,EILSEQ:84,EOVERFLOW:75,ECANCELED:125,ENOTRECOVERABLE:131,EOWNERDEAD:130,ESTRPIPE:86};
  
  var ERRNO_MESSAGES={0:"Success",1:"Not super-user",2:"No such file or directory",3:"No such process",4:"Interrupted system call",5:"I/O error",6:"No such device or address",7:"Arg list too long",8:"Exec format error",9:"Bad file number",10:"No children",11:"No more processes",12:"Not enough core",13:"Permission denied",14:"Bad address",15:"Block device required",16:"Mount device busy",17:"File exists",18:"Cross-device link",19:"No such device",20:"Not a directory",21:"Is a directory",22:"Invalid argument",23:"Too many open files in system",24:"Too many open files",25:"Not a typewriter",26:"Text file busy",27:"File too large",28:"No space left on device",29:"Illegal seek",30:"Read only file system",31:"Too many links",32:"Broken pipe",33:"Math arg out of domain of func",34:"Math result not representable",35:"File locking deadlock error",36:"File or path name too long",37:"No record locks available",38:"Function not implemented",39:"Directory not empty",40:"Too many symbolic links",42:"No message of desired type",43:"Identifier removed",44:"Channel number out of range",45:"Level 2 not synchronized",46:"Level 3 halted",47:"Level 3 reset",48:"Link number out of range",49:"Protocol driver not attached",50:"No CSI structure available",51:"Level 2 halted",52:"Invalid exchange",53:"Invalid request descriptor",54:"Exchange full",55:"No anode",56:"Invalid request code",57:"Invalid slot",59:"Bad font file fmt",60:"Device not a stream",61:"No data (for no delay io)",62:"Timer expired",63:"Out of streams resources",64:"Machine is not on the network",65:"Package not installed",66:"The object is remote",67:"The link has been severed",68:"Advertise error",69:"Srmount error",70:"Communication error on send",71:"Protocol error",72:"Multihop attempted",73:"Cross mount point (not really error)",74:"Trying to read unreadable message",75:"Value too large for defined data type",76:"Given log. name not unique",77:"f.d. invalid for this operation",78:"Remote address changed",79:"Can   access a needed shared lib",80:"Accessing a corrupted shared lib",81:".lib section in a.out corrupted",82:"Attempting to link in too many libs",83:"Attempting to exec a shared library",84:"Illegal byte sequence",86:"Streams pipe error",87:"Too many users",88:"Socket operation on non-socket",89:"Destination address required",90:"Message too long",91:"Protocol wrong type for socket",92:"Protocol not available",93:"Unknown protocol",94:"Socket type not supported",95:"Not supported",96:"Protocol family not supported",97:"Address family not supported by protocol family",98:"Address already in use",99:"Address not available",100:"Network interface is not configured",101:"Network is unreachable",102:"Connection reset by network",103:"Connection aborted",104:"Connection reset by peer",105:"No buffer space available",106:"Socket is already connected",107:"Socket is not connected",108:"Can't send after socket shutdown",109:"Too many references",110:"Connection timed out",111:"Connection refused",112:"Host is down",113:"Host is unreachable",114:"Socket already connected",115:"Connection already in progress",116:"Stale file handle",122:"Quota exceeded",123:"No medium (in tape drive)",125:"Operation canceled",130:"Previous owner died",131:"State not recoverable"};
  
  
  var ___errno_state=0;function ___setErrNo(value) {
      // For convenient setting and returning of errno.
      HEAP32[((___errno_state)>>2)]=value;
      return value;
    }
  
  var PATH={splitPath:function (filename) {
        var splitPathRe = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
        return splitPathRe.exec(filename).slice(1);
      },normalizeArray:function (parts, allowAboveRoot) {
        // if the path tries to go above the root, `up` ends up > 0
        var up = 0;
        for (var i = parts.length - 1; i >= 0; i--) {
          var last = parts[i];
          if (last === '.') {
            parts.splice(i, 1);
          } else if (last === '..') {
            parts.splice(i, 1);
            up++;
          } else if (up) {
            parts.splice(i, 1);
            up--;
          }
        }
        // if the path is allowed to go above the root, restore leading ..s
        if (allowAboveRoot) {
          for (; up--; up) {
            parts.unshift('..');
          }
        }
        return parts;
      },normalize:function (path) {
        var isAbsolute = path.charAt(0) === '/',
            trailingSlash = path.substr(-1) === '/';
        // Normalize the path
        path = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), !isAbsolute).join('/');
        if (!path && !isAbsolute) {
          path = '.';
        }
        if (path && trailingSlash) {
          path += '/';
        }
        return (isAbsolute ? '/' : '') + path;
      },dirname:function (path) {
        var result = PATH.splitPath(path),
            root = result[0],
            dir = result[1];
        if (!root && !dir) {
          // No dirname whatsoever
          return '.';
        }
        if (dir) {
          // It has a dirname, strip trailing slash
          dir = dir.substr(0, dir.length - 1);
        }
        return root + dir;
      },basename:function (path) {
        // EMSCRIPTEN return '/'' for '/', not an empty string
        if (path === '/') return '/';
        var lastSlash = path.lastIndexOf('/');
        if (lastSlash === -1) return path;
        return path.substr(lastSlash+1);
      },extname:function (path) {
        return PATH.splitPath(path)[3];
      },join:function () {
        var paths = Array.prototype.slice.call(arguments, 0);
        return PATH.normalize(paths.join('/'));
      },join2:function (l, r) {
        return PATH.normalize(l + '/' + r);
      },resolve:function () {
        var resolvedPath = '',
          resolvedAbsolute = false;
        for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
          var path = (i >= 0) ? arguments[i] : FS.cwd();
          // Skip empty and invalid entries
          if (typeof path !== 'string') {
            throw new TypeError('Arguments to path.resolve must be strings');
          } else if (!path) {
            continue;
          }
          resolvedPath = path + '/' + resolvedPath;
          resolvedAbsolute = path.charAt(0) === '/';
        }
        // At this point the path should be resolved to a full absolute path, but
        // handle relative paths to be safe (might happen when process.cwd() fails)
        resolvedPath = PATH.normalizeArray(resolvedPath.split('/').filter(function(p) {
          return !!p;
        }), !resolvedAbsolute).join('/');
        return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
      },relative:function (from, to) {
        from = PATH.resolve(from).substr(1);
        to = PATH.resolve(to).substr(1);
        function trim(arr) {
          var start = 0;
          for (; start < arr.length; start++) {
            if (arr[start] !== '') break;
          }
          var end = arr.length - 1;
          for (; end >= 0; end--) {
            if (arr[end] !== '') break;
          }
          if (start > end) return [];
          return arr.slice(start, end - start + 1);
        }
        var fromParts = trim(from.split('/'));
        var toParts = trim(to.split('/'));
        var length = Math.min(fromParts.length, toParts.length);
        var samePartsLength = length;
        for (var i = 0; i < length; i++) {
          if (fromParts[i] !== toParts[i]) {
            samePartsLength = i;
            break;
          }
        }
        var outputParts = [];
        for (var i = samePartsLength; i < fromParts.length; i++) {
          outputParts.push('..');
        }
        outputParts = outputParts.concat(toParts.slice(samePartsLength));
        return outputParts.join('/');
      }};
  
  var TTY={ttys:[],init:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // currently, FS.init does not distinguish if process.stdin is a file or TTY
        //   // device, it always assumes it's a TTY device. because of this, we're forcing
        //   // process.stdin to UTF8 encoding to at least make stdin reading compatible
        //   // with text files until FS.init can be refactored.
        //   process['stdin']['setEncoding']('utf8');
        // }
      },shutdown:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // inolen: any idea as to why node -e 'process.stdin.read()' wouldn't exit immediately (with process.stdin being a tty)?
        //   // isaacs: because now it's reading from the stream, you've expressed interest in it, so that read() kicks off a _read() which creates a ReadReq operation
        //   // inolen: I thought read() in that case was a synchronous operation that just grabbed some amount of buffered data if it exists?
        //   // isaacs: it is. but it also triggers a _read() call, which calls readStart() on the handle
        //   // isaacs: do process.stdin.pause() and i'd think it'd probably close the pending call
        //   process['stdin']['pause']();
        // }
      },register:function (dev, ops) {
        TTY.ttys[dev] = { input: [], output: [], ops: ops };
        FS.registerDevice(dev, TTY.stream_ops);
      },stream_ops:{open:function (stream) {
          var tty = TTY.ttys[stream.node.rdev];
          if (!tty) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          stream.tty = tty;
          stream.seekable = false;
        },close:function (stream) {
          // flush any pending line data
          if (stream.tty.output.length) {
            stream.tty.ops.put_char(stream.tty, 10);
          }
        },read:function (stream, buffer, offset, length, pos /* ignored */) {
          if (!stream.tty || !stream.tty.ops.get_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          var bytesRead = 0;
          for (var i = 0; i < length; i++) {
            var result;
            try {
              result = stream.tty.ops.get_char(stream.tty);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            if (result === undefined && bytesRead === 0) {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
            if (result === null || result === undefined) break;
            bytesRead++;
            buffer[offset+i] = result;
          }
          if (bytesRead) {
            stream.node.timestamp = Date.now();
          }
          return bytesRead;
        },write:function (stream, buffer, offset, length, pos) {
          if (!stream.tty || !stream.tty.ops.put_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          for (var i = 0; i < length; i++) {
            try {
              stream.tty.ops.put_char(stream.tty, buffer[offset+i]);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
          }
          if (length) {
            stream.node.timestamp = Date.now();
          }
          return i;
        }},default_tty_ops:{get_char:function (tty) {
          if (!tty.input.length) {
            var result = null;
            if (ENVIRONMENT_IS_NODE) {
              result = process['stdin']['read']();
              if (!result) {
                if (process['stdin']['_readableState'] && process['stdin']['_readableState']['ended']) {
                  return null;  // EOF
                }
                return undefined;  // no data available
              }
            } else if (typeof window != 'undefined' &&
              typeof window.prompt == 'function') {
              // Browser.
              result = window.prompt('Input: ');  // returns null on cancel
              if (result !== null) {
                result += '\n';
              }
            } else if (typeof readline == 'function') {
              // Command line.
              result = readline();
              if (result !== null) {
                result += '\n';
              }
            }
            if (!result) {
              return null;
            }
            tty.input = intArrayFromString(result, true);
          }
          return tty.input.shift();
        },put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['print'](tty.output.join(''));
            tty.output = [];
          } else {
            tty.output.push(TTY.utf8.processCChar(val));
          }
        }},default_tty1_ops:{put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['printErr'](tty.output.join(''));
            tty.output = [];
          } else {
            tty.output.push(TTY.utf8.processCChar(val));
          }
        }}};
  
  var MEMFS={ops_table:null,CONTENT_OWNING:1,CONTENT_FLEXIBLE:2,CONTENT_FIXED:3,mount:function (mount) {
        return MEMFS.createNode(null, '/', 16384 | 511 /* 0777 */, 0);
      },createNode:function (parent, name, mode, dev) {
        if (FS.isBlkdev(mode) || FS.isFIFO(mode)) {
          // no supported
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (!MEMFS.ops_table) {
          MEMFS.ops_table = {
            dir: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                lookup: MEMFS.node_ops.lookup,
                mknod: MEMFS.node_ops.mknod,
                rename: MEMFS.node_ops.rename,
                unlink: MEMFS.node_ops.unlink,
                rmdir: MEMFS.node_ops.rmdir,
                readdir: MEMFS.node_ops.readdir,
                symlink: MEMFS.node_ops.symlink
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek
              }
            },
            file: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek,
                read: MEMFS.stream_ops.read,
                write: MEMFS.stream_ops.write,
                allocate: MEMFS.stream_ops.allocate,
                mmap: MEMFS.stream_ops.mmap
              }
            },
            link: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                readlink: MEMFS.node_ops.readlink
              },
              stream: {}
            },
            chrdev: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: FS.chrdev_stream_ops
            },
          };
        }
        var node = FS.createNode(parent, name, mode, dev);
        if (FS.isDir(node.mode)) {
          node.node_ops = MEMFS.ops_table.dir.node;
          node.stream_ops = MEMFS.ops_table.dir.stream;
          node.contents = {};
        } else if (FS.isFile(node.mode)) {
          node.node_ops = MEMFS.ops_table.file.node;
          node.stream_ops = MEMFS.ops_table.file.stream;
          node.contents = [];
          node.contentMode = MEMFS.CONTENT_FLEXIBLE;
        } else if (FS.isLink(node.mode)) {
          node.node_ops = MEMFS.ops_table.link.node;
          node.stream_ops = MEMFS.ops_table.link.stream;
        } else if (FS.isChrdev(node.mode)) {
          node.node_ops = MEMFS.ops_table.chrdev.node;
          node.stream_ops = MEMFS.ops_table.chrdev.stream;
        }
        node.timestamp = Date.now();
        // add the new node to the parent
        if (parent) {
          parent.contents[name] = node;
        }
        return node;
      },ensureFlexible:function (node) {
        if (node.contentMode !== MEMFS.CONTENT_FLEXIBLE) {
          var contents = node.contents;
          node.contents = Array.prototype.slice.call(contents);
          node.contentMode = MEMFS.CONTENT_FLEXIBLE;
        }
      },node_ops:{getattr:function (node) {
          var attr = {};
          // device numbers reuse inode numbers.
          attr.dev = FS.isChrdev(node.mode) ? node.id : 1;
          attr.ino = node.id;
          attr.mode = node.mode;
          attr.nlink = 1;
          attr.uid = 0;
          attr.gid = 0;
          attr.rdev = node.rdev;
          if (FS.isDir(node.mode)) {
            attr.size = 4096;
          } else if (FS.isFile(node.mode)) {
            attr.size = node.contents.length;
          } else if (FS.isLink(node.mode)) {
            attr.size = node.link.length;
          } else {
            attr.size = 0;
          }
          attr.atime = new Date(node.timestamp);
          attr.mtime = new Date(node.timestamp);
          attr.ctime = new Date(node.timestamp);
          // NOTE: In our implementation, st_blocks = Math.ceil(st_size/st_blksize),
          //       but this is not required by the standard.
          attr.blksize = 4096;
          attr.blocks = Math.ceil(attr.size / attr.blksize);
          return attr;
        },setattr:function (node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
          if (attr.size !== undefined) {
            MEMFS.ensureFlexible(node);
            var contents = node.contents;
            if (attr.size < contents.length) contents.length = attr.size;
            else while (attr.size > contents.length) contents.push(0);
          }
        },lookup:function (parent, name) {
          throw FS.genericErrors[ERRNO_CODES.ENOENT];
        },mknod:function (parent, name, mode, dev) {
          return MEMFS.createNode(parent, name, mode, dev);
        },rename:function (old_node, new_dir, new_name) {
          // if we're overwriting a directory at new_name, make sure it's empty.
          if (FS.isDir(old_node.mode)) {
            var new_node;
            try {
              new_node = FS.lookupNode(new_dir, new_name);
            } catch (e) {
            }
            if (new_node) {
              for (var i in new_node.contents) {
                throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
              }
            }
          }
          // do the internal rewiring
          delete old_node.parent.contents[old_node.name];
          old_node.name = new_name;
          new_dir.contents[new_name] = old_node;
          old_node.parent = new_dir;
        },unlink:function (parent, name) {
          delete parent.contents[name];
        },rmdir:function (parent, name) {
          var node = FS.lookupNode(parent, name);
          for (var i in node.contents) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
          }
          delete parent.contents[name];
        },readdir:function (node) {
          var entries = ['.', '..']
          for (var key in node.contents) {
            if (!node.contents.hasOwnProperty(key)) {
              continue;
            }
            entries.push(key);
          }
          return entries;
        },symlink:function (parent, newname, oldpath) {
          var node = MEMFS.createNode(parent, newname, 511 /* 0777 */ | 40960, 0);
          node.link = oldpath;
          return node;
        },readlink:function (node) {
          if (!FS.isLink(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return node.link;
        }},stream_ops:{read:function (stream, buffer, offset, length, position) {
          var contents = stream.node.contents;
          if (position >= contents.length)
            return 0;
          var size = Math.min(contents.length - position, length);
          assert(size >= 0);
          if (size > 8 && contents.subarray) { // non-trivial, and typed array
            buffer.set(contents.subarray(position, position + size), offset);
          } else
          {
            for (var i = 0; i < size; i++) {
              buffer[offset + i] = contents[position + i];
            }
          }
          return size;
        },write:function (stream, buffer, offset, length, position, canOwn) {
          var node = stream.node;
          node.timestamp = Date.now();
          var contents = node.contents;
          if (length && contents.length === 0 && position === 0 && buffer.subarray) {
            // just replace it with the new data
            assert(buffer.length);
            if (canOwn && offset === 0) {
              node.contents = buffer; // this could be a subarray of Emscripten HEAP, or allocated from some other source.
              node.contentMode = (buffer.buffer === HEAP8.buffer) ? MEMFS.CONTENT_OWNING : MEMFS.CONTENT_FIXED;
            } else {
              node.contents = new Uint8Array(buffer.subarray(offset, offset+length));
              node.contentMode = MEMFS.CONTENT_FIXED;
            }
            return length;
          }
          MEMFS.ensureFlexible(node);
          var contents = node.contents;
          while (contents.length < position) contents.push(0);
          for (var i = 0; i < length; i++) {
            contents[position + i] = buffer[offset + i];
          }
          return length;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.contents.length;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          stream.ungotten = [];
          stream.position = position;
          return position;
        },allocate:function (stream, offset, length) {
          MEMFS.ensureFlexible(stream.node);
          var contents = stream.node.contents;
          var limit = offset + length;
          while (limit > contents.length) contents.push(0);
        },mmap:function (stream, buffer, offset, length, position, prot, flags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          var ptr;
          var allocated;
          var contents = stream.node.contents;
          // Only make a new copy when MAP_PRIVATE is specified.
          if ( !(flags & 2) &&
                (contents.buffer === buffer || contents.buffer === buffer.buffer) ) {
            // We can't emulate MAP_SHARED when the file is not backed by the buffer
            // we're mapping to (e.g. the HEAP buffer).
            allocated = false;
            ptr = contents.byteOffset;
          } else {
            // Try to avoid unnecessary slices.
            if (position > 0 || position + length < contents.length) {
              if (contents.subarray) {
                contents = contents.subarray(position, position + length);
              } else {
                contents = Array.prototype.slice.call(contents, position, position + length);
              }
            }
            allocated = true;
            ptr = _malloc(length);
            if (!ptr) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOMEM);
            }
            buffer.set(contents, ptr);
          }
          return { ptr: ptr, allocated: allocated };
        }}};
  
  var IDBFS={dbs:{},indexedDB:function () {
        return window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
      },DB_VERSION:21,DB_STORE_NAME:"FILE_DATA",mount:function (mount) {
        // reuse all of the core MEMFS functionality
        return MEMFS.mount.apply(null, arguments);
      },syncfs:function (mount, populate, callback) {
        IDBFS.getLocalSet(mount, function(err, local) {
          if (err) return callback(err);
  
          IDBFS.getRemoteSet(mount, function(err, remote) {
            if (err) return callback(err);
  
            var src = populate ? remote : local;
            var dst = populate ? local : remote;
  
            IDBFS.reconcile(src, dst, callback);
          });
        });
      },getDB:function (name, callback) {
        // check the cache first
        var db = IDBFS.dbs[name];
        if (db) {
          return callback(null, db);
        }
  
        var req;
        try {
          req = IDBFS.indexedDB().open(name, IDBFS.DB_VERSION);
        } catch (e) {
          return callback(e);
        }
        req.onupgradeneeded = function(e) {
          var db = e.target.result;
          var transaction = e.target.transaction;
  
          var fileStore;
  
          if (db.objectStoreNames.contains(IDBFS.DB_STORE_NAME)) {
            fileStore = transaction.objectStore(IDBFS.DB_STORE_NAME);
          } else {
            fileStore = db.createObjectStore(IDBFS.DB_STORE_NAME);
          }
  
          fileStore.createIndex('timestamp', 'timestamp', { unique: false });
        };
        req.onsuccess = function() {
          db = req.result;
  
          // add to the cache
          IDBFS.dbs[name] = db;
          callback(null, db);
        };
        req.onerror = function() {
          callback(this.error);
        };
      },getLocalSet:function (mount, callback) {
        var entries = {};
  
        function isRealDir(p) {
          return p !== '.' && p !== '..';
        };
        function toAbsolute(root) {
          return function(p) {
            return PATH.join2(root, p);
          }
        };
  
        var check = FS.readdir(mount.mountpoint).filter(isRealDir).map(toAbsolute(mount.mountpoint));
  
        while (check.length) {
          var path = check.pop();
          var stat;
  
          try {
            stat = FS.stat(path);
          } catch (e) {
            return callback(e);
          }
  
          if (FS.isDir(stat.mode)) {
            check.push.apply(check, FS.readdir(path).filter(isRealDir).map(toAbsolute(path)));
          }
  
          entries[path] = { timestamp: stat.mtime };
        }
  
        return callback(null, { type: 'local', entries: entries });
      },getRemoteSet:function (mount, callback) {
        var entries = {};
  
        IDBFS.getDB(mount.mountpoint, function(err, db) {
          if (err) return callback(err);
  
          var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readonly');
          transaction.onerror = function() { callback(this.error); };
  
          var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
          var index = store.index('timestamp');
  
          index.openKeyCursor().onsuccess = function(event) {
            var cursor = event.target.result;
  
            if (!cursor) {
              return callback(null, { type: 'remote', db: db, entries: entries });
            }
  
            entries[cursor.primaryKey] = { timestamp: cursor.key };
  
            cursor.continue();
          };
        });
      },loadLocalEntry:function (path, callback) {
        var stat, node;
  
        try {
          var lookup = FS.lookupPath(path);
          node = lookup.node;
          stat = FS.stat(path);
        } catch (e) {
          return callback(e);
        }
  
        if (FS.isDir(stat.mode)) {
          return callback(null, { timestamp: stat.mtime, mode: stat.mode });
        } else if (FS.isFile(stat.mode)) {
          return callback(null, { timestamp: stat.mtime, mode: stat.mode, contents: node.contents });
        } else {
          return callback(new Error('node type not supported'));
        }
      },storeLocalEntry:function (path, entry, callback) {
        try {
          if (FS.isDir(entry.mode)) {
            FS.mkdir(path, entry.mode);
          } else if (FS.isFile(entry.mode)) {
            FS.writeFile(path, entry.contents, { encoding: 'binary', canOwn: true });
          } else {
            return callback(new Error('node type not supported'));
          }
  
          FS.utime(path, entry.timestamp, entry.timestamp);
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },removeLocalEntry:function (path, callback) {
        try {
          var lookup = FS.lookupPath(path);
          var stat = FS.stat(path);
  
          if (FS.isDir(stat.mode)) {
            FS.rmdir(path);
          } else if (FS.isFile(stat.mode)) {
            FS.unlink(path);
          }
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },loadRemoteEntry:function (store, path, callback) {
        var req = store.get(path);
        req.onsuccess = function(event) { callback(null, event.target.result); };
        req.onerror = function() { callback(this.error); };
      },storeRemoteEntry:function (store, path, entry, callback) {
        var req = store.put(entry, path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function() { callback(this.error); };
      },removeRemoteEntry:function (store, path, callback) {
        var req = store.delete(path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function() { callback(this.error); };
      },reconcile:function (src, dst, callback) {
        var total = 0;
  
        var create = [];
        Object.keys(src.entries).forEach(function (key) {
          var e = src.entries[key];
          var e2 = dst.entries[key];
          if (!e2 || e.timestamp > e2.timestamp) {
            create.push(key);
            total++;
          }
        });
  
        var remove = [];
        Object.keys(dst.entries).forEach(function (key) {
          var e = dst.entries[key];
          var e2 = src.entries[key];
          if (!e2) {
            remove.push(key);
            total++;
          }
        });
  
        if (!total) {
          return callback(null);
        }
  
        var errored = false;
        var completed = 0;
        var db = src.type === 'remote' ? src.db : dst.db;
        var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readwrite');
        var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return callback(err);
            }
            return;
          }
          if (++completed >= total) {
            return callback(null);
          }
        };
  
        transaction.onerror = function() { done(this.error); };
  
        // sort paths in ascending order so directory entries are created
        // before the files inside them
        create.sort().forEach(function (path) {
          if (dst.type === 'local') {
            IDBFS.loadRemoteEntry(store, path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeLocalEntry(path, entry, done);
            });
          } else {
            IDBFS.loadLocalEntry(path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeRemoteEntry(store, path, entry, done);
            });
          }
        });
  
        // sort paths in descending order so files are deleted before their
        // parent directories
        remove.sort().reverse().forEach(function(path) {
          if (dst.type === 'local') {
            IDBFS.removeLocalEntry(path, done);
          } else {
            IDBFS.removeRemoteEntry(store, path, done);
          }
        });
      }};
  
  var NODEFS={isWindows:false,staticInit:function () {
        NODEFS.isWindows = !!process.platform.match(/^win/);
      },mount:function (mount) {
        assert(ENVIRONMENT_IS_NODE);
        return NODEFS.createNode(null, '/', NODEFS.getMode(mount.opts.root), 0);
      },createNode:function (parent, name, mode, dev) {
        if (!FS.isDir(mode) && !FS.isFile(mode) && !FS.isLink(mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node = FS.createNode(parent, name, mode);
        node.node_ops = NODEFS.node_ops;
        node.stream_ops = NODEFS.stream_ops;
        return node;
      },getMode:function (path) {
        var stat;
        try {
          stat = fs.lstatSync(path);
          if (NODEFS.isWindows) {
            // On Windows, directories return permission bits 'rw-rw-rw-', even though they have 'rwxrwxrwx', so 
            // propagate write bits to execute bits.
            stat.mode = stat.mode | ((stat.mode & 146) >> 1);
          }
        } catch (e) {
          if (!e.code) throw e;
          throw new FS.ErrnoError(ERRNO_CODES[e.code]);
        }
        return stat.mode;
      },realPath:function (node) {
        var parts = [];
        while (node.parent !== node) {
          parts.push(node.name);
          node = node.parent;
        }
        parts.push(node.mount.opts.root);
        parts.reverse();
        return PATH.join.apply(null, parts);
      },flagsToPermissionStringMap:{0:"r",1:"r+",2:"r+",64:"r",65:"r+",66:"r+",129:"rx+",193:"rx+",514:"w+",577:"w",578:"w+",705:"wx",706:"wx+",1024:"a",1025:"a",1026:"a+",1089:"a",1090:"a+",1153:"ax",1154:"ax+",1217:"ax",1218:"ax+",4096:"rs",4098:"rs+"},flagsToPermissionString:function (flags) {
        if (flags in NODEFS.flagsToPermissionStringMap) {
          return NODEFS.flagsToPermissionStringMap[flags];
        } else {
          return flags;
        }
      },node_ops:{getattr:function (node) {
          var path = NODEFS.realPath(node);
          var stat;
          try {
            stat = fs.lstatSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          // node.js v0.10.20 doesn't report blksize and blocks on Windows. Fake them with default blksize of 4096.
          // See http://support.microsoft.com/kb/140365
          if (NODEFS.isWindows && !stat.blksize) {
            stat.blksize = 4096;
          }
          if (NODEFS.isWindows && !stat.blocks) {
            stat.blocks = (stat.size+stat.blksize-1)/stat.blksize|0;
          }
          return {
            dev: stat.dev,
            ino: stat.ino,
            mode: stat.mode,
            nlink: stat.nlink,
            uid: stat.uid,
            gid: stat.gid,
            rdev: stat.rdev,
            size: stat.size,
            atime: stat.atime,
            mtime: stat.mtime,
            ctime: stat.ctime,
            blksize: stat.blksize,
            blocks: stat.blocks
          };
        },setattr:function (node, attr) {
          var path = NODEFS.realPath(node);
          try {
            if (attr.mode !== undefined) {
              fs.chmodSync(path, attr.mode);
              // update the common node structure mode as well
              node.mode = attr.mode;
            }
            if (attr.timestamp !== undefined) {
              var date = new Date(attr.timestamp);
              fs.utimesSync(path, date, date);
            }
            if (attr.size !== undefined) {
              fs.truncateSync(path, attr.size);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },lookup:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          var mode = NODEFS.getMode(path);
          return NODEFS.createNode(parent, name, mode);
        },mknod:function (parent, name, mode, dev) {
          var node = NODEFS.createNode(parent, name, mode, dev);
          // create the backing node for this in the fs root as well
          var path = NODEFS.realPath(node);
          try {
            if (FS.isDir(node.mode)) {
              fs.mkdirSync(path, node.mode);
            } else {
              fs.writeFileSync(path, '', { mode: node.mode });
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return node;
        },rename:function (oldNode, newDir, newName) {
          var oldPath = NODEFS.realPath(oldNode);
          var newPath = PATH.join2(NODEFS.realPath(newDir), newName);
          try {
            fs.renameSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },unlink:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.unlinkSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },rmdir:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.rmdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readdir:function (node) {
          var path = NODEFS.realPath(node);
          try {
            return fs.readdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },symlink:function (parent, newName, oldPath) {
          var newPath = PATH.join2(NODEFS.realPath(parent), newName);
          try {
            fs.symlinkSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readlink:function (node) {
          var path = NODEFS.realPath(node);
          try {
            return fs.readlinkSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        }},stream_ops:{open:function (stream) {
          var path = NODEFS.realPath(stream.node);
          try {
            if (FS.isFile(stream.node.mode)) {
              stream.nfd = fs.openSync(path, NODEFS.flagsToPermissionString(stream.flags));
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },close:function (stream) {
          try {
            if (FS.isFile(stream.node.mode) && stream.nfd) {
              fs.closeSync(stream.nfd);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },read:function (stream, buffer, offset, length, position) {
          // FIXME this is terrible.
          var nbuffer = new Buffer(length);
          var res;
          try {
            res = fs.readSync(stream.nfd, nbuffer, 0, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          if (res > 0) {
            for (var i = 0; i < res; i++) {
              buffer[offset + i] = nbuffer[i];
            }
          }
          return res;
        },write:function (stream, buffer, offset, length, position) {
          // FIXME this is terrible.
          var nbuffer = new Buffer(buffer.subarray(offset, offset + length));
          var res;
          try {
            res = fs.writeSync(stream.nfd, nbuffer, 0, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return res;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              try {
                var stat = fs.fstatSync(stream.nfd);
                position += stat.size;
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES[e.code]);
              }
            }
          }
  
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
  
          stream.position = position;
          return position;
        }}};
  
  var _stdin=allocate(1, "i32*", ALLOC_STATIC);
  
  var _stdout=allocate(1, "i32*", ALLOC_STATIC);
  
  var _stderr=allocate(1, "i32*", ALLOC_STATIC);
  
  function _fflush(stream) {
      // int fflush(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fflush.html
      // we don't currently perform any user-space buffering of data
    }var FS={root:null,mounts:[],devices:[null],streams:[],nextInode:1,nameTable:null,currentPath:"/",initialized:false,ignorePermissions:true,ErrnoError:null,genericErrors:{},handleFSError:function (e) {
        if (!(e instanceof FS.ErrnoError)) throw e + ' : ' + stackTrace();
        return ___setErrNo(e.errno);
      },lookupPath:function (path, opts) {
        path = PATH.resolve(FS.cwd(), path);
        opts = opts || {};
  
        var defaults = {
          follow_mount: true,
          recurse_count: 0
        };
        for (var key in defaults) {
          if (opts[key] === undefined) {
            opts[key] = defaults[key];
          }
        }
  
        if (opts.recurse_count > 8) {  // max recursive lookup of 8
          throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
        }
  
        // split the path
        var parts = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), false);
  
        // start at the root
        var current = FS.root;
        var current_path = '/';
  
        for (var i = 0; i < parts.length; i++) {
          var islast = (i === parts.length-1);
          if (islast && opts.parent) {
            // stop resolving
            break;
          }
  
          current = FS.lookupNode(current, parts[i]);
          current_path = PATH.join2(current_path, parts[i]);
  
          // jump to the mount's root node if this is a mountpoint
          if (FS.isMountpoint(current)) {
            if (!islast || (islast && opts.follow_mount)) {
              current = current.mounted.root;
            }
          }
  
          // by default, lookupPath will not follow a symlink if it is the final path component.
          // setting opts.follow = true will override this behavior.
          if (!islast || opts.follow) {
            var count = 0;
            while (FS.isLink(current.mode)) {
              var link = FS.readlink(current_path);
              current_path = PATH.resolve(PATH.dirname(current_path), link);
              
              var lookup = FS.lookupPath(current_path, { recurse_count: opts.recurse_count });
              current = lookup.node;
  
              if (count++ > 40) {  // limit max consecutive symlinks to 40 (SYMLOOP_MAX).
                throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
              }
            }
          }
        }
  
        return { path: current_path, node: current };
      },getPath:function (node) {
        var path;
        while (true) {
          if (FS.isRoot(node)) {
            var mount = node.mount.mountpoint;
            if (!path) return mount;
            return mount[mount.length-1] !== '/' ? mount + '/' + path : mount + path;
          }
          path = path ? node.name + '/' + path : node.name;
          node = node.parent;
        }
      },hashName:function (parentid, name) {
        var hash = 0;
  
  
        for (var i = 0; i < name.length; i++) {
          hash = ((hash << 5) - hash + name.charCodeAt(i)) | 0;
        }
        return ((parentid + hash) >>> 0) % FS.nameTable.length;
      },hashAddNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        node.name_next = FS.nameTable[hash];
        FS.nameTable[hash] = node;
      },hashRemoveNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        if (FS.nameTable[hash] === node) {
          FS.nameTable[hash] = node.name_next;
        } else {
          var current = FS.nameTable[hash];
          while (current) {
            if (current.name_next === node) {
              current.name_next = node.name_next;
              break;
            }
            current = current.name_next;
          }
        }
      },lookupNode:function (parent, name) {
        var err = FS.mayLookup(parent);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        var hash = FS.hashName(parent.id, name);
        for (var node = FS.nameTable[hash]; node; node = node.name_next) {
          var nodeName = node.name;
          if (node.parent.id === parent.id && nodeName === name) {
            return node;
          }
        }
        // if we failed to find it in the cache, call into the VFS
        return FS.lookup(parent, name);
      },createNode:function (parent, name, mode, rdev) {
        if (!FS.FSNode) {
          FS.FSNode = function(parent, name, mode, rdev) {
            if (!parent) {
              parent = this;  // root node sets parent to itself
            }
            this.parent = parent;
            this.mount = parent.mount;
            this.mounted = null;
            this.id = FS.nextInode++;
            this.name = name;
            this.mode = mode;
            this.node_ops = {};
            this.stream_ops = {};
            this.rdev = rdev;
          };
  
          FS.FSNode.prototype = {};
  
          // compatibility
          var readMode = 292 | 73;
          var writeMode = 146;
  
          // NOTE we must use Object.defineProperties instead of individual calls to
          // Object.defineProperty in order to make closure compiler happy
          Object.defineProperties(FS.FSNode.prototype, {
            read: {
              get: function() { return (this.mode & readMode) === readMode; },
              set: function(val) { val ? this.mode |= readMode : this.mode &= ~readMode; }
            },
            write: {
              get: function() { return (this.mode & writeMode) === writeMode; },
              set: function(val) { val ? this.mode |= writeMode : this.mode &= ~writeMode; }
            },
            isFolder: {
              get: function() { return FS.isDir(this.mode); },
            },
            isDevice: {
              get: function() { return FS.isChrdev(this.mode); },
            },
          });
        }
  
        var node = new FS.FSNode(parent, name, mode, rdev);
  
        FS.hashAddNode(node);
  
        return node;
      },destroyNode:function (node) {
        FS.hashRemoveNode(node);
      },isRoot:function (node) {
        return node === node.parent;
      },isMountpoint:function (node) {
        return !!node.mounted;
      },isFile:function (mode) {
        return (mode & 61440) === 32768;
      },isDir:function (mode) {
        return (mode & 61440) === 16384;
      },isLink:function (mode) {
        return (mode & 61440) === 40960;
      },isChrdev:function (mode) {
        return (mode & 61440) === 8192;
      },isBlkdev:function (mode) {
        return (mode & 61440) === 24576;
      },isFIFO:function (mode) {
        return (mode & 61440) === 4096;
      },isSocket:function (mode) {
        return (mode & 49152) === 49152;
      },flagModes:{"r":0,"rs":1052672,"r+":2,"w":577,"wx":705,"xw":705,"w+":578,"wx+":706,"xw+":706,"a":1089,"ax":1217,"xa":1217,"a+":1090,"ax+":1218,"xa+":1218},modeStringToFlags:function (str) {
        var flags = FS.flagModes[str];
        if (typeof flags === 'undefined') {
          throw new Error('Unknown file open mode: ' + str);
        }
        return flags;
      },flagsToPermissionString:function (flag) {
        var accmode = flag & 2097155;
        var perms = ['r', 'w', 'rw'][accmode];
        if ((flag & 512)) {
          perms += 'w';
        }
        return perms;
      },nodePermissions:function (node, perms) {
        if (FS.ignorePermissions) {
          return 0;
        }
        // return 0 if any user, group or owner bits are set.
        if (perms.indexOf('r') !== -1 && !(node.mode & 292)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('w') !== -1 && !(node.mode & 146)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('x') !== -1 && !(node.mode & 73)) {
          return ERRNO_CODES.EACCES;
        }
        return 0;
      },mayLookup:function (dir) {
        return FS.nodePermissions(dir, 'x');
      },mayCreate:function (dir, name) {
        try {
          var node = FS.lookupNode(dir, name);
          return ERRNO_CODES.EEXIST;
        } catch (e) {
        }
        return FS.nodePermissions(dir, 'wx');
      },mayDelete:function (dir, name, isdir) {
        var node;
        try {
          node = FS.lookupNode(dir, name);
        } catch (e) {
          return e.errno;
        }
        var err = FS.nodePermissions(dir, 'wx');
        if (err) {
          return err;
        }
        if (isdir) {
          if (!FS.isDir(node.mode)) {
            return ERRNO_CODES.ENOTDIR;
          }
          if (FS.isRoot(node) || FS.getPath(node) === FS.cwd()) {
            return ERRNO_CODES.EBUSY;
          }
        } else {
          if (FS.isDir(node.mode)) {
            return ERRNO_CODES.EISDIR;
          }
        }
        return 0;
      },mayOpen:function (node, flags) {
        if (!node) {
          return ERRNO_CODES.ENOENT;
        }
        if (FS.isLink(node.mode)) {
          return ERRNO_CODES.ELOOP;
        } else if (FS.isDir(node.mode)) {
          if ((flags & 2097155) !== 0 ||  // opening for write
              (flags & 512)) {
            return ERRNO_CODES.EISDIR;
          }
        }
        return FS.nodePermissions(node, FS.flagsToPermissionString(flags));
      },MAX_OPEN_FDS:4096,nextfd:function (fd_start, fd_end) {
        fd_start = fd_start || 0;
        fd_end = fd_end || FS.MAX_OPEN_FDS;
        for (var fd = fd_start; fd <= fd_end; fd++) {
          if (!FS.streams[fd]) {
            return fd;
          }
        }
        throw new FS.ErrnoError(ERRNO_CODES.EMFILE);
      },getStream:function (fd) {
        return FS.streams[fd];
      },createStream:function (stream, fd_start, fd_end) {
        if (!FS.FSStream) {
          FS.FSStream = function(){};
          FS.FSStream.prototype = {};
          // compatibility
          Object.defineProperties(FS.FSStream.prototype, {
            object: {
              get: function() { return this.node; },
              set: function(val) { this.node = val; }
            },
            isRead: {
              get: function() { return (this.flags & 2097155) !== 1; }
            },
            isWrite: {
              get: function() { return (this.flags & 2097155) !== 0; }
            },
            isAppend: {
              get: function() { return (this.flags & 1024); }
            }
          });
        }
        // clone it, so we can return an instance of FSStream
        var newStream = new FS.FSStream();
        for (var p in stream) {
          newStream[p] = stream[p];
        }
        stream = newStream;
        var fd = FS.nextfd(fd_start, fd_end);
        stream.fd = fd;
        FS.streams[fd] = stream;
        return stream;
      },closeStream:function (fd) {
        FS.streams[fd] = null;
      },getStreamFromPtr:function (ptr) {
        return FS.streams[ptr - 1];
      },getPtrForStream:function (stream) {
        return stream ? stream.fd + 1 : 0;
      },chrdev_stream_ops:{open:function (stream) {
          var device = FS.getDevice(stream.node.rdev);
          // override node's stream ops with the device's
          stream.stream_ops = device.stream_ops;
          // forward the open call
          if (stream.stream_ops.open) {
            stream.stream_ops.open(stream);
          }
        },llseek:function () {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }},major:function (dev) {
        return ((dev) >> 8);
      },minor:function (dev) {
        return ((dev) & 0xff);
      },makedev:function (ma, mi) {
        return ((ma) << 8 | (mi));
      },registerDevice:function (dev, ops) {
        FS.devices[dev] = { stream_ops: ops };
      },getDevice:function (dev) {
        return FS.devices[dev];
      },getMounts:function (mount) {
        var mounts = [];
        var check = [mount];
  
        while (check.length) {
          var m = check.pop();
  
          mounts.push(m);
  
          check.push.apply(check, m.mounts);
        }
  
        return mounts;
      },syncfs:function (populate, callback) {
        if (typeof(populate) === 'function') {
          callback = populate;
          populate = false;
        }
  
        var mounts = FS.getMounts(FS.root.mount);
        var completed = 0;
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return callback(err);
            }
            return;
          }
          if (++completed >= mounts.length) {
            callback(null);
          }
        };
  
        // sync all mounts
        mounts.forEach(function (mount) {
          if (!mount.type.syncfs) {
            return done(null);
          }
          mount.type.syncfs(mount, populate, done);
        });
      },mount:function (type, opts, mountpoint) {
        var root = mountpoint === '/';
        var pseudo = !mountpoint;
        var node;
  
        if (root && FS.root) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        } else if (!root && !pseudo) {
          var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
          mountpoint = lookup.path;  // use the absolute path
          node = lookup.node;
  
          if (FS.isMountpoint(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
          }
  
          if (!FS.isDir(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
          }
        }
  
        var mount = {
          type: type,
          opts: opts,
          mountpoint: mountpoint,
          mounts: []
        };
  
        // create a root node for the fs
        var mountRoot = type.mount(mount);
        mountRoot.mount = mount;
        mount.root = mountRoot;
  
        if (root) {
          FS.root = mountRoot;
        } else if (node) {
          // set as a mountpoint
          node.mounted = mount;
  
          // add the new mount to the current mount's children
          if (node.mount) {
            node.mount.mounts.push(mount);
          }
        }
  
        return mountRoot;
      },unmount:function (mountpoint) {
        var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
        if (!FS.isMountpoint(lookup.node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
  
        // destroy the nodes for this mount, and all its child mounts
        var node = lookup.node;
        var mount = node.mounted;
        var mounts = FS.getMounts(mount);
  
        Object.keys(FS.nameTable).forEach(function (hash) {
          var current = FS.nameTable[hash];
  
          while (current) {
            var next = current.name_next;
  
            if (mounts.indexOf(current.mount) !== -1) {
              FS.destroyNode(current);
            }
  
            current = next;
          }
        });
  
        // no longer a mountpoint
        node.mounted = null;
  
        // remove this mount from the child mounts
        var idx = node.mount.mounts.indexOf(mount);
        assert(idx !== -1);
        node.mount.mounts.splice(idx, 1);
      },lookup:function (parent, name) {
        return parent.node_ops.lookup(parent, name);
      },mknod:function (path, mode, dev) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var err = FS.mayCreate(parent, name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.mknod) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.mknod(parent, name, mode, dev);
      },create:function (path, mode) {
        mode = mode !== undefined ? mode : 438 /* 0666 */;
        mode &= 4095;
        mode |= 32768;
        return FS.mknod(path, mode, 0);
      },mkdir:function (path, mode) {
        mode = mode !== undefined ? mode : 511 /* 0777 */;
        mode &= 511 | 512;
        mode |= 16384;
        return FS.mknod(path, mode, 0);
      },mkdev:function (path, mode, dev) {
        if (typeof(dev) === 'undefined') {
          dev = mode;
          mode = 438 /* 0666 */;
        }
        mode |= 8192;
        return FS.mknod(path, mode, dev);
      },symlink:function (oldpath, newpath) {
        var lookup = FS.lookupPath(newpath, { parent: true });
        var parent = lookup.node;
        var newname = PATH.basename(newpath);
        var err = FS.mayCreate(parent, newname);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.symlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.symlink(parent, newname, oldpath);
      },rename:function (old_path, new_path) {
        var old_dirname = PATH.dirname(old_path);
        var new_dirname = PATH.dirname(new_path);
        var old_name = PATH.basename(old_path);
        var new_name = PATH.basename(new_path);
        // parents must exist
        var lookup, old_dir, new_dir;
        try {
          lookup = FS.lookupPath(old_path, { parent: true });
          old_dir = lookup.node;
          lookup = FS.lookupPath(new_path, { parent: true });
          new_dir = lookup.node;
        } catch (e) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        // need to be part of the same mount
        if (old_dir.mount !== new_dir.mount) {
          throw new FS.ErrnoError(ERRNO_CODES.EXDEV);
        }
        // source must exist
        var old_node = FS.lookupNode(old_dir, old_name);
        // old path should not be an ancestor of the new path
        var relative = PATH.relative(old_path, new_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        // new path should not be an ancestor of the old path
        relative = PATH.relative(new_path, old_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
        }
        // see if the new path already exists
        var new_node;
        try {
          new_node = FS.lookupNode(new_dir, new_name);
        } catch (e) {
          // not fatal
        }
        // early out if nothing needs to change
        if (old_node === new_node) {
          return;
        }
        // we'll need to delete the old entry
        var isdir = FS.isDir(old_node.mode);
        var err = FS.mayDelete(old_dir, old_name, isdir);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        // need delete permissions if we'll be overwriting.
        // need create permissions if new doesn't already exist.
        err = new_node ?
          FS.mayDelete(new_dir, new_name, isdir) :
          FS.mayCreate(new_dir, new_name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!old_dir.node_ops.rename) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(old_node) || (new_node && FS.isMountpoint(new_node))) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        // if we are going to change the parent, check write permissions
        if (new_dir !== old_dir) {
          err = FS.nodePermissions(old_dir, 'w');
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        // remove the node from the lookup hash
        FS.hashRemoveNode(old_node);
        // do the underlying fs rename
        try {
          old_dir.node_ops.rename(old_node, new_dir, new_name);
        } catch (e) {
          throw e;
        } finally {
          // add the node back to the hash (in case node_ops.rename
          // changed its name)
          FS.hashAddNode(old_node);
        }
      },rmdir:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, true);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.rmdir) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        parent.node_ops.rmdir(parent, name);
        FS.destroyNode(node);
      },readdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        if (!node.node_ops.readdir) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        return node.node_ops.readdir(node);
      },unlink:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, false);
        if (err) {
          // POSIX says unlink should set EPERM, not EISDIR
          if (err === ERRNO_CODES.EISDIR) err = ERRNO_CODES.EPERM;
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.unlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        parent.node_ops.unlink(parent, name);
        FS.destroyNode(node);
      },readlink:function (path) {
        var lookup = FS.lookupPath(path);
        var link = lookup.node;
        if (!link.node_ops.readlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        return link.node_ops.readlink(link);
      },stat:function (path, dontFollow) {
        var lookup = FS.lookupPath(path, { follow: !dontFollow });
        var node = lookup.node;
        if (!node.node_ops.getattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return node.node_ops.getattr(node);
      },lstat:function (path) {
        return FS.stat(path, true);
      },chmod:function (path, mode, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          mode: (mode & 4095) | (node.mode & ~4095),
          timestamp: Date.now()
        });
      },lchmod:function (path, mode) {
        FS.chmod(path, mode, true);
      },fchmod:function (fd, mode) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chmod(stream.node, mode);
      },chown:function (path, uid, gid, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          timestamp: Date.now()
          // we ignore the uid / gid for now
        });
      },lchown:function (path, uid, gid) {
        FS.chown(path, uid, gid, true);
      },fchown:function (fd, uid, gid) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chown(stream.node, uid, gid);
      },truncate:function (path, len) {
        if (len < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: true });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!FS.isFile(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var err = FS.nodePermissions(node, 'w');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        node.node_ops.setattr(node, {
          size: len,
          timestamp: Date.now()
        });
      },ftruncate:function (fd, len) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        FS.truncate(stream.node, len);
      },utime:function (path, atime, mtime) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        node.node_ops.setattr(node, {
          timestamp: Math.max(atime, mtime)
        });
      },open:function (path, flags, mode, fd_start, fd_end) {
        flags = typeof flags === 'string' ? FS.modeStringToFlags(flags) : flags;
        mode = typeof mode === 'undefined' ? 438 /* 0666 */ : mode;
        if ((flags & 64)) {
          mode = (mode & 4095) | 32768;
        } else {
          mode = 0;
        }
        var node;
        if (typeof path === 'object') {
          node = path;
        } else {
          path = PATH.normalize(path);
          try {
            var lookup = FS.lookupPath(path, {
              follow: !(flags & 131072)
            });
            node = lookup.node;
          } catch (e) {
            // ignore
          }
        }
        // perhaps we need to create the node
        if ((flags & 64)) {
          if (node) {
            // if O_CREAT and O_EXCL are set, error out if the node already exists
            if ((flags & 128)) {
              throw new FS.ErrnoError(ERRNO_CODES.EEXIST);
            }
          } else {
            // node doesn't exist, try to create it
            node = FS.mknod(path, mode, 0);
          }
        }
        if (!node) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        // can't truncate a device
        if (FS.isChrdev(node.mode)) {
          flags &= ~512;
        }
        // check permissions
        var err = FS.mayOpen(node, flags);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        // do truncation if necessary
        if ((flags & 512)) {
          FS.truncate(node, 0);
        }
        // we've already handled these, don't pass down to the underlying vfs
        flags &= ~(128 | 512);
  
        // register the stream with the filesystem
        var stream = FS.createStream({
          node: node,
          path: FS.getPath(node),  // we want the absolute path to the node
          flags: flags,
          seekable: true,
          position: 0,
          stream_ops: node.stream_ops,
          // used by the file family libc calls (fopen, fwrite, ferror, etc.)
          ungotten: [],
          error: false
        }, fd_start, fd_end);
        // call the new stream's open function
        if (stream.stream_ops.open) {
          stream.stream_ops.open(stream);
        }
        if (Module['logReadFiles'] && !(flags & 1)) {
          if (!FS.readFiles) FS.readFiles = {};
          if (!(path in FS.readFiles)) {
            FS.readFiles[path] = 1;
            Module['printErr']('read file: ' + path);
          }
        }
        return stream;
      },close:function (stream) {
        try {
          if (stream.stream_ops.close) {
            stream.stream_ops.close(stream);
          }
        } catch (e) {
          throw e;
        } finally {
          FS.closeStream(stream.fd);
        }
      },llseek:function (stream, offset, whence) {
        if (!stream.seekable || !stream.stream_ops.llseek) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        return stream.stream_ops.llseek(stream, offset, whence);
      },read:function (stream, buffer, offset, length, position) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.read) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var seeking = true;
        if (typeof position === 'undefined') {
          position = stream.position;
          seeking = false;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        var bytesRead = stream.stream_ops.read(stream, buffer, offset, length, position);
        if (!seeking) stream.position += bytesRead;
        return bytesRead;
      },write:function (stream, buffer, offset, length, position, canOwn) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.write) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var seeking = true;
        if (typeof position === 'undefined') {
          position = stream.position;
          seeking = false;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        if (stream.flags & 1024) {
          // seek to the end before writing in append mode
          FS.llseek(stream, 0, 2);
        }
        var bytesWritten = stream.stream_ops.write(stream, buffer, offset, length, position, canOwn);
        if (!seeking) stream.position += bytesWritten;
        return bytesWritten;
      },allocate:function (stream, offset, length) {
        if (offset < 0 || length <= 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (!FS.isFile(stream.node.mode) && !FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        if (!stream.stream_ops.allocate) {
          throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
        }
        stream.stream_ops.allocate(stream, offset, length);
      },mmap:function (stream, buffer, offset, length, position, prot, flags) {
        // TODO if PROT is PROT_WRITE, make sure we have write access
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EACCES);
        }
        if (!stream.stream_ops.mmap) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        return stream.stream_ops.mmap(stream, buffer, offset, length, position, prot, flags);
      },ioctl:function (stream, cmd, arg) {
        if (!stream.stream_ops.ioctl) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTTY);
        }
        return stream.stream_ops.ioctl(stream, cmd, arg);
      },readFile:function (path, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'r';
        opts.encoding = opts.encoding || 'binary';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var ret;
        var stream = FS.open(path, opts.flags);
        var stat = FS.stat(path);
        var length = stat.size;
        var buf = new Uint8Array(length);
        FS.read(stream, buf, 0, length, 0);
        if (opts.encoding === 'utf8') {
          ret = '';
          var utf8 = new Runtime.UTF8Processor();
          for (var i = 0; i < length; i++) {
            ret += utf8.processCChar(buf[i]);
          }
        } else if (opts.encoding === 'binary') {
          ret = buf;
        }
        FS.close(stream);
        return ret;
      },writeFile:function (path, data, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'w';
        opts.encoding = opts.encoding || 'utf8';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var stream = FS.open(path, opts.flags, opts.mode);
        if (opts.encoding === 'utf8') {
          var utf8 = new Runtime.UTF8Processor();
          var buf = new Uint8Array(utf8.processJSString(data));
          FS.write(stream, buf, 0, buf.length, 0, opts.canOwn);
        } else if (opts.encoding === 'binary') {
          FS.write(stream, data, 0, data.length, 0, opts.canOwn);
        }
        FS.close(stream);
      },cwd:function () {
        return FS.currentPath;
      },chdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        if (!FS.isDir(lookup.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        var err = FS.nodePermissions(lookup.node, 'x');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        FS.currentPath = lookup.path;
      },createDefaultDirectories:function () {
        FS.mkdir('/tmp');
      },createDefaultDevices:function () {
        // create /dev
        FS.mkdir('/dev');
        // setup /dev/null
        FS.registerDevice(FS.makedev(1, 3), {
          read: function() { return 0; },
          write: function() { return 0; }
        });
        FS.mkdev('/dev/null', FS.makedev(1, 3));
        // setup /dev/tty and /dev/tty1
        // stderr needs to print output using Module['printErr']
        // so we register a second tty just for it.
        TTY.register(FS.makedev(5, 0), TTY.default_tty_ops);
        TTY.register(FS.makedev(6, 0), TTY.default_tty1_ops);
        FS.mkdev('/dev/tty', FS.makedev(5, 0));
        FS.mkdev('/dev/tty1', FS.makedev(6, 0));
        // we're not going to emulate the actual shm device,
        // just create the tmp dirs that reside in it commonly
        FS.mkdir('/dev/shm');
        FS.mkdir('/dev/shm/tmp');
      },createStandardStreams:function () {
        // TODO deprecate the old functionality of a single
        // input / output callback and that utilizes FS.createDevice
        // and instead require a unique set of stream ops
  
        // by default, we symlink the standard streams to the
        // default tty devices. however, if the standard streams
        // have been overwritten we create a unique device for
        // them instead.
        if (Module['stdin']) {
          FS.createDevice('/dev', 'stdin', Module['stdin']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdin');
        }
        if (Module['stdout']) {
          FS.createDevice('/dev', 'stdout', null, Module['stdout']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdout');
        }
        if (Module['stderr']) {
          FS.createDevice('/dev', 'stderr', null, Module['stderr']);
        } else {
          FS.symlink('/dev/tty1', '/dev/stderr');
        }
  
        // open default streams for the stdin, stdout and stderr devices
        var stdin = FS.open('/dev/stdin', 'r');
        HEAP32[((_stdin)>>2)]=FS.getPtrForStream(stdin);
        assert(stdin.fd === 0, 'invalid handle for stdin (' + stdin.fd + ')');
  
        var stdout = FS.open('/dev/stdout', 'w');
        HEAP32[((_stdout)>>2)]=FS.getPtrForStream(stdout);
        assert(stdout.fd === 1, 'invalid handle for stdout (' + stdout.fd + ')');
  
        var stderr = FS.open('/dev/stderr', 'w');
        HEAP32[((_stderr)>>2)]=FS.getPtrForStream(stderr);
        assert(stderr.fd === 2, 'invalid handle for stderr (' + stderr.fd + ')');
      },ensureErrnoError:function () {
        if (FS.ErrnoError) return;
        FS.ErrnoError = function ErrnoError(errno) {
          this.errno = errno;
          for (var key in ERRNO_CODES) {
            if (ERRNO_CODES[key] === errno) {
              this.code = key;
              break;
            }
          }
          this.message = ERRNO_MESSAGES[errno];
          if (this.stack) this.stack = demangleAll(this.stack);
        };
        FS.ErrnoError.prototype = new Error();
        FS.ErrnoError.prototype.constructor = FS.ErrnoError;
        // Some errors may happen quite a bit, to avoid overhead we reuse them (and suffer a lack of stack info)
        [ERRNO_CODES.ENOENT].forEach(function(code) {
          FS.genericErrors[code] = new FS.ErrnoError(code);
          FS.genericErrors[code].stack = '<generic error, no stack>';
        });
      },staticInit:function () {
        FS.ensureErrnoError();
  
        FS.nameTable = new Array(4096);
  
        FS.mount(MEMFS, {}, '/');
  
        FS.createDefaultDirectories();
        FS.createDefaultDevices();
      },init:function (input, output, error) {
        assert(!FS.init.initialized, 'FS.init was previously called. If you want to initialize later with custom parameters, remove any earlier calls (note that one is automatically added to the generated code)');
        FS.init.initialized = true;
  
        FS.ensureErrnoError();
  
        // Allow Module.stdin etc. to provide defaults, if none explicitly passed to us here
        Module['stdin'] = input || Module['stdin'];
        Module['stdout'] = output || Module['stdout'];
        Module['stderr'] = error || Module['stderr'];
  
        FS.createStandardStreams();
      },quit:function () {
        FS.init.initialized = false;
        for (var i = 0; i < FS.streams.length; i++) {
          var stream = FS.streams[i];
          if (!stream) {
            continue;
          }
          FS.close(stream);
        }
      },getMode:function (canRead, canWrite) {
        var mode = 0;
        if (canRead) mode |= 292 | 73;
        if (canWrite) mode |= 146;
        return mode;
      },joinPath:function (parts, forceRelative) {
        var path = PATH.join.apply(null, parts);
        if (forceRelative && path[0] == '/') path = path.substr(1);
        return path;
      },absolutePath:function (relative, base) {
        return PATH.resolve(base, relative);
      },standardizePath:function (path) {
        return PATH.normalize(path);
      },findObject:function (path, dontResolveLastLink) {
        var ret = FS.analyzePath(path, dontResolveLastLink);
        if (ret.exists) {
          return ret.object;
        } else {
          ___setErrNo(ret.error);
          return null;
        }
      },analyzePath:function (path, dontResolveLastLink) {
        // operate from within the context of the symlink's target
        try {
          var lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          path = lookup.path;
        } catch (e) {
        }
        var ret = {
          isRoot: false, exists: false, error: 0, name: null, path: null, object: null,
          parentExists: false, parentPath: null, parentObject: null
        };
        try {
          var lookup = FS.lookupPath(path, { parent: true });
          ret.parentExists = true;
          ret.parentPath = lookup.path;
          ret.parentObject = lookup.node;
          ret.name = PATH.basename(path);
          lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          ret.exists = true;
          ret.path = lookup.path;
          ret.object = lookup.node;
          ret.name = lookup.node.name;
          ret.isRoot = lookup.path === '/';
        } catch (e) {
          ret.error = e.errno;
        };
        return ret;
      },createFolder:function (parent, name, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.mkdir(path, mode);
      },createPath:function (parent, path, canRead, canWrite) {
        parent = typeof parent === 'string' ? parent : FS.getPath(parent);
        var parts = path.split('/').reverse();
        while (parts.length) {
          var part = parts.pop();
          if (!part) continue;
          var current = PATH.join2(parent, part);
          try {
            FS.mkdir(current);
          } catch (e) {
            // ignore EEXIST
          }
          parent = current;
        }
        return current;
      },createFile:function (parent, name, properties, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.create(path, mode);
      },createDataFile:function (parent, name, data, canRead, canWrite, canOwn) {
        var path = name ? PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name) : parent;
        var mode = FS.getMode(canRead, canWrite);
        var node = FS.create(path, mode);
        if (data) {
          if (typeof data === 'string') {
            var arr = new Array(data.length);
            for (var i = 0, len = data.length; i < len; ++i) arr[i] = data.charCodeAt(i);
            data = arr;
          }
          // make sure we can write to the file
          FS.chmod(node, mode | 146);
          var stream = FS.open(node, 'w');
          FS.write(stream, data, 0, data.length, 0, canOwn);
          FS.close(stream);
          FS.chmod(node, mode);
        }
        return node;
      },createDevice:function (parent, name, input, output) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(!!input, !!output);
        if (!FS.createDevice.major) FS.createDevice.major = 64;
        var dev = FS.makedev(FS.createDevice.major++, 0);
        // Create a fake device that a set of stream ops to emulate
        // the old behavior.
        FS.registerDevice(dev, {
          open: function(stream) {
            stream.seekable = false;
          },
          close: function(stream) {
            // flush any pending line data
            if (output && output.buffer && output.buffer.length) {
              output(10);
            }
          },
          read: function(stream, buffer, offset, length, pos /* ignored */) {
            var bytesRead = 0;
            for (var i = 0; i < length; i++) {
              var result;
              try {
                result = input();
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
              if (result === undefined && bytesRead === 0) {
                throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
              }
              if (result === null || result === undefined) break;
              bytesRead++;
              buffer[offset+i] = result;
            }
            if (bytesRead) {
              stream.node.timestamp = Date.now();
            }
            return bytesRead;
          },
          write: function(stream, buffer, offset, length, pos) {
            for (var i = 0; i < length; i++) {
              try {
                output(buffer[offset+i]);
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
            }
            if (length) {
              stream.node.timestamp = Date.now();
            }
            return i;
          }
        });
        return FS.mkdev(path, mode, dev);
      },createLink:function (parent, name, target, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        return FS.symlink(target, path);
      },forceLoadFile:function (obj) {
        if (obj.isDevice || obj.isFolder || obj.link || obj.contents) return true;
        var success = true;
        if (typeof XMLHttpRequest !== 'undefined') {
          throw new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.");
        } else if (Module['read']) {
          // Command-line.
          try {
            // WARNING: Can't read binary files in V8's d8 or tracemonkey's js, as
            //          read() will try to parse UTF8.
            obj.contents = intArrayFromString(Module['read'](obj.url), true);
          } catch (e) {
            success = false;
          }
        } else {
          throw new Error('Cannot load without read() or XMLHttpRequest.');
        }
        if (!success) ___setErrNo(ERRNO_CODES.EIO);
        return success;
      },createLazyFile:function (parent, name, url, canRead, canWrite) {
        // Lazy chunked Uint8Array (implements get and length from Uint8Array). Actual getting is abstracted away for eventual reuse.
        function LazyUint8Array() {
          this.lengthKnown = false;
          this.chunks = []; // Loaded chunks. Index is the chunk number
        }
        LazyUint8Array.prototype.get = function LazyUint8Array_get(idx) {
          if (idx > this.length-1 || idx < 0) {
            return undefined;
          }
          var chunkOffset = idx % this.chunkSize;
          var chunkNum = Math.floor(idx / this.chunkSize);
          return this.getter(chunkNum)[chunkOffset];
        }
        LazyUint8Array.prototype.setDataGetter = function LazyUint8Array_setDataGetter(getter) {
          this.getter = getter;
        }
        LazyUint8Array.prototype.cacheLength = function LazyUint8Array_cacheLength() {
            // Find length
            var xhr = new XMLHttpRequest();
            xhr.open('HEAD', url, false);
            xhr.send(null);
            if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
            var datalength = Number(xhr.getResponseHeader("Content-length"));
            var header;
            var hasByteServing = (header = xhr.getResponseHeader("Accept-Ranges")) && header === "bytes";
            var chunkSize = 1024*1024; // Chunk size in bytes
  
            if (!hasByteServing) chunkSize = datalength;
  
            // Function to get a range from the remote URL.
            var doXHR = (function(from, to) {
              if (from > to) throw new Error("invalid range (" + from + ", " + to + ") or no bytes requested!");
              if (to > datalength-1) throw new Error("only " + datalength + " bytes available! programmer error!");
  
              // TODO: Use mozResponseArrayBuffer, responseStream, etc. if available.
              var xhr = new XMLHttpRequest();
              xhr.open('GET', url, false);
              if (datalength !== chunkSize) xhr.setRequestHeader("Range", "bytes=" + from + "-" + to);
  
              // Some hints to the browser that we want binary data.
              if (typeof Uint8Array != 'undefined') xhr.responseType = 'arraybuffer';
              if (xhr.overrideMimeType) {
                xhr.overrideMimeType('text/plain; charset=x-user-defined');
              }
  
              xhr.send(null);
              if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
              if (xhr.response !== undefined) {
                return new Uint8Array(xhr.response || []);
              } else {
                return intArrayFromString(xhr.responseText || '', true);
              }
            });
            var lazyArray = this;
            lazyArray.setDataGetter(function(chunkNum) {
              var start = chunkNum * chunkSize;
              var end = (chunkNum+1) * chunkSize - 1; // including this byte
              end = Math.min(end, datalength-1); // if datalength-1 is selected, this is the last block
              if (typeof(lazyArray.chunks[chunkNum]) === "undefined") {
                lazyArray.chunks[chunkNum] = doXHR(start, end);
              }
              if (typeof(lazyArray.chunks[chunkNum]) === "undefined") throw new Error("doXHR failed!");
              return lazyArray.chunks[chunkNum];
            });
  
            this._length = datalength;
            this._chunkSize = chunkSize;
            this.lengthKnown = true;
        }
        if (typeof XMLHttpRequest !== 'undefined') {
          if (!ENVIRONMENT_IS_WORKER) throw 'Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc';
          var lazyArray = new LazyUint8Array();
          Object.defineProperty(lazyArray, "length", {
              get: function() {
                  if(!this.lengthKnown) {
                      this.cacheLength();
                  }
                  return this._length;
              }
          });
          Object.defineProperty(lazyArray, "chunkSize", {
              get: function() {
                  if(!this.lengthKnown) {
                      this.cacheLength();
                  }
                  return this._chunkSize;
              }
          });
  
          var properties = { isDevice: false, contents: lazyArray };
        } else {
          var properties = { isDevice: false, url: url };
        }
  
        var node = FS.createFile(parent, name, properties, canRead, canWrite);
        // This is a total hack, but I want to get this lazy file code out of the
        // core of MEMFS. If we want to keep this lazy file concept I feel it should
        // be its own thin LAZYFS proxying calls to MEMFS.
        if (properties.contents) {
          node.contents = properties.contents;
        } else if (properties.url) {
          node.contents = null;
          node.url = properties.url;
        }
        // override each stream op with one that tries to force load the lazy file first
        var stream_ops = {};
        var keys = Object.keys(node.stream_ops);
        keys.forEach(function(key) {
          var fn = node.stream_ops[key];
          stream_ops[key] = function forceLoadLazyFile() {
            if (!FS.forceLoadFile(node)) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            return fn.apply(null, arguments);
          };
        });
        // use a custom read function
        stream_ops.read = function stream_ops_read(stream, buffer, offset, length, position) {
          if (!FS.forceLoadFile(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EIO);
          }
          var contents = stream.node.contents;
          if (position >= contents.length)
            return 0;
          var size = Math.min(contents.length - position, length);
          assert(size >= 0);
          if (contents.slice) { // normal array
            for (var i = 0; i < size; i++) {
              buffer[offset + i] = contents[position + i];
            }
          } else {
            for (var i = 0; i < size; i++) { // LazyUint8Array from sync binary XHR
              buffer[offset + i] = contents.get(position + i);
            }
          }
          return size;
        };
        node.stream_ops = stream_ops;
        return node;
      },createPreloadedFile:function (parent, name, url, canRead, canWrite, onload, onerror, dontCreateFile, canOwn) {
        Browser.init();
        // TODO we should allow people to just pass in a complete filename instead
        // of parent and name being that we just join them anyways
        var fullname = name ? PATH.resolve(PATH.join2(parent, name)) : parent;
        function processData(byteArray) {
          function finish(byteArray) {
            if (!dontCreateFile) {
              FS.createDataFile(parent, name, byteArray, canRead, canWrite, canOwn);
            }
            if (onload) onload();
            removeRunDependency('cp ' + fullname);
          }
          var handled = false;
          Module['preloadPlugins'].forEach(function(plugin) {
            if (handled) return;
            if (plugin['canHandle'](fullname)) {
              plugin['handle'](byteArray, fullname, finish, function() {
                if (onerror) onerror();
                removeRunDependency('cp ' + fullname);
              });
              handled = true;
            }
          });
          if (!handled) finish(byteArray);
        }
        addRunDependency('cp ' + fullname);
        if (typeof url == 'string') {
          Browser.asyncLoad(url, function(byteArray) {
            processData(byteArray);
          }, onerror);
        } else {
          processData(url);
        }
      },indexedDB:function () {
        return window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
      },DB_NAME:function () {
        return 'EM_FS_' + window.location.pathname;
      },DB_VERSION:20,DB_STORE_NAME:"FILE_DATA",saveFilesToDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = function openRequest_onupgradeneeded() {
          console.log('creating db');
          var db = openRequest.result;
          db.createObjectStore(FS.DB_STORE_NAME);
        };
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          var transaction = db.transaction([FS.DB_STORE_NAME], 'readwrite');
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var putRequest = files.put(FS.analyzePath(path).object.contents, path);
            putRequest.onsuccess = function putRequest_onsuccess() { ok++; if (ok + fail == total) finish() };
            putRequest.onerror = function putRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      },loadFilesFromDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = onerror; // no database to load from
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          try {
            var transaction = db.transaction([FS.DB_STORE_NAME], 'readonly');
          } catch(e) {
            onerror(e);
            return;
          }
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var getRequest = files.get(path);
            getRequest.onsuccess = function getRequest_onsuccess() {
              if (FS.analyzePath(path).exists) {
                FS.unlink(path);
              }
              FS.createDataFile(PATH.dirname(path), PATH.basename(path), getRequest.result, true, true, true);
              ok++;
              if (ok + fail == total) finish();
            };
            getRequest.onerror = function getRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      }};function _close(fildes) {
      // int close(int fildes);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/close.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      try {
        FS.close(stream);
        return 0;
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }
  
  function _fsync(fildes) {
      // int fsync(int fildes);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fsync.html
      var stream = FS.getStream(fildes);
      if (stream) {
        // We write directly to the file system, so there's nothing to do here.
        return 0;
      } else {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
    }
  
  function _fileno(stream) {
      // int fileno(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fileno.html
      stream = FS.getStreamFromPtr(stream);
      if (!stream) return -1;
      return stream.fd;
    }function _fclose(stream) {
      // int fclose(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fclose.html
      var fd = _fileno(stream);
      _fsync(fd);
      return _close(fd);
    }

  
  function _lseek(fildes, offset, whence) {
      // off_t lseek(int fildes, off_t offset, int whence);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/lseek.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      try {
        return FS.llseek(stream, offset, whence);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _fseek(stream, offset, whence) {
      // int fseek(FILE *stream, long offset, int whence);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fseek.html
      var fd = _fileno(stream);
      var ret = _lseek(fd, offset, whence);
      if (ret == -1) {
        return -1;
      }
      stream = FS.getStreamFromPtr(stream);
      stream.eof = false;
      return 0;
    }

  function _ftell(stream) {
      // long ftell(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/ftell.html
      stream = FS.getStreamFromPtr(stream);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      if (FS.isChrdev(stream.node.mode)) {
        ___setErrNo(ERRNO_CODES.ESPIPE);
        return -1;
      } else {
        return stream.position;
      }
    }

  
  
  function _isspace(chr) {
      return (chr == 32) || (chr >= 9 && chr <= 13);
    }function __parseInt(str, endptr, base, min, max, bits, unsign) {
      // Skip space.
      while (_isspace(HEAP8[(str)])) str++;
  
      // Check for a plus/minus sign.
      var multiplier = 1;
      if (HEAP8[(str)] == 45) {
        multiplier = -1;
        str++;
      } else if (HEAP8[(str)] == 43) {
        str++;
      }
  
      // Find base.
      var finalBase = base;
      if (!finalBase) {
        if (HEAP8[(str)] == 48) {
          if (HEAP8[((str+1)|0)] == 120 ||
              HEAP8[((str+1)|0)] == 88) {
            finalBase = 16;
            str += 2;
          } else {
            finalBase = 8;
            str++;
          }
        }
      } else if (finalBase==16) {
        if (HEAP8[(str)] == 48) {
          if (HEAP8[((str+1)|0)] == 120 ||
              HEAP8[((str+1)|0)] == 88) {
            str += 2;
          }
        }
      }
      if (!finalBase) finalBase = 10;
  
      // Get digits.
      var chr;
      var ret = 0;
      while ((chr = HEAP8[(str)]) != 0) {
        var digit = parseInt(String.fromCharCode(chr), finalBase);
        if (isNaN(digit)) {
          break;
        } else {
          ret = ret * finalBase + digit;
          str++;
        }
      }
  
      // Apply sign.
      ret *= multiplier;
  
      // Set end pointer.
      if (endptr) {
        HEAP32[((endptr)>>2)]=str;
      }
  
      // Unsign if needed.
      if (unsign) {
        if (Math.abs(ret) > max) {
          ret = max;
          ___setErrNo(ERRNO_CODES.ERANGE);
        } else {
          ret = unSign(ret, bits);
        }
      }
  
      // Validate range.
      if (ret > max || ret < min) {
        ret = ret > max ? max : min;
        ___setErrNo(ERRNO_CODES.ERANGE);
      }
  
      if (bits == 64) {
        return tempRet0 = (tempDouble=ret,Math_abs(tempDouble) >= 1 ? (tempDouble > 0 ? Math_min(Math_floor((tempDouble)/4294967296), 4294967295)>>>0 : (~~(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296)))>>>0) : 0),ret>>>0;
      }
  
      return ret;
    }function _strtol(str, endptr, base) {
      return __parseInt(str, endptr, base, -2147483648, 2147483647, 32);  // LONG_MIN, LONG_MAX.
    }

  function ___assert_fail(condition, filename, line, func) {
      ABORT = true;
      throw 'Assertion failed: ' + Pointer_stringify(condition) + ', at: ' + [filename ? Pointer_stringify(filename) : 'unknown filename', line, func ? Pointer_stringify(func) : 'unknown function'] + ' at ' + stackTrace();
    }

  
  
  function _emscripten_memcpy_big(dest, src, num) {
      HEAPU8.set(HEAPU8.subarray(src, src+num), dest);
      return dest;
    }function _memcpy(dest, src, num) {
      dest = dest|0; src = src|0; num = num|0;
      var ret = 0;
      if ((num|0) >= 4096) return _emscripten_memcpy_big(dest|0, src|0, num|0)|0;
      ret = dest|0;
      if ((dest&3) == (src&3)) {
        while (dest & 3) {
          if ((num|0) == 0) return ret|0;
          HEAP8[(dest)]=HEAP8[(src)];
          dest = (dest+1)|0;
          src = (src+1)|0;
          num = (num-1)|0;
        }
        while ((num|0) >= 4) {
          HEAP32[((dest)>>2)]=HEAP32[((src)>>2)];
          dest = (dest+4)|0;
          src = (src+4)|0;
          num = (num-4)|0;
        }
      }
      while ((num|0) > 0) {
        HEAP8[(dest)]=HEAP8[(src)];
        dest = (dest+1)|0;
        src = (src+1)|0;
        num = (num-1)|0;
      }
      return ret|0;
    }var _llvm_memcpy_p0i8_p0i8_i32=_memcpy;

  var _abs=Math_abs;

  
  function _memset(ptr, value, num) {
      ptr = ptr|0; value = value|0; num = num|0;
      var stop = 0, value4 = 0, stop4 = 0, unaligned = 0;
      stop = (ptr + num)|0;
      if ((num|0) >= 20) {
        // This is unaligned, but quite large, so work hard to get to aligned settings
        value = value & 0xff;
        unaligned = ptr & 3;
        value4 = value | (value << 8) | (value << 16) | (value << 24);
        stop4 = stop & ~3;
        if (unaligned) {
          unaligned = (ptr + 4 - unaligned)|0;
          while ((ptr|0) < (unaligned|0)) { // no need to check for stop, since we have large num
            HEAP8[(ptr)]=value;
            ptr = (ptr+1)|0;
          }
        }
        while ((ptr|0) < (stop4|0)) {
          HEAP32[((ptr)>>2)]=value4;
          ptr = (ptr+4)|0;
        }
      }
      while ((ptr|0) < (stop|0)) {
        HEAP8[(ptr)]=value;
        ptr = (ptr+1)|0;
      }
      return (ptr-num)|0;
    }var _llvm_memset_p0i8_i32=_memset;

  var _llvm_pow_f64=Math_pow;

  function _feof(stream) {
      // int feof(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/feof.html
      stream = FS.getStreamFromPtr(stream);
      return Number(stream && stream.eof);
    }

  
  
  
  
  function _mkport() { throw 'TODO' }var SOCKFS={mount:function (mount) {
        return FS.createNode(null, '/', 16384 | 511 /* 0777 */, 0);
      },createSocket:function (family, type, protocol) {
        var streaming = type == 1;
        if (protocol) {
          assert(streaming == (protocol == 6)); // if SOCK_STREAM, must be tcp
        }
  
        // create our internal socket structure
        var sock = {
          family: family,
          type: type,
          protocol: protocol,
          server: null,
          peers: {},
          pending: [],
          recv_queue: [],
          sock_ops: SOCKFS.websocket_sock_ops
        };
  
        // create the filesystem node to store the socket structure
        var name = SOCKFS.nextname();
        var node = FS.createNode(SOCKFS.root, name, 49152, 0);
        node.sock = sock;
  
        // and the wrapping stream that enables library functions such
        // as read and write to indirectly interact with the socket
        var stream = FS.createStream({
          path: name,
          node: node,
          flags: FS.modeStringToFlags('r+'),
          seekable: false,
          stream_ops: SOCKFS.stream_ops
        });
  
        // map the new stream to the socket structure (sockets have a 1:1
        // relationship with a stream)
        sock.stream = stream;
  
        return sock;
      },getSocket:function (fd) {
        var stream = FS.getStream(fd);
        if (!stream || !FS.isSocket(stream.node.mode)) {
          return null;
        }
        return stream.node.sock;
      },stream_ops:{poll:function (stream) {
          var sock = stream.node.sock;
          return sock.sock_ops.poll(sock);
        },ioctl:function (stream, request, varargs) {
          var sock = stream.node.sock;
          return sock.sock_ops.ioctl(sock, request, varargs);
        },read:function (stream, buffer, offset, length, position /* ignored */) {
          var sock = stream.node.sock;
          var msg = sock.sock_ops.recvmsg(sock, length);
          if (!msg) {
            // socket is closed
            return 0;
          }
          buffer.set(msg.buffer, offset);
          return msg.buffer.length;
        },write:function (stream, buffer, offset, length, position /* ignored */) {
          var sock = stream.node.sock;
          return sock.sock_ops.sendmsg(sock, buffer, offset, length);
        },close:function (stream) {
          var sock = stream.node.sock;
          sock.sock_ops.close(sock);
        }},nextname:function () {
        if (!SOCKFS.nextname.current) {
          SOCKFS.nextname.current = 0;
        }
        return 'socket[' + (SOCKFS.nextname.current++) + ']';
      },websocket_sock_ops:{createPeer:function (sock, addr, port) {
          var ws;
  
          if (typeof addr === 'object') {
            ws = addr;
            addr = null;
            port = null;
          }
  
          if (ws) {
            // for sockets that've already connected (e.g. we're the server)
            // we can inspect the _socket property for the address
            if (ws._socket) {
              addr = ws._socket.remoteAddress;
              port = ws._socket.remotePort;
            }
            // if we're just now initializing a connection to the remote,
            // inspect the url property
            else {
              var result = /ws[s]?:\/\/([^:]+):(\d+)/.exec(ws.url);
              if (!result) {
                throw new Error('WebSocket URL must be in the format ws(s)://address:port');
              }
              addr = result[1];
              port = parseInt(result[2], 10);
            }
          } else {
            // create the actual websocket object and connect
            try {
              // runtimeConfig gets set to true if WebSocket runtime configuration is available.
              var runtimeConfig = (Module['websocket'] && ('object' === typeof Module['websocket']));
  
              // The default value is 'ws://' the replace is needed because the compiler replaces "//" comments with '#'
              // comments without checking context, so we'd end up with ws:#, the replace swaps the "#" for "//" again.
              var url = 'ws:#'.replace('#', '//');
  
              if (runtimeConfig) {
                if ('string' === typeof Module['websocket']['url']) {
                  url = Module['websocket']['url']; // Fetch runtime WebSocket URL config.
                }
              }
  
              if (url === 'ws://' || url === 'wss://') { // Is the supplied URL config just a prefix, if so complete it.
                url = url + addr + ':' + port;
              }
  
              // Make the WebSocket subprotocol (Sec-WebSocket-Protocol) default to binary if no configuration is set.
              var subProtocols = 'binary'; // The default value is 'binary'
  
              if (runtimeConfig) {
                if ('string' === typeof Module['websocket']['subprotocol']) {
                  subProtocols = Module['websocket']['subprotocol']; // Fetch runtime WebSocket subprotocol config.
                }
              }
  
              // The regex trims the string (removes spaces at the beginning and end, then splits the string by
              // <any space>,<any space> into an Array. Whitespace removal is important for Websockify and ws.
              subProtocols = subProtocols.replace(/^ +| +$/g,"").split(/ *, */);
  
              // The node ws library API for specifying optional subprotocol is slightly different than the browser's.
              var opts = ENVIRONMENT_IS_NODE ? {'protocol': subProtocols.toString()} : subProtocols;
  
              // If node we use the ws library.
              var WebSocket = ENVIRONMENT_IS_NODE ? require('ws') : window['WebSocket'];
              ws = new WebSocket(url, opts);
              ws.binaryType = 'arraybuffer';
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EHOSTUNREACH);
            }
          }
  
  
          var peer = {
            addr: addr,
            port: port,
            socket: ws,
            dgram_send_queue: []
          };
  
          SOCKFS.websocket_sock_ops.addPeer(sock, peer);
          SOCKFS.websocket_sock_ops.handlePeerEvents(sock, peer);
  
          // if this is a bound dgram socket, send the port number first to allow
          // us to override the ephemeral port reported to us by remotePort on the
          // remote end.
          if (sock.type === 2 && typeof sock.sport !== 'undefined') {
            peer.dgram_send_queue.push(new Uint8Array([
                255, 255, 255, 255,
                'p'.charCodeAt(0), 'o'.charCodeAt(0), 'r'.charCodeAt(0), 't'.charCodeAt(0),
                ((sock.sport & 0xff00) >> 8) , (sock.sport & 0xff)
            ]));
          }
  
          return peer;
        },getPeer:function (sock, addr, port) {
          return sock.peers[addr + ':' + port];
        },addPeer:function (sock, peer) {
          sock.peers[peer.addr + ':' + peer.port] = peer;
        },removePeer:function (sock, peer) {
          delete sock.peers[peer.addr + ':' + peer.port];
        },handlePeerEvents:function (sock, peer) {
          var first = true;
  
          var handleOpen = function () {
            try {
              var queued = peer.dgram_send_queue.shift();
              while (queued) {
                peer.socket.send(queued);
                queued = peer.dgram_send_queue.shift();
              }
            } catch (e) {
              // not much we can do here in the way of proper error handling as we've already
              // lied and said this data was sent. shut it down.
              peer.socket.close();
            }
          };
  
          function handleMessage(data) {
            assert(typeof data !== 'string' && data.byteLength !== undefined);  // must receive an ArrayBuffer
            data = new Uint8Array(data);  // make a typed array view on the array buffer
  
  
            // if this is the port message, override the peer's port with it
            var wasfirst = first;
            first = false;
            if (wasfirst &&
                data.length === 10 &&
                data[0] === 255 && data[1] === 255 && data[2] === 255 && data[3] === 255 &&
                data[4] === 'p'.charCodeAt(0) && data[5] === 'o'.charCodeAt(0) && data[6] === 'r'.charCodeAt(0) && data[7] === 't'.charCodeAt(0)) {
              // update the peer's port and it's key in the peer map
              var newport = ((data[8] << 8) | data[9]);
              SOCKFS.websocket_sock_ops.removePeer(sock, peer);
              peer.port = newport;
              SOCKFS.websocket_sock_ops.addPeer(sock, peer);
              return;
            }
  
            sock.recv_queue.push({ addr: peer.addr, port: peer.port, data: data });
          };
  
          if (ENVIRONMENT_IS_NODE) {
            peer.socket.on('open', handleOpen);
            peer.socket.on('message', function(data, flags) {
              if (!flags.binary) {
                return;
              }
              handleMessage((new Uint8Array(data)).buffer);  // copy from node Buffer -> ArrayBuffer
            });
            peer.socket.on('error', function() {
              // don't throw
            });
          } else {
            peer.socket.onopen = handleOpen;
            peer.socket.onmessage = function peer_socket_onmessage(event) {
              handleMessage(event.data);
            };
          }
        },poll:function (sock) {
          if (sock.type === 1 && sock.server) {
            // listen sockets should only say they're available for reading
            // if there are pending clients.
            return sock.pending.length ? (64 | 1) : 0;
          }
  
          var mask = 0;
          var dest = sock.type === 1 ?  // we only care about the socket state for connection-based sockets
            SOCKFS.websocket_sock_ops.getPeer(sock, sock.daddr, sock.dport) :
            null;
  
          if (sock.recv_queue.length ||
              !dest ||  // connection-less sockets are always ready to read
              (dest && dest.socket.readyState === dest.socket.CLOSING) ||
              (dest && dest.socket.readyState === dest.socket.CLOSED)) {  // let recv return 0 once closed
            mask |= (64 | 1);
          }
  
          if (!dest ||  // connection-less sockets are always ready to write
              (dest && dest.socket.readyState === dest.socket.OPEN)) {
            mask |= 4;
          }
  
          if ((dest && dest.socket.readyState === dest.socket.CLOSING) ||
              (dest && dest.socket.readyState === dest.socket.CLOSED)) {
            mask |= 16;
          }
  
          return mask;
        },ioctl:function (sock, request, arg) {
          switch (request) {
            case 21531:
              var bytes = 0;
              if (sock.recv_queue.length) {
                bytes = sock.recv_queue[0].data.length;
              }
              HEAP32[((arg)>>2)]=bytes;
              return 0;
            default:
              return ERRNO_CODES.EINVAL;
          }
        },close:function (sock) {
          // if we've spawned a listen server, close it
          if (sock.server) {
            try {
              sock.server.close();
            } catch (e) {
            }
            sock.server = null;
          }
          // close any peer connections
          var peers = Object.keys(sock.peers);
          for (var i = 0; i < peers.length; i++) {
            var peer = sock.peers[peers[i]];
            try {
              peer.socket.close();
            } catch (e) {
            }
            SOCKFS.websocket_sock_ops.removePeer(sock, peer);
          }
          return 0;
        },bind:function (sock, addr, port) {
          if (typeof sock.saddr !== 'undefined' || typeof sock.sport !== 'undefined') {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);  // already bound
          }
          sock.saddr = addr;
          sock.sport = port || _mkport();
          // in order to emulate dgram sockets, we need to launch a listen server when
          // binding on a connection-less socket
          // note: this is only required on the server side
          if (sock.type === 2) {
            // close the existing server if it exists
            if (sock.server) {
              sock.server.close();
              sock.server = null;
            }
            // swallow error operation not supported error that occurs when binding in the
            // browser where this isn't supported
            try {
              sock.sock_ops.listen(sock, 0);
            } catch (e) {
              if (!(e instanceof FS.ErrnoError)) throw e;
              if (e.errno !== ERRNO_CODES.EOPNOTSUPP) throw e;
            }
          }
        },connect:function (sock, addr, port) {
          if (sock.server) {
            throw new FS.ErrnoError(ERRNO_CODS.EOPNOTSUPP);
          }
  
          // TODO autobind
          // if (!sock.addr && sock.type == 2) {
          // }
  
          // early out if we're already connected / in the middle of connecting
          if (typeof sock.daddr !== 'undefined' && typeof sock.dport !== 'undefined') {
            var dest = SOCKFS.websocket_sock_ops.getPeer(sock, sock.daddr, sock.dport);
            if (dest) {
              if (dest.socket.readyState === dest.socket.CONNECTING) {
                throw new FS.ErrnoError(ERRNO_CODES.EALREADY);
              } else {
                throw new FS.ErrnoError(ERRNO_CODES.EISCONN);
              }
            }
          }
  
          // add the socket to our peer list and set our
          // destination address / port to match
          var peer = SOCKFS.websocket_sock_ops.createPeer(sock, addr, port);
          sock.daddr = peer.addr;
          sock.dport = peer.port;
  
          // always "fail" in non-blocking mode
          throw new FS.ErrnoError(ERRNO_CODES.EINPROGRESS);
        },listen:function (sock, backlog) {
          if (!ENVIRONMENT_IS_NODE) {
            throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
          }
          if (sock.server) {
             throw new FS.ErrnoError(ERRNO_CODES.EINVAL);  // already listening
          }
          var WebSocketServer = require('ws').Server;
          var host = sock.saddr;
          sock.server = new WebSocketServer({
            host: host,
            port: sock.sport
            // TODO support backlog
          });
  
          sock.server.on('connection', function(ws) {
            if (sock.type === 1) {
              var newsock = SOCKFS.createSocket(sock.family, sock.type, sock.protocol);
  
              // create a peer on the new socket
              var peer = SOCKFS.websocket_sock_ops.createPeer(newsock, ws);
              newsock.daddr = peer.addr;
              newsock.dport = peer.port;
  
              // push to queue for accept to pick up
              sock.pending.push(newsock);
            } else {
              // create a peer on the listen socket so calling sendto
              // with the listen socket and an address will resolve
              // to the correct client
              SOCKFS.websocket_sock_ops.createPeer(sock, ws);
            }
          });
          sock.server.on('closed', function() {
            sock.server = null;
          });
          sock.server.on('error', function() {
            // don't throw
          });
        },accept:function (listensock) {
          if (!listensock.server) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          var newsock = listensock.pending.shift();
          newsock.stream.flags = listensock.stream.flags;
          return newsock;
        },getname:function (sock, peer) {
          var addr, port;
          if (peer) {
            if (sock.daddr === undefined || sock.dport === undefined) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
            }
            addr = sock.daddr;
            port = sock.dport;
          } else {
            // TODO saddr and sport will be set for bind()'d UDP sockets, but what
            // should we be returning for TCP sockets that've been connect()'d?
            addr = sock.saddr || 0;
            port = sock.sport || 0;
          }
          return { addr: addr, port: port };
        },sendmsg:function (sock, buffer, offset, length, addr, port) {
          if (sock.type === 2) {
            // connection-less sockets will honor the message address,
            // and otherwise fall back to the bound destination address
            if (addr === undefined || port === undefined) {
              addr = sock.daddr;
              port = sock.dport;
            }
            // if there was no address to fall back to, error out
            if (addr === undefined || port === undefined) {
              throw new FS.ErrnoError(ERRNO_CODES.EDESTADDRREQ);
            }
          } else {
            // connection-based sockets will only use the bound
            addr = sock.daddr;
            port = sock.dport;
          }
  
          // find the peer for the destination address
          var dest = SOCKFS.websocket_sock_ops.getPeer(sock, addr, port);
  
          // early out if not connected with a connection-based socket
          if (sock.type === 1) {
            if (!dest || dest.socket.readyState === dest.socket.CLOSING || dest.socket.readyState === dest.socket.CLOSED) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
            } else if (dest.socket.readyState === dest.socket.CONNECTING) {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
          }
  
          // create a copy of the incoming data to send, as the WebSocket API
          // doesn't work entirely with an ArrayBufferView, it'll just send
          // the entire underlying buffer
          var data;
          if (buffer instanceof Array || buffer instanceof ArrayBuffer) {
            data = buffer.slice(offset, offset + length);
          } else {  // ArrayBufferView
            data = buffer.buffer.slice(buffer.byteOffset + offset, buffer.byteOffset + offset + length);
          }
  
          // if we're emulating a connection-less dgram socket and don't have
          // a cached connection, queue the buffer to send upon connect and
          // lie, saying the data was sent now.
          if (sock.type === 2) {
            if (!dest || dest.socket.readyState !== dest.socket.OPEN) {
              // if we're not connected, open a new connection
              if (!dest || dest.socket.readyState === dest.socket.CLOSING || dest.socket.readyState === dest.socket.CLOSED) {
                dest = SOCKFS.websocket_sock_ops.createPeer(sock, addr, port);
              }
              dest.dgram_send_queue.push(data);
              return length;
            }
          }
  
          try {
            // send the actual data
            dest.socket.send(data);
            return length;
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
        },recvmsg:function (sock, length) {
          // http://pubs.opengroup.org/onlinepubs/7908799/xns/recvmsg.html
          if (sock.type === 1 && sock.server) {
            // tcp servers should not be recv()'ing on the listen socket
            throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
          }
  
          var queued = sock.recv_queue.shift();
          if (!queued) {
            if (sock.type === 1) {
              var dest = SOCKFS.websocket_sock_ops.getPeer(sock, sock.daddr, sock.dport);
  
              if (!dest) {
                // if we have a destination address but are not connected, error out
                throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
              }
              else if (dest.socket.readyState === dest.socket.CLOSING || dest.socket.readyState === dest.socket.CLOSED) {
                // return null if the socket has closed
                return null;
              }
              else {
                // else, our socket is in a valid state but truly has nothing available
                throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
              }
            } else {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
          }
  
          // queued.data will be an ArrayBuffer if it's unadulterated, but if it's
          // requeued TCP data it'll be an ArrayBufferView
          var queuedLength = queued.data.byteLength || queued.data.length;
          var queuedOffset = queued.data.byteOffset || 0;
          var queuedBuffer = queued.data.buffer || queued.data;
          var bytesRead = Math.min(length, queuedLength);
          var res = {
            buffer: new Uint8Array(queuedBuffer, queuedOffset, bytesRead),
            addr: queued.addr,
            port: queued.port
          };
  
  
          // push back any unread data for TCP connections
          if (sock.type === 1 && bytesRead < queuedLength) {
            var bytesRemaining = queuedLength - bytesRead;
            queued.data = new Uint8Array(queuedBuffer, queuedOffset + bytesRead, bytesRemaining);
            sock.recv_queue.unshift(queued);
          }
  
          return res;
        }}};function _recv(fd, buf, len, flags) {
      var sock = SOCKFS.getSocket(fd);
      if (!sock) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      // TODO honor flags
      return _read(fd, buf, len);
    }
  
  function _pread(fildes, buf, nbyte, offset) {
      // ssize_t pread(int fildes, void *buf, size_t nbyte, off_t offset);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/read.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      try {
        var slab = HEAP8;
        return FS.read(stream, slab, buf, nbyte, offset);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _read(fildes, buf, nbyte) {
      // ssize_t read(int fildes, void *buf, size_t nbyte);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/read.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
  
  
      try {
        var slab = HEAP8;
        return FS.read(stream, slab, buf, nbyte);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _fread(ptr, size, nitems, stream) {
      // size_t fread(void *restrict ptr, size_t size, size_t nitems, FILE *restrict stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fread.html
      var bytesToRead = nitems * size;
      if (bytesToRead == 0) {
        return 0;
      }
      var bytesRead = 0;
      var streamObj = FS.getStreamFromPtr(stream);
      if (!streamObj) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return 0;
      }
      while (streamObj.ungotten.length && bytesToRead > 0) {
        HEAP8[((ptr++)|0)]=streamObj.ungotten.pop();
        bytesToRead--;
        bytesRead++;
      }
      var err = _read(streamObj.fd, ptr, bytesToRead);
      if (err == -1) {
        if (streamObj) streamObj.error = true;
        return 0;
      }
      bytesRead += err;
      if (bytesRead < bytesToRead) streamObj.eof = true;
      return Math.floor(bytesRead / size);
    }

  
  function _open(path, oflag, varargs) {
      // int open(const char *path, int oflag, ...);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/open.html
      var mode = HEAP32[((varargs)>>2)];
      path = Pointer_stringify(path);
      try {
        var stream = FS.open(path, oflag, mode);
        return stream.fd;
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _fopen(filename, mode) {
      // FILE *fopen(const char *restrict filename, const char *restrict mode);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fopen.html
      var flags;
      mode = Pointer_stringify(mode);
      if (mode[0] == 'r') {
        if (mode.indexOf('+') != -1) {
          flags = 2;
        } else {
          flags = 0;
        }
      } else if (mode[0] == 'w') {
        if (mode.indexOf('+') != -1) {
          flags = 2;
        } else {
          flags = 1;
        }
        flags |= 64;
        flags |= 512;
      } else if (mode[0] == 'a') {
        if (mode.indexOf('+') != -1) {
          flags = 2;
        } else {
          flags = 1;
        }
        flags |= 64;
        flags |= 1024;
      } else {
        ___setErrNo(ERRNO_CODES.EINVAL);
        return 0;
      }
      var fd = _open(filename, flags, allocate([0x1FF, 0, 0, 0], 'i32', ALLOC_STACK));  // All creation permissions.
      return fd === -1 ? 0 : FS.getPtrForStream(FS.getStream(fd));
    }

  function _isblank(chr) {
      return chr == 32 || chr == 9;
    }

  function ___errno_location() {
      return ___errno_state;
    }


  
  
  
  function _send(fd, buf, len, flags) {
      var sock = SOCKFS.getSocket(fd);
      if (!sock) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      // TODO honor flags
      return _write(fd, buf, len);
    }
  
  function _pwrite(fildes, buf, nbyte, offset) {
      // ssize_t pwrite(int fildes, const void *buf, size_t nbyte, off_t offset);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/write.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      try {
        var slab = HEAP8;
        return FS.write(stream, slab, buf, nbyte, offset);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _write(fildes, buf, nbyte) {
      // ssize_t write(int fildes, const void *buf, size_t nbyte);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/write.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
  
  
      try {
        var slab = HEAP8;
        return FS.write(stream, slab, buf, nbyte);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _fwrite(ptr, size, nitems, stream) {
      // size_t fwrite(const void *restrict ptr, size_t size, size_t nitems, FILE *restrict stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fwrite.html
      var bytesToWrite = nitems * size;
      if (bytesToWrite == 0) return 0;
      var fd = _fileno(stream);
      var bytesWritten = _write(fd, ptr, bytesToWrite);
      if (bytesWritten == -1) {
        var streamObj = FS.getStreamFromPtr(stream);
        if (streamObj) streamObj.error = true;
        return 0;
      } else {
        return Math.floor(bytesWritten / size);
      }
    }
  
  
  function _strlen(ptr) {
      ptr = ptr|0;
      var curr = 0;
      curr = ptr;
      while (HEAP8[(curr)]) {
        curr = (curr + 1)|0;
      }
      return (curr - ptr)|0;
    }
  
  function __reallyNegative(x) {
      return x < 0 || (x === 0 && (1/x) === -Infinity);
    }function __formatString(format, varargs) {
      var textIndex = format;
      var argIndex = 0;
      function getNextArg(type) {
        // NOTE: Explicitly ignoring type safety. Otherwise this fails:
        //       int x = 4; printf("%c\n", (char)x);
        var ret;
        if (type === 'double') {
          ret = HEAPF64[(((varargs)+(argIndex))>>3)];
        } else if (type == 'i64') {
          ret = [HEAP32[(((varargs)+(argIndex))>>2)],
                 HEAP32[(((varargs)+(argIndex+8))>>2)]];
          argIndex += 8; // each 32-bit chunk is in a 64-bit block
  
        } else {
          type = 'i32'; // varargs are always i32, i64, or double
          ret = HEAP32[(((varargs)+(argIndex))>>2)];
        }
        argIndex += Math.max(Runtime.getNativeFieldSize(type), Runtime.getAlignSize(type, null, true));
        return ret;
      }
  
      var ret = [];
      var curr, next, currArg;
      while(1) {
        var startTextIndex = textIndex;
        curr = HEAP8[(textIndex)];
        if (curr === 0) break;
        next = HEAP8[((textIndex+1)|0)];
        if (curr == 37) {
          // Handle flags.
          var flagAlwaysSigned = false;
          var flagLeftAlign = false;
          var flagAlternative = false;
          var flagZeroPad = false;
          var flagPadSign = false;
          flagsLoop: while (1) {
            switch (next) {
              case 43:
                flagAlwaysSigned = true;
                break;
              case 45:
                flagLeftAlign = true;
                break;
              case 35:
                flagAlternative = true;
                break;
              case 48:
                if (flagZeroPad) {
                  break flagsLoop;
                } else {
                  flagZeroPad = true;
                  break;
                }
              case 32:
                flagPadSign = true;
                break;
              default:
                break flagsLoop;
            }
            textIndex++;
            next = HEAP8[((textIndex+1)|0)];
          }
  
          // Handle width.
          var width = 0;
          if (next == 42) {
            width = getNextArg('i32');
            textIndex++;
            next = HEAP8[((textIndex+1)|0)];
          } else {
            while (next >= 48 && next <= 57) {
              width = width * 10 + (next - 48);
              textIndex++;
              next = HEAP8[((textIndex+1)|0)];
            }
          }
  
          // Handle precision.
          var precisionSet = false, precision = -1;
          if (next == 46) {
            precision = 0;
            precisionSet = true;
            textIndex++;
            next = HEAP8[((textIndex+1)|0)];
            if (next == 42) {
              precision = getNextArg('i32');
              textIndex++;
            } else {
              while(1) {
                var precisionChr = HEAP8[((textIndex+1)|0)];
                if (precisionChr < 48 ||
                    precisionChr > 57) break;
                precision = precision * 10 + (precisionChr - 48);
                textIndex++;
              }
            }
            next = HEAP8[((textIndex+1)|0)];
          }
          if (precision < 0) {
            precision = 6; // Standard default.
            precisionSet = false;
          }
  
          // Handle integer sizes. WARNING: These assume a 32-bit architecture!
          var argSize;
          switch (String.fromCharCode(next)) {
            case 'h':
              var nextNext = HEAP8[((textIndex+2)|0)];
              if (nextNext == 104) {
                textIndex++;
                argSize = 1; // char (actually i32 in varargs)
              } else {
                argSize = 2; // short (actually i32 in varargs)
              }
              break;
            case 'l':
              var nextNext = HEAP8[((textIndex+2)|0)];
              if (nextNext == 108) {
                textIndex++;
                argSize = 8; // long long
              } else {
                argSize = 4; // long
              }
              break;
            case 'L': // long long
            case 'q': // int64_t
            case 'j': // intmax_t
              argSize = 8;
              break;
            case 'z': // size_t
            case 't': // ptrdiff_t
            case 'I': // signed ptrdiff_t or unsigned size_t
              argSize = 4;
              break;
            default:
              argSize = null;
          }
          if (argSize) textIndex++;
          next = HEAP8[((textIndex+1)|0)];
  
          // Handle type specifier.
          switch (String.fromCharCode(next)) {
            case 'd': case 'i': case 'u': case 'o': case 'x': case 'X': case 'p': {
              // Integer.
              var signed = next == 100 || next == 105;
              argSize = argSize || 4;
              var currArg = getNextArg('i' + (argSize * 8));
              var origArg = currArg;
              var argText;
              // Flatten i64-1 [low, high] into a (slightly rounded) double
              if (argSize == 8) {
                currArg = Runtime.makeBigInt(currArg[0], currArg[1], next == 117);
              }
              // Truncate to requested size.
              if (argSize <= 4) {
                var limit = Math.pow(256, argSize) - 1;
                currArg = (signed ? reSign : unSign)(currArg & limit, argSize * 8);
              }
              // Format the number.
              var currAbsArg = Math.abs(currArg);
              var prefix = '';
              if (next == 100 || next == 105) {
                if (argSize == 8 && i64Math) argText = i64Math.stringify(origArg[0], origArg[1], null); else
                argText = reSign(currArg, 8 * argSize, 1).toString(10);
              } else if (next == 117) {
                if (argSize == 8 && i64Math) argText = i64Math.stringify(origArg[0], origArg[1], true); else
                argText = unSign(currArg, 8 * argSize, 1).toString(10);
                currArg = Math.abs(currArg);
              } else if (next == 111) {
                argText = (flagAlternative ? '0' : '') + currAbsArg.toString(8);
              } else if (next == 120 || next == 88) {
                prefix = (flagAlternative && currArg != 0) ? '0x' : '';
                if (argSize == 8 && i64Math) {
                  if (origArg[1]) {
                    argText = (origArg[1]>>>0).toString(16);
                    var lower = (origArg[0]>>>0).toString(16);
                    while (lower.length < 8) lower = '0' + lower;
                    argText += lower;
                  } else {
                    argText = (origArg[0]>>>0).toString(16);
                  }
                } else
                if (currArg < 0) {
                  // Represent negative numbers in hex as 2's complement.
                  currArg = -currArg;
                  argText = (currAbsArg - 1).toString(16);
                  var buffer = [];
                  for (var i = 0; i < argText.length; i++) {
                    buffer.push((0xF - parseInt(argText[i], 16)).toString(16));
                  }
                  argText = buffer.join('');
                  while (argText.length < argSize * 2) argText = 'f' + argText;
                } else {
                  argText = currAbsArg.toString(16);
                }
                if (next == 88) {
                  prefix = prefix.toUpperCase();
                  argText = argText.toUpperCase();
                }
              } else if (next == 112) {
                if (currAbsArg === 0) {
                  argText = '(nil)';
                } else {
                  prefix = '0x';
                  argText = currAbsArg.toString(16);
                }
              }
              if (precisionSet) {
                while (argText.length < precision) {
                  argText = '0' + argText;
                }
              }
  
              // Add sign if needed
              if (currArg >= 0) {
                if (flagAlwaysSigned) {
                  prefix = '+' + prefix;
                } else if (flagPadSign) {
                  prefix = ' ' + prefix;
                }
              }
  
              // Move sign to prefix so we zero-pad after the sign
              if (argText.charAt(0) == '-') {
                prefix = '-' + prefix;
                argText = argText.substr(1);
              }
  
              // Add padding.
              while (prefix.length + argText.length < width) {
                if (flagLeftAlign) {
                  argText += ' ';
                } else {
                  if (flagZeroPad) {
                    argText = '0' + argText;
                  } else {
                    prefix = ' ' + prefix;
                  }
                }
              }
  
              // Insert the result into the buffer.
              argText = prefix + argText;
              argText.split('').forEach(function(chr) {
                ret.push(chr.charCodeAt(0));
              });
              break;
            }
            case 'f': case 'F': case 'e': case 'E': case 'g': case 'G': {
              // Float.
              var currArg = getNextArg('double');
              var argText;
              if (isNaN(currArg)) {
                argText = 'nan';
                flagZeroPad = false;
              } else if (!isFinite(currArg)) {
                argText = (currArg < 0 ? '-' : '') + 'inf';
                flagZeroPad = false;
              } else {
                var isGeneral = false;
                var effectivePrecision = Math.min(precision, 20);
  
                // Convert g/G to f/F or e/E, as per:
                // http://pubs.opengroup.org/onlinepubs/9699919799/functions/printf.html
                if (next == 103 || next == 71) {
                  isGeneral = true;
                  precision = precision || 1;
                  var exponent = parseInt(currArg.toExponential(effectivePrecision).split('e')[1], 10);
                  if (precision > exponent && exponent >= -4) {
                    next = ((next == 103) ? 'f' : 'F').charCodeAt(0);
                    precision -= exponent + 1;
                  } else {
                    next = ((next == 103) ? 'e' : 'E').charCodeAt(0);
                    precision--;
                  }
                  effectivePrecision = Math.min(precision, 20);
                }
  
                if (next == 101 || next == 69) {
                  argText = currArg.toExponential(effectivePrecision);
                  // Make sure the exponent has at least 2 digits.
                  if (/[eE][-+]\d$/.test(argText)) {
                    argText = argText.slice(0, -1) + '0' + argText.slice(-1);
                  }
                } else if (next == 102 || next == 70) {
                  argText = currArg.toFixed(effectivePrecision);
                  if (currArg === 0 && __reallyNegative(currArg)) {
                    argText = '-' + argText;
                  }
                }
  
                var parts = argText.split('e');
                if (isGeneral && !flagAlternative) {
                  // Discard trailing zeros and periods.
                  while (parts[0].length > 1 && parts[0].indexOf('.') != -1 &&
                         (parts[0].slice(-1) == '0' || parts[0].slice(-1) == '.')) {
                    parts[0] = parts[0].slice(0, -1);
                  }
                } else {
                  // Make sure we have a period in alternative mode.
                  if (flagAlternative && argText.indexOf('.') == -1) parts[0] += '.';
                  // Zero pad until required precision.
                  while (precision > effectivePrecision++) parts[0] += '0';
                }
                argText = parts[0] + (parts.length > 1 ? 'e' + parts[1] : '');
  
                // Capitalize 'E' if needed.
                if (next == 69) argText = argText.toUpperCase();
  
                // Add sign.
                if (currArg >= 0) {
                  if (flagAlwaysSigned) {
                    argText = '+' + argText;
                  } else if (flagPadSign) {
                    argText = ' ' + argText;
                  }
                }
              }
  
              // Add padding.
              while (argText.length < width) {
                if (flagLeftAlign) {
                  argText += ' ';
                } else {
                  if (flagZeroPad && (argText[0] == '-' || argText[0] == '+')) {
                    argText = argText[0] + '0' + argText.slice(1);
                  } else {
                    argText = (flagZeroPad ? '0' : ' ') + argText;
                  }
                }
              }
  
              // Adjust case.
              if (next < 97) argText = argText.toUpperCase();
  
              // Insert the result into the buffer.
              argText.split('').forEach(function(chr) {
                ret.push(chr.charCodeAt(0));
              });
              break;
            }
            case 's': {
              // String.
              var arg = getNextArg('i8*');
              var argLength = arg ? _strlen(arg) : '(null)'.length;
              if (precisionSet) argLength = Math.min(argLength, precision);
              if (!flagLeftAlign) {
                while (argLength < width--) {
                  ret.push(32);
                }
              }
              if (arg) {
                for (var i = 0; i < argLength; i++) {
                  ret.push(HEAPU8[((arg++)|0)]);
                }
              } else {
                ret = ret.concat(intArrayFromString('(null)'.substr(0, argLength), true));
              }
              if (flagLeftAlign) {
                while (argLength < width--) {
                  ret.push(32);
                }
              }
              break;
            }
            case 'c': {
              // Character.
              if (flagLeftAlign) ret.push(getNextArg('i8'));
              while (--width > 0) {
                ret.push(32);
              }
              if (!flagLeftAlign) ret.push(getNextArg('i8'));
              break;
            }
            case 'n': {
              // Write the length written so far to the next parameter.
              var ptr = getNextArg('i32*');
              HEAP32[((ptr)>>2)]=ret.length;
              break;
            }
            case '%': {
              // Literal percent sign.
              ret.push(curr);
              break;
            }
            default: {
              // Unknown specifiers remain untouched.
              for (var i = startTextIndex; i < textIndex + 2; i++) {
                ret.push(HEAP8[(i)]);
              }
            }
          }
          textIndex += 2;
          // TODO: Support a/A (hex float) and m (last error) specifiers.
          // TODO: Support %1${specifier} for arg selection.
        } else {
          ret.push(curr);
          textIndex += 1;
        }
      }
      return ret;
    }function _fprintf(stream, format, varargs) {
      // int fprintf(FILE *restrict stream, const char *restrict format, ...);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/printf.html
      var result = __formatString(format, varargs);
      var stack = Runtime.stackSave();
      var ret = _fwrite(allocate(result, 'i8', ALLOC_STACK), 1, result.length, stream);
      Runtime.stackRestore(stack);
      return ret;
    }

  function _vfprintf(s, f, va_arg) {
      return _fprintf(s, f, HEAP32[((va_arg)>>2)]);
    }

  
  
  function _fputs(s, stream) {
      // int fputs(const char *restrict s, FILE *restrict stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fputs.html
      var fd = _fileno(stream);
      return _write(fd, s, _strlen(s));
    }
  
  function _fputc(c, stream) {
      // int fputc(int c, FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fputc.html
      var chr = unSign(c & 0xFF);
      HEAP8[((_fputc.ret)|0)]=chr;
      var fd = _fileno(stream);
      var ret = _write(fd, _fputc.ret, 1);
      if (ret == -1) {
        var streamObj = FS.getStreamFromPtr(stream);
        if (streamObj) streamObj.error = true;
        return -1;
      } else {
        return chr;
      }
    }function _puts(s) {
      // int puts(const char *s);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/puts.html
      // NOTE: puts() always writes an extra newline.
      var stdout = HEAP32[((_stdout)>>2)];
      var ret = _fputs(s, stdout);
      if (ret < 0) {
        return ret;
      } else {
        var newlineRet = _fputc(10, stdout);
        return (newlineRet < 0) ? -1 : ret + 1;
      }
    }
  
  
  function _strerror_r(errnum, strerrbuf, buflen) {
      if (errnum in ERRNO_MESSAGES) {
        if (ERRNO_MESSAGES[errnum].length > buflen - 1) {
          return ___setErrNo(ERRNO_CODES.ERANGE);
        } else {
          var msg = ERRNO_MESSAGES[errnum];
          writeAsciiToMemory(msg, strerrbuf);
          return 0;
        }
      } else {
        return ___setErrNo(ERRNO_CODES.EINVAL);
      }
    }function _strerror(errnum) {
      if (!_strerror.buffer) _strerror.buffer = _malloc(256);
      _strerror_r(errnum, _strerror.buffer, 256);
      return _strerror.buffer;
    }function _perror(s) {
      // void perror(const char *s);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/perror.html
      var stdout = HEAP32[((_stdout)>>2)];
      if (s) {
        _fputs(s, stdout);
        _fputc(58, stdout);
        _fputc(32, stdout);
      }
      var errnum = HEAP32[((___errno_location())>>2)];
      _puts(_strerror(errnum));
    }

  var _putc=_fputc;

  
  function __exit(status) {
      // void _exit(int status);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/exit.html
      Module['exit'](status);
    }function _exit(status) {
      __exit(status);
    }

  var _llvm_va_start=undefined;

  function _llvm_va_end() {}



  function _snprintf(s, n, format, varargs) {
      // int snprintf(char *restrict s, size_t n, const char *restrict format, ...);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/printf.html
      var result = __formatString(format, varargs);
      var limit = (n === undefined) ? result.length
                                    : Math.min(result.length, Math.max(n - 1, 0));
      if (s < 0) {
        s = -s;
        var buf = _malloc(limit+1);
        HEAP32[((s)>>2)]=buf;
        s = buf;
      }
      for (var i = 0; i < limit; i++) {
        HEAP8[(((s)+(i))|0)]=result[i];
      }
      if (limit < n || (n === undefined)) HEAP8[(((s)+(i))|0)]=0;
      return result.length;
    }

  function _strcpy(pdest, psrc) {
      pdest = pdest|0; psrc = psrc|0;
      var i = 0;
      do {
        HEAP8[(((pdest+i)|0)|0)]=HEAP8[(((psrc+i)|0)|0)];
        i = (i+1)|0;
      } while (HEAP8[(((psrc)+(i-1))|0)]);
      return pdest|0;
    }

  var _log=Math_log;

  var _fabs=Math_abs;

  var _floor=Math_floor;

  var _logf=Math_log;

  var _fabsf=Math_abs;

  var _floorf=Math_floor;

  var _exp=Math_exp;


  function _llvm_lifetime_start() {}

  function _llvm_lifetime_end() {}

  function _strncpy(pdest, psrc, num) {
      pdest = pdest|0; psrc = psrc|0; num = num|0;
      var padding = 0, curr = 0, i = 0;
      while ((i|0) < (num|0)) {
        curr = padding ? 0 : HEAP8[(((psrc)+(i))|0)];
        HEAP8[(((pdest)+(i))|0)]=curr;
        padding = padding ? 1 : (HEAP8[(((psrc)+(i))|0)] == 0);
        i = (i+1)|0;
      }
      return pdest|0;
    }

  var _llvm_memset_p0i8_i64=_memset;

  function _llvm_va_copy(ppdest, ppsrc) {
      // copy the list start
      HEAP8[(ppdest)]=HEAP8[(ppsrc)];HEAP8[(((ppdest)+(1))|0)]=HEAP8[(((ppsrc)+(1))|0)];HEAP8[(((ppdest)+(2))|0)]=HEAP8[(((ppsrc)+(2))|0)];HEAP8[(((ppdest)+(3))|0)]=HEAP8[(((ppsrc)+(3))|0)];
      
      // copy the list's current offset (will be advanced with each call to va_arg)
      HEAP8[(((ppdest+4))|0)]=HEAP8[(((ppsrc+4))|0)];HEAP8[((((ppdest+4))+(1))|0)]=HEAP8[((((ppsrc+4))+(1))|0)];HEAP8[((((ppdest+4))+(2))|0)]=HEAP8[((((ppsrc+4))+(2))|0)];HEAP8[((((ppdest+4))+(3))|0)]=HEAP8[((((ppsrc+4))+(3))|0)];
    }

  
  function _unlink(path) {
      // int unlink(const char *path);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/unlink.html
      path = Pointer_stringify(path);
      try {
        FS.unlink(path);
        return 0;
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }
  
  function _rmdir(path) {
      // int rmdir(const char *path);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/rmdir.html
      path = Pointer_stringify(path);
      try {
        FS.rmdir(path);
        return 0;
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _remove(path) {
      // int remove(const char *path);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/remove.html
      var ret = _unlink(path);
      if (ret == -1) ret = _rmdir(path);
      return ret;
    }


  function _sprintf(s, format, varargs) {
      // int sprintf(char *restrict s, const char *restrict format, ...);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/printf.html
      return _snprintf(s, undefined, format, varargs);
    }

  
  function _memmove(dest, src, num) {
      dest = dest|0; src = src|0; num = num|0;
      var ret = 0;
      if (((src|0) < (dest|0)) & ((dest|0) < ((src + num)|0))) {
        // Unlikely case: Copy backwards in a safe manner
        ret = dest;
        src = (src + num)|0;
        dest = (dest + num)|0;
        while ((num|0) > 0) {
          dest = (dest - 1)|0;
          src = (src - 1)|0;
          num = (num - 1)|0;
          HEAP8[(dest)]=HEAP8[(src)];
        }
        dest = ret;
      } else {
        _memcpy(dest, src, num) | 0;
      }
      return dest | 0;
    }var _llvm_memmove_p0i8_p0i8_i32=_memmove;

  function _abort() {
      Module['abort']();
    }

  function _sbrk(bytes) {
      // Implement a Linux-like 'memory area' for our 'process'.
      // Changes the size of the memory area by |bytes|; returns the
      // address of the previous top ('break') of the memory area
      // We control the "dynamic" memory - DYNAMIC_BASE to DYNAMICTOP
      var self = _sbrk;
      if (!self.called) {
        DYNAMICTOP = alignMemoryPage(DYNAMICTOP); // make sure we start out aligned
        self.called = true;
        assert(Runtime.dynamicAlloc);
        self.alloc = Runtime.dynamicAlloc;
        Runtime.dynamicAlloc = function() { abort('cannot dynamically allocate, sbrk now has control') };
      }
      var ret = DYNAMICTOP;
      if (bytes != 0) self.alloc(bytes);
      return ret;  // Previous break location.
    }

  function _sysconf(name) {
      // long sysconf(int name);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/sysconf.html
      switch(name) {
        case 30: return PAGE_SIZE;
        case 132:
        case 133:
        case 12:
        case 137:
        case 138:
        case 15:
        case 235:
        case 16:
        case 17:
        case 18:
        case 19:
        case 20:
        case 149:
        case 13:
        case 10:
        case 236:
        case 153:
        case 9:
        case 21:
        case 22:
        case 159:
        case 154:
        case 14:
        case 77:
        case 78:
        case 139:
        case 80:
        case 81:
        case 79:
        case 82:
        case 68:
        case 67:
        case 164:
        case 11:
        case 29:
        case 47:
        case 48:
        case 95:
        case 52:
        case 51:
        case 46:
          return 200809;
        case 27:
        case 246:
        case 127:
        case 128:
        case 23:
        case 24:
        case 160:
        case 161:
        case 181:
        case 182:
        case 242:
        case 183:
        case 184:
        case 243:
        case 244:
        case 245:
        case 165:
        case 178:
        case 179:
        case 49:
        case 50:
        case 168:
        case 169:
        case 175:
        case 170:
        case 171:
        case 172:
        case 97:
        case 76:
        case 32:
        case 173:
        case 35:
          return -1;
        case 176:
        case 177:
        case 7:
        case 155:
        case 8:
        case 157:
        case 125:
        case 126:
        case 92:
        case 93:
        case 129:
        case 130:
        case 131:
        case 94:
        case 91:
          return 1;
        case 74:
        case 60:
        case 69:
        case 70:
        case 4:
          return 1024;
        case 31:
        case 42:
        case 72:
          return 32;
        case 87:
        case 26:
        case 33:
          return 2147483647;
        case 34:
        case 1:
          return 47839;
        case 38:
        case 36:
          return 99;
        case 43:
        case 37:
          return 2048;
        case 0: return 2097152;
        case 3: return 65536;
        case 28: return 32768;
        case 44: return 32767;
        case 75: return 16384;
        case 39: return 1000;
        case 89: return 700;
        case 71: return 256;
        case 40: return 255;
        case 2: return 100;
        case 180: return 64;
        case 25: return 20;
        case 5: return 16;
        case 6: return 6;
        case 73: return 4;
        case 84: return 1;
      }
      ___setErrNo(ERRNO_CODES.EINVAL);
      return -1;
    }

  function _time(ptr) {
      var ret = Math.floor(Date.now()/1000);
      if (ptr) {
        HEAP32[((ptr)>>2)]=ret;
      }
      return ret;
    }

  
  function __ZSt18uncaught_exceptionv() { // std::uncaught_exception()
      return !!__ZSt18uncaught_exceptionv.uncaught_exception;
    }
  
  
  
  function ___cxa_is_number_type(type) {
      var isNumber = false;
      try { if (type == __ZTIi) isNumber = true } catch(e){}
      try { if (type == __ZTIj) isNumber = true } catch(e){}
      try { if (type == __ZTIl) isNumber = true } catch(e){}
      try { if (type == __ZTIm) isNumber = true } catch(e){}
      try { if (type == __ZTIx) isNumber = true } catch(e){}
      try { if (type == __ZTIy) isNumber = true } catch(e){}
      try { if (type == __ZTIf) isNumber = true } catch(e){}
      try { if (type == __ZTId) isNumber = true } catch(e){}
      try { if (type == __ZTIe) isNumber = true } catch(e){}
      try { if (type == __ZTIc) isNumber = true } catch(e){}
      try { if (type == __ZTIa) isNumber = true } catch(e){}
      try { if (type == __ZTIh) isNumber = true } catch(e){}
      try { if (type == __ZTIs) isNumber = true } catch(e){}
      try { if (type == __ZTIt) isNumber = true } catch(e){}
      return isNumber;
    }function ___cxa_does_inherit(definiteType, possibilityType, possibility) {
      if (possibility == 0) return false;
      if (possibilityType == 0 || possibilityType == definiteType)
        return true;
      var possibility_type_info;
      if (___cxa_is_number_type(possibilityType)) {
        possibility_type_info = possibilityType;
      } else {
        var possibility_type_infoAddr = HEAP32[((possibilityType)>>2)] - 8;
        possibility_type_info = HEAP32[((possibility_type_infoAddr)>>2)];
      }
      switch (possibility_type_info) {
      case 0: // possibility is a pointer
        // See if definite type is a pointer
        var definite_type_infoAddr = HEAP32[((definiteType)>>2)] - 8;
        var definite_type_info = HEAP32[((definite_type_infoAddr)>>2)];
        if (definite_type_info == 0) {
          // Also a pointer; compare base types of pointers
          var defPointerBaseAddr = definiteType+8;
          var defPointerBaseType = HEAP32[((defPointerBaseAddr)>>2)];
          var possPointerBaseAddr = possibilityType+8;
          var possPointerBaseType = HEAP32[((possPointerBaseAddr)>>2)];
          return ___cxa_does_inherit(defPointerBaseType, possPointerBaseType, possibility);
        } else
          return false; // one pointer and one non-pointer
      case 1: // class with no base class
        return false;
      case 2: // class with base class
        var parentTypeAddr = possibilityType + 8;
        var parentType = HEAP32[((parentTypeAddr)>>2)];
        return ___cxa_does_inherit(definiteType, parentType, possibility);
      default:
        return false; // some unencountered type
      }
    }
  
  
  
  var ___cxa_last_thrown_exception=0;function ___resumeException(ptr) {
      if (!___cxa_last_thrown_exception) { ___cxa_last_thrown_exception = ptr; }
      throw ptr;
    }
  
  var ___cxa_exception_header_size=8;function ___cxa_find_matching_catch(thrown, throwntype) {
      if (thrown == -1) thrown = ___cxa_last_thrown_exception;
      header = thrown - ___cxa_exception_header_size;
      if (throwntype == -1) throwntype = HEAP32[((header)>>2)];
      var typeArray = Array.prototype.slice.call(arguments, 2);
  
      // If throwntype is a pointer, this means a pointer has been
      // thrown. When a pointer is thrown, actually what's thrown
      // is a pointer to the pointer. We'll dereference it.
      if (throwntype != 0 && !___cxa_is_number_type(throwntype)) {
        var throwntypeInfoAddr= HEAP32[((throwntype)>>2)] - 8;
        var throwntypeInfo= HEAP32[((throwntypeInfoAddr)>>2)];
        if (throwntypeInfo == 0)
          thrown = HEAP32[((thrown)>>2)];
      }
      // The different catch blocks are denoted by different types.
      // Due to inheritance, those types may not precisely match the
      // type of the thrown object. Find one which matches, and
      // return the type of the catch block which should be called.
      for (var i = 0; i < typeArray.length; i++) {
        if (___cxa_does_inherit(typeArray[i], throwntype, thrown))
          return tempRet0 = typeArray[i],thrown;
      }
      // Shouldn't happen unless we have bogus data in typeArray
      // or encounter a type for which emscripten doesn't have suitable
      // typeinfo defined. Best-efforts match just in case.
      return tempRet0 = throwntype,thrown;
    }function ___gxx_personality_v0() {
    }

  function ___cxa_allocate_exception(size) {
      var ptr = _malloc(size + ___cxa_exception_header_size);
      return ptr + ___cxa_exception_header_size;
    }

  function ___cxa_throw(ptr, type, destructor) {
      if (!___cxa_throw.initialized) {
        try {
          HEAP32[((__ZTVN10__cxxabiv119__pointer_type_infoE)>>2)]=0; // Workaround for libcxxabi integration bug
        } catch(e){}
        try {
          HEAP32[((__ZTVN10__cxxabiv117__class_type_infoE)>>2)]=1; // Workaround for libcxxabi integration bug
        } catch(e){}
        try {
          HEAP32[((__ZTVN10__cxxabiv120__si_class_type_infoE)>>2)]=2; // Workaround for libcxxabi integration bug
        } catch(e){}
        ___cxa_throw.initialized = true;
      }
      var header = ptr - ___cxa_exception_header_size;
      HEAP32[((header)>>2)]=type;
      HEAP32[(((header)+(4))>>2)]=destructor;
      ___cxa_last_thrown_exception = ptr;
      if (!("uncaught_exception" in __ZSt18uncaught_exceptionv)) {
        __ZSt18uncaught_exceptionv.uncaught_exception = 1;
      } else {
        __ZSt18uncaught_exceptionv.uncaught_exception++;
      }
      throw ptr;
    }

  function ___cxa_call_unexpected(exception) {
      Module.printErr('Unexpected exception thrown, this is not properly supported - aborting');
      ABORT = true;
      throw exception;
    }

  
  var ___cxa_caught_exceptions=[];function ___cxa_begin_catch(ptr) {
      __ZSt18uncaught_exceptionv.uncaught_exception--;
      ___cxa_caught_exceptions.push(___cxa_last_thrown_exception);
      return ptr;
    }

  
  function ___cxa_free_exception(ptr) {
      try {
        return _free(ptr - ___cxa_exception_header_size);
      } catch(e) { // XXX FIXME
        Module.printErr('exception during cxa_free_exception: ' + e);
      }
    }function ___cxa_end_catch() {
      if (___cxa_end_catch.rethrown) {
        ___cxa_end_catch.rethrown = false;
        return;
      }
      // Clear state flag.
      __THREW__ = 0;
      // Call destructor if one is registered then clear it.
      var ptr = ___cxa_caught_exceptions.pop();
      if (ptr) {
        header = ptr - ___cxa_exception_header_size;
        var destructor = HEAP32[(((header)+(4))>>2)];
        if (destructor) {
          Runtime.dynCall('vi', destructor, [ptr]);
          HEAP32[(((header)+(4))>>2)]=0;
        }
        ___cxa_free_exception(ptr);
        ___cxa_last_thrown_exception = 0;
      }
    }

  function __ZNSt9exceptionD2Ev() {}

  
  function _copysign(a, b) {
      return __reallyNegative(a) === __reallyNegative(b) ? a : -a;
    }var _copysignl=_copysign;

  
  function _fmod(x, y) {
      return x % y;
    }var _fmodl=_fmod;

  function _tolower(chr) {
      chr = chr|0;
      if ((chr|0) < 65) return chr|0;
      if ((chr|0) > 90) return chr|0;
      return (chr - 65 + 97)|0;
    }






  var Browser={mainLoop:{scheduler:null,method:"",shouldPause:false,paused:false,queue:[],pause:function () {
          Browser.mainLoop.shouldPause = true;
        },resume:function () {
          if (Browser.mainLoop.paused) {
            Browser.mainLoop.paused = false;
            Browser.mainLoop.scheduler();
          }
          Browser.mainLoop.shouldPause = false;
        },updateStatus:function () {
          if (Module['setStatus']) {
            var message = Module['statusMessage'] || 'Please wait...';
            var remaining = Browser.mainLoop.remainingBlockers;
            var expected = Browser.mainLoop.expectedBlockers;
            if (remaining) {
              if (remaining < expected) {
                Module['setStatus'](message + ' (' + (expected - remaining) + '/' + expected + ')');
              } else {
                Module['setStatus'](message);
              }
            } else {
              Module['setStatus']('');
            }
          }
        }},isFullScreen:false,pointerLock:false,moduleContextCreatedCallbacks:[],workers:[],init:function () {
        if (!Module["preloadPlugins"]) Module["preloadPlugins"] = []; // needs to exist even in workers
  
        if (Browser.initted || ENVIRONMENT_IS_WORKER) return;
        Browser.initted = true;
  
        try {
          new Blob();
          Browser.hasBlobConstructor = true;
        } catch(e) {
          Browser.hasBlobConstructor = false;
          console.log("warning: no blob constructor, cannot create blobs with mimetypes");
        }
        Browser.BlobBuilder = typeof MozBlobBuilder != "undefined" ? MozBlobBuilder : (typeof WebKitBlobBuilder != "undefined" ? WebKitBlobBuilder : (!Browser.hasBlobConstructor ? console.log("warning: no BlobBuilder") : null));
        Browser.URLObject = typeof window != "undefined" ? (window.URL ? window.URL : window.webkitURL) : undefined;
        if (!Module.noImageDecoding && typeof Browser.URLObject === 'undefined') {
          console.log("warning: Browser does not support creating object URLs. Built-in browser image decoding will not be available.");
          Module.noImageDecoding = true;
        }
  
        // Support for plugins that can process preloaded files. You can add more of these to
        // your app by creating and appending to Module.preloadPlugins.
        //
        // Each plugin is asked if it can handle a file based on the file's name. If it can,
        // it is given the file's raw data. When it is done, it calls a callback with the file's
        // (possibly modified) data. For example, a plugin might decompress a file, or it
        // might create some side data structure for use later (like an Image element, etc.).
  
        var imagePlugin = {};
        imagePlugin['canHandle'] = function imagePlugin_canHandle(name) {
          return !Module.noImageDecoding && /\.(jpg|jpeg|png|bmp)$/i.test(name);
        };
        imagePlugin['handle'] = function imagePlugin_handle(byteArray, name, onload, onerror) {
          var b = null;
          if (Browser.hasBlobConstructor) {
            try {
              b = new Blob([byteArray], { type: Browser.getMimetype(name) });
              if (b.size !== byteArray.length) { // Safari bug #118630
                // Safari's Blob can only take an ArrayBuffer
                b = new Blob([(new Uint8Array(byteArray)).buffer], { type: Browser.getMimetype(name) });
              }
            } catch(e) {
              Runtime.warnOnce('Blob constructor present but fails: ' + e + '; falling back to blob builder');
            }
          }
          if (!b) {
            var bb = new Browser.BlobBuilder();
            bb.append((new Uint8Array(byteArray)).buffer); // we need to pass a buffer, and must copy the array to get the right data range
            b = bb.getBlob();
          }
          var url = Browser.URLObject.createObjectURL(b);
          assert(typeof url == 'string', 'createObjectURL must return a url as a string');
          var img = new Image();
          img.onload = function img_onload() {
            assert(img.complete, 'Image ' + name + ' could not be decoded');
            var canvas = document.createElement('canvas');
            canvas.width = img.width;
            canvas.height = img.height;
            var ctx = canvas.getContext('2d');
            ctx.drawImage(img, 0, 0);
            Module["preloadedImages"][name] = canvas;
            Browser.URLObject.revokeObjectURL(url);
            if (onload) onload(byteArray);
          };
          img.onerror = function img_onerror(event) {
            console.log('Image ' + url + ' could not be decoded');
            if (onerror) onerror();
          };
          img.src = url;
        };
        Module['preloadPlugins'].push(imagePlugin);
  
        var audioPlugin = {};
        audioPlugin['canHandle'] = function audioPlugin_canHandle(name) {
          return !Module.noAudioDecoding && name.substr(-4) in { '.ogg': 1, '.wav': 1, '.mp3': 1 };
        };
        audioPlugin['handle'] = function audioPlugin_handle(byteArray, name, onload, onerror) {
          var done = false;
          function finish(audio) {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = audio;
            if (onload) onload(byteArray);
          }
          function fail() {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = new Audio(); // empty shim
            if (onerror) onerror();
          }
          if (Browser.hasBlobConstructor) {
            try {
              var b = new Blob([byteArray], { type: Browser.getMimetype(name) });
            } catch(e) {
              return fail();
            }
            var url = Browser.URLObject.createObjectURL(b); // XXX we never revoke this!
            assert(typeof url == 'string', 'createObjectURL must return a url as a string');
            var audio = new Audio();
            audio.addEventListener('canplaythrough', function() { finish(audio) }, false); // use addEventListener due to chromium bug 124926
            audio.onerror = function audio_onerror(event) {
              if (done) return;
              console.log('warning: browser could not fully decode audio ' + name + ', trying slower base64 approach');
              function encode64(data) {
                var BASE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
                var PAD = '=';
                var ret = '';
                var leftchar = 0;
                var leftbits = 0;
                for (var i = 0; i < data.length; i++) {
                  leftchar = (leftchar << 8) | data[i];
                  leftbits += 8;
                  while (leftbits >= 6) {
                    var curr = (leftchar >> (leftbits-6)) & 0x3f;
                    leftbits -= 6;
                    ret += BASE[curr];
                  }
                }
                if (leftbits == 2) {
                  ret += BASE[(leftchar&3) << 4];
                  ret += PAD + PAD;
                } else if (leftbits == 4) {
                  ret += BASE[(leftchar&0xf) << 2];
                  ret += PAD;
                }
                return ret;
              }
              audio.src = 'data:audio/x-' + name.substr(-3) + ';base64,' + encode64(byteArray);
              finish(audio); // we don't wait for confirmation this worked - but it's worth trying
            };
            audio.src = url;
            // workaround for chrome bug 124926 - we do not always get oncanplaythrough or onerror
            Browser.safeSetTimeout(function() {
              finish(audio); // try to use it even though it is not necessarily ready to play
            }, 10000);
          } else {
            return fail();
          }
        };
        Module['preloadPlugins'].push(audioPlugin);
  
        // Canvas event setup
  
        var canvas = Module['canvas'];
        
        // forced aspect ratio can be enabled by defining 'forcedAspectRatio' on Module
        // Module['forcedAspectRatio'] = 4 / 3;
        
        canvas.requestPointerLock = canvas['requestPointerLock'] ||
                                    canvas['mozRequestPointerLock'] ||
                                    canvas['webkitRequestPointerLock'] ||
                                    canvas['msRequestPointerLock'] ||
                                    function(){};
        canvas.exitPointerLock = document['exitPointerLock'] ||
                                 document['mozExitPointerLock'] ||
                                 document['webkitExitPointerLock'] ||
                                 document['msExitPointerLock'] ||
                                 function(){}; // no-op if function does not exist
        canvas.exitPointerLock = canvas.exitPointerLock.bind(document);
  
        function pointerLockChange() {
          Browser.pointerLock = document['pointerLockElement'] === canvas ||
                                document['mozPointerLockElement'] === canvas ||
                                document['webkitPointerLockElement'] === canvas ||
                                document['msPointerLockElement'] === canvas;
        }
  
        document.addEventListener('pointerlockchange', pointerLockChange, false);
        document.addEventListener('mozpointerlockchange', pointerLockChange, false);
        document.addEventListener('webkitpointerlockchange', pointerLockChange, false);
        document.addEventListener('mspointerlockchange', pointerLockChange, false);
  
        if (Module['elementPointerLock']) {
          canvas.addEventListener("click", function(ev) {
            if (!Browser.pointerLock && canvas.requestPointerLock) {
              canvas.requestPointerLock();
              ev.preventDefault();
            }
          }, false);
        }
      },createContext:function (canvas, useWebGL, setInModule, webGLContextAttributes) {
        var ctx;
        var errorInfo = '?';
        function onContextCreationError(event) {
          errorInfo = event.statusMessage || errorInfo;
        }
        try {
          if (useWebGL) {
            var contextAttributes = {
              antialias: false,
              alpha: false
            };
  
            if (webGLContextAttributes) {
              for (var attribute in webGLContextAttributes) {
                contextAttributes[attribute] = webGLContextAttributes[attribute];
              }
            }
  
  
            canvas.addEventListener('webglcontextcreationerror', onContextCreationError, false);
            try {
              ['experimental-webgl', 'webgl'].some(function(webglId) {
                return ctx = canvas.getContext(webglId, contextAttributes);
              });
            } finally {
              canvas.removeEventListener('webglcontextcreationerror', onContextCreationError, false);
            }
          } else {
            ctx = canvas.getContext('2d');
          }
          if (!ctx) throw ':(';
        } catch (e) {
          Module.print('Could not create canvas: ' + [errorInfo, e]);
          return null;
        }
        if (useWebGL) {
          // Set the background of the WebGL canvas to black
          canvas.style.backgroundColor = "black";
  
          // Warn on context loss
          canvas.addEventListener('webglcontextlost', function(event) {
            alert('WebGL context lost. You will need to reload the page.');
          }, false);
        }
        if (setInModule) {
          GLctx = Module.ctx = ctx;
          Module.useWebGL = useWebGL;
          Browser.moduleContextCreatedCallbacks.forEach(function(callback) { callback() });
          Browser.init();
        }
        return ctx;
      },destroyContext:function (canvas, useWebGL, setInModule) {},fullScreenHandlersInstalled:false,lockPointer:undefined,resizeCanvas:undefined,requestFullScreen:function (lockPointer, resizeCanvas) {
        Browser.lockPointer = lockPointer;
        Browser.resizeCanvas = resizeCanvas;
        if (typeof Browser.lockPointer === 'undefined') Browser.lockPointer = true;
        if (typeof Browser.resizeCanvas === 'undefined') Browser.resizeCanvas = false;
  
        var canvas = Module['canvas'];
        function fullScreenChange() {
          Browser.isFullScreen = false;
          var canvasContainer = canvas.parentNode;
          if ((document['webkitFullScreenElement'] || document['webkitFullscreenElement'] ||
               document['mozFullScreenElement'] || document['mozFullscreenElement'] ||
               document['fullScreenElement'] || document['fullscreenElement'] ||
               document['msFullScreenElement'] || document['msFullscreenElement'] ||
               document['webkitCurrentFullScreenElement']) === canvasContainer) {
            canvas.cancelFullScreen = document['cancelFullScreen'] ||
                                      document['mozCancelFullScreen'] ||
                                      document['webkitCancelFullScreen'] ||
                                      document['msExitFullscreen'] ||
                                      document['exitFullscreen'] ||
                                      function() {};
            canvas.cancelFullScreen = canvas.cancelFullScreen.bind(document);
            if (Browser.lockPointer) canvas.requestPointerLock();
            Browser.isFullScreen = true;
            if (Browser.resizeCanvas) Browser.setFullScreenCanvasSize();
          } else {
            
            // remove the full screen specific parent of the canvas again to restore the HTML structure from before going full screen
            canvasContainer.parentNode.insertBefore(canvas, canvasContainer);
            canvasContainer.parentNode.removeChild(canvasContainer);
            
            if (Browser.resizeCanvas) Browser.setWindowedCanvasSize();
          }
          if (Module['onFullScreen']) Module['onFullScreen'](Browser.isFullScreen);
          Browser.updateCanvasDimensions(canvas);
        }
  
        if (!Browser.fullScreenHandlersInstalled) {
          Browser.fullScreenHandlersInstalled = true;
          document.addEventListener('fullscreenchange', fullScreenChange, false);
          document.addEventListener('mozfullscreenchange', fullScreenChange, false);
          document.addEventListener('webkitfullscreenchange', fullScreenChange, false);
          document.addEventListener('MSFullscreenChange', fullScreenChange, false);
        }
  
        // create a new parent to ensure the canvas has no siblings. this allows browsers to optimize full screen performance when its parent is the full screen root
        var canvasContainer = document.createElement("div");
        canvas.parentNode.insertBefore(canvasContainer, canvas);
        canvasContainer.appendChild(canvas);
        
        // use parent of canvas as full screen root to allow aspect ratio correction (Firefox stretches the root to screen size)
        canvasContainer.requestFullScreen = canvasContainer['requestFullScreen'] ||
                                            canvasContainer['mozRequestFullScreen'] ||
                                            canvasContainer['msRequestFullscreen'] ||
                                           (canvasContainer['webkitRequestFullScreen'] ? function() { canvasContainer['webkitRequestFullScreen'](Element['ALLOW_KEYBOARD_INPUT']) } : null);
        canvasContainer.requestFullScreen();
      },requestAnimationFrame:function requestAnimationFrame(func) {
        if (typeof window === 'undefined') { // Provide fallback to setTimeout if window is undefined (e.g. in Node.js)
          setTimeout(func, 1000/60);
        } else {
          if (!window.requestAnimationFrame) {
            window.requestAnimationFrame = window['requestAnimationFrame'] ||
                                           window['mozRequestAnimationFrame'] ||
                                           window['webkitRequestAnimationFrame'] ||
                                           window['msRequestAnimationFrame'] ||
                                           window['oRequestAnimationFrame'] ||
                                           window['setTimeout'];
          }
          window.requestAnimationFrame(func);
        }
      },safeCallback:function (func) {
        return function() {
          if (!ABORT) return func.apply(null, arguments);
        };
      },safeRequestAnimationFrame:function (func) {
        return Browser.requestAnimationFrame(function() {
          if (!ABORT) func();
        });
      },safeSetTimeout:function (func, timeout) {
        return setTimeout(function() {
          if (!ABORT) func();
        }, timeout);
      },safeSetInterval:function (func, timeout) {
        return setInterval(function() {
          if (!ABORT) func();
        }, timeout);
      },getMimetype:function (name) {
        return {
          'jpg': 'image/jpeg',
          'jpeg': 'image/jpeg',
          'png': 'image/png',
          'bmp': 'image/bmp',
          'ogg': 'audio/ogg',
          'wav': 'audio/wav',
          'mp3': 'audio/mpeg'
        }[name.substr(name.lastIndexOf('.')+1)];
      },getUserMedia:function (func) {
        if(!window.getUserMedia) {
          window.getUserMedia = navigator['getUserMedia'] ||
                                navigator['mozGetUserMedia'];
        }
        window.getUserMedia(func);
      },getMovementX:function (event) {
        return event['movementX'] ||
               event['mozMovementX'] ||
               event['webkitMovementX'] ||
               0;
      },getMovementY:function (event) {
        return event['movementY'] ||
               event['mozMovementY'] ||
               event['webkitMovementY'] ||
               0;
      },getMouseWheelDelta:function (event) {
        return Math.max(-1, Math.min(1, event.type === 'DOMMouseScroll' ? event.detail : -event.wheelDelta));
      },mouseX:0,mouseY:0,mouseMovementX:0,mouseMovementY:0,touches:{},lastTouches:{},calculateMouseEvent:function (event) { // event should be mousemove, mousedown or mouseup
        if (Browser.pointerLock) {
          // When the pointer is locked, calculate the coordinates
          // based on the movement of the mouse.
          // Workaround for Firefox bug 764498
          if (event.type != 'mousemove' &&
              ('mozMovementX' in event)) {
            Browser.mouseMovementX = Browser.mouseMovementY = 0;
          } else {
            Browser.mouseMovementX = Browser.getMovementX(event);
            Browser.mouseMovementY = Browser.getMovementY(event);
          }
          
          // check if SDL is available
          if (typeof SDL != "undefined") {
          	Browser.mouseX = SDL.mouseX + Browser.mouseMovementX;
          	Browser.mouseY = SDL.mouseY + Browser.mouseMovementY;
          } else {
          	// just add the mouse delta to the current absolut mouse position
          	// FIXME: ideally this should be clamped against the canvas size and zero
          	Browser.mouseX += Browser.mouseMovementX;
          	Browser.mouseY += Browser.mouseMovementY;
          }        
        } else {
          // Otherwise, calculate the movement based on the changes
          // in the coordinates.
          var rect = Module["canvas"].getBoundingClientRect();
          var cw = Module["canvas"].width;
          var ch = Module["canvas"].height;
  
          // Neither .scrollX or .pageXOffset are defined in a spec, but
          // we prefer .scrollX because it is currently in a spec draft.
          // (see: http://www.w3.org/TR/2013/WD-cssom-view-20131217/)
          var scrollX = ((typeof window.scrollX !== 'undefined') ? window.scrollX : window.pageXOffset);
          var scrollY = ((typeof window.scrollY !== 'undefined') ? window.scrollY : window.pageYOffset);
          // If this assert lands, it's likely because the browser doesn't support scrollX or pageXOffset
          // and we have no viable fallback.
          assert((typeof scrollX !== 'undefined') && (typeof scrollY !== 'undefined'), 'Unable to retrieve scroll position, mouse positions likely broken.');
  
          if (event.type === 'touchstart' || event.type === 'touchend' || event.type === 'touchmove') {
            var touch = event.touch;
            if (touch === undefined) {
              return; // the "touch" property is only defined in SDL
  
            }
            var adjustedX = touch.pageX - (scrollX + rect.left);
            var adjustedY = touch.pageY - (scrollY + rect.top);
  
            adjustedX = adjustedX * (cw / rect.width);
            adjustedY = adjustedY * (ch / rect.height);
  
            var coords = { x: adjustedX, y: adjustedY };
            
            if (event.type === 'touchstart') {
              Browser.lastTouches[touch.identifier] = coords;
              Browser.touches[touch.identifier] = coords;
            } else if (event.type === 'touchend' || event.type === 'touchmove') {
              Browser.lastTouches[touch.identifier] = Browser.touches[touch.identifier];
              Browser.touches[touch.identifier] = { x: adjustedX, y: adjustedY };
            } 
            return;
          }
  
          var x = event.pageX - (scrollX + rect.left);
          var y = event.pageY - (scrollY + rect.top);
  
          // the canvas might be CSS-scaled compared to its backbuffer;
          // SDL-using content will want mouse coordinates in terms
          // of backbuffer units.
          x = x * (cw / rect.width);
          y = y * (ch / rect.height);
  
          Browser.mouseMovementX = x - Browser.mouseX;
          Browser.mouseMovementY = y - Browser.mouseY;
          Browser.mouseX = x;
          Browser.mouseY = y;
        }
      },xhrLoad:function (url, onload, onerror) {
        var xhr = new XMLHttpRequest();
        xhr.open('GET', url, true);
        xhr.responseType = 'arraybuffer';
        xhr.onload = function xhr_onload() {
          if (xhr.status == 200 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0
            onload(xhr.response);
          } else {
            onerror();
          }
        };
        xhr.onerror = onerror;
        xhr.send(null);
      },asyncLoad:function (url, onload, onerror, noRunDep) {
        Browser.xhrLoad(url, function(arrayBuffer) {
          assert(arrayBuffer, 'Loading data file "' + url + '" failed (no arrayBuffer).');
          onload(new Uint8Array(arrayBuffer));
          if (!noRunDep) removeRunDependency('al ' + url);
        }, function(event) {
          if (onerror) {
            onerror();
          } else {
            throw 'Loading data file "' + url + '" failed.';
          }
        });
        if (!noRunDep) addRunDependency('al ' + url);
      },resizeListeners:[],updateResizeListeners:function () {
        var canvas = Module['canvas'];
        Browser.resizeListeners.forEach(function(listener) {
          listener(canvas.width, canvas.height);
        });
      },setCanvasSize:function (width, height, noUpdates) {
        var canvas = Module['canvas'];
        Browser.updateCanvasDimensions(canvas, width, height);
        if (!noUpdates) Browser.updateResizeListeners();
      },windowedWidth:0,windowedHeight:0,setFullScreenCanvasSize:function () {
        // check if SDL is available   
        if (typeof SDL != "undefined") {
        	var flags = HEAPU32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)];
        	flags = flags | 0x00800000; // set SDL_FULLSCREEN flag
        	HEAP32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)]=flags
        }
        Browser.updateResizeListeners();
      },setWindowedCanvasSize:function () {
        // check if SDL is available       
        if (typeof SDL != "undefined") {
        	var flags = HEAPU32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)];
        	flags = flags & ~0x00800000; // clear SDL_FULLSCREEN flag
        	HEAP32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)]=flags
        }
        Browser.updateResizeListeners();
      },updateCanvasDimensions:function (canvas, wNative, hNative) {
        if (wNative && hNative) {
          canvas.widthNative = wNative;
          canvas.heightNative = hNative;
        } else {
          wNative = canvas.widthNative;
          hNative = canvas.heightNative;
        }
        var w = wNative;
        var h = hNative;
        if (Module['forcedAspectRatio'] && Module['forcedAspectRatio'] > 0) {
          if (w/h < Module['forcedAspectRatio']) {
            w = Math.round(h * Module['forcedAspectRatio']);
          } else {
            h = Math.round(w / Module['forcedAspectRatio']);
          }
        }
        if (((document['webkitFullScreenElement'] || document['webkitFullscreenElement'] ||
             document['mozFullScreenElement'] || document['mozFullscreenElement'] ||
             document['fullScreenElement'] || document['fullscreenElement'] ||
             document['msFullScreenElement'] || document['msFullscreenElement'] ||
             document['webkitCurrentFullScreenElement']) === canvas.parentNode) && (typeof screen != 'undefined')) {
           var factor = Math.min(screen.width / w, screen.height / h);
           w = Math.round(w * factor);
           h = Math.round(h * factor);
        }
        if (Browser.resizeCanvas) {
          if (canvas.width  != w) canvas.width  = w;
          if (canvas.height != h) canvas.height = h;
          if (typeof canvas.style != 'undefined') {
            canvas.style.removeProperty( "width");
            canvas.style.removeProperty("height");
          }
        } else {
          if (canvas.width  != wNative) canvas.width  = wNative;
          if (canvas.height != hNative) canvas.height = hNative;
          if (typeof canvas.style != 'undefined') {
            if (w != wNative || h != hNative) {
              canvas.style.setProperty( "width", w + "px", "important");
              canvas.style.setProperty("height", h + "px", "important");
            } else {
              canvas.style.removeProperty( "width");
              canvas.style.removeProperty("height");
            }
          }
        }
      }};
FS.staticInit();__ATINIT__.unshift({ func: function() { if (!Module["noFSInit"] && !FS.init.initialized) FS.init() } });__ATMAIN__.push({ func: function() { FS.ignorePermissions = false } });__ATEXIT__.push({ func: function() { FS.quit() } });Module["FS_createFolder"] = FS.createFolder;Module["FS_createPath"] = FS.createPath;Module["FS_createDataFile"] = FS.createDataFile;Module["FS_createPreloadedFile"] = FS.createPreloadedFile;Module["FS_createLazyFile"] = FS.createLazyFile;Module["FS_createLink"] = FS.createLink;Module["FS_createDevice"] = FS.createDevice;
___errno_state = Runtime.staticAlloc(4); HEAP32[((___errno_state)>>2)]=0;
__ATINIT__.unshift({ func: function() { TTY.init() } });__ATEXIT__.push({ func: function() { TTY.shutdown() } });TTY.utf8 = new Runtime.UTF8Processor();
if (ENVIRONMENT_IS_NODE) { var fs = require("fs"); NODEFS.staticInit(); }
__ATINIT__.push({ func: function() { SOCKFS.root = FS.mount(SOCKFS, {}, null); } });
_fputc.ret = allocate([0], "i8", ALLOC_STATIC);
Module["requestFullScreen"] = function Module_requestFullScreen(lockPointer, resizeCanvas) { Browser.requestFullScreen(lockPointer, resizeCanvas) };
  Module["requestAnimationFrame"] = function Module_requestAnimationFrame(func) { Browser.requestAnimationFrame(func) };
  Module["setCanvasSize"] = function Module_setCanvasSize(width, height, noUpdates) { Browser.setCanvasSize(width, height, noUpdates) };
  Module["pauseMainLoop"] = function Module_pauseMainLoop() { Browser.mainLoop.pause() };
  Module["resumeMainLoop"] = function Module_resumeMainLoop() { Browser.mainLoop.resume() };
  Module["getUserMedia"] = function Module_getUserMedia() { Browser.getUserMedia() }
STACK_BASE = STACKTOP = Runtime.alignMemory(STATICTOP);

staticSealed = true; // seal the static portion of memory

STACK_MAX = STACK_BASE + 524288;

DYNAMIC_BASE = DYNAMICTOP = Runtime.alignMemory(STACK_MAX);

assert(DYNAMIC_BASE < TOTAL_MEMORY, "TOTAL_MEMORY not big enough for stack");



var FUNCTION_TABLE = [0,0,_fputws,0,_stbi__YCbCr_to_RGB_row,0,__ZNSt20bad_array_new_lengthD0Ev,0,_strtold_l,0,___lgammal_r,0,_do_read96,0,___strxfrm_l,0,_stbi__idct_block,0,__ZNSt9bad_allocC2Ev,0,__ZNSt9bad_allocD0Ev,0,__ZNKSt16bad_array_length4whatEv,0,_stbi__stdio_skip,0,_towlower_l,0,_stbi__resample_row_h_2,0,___stpcpy,0,_do_read,0,_stbi__stdio_read,0,_strtod_l,0,_resample_row_1,0,__ZNSt9bad_allocD2Ev,0,__ZNSt16bad_array_lengthD0Ev,0,___lgammaf_r,0,___strchrnul,0,__ZNSt16bad_array_lengthC2Ev,0,___fputwc_unlocked,0,_stbi__resample_row_v_2,0,___strcoll_l,0,_strtof_l,0,___strdup,0,_stbi__resample_row_hv_2,0,__ZNSt20bad_array_new_lengthC2Ev,0,_wctype_l,0,___memrchr,0,_iswctype_l,0,_tre_compare_items,0,__ZNKSt9bad_alloc4whatEv,0,__ZNKSt20bad_array_new_length4whatEv,0,_stbi__resample_row_generic,0,_getopt,0,___lgamma_r,0,_stbi__stdio_eof,0,_towupper_l,0];

// EMSCRIPTEN_START_FUNCS

function _stbi_failure_reason(){
 var label=0;


 var $1=HEAP32[((141000)>>2)]; //@line 878 "./stb_image.h"
 return $1; //@line 878 "./stb_image.h"
}


function _stbi_image_free($retval_from_stbi_load){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 $1=$retval_from_stbi_load;
 var $2=$1; //@line 909 "./stb_image.h"
 _free($2); //@line 909 "./stb_image.h"
 STACKTOP=sp;return; //@line 910 "./stb_image.h"
}


function _stbi_set_flip_vertically_on_load($flag_true_if_should_flip){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 $1=$flag_true_if_should_flip;
 var $2=$1; //@line 924 "./stb_image.h"
 HEAP32[((140984)>>2)]=$2; //@line 924 "./stb_image.h"
 STACKTOP=sp;return; //@line 925 "./stb_image.h"
}


function _stbi_load($filename,$x,$y,$comp,$req_comp){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 var $f;
 var $result;
 $2=$filename;
 $3=$x;
 $4=$y;
 $5=$comp;
 $6=$req_comp;
 var $7=$2; //@line 1031 "./stb_image.h"
 var $8=_stbi__fopen($7,139920); //@line 1031 "./stb_image.h"
 $f=$8; //@line 1031 "./stb_image.h"
 var $9=$f; //@line 1033 "./stb_image.h"
 var $10=($9|0)!=0; //@line 1033 "./stb_image.h"
 if($10){label=3;break;}else{label=2;break;} //@line 1033 "./stb_image.h"
 case 2: 
 var $12=_stbi__err(139904); //@line 1033 "./stb_image.h"
 var $13=($12|0)!=0; //@line 1033 "./stb_image.h"
 var $14=($13?0:0); //@line 1033 "./stb_image.h"
 var $15=$14; //@line 1033 "./stb_image.h"
 $1=$15; //@line 1033 "./stb_image.h"
 label=4;break; //@line 1033 "./stb_image.h"
 case 3: 
 var $17=$f; //@line 1034 "./stb_image.h"
 var $18=$3; //@line 1034 "./stb_image.h"
 var $19=$4; //@line 1034 "./stb_image.h"
 var $20=$5; //@line 1034 "./stb_image.h"
 var $21=$6; //@line 1034 "./stb_image.h"
 var $22=_stbi_load_from_file($17,$18,$19,$20,$21); //@line 1034 "./stb_image.h"
 $result=$22; //@line 1034 "./stb_image.h"
 var $23=$f; //@line 1035 "./stb_image.h"
 var $24=_fclose($23); //@line 1035 "./stb_image.h"
 var $25=$result; //@line 1036 "./stb_image.h"
 $1=$25; //@line 1036 "./stb_image.h"
 label=4;break; //@line 1036 "./stb_image.h"
 case 4: 
 var $27=$1; //@line 1037 "./stb_image.h"
 STACKTOP=sp;return $27; //@line 1037 "./stb_image.h"
  default: assert(0, "bad label: " + label);
 }

}


function _stbi__fopen($filename,$mode){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 var $2;
 var $f;
 $1=$filename;
 $2=$mode;
 var $3=$1; //@line 1023 "./stb_image.h"
 var $4=$2; //@line 1023 "./stb_image.h"
 var $5=_fopen($3,$4); //@line 1023 "./stb_image.h"
 $f=$5; //@line 1023 "./stb_image.h"
 var $6=$f; //@line 1025 "./stb_image.h"
 STACKTOP=sp;return $6; //@line 1025 "./stb_image.h"
}


function _stbi__err($str){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 $1=$str;
 var $2=$1; //@line 883 "./stb_image.h"
 HEAP32[((141000)>>2)]=$2; //@line 883 "./stb_image.h"
 STACKTOP=sp;return 0; //@line 884 "./stb_image.h"
}


function _stbi_load_from_file($f,$x,$y,$comp,$req_comp){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+184)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $result;
 var $s=sp;
 $1=$f;
 $2=$x;
 $3=$y;
 $4=$comp;
 $5=$req_comp;
 var $6=$1; //@line 1043 "./stb_image.h"
 _stbi__start_file($s,$6); //@line 1043 "./stb_image.h"
 var $7=$2; //@line 1044 "./stb_image.h"
 var $8=$3; //@line 1044 "./stb_image.h"
 var $9=$4; //@line 1044 "./stb_image.h"
 var $10=$5; //@line 1044 "./stb_image.h"
 var $11=_stbi__load_flip($s,$7,$8,$9,$10); //@line 1044 "./stb_image.h"
 $result=$11; //@line 1044 "./stb_image.h"
 var $12=$result; //@line 1045 "./stb_image.h"
 var $13=($12|0)!=0; //@line 1045 "./stb_image.h"
 if($13){label=2;break;}else{label=3;break;} //@line 1045 "./stb_image.h"
 case 2: 
 var $15=$1; //@line 1047 "./stb_image.h"
 var $16=(($s+172)|0); //@line 1047 "./stb_image.h"
 var $17=HEAP32[(($16)>>2)]; //@line 1047 "./stb_image.h"
 var $18=(($s+168)|0); //@line 1047 "./stb_image.h"
 var $19=HEAP32[(($18)>>2)]; //@line 1047 "./stb_image.h"
 var $20=$17; //@line 1047 "./stb_image.h"
 var $21=$19; //@line 1047 "./stb_image.h"
 var $22=((($20)-($21))|0); //@line 1047 "./stb_image.h"
 var $23=(((-$22))|0); //@line 1047 "./stb_image.h"
 var $24=_fseek($15,$23,1); //@line 1047 "./stb_image.h"
 label=3;break; //@line 1048 "./stb_image.h"
 case 3: 
 var $26=$result; //@line 1049 "./stb_image.h"
 STACKTOP=sp;return $26; //@line 1049 "./stb_image.h"
  default: assert(0, "bad label: " + label);
 }

}


function _stbi__start_file($s,$f){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 var $2;
 $1=$s;
 $2=$f;
 var $3=$1; //@line 804 "./stb_image.h"
 var $4=$2; //@line 804 "./stb_image.h"
 var $5=$4; //@line 804 "./stb_image.h"
 _stbi__start_callbacks($3,10088,$5); //@line 804 "./stb_image.h"
 STACKTOP=sp;return; //@line 805 "./stb_image.h"
}


function _stbi__load_flip($s,$x,$y,$comp,$req_comp){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $result;
 var $w;
 var $h;
 var $depth;
 var $row;
 var $col;
 var $z;
 var $temp;
 $1=$s;
 $2=$x;
 $3=$y;
 $4=$comp;
 $5=$req_comp;
 var $6=$1; //@line 969 "./stb_image.h"
 var $7=$2; //@line 969 "./stb_image.h"
 var $8=$3; //@line 969 "./stb_image.h"
 var $9=$4; //@line 969 "./stb_image.h"
 var $10=$5; //@line 969 "./stb_image.h"
 var $11=_stbi__load_main($6,$7,$8,$9,$10); //@line 969 "./stb_image.h"
 $result=$11; //@line 969 "./stb_image.h"
 var $12=HEAP32[((140984)>>2)]; //@line 971 "./stb_image.h"
 var $13=($12|0)!=0; //@line 971 "./stb_image.h"
 if($13){label=2;break;}else{label=19;break;} //@line 971 "./stb_image.h"
 case 2: 
 var $15=$result; //@line 971 "./stb_image.h"
 var $16=($15|0)!=0; //@line 971 "./stb_image.h"
 if($16){label=3;break;}else{label=19;break;} //@line 971 "./stb_image.h"
 case 3: 
 var $18=$2; //@line 972 "./stb_image.h"
 var $19=HEAP32[(($18)>>2)]; //@line 972 "./stb_image.h"
 $w=$19; //@line 972 "./stb_image.h"
 var $20=$3; //@line 972 "./stb_image.h"
 var $21=HEAP32[(($20)>>2)]; //@line 972 "./stb_image.h"
 $h=$21; //@line 972 "./stb_image.h"
 var $22=$5; //@line 973 "./stb_image.h"
 var $23=($22|0)!=0; //@line 973 "./stb_image.h"
 if($23){label=4;break;}else{label=5;break;} //@line 973 "./stb_image.h"
 case 4: 
 var $25=$5; //@line 973 "./stb_image.h"
 var $30=$25;label=6;break; //@line 973 "./stb_image.h"
 case 5: 
 var $27=$4; //@line 973 "./stb_image.h"
 var $28=HEAP32[(($27)>>2)]; //@line 973 "./stb_image.h"
 var $30=$28;label=6;break; //@line 973 "./stb_image.h"
 case 6: 
 var $30; //@line 973 "./stb_image.h"
 $depth=$30; //@line 973 "./stb_image.h"
 $row=0; //@line 978 "./stb_image.h"
 label=7;break; //@line 978 "./stb_image.h"
 case 7: 
 var $32=$row; //@line 978 "./stb_image.h"
 var $33=$h; //@line 978 "./stb_image.h"
 var $34=$33>>1; //@line 978 "./stb_image.h"
 var $35=($32|0)<($34|0); //@line 978 "./stb_image.h"
 if($35){label=8;break;}else{label=18;break;} //@line 978 "./stb_image.h"
 case 8: 
 $col=0; //@line 979 "./stb_image.h"
 label=9;break; //@line 979 "./stb_image.h"
 case 9: 
 var $38=$col; //@line 979 "./stb_image.h"
 var $39=$w; //@line 979 "./stb_image.h"
 var $40=($38|0)<($39|0); //@line 979 "./stb_image.h"
 if($40){label=10;break;}else{label=16;break;} //@line 979 "./stb_image.h"
 case 10: 
 $z=0; //@line 980 "./stb_image.h"
 label=11;break; //@line 980 "./stb_image.h"
 case 11: 
 var $43=$z; //@line 980 "./stb_image.h"
 var $44=$depth; //@line 980 "./stb_image.h"
 var $45=($43|0)<($44|0); //@line 980 "./stb_image.h"
 if($45){label=12;break;}else{label=14;break;} //@line 980 "./stb_image.h"
 case 12: 
 var $47=$row; //@line 981 "./stb_image.h"
 var $48=$w; //@line 981 "./stb_image.h"
 var $49=(Math_imul($47,$48)|0); //@line 981 "./stb_image.h"
 var $50=$col; //@line 981 "./stb_image.h"
 var $51=((($49)+($50))|0); //@line 981 "./stb_image.h"
 var $52=$depth; //@line 981 "./stb_image.h"
 var $53=(Math_imul($51,$52)|0); //@line 981 "./stb_image.h"
 var $54=$z; //@line 981 "./stb_image.h"
 var $55=((($53)+($54))|0); //@line 981 "./stb_image.h"
 var $56=$result; //@line 981 "./stb_image.h"
 var $57=(($56+$55)|0); //@line 981 "./stb_image.h"
 var $58=HEAP8[($57)]; //@line 981 "./stb_image.h"
 $temp=$58; //@line 981 "./stb_image.h"
 var $59=$h; //@line 982 "./stb_image.h"
 var $60=$row; //@line 982 "./stb_image.h"
 var $61=((($59)-($60))|0); //@line 982 "./stb_image.h"
 var $62=((($61)-(1))|0); //@line 982 "./stb_image.h"
 var $63=$w; //@line 982 "./stb_image.h"
 var $64=(Math_imul($62,$63)|0); //@line 982 "./stb_image.h"
 var $65=$col; //@line 982 "./stb_image.h"
 var $66=((($64)+($65))|0); //@line 982 "./stb_image.h"
 var $67=$depth; //@line 982 "./stb_image.h"
 var $68=(Math_imul($66,$67)|0); //@line 982 "./stb_image.h"
 var $69=$z; //@line 982 "./stb_image.h"
 var $70=((($68)+($69))|0); //@line 982 "./stb_image.h"
 var $71=$result; //@line 982 "./stb_image.h"
 var $72=(($71+$70)|0); //@line 982 "./stb_image.h"
 var $73=HEAP8[($72)]; //@line 982 "./stb_image.h"
 var $74=$row; //@line 982 "./stb_image.h"
 var $75=$w; //@line 982 "./stb_image.h"
 var $76=(Math_imul($74,$75)|0); //@line 982 "./stb_image.h"
 var $77=$col; //@line 982 "./stb_image.h"
 var $78=((($76)+($77))|0); //@line 982 "./stb_image.h"
 var $79=$depth; //@line 982 "./stb_image.h"
 var $80=(Math_imul($78,$79)|0); //@line 982 "./stb_image.h"
 var $81=$z; //@line 982 "./stb_image.h"
 var $82=((($80)+($81))|0); //@line 982 "./stb_image.h"
 var $83=$result; //@line 982 "./stb_image.h"
 var $84=(($83+$82)|0); //@line 982 "./stb_image.h"
 HEAP8[($84)]=$73; //@line 982 "./stb_image.h"
 var $85=$temp; //@line 983 "./stb_image.h"
 var $86=$h; //@line 983 "./stb_image.h"
 var $87=$row; //@line 983 "./stb_image.h"
 var $88=((($86)-($87))|0); //@line 983 "./stb_image.h"
 var $89=((($88)-(1))|0); //@line 983 "./stb_image.h"
 var $90=$w; //@line 983 "./stb_image.h"
 var $91=(Math_imul($89,$90)|0); //@line 983 "./stb_image.h"
 var $92=$col; //@line 983 "./stb_image.h"
 var $93=((($91)+($92))|0); //@line 983 "./stb_image.h"
 var $94=$depth; //@line 983 "./stb_image.h"
 var $95=(Math_imul($93,$94)|0); //@line 983 "./stb_image.h"
 var $96=$z; //@line 983 "./stb_image.h"
 var $97=((($95)+($96))|0); //@line 983 "./stb_image.h"
 var $98=$result; //@line 983 "./stb_image.h"
 var $99=(($98+$97)|0); //@line 983 "./stb_image.h"
 HEAP8[($99)]=$85; //@line 983 "./stb_image.h"
 label=13;break; //@line 984 "./stb_image.h"
 case 13: 
 var $101=$z; //@line 980 "./stb_image.h"
 var $102=((($101)+(1))|0); //@line 980 "./stb_image.h"
 $z=$102; //@line 980 "./stb_image.h"
 label=11;break; //@line 980 "./stb_image.h"
 case 14: 
 label=15;break; //@line 985 "./stb_image.h"
 case 15: 
 var $105=$col; //@line 979 "./stb_image.h"
 var $106=((($105)+(1))|0); //@line 979 "./stb_image.h"
 $col=$106; //@line 979 "./stb_image.h"
 label=9;break; //@line 979 "./stb_image.h"
 case 16: 
 label=17;break; //@line 986 "./stb_image.h"
 case 17: 
 var $109=$row; //@line 978 "./stb_image.h"
 var $110=((($109)+(1))|0); //@line 978 "./stb_image.h"
 $row=$110; //@line 978 "./stb_image.h"
 label=7;break; //@line 978 "./stb_image.h"
 case 18: 
 label=19;break; //@line 987 "./stb_image.h"
 case 19: 
 var $113=$result; //@line 989 "./stb_image.h"
 STACKTOP=sp;return $113; //@line 989 "./stb_image.h"
  default: assert(0, "bad label: " + label);
 }

}


function _stbi_load_from_memory($buffer,$len,$x,$y,$comp,$req_comp){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+184)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 var $s=sp;
 $1=$buffer;
 $2=$len;
 $3=$x;
 $4=$y;
 $5=$comp;
 $6=$req_comp;
 var $7=$1; //@line 1056 "./stb_image.h"
 var $8=$2; //@line 1056 "./stb_image.h"
 _stbi__start_mem($s,$7,$8); //@line 1056 "./stb_image.h"
 var $9=$3; //@line 1057 "./stb_image.h"
 var $10=$4; //@line 1057 "./stb_image.h"
 var $11=$5; //@line 1057 "./stb_image.h"
 var $12=$6; //@line 1057 "./stb_image.h"
 var $13=_stbi__load_flip($s,$9,$10,$11,$12); //@line 1057 "./stb_image.h"
 STACKTOP=sp;return $13; //@line 1057 "./stb_image.h"
}


function _stbi__start_mem($s,$buffer,$len){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 var $2;
 var $3;
 $1=$s;
 $2=$buffer;
 $3=$len;
 var $4=$1; //@line 761 "./stb_image.h"
 var $5=(($4+16)|0); //@line 761 "./stb_image.h"
 var $6=(($5)|0); //@line 761 "./stb_image.h"
 HEAP32[(($6)>>2)]=0; //@line 761 "./stb_image.h"
 var $7=$1; //@line 762 "./stb_image.h"
 var $8=(($7+32)|0); //@line 762 "./stb_image.h"
 HEAP32[(($8)>>2)]=0; //@line 762 "./stb_image.h"
 var $9=$2; //@line 763 "./stb_image.h"
 var $10=$1; //@line 763 "./stb_image.h"
 var $11=(($10+176)|0); //@line 763 "./stb_image.h"
 HEAP32[(($11)>>2)]=$9; //@line 763 "./stb_image.h"
 var $12=$1; //@line 763 "./stb_image.h"
 var $13=(($12+168)|0); //@line 763 "./stb_image.h"
 HEAP32[(($13)>>2)]=$9; //@line 763 "./stb_image.h"
 var $14=$2; //@line 764 "./stb_image.h"
 var $15=$3; //@line 764 "./stb_image.h"
 var $16=(($14+$15)|0); //@line 764 "./stb_image.h"
 var $17=$1; //@line 764 "./stb_image.h"
 var $18=(($17+172)|0); //@line 764 "./stb_image.h"
 HEAP32[(($18)>>2)]=$16; //@line 764 "./stb_image.h"
 STACKTOP=sp;return; //@line 765 "./stb_image.h"
}


function _stbi_load_from_callbacks($clbk,$user,$x,$y,$comp,$req_comp){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+184)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 var $s=sp;
 $1=$clbk;
 $2=$user;
 $3=$x;
 $4=$y;
 $5=$comp;
 $6=$req_comp;
 var $7=$1; //@line 1063 "./stb_image.h"
 var $8=$2; //@line 1063 "./stb_image.h"
 _stbi__start_callbacks($s,$7,$8); //@line 1063 "./stb_image.h"
 var $9=$3; //@line 1064 "./stb_image.h"
 var $10=$4; //@line 1064 "./stb_image.h"
 var $11=$5; //@line 1064 "./stb_image.h"
 var $12=$6; //@line 1064 "./stb_image.h"
 var $13=_stbi__load_flip($s,$9,$10,$11,$12); //@line 1064 "./stb_image.h"
 STACKTOP=sp;return $13; //@line 1064 "./stb_image.h"
}


function _stbi__start_callbacks($s,$c,$user){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 var $2;
 var $3;
 $1=$s;
 $2=$c;
 $3=$user;
 var $4=$1; //@line 770 "./stb_image.h"
 var $5=(($4+16)|0); //@line 770 "./stb_image.h"
 var $6=$2; //@line 770 "./stb_image.h"
 var $7=$5; //@line 770 "./stb_image.h"
 var $8=$6; //@line 770 "./stb_image.h"
 assert(12 % 1 === 0);HEAP32[(($7)>>2)]=HEAP32[(($8)>>2)];HEAP32[((($7)+(4))>>2)]=HEAP32[((($8)+(4))>>2)];HEAP32[((($7)+(8))>>2)]=HEAP32[((($8)+(8))>>2)]; //@line 770 "./stb_image.h"
 var $9=$3; //@line 771 "./stb_image.h"
 var $10=$1; //@line 771 "./stb_image.h"
 var $11=(($10+28)|0); //@line 771 "./stb_image.h"
 HEAP32[(($11)>>2)]=$9; //@line 771 "./stb_image.h"
 var $12=$1; //@line 772 "./stb_image.h"
 var $13=(($12+36)|0); //@line 772 "./stb_image.h"
 HEAP32[(($13)>>2)]=128; //@line 772 "./stb_image.h"
 var $14=$1; //@line 773 "./stb_image.h"
 var $15=(($14+32)|0); //@line 773 "./stb_image.h"
 HEAP32[(($15)>>2)]=1; //@line 773 "./stb_image.h"
 var $16=$1; //@line 774 "./stb_image.h"
 var $17=(($16+40)|0); //@line 774 "./stb_image.h"
 var $18=(($17)|0); //@line 774 "./stb_image.h"
 var $19=$1; //@line 774 "./stb_image.h"
 var $20=(($19+176)|0); //@line 774 "./stb_image.h"
 HEAP32[(($20)>>2)]=$18; //@line 774 "./stb_image.h"
 var $21=$1; //@line 775 "./stb_image.h"
 _stbi__refill_buffer($21); //@line 775 "./stb_image.h"
 STACKTOP=sp;return; //@line 776 "./stb_image.h"
}


function _stbi_loadf_from_memory($buffer,$len,$x,$y,$comp,$req_comp){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+184)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 var $s=sp;
 $1=$buffer;
 $2=$len;
 $3=$x;
 $4=$y;
 $5=$comp;
 $6=$req_comp;
 var $7=$1; //@line 1088 "./stb_image.h"
 var $8=$2; //@line 1088 "./stb_image.h"
 _stbi__start_mem($s,$7,$8); //@line 1088 "./stb_image.h"
 var $9=$3; //@line 1089 "./stb_image.h"
 var $10=$4; //@line 1089 "./stb_image.h"
 var $11=$5; //@line 1089 "./stb_image.h"
 var $12=$6; //@line 1089 "./stb_image.h"
 var $13=_stbi__loadf_main($s,$9,$10,$11,$12); //@line 1089 "./stb_image.h"
 STACKTOP=sp;return $13; //@line 1089 "./stb_image.h"
}


function _stbi__loadf_main($s,$x,$y,$comp,$req_comp){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 var $data;
 var $hdr_data;
 $2=$s;
 $3=$x;
 $4=$y;
 $5=$comp;
 $6=$req_comp;
 var $7=$2; //@line 1072 "./stb_image.h"
 var $8=_stbi__hdr_test($7); //@line 1072 "./stb_image.h"
 var $9=($8|0)!=0; //@line 1072 "./stb_image.h"
 if($9){label=2;break;}else{label=5;break;} //@line 1072 "./stb_image.h"
 case 2: 
 var $11=$2; //@line 1073 "./stb_image.h"
 var $12=$3; //@line 1073 "./stb_image.h"
 var $13=$4; //@line 1073 "./stb_image.h"
 var $14=$5; //@line 1073 "./stb_image.h"
 var $15=$6; //@line 1073 "./stb_image.h"
 var $16=_stbi__hdr_load($11,$12,$13,$14,$15); //@line 1073 "./stb_image.h"
 $hdr_data=$16; //@line 1073 "./stb_image.h"
 var $17=$hdr_data; //@line 1074 "./stb_image.h"
 var $18=($17|0)!=0; //@line 1074 "./stb_image.h"
 if($18){label=3;break;}else{label=4;break;} //@line 1074 "./stb_image.h"
 case 3: 
 var $20=$hdr_data; //@line 1075 "./stb_image.h"
 var $21=$3; //@line 1075 "./stb_image.h"
 var $22=$4; //@line 1075 "./stb_image.h"
 var $23=$5; //@line 1075 "./stb_image.h"
 var $24=$6; //@line 1075 "./stb_image.h"
 _stbi__float_postprocess($20,$21,$22,$23,$24); //@line 1075 "./stb_image.h"
 label=4;break; //@line 1075 "./stb_image.h"
 case 4: 
 var $26=$hdr_data; //@line 1076 "./stb_image.h"
 $1=$26; //@line 1076 "./stb_image.h"
 label=11;break; //@line 1076 "./stb_image.h"
 case 5: 
 var $28=$2; //@line 1079 "./stb_image.h"
 var $29=$3; //@line 1079 "./stb_image.h"
 var $30=$4; //@line 1079 "./stb_image.h"
 var $31=$5; //@line 1079 "./stb_image.h"
 var $32=$6; //@line 1079 "./stb_image.h"
 var $33=_stbi__load_flip($28,$29,$30,$31,$32); //@line 1079 "./stb_image.h"
 $data=$33; //@line 1079 "./stb_image.h"
 var $34=$data; //@line 1080 "./stb_image.h"
 var $35=($34|0)!=0; //@line 1080 "./stb_image.h"
 if($35){label=6;break;}else{label=10;break;} //@line 1080 "./stb_image.h"
 case 6: 
 var $37=$data; //@line 1081 "./stb_image.h"
 var $38=$3; //@line 1081 "./stb_image.h"
 var $39=HEAP32[(($38)>>2)]; //@line 1081 "./stb_image.h"
 var $40=$4; //@line 1081 "./stb_image.h"
 var $41=HEAP32[(($40)>>2)]; //@line 1081 "./stb_image.h"
 var $42=$6; //@line 1081 "./stb_image.h"
 var $43=($42|0)!=0; //@line 1081 "./stb_image.h"
 if($43){label=7;break;}else{label=8;break;} //@line 1081 "./stb_image.h"
 case 7: 
 var $45=$6; //@line 1081 "./stb_image.h"
 var $50=$45;label=9;break; //@line 1081 "./stb_image.h"
 case 8: 
 var $47=$5; //@line 1081 "./stb_image.h"
 var $48=HEAP32[(($47)>>2)]; //@line 1081 "./stb_image.h"
 var $50=$48;label=9;break; //@line 1081 "./stb_image.h"
 case 9: 
 var $50; //@line 1081 "./stb_image.h"
 var $51=_stbi__ldr_to_hdr($37,$39,$41,$50); //@line 1081 "./stb_image.h"
 $1=$51; //@line 1081 "./stb_image.h"
 label=11;break; //@line 1081 "./stb_image.h"
 case 10: 
 var $53=_stbi__err(139152); //@line 1082 "./stb_image.h"
 var $54=($53|0)!=0; //@line 1082 "./stb_image.h"
 var $55=($54?0:0); //@line 1082 "./stb_image.h"
 var $56=$55; //@line 1082 "./stb_image.h"
 $1=$56; //@line 1082 "./stb_image.h"
 label=11;break; //@line 1082 "./stb_image.h"
 case 11: 
 var $58=$1; //@line 1083 "./stb_image.h"
 STACKTOP=sp;return $58; //@line 1083 "./stb_image.h"
  default: assert(0, "bad label: " + label);
 }

}


function _stbi_loadf_from_callbacks($clbk,$user,$x,$y,$comp,$req_comp){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+184)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 var $s=sp;
 $1=$clbk;
 $2=$user;
 $3=$x;
 $4=$y;
 $5=$comp;
 $6=$req_comp;
 var $7=$1; //@line 1095 "./stb_image.h"
 var $8=$2; //@line 1095 "./stb_image.h"
 _stbi__start_callbacks($s,$7,$8); //@line 1095 "./stb_image.h"
 var $9=$3; //@line 1096 "./stb_image.h"
 var $10=$4; //@line 1096 "./stb_image.h"
 var $11=$5; //@line 1096 "./stb_image.h"
 var $12=$6; //@line 1096 "./stb_image.h"
 var $13=_stbi__loadf_main($s,$9,$10,$11,$12); //@line 1096 "./stb_image.h"
 STACKTOP=sp;return $13; //@line 1096 "./stb_image.h"
}


function _stbi_loadf($filename,$x,$y,$comp,$req_comp){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 var $result;
 var $f;
 $2=$filename;
 $3=$x;
 $4=$y;
 $5=$comp;
 $6=$req_comp;
 var $7=$2; //@line 1103 "./stb_image.h"
 var $8=_stbi__fopen($7,139920); //@line 1103 "./stb_image.h"
 $f=$8; //@line 1103 "./stb_image.h"
 var $9=$f; //@line 1104 "./stb_image.h"
 var $10=($9|0)!=0; //@line 1104 "./stb_image.h"
 if($10){label=3;break;}else{label=2;break;} //@line 1104 "./stb_image.h"
 case 2: 
 var $12=_stbi__err(139904); //@line 1104 "./stb_image.h"
 var $13=($12|0)!=0; //@line 1104 "./stb_image.h"
 var $14=($13?0:0); //@line 1104 "./stb_image.h"
 var $15=$14; //@line 1104 "./stb_image.h"
 $1=$15; //@line 1104 "./stb_image.h"
 label=4;break; //@line 1104 "./stb_image.h"
 case 3: 
 var $17=$f; //@line 1105 "./stb_image.h"
 var $18=$3; //@line 1105 "./stb_image.h"
 var $19=$4; //@line 1105 "./stb_image.h"
 var $20=$5; //@line 1105 "./stb_image.h"
 var $21=$6; //@line 1105 "./stb_image.h"
 var $22=_stbi_loadf_from_file($17,$18,$19,$20,$21); //@line 1105 "./stb_image.h"
 $result=$22; //@line 1105 "./stb_image.h"
 var $23=$f; //@line 1106 "./stb_image.h"
 var $24=_fclose($23); //@line 1106 "./stb_image.h"
 var $25=$result; //@line 1107 "./stb_image.h"
 $1=$25; //@line 1107 "./stb_image.h"
 label=4;break; //@line 1107 "./stb_image.h"
 case 4: 
 var $27=$1; //@line 1108 "./stb_image.h"
 STACKTOP=sp;return $27; //@line 1108 "./stb_image.h"
  default: assert(0, "bad label: " + label);
 }

}


function _stbi_loadf_from_file($f,$x,$y,$comp,$req_comp){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+184)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $s=sp;
 $1=$f;
 $2=$x;
 $3=$y;
 $4=$comp;
 $5=$req_comp;
 var $6=$1; //@line 1113 "./stb_image.h"
 _stbi__start_file($s,$6); //@line 1113 "./stb_image.h"
 var $7=$2; //@line 1114 "./stb_image.h"
 var $8=$3; //@line 1114 "./stb_image.h"
 var $9=$4; //@line 1114 "./stb_image.h"
 var $10=$5; //@line 1114 "./stb_image.h"
 var $11=_stbi__loadf_main($s,$7,$8,$9,$10); //@line 1114 "./stb_image.h"
 STACKTOP=sp;return $11; //@line 1114 "./stb_image.h"
}


function _stbi_is_hdr_from_memory($buffer,$len){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+184)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 var $2;
 var $s=sp;
 $1=$buffer;
 $2=$len;
 var $3=$1; //@line 1128 "./stb_image.h"
 var $4=$2; //@line 1128 "./stb_image.h"
 _stbi__start_mem($s,$3,$4); //@line 1128 "./stb_image.h"
 var $5=_stbi__hdr_test($s); //@line 1129 "./stb_image.h"
 STACKTOP=sp;return $5; //@line 1129 "./stb_image.h"
}


function _stbi__hdr_test($s){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 var $r;
 $1=$s;
 var $2=$1; //@line 5790 "./stb_image.h"
 var $3=_stbi__hdr_test_core($2); //@line 5790 "./stb_image.h"
 $r=$3; //@line 5790 "./stb_image.h"
 var $4=$1; //@line 5791 "./stb_image.h"
 _stbi__rewind($4); //@line 5791 "./stb_image.h"
 var $5=$r; //@line 5792 "./stb_image.h"
 STACKTOP=sp;return $5; //@line 5792 "./stb_image.h"
}


function _stbi_is_hdr($filename){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $f;
 var $result;
 $1=$filename;
 var $2=$1; //@line 1140 "./stb_image.h"
 var $3=_stbi__fopen($2,139920); //@line 1140 "./stb_image.h"
 $f=$3; //@line 1140 "./stb_image.h"
 $result=0; //@line 1141 "./stb_image.h"
 var $4=$f; //@line 1142 "./stb_image.h"
 var $5=($4|0)!=0; //@line 1142 "./stb_image.h"
 if($5){label=2;break;}else{label=3;break;} //@line 1142 "./stb_image.h"
 case 2: 
 var $7=$f; //@line 1143 "./stb_image.h"
 var $8=_stbi_is_hdr_from_file($7); //@line 1143 "./stb_image.h"
 $result=$8; //@line 1143 "./stb_image.h"
 var $9=$f; //@line 1144 "./stb_image.h"
 var $10=_fclose($9); //@line 1144 "./stb_image.h"
 label=3;break; //@line 1145 "./stb_image.h"
 case 3: 
 var $12=$result; //@line 1146 "./stb_image.h"
 STACKTOP=sp;return $12; //@line 1146 "./stb_image.h"
  default: assert(0, "bad label: " + label);
 }

}


function _stbi_is_hdr_from_file($f){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+184)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 var $s=sp;
 $1=$f;
 var $2=$1; //@line 1153 "./stb_image.h"
 _stbi__start_file($s,$2); //@line 1153 "./stb_image.h"
 var $3=_stbi__hdr_test($s); //@line 1154 "./stb_image.h"
 STACKTOP=sp;return $3; //@line 1154 "./stb_image.h"
}


function _stbi_is_hdr_from_callbacks($clbk,$user){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+184)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 var $2;
 var $s=sp;
 $1=$clbk;
 $2=$user;
 var $3=$1; //@line 1165 "./stb_image.h"
 var $4=$2; //@line 1165 "./stb_image.h"
 _stbi__start_callbacks($s,$3,$4); //@line 1165 "./stb_image.h"
 var $5=_stbi__hdr_test($s); //@line 1166 "./stb_image.h"
 STACKTOP=sp;return $5; //@line 1166 "./stb_image.h"
}


function _stbi_ldr_to_hdr_gamma($gamma){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 $1=$gamma;
 var $2=$1; //@line 1176 "./stb_image.h"
 HEAPF32[((10144)>>2)]=$2; //@line 1176 "./stb_image.h"
 STACKTOP=sp;return; //@line 1176 "./stb_image.h"
}


function _stbi_ldr_to_hdr_scale($scale){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 $1=$scale;
 var $2=$1; //@line 1177 "./stb_image.h"
 HEAPF32[((10136)>>2)]=$2; //@line 1177 "./stb_image.h"
 STACKTOP=sp;return; //@line 1177 "./stb_image.h"
}


function _stbi_hdr_to_ldr_gamma($gamma){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 $1=$gamma;
 var $2=$1; //@line 1180 "./stb_image.h"
 var $3=(1)/($2); //@line 1180 "./stb_image.h"
 HEAPF32[((10304)>>2)]=$3; //@line 1180 "./stb_image.h"
 STACKTOP=sp;return; //@line 1180 "./stb_image.h"
}


function _stbi_hdr_to_ldr_scale($scale){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 $1=$scale;
 var $2=$1; //@line 1181 "./stb_image.h"
 var $3=(1)/($2); //@line 1181 "./stb_image.h"
 HEAPF32[((10296)>>2)]=$3; //@line 1181 "./stb_image.h"
 STACKTOP=sp;return; //@line 1181 "./stb_image.h"
}


function _stbi_zlib_decode_malloc_guesssize($buffer,$len,$initial_size,$outlen){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+4072)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $a=sp;
 var $p;
 $2=$buffer;
 $3=$len;
 $4=$initial_size;
 $5=$outlen;
 var $6=$4; //@line 3810 "./stb_image.h"
 var $7=_stbi__malloc($6); //@line 3810 "./stb_image.h"
 $p=$7; //@line 3810 "./stb_image.h"
 var $8=$p; //@line 3811 "./stb_image.h"
 var $9=($8|0)==0; //@line 3811 "./stb_image.h"
 if($9){label=2;break;}else{label=3;break;} //@line 3811 "./stb_image.h"
 case 2: 
 $1=0; //@line 3811 "./stb_image.h"
 label=8;break; //@line 3811 "./stb_image.h"
 case 3: 
 var $12=$2; //@line 3812 "./stb_image.h"
 var $13=(($a)|0); //@line 3812 "./stb_image.h"
 HEAP32[(($13)>>2)]=$12; //@line 3812 "./stb_image.h"
 var $14=$2; //@line 3813 "./stb_image.h"
 var $15=$3; //@line 3813 "./stb_image.h"
 var $16=(($14+$15)|0); //@line 3813 "./stb_image.h"
 var $17=(($a+4)|0); //@line 3813 "./stb_image.h"
 HEAP32[(($17)>>2)]=$16; //@line 3813 "./stb_image.h"
 var $18=$p; //@line 3814 "./stb_image.h"
 var $19=$4; //@line 3814 "./stb_image.h"
 var $20=_stbi__do_zlib($a,$18,$19,1,1); //@line 3814 "./stb_image.h"
 var $21=($20|0)!=0; //@line 3814 "./stb_image.h"
 if($21){label=4;break;}else{label=7;break;} //@line 3814 "./stb_image.h"
 case 4: 
 var $23=$5; //@line 3815 "./stb_image.h"
 var $24=($23|0)!=0; //@line 3815 "./stb_image.h"
 if($24){label=5;break;}else{label=6;break;} //@line 3815 "./stb_image.h"
 case 5: 
 var $26=(($a+16)|0); //@line 3815 "./stb_image.h"
 var $27=HEAP32[(($26)>>2)]; //@line 3815 "./stb_image.h"
 var $28=(($a+20)|0); //@line 3815 "./stb_image.h"
 var $29=HEAP32[(($28)>>2)]; //@line 3815 "./stb_image.h"
 var $30=$27; //@line 3815 "./stb_image.h"
 var $31=$29; //@line 3815 "./stb_image.h"
 var $32=((($30)-($31))|0); //@line 3815 "./stb_image.h"
 var $33=$5; //@line 3815 "./stb_image.h"
 HEAP32[(($33)>>2)]=$32; //@line 3815 "./stb_image.h"
 label=6;break; //@line 3815 "./stb_image.h"
 case 6: 
 var $35=(($a+20)|0); //@line 3816 "./stb_image.h"
 var $36=HEAP32[(($35)>>2)]; //@line 3816 "./stb_image.h"
 $1=$36; //@line 3816 "./stb_image.h"
 label=8;break; //@line 3816 "./stb_image.h"
 case 7: 
 var $38=(($a+20)|0); //@line 3818 "./stb_image.h"
 var $39=HEAP32[(($38)>>2)]; //@line 3818 "./stb_image.h"
 _free($39); //@line 3818 "./stb_image.h"
 $1=0; //@line 3819 "./stb_image.h"
 label=8;break; //@line 3819 "./stb_image.h"
 case 8: 
 var $41=$1; //@line 3821 "./stb_image.h"
 STACKTOP=sp;return $41; //@line 3821 "./stb_image.h"
  default: assert(0, "bad label: " + label);
 }

}


function _stbi__malloc($size){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 $1=$size;
 var $2=$1; //@line 889 "./stb_image.h"
 var $3=_malloc($2); //@line 889 "./stb_image.h"
 STACKTOP=sp;return $3; //@line 889 "./stb_image.h"
}


function _stbi__do_zlib($a,$obuf,$olen,$exp,$parse_header){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 $1=$a;
 $2=$obuf;
 $3=$olen;
 $4=$exp;
 $5=$parse_header;
 var $6=$2; //@line 3799 "./stb_image.h"
 var $7=$1; //@line 3799 "./stb_image.h"
 var $8=(($7+20)|0); //@line 3799 "./stb_image.h"
 HEAP32[(($8)>>2)]=$6; //@line 3799 "./stb_image.h"
 var $9=$2; //@line 3800 "./stb_image.h"
 var $10=$1; //@line 3800 "./stb_image.h"
 var $11=(($10+16)|0); //@line 3800 "./stb_image.h"
 HEAP32[(($11)>>2)]=$9; //@line 3800 "./stb_image.h"
 var $12=$2; //@line 3801 "./stb_image.h"
 var $13=$3; //@line 3801 "./stb_image.h"
 var $14=(($12+$13)|0); //@line 3801 "./stb_image.h"
 var $15=$1; //@line 3801 "./stb_image.h"
 var $16=(($15+24)|0); //@line 3801 "./stb_image.h"
 HEAP32[(($16)>>2)]=$14; //@line 3801 "./stb_image.h"
 var $17=$4; //@line 3802 "./stb_image.h"
 var $18=$1; //@line 3802 "./stb_image.h"
 var $19=(($18+28)|0); //@line 3802 "./stb_image.h"
 HEAP32[(($19)>>2)]=$17; //@line 3802 "./stb_image.h"
 var $20=$1; //@line 3804 "./stb_image.h"
 var $21=$5; //@line 3804 "./stb_image.h"
 var $22=_stbi__parse_zlib($20,$21); //@line 3804 "./stb_image.h"
 STACKTOP=sp;return $22; //@line 3804 "./stb_image.h"
}


function _stbi_zlib_decode_malloc($buffer,$len,$outlen){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 var $2;
 var $3;
 $1=$buffer;
 $2=$len;
 $3=$outlen;
 var $4=$1; //@line 3825 "./stb_image.h"
 var $5=$2; //@line 3825 "./stb_image.h"
 var $6=$3; //@line 3825 "./stb_image.h"
 var $7=_stbi_zlib_decode_malloc_guesssize($4,$5,16384,$6); //@line 3825 "./stb_image.h"
 STACKTOP=sp;return $7; //@line 3825 "./stb_image.h"
}


function _stbi_zlib_decode_malloc_guesssize_headerflag($buffer,$len,$initial_size,$outlen,$parse_header){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+4072)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 var $a=sp;
 var $p;
 $2=$buffer;
 $3=$len;
 $4=$initial_size;
 $5=$outlen;
 $6=$parse_header;
 var $7=$4; //@line 3831 "./stb_image.h"
 var $8=_stbi__malloc($7); //@line 3831 "./stb_image.h"
 $p=$8; //@line 3831 "./stb_image.h"
 var $9=$p; //@line 3832 "./stb_image.h"
 var $10=($9|0)==0; //@line 3832 "./stb_image.h"
 if($10){label=2;break;}else{label=3;break;} //@line 3832 "./stb_image.h"
 case 2: 
 $1=0; //@line 3832 "./stb_image.h"
 label=8;break; //@line 3832 "./stb_image.h"
 case 3: 
 var $13=$2; //@line 3833 "./stb_image.h"
 var $14=(($a)|0); //@line 3833 "./stb_image.h"
 HEAP32[(($14)>>2)]=$13; //@line 3833 "./stb_image.h"
 var $15=$2; //@line 3834 "./stb_image.h"
 var $16=$3; //@line 3834 "./stb_image.h"
 var $17=(($15+$16)|0); //@line 3834 "./stb_image.h"
 var $18=(($a+4)|0); //@line 3834 "./stb_image.h"
 HEAP32[(($18)>>2)]=$17; //@line 3834 "./stb_image.h"
 var $19=$p; //@line 3835 "./stb_image.h"
 var $20=$4; //@line 3835 "./stb_image.h"
 var $21=$6; //@line 3835 "./stb_image.h"
 var $22=_stbi__do_zlib($a,$19,$20,1,$21); //@line 3835 "./stb_image.h"
 var $23=($22|0)!=0; //@line 3835 "./stb_image.h"
 if($23){label=4;break;}else{label=7;break;} //@line 3835 "./stb_image.h"
 case 4: 
 var $25=$5; //@line 3836 "./stb_image.h"
 var $26=($25|0)!=0; //@line 3836 "./stb_image.h"
 if($26){label=5;break;}else{label=6;break;} //@line 3836 "./stb_image.h"
 case 5: 
 var $28=(($a+16)|0); //@line 3836 "./stb_image.h"
 var $29=HEAP32[(($28)>>2)]; //@line 3836 "./stb_image.h"
 var $30=(($a+20)|0); //@line 3836 "./stb_image.h"
 var $31=HEAP32[(($30)>>2)]; //@line 3836 "./stb_image.h"
 var $32=$29; //@line 3836 "./stb_image.h"
 var $33=$31; //@line 3836 "./stb_image.h"
 var $34=((($32)-($33))|0); //@line 3836 "./stb_image.h"
 var $35=$5; //@line 3836 "./stb_image.h"
 HEAP32[(($35)>>2)]=$34; //@line 3836 "./stb_image.h"
 label=6;break; //@line 3836 "./stb_image.h"
 case 6: 
 var $37=(($a+20)|0); //@line 3837 "./stb_image.h"
 var $38=HEAP32[(($37)>>2)]; //@line 3837 "./stb_image.h"
 $1=$38; //@line 3837 "./stb_image.h"
 label=8;break; //@line 3837 "./stb_image.h"
 case 7: 
 var $40=(($a+20)|0); //@line 3839 "./stb_image.h"
 var $41=HEAP32[(($40)>>2)]; //@line 3839 "./stb_image.h"
 _free($41); //@line 3839 "./stb_image.h"
 $1=0; //@line 3840 "./stb_image.h"
 label=8;break; //@line 3840 "./stb_image.h"
 case 8: 
 var $43=$1; //@line 3842 "./stb_image.h"
 STACKTOP=sp;return $43; //@line 3842 "./stb_image.h"
  default: assert(0, "bad label: " + label);
 }

}


function _stbi_zlib_decode_buffer($obuffer,$olen,$ibuffer,$ilen){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+4072)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $a=sp;
 $2=$obuffer;
 $3=$olen;
 $4=$ibuffer;
 $5=$ilen;
 var $6=$4; //@line 3847 "./stb_image.h"
 var $7=(($a)|0); //@line 3847 "./stb_image.h"
 HEAP32[(($7)>>2)]=$6; //@line 3847 "./stb_image.h"
 var $8=$4; //@line 3848 "./stb_image.h"
 var $9=$5; //@line 3848 "./stb_image.h"
 var $10=(($8+$9)|0); //@line 3848 "./stb_image.h"
 var $11=(($a+4)|0); //@line 3848 "./stb_image.h"
 HEAP32[(($11)>>2)]=$10; //@line 3848 "./stb_image.h"
 var $12=$2; //@line 3849 "./stb_image.h"
 var $13=$3; //@line 3849 "./stb_image.h"
 var $14=_stbi__do_zlib($a,$12,$13,0,1); //@line 3849 "./stb_image.h"
 var $15=($14|0)!=0; //@line 3849 "./stb_image.h"
 if($15){label=2;break;}else{label=3;break;} //@line 3849 "./stb_image.h"
 case 2: 
 var $17=(($a+16)|0); //@line 3850 "./stb_image.h"
 var $18=HEAP32[(($17)>>2)]; //@line 3850 "./stb_image.h"
 var $19=(($a+20)|0); //@line 3850 "./stb_image.h"
 var $20=HEAP32[(($19)>>2)]; //@line 3850 "./stb_image.h"
 var $21=$18; //@line 3850 "./stb_image.h"
 var $22=$20; //@line 3850 "./stb_image.h"
 var $23=((($21)-($22))|0); //@line 3850 "./stb_image.h"
 $1=$23; //@line 3850 "./stb_image.h"
 label=4;break; //@line 3850 "./stb_image.h"
 case 3: 
 $1=-1; //@line 3852 "./stb_image.h"
 label=4;break; //@line 3852 "./stb_image.h"
 case 4: 
 var $26=$1; //@line 3853 "./stb_image.h"
 STACKTOP=sp;return $26; //@line 3853 "./stb_image.h"
  default: assert(0, "bad label: " + label);
 }

}


function _stbi_zlib_decode_noheader_malloc($buffer,$len,$outlen){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+4072)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $a=sp;
 var $p;
 $2=$buffer;
 $3=$len;
 $4=$outlen;
 var $5=_stbi__malloc(16384); //@line 3858 "./stb_image.h"
 $p=$5; //@line 3858 "./stb_image.h"
 var $6=$p; //@line 3859 "./stb_image.h"
 var $7=($6|0)==0; //@line 3859 "./stb_image.h"
 if($7){label=2;break;}else{label=3;break;} //@line 3859 "./stb_image.h"
 case 2: 
 $1=0; //@line 3859 "./stb_image.h"
 label=8;break; //@line 3859 "./stb_image.h"
 case 3: 
 var $10=$2; //@line 3860 "./stb_image.h"
 var $11=(($a)|0); //@line 3860 "./stb_image.h"
 HEAP32[(($11)>>2)]=$10; //@line 3860 "./stb_image.h"
 var $12=$2; //@line 3861 "./stb_image.h"
 var $13=$3; //@line 3861 "./stb_image.h"
 var $14=(($12+$13)|0); //@line 3861 "./stb_image.h"
 var $15=(($a+4)|0); //@line 3861 "./stb_image.h"
 HEAP32[(($15)>>2)]=$14; //@line 3861 "./stb_image.h"
 var $16=$p; //@line 3862 "./stb_image.h"
 var $17=_stbi__do_zlib($a,$16,16384,1,0); //@line 3862 "./stb_image.h"
 var $18=($17|0)!=0; //@line 3862 "./stb_image.h"
 if($18){label=4;break;}else{label=7;break;} //@line 3862 "./stb_image.h"
 case 4: 
 var $20=$4; //@line 3863 "./stb_image.h"
 var $21=($20|0)!=0; //@line 3863 "./stb_image.h"
 if($21){label=5;break;}else{label=6;break;} //@line 3863 "./stb_image.h"
 case 5: 
 var $23=(($a+16)|0); //@line 3863 "./stb_image.h"
 var $24=HEAP32[(($23)>>2)]; //@line 3863 "./stb_image.h"
 var $25=(($a+20)|0); //@line 3863 "./stb_image.h"
 var $26=HEAP32[(($25)>>2)]; //@line 3863 "./stb_image.h"
 var $27=$24; //@line 3863 "./stb_image.h"
 var $28=$26; //@line 3863 "./stb_image.h"
 var $29=((($27)-($28))|0); //@line 3863 "./stb_image.h"
 var $30=$4; //@line 3863 "./stb_image.h"
 HEAP32[(($30)>>2)]=$29; //@line 3863 "./stb_image.h"
 label=6;break; //@line 3863 "./stb_image.h"
 case 6: 
 var $32=(($a+20)|0); //@line 3864 "./stb_image.h"
 var $33=HEAP32[(($32)>>2)]; //@line 3864 "./stb_image.h"
 $1=$33; //@line 3864 "./stb_image.h"
 label=8;break; //@line 3864 "./stb_image.h"
 case 7: 
 var $35=(($a+20)|0); //@line 3866 "./stb_image.h"
 var $36=HEAP32[(($35)>>2)]; //@line 3866 "./stb_image.h"
 _free($36); //@line 3866 "./stb_image.h"
 $1=0; //@line 3867 "./stb_image.h"
 label=8;break; //@line 3867 "./stb_image.h"
 case 8: 
 var $38=$1; //@line 3869 "./stb_image.h"
 STACKTOP=sp;return $38; //@line 3869 "./stb_image.h"
  default: assert(0, "bad label: " + label);
 }

}


function _stbi_zlib_decode_noheader_buffer($obuffer,$olen,$ibuffer,$ilen){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+4072)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $a=sp;
 $2=$obuffer;
 $3=$olen;
 $4=$ibuffer;
 $5=$ilen;
 var $6=$4; //@line 3874 "./stb_image.h"
 var $7=(($a)|0); //@line 3874 "./stb_image.h"
 HEAP32[(($7)>>2)]=$6; //@line 3874 "./stb_image.h"
 var $8=$4; //@line 3875 "./stb_image.h"
 var $9=$5; //@line 3875 "./stb_image.h"
 var $10=(($8+$9)|0); //@line 3875 "./stb_image.h"
 var $11=(($a+4)|0); //@line 3875 "./stb_image.h"
 HEAP32[(($11)>>2)]=$10; //@line 3875 "./stb_image.h"
 var $12=$2; //@line 3876 "./stb_image.h"
 var $13=$3; //@line 3876 "./stb_image.h"
 var $14=_stbi__do_zlib($a,$12,$13,0,0); //@line 3876 "./stb_image.h"
 var $15=($14|0)!=0; //@line 3876 "./stb_image.h"
 if($15){label=2;break;}else{label=3;break;} //@line 3876 "./stb_image.h"
 case 2: 
 var $17=(($a+16)|0); //@line 3877 "./stb_image.h"
 var $18=HEAP32[(($17)>>2)]; //@line 3877 "./stb_image.h"
 var $19=(($a+20)|0); //@line 3877 "./stb_image.h"
 var $20=HEAP32[(($19)>>2)]; //@line 3877 "./stb_image.h"
 var $21=$18; //@line 3877 "./stb_image.h"
 var $22=$20; //@line 3877 "./stb_image.h"
 var $23=((($21)-($22))|0); //@line 3877 "./stb_image.h"
 $1=$23; //@line 3877 "./stb_image.h"
 label=4;break; //@line 3877 "./stb_image.h"
 case 3: 
 $1=-1; //@line 3879 "./stb_image.h"
 label=4;break; //@line 3879 "./stb_image.h"
 case 4: 
 var $26=$1; //@line 3880 "./stb_image.h"
 STACKTOP=sp;return $26; //@line 3880 "./stb_image.h"
  default: assert(0, "bad label: " + label);
 }

}


function _stbi_set_unpremultiply_on_load($flag_true_if_should_unpremultiply){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 $1=$flag_true_if_should_unpremultiply;
 var $2=$1; //@line 4245 "./stb_image.h"
 HEAP32[((140992)>>2)]=$2; //@line 4245 "./stb_image.h"
 STACKTOP=sp;return; //@line 4246 "./stb_image.h"
}


function _stbi_convert_iphone_png_to_rgb($flag_true_if_should_convert){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 $1=$flag_true_if_should_convert;
 var $2=$1; //@line 4250 "./stb_image.h"
 HEAP32[((141008)>>2)]=$2; //@line 4250 "./stb_image.h"
 STACKTOP=sp;return; //@line 4251 "./stb_image.h"
}


function _stbi_info($filename,$x,$y,$comp){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $f;
 var $result;
 $2=$filename;
 $3=$x;
 $4=$y;
 $5=$comp;
 var $6=$2; //@line 6260 "./stb_image.h"
 var $7=_stbi__fopen($6,139920); //@line 6260 "./stb_image.h"
 $f=$7; //@line 6260 "./stb_image.h"
 var $8=$f; //@line 6262 "./stb_image.h"
 var $9=($8|0)!=0; //@line 6262 "./stb_image.h"
 if($9){label=3;break;}else{label=2;break;} //@line 6262 "./stb_image.h"
 case 2: 
 var $11=_stbi__err(139904); //@line 6262 "./stb_image.h"
 $1=$11; //@line 6262 "./stb_image.h"
 label=4;break; //@line 6262 "./stb_image.h"
 case 3: 
 var $13=$f; //@line 6263 "./stb_image.h"
 var $14=$3; //@line 6263 "./stb_image.h"
 var $15=$4; //@line 6263 "./stb_image.h"
 var $16=$5; //@line 6263 "./stb_image.h"
 var $17=_stbi_info_from_file($13,$14,$15,$16); //@line 6263 "./stb_image.h"
 $result=$17; //@line 6263 "./stb_image.h"
 var $18=$f; //@line 6264 "./stb_image.h"
 var $19=_fclose($18); //@line 6264 "./stb_image.h"
 var $20=$result; //@line 6265 "./stb_image.h"
 $1=$20; //@line 6265 "./stb_image.h"
 label=4;break; //@line 6265 "./stb_image.h"
 case 4: 
 var $22=$1; //@line 6266 "./stb_image.h"
 STACKTOP=sp;return $22; //@line 6266 "./stb_image.h"
  default: assert(0, "bad label: " + label);
 }

}


function _stbi_info_from_file($f,$x,$y,$comp){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+184)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 var $2;
 var $3;
 var $4;
 var $r;
 var $s=sp;
 var $pos;
 $1=$f;
 $2=$x;
 $3=$y;
 $4=$comp;
 var $5=$1; //@line 6272 "./stb_image.h"
 var $6=_ftell($5); //@line 6272 "./stb_image.h"
 $pos=$6; //@line 6272 "./stb_image.h"
 var $7=$1; //@line 6273 "./stb_image.h"
 _stbi__start_file($s,$7); //@line 6273 "./stb_image.h"
 var $8=$2; //@line 6274 "./stb_image.h"
 var $9=$3; //@line 6274 "./stb_image.h"
 var $10=$4; //@line 6274 "./stb_image.h"
 var $11=_stbi__info_main($s,$8,$9,$10); //@line 6274 "./stb_image.h"
 $r=$11; //@line 6274 "./stb_image.h"
 var $12=$1; //@line 6275 "./stb_image.h"
 var $13=$pos; //@line 6275 "./stb_image.h"
 var $14=_fseek($12,$13,0); //@line 6275 "./stb_image.h"
 var $15=$r; //@line 6276 "./stb_image.h"
 STACKTOP=sp;return $15; //@line 6276 "./stb_image.h"
}


function _stbi__info_main($s,$x,$y,$comp){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 $2=$s;
 $3=$x;
 $4=$y;
 $5=$comp;
 var $6=$2; //@line 6218 "./stb_image.h"
 var $7=$3; //@line 6218 "./stb_image.h"
 var $8=$4; //@line 6218 "./stb_image.h"
 var $9=$5; //@line 6218 "./stb_image.h"
 var $10=_stbi__jpeg_info($6,$7,$8,$9); //@line 6218 "./stb_image.h"
 var $11=($10|0)!=0; //@line 6218 "./stb_image.h"
 if($11){label=2;break;}else{label=3;break;} //@line 6218 "./stb_image.h"
 case 2: 
 $1=1; //@line 6218 "./stb_image.h"
 label=20;break; //@line 6218 "./stb_image.h"
 case 3: 
 var $14=$2; //@line 6222 "./stb_image.h"
 var $15=$3; //@line 6222 "./stb_image.h"
 var $16=$4; //@line 6222 "./stb_image.h"
 var $17=$5; //@line 6222 "./stb_image.h"
 var $18=_stbi__png_info($14,$15,$16,$17); //@line 6222 "./stb_image.h"
 var $19=($18|0)!=0; //@line 6222 "./stb_image.h"
 if($19){label=4;break;}else{label=5;break;} //@line 6222 "./stb_image.h"
 case 4: 
 $1=1; //@line 6222 "./stb_image.h"
 label=20;break; //@line 6222 "./stb_image.h"
 case 5: 
 var $22=$2; //@line 6226 "./stb_image.h"
 var $23=$3; //@line 6226 "./stb_image.h"
 var $24=$4; //@line 6226 "./stb_image.h"
 var $25=$5; //@line 6226 "./stb_image.h"
 var $26=_stbi__gif_info($22,$23,$24,$25); //@line 6226 "./stb_image.h"
 var $27=($26|0)!=0; //@line 6226 "./stb_image.h"
 if($27){label=6;break;}else{label=7;break;} //@line 6226 "./stb_image.h"
 case 6: 
 $1=1; //@line 6226 "./stb_image.h"
 label=20;break; //@line 6226 "./stb_image.h"
 case 7: 
 var $30=$2; //@line 6230 "./stb_image.h"
 var $31=$3; //@line 6230 "./stb_image.h"
 var $32=$4; //@line 6230 "./stb_image.h"
 var $33=$5; //@line 6230 "./stb_image.h"
 var $34=_stbi__bmp_info($30,$31,$32,$33); //@line 6230 "./stb_image.h"
 var $35=($34|0)!=0; //@line 6230 "./stb_image.h"
 if($35){label=8;break;}else{label=9;break;} //@line 6230 "./stb_image.h"
 case 8: 
 $1=1; //@line 6230 "./stb_image.h"
 label=20;break; //@line 6230 "./stb_image.h"
 case 9: 
 var $38=$2; //@line 6234 "./stb_image.h"
 var $39=$3; //@line 6234 "./stb_image.h"
 var $40=$4; //@line 6234 "./stb_image.h"
 var $41=$5; //@line 6234 "./stb_image.h"
 var $42=_stbi__psd_info($38,$39,$40,$41); //@line 6234 "./stb_image.h"
 var $43=($42|0)!=0; //@line 6234 "./stb_image.h"
 if($43){label=10;break;}else{label=11;break;} //@line 6234 "./stb_image.h"
 case 10: 
 $1=1; //@line 6234 "./stb_image.h"
 label=20;break; //@line 6234 "./stb_image.h"
 case 11: 
 var $46=$2; //@line 6238 "./stb_image.h"
 var $47=$3; //@line 6238 "./stb_image.h"
 var $48=$4; //@line 6238 "./stb_image.h"
 var $49=$5; //@line 6238 "./stb_image.h"
 var $50=_stbi__pic_info($46,$47,$48,$49); //@line 6238 "./stb_image.h"
 var $51=($50|0)!=0; //@line 6238 "./stb_image.h"
 if($51){label=12;break;}else{label=13;break;} //@line 6238 "./stb_image.h"
 case 12: 
 $1=1; //@line 6238 "./stb_image.h"
 label=20;break; //@line 6238 "./stb_image.h"
 case 13: 
 var $54=$2; //@line 6242 "./stb_image.h"
 var $55=$3; //@line 6242 "./stb_image.h"
 var $56=$4; //@line 6242 "./stb_image.h"
 var $57=$5; //@line 6242 "./stb_image.h"
 var $58=_stbi__pnm_info($54,$55,$56,$57); //@line 6242 "./stb_image.h"
 var $59=($58|0)!=0; //@line 6242 "./stb_image.h"
 if($59){label=14;break;}else{label=15;break;} //@line 6242 "./stb_image.h"
 case 14: 
 $1=1; //@line 6242 "./stb_image.h"
 label=20;break; //@line 6242 "./stb_image.h"
 case 15: 
 var $62=$2; //@line 6246 "./stb_image.h"
 var $63=$3; //@line 6246 "./stb_image.h"
 var $64=$4; //@line 6246 "./stb_image.h"
 var $65=$5; //@line 6246 "./stb_image.h"
 var $66=_stbi__hdr_info($62,$63,$64,$65); //@line 6246 "./stb_image.h"
 var $67=($66|0)!=0; //@line 6246 "./stb_image.h"
 if($67){label=16;break;}else{label=17;break;} //@line 6246 "./stb_image.h"
 case 16: 
 $1=1; //@line 6246 "./stb_image.h"
 label=20;break; //@line 6246 "./stb_image.h"
 case 17: 
 var $70=$2; //@line 6251 "./stb_image.h"
 var $71=$3; //@line 6251 "./stb_image.h"
 var $72=$4; //@line 6251 "./stb_image.h"
 var $73=$5; //@line 6251 "./stb_image.h"
 var $74=_stbi__tga_info($70,$71,$72,$73); //@line 6251 "./stb_image.h"
 var $75=($74|0)!=0; //@line 6251 "./stb_image.h"
 if($75){label=18;break;}else{label=19;break;} //@line 6251 "./stb_image.h"
 case 18: 
 $1=1; //@line 6252 "./stb_image.h"
 label=20;break; //@line 6252 "./stb_image.h"
 case 19: 
 var $78=_stbi__err(139152); //@line 6254 "./stb_image.h"
 $1=$78; //@line 6254 "./stb_image.h"
 label=20;break; //@line 6254 "./stb_image.h"
 case 20: 
 var $80=$1; //@line 6255 "./stb_image.h"
 STACKTOP=sp;return $80; //@line 6255 "./stb_image.h"
  default: assert(0, "bad label: " + label);
 }

}


function _stbi_info_from_memory($buffer,$len,$x,$y,$comp){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+184)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $s=sp;
 $1=$buffer;
 $2=$len;
 $3=$x;
 $4=$y;
 $5=$comp;
 var $6=$1; //@line 6283 "./stb_image.h"
 var $7=$2; //@line 6283 "./stb_image.h"
 _stbi__start_mem($s,$6,$7); //@line 6283 "./stb_image.h"
 var $8=$3; //@line 6284 "./stb_image.h"
 var $9=$4; //@line 6284 "./stb_image.h"
 var $10=$5; //@line 6284 "./stb_image.h"
 var $11=_stbi__info_main($s,$8,$9,$10); //@line 6284 "./stb_image.h"
 STACKTOP=sp;return $11; //@line 6284 "./stb_image.h"
}


function _stbi_info_from_callbacks($c,$user,$x,$y,$comp){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+184)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $s=sp;
 $1=$c;
 $2=$user;
 $3=$x;
 $4=$y;
 $5=$comp;
 var $6=$1; //@line 6290 "./stb_image.h"
 var $7=$2; //@line 6290 "./stb_image.h"
 _stbi__start_callbacks($s,$6,$7); //@line 6290 "./stb_image.h"
 var $8=$3; //@line 6291 "./stb_image.h"
 var $9=$4; //@line 6291 "./stb_image.h"
 var $10=$5; //@line 6291 "./stb_image.h"
 var $11=_stbi__info_main($s,$8,$9,$10); //@line 6291 "./stb_image.h"
 STACKTOP=sp;return $11; //@line 6291 "./stb_image.h"
}


function _main(){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 $1=0;
 STACKTOP=sp;return 0; //@line 6 "em_main.c"
}
Module["_main"] = _main;

function _stbi__jpeg_info($s,$x,$y,$comp){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+18192)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 var $2;
 var $3;
 var $4;
 var $j=sp;
 $1=$s;
 $2=$x;
 $3=$y;
 $4=$comp;
 var $5=$1; //@line 3422 "./stb_image.h"
 var $6=(($j)|0); //@line 3422 "./stb_image.h"
 HEAP32[(($6)>>2)]=$5; //@line 3422 "./stb_image.h"
 var $7=$2; //@line 3423 "./stb_image.h"
 var $8=$3; //@line 3423 "./stb_image.h"
 var $9=$4; //@line 3423 "./stb_image.h"
 var $10=_stbi__jpeg_info_raw($j,$7,$8,$9); //@line 3423 "./stb_image.h"
 STACKTOP=sp;return $10; //@line 3423 "./stb_image.h"
}


function _stbi__png_info($s,$x,$y,$comp){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 var $2;
 var $3;
 var $4;
 var $p=sp;
 $1=$s;
 $2=$x;
 $3=$y;
 $4=$comp;
 var $5=$1; //@line 4507 "./stb_image.h"
 var $6=(($p)|0); //@line 4507 "./stb_image.h"
 HEAP32[(($6)>>2)]=$5; //@line 4507 "./stb_image.h"
 var $7=$2; //@line 4508 "./stb_image.h"
 var $8=$3; //@line 4508 "./stb_image.h"
 var $9=$4; //@line 4508 "./stb_image.h"
 var $10=_stbi__png_info_raw($p,$7,$8,$9); //@line 4508 "./stb_image.h"
 STACKTOP=sp;return $10; //@line 4508 "./stb_image.h"
}


function _stbi__gif_info($s,$x,$y,$comp){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 var $2;
 var $3;
 var $4;
 $1=$s;
 $2=$x;
 $3=$y;
 $4=$comp;
 var $5=$1; //@line 5770 "./stb_image.h"
 var $6=$2; //@line 5770 "./stb_image.h"
 var $7=$3; //@line 5770 "./stb_image.h"
 var $8=$4; //@line 5770 "./stb_image.h"
 var $9=_stbi__gif_info_raw($5,$6,$7,$8); //@line 5770 "./stb_image.h"
 STACKTOP=sp;return $9; //@line 5770 "./stb_image.h"
}


function _stbi__bmp_info($s,$x,$y,$comp){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $hsz;
 $2=$s;
 $3=$x;
 $4=$y;
 $5=$comp;
 var $6=$2; //@line 6000 "./stb_image.h"
 var $7=_stbi__get8($6); //@line 6000 "./stb_image.h"
 var $8=($7&255); //@line 6000 "./stb_image.h"
 var $9=($8|0)!=66; //@line 6000 "./stb_image.h"
 if($9){label=3;break;}else{label=2;break;} //@line 6000 "./stb_image.h"
 case 2: 
 var $11=$2; //@line 6000 "./stb_image.h"
 var $12=_stbi__get8($11); //@line 6000 "./stb_image.h"
 var $13=($12&255); //@line 6000 "./stb_image.h"
 var $14=($13|0)!=77; //@line 6000 "./stb_image.h"
 if($14){label=3;break;}else{label=4;break;} //@line 6000 "./stb_image.h"
 case 3: 
 var $16=$2; //@line 6001 "./stb_image.h"
 _stbi__rewind($16); //@line 6001 "./stb_image.h"
 $1=0; //@line 6002 "./stb_image.h"
 label=16;break; //@line 6002 "./stb_image.h"
 case 4: 
 var $18=$2; //@line 6004 "./stb_image.h"
 _stbi__skip($18,12); //@line 6004 "./stb_image.h"
 var $19=$2; //@line 6005 "./stb_image.h"
 var $20=_stbi__get32le($19); //@line 6005 "./stb_image.h"
 $hsz=$20; //@line 6005 "./stb_image.h"
 var $21=$hsz; //@line 6006 "./stb_image.h"
 var $22=($21|0)!=12; //@line 6006 "./stb_image.h"
 if($22){label=5;break;}else{label=10;break;} //@line 6006 "./stb_image.h"
 case 5: 
 var $24=$hsz; //@line 6006 "./stb_image.h"
 var $25=($24|0)!=40; //@line 6006 "./stb_image.h"
 if($25){label=6;break;}else{label=10;break;} //@line 6006 "./stb_image.h"
 case 6: 
 var $27=$hsz; //@line 6006 "./stb_image.h"
 var $28=($27|0)!=56; //@line 6006 "./stb_image.h"
 if($28){label=7;break;}else{label=10;break;} //@line 6006 "./stb_image.h"
 case 7: 
 var $30=$hsz; //@line 6006 "./stb_image.h"
 var $31=($30|0)!=108; //@line 6006 "./stb_image.h"
 if($31){label=8;break;}else{label=10;break;} //@line 6006 "./stb_image.h"
 case 8: 
 var $33=$hsz; //@line 6006 "./stb_image.h"
 var $34=($33|0)!=124; //@line 6006 "./stb_image.h"
 if($34){label=9;break;}else{label=10;break;} //@line 6006 "./stb_image.h"
 case 9: 
 var $36=$2; //@line 6007 "./stb_image.h"
 _stbi__rewind($36); //@line 6007 "./stb_image.h"
 $1=0; //@line 6008 "./stb_image.h"
 label=16;break; //@line 6008 "./stb_image.h"
 case 10: 
 var $38=$hsz; //@line 6010 "./stb_image.h"
 var $39=($38|0)==12; //@line 6010 "./stb_image.h"
 if($39){label=11;break;}else{label=12;break;} //@line 6010 "./stb_image.h"
 case 11: 
 var $41=$2; //@line 6011 "./stb_image.h"
 var $42=_stbi__get16le($41); //@line 6011 "./stb_image.h"
 var $43=$3; //@line 6011 "./stb_image.h"
 HEAP32[(($43)>>2)]=$42; //@line 6011 "./stb_image.h"
 var $44=$2; //@line 6012 "./stb_image.h"
 var $45=_stbi__get16le($44); //@line 6012 "./stb_image.h"
 var $46=$4; //@line 6012 "./stb_image.h"
 HEAP32[(($46)>>2)]=$45; //@line 6012 "./stb_image.h"
 label=13;break; //@line 6013 "./stb_image.h"
 case 12: 
 var $48=$2; //@line 6014 "./stb_image.h"
 var $49=_stbi__get32le($48); //@line 6014 "./stb_image.h"
 var $50=$3; //@line 6014 "./stb_image.h"
 HEAP32[(($50)>>2)]=$49; //@line 6014 "./stb_image.h"
 var $51=$2; //@line 6015 "./stb_image.h"
 var $52=_stbi__get32le($51); //@line 6015 "./stb_image.h"
 var $53=$4; //@line 6015 "./stb_image.h"
 HEAP32[(($53)>>2)]=$52; //@line 6015 "./stb_image.h"
 label=13;break;
 case 13: 
 var $55=$2; //@line 6017 "./stb_image.h"
 var $56=_stbi__get16le($55); //@line 6017 "./stb_image.h"
 var $57=($56|0)!=1; //@line 6017 "./stb_image.h"
 if($57){label=14;break;}else{label=15;break;} //@line 6017 "./stb_image.h"
 case 14: 
 var $59=$2; //@line 6018 "./stb_image.h"
 _stbi__rewind($59); //@line 6018 "./stb_image.h"
 $1=0; //@line 6019 "./stb_image.h"
 label=16;break; //@line 6019 "./stb_image.h"
 case 15: 
 var $61=$2; //@line 6021 "./stb_image.h"
 var $62=_stbi__get16le($61); //@line 6021 "./stb_image.h"
 var $63=(((($62|0))/(8))&-1); //@line 6021 "./stb_image.h"
 var $64=$5; //@line 6021 "./stb_image.h"
 HEAP32[(($64)>>2)]=$63; //@line 6021 "./stb_image.h"
 $1=1; //@line 6022 "./stb_image.h"
 label=16;break; //@line 6022 "./stb_image.h"
 case 16: 
 var $66=$1; //@line 6022 "./stb_image.h"
 STACKTOP=sp;return $66; //@line 6022 "./stb_image.h"
  default: assert(0, "bad label: " + label);
 }

}


function _stbi__psd_info($s,$x,$y,$comp){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $channelCount;
 $2=$s;
 $3=$x;
 $4=$y;
 $5=$comp;
 var $6=$2; //@line 6030 "./stb_image.h"
 var $7=_stbi__get32be($6); //@line 6030 "./stb_image.h"
 var $8=($7|0)!=943870035; //@line 6030 "./stb_image.h"
 if($8){label=2;break;}else{label=3;break;} //@line 6030 "./stb_image.h"
 case 2: 
 var $10=$2; //@line 6031 "./stb_image.h"
 _stbi__rewind($10); //@line 6031 "./stb_image.h"
 $1=0; //@line 6032 "./stb_image.h"
 label=13;break; //@line 6032 "./stb_image.h"
 case 3: 
 var $12=$2; //@line 6034 "./stb_image.h"
 var $13=_stbi__get16be($12); //@line 6034 "./stb_image.h"
 var $14=($13|0)!=1; //@line 6034 "./stb_image.h"
 if($14){label=4;break;}else{label=5;break;} //@line 6034 "./stb_image.h"
 case 4: 
 var $16=$2; //@line 6035 "./stb_image.h"
 _stbi__rewind($16); //@line 6035 "./stb_image.h"
 $1=0; //@line 6036 "./stb_image.h"
 label=13;break; //@line 6036 "./stb_image.h"
 case 5: 
 var $18=$2; //@line 6038 "./stb_image.h"
 _stbi__skip($18,6); //@line 6038 "./stb_image.h"
 var $19=$2; //@line 6039 "./stb_image.h"
 var $20=_stbi__get16be($19); //@line 6039 "./stb_image.h"
 $channelCount=$20; //@line 6039 "./stb_image.h"
 var $21=$channelCount; //@line 6040 "./stb_image.h"
 var $22=($21|0)<0; //@line 6040 "./stb_image.h"
 if($22){label=7;break;}else{label=6;break;} //@line 6040 "./stb_image.h"
 case 6: 
 var $24=$channelCount; //@line 6040 "./stb_image.h"
 var $25=($24|0)>16; //@line 6040 "./stb_image.h"
 if($25){label=7;break;}else{label=8;break;} //@line 6040 "./stb_image.h"
 case 7: 
 var $27=$2; //@line 6041 "./stb_image.h"
 _stbi__rewind($27); //@line 6041 "./stb_image.h"
 $1=0; //@line 6042 "./stb_image.h"
 label=13;break; //@line 6042 "./stb_image.h"
 case 8: 
 var $29=$2; //@line 6044 "./stb_image.h"
 var $30=_stbi__get32be($29); //@line 6044 "./stb_image.h"
 var $31=$4; //@line 6044 "./stb_image.h"
 HEAP32[(($31)>>2)]=$30; //@line 6044 "./stb_image.h"
 var $32=$2; //@line 6045 "./stb_image.h"
 var $33=_stbi__get32be($32); //@line 6045 "./stb_image.h"
 var $34=$3; //@line 6045 "./stb_image.h"
 HEAP32[(($34)>>2)]=$33; //@line 6045 "./stb_image.h"
 var $35=$2; //@line 6046 "./stb_image.h"
 var $36=_stbi__get16be($35); //@line 6046 "./stb_image.h"
 var $37=($36|0)!=8; //@line 6046 "./stb_image.h"
 if($37){label=9;break;}else{label=10;break;} //@line 6046 "./stb_image.h"
 case 9: 
 var $39=$2; //@line 6047 "./stb_image.h"
 _stbi__rewind($39); //@line 6047 "./stb_image.h"
 $1=0; //@line 6048 "./stb_image.h"
 label=13;break; //@line 6048 "./stb_image.h"
 case 10: 
 var $41=$2; //@line 6050 "./stb_image.h"
 var $42=_stbi__get16be($41); //@line 6050 "./stb_image.h"
 var $43=($42|0)!=3; //@line 6050 "./stb_image.h"
 if($43){label=11;break;}else{label=12;break;} //@line 6050 "./stb_image.h"
 case 11: 
 var $45=$2; //@line 6051 "./stb_image.h"
 _stbi__rewind($45); //@line 6051 "./stb_image.h"
 $1=0; //@line 6052 "./stb_image.h"
 label=13;break; //@line 6052 "./stb_image.h"
 case 12: 
 var $47=$5; //@line 6054 "./stb_image.h"
 HEAP32[(($47)>>2)]=4; //@line 6054 "./stb_image.h"
 $1=1; //@line 6055 "./stb_image.h"
 label=13;break; //@line 6055 "./stb_image.h"
 case 13: 
 var $49=$1; //@line 6055 "./stb_image.h"
 STACKTOP=sp;return $49; //@line 6055 "./stb_image.h"
  default: assert(0, "bad label: " + label);
 }

}


function _stbi__pic_info($s,$x,$y,$comp){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+32)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $act_comp;
 var $num_packets;
 var $chained;
 var $packets=sp;
 var $packet;
 $2=$s;
 $3=$x;
 $4=$y;
 $5=$comp;
 $act_comp=0; //@line 6062 "./stb_image.h"
 $num_packets=0; //@line 6062 "./stb_image.h"
 var $6=$2; //@line 6065 "./stb_image.h"
 _stbi__skip($6,92); //@line 6065 "./stb_image.h"
 var $7=$2; //@line 6067 "./stb_image.h"
 var $8=_stbi__get16be($7); //@line 6067 "./stb_image.h"
 var $9=$3; //@line 6067 "./stb_image.h"
 HEAP32[(($9)>>2)]=$8; //@line 6067 "./stb_image.h"
 var $10=$2; //@line 6068 "./stb_image.h"
 var $11=_stbi__get16be($10); //@line 6068 "./stb_image.h"
 var $12=$4; //@line 6068 "./stb_image.h"
 HEAP32[(($12)>>2)]=$11; //@line 6068 "./stb_image.h"
 var $13=$2; //@line 6069 "./stb_image.h"
 var $14=_stbi__at_eof($13); //@line 6069 "./stb_image.h"
 var $15=($14|0)!=0; //@line 6069 "./stb_image.h"
 if($15){label=2;break;}else{label=3;break;} //@line 6069 "./stb_image.h"
 case 2: 
 $1=0; //@line 6069 "./stb_image.h"
 label=16;break; //@line 6069 "./stb_image.h"
 case 3: 
 var $18=$3; //@line 6070 "./stb_image.h"
 var $19=HEAP32[(($18)>>2)]; //@line 6070 "./stb_image.h"
 var $20=($19|0)!=0; //@line 6070 "./stb_image.h"
 if($20){label=4;break;}else{label=6;break;} //@line 6070 "./stb_image.h"
 case 4: 
 var $22=$3; //@line 6070 "./stb_image.h"
 var $23=HEAP32[(($22)>>2)]; //@line 6070 "./stb_image.h"
 var $24=(((268435456)/(($23|0)))&-1); //@line 6070 "./stb_image.h"
 var $25=$4; //@line 6070 "./stb_image.h"
 var $26=HEAP32[(($25)>>2)]; //@line 6070 "./stb_image.h"
 var $27=($24|0)<($26|0); //@line 6070 "./stb_image.h"
 if($27){label=5;break;}else{label=6;break;} //@line 6070 "./stb_image.h"
 case 5: 
 var $29=$2; //@line 6071 "./stb_image.h"
 _stbi__rewind($29); //@line 6071 "./stb_image.h"
 $1=0; //@line 6072 "./stb_image.h"
 label=16;break; //@line 6072 "./stb_image.h"
 case 6: 
 var $31=$2; //@line 6075 "./stb_image.h"
 _stbi__skip($31,8); //@line 6075 "./stb_image.h"
 label=7;break; //@line 6077 "./stb_image.h"
 case 7: 
 var $33=$num_packets; //@line 6080 "./stb_image.h"
 var $34=($33|0)==10; //@line 6080 "./stb_image.h"
 if($34){label=8;break;}else{label=9;break;} //@line 6080 "./stb_image.h"
 case 8: 
 $1=0; //@line 6081 "./stb_image.h"
 label=16;break; //@line 6081 "./stb_image.h"
 case 9: 
 var $37=$num_packets; //@line 6083 "./stb_image.h"
 var $38=((($37)+(1))|0); //@line 6083 "./stb_image.h"
 $num_packets=$38; //@line 6083 "./stb_image.h"
 var $39=(($packets+((($37)*(3))&-1))|0); //@line 6083 "./stb_image.h"
 $packet=$39; //@line 6083 "./stb_image.h"
 var $40=$2; //@line 6084 "./stb_image.h"
 var $41=_stbi__get8($40); //@line 6084 "./stb_image.h"
 var $42=($41&255); //@line 6084 "./stb_image.h"
 $chained=$42; //@line 6084 "./stb_image.h"
 var $43=$2; //@line 6085 "./stb_image.h"
 var $44=_stbi__get8($43); //@line 6085 "./stb_image.h"
 var $45=$packet; //@line 6085 "./stb_image.h"
 var $46=(($45)|0); //@line 6085 "./stb_image.h"
 HEAP8[($46)]=$44; //@line 6085 "./stb_image.h"
 var $47=$2; //@line 6086 "./stb_image.h"
 var $48=_stbi__get8($47); //@line 6086 "./stb_image.h"
 var $49=$packet; //@line 6086 "./stb_image.h"
 var $50=(($49+1)|0); //@line 6086 "./stb_image.h"
 HEAP8[($50)]=$48; //@line 6086 "./stb_image.h"
 var $51=$2; //@line 6087 "./stb_image.h"
 var $52=_stbi__get8($51); //@line 6087 "./stb_image.h"
 var $53=$packet; //@line 6087 "./stb_image.h"
 var $54=(($53+2)|0); //@line 6087 "./stb_image.h"
 HEAP8[($54)]=$52; //@line 6087 "./stb_image.h"
 var $55=$packet; //@line 6088 "./stb_image.h"
 var $56=(($55+2)|0); //@line 6088 "./stb_image.h"
 var $57=HEAP8[($56)]; //@line 6088 "./stb_image.h"
 var $58=($57&255); //@line 6088 "./stb_image.h"
 var $59=$act_comp; //@line 6088 "./stb_image.h"
 var $60=$59|$58; //@line 6088 "./stb_image.h"
 $act_comp=$60; //@line 6088 "./stb_image.h"
 var $61=$2; //@line 6090 "./stb_image.h"
 var $62=_stbi__at_eof($61); //@line 6090 "./stb_image.h"
 var $63=($62|0)!=0; //@line 6090 "./stb_image.h"
 if($63){label=10;break;}else{label=11;break;} //@line 6090 "./stb_image.h"
 case 10: 
 var $65=$2; //@line 6091 "./stb_image.h"
 _stbi__rewind($65); //@line 6091 "./stb_image.h"
 $1=0; //@line 6092 "./stb_image.h"
 label=16;break; //@line 6092 "./stb_image.h"
 case 11: 
 var $67=$packet; //@line 6094 "./stb_image.h"
 var $68=(($67)|0); //@line 6094 "./stb_image.h"
 var $69=HEAP8[($68)]; //@line 6094 "./stb_image.h"
 var $70=($69&255); //@line 6094 "./stb_image.h"
 var $71=($70|0)!=8; //@line 6094 "./stb_image.h"
 if($71){label=12;break;}else{label=13;break;} //@line 6094 "./stb_image.h"
 case 12: 
 var $73=$2; //@line 6095 "./stb_image.h"
 _stbi__rewind($73); //@line 6095 "./stb_image.h"
 $1=0; //@line 6096 "./stb_image.h"
 label=16;break; //@line 6096 "./stb_image.h"
 case 13: 
 label=14;break; //@line 6098 "./stb_image.h"
 case 14: 
 var $76=$chained; //@line 6098 "./stb_image.h"
 var $77=($76|0)!=0; //@line 6098 "./stb_image.h"
 if($77){label=7;break;}else{label=15;break;} //@line 6098 "./stb_image.h"
 case 15: 
 var $79=$act_comp; //@line 6100 "./stb_image.h"
 var $80=$79&16; //@line 6100 "./stb_image.h"
 var $81=($80|0)!=0; //@line 6100 "./stb_image.h"
 var $82=($81?4:3); //@line 6100 "./stb_image.h"
 var $83=$5; //@line 6100 "./stb_image.h"
 HEAP32[(($83)>>2)]=$82; //@line 6100 "./stb_image.h"
 $1=1; //@line 6102 "./stb_image.h"
 label=16;break; //@line 6102 "./stb_image.h"
 case 16: 
 var $85=$1; //@line 6102 "./stb_image.h"
 STACKTOP=sp;return $85; //@line 6102 "./stb_image.h"
  default: assert(0, "bad label: " + label);
 }

}


function _stbi__pnm_info($s,$x,$y,$comp){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $maxv;
 var $c=sp;
 var $p;
 var $t;
 $2=$s;
 $3=$x;
 $4=$y;
 $5=$comp;
 var $6=$2; //@line 6185 "./stb_image.h"
 _stbi__rewind($6); //@line 6185 "./stb_image.h"
 var $7=$2; //@line 6188 "./stb_image.h"
 var $8=_stbi__get8($7); //@line 6188 "./stb_image.h"
 $p=$8; //@line 6188 "./stb_image.h"
 var $9=$2; //@line 6189 "./stb_image.h"
 var $10=_stbi__get8($9); //@line 6189 "./stb_image.h"
 $t=$10; //@line 6189 "./stb_image.h"
 var $11=$p; //@line 6190 "./stb_image.h"
 var $12=(($11<<24)>>24); //@line 6190 "./stb_image.h"
 var $13=($12|0)!=80; //@line 6190 "./stb_image.h"
 if($13){label=4;break;}else{label=2;break;} //@line 6190 "./stb_image.h"
 case 2: 
 var $15=$t; //@line 6190 "./stb_image.h"
 var $16=(($15<<24)>>24); //@line 6190 "./stb_image.h"
 var $17=($16|0)!=53; //@line 6190 "./stb_image.h"
 if($17){label=3;break;}else{label=5;break;} //@line 6190 "./stb_image.h"
 case 3: 
 var $19=$t; //@line 6190 "./stb_image.h"
 var $20=(($19<<24)>>24); //@line 6190 "./stb_image.h"
 var $21=($20|0)!=54; //@line 6190 "./stb_image.h"
 if($21){label=4;break;}else{label=5;break;} //@line 6190 "./stb_image.h"
 case 4: 
 var $23=$2; //@line 6191 "./stb_image.h"
 _stbi__rewind($23); //@line 6191 "./stb_image.h"
 $1=0; //@line 6192 "./stb_image.h"
 label=8;break; //@line 6192 "./stb_image.h"
 case 5: 
 var $25=$t; //@line 6195 "./stb_image.h"
 var $26=(($25<<24)>>24); //@line 6195 "./stb_image.h"
 var $27=($26|0)==54; //@line 6195 "./stb_image.h"
 var $28=($27?3:1); //@line 6195 "./stb_image.h"
 var $29=$5; //@line 6195 "./stb_image.h"
 HEAP32[(($29)>>2)]=$28; //@line 6195 "./stb_image.h"
 var $30=$2; //@line 6197 "./stb_image.h"
 var $31=_stbi__get8($30); //@line 6197 "./stb_image.h"
 HEAP8[($c)]=$31; //@line 6197 "./stb_image.h"
 var $32=$2; //@line 6198 "./stb_image.h"
 _stbi__pnm_skip_whitespace($32,$c); //@line 6198 "./stb_image.h"
 var $33=$2; //@line 6200 "./stb_image.h"
 var $34=_stbi__pnm_getinteger($33,$c); //@line 6200 "./stb_image.h"
 var $35=$3; //@line 6200 "./stb_image.h"
 HEAP32[(($35)>>2)]=$34; //@line 6200 "./stb_image.h"
 var $36=$2; //@line 6201 "./stb_image.h"
 _stbi__pnm_skip_whitespace($36,$c); //@line 6201 "./stb_image.h"
 var $37=$2; //@line 6203 "./stb_image.h"
 var $38=_stbi__pnm_getinteger($37,$c); //@line 6203 "./stb_image.h"
 var $39=$4; //@line 6203 "./stb_image.h"
 HEAP32[(($39)>>2)]=$38; //@line 6203 "./stb_image.h"
 var $40=$2; //@line 6204 "./stb_image.h"
 _stbi__pnm_skip_whitespace($40,$c); //@line 6204 "./stb_image.h"
 var $41=$2; //@line 6206 "./stb_image.h"
 var $42=_stbi__pnm_getinteger($41,$c); //@line 6206 "./stb_image.h"
 $maxv=$42; //@line 6206 "./stb_image.h"
 var $43=$maxv; //@line 6208 "./stb_image.h"
 var $44=($43|0)>255; //@line 6208 "./stb_image.h"
 if($44){label=6;break;}else{label=7;break;} //@line 6208 "./stb_image.h"
 case 6: 
 var $46=_stbi__err(137832); //@line 6209 "./stb_image.h"
 $1=$46; //@line 6209 "./stb_image.h"
 label=8;break; //@line 6209 "./stb_image.h"
 case 7: 
 $1=1; //@line 6211 "./stb_image.h"
 label=8;break; //@line 6211 "./stb_image.h"
 case 8: 
 var $49=$1; //@line 6212 "./stb_image.h"
 STACKTOP=sp;return $49; //@line 6212 "./stb_image.h"
  default: assert(0, "bad label: " + label);
 }

}


function _stbi__hdr_info($s,$x,$y,$comp){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+1032)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $buffer=sp;
 var $token=(sp)+(1024);
 var $valid;
 $2=$s;
 $3=$x;
 $4=$y;
 $5=$comp;
 $valid=0; //@line 5960 "./stb_image.h"
 var $6=$2; //@line 5962 "./stb_image.h"
 var $7=(($buffer)|0); //@line 5962 "./stb_image.h"
 var $8=_stbi__hdr_gettoken($6,$7); //@line 5962 "./stb_image.h"
 var $9=_strcmp($8,138840); //@line 5962 "./stb_image.h"
 var $10=($9|0)!=0; //@line 5962 "./stb_image.h"
 if($10){label=2;break;}else{label=3;break;} //@line 5962 "./stb_image.h"
 case 2: 
 var $12=$2; //@line 5963 "./stb_image.h"
 _stbi__rewind($12); //@line 5963 "./stb_image.h"
 $1=0; //@line 5964 "./stb_image.h"
 label=19;break; //@line 5964 "./stb_image.h"
 case 3: 
 label=4;break; //@line 5967 "./stb_image.h"
 case 4: 
 var $15=$2; //@line 5968 "./stb_image.h"
 var $16=(($buffer)|0); //@line 5968 "./stb_image.h"
 var $17=_stbi__hdr_gettoken($15,$16); //@line 5968 "./stb_image.h"
 HEAP32[(($token)>>2)]=$17; //@line 5968 "./stb_image.h"
 var $18=HEAP32[(($token)>>2)]; //@line 5969 "./stb_image.h"
 var $19=(($18)|0); //@line 5969 "./stb_image.h"
 var $20=HEAP8[($19)]; //@line 5969 "./stb_image.h"
 var $21=(($20<<24)>>24); //@line 5969 "./stb_image.h"
 var $22=($21|0)==0; //@line 5969 "./stb_image.h"
 if($22){label=5;break;}else{label=6;break;} //@line 5969 "./stb_image.h"
 case 5: 
 label=9;break; //@line 5969 "./stb_image.h"
 case 6: 
 var $25=HEAP32[(($token)>>2)]; //@line 5970 "./stb_image.h"
 var $26=_strcmp($25,138504); //@line 5970 "./stb_image.h"
 var $27=($26|0)==0; //@line 5970 "./stb_image.h"
 if($27){label=7;break;}else{label=8;break;} //@line 5970 "./stb_image.h"
 case 7: 
 $valid=1; //@line 5970 "./stb_image.h"
 label=8;break; //@line 5970 "./stb_image.h"
 case 8: 
 label=4;break; //@line 5971 "./stb_image.h"
 case 9: 
 var $31=$valid; //@line 5973 "./stb_image.h"
 var $32=($31|0)!=0; //@line 5973 "./stb_image.h"
 if($32){label=11;break;}else{label=10;break;} //@line 5973 "./stb_image.h"
 case 10: 
 var $34=$2; //@line 5974 "./stb_image.h"
 _stbi__rewind($34); //@line 5974 "./stb_image.h"
 $1=0; //@line 5975 "./stb_image.h"
 label=19;break; //@line 5975 "./stb_image.h"
 case 11: 
 var $36=$2; //@line 5977 "./stb_image.h"
 var $37=(($buffer)|0); //@line 5977 "./stb_image.h"
 var $38=_stbi__hdr_gettoken($36,$37); //@line 5977 "./stb_image.h"
 HEAP32[(($token)>>2)]=$38; //@line 5977 "./stb_image.h"
 var $39=HEAP32[(($token)>>2)]; //@line 5978 "./stb_image.h"
 var $40=_strncmp($39,138312,3); //@line 5978 "./stb_image.h"
 var $41=($40|0)!=0; //@line 5978 "./stb_image.h"
 if($41){label=12;break;}else{label=13;break;} //@line 5978 "./stb_image.h"
 case 12: 
 var $43=$2; //@line 5979 "./stb_image.h"
 _stbi__rewind($43); //@line 5979 "./stb_image.h"
 $1=0; //@line 5980 "./stb_image.h"
 label=19;break; //@line 5980 "./stb_image.h"
 case 13: 
 var $45=HEAP32[(($token)>>2)]; //@line 5982 "./stb_image.h"
 var $46=(($45+3)|0); //@line 5982 "./stb_image.h"
 HEAP32[(($token)>>2)]=$46; //@line 5982 "./stb_image.h"
 var $47=HEAP32[(($token)>>2)]; //@line 5983 "./stb_image.h"
 var $48=_strtol($47,$token,10); //@line 5983 "./stb_image.h"
 var $49=$4; //@line 5983 "./stb_image.h"
 HEAP32[(($49)>>2)]=$48; //@line 5983 "./stb_image.h"
 label=14;break; //@line 5984 "./stb_image.h"
 case 14: 
 var $51=HEAP32[(($token)>>2)]; //@line 5984 "./stb_image.h"
 var $52=HEAP8[($51)]; //@line 5984 "./stb_image.h"
 var $53=(($52<<24)>>24); //@line 5984 "./stb_image.h"
 var $54=($53|0)==32; //@line 5984 "./stb_image.h"
 if($54){label=15;break;}else{label=16;break;} //@line 5984 "./stb_image.h"
 case 15: 
 var $56=HEAP32[(($token)>>2)]; //@line 5984 "./stb_image.h"
 var $57=(($56+1)|0); //@line 5984 "./stb_image.h"
 HEAP32[(($token)>>2)]=$57; //@line 5984 "./stb_image.h"
 label=14;break; //@line 5984 "./stb_image.h"
 case 16: 
 var $59=HEAP32[(($token)>>2)]; //@line 5985 "./stb_image.h"
 var $60=_strncmp($59,138096,3); //@line 5985 "./stb_image.h"
 var $61=($60|0)!=0; //@line 5985 "./stb_image.h"
 if($61){label=17;break;}else{label=18;break;} //@line 5985 "./stb_image.h"
 case 17: 
 var $63=$2; //@line 5986 "./stb_image.h"
 _stbi__rewind($63); //@line 5986 "./stb_image.h"
 $1=0; //@line 5987 "./stb_image.h"
 label=19;break; //@line 5987 "./stb_image.h"
 case 18: 
 var $65=HEAP32[(($token)>>2)]; //@line 5989 "./stb_image.h"
 var $66=(($65+3)|0); //@line 5989 "./stb_image.h"
 HEAP32[(($token)>>2)]=$66; //@line 5989 "./stb_image.h"
 var $67=HEAP32[(($token)>>2)]; //@line 5990 "./stb_image.h"
 var $68=_strtol($67,0,10); //@line 5990 "./stb_image.h"
 var $69=$3; //@line 5990 "./stb_image.h"
 HEAP32[(($69)>>2)]=$68; //@line 5990 "./stb_image.h"
 var $70=$5; //@line 5991 "./stb_image.h"
 HEAP32[(($70)>>2)]=3; //@line 5991 "./stb_image.h"
 $1=1; //@line 5992 "./stb_image.h"
 label=19;break; //@line 5992 "./stb_image.h"
 case 19: 
 var $72=$1; //@line 5992 "./stb_image.h"
 STACKTOP=sp;return $72; //@line 5992 "./stb_image.h"
  default: assert(0, "bad label: " + label);
 }

}


function _stbi__tga_info($s,$x,$y,$comp){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $tga_w;
 var $tga_h;
 var $tga_comp;
 var $sz;
 $2=$s;
 $3=$x;
 $4=$y;
 $5=$comp;
 var $6=$2; //@line 4788 "./stb_image.h"
 var $7=_stbi__get8($6); //@line 4788 "./stb_image.h"
 var $8=$2; //@line 4789 "./stb_image.h"
 var $9=_stbi__get8($8); //@line 4789 "./stb_image.h"
 var $10=($9&255); //@line 4789 "./stb_image.h"
 $sz=$10; //@line 4789 "./stb_image.h"
 var $11=$sz; //@line 4790 "./stb_image.h"
 var $12=($11|0)>1; //@line 4790 "./stb_image.h"
 if($12){label=2;break;}else{label=3;break;} //@line 4790 "./stb_image.h"
 case 2: 
 var $14=$2; //@line 4791 "./stb_image.h"
 _stbi__rewind($14); //@line 4791 "./stb_image.h"
 $1=0; //@line 4792 "./stb_image.h"
 label=26;break; //@line 4792 "./stb_image.h"
 case 3: 
 var $16=$2; //@line 4794 "./stb_image.h"
 var $17=_stbi__get8($16); //@line 4794 "./stb_image.h"
 var $18=($17&255); //@line 4794 "./stb_image.h"
 $sz=$18; //@line 4794 "./stb_image.h"
 var $19=$sz; //@line 4796 "./stb_image.h"
 var $20=($19|0)!=1; //@line 4796 "./stb_image.h"
 if($20){label=4;break;}else{label=10;break;} //@line 4796 "./stb_image.h"
 case 4: 
 var $22=$sz; //@line 4796 "./stb_image.h"
 var $23=($22|0)!=2; //@line 4796 "./stb_image.h"
 if($23){label=5;break;}else{label=10;break;} //@line 4796 "./stb_image.h"
 case 5: 
 var $25=$sz; //@line 4796 "./stb_image.h"
 var $26=($25|0)!=3; //@line 4796 "./stb_image.h"
 if($26){label=6;break;}else{label=10;break;} //@line 4796 "./stb_image.h"
 case 6: 
 var $28=$sz; //@line 4796 "./stb_image.h"
 var $29=($28|0)!=9; //@line 4796 "./stb_image.h"
 if($29){label=7;break;}else{label=10;break;} //@line 4796 "./stb_image.h"
 case 7: 
 var $31=$sz; //@line 4796 "./stb_image.h"
 var $32=($31|0)!=10; //@line 4796 "./stb_image.h"
 if($32){label=8;break;}else{label=10;break;} //@line 4796 "./stb_image.h"
 case 8: 
 var $34=$sz; //@line 4796 "./stb_image.h"
 var $35=($34|0)!=11; //@line 4796 "./stb_image.h"
 if($35){label=9;break;}else{label=10;break;} //@line 4796 "./stb_image.h"
 case 9: 
 $1=0; //@line 4796 "./stb_image.h"
 label=26;break; //@line 4796 "./stb_image.h"
 case 10: 
 var $38=$2; //@line 4797 "./stb_image.h"
 _stbi__skip($38,9); //@line 4797 "./stb_image.h"
 var $39=$2; //@line 4798 "./stb_image.h"
 var $40=_stbi__get16le($39); //@line 4798 "./stb_image.h"
 $tga_w=$40; //@line 4798 "./stb_image.h"
 var $41=$tga_w; //@line 4799 "./stb_image.h"
 var $42=($41|0)<1; //@line 4799 "./stb_image.h"
 if($42){label=11;break;}else{label=12;break;} //@line 4799 "./stb_image.h"
 case 11: 
 var $44=$2; //@line 4800 "./stb_image.h"
 _stbi__rewind($44); //@line 4800 "./stb_image.h"
 $1=0; //@line 4801 "./stb_image.h"
 label=26;break; //@line 4801 "./stb_image.h"
 case 12: 
 var $46=$2; //@line 4803 "./stb_image.h"
 var $47=_stbi__get16le($46); //@line 4803 "./stb_image.h"
 $tga_h=$47; //@line 4803 "./stb_image.h"
 var $48=$tga_h; //@line 4804 "./stb_image.h"
 var $49=($48|0)<1; //@line 4804 "./stb_image.h"
 if($49){label=13;break;}else{label=14;break;} //@line 4804 "./stb_image.h"
 case 13: 
 var $51=$2; //@line 4805 "./stb_image.h"
 _stbi__rewind($51); //@line 4805 "./stb_image.h"
 $1=0; //@line 4806 "./stb_image.h"
 label=26;break; //@line 4806 "./stb_image.h"
 case 14: 
 var $53=$2; //@line 4808 "./stb_image.h"
 var $54=_stbi__get8($53); //@line 4808 "./stb_image.h"
 var $55=($54&255); //@line 4808 "./stb_image.h"
 $sz=$55; //@line 4808 "./stb_image.h"
 var $56=$sz; //@line 4810 "./stb_image.h"
 var $57=($56|0)!=8; //@line 4810 "./stb_image.h"
 if($57){label=15;break;}else{label=19;break;} //@line 4810 "./stb_image.h"
 case 15: 
 var $59=$sz; //@line 4810 "./stb_image.h"
 var $60=($59|0)!=16; //@line 4810 "./stb_image.h"
 if($60){label=16;break;}else{label=19;break;} //@line 4810 "./stb_image.h"
 case 16: 
 var $62=$sz; //@line 4810 "./stb_image.h"
 var $63=($62|0)!=24; //@line 4810 "./stb_image.h"
 if($63){label=17;break;}else{label=19;break;} //@line 4810 "./stb_image.h"
 case 17: 
 var $65=$sz; //@line 4810 "./stb_image.h"
 var $66=($65|0)!=32; //@line 4810 "./stb_image.h"
 if($66){label=18;break;}else{label=19;break;} //@line 4810 "./stb_image.h"
 case 18: 
 var $68=$2; //@line 4811 "./stb_image.h"
 _stbi__rewind($68); //@line 4811 "./stb_image.h"
 $1=0; //@line 4812 "./stb_image.h"
 label=26;break; //@line 4812 "./stb_image.h"
 case 19: 
 var $70=$sz; //@line 4814 "./stb_image.h"
 $tga_comp=$70; //@line 4814 "./stb_image.h"
 var $71=$3; //@line 4815 "./stb_image.h"
 var $72=($71|0)!=0; //@line 4815 "./stb_image.h"
 if($72){label=20;break;}else{label=21;break;} //@line 4815 "./stb_image.h"
 case 20: 
 var $74=$tga_w; //@line 4815 "./stb_image.h"
 var $75=$3; //@line 4815 "./stb_image.h"
 HEAP32[(($75)>>2)]=$74; //@line 4815 "./stb_image.h"
 label=21;break; //@line 4815 "./stb_image.h"
 case 21: 
 var $77=$4; //@line 4816 "./stb_image.h"
 var $78=($77|0)!=0; //@line 4816 "./stb_image.h"
 if($78){label=22;break;}else{label=23;break;} //@line 4816 "./stb_image.h"
 case 22: 
 var $80=$tga_h; //@line 4816 "./stb_image.h"
 var $81=$4; //@line 4816 "./stb_image.h"
 HEAP32[(($81)>>2)]=$80; //@line 4816 "./stb_image.h"
 label=23;break; //@line 4816 "./stb_image.h"
 case 23: 
 var $83=$5; //@line 4817 "./stb_image.h"
 var $84=($83|0)!=0; //@line 4817 "./stb_image.h"
 if($84){label=24;break;}else{label=25;break;} //@line 4817 "./stb_image.h"
 case 24: 
 var $86=$tga_comp; //@line 4817 "./stb_image.h"
 var $87=(((($86|0))/(8))&-1); //@line 4817 "./stb_image.h"
 var $88=$5; //@line 4817 "./stb_image.h"
 HEAP32[(($88)>>2)]=$87; //@line 4817 "./stb_image.h"
 label=25;break; //@line 4817 "./stb_image.h"
 case 25: 
 $1=1; //@line 4818 "./stb_image.h"
 label=26;break; //@line 4818 "./stb_image.h"
 case 26: 
 var $91=$1; //@line 4818 "./stb_image.h"
 STACKTOP=sp;return $91; //@line 4818 "./stb_image.h"
  default: assert(0, "bad label: " + label);
 }

}


function _stbi__get8($s){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 $2=$s;
 var $3=$2; //@line 1214 "./stb_image.h"
 var $4=(($3+168)|0); //@line 1214 "./stb_image.h"
 var $5=HEAP32[(($4)>>2)]; //@line 1214 "./stb_image.h"
 var $6=$2; //@line 1214 "./stb_image.h"
 var $7=(($6+172)|0); //@line 1214 "./stb_image.h"
 var $8=HEAP32[(($7)>>2)]; //@line 1214 "./stb_image.h"
 var $9=($5>>>0)<($8>>>0); //@line 1214 "./stb_image.h"
 if($9){label=2;break;}else{label=3;break;} //@line 1214 "./stb_image.h"
 case 2: 
 var $11=$2; //@line 1215 "./stb_image.h"
 var $12=(($11+168)|0); //@line 1215 "./stb_image.h"
 var $13=HEAP32[(($12)>>2)]; //@line 1215 "./stb_image.h"
 var $14=(($13+1)|0); //@line 1215 "./stb_image.h"
 HEAP32[(($12)>>2)]=$14; //@line 1215 "./stb_image.h"
 var $15=HEAP8[($13)]; //@line 1215 "./stb_image.h"
 $1=$15; //@line 1215 "./stb_image.h"
 label=6;break; //@line 1215 "./stb_image.h"
 case 3: 
 var $17=$2; //@line 1216 "./stb_image.h"
 var $18=(($17+32)|0); //@line 1216 "./stb_image.h"
 var $19=HEAP32[(($18)>>2)]; //@line 1216 "./stb_image.h"
 var $20=($19|0)!=0; //@line 1216 "./stb_image.h"
 if($20){label=4;break;}else{label=5;break;} //@line 1216 "./stb_image.h"
 case 4: 
 var $22=$2; //@line 1217 "./stb_image.h"
 _stbi__refill_buffer($22); //@line 1217 "./stb_image.h"
 var $23=$2; //@line 1218 "./stb_image.h"
 var $24=(($23+168)|0); //@line 1218 "./stb_image.h"
 var $25=HEAP32[(($24)>>2)]; //@line 1218 "./stb_image.h"
 var $26=(($25+1)|0); //@line 1218 "./stb_image.h"
 HEAP32[(($24)>>2)]=$26; //@line 1218 "./stb_image.h"
 var $27=HEAP8[($25)]; //@line 1218 "./stb_image.h"
 $1=$27; //@line 1218 "./stb_image.h"
 label=6;break; //@line 1218 "./stb_image.h"
 case 5: 
 $1=0; //@line 1220 "./stb_image.h"
 label=6;break; //@line 1220 "./stb_image.h"
 case 6: 
 var $30=$1; //@line 1221 "./stb_image.h"
 STACKTOP=sp;return $30; //@line 1221 "./stb_image.h"
  default: assert(0, "bad label: " + label);
 }

}


function _stbi__rewind($s){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 $1=$s;
 var $2=$1; //@line 816 "./stb_image.h"
 var $3=(($2+176)|0); //@line 816 "./stb_image.h"
 var $4=HEAP32[(($3)>>2)]; //@line 816 "./stb_image.h"
 var $5=$1; //@line 816 "./stb_image.h"
 var $6=(($5+168)|0); //@line 816 "./stb_image.h"
 HEAP32[(($6)>>2)]=$4; //@line 816 "./stb_image.h"
 STACKTOP=sp;return; //@line 817 "./stb_image.h"
}


function _stbi__skip($s,$n){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $blen;
 $1=$s;
 $2=$n;
 var $3=$2; //@line 1237 "./stb_image.h"
 var $4=($3|0)<0; //@line 1237 "./stb_image.h"
 if($4){label=2;break;}else{label=3;break;} //@line 1237 "./stb_image.h"
 case 2: 
 var $6=$1; //@line 1238 "./stb_image.h"
 var $7=(($6+172)|0); //@line 1238 "./stb_image.h"
 var $8=HEAP32[(($7)>>2)]; //@line 1238 "./stb_image.h"
 var $9=$1; //@line 1238 "./stb_image.h"
 var $10=(($9+168)|0); //@line 1238 "./stb_image.h"
 HEAP32[(($10)>>2)]=$8; //@line 1238 "./stb_image.h"
 label=8;break; //@line 1239 "./stb_image.h"
 case 3: 
 var $12=$1; //@line 1241 "./stb_image.h"
 var $13=(($12+16)|0); //@line 1241 "./stb_image.h"
 var $14=(($13)|0); //@line 1241 "./stb_image.h"
 var $15=HEAP32[(($14)>>2)]; //@line 1241 "./stb_image.h"
 var $16=($15|0)!=0; //@line 1241 "./stb_image.h"
 if($16){label=4;break;}else{label=7;break;} //@line 1241 "./stb_image.h"
 case 4: 
 var $18=$1; //@line 1242 "./stb_image.h"
 var $19=(($18+172)|0); //@line 1242 "./stb_image.h"
 var $20=HEAP32[(($19)>>2)]; //@line 1242 "./stb_image.h"
 var $21=$1; //@line 1242 "./stb_image.h"
 var $22=(($21+168)|0); //@line 1242 "./stb_image.h"
 var $23=HEAP32[(($22)>>2)]; //@line 1242 "./stb_image.h"
 var $24=$20; //@line 1242 "./stb_image.h"
 var $25=$23; //@line 1242 "./stb_image.h"
 var $26=((($24)-($25))|0); //@line 1242 "./stb_image.h"
 $blen=$26; //@line 1242 "./stb_image.h"
 var $27=$blen; //@line 1243 "./stb_image.h"
 var $28=$2; //@line 1243 "./stb_image.h"
 var $29=($27|0)<($28|0); //@line 1243 "./stb_image.h"
 if($29){label=5;break;}else{label=6;break;} //@line 1243 "./stb_image.h"
 case 5: 
 var $31=$1; //@line 1244 "./stb_image.h"
 var $32=(($31+172)|0); //@line 1244 "./stb_image.h"
 var $33=HEAP32[(($32)>>2)]; //@line 1244 "./stb_image.h"
 var $34=$1; //@line 1244 "./stb_image.h"
 var $35=(($34+168)|0); //@line 1244 "./stb_image.h"
 HEAP32[(($35)>>2)]=$33; //@line 1244 "./stb_image.h"
 var $36=$1; //@line 1245 "./stb_image.h"
 var $37=(($36+16)|0); //@line 1245 "./stb_image.h"
 var $38=(($37+4)|0); //@line 1245 "./stb_image.h"
 var $39=HEAP32[(($38)>>2)]; //@line 1245 "./stb_image.h"
 var $40=$1; //@line 1245 "./stb_image.h"
 var $41=(($40+28)|0); //@line 1245 "./stb_image.h"
 var $42=HEAP32[(($41)>>2)]; //@line 1245 "./stb_image.h"
 var $43=$2; //@line 1245 "./stb_image.h"
 var $44=$blen; //@line 1245 "./stb_image.h"
 var $45=((($43)-($44))|0); //@line 1245 "./stb_image.h"
 FUNCTION_TABLE[$39]($42,$45); //@line 1245 "./stb_image.h"
 label=8;break; //@line 1246 "./stb_image.h"
 case 6: 
 label=7;break; //@line 1248 "./stb_image.h"
 case 7: 
 var $48=$2; //@line 1249 "./stb_image.h"
 var $49=$1; //@line 1249 "./stb_image.h"
 var $50=(($49+168)|0); //@line 1249 "./stb_image.h"
 var $51=HEAP32[(($50)>>2)]; //@line 1249 "./stb_image.h"
 var $52=(($51+$48)|0); //@line 1249 "./stb_image.h"
 HEAP32[(($50)>>2)]=$52; //@line 1249 "./stb_image.h"
 label=8;break; //@line 1249 "./stb_image.h"
 case 8: 
 STACKTOP=sp;return; //@line 1249 "./stb_image.h"
  default: assert(0, "bad label: " + label);
 }

}


function _stbi__get16le($s){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 var $z;
 $1=$s;
 var $2=$1; //@line 1290 "./stb_image.h"
 var $3=_stbi__get8($2); //@line 1290 "./stb_image.h"
 var $4=($3&255); //@line 1290 "./stb_image.h"
 $z=$4; //@line 1290 "./stb_image.h"
 var $5=$z; //@line 1291 "./stb_image.h"
 var $6=$1; //@line 1291 "./stb_image.h"
 var $7=_stbi__get8($6); //@line 1291 "./stb_image.h"
 var $8=($7&255); //@line 1291 "./stb_image.h"
 var $9=$8<<8; //@line 1291 "./stb_image.h"
 var $10=((($5)+($9))|0); //@line 1291 "./stb_image.h"
 STACKTOP=sp;return $10; //@line 1291 "./stb_image.h"
}


function _stbi__refill_buffer($s){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $n;
 $1=$s;
 var $2=$1; //@line 1198 "./stb_image.h"
 var $3=(($2+16)|0); //@line 1198 "./stb_image.h"
 var $4=(($3)|0); //@line 1198 "./stb_image.h"
 var $5=HEAP32[(($4)>>2)]; //@line 1198 "./stb_image.h"
 var $6=$1; //@line 1198 "./stb_image.h"
 var $7=(($6+28)|0); //@line 1198 "./stb_image.h"
 var $8=HEAP32[(($7)>>2)]; //@line 1198 "./stb_image.h"
 var $9=$1; //@line 1198 "./stb_image.h"
 var $10=(($9+40)|0); //@line 1198 "./stb_image.h"
 var $11=(($10)|0); //@line 1198 "./stb_image.h"
 var $12=$1; //@line 1198 "./stb_image.h"
 var $13=(($12+36)|0); //@line 1198 "./stb_image.h"
 var $14=HEAP32[(($13)>>2)]; //@line 1198 "./stb_image.h"
 var $15=FUNCTION_TABLE[$5]($8,$11,$14); //@line 1198 "./stb_image.h"
 $n=$15; //@line 1198 "./stb_image.h"
 var $16=$n; //@line 1199 "./stb_image.h"
 var $17=($16|0)==0; //@line 1199 "./stb_image.h"
 if($17){label=2;break;}else{label=3;break;} //@line 1199 "./stb_image.h"
 case 2: 
 var $19=$1; //@line 1202 "./stb_image.h"
 var $20=(($19+32)|0); //@line 1202 "./stb_image.h"
 HEAP32[(($20)>>2)]=0; //@line 1202 "./stb_image.h"
 var $21=$1; //@line 1203 "./stb_image.h"
 var $22=(($21+40)|0); //@line 1203 "./stb_image.h"
 var $23=(($22)|0); //@line 1203 "./stb_image.h"
 var $24=$1; //@line 1203 "./stb_image.h"
 var $25=(($24+168)|0); //@line 1203 "./stb_image.h"
 HEAP32[(($25)>>2)]=$23; //@line 1203 "./stb_image.h"
 var $26=$1; //@line 1204 "./stb_image.h"
 var $27=(($26+40)|0); //@line 1204 "./stb_image.h"
 var $28=(($27)|0); //@line 1204 "./stb_image.h"
 var $29=(($28+1)|0); //@line 1204 "./stb_image.h"
 var $30=$1; //@line 1204 "./stb_image.h"
 var $31=(($30+172)|0); //@line 1204 "./stb_image.h"
 HEAP32[(($31)>>2)]=$29; //@line 1204 "./stb_image.h"
 var $32=$1; //@line 1205 "./stb_image.h"
 var $33=(($32+168)|0); //@line 1205 "./stb_image.h"
 var $34=HEAP32[(($33)>>2)]; //@line 1205 "./stb_image.h"
 HEAP8[($34)]=0; //@line 1205 "./stb_image.h"
 label=4;break; //@line 1206 "./stb_image.h"
 case 3: 
 var $36=$1; //@line 1207 "./stb_image.h"
 var $37=(($36+40)|0); //@line 1207 "./stb_image.h"
 var $38=(($37)|0); //@line 1207 "./stb_image.h"
 var $39=$1; //@line 1207 "./stb_image.h"
 var $40=(($39+168)|0); //@line 1207 "./stb_image.h"
 HEAP32[(($40)>>2)]=$38; //@line 1207 "./stb_image.h"
 var $41=$1; //@line 1208 "./stb_image.h"
 var $42=(($41+40)|0); //@line 1208 "./stb_image.h"
 var $43=(($42)|0); //@line 1208 "./stb_image.h"
 var $44=$n; //@line 1208 "./stb_image.h"
 var $45=(($43+$44)|0); //@line 1208 "./stb_image.h"
 var $46=$1; //@line 1208 "./stb_image.h"
 var $47=(($46+172)|0); //@line 1208 "./stb_image.h"
 HEAP32[(($47)>>2)]=$45; //@line 1208 "./stb_image.h"
 label=4;break;
 case 4: 
 STACKTOP=sp;return; //@line 1210 "./stb_image.h"
  default: assert(0, "bad label: " + label);
 }

}


function _stbi__hdr_gettoken($z,$buffer){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $len;
 var $c;
 $1=$z;
 $2=$buffer;
 $len=0; //@line 5798 "./stb_image.h"
 $c=0; //@line 5799 "./stb_image.h"
 var $3=$1; //@line 5801 "./stb_image.h"
 var $4=_stbi__get8($3); //@line 5801 "./stb_image.h"
 $c=$4; //@line 5801 "./stb_image.h"
 label=2;break; //@line 5803 "./stb_image.h"
 case 2: 
 var $6=$1; //@line 5803 "./stb_image.h"
 var $7=_stbi__at_eof($6); //@line 5803 "./stb_image.h"
 var $8=($7|0)!=0; //@line 5803 "./stb_image.h"
 if($8){var $14=0;label=4;break;}else{label=3;break;} //@line 5803 "./stb_image.h"
 case 3: 
 var $10=$c; //@line 5803 "./stb_image.h"
 var $11=(($10<<24)>>24); //@line 5803 "./stb_image.h"
 var $12=($11|0)!=10; //@line 5803 "./stb_image.h"
 var $14=$12;label=4;break;
 case 4: 
 var $14;
 if($14){label=5;break;}else{label=13;break;}
 case 5: 
 var $16=$c; //@line 5804 "./stb_image.h"
 var $17=$len; //@line 5804 "./stb_image.h"
 var $18=((($17)+(1))|0); //@line 5804 "./stb_image.h"
 $len=$18; //@line 5804 "./stb_image.h"
 var $19=$2; //@line 5804 "./stb_image.h"
 var $20=(($19+$17)|0); //@line 5804 "./stb_image.h"
 HEAP8[($20)]=$16; //@line 5804 "./stb_image.h"
 var $21=$len; //@line 5805 "./stb_image.h"
 var $22=($21|0)==1023; //@line 5805 "./stb_image.h"
 if($22){label=6;break;}else{label=12;break;} //@line 5805 "./stb_image.h"
 case 6: 
 label=7;break; //@line 5807 "./stb_image.h"
 case 7: 
 var $25=$1; //@line 5807 "./stb_image.h"
 var $26=_stbi__at_eof($25); //@line 5807 "./stb_image.h"
 var $27=($26|0)!=0; //@line 5807 "./stb_image.h"
 if($27){var $34=0;label=9;break;}else{label=8;break;} //@line 5807 "./stb_image.h"
 case 8: 
 var $29=$1; //@line 5807 "./stb_image.h"
 var $30=_stbi__get8($29); //@line 5807 "./stb_image.h"
 var $31=($30&255); //@line 5807 "./stb_image.h"
 var $32=($31|0)!=10; //@line 5807 "./stb_image.h"
 var $34=$32;label=9;break;
 case 9: 
 var $34;
 if($34){label=10;break;}else{label=11;break;}
 case 10: 
 label=7;break;
 case 11: 
 label=13;break; //@line 5809 "./stb_image.h"
 case 12: 
 var $38=$1; //@line 5811 "./stb_image.h"
 var $39=_stbi__get8($38); //@line 5811 "./stb_image.h"
 $c=$39; //@line 5811 "./stb_image.h"
 label=2;break; //@line 5812 "./stb_image.h"
 case 13: 
 var $41=$len; //@line 5814 "./stb_image.h"
 var $42=$2; //@line 5814 "./stb_image.h"
 var $43=(($42+$41)|0); //@line 5814 "./stb_image.h"
 HEAP8[($43)]=0; //@line 5814 "./stb_image.h"
 var $44=$2; //@line 5815 "./stb_image.h"
 STACKTOP=sp;return $44; //@line 5815 "./stb_image.h"
  default: assert(0, "bad label: " + label);
 }

}


function _stbi__at_eof($s){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 $2=$s;
 var $3=$2; //@line 1225 "./stb_image.h"
 var $4=(($3+16)|0); //@line 1225 "./stb_image.h"
 var $5=(($4)|0); //@line 1225 "./stb_image.h"
 var $6=HEAP32[(($5)>>2)]; //@line 1225 "./stb_image.h"
 var $7=($6|0)!=0; //@line 1225 "./stb_image.h"
 if($7){label=2;break;}else{label=7;break;} //@line 1225 "./stb_image.h"
 case 2: 
 var $9=$2; //@line 1226 "./stb_image.h"
 var $10=(($9+16)|0); //@line 1226 "./stb_image.h"
 var $11=(($10+8)|0); //@line 1226 "./stb_image.h"
 var $12=HEAP32[(($11)>>2)]; //@line 1226 "./stb_image.h"
 var $13=$2; //@line 1226 "./stb_image.h"
 var $14=(($13+28)|0); //@line 1226 "./stb_image.h"
 var $15=HEAP32[(($14)>>2)]; //@line 1226 "./stb_image.h"
 var $16=FUNCTION_TABLE[$12]($15); //@line 1226 "./stb_image.h"
 var $17=($16|0)!=0; //@line 1226 "./stb_image.h"
 if($17){label=4;break;}else{label=3;break;} //@line 1226 "./stb_image.h"
 case 3: 
 $1=0; //@line 1226 "./stb_image.h"
 label=8;break; //@line 1226 "./stb_image.h"
 case 4: 
 var $20=$2; //@line 1229 "./stb_image.h"
 var $21=(($20+32)|0); //@line 1229 "./stb_image.h"
 var $22=HEAP32[(($21)>>2)]; //@line 1229 "./stb_image.h"
 var $23=($22|0)==0; //@line 1229 "./stb_image.h"
 if($23){label=5;break;}else{label=6;break;} //@line 1229 "./stb_image.h"
 case 5: 
 $1=1; //@line 1229 "./stb_image.h"
 label=8;break; //@line 1229 "./stb_image.h"
 case 6: 
 label=7;break; //@line 1230 "./stb_image.h"
 case 7: 
 var $27=$2; //@line 1232 "./stb_image.h"
 var $28=(($27+168)|0); //@line 1232 "./stb_image.h"
 var $29=HEAP32[(($28)>>2)]; //@line 1232 "./stb_image.h"
 var $30=$2; //@line 1232 "./stb_image.h"
 var $31=(($30+172)|0); //@line 1232 "./stb_image.h"
 var $32=HEAP32[(($31)>>2)]; //@line 1232 "./stb_image.h"
 var $33=($29>>>0)>=($32>>>0); //@line 1232 "./stb_image.h"
 var $34=($33&1); //@line 1232 "./stb_image.h"
 $1=$34; //@line 1232 "./stb_image.h"
 label=8;break; //@line 1232 "./stb_image.h"
 case 8: 
 var $36=$1; //@line 1233 "./stb_image.h"
 STACKTOP=sp;return $36; //@line 1233 "./stb_image.h"
  default: assert(0, "bad label: " + label);
 }

}


function _stbi__pnm_skip_whitespace($s,$c){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 $1=$s;
 $2=$c;
 label=2;break; //@line 6159 "./stb_image.h"
 case 2: 
 var $4=$1; //@line 6159 "./stb_image.h"
 var $5=_stbi__at_eof($4); //@line 6159 "./stb_image.h"
 var $6=($5|0)!=0; //@line 6159 "./stb_image.h"
 if($6){var $13=0;label=4;break;}else{label=3;break;} //@line 6159 "./stb_image.h"
 case 3: 
 var $8=$2; //@line 6159 "./stb_image.h"
 var $9=HEAP8[($8)]; //@line 6159 "./stb_image.h"
 var $10=_stbi__pnm_isspace($9); //@line 6159 "./stb_image.h"
 var $11=($10|0)!=0; //@line 6159 "./stb_image.h"
 var $13=$11;label=4;break;
 case 4: 
 var $13;
 if($13){label=5;break;}else{label=6;break;}
 case 5: 
 var $15=$1; //@line 6160 "./stb_image.h"
 var $16=_stbi__get8($15); //@line 6160 "./stb_image.h"
 var $17=$2; //@line 6160 "./stb_image.h"
 HEAP8[($17)]=$16; //@line 6160 "./stb_image.h"
 label=2;break; //@line 6160 "./stb_image.h"
 case 6: 
 STACKTOP=sp;return; //@line 6161 "./stb_image.h"
  default: assert(0, "bad label: " + label);
 }

}


function _stbi__pnm_getinteger($s,$c){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $value;
 $1=$s;
 $2=$c;
 $value=0; //@line 6170 "./stb_image.h"
 label=2;break; //@line 6172 "./stb_image.h"
 case 2: 
 var $4=$1; //@line 6172 "./stb_image.h"
 var $5=_stbi__at_eof($4); //@line 6172 "./stb_image.h"
 var $6=($5|0)!=0; //@line 6172 "./stb_image.h"
 if($6){var $13=0;label=4;break;}else{label=3;break;} //@line 6172 "./stb_image.h"
 case 3: 
 var $8=$2; //@line 6172 "./stb_image.h"
 var $9=HEAP8[($8)]; //@line 6172 "./stb_image.h"
 var $10=_stbi__pnm_isdigit($9); //@line 6172 "./stb_image.h"
 var $11=($10|0)!=0; //@line 6172 "./stb_image.h"
 var $13=$11;label=4;break;
 case 4: 
 var $13;
 if($13){label=5;break;}else{label=6;break;}
 case 5: 
 var $15=$value; //@line 6173 "./stb_image.h"
 var $16=((($15)*(10))&-1); //@line 6173 "./stb_image.h"
 var $17=$2; //@line 6173 "./stb_image.h"
 var $18=HEAP8[($17)]; //@line 6173 "./stb_image.h"
 var $19=(($18<<24)>>24); //@line 6173 "./stb_image.h"
 var $20=((($19)-(48))|0); //@line 6173 "./stb_image.h"
 var $21=((($16)+($20))|0); //@line 6173 "./stb_image.h"
 $value=$21; //@line 6173 "./stb_image.h"
 var $22=$1; //@line 6174 "./stb_image.h"
 var $23=_stbi__get8($22); //@line 6174 "./stb_image.h"
 var $24=$2; //@line 6174 "./stb_image.h"
 HEAP8[($24)]=$23; //@line 6174 "./stb_image.h"
 label=2;break; //@line 6175 "./stb_image.h"
 case 6: 
 var $26=$value; //@line 6177 "./stb_image.h"
 STACKTOP=sp;return $26; //@line 6177 "./stb_image.h"
  default: assert(0, "bad label: " + label);
 }

}


function _stbi__pnm_isdigit($c){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 $1=$c;
 var $2=$1; //@line 6165 "./stb_image.h"
 var $3=(($2<<24)>>24); //@line 6165 "./stb_image.h"
 var $4=($3|0)>=48; //@line 6165 "./stb_image.h"
 if($4){label=2;break;}else{var $10=0;label=3;break;} //@line 6165 "./stb_image.h"
 case 2: 
 var $6=$1; //@line 6165 "./stb_image.h"
 var $7=(($6<<24)>>24); //@line 6165 "./stb_image.h"
 var $8=($7|0)<=57; //@line 6165 "./stb_image.h"
 var $10=$8;label=3;break;
 case 3: 
 var $10;
 var $11=($10&1);
 STACKTOP=sp;return $11; //@line 6166 "./stb_image.h"
  default: assert(0, "bad label: " + label);
 }

}


function _stbi__pnm_isspace($c){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 $1=$c;
 var $2=$1; //@line 6154 "./stb_image.h"
 var $3=(($2<<24)>>24); //@line 6154 "./stb_image.h"
 var $4=($3|0)==32; //@line 6154 "./stb_image.h"
 if($4){var $26=1;label=7;break;}else{label=2;break;} //@line 6154 "./stb_image.h"
 case 2: 
 var $6=$1; //@line 6154 "./stb_image.h"
 var $7=(($6<<24)>>24); //@line 6154 "./stb_image.h"
 var $8=($7|0)==9; //@line 6154 "./stb_image.h"
 if($8){var $26=1;label=7;break;}else{label=3;break;} //@line 6154 "./stb_image.h"
 case 3: 
 var $10=$1; //@line 6154 "./stb_image.h"
 var $11=(($10<<24)>>24); //@line 6154 "./stb_image.h"
 var $12=($11|0)==10; //@line 6154 "./stb_image.h"
 if($12){var $26=1;label=7;break;}else{label=4;break;} //@line 6154 "./stb_image.h"
 case 4: 
 var $14=$1; //@line 6154 "./stb_image.h"
 var $15=(($14<<24)>>24); //@line 6154 "./stb_image.h"
 var $16=($15|0)==11; //@line 6154 "./stb_image.h"
 if($16){var $26=1;label=7;break;}else{label=5;break;} //@line 6154 "./stb_image.h"
 case 5: 
 var $18=$1; //@line 6154 "./stb_image.h"
 var $19=(($18<<24)>>24); //@line 6154 "./stb_image.h"
 var $20=($19|0)==12; //@line 6154 "./stb_image.h"
 if($20){var $26=1;label=7;break;}else{label=6;break;} //@line 6154 "./stb_image.h"
 case 6: 
 var $22=$1; //@line 6154 "./stb_image.h"
 var $23=(($22<<24)>>24); //@line 6154 "./stb_image.h"
 var $24=($23|0)==13; //@line 6154 "./stb_image.h"
 var $26=$24;label=7;break; //@line 6154 "./stb_image.h"
 case 7: 
 var $26;
 var $27=($26&1); //@line 6154 "./stb_image.h"
 STACKTOP=sp;return $27; //@line 6154 "./stb_image.h"
  default: assert(0, "bad label: " + label);
 }

}


function _stbi__get16be($s){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 var $z;
 $1=$s;
 var $2=$1; //@line 1278 "./stb_image.h"
 var $3=_stbi__get8($2); //@line 1278 "./stb_image.h"
 var $4=($3&255); //@line 1278 "./stb_image.h"
 $z=$4; //@line 1278 "./stb_image.h"
 var $5=$z; //@line 1279 "./stb_image.h"
 var $6=$5<<8; //@line 1279 "./stb_image.h"
 var $7=$1; //@line 1279 "./stb_image.h"
 var $8=_stbi__get8($7); //@line 1279 "./stb_image.h"
 var $9=($8&255); //@line 1279 "./stb_image.h"
 var $10=((($6)+($9))|0); //@line 1279 "./stb_image.h"
 STACKTOP=sp;return $10; //@line 1279 "./stb_image.h"
}


function _stbi__get32be($s){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 var $z;
 $1=$s;
 var $2=$1; //@line 1284 "./stb_image.h"
 var $3=_stbi__get16be($2); //@line 1284 "./stb_image.h"
 $z=$3; //@line 1284 "./stb_image.h"
 var $4=$z; //@line 1285 "./stb_image.h"
 var $5=$4<<16; //@line 1285 "./stb_image.h"
 var $6=$1; //@line 1285 "./stb_image.h"
 var $7=_stbi__get16be($6); //@line 1285 "./stb_image.h"
 var $8=((($5)+($7))|0); //@line 1285 "./stb_image.h"
 STACKTOP=sp;return $8; //@line 1285 "./stb_image.h"
}


function _stbi__get32le($s){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 var $z;
 $1=$s;
 var $2=$1; //@line 1296 "./stb_image.h"
 var $3=_stbi__get16le($2); //@line 1296 "./stb_image.h"
 $z=$3; //@line 1296 "./stb_image.h"
 var $4=$z; //@line 1297 "./stb_image.h"
 var $5=$1; //@line 1297 "./stb_image.h"
 var $6=_stbi__get16le($5); //@line 1297 "./stb_image.h"
 var $7=$6<<16; //@line 1297 "./stb_image.h"
 var $8=((($4)+($7))|0); //@line 1297 "./stb_image.h"
 STACKTOP=sp;return $8; //@line 1297 "./stb_image.h"
}


function _stbi__gif_info_raw($s,$x,$y,$comp){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+18512)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $g=sp;
 $2=$s;
 $3=$x;
 $4=$y;
 $5=$comp;
 var $6=$2; //@line 5514 "./stb_image.h"
 var $7=$5; //@line 5514 "./stb_image.h"
 var $8=_stbi__gif_header($6,$g,$7,1); //@line 5514 "./stb_image.h"
 var $9=($8|0)!=0; //@line 5514 "./stb_image.h"
 if($9){label=3;break;}else{label=2;break;} //@line 5514 "./stb_image.h"
 case 2: 
 var $11=$2; //@line 5515 "./stb_image.h"
 _stbi__rewind($11); //@line 5515 "./stb_image.h"
 $1=0; //@line 5516 "./stb_image.h"
 label=8;break; //@line 5516 "./stb_image.h"
 case 3: 
 var $13=$3; //@line 5518 "./stb_image.h"
 var $14=($13|0)!=0; //@line 5518 "./stb_image.h"
 if($14){label=4;break;}else{label=5;break;} //@line 5518 "./stb_image.h"
 case 4: 
 var $16=(($g)|0); //@line 5518 "./stb_image.h"
 var $17=HEAP32[(($16)>>2)]; //@line 5518 "./stb_image.h"
 var $18=$3; //@line 5518 "./stb_image.h"
 HEAP32[(($18)>>2)]=$17; //@line 5518 "./stb_image.h"
 label=5;break; //@line 5518 "./stb_image.h"
 case 5: 
 var $20=$4; //@line 5519 "./stb_image.h"
 var $21=($20|0)!=0; //@line 5519 "./stb_image.h"
 if($21){label=6;break;}else{label=7;break;} //@line 5519 "./stb_image.h"
 case 6: 
 var $23=(($g+4)|0); //@line 5519 "./stb_image.h"
 var $24=HEAP32[(($23)>>2)]; //@line 5519 "./stb_image.h"
 var $25=$4; //@line 5519 "./stb_image.h"
 HEAP32[(($25)>>2)]=$24; //@line 5519 "./stb_image.h"
 label=7;break; //@line 5519 "./stb_image.h"
 case 7: 
 $1=1; //@line 5520 "./stb_image.h"
 label=8;break; //@line 5520 "./stb_image.h"
 case 8: 
 var $28=$1; //@line 5520 "./stb_image.h"
 STACKTOP=sp;return $28; //@line 5520 "./stb_image.h"
  default: assert(0, "bad label: " + label);
 }

}


function _stbi__gif_header($s,$g,$comp,$is_info){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $version;
 $2=$s;
 $3=$g;
 $4=$comp;
 $5=$is_info;
 var $6=$2; //@line 5486 "./stb_image.h"
 var $7=_stbi__get8($6); //@line 5486 "./stb_image.h"
 var $8=($7&255); //@line 5486 "./stb_image.h"
 var $9=($8|0)!=71; //@line 5486 "./stb_image.h"
 if($9){label=5;break;}else{label=2;break;} //@line 5486 "./stb_image.h"
 case 2: 
 var $11=$2; //@line 5486 "./stb_image.h"
 var $12=_stbi__get8($11); //@line 5486 "./stb_image.h"
 var $13=($12&255); //@line 5486 "./stb_image.h"
 var $14=($13|0)!=73; //@line 5486 "./stb_image.h"
 if($14){label=5;break;}else{label=3;break;} //@line 5486 "./stb_image.h"
 case 3: 
 var $16=$2; //@line 5486 "./stb_image.h"
 var $17=_stbi__get8($16); //@line 5486 "./stb_image.h"
 var $18=($17&255); //@line 5486 "./stb_image.h"
 var $19=($18|0)!=70; //@line 5486 "./stb_image.h"
 if($19){label=5;break;}else{label=4;break;} //@line 5486 "./stb_image.h"
 case 4: 
 var $21=$2; //@line 5486 "./stb_image.h"
 var $22=_stbi__get8($21); //@line 5486 "./stb_image.h"
 var $23=($22&255); //@line 5486 "./stb_image.h"
 var $24=($23|0)!=56; //@line 5486 "./stb_image.h"
 if($24){label=5;break;}else{label=6;break;} //@line 5486 "./stb_image.h"
 case 5: 
 var $26=_stbi__err(137568); //@line 5487 "./stb_image.h"
 $1=$26; //@line 5487 "./stb_image.h"
 label=18;break; //@line 5487 "./stb_image.h"
 case 6: 
 var $28=$2; //@line 5489 "./stb_image.h"
 var $29=_stbi__get8($28); //@line 5489 "./stb_image.h"
 $version=$29; //@line 5489 "./stb_image.h"
 var $30=$version; //@line 5490 "./stb_image.h"
 var $31=($30&255); //@line 5490 "./stb_image.h"
 var $32=($31|0)!=55; //@line 5490 "./stb_image.h"
 if($32){label=7;break;}else{label=9;break;} //@line 5490 "./stb_image.h"
 case 7: 
 var $34=$version; //@line 5490 "./stb_image.h"
 var $35=($34&255); //@line 5490 "./stb_image.h"
 var $36=($35|0)!=57; //@line 5490 "./stb_image.h"
 if($36){label=8;break;}else{label=9;break;} //@line 5490 "./stb_image.h"
 case 8: 
 var $38=_stbi__err(137568); //@line 5490 "./stb_image.h"
 $1=$38; //@line 5490 "./stb_image.h"
 label=18;break; //@line 5490 "./stb_image.h"
 case 9: 
 var $40=$2; //@line 5491 "./stb_image.h"
 var $41=_stbi__get8($40); //@line 5491 "./stb_image.h"
 var $42=($41&255); //@line 5491 "./stb_image.h"
 var $43=($42|0)!=97; //@line 5491 "./stb_image.h"
 if($43){label=10;break;}else{label=11;break;} //@line 5491 "./stb_image.h"
 case 10: 
 var $45=_stbi__err(137568); //@line 5491 "./stb_image.h"
 $1=$45; //@line 5491 "./stb_image.h"
 label=18;break; //@line 5491 "./stb_image.h"
 case 11: 
 HEAP32[((141000)>>2)]=141096; //@line 5493 "./stb_image.h"
 var $47=$2; //@line 5494 "./stb_image.h"
 var $48=_stbi__get16le($47); //@line 5494 "./stb_image.h"
 var $49=$3; //@line 5494 "./stb_image.h"
 var $50=(($49)|0); //@line 5494 "./stb_image.h"
 HEAP32[(($50)>>2)]=$48; //@line 5494 "./stb_image.h"
 var $51=$2; //@line 5495 "./stb_image.h"
 var $52=_stbi__get16le($51); //@line 5495 "./stb_image.h"
 var $53=$3; //@line 5495 "./stb_image.h"
 var $54=(($53+4)|0); //@line 5495 "./stb_image.h"
 HEAP32[(($54)>>2)]=$52; //@line 5495 "./stb_image.h"
 var $55=$2; //@line 5496 "./stb_image.h"
 var $56=_stbi__get8($55); //@line 5496 "./stb_image.h"
 var $57=($56&255); //@line 5496 "./stb_image.h"
 var $58=$3; //@line 5496 "./stb_image.h"
 var $59=(($58+12)|0); //@line 5496 "./stb_image.h"
 HEAP32[(($59)>>2)]=$57; //@line 5496 "./stb_image.h"
 var $60=$2; //@line 5497 "./stb_image.h"
 var $61=_stbi__get8($60); //@line 5497 "./stb_image.h"
 var $62=($61&255); //@line 5497 "./stb_image.h"
 var $63=$3; //@line 5497 "./stb_image.h"
 var $64=(($63+16)|0); //@line 5497 "./stb_image.h"
 HEAP32[(($64)>>2)]=$62; //@line 5497 "./stb_image.h"
 var $65=$2; //@line 5498 "./stb_image.h"
 var $66=_stbi__get8($65); //@line 5498 "./stb_image.h"
 var $67=($66&255); //@line 5498 "./stb_image.h"
 var $68=$3; //@line 5498 "./stb_image.h"
 var $69=(($68+20)|0); //@line 5498 "./stb_image.h"
 HEAP32[(($69)>>2)]=$67; //@line 5498 "./stb_image.h"
 var $70=$3; //@line 5499 "./stb_image.h"
 var $71=(($70+24)|0); //@line 5499 "./stb_image.h"
 HEAP32[(($71)>>2)]=-1; //@line 5499 "./stb_image.h"
 var $72=$4; //@line 5501 "./stb_image.h"
 var $73=($72|0)!=0; //@line 5501 "./stb_image.h"
 if($73){label=12;break;}else{label=13;break;} //@line 5501 "./stb_image.h"
 case 12: 
 var $75=$4; //@line 5501 "./stb_image.h"
 HEAP32[(($75)>>2)]=4; //@line 5501 "./stb_image.h"
 label=13;break; //@line 5501 "./stb_image.h"
 case 13: 
 var $77=$5; //@line 5503 "./stb_image.h"
 var $78=($77|0)!=0; //@line 5503 "./stb_image.h"
 if($78){label=14;break;}else{label=15;break;} //@line 5503 "./stb_image.h"
 case 14: 
 $1=1; //@line 5503 "./stb_image.h"
 label=18;break; //@line 5503 "./stb_image.h"
 case 15: 
 var $81=$3; //@line 5505 "./stb_image.h"
 var $82=(($81+12)|0); //@line 5505 "./stb_image.h"
 var $83=HEAP32[(($82)>>2)]; //@line 5505 "./stb_image.h"
 var $84=$83&128; //@line 5505 "./stb_image.h"
 var $85=($84|0)!=0; //@line 5505 "./stb_image.h"
 if($85){label=16;break;}else{label=17;break;} //@line 5505 "./stb_image.h"
 case 16: 
 var $87=$2; //@line 5506 "./stb_image.h"
 var $88=$3; //@line 5506 "./stb_image.h"
 var $89=(($88+32)|0); //@line 5506 "./stb_image.h"
 var $90=(($89)|0); //@line 5506 "./stb_image.h"
 var $91=$3; //@line 5506 "./stb_image.h"
 var $92=(($91+12)|0); //@line 5506 "./stb_image.h"
 var $93=HEAP32[(($92)>>2)]; //@line 5506 "./stb_image.h"
 var $94=$93&7; //@line 5506 "./stb_image.h"
 var $95=2<<$94; //@line 5506 "./stb_image.h"
 _stbi__gif_parse_colortable($87,$90,$95,-1); //@line 5506 "./stb_image.h"
 label=17;break; //@line 5506 "./stb_image.h"
 case 17: 
 $1=1; //@line 5508 "./stb_image.h"
 label=18;break; //@line 5508 "./stb_image.h"
 case 18: 
 var $98=$1; //@line 5509 "./stb_image.h"
 STACKTOP=sp;return $98; //@line 5509 "./stb_image.h"
  default: assert(0, "bad label: " + label);
 }

}


function _stbi__gif_parse_colortable($s,$pal,$num_entries,$transp){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $i;
 $1=$s;
 $2=$pal;
 $3=$num_entries;
 $4=$transp;
 $i=0; //@line 5475 "./stb_image.h"
 label=2;break; //@line 5475 "./stb_image.h"
 case 2: 
 var $6=$i; //@line 5475 "./stb_image.h"
 var $7=$3; //@line 5475 "./stb_image.h"
 var $8=($6|0)<($7|0); //@line 5475 "./stb_image.h"
 if($8){label=3;break;}else{label=5;break;} //@line 5475 "./stb_image.h"
 case 3: 
 var $10=$1; //@line 5476 "./stb_image.h"
 var $11=_stbi__get8($10); //@line 5476 "./stb_image.h"
 var $12=$i; //@line 5476 "./stb_image.h"
 var $13=$2; //@line 5476 "./stb_image.h"
 var $14=(($13+($12<<2))|0); //@line 5476 "./stb_image.h"
 var $15=(($14+2)|0); //@line 5476 "./stb_image.h"
 HEAP8[($15)]=$11; //@line 5476 "./stb_image.h"
 var $16=$1; //@line 5477 "./stb_image.h"
 var $17=_stbi__get8($16); //@line 5477 "./stb_image.h"
 var $18=$i; //@line 5477 "./stb_image.h"
 var $19=$2; //@line 5477 "./stb_image.h"
 var $20=(($19+($18<<2))|0); //@line 5477 "./stb_image.h"
 var $21=(($20+1)|0); //@line 5477 "./stb_image.h"
 HEAP8[($21)]=$17; //@line 5477 "./stb_image.h"
 var $22=$1; //@line 5478 "./stb_image.h"
 var $23=_stbi__get8($22); //@line 5478 "./stb_image.h"
 var $24=$i; //@line 5478 "./stb_image.h"
 var $25=$2; //@line 5478 "./stb_image.h"
 var $26=(($25+($24<<2))|0); //@line 5478 "./stb_image.h"
 var $27=(($26)|0); //@line 5478 "./stb_image.h"
 HEAP8[($27)]=$23; //@line 5478 "./stb_image.h"
 var $28=$4; //@line 5479 "./stb_image.h"
 var $29=$i; //@line 5479 "./stb_image.h"
 var $30=($28|0)==($29|0); //@line 5479 "./stb_image.h"
 var $31=($30?0:255); //@line 5479 "./stb_image.h"
 var $32=(($31)&255); //@line 5479 "./stb_image.h"
 var $33=$i; //@line 5479 "./stb_image.h"
 var $34=$2; //@line 5479 "./stb_image.h"
 var $35=(($34+($33<<2))|0); //@line 5479 "./stb_image.h"
 var $36=(($35+3)|0); //@line 5479 "./stb_image.h"
 HEAP8[($36)]=$32; //@line 5479 "./stb_image.h"
 label=4;break; //@line 5480 "./stb_image.h"
 case 4: 
 var $38=$i; //@line 5475 "./stb_image.h"
 var $39=((($38)+(1))|0); //@line 5475 "./stb_image.h"
 $i=$39; //@line 5475 "./stb_image.h"
 label=2;break; //@line 5475 "./stb_image.h"
 case 5: 
 STACKTOP=sp;return; //@line 5481 "./stb_image.h"
  default: assert(0, "bad label: " + label);
 }

}


function _stbi__png_info_raw($p,$x,$y,$comp){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 $2=$p;
 $3=$x;
 $4=$y;
 $5=$comp;
 var $6=$2; //@line 4494 "./stb_image.h"
 var $7=_stbi__parse_png_file($6,2,0); //@line 4494 "./stb_image.h"
 var $8=($7|0)!=0; //@line 4494 "./stb_image.h"
 if($8){label=3;break;}else{label=2;break;} //@line 4494 "./stb_image.h"
 case 2: 
 var $10=$2; //@line 4495 "./stb_image.h"
 var $11=(($10)|0); //@line 4495 "./stb_image.h"
 var $12=HEAP32[(($11)>>2)]; //@line 4495 "./stb_image.h"
 _stbi__rewind($12); //@line 4495 "./stb_image.h"
 $1=0; //@line 4496 "./stb_image.h"
 label=10;break; //@line 4496 "./stb_image.h"
 case 3: 
 var $14=$3; //@line 4498 "./stb_image.h"
 var $15=($14|0)!=0; //@line 4498 "./stb_image.h"
 if($15){label=4;break;}else{label=5;break;} //@line 4498 "./stb_image.h"
 case 4: 
 var $17=$2; //@line 4498 "./stb_image.h"
 var $18=(($17)|0); //@line 4498 "./stb_image.h"
 var $19=HEAP32[(($18)>>2)]; //@line 4498 "./stb_image.h"
 var $20=(($19)|0); //@line 4498 "./stb_image.h"
 var $21=HEAP32[(($20)>>2)]; //@line 4498 "./stb_image.h"
 var $22=$3; //@line 4498 "./stb_image.h"
 HEAP32[(($22)>>2)]=$21; //@line 4498 "./stb_image.h"
 label=5;break; //@line 4498 "./stb_image.h"
 case 5: 
 var $24=$4; //@line 4499 "./stb_image.h"
 var $25=($24|0)!=0; //@line 4499 "./stb_image.h"
 if($25){label=6;break;}else{label=7;break;} //@line 4499 "./stb_image.h"
 case 6: 
 var $27=$2; //@line 4499 "./stb_image.h"
 var $28=(($27)|0); //@line 4499 "./stb_image.h"
 var $29=HEAP32[(($28)>>2)]; //@line 4499 "./stb_image.h"
 var $30=(($29+4)|0); //@line 4499 "./stb_image.h"
 var $31=HEAP32[(($30)>>2)]; //@line 4499 "./stb_image.h"
 var $32=$4; //@line 4499 "./stb_image.h"
 HEAP32[(($32)>>2)]=$31; //@line 4499 "./stb_image.h"
 label=7;break; //@line 4499 "./stb_image.h"
 case 7: 
 var $34=$5; //@line 4500 "./stb_image.h"
 var $35=($34|0)!=0; //@line 4500 "./stb_image.h"
 if($35){label=8;break;}else{label=9;break;} //@line 4500 "./stb_image.h"
 case 8: 
 var $37=$2; //@line 4500 "./stb_image.h"
 var $38=(($37)|0); //@line 4500 "./stb_image.h"
 var $39=HEAP32[(($38)>>2)]; //@line 4500 "./stb_image.h"
 var $40=(($39+8)|0); //@line 4500 "./stb_image.h"
 var $41=HEAP32[(($40)>>2)]; //@line 4500 "./stb_image.h"
 var $42=$5; //@line 4500 "./stb_image.h"
 HEAP32[(($42)>>2)]=$41; //@line 4500 "./stb_image.h"
 label=9;break; //@line 4500 "./stb_image.h"
 case 9: 
 $1=1; //@line 4501 "./stb_image.h"
 label=10;break; //@line 4501 "./stb_image.h"
 case 10: 
 var $45=$1; //@line 4501 "./stb_image.h"
 STACKTOP=sp;return $45; //@line 4501 "./stb_image.h"
  default: assert(0, "bad label: " + label);
 }

}


function _stbi__parse_png_file($z,$scan,$req_comp){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+1048)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $palette=sp;
 var $pal_img_n;
 var $has_trans;
 var $tc=(sp)+(1024);
 var $ioff;
 var $idata_limit;
 var $i;
 var $pal_len;
 var $first;
 var $k;
 var $interlace;
 var $color;
 var $depth;
 var $is_iphone;
 var $s;
 var $c=(sp)+(1032);
 var $comp;
 var $filter;
 var $p;
 var $raw_len=(sp)+(1040);
 var $bpl;
 $2=$z;
 $3=$scan;
 $4=$req_comp;
 $pal_img_n=0; //@line 4299 "./stb_image.h"
 $has_trans=0; //@line 4300 "./stb_image.h"
 $ioff=0; //@line 4301 "./stb_image.h"
 $idata_limit=0; //@line 4301 "./stb_image.h"
 $pal_len=0; //@line 4301 "./stb_image.h"
 $first=1; //@line 4302 "./stb_image.h"
 $interlace=0; //@line 4302 "./stb_image.h"
 $color=0; //@line 4302 "./stb_image.h"
 $depth=0; //@line 4302 "./stb_image.h"
 $is_iphone=0; //@line 4302 "./stb_image.h"
 var $5=$2; //@line 4303 "./stb_image.h"
 var $6=(($5)|0); //@line 4303 "./stb_image.h"
 var $7=HEAP32[(($6)>>2)]; //@line 4303 "./stb_image.h"
 $s=$7; //@line 4303 "./stb_image.h"
 var $8=$2; //@line 4305 "./stb_image.h"
 var $9=(($8+8)|0); //@line 4305 "./stb_image.h"
 HEAP32[(($9)>>2)]=0; //@line 4305 "./stb_image.h"
 var $10=$2; //@line 4306 "./stb_image.h"
 var $11=(($10+4)|0); //@line 4306 "./stb_image.h"
 HEAP32[(($11)>>2)]=0; //@line 4306 "./stb_image.h"
 var $12=$2; //@line 4307 "./stb_image.h"
 var $13=(($12+12)|0); //@line 4307 "./stb_image.h"
 HEAP32[(($13)>>2)]=0; //@line 4307 "./stb_image.h"
 var $14=$s; //@line 4309 "./stb_image.h"
 var $15=_stbi__check_png_header($14); //@line 4309 "./stb_image.h"
 var $16=($15|0)!=0; //@line 4309 "./stb_image.h"
 if($16){label=3;break;}else{label=2;break;} //@line 4309 "./stb_image.h"
 case 2: 
 $1=0; //@line 4309 "./stb_image.h"
 label=145;break; //@line 4309 "./stb_image.h"
 case 3: 
 var $19=$3; //@line 4311 "./stb_image.h"
 var $20=($19|0)==1; //@line 4311 "./stb_image.h"
 if($20){label=4;break;}else{label=5;break;} //@line 4311 "./stb_image.h"
 case 4: 
 $1=1; //@line 4311 "./stb_image.h"
 label=145;break; //@line 4311 "./stb_image.h"
 case 5: 
 label=6;break; //@line 4313 "./stb_image.h"
 case 6: 
 var $24=$s; //@line 4314 "./stb_image.h"
 _stbi__get_chunk_header($c,$24); //@line 4314 "./stb_image.h"
 var $25=(($c+4)|0); //@line 4315 "./stb_image.h"
 var $26=HEAP32[(($25)>>2)]; //@line 4315 "./stb_image.h"
 if(($26|0)==1229278788){ label=108;break;}else if(($26|0)==1347179589){ label=47;break;}else if(($26|0)==1951551059){ label=58;break;}else if(($26|0)==1130840649){ label=7;break;}else if(($26|0)==1229472850){ label=8;break;}else if(($26|0)==1229209940){ label=84;break;}else{label=139;break;}
 case 7: 
 $is_iphone=1; //@line 4317 "./stb_image.h"
 var $28=$s; //@line 4318 "./stb_image.h"
 var $29=(($c)|0); //@line 4318 "./stb_image.h"
 var $30=HEAP32[(($29)>>2)]; //@line 4318 "./stb_image.h"
 _stbi__skip($28,$30); //@line 4318 "./stb_image.h"
 label=144;break; //@line 4319 "./stb_image.h"
 case 8: 
 var $32=$first; //@line 4322 "./stb_image.h"
 var $33=($32|0)!=0; //@line 4322 "./stb_image.h"
 if($33){label=10;break;}else{label=9;break;} //@line 4322 "./stb_image.h"
 case 9: 
 var $35=_stbi__err(139888); //@line 4322 "./stb_image.h"
 $1=$35; //@line 4322 "./stb_image.h"
 label=145;break; //@line 4322 "./stb_image.h"
 case 10: 
 $first=0; //@line 4323 "./stb_image.h"
 var $37=(($c)|0); //@line 4324 "./stb_image.h"
 var $38=HEAP32[(($37)>>2)]; //@line 4324 "./stb_image.h"
 var $39=($38|0)!=13; //@line 4324 "./stb_image.h"
 if($39){label=11;break;}else{label=12;break;} //@line 4324 "./stb_image.h"
 case 11: 
 var $41=_stbi__err(139568); //@line 4324 "./stb_image.h"
 $1=$41; //@line 4324 "./stb_image.h"
 label=145;break; //@line 4324 "./stb_image.h"
 case 12: 
 var $43=$s; //@line 4325 "./stb_image.h"
 var $44=_stbi__get32be($43); //@line 4325 "./stb_image.h"
 var $45=$s; //@line 4325 "./stb_image.h"
 var $46=(($45)|0); //@line 4325 "./stb_image.h"
 HEAP32[(($46)>>2)]=$44; //@line 4325 "./stb_image.h"
 var $47=$s; //@line 4325 "./stb_image.h"
 var $48=(($47)|0); //@line 4325 "./stb_image.h"
 var $49=HEAP32[(($48)>>2)]; //@line 4325 "./stb_image.h"
 var $50=($49>>>0)>16777216; //@line 4325 "./stb_image.h"
 if($50){label=13;break;}else{label=14;break;} //@line 4325 "./stb_image.h"
 case 13: 
 var $52=_stbi__err(139448); //@line 4325 "./stb_image.h"
 $1=$52; //@line 4325 "./stb_image.h"
 label=145;break; //@line 4325 "./stb_image.h"
 case 14: 
 var $54=$s; //@line 4326 "./stb_image.h"
 var $55=_stbi__get32be($54); //@line 4326 "./stb_image.h"
 var $56=$s; //@line 4326 "./stb_image.h"
 var $57=(($56+4)|0); //@line 4326 "./stb_image.h"
 HEAP32[(($57)>>2)]=$55; //@line 4326 "./stb_image.h"
 var $58=$s; //@line 4326 "./stb_image.h"
 var $59=(($58+4)|0); //@line 4326 "./stb_image.h"
 var $60=HEAP32[(($59)>>2)]; //@line 4326 "./stb_image.h"
 var $61=($60>>>0)>16777216; //@line 4326 "./stb_image.h"
 if($61){label=15;break;}else{label=16;break;} //@line 4326 "./stb_image.h"
 case 15: 
 var $63=_stbi__err(139448); //@line 4326 "./stb_image.h"
 $1=$63; //@line 4326 "./stb_image.h"
 label=145;break; //@line 4326 "./stb_image.h"
 case 16: 
 var $65=$s; //@line 4327 "./stb_image.h"
 var $66=_stbi__get8($65); //@line 4327 "./stb_image.h"
 var $67=($66&255); //@line 4327 "./stb_image.h"
 $depth=$67; //@line 4327 "./stb_image.h"
 var $68=$depth; //@line 4327 "./stb_image.h"
 var $69=($68|0)!=1; //@line 4327 "./stb_image.h"
 if($69){label=17;break;}else{label=21;break;} //@line 4327 "./stb_image.h"
 case 17: 
 var $71=$depth; //@line 4327 "./stb_image.h"
 var $72=($71|0)!=2; //@line 4327 "./stb_image.h"
 if($72){label=18;break;}else{label=21;break;} //@line 4327 "./stb_image.h"
 case 18: 
 var $74=$depth; //@line 4327 "./stb_image.h"
 var $75=($74|0)!=4; //@line 4327 "./stb_image.h"
 if($75){label=19;break;}else{label=21;break;} //@line 4327 "./stb_image.h"
 case 19: 
 var $77=$depth; //@line 4327 "./stb_image.h"
 var $78=($77|0)!=8; //@line 4327 "./stb_image.h"
 if($78){label=20;break;}else{label=21;break;} //@line 4327 "./stb_image.h"
 case 20: 
 var $80=_stbi__err(139424); //@line 4327 "./stb_image.h"
 $1=$80; //@line 4327 "./stb_image.h"
 label=145;break; //@line 4327 "./stb_image.h"
 case 21: 
 var $82=$s; //@line 4328 "./stb_image.h"
 var $83=_stbi__get8($82); //@line 4328 "./stb_image.h"
 var $84=($83&255); //@line 4328 "./stb_image.h"
 $color=$84; //@line 4328 "./stb_image.h"
 var $85=$color; //@line 4328 "./stb_image.h"
 var $86=($85|0)>6; //@line 4328 "./stb_image.h"
 if($86){label=22;break;}else{label=23;break;} //@line 4328 "./stb_image.h"
 case 22: 
 var $88=_stbi__err(139376); //@line 4328 "./stb_image.h"
 $1=$88; //@line 4328 "./stb_image.h"
 label=145;break; //@line 4328 "./stb_image.h"
 case 23: 
 var $90=$color; //@line 4329 "./stb_image.h"
 var $91=($90|0)==3; //@line 4329 "./stb_image.h"
 if($91){label=24;break;}else{label=25;break;} //@line 4329 "./stb_image.h"
 case 24: 
 $pal_img_n=3; //@line 4329 "./stb_image.h"
 label=28;break; //@line 4329 "./stb_image.h"
 case 25: 
 var $94=$color; //@line 4329 "./stb_image.h"
 var $95=$94&1; //@line 4329 "./stb_image.h"
 var $96=($95|0)!=0; //@line 4329 "./stb_image.h"
 if($96){label=26;break;}else{label=27;break;} //@line 4329 "./stb_image.h"
 case 26: 
 var $98=_stbi__err(139376); //@line 4329 "./stb_image.h"
 $1=$98; //@line 4329 "./stb_image.h"
 label=145;break; //@line 4329 "./stb_image.h"
 case 27: 
 label=28;break;
 case 28: 
 var $101=$s; //@line 4330 "./stb_image.h"
 var $102=_stbi__get8($101); //@line 4330 "./stb_image.h"
 var $103=($102&255); //@line 4330 "./stb_image.h"
 $comp=$103; //@line 4330 "./stb_image.h"
 var $104=$comp; //@line 4330 "./stb_image.h"
 var $105=($104|0)!=0; //@line 4330 "./stb_image.h"
 if($105){label=29;break;}else{label=30;break;} //@line 4330 "./stb_image.h"
 case 29: 
 var $107=_stbi__err(139296); //@line 4330 "./stb_image.h"
 $1=$107; //@line 4330 "./stb_image.h"
 label=145;break; //@line 4330 "./stb_image.h"
 case 30: 
 var $109=$s; //@line 4331 "./stb_image.h"
 var $110=_stbi__get8($109); //@line 4331 "./stb_image.h"
 var $111=($110&255); //@line 4331 "./stb_image.h"
 $filter=$111; //@line 4331 "./stb_image.h"
 var $112=$filter; //@line 4331 "./stb_image.h"
 var $113=($112|0)!=0; //@line 4331 "./stb_image.h"
 if($113){label=31;break;}else{label=32;break;} //@line 4331 "./stb_image.h"
 case 31: 
 var $115=_stbi__err(139264); //@line 4331 "./stb_image.h"
 $1=$115; //@line 4331 "./stb_image.h"
 label=145;break; //@line 4331 "./stb_image.h"
 case 32: 
 var $117=$s; //@line 4332 "./stb_image.h"
 var $118=_stbi__get8($117); //@line 4332 "./stb_image.h"
 var $119=($118&255); //@line 4332 "./stb_image.h"
 $interlace=$119; //@line 4332 "./stb_image.h"
 var $120=$interlace; //@line 4332 "./stb_image.h"
 var $121=($120|0)>1; //@line 4332 "./stb_image.h"
 if($121){label=33;break;}else{label=34;break;} //@line 4332 "./stb_image.h"
 case 33: 
 var $123=_stbi__err(139232); //@line 4332 "./stb_image.h"
 $1=$123; //@line 4332 "./stb_image.h"
 label=145;break; //@line 4332 "./stb_image.h"
 case 34: 
 var $125=$s; //@line 4333 "./stb_image.h"
 var $126=(($125)|0); //@line 4333 "./stb_image.h"
 var $127=HEAP32[(($126)>>2)]; //@line 4333 "./stb_image.h"
 var $128=($127|0)!=0; //@line 4333 "./stb_image.h"
 if($128){label=35;break;}else{label=36;break;} //@line 4333 "./stb_image.h"
 case 35: 
 var $130=$s; //@line 4333 "./stb_image.h"
 var $131=(($130+4)|0); //@line 4333 "./stb_image.h"
 var $132=HEAP32[(($131)>>2)]; //@line 4333 "./stb_image.h"
 var $133=($132|0)!=0; //@line 4333 "./stb_image.h"
 if($133){label=37;break;}else{label=36;break;} //@line 4333 "./stb_image.h"
 case 36: 
 var $135=_stbi__err(139208); //@line 4333 "./stb_image.h"
 $1=$135; //@line 4333 "./stb_image.h"
 label=145;break; //@line 4333 "./stb_image.h"
 case 37: 
 var $137=$pal_img_n; //@line 4334 "./stb_image.h"
 var $138=(($137<<24)>>24)!=0; //@line 4334 "./stb_image.h"
 if($138){label=43;break;}else{label=38;break;} //@line 4334 "./stb_image.h"
 case 38: 
 var $140=$color; //@line 4335 "./stb_image.h"
 var $141=$140&2; //@line 4335 "./stb_image.h"
 var $142=($141|0)!=0; //@line 4335 "./stb_image.h"
 var $143=($142?3:1); //@line 4335 "./stb_image.h"
 var $144=$color; //@line 4335 "./stb_image.h"
 var $145=$144&4; //@line 4335 "./stb_image.h"
 var $146=($145|0)!=0; //@line 4335 "./stb_image.h"
 var $147=($146?1:0); //@line 4335 "./stb_image.h"
 var $148=((($143)+($147))|0); //@line 4335 "./stb_image.h"
 var $149=$s; //@line 4335 "./stb_image.h"
 var $150=(($149+8)|0); //@line 4335 "./stb_image.h"
 HEAP32[(($150)>>2)]=$148; //@line 4335 "./stb_image.h"
 var $151=$s; //@line 4336 "./stb_image.h"
 var $152=(($151)|0); //@line 4336 "./stb_image.h"
 var $153=HEAP32[(($152)>>2)]; //@line 4336 "./stb_image.h"
 var $154=(((1073741824)/(($153>>>0)))&-1); //@line 4336 "./stb_image.h"
 var $155=$s; //@line 4336 "./stb_image.h"
 var $156=(($155+8)|0); //@line 4336 "./stb_image.h"
 var $157=HEAP32[(($156)>>2)]; //@line 4336 "./stb_image.h"
 var $158=(((($154>>>0))/(($157>>>0)))&-1); //@line 4336 "./stb_image.h"
 var $159=$s; //@line 4336 "./stb_image.h"
 var $160=(($159+4)|0); //@line 4336 "./stb_image.h"
 var $161=HEAP32[(($160)>>2)]; //@line 4336 "./stb_image.h"
 var $162=($158>>>0)<($161>>>0); //@line 4336 "./stb_image.h"
 if($162){label=39;break;}else{label=40;break;} //@line 4336 "./stb_image.h"
 case 39: 
 var $164=_stbi__err(139448); //@line 4336 "./stb_image.h"
 $1=$164; //@line 4336 "./stb_image.h"
 label=145;break; //@line 4336 "./stb_image.h"
 case 40: 
 var $166=$3; //@line 4337 "./stb_image.h"
 var $167=($166|0)==2; //@line 4337 "./stb_image.h"
 if($167){label=41;break;}else{label=42;break;} //@line 4337 "./stb_image.h"
 case 41: 
 $1=1; //@line 4337 "./stb_image.h"
 label=145;break; //@line 4337 "./stb_image.h"
 case 42: 
 label=46;break; //@line 4338 "./stb_image.h"
 case 43: 
 var $171=$s; //@line 4341 "./stb_image.h"
 var $172=(($171+8)|0); //@line 4341 "./stb_image.h"
 HEAP32[(($172)>>2)]=1; //@line 4341 "./stb_image.h"
 var $173=$s; //@line 4342 "./stb_image.h"
 var $174=(($173)|0); //@line 4342 "./stb_image.h"
 var $175=HEAP32[(($174)>>2)]; //@line 4342 "./stb_image.h"
 var $176=(((1073741824)/(($175>>>0)))&-1); //@line 4342 "./stb_image.h"
 var $177=(((($176>>>0))/(4))&-1); //@line 4342 "./stb_image.h"
 var $178=$s; //@line 4342 "./stb_image.h"
 var $179=(($178+4)|0); //@line 4342 "./stb_image.h"
 var $180=HEAP32[(($179)>>2)]; //@line 4342 "./stb_image.h"
 var $181=($177>>>0)<($180>>>0); //@line 4342 "./stb_image.h"
 if($181){label=44;break;}else{label=45;break;} //@line 4342 "./stb_image.h"
 case 44: 
 var $183=_stbi__err(139448); //@line 4342 "./stb_image.h"
 $1=$183; //@line 4342 "./stb_image.h"
 label=145;break; //@line 4342 "./stb_image.h"
 case 45: 
 label=46;break;
 case 46: 
 label=144;break; //@line 4345 "./stb_image.h"
 case 47: 
 var $187=$first; //@line 4349 "./stb_image.h"
 var $188=($187|0)!=0; //@line 4349 "./stb_image.h"
 if($188){label=48;break;}else{label=49;break;} //@line 4349 "./stb_image.h"
 case 48: 
 var $190=_stbi__err(139176); //@line 4349 "./stb_image.h"
 $1=$190; //@line 4349 "./stb_image.h"
 label=145;break; //@line 4349 "./stb_image.h"
 case 49: 
 var $192=(($c)|0); //@line 4350 "./stb_image.h"
 var $193=HEAP32[(($192)>>2)]; //@line 4350 "./stb_image.h"
 var $194=($193>>>0)>768; //@line 4350 "./stb_image.h"
 if($194){label=50;break;}else{label=51;break;} //@line 4350 "./stb_image.h"
 case 50: 
 var $196=_stbi__err(139136); //@line 4350 "./stb_image.h"
 $1=$196; //@line 4350 "./stb_image.h"
 label=145;break; //@line 4350 "./stb_image.h"
 case 51: 
 var $198=(($c)|0); //@line 4351 "./stb_image.h"
 var $199=HEAP32[(($198)>>2)]; //@line 4351 "./stb_image.h"
 var $200=(((($199>>>0))/(3))&-1); //@line 4351 "./stb_image.h"
 $pal_len=$200; //@line 4351 "./stb_image.h"
 var $201=$pal_len; //@line 4352 "./stb_image.h"
 var $202=((($201)*(3))&-1); //@line 4352 "./stb_image.h"
 var $203=(($c)|0); //@line 4352 "./stb_image.h"
 var $204=HEAP32[(($203)>>2)]; //@line 4352 "./stb_image.h"
 var $205=($202|0)!=($204|0); //@line 4352 "./stb_image.h"
 if($205){label=52;break;}else{label=53;break;} //@line 4352 "./stb_image.h"
 case 52: 
 var $207=_stbi__err(139136); //@line 4352 "./stb_image.h"
 $1=$207; //@line 4352 "./stb_image.h"
 label=145;break; //@line 4352 "./stb_image.h"
 case 53: 
 $i=0; //@line 4353 "./stb_image.h"
 label=54;break; //@line 4353 "./stb_image.h"
 case 54: 
 var $210=$i; //@line 4353 "./stb_image.h"
 var $211=$pal_len; //@line 4353 "./stb_image.h"
 var $212=($210>>>0)<($211>>>0); //@line 4353 "./stb_image.h"
 if($212){label=55;break;}else{label=57;break;} //@line 4353 "./stb_image.h"
 case 55: 
 var $214=$s; //@line 4354 "./stb_image.h"
 var $215=_stbi__get8($214); //@line 4354 "./stb_image.h"
 var $216=$i; //@line 4354 "./stb_image.h"
 var $217=($216<<2); //@line 4354 "./stb_image.h"
 var $218=(($217)|0); //@line 4354 "./stb_image.h"
 var $219=(($palette+$218)|0); //@line 4354 "./stb_image.h"
 HEAP8[($219)]=$215; //@line 4354 "./stb_image.h"
 var $220=$s; //@line 4355 "./stb_image.h"
 var $221=_stbi__get8($220); //@line 4355 "./stb_image.h"
 var $222=$i; //@line 4355 "./stb_image.h"
 var $223=($222<<2); //@line 4355 "./stb_image.h"
 var $224=((($223)+(1))|0); //@line 4355 "./stb_image.h"
 var $225=(($palette+$224)|0); //@line 4355 "./stb_image.h"
 HEAP8[($225)]=$221; //@line 4355 "./stb_image.h"
 var $226=$s; //@line 4356 "./stb_image.h"
 var $227=_stbi__get8($226); //@line 4356 "./stb_image.h"
 var $228=$i; //@line 4356 "./stb_image.h"
 var $229=($228<<2); //@line 4356 "./stb_image.h"
 var $230=((($229)+(2))|0); //@line 4356 "./stb_image.h"
 var $231=(($palette+$230)|0); //@line 4356 "./stb_image.h"
 HEAP8[($231)]=$227; //@line 4356 "./stb_image.h"
 var $232=$i; //@line 4357 "./stb_image.h"
 var $233=($232<<2); //@line 4357 "./stb_image.h"
 var $234=((($233)+(3))|0); //@line 4357 "./stb_image.h"
 var $235=(($palette+$234)|0); //@line 4357 "./stb_image.h"
 HEAP8[($235)]=-1; //@line 4357 "./stb_image.h"
 label=56;break; //@line 4358 "./stb_image.h"
 case 56: 
 var $237=$i; //@line 4353 "./stb_image.h"
 var $238=((($237)+(1))|0); //@line 4353 "./stb_image.h"
 $i=$238; //@line 4353 "./stb_image.h"
 label=54;break; //@line 4353 "./stb_image.h"
 case 57: 
 label=144;break; //@line 4359 "./stb_image.h"
 case 58: 
 var $241=$first; //@line 4363 "./stb_image.h"
 var $242=($241|0)!=0; //@line 4363 "./stb_image.h"
 if($242){label=59;break;}else{label=60;break;} //@line 4363 "./stb_image.h"
 case 59: 
 var $244=_stbi__err(139176); //@line 4363 "./stb_image.h"
 $1=$244; //@line 4363 "./stb_image.h"
 label=145;break; //@line 4363 "./stb_image.h"
 case 60: 
 var $246=$2; //@line 4364 "./stb_image.h"
 var $247=(($246+4)|0); //@line 4364 "./stb_image.h"
 var $248=HEAP32[(($247)>>2)]; //@line 4364 "./stb_image.h"
 var $249=($248|0)!=0; //@line 4364 "./stb_image.h"
 if($249){label=61;break;}else{label=62;break;} //@line 4364 "./stb_image.h"
 case 61: 
 var $251=_stbi__err(139120); //@line 4364 "./stb_image.h"
 $1=$251; //@line 4364 "./stb_image.h"
 label=145;break; //@line 4364 "./stb_image.h"
 case 62: 
 var $253=$pal_img_n; //@line 4365 "./stb_image.h"
 var $254=(($253<<24)>>24)!=0; //@line 4365 "./stb_image.h"
 if($254){label=63;break;}else{label=74;break;} //@line 4365 "./stb_image.h"
 case 63: 
 var $256=$3; //@line 4366 "./stb_image.h"
 var $257=($256|0)==2; //@line 4366 "./stb_image.h"
 if($257){label=64;break;}else{label=65;break;} //@line 4366 "./stb_image.h"
 case 64: 
 var $259=$s; //@line 4366 "./stb_image.h"
 var $260=(($259+8)|0); //@line 4366 "./stb_image.h"
 HEAP32[(($260)>>2)]=4; //@line 4366 "./stb_image.h"
 $1=1; //@line 4366 "./stb_image.h"
 label=145;break; //@line 4366 "./stb_image.h"
 case 65: 
 var $262=$pal_len; //@line 4367 "./stb_image.h"
 var $263=($262|0)==0; //@line 4367 "./stb_image.h"
 if($263){label=66;break;}else{label=67;break;} //@line 4367 "./stb_image.h"
 case 66: 
 var $265=_stbi__err(139032); //@line 4367 "./stb_image.h"
 $1=$265; //@line 4367 "./stb_image.h"
 label=145;break; //@line 4367 "./stb_image.h"
 case 67: 
 var $267=(($c)|0); //@line 4368 "./stb_image.h"
 var $268=HEAP32[(($267)>>2)]; //@line 4368 "./stb_image.h"
 var $269=$pal_len; //@line 4368 "./stb_image.h"
 var $270=($268>>>0)>($269>>>0); //@line 4368 "./stb_image.h"
 if($270){label=68;break;}else{label=69;break;} //@line 4368 "./stb_image.h"
 case 68: 
 var $272=_stbi__err(139016); //@line 4368 "./stb_image.h"
 $1=$272; //@line 4368 "./stb_image.h"
 label=145;break; //@line 4368 "./stb_image.h"
 case 69: 
 $pal_img_n=4; //@line 4369 "./stb_image.h"
 $i=0; //@line 4370 "./stb_image.h"
 label=70;break; //@line 4370 "./stb_image.h"
 case 70: 
 var $275=$i; //@line 4370 "./stb_image.h"
 var $276=(($c)|0); //@line 4370 "./stb_image.h"
 var $277=HEAP32[(($276)>>2)]; //@line 4370 "./stb_image.h"
 var $278=($275>>>0)<($277>>>0); //@line 4370 "./stb_image.h"
 if($278){label=71;break;}else{label=73;break;} //@line 4370 "./stb_image.h"
 case 71: 
 var $280=$s; //@line 4371 "./stb_image.h"
 var $281=_stbi__get8($280); //@line 4371 "./stb_image.h"
 var $282=$i; //@line 4371 "./stb_image.h"
 var $283=($282<<2); //@line 4371 "./stb_image.h"
 var $284=((($283)+(3))|0); //@line 4371 "./stb_image.h"
 var $285=(($palette+$284)|0); //@line 4371 "./stb_image.h"
 HEAP8[($285)]=$281; //@line 4371 "./stb_image.h"
 label=72;break; //@line 4371 "./stb_image.h"
 case 72: 
 var $287=$i; //@line 4370 "./stb_image.h"
 var $288=((($287)+(1))|0); //@line 4370 "./stb_image.h"
 $i=$288; //@line 4370 "./stb_image.h"
 label=70;break; //@line 4370 "./stb_image.h"
 case 73: 
 label=83;break; //@line 4372 "./stb_image.h"
 case 74: 
 var $291=$s; //@line 4373 "./stb_image.h"
 var $292=(($291+8)|0); //@line 4373 "./stb_image.h"
 var $293=HEAP32[(($292)>>2)]; //@line 4373 "./stb_image.h"
 var $294=$293&1; //@line 4373 "./stb_image.h"
 var $295=($294|0)!=0; //@line 4373 "./stb_image.h"
 if($295){label=76;break;}else{label=75;break;} //@line 4373 "./stb_image.h"
 case 75: 
 var $297=_stbi__err(139000); //@line 4373 "./stb_image.h"
 $1=$297; //@line 4373 "./stb_image.h"
 label=145;break; //@line 4373 "./stb_image.h"
 case 76: 
 var $299=(($c)|0); //@line 4374 "./stb_image.h"
 var $300=HEAP32[(($299)>>2)]; //@line 4374 "./stb_image.h"
 var $301=$s; //@line 4374 "./stb_image.h"
 var $302=(($301+8)|0); //@line 4374 "./stb_image.h"
 var $303=HEAP32[(($302)>>2)]; //@line 4374 "./stb_image.h"
 var $304=($303<<1); //@line 4374 "./stb_image.h"
 var $305=($300|0)!=($304|0); //@line 4374 "./stb_image.h"
 if($305){label=77;break;}else{label=78;break;} //@line 4374 "./stb_image.h"
 case 77: 
 var $307=_stbi__err(139016); //@line 4374 "./stb_image.h"
 $1=$307; //@line 4374 "./stb_image.h"
 label=145;break; //@line 4374 "./stb_image.h"
 case 78: 
 $has_trans=1; //@line 4375 "./stb_image.h"
 $k=0; //@line 4376 "./stb_image.h"
 label=79;break; //@line 4376 "./stb_image.h"
 case 79: 
 var $310=$k; //@line 4376 "./stb_image.h"
 var $311=$s; //@line 4376 "./stb_image.h"
 var $312=(($311+8)|0); //@line 4376 "./stb_image.h"
 var $313=HEAP32[(($312)>>2)]; //@line 4376 "./stb_image.h"
 var $314=($310|0)<($313|0); //@line 4376 "./stb_image.h"
 if($314){label=80;break;}else{label=82;break;} //@line 4376 "./stb_image.h"
 case 80: 
 var $316=$s; //@line 4377 "./stb_image.h"
 var $317=_stbi__get16be($316); //@line 4377 "./stb_image.h"
 var $318=$317&255; //@line 4377 "./stb_image.h"
 var $319=(($318)&255); //@line 4377 "./stb_image.h"
 var $320=($319&255); //@line 4377 "./stb_image.h"
 var $321=$depth; //@line 4377 "./stb_image.h"
 var $322=((10312+$321)|0); //@line 4377 "./stb_image.h"
 var $323=HEAP8[($322)]; //@line 4377 "./stb_image.h"
 var $324=($323&255); //@line 4377 "./stb_image.h"
 var $325=(Math_imul($320,$324)|0); //@line 4377 "./stb_image.h"
 var $326=(($325)&255); //@line 4377 "./stb_image.h"
 var $327=$k; //@line 4377 "./stb_image.h"
 var $328=(($tc+$327)|0); //@line 4377 "./stb_image.h"
 HEAP8[($328)]=$326; //@line 4377 "./stb_image.h"
 label=81;break; //@line 4377 "./stb_image.h"
 case 81: 
 var $330=$k; //@line 4376 "./stb_image.h"
 var $331=((($330)+(1))|0); //@line 4376 "./stb_image.h"
 $k=$331; //@line 4376 "./stb_image.h"
 label=79;break; //@line 4376 "./stb_image.h"
 case 82: 
 label=83;break;
 case 83: 
 label=144;break; //@line 4379 "./stb_image.h"
 case 84: 
 var $335=$first; //@line 4383 "./stb_image.h"
 var $336=($335|0)!=0; //@line 4383 "./stb_image.h"
 if($336){label=85;break;}else{label=86;break;} //@line 4383 "./stb_image.h"
 case 85: 
 var $338=_stbi__err(139176); //@line 4383 "./stb_image.h"
 $1=$338; //@line 4383 "./stb_image.h"
 label=145;break; //@line 4383 "./stb_image.h"
 case 86: 
 var $340=$pal_img_n; //@line 4384 "./stb_image.h"
 var $341=($340&255); //@line 4384 "./stb_image.h"
 var $342=($341|0)!=0; //@line 4384 "./stb_image.h"
 if($342){label=87;break;}else{label=89;break;} //@line 4384 "./stb_image.h"
 case 87: 
 var $344=$pal_len; //@line 4384 "./stb_image.h"
 var $345=($344|0)!=0; //@line 4384 "./stb_image.h"
 if($345){label=89;break;}else{label=88;break;} //@line 4384 "./stb_image.h"
 case 88: 
 var $347=_stbi__err(138992); //@line 4384 "./stb_image.h"
 $1=$347; //@line 4384 "./stb_image.h"
 label=145;break; //@line 4384 "./stb_image.h"
 case 89: 
 var $349=$3; //@line 4385 "./stb_image.h"
 var $350=($349|0)==2; //@line 4385 "./stb_image.h"
 if($350){label=90;break;}else{label=91;break;} //@line 4385 "./stb_image.h"
 case 90: 
 var $352=$pal_img_n; //@line 4385 "./stb_image.h"
 var $353=($352&255); //@line 4385 "./stb_image.h"
 var $354=$s; //@line 4385 "./stb_image.h"
 var $355=(($354+8)|0); //@line 4385 "./stb_image.h"
 HEAP32[(($355)>>2)]=$353; //@line 4385 "./stb_image.h"
 $1=1; //@line 4385 "./stb_image.h"
 label=145;break; //@line 4385 "./stb_image.h"
 case 91: 
 var $357=$ioff; //@line 4386 "./stb_image.h"
 var $358=(($c)|0); //@line 4386 "./stb_image.h"
 var $359=HEAP32[(($358)>>2)]; //@line 4386 "./stb_image.h"
 var $360=((($357)+($359))|0); //@line 4386 "./stb_image.h"
 var $361=$ioff; //@line 4386 "./stb_image.h"
 var $362=($360|0)<($361|0); //@line 4386 "./stb_image.h"
 if($362){label=92;break;}else{label=93;break;} //@line 4386 "./stb_image.h"
 case 92: 
 $1=0; //@line 4386 "./stb_image.h"
 label=145;break; //@line 4386 "./stb_image.h"
 case 93: 
 var $365=$ioff; //@line 4387 "./stb_image.h"
 var $366=(($c)|0); //@line 4387 "./stb_image.h"
 var $367=HEAP32[(($366)>>2)]; //@line 4387 "./stb_image.h"
 var $368=((($365)+($367))|0); //@line 4387 "./stb_image.h"
 var $369=$idata_limit; //@line 4387 "./stb_image.h"
 var $370=($368>>>0)>($369>>>0); //@line 4387 "./stb_image.h"
 if($370){label=94;break;}else{label=105;break;} //@line 4387 "./stb_image.h"
 case 94: 
 var $372=$idata_limit; //@line 4389 "./stb_image.h"
 var $373=($372|0)==0; //@line 4389 "./stb_image.h"
 if($373){label=95;break;}else{label=99;break;} //@line 4389 "./stb_image.h"
 case 95: 
 var $375=(($c)|0); //@line 4389 "./stb_image.h"
 var $376=HEAP32[(($375)>>2)]; //@line 4389 "./stb_image.h"
 var $377=($376>>>0)>4096; //@line 4389 "./stb_image.h"
 if($377){label=96;break;}else{label=97;break;} //@line 4389 "./stb_image.h"
 case 96: 
 var $379=(($c)|0); //@line 4389 "./stb_image.h"
 var $380=HEAP32[(($379)>>2)]; //@line 4389 "./stb_image.h"
 var $383=$380;label=98;break; //@line 4389 "./stb_image.h"
 case 97: 
 var $383=4096;label=98;break; //@line 4389 "./stb_image.h"
 case 98: 
 var $383; //@line 4389 "./stb_image.h"
 $idata_limit=$383; //@line 4389 "./stb_image.h"
 label=99;break; //@line 4389 "./stb_image.h"
 case 99: 
 label=100;break; //@line 4390 "./stb_image.h"
 case 100: 
 var $386=$ioff; //@line 4390 "./stb_image.h"
 var $387=(($c)|0); //@line 4390 "./stb_image.h"
 var $388=HEAP32[(($387)>>2)]; //@line 4390 "./stb_image.h"
 var $389=((($386)+($388))|0); //@line 4390 "./stb_image.h"
 var $390=$idata_limit; //@line 4390 "./stb_image.h"
 var $391=($389>>>0)>($390>>>0); //@line 4390 "./stb_image.h"
 if($391){label=101;break;}else{label=102;break;} //@line 4390 "./stb_image.h"
 case 101: 
 var $393=$idata_limit; //@line 4391 "./stb_image.h"
 var $394=($393<<1); //@line 4391 "./stb_image.h"
 $idata_limit=$394; //@line 4391 "./stb_image.h"
 label=100;break; //@line 4391 "./stb_image.h"
 case 102: 
 var $396=$2; //@line 4392 "./stb_image.h"
 var $397=(($396+4)|0); //@line 4392 "./stb_image.h"
 var $398=HEAP32[(($397)>>2)]; //@line 4392 "./stb_image.h"
 var $399=$idata_limit; //@line 4392 "./stb_image.h"
 var $400=_realloc($398,$399); //@line 4392 "./stb_image.h"
 $p=$400; //@line 4392 "./stb_image.h"
 var $401=$p; //@line 4392 "./stb_image.h"
 var $402=($401|0)==0; //@line 4392 "./stb_image.h"
 if($402){label=103;break;}else{label=104;break;} //@line 4392 "./stb_image.h"
 case 103: 
 var $404=_stbi__err(138952); //@line 4392 "./stb_image.h"
 $1=$404; //@line 4392 "./stb_image.h"
 label=145;break; //@line 4392 "./stb_image.h"
 case 104: 
 var $406=$p; //@line 4393 "./stb_image.h"
 var $407=$2; //@line 4393 "./stb_image.h"
 var $408=(($407+4)|0); //@line 4393 "./stb_image.h"
 HEAP32[(($408)>>2)]=$406; //@line 4393 "./stb_image.h"
 label=105;break; //@line 4394 "./stb_image.h"
 case 105: 
 var $410=$s; //@line 4395 "./stb_image.h"
 var $411=$2; //@line 4395 "./stb_image.h"
 var $412=(($411+4)|0); //@line 4395 "./stb_image.h"
 var $413=HEAP32[(($412)>>2)]; //@line 4395 "./stb_image.h"
 var $414=$ioff; //@line 4395 "./stb_image.h"
 var $415=(($413+$414)|0); //@line 4395 "./stb_image.h"
 var $416=(($c)|0); //@line 4395 "./stb_image.h"
 var $417=HEAP32[(($416)>>2)]; //@line 4395 "./stb_image.h"
 var $418=_stbi__getn($410,$415,$417); //@line 4395 "./stb_image.h"
 var $419=($418|0)!=0; //@line 4395 "./stb_image.h"
 if($419){label=107;break;}else{label=106;break;} //@line 4395 "./stb_image.h"
 case 106: 
 var $421=_stbi__err(138928); //@line 4395 "./stb_image.h"
 $1=$421; //@line 4395 "./stb_image.h"
 label=145;break; //@line 4395 "./stb_image.h"
 case 107: 
 var $423=(($c)|0); //@line 4396 "./stb_image.h"
 var $424=HEAP32[(($423)>>2)]; //@line 4396 "./stb_image.h"
 var $425=$ioff; //@line 4396 "./stb_image.h"
 var $426=((($425)+($424))|0); //@line 4396 "./stb_image.h"
 $ioff=$426; //@line 4396 "./stb_image.h"
 label=144;break; //@line 4397 "./stb_image.h"
 case 108: 
 var $428=$first; //@line 4402 "./stb_image.h"
 var $429=($428|0)!=0; //@line 4402 "./stb_image.h"
 if($429){label=109;break;}else{label=110;break;} //@line 4402 "./stb_image.h"
 case 109: 
 var $431=_stbi__err(139176); //@line 4402 "./stb_image.h"
 $1=$431; //@line 4402 "./stb_image.h"
 label=145;break; //@line 4402 "./stb_image.h"
 case 110: 
 var $433=$3; //@line 4403 "./stb_image.h"
 var $434=($433|0)!=0; //@line 4403 "./stb_image.h"
 if($434){label=111;break;}else{label=112;break;} //@line 4403 "./stb_image.h"
 case 111: 
 $1=1; //@line 4403 "./stb_image.h"
 label=145;break; //@line 4403 "./stb_image.h"
 case 112: 
 var $437=$2; //@line 4404 "./stb_image.h"
 var $438=(($437+4)|0); //@line 4404 "./stb_image.h"
 var $439=HEAP32[(($438)>>2)]; //@line 4404 "./stb_image.h"
 var $440=($439|0)==0; //@line 4404 "./stb_image.h"
 if($440){label=113;break;}else{label=114;break;} //@line 4404 "./stb_image.h"
 case 113: 
 var $442=_stbi__err(138920); //@line 4404 "./stb_image.h"
 $1=$442; //@line 4404 "./stb_image.h"
 label=145;break; //@line 4404 "./stb_image.h"
 case 114: 
 var $444=$s; //@line 4406 "./stb_image.h"
 var $445=(($444)|0); //@line 4406 "./stb_image.h"
 var $446=HEAP32[(($445)>>2)]; //@line 4406 "./stb_image.h"
 var $447=$depth; //@line 4406 "./stb_image.h"
 var $448=(Math_imul($446,$447)|0); //@line 4406 "./stb_image.h"
 var $449=((($448)+(7))|0); //@line 4406 "./stb_image.h"
 var $450=(((($449>>>0))/(8))&-1); //@line 4406 "./stb_image.h"
 $bpl=$450; //@line 4406 "./stb_image.h"
 var $451=$bpl; //@line 4407 "./stb_image.h"
 var $452=$s; //@line 4407 "./stb_image.h"
 var $453=(($452+4)|0); //@line 4407 "./stb_image.h"
 var $454=HEAP32[(($453)>>2)]; //@line 4407 "./stb_image.h"
 var $455=(Math_imul($451,$454)|0); //@line 4407 "./stb_image.h"
 var $456=$s; //@line 4407 "./stb_image.h"
 var $457=(($456+8)|0); //@line 4407 "./stb_image.h"
 var $458=HEAP32[(($457)>>2)]; //@line 4407 "./stb_image.h"
 var $459=(Math_imul($455,$458)|0); //@line 4407 "./stb_image.h"
 var $460=$s; //@line 4407 "./stb_image.h"
 var $461=(($460+4)|0); //@line 4407 "./stb_image.h"
 var $462=HEAP32[(($461)>>2)]; //@line 4407 "./stb_image.h"
 var $463=((($459)+($462))|0); //@line 4407 "./stb_image.h"
 HEAP32[(($raw_len)>>2)]=$463; //@line 4407 "./stb_image.h"
 var $464=$2; //@line 4408 "./stb_image.h"
 var $465=(($464+4)|0); //@line 4408 "./stb_image.h"
 var $466=HEAP32[(($465)>>2)]; //@line 4408 "./stb_image.h"
 var $467=$ioff; //@line 4408 "./stb_image.h"
 var $468=HEAP32[(($raw_len)>>2)]; //@line 4408 "./stb_image.h"
 var $469=$is_iphone; //@line 4408 "./stb_image.h"
 var $470=($469|0)!=0; //@line 4408 "./stb_image.h"
 var $471=$470^1; //@line 4408 "./stb_image.h"
 var $472=($471&1); //@line 4408 "./stb_image.h"
 var $473=_stbi_zlib_decode_malloc_guesssize_headerflag($466,$467,$468,$raw_len,$472); //@line 4408 "./stb_image.h"
 var $474=$2; //@line 4408 "./stb_image.h"
 var $475=(($474+8)|0); //@line 4408 "./stb_image.h"
 HEAP32[(($475)>>2)]=$473; //@line 4408 "./stb_image.h"
 var $476=$2; //@line 4409 "./stb_image.h"
 var $477=(($476+8)|0); //@line 4409 "./stb_image.h"
 var $478=HEAP32[(($477)>>2)]; //@line 4409 "./stb_image.h"
 var $479=($478|0)==0; //@line 4409 "./stb_image.h"
 if($479){label=115;break;}else{label=116;break;} //@line 4409 "./stb_image.h"
 case 115: 
 $1=0; //@line 4409 "./stb_image.h"
 label=145;break; //@line 4409 "./stb_image.h"
 case 116: 
 var $482=$2; //@line 4410 "./stb_image.h"
 var $483=(($482+4)|0); //@line 4410 "./stb_image.h"
 var $484=HEAP32[(($483)>>2)]; //@line 4410 "./stb_image.h"
 _free($484); //@line 4410 "./stb_image.h"
 var $485=$2; //@line 4410 "./stb_image.h"
 var $486=(($485+4)|0); //@line 4410 "./stb_image.h"
 HEAP32[(($486)>>2)]=0; //@line 4410 "./stb_image.h"
 var $487=$4; //@line 4411 "./stb_image.h"
 var $488=$s; //@line 4411 "./stb_image.h"
 var $489=(($488+8)|0); //@line 4411 "./stb_image.h"
 var $490=HEAP32[(($489)>>2)]; //@line 4411 "./stb_image.h"
 var $491=((($490)+(1))|0); //@line 4411 "./stb_image.h"
 var $492=($487|0)==($491|0); //@line 4411 "./stb_image.h"
 if($492){label=117;break;}else{label=119;break;} //@line 4411 "./stb_image.h"
 case 117: 
 var $494=$4; //@line 4411 "./stb_image.h"
 var $495=($494|0)!=3; //@line 4411 "./stb_image.h"
 if($495){label=118;break;}else{label=119;break;} //@line 4411 "./stb_image.h"
 case 118: 
 var $497=$pal_img_n; //@line 4411 "./stb_image.h"
 var $498=(($497<<24)>>24)!=0; //@line 4411 "./stb_image.h"
 if($498){label=119;break;}else{label=120;break;} //@line 4411 "./stb_image.h"
 case 119: 
 var $500=$has_trans; //@line 4411 "./stb_image.h"
 var $501=($500&255); //@line 4411 "./stb_image.h"
 var $502=($501|0)!=0; //@line 4411 "./stb_image.h"
 if($502){label=120;break;}else{label=121;break;} //@line 4411 "./stb_image.h"
 case 120: 
 var $504=$s; //@line 4412 "./stb_image.h"
 var $505=(($504+8)|0); //@line 4412 "./stb_image.h"
 var $506=HEAP32[(($505)>>2)]; //@line 4412 "./stb_image.h"
 var $507=((($506)+(1))|0); //@line 4412 "./stb_image.h"
 var $508=$s; //@line 4412 "./stb_image.h"
 var $509=(($508+12)|0); //@line 4412 "./stb_image.h"
 HEAP32[(($509)>>2)]=$507; //@line 4412 "./stb_image.h"
 label=122;break; //@line 4412 "./stb_image.h"
 case 121: 
 var $511=$s; //@line 4414 "./stb_image.h"
 var $512=(($511+8)|0); //@line 4414 "./stb_image.h"
 var $513=HEAP32[(($512)>>2)]; //@line 4414 "./stb_image.h"
 var $514=$s; //@line 4414 "./stb_image.h"
 var $515=(($514+12)|0); //@line 4414 "./stb_image.h"
 HEAP32[(($515)>>2)]=$513; //@line 4414 "./stb_image.h"
 label=122;break;
 case 122: 
 var $517=$2; //@line 4415 "./stb_image.h"
 var $518=$2; //@line 4415 "./stb_image.h"
 var $519=(($518+8)|0); //@line 4415 "./stb_image.h"
 var $520=HEAP32[(($519)>>2)]; //@line 4415 "./stb_image.h"
 var $521=HEAP32[(($raw_len)>>2)]; //@line 4415 "./stb_image.h"
 var $522=$s; //@line 4415 "./stb_image.h"
 var $523=(($522+12)|0); //@line 4415 "./stb_image.h"
 var $524=HEAP32[(($523)>>2)]; //@line 4415 "./stb_image.h"
 var $525=$depth; //@line 4415 "./stb_image.h"
 var $526=$color; //@line 4415 "./stb_image.h"
 var $527=$interlace; //@line 4415 "./stb_image.h"
 var $528=_stbi__create_png_image($517,$520,$521,$524,$525,$526,$527); //@line 4415 "./stb_image.h"
 var $529=($528|0)!=0; //@line 4415 "./stb_image.h"
 if($529){label=124;break;}else{label=123;break;} //@line 4415 "./stb_image.h"
 case 123: 
 $1=0; //@line 4415 "./stb_image.h"
 label=145;break; //@line 4415 "./stb_image.h"
 case 124: 
 var $532=$has_trans; //@line 4416 "./stb_image.h"
 var $533=(($532<<24)>>24)!=0; //@line 4416 "./stb_image.h"
 if($533){label=125;break;}else{label=128;break;} //@line 4416 "./stb_image.h"
 case 125: 
 var $535=$2; //@line 4417 "./stb_image.h"
 var $536=(($tc)|0); //@line 4417 "./stb_image.h"
 var $537=$s; //@line 4417 "./stb_image.h"
 var $538=(($537+12)|0); //@line 4417 "./stb_image.h"
 var $539=HEAP32[(($538)>>2)]; //@line 4417 "./stb_image.h"
 var $540=_stbi__compute_transparency($535,$536,$539); //@line 4417 "./stb_image.h"
 var $541=($540|0)!=0; //@line 4417 "./stb_image.h"
 if($541){label=127;break;}else{label=126;break;} //@line 4417 "./stb_image.h"
 case 126: 
 $1=0; //@line 4417 "./stb_image.h"
 label=145;break; //@line 4417 "./stb_image.h"
 case 127: 
 label=128;break; //@line 4417 "./stb_image.h"
 case 128: 
 var $545=$is_iphone; //@line 4418 "./stb_image.h"
 var $546=($545|0)!=0; //@line 4418 "./stb_image.h"
 if($546){label=129;break;}else{label=132;break;} //@line 4418 "./stb_image.h"
 case 129: 
 var $548=HEAP32[((141008)>>2)]; //@line 4418 "./stb_image.h"
 var $549=($548|0)!=0; //@line 4418 "./stb_image.h"
 if($549){label=130;break;}else{label=132;break;} //@line 4418 "./stb_image.h"
 case 130: 
 var $551=$s; //@line 4418 "./stb_image.h"
 var $552=(($551+12)|0); //@line 4418 "./stb_image.h"
 var $553=HEAP32[(($552)>>2)]; //@line 4418 "./stb_image.h"
 var $554=($553|0)>2; //@line 4418 "./stb_image.h"
 if($554){label=131;break;}else{label=132;break;} //@line 4418 "./stb_image.h"
 case 131: 
 var $556=$2; //@line 4419 "./stb_image.h"
 _stbi__de_iphone($556); //@line 4419 "./stb_image.h"
 label=132;break; //@line 4419 "./stb_image.h"
 case 132: 
 var $558=$pal_img_n; //@line 4420 "./stb_image.h"
 var $559=(($558<<24)>>24)!=0; //@line 4420 "./stb_image.h"
 if($559){label=133;break;}else{label=138;break;} //@line 4420 "./stb_image.h"
 case 133: 
 var $561=$pal_img_n; //@line 4422 "./stb_image.h"
 var $562=($561&255); //@line 4422 "./stb_image.h"
 var $563=$s; //@line 4422 "./stb_image.h"
 var $564=(($563+8)|0); //@line 4422 "./stb_image.h"
 HEAP32[(($564)>>2)]=$562; //@line 4422 "./stb_image.h"
 var $565=$pal_img_n; //@line 4423 "./stb_image.h"
 var $566=($565&255); //@line 4423 "./stb_image.h"
 var $567=$s; //@line 4423 "./stb_image.h"
 var $568=(($567+12)|0); //@line 4423 "./stb_image.h"
 HEAP32[(($568)>>2)]=$566; //@line 4423 "./stb_image.h"
 var $569=$4; //@line 4424 "./stb_image.h"
 var $570=($569|0)>=3; //@line 4424 "./stb_image.h"
 if($570){label=134;break;}else{label=135;break;} //@line 4424 "./stb_image.h"
 case 134: 
 var $572=$4; //@line 4424 "./stb_image.h"
 var $573=$s; //@line 4424 "./stb_image.h"
 var $574=(($573+12)|0); //@line 4424 "./stb_image.h"
 HEAP32[(($574)>>2)]=$572; //@line 4424 "./stb_image.h"
 label=135;break; //@line 4424 "./stb_image.h"
 case 135: 
 var $576=$2; //@line 4425 "./stb_image.h"
 var $577=(($palette)|0); //@line 4425 "./stb_image.h"
 var $578=$pal_len; //@line 4425 "./stb_image.h"
 var $579=$s; //@line 4425 "./stb_image.h"
 var $580=(($579+12)|0); //@line 4425 "./stb_image.h"
 var $581=HEAP32[(($580)>>2)]; //@line 4425 "./stb_image.h"
 var $582=_stbi__expand_png_palette($576,$577,$578,$581); //@line 4425 "./stb_image.h"
 var $583=($582|0)!=0; //@line 4425 "./stb_image.h"
 if($583){label=137;break;}else{label=136;break;} //@line 4425 "./stb_image.h"
 case 136: 
 $1=0; //@line 4426 "./stb_image.h"
 label=145;break; //@line 4426 "./stb_image.h"
 case 137: 
 label=138;break; //@line 4427 "./stb_image.h"
 case 138: 
 var $587=$2; //@line 4428 "./stb_image.h"
 var $588=(($587+8)|0); //@line 4428 "./stb_image.h"
 var $589=HEAP32[(($588)>>2)]; //@line 4428 "./stb_image.h"
 _free($589); //@line 4428 "./stb_image.h"
 var $590=$2; //@line 4428 "./stb_image.h"
 var $591=(($590+8)|0); //@line 4428 "./stb_image.h"
 HEAP32[(($591)>>2)]=0; //@line 4428 "./stb_image.h"
 $1=1; //@line 4429 "./stb_image.h"
 label=145;break; //@line 4429 "./stb_image.h"
 case 139: 
 var $593=$first; //@line 4434 "./stb_image.h"
 var $594=($593|0)!=0; //@line 4434 "./stb_image.h"
 if($594){label=140;break;}else{label=141;break;} //@line 4434 "./stb_image.h"
 case 140: 
 var $596=_stbi__err(139176); //@line 4434 "./stb_image.h"
 $1=$596; //@line 4434 "./stb_image.h"
 label=145;break; //@line 4434 "./stb_image.h"
 case 141: 
 var $598=(($c+4)|0); //@line 4435 "./stb_image.h"
 var $599=HEAP32[(($598)>>2)]; //@line 4435 "./stb_image.h"
 var $600=$599&536870912; //@line 4435 "./stb_image.h"
 var $601=($600|0)==0; //@line 4435 "./stb_image.h"
 if($601){label=142;break;}else{label=143;break;} //@line 4435 "./stb_image.h"
 case 142: 
 var $603=(($c+4)|0); //@line 4439 "./stb_image.h"
 var $604=HEAP32[(($603)>>2)]; //@line 4439 "./stb_image.h"
 var $605=$604>>>24; //@line 4439 "./stb_image.h"
 var $606=$605&255; //@line 4439 "./stb_image.h"
 var $607=(($606)&255); //@line 4439 "./stb_image.h"
 HEAP8[(10104)]=$607; //@line 4439 "./stb_image.h"
 var $608=(($c+4)|0); //@line 4440 "./stb_image.h"
 var $609=HEAP32[(($608)>>2)]; //@line 4440 "./stb_image.h"
 var $610=$609>>>16; //@line 4440 "./stb_image.h"
 var $611=$610&255; //@line 4440 "./stb_image.h"
 var $612=(($611)&255); //@line 4440 "./stb_image.h"
 HEAP8[(10105)]=$612; //@line 4440 "./stb_image.h"
 var $613=(($c+4)|0); //@line 4441 "./stb_image.h"
 var $614=HEAP32[(($613)>>2)]; //@line 4441 "./stb_image.h"
 var $615=$614>>>8; //@line 4441 "./stb_image.h"
 var $616=$615&255; //@line 4441 "./stb_image.h"
 var $617=(($616)&255); //@line 4441 "./stb_image.h"
 HEAP8[(10106)]=$617; //@line 4441 "./stb_image.h"
 var $618=(($c+4)|0); //@line 4442 "./stb_image.h"
 var $619=HEAP32[(($618)>>2)]; //@line 4442 "./stb_image.h"
 var $620=$619>>>0; //@line 4442 "./stb_image.h"
 var $621=$620&255; //@line 4442 "./stb_image.h"
 var $622=(($621)&255); //@line 4442 "./stb_image.h"
 HEAP8[(10107)]=$622; //@line 4442 "./stb_image.h"
 var $623=_stbi__err(10104); //@line 4444 "./stb_image.h"
 $1=$623; //@line 4444 "./stb_image.h"
 label=145;break; //@line 4444 "./stb_image.h"
 case 143: 
 var $625=$s; //@line 4446 "./stb_image.h"
 var $626=(($c)|0); //@line 4446 "./stb_image.h"
 var $627=HEAP32[(($626)>>2)]; //@line 4446 "./stb_image.h"
 _stbi__skip($625,$627); //@line 4446 "./stb_image.h"
 label=144;break; //@line 4447 "./stb_image.h"
 case 144: 
 var $629=$s; //@line 4450 "./stb_image.h"
 var $630=_stbi__get32be($629); //@line 4450 "./stb_image.h"
 label=6;break; //@line 4451 "./stb_image.h"
 case 145: 
 var $632=$1; //@line 4452 "./stb_image.h"
 STACKTOP=sp;return $632; //@line 4452 "./stb_image.h"
  default: assert(0, "bad label: " + label);
 }

}


function _stbi__check_png_header($s){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $i;
 $2=$s;
 $i=0; //@line 3912 "./stb_image.h"
 label=2;break; //@line 3912 "./stb_image.h"
 case 2: 
 var $4=$i; //@line 3912 "./stb_image.h"
 var $5=($4|0)<8; //@line 3912 "./stb_image.h"
 if($5){label=3;break;}else{label=7;break;} //@line 3912 "./stb_image.h"
 case 3: 
 var $7=$2; //@line 3913 "./stb_image.h"
 var $8=_stbi__get8($7); //@line 3913 "./stb_image.h"
 var $9=($8&255); //@line 3913 "./stb_image.h"
 var $10=$i; //@line 3913 "./stb_image.h"
 var $11=((10480+$10)|0); //@line 3913 "./stb_image.h"
 var $12=HEAP8[($11)]; //@line 3913 "./stb_image.h"
 var $13=($12&255); //@line 3913 "./stb_image.h"
 var $14=($9|0)!=($13|0); //@line 3913 "./stb_image.h"
 if($14){label=4;break;}else{label=5;break;} //@line 3913 "./stb_image.h"
 case 4: 
 var $16=_stbi__err(138552); //@line 3913 "./stb_image.h"
 $1=$16; //@line 3913 "./stb_image.h"
 label=8;break; //@line 3913 "./stb_image.h"
 case 5: 
 label=6;break; //@line 3913 "./stb_image.h"
 case 6: 
 var $19=$i; //@line 3912 "./stb_image.h"
 var $20=((($19)+(1))|0); //@line 3912 "./stb_image.h"
 $i=$20; //@line 3912 "./stb_image.h"
 label=2;break; //@line 3912 "./stb_image.h"
 case 7: 
 $1=1; //@line 3914 "./stb_image.h"
 label=8;break; //@line 3914 "./stb_image.h"
 case 8: 
 var $23=$1; //@line 3915 "./stb_image.h"
 STACKTOP=sp;return $23; //@line 3915 "./stb_image.h"
  default: assert(0, "bad label: " + label);
 }

}


function _stbi__get_chunk_header($agg_result,$s){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 var $c=sp;
 $1=$s;
 var $2=$1; //@line 3903 "./stb_image.h"
 var $3=_stbi__get32be($2); //@line 3903 "./stb_image.h"
 var $4=(($c)|0); //@line 3903 "./stb_image.h"
 HEAP32[(($4)>>2)]=$3; //@line 3903 "./stb_image.h"
 var $5=$1; //@line 3904 "./stb_image.h"
 var $6=_stbi__get32be($5); //@line 3904 "./stb_image.h"
 var $7=(($c+4)|0); //@line 3904 "./stb_image.h"
 HEAP32[(($7)>>2)]=$6; //@line 3904 "./stb_image.h"
 var $8=$agg_result; //@line 3905 "./stb_image.h"
 var $9=$c; //@line 3905 "./stb_image.h"
 assert(8 % 1 === 0);HEAP32[(($8)>>2)]=HEAP32[(($9)>>2)];HEAP32[((($8)+(4))>>2)]=HEAP32[((($9)+(4))>>2)]; //@line 3905 "./stb_image.h"
 STACKTOP=sp;return; //@line 3905 "./stb_image.h"
}


function _stbi__getn($s,$buffer,$n){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $blen;
 var $res;
 var $count;
 $2=$s;
 $3=$buffer;
 $4=$n;
 var $5=$2; //@line 1254 "./stb_image.h"
 var $6=(($5+16)|0); //@line 1254 "./stb_image.h"
 var $7=(($6)|0); //@line 1254 "./stb_image.h"
 var $8=HEAP32[(($7)>>2)]; //@line 1254 "./stb_image.h"
 var $9=($8|0)!=0; //@line 1254 "./stb_image.h"
 if($9){label=2;break;}else{label=5;break;} //@line 1254 "./stb_image.h"
 case 2: 
 var $11=$2; //@line 1255 "./stb_image.h"
 var $12=(($11+172)|0); //@line 1255 "./stb_image.h"
 var $13=HEAP32[(($12)>>2)]; //@line 1255 "./stb_image.h"
 var $14=$2; //@line 1255 "./stb_image.h"
 var $15=(($14+168)|0); //@line 1255 "./stb_image.h"
 var $16=HEAP32[(($15)>>2)]; //@line 1255 "./stb_image.h"
 var $17=$13; //@line 1255 "./stb_image.h"
 var $18=$16; //@line 1255 "./stb_image.h"
 var $19=((($17)-($18))|0); //@line 1255 "./stb_image.h"
 $blen=$19; //@line 1255 "./stb_image.h"
 var $20=$blen; //@line 1256 "./stb_image.h"
 var $21=$4; //@line 1256 "./stb_image.h"
 var $22=($20|0)<($21|0); //@line 1256 "./stb_image.h"
 if($22){label=3;break;}else{label=4;break;} //@line 1256 "./stb_image.h"
 case 3: 
 var $24=$3; //@line 1259 "./stb_image.h"
 var $25=$2; //@line 1259 "./stb_image.h"
 var $26=(($25+168)|0); //@line 1259 "./stb_image.h"
 var $27=HEAP32[(($26)>>2)]; //@line 1259 "./stb_image.h"
 var $28=$blen; //@line 1259 "./stb_image.h"
 assert($28 % 1 === 0);(_memcpy($24, $27, $28)|0); //@line 1259 "./stb_image.h"
 var $29=$2; //@line 1261 "./stb_image.h"
 var $30=(($29+16)|0); //@line 1261 "./stb_image.h"
 var $31=(($30)|0); //@line 1261 "./stb_image.h"
 var $32=HEAP32[(($31)>>2)]; //@line 1261 "./stb_image.h"
 var $33=$2; //@line 1261 "./stb_image.h"
 var $34=(($33+28)|0); //@line 1261 "./stb_image.h"
 var $35=HEAP32[(($34)>>2)]; //@line 1261 "./stb_image.h"
 var $36=$3; //@line 1261 "./stb_image.h"
 var $37=$blen; //@line 1261 "./stb_image.h"
 var $38=(($36+$37)|0); //@line 1261 "./stb_image.h"
 var $39=$4; //@line 1261 "./stb_image.h"
 var $40=$blen; //@line 1261 "./stb_image.h"
 var $41=((($39)-($40))|0); //@line 1261 "./stb_image.h"
 var $42=FUNCTION_TABLE[$32]($35,$38,$41); //@line 1261 "./stb_image.h"
 $count=$42; //@line 1261 "./stb_image.h"
 var $43=$count; //@line 1262 "./stb_image.h"
 var $44=$4; //@line 1262 "./stb_image.h"
 var $45=$blen; //@line 1262 "./stb_image.h"
 var $46=((($44)-($45))|0); //@line 1262 "./stb_image.h"
 var $47=($43|0)==($46|0); //@line 1262 "./stb_image.h"
 var $48=($47&1); //@line 1262 "./stb_image.h"
 $res=$48; //@line 1262 "./stb_image.h"
 var $49=$2; //@line 1263 "./stb_image.h"
 var $50=(($49+172)|0); //@line 1263 "./stb_image.h"
 var $51=HEAP32[(($50)>>2)]; //@line 1263 "./stb_image.h"
 var $52=$2; //@line 1263 "./stb_image.h"
 var $53=(($52+168)|0); //@line 1263 "./stb_image.h"
 HEAP32[(($53)>>2)]=$51; //@line 1263 "./stb_image.h"
 var $54=$res; //@line 1264 "./stb_image.h"
 $1=$54; //@line 1264 "./stb_image.h"
 label=8;break; //@line 1264 "./stb_image.h"
 case 4: 
 label=5;break; //@line 1266 "./stb_image.h"
 case 5: 
 var $57=$2; //@line 1268 "./stb_image.h"
 var $58=(($57+168)|0); //@line 1268 "./stb_image.h"
 var $59=HEAP32[(($58)>>2)]; //@line 1268 "./stb_image.h"
 var $60=$4; //@line 1268 "./stb_image.h"
 var $61=(($59+$60)|0); //@line 1268 "./stb_image.h"
 var $62=$2; //@line 1268 "./stb_image.h"
 var $63=(($62+172)|0); //@line 1268 "./stb_image.h"
 var $64=HEAP32[(($63)>>2)]; //@line 1268 "./stb_image.h"
 var $65=($61>>>0)<=($64>>>0); //@line 1268 "./stb_image.h"
 if($65){label=6;break;}else{label=7;break;} //@line 1268 "./stb_image.h"
 case 6: 
 var $67=$3; //@line 1269 "./stb_image.h"
 var $68=$2; //@line 1269 "./stb_image.h"
 var $69=(($68+168)|0); //@line 1269 "./stb_image.h"
 var $70=HEAP32[(($69)>>2)]; //@line 1269 "./stb_image.h"
 var $71=$4; //@line 1269 "./stb_image.h"
 assert($71 % 1 === 0);(_memcpy($67, $70, $71)|0); //@line 1269 "./stb_image.h"
 var $72=$4; //@line 1270 "./stb_image.h"
 var $73=$2; //@line 1270 "./stb_image.h"
 var $74=(($73+168)|0); //@line 1270 "./stb_image.h"
 var $75=HEAP32[(($74)>>2)]; //@line 1270 "./stb_image.h"
 var $76=(($75+$72)|0); //@line 1270 "./stb_image.h"
 HEAP32[(($74)>>2)]=$76; //@line 1270 "./stb_image.h"
 $1=1; //@line 1271 "./stb_image.h"
 label=8;break; //@line 1271 "./stb_image.h"
 case 7: 
 $1=0; //@line 1273 "./stb_image.h"
 label=8;break; //@line 1273 "./stb_image.h"
 case 8: 
 var $79=$1; //@line 1274 "./stb_image.h"
 STACKTOP=sp;return $79; //@line 1274 "./stb_image.h"
  default: assert(0, "bad label: " + label);
 }

}


function _stbi__create_png_image($a,$image_data,$image_data_len,$out_n,$depth,$color,$interlaced){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+128)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 var $7;
 var $8;
 var $final;
 var $p;
 var $xorig=sp;
 var $yorig=(sp)+(32);
 var $xspc=(sp)+(64);
 var $yspc=(sp)+(96);
 var $i;
 var $j;
 var $x;
 var $y;
 var $img_len;
 var $out_y;
 var $out_x;
 $2=$a;
 $3=$image_data;
 $4=$image_data_len;
 $5=$out_n;
 $6=$depth;
 $7=$color;
 $8=$interlaced;
 var $9=$8; //@line 4140 "./stb_image.h"
 var $10=($9|0)!=0; //@line 4140 "./stb_image.h"
 if($10){label=3;break;}else{label=2;break;} //@line 4140 "./stb_image.h"
 case 2: 
 var $12=$2; //@line 4141 "./stb_image.h"
 var $13=$3; //@line 4141 "./stb_image.h"
 var $14=$4; //@line 4141 "./stb_image.h"
 var $15=$5; //@line 4141 "./stb_image.h"
 var $16=$2; //@line 4141 "./stb_image.h"
 var $17=(($16)|0); //@line 4141 "./stb_image.h"
 var $18=HEAP32[(($17)>>2)]; //@line 4141 "./stb_image.h"
 var $19=(($18)|0); //@line 4141 "./stb_image.h"
 var $20=HEAP32[(($19)>>2)]; //@line 4141 "./stb_image.h"
 var $21=$2; //@line 4141 "./stb_image.h"
 var $22=(($21)|0); //@line 4141 "./stb_image.h"
 var $23=HEAP32[(($22)>>2)]; //@line 4141 "./stb_image.h"
 var $24=(($23+4)|0); //@line 4141 "./stb_image.h"
 var $25=HEAP32[(($24)>>2)]; //@line 4141 "./stb_image.h"
 var $26=$6; //@line 4141 "./stb_image.h"
 var $27=$7; //@line 4141 "./stb_image.h"
 var $28=_stbi__create_png_image_raw($12,$13,$14,$15,$20,$25,$26,$27); //@line 4141 "./stb_image.h"
 $1=$28; //@line 4141 "./stb_image.h"
 label=21;break; //@line 4141 "./stb_image.h"
 case 3: 
 var $30=$2; //@line 4144 "./stb_image.h"
 var $31=(($30)|0); //@line 4144 "./stb_image.h"
 var $32=HEAP32[(($31)>>2)]; //@line 4144 "./stb_image.h"
 var $33=(($32)|0); //@line 4144 "./stb_image.h"
 var $34=HEAP32[(($33)>>2)]; //@line 4144 "./stb_image.h"
 var $35=$2; //@line 4144 "./stb_image.h"
 var $36=(($35)|0); //@line 4144 "./stb_image.h"
 var $37=HEAP32[(($36)>>2)]; //@line 4144 "./stb_image.h"
 var $38=(($37+4)|0); //@line 4144 "./stb_image.h"
 var $39=HEAP32[(($38)>>2)]; //@line 4144 "./stb_image.h"
 var $40=(Math_imul($34,$39)|0); //@line 4144 "./stb_image.h"
 var $41=$5; //@line 4144 "./stb_image.h"
 var $42=(Math_imul($40,$41)|0); //@line 4144 "./stb_image.h"
 var $43=_stbi__malloc($42); //@line 4144 "./stb_image.h"
 $final=$43; //@line 4144 "./stb_image.h"
 $p=0; //@line 4145 "./stb_image.h"
 label=4;break; //@line 4145 "./stb_image.h"
 case 4: 
 var $45=$p; //@line 4145 "./stb_image.h"
 var $46=($45|0)<7; //@line 4145 "./stb_image.h"
 if($46){label=5;break;}else{label=20;break;} //@line 4145 "./stb_image.h"
 case 5: 
 var $48=$xorig; //@line 4146 "./stb_image.h"
 assert(28 % 1 === 0);HEAP32[(($48)>>2)]=HEAP32[((10424)>>2)];HEAP32[((($48)+(4))>>2)]=HEAP32[((10428)>>2)];HEAP32[((($48)+(8))>>2)]=HEAP32[((10432)>>2)];HEAP32[((($48)+(12))>>2)]=HEAP32[((10436)>>2)];HEAP32[((($48)+(16))>>2)]=HEAP32[((10440)>>2)];HEAP32[((($48)+(20))>>2)]=HEAP32[((10444)>>2)];HEAP32[((($48)+(24))>>2)]=HEAP32[((10448)>>2)]; //@line 4146 "./stb_image.h"
 var $49=$yorig; //@line 4147 "./stb_image.h"
 assert(28 % 1 === 0);HEAP32[(($49)>>2)]=HEAP32[((10360)>>2)];HEAP32[((($49)+(4))>>2)]=HEAP32[((10364)>>2)];HEAP32[((($49)+(8))>>2)]=HEAP32[((10368)>>2)];HEAP32[((($49)+(12))>>2)]=HEAP32[((10372)>>2)];HEAP32[((($49)+(16))>>2)]=HEAP32[((10376)>>2)];HEAP32[((($49)+(20))>>2)]=HEAP32[((10380)>>2)];HEAP32[((($49)+(24))>>2)]=HEAP32[((10384)>>2)]; //@line 4147 "./stb_image.h"
 var $50=$xspc; //@line 4148 "./stb_image.h"
 assert(28 % 1 === 0);HEAP32[(($50)>>2)]=HEAP32[((10392)>>2)];HEAP32[((($50)+(4))>>2)]=HEAP32[((10396)>>2)];HEAP32[((($50)+(8))>>2)]=HEAP32[((10400)>>2)];HEAP32[((($50)+(12))>>2)]=HEAP32[((10404)>>2)];HEAP32[((($50)+(16))>>2)]=HEAP32[((10408)>>2)];HEAP32[((($50)+(20))>>2)]=HEAP32[((10412)>>2)];HEAP32[((($50)+(24))>>2)]=HEAP32[((10416)>>2)]; //@line 4148 "./stb_image.h"
 var $51=$yspc; //@line 4149 "./stb_image.h"
 assert(28 % 1 === 0);HEAP32[(($51)>>2)]=HEAP32[((10328)>>2)];HEAP32[((($51)+(4))>>2)]=HEAP32[((10332)>>2)];HEAP32[((($51)+(8))>>2)]=HEAP32[((10336)>>2)];HEAP32[((($51)+(12))>>2)]=HEAP32[((10340)>>2)];HEAP32[((($51)+(16))>>2)]=HEAP32[((10344)>>2)];HEAP32[((($51)+(20))>>2)]=HEAP32[((10348)>>2)];HEAP32[((($51)+(24))>>2)]=HEAP32[((10352)>>2)]; //@line 4149 "./stb_image.h"
 var $52=$2; //@line 4152 "./stb_image.h"
 var $53=(($52)|0); //@line 4152 "./stb_image.h"
 var $54=HEAP32[(($53)>>2)]; //@line 4152 "./stb_image.h"
 var $55=(($54)|0); //@line 4152 "./stb_image.h"
 var $56=HEAP32[(($55)>>2)]; //@line 4152 "./stb_image.h"
 var $57=$p; //@line 4152 "./stb_image.h"
 var $58=(($xorig+($57<<2))|0); //@line 4152 "./stb_image.h"
 var $59=HEAP32[(($58)>>2)]; //@line 4152 "./stb_image.h"
 var $60=((($56)-($59))|0); //@line 4152 "./stb_image.h"
 var $61=$p; //@line 4152 "./stb_image.h"
 var $62=(($xspc+($61<<2))|0); //@line 4152 "./stb_image.h"
 var $63=HEAP32[(($62)>>2)]; //@line 4152 "./stb_image.h"
 var $64=((($60)+($63))|0); //@line 4152 "./stb_image.h"
 var $65=((($64)-(1))|0); //@line 4152 "./stb_image.h"
 var $66=$p; //@line 4152 "./stb_image.h"
 var $67=(($xspc+($66<<2))|0); //@line 4152 "./stb_image.h"
 var $68=HEAP32[(($67)>>2)]; //@line 4152 "./stb_image.h"
 var $69=(((($65>>>0))/(($68>>>0)))&-1); //@line 4152 "./stb_image.h"
 $x=$69; //@line 4152 "./stb_image.h"
 var $70=$2; //@line 4153 "./stb_image.h"
 var $71=(($70)|0); //@line 4153 "./stb_image.h"
 var $72=HEAP32[(($71)>>2)]; //@line 4153 "./stb_image.h"
 var $73=(($72+4)|0); //@line 4153 "./stb_image.h"
 var $74=HEAP32[(($73)>>2)]; //@line 4153 "./stb_image.h"
 var $75=$p; //@line 4153 "./stb_image.h"
 var $76=(($yorig+($75<<2))|0); //@line 4153 "./stb_image.h"
 var $77=HEAP32[(($76)>>2)]; //@line 4153 "./stb_image.h"
 var $78=((($74)-($77))|0); //@line 4153 "./stb_image.h"
 var $79=$p; //@line 4153 "./stb_image.h"
 var $80=(($yspc+($79<<2))|0); //@line 4153 "./stb_image.h"
 var $81=HEAP32[(($80)>>2)]; //@line 4153 "./stb_image.h"
 var $82=((($78)+($81))|0); //@line 4153 "./stb_image.h"
 var $83=((($82)-(1))|0); //@line 4153 "./stb_image.h"
 var $84=$p; //@line 4153 "./stb_image.h"
 var $85=(($yspc+($84<<2))|0); //@line 4153 "./stb_image.h"
 var $86=HEAP32[(($85)>>2)]; //@line 4153 "./stb_image.h"
 var $87=(((($83>>>0))/(($86>>>0)))&-1); //@line 4153 "./stb_image.h"
 $y=$87; //@line 4153 "./stb_image.h"
 var $88=$x; //@line 4154 "./stb_image.h"
 var $89=($88|0)!=0; //@line 4154 "./stb_image.h"
 if($89){label=6;break;}else{label=18;break;} //@line 4154 "./stb_image.h"
 case 6: 
 var $91=$y; //@line 4154 "./stb_image.h"
 var $92=($91|0)!=0; //@line 4154 "./stb_image.h"
 if($92){label=7;break;}else{label=18;break;} //@line 4154 "./stb_image.h"
 case 7: 
 var $94=$2; //@line 4155 "./stb_image.h"
 var $95=(($94)|0); //@line 4155 "./stb_image.h"
 var $96=HEAP32[(($95)>>2)]; //@line 4155 "./stb_image.h"
 var $97=(($96+8)|0); //@line 4155 "./stb_image.h"
 var $98=HEAP32[(($97)>>2)]; //@line 4155 "./stb_image.h"
 var $99=$x; //@line 4155 "./stb_image.h"
 var $100=(Math_imul($98,$99)|0); //@line 4155 "./stb_image.h"
 var $101=$6; //@line 4155 "./stb_image.h"
 var $102=(Math_imul($100,$101)|0); //@line 4155 "./stb_image.h"
 var $103=((($102)+(7))|0); //@line 4155 "./stb_image.h"
 var $104=$103>>3; //@line 4155 "./stb_image.h"
 var $105=((($104)+(1))|0); //@line 4155 "./stb_image.h"
 var $106=$y; //@line 4155 "./stb_image.h"
 var $107=(Math_imul($105,$106)|0); //@line 4155 "./stb_image.h"
 $img_len=$107; //@line 4155 "./stb_image.h"
 var $108=$2; //@line 4156 "./stb_image.h"
 var $109=$3; //@line 4156 "./stb_image.h"
 var $110=$4; //@line 4156 "./stb_image.h"
 var $111=$5; //@line 4156 "./stb_image.h"
 var $112=$x; //@line 4156 "./stb_image.h"
 var $113=$y; //@line 4156 "./stb_image.h"
 var $114=$6; //@line 4156 "./stb_image.h"
 var $115=$7; //@line 4156 "./stb_image.h"
 var $116=_stbi__create_png_image_raw($108,$109,$110,$111,$112,$113,$114,$115); //@line 4156 "./stb_image.h"
 var $117=($116|0)!=0; //@line 4156 "./stb_image.h"
 if($117){label=9;break;}else{label=8;break;} //@line 4156 "./stb_image.h"
 case 8: 
 var $119=$final; //@line 4157 "./stb_image.h"
 _free($119); //@line 4157 "./stb_image.h"
 $1=0; //@line 4158 "./stb_image.h"
 label=21;break; //@line 4158 "./stb_image.h"
 case 9: 
 $j=0; //@line 4160 "./stb_image.h"
 label=10;break; //@line 4160 "./stb_image.h"
 case 10: 
 var $122=$j; //@line 4160 "./stb_image.h"
 var $123=$y; //@line 4160 "./stb_image.h"
 var $124=($122|0)<($123|0); //@line 4160 "./stb_image.h"
 if($124){label=11;break;}else{label=17;break;} //@line 4160 "./stb_image.h"
 case 11: 
 $i=0; //@line 4161 "./stb_image.h"
 label=12;break; //@line 4161 "./stb_image.h"
 case 12: 
 var $127=$i; //@line 4161 "./stb_image.h"
 var $128=$x; //@line 4161 "./stb_image.h"
 var $129=($127|0)<($128|0); //@line 4161 "./stb_image.h"
 if($129){label=13;break;}else{label=15;break;} //@line 4161 "./stb_image.h"
 case 13: 
 var $131=$j; //@line 4162 "./stb_image.h"
 var $132=$p; //@line 4162 "./stb_image.h"
 var $133=(($yspc+($132<<2))|0); //@line 4162 "./stb_image.h"
 var $134=HEAP32[(($133)>>2)]; //@line 4162 "./stb_image.h"
 var $135=(Math_imul($131,$134)|0); //@line 4162 "./stb_image.h"
 var $136=$p; //@line 4162 "./stb_image.h"
 var $137=(($yorig+($136<<2))|0); //@line 4162 "./stb_image.h"
 var $138=HEAP32[(($137)>>2)]; //@line 4162 "./stb_image.h"
 var $139=((($135)+($138))|0); //@line 4162 "./stb_image.h"
 $out_y=$139; //@line 4162 "./stb_image.h"
 var $140=$i; //@line 4163 "./stb_image.h"
 var $141=$p; //@line 4163 "./stb_image.h"
 var $142=(($xspc+($141<<2))|0); //@line 4163 "./stb_image.h"
 var $143=HEAP32[(($142)>>2)]; //@line 4163 "./stb_image.h"
 var $144=(Math_imul($140,$143)|0); //@line 4163 "./stb_image.h"
 var $145=$p; //@line 4163 "./stb_image.h"
 var $146=(($xorig+($145<<2))|0); //@line 4163 "./stb_image.h"
 var $147=HEAP32[(($146)>>2)]; //@line 4163 "./stb_image.h"
 var $148=((($144)+($147))|0); //@line 4163 "./stb_image.h"
 $out_x=$148; //@line 4163 "./stb_image.h"
 var $149=$final; //@line 4164 "./stb_image.h"
 var $150=$out_y; //@line 4164 "./stb_image.h"
 var $151=$2; //@line 4164 "./stb_image.h"
 var $152=(($151)|0); //@line 4164 "./stb_image.h"
 var $153=HEAP32[(($152)>>2)]; //@line 4164 "./stb_image.h"
 var $154=(($153)|0); //@line 4164 "./stb_image.h"
 var $155=HEAP32[(($154)>>2)]; //@line 4164 "./stb_image.h"
 var $156=(Math_imul($150,$155)|0); //@line 4164 "./stb_image.h"
 var $157=$5; //@line 4164 "./stb_image.h"
 var $158=(Math_imul($156,$157)|0); //@line 4164 "./stb_image.h"
 var $159=(($149+$158)|0); //@line 4164 "./stb_image.h"
 var $160=$out_x; //@line 4164 "./stb_image.h"
 var $161=$5; //@line 4164 "./stb_image.h"
 var $162=(Math_imul($160,$161)|0); //@line 4164 "./stb_image.h"
 var $163=(($159+$162)|0); //@line 4164 "./stb_image.h"
 var $164=$2; //@line 4164 "./stb_image.h"
 var $165=(($164+12)|0); //@line 4164 "./stb_image.h"
 var $166=HEAP32[(($165)>>2)]; //@line 4164 "./stb_image.h"
 var $167=$j; //@line 4164 "./stb_image.h"
 var $168=$x; //@line 4164 "./stb_image.h"
 var $169=(Math_imul($167,$168)|0); //@line 4164 "./stb_image.h"
 var $170=$i; //@line 4164 "./stb_image.h"
 var $171=((($169)+($170))|0); //@line 4164 "./stb_image.h"
 var $172=$5; //@line 4164 "./stb_image.h"
 var $173=(Math_imul($171,$172)|0); //@line 4164 "./stb_image.h"
 var $174=(($166+$173)|0); //@line 4164 "./stb_image.h"
 var $175=$5; //@line 4164 "./stb_image.h"
 assert($175 % 1 === 0);(_memcpy($163, $174, $175)|0); //@line 4164 "./stb_image.h"
 label=14;break; //@line 4166 "./stb_image.h"
 case 14: 
 var $177=$i; //@line 4161 "./stb_image.h"
 var $178=((($177)+(1))|0); //@line 4161 "./stb_image.h"
 $i=$178; //@line 4161 "./stb_image.h"
 label=12;break; //@line 4161 "./stb_image.h"
 case 15: 
 label=16;break; //@line 4167 "./stb_image.h"
 case 16: 
 var $181=$j; //@line 4160 "./stb_image.h"
 var $182=((($181)+(1))|0); //@line 4160 "./stb_image.h"
 $j=$182; //@line 4160 "./stb_image.h"
 label=10;break; //@line 4160 "./stb_image.h"
 case 17: 
 var $184=$2; //@line 4168 "./stb_image.h"
 var $185=(($184+12)|0); //@line 4168 "./stb_image.h"
 var $186=HEAP32[(($185)>>2)]; //@line 4168 "./stb_image.h"
 _free($186); //@line 4168 "./stb_image.h"
 var $187=$img_len; //@line 4169 "./stb_image.h"
 var $188=$3; //@line 4169 "./stb_image.h"
 var $189=(($188+$187)|0); //@line 4169 "./stb_image.h"
 $3=$189; //@line 4169 "./stb_image.h"
 var $190=$img_len; //@line 4170 "./stb_image.h"
 var $191=$4; //@line 4170 "./stb_image.h"
 var $192=((($191)-($190))|0); //@line 4170 "./stb_image.h"
 $4=$192; //@line 4170 "./stb_image.h"
 label=18;break; //@line 4171 "./stb_image.h"
 case 18: 
 label=19;break; //@line 4172 "./stb_image.h"
 case 19: 
 var $195=$p; //@line 4145 "./stb_image.h"
 var $196=((($195)+(1))|0); //@line 4145 "./stb_image.h"
 $p=$196; //@line 4145 "./stb_image.h"
 label=4;break; //@line 4145 "./stb_image.h"
 case 20: 
 var $198=$final; //@line 4173 "./stb_image.h"
 var $199=$2; //@line 4173 "./stb_image.h"
 var $200=(($199+12)|0); //@line 4173 "./stb_image.h"
 HEAP32[(($200)>>2)]=$198; //@line 4173 "./stb_image.h"
 $1=1; //@line 4175 "./stb_image.h"
 label=21;break; //@line 4175 "./stb_image.h"
 case 21: 
 var $202=$1; //@line 4176 "./stb_image.h"
 STACKTOP=sp;return $202; //@line 4176 "./stb_image.h"
  default: assert(0, "bad label: " + label);
 }

}


function _stbi__compute_transparency($z,$tc,$out_n){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $s;
 var $i;
 var $pixel_count;
 var $p;
 $1=$z;
 $2=$tc;
 $3=$out_n;
 var $4=$1; //@line 4180 "./stb_image.h"
 var $5=(($4)|0); //@line 4180 "./stb_image.h"
 var $6=HEAP32[(($5)>>2)]; //@line 4180 "./stb_image.h"
 $s=$6; //@line 4180 "./stb_image.h"
 var $7=$s; //@line 4181 "./stb_image.h"
 var $8=(($7)|0); //@line 4181 "./stb_image.h"
 var $9=HEAP32[(($8)>>2)]; //@line 4181 "./stb_image.h"
 var $10=$s; //@line 4181 "./stb_image.h"
 var $11=(($10+4)|0); //@line 4181 "./stb_image.h"
 var $12=HEAP32[(($11)>>2)]; //@line 4181 "./stb_image.h"
 var $13=(Math_imul($9,$12)|0); //@line 4181 "./stb_image.h"
 $pixel_count=$13; //@line 4181 "./stb_image.h"
 var $14=$1; //@line 4182 "./stb_image.h"
 var $15=(($14+12)|0); //@line 4182 "./stb_image.h"
 var $16=HEAP32[(($15)>>2)]; //@line 4182 "./stb_image.h"
 $p=$16; //@line 4182 "./stb_image.h"
 var $17=$3; //@line 4186 "./stb_image.h"
 var $18=($17|0)==2; //@line 4186 "./stb_image.h"
 if($18){var $25=0;label=4;break;}else{label=2;break;} //@line 4186 "./stb_image.h"
 case 2: 
 var $20=$3; //@line 4186 "./stb_image.h"
 var $21=($20|0)==4; //@line 4186 "./stb_image.h"
 if($21){var $25=1;label=4;break;}else{label=3;break;} //@line 4186 "./stb_image.h"
 case 3: 
 ___assert_fail(138792,138824,4186,140128); //@line 4186 "./stb_image.h"
 throw "Reached an unreachable!"; //@line 4186 "./stb_image.h"
 label=4;break; //@line 4186 "./stb_image.h"
 case 4: 
 var $25;
 var $26=($25&1); //@line 4186 "./stb_image.h"
 var $27=$3; //@line 4188 "./stb_image.h"
 var $28=($27|0)==2; //@line 4188 "./stb_image.h"
 if($28){label=5;break;}else{label=10;break;} //@line 4188 "./stb_image.h"
 case 5: 
 $i=0; //@line 4189 "./stb_image.h"
 label=6;break; //@line 4189 "./stb_image.h"
 case 6: 
 var $31=$i; //@line 4189 "./stb_image.h"
 var $32=$pixel_count; //@line 4189 "./stb_image.h"
 var $33=($31>>>0)<($32>>>0); //@line 4189 "./stb_image.h"
 if($33){label=7;break;}else{label=9;break;} //@line 4189 "./stb_image.h"
 case 7: 
 var $35=$p; //@line 4190 "./stb_image.h"
 var $36=(($35)|0); //@line 4190 "./stb_image.h"
 var $37=HEAP8[($36)]; //@line 4190 "./stb_image.h"
 var $38=($37&255); //@line 4190 "./stb_image.h"
 var $39=$2; //@line 4190 "./stb_image.h"
 var $40=(($39)|0); //@line 4190 "./stb_image.h"
 var $41=HEAP8[($40)]; //@line 4190 "./stb_image.h"
 var $42=($41&255); //@line 4190 "./stb_image.h"
 var $43=($38|0)==($42|0); //@line 4190 "./stb_image.h"
 var $44=($43?0:255); //@line 4190 "./stb_image.h"
 var $45=(($44)&255); //@line 4190 "./stb_image.h"
 var $46=$p; //@line 4190 "./stb_image.h"
 var $47=(($46+1)|0); //@line 4190 "./stb_image.h"
 HEAP8[($47)]=$45; //@line 4190 "./stb_image.h"
 var $48=$p; //@line 4191 "./stb_image.h"
 var $49=(($48+2)|0); //@line 4191 "./stb_image.h"
 $p=$49; //@line 4191 "./stb_image.h"
 label=8;break; //@line 4192 "./stb_image.h"
 case 8: 
 var $51=$i; //@line 4189 "./stb_image.h"
 var $52=((($51)+(1))|0); //@line 4189 "./stb_image.h"
 $i=$52; //@line 4189 "./stb_image.h"
 label=6;break; //@line 4189 "./stb_image.h"
 case 9: 
 label=19;break; //@line 4193 "./stb_image.h"
 case 10: 
 $i=0; //@line 4194 "./stb_image.h"
 label=11;break; //@line 4194 "./stb_image.h"
 case 11: 
 var $56=$i; //@line 4194 "./stb_image.h"
 var $57=$pixel_count; //@line 4194 "./stb_image.h"
 var $58=($56>>>0)<($57>>>0); //@line 4194 "./stb_image.h"
 if($58){label=12;break;}else{label=18;break;} //@line 4194 "./stb_image.h"
 case 12: 
 var $60=$p; //@line 4195 "./stb_image.h"
 var $61=(($60)|0); //@line 4195 "./stb_image.h"
 var $62=HEAP8[($61)]; //@line 4195 "./stb_image.h"
 var $63=($62&255); //@line 4195 "./stb_image.h"
 var $64=$2; //@line 4195 "./stb_image.h"
 var $65=(($64)|0); //@line 4195 "./stb_image.h"
 var $66=HEAP8[($65)]; //@line 4195 "./stb_image.h"
 var $67=($66&255); //@line 4195 "./stb_image.h"
 var $68=($63|0)==($67|0); //@line 4195 "./stb_image.h"
 if($68){label=13;break;}else{label=16;break;} //@line 4195 "./stb_image.h"
 case 13: 
 var $70=$p; //@line 4195 "./stb_image.h"
 var $71=(($70+1)|0); //@line 4195 "./stb_image.h"
 var $72=HEAP8[($71)]; //@line 4195 "./stb_image.h"
 var $73=($72&255); //@line 4195 "./stb_image.h"
 var $74=$2; //@line 4195 "./stb_image.h"
 var $75=(($74+1)|0); //@line 4195 "./stb_image.h"
 var $76=HEAP8[($75)]; //@line 4195 "./stb_image.h"
 var $77=($76&255); //@line 4195 "./stb_image.h"
 var $78=($73|0)==($77|0); //@line 4195 "./stb_image.h"
 if($78){label=14;break;}else{label=16;break;} //@line 4195 "./stb_image.h"
 case 14: 
 var $80=$p; //@line 4195 "./stb_image.h"
 var $81=(($80+2)|0); //@line 4195 "./stb_image.h"
 var $82=HEAP8[($81)]; //@line 4195 "./stb_image.h"
 var $83=($82&255); //@line 4195 "./stb_image.h"
 var $84=$2; //@line 4195 "./stb_image.h"
 var $85=(($84+2)|0); //@line 4195 "./stb_image.h"
 var $86=HEAP8[($85)]; //@line 4195 "./stb_image.h"
 var $87=($86&255); //@line 4195 "./stb_image.h"
 var $88=($83|0)==($87|0); //@line 4195 "./stb_image.h"
 if($88){label=15;break;}else{label=16;break;} //@line 4195 "./stb_image.h"
 case 15: 
 var $90=$p; //@line 4196 "./stb_image.h"
 var $91=(($90+3)|0); //@line 4196 "./stb_image.h"
 HEAP8[($91)]=0; //@line 4196 "./stb_image.h"
 label=16;break; //@line 4196 "./stb_image.h"
 case 16: 
 var $93=$p; //@line 4197 "./stb_image.h"
 var $94=(($93+4)|0); //@line 4197 "./stb_image.h"
 $p=$94; //@line 4197 "./stb_image.h"
 label=17;break; //@line 4198 "./stb_image.h"
 case 17: 
 var $96=$i; //@line 4194 "./stb_image.h"
 var $97=((($96)+(1))|0); //@line 4194 "./stb_image.h"
 $i=$97; //@line 4194 "./stb_image.h"
 label=11;break; //@line 4194 "./stb_image.h"
 case 18: 
 label=19;break;
 case 19: 
 STACKTOP=sp;return 1; //@line 4200 "./stb_image.h"
  default: assert(0, "bad label: " + label);
 }

}


function _stbi__de_iphone($z){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $s;
 var $i;
 var $pixel_count;
 var $p;
 var $t;
 var $a;
 var $t1;
 var $t2;
 $1=$z;
 var $2=$1; //@line 4255 "./stb_image.h"
 var $3=(($2)|0); //@line 4255 "./stb_image.h"
 var $4=HEAP32[(($3)>>2)]; //@line 4255 "./stb_image.h"
 $s=$4; //@line 4255 "./stb_image.h"
 var $5=$s; //@line 4256 "./stb_image.h"
 var $6=(($5)|0); //@line 4256 "./stb_image.h"
 var $7=HEAP32[(($6)>>2)]; //@line 4256 "./stb_image.h"
 var $8=$s; //@line 4256 "./stb_image.h"
 var $9=(($8+4)|0); //@line 4256 "./stb_image.h"
 var $10=HEAP32[(($9)>>2)]; //@line 4256 "./stb_image.h"
 var $11=(Math_imul($7,$10)|0); //@line 4256 "./stb_image.h"
 $pixel_count=$11; //@line 4256 "./stb_image.h"
 var $12=$1; //@line 4257 "./stb_image.h"
 var $13=(($12+12)|0); //@line 4257 "./stb_image.h"
 var $14=HEAP32[(($13)>>2)]; //@line 4257 "./stb_image.h"
 $p=$14; //@line 4257 "./stb_image.h"
 var $15=$s; //@line 4259 "./stb_image.h"
 var $16=(($15+12)|0); //@line 4259 "./stb_image.h"
 var $17=HEAP32[(($16)>>2)]; //@line 4259 "./stb_image.h"
 var $18=($17|0)==3; //@line 4259 "./stb_image.h"
 if($18){label=2;break;}else{label=7;break;} //@line 4259 "./stb_image.h"
 case 2: 
 $i=0; //@line 4260 "./stb_image.h"
 label=3;break; //@line 4260 "./stb_image.h"
 case 3: 
 var $21=$i; //@line 4260 "./stb_image.h"
 var $22=$pixel_count; //@line 4260 "./stb_image.h"
 var $23=($21>>>0)<($22>>>0); //@line 4260 "./stb_image.h"
 if($23){label=4;break;}else{label=6;break;} //@line 4260 "./stb_image.h"
 case 4: 
 var $25=$p; //@line 4261 "./stb_image.h"
 var $26=(($25)|0); //@line 4261 "./stb_image.h"
 var $27=HEAP8[($26)]; //@line 4261 "./stb_image.h"
 $t=$27; //@line 4261 "./stb_image.h"
 var $28=$p; //@line 4262 "./stb_image.h"
 var $29=(($28+2)|0); //@line 4262 "./stb_image.h"
 var $30=HEAP8[($29)]; //@line 4262 "./stb_image.h"
 var $31=$p; //@line 4262 "./stb_image.h"
 var $32=(($31)|0); //@line 4262 "./stb_image.h"
 HEAP8[($32)]=$30; //@line 4262 "./stb_image.h"
 var $33=$t; //@line 4263 "./stb_image.h"
 var $34=$p; //@line 4263 "./stb_image.h"
 var $35=(($34+2)|0); //@line 4263 "./stb_image.h"
 HEAP8[($35)]=$33; //@line 4263 "./stb_image.h"
 var $36=$p; //@line 4264 "./stb_image.h"
 var $37=(($36+3)|0); //@line 4264 "./stb_image.h"
 $p=$37; //@line 4264 "./stb_image.h"
 label=5;break; //@line 4265 "./stb_image.h"
 case 5: 
 var $39=$i; //@line 4260 "./stb_image.h"
 var $40=((($39)+(1))|0); //@line 4260 "./stb_image.h"
 $i=$40; //@line 4260 "./stb_image.h"
 label=3;break; //@line 4260 "./stb_image.h"
 case 6: 
 label=24;break; //@line 4266 "./stb_image.h"
 case 7: 
 var $43=$s; //@line 4267 "./stb_image.h"
 var $44=(($43+12)|0); //@line 4267 "./stb_image.h"
 var $45=HEAP32[(($44)>>2)]; //@line 4267 "./stb_image.h"
 var $46=($45|0)==4; //@line 4267 "./stb_image.h"
 if($46){var $50=1;label=9;break;}else{label=8;break;} //@line 4267 "./stb_image.h"
 case 8: 
 ___assert_fail(138864,138824,4267,140056); //@line 4267 "./stb_image.h"
 throw "Reached an unreachable!"; //@line 4267 "./stb_image.h"
 label=9;break; //@line 4267 "./stb_image.h"
 case 9: 
 var $50;
 var $51=($50&1); //@line 4267 "./stb_image.h"
 var $52=HEAP32[((140992)>>2)]; //@line 4268 "./stb_image.h"
 var $53=($52|0)!=0; //@line 4268 "./stb_image.h"
 if($53){label=10;break;}else{label=18;break;} //@line 4268 "./stb_image.h"
 case 10: 
 $i=0; //@line 4270 "./stb_image.h"
 label=11;break; //@line 4270 "./stb_image.h"
 case 11: 
 var $56=$i; //@line 4270 "./stb_image.h"
 var $57=$pixel_count; //@line 4270 "./stb_image.h"
 var $58=($56>>>0)<($57>>>0); //@line 4270 "./stb_image.h"
 if($58){label=12;break;}else{label=17;break;} //@line 4270 "./stb_image.h"
 case 12: 
 var $60=$p; //@line 4271 "./stb_image.h"
 var $61=(($60+3)|0); //@line 4271 "./stb_image.h"
 var $62=HEAP8[($61)]; //@line 4271 "./stb_image.h"
 $a=$62; //@line 4271 "./stb_image.h"
 var $63=$p; //@line 4272 "./stb_image.h"
 var $64=(($63)|0); //@line 4272 "./stb_image.h"
 var $65=HEAP8[($64)]; //@line 4272 "./stb_image.h"
 $t1=$65; //@line 4272 "./stb_image.h"
 var $66=$a; //@line 4273 "./stb_image.h"
 var $67=(($66<<24)>>24)!=0; //@line 4273 "./stb_image.h"
 if($67){label=13;break;}else{label=14;break;} //@line 4273 "./stb_image.h"
 case 13: 
 var $69=$p; //@line 4274 "./stb_image.h"
 var $70=(($69+2)|0); //@line 4274 "./stb_image.h"
 var $71=HEAP8[($70)]; //@line 4274 "./stb_image.h"
 var $72=($71&255); //@line 4274 "./stb_image.h"
 var $73=((($72)*(255))&-1); //@line 4274 "./stb_image.h"
 var $74=$a; //@line 4274 "./stb_image.h"
 var $75=($74&255); //@line 4274 "./stb_image.h"
 var $76=(((($73|0))/(($75|0)))&-1); //@line 4274 "./stb_image.h"
 var $77=(($76)&255); //@line 4274 "./stb_image.h"
 var $78=$p; //@line 4274 "./stb_image.h"
 var $79=(($78)|0); //@line 4274 "./stb_image.h"
 HEAP8[($79)]=$77; //@line 4274 "./stb_image.h"
 var $80=$p; //@line 4275 "./stb_image.h"
 var $81=(($80+1)|0); //@line 4275 "./stb_image.h"
 var $82=HEAP8[($81)]; //@line 4275 "./stb_image.h"
 var $83=($82&255); //@line 4275 "./stb_image.h"
 var $84=((($83)*(255))&-1); //@line 4275 "./stb_image.h"
 var $85=$a; //@line 4275 "./stb_image.h"
 var $86=($85&255); //@line 4275 "./stb_image.h"
 var $87=(((($84|0))/(($86|0)))&-1); //@line 4275 "./stb_image.h"
 var $88=(($87)&255); //@line 4275 "./stb_image.h"
 var $89=$p; //@line 4275 "./stb_image.h"
 var $90=(($89+1)|0); //@line 4275 "./stb_image.h"
 HEAP8[($90)]=$88; //@line 4275 "./stb_image.h"
 var $91=$t1; //@line 4276 "./stb_image.h"
 var $92=($91&255); //@line 4276 "./stb_image.h"
 var $93=((($92)*(255))&-1); //@line 4276 "./stb_image.h"
 var $94=$a; //@line 4276 "./stb_image.h"
 var $95=($94&255); //@line 4276 "./stb_image.h"
 var $96=(((($93|0))/(($95|0)))&-1); //@line 4276 "./stb_image.h"
 var $97=(($96)&255); //@line 4276 "./stb_image.h"
 var $98=$p; //@line 4276 "./stb_image.h"
 var $99=(($98+2)|0); //@line 4276 "./stb_image.h"
 HEAP8[($99)]=$97; //@line 4276 "./stb_image.h"
 label=15;break; //@line 4277 "./stb_image.h"
 case 14: 
 var $101=$p; //@line 4278 "./stb_image.h"
 var $102=(($101+2)|0); //@line 4278 "./stb_image.h"
 var $103=HEAP8[($102)]; //@line 4278 "./stb_image.h"
 var $104=$p; //@line 4278 "./stb_image.h"
 var $105=(($104)|0); //@line 4278 "./stb_image.h"
 HEAP8[($105)]=$103; //@line 4278 "./stb_image.h"
 var $106=$t1; //@line 4279 "./stb_image.h"
 var $107=$p; //@line 4279 "./stb_image.h"
 var $108=(($107+2)|0); //@line 4279 "./stb_image.h"
 HEAP8[($108)]=$106; //@line 4279 "./stb_image.h"
 label=15;break;
 case 15: 
 var $110=$p; //@line 4281 "./stb_image.h"
 var $111=(($110+4)|0); //@line 4281 "./stb_image.h"
 $p=$111; //@line 4281 "./stb_image.h"
 label=16;break; //@line 4282 "./stb_image.h"
 case 16: 
 var $113=$i; //@line 4270 "./stb_image.h"
 var $114=((($113)+(1))|0); //@line 4270 "./stb_image.h"
 $i=$114; //@line 4270 "./stb_image.h"
 label=11;break; //@line 4270 "./stb_image.h"
 case 17: 
 label=23;break; //@line 4283 "./stb_image.h"
 case 18: 
 $i=0; //@line 4285 "./stb_image.h"
 label=19;break; //@line 4285 "./stb_image.h"
 case 19: 
 var $118=$i; //@line 4285 "./stb_image.h"
 var $119=$pixel_count; //@line 4285 "./stb_image.h"
 var $120=($118>>>0)<($119>>>0); //@line 4285 "./stb_image.h"
 if($120){label=20;break;}else{label=22;break;} //@line 4285 "./stb_image.h"
 case 20: 
 var $122=$p; //@line 4286 "./stb_image.h"
 var $123=(($122)|0); //@line 4286 "./stb_image.h"
 var $124=HEAP8[($123)]; //@line 4286 "./stb_image.h"
 $t2=$124; //@line 4286 "./stb_image.h"
 var $125=$p; //@line 4287 "./stb_image.h"
 var $126=(($125+2)|0); //@line 4287 "./stb_image.h"
 var $127=HEAP8[($126)]; //@line 4287 "./stb_image.h"
 var $128=$p; //@line 4287 "./stb_image.h"
 var $129=(($128)|0); //@line 4287 "./stb_image.h"
 HEAP8[($129)]=$127; //@line 4287 "./stb_image.h"
 var $130=$t2; //@line 4288 "./stb_image.h"
 var $131=$p; //@line 4288 "./stb_image.h"
 var $132=(($131+2)|0); //@line 4288 "./stb_image.h"
 HEAP8[($132)]=$130; //@line 4288 "./stb_image.h"
 var $133=$p; //@line 4289 "./stb_image.h"
 var $134=(($133+4)|0); //@line 4289 "./stb_image.h"
 $p=$134; //@line 4289 "./stb_image.h"
 label=21;break; //@line 4290 "./stb_image.h"
 case 21: 
 var $136=$i; //@line 4285 "./stb_image.h"
 var $137=((($136)+(1))|0); //@line 4285 "./stb_image.h"
 $i=$137; //@line 4285 "./stb_image.h"
 label=19;break; //@line 4285 "./stb_image.h"
 case 22: 
 label=23;break;
 case 23: 
 label=24;break;
 case 24: 
 STACKTOP=sp;return; //@line 4293 "./stb_image.h"
  default: assert(0, "bad label: " + label);
 }

}


function _stbi__expand_png_palette($a,$palette,$len,$pal_img_n){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $i;
 var $pixel_count;
 var $p;
 var $temp_out;
 var $orig;
 var $n;
 var $n1;
 $2=$a;
 $3=$palette;
 $4=$len;
 $5=$pal_img_n;
 var $6=$2; //@line 4205 "./stb_image.h"
 var $7=(($6)|0); //@line 4205 "./stb_image.h"
 var $8=HEAP32[(($7)>>2)]; //@line 4205 "./stb_image.h"
 var $9=(($8)|0); //@line 4205 "./stb_image.h"
 var $10=HEAP32[(($9)>>2)]; //@line 4205 "./stb_image.h"
 var $11=$2; //@line 4205 "./stb_image.h"
 var $12=(($11)|0); //@line 4205 "./stb_image.h"
 var $13=HEAP32[(($12)>>2)]; //@line 4205 "./stb_image.h"
 var $14=(($13+4)|0); //@line 4205 "./stb_image.h"
 var $15=HEAP32[(($14)>>2)]; //@line 4205 "./stb_image.h"
 var $16=(Math_imul($10,$15)|0); //@line 4205 "./stb_image.h"
 $pixel_count=$16; //@line 4205 "./stb_image.h"
 var $17=$2; //@line 4206 "./stb_image.h"
 var $18=(($17+12)|0); //@line 4206 "./stb_image.h"
 var $19=HEAP32[(($18)>>2)]; //@line 4206 "./stb_image.h"
 $orig=$19; //@line 4206 "./stb_image.h"
 var $20=$pixel_count; //@line 4208 "./stb_image.h"
 var $21=$5; //@line 4208 "./stb_image.h"
 var $22=(Math_imul($20,$21)|0); //@line 4208 "./stb_image.h"
 var $23=_stbi__malloc($22); //@line 4208 "./stb_image.h"
 $p=$23; //@line 4208 "./stb_image.h"
 var $24=$p; //@line 4209 "./stb_image.h"
 var $25=($24|0)==0; //@line 4209 "./stb_image.h"
 if($25){label=2;break;}else{label=3;break;} //@line 4209 "./stb_image.h"
 case 2: 
 var $27=_stbi__err(138952); //@line 4209 "./stb_image.h"
 $1=$27; //@line 4209 "./stb_image.h"
 label=15;break; //@line 4209 "./stb_image.h"
 case 3: 
 var $29=$p; //@line 4212 "./stb_image.h"
 $temp_out=$29; //@line 4212 "./stb_image.h"
 var $30=$5; //@line 4214 "./stb_image.h"
 var $31=($30|0)==3; //@line 4214 "./stb_image.h"
 if($31){label=4;break;}else{label=9;break;} //@line 4214 "./stb_image.h"
 case 4: 
 $i=0; //@line 4215 "./stb_image.h"
 label=5;break; //@line 4215 "./stb_image.h"
 case 5: 
 var $34=$i; //@line 4215 "./stb_image.h"
 var $35=$pixel_count; //@line 4215 "./stb_image.h"
 var $36=($34>>>0)<($35>>>0); //@line 4215 "./stb_image.h"
 if($36){label=6;break;}else{label=8;break;} //@line 4215 "./stb_image.h"
 case 6: 
 var $38=$i; //@line 4216 "./stb_image.h"
 var $39=$orig; //@line 4216 "./stb_image.h"
 var $40=(($39+$38)|0); //@line 4216 "./stb_image.h"
 var $41=HEAP8[($40)]; //@line 4216 "./stb_image.h"
 var $42=($41&255); //@line 4216 "./stb_image.h"
 var $43=($42<<2); //@line 4216 "./stb_image.h"
 $n=$43; //@line 4216 "./stb_image.h"
 var $44=$n; //@line 4217 "./stb_image.h"
 var $45=$3; //@line 4217 "./stb_image.h"
 var $46=(($45+$44)|0); //@line 4217 "./stb_image.h"
 var $47=HEAP8[($46)]; //@line 4217 "./stb_image.h"
 var $48=$p; //@line 4217 "./stb_image.h"
 var $49=(($48)|0); //@line 4217 "./stb_image.h"
 HEAP8[($49)]=$47; //@line 4217 "./stb_image.h"
 var $50=$n; //@line 4218 "./stb_image.h"
 var $51=((($50)+(1))|0); //@line 4218 "./stb_image.h"
 var $52=$3; //@line 4218 "./stb_image.h"
 var $53=(($52+$51)|0); //@line 4218 "./stb_image.h"
 var $54=HEAP8[($53)]; //@line 4218 "./stb_image.h"
 var $55=$p; //@line 4218 "./stb_image.h"
 var $56=(($55+1)|0); //@line 4218 "./stb_image.h"
 HEAP8[($56)]=$54; //@line 4218 "./stb_image.h"
 var $57=$n; //@line 4219 "./stb_image.h"
 var $58=((($57)+(2))|0); //@line 4219 "./stb_image.h"
 var $59=$3; //@line 4219 "./stb_image.h"
 var $60=(($59+$58)|0); //@line 4219 "./stb_image.h"
 var $61=HEAP8[($60)]; //@line 4219 "./stb_image.h"
 var $62=$p; //@line 4219 "./stb_image.h"
 var $63=(($62+2)|0); //@line 4219 "./stb_image.h"
 HEAP8[($63)]=$61; //@line 4219 "./stb_image.h"
 var $64=$p; //@line 4220 "./stb_image.h"
 var $65=(($64+3)|0); //@line 4220 "./stb_image.h"
 $p=$65; //@line 4220 "./stb_image.h"
 label=7;break; //@line 4221 "./stb_image.h"
 case 7: 
 var $67=$i; //@line 4215 "./stb_image.h"
 var $68=((($67)+(1))|0); //@line 4215 "./stb_image.h"
 $i=$68; //@line 4215 "./stb_image.h"
 label=5;break; //@line 4215 "./stb_image.h"
 case 8: 
 label=14;break; //@line 4222 "./stb_image.h"
 case 9: 
 $i=0; //@line 4223 "./stb_image.h"
 label=10;break; //@line 4223 "./stb_image.h"
 case 10: 
 var $72=$i; //@line 4223 "./stb_image.h"
 var $73=$pixel_count; //@line 4223 "./stb_image.h"
 var $74=($72>>>0)<($73>>>0); //@line 4223 "./stb_image.h"
 if($74){label=11;break;}else{label=13;break;} //@line 4223 "./stb_image.h"
 case 11: 
 var $76=$i; //@line 4224 "./stb_image.h"
 var $77=$orig; //@line 4224 "./stb_image.h"
 var $78=(($77+$76)|0); //@line 4224 "./stb_image.h"
 var $79=HEAP8[($78)]; //@line 4224 "./stb_image.h"
 var $80=($79&255); //@line 4224 "./stb_image.h"
 var $81=($80<<2); //@line 4224 "./stb_image.h"
 $n1=$81; //@line 4224 "./stb_image.h"
 var $82=$n1; //@line 4225 "./stb_image.h"
 var $83=$3; //@line 4225 "./stb_image.h"
 var $84=(($83+$82)|0); //@line 4225 "./stb_image.h"
 var $85=HEAP8[($84)]; //@line 4225 "./stb_image.h"
 var $86=$p; //@line 4225 "./stb_image.h"
 var $87=(($86)|0); //@line 4225 "./stb_image.h"
 HEAP8[($87)]=$85; //@line 4225 "./stb_image.h"
 var $88=$n1; //@line 4226 "./stb_image.h"
 var $89=((($88)+(1))|0); //@line 4226 "./stb_image.h"
 var $90=$3; //@line 4226 "./stb_image.h"
 var $91=(($90+$89)|0); //@line 4226 "./stb_image.h"
 var $92=HEAP8[($91)]; //@line 4226 "./stb_image.h"
 var $93=$p; //@line 4226 "./stb_image.h"
 var $94=(($93+1)|0); //@line 4226 "./stb_image.h"
 HEAP8[($94)]=$92; //@line 4226 "./stb_image.h"
 var $95=$n1; //@line 4227 "./stb_image.h"
 var $96=((($95)+(2))|0); //@line 4227 "./stb_image.h"
 var $97=$3; //@line 4227 "./stb_image.h"
 var $98=(($97+$96)|0); //@line 4227 "./stb_image.h"
 var $99=HEAP8[($98)]; //@line 4227 "./stb_image.h"
 var $100=$p; //@line 4227 "./stb_image.h"
 var $101=(($100+2)|0); //@line 4227 "./stb_image.h"
 HEAP8[($101)]=$99; //@line 4227 "./stb_image.h"
 var $102=$n1; //@line 4228 "./stb_image.h"
 var $103=((($102)+(3))|0); //@line 4228 "./stb_image.h"
 var $104=$3; //@line 4228 "./stb_image.h"
 var $105=(($104+$103)|0); //@line 4228 "./stb_image.h"
 var $106=HEAP8[($105)]; //@line 4228 "./stb_image.h"
 var $107=$p; //@line 4228 "./stb_image.h"
 var $108=(($107+3)|0); //@line 4228 "./stb_image.h"
 HEAP8[($108)]=$106; //@line 4228 "./stb_image.h"
 var $109=$p; //@line 4229 "./stb_image.h"
 var $110=(($109+4)|0); //@line 4229 "./stb_image.h"
 $p=$110; //@line 4229 "./stb_image.h"
 label=12;break; //@line 4230 "./stb_image.h"
 case 12: 
 var $112=$i; //@line 4223 "./stb_image.h"
 var $113=((($112)+(1))|0); //@line 4223 "./stb_image.h"
 $i=$113; //@line 4223 "./stb_image.h"
 label=10;break; //@line 4223 "./stb_image.h"
 case 13: 
 label=14;break;
 case 14: 
 var $116=$2; //@line 4232 "./stb_image.h"
 var $117=(($116+12)|0); //@line 4232 "./stb_image.h"
 var $118=HEAP32[(($117)>>2)]; //@line 4232 "./stb_image.h"
 _free($118); //@line 4232 "./stb_image.h"
 var $119=$temp_out; //@line 4233 "./stb_image.h"
 var $120=$2; //@line 4233 "./stb_image.h"
 var $121=(($120+12)|0); //@line 4233 "./stb_image.h"
 HEAP32[(($121)>>2)]=$119; //@line 4233 "./stb_image.h"
 $1=1; //@line 4237 "./stb_image.h"
 label=15;break; //@line 4237 "./stb_image.h"
 case 15: 
 var $123=$1; //@line 4238 "./stb_image.h"
 STACKTOP=sp;return $123; //@line 4238 "./stb_image.h"
  default: assert(0, "bad label: " + label);
 }

}


function _stbi__create_png_image_raw($a,$raw,$raw_len,$out_n,$x,$y,$depth,$color){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 var $7;
 var $8;
 var $9;
 var $s;
 var $i;
 var $j;
 var $stride;
 var $img_len;
 var $img_width_bytes;
 var $k;
 var $img_n;
 var $cur;
 var $prior;
 var $filter;
 var $filter_bytes;
 var $width;
 var $nk;
 var $cur1;
 var $in;
 var $scale;
 var $cur2;
 var $i3;
 $2=$a;
 $3=$raw;
 $4=$raw_len;
 $5=$out_n;
 $6=$x;
 $7=$y;
 $8=$depth;
 $9=$color;
 var $10=$2; //@line 3960 "./stb_image.h"
 var $11=(($10)|0); //@line 3960 "./stb_image.h"
 var $12=HEAP32[(($11)>>2)]; //@line 3960 "./stb_image.h"
 $s=$12; //@line 3960 "./stb_image.h"
 var $13=$6; //@line 3961 "./stb_image.h"
 var $14=$5; //@line 3961 "./stb_image.h"
 var $15=(Math_imul($13,$14)|0); //@line 3961 "./stb_image.h"
 $stride=$15; //@line 3961 "./stb_image.h"
 var $16=$s; //@line 3964 "./stb_image.h"
 var $17=(($16+8)|0); //@line 3964 "./stb_image.h"
 var $18=HEAP32[(($17)>>2)]; //@line 3964 "./stb_image.h"
 $img_n=$18; //@line 3964 "./stb_image.h"
 var $19=$5; //@line 3966 "./stb_image.h"
 var $20=$s; //@line 3966 "./stb_image.h"
 var $21=(($20+8)|0); //@line 3966 "./stb_image.h"
 var $22=HEAP32[(($21)>>2)]; //@line 3966 "./stb_image.h"
 var $23=($19|0)==($22|0); //@line 3966 "./stb_image.h"
 if($23){var $34=0;label=4;break;}else{label=2;break;} //@line 3966 "./stb_image.h"
 case 2: 
 var $25=$5; //@line 3966 "./stb_image.h"
 var $26=$s; //@line 3966 "./stb_image.h"
 var $27=(($26+8)|0); //@line 3966 "./stb_image.h"
 var $28=HEAP32[(($27)>>2)]; //@line 3966 "./stb_image.h"
 var $29=((($28)+(1))|0); //@line 3966 "./stb_image.h"
 var $30=($25|0)==($29|0); //@line 3966 "./stb_image.h"
 if($30){var $34=1;label=4;break;}else{label=3;break;} //@line 3966 "./stb_image.h"
 case 3: 
 ___assert_fail(138704,138824,3966,140072); //@line 3966 "./stb_image.h"
 throw "Reached an unreachable!"; //@line 3966 "./stb_image.h"
 label=4;break; //@line 3966 "./stb_image.h"
 case 4: 
 var $34;
 var $35=($34&1); //@line 3966 "./stb_image.h"
 var $36=$6; //@line 3967 "./stb_image.h"
 var $37=$7; //@line 3967 "./stb_image.h"
 var $38=(Math_imul($36,$37)|0); //@line 3967 "./stb_image.h"
 var $39=$5; //@line 3967 "./stb_image.h"
 var $40=(Math_imul($38,$39)|0); //@line 3967 "./stb_image.h"
 var $41=_stbi__malloc($40); //@line 3967 "./stb_image.h"
 var $42=$2; //@line 3967 "./stb_image.h"
 var $43=(($42+12)|0); //@line 3967 "./stb_image.h"
 HEAP32[(($43)>>2)]=$41; //@line 3967 "./stb_image.h"
 var $44=$2; //@line 3968 "./stb_image.h"
 var $45=(($44+12)|0); //@line 3968 "./stb_image.h"
 var $46=HEAP32[(($45)>>2)]; //@line 3968 "./stb_image.h"
 var $47=($46|0)!=0; //@line 3968 "./stb_image.h"
 if($47){label=6;break;}else{label=5;break;} //@line 3968 "./stb_image.h"
 case 5: 
 var $49=_stbi__err(138952); //@line 3968 "./stb_image.h"
 $1=$49; //@line 3968 "./stb_image.h"
 label=212;break; //@line 3968 "./stb_image.h"
 case 6: 
 var $51=$img_n; //@line 3970 "./stb_image.h"
 var $52=$6; //@line 3970 "./stb_image.h"
 var $53=(Math_imul($51,$52)|0); //@line 3970 "./stb_image.h"
 var $54=$8; //@line 3970 "./stb_image.h"
 var $55=(Math_imul($53,$54)|0); //@line 3970 "./stb_image.h"
 var $56=((($55)+(7))|0); //@line 3970 "./stb_image.h"
 var $57=$56>>>3; //@line 3970 "./stb_image.h"
 $img_width_bytes=$57; //@line 3970 "./stb_image.h"
 var $58=$img_width_bytes; //@line 3971 "./stb_image.h"
 var $59=((($58)+(1))|0); //@line 3971 "./stb_image.h"
 var $60=$7; //@line 3971 "./stb_image.h"
 var $61=(Math_imul($59,$60)|0); //@line 3971 "./stb_image.h"
 $img_len=$61; //@line 3971 "./stb_image.h"
 var $62=$s; //@line 3972 "./stb_image.h"
 var $63=(($62)|0); //@line 3972 "./stb_image.h"
 var $64=HEAP32[(($63)>>2)]; //@line 3972 "./stb_image.h"
 var $65=$6; //@line 3972 "./stb_image.h"
 var $66=($64|0)==($65|0); //@line 3972 "./stb_image.h"
 if($66){label=7;break;}else{label=11;break;} //@line 3972 "./stb_image.h"
 case 7: 
 var $68=$s; //@line 3972 "./stb_image.h"
 var $69=(($68+4)|0); //@line 3972 "./stb_image.h"
 var $70=HEAP32[(($69)>>2)]; //@line 3972 "./stb_image.h"
 var $71=$7; //@line 3972 "./stb_image.h"
 var $72=($70|0)==($71|0); //@line 3972 "./stb_image.h"
 if($72){label=8;break;}else{label=11;break;} //@line 3972 "./stb_image.h"
 case 8: 
 var $74=$4; //@line 3973 "./stb_image.h"
 var $75=$img_len; //@line 3973 "./stb_image.h"
 var $76=($74|0)!=($75|0); //@line 3973 "./stb_image.h"
 if($76){label=9;break;}else{label=10;break;} //@line 3973 "./stb_image.h"
 case 9: 
 var $78=_stbi__err(138680); //@line 3973 "./stb_image.h"
 $1=$78; //@line 3973 "./stb_image.h"
 label=212;break; //@line 3973 "./stb_image.h"
 case 10: 
 label=14;break; //@line 3974 "./stb_image.h"
 case 11: 
 var $81=$4; //@line 3975 "./stb_image.h"
 var $82=$img_len; //@line 3975 "./stb_image.h"
 var $83=($81>>>0)<($82>>>0); //@line 3975 "./stb_image.h"
 if($83){label=12;break;}else{label=13;break;} //@line 3975 "./stb_image.h"
 case 12: 
 var $85=_stbi__err(138680); //@line 3975 "./stb_image.h"
 $1=$85; //@line 3975 "./stb_image.h"
 label=212;break; //@line 3975 "./stb_image.h"
 case 13: 
 label=14;break;
 case 14: 
 $j=0; //@line 3978 "./stb_image.h"
 label=15;break; //@line 3978 "./stb_image.h"
 case 15: 
 var $89=$j; //@line 3978 "./stb_image.h"
 var $90=$7; //@line 3978 "./stb_image.h"
 var $91=($89>>>0)<($90>>>0); //@line 3978 "./stb_image.h"
 if($91){label=16;break;}else{label=145;break;} //@line 3978 "./stb_image.h"
 case 16: 
 var $93=$2; //@line 3979 "./stb_image.h"
 var $94=(($93+12)|0); //@line 3979 "./stb_image.h"
 var $95=HEAP32[(($94)>>2)]; //@line 3979 "./stb_image.h"
 var $96=$stride; //@line 3979 "./stb_image.h"
 var $97=$j; //@line 3979 "./stb_image.h"
 var $98=(Math_imul($96,$97)|0); //@line 3979 "./stb_image.h"
 var $99=(($95+$98)|0); //@line 3979 "./stb_image.h"
 $cur=$99; //@line 3979 "./stb_image.h"
 var $100=$cur; //@line 3980 "./stb_image.h"
 var $101=$stride; //@line 3980 "./stb_image.h"
 var $102=(((-$101))|0); //@line 3980 "./stb_image.h"
 var $103=(($100+$102)|0); //@line 3980 "./stb_image.h"
 $prior=$103; //@line 3980 "./stb_image.h"
 var $104=$3; //@line 3981 "./stb_image.h"
 var $105=(($104+1)|0); //@line 3981 "./stb_image.h"
 $3=$105; //@line 3981 "./stb_image.h"
 var $106=HEAP8[($104)]; //@line 3981 "./stb_image.h"
 var $107=($106&255); //@line 3981 "./stb_image.h"
 $filter=$107; //@line 3981 "./stb_image.h"
 var $108=$img_n; //@line 3982 "./stb_image.h"
 $filter_bytes=$108; //@line 3982 "./stb_image.h"
 var $109=$6; //@line 3983 "./stb_image.h"
 $width=$109; //@line 3983 "./stb_image.h"
 var $110=$filter; //@line 3984 "./stb_image.h"
 var $111=($110|0)>4; //@line 3984 "./stb_image.h"
 if($111){label=17;break;}else{label=18;break;} //@line 3984 "./stb_image.h"
 case 17: 
 var $113=_stbi__err(138656); //@line 3985 "./stb_image.h"
 $1=$113; //@line 3985 "./stb_image.h"
 label=212;break; //@line 3985 "./stb_image.h"
 case 18: 
 var $115=$8; //@line 3987 "./stb_image.h"
 var $116=($115|0)<8; //@line 3987 "./stb_image.h"
 if($116){label=19;break;}else{label=22;break;} //@line 3987 "./stb_image.h"
 case 19: 
 var $118=$img_width_bytes; //@line 3988 "./stb_image.h"
 var $119=$6; //@line 3988 "./stb_image.h"
 var $120=($118>>>0)<=($119>>>0); //@line 3988 "./stb_image.h"
 if($120){var $124=1;label=21;break;}else{label=20;break;} //@line 3988 "./stb_image.h"
 case 20: 
 ___assert_fail(138632,138824,3988,140072); //@line 3988 "./stb_image.h"
 throw "Reached an unreachable!"; //@line 3988 "./stb_image.h"
 label=21;break; //@line 3988 "./stb_image.h"
 case 21: 
 var $124;
 var $125=($124&1); //@line 3988 "./stb_image.h"
 var $126=$6; //@line 3989 "./stb_image.h"
 var $127=$5; //@line 3989 "./stb_image.h"
 var $128=(Math_imul($126,$127)|0); //@line 3989 "./stb_image.h"
 var $129=$img_width_bytes; //@line 3989 "./stb_image.h"
 var $130=((($128)-($129))|0); //@line 3989 "./stb_image.h"
 var $131=$cur; //@line 3989 "./stb_image.h"
 var $132=(($131+$130)|0); //@line 3989 "./stb_image.h"
 $cur=$132; //@line 3989 "./stb_image.h"
 $filter_bytes=1; //@line 3990 "./stb_image.h"
 var $133=$img_width_bytes; //@line 3991 "./stb_image.h"
 $width=$133; //@line 3991 "./stb_image.h"
 label=22;break; //@line 3992 "./stb_image.h"
 case 22: 
 var $135=$j; //@line 3995 "./stb_image.h"
 var $136=($135|0)==0; //@line 3995 "./stb_image.h"
 if($136){label=23;break;}else{label=24;break;} //@line 3995 "./stb_image.h"
 case 23: 
 var $138=$filter; //@line 3995 "./stb_image.h"
 var $139=((104688+$138)|0); //@line 3995 "./stb_image.h"
 var $140=HEAP8[($139)]; //@line 3995 "./stb_image.h"
 var $141=($140&255); //@line 3995 "./stb_image.h"
 $filter=$141; //@line 3995 "./stb_image.h"
 label=24;break; //@line 3995 "./stb_image.h"
 case 24: 
 $k=0; //@line 3998 "./stb_image.h"
 label=25;break; //@line 3998 "./stb_image.h"
 case 25: 
 var $144=$k; //@line 3998 "./stb_image.h"
 var $145=$filter_bytes; //@line 3998 "./stb_image.h"
 var $146=($144|0)<($145|0); //@line 3998 "./stb_image.h"
 if($146){label=26;break;}else{label=36;break;} //@line 3998 "./stb_image.h"
 case 26: 
 var $148=$filter; //@line 3999 "./stb_image.h"
 switch(($148|0)){case 0:{ label=27;break;}case 1:{ label=28;break;}case 2:{ label=29;break;}case 3:{ label=30;break;}case 4:{ label=31;break;}case 5:{ label=32;break;}case 6:{ label=33;break;}default:{label=34;break;}}break;
 case 27: 
 var $150=$k; //@line 4000 "./stb_image.h"
 var $151=$3; //@line 4000 "./stb_image.h"
 var $152=(($151+$150)|0); //@line 4000 "./stb_image.h"
 var $153=HEAP8[($152)]; //@line 4000 "./stb_image.h"
 var $154=$k; //@line 4000 "./stb_image.h"
 var $155=$cur; //@line 4000 "./stb_image.h"
 var $156=(($155+$154)|0); //@line 4000 "./stb_image.h"
 HEAP8[($156)]=$153; //@line 4000 "./stb_image.h"
 label=34;break; //@line 4000 "./stb_image.h"
 case 28: 
 var $158=$k; //@line 4001 "./stb_image.h"
 var $159=$3; //@line 4001 "./stb_image.h"
 var $160=(($159+$158)|0); //@line 4001 "./stb_image.h"
 var $161=HEAP8[($160)]; //@line 4001 "./stb_image.h"
 var $162=$k; //@line 4001 "./stb_image.h"
 var $163=$cur; //@line 4001 "./stb_image.h"
 var $164=(($163+$162)|0); //@line 4001 "./stb_image.h"
 HEAP8[($164)]=$161; //@line 4001 "./stb_image.h"
 label=34;break; //@line 4001 "./stb_image.h"
 case 29: 
 var $166=$k; //@line 4002 "./stb_image.h"
 var $167=$3; //@line 4002 "./stb_image.h"
 var $168=(($167+$166)|0); //@line 4002 "./stb_image.h"
 var $169=HEAP8[($168)]; //@line 4002 "./stb_image.h"
 var $170=($169&255); //@line 4002 "./stb_image.h"
 var $171=$k; //@line 4002 "./stb_image.h"
 var $172=$prior; //@line 4002 "./stb_image.h"
 var $173=(($172+$171)|0); //@line 4002 "./stb_image.h"
 var $174=HEAP8[($173)]; //@line 4002 "./stb_image.h"
 var $175=($174&255); //@line 4002 "./stb_image.h"
 var $176=((($170)+($175))|0); //@line 4002 "./stb_image.h"
 var $177=$176&255; //@line 4002 "./stb_image.h"
 var $178=(($177)&255); //@line 4002 "./stb_image.h"
 var $179=$k; //@line 4002 "./stb_image.h"
 var $180=$cur; //@line 4002 "./stb_image.h"
 var $181=(($180+$179)|0); //@line 4002 "./stb_image.h"
 HEAP8[($181)]=$178; //@line 4002 "./stb_image.h"
 label=34;break; //@line 4002 "./stb_image.h"
 case 30: 
 var $183=$k; //@line 4003 "./stb_image.h"
 var $184=$3; //@line 4003 "./stb_image.h"
 var $185=(($184+$183)|0); //@line 4003 "./stb_image.h"
 var $186=HEAP8[($185)]; //@line 4003 "./stb_image.h"
 var $187=($186&255); //@line 4003 "./stb_image.h"
 var $188=$k; //@line 4003 "./stb_image.h"
 var $189=$prior; //@line 4003 "./stb_image.h"
 var $190=(($189+$188)|0); //@line 4003 "./stb_image.h"
 var $191=HEAP8[($190)]; //@line 4003 "./stb_image.h"
 var $192=($191&255); //@line 4003 "./stb_image.h"
 var $193=$192>>1; //@line 4003 "./stb_image.h"
 var $194=((($187)+($193))|0); //@line 4003 "./stb_image.h"
 var $195=$194&255; //@line 4003 "./stb_image.h"
 var $196=(($195)&255); //@line 4003 "./stb_image.h"
 var $197=$k; //@line 4003 "./stb_image.h"
 var $198=$cur; //@line 4003 "./stb_image.h"
 var $199=(($198+$197)|0); //@line 4003 "./stb_image.h"
 HEAP8[($199)]=$196; //@line 4003 "./stb_image.h"
 label=34;break; //@line 4003 "./stb_image.h"
 case 31: 
 var $201=$k; //@line 4004 "./stb_image.h"
 var $202=$3; //@line 4004 "./stb_image.h"
 var $203=(($202+$201)|0); //@line 4004 "./stb_image.h"
 var $204=HEAP8[($203)]; //@line 4004 "./stb_image.h"
 var $205=($204&255); //@line 4004 "./stb_image.h"
 var $206=$k; //@line 4004 "./stb_image.h"
 var $207=$prior; //@line 4004 "./stb_image.h"
 var $208=(($207+$206)|0); //@line 4004 "./stb_image.h"
 var $209=HEAP8[($208)]; //@line 4004 "./stb_image.h"
 var $210=($209&255); //@line 4004 "./stb_image.h"
 var $211=_stbi__paeth(0,$210,0); //@line 4004 "./stb_image.h"
 var $212=((($205)+($211))|0); //@line 4004 "./stb_image.h"
 var $213=$212&255; //@line 4004 "./stb_image.h"
 var $214=(($213)&255); //@line 4004 "./stb_image.h"
 var $215=$k; //@line 4004 "./stb_image.h"
 var $216=$cur; //@line 4004 "./stb_image.h"
 var $217=(($216+$215)|0); //@line 4004 "./stb_image.h"
 HEAP8[($217)]=$214; //@line 4004 "./stb_image.h"
 label=34;break; //@line 4004 "./stb_image.h"
 case 32: 
 var $219=$k; //@line 4005 "./stb_image.h"
 var $220=$3; //@line 4005 "./stb_image.h"
 var $221=(($220+$219)|0); //@line 4005 "./stb_image.h"
 var $222=HEAP8[($221)]; //@line 4005 "./stb_image.h"
 var $223=$k; //@line 4005 "./stb_image.h"
 var $224=$cur; //@line 4005 "./stb_image.h"
 var $225=(($224+$223)|0); //@line 4005 "./stb_image.h"
 HEAP8[($225)]=$222; //@line 4005 "./stb_image.h"
 label=34;break; //@line 4005 "./stb_image.h"
 case 33: 
 var $227=$k; //@line 4006 "./stb_image.h"
 var $228=$3; //@line 4006 "./stb_image.h"
 var $229=(($228+$227)|0); //@line 4006 "./stb_image.h"
 var $230=HEAP8[($229)]; //@line 4006 "./stb_image.h"
 var $231=$k; //@line 4006 "./stb_image.h"
 var $232=$cur; //@line 4006 "./stb_image.h"
 var $233=(($232+$231)|0); //@line 4006 "./stb_image.h"
 HEAP8[($233)]=$230; //@line 4006 "./stb_image.h"
 label=34;break; //@line 4006 "./stb_image.h"
 case 34: 
 label=35;break; //@line 4008 "./stb_image.h"
 case 35: 
 var $236=$k; //@line 3998 "./stb_image.h"
 var $237=((($236)+(1))|0); //@line 3998 "./stb_image.h"
 $k=$237; //@line 3998 "./stb_image.h"
 label=25;break; //@line 3998 "./stb_image.h"
 case 36: 
 var $239=$8; //@line 4010 "./stb_image.h"
 var $240=($239|0)==8; //@line 4010 "./stb_image.h"
 if($240){label=37;break;}else{label=40;break;} //@line 4010 "./stb_image.h"
 case 37: 
 var $242=$img_n; //@line 4011 "./stb_image.h"
 var $243=$5; //@line 4011 "./stb_image.h"
 var $244=($242|0)!=($243|0); //@line 4011 "./stb_image.h"
 if($244){label=38;break;}else{label=39;break;} //@line 4011 "./stb_image.h"
 case 38: 
 var $246=$img_n; //@line 4012 "./stb_image.h"
 var $247=$cur; //@line 4012 "./stb_image.h"
 var $248=(($247+$246)|0); //@line 4012 "./stb_image.h"
 HEAP8[($248)]=-1; //@line 4012 "./stb_image.h"
 label=39;break; //@line 4012 "./stb_image.h"
 case 39: 
 var $250=$img_n; //@line 4013 "./stb_image.h"
 var $251=$3; //@line 4013 "./stb_image.h"
 var $252=(($251+$250)|0); //@line 4013 "./stb_image.h"
 $3=$252; //@line 4013 "./stb_image.h"
 var $253=$5; //@line 4014 "./stb_image.h"
 var $254=$cur; //@line 4014 "./stb_image.h"
 var $255=(($254+$253)|0); //@line 4014 "./stb_image.h"
 $cur=$255; //@line 4014 "./stb_image.h"
 var $256=$5; //@line 4015 "./stb_image.h"
 var $257=$prior; //@line 4015 "./stb_image.h"
 var $258=(($257+$256)|0); //@line 4015 "./stb_image.h"
 $prior=$258; //@line 4015 "./stb_image.h"
 label=41;break; //@line 4016 "./stb_image.h"
 case 40: 
 var $260=$3; //@line 4017 "./stb_image.h"
 var $261=(($260+1)|0); //@line 4017 "./stb_image.h"
 $3=$261; //@line 4017 "./stb_image.h"
 var $262=$cur; //@line 4018 "./stb_image.h"
 var $263=(($262+1)|0); //@line 4018 "./stb_image.h"
 $cur=$263; //@line 4018 "./stb_image.h"
 var $264=$prior; //@line 4019 "./stb_image.h"
 var $265=(($264+1)|0); //@line 4019 "./stb_image.h"
 $prior=$265; //@line 4019 "./stb_image.h"
 label=41;break;
 case 41: 
 var $267=$8; //@line 4023 "./stb_image.h"
 var $268=($267|0)<8; //@line 4023 "./stb_image.h"
 if($268){label=43;break;}else{label=42;break;} //@line 4023 "./stb_image.h"
 case 42: 
 var $270=$img_n; //@line 4023 "./stb_image.h"
 var $271=$5; //@line 4023 "./stb_image.h"
 var $272=($270|0)==($271|0); //@line 4023 "./stb_image.h"
 if($272){label=43;break;}else{label=76;break;} //@line 4023 "./stb_image.h"
 case 43: 
 var $274=$width; //@line 4024 "./stb_image.h"
 var $275=((($274)-(1))|0); //@line 4024 "./stb_image.h"
 var $276=$img_n; //@line 4024 "./stb_image.h"
 var $277=(Math_imul($275,$276)|0); //@line 4024 "./stb_image.h"
 $nk=$277; //@line 4024 "./stb_image.h"
 var $278=$filter; //@line 4028 "./stb_image.h"
 switch(($278|0)){case 0:{ label=44;break;}case 1:{ label=45;break;}case 2:{ label=50;break;}case 3:{ label=55;break;}case 4:{ label=60;break;}case 5:{ label=65;break;}case 6:{ label=70;break;}default:{label=75;break;}}break;
 case 44: 
 var $280=$cur; //@line 4030 "./stb_image.h"
 var $281=$3; //@line 4030 "./stb_image.h"
 var $282=$nk; //@line 4030 "./stb_image.h"
 assert($282 % 1 === 0);(_memcpy($280, $281, $282)|0); //@line 4030 "./stb_image.h"
 label=75;break; //@line 4030 "./stb_image.h"
 case 45: 
 $k=0; //@line 4031 "./stb_image.h"
 label=46;break; //@line 4031 "./stb_image.h"
 case 46: 
 var $285=$k; //@line 4031 "./stb_image.h"
 var $286=$nk; //@line 4031 "./stb_image.h"
 var $287=($285|0)<($286|0); //@line 4031 "./stb_image.h"
 if($287){label=47;break;}else{label=49;break;} //@line 4031 "./stb_image.h"
 case 47: 
 var $289=$k; //@line 4031 "./stb_image.h"
 var $290=$3; //@line 4031 "./stb_image.h"
 var $291=(($290+$289)|0); //@line 4031 "./stb_image.h"
 var $292=HEAP8[($291)]; //@line 4031 "./stb_image.h"
 var $293=($292&255); //@line 4031 "./stb_image.h"
 var $294=$k; //@line 4031 "./stb_image.h"
 var $295=$filter_bytes; //@line 4031 "./stb_image.h"
 var $296=((($294)-($295))|0); //@line 4031 "./stb_image.h"
 var $297=$cur; //@line 4031 "./stb_image.h"
 var $298=(($297+$296)|0); //@line 4031 "./stb_image.h"
 var $299=HEAP8[($298)]; //@line 4031 "./stb_image.h"
 var $300=($299&255); //@line 4031 "./stb_image.h"
 var $301=((($293)+($300))|0); //@line 4031 "./stb_image.h"
 var $302=$301&255; //@line 4031 "./stb_image.h"
 var $303=(($302)&255); //@line 4031 "./stb_image.h"
 var $304=$k; //@line 4031 "./stb_image.h"
 var $305=$cur; //@line 4031 "./stb_image.h"
 var $306=(($305+$304)|0); //@line 4031 "./stb_image.h"
 HEAP8[($306)]=$303; //@line 4031 "./stb_image.h"
 label=48;break; //@line 4031 "./stb_image.h"
 case 48: 
 var $308=$k; //@line 4031 "./stb_image.h"
 var $309=((($308)+(1))|0); //@line 4031 "./stb_image.h"
 $k=$309; //@line 4031 "./stb_image.h"
 label=46;break; //@line 4031 "./stb_image.h"
 case 49: 
 label=75;break; //@line 4031 "./stb_image.h"
 case 50: 
 $k=0; //@line 4032 "./stb_image.h"
 label=51;break; //@line 4032 "./stb_image.h"
 case 51: 
 var $313=$k; //@line 4032 "./stb_image.h"
 var $314=$nk; //@line 4032 "./stb_image.h"
 var $315=($313|0)<($314|0); //@line 4032 "./stb_image.h"
 if($315){label=52;break;}else{label=54;break;} //@line 4032 "./stb_image.h"
 case 52: 
 var $317=$k; //@line 4032 "./stb_image.h"
 var $318=$3; //@line 4032 "./stb_image.h"
 var $319=(($318+$317)|0); //@line 4032 "./stb_image.h"
 var $320=HEAP8[($319)]; //@line 4032 "./stb_image.h"
 var $321=($320&255); //@line 4032 "./stb_image.h"
 var $322=$k; //@line 4032 "./stb_image.h"
 var $323=$prior; //@line 4032 "./stb_image.h"
 var $324=(($323+$322)|0); //@line 4032 "./stb_image.h"
 var $325=HEAP8[($324)]; //@line 4032 "./stb_image.h"
 var $326=($325&255); //@line 4032 "./stb_image.h"
 var $327=((($321)+($326))|0); //@line 4032 "./stb_image.h"
 var $328=$327&255; //@line 4032 "./stb_image.h"
 var $329=(($328)&255); //@line 4032 "./stb_image.h"
 var $330=$k; //@line 4032 "./stb_image.h"
 var $331=$cur; //@line 4032 "./stb_image.h"
 var $332=(($331+$330)|0); //@line 4032 "./stb_image.h"
 HEAP8[($332)]=$329; //@line 4032 "./stb_image.h"
 label=53;break; //@line 4032 "./stb_image.h"
 case 53: 
 var $334=$k; //@line 4032 "./stb_image.h"
 var $335=((($334)+(1))|0); //@line 4032 "./stb_image.h"
 $k=$335; //@line 4032 "./stb_image.h"
 label=51;break; //@line 4032 "./stb_image.h"
 case 54: 
 label=75;break; //@line 4032 "./stb_image.h"
 case 55: 
 $k=0; //@line 4033 "./stb_image.h"
 label=56;break; //@line 4033 "./stb_image.h"
 case 56: 
 var $339=$k; //@line 4033 "./stb_image.h"
 var $340=$nk; //@line 4033 "./stb_image.h"
 var $341=($339|0)<($340|0); //@line 4033 "./stb_image.h"
 if($341){label=57;break;}else{label=59;break;} //@line 4033 "./stb_image.h"
 case 57: 
 var $343=$k; //@line 4033 "./stb_image.h"
 var $344=$3; //@line 4033 "./stb_image.h"
 var $345=(($344+$343)|0); //@line 4033 "./stb_image.h"
 var $346=HEAP8[($345)]; //@line 4033 "./stb_image.h"
 var $347=($346&255); //@line 4033 "./stb_image.h"
 var $348=$k; //@line 4033 "./stb_image.h"
 var $349=$prior; //@line 4033 "./stb_image.h"
 var $350=(($349+$348)|0); //@line 4033 "./stb_image.h"
 var $351=HEAP8[($350)]; //@line 4033 "./stb_image.h"
 var $352=($351&255); //@line 4033 "./stb_image.h"
 var $353=$k; //@line 4033 "./stb_image.h"
 var $354=$filter_bytes; //@line 4033 "./stb_image.h"
 var $355=((($353)-($354))|0); //@line 4033 "./stb_image.h"
 var $356=$cur; //@line 4033 "./stb_image.h"
 var $357=(($356+$355)|0); //@line 4033 "./stb_image.h"
 var $358=HEAP8[($357)]; //@line 4033 "./stb_image.h"
 var $359=($358&255); //@line 4033 "./stb_image.h"
 var $360=((($352)+($359))|0); //@line 4033 "./stb_image.h"
 var $361=$360>>1; //@line 4033 "./stb_image.h"
 var $362=((($347)+($361))|0); //@line 4033 "./stb_image.h"
 var $363=$362&255; //@line 4033 "./stb_image.h"
 var $364=(($363)&255); //@line 4033 "./stb_image.h"
 var $365=$k; //@line 4033 "./stb_image.h"
 var $366=$cur; //@line 4033 "./stb_image.h"
 var $367=(($366+$365)|0); //@line 4033 "./stb_image.h"
 HEAP8[($367)]=$364; //@line 4033 "./stb_image.h"
 label=58;break; //@line 4033 "./stb_image.h"
 case 58: 
 var $369=$k; //@line 4033 "./stb_image.h"
 var $370=((($369)+(1))|0); //@line 4033 "./stb_image.h"
 $k=$370; //@line 4033 "./stb_image.h"
 label=56;break; //@line 4033 "./stb_image.h"
 case 59: 
 label=75;break; //@line 4033 "./stb_image.h"
 case 60: 
 $k=0; //@line 4034 "./stb_image.h"
 label=61;break; //@line 4034 "./stb_image.h"
 case 61: 
 var $374=$k; //@line 4034 "./stb_image.h"
 var $375=$nk; //@line 4034 "./stb_image.h"
 var $376=($374|0)<($375|0); //@line 4034 "./stb_image.h"
 if($376){label=62;break;}else{label=64;break;} //@line 4034 "./stb_image.h"
 case 62: 
 var $378=$k; //@line 4034 "./stb_image.h"
 var $379=$3; //@line 4034 "./stb_image.h"
 var $380=(($379+$378)|0); //@line 4034 "./stb_image.h"
 var $381=HEAP8[($380)]; //@line 4034 "./stb_image.h"
 var $382=($381&255); //@line 4034 "./stb_image.h"
 var $383=$k; //@line 4034 "./stb_image.h"
 var $384=$filter_bytes; //@line 4034 "./stb_image.h"
 var $385=((($383)-($384))|0); //@line 4034 "./stb_image.h"
 var $386=$cur; //@line 4034 "./stb_image.h"
 var $387=(($386+$385)|0); //@line 4034 "./stb_image.h"
 var $388=HEAP8[($387)]; //@line 4034 "./stb_image.h"
 var $389=($388&255); //@line 4034 "./stb_image.h"
 var $390=$k; //@line 4034 "./stb_image.h"
 var $391=$prior; //@line 4034 "./stb_image.h"
 var $392=(($391+$390)|0); //@line 4034 "./stb_image.h"
 var $393=HEAP8[($392)]; //@line 4034 "./stb_image.h"
 var $394=($393&255); //@line 4034 "./stb_image.h"
 var $395=$k; //@line 4034 "./stb_image.h"
 var $396=$filter_bytes; //@line 4034 "./stb_image.h"
 var $397=((($395)-($396))|0); //@line 4034 "./stb_image.h"
 var $398=$prior; //@line 4034 "./stb_image.h"
 var $399=(($398+$397)|0); //@line 4034 "./stb_image.h"
 var $400=HEAP8[($399)]; //@line 4034 "./stb_image.h"
 var $401=($400&255); //@line 4034 "./stb_image.h"
 var $402=_stbi__paeth($389,$394,$401); //@line 4034 "./stb_image.h"
 var $403=((($382)+($402))|0); //@line 4034 "./stb_image.h"
 var $404=$403&255; //@line 4034 "./stb_image.h"
 var $405=(($404)&255); //@line 4034 "./stb_image.h"
 var $406=$k; //@line 4034 "./stb_image.h"
 var $407=$cur; //@line 4034 "./stb_image.h"
 var $408=(($407+$406)|0); //@line 4034 "./stb_image.h"
 HEAP8[($408)]=$405; //@line 4034 "./stb_image.h"
 label=63;break; //@line 4034 "./stb_image.h"
 case 63: 
 var $410=$k; //@line 4034 "./stb_image.h"
 var $411=((($410)+(1))|0); //@line 4034 "./stb_image.h"
 $k=$411; //@line 4034 "./stb_image.h"
 label=61;break; //@line 4034 "./stb_image.h"
 case 64: 
 label=75;break; //@line 4034 "./stb_image.h"
 case 65: 
 $k=0; //@line 4035 "./stb_image.h"
 label=66;break; //@line 4035 "./stb_image.h"
 case 66: 
 var $415=$k; //@line 4035 "./stb_image.h"
 var $416=$nk; //@line 4035 "./stb_image.h"
 var $417=($415|0)<($416|0); //@line 4035 "./stb_image.h"
 if($417){label=67;break;}else{label=69;break;} //@line 4035 "./stb_image.h"
 case 67: 
 var $419=$k; //@line 4035 "./stb_image.h"
 var $420=$3; //@line 4035 "./stb_image.h"
 var $421=(($420+$419)|0); //@line 4035 "./stb_image.h"
 var $422=HEAP8[($421)]; //@line 4035 "./stb_image.h"
 var $423=($422&255); //@line 4035 "./stb_image.h"
 var $424=$k; //@line 4035 "./stb_image.h"
 var $425=$filter_bytes; //@line 4035 "./stb_image.h"
 var $426=((($424)-($425))|0); //@line 4035 "./stb_image.h"
 var $427=$cur; //@line 4035 "./stb_image.h"
 var $428=(($427+$426)|0); //@line 4035 "./stb_image.h"
 var $429=HEAP8[($428)]; //@line 4035 "./stb_image.h"
 var $430=($429&255); //@line 4035 "./stb_image.h"
 var $431=$430>>1; //@line 4035 "./stb_image.h"
 var $432=((($423)+($431))|0); //@line 4035 "./stb_image.h"
 var $433=$432&255; //@line 4035 "./stb_image.h"
 var $434=(($433)&255); //@line 4035 "./stb_image.h"
 var $435=$k; //@line 4035 "./stb_image.h"
 var $436=$cur; //@line 4035 "./stb_image.h"
 var $437=(($436+$435)|0); //@line 4035 "./stb_image.h"
 HEAP8[($437)]=$434; //@line 4035 "./stb_image.h"
 label=68;break; //@line 4035 "./stb_image.h"
 case 68: 
 var $439=$k; //@line 4035 "./stb_image.h"
 var $440=((($439)+(1))|0); //@line 4035 "./stb_image.h"
 $k=$440; //@line 4035 "./stb_image.h"
 label=66;break; //@line 4035 "./stb_image.h"
 case 69: 
 label=75;break; //@line 4035 "./stb_image.h"
 case 70: 
 $k=0; //@line 4036 "./stb_image.h"
 label=71;break; //@line 4036 "./stb_image.h"
 case 71: 
 var $444=$k; //@line 4036 "./stb_image.h"
 var $445=$nk; //@line 4036 "./stb_image.h"
 var $446=($444|0)<($445|0); //@line 4036 "./stb_image.h"
 if($446){label=72;break;}else{label=74;break;} //@line 4036 "./stb_image.h"
 case 72: 
 var $448=$k; //@line 4036 "./stb_image.h"
 var $449=$3; //@line 4036 "./stb_image.h"
 var $450=(($449+$448)|0); //@line 4036 "./stb_image.h"
 var $451=HEAP8[($450)]; //@line 4036 "./stb_image.h"
 var $452=($451&255); //@line 4036 "./stb_image.h"
 var $453=$k; //@line 4036 "./stb_image.h"
 var $454=$filter_bytes; //@line 4036 "./stb_image.h"
 var $455=((($453)-($454))|0); //@line 4036 "./stb_image.h"
 var $456=$cur; //@line 4036 "./stb_image.h"
 var $457=(($456+$455)|0); //@line 4036 "./stb_image.h"
 var $458=HEAP8[($457)]; //@line 4036 "./stb_image.h"
 var $459=($458&255); //@line 4036 "./stb_image.h"
 var $460=_stbi__paeth($459,0,0); //@line 4036 "./stb_image.h"
 var $461=((($452)+($460))|0); //@line 4036 "./stb_image.h"
 var $462=$461&255; //@line 4036 "./stb_image.h"
 var $463=(($462)&255); //@line 4036 "./stb_image.h"
 var $464=$k; //@line 4036 "./stb_image.h"
 var $465=$cur; //@line 4036 "./stb_image.h"
 var $466=(($465+$464)|0); //@line 4036 "./stb_image.h"
 HEAP8[($466)]=$463; //@line 4036 "./stb_image.h"
 label=73;break; //@line 4036 "./stb_image.h"
 case 73: 
 var $468=$k; //@line 4036 "./stb_image.h"
 var $469=((($468)+(1))|0); //@line 4036 "./stb_image.h"
 $k=$469; //@line 4036 "./stb_image.h"
 label=71;break; //@line 4036 "./stb_image.h"
 case 74: 
 label=75;break; //@line 4036 "./stb_image.h"
 case 75: 
 var $472=$nk; //@line 4039 "./stb_image.h"
 var $473=$3; //@line 4039 "./stb_image.h"
 var $474=(($473+$472)|0); //@line 4039 "./stb_image.h"
 $3=$474; //@line 4039 "./stb_image.h"
 label=143;break; //@line 4040 "./stb_image.h"
 case 76: 
 var $476=$img_n; //@line 4041 "./stb_image.h"
 var $477=((($476)+(1))|0); //@line 4041 "./stb_image.h"
 var $478=$5; //@line 4041 "./stb_image.h"
 var $479=($477|0)==($478|0); //@line 4041 "./stb_image.h"
 if($479){var $483=1;label=78;break;}else{label=77;break;} //@line 4041 "./stb_image.h"
 case 77: 
 ___assert_fail(138608,138824,4041,140072); //@line 4041 "./stb_image.h"
 throw "Reached an unreachable!"; //@line 4041 "./stb_image.h"
 label=78;break; //@line 4041 "./stb_image.h"
 case 78: 
 var $483;
 var $484=($483&1); //@line 4041 "./stb_image.h"
 var $485=$filter; //@line 4046 "./stb_image.h"
 switch(($485|0)){case 3:{ label=106;break;}case 4:{ label=115;break;}case 5:{ label=124;break;}case 6:{ label=133;break;}case 0:{ label=79;break;}case 1:{ label=88;break;}case 2:{ label=97;break;}default:{label=142;break;}}break;
 case 79: 
 var $487=$6; //@line 4047 "./stb_image.h"
 var $488=((($487)-(1))|0); //@line 4047 "./stb_image.h"
 $i=$488; //@line 4047 "./stb_image.h"
 label=80;break; //@line 4047 "./stb_image.h"
 case 80: 
 var $490=$i; //@line 4047 "./stb_image.h"
 var $491=($490>>>0)>=1; //@line 4047 "./stb_image.h"
 if($491){label=81;break;}else{label=87;break;} //@line 4047 "./stb_image.h"
 case 81: 
 $k=0; //@line 4047 "./stb_image.h"
 label=82;break; //@line 4047 "./stb_image.h"
 case 82: 
 var $494=$k; //@line 4047 "./stb_image.h"
 var $495=$img_n; //@line 4047 "./stb_image.h"
 var $496=($494|0)<($495|0); //@line 4047 "./stb_image.h"
 if($496){label=83;break;}else{label=85;break;} //@line 4047 "./stb_image.h"
 case 83: 
 var $498=$k; //@line 4047 "./stb_image.h"
 var $499=$3; //@line 4047 "./stb_image.h"
 var $500=(($499+$498)|0); //@line 4047 "./stb_image.h"
 var $501=HEAP8[($500)]; //@line 4047 "./stb_image.h"
 var $502=$k; //@line 4047 "./stb_image.h"
 var $503=$cur; //@line 4047 "./stb_image.h"
 var $504=(($503+$502)|0); //@line 4047 "./stb_image.h"
 HEAP8[($504)]=$501; //@line 4047 "./stb_image.h"
 label=84;break; //@line 4047 "./stb_image.h"
 case 84: 
 var $506=$k; //@line 4047 "./stb_image.h"
 var $507=((($506)+(1))|0); //@line 4047 "./stb_image.h"
 $k=$507; //@line 4047 "./stb_image.h"
 label=82;break; //@line 4047 "./stb_image.h"
 case 85: 
 label=86;break; //@line 4047 "./stb_image.h"
 case 86: 
 var $510=$i; //@line 4047 "./stb_image.h"
 var $511=((($510)-(1))|0); //@line 4047 "./stb_image.h"
 $i=$511; //@line 4047 "./stb_image.h"
 var $512=$img_n; //@line 4047 "./stb_image.h"
 var $513=$cur; //@line 4047 "./stb_image.h"
 var $514=(($513+$512)|0); //@line 4047 "./stb_image.h"
 HEAP8[($514)]=-1; //@line 4047 "./stb_image.h"
 var $515=$img_n; //@line 4047 "./stb_image.h"
 var $516=$3; //@line 4047 "./stb_image.h"
 var $517=(($516+$515)|0); //@line 4047 "./stb_image.h"
 $3=$517; //@line 4047 "./stb_image.h"
 var $518=$5; //@line 4047 "./stb_image.h"
 var $519=$cur; //@line 4047 "./stb_image.h"
 var $520=(($519+$518)|0); //@line 4047 "./stb_image.h"
 $cur=$520; //@line 4047 "./stb_image.h"
 var $521=$5; //@line 4047 "./stb_image.h"
 var $522=$prior; //@line 4047 "./stb_image.h"
 var $523=(($522+$521)|0); //@line 4047 "./stb_image.h"
 $prior=$523; //@line 4047 "./stb_image.h"
 label=80;break; //@line 4047 "./stb_image.h"
 case 87: 
 label=142;break; //@line 4047 "./stb_image.h"
 case 88: 
 var $526=$6; //@line 4048 "./stb_image.h"
 var $527=((($526)-(1))|0); //@line 4048 "./stb_image.h"
 $i=$527; //@line 4048 "./stb_image.h"
 label=89;break; //@line 4048 "./stb_image.h"
 case 89: 
 var $529=$i; //@line 4048 "./stb_image.h"
 var $530=($529>>>0)>=1; //@line 4048 "./stb_image.h"
 if($530){label=90;break;}else{label=96;break;} //@line 4048 "./stb_image.h"
 case 90: 
 $k=0; //@line 4048 "./stb_image.h"
 label=91;break; //@line 4048 "./stb_image.h"
 case 91: 
 var $533=$k; //@line 4048 "./stb_image.h"
 var $534=$img_n; //@line 4048 "./stb_image.h"
 var $535=($533|0)<($534|0); //@line 4048 "./stb_image.h"
 if($535){label=92;break;}else{label=94;break;} //@line 4048 "./stb_image.h"
 case 92: 
 var $537=$k; //@line 4048 "./stb_image.h"
 var $538=$3; //@line 4048 "./stb_image.h"
 var $539=(($538+$537)|0); //@line 4048 "./stb_image.h"
 var $540=HEAP8[($539)]; //@line 4048 "./stb_image.h"
 var $541=($540&255); //@line 4048 "./stb_image.h"
 var $542=$k; //@line 4048 "./stb_image.h"
 var $543=$5; //@line 4048 "./stb_image.h"
 var $544=((($542)-($543))|0); //@line 4048 "./stb_image.h"
 var $545=$cur; //@line 4048 "./stb_image.h"
 var $546=(($545+$544)|0); //@line 4048 "./stb_image.h"
 var $547=HEAP8[($546)]; //@line 4048 "./stb_image.h"
 var $548=($547&255); //@line 4048 "./stb_image.h"
 var $549=((($541)+($548))|0); //@line 4048 "./stb_image.h"
 var $550=$549&255; //@line 4048 "./stb_image.h"
 var $551=(($550)&255); //@line 4048 "./stb_image.h"
 var $552=$k; //@line 4048 "./stb_image.h"
 var $553=$cur; //@line 4048 "./stb_image.h"
 var $554=(($553+$552)|0); //@line 4048 "./stb_image.h"
 HEAP8[($554)]=$551; //@line 4048 "./stb_image.h"
 label=93;break; //@line 4048 "./stb_image.h"
 case 93: 
 var $556=$k; //@line 4048 "./stb_image.h"
 var $557=((($556)+(1))|0); //@line 4048 "./stb_image.h"
 $k=$557; //@line 4048 "./stb_image.h"
 label=91;break; //@line 4048 "./stb_image.h"
 case 94: 
 label=95;break; //@line 4048 "./stb_image.h"
 case 95: 
 var $560=$i; //@line 4048 "./stb_image.h"
 var $561=((($560)-(1))|0); //@line 4048 "./stb_image.h"
 $i=$561; //@line 4048 "./stb_image.h"
 var $562=$img_n; //@line 4048 "./stb_image.h"
 var $563=$cur; //@line 4048 "./stb_image.h"
 var $564=(($563+$562)|0); //@line 4048 "./stb_image.h"
 HEAP8[($564)]=-1; //@line 4048 "./stb_image.h"
 var $565=$img_n; //@line 4048 "./stb_image.h"
 var $566=$3; //@line 4048 "./stb_image.h"
 var $567=(($566+$565)|0); //@line 4048 "./stb_image.h"
 $3=$567; //@line 4048 "./stb_image.h"
 var $568=$5; //@line 4048 "./stb_image.h"
 var $569=$cur; //@line 4048 "./stb_image.h"
 var $570=(($569+$568)|0); //@line 4048 "./stb_image.h"
 $cur=$570; //@line 4048 "./stb_image.h"
 var $571=$5; //@line 4048 "./stb_image.h"
 var $572=$prior; //@line 4048 "./stb_image.h"
 var $573=(($572+$571)|0); //@line 4048 "./stb_image.h"
 $prior=$573; //@line 4048 "./stb_image.h"
 label=89;break; //@line 4048 "./stb_image.h"
 case 96: 
 label=142;break; //@line 4048 "./stb_image.h"
 case 97: 
 var $576=$6; //@line 4049 "./stb_image.h"
 var $577=((($576)-(1))|0); //@line 4049 "./stb_image.h"
 $i=$577; //@line 4049 "./stb_image.h"
 label=98;break; //@line 4049 "./stb_image.h"
 case 98: 
 var $579=$i; //@line 4049 "./stb_image.h"
 var $580=($579>>>0)>=1; //@line 4049 "./stb_image.h"
 if($580){label=99;break;}else{label=105;break;} //@line 4049 "./stb_image.h"
 case 99: 
 $k=0; //@line 4049 "./stb_image.h"
 label=100;break; //@line 4049 "./stb_image.h"
 case 100: 
 var $583=$k; //@line 4049 "./stb_image.h"
 var $584=$img_n; //@line 4049 "./stb_image.h"
 var $585=($583|0)<($584|0); //@line 4049 "./stb_image.h"
 if($585){label=101;break;}else{label=103;break;} //@line 4049 "./stb_image.h"
 case 101: 
 var $587=$k; //@line 4049 "./stb_image.h"
 var $588=$3; //@line 4049 "./stb_image.h"
 var $589=(($588+$587)|0); //@line 4049 "./stb_image.h"
 var $590=HEAP8[($589)]; //@line 4049 "./stb_image.h"
 var $591=($590&255); //@line 4049 "./stb_image.h"
 var $592=$k; //@line 4049 "./stb_image.h"
 var $593=$prior; //@line 4049 "./stb_image.h"
 var $594=(($593+$592)|0); //@line 4049 "./stb_image.h"
 var $595=HEAP8[($594)]; //@line 4049 "./stb_image.h"
 var $596=($595&255); //@line 4049 "./stb_image.h"
 var $597=((($591)+($596))|0); //@line 4049 "./stb_image.h"
 var $598=$597&255; //@line 4049 "./stb_image.h"
 var $599=(($598)&255); //@line 4049 "./stb_image.h"
 var $600=$k; //@line 4049 "./stb_image.h"
 var $601=$cur; //@line 4049 "./stb_image.h"
 var $602=(($601+$600)|0); //@line 4049 "./stb_image.h"
 HEAP8[($602)]=$599; //@line 4049 "./stb_image.h"
 label=102;break; //@line 4049 "./stb_image.h"
 case 102: 
 var $604=$k; //@line 4049 "./stb_image.h"
 var $605=((($604)+(1))|0); //@line 4049 "./stb_image.h"
 $k=$605; //@line 4049 "./stb_image.h"
 label=100;break; //@line 4049 "./stb_image.h"
 case 103: 
 label=104;break; //@line 4049 "./stb_image.h"
 case 104: 
 var $608=$i; //@line 4049 "./stb_image.h"
 var $609=((($608)-(1))|0); //@line 4049 "./stb_image.h"
 $i=$609; //@line 4049 "./stb_image.h"
 var $610=$img_n; //@line 4049 "./stb_image.h"
 var $611=$cur; //@line 4049 "./stb_image.h"
 var $612=(($611+$610)|0); //@line 4049 "./stb_image.h"
 HEAP8[($612)]=-1; //@line 4049 "./stb_image.h"
 var $613=$img_n; //@line 4049 "./stb_image.h"
 var $614=$3; //@line 4049 "./stb_image.h"
 var $615=(($614+$613)|0); //@line 4049 "./stb_image.h"
 $3=$615; //@line 4049 "./stb_image.h"
 var $616=$5; //@line 4049 "./stb_image.h"
 var $617=$cur; //@line 4049 "./stb_image.h"
 var $618=(($617+$616)|0); //@line 4049 "./stb_image.h"
 $cur=$618; //@line 4049 "./stb_image.h"
 var $619=$5; //@line 4049 "./stb_image.h"
 var $620=$prior; //@line 4049 "./stb_image.h"
 var $621=(($620+$619)|0); //@line 4049 "./stb_image.h"
 $prior=$621; //@line 4049 "./stb_image.h"
 label=98;break; //@line 4049 "./stb_image.h"
 case 105: 
 label=142;break; //@line 4049 "./stb_image.h"
 case 106: 
 var $624=$6; //@line 4050 "./stb_image.h"
 var $625=((($624)-(1))|0); //@line 4050 "./stb_image.h"
 $i=$625; //@line 4050 "./stb_image.h"
 label=107;break; //@line 4050 "./stb_image.h"
 case 107: 
 var $627=$i; //@line 4050 "./stb_image.h"
 var $628=($627>>>0)>=1; //@line 4050 "./stb_image.h"
 if($628){label=108;break;}else{label=114;break;} //@line 4050 "./stb_image.h"
 case 108: 
 $k=0; //@line 4050 "./stb_image.h"
 label=109;break; //@line 4050 "./stb_image.h"
 case 109: 
 var $631=$k; //@line 4050 "./stb_image.h"
 var $632=$img_n; //@line 4050 "./stb_image.h"
 var $633=($631|0)<($632|0); //@line 4050 "./stb_image.h"
 if($633){label=110;break;}else{label=112;break;} //@line 4050 "./stb_image.h"
 case 110: 
 var $635=$k; //@line 4050 "./stb_image.h"
 var $636=$3; //@line 4050 "./stb_image.h"
 var $637=(($636+$635)|0); //@line 4050 "./stb_image.h"
 var $638=HEAP8[($637)]; //@line 4050 "./stb_image.h"
 var $639=($638&255); //@line 4050 "./stb_image.h"
 var $640=$k; //@line 4050 "./stb_image.h"
 var $641=$prior; //@line 4050 "./stb_image.h"
 var $642=(($641+$640)|0); //@line 4050 "./stb_image.h"
 var $643=HEAP8[($642)]; //@line 4050 "./stb_image.h"
 var $644=($643&255); //@line 4050 "./stb_image.h"
 var $645=$k; //@line 4050 "./stb_image.h"
 var $646=$5; //@line 4050 "./stb_image.h"
 var $647=((($645)-($646))|0); //@line 4050 "./stb_image.h"
 var $648=$cur; //@line 4050 "./stb_image.h"
 var $649=(($648+$647)|0); //@line 4050 "./stb_image.h"
 var $650=HEAP8[($649)]; //@line 4050 "./stb_image.h"
 var $651=($650&255); //@line 4050 "./stb_image.h"
 var $652=((($644)+($651))|0); //@line 4050 "./stb_image.h"
 var $653=$652>>1; //@line 4050 "./stb_image.h"
 var $654=((($639)+($653))|0); //@line 4050 "./stb_image.h"
 var $655=$654&255; //@line 4050 "./stb_image.h"
 var $656=(($655)&255); //@line 4050 "./stb_image.h"
 var $657=$k; //@line 4050 "./stb_image.h"
 var $658=$cur; //@line 4050 "./stb_image.h"
 var $659=(($658+$657)|0); //@line 4050 "./stb_image.h"
 HEAP8[($659)]=$656; //@line 4050 "./stb_image.h"
 label=111;break; //@line 4050 "./stb_image.h"
 case 111: 
 var $661=$k; //@line 4050 "./stb_image.h"
 var $662=((($661)+(1))|0); //@line 4050 "./stb_image.h"
 $k=$662; //@line 4050 "./stb_image.h"
 label=109;break; //@line 4050 "./stb_image.h"
 case 112: 
 label=113;break; //@line 4050 "./stb_image.h"
 case 113: 
 var $665=$i; //@line 4050 "./stb_image.h"
 var $666=((($665)-(1))|0); //@line 4050 "./stb_image.h"
 $i=$666; //@line 4050 "./stb_image.h"
 var $667=$img_n; //@line 4050 "./stb_image.h"
 var $668=$cur; //@line 4050 "./stb_image.h"
 var $669=(($668+$667)|0); //@line 4050 "./stb_image.h"
 HEAP8[($669)]=-1; //@line 4050 "./stb_image.h"
 var $670=$img_n; //@line 4050 "./stb_image.h"
 var $671=$3; //@line 4050 "./stb_image.h"
 var $672=(($671+$670)|0); //@line 4050 "./stb_image.h"
 $3=$672; //@line 4050 "./stb_image.h"
 var $673=$5; //@line 4050 "./stb_image.h"
 var $674=$cur; //@line 4050 "./stb_image.h"
 var $675=(($674+$673)|0); //@line 4050 "./stb_image.h"
 $cur=$675; //@line 4050 "./stb_image.h"
 var $676=$5; //@line 4050 "./stb_image.h"
 var $677=$prior; //@line 4050 "./stb_image.h"
 var $678=(($677+$676)|0); //@line 4050 "./stb_image.h"
 $prior=$678; //@line 4050 "./stb_image.h"
 label=107;break; //@line 4050 "./stb_image.h"
 case 114: 
 label=142;break; //@line 4050 "./stb_image.h"
 case 115: 
 var $681=$6; //@line 4051 "./stb_image.h"
 var $682=((($681)-(1))|0); //@line 4051 "./stb_image.h"
 $i=$682; //@line 4051 "./stb_image.h"
 label=116;break; //@line 4051 "./stb_image.h"
 case 116: 
 var $684=$i; //@line 4051 "./stb_image.h"
 var $685=($684>>>0)>=1; //@line 4051 "./stb_image.h"
 if($685){label=117;break;}else{label=123;break;} //@line 4051 "./stb_image.h"
 case 117: 
 $k=0; //@line 4051 "./stb_image.h"
 label=118;break; //@line 4051 "./stb_image.h"
 case 118: 
 var $688=$k; //@line 4051 "./stb_image.h"
 var $689=$img_n; //@line 4051 "./stb_image.h"
 var $690=($688|0)<($689|0); //@line 4051 "./stb_image.h"
 if($690){label=119;break;}else{label=121;break;} //@line 4051 "./stb_image.h"
 case 119: 
 var $692=$k; //@line 4051 "./stb_image.h"
 var $693=$3; //@line 4051 "./stb_image.h"
 var $694=(($693+$692)|0); //@line 4051 "./stb_image.h"
 var $695=HEAP8[($694)]; //@line 4051 "./stb_image.h"
 var $696=($695&255); //@line 4051 "./stb_image.h"
 var $697=$k; //@line 4051 "./stb_image.h"
 var $698=$5; //@line 4051 "./stb_image.h"
 var $699=((($697)-($698))|0); //@line 4051 "./stb_image.h"
 var $700=$cur; //@line 4051 "./stb_image.h"
 var $701=(($700+$699)|0); //@line 4051 "./stb_image.h"
 var $702=HEAP8[($701)]; //@line 4051 "./stb_image.h"
 var $703=($702&255); //@line 4051 "./stb_image.h"
 var $704=$k; //@line 4051 "./stb_image.h"
 var $705=$prior; //@line 4051 "./stb_image.h"
 var $706=(($705+$704)|0); //@line 4051 "./stb_image.h"
 var $707=HEAP8[($706)]; //@line 4051 "./stb_image.h"
 var $708=($707&255); //@line 4051 "./stb_image.h"
 var $709=$k; //@line 4051 "./stb_image.h"
 var $710=$5; //@line 4051 "./stb_image.h"
 var $711=((($709)-($710))|0); //@line 4051 "./stb_image.h"
 var $712=$prior; //@line 4051 "./stb_image.h"
 var $713=(($712+$711)|0); //@line 4051 "./stb_image.h"
 var $714=HEAP8[($713)]; //@line 4051 "./stb_image.h"
 var $715=($714&255); //@line 4051 "./stb_image.h"
 var $716=_stbi__paeth($703,$708,$715); //@line 4051 "./stb_image.h"
 var $717=((($696)+($716))|0); //@line 4051 "./stb_image.h"
 var $718=$717&255; //@line 4051 "./stb_image.h"
 var $719=(($718)&255); //@line 4051 "./stb_image.h"
 var $720=$k; //@line 4051 "./stb_image.h"
 var $721=$cur; //@line 4051 "./stb_image.h"
 var $722=(($721+$720)|0); //@line 4051 "./stb_image.h"
 HEAP8[($722)]=$719; //@line 4051 "./stb_image.h"
 label=120;break; //@line 4051 "./stb_image.h"
 case 120: 
 var $724=$k; //@line 4051 "./stb_image.h"
 var $725=((($724)+(1))|0); //@line 4051 "./stb_image.h"
 $k=$725; //@line 4051 "./stb_image.h"
 label=118;break; //@line 4051 "./stb_image.h"
 case 121: 
 label=122;break; //@line 4051 "./stb_image.h"
 case 122: 
 var $728=$i; //@line 4051 "./stb_image.h"
 var $729=((($728)-(1))|0); //@line 4051 "./stb_image.h"
 $i=$729; //@line 4051 "./stb_image.h"
 var $730=$img_n; //@line 4051 "./stb_image.h"
 var $731=$cur; //@line 4051 "./stb_image.h"
 var $732=(($731+$730)|0); //@line 4051 "./stb_image.h"
 HEAP8[($732)]=-1; //@line 4051 "./stb_image.h"
 var $733=$img_n; //@line 4051 "./stb_image.h"
 var $734=$3; //@line 4051 "./stb_image.h"
 var $735=(($734+$733)|0); //@line 4051 "./stb_image.h"
 $3=$735; //@line 4051 "./stb_image.h"
 var $736=$5; //@line 4051 "./stb_image.h"
 var $737=$cur; //@line 4051 "./stb_image.h"
 var $738=(($737+$736)|0); //@line 4051 "./stb_image.h"
 $cur=$738; //@line 4051 "./stb_image.h"
 var $739=$5; //@line 4051 "./stb_image.h"
 var $740=$prior; //@line 4051 "./stb_image.h"
 var $741=(($740+$739)|0); //@line 4051 "./stb_image.h"
 $prior=$741; //@line 4051 "./stb_image.h"
 label=116;break; //@line 4051 "./stb_image.h"
 case 123: 
 label=142;break; //@line 4051 "./stb_image.h"
 case 124: 
 var $744=$6; //@line 4052 "./stb_image.h"
 var $745=((($744)-(1))|0); //@line 4052 "./stb_image.h"
 $i=$745; //@line 4052 "./stb_image.h"
 label=125;break; //@line 4052 "./stb_image.h"
 case 125: 
 var $747=$i; //@line 4052 "./stb_image.h"
 var $748=($747>>>0)>=1; //@line 4052 "./stb_image.h"
 if($748){label=126;break;}else{label=132;break;} //@line 4052 "./stb_image.h"
 case 126: 
 $k=0; //@line 4052 "./stb_image.h"
 label=127;break; //@line 4052 "./stb_image.h"
 case 127: 
 var $751=$k; //@line 4052 "./stb_image.h"
 var $752=$img_n; //@line 4052 "./stb_image.h"
 var $753=($751|0)<($752|0); //@line 4052 "./stb_image.h"
 if($753){label=128;break;}else{label=130;break;} //@line 4052 "./stb_image.h"
 case 128: 
 var $755=$k; //@line 4052 "./stb_image.h"
 var $756=$3; //@line 4052 "./stb_image.h"
 var $757=(($756+$755)|0); //@line 4052 "./stb_image.h"
 var $758=HEAP8[($757)]; //@line 4052 "./stb_image.h"
 var $759=($758&255); //@line 4052 "./stb_image.h"
 var $760=$k; //@line 4052 "./stb_image.h"
 var $761=$5; //@line 4052 "./stb_image.h"
 var $762=((($760)-($761))|0); //@line 4052 "./stb_image.h"
 var $763=$cur; //@line 4052 "./stb_image.h"
 var $764=(($763+$762)|0); //@line 4052 "./stb_image.h"
 var $765=HEAP8[($764)]; //@line 4052 "./stb_image.h"
 var $766=($765&255); //@line 4052 "./stb_image.h"
 var $767=$766>>1; //@line 4052 "./stb_image.h"
 var $768=((($759)+($767))|0); //@line 4052 "./stb_image.h"
 var $769=$768&255; //@line 4052 "./stb_image.h"
 var $770=(($769)&255); //@line 4052 "./stb_image.h"
 var $771=$k; //@line 4052 "./stb_image.h"
 var $772=$cur; //@line 4052 "./stb_image.h"
 var $773=(($772+$771)|0); //@line 4052 "./stb_image.h"
 HEAP8[($773)]=$770; //@line 4052 "./stb_image.h"
 label=129;break; //@line 4052 "./stb_image.h"
 case 129: 
 var $775=$k; //@line 4052 "./stb_image.h"
 var $776=((($775)+(1))|0); //@line 4052 "./stb_image.h"
 $k=$776; //@line 4052 "./stb_image.h"
 label=127;break; //@line 4052 "./stb_image.h"
 case 130: 
 label=131;break; //@line 4052 "./stb_image.h"
 case 131: 
 var $779=$i; //@line 4052 "./stb_image.h"
 var $780=((($779)-(1))|0); //@line 4052 "./stb_image.h"
 $i=$780; //@line 4052 "./stb_image.h"
 var $781=$img_n; //@line 4052 "./stb_image.h"
 var $782=$cur; //@line 4052 "./stb_image.h"
 var $783=(($782+$781)|0); //@line 4052 "./stb_image.h"
 HEAP8[($783)]=-1; //@line 4052 "./stb_image.h"
 var $784=$img_n; //@line 4052 "./stb_image.h"
 var $785=$3; //@line 4052 "./stb_image.h"
 var $786=(($785+$784)|0); //@line 4052 "./stb_image.h"
 $3=$786; //@line 4052 "./stb_image.h"
 var $787=$5; //@line 4052 "./stb_image.h"
 var $788=$cur; //@line 4052 "./stb_image.h"
 var $789=(($788+$787)|0); //@line 4052 "./stb_image.h"
 $cur=$789; //@line 4052 "./stb_image.h"
 var $790=$5; //@line 4052 "./stb_image.h"
 var $791=$prior; //@line 4052 "./stb_image.h"
 var $792=(($791+$790)|0); //@line 4052 "./stb_image.h"
 $prior=$792; //@line 4052 "./stb_image.h"
 label=125;break; //@line 4052 "./stb_image.h"
 case 132: 
 label=142;break; //@line 4052 "./stb_image.h"
 case 133: 
 var $795=$6; //@line 4053 "./stb_image.h"
 var $796=((($795)-(1))|0); //@line 4053 "./stb_image.h"
 $i=$796; //@line 4053 "./stb_image.h"
 label=134;break; //@line 4053 "./stb_image.h"
 case 134: 
 var $798=$i; //@line 4053 "./stb_image.h"
 var $799=($798>>>0)>=1; //@line 4053 "./stb_image.h"
 if($799){label=135;break;}else{label=141;break;} //@line 4053 "./stb_image.h"
 case 135: 
 $k=0; //@line 4053 "./stb_image.h"
 label=136;break; //@line 4053 "./stb_image.h"
 case 136: 
 var $802=$k; //@line 4053 "./stb_image.h"
 var $803=$img_n; //@line 4053 "./stb_image.h"
 var $804=($802|0)<($803|0); //@line 4053 "./stb_image.h"
 if($804){label=137;break;}else{label=139;break;} //@line 4053 "./stb_image.h"
 case 137: 
 var $806=$k; //@line 4053 "./stb_image.h"
 var $807=$3; //@line 4053 "./stb_image.h"
 var $808=(($807+$806)|0); //@line 4053 "./stb_image.h"
 var $809=HEAP8[($808)]; //@line 4053 "./stb_image.h"
 var $810=($809&255); //@line 4053 "./stb_image.h"
 var $811=$k; //@line 4053 "./stb_image.h"
 var $812=$5; //@line 4053 "./stb_image.h"
 var $813=((($811)-($812))|0); //@line 4053 "./stb_image.h"
 var $814=$cur; //@line 4053 "./stb_image.h"
 var $815=(($814+$813)|0); //@line 4053 "./stb_image.h"
 var $816=HEAP8[($815)]; //@line 4053 "./stb_image.h"
 var $817=($816&255); //@line 4053 "./stb_image.h"
 var $818=_stbi__paeth($817,0,0); //@line 4053 "./stb_image.h"
 var $819=((($810)+($818))|0); //@line 4053 "./stb_image.h"
 var $820=$819&255; //@line 4053 "./stb_image.h"
 var $821=(($820)&255); //@line 4053 "./stb_image.h"
 var $822=$k; //@line 4053 "./stb_image.h"
 var $823=$cur; //@line 4053 "./stb_image.h"
 var $824=(($823+$822)|0); //@line 4053 "./stb_image.h"
 HEAP8[($824)]=$821; //@line 4053 "./stb_image.h"
 label=138;break; //@line 4053 "./stb_image.h"
 case 138: 
 var $826=$k; //@line 4053 "./stb_image.h"
 var $827=((($826)+(1))|0); //@line 4053 "./stb_image.h"
 $k=$827; //@line 4053 "./stb_image.h"
 label=136;break; //@line 4053 "./stb_image.h"
 case 139: 
 label=140;break; //@line 4053 "./stb_image.h"
 case 140: 
 var $830=$i; //@line 4053 "./stb_image.h"
 var $831=((($830)-(1))|0); //@line 4053 "./stb_image.h"
 $i=$831; //@line 4053 "./stb_image.h"
 var $832=$img_n; //@line 4053 "./stb_image.h"
 var $833=$cur; //@line 4053 "./stb_image.h"
 var $834=(($833+$832)|0); //@line 4053 "./stb_image.h"
 HEAP8[($834)]=-1; //@line 4053 "./stb_image.h"
 var $835=$img_n; //@line 4053 "./stb_image.h"
 var $836=$3; //@line 4053 "./stb_image.h"
 var $837=(($836+$835)|0); //@line 4053 "./stb_image.h"
 $3=$837; //@line 4053 "./stb_image.h"
 var $838=$5; //@line 4053 "./stb_image.h"
 var $839=$cur; //@line 4053 "./stb_image.h"
 var $840=(($839+$838)|0); //@line 4053 "./stb_image.h"
 $cur=$840; //@line 4053 "./stb_image.h"
 var $841=$5; //@line 4053 "./stb_image.h"
 var $842=$prior; //@line 4053 "./stb_image.h"
 var $843=(($842+$841)|0); //@line 4053 "./stb_image.h"
 $prior=$843; //@line 4053 "./stb_image.h"
 label=134;break; //@line 4053 "./stb_image.h"
 case 141: 
 label=142;break; //@line 4053 "./stb_image.h"
 case 142: 
 label=143;break;
 case 143: 
 label=144;break; //@line 4057 "./stb_image.h"
 case 144: 
 var $848=$j; //@line 3978 "./stb_image.h"
 var $849=((($848)+(1))|0); //@line 3978 "./stb_image.h"
 $j=$849; //@line 3978 "./stb_image.h"
 label=15;break; //@line 3978 "./stb_image.h"
 case 145: 
 var $851=$8; //@line 4062 "./stb_image.h"
 var $852=($851|0)<8; //@line 4062 "./stb_image.h"
 if($852){label=146;break;}else{label=211;break;} //@line 4062 "./stb_image.h"
 case 146: 
 $j=0; //@line 4063 "./stb_image.h"
 label=147;break; //@line 4063 "./stb_image.h"
 case 147: 
 var $855=$j; //@line 4063 "./stb_image.h"
 var $856=$7; //@line 4063 "./stb_image.h"
 var $857=($855>>>0)<($856>>>0); //@line 4063 "./stb_image.h"
 if($857){label=148;break;}else{label=210;break;} //@line 4063 "./stb_image.h"
 case 148: 
 var $859=$2; //@line 4064 "./stb_image.h"
 var $860=(($859+12)|0); //@line 4064 "./stb_image.h"
 var $861=HEAP32[(($860)>>2)]; //@line 4064 "./stb_image.h"
 var $862=$stride; //@line 4064 "./stb_image.h"
 var $863=$j; //@line 4064 "./stb_image.h"
 var $864=(Math_imul($862,$863)|0); //@line 4064 "./stb_image.h"
 var $865=(($861+$864)|0); //@line 4064 "./stb_image.h"
 $cur1=$865; //@line 4064 "./stb_image.h"
 var $866=$2; //@line 4065 "./stb_image.h"
 var $867=(($866+12)|0); //@line 4065 "./stb_image.h"
 var $868=HEAP32[(($867)>>2)]; //@line 4065 "./stb_image.h"
 var $869=$stride; //@line 4065 "./stb_image.h"
 var $870=$j; //@line 4065 "./stb_image.h"
 var $871=(Math_imul($869,$870)|0); //@line 4065 "./stb_image.h"
 var $872=(($868+$871)|0); //@line 4065 "./stb_image.h"
 var $873=$6; //@line 4065 "./stb_image.h"
 var $874=$5; //@line 4065 "./stb_image.h"
 var $875=(Math_imul($873,$874)|0); //@line 4065 "./stb_image.h"
 var $876=(($872+$875)|0); //@line 4065 "./stb_image.h"
 var $877=$img_width_bytes; //@line 4065 "./stb_image.h"
 var $878=(((-$877))|0); //@line 4065 "./stb_image.h"
 var $879=(($876+$878)|0); //@line 4065 "./stb_image.h"
 $in=$879; //@line 4065 "./stb_image.h"
 var $880=$9; //@line 4068 "./stb_image.h"
 var $881=($880|0)==0; //@line 4068 "./stb_image.h"
 if($881){label=149;break;}else{label=150;break;} //@line 4068 "./stb_image.h"
 case 149: 
 var $883=$8; //@line 4068 "./stb_image.h"
 var $884=((10312+$883)|0); //@line 4068 "./stb_image.h"
 var $885=HEAP8[($884)]; //@line 4068 "./stb_image.h"
 var $886=($885&255); //@line 4068 "./stb_image.h"
 var $889=$886;label=151;break; //@line 4068 "./stb_image.h"
 case 150: 
 var $889=1;label=151;break; //@line 4068 "./stb_image.h"
 case 151: 
 var $889; //@line 4068 "./stb_image.h"
 var $890=(($889)&255); //@line 4068 "./stb_image.h"
 $scale=$890; //@line 4068 "./stb_image.h"
 var $891=$8; //@line 4076 "./stb_image.h"
 var $892=($891|0)==4; //@line 4076 "./stb_image.h"
 if($892){label=152;break;}else{label=159;break;} //@line 4076 "./stb_image.h"
 case 152: 
 var $894=$6; //@line 4077 "./stb_image.h"
 var $895=$img_n; //@line 4077 "./stb_image.h"
 var $896=(Math_imul($894,$895)|0); //@line 4077 "./stb_image.h"
 $k=$896; //@line 4077 "./stb_image.h"
 label=153;break; //@line 4077 "./stb_image.h"
 case 153: 
 var $898=$k; //@line 4077 "./stb_image.h"
 var $899=($898|0)>=2; //@line 4077 "./stb_image.h"
 if($899){label=154;break;}else{label=156;break;} //@line 4077 "./stb_image.h"
 case 154: 
 var $901=$scale; //@line 4078 "./stb_image.h"
 var $902=($901&255); //@line 4078 "./stb_image.h"
 var $903=$in; //@line 4078 "./stb_image.h"
 var $904=HEAP8[($903)]; //@line 4078 "./stb_image.h"
 var $905=($904&255); //@line 4078 "./stb_image.h"
 var $906=$905>>4; //@line 4078 "./stb_image.h"
 var $907=(Math_imul($902,$906)|0); //@line 4078 "./stb_image.h"
 var $908=(($907)&255); //@line 4078 "./stb_image.h"
 var $909=$cur1; //@line 4078 "./stb_image.h"
 var $910=(($909+1)|0); //@line 4078 "./stb_image.h"
 $cur1=$910; //@line 4078 "./stb_image.h"
 HEAP8[($909)]=$908; //@line 4078 "./stb_image.h"
 var $911=$scale; //@line 4079 "./stb_image.h"
 var $912=($911&255); //@line 4079 "./stb_image.h"
 var $913=$in; //@line 4079 "./stb_image.h"
 var $914=HEAP8[($913)]; //@line 4079 "./stb_image.h"
 var $915=($914&255); //@line 4079 "./stb_image.h"
 var $916=$915&15; //@line 4079 "./stb_image.h"
 var $917=(Math_imul($912,$916)|0); //@line 4079 "./stb_image.h"
 var $918=(($917)&255); //@line 4079 "./stb_image.h"
 var $919=$cur1; //@line 4079 "./stb_image.h"
 var $920=(($919+1)|0); //@line 4079 "./stb_image.h"
 $cur1=$920; //@line 4079 "./stb_image.h"
 HEAP8[($919)]=$918; //@line 4079 "./stb_image.h"
 label=155;break; //@line 4080 "./stb_image.h"
 case 155: 
 var $922=$k; //@line 4077 "./stb_image.h"
 var $923=((($922)-(2))|0); //@line 4077 "./stb_image.h"
 $k=$923; //@line 4077 "./stb_image.h"
 var $924=$in; //@line 4077 "./stb_image.h"
 var $925=(($924+1)|0); //@line 4077 "./stb_image.h"
 $in=$925; //@line 4077 "./stb_image.h"
 label=153;break; //@line 4077 "./stb_image.h"
 case 156: 
 var $927=$k; //@line 4081 "./stb_image.h"
 var $928=($927|0)>0; //@line 4081 "./stb_image.h"
 if($928){label=157;break;}else{label=158;break;} //@line 4081 "./stb_image.h"
 case 157: 
 var $930=$scale; //@line 4081 "./stb_image.h"
 var $931=($930&255); //@line 4081 "./stb_image.h"
 var $932=$in; //@line 4081 "./stb_image.h"
 var $933=HEAP8[($932)]; //@line 4081 "./stb_image.h"
 var $934=($933&255); //@line 4081 "./stb_image.h"
 var $935=$934>>4; //@line 4081 "./stb_image.h"
 var $936=(Math_imul($931,$935)|0); //@line 4081 "./stb_image.h"
 var $937=(($936)&255); //@line 4081 "./stb_image.h"
 var $938=$cur1; //@line 4081 "./stb_image.h"
 var $939=(($938+1)|0); //@line 4081 "./stb_image.h"
 $cur1=$939; //@line 4081 "./stb_image.h"
 HEAP8[($938)]=$937; //@line 4081 "./stb_image.h"
 label=158;break; //@line 4081 "./stb_image.h"
 case 158: 
 label=193;break; //@line 4082 "./stb_image.h"
 case 159: 
 var $942=$8; //@line 4082 "./stb_image.h"
 var $943=($942|0)==2; //@line 4082 "./stb_image.h"
 if($943){label=160;break;}else{label=171;break;} //@line 4082 "./stb_image.h"
 case 160: 
 var $945=$6; //@line 4083 "./stb_image.h"
 var $946=$img_n; //@line 4083 "./stb_image.h"
 var $947=(Math_imul($945,$946)|0); //@line 4083 "./stb_image.h"
 $k=$947; //@line 4083 "./stb_image.h"
 label=161;break; //@line 4083 "./stb_image.h"
 case 161: 
 var $949=$k; //@line 4083 "./stb_image.h"
 var $950=($949|0)>=4; //@line 4083 "./stb_image.h"
 if($950){label=162;break;}else{label=164;break;} //@line 4083 "./stb_image.h"
 case 162: 
 var $952=$scale; //@line 4084 "./stb_image.h"
 var $953=($952&255); //@line 4084 "./stb_image.h"
 var $954=$in; //@line 4084 "./stb_image.h"
 var $955=HEAP8[($954)]; //@line 4084 "./stb_image.h"
 var $956=($955&255); //@line 4084 "./stb_image.h"
 var $957=$956>>6; //@line 4084 "./stb_image.h"
 var $958=(Math_imul($953,$957)|0); //@line 4084 "./stb_image.h"
 var $959=(($958)&255); //@line 4084 "./stb_image.h"
 var $960=$cur1; //@line 4084 "./stb_image.h"
 var $961=(($960+1)|0); //@line 4084 "./stb_image.h"
 $cur1=$961; //@line 4084 "./stb_image.h"
 HEAP8[($960)]=$959; //@line 4084 "./stb_image.h"
 var $962=$scale; //@line 4085 "./stb_image.h"
 var $963=($962&255); //@line 4085 "./stb_image.h"
 var $964=$in; //@line 4085 "./stb_image.h"
 var $965=HEAP8[($964)]; //@line 4085 "./stb_image.h"
 var $966=($965&255); //@line 4085 "./stb_image.h"
 var $967=$966>>4; //@line 4085 "./stb_image.h"
 var $968=$967&3; //@line 4085 "./stb_image.h"
 var $969=(Math_imul($963,$968)|0); //@line 4085 "./stb_image.h"
 var $970=(($969)&255); //@line 4085 "./stb_image.h"
 var $971=$cur1; //@line 4085 "./stb_image.h"
 var $972=(($971+1)|0); //@line 4085 "./stb_image.h"
 $cur1=$972; //@line 4085 "./stb_image.h"
 HEAP8[($971)]=$970; //@line 4085 "./stb_image.h"
 var $973=$scale; //@line 4086 "./stb_image.h"
 var $974=($973&255); //@line 4086 "./stb_image.h"
 var $975=$in; //@line 4086 "./stb_image.h"
 var $976=HEAP8[($975)]; //@line 4086 "./stb_image.h"
 var $977=($976&255); //@line 4086 "./stb_image.h"
 var $978=$977>>2; //@line 4086 "./stb_image.h"
 var $979=$978&3; //@line 4086 "./stb_image.h"
 var $980=(Math_imul($974,$979)|0); //@line 4086 "./stb_image.h"
 var $981=(($980)&255); //@line 4086 "./stb_image.h"
 var $982=$cur1; //@line 4086 "./stb_image.h"
 var $983=(($982+1)|0); //@line 4086 "./stb_image.h"
 $cur1=$983; //@line 4086 "./stb_image.h"
 HEAP8[($982)]=$981; //@line 4086 "./stb_image.h"
 var $984=$scale; //@line 4087 "./stb_image.h"
 var $985=($984&255); //@line 4087 "./stb_image.h"
 var $986=$in; //@line 4087 "./stb_image.h"
 var $987=HEAP8[($986)]; //@line 4087 "./stb_image.h"
 var $988=($987&255); //@line 4087 "./stb_image.h"
 var $989=$988&3; //@line 4087 "./stb_image.h"
 var $990=(Math_imul($985,$989)|0); //@line 4087 "./stb_image.h"
 var $991=(($990)&255); //@line 4087 "./stb_image.h"
 var $992=$cur1; //@line 4087 "./stb_image.h"
 var $993=(($992+1)|0); //@line 4087 "./stb_image.h"
 $cur1=$993; //@line 4087 "./stb_image.h"
 HEAP8[($992)]=$991; //@line 4087 "./stb_image.h"
 label=163;break; //@line 4088 "./stb_image.h"
 case 163: 
 var $995=$k; //@line 4083 "./stb_image.h"
 var $996=((($995)-(4))|0); //@line 4083 "./stb_image.h"
 $k=$996; //@line 4083 "./stb_image.h"
 var $997=$in; //@line 4083 "./stb_image.h"
 var $998=(($997+1)|0); //@line 4083 "./stb_image.h"
 $in=$998; //@line 4083 "./stb_image.h"
 label=161;break; //@line 4083 "./stb_image.h"
 case 164: 
 var $1000=$k; //@line 4089 "./stb_image.h"
 var $1001=($1000|0)>0; //@line 4089 "./stb_image.h"
 if($1001){label=165;break;}else{label=166;break;} //@line 4089 "./stb_image.h"
 case 165: 
 var $1003=$scale; //@line 4089 "./stb_image.h"
 var $1004=($1003&255); //@line 4089 "./stb_image.h"
 var $1005=$in; //@line 4089 "./stb_image.h"
 var $1006=HEAP8[($1005)]; //@line 4089 "./stb_image.h"
 var $1007=($1006&255); //@line 4089 "./stb_image.h"
 var $1008=$1007>>6; //@line 4089 "./stb_image.h"
 var $1009=(Math_imul($1004,$1008)|0); //@line 4089 "./stb_image.h"
 var $1010=(($1009)&255); //@line 4089 "./stb_image.h"
 var $1011=$cur1; //@line 4089 "./stb_image.h"
 var $1012=(($1011+1)|0); //@line 4089 "./stb_image.h"
 $cur1=$1012; //@line 4089 "./stb_image.h"
 HEAP8[($1011)]=$1010; //@line 4089 "./stb_image.h"
 label=166;break; //@line 4089 "./stb_image.h"
 case 166: 
 var $1014=$k; //@line 4090 "./stb_image.h"
 var $1015=($1014|0)>1; //@line 4090 "./stb_image.h"
 if($1015){label=167;break;}else{label=168;break;} //@line 4090 "./stb_image.h"
 case 167: 
 var $1017=$scale; //@line 4090 "./stb_image.h"
 var $1018=($1017&255); //@line 4090 "./stb_image.h"
 var $1019=$in; //@line 4090 "./stb_image.h"
 var $1020=HEAP8[($1019)]; //@line 4090 "./stb_image.h"
 var $1021=($1020&255); //@line 4090 "./stb_image.h"
 var $1022=$1021>>4; //@line 4090 "./stb_image.h"
 var $1023=$1022&3; //@line 4090 "./stb_image.h"
 var $1024=(Math_imul($1018,$1023)|0); //@line 4090 "./stb_image.h"
 var $1025=(($1024)&255); //@line 4090 "./stb_image.h"
 var $1026=$cur1; //@line 4090 "./stb_image.h"
 var $1027=(($1026+1)|0); //@line 4090 "./stb_image.h"
 $cur1=$1027; //@line 4090 "./stb_image.h"
 HEAP8[($1026)]=$1025; //@line 4090 "./stb_image.h"
 label=168;break; //@line 4090 "./stb_image.h"
 case 168: 
 var $1029=$k; //@line 4091 "./stb_image.h"
 var $1030=($1029|0)>2; //@line 4091 "./stb_image.h"
 if($1030){label=169;break;}else{label=170;break;} //@line 4091 "./stb_image.h"
 case 169: 
 var $1032=$scale; //@line 4091 "./stb_image.h"
 var $1033=($1032&255); //@line 4091 "./stb_image.h"
 var $1034=$in; //@line 4091 "./stb_image.h"
 var $1035=HEAP8[($1034)]; //@line 4091 "./stb_image.h"
 var $1036=($1035&255); //@line 4091 "./stb_image.h"
 var $1037=$1036>>2; //@line 4091 "./stb_image.h"
 var $1038=$1037&3; //@line 4091 "./stb_image.h"
 var $1039=(Math_imul($1033,$1038)|0); //@line 4091 "./stb_image.h"
 var $1040=(($1039)&255); //@line 4091 "./stb_image.h"
 var $1041=$cur1; //@line 4091 "./stb_image.h"
 var $1042=(($1041+1)|0); //@line 4091 "./stb_image.h"
 $cur1=$1042; //@line 4091 "./stb_image.h"
 HEAP8[($1041)]=$1040; //@line 4091 "./stb_image.h"
 label=170;break; //@line 4091 "./stb_image.h"
 case 170: 
 label=192;break; //@line 4092 "./stb_image.h"
 case 171: 
 var $1045=$8; //@line 4092 "./stb_image.h"
 var $1046=($1045|0)==1; //@line 4092 "./stb_image.h"
 if($1046){label=172;break;}else{label=191;break;} //@line 4092 "./stb_image.h"
 case 172: 
 var $1048=$6; //@line 4093 "./stb_image.h"
 var $1049=$img_n; //@line 4093 "./stb_image.h"
 var $1050=(Math_imul($1048,$1049)|0); //@line 4093 "./stb_image.h"
 $k=$1050; //@line 4093 "./stb_image.h"
 label=173;break; //@line 4093 "./stb_image.h"
 case 173: 
 var $1052=$k; //@line 4093 "./stb_image.h"
 var $1053=($1052|0)>=8; //@line 4093 "./stb_image.h"
 if($1053){label=174;break;}else{label=176;break;} //@line 4093 "./stb_image.h"
 case 174: 
 var $1055=$scale; //@line 4094 "./stb_image.h"
 var $1056=($1055&255); //@line 4094 "./stb_image.h"
 var $1057=$in; //@line 4094 "./stb_image.h"
 var $1058=HEAP8[($1057)]; //@line 4094 "./stb_image.h"
 var $1059=($1058&255); //@line 4094 "./stb_image.h"
 var $1060=$1059>>7; //@line 4094 "./stb_image.h"
 var $1061=(Math_imul($1056,$1060)|0); //@line 4094 "./stb_image.h"
 var $1062=(($1061)&255); //@line 4094 "./stb_image.h"
 var $1063=$cur1; //@line 4094 "./stb_image.h"
 var $1064=(($1063+1)|0); //@line 4094 "./stb_image.h"
 $cur1=$1064; //@line 4094 "./stb_image.h"
 HEAP8[($1063)]=$1062; //@line 4094 "./stb_image.h"
 var $1065=$scale; //@line 4095 "./stb_image.h"
 var $1066=($1065&255); //@line 4095 "./stb_image.h"
 var $1067=$in; //@line 4095 "./stb_image.h"
 var $1068=HEAP8[($1067)]; //@line 4095 "./stb_image.h"
 var $1069=($1068&255); //@line 4095 "./stb_image.h"
 var $1070=$1069>>6; //@line 4095 "./stb_image.h"
 var $1071=$1070&1; //@line 4095 "./stb_image.h"
 var $1072=(Math_imul($1066,$1071)|0); //@line 4095 "./stb_image.h"
 var $1073=(($1072)&255); //@line 4095 "./stb_image.h"
 var $1074=$cur1; //@line 4095 "./stb_image.h"
 var $1075=(($1074+1)|0); //@line 4095 "./stb_image.h"
 $cur1=$1075; //@line 4095 "./stb_image.h"
 HEAP8[($1074)]=$1073; //@line 4095 "./stb_image.h"
 var $1076=$scale; //@line 4096 "./stb_image.h"
 var $1077=($1076&255); //@line 4096 "./stb_image.h"
 var $1078=$in; //@line 4096 "./stb_image.h"
 var $1079=HEAP8[($1078)]; //@line 4096 "./stb_image.h"
 var $1080=($1079&255); //@line 4096 "./stb_image.h"
 var $1081=$1080>>5; //@line 4096 "./stb_image.h"
 var $1082=$1081&1; //@line 4096 "./stb_image.h"
 var $1083=(Math_imul($1077,$1082)|0); //@line 4096 "./stb_image.h"
 var $1084=(($1083)&255); //@line 4096 "./stb_image.h"
 var $1085=$cur1; //@line 4096 "./stb_image.h"
 var $1086=(($1085+1)|0); //@line 4096 "./stb_image.h"
 $cur1=$1086; //@line 4096 "./stb_image.h"
 HEAP8[($1085)]=$1084; //@line 4096 "./stb_image.h"
 var $1087=$scale; //@line 4097 "./stb_image.h"
 var $1088=($1087&255); //@line 4097 "./stb_image.h"
 var $1089=$in; //@line 4097 "./stb_image.h"
 var $1090=HEAP8[($1089)]; //@line 4097 "./stb_image.h"
 var $1091=($1090&255); //@line 4097 "./stb_image.h"
 var $1092=$1091>>4; //@line 4097 "./stb_image.h"
 var $1093=$1092&1; //@line 4097 "./stb_image.h"
 var $1094=(Math_imul($1088,$1093)|0); //@line 4097 "./stb_image.h"
 var $1095=(($1094)&255); //@line 4097 "./stb_image.h"
 var $1096=$cur1; //@line 4097 "./stb_image.h"
 var $1097=(($1096+1)|0); //@line 4097 "./stb_image.h"
 $cur1=$1097; //@line 4097 "./stb_image.h"
 HEAP8[($1096)]=$1095; //@line 4097 "./stb_image.h"
 var $1098=$scale; //@line 4098 "./stb_image.h"
 var $1099=($1098&255); //@line 4098 "./stb_image.h"
 var $1100=$in; //@line 4098 "./stb_image.h"
 var $1101=HEAP8[($1100)]; //@line 4098 "./stb_image.h"
 var $1102=($1101&255); //@line 4098 "./stb_image.h"
 var $1103=$1102>>3; //@line 4098 "./stb_image.h"
 var $1104=$1103&1; //@line 4098 "./stb_image.h"
 var $1105=(Math_imul($1099,$1104)|0); //@line 4098 "./stb_image.h"
 var $1106=(($1105)&255); //@line 4098 "./stb_image.h"
 var $1107=$cur1; //@line 4098 "./stb_image.h"
 var $1108=(($1107+1)|0); //@line 4098 "./stb_image.h"
 $cur1=$1108; //@line 4098 "./stb_image.h"
 HEAP8[($1107)]=$1106; //@line 4098 "./stb_image.h"
 var $1109=$scale; //@line 4099 "./stb_image.h"
 var $1110=($1109&255); //@line 4099 "./stb_image.h"
 var $1111=$in; //@line 4099 "./stb_image.h"
 var $1112=HEAP8[($1111)]; //@line 4099 "./stb_image.h"
 var $1113=($1112&255); //@line 4099 "./stb_image.h"
 var $1114=$1113>>2; //@line 4099 "./stb_image.h"
 var $1115=$1114&1; //@line 4099 "./stb_image.h"
 var $1116=(Math_imul($1110,$1115)|0); //@line 4099 "./stb_image.h"
 var $1117=(($1116)&255); //@line 4099 "./stb_image.h"
 var $1118=$cur1; //@line 4099 "./stb_image.h"
 var $1119=(($1118+1)|0); //@line 4099 "./stb_image.h"
 $cur1=$1119; //@line 4099 "./stb_image.h"
 HEAP8[($1118)]=$1117; //@line 4099 "./stb_image.h"
 var $1120=$scale; //@line 4100 "./stb_image.h"
 var $1121=($1120&255); //@line 4100 "./stb_image.h"
 var $1122=$in; //@line 4100 "./stb_image.h"
 var $1123=HEAP8[($1122)]; //@line 4100 "./stb_image.h"
 var $1124=($1123&255); //@line 4100 "./stb_image.h"
 var $1125=$1124>>1; //@line 4100 "./stb_image.h"
 var $1126=$1125&1; //@line 4100 "./stb_image.h"
 var $1127=(Math_imul($1121,$1126)|0); //@line 4100 "./stb_image.h"
 var $1128=(($1127)&255); //@line 4100 "./stb_image.h"
 var $1129=$cur1; //@line 4100 "./stb_image.h"
 var $1130=(($1129+1)|0); //@line 4100 "./stb_image.h"
 $cur1=$1130; //@line 4100 "./stb_image.h"
 HEAP8[($1129)]=$1128; //@line 4100 "./stb_image.h"
 var $1131=$scale; //@line 4101 "./stb_image.h"
 var $1132=($1131&255); //@line 4101 "./stb_image.h"
 var $1133=$in; //@line 4101 "./stb_image.h"
 var $1134=HEAP8[($1133)]; //@line 4101 "./stb_image.h"
 var $1135=($1134&255); //@line 4101 "./stb_image.h"
 var $1136=$1135&1; //@line 4101 "./stb_image.h"
 var $1137=(Math_imul($1132,$1136)|0); //@line 4101 "./stb_image.h"
 var $1138=(($1137)&255); //@line 4101 "./stb_image.h"
 var $1139=$cur1; //@line 4101 "./stb_image.h"
 var $1140=(($1139+1)|0); //@line 4101 "./stb_image.h"
 $cur1=$1140; //@line 4101 "./stb_image.h"
 HEAP8[($1139)]=$1138; //@line 4101 "./stb_image.h"
 label=175;break; //@line 4102 "./stb_image.h"
 case 175: 
 var $1142=$k; //@line 4093 "./stb_image.h"
 var $1143=((($1142)-(8))|0); //@line 4093 "./stb_image.h"
 $k=$1143; //@line 4093 "./stb_image.h"
 var $1144=$in; //@line 4093 "./stb_image.h"
 var $1145=(($1144+1)|0); //@line 4093 "./stb_image.h"
 $in=$1145; //@line 4093 "./stb_image.h"
 label=173;break; //@line 4093 "./stb_image.h"
 case 176: 
 var $1147=$k; //@line 4103 "./stb_image.h"
 var $1148=($1147|0)>0; //@line 4103 "./stb_image.h"
 if($1148){label=177;break;}else{label=178;break;} //@line 4103 "./stb_image.h"
 case 177: 
 var $1150=$scale; //@line 4103 "./stb_image.h"
 var $1151=($1150&255); //@line 4103 "./stb_image.h"
 var $1152=$in; //@line 4103 "./stb_image.h"
 var $1153=HEAP8[($1152)]; //@line 4103 "./stb_image.h"
 var $1154=($1153&255); //@line 4103 "./stb_image.h"
 var $1155=$1154>>7; //@line 4103 "./stb_image.h"
 var $1156=(Math_imul($1151,$1155)|0); //@line 4103 "./stb_image.h"
 var $1157=(($1156)&255); //@line 4103 "./stb_image.h"
 var $1158=$cur1; //@line 4103 "./stb_image.h"
 var $1159=(($1158+1)|0); //@line 4103 "./stb_image.h"
 $cur1=$1159; //@line 4103 "./stb_image.h"
 HEAP8[($1158)]=$1157; //@line 4103 "./stb_image.h"
 label=178;break; //@line 4103 "./stb_image.h"
 case 178: 
 var $1161=$k; //@line 4104 "./stb_image.h"
 var $1162=($1161|0)>1; //@line 4104 "./stb_image.h"
 if($1162){label=179;break;}else{label=180;break;} //@line 4104 "./stb_image.h"
 case 179: 
 var $1164=$scale; //@line 4104 "./stb_image.h"
 var $1165=($1164&255); //@line 4104 "./stb_image.h"
 var $1166=$in; //@line 4104 "./stb_image.h"
 var $1167=HEAP8[($1166)]; //@line 4104 "./stb_image.h"
 var $1168=($1167&255); //@line 4104 "./stb_image.h"
 var $1169=$1168>>6; //@line 4104 "./stb_image.h"
 var $1170=$1169&1; //@line 4104 "./stb_image.h"
 var $1171=(Math_imul($1165,$1170)|0); //@line 4104 "./stb_image.h"
 var $1172=(($1171)&255); //@line 4104 "./stb_image.h"
 var $1173=$cur1; //@line 4104 "./stb_image.h"
 var $1174=(($1173+1)|0); //@line 4104 "./stb_image.h"
 $cur1=$1174; //@line 4104 "./stb_image.h"
 HEAP8[($1173)]=$1172; //@line 4104 "./stb_image.h"
 label=180;break; //@line 4104 "./stb_image.h"
 case 180: 
 var $1176=$k; //@line 4105 "./stb_image.h"
 var $1177=($1176|0)>2; //@line 4105 "./stb_image.h"
 if($1177){label=181;break;}else{label=182;break;} //@line 4105 "./stb_image.h"
 case 181: 
 var $1179=$scale; //@line 4105 "./stb_image.h"
 var $1180=($1179&255); //@line 4105 "./stb_image.h"
 var $1181=$in; //@line 4105 "./stb_image.h"
 var $1182=HEAP8[($1181)]; //@line 4105 "./stb_image.h"
 var $1183=($1182&255); //@line 4105 "./stb_image.h"
 var $1184=$1183>>5; //@line 4105 "./stb_image.h"
 var $1185=$1184&1; //@line 4105 "./stb_image.h"
 var $1186=(Math_imul($1180,$1185)|0); //@line 4105 "./stb_image.h"
 var $1187=(($1186)&255); //@line 4105 "./stb_image.h"
 var $1188=$cur1; //@line 4105 "./stb_image.h"
 var $1189=(($1188+1)|0); //@line 4105 "./stb_image.h"
 $cur1=$1189; //@line 4105 "./stb_image.h"
 HEAP8[($1188)]=$1187; //@line 4105 "./stb_image.h"
 label=182;break; //@line 4105 "./stb_image.h"
 case 182: 
 var $1191=$k; //@line 4106 "./stb_image.h"
 var $1192=($1191|0)>3; //@line 4106 "./stb_image.h"
 if($1192){label=183;break;}else{label=184;break;} //@line 4106 "./stb_image.h"
 case 183: 
 var $1194=$scale; //@line 4106 "./stb_image.h"
 var $1195=($1194&255); //@line 4106 "./stb_image.h"
 var $1196=$in; //@line 4106 "./stb_image.h"
 var $1197=HEAP8[($1196)]; //@line 4106 "./stb_image.h"
 var $1198=($1197&255); //@line 4106 "./stb_image.h"
 var $1199=$1198>>4; //@line 4106 "./stb_image.h"
 var $1200=$1199&1; //@line 4106 "./stb_image.h"
 var $1201=(Math_imul($1195,$1200)|0); //@line 4106 "./stb_image.h"
 var $1202=(($1201)&255); //@line 4106 "./stb_image.h"
 var $1203=$cur1; //@line 4106 "./stb_image.h"
 var $1204=(($1203+1)|0); //@line 4106 "./stb_image.h"
 $cur1=$1204; //@line 4106 "./stb_image.h"
 HEAP8[($1203)]=$1202; //@line 4106 "./stb_image.h"
 label=184;break; //@line 4106 "./stb_image.h"
 case 184: 
 var $1206=$k; //@line 4107 "./stb_image.h"
 var $1207=($1206|0)>4; //@line 4107 "./stb_image.h"
 if($1207){label=185;break;}else{label=186;break;} //@line 4107 "./stb_image.h"
 case 185: 
 var $1209=$scale; //@line 4107 "./stb_image.h"
 var $1210=($1209&255); //@line 4107 "./stb_image.h"
 var $1211=$in; //@line 4107 "./stb_image.h"
 var $1212=HEAP8[($1211)]; //@line 4107 "./stb_image.h"
 var $1213=($1212&255); //@line 4107 "./stb_image.h"
 var $1214=$1213>>3; //@line 4107 "./stb_image.h"
 var $1215=$1214&1; //@line 4107 "./stb_image.h"
 var $1216=(Math_imul($1210,$1215)|0); //@line 4107 "./stb_image.h"
 var $1217=(($1216)&255); //@line 4107 "./stb_image.h"
 var $1218=$cur1; //@line 4107 "./stb_image.h"
 var $1219=(($1218+1)|0); //@line 4107 "./stb_image.h"
 $cur1=$1219; //@line 4107 "./stb_image.h"
 HEAP8[($1218)]=$1217; //@line 4107 "./stb_image.h"
 label=186;break; //@line 4107 "./stb_image.h"
 case 186: 
 var $1221=$k; //@line 4108 "./stb_image.h"
 var $1222=($1221|0)>5; //@line 4108 "./stb_image.h"
 if($1222){label=187;break;}else{label=188;break;} //@line 4108 "./stb_image.h"
 case 187: 
 var $1224=$scale; //@line 4108 "./stb_image.h"
 var $1225=($1224&255); //@line 4108 "./stb_image.h"
 var $1226=$in; //@line 4108 "./stb_image.h"
 var $1227=HEAP8[($1226)]; //@line 4108 "./stb_image.h"
 var $1228=($1227&255); //@line 4108 "./stb_image.h"
 var $1229=$1228>>2; //@line 4108 "./stb_image.h"
 var $1230=$1229&1; //@line 4108 "./stb_image.h"
 var $1231=(Math_imul($1225,$1230)|0); //@line 4108 "./stb_image.h"
 var $1232=(($1231)&255); //@line 4108 "./stb_image.h"
 var $1233=$cur1; //@line 4108 "./stb_image.h"
 var $1234=(($1233+1)|0); //@line 4108 "./stb_image.h"
 $cur1=$1234; //@line 4108 "./stb_image.h"
 HEAP8[($1233)]=$1232; //@line 4108 "./stb_image.h"
 label=188;break; //@line 4108 "./stb_image.h"
 case 188: 
 var $1236=$k; //@line 4109 "./stb_image.h"
 var $1237=($1236|0)>6; //@line 4109 "./stb_image.h"
 if($1237){label=189;break;}else{label=190;break;} //@line 4109 "./stb_image.h"
 case 189: 
 var $1239=$scale; //@line 4109 "./stb_image.h"
 var $1240=($1239&255); //@line 4109 "./stb_image.h"
 var $1241=$in; //@line 4109 "./stb_image.h"
 var $1242=HEAP8[($1241)]; //@line 4109 "./stb_image.h"
 var $1243=($1242&255); //@line 4109 "./stb_image.h"
 var $1244=$1243>>1; //@line 4109 "./stb_image.h"
 var $1245=$1244&1; //@line 4109 "./stb_image.h"
 var $1246=(Math_imul($1240,$1245)|0); //@line 4109 "./stb_image.h"
 var $1247=(($1246)&255); //@line 4109 "./stb_image.h"
 var $1248=$cur1; //@line 4109 "./stb_image.h"
 var $1249=(($1248+1)|0); //@line 4109 "./stb_image.h"
 $cur1=$1249; //@line 4109 "./stb_image.h"
 HEAP8[($1248)]=$1247; //@line 4109 "./stb_image.h"
 label=190;break; //@line 4109 "./stb_image.h"
 case 190: 
 label=191;break; //@line 4110 "./stb_image.h"
 case 191: 
 label=192;break;
 case 192: 
 label=193;break;
 case 193: 
 var $1254=$img_n; //@line 4111 "./stb_image.h"
 var $1255=$5; //@line 4111 "./stb_image.h"
 var $1256=($1254|0)!=($1255|0); //@line 4111 "./stb_image.h"
 if($1256){label=194;break;}else{label=208;break;} //@line 4111 "./stb_image.h"
 case 194: 
 var $1258=$2; //@line 4113 "./stb_image.h"
 var $1259=(($1258+12)|0); //@line 4113 "./stb_image.h"
 var $1260=HEAP32[(($1259)>>2)]; //@line 4113 "./stb_image.h"
 var $1261=$stride; //@line 4113 "./stb_image.h"
 var $1262=$j; //@line 4113 "./stb_image.h"
 var $1263=(Math_imul($1261,$1262)|0); //@line 4113 "./stb_image.h"
 var $1264=(($1260+$1263)|0); //@line 4113 "./stb_image.h"
 $cur2=$1264; //@line 4113 "./stb_image.h"
 var $1265=$img_n; //@line 4115 "./stb_image.h"
 var $1266=($1265|0)==1; //@line 4115 "./stb_image.h"
 if($1266){label=195;break;}else{label=200;break;} //@line 4115 "./stb_image.h"
 case 195: 
 var $1268=$6; //@line 4116 "./stb_image.h"
 var $1269=((($1268)-(1))|0); //@line 4116 "./stb_image.h"
 $i3=$1269; //@line 4116 "./stb_image.h"
 label=196;break; //@line 4116 "./stb_image.h"
 case 196: 
 var $1271=$i3; //@line 4116 "./stb_image.h"
 var $1272=($1271|0)>=0; //@line 4116 "./stb_image.h"
 if($1272){label=197;break;}else{label=199;break;} //@line 4116 "./stb_image.h"
 case 197: 
 var $1274=$i3; //@line 4117 "./stb_image.h"
 var $1275=($1274<<1); //@line 4117 "./stb_image.h"
 var $1276=((($1275)+(1))|0); //@line 4117 "./stb_image.h"
 var $1277=$cur2; //@line 4117 "./stb_image.h"
 var $1278=(($1277+$1276)|0); //@line 4117 "./stb_image.h"
 HEAP8[($1278)]=-1; //@line 4117 "./stb_image.h"
 var $1279=$i3; //@line 4118 "./stb_image.h"
 var $1280=$cur2; //@line 4118 "./stb_image.h"
 var $1281=(($1280+$1279)|0); //@line 4118 "./stb_image.h"
 var $1282=HEAP8[($1281)]; //@line 4118 "./stb_image.h"
 var $1283=$i3; //@line 4118 "./stb_image.h"
 var $1284=($1283<<1); //@line 4118 "./stb_image.h"
 var $1285=(($1284)|0); //@line 4118 "./stb_image.h"
 var $1286=$cur2; //@line 4118 "./stb_image.h"
 var $1287=(($1286+$1285)|0); //@line 4118 "./stb_image.h"
 HEAP8[($1287)]=$1282; //@line 4118 "./stb_image.h"
 label=198;break; //@line 4119 "./stb_image.h"
 case 198: 
 var $1289=$i3; //@line 4116 "./stb_image.h"
 var $1290=((($1289)-(1))|0); //@line 4116 "./stb_image.h"
 $i3=$1290; //@line 4116 "./stb_image.h"
 label=196;break; //@line 4116 "./stb_image.h"
 case 199: 
 label=207;break; //@line 4120 "./stb_image.h"
 case 200: 
 var $1293=$img_n; //@line 4121 "./stb_image.h"
 var $1294=($1293|0)==3; //@line 4121 "./stb_image.h"
 if($1294){var $1298=1;label=202;break;}else{label=201;break;} //@line 4121 "./stb_image.h"
 case 201: 
 ___assert_fail(138592,138824,4121,140072); //@line 4121 "./stb_image.h"
 throw "Reached an unreachable!"; //@line 4121 "./stb_image.h"
 label=202;break; //@line 4121 "./stb_image.h"
 case 202: 
 var $1298;
 var $1299=($1298&1); //@line 4121 "./stb_image.h"
 var $1300=$6; //@line 4122 "./stb_image.h"
 var $1301=((($1300)-(1))|0); //@line 4122 "./stb_image.h"
 $i3=$1301; //@line 4122 "./stb_image.h"
 label=203;break; //@line 4122 "./stb_image.h"
 case 203: 
 var $1303=$i3; //@line 4122 "./stb_image.h"
 var $1304=($1303|0)>=0; //@line 4122 "./stb_image.h"
 if($1304){label=204;break;}else{label=206;break;} //@line 4122 "./stb_image.h"
 case 204: 
 var $1306=$i3; //@line 4123 "./stb_image.h"
 var $1307=($1306<<2); //@line 4123 "./stb_image.h"
 var $1308=((($1307)+(3))|0); //@line 4123 "./stb_image.h"
 var $1309=$cur2; //@line 4123 "./stb_image.h"
 var $1310=(($1309+$1308)|0); //@line 4123 "./stb_image.h"
 HEAP8[($1310)]=-1; //@line 4123 "./stb_image.h"
 var $1311=$i3; //@line 4124 "./stb_image.h"
 var $1312=((($1311)*(3))&-1); //@line 4124 "./stb_image.h"
 var $1313=((($1312)+(2))|0); //@line 4124 "./stb_image.h"
 var $1314=$cur2; //@line 4124 "./stb_image.h"
 var $1315=(($1314+$1313)|0); //@line 4124 "./stb_image.h"
 var $1316=HEAP8[($1315)]; //@line 4124 "./stb_image.h"
 var $1317=$i3; //@line 4124 "./stb_image.h"
 var $1318=($1317<<2); //@line 4124 "./stb_image.h"
 var $1319=((($1318)+(2))|0); //@line 4124 "./stb_image.h"
 var $1320=$cur2; //@line 4124 "./stb_image.h"
 var $1321=(($1320+$1319)|0); //@line 4124 "./stb_image.h"
 HEAP8[($1321)]=$1316; //@line 4124 "./stb_image.h"
 var $1322=$i3; //@line 4125 "./stb_image.h"
 var $1323=((($1322)*(3))&-1); //@line 4125 "./stb_image.h"
 var $1324=((($1323)+(1))|0); //@line 4125 "./stb_image.h"
 var $1325=$cur2; //@line 4125 "./stb_image.h"
 var $1326=(($1325+$1324)|0); //@line 4125 "./stb_image.h"
 var $1327=HEAP8[($1326)]; //@line 4125 "./stb_image.h"
 var $1328=$i3; //@line 4125 "./stb_image.h"
 var $1329=($1328<<2); //@line 4125 "./stb_image.h"
 var $1330=((($1329)+(1))|0); //@line 4125 "./stb_image.h"
 var $1331=$cur2; //@line 4125 "./stb_image.h"
 var $1332=(($1331+$1330)|0); //@line 4125 "./stb_image.h"
 HEAP8[($1332)]=$1327; //@line 4125 "./stb_image.h"
 var $1333=$i3; //@line 4126 "./stb_image.h"
 var $1334=((($1333)*(3))&-1); //@line 4126 "./stb_image.h"
 var $1335=(($1334)|0); //@line 4126 "./stb_image.h"
 var $1336=$cur2; //@line 4126 "./stb_image.h"
 var $1337=(($1336+$1335)|0); //@line 4126 "./stb_image.h"
 var $1338=HEAP8[($1337)]; //@line 4126 "./stb_image.h"
 var $1339=$i3; //@line 4126 "./stb_image.h"
 var $1340=($1339<<2); //@line 4126 "./stb_image.h"
 var $1341=(($1340)|0); //@line 4126 "./stb_image.h"
 var $1342=$cur2; //@line 4126 "./stb_image.h"
 var $1343=(($1342+$1341)|0); //@line 4126 "./stb_image.h"
 HEAP8[($1343)]=$1338; //@line 4126 "./stb_image.h"
 label=205;break; //@line 4127 "./stb_image.h"
 case 205: 
 var $1345=$i3; //@line 4122 "./stb_image.h"
 var $1346=((($1345)-(1))|0); //@line 4122 "./stb_image.h"
 $i3=$1346; //@line 4122 "./stb_image.h"
 label=203;break; //@line 4122 "./stb_image.h"
 case 206: 
 label=207;break;
 case 207: 
 label=208;break; //@line 4129 "./stb_image.h"
 case 208: 
 label=209;break; //@line 4130 "./stb_image.h"
 case 209: 
 var $1351=$j; //@line 4063 "./stb_image.h"
 var $1352=((($1351)+(1))|0); //@line 4063 "./stb_image.h"
 $j=$1352; //@line 4063 "./stb_image.h"
 label=147;break; //@line 4063 "./stb_image.h"
 case 210: 
 label=211;break; //@line 4131 "./stb_image.h"
 case 211: 
 $1=1; //@line 4133 "./stb_image.h"
 label=212;break; //@line 4133 "./stb_image.h"
 case 212: 
 var $1356=$1; //@line 4134 "./stb_image.h"
 STACKTOP=sp;return $1356; //@line 4134 "./stb_image.h"
  default: assert(0, "bad label: " + label);
 }

}


function _stbi__paeth($a,$b,$c){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $p;
 var $pa;
 var $pb;
 var $pc;
 $2=$a;
 $3=$b;
 $4=$c;
 var $5=$2; //@line 3946 "./stb_image.h"
 var $6=$3; //@line 3946 "./stb_image.h"
 var $7=((($5)+($6))|0); //@line 3946 "./stb_image.h"
 var $8=$4; //@line 3946 "./stb_image.h"
 var $9=((($7)-($8))|0); //@line 3946 "./stb_image.h"
 $p=$9; //@line 3946 "./stb_image.h"
 var $10=$p; //@line 3947 "./stb_image.h"
 var $11=$2; //@line 3947 "./stb_image.h"
 var $12=((($10)-($11))|0); //@line 3947 "./stb_image.h"
 var $13=Math_abs($12); //@line 3947 "./stb_image.h"
 $pa=$13; //@line 3947 "./stb_image.h"
 var $14=$p; //@line 3948 "./stb_image.h"
 var $15=$3; //@line 3948 "./stb_image.h"
 var $16=((($14)-($15))|0); //@line 3948 "./stb_image.h"
 var $17=Math_abs($16); //@line 3948 "./stb_image.h"
 $pb=$17; //@line 3948 "./stb_image.h"
 var $18=$p; //@line 3949 "./stb_image.h"
 var $19=$4; //@line 3949 "./stb_image.h"
 var $20=((($18)-($19))|0); //@line 3949 "./stb_image.h"
 var $21=Math_abs($20); //@line 3949 "./stb_image.h"
 $pc=$21; //@line 3949 "./stb_image.h"
 var $22=$pa; //@line 3950 "./stb_image.h"
 var $23=$pb; //@line 3950 "./stb_image.h"
 var $24=($22|0)<=($23|0); //@line 3950 "./stb_image.h"
 if($24){label=2;break;}else{label=4;break;} //@line 3950 "./stb_image.h"
 case 2: 
 var $26=$pa; //@line 3950 "./stb_image.h"
 var $27=$pc; //@line 3950 "./stb_image.h"
 var $28=($26|0)<=($27|0); //@line 3950 "./stb_image.h"
 if($28){label=3;break;}else{label=4;break;} //@line 3950 "./stb_image.h"
 case 3: 
 var $30=$2; //@line 3950 "./stb_image.h"
 $1=$30; //@line 3950 "./stb_image.h"
 label=7;break; //@line 3950 "./stb_image.h"
 case 4: 
 var $32=$pb; //@line 3951 "./stb_image.h"
 var $33=$pc; //@line 3951 "./stb_image.h"
 var $34=($32|0)<=($33|0); //@line 3951 "./stb_image.h"
 if($34){label=5;break;}else{label=6;break;} //@line 3951 "./stb_image.h"
 case 5: 
 var $36=$3; //@line 3951 "./stb_image.h"
 $1=$36; //@line 3951 "./stb_image.h"
 label=7;break; //@line 3951 "./stb_image.h"
 case 6: 
 var $38=$4; //@line 3952 "./stb_image.h"
 $1=$38; //@line 3952 "./stb_image.h"
 label=7;break; //@line 3952 "./stb_image.h"
 case 7: 
 var $40=$1; //@line 3953 "./stb_image.h"
 STACKTOP=sp;return $40; //@line 3953 "./stb_image.h"
  default: assert(0, "bad label: " + label);
 }

}


function _stbi__jpeg_info_raw($j,$x,$y,$comp){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 $2=$j;
 $3=$x;
 $4=$y;
 $5=$comp;
 var $6=$2; //@line 3409 "./stb_image.h"
 var $7=_stbi__decode_jpeg_header($6,2); //@line 3409 "./stb_image.h"
 var $8=($7|0)!=0; //@line 3409 "./stb_image.h"
 if($8){label=3;break;}else{label=2;break;} //@line 3409 "./stb_image.h"
 case 2: 
 var $10=$2; //@line 3410 "./stb_image.h"
 var $11=(($10)|0); //@line 3410 "./stb_image.h"
 var $12=HEAP32[(($11)>>2)]; //@line 3410 "./stb_image.h"
 _stbi__rewind($12); //@line 3410 "./stb_image.h"
 $1=0; //@line 3411 "./stb_image.h"
 label=10;break; //@line 3411 "./stb_image.h"
 case 3: 
 var $14=$3; //@line 3413 "./stb_image.h"
 var $15=($14|0)!=0; //@line 3413 "./stb_image.h"
 if($15){label=4;break;}else{label=5;break;} //@line 3413 "./stb_image.h"
 case 4: 
 var $17=$2; //@line 3413 "./stb_image.h"
 var $18=(($17)|0); //@line 3413 "./stb_image.h"
 var $19=HEAP32[(($18)>>2)]; //@line 3413 "./stb_image.h"
 var $20=(($19)|0); //@line 3413 "./stb_image.h"
 var $21=HEAP32[(($20)>>2)]; //@line 3413 "./stb_image.h"
 var $22=$3; //@line 3413 "./stb_image.h"
 HEAP32[(($22)>>2)]=$21; //@line 3413 "./stb_image.h"
 label=5;break; //@line 3413 "./stb_image.h"
 case 5: 
 var $24=$4; //@line 3414 "./stb_image.h"
 var $25=($24|0)!=0; //@line 3414 "./stb_image.h"
 if($25){label=6;break;}else{label=7;break;} //@line 3414 "./stb_image.h"
 case 6: 
 var $27=$2; //@line 3414 "./stb_image.h"
 var $28=(($27)|0); //@line 3414 "./stb_image.h"
 var $29=HEAP32[(($28)>>2)]; //@line 3414 "./stb_image.h"
 var $30=(($29+4)|0); //@line 3414 "./stb_image.h"
 var $31=HEAP32[(($30)>>2)]; //@line 3414 "./stb_image.h"
 var $32=$4; //@line 3414 "./stb_image.h"
 HEAP32[(($32)>>2)]=$31; //@line 3414 "./stb_image.h"
 label=7;break; //@line 3414 "./stb_image.h"
 case 7: 
 var $34=$5; //@line 3415 "./stb_image.h"
 var $35=($34|0)!=0; //@line 3415 "./stb_image.h"
 if($35){label=8;break;}else{label=9;break;} //@line 3415 "./stb_image.h"
 case 8: 
 var $37=$2; //@line 3415 "./stb_image.h"
 var $38=(($37)|0); //@line 3415 "./stb_image.h"
 var $39=HEAP32[(($38)>>2)]; //@line 3415 "./stb_image.h"
 var $40=(($39+8)|0); //@line 3415 "./stb_image.h"
 var $41=HEAP32[(($40)>>2)]; //@line 3415 "./stb_image.h"
 var $42=$5; //@line 3415 "./stb_image.h"
 HEAP32[(($42)>>2)]=$41; //@line 3415 "./stb_image.h"
 label=9;break; //@line 3415 "./stb_image.h"
 case 9: 
 $1=1; //@line 3416 "./stb_image.h"
 label=10;break; //@line 3416 "./stb_image.h"
 case 10: 
 var $45=$1; //@line 3416 "./stb_image.h"
 STACKTOP=sp;return $45; //@line 3416 "./stb_image.h"
  default: assert(0, "bad label: " + label);
 }

}


function _stbi__decode_jpeg_header($z,$scan){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $m;
 $2=$z;
 $3=$scan;
 var $4=$2; //@line 2775 "./stb_image.h"
 var $5=(($4+18116)|0); //@line 2775 "./stb_image.h"
 HEAP8[($5)]=-1; //@line 2775 "./stb_image.h"
 var $6=$2; //@line 2776 "./stb_image.h"
 var $7=_stbi__get_marker($6); //@line 2776 "./stb_image.h"
 var $8=($7&255); //@line 2776 "./stb_image.h"
 $m=$8; //@line 2776 "./stb_image.h"
 var $9=$m; //@line 2777 "./stb_image.h"
 var $10=($9|0)==216; //@line 2777 "./stb_image.h"
 if($10){label=3;break;}else{label=2;break;} //@line 2777 "./stb_image.h"
 case 2: 
 var $12=_stbi__err(138544); //@line 2777 "./stb_image.h"
 $1=$12; //@line 2777 "./stb_image.h"
 label=21;break; //@line 2777 "./stb_image.h"
 case 3: 
 var $14=$3; //@line 2778 "./stb_image.h"
 var $15=($14|0)==1; //@line 2778 "./stb_image.h"
 if($15){label=4;break;}else{label=5;break;} //@line 2778 "./stb_image.h"
 case 4: 
 $1=1; //@line 2778 "./stb_image.h"
 label=21;break; //@line 2778 "./stb_image.h"
 case 5: 
 var $18=$2; //@line 2779 "./stb_image.h"
 var $19=_stbi__get_marker($18); //@line 2779 "./stb_image.h"
 var $20=($19&255); //@line 2779 "./stb_image.h"
 $m=$20; //@line 2779 "./stb_image.h"
 label=6;break; //@line 2780 "./stb_image.h"
 case 6: 
 var $22=$m; //@line 2780 "./stb_image.h"
 var $23=($22|0)==192; //@line 2780 "./stb_image.h"
 if($23){var $31=1;label=9;break;}else{label=7;break;} //@line 2780 "./stb_image.h"
 case 7: 
 var $25=$m; //@line 2780 "./stb_image.h"
 var $26=($25|0)==193; //@line 2780 "./stb_image.h"
 if($26){var $31=1;label=9;break;}else{label=8;break;} //@line 2780 "./stb_image.h"
 case 8: 
 var $28=$m; //@line 2780 "./stb_image.h"
 var $29=($28|0)==194; //@line 2780 "./stb_image.h"
 var $31=$29;label=9;break; //@line 2780 "./stb_image.h"
 case 9: 
 var $31;
 var $32=$31^1; //@line 2780 "./stb_image.h"
 if($32){label=10;break;}else{label=18;break;} //@line 2780 "./stb_image.h"
 case 10: 
 var $34=$2; //@line 2781 "./stb_image.h"
 var $35=$m; //@line 2781 "./stb_image.h"
 var $36=_stbi__process_marker($34,$35); //@line 2781 "./stb_image.h"
 var $37=($36|0)!=0; //@line 2781 "./stb_image.h"
 if($37){label=12;break;}else{label=11;break;} //@line 2781 "./stb_image.h"
 case 11: 
 $1=0; //@line 2781 "./stb_image.h"
 label=21;break; //@line 2781 "./stb_image.h"
 case 12: 
 var $40=$2; //@line 2782 "./stb_image.h"
 var $41=_stbi__get_marker($40); //@line 2782 "./stb_image.h"
 var $42=($41&255); //@line 2782 "./stb_image.h"
 $m=$42; //@line 2782 "./stb_image.h"
 label=13;break; //@line 2783 "./stb_image.h"
 case 13: 
 var $44=$m; //@line 2783 "./stb_image.h"
 var $45=($44|0)==255; //@line 2783 "./stb_image.h"
 if($45){label=14;break;}else{label=17;break;} //@line 2783 "./stb_image.h"
 case 14: 
 var $47=$2; //@line 2785 "./stb_image.h"
 var $48=(($47)|0); //@line 2785 "./stb_image.h"
 var $49=HEAP32[(($48)>>2)]; //@line 2785 "./stb_image.h"
 var $50=_stbi__at_eof($49); //@line 2785 "./stb_image.h"
 var $51=($50|0)!=0; //@line 2785 "./stb_image.h"
 if($51){label=15;break;}else{label=16;break;} //@line 2785 "./stb_image.h"
 case 15: 
 var $53=_stbi__err(138496); //@line 2785 "./stb_image.h"
 $1=$53; //@line 2785 "./stb_image.h"
 label=21;break; //@line 2785 "./stb_image.h"
 case 16: 
 var $55=$2; //@line 2786 "./stb_image.h"
 var $56=_stbi__get_marker($55); //@line 2786 "./stb_image.h"
 var $57=($56&255); //@line 2786 "./stb_image.h"
 $m=$57; //@line 2786 "./stb_image.h"
 label=13;break; //@line 2787 "./stb_image.h"
 case 17: 
 label=6;break; //@line 2788 "./stb_image.h"
 case 18: 
 var $60=$m; //@line 2789 "./stb_image.h"
 var $61=($60|0)==194; //@line 2789 "./stb_image.h"
 var $62=($61&1); //@line 2789 "./stb_image.h"
 var $63=$2; //@line 2789 "./stb_image.h"
 var $64=(($63+18124)|0); //@line 2789 "./stb_image.h"
 HEAP32[(($64)>>2)]=$62; //@line 2789 "./stb_image.h"
 var $65=$2; //@line 2790 "./stb_image.h"
 var $66=$3; //@line 2790 "./stb_image.h"
 var $67=_stbi__process_frame_header($65,$66); //@line 2790 "./stb_image.h"
 var $68=($67|0)!=0; //@line 2790 "./stb_image.h"
 if($68){label=20;break;}else{label=19;break;} //@line 2790 "./stb_image.h"
 case 19: 
 $1=0; //@line 2790 "./stb_image.h"
 label=21;break; //@line 2790 "./stb_image.h"
 case 20: 
 $1=1; //@line 2791 "./stb_image.h"
 label=21;break; //@line 2791 "./stb_image.h"
 case 21: 
 var $72=$1; //@line 2792 "./stb_image.h"
 STACKTOP=sp;return $72; //@line 2792 "./stb_image.h"
  default: assert(0, "bad label: " + label);
 }

}


function _stbi__get_marker($j){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $x;
 $2=$j;
 var $3=$2; //@line 2401 "./stb_image.h"
 var $4=(($3+18116)|0); //@line 2401 "./stb_image.h"
 var $5=HEAP8[($4)]; //@line 2401 "./stb_image.h"
 var $6=($5&255); //@line 2401 "./stb_image.h"
 var $7=($6|0)!=255; //@line 2401 "./stb_image.h"
 if($7){label=2;break;}else{label=3;break;} //@line 2401 "./stb_image.h"
 case 2: 
 var $9=$2; //@line 2401 "./stb_image.h"
 var $10=(($9+18116)|0); //@line 2401 "./stb_image.h"
 var $11=HEAP8[($10)]; //@line 2401 "./stb_image.h"
 $x=$11; //@line 2401 "./stb_image.h"
 var $12=$2; //@line 2401 "./stb_image.h"
 var $13=(($12+18116)|0); //@line 2401 "./stb_image.h"
 HEAP8[($13)]=-1; //@line 2401 "./stb_image.h"
 var $14=$x; //@line 2401 "./stb_image.h"
 $1=$14; //@line 2401 "./stb_image.h"
 label=9;break; //@line 2401 "./stb_image.h"
 case 3: 
 var $16=$2; //@line 2402 "./stb_image.h"
 var $17=(($16)|0); //@line 2402 "./stb_image.h"
 var $18=HEAP32[(($17)>>2)]; //@line 2402 "./stb_image.h"
 var $19=_stbi__get8($18); //@line 2402 "./stb_image.h"
 $x=$19; //@line 2402 "./stb_image.h"
 var $20=$x; //@line 2403 "./stb_image.h"
 var $21=($20&255); //@line 2403 "./stb_image.h"
 var $22=($21|0)!=255; //@line 2403 "./stb_image.h"
 if($22){label=4;break;}else{label=5;break;} //@line 2403 "./stb_image.h"
 case 4: 
 $1=-1; //@line 2403 "./stb_image.h"
 label=9;break; //@line 2403 "./stb_image.h"
 case 5: 
 label=6;break; //@line 2404 "./stb_image.h"
 case 6: 
 var $26=$x; //@line 2404 "./stb_image.h"
 var $27=($26&255); //@line 2404 "./stb_image.h"
 var $28=($27|0)==255; //@line 2404 "./stb_image.h"
 if($28){label=7;break;}else{label=8;break;} //@line 2404 "./stb_image.h"
 case 7: 
 var $30=$2; //@line 2405 "./stb_image.h"
 var $31=(($30)|0); //@line 2405 "./stb_image.h"
 var $32=HEAP32[(($31)>>2)]; //@line 2405 "./stb_image.h"
 var $33=_stbi__get8($32); //@line 2405 "./stb_image.h"
 $x=$33; //@line 2405 "./stb_image.h"
 label=6;break; //@line 2405 "./stb_image.h"
 case 8: 
 var $35=$x; //@line 2406 "./stb_image.h"
 $1=$35; //@line 2406 "./stb_image.h"
 label=9;break; //@line 2406 "./stb_image.h"
 case 9: 
 var $37=$1; //@line 2407 "./stb_image.h"
 STACKTOP=sp;return $37; //@line 2407 "./stb_image.h"
  default: assert(0, "bad label: " + label);
 }

}


function _stbi__process_marker($z,$m){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+64)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $L;
 var $q;
 var $p;
 var $t;
 var $i;
 var $v;
 var $sizes=sp;
 var $i1;
 var $n;
 var $q2;
 var $tc;
 var $th;
 $2=$z;
 $3=$m;
 var $4=$3; //@line 2581 "./stb_image.h"
 if(($4|0)==196){ label=18;break;}else if(($4|0)==255){ label=2;break;}else if(($4|0)==221){ label=3;break;}else if(($4|0)==219){ label=6;break;}else{label=42;break;}
 case 2: 
 var $6=_stbi__err(138296); //@line 2583 "./stb_image.h"
 $1=$6; //@line 2583 "./stb_image.h"
 label=47;break; //@line 2583 "./stb_image.h"
 case 3: 
 var $8=$2; //@line 2586 "./stb_image.h"
 var $9=(($8)|0); //@line 2586 "./stb_image.h"
 var $10=HEAP32[(($9)>>2)]; //@line 2586 "./stb_image.h"
 var $11=_stbi__get16be($10); //@line 2586 "./stb_image.h"
 var $12=($11|0)!=4; //@line 2586 "./stb_image.h"
 if($12){label=4;break;}else{label=5;break;} //@line 2586 "./stb_image.h"
 case 4: 
 var $14=_stbi__err(138280); //@line 2586 "./stb_image.h"
 $1=$14; //@line 2586 "./stb_image.h"
 label=47;break; //@line 2586 "./stb_image.h"
 case 5: 
 var $16=$2; //@line 2587 "./stb_image.h"
 var $17=(($16)|0); //@line 2587 "./stb_image.h"
 var $18=HEAP32[(($17)>>2)]; //@line 2587 "./stb_image.h"
 var $19=_stbi__get16be($18); //@line 2587 "./stb_image.h"
 var $20=$2; //@line 2587 "./stb_image.h"
 var $21=(($20+18168)|0); //@line 2587 "./stb_image.h"
 HEAP32[(($21)>>2)]=$19; //@line 2587 "./stb_image.h"
 $1=1; //@line 2588 "./stb_image.h"
 label=47;break; //@line 2588 "./stb_image.h"
 case 6: 
 var $23=$2; //@line 2591 "./stb_image.h"
 var $24=(($23)|0); //@line 2591 "./stb_image.h"
 var $25=HEAP32[(($24)>>2)]; //@line 2591 "./stb_image.h"
 var $26=_stbi__get16be($25); //@line 2591 "./stb_image.h"
 var $27=((($26)-(2))|0); //@line 2591 "./stb_image.h"
 $L=$27; //@line 2591 "./stb_image.h"
 label=7;break; //@line 2592 "./stb_image.h"
 case 7: 
 var $29=$L; //@line 2592 "./stb_image.h"
 var $30=($29|0)>0; //@line 2592 "./stb_image.h"
 if($30){label=8;break;}else{label=17;break;} //@line 2592 "./stb_image.h"
 case 8: 
 var $32=$2; //@line 2593 "./stb_image.h"
 var $33=(($32)|0); //@line 2593 "./stb_image.h"
 var $34=HEAP32[(($33)>>2)]; //@line 2593 "./stb_image.h"
 var $35=_stbi__get8($34); //@line 2593 "./stb_image.h"
 var $36=($35&255); //@line 2593 "./stb_image.h"
 $q=$36; //@line 2593 "./stb_image.h"
 var $37=$q; //@line 2594 "./stb_image.h"
 var $38=$37>>4; //@line 2594 "./stb_image.h"
 $p=$38; //@line 2594 "./stb_image.h"
 var $39=$q; //@line 2595 "./stb_image.h"
 var $40=$39&15; //@line 2595 "./stb_image.h"
 $t=$40; //@line 2595 "./stb_image.h"
 var $41=$p; //@line 2596 "./stb_image.h"
 var $42=($41|0)!=0; //@line 2596 "./stb_image.h"
 if($42){label=9;break;}else{label=10;break;} //@line 2596 "./stb_image.h"
 case 9: 
 var $44=_stbi__err(138256); //@line 2596 "./stb_image.h"
 $1=$44; //@line 2596 "./stb_image.h"
 label=47;break; //@line 2596 "./stb_image.h"
 case 10: 
 var $46=$t; //@line 2597 "./stb_image.h"
 var $47=($46|0)>3; //@line 2597 "./stb_image.h"
 if($47){label=11;break;}else{label=12;break;} //@line 2597 "./stb_image.h"
 case 11: 
 var $49=_stbi__err(138240); //@line 2597 "./stb_image.h"
 $1=$49; //@line 2597 "./stb_image.h"
 label=47;break; //@line 2597 "./stb_image.h"
 case 12: 
 $i=0; //@line 2598 "./stb_image.h"
 label=13;break; //@line 2598 "./stb_image.h"
 case 13: 
 var $52=$i; //@line 2598 "./stb_image.h"
 var $53=($52|0)<64; //@line 2598 "./stb_image.h"
 if($53){label=14;break;}else{label=16;break;} //@line 2598 "./stb_image.h"
 case 14: 
 var $55=$2; //@line 2599 "./stb_image.h"
 var $56=(($55)|0); //@line 2599 "./stb_image.h"
 var $57=HEAP32[(($56)>>2)]; //@line 2599 "./stb_image.h"
 var $58=_stbi__get8($57); //@line 2599 "./stb_image.h"
 var $59=$i; //@line 2599 "./stb_image.h"
 var $60=((10152+$59)|0); //@line 2599 "./stb_image.h"
 var $61=HEAP8[($60)]; //@line 2599 "./stb_image.h"
 var $62=($61&255); //@line 2599 "./stb_image.h"
 var $63=$t; //@line 2599 "./stb_image.h"
 var $64=$2; //@line 2599 "./stb_image.h"
 var $65=(($64+13444)|0); //@line 2599 "./stb_image.h"
 var $66=(($65+($63<<6))|0); //@line 2599 "./stb_image.h"
 var $67=(($66+$62)|0); //@line 2599 "./stb_image.h"
 HEAP8[($67)]=$58; //@line 2599 "./stb_image.h"
 label=15;break; //@line 2599 "./stb_image.h"
 case 15: 
 var $69=$i; //@line 2598 "./stb_image.h"
 var $70=((($69)+(1))|0); //@line 2598 "./stb_image.h"
 $i=$70; //@line 2598 "./stb_image.h"
 label=13;break; //@line 2598 "./stb_image.h"
 case 16: 
 var $72=$L; //@line 2600 "./stb_image.h"
 var $73=((($72)-(65))|0); //@line 2600 "./stb_image.h"
 $L=$73; //@line 2600 "./stb_image.h"
 label=7;break; //@line 2601 "./stb_image.h"
 case 17: 
 var $75=$L; //@line 2602 "./stb_image.h"
 var $76=($75|0)==0; //@line 2602 "./stb_image.h"
 var $77=($76&1); //@line 2602 "./stb_image.h"
 $1=$77; //@line 2602 "./stb_image.h"
 label=47;break; //@line 2602 "./stb_image.h"
 case 18: 
 var $79=$2; //@line 2605 "./stb_image.h"
 var $80=(($79)|0); //@line 2605 "./stb_image.h"
 var $81=HEAP32[(($80)>>2)]; //@line 2605 "./stb_image.h"
 var $82=_stbi__get16be($81); //@line 2605 "./stb_image.h"
 var $83=((($82)-(2))|0); //@line 2605 "./stb_image.h"
 $L=$83; //@line 2605 "./stb_image.h"
 label=19;break; //@line 2606 "./stb_image.h"
 case 19: 
 var $85=$L; //@line 2606 "./stb_image.h"
 var $86=($85|0)>0; //@line 2606 "./stb_image.h"
 if($86){label=20;break;}else{label=41;break;} //@line 2606 "./stb_image.h"
 case 20: 
 $n=0; //@line 2608 "./stb_image.h"
 var $88=$2; //@line 2609 "./stb_image.h"
 var $89=(($88)|0); //@line 2609 "./stb_image.h"
 var $90=HEAP32[(($89)>>2)]; //@line 2609 "./stb_image.h"
 var $91=_stbi__get8($90); //@line 2609 "./stb_image.h"
 var $92=($91&255); //@line 2609 "./stb_image.h"
 $q2=$92; //@line 2609 "./stb_image.h"
 var $93=$q2; //@line 2610 "./stb_image.h"
 var $94=$93>>4; //@line 2610 "./stb_image.h"
 $tc=$94; //@line 2610 "./stb_image.h"
 var $95=$q2; //@line 2611 "./stb_image.h"
 var $96=$95&15; //@line 2611 "./stb_image.h"
 $th=$96; //@line 2611 "./stb_image.h"
 var $97=$tc; //@line 2612 "./stb_image.h"
 var $98=($97|0)>1; //@line 2612 "./stb_image.h"
 if($98){label=22;break;}else{label=21;break;} //@line 2612 "./stb_image.h"
 case 21: 
 var $100=$th; //@line 2612 "./stb_image.h"
 var $101=($100|0)>3; //@line 2612 "./stb_image.h"
 if($101){label=22;break;}else{label=23;break;} //@line 2612 "./stb_image.h"
 case 22: 
 var $103=_stbi__err(138224); //@line 2612 "./stb_image.h"
 $1=$103; //@line 2612 "./stb_image.h"
 label=47;break; //@line 2612 "./stb_image.h"
 case 23: 
 $i1=0; //@line 2613 "./stb_image.h"
 label=24;break; //@line 2613 "./stb_image.h"
 case 24: 
 var $106=$i1; //@line 2613 "./stb_image.h"
 var $107=($106|0)<16; //@line 2613 "./stb_image.h"
 if($107){label=25;break;}else{label=27;break;} //@line 2613 "./stb_image.h"
 case 25: 
 var $109=$2; //@line 2614 "./stb_image.h"
 var $110=(($109)|0); //@line 2614 "./stb_image.h"
 var $111=HEAP32[(($110)>>2)]; //@line 2614 "./stb_image.h"
 var $112=_stbi__get8($111); //@line 2614 "./stb_image.h"
 var $113=($112&255); //@line 2614 "./stb_image.h"
 var $114=$i1; //@line 2614 "./stb_image.h"
 var $115=(($sizes+($114<<2))|0); //@line 2614 "./stb_image.h"
 HEAP32[(($115)>>2)]=$113; //@line 2614 "./stb_image.h"
 var $116=$i1; //@line 2615 "./stb_image.h"
 var $117=(($sizes+($116<<2))|0); //@line 2615 "./stb_image.h"
 var $118=HEAP32[(($117)>>2)]; //@line 2615 "./stb_image.h"
 var $119=$n; //@line 2615 "./stb_image.h"
 var $120=((($119)+($118))|0); //@line 2615 "./stb_image.h"
 $n=$120; //@line 2615 "./stb_image.h"
 label=26;break; //@line 2616 "./stb_image.h"
 case 26: 
 var $122=$i1; //@line 2613 "./stb_image.h"
 var $123=((($122)+(1))|0); //@line 2613 "./stb_image.h"
 $i1=$123; //@line 2613 "./stb_image.h"
 label=24;break; //@line 2613 "./stb_image.h"
 case 27: 
 var $125=$L; //@line 2617 "./stb_image.h"
 var $126=((($125)-(17))|0); //@line 2617 "./stb_image.h"
 $L=$126; //@line 2617 "./stb_image.h"
 var $127=$tc; //@line 2618 "./stb_image.h"
 var $128=($127|0)==0; //@line 2618 "./stb_image.h"
 if($128){label=28;break;}else{label=31;break;} //@line 2618 "./stb_image.h"
 case 28: 
 var $130=$2; //@line 2619 "./stb_image.h"
 var $131=(($130+4)|0); //@line 2619 "./stb_image.h"
 var $132=(($131)|0); //@line 2619 "./stb_image.h"
 var $133=$th; //@line 2619 "./stb_image.h"
 var $134=(($132+((($133)*(1680))&-1))|0); //@line 2619 "./stb_image.h"
 var $135=(($sizes)|0); //@line 2619 "./stb_image.h"
 var $136=_stbi__build_huffman($134,$135); //@line 2619 "./stb_image.h"
 var $137=($136|0)!=0; //@line 2619 "./stb_image.h"
 if($137){label=30;break;}else{label=29;break;} //@line 2619 "./stb_image.h"
 case 29: 
 $1=0; //@line 2619 "./stb_image.h"
 label=47;break; //@line 2619 "./stb_image.h"
 case 30: 
 var $140=$th; //@line 2620 "./stb_image.h"
 var $141=$2; //@line 2620 "./stb_image.h"
 var $142=(($141+4)|0); //@line 2620 "./stb_image.h"
 var $143=(($142+((($140)*(1680))&-1))|0); //@line 2620 "./stb_image.h"
 var $144=(($143+1024)|0); //@line 2620 "./stb_image.h"
 var $145=(($144)|0); //@line 2620 "./stb_image.h"
 $v=$145; //@line 2620 "./stb_image.h"
 label=34;break; //@line 2621 "./stb_image.h"
 case 31: 
 var $147=$2; //@line 2622 "./stb_image.h"
 var $148=(($147+6724)|0); //@line 2622 "./stb_image.h"
 var $149=(($148)|0); //@line 2622 "./stb_image.h"
 var $150=$th; //@line 2622 "./stb_image.h"
 var $151=(($149+((($150)*(1680))&-1))|0); //@line 2622 "./stb_image.h"
 var $152=(($sizes)|0); //@line 2622 "./stb_image.h"
 var $153=_stbi__build_huffman($151,$152); //@line 2622 "./stb_image.h"
 var $154=($153|0)!=0; //@line 2622 "./stb_image.h"
 if($154){label=33;break;}else{label=32;break;} //@line 2622 "./stb_image.h"
 case 32: 
 $1=0; //@line 2622 "./stb_image.h"
 label=47;break; //@line 2622 "./stb_image.h"
 case 33: 
 var $157=$th; //@line 2623 "./stb_image.h"
 var $158=$2; //@line 2623 "./stb_image.h"
 var $159=(($158+6724)|0); //@line 2623 "./stb_image.h"
 var $160=(($159+((($157)*(1680))&-1))|0); //@line 2623 "./stb_image.h"
 var $161=(($160+1024)|0); //@line 2623 "./stb_image.h"
 var $162=(($161)|0); //@line 2623 "./stb_image.h"
 $v=$162; //@line 2623 "./stb_image.h"
 label=34;break;
 case 34: 
 $i1=0; //@line 2625 "./stb_image.h"
 label=35;break; //@line 2625 "./stb_image.h"
 case 35: 
 var $165=$i1; //@line 2625 "./stb_image.h"
 var $166=$n; //@line 2625 "./stb_image.h"
 var $167=($165|0)<($166|0); //@line 2625 "./stb_image.h"
 if($167){label=36;break;}else{label=38;break;} //@line 2625 "./stb_image.h"
 case 36: 
 var $169=$2; //@line 2626 "./stb_image.h"
 var $170=(($169)|0); //@line 2626 "./stb_image.h"
 var $171=HEAP32[(($170)>>2)]; //@line 2626 "./stb_image.h"
 var $172=_stbi__get8($171); //@line 2626 "./stb_image.h"
 var $173=$i1; //@line 2626 "./stb_image.h"
 var $174=$v; //@line 2626 "./stb_image.h"
 var $175=(($174+$173)|0); //@line 2626 "./stb_image.h"
 HEAP8[($175)]=$172; //@line 2626 "./stb_image.h"
 label=37;break; //@line 2626 "./stb_image.h"
 case 37: 
 var $177=$i1; //@line 2625 "./stb_image.h"
 var $178=((($177)+(1))|0); //@line 2625 "./stb_image.h"
 $i1=$178; //@line 2625 "./stb_image.h"
 label=35;break; //@line 2625 "./stb_image.h"
 case 38: 
 var $180=$tc; //@line 2627 "./stb_image.h"
 var $181=($180|0)!=0; //@line 2627 "./stb_image.h"
 if($181){label=39;break;}else{label=40;break;} //@line 2627 "./stb_image.h"
 case 39: 
 var $183=$th; //@line 2628 "./stb_image.h"
 var $184=$2; //@line 2628 "./stb_image.h"
 var $185=(($184+13700)|0); //@line 2628 "./stb_image.h"
 var $186=(($185+($183<<10))|0); //@line 2628 "./stb_image.h"
 var $187=(($186)|0); //@line 2628 "./stb_image.h"
 var $188=$2; //@line 2628 "./stb_image.h"
 var $189=(($188+6724)|0); //@line 2628 "./stb_image.h"
 var $190=(($189)|0); //@line 2628 "./stb_image.h"
 var $191=$th; //@line 2628 "./stb_image.h"
 var $192=(($190+((($191)*(1680))&-1))|0); //@line 2628 "./stb_image.h"
 _stbi__build_fast_ac($187,$192); //@line 2628 "./stb_image.h"
 label=40;break; //@line 2628 "./stb_image.h"
 case 40: 
 var $194=$n; //@line 2629 "./stb_image.h"
 var $195=$L; //@line 2629 "./stb_image.h"
 var $196=((($195)-($194))|0); //@line 2629 "./stb_image.h"
 $L=$196; //@line 2629 "./stb_image.h"
 label=19;break; //@line 2630 "./stb_image.h"
 case 41: 
 var $198=$L; //@line 2631 "./stb_image.h"
 var $199=($198|0)==0; //@line 2631 "./stb_image.h"
 var $200=($199&1); //@line 2631 "./stb_image.h"
 $1=$200; //@line 2631 "./stb_image.h"
 label=47;break; //@line 2631 "./stb_image.h"
 case 42: 
 var $202=$3; //@line 2634 "./stb_image.h"
 var $203=($202|0)>=224; //@line 2634 "./stb_image.h"
 if($203){label=43;break;}else{label=44;break;} //@line 2634 "./stb_image.h"
 case 43: 
 var $205=$3; //@line 2634 "./stb_image.h"
 var $206=($205|0)<=239; //@line 2634 "./stb_image.h"
 if($206){label=45;break;}else{label=44;break;} //@line 2634 "./stb_image.h"
 case 44: 
 var $208=$3; //@line 2634 "./stb_image.h"
 var $209=($208|0)==254; //@line 2634 "./stb_image.h"
 if($209){label=45;break;}else{label=46;break;} //@line 2634 "./stb_image.h"
 case 45: 
 var $211=$2; //@line 2635 "./stb_image.h"
 var $212=(($211)|0); //@line 2635 "./stb_image.h"
 var $213=HEAP32[(($212)>>2)]; //@line 2635 "./stb_image.h"
 var $214=$2; //@line 2635 "./stb_image.h"
 var $215=(($214)|0); //@line 2635 "./stb_image.h"
 var $216=HEAP32[(($215)>>2)]; //@line 2635 "./stb_image.h"
 var $217=_stbi__get16be($216); //@line 2635 "./stb_image.h"
 var $218=((($217)-(2))|0); //@line 2635 "./stb_image.h"
 _stbi__skip($213,$218); //@line 2635 "./stb_image.h"
 $1=1; //@line 2636 "./stb_image.h"
 label=47;break; //@line 2636 "./stb_image.h"
 case 46: 
 $1=0; //@line 2638 "./stb_image.h"
 label=47;break; //@line 2638 "./stb_image.h"
 case 47: 
 var $221=$1; //@line 2639 "./stb_image.h"
 STACKTOP=sp;return $221; //@line 2639 "./stb_image.h"
  default: assert(0, "bad label: " + label);
 }

}


function _stbi__process_frame_header($z,$scan){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $s;
 var $Lf;
 var $p;
 var $i;
 var $q;
 var $h_max;
 var $v_max;
 var $c;
 $2=$z;
 $3=$scan;
 var $4=$2; //@line 2683 "./stb_image.h"
 var $5=(($4)|0); //@line 2683 "./stb_image.h"
 var $6=HEAP32[(($5)>>2)]; //@line 2683 "./stb_image.h"
 $s=$6; //@line 2683 "./stb_image.h"
 $h_max=1; //@line 2684 "./stb_image.h"
 $v_max=1; //@line 2684 "./stb_image.h"
 var $7=$s; //@line 2685 "./stb_image.h"
 var $8=_stbi__get16be($7); //@line 2685 "./stb_image.h"
 $Lf=$8; //@line 2685 "./stb_image.h"
 var $9=$Lf; //@line 2685 "./stb_image.h"
 var $10=($9|0)<11; //@line 2685 "./stb_image.h"
 if($10){label=2;break;}else{label=3;break;} //@line 2685 "./stb_image.h"
 case 2: 
 var $12=_stbi__err(138480); //@line 2685 "./stb_image.h"
 $1=$12; //@line 2685 "./stb_image.h"
 label=60;break; //@line 2685 "./stb_image.h"
 case 3: 
 var $14=$s; //@line 2686 "./stb_image.h"
 var $15=_stbi__get8($14); //@line 2686 "./stb_image.h"
 var $16=($15&255); //@line 2686 "./stb_image.h"
 $p=$16; //@line 2686 "./stb_image.h"
 var $17=$p; //@line 2686 "./stb_image.h"
 var $18=($17|0)!=8; //@line 2686 "./stb_image.h"
 if($18){label=4;break;}else{label=5;break;} //@line 2686 "./stb_image.h"
 case 4: 
 var $20=_stbi__err(138456); //@line 2686 "./stb_image.h"
 $1=$20; //@line 2686 "./stb_image.h"
 label=60;break; //@line 2686 "./stb_image.h"
 case 5: 
 var $22=$s; //@line 2687 "./stb_image.h"
 var $23=_stbi__get16be($22); //@line 2687 "./stb_image.h"
 var $24=$s; //@line 2687 "./stb_image.h"
 var $25=(($24+4)|0); //@line 2687 "./stb_image.h"
 HEAP32[(($25)>>2)]=$23; //@line 2687 "./stb_image.h"
 var $26=$s; //@line 2687 "./stb_image.h"
 var $27=(($26+4)|0); //@line 2687 "./stb_image.h"
 var $28=HEAP32[(($27)>>2)]; //@line 2687 "./stb_image.h"
 var $29=($28|0)==0; //@line 2687 "./stb_image.h"
 if($29){label=6;break;}else{label=7;break;} //@line 2687 "./stb_image.h"
 case 6: 
 var $31=_stbi__err(138432); //@line 2687 "./stb_image.h"
 $1=$31; //@line 2687 "./stb_image.h"
 label=60;break; //@line 2687 "./stb_image.h"
 case 7: 
 var $33=$s; //@line 2688 "./stb_image.h"
 var $34=_stbi__get16be($33); //@line 2688 "./stb_image.h"
 var $35=$s; //@line 2688 "./stb_image.h"
 var $36=(($35)|0); //@line 2688 "./stb_image.h"
 HEAP32[(($36)>>2)]=$34; //@line 2688 "./stb_image.h"
 var $37=$s; //@line 2688 "./stb_image.h"
 var $38=(($37)|0); //@line 2688 "./stb_image.h"
 var $39=HEAP32[(($38)>>2)]; //@line 2688 "./stb_image.h"
 var $40=($39|0)==0; //@line 2688 "./stb_image.h"
 if($40){label=8;break;}else{label=9;break;} //@line 2688 "./stb_image.h"
 case 8: 
 var $42=_stbi__err(138424); //@line 2688 "./stb_image.h"
 $1=$42; //@line 2688 "./stb_image.h"
 label=60;break; //@line 2688 "./stb_image.h"
 case 9: 
 var $44=$s; //@line 2689 "./stb_image.h"
 var $45=_stbi__get8($44); //@line 2689 "./stb_image.h"
 var $46=($45&255); //@line 2689 "./stb_image.h"
 $c=$46; //@line 2689 "./stb_image.h"
 var $47=$c; //@line 2690 "./stb_image.h"
 var $48=($47|0)!=3; //@line 2690 "./stb_image.h"
 if($48){label=10;break;}else{label=12;break;} //@line 2690 "./stb_image.h"
 case 10: 
 var $50=$c; //@line 2690 "./stb_image.h"
 var $51=($50|0)!=1; //@line 2690 "./stb_image.h"
 if($51){label=11;break;}else{label=12;break;} //@line 2690 "./stb_image.h"
 case 11: 
 var $53=_stbi__err(138400); //@line 2690 "./stb_image.h"
 $1=$53; //@line 2690 "./stb_image.h"
 label=60;break; //@line 2690 "./stb_image.h"
 case 12: 
 var $55=$c; //@line 2691 "./stb_image.h"
 var $56=$s; //@line 2691 "./stb_image.h"
 var $57=(($56+8)|0); //@line 2691 "./stb_image.h"
 HEAP32[(($57)>>2)]=$55; //@line 2691 "./stb_image.h"
 $i=0; //@line 2692 "./stb_image.h"
 label=13;break; //@line 2692 "./stb_image.h"
 case 13: 
 var $59=$i; //@line 2692 "./stb_image.h"
 var $60=$c; //@line 2692 "./stb_image.h"
 var $61=($59|0)<($60|0); //@line 2692 "./stb_image.h"
 if($61){label=14;break;}else{label=16;break;} //@line 2692 "./stb_image.h"
 case 14: 
 var $63=$i; //@line 2693 "./stb_image.h"
 var $64=$2; //@line 2693 "./stb_image.h"
 var $65=(($64+17820)|0); //@line 2693 "./stb_image.h"
 var $66=(($65+((($63)*(72))&-1))|0); //@line 2693 "./stb_image.h"
 var $67=(($66+44)|0); //@line 2693 "./stb_image.h"
 HEAP32[(($67)>>2)]=0; //@line 2693 "./stb_image.h"
 var $68=$i; //@line 2694 "./stb_image.h"
 var $69=$2; //@line 2694 "./stb_image.h"
 var $70=(($69+17820)|0); //@line 2694 "./stb_image.h"
 var $71=(($70+((($68)*(72))&-1))|0); //@line 2694 "./stb_image.h"
 var $72=(($71+56)|0); //@line 2694 "./stb_image.h"
 HEAP32[(($72)>>2)]=0; //@line 2694 "./stb_image.h"
 label=15;break; //@line 2695 "./stb_image.h"
 case 15: 
 var $74=$i; //@line 2692 "./stb_image.h"
 var $75=((($74)+(1))|0); //@line 2692 "./stb_image.h"
 $i=$75; //@line 2692 "./stb_image.h"
 label=13;break; //@line 2692 "./stb_image.h"
 case 16: 
 var $77=$Lf; //@line 2697 "./stb_image.h"
 var $78=$s; //@line 2697 "./stb_image.h"
 var $79=(($78+8)|0); //@line 2697 "./stb_image.h"
 var $80=HEAP32[(($79)>>2)]; //@line 2697 "./stb_image.h"
 var $81=((($80)*(3))&-1); //@line 2697 "./stb_image.h"
 var $82=((($81)+(8))|0); //@line 2697 "./stb_image.h"
 var $83=($77|0)!=($82|0); //@line 2697 "./stb_image.h"
 if($83){label=17;break;}else{label=18;break;} //@line 2697 "./stb_image.h"
 case 17: 
 var $85=_stbi__err(138480); //@line 2697 "./stb_image.h"
 $1=$85; //@line 2697 "./stb_image.h"
 label=60;break; //@line 2697 "./stb_image.h"
 case 18: 
 $i=0; //@line 2699 "./stb_image.h"
 label=19;break; //@line 2699 "./stb_image.h"
 case 19: 
 var $88=$i; //@line 2699 "./stb_image.h"
 var $89=$s; //@line 2699 "./stb_image.h"
 var $90=(($89+8)|0); //@line 2699 "./stb_image.h"
 var $91=HEAP32[(($90)>>2)]; //@line 2699 "./stb_image.h"
 var $92=($88|0)<($91|0); //@line 2699 "./stb_image.h"
 if($92){label=20;break;}else{label=34;break;} //@line 2699 "./stb_image.h"
 case 20: 
 var $94=$s; //@line 2700 "./stb_image.h"
 var $95=_stbi__get8($94); //@line 2700 "./stb_image.h"
 var $96=($95&255); //@line 2700 "./stb_image.h"
 var $97=$i; //@line 2700 "./stb_image.h"
 var $98=$2; //@line 2700 "./stb_image.h"
 var $99=(($98+17820)|0); //@line 2700 "./stb_image.h"
 var $100=(($99+((($97)*(72))&-1))|0); //@line 2700 "./stb_image.h"
 var $101=(($100)|0); //@line 2700 "./stb_image.h"
 HEAP32[(($101)>>2)]=$96; //@line 2700 "./stb_image.h"
 var $102=$i; //@line 2701 "./stb_image.h"
 var $103=$2; //@line 2701 "./stb_image.h"
 var $104=(($103+17820)|0); //@line 2701 "./stb_image.h"
 var $105=(($104+((($102)*(72))&-1))|0); //@line 2701 "./stb_image.h"
 var $106=(($105)|0); //@line 2701 "./stb_image.h"
 var $107=HEAP32[(($106)>>2)]; //@line 2701 "./stb_image.h"
 var $108=$i; //@line 2701 "./stb_image.h"
 var $109=((($108)+(1))|0); //@line 2701 "./stb_image.h"
 var $110=($107|0)!=($109|0); //@line 2701 "./stb_image.h"
 if($110){label=21;break;}else{label=24;break;} //@line 2701 "./stb_image.h"
 case 21: 
 var $112=$i; //@line 2702 "./stb_image.h"
 var $113=$2; //@line 2702 "./stb_image.h"
 var $114=(($113+17820)|0); //@line 2702 "./stb_image.h"
 var $115=(($114+((($112)*(72))&-1))|0); //@line 2702 "./stb_image.h"
 var $116=(($115)|0); //@line 2702 "./stb_image.h"
 var $117=HEAP32[(($116)>>2)]; //@line 2702 "./stb_image.h"
 var $118=$i; //@line 2702 "./stb_image.h"
 var $119=($117|0)!=($118|0); //@line 2702 "./stb_image.h"
 if($119){label=22;break;}else{label=23;break;} //@line 2702 "./stb_image.h"
 case 22: 
 var $121=_stbi__err(138376); //@line 2703 "./stb_image.h"
 $1=$121; //@line 2703 "./stb_image.h"
 label=60;break; //@line 2703 "./stb_image.h"
 case 23: 
 label=24;break; //@line 2703 "./stb_image.h"
 case 24: 
 var $124=$s; //@line 2704 "./stb_image.h"
 var $125=_stbi__get8($124); //@line 2704 "./stb_image.h"
 var $126=($125&255); //@line 2704 "./stb_image.h"
 $q=$126; //@line 2704 "./stb_image.h"
 var $127=$q; //@line 2705 "./stb_image.h"
 var $128=$127>>4; //@line 2705 "./stb_image.h"
 var $129=$i; //@line 2705 "./stb_image.h"
 var $130=$2; //@line 2705 "./stb_image.h"
 var $131=(($130+17820)|0); //@line 2705 "./stb_image.h"
 var $132=(($131+((($129)*(72))&-1))|0); //@line 2705 "./stb_image.h"
 var $133=(($132+4)|0); //@line 2705 "./stb_image.h"
 HEAP32[(($133)>>2)]=$128; //@line 2705 "./stb_image.h"
 var $134=$i; //@line 2705 "./stb_image.h"
 var $135=$2; //@line 2705 "./stb_image.h"
 var $136=(($135+17820)|0); //@line 2705 "./stb_image.h"
 var $137=(($136+((($134)*(72))&-1))|0); //@line 2705 "./stb_image.h"
 var $138=(($137+4)|0); //@line 2705 "./stb_image.h"
 var $139=HEAP32[(($138)>>2)]; //@line 2705 "./stb_image.h"
 var $140=($139|0)!=0; //@line 2705 "./stb_image.h"
 if($140){label=25;break;}else{label=26;break;} //@line 2705 "./stb_image.h"
 case 25: 
 var $142=$i; //@line 2705 "./stb_image.h"
 var $143=$2; //@line 2705 "./stb_image.h"
 var $144=(($143+17820)|0); //@line 2705 "./stb_image.h"
 var $145=(($144+((($142)*(72))&-1))|0); //@line 2705 "./stb_image.h"
 var $146=(($145+4)|0); //@line 2705 "./stb_image.h"
 var $147=HEAP32[(($146)>>2)]; //@line 2705 "./stb_image.h"
 var $148=($147|0)>4; //@line 2705 "./stb_image.h"
 if($148){label=26;break;}else{label=27;break;} //@line 2705 "./stb_image.h"
 case 26: 
 var $150=_stbi__err(138344); //@line 2705 "./stb_image.h"
 $1=$150; //@line 2705 "./stb_image.h"
 label=60;break; //@line 2705 "./stb_image.h"
 case 27: 
 var $152=$q; //@line 2706 "./stb_image.h"
 var $153=$152&15; //@line 2706 "./stb_image.h"
 var $154=$i; //@line 2706 "./stb_image.h"
 var $155=$2; //@line 2706 "./stb_image.h"
 var $156=(($155+17820)|0); //@line 2706 "./stb_image.h"
 var $157=(($156+((($154)*(72))&-1))|0); //@line 2706 "./stb_image.h"
 var $158=(($157+8)|0); //@line 2706 "./stb_image.h"
 HEAP32[(($158)>>2)]=$153; //@line 2706 "./stb_image.h"
 var $159=$i; //@line 2706 "./stb_image.h"
 var $160=$2; //@line 2706 "./stb_image.h"
 var $161=(($160+17820)|0); //@line 2706 "./stb_image.h"
 var $162=(($161+((($159)*(72))&-1))|0); //@line 2706 "./stb_image.h"
 var $163=(($162+8)|0); //@line 2706 "./stb_image.h"
 var $164=HEAP32[(($163)>>2)]; //@line 2706 "./stb_image.h"
 var $165=($164|0)!=0; //@line 2706 "./stb_image.h"
 if($165){label=28;break;}else{label=29;break;} //@line 2706 "./stb_image.h"
 case 28: 
 var $167=$i; //@line 2706 "./stb_image.h"
 var $168=$2; //@line 2706 "./stb_image.h"
 var $169=(($168+17820)|0); //@line 2706 "./stb_image.h"
 var $170=(($169+((($167)*(72))&-1))|0); //@line 2706 "./stb_image.h"
 var $171=(($170+8)|0); //@line 2706 "./stb_image.h"
 var $172=HEAP32[(($171)>>2)]; //@line 2706 "./stb_image.h"
 var $173=($172|0)>4; //@line 2706 "./stb_image.h"
 if($173){label=29;break;}else{label=30;break;} //@line 2706 "./stb_image.h"
 case 29: 
 var $175=_stbi__err(138328); //@line 2706 "./stb_image.h"
 $1=$175; //@line 2706 "./stb_image.h"
 label=60;break; //@line 2706 "./stb_image.h"
 case 30: 
 var $177=$s; //@line 2707 "./stb_image.h"
 var $178=_stbi__get8($177); //@line 2707 "./stb_image.h"
 var $179=($178&255); //@line 2707 "./stb_image.h"
 var $180=$i; //@line 2707 "./stb_image.h"
 var $181=$2; //@line 2707 "./stb_image.h"
 var $182=(($181+17820)|0); //@line 2707 "./stb_image.h"
 var $183=(($182+((($180)*(72))&-1))|0); //@line 2707 "./stb_image.h"
 var $184=(($183+12)|0); //@line 2707 "./stb_image.h"
 HEAP32[(($184)>>2)]=$179; //@line 2707 "./stb_image.h"
 var $185=$i; //@line 2707 "./stb_image.h"
 var $186=$2; //@line 2707 "./stb_image.h"
 var $187=(($186+17820)|0); //@line 2707 "./stb_image.h"
 var $188=(($187+((($185)*(72))&-1))|0); //@line 2707 "./stb_image.h"
 var $189=(($188+12)|0); //@line 2707 "./stb_image.h"
 var $190=HEAP32[(($189)>>2)]; //@line 2707 "./stb_image.h"
 var $191=($190|0)>3; //@line 2707 "./stb_image.h"
 if($191){label=31;break;}else{label=32;break;} //@line 2707 "./stb_image.h"
 case 31: 
 var $193=_stbi__err(138320); //@line 2707 "./stb_image.h"
 $1=$193; //@line 2707 "./stb_image.h"
 label=60;break; //@line 2707 "./stb_image.h"
 case 32: 
 label=33;break; //@line 2708 "./stb_image.h"
 case 33: 
 var $196=$i; //@line 2699 "./stb_image.h"
 var $197=((($196)+(1))|0); //@line 2699 "./stb_image.h"
 $i=$197; //@line 2699 "./stb_image.h"
 label=19;break; //@line 2699 "./stb_image.h"
 case 34: 
 var $199=$3; //@line 2710 "./stb_image.h"
 var $200=($199|0)!=0; //@line 2710 "./stb_image.h"
 if($200){label=35;break;}else{label=36;break;} //@line 2710 "./stb_image.h"
 case 35: 
 $1=1; //@line 2710 "./stb_image.h"
 label=60;break; //@line 2710 "./stb_image.h"
 case 36: 
 var $203=$s; //@line 2712 "./stb_image.h"
 var $204=(($203)|0); //@line 2712 "./stb_image.h"
 var $205=HEAP32[(($204)>>2)]; //@line 2712 "./stb_image.h"
 var $206=(((1073741824)/(($205>>>0)))&-1); //@line 2712 "./stb_image.h"
 var $207=$s; //@line 2712 "./stb_image.h"
 var $208=(($207+8)|0); //@line 2712 "./stb_image.h"
 var $209=HEAP32[(($208)>>2)]; //@line 2712 "./stb_image.h"
 var $210=(((($206>>>0))/(($209>>>0)))&-1); //@line 2712 "./stb_image.h"
 var $211=$s; //@line 2712 "./stb_image.h"
 var $212=(($211+4)|0); //@line 2712 "./stb_image.h"
 var $213=HEAP32[(($212)>>2)]; //@line 2712 "./stb_image.h"
 var $214=($210>>>0)<($213>>>0); //@line 2712 "./stb_image.h"
 if($214){label=37;break;}else{label=38;break;} //@line 2712 "./stb_image.h"
 case 37: 
 var $216=_stbi__err(139448); //@line 2712 "./stb_image.h"
 $1=$216; //@line 2712 "./stb_image.h"
 label=60;break; //@line 2712 "./stb_image.h"
 case 38: 
 $i=0; //@line 2714 "./stb_image.h"
 label=39;break; //@line 2714 "./stb_image.h"
 case 39: 
 var $219=$i; //@line 2714 "./stb_image.h"
 var $220=$s; //@line 2714 "./stb_image.h"
 var $221=(($220+8)|0); //@line 2714 "./stb_image.h"
 var $222=HEAP32[(($221)>>2)]; //@line 2714 "./stb_image.h"
 var $223=($219|0)<($222|0); //@line 2714 "./stb_image.h"
 if($223){label=40;break;}else{label=46;break;} //@line 2714 "./stb_image.h"
 case 40: 
 var $225=$i; //@line 2715 "./stb_image.h"
 var $226=$2; //@line 2715 "./stb_image.h"
 var $227=(($226+17820)|0); //@line 2715 "./stb_image.h"
 var $228=(($227+((($225)*(72))&-1))|0); //@line 2715 "./stb_image.h"
 var $229=(($228+4)|0); //@line 2715 "./stb_image.h"
 var $230=HEAP32[(($229)>>2)]; //@line 2715 "./stb_image.h"
 var $231=$h_max; //@line 2715 "./stb_image.h"
 var $232=($230|0)>($231|0); //@line 2715 "./stb_image.h"
 if($232){label=41;break;}else{label=42;break;} //@line 2715 "./stb_image.h"
 case 41: 
 var $234=$i; //@line 2715 "./stb_image.h"
 var $235=$2; //@line 2715 "./stb_image.h"
 var $236=(($235+17820)|0); //@line 2715 "./stb_image.h"
 var $237=(($236+((($234)*(72))&-1))|0); //@line 2715 "./stb_image.h"
 var $238=(($237+4)|0); //@line 2715 "./stb_image.h"
 var $239=HEAP32[(($238)>>2)]; //@line 2715 "./stb_image.h"
 $h_max=$239; //@line 2715 "./stb_image.h"
 label=42;break; //@line 2715 "./stb_image.h"
 case 42: 
 var $241=$i; //@line 2716 "./stb_image.h"
 var $242=$2; //@line 2716 "./stb_image.h"
 var $243=(($242+17820)|0); //@line 2716 "./stb_image.h"
 var $244=(($243+((($241)*(72))&-1))|0); //@line 2716 "./stb_image.h"
 var $245=(($244+8)|0); //@line 2716 "./stb_image.h"
 var $246=HEAP32[(($245)>>2)]; //@line 2716 "./stb_image.h"
 var $247=$v_max; //@line 2716 "./stb_image.h"
 var $248=($246|0)>($247|0); //@line 2716 "./stb_image.h"
 if($248){label=43;break;}else{label=44;break;} //@line 2716 "./stb_image.h"
 case 43: 
 var $250=$i; //@line 2716 "./stb_image.h"
 var $251=$2; //@line 2716 "./stb_image.h"
 var $252=(($251+17820)|0); //@line 2716 "./stb_image.h"
 var $253=(($252+((($250)*(72))&-1))|0); //@line 2716 "./stb_image.h"
 var $254=(($253+8)|0); //@line 2716 "./stb_image.h"
 var $255=HEAP32[(($254)>>2)]; //@line 2716 "./stb_image.h"
 $v_max=$255; //@line 2716 "./stb_image.h"
 label=44;break; //@line 2716 "./stb_image.h"
 case 44: 
 label=45;break; //@line 2717 "./stb_image.h"
 case 45: 
 var $258=$i; //@line 2714 "./stb_image.h"
 var $259=((($258)+(1))|0); //@line 2714 "./stb_image.h"
 $i=$259; //@line 2714 "./stb_image.h"
 label=39;break; //@line 2714 "./stb_image.h"
 case 46: 
 var $261=$h_max; //@line 2720 "./stb_image.h"
 var $262=$2; //@line 2720 "./stb_image.h"
 var $263=(($262+17796)|0); //@line 2720 "./stb_image.h"
 HEAP32[(($263)>>2)]=$261; //@line 2720 "./stb_image.h"
 var $264=$v_max; //@line 2721 "./stb_image.h"
 var $265=$2; //@line 2721 "./stb_image.h"
 var $266=(($265+17800)|0); //@line 2721 "./stb_image.h"
 HEAP32[(($266)>>2)]=$264; //@line 2721 "./stb_image.h"
 var $267=$h_max; //@line 2722 "./stb_image.h"
 var $268=($267<<3); //@line 2722 "./stb_image.h"
 var $269=$2; //@line 2722 "./stb_image.h"
 var $270=(($269+17812)|0); //@line 2722 "./stb_image.h"
 HEAP32[(($270)>>2)]=$268; //@line 2722 "./stb_image.h"
 var $271=$v_max; //@line 2723 "./stb_image.h"
 var $272=($271<<3); //@line 2723 "./stb_image.h"
 var $273=$2; //@line 2723 "./stb_image.h"
 var $274=(($273+17816)|0); //@line 2723 "./stb_image.h"
 HEAP32[(($274)>>2)]=$272; //@line 2723 "./stb_image.h"
 var $275=$s; //@line 2724 "./stb_image.h"
 var $276=(($275)|0); //@line 2724 "./stb_image.h"
 var $277=HEAP32[(($276)>>2)]; //@line 2724 "./stb_image.h"
 var $278=$2; //@line 2724 "./stb_image.h"
 var $279=(($278+17812)|0); //@line 2724 "./stb_image.h"
 var $280=HEAP32[(($279)>>2)]; //@line 2724 "./stb_image.h"
 var $281=((($277)+($280))|0); //@line 2724 "./stb_image.h"
 var $282=((($281)-(1))|0); //@line 2724 "./stb_image.h"
 var $283=$2; //@line 2724 "./stb_image.h"
 var $284=(($283+17812)|0); //@line 2724 "./stb_image.h"
 var $285=HEAP32[(($284)>>2)]; //@line 2724 "./stb_image.h"
 var $286=(((($282>>>0))/(($285>>>0)))&-1); //@line 2724 "./stb_image.h"
 var $287=$2; //@line 2724 "./stb_image.h"
 var $288=(($287+17804)|0); //@line 2724 "./stb_image.h"
 HEAP32[(($288)>>2)]=$286; //@line 2724 "./stb_image.h"
 var $289=$s; //@line 2725 "./stb_image.h"
 var $290=(($289+4)|0); //@line 2725 "./stb_image.h"
 var $291=HEAP32[(($290)>>2)]; //@line 2725 "./stb_image.h"
 var $292=$2; //@line 2725 "./stb_image.h"
 var $293=(($292+17816)|0); //@line 2725 "./stb_image.h"
 var $294=HEAP32[(($293)>>2)]; //@line 2725 "./stb_image.h"
 var $295=((($291)+($294))|0); //@line 2725 "./stb_image.h"
 var $296=((($295)-(1))|0); //@line 2725 "./stb_image.h"
 var $297=$2; //@line 2725 "./stb_image.h"
 var $298=(($297+17816)|0); //@line 2725 "./stb_image.h"
 var $299=HEAP32[(($298)>>2)]; //@line 2725 "./stb_image.h"
 var $300=(((($296>>>0))/(($299>>>0)))&-1); //@line 2725 "./stb_image.h"
 var $301=$2; //@line 2725 "./stb_image.h"
 var $302=(($301+17808)|0); //@line 2725 "./stb_image.h"
 HEAP32[(($302)>>2)]=$300; //@line 2725 "./stb_image.h"
 $i=0; //@line 2727 "./stb_image.h"
 label=47;break; //@line 2727 "./stb_image.h"
 case 47: 
 var $304=$i; //@line 2727 "./stb_image.h"
 var $305=$s; //@line 2727 "./stb_image.h"
 var $306=(($305+8)|0); //@line 2727 "./stb_image.h"
 var $307=HEAP32[(($306)>>2)]; //@line 2727 "./stb_image.h"
 var $308=($304|0)<($307|0); //@line 2727 "./stb_image.h"
 if($308){label=48;break;}else{label=59;break;} //@line 2727 "./stb_image.h"
 case 48: 
 var $310=$s; //@line 2729 "./stb_image.h"
 var $311=(($310)|0); //@line 2729 "./stb_image.h"
 var $312=HEAP32[(($311)>>2)]; //@line 2729 "./stb_image.h"
 var $313=$i; //@line 2729 "./stb_image.h"
 var $314=$2; //@line 2729 "./stb_image.h"
 var $315=(($314+17820)|0); //@line 2729 "./stb_image.h"
 var $316=(($315+((($313)*(72))&-1))|0); //@line 2729 "./stb_image.h"
 var $317=(($316+4)|0); //@line 2729 "./stb_image.h"
 var $318=HEAP32[(($317)>>2)]; //@line 2729 "./stb_image.h"
 var $319=(Math_imul($312,$318)|0); //@line 2729 "./stb_image.h"
 var $320=$h_max; //@line 2729 "./stb_image.h"
 var $321=((($319)+($320))|0); //@line 2729 "./stb_image.h"
 var $322=((($321)-(1))|0); //@line 2729 "./stb_image.h"
 var $323=$h_max; //@line 2729 "./stb_image.h"
 var $324=(((($322>>>0))/(($323>>>0)))&-1); //@line 2729 "./stb_image.h"
 var $325=$i; //@line 2729 "./stb_image.h"
 var $326=$2; //@line 2729 "./stb_image.h"
 var $327=(($326+17820)|0); //@line 2729 "./stb_image.h"
 var $328=(($327+((($325)*(72))&-1))|0); //@line 2729 "./stb_image.h"
 var $329=(($328+28)|0); //@line 2729 "./stb_image.h"
 HEAP32[(($329)>>2)]=$324; //@line 2729 "./stb_image.h"
 var $330=$s; //@line 2730 "./stb_image.h"
 var $331=(($330+4)|0); //@line 2730 "./stb_image.h"
 var $332=HEAP32[(($331)>>2)]; //@line 2730 "./stb_image.h"
 var $333=$i; //@line 2730 "./stb_image.h"
 var $334=$2; //@line 2730 "./stb_image.h"
 var $335=(($334+17820)|0); //@line 2730 "./stb_image.h"
 var $336=(($335+((($333)*(72))&-1))|0); //@line 2730 "./stb_image.h"
 var $337=(($336+8)|0); //@line 2730 "./stb_image.h"
 var $338=HEAP32[(($337)>>2)]; //@line 2730 "./stb_image.h"
 var $339=(Math_imul($332,$338)|0); //@line 2730 "./stb_image.h"
 var $340=$v_max; //@line 2730 "./stb_image.h"
 var $341=((($339)+($340))|0); //@line 2730 "./stb_image.h"
 var $342=((($341)-(1))|0); //@line 2730 "./stb_image.h"
 var $343=$v_max; //@line 2730 "./stb_image.h"
 var $344=(((($342>>>0))/(($343>>>0)))&-1); //@line 2730 "./stb_image.h"
 var $345=$i; //@line 2730 "./stb_image.h"
 var $346=$2; //@line 2730 "./stb_image.h"
 var $347=(($346+17820)|0); //@line 2730 "./stb_image.h"
 var $348=(($347+((($345)*(72))&-1))|0); //@line 2730 "./stb_image.h"
 var $349=(($348+32)|0); //@line 2730 "./stb_image.h"
 HEAP32[(($349)>>2)]=$344; //@line 2730 "./stb_image.h"
 var $350=$2; //@line 2735 "./stb_image.h"
 var $351=(($350+17804)|0); //@line 2735 "./stb_image.h"
 var $352=HEAP32[(($351)>>2)]; //@line 2735 "./stb_image.h"
 var $353=$i; //@line 2735 "./stb_image.h"
 var $354=$2; //@line 2735 "./stb_image.h"
 var $355=(($354+17820)|0); //@line 2735 "./stb_image.h"
 var $356=(($355+((($353)*(72))&-1))|0); //@line 2735 "./stb_image.h"
 var $357=(($356+4)|0); //@line 2735 "./stb_image.h"
 var $358=HEAP32[(($357)>>2)]; //@line 2735 "./stb_image.h"
 var $359=(Math_imul($352,$358)|0); //@line 2735 "./stb_image.h"
 var $360=($359<<3); //@line 2735 "./stb_image.h"
 var $361=$i; //@line 2735 "./stb_image.h"
 var $362=$2; //@line 2735 "./stb_image.h"
 var $363=(($362+17820)|0); //@line 2735 "./stb_image.h"
 var $364=(($363+((($361)*(72))&-1))|0); //@line 2735 "./stb_image.h"
 var $365=(($364+36)|0); //@line 2735 "./stb_image.h"
 HEAP32[(($365)>>2)]=$360; //@line 2735 "./stb_image.h"
 var $366=$2; //@line 2736 "./stb_image.h"
 var $367=(($366+17808)|0); //@line 2736 "./stb_image.h"
 var $368=HEAP32[(($367)>>2)]; //@line 2736 "./stb_image.h"
 var $369=$i; //@line 2736 "./stb_image.h"
 var $370=$2; //@line 2736 "./stb_image.h"
 var $371=(($370+17820)|0); //@line 2736 "./stb_image.h"
 var $372=(($371+((($369)*(72))&-1))|0); //@line 2736 "./stb_image.h"
 var $373=(($372+8)|0); //@line 2736 "./stb_image.h"
 var $374=HEAP32[(($373)>>2)]; //@line 2736 "./stb_image.h"
 var $375=(Math_imul($368,$374)|0); //@line 2736 "./stb_image.h"
 var $376=($375<<3); //@line 2736 "./stb_image.h"
 var $377=$i; //@line 2736 "./stb_image.h"
 var $378=$2; //@line 2736 "./stb_image.h"
 var $379=(($378+17820)|0); //@line 2736 "./stb_image.h"
 var $380=(($379+((($377)*(72))&-1))|0); //@line 2736 "./stb_image.h"
 var $381=(($380+40)|0); //@line 2736 "./stb_image.h"
 HEAP32[(($381)>>2)]=$376; //@line 2736 "./stb_image.h"
 var $382=$i; //@line 2737 "./stb_image.h"
 var $383=$2; //@line 2737 "./stb_image.h"
 var $384=(($383+17820)|0); //@line 2737 "./stb_image.h"
 var $385=(($384+((($382)*(72))&-1))|0); //@line 2737 "./stb_image.h"
 var $386=(($385+36)|0); //@line 2737 "./stb_image.h"
 var $387=HEAP32[(($386)>>2)]; //@line 2737 "./stb_image.h"
 var $388=$i; //@line 2737 "./stb_image.h"
 var $389=$2; //@line 2737 "./stb_image.h"
 var $390=(($389+17820)|0); //@line 2737 "./stb_image.h"
 var $391=(($390+((($388)*(72))&-1))|0); //@line 2737 "./stb_image.h"
 var $392=(($391+40)|0); //@line 2737 "./stb_image.h"
 var $393=HEAP32[(($392)>>2)]; //@line 2737 "./stb_image.h"
 var $394=(Math_imul($387,$393)|0); //@line 2737 "./stb_image.h"
 var $395=((($394)+(15))|0); //@line 2737 "./stb_image.h"
 var $396=_stbi__malloc($395); //@line 2737 "./stb_image.h"
 var $397=$i; //@line 2737 "./stb_image.h"
 var $398=$2; //@line 2737 "./stb_image.h"
 var $399=(($398+17820)|0); //@line 2737 "./stb_image.h"
 var $400=(($399+((($397)*(72))&-1))|0); //@line 2737 "./stb_image.h"
 var $401=(($400+48)|0); //@line 2737 "./stb_image.h"
 HEAP32[(($401)>>2)]=$396; //@line 2737 "./stb_image.h"
 var $402=$i; //@line 2739 "./stb_image.h"
 var $403=$2; //@line 2739 "./stb_image.h"
 var $404=(($403+17820)|0); //@line 2739 "./stb_image.h"
 var $405=(($404+((($402)*(72))&-1))|0); //@line 2739 "./stb_image.h"
 var $406=(($405+48)|0); //@line 2739 "./stb_image.h"
 var $407=HEAP32[(($406)>>2)]; //@line 2739 "./stb_image.h"
 var $408=($407|0)==0; //@line 2739 "./stb_image.h"
 if($408){label=49;break;}else{label=54;break;} //@line 2739 "./stb_image.h"
 case 49: 
 var $410=$i; //@line 2740 "./stb_image.h"
 var $411=((($410)-(1))|0); //@line 2740 "./stb_image.h"
 $i=$411; //@line 2740 "./stb_image.h"
 label=50;break; //@line 2740 "./stb_image.h"
 case 50: 
 var $413=$i; //@line 2740 "./stb_image.h"
 var $414=($413|0)>=0; //@line 2740 "./stb_image.h"
 if($414){label=51;break;}else{label=53;break;} //@line 2740 "./stb_image.h"
 case 51: 
 var $416=$i; //@line 2741 "./stb_image.h"
 var $417=$2; //@line 2741 "./stb_image.h"
 var $418=(($417+17820)|0); //@line 2741 "./stb_image.h"
 var $419=(($418+((($416)*(72))&-1))|0); //@line 2741 "./stb_image.h"
 var $420=(($419+48)|0); //@line 2741 "./stb_image.h"
 var $421=HEAP32[(($420)>>2)]; //@line 2741 "./stb_image.h"
 _free($421); //@line 2741 "./stb_image.h"
 var $422=$i; //@line 2742 "./stb_image.h"
 var $423=$2; //@line 2742 "./stb_image.h"
 var $424=(($423+17820)|0); //@line 2742 "./stb_image.h"
 var $425=(($424+((($422)*(72))&-1))|0); //@line 2742 "./stb_image.h"
 var $426=(($425+44)|0); //@line 2742 "./stb_image.h"
 HEAP32[(($426)>>2)]=0; //@line 2742 "./stb_image.h"
 label=52;break; //@line 2743 "./stb_image.h"
 case 52: 
 var $428=$i; //@line 2740 "./stb_image.h"
 var $429=((($428)-(1))|0); //@line 2740 "./stb_image.h"
 $i=$429; //@line 2740 "./stb_image.h"
 label=50;break; //@line 2740 "./stb_image.h"
 case 53: 
 var $431=_stbi__err(138952); //@line 2744 "./stb_image.h"
 $1=$431; //@line 2744 "./stb_image.h"
 label=60;break; //@line 2744 "./stb_image.h"
 case 54: 
 var $433=$i; //@line 2747 "./stb_image.h"
 var $434=$2; //@line 2747 "./stb_image.h"
 var $435=(($434+17820)|0); //@line 2747 "./stb_image.h"
 var $436=(($435+((($433)*(72))&-1))|0); //@line 2747 "./stb_image.h"
 var $437=(($436+48)|0); //@line 2747 "./stb_image.h"
 var $438=HEAP32[(($437)>>2)]; //@line 2747 "./stb_image.h"
 var $439=$438; //@line 2747 "./stb_image.h"
 var $440=((($439)+(15))|0); //@line 2747 "./stb_image.h"
 var $441=$440&-16; //@line 2747 "./stb_image.h"
 var $442=$441; //@line 2747 "./stb_image.h"
 var $443=$i; //@line 2747 "./stb_image.h"
 var $444=$2; //@line 2747 "./stb_image.h"
 var $445=(($444+17820)|0); //@line 2747 "./stb_image.h"
 var $446=(($445+((($443)*(72))&-1))|0); //@line 2747 "./stb_image.h"
 var $447=(($446+44)|0); //@line 2747 "./stb_image.h"
 HEAP32[(($447)>>2)]=$442; //@line 2747 "./stb_image.h"
 var $448=$i; //@line 2748 "./stb_image.h"
 var $449=$2; //@line 2748 "./stb_image.h"
 var $450=(($449+17820)|0); //@line 2748 "./stb_image.h"
 var $451=(($450+((($448)*(72))&-1))|0); //@line 2748 "./stb_image.h"
 var $452=(($451+56)|0); //@line 2748 "./stb_image.h"
 HEAP32[(($452)>>2)]=0; //@line 2748 "./stb_image.h"
 var $453=$2; //@line 2749 "./stb_image.h"
 var $454=(($453+18124)|0); //@line 2749 "./stb_image.h"
 var $455=HEAP32[(($454)>>2)]; //@line 2749 "./stb_image.h"
 var $456=($455|0)!=0; //@line 2749 "./stb_image.h"
 if($456){label=55;break;}else{label=56;break;} //@line 2749 "./stb_image.h"
 case 55: 
 var $458=$i; //@line 2750 "./stb_image.h"
 var $459=$2; //@line 2750 "./stb_image.h"
 var $460=(($459+17820)|0); //@line 2750 "./stb_image.h"
 var $461=(($460+((($458)*(72))&-1))|0); //@line 2750 "./stb_image.h"
 var $462=(($461+36)|0); //@line 2750 "./stb_image.h"
 var $463=HEAP32[(($462)>>2)]; //@line 2750 "./stb_image.h"
 var $464=((($463)+(7))|0); //@line 2750 "./stb_image.h"
 var $465=$464>>3; //@line 2750 "./stb_image.h"
 var $466=$i; //@line 2750 "./stb_image.h"
 var $467=$2; //@line 2750 "./stb_image.h"
 var $468=(($467+17820)|0); //@line 2750 "./stb_image.h"
 var $469=(($468+((($466)*(72))&-1))|0); //@line 2750 "./stb_image.h"
 var $470=(($469+64)|0); //@line 2750 "./stb_image.h"
 HEAP32[(($470)>>2)]=$465; //@line 2750 "./stb_image.h"
 var $471=$i; //@line 2751 "./stb_image.h"
 var $472=$2; //@line 2751 "./stb_image.h"
 var $473=(($472+17820)|0); //@line 2751 "./stb_image.h"
 var $474=(($473+((($471)*(72))&-1))|0); //@line 2751 "./stb_image.h"
 var $475=(($474+40)|0); //@line 2751 "./stb_image.h"
 var $476=HEAP32[(($475)>>2)]; //@line 2751 "./stb_image.h"
 var $477=((($476)+(7))|0); //@line 2751 "./stb_image.h"
 var $478=$477>>3; //@line 2751 "./stb_image.h"
 var $479=$i; //@line 2751 "./stb_image.h"
 var $480=$2; //@line 2751 "./stb_image.h"
 var $481=(($480+17820)|0); //@line 2751 "./stb_image.h"
 var $482=(($481+((($479)*(72))&-1))|0); //@line 2751 "./stb_image.h"
 var $483=(($482+68)|0); //@line 2751 "./stb_image.h"
 HEAP32[(($483)>>2)]=$478; //@line 2751 "./stb_image.h"
 var $484=$i; //@line 2752 "./stb_image.h"
 var $485=$2; //@line 2752 "./stb_image.h"
 var $486=(($485+17820)|0); //@line 2752 "./stb_image.h"
 var $487=(($486+((($484)*(72))&-1))|0); //@line 2752 "./stb_image.h"
 var $488=(($487+64)|0); //@line 2752 "./stb_image.h"
 var $489=HEAP32[(($488)>>2)]; //@line 2752 "./stb_image.h"
 var $490=$i; //@line 2752 "./stb_image.h"
 var $491=$2; //@line 2752 "./stb_image.h"
 var $492=(($491+17820)|0); //@line 2752 "./stb_image.h"
 var $493=(($492+((($490)*(72))&-1))|0); //@line 2752 "./stb_image.h"
 var $494=(($493+68)|0); //@line 2752 "./stb_image.h"
 var $495=HEAP32[(($494)>>2)]; //@line 2752 "./stb_image.h"
 var $496=(Math_imul($489,$495)|0); //@line 2752 "./stb_image.h"
 var $497=($496<<6); //@line 2752 "./stb_image.h"
 var $498=($497<<1); //@line 2752 "./stb_image.h"
 var $499=((($498)+(15))|0); //@line 2752 "./stb_image.h"
 var $500=_malloc($499); //@line 2752 "./stb_image.h"
 var $501=$i; //@line 2752 "./stb_image.h"
 var $502=$2; //@line 2752 "./stb_image.h"
 var $503=(($502+17820)|0); //@line 2752 "./stb_image.h"
 var $504=(($503+((($501)*(72))&-1))|0); //@line 2752 "./stb_image.h"
 var $505=(($504+52)|0); //@line 2752 "./stb_image.h"
 HEAP32[(($505)>>2)]=$500; //@line 2752 "./stb_image.h"
 var $506=$i; //@line 2753 "./stb_image.h"
 var $507=$2; //@line 2753 "./stb_image.h"
 var $508=(($507+17820)|0); //@line 2753 "./stb_image.h"
 var $509=(($508+((($506)*(72))&-1))|0); //@line 2753 "./stb_image.h"
 var $510=(($509+52)|0); //@line 2753 "./stb_image.h"
 var $511=HEAP32[(($510)>>2)]; //@line 2753 "./stb_image.h"
 var $512=$511; //@line 2753 "./stb_image.h"
 var $513=((($512)+(15))|0); //@line 2753 "./stb_image.h"
 var $514=$513&-16; //@line 2753 "./stb_image.h"
 var $515=$514; //@line 2753 "./stb_image.h"
 var $516=$i; //@line 2753 "./stb_image.h"
 var $517=$2; //@line 2753 "./stb_image.h"
 var $518=(($517+17820)|0); //@line 2753 "./stb_image.h"
 var $519=(($518+((($516)*(72))&-1))|0); //@line 2753 "./stb_image.h"
 var $520=(($519+60)|0); //@line 2753 "./stb_image.h"
 HEAP32[(($520)>>2)]=$515; //@line 2753 "./stb_image.h"
 label=57;break; //@line 2754 "./stb_image.h"
 case 56: 
 var $522=$i; //@line 2755 "./stb_image.h"
 var $523=$2; //@line 2755 "./stb_image.h"
 var $524=(($523+17820)|0); //@line 2755 "./stb_image.h"
 var $525=(($524+((($522)*(72))&-1))|0); //@line 2755 "./stb_image.h"
 var $526=(($525+60)|0); //@line 2755 "./stb_image.h"
 HEAP32[(($526)>>2)]=0; //@line 2755 "./stb_image.h"
 var $527=$i; //@line 2756 "./stb_image.h"
 var $528=$2; //@line 2756 "./stb_image.h"
 var $529=(($528+17820)|0); //@line 2756 "./stb_image.h"
 var $530=(($529+((($527)*(72))&-1))|0); //@line 2756 "./stb_image.h"
 var $531=(($530+52)|0); //@line 2756 "./stb_image.h"
 HEAP32[(($531)>>2)]=0; //@line 2756 "./stb_image.h"
 label=57;break;
 case 57: 
 label=58;break; //@line 2758 "./stb_image.h"
 case 58: 
 var $534=$i; //@line 2727 "./stb_image.h"
 var $535=((($534)+(1))|0); //@line 2727 "./stb_image.h"
 $i=$535; //@line 2727 "./stb_image.h"
 label=47;break; //@line 2727 "./stb_image.h"
 case 59: 
 $1=1; //@line 2760 "./stb_image.h"
 label=60;break; //@line 2760 "./stb_image.h"
 case 60: 
 var $538=$1; //@line 2761 "./stb_image.h"
 STACKTOP=sp;return $538; //@line 2761 "./stb_image.h"
  default: assert(0, "bad label: " + label);
 }

}


function _stbi__build_huffman($h,$count){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $i;
 var $j;
 var $k;
 var $code;
 var $s;
 var $c;
 var $m;
 $2=$h;
 $3=$count;
 $k=0; //@line 1500 "./stb_image.h"
 $i=0; //@line 1502 "./stb_image.h"
 label=2;break; //@line 1502 "./stb_image.h"
 case 2: 
 var $5=$i; //@line 1502 "./stb_image.h"
 var $6=($5|0)<16; //@line 1502 "./stb_image.h"
 if($6){label=3;break;}else{label=9;break;} //@line 1502 "./stb_image.h"
 case 3: 
 $j=0; //@line 1503 "./stb_image.h"
 label=4;break; //@line 1503 "./stb_image.h"
 case 4: 
 var $9=$j; //@line 1503 "./stb_image.h"
 var $10=$i; //@line 1503 "./stb_image.h"
 var $11=$3; //@line 1503 "./stb_image.h"
 var $12=(($11+($10<<2))|0); //@line 1503 "./stb_image.h"
 var $13=HEAP32[(($12)>>2)]; //@line 1503 "./stb_image.h"
 var $14=($9|0)<($13|0); //@line 1503 "./stb_image.h"
 if($14){label=5;break;}else{label=7;break;} //@line 1503 "./stb_image.h"
 case 5: 
 var $16=$i; //@line 1504 "./stb_image.h"
 var $17=((($16)+(1))|0); //@line 1504 "./stb_image.h"
 var $18=(($17)&255); //@line 1504 "./stb_image.h"
 var $19=$k; //@line 1504 "./stb_image.h"
 var $20=((($19)+(1))|0); //@line 1504 "./stb_image.h"
 $k=$20; //@line 1504 "./stb_image.h"
 var $21=$2; //@line 1504 "./stb_image.h"
 var $22=(($21+1280)|0); //@line 1504 "./stb_image.h"
 var $23=(($22+$19)|0); //@line 1504 "./stb_image.h"
 HEAP8[($23)]=$18; //@line 1504 "./stb_image.h"
 label=6;break; //@line 1504 "./stb_image.h"
 case 6: 
 var $25=$j; //@line 1503 "./stb_image.h"
 var $26=((($25)+(1))|0); //@line 1503 "./stb_image.h"
 $j=$26; //@line 1503 "./stb_image.h"
 label=4;break; //@line 1503 "./stb_image.h"
 case 7: 
 label=8;break; //@line 1504 "./stb_image.h"
 case 8: 
 var $29=$i; //@line 1502 "./stb_image.h"
 var $30=((($29)+(1))|0); //@line 1502 "./stb_image.h"
 $i=$30; //@line 1502 "./stb_image.h"
 label=2;break; //@line 1502 "./stb_image.h"
 case 9: 
 var $32=$k; //@line 1505 "./stb_image.h"
 var $33=$2; //@line 1505 "./stb_image.h"
 var $34=(($33+1280)|0); //@line 1505 "./stb_image.h"
 var $35=(($34+$32)|0); //@line 1505 "./stb_image.h"
 HEAP8[($35)]=0; //@line 1505 "./stb_image.h"
 $code=0; //@line 1508 "./stb_image.h"
 $k=0; //@line 1509 "./stb_image.h"
 $j=1; //@line 1510 "./stb_image.h"
 label=10;break; //@line 1510 "./stb_image.h"
 case 10: 
 var $37=$j; //@line 1510 "./stb_image.h"
 var $38=($37|0)<=16; //@line 1510 "./stb_image.h"
 if($38){label=11;break;}else{label=20;break;} //@line 1510 "./stb_image.h"
 case 11: 
 var $40=$k; //@line 1512 "./stb_image.h"
 var $41=$code; //@line 1512 "./stb_image.h"
 var $42=((($40)-($41))|0); //@line 1512 "./stb_image.h"
 var $43=$j; //@line 1512 "./stb_image.h"
 var $44=$2; //@line 1512 "./stb_image.h"
 var $45=(($44+1612)|0); //@line 1512 "./stb_image.h"
 var $46=(($45+($43<<2))|0); //@line 1512 "./stb_image.h"
 HEAP32[(($46)>>2)]=$42; //@line 1512 "./stb_image.h"
 var $47=$k; //@line 1513 "./stb_image.h"
 var $48=$2; //@line 1513 "./stb_image.h"
 var $49=(($48+1280)|0); //@line 1513 "./stb_image.h"
 var $50=(($49+$47)|0); //@line 1513 "./stb_image.h"
 var $51=HEAP8[($50)]; //@line 1513 "./stb_image.h"
 var $52=($51&255); //@line 1513 "./stb_image.h"
 var $53=$j; //@line 1513 "./stb_image.h"
 var $54=($52|0)==($53|0); //@line 1513 "./stb_image.h"
 if($54){label=12;break;}else{label=18;break;} //@line 1513 "./stb_image.h"
 case 12: 
 label=13;break; //@line 1514 "./stb_image.h"
 case 13: 
 var $57=$k; //@line 1514 "./stb_image.h"
 var $58=$2; //@line 1514 "./stb_image.h"
 var $59=(($58+1280)|0); //@line 1514 "./stb_image.h"
 var $60=(($59+$57)|0); //@line 1514 "./stb_image.h"
 var $61=HEAP8[($60)]; //@line 1514 "./stb_image.h"
 var $62=($61&255); //@line 1514 "./stb_image.h"
 var $63=$j; //@line 1514 "./stb_image.h"
 var $64=($62|0)==($63|0); //@line 1514 "./stb_image.h"
 if($64){label=14;break;}else{label=15;break;} //@line 1514 "./stb_image.h"
 case 14: 
 var $66=$code; //@line 1515 "./stb_image.h"
 var $67=((($66)+(1))|0); //@line 1515 "./stb_image.h"
 $code=$67; //@line 1515 "./stb_image.h"
 var $68=(($66)&65535); //@line 1515 "./stb_image.h"
 var $69=$k; //@line 1515 "./stb_image.h"
 var $70=((($69)+(1))|0); //@line 1515 "./stb_image.h"
 $k=$70; //@line 1515 "./stb_image.h"
 var $71=$2; //@line 1515 "./stb_image.h"
 var $72=(($71+512)|0); //@line 1515 "./stb_image.h"
 var $73=(($72+($69<<1))|0); //@line 1515 "./stb_image.h"
 HEAP16[(($73)>>1)]=$68; //@line 1515 "./stb_image.h"
 label=13;break; //@line 1515 "./stb_image.h"
 case 15: 
 var $75=$code; //@line 1516 "./stb_image.h"
 var $76=((($75)-(1))|0); //@line 1516 "./stb_image.h"
 var $77=$j; //@line 1516 "./stb_image.h"
 var $78=1<<$77; //@line 1516 "./stb_image.h"
 var $79=($76|0)>=($78|0); //@line 1516 "./stb_image.h"
 if($79){label=16;break;}else{label=17;break;} //@line 1516 "./stb_image.h"
 case 16: 
 var $81=_stbi__err(138200); //@line 1516 "./stb_image.h"
 $1=$81; //@line 1516 "./stb_image.h"
 label=31;break; //@line 1516 "./stb_image.h"
 case 17: 
 label=18;break; //@line 1517 "./stb_image.h"
 case 18: 
 var $84=$code; //@line 1519 "./stb_image.h"
 var $85=$j; //@line 1519 "./stb_image.h"
 var $86=(((16)-($85))|0); //@line 1519 "./stb_image.h"
 var $87=$84<<$86; //@line 1519 "./stb_image.h"
 var $88=$j; //@line 1519 "./stb_image.h"
 var $89=$2; //@line 1519 "./stb_image.h"
 var $90=(($89+1540)|0); //@line 1519 "./stb_image.h"
 var $91=(($90+($88<<2))|0); //@line 1519 "./stb_image.h"
 HEAP32[(($91)>>2)]=$87; //@line 1519 "./stb_image.h"
 var $92=$code; //@line 1520 "./stb_image.h"
 var $93=$92<<1; //@line 1520 "./stb_image.h"
 $code=$93; //@line 1520 "./stb_image.h"
 label=19;break; //@line 1521 "./stb_image.h"
 case 19: 
 var $95=$j; //@line 1510 "./stb_image.h"
 var $96=((($95)+(1))|0); //@line 1510 "./stb_image.h"
 $j=$96; //@line 1510 "./stb_image.h"
 label=10;break; //@line 1510 "./stb_image.h"
 case 20: 
 var $98=$j; //@line 1522 "./stb_image.h"
 var $99=$2; //@line 1522 "./stb_image.h"
 var $100=(($99+1540)|0); //@line 1522 "./stb_image.h"
 var $101=(($100+($98<<2))|0); //@line 1522 "./stb_image.h"
 HEAP32[(($101)>>2)]=-1; //@line 1522 "./stb_image.h"
 var $102=$2; //@line 1525 "./stb_image.h"
 var $103=(($102)|0); //@line 1525 "./stb_image.h"
 var $104=$103; //@line 1525 "./stb_image.h"
 _memset($104, -1, 512)|0; //@line 1525 "./stb_image.h"
 $i=0; //@line 1526 "./stb_image.h"
 label=21;break; //@line 1526 "./stb_image.h"
 case 21: 
 var $106=$i; //@line 1526 "./stb_image.h"
 var $107=$k; //@line 1526 "./stb_image.h"
 var $108=($106|0)<($107|0); //@line 1526 "./stb_image.h"
 if($108){label=22;break;}else{label=30;break;} //@line 1526 "./stb_image.h"
 case 22: 
 var $110=$i; //@line 1527 "./stb_image.h"
 var $111=$2; //@line 1527 "./stb_image.h"
 var $112=(($111+1280)|0); //@line 1527 "./stb_image.h"
 var $113=(($112+$110)|0); //@line 1527 "./stb_image.h"
 var $114=HEAP8[($113)]; //@line 1527 "./stb_image.h"
 var $115=($114&255); //@line 1527 "./stb_image.h"
 $s=$115; //@line 1527 "./stb_image.h"
 var $116=$s; //@line 1528 "./stb_image.h"
 var $117=($116|0)<=9; //@line 1528 "./stb_image.h"
 if($117){label=23;break;}else{label=28;break;} //@line 1528 "./stb_image.h"
 case 23: 
 var $119=$i; //@line 1529 "./stb_image.h"
 var $120=$2; //@line 1529 "./stb_image.h"
 var $121=(($120+512)|0); //@line 1529 "./stb_image.h"
 var $122=(($121+($119<<1))|0); //@line 1529 "./stb_image.h"
 var $123=HEAP16[(($122)>>1)]; //@line 1529 "./stb_image.h"
 var $124=($123&65535); //@line 1529 "./stb_image.h"
 var $125=$s; //@line 1529 "./stb_image.h"
 var $126=(((9)-($125))|0); //@line 1529 "./stb_image.h"
 var $127=$124<<$126; //@line 1529 "./stb_image.h"
 $c=$127; //@line 1529 "./stb_image.h"
 var $128=$s; //@line 1530 "./stb_image.h"
 var $129=(((9)-($128))|0); //@line 1530 "./stb_image.h"
 var $130=1<<$129; //@line 1530 "./stb_image.h"
 $m=$130; //@line 1530 "./stb_image.h"
 $j=0; //@line 1531 "./stb_image.h"
 label=24;break; //@line 1531 "./stb_image.h"
 case 24: 
 var $132=$j; //@line 1531 "./stb_image.h"
 var $133=$m; //@line 1531 "./stb_image.h"
 var $134=($132|0)<($133|0); //@line 1531 "./stb_image.h"
 if($134){label=25;break;}else{label=27;break;} //@line 1531 "./stb_image.h"
 case 25: 
 var $136=$i; //@line 1532 "./stb_image.h"
 var $137=(($136)&255); //@line 1532 "./stb_image.h"
 var $138=$c; //@line 1532 "./stb_image.h"
 var $139=$j; //@line 1532 "./stb_image.h"
 var $140=((($138)+($139))|0); //@line 1532 "./stb_image.h"
 var $141=$2; //@line 1532 "./stb_image.h"
 var $142=(($141)|0); //@line 1532 "./stb_image.h"
 var $143=(($142+$140)|0); //@line 1532 "./stb_image.h"
 HEAP8[($143)]=$137; //@line 1532 "./stb_image.h"
 label=26;break; //@line 1533 "./stb_image.h"
 case 26: 
 var $145=$j; //@line 1531 "./stb_image.h"
 var $146=((($145)+(1))|0); //@line 1531 "./stb_image.h"
 $j=$146; //@line 1531 "./stb_image.h"
 label=24;break; //@line 1531 "./stb_image.h"
 case 27: 
 label=28;break; //@line 1534 "./stb_image.h"
 case 28: 
 label=29;break; //@line 1535 "./stb_image.h"
 case 29: 
 var $150=$i; //@line 1526 "./stb_image.h"
 var $151=((($150)+(1))|0); //@line 1526 "./stb_image.h"
 $i=$151; //@line 1526 "./stb_image.h"
 label=21;break; //@line 1526 "./stb_image.h"
 case 30: 
 $1=1; //@line 1536 "./stb_image.h"
 label=31;break; //@line 1536 "./stb_image.h"
 case 31: 
 var $154=$1; //@line 1537 "./stb_image.h"
 STACKTOP=sp;return $154; //@line 1537 "./stb_image.h"
  default: assert(0, "bad label: " + label);
 }

}


function _stbi__build_fast_ac($fast_ac,$h){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $i;
 var $fast;
 var $rs;
 var $run;
 var $magbits;
 var $len;
 var $k;
 var $m;
 $1=$fast_ac;
 $2=$h;
 $i=0; //@line 1544 "./stb_image.h"
 label=2;break; //@line 1544 "./stb_image.h"
 case 2: 
 var $4=$i; //@line 1544 "./stb_image.h"
 var $5=($4|0)<512; //@line 1544 "./stb_image.h"
 if($5){label=3;break;}else{label=15;break;} //@line 1544 "./stb_image.h"
 case 3: 
 var $7=$i; //@line 1545 "./stb_image.h"
 var $8=$2; //@line 1545 "./stb_image.h"
 var $9=(($8)|0); //@line 1545 "./stb_image.h"
 var $10=(($9+$7)|0); //@line 1545 "./stb_image.h"
 var $11=HEAP8[($10)]; //@line 1545 "./stb_image.h"
 $fast=$11; //@line 1545 "./stb_image.h"
 var $12=$i; //@line 1546 "./stb_image.h"
 var $13=$1; //@line 1546 "./stb_image.h"
 var $14=(($13+($12<<1))|0); //@line 1546 "./stb_image.h"
 HEAP16[(($14)>>1)]=0; //@line 1546 "./stb_image.h"
 var $15=$fast; //@line 1547 "./stb_image.h"
 var $16=($15&255); //@line 1547 "./stb_image.h"
 var $17=($16|0)<255; //@line 1547 "./stb_image.h"
 if($17){label=4;break;}else{label=13;break;} //@line 1547 "./stb_image.h"
 case 4: 
 var $19=$fast; //@line 1548 "./stb_image.h"
 var $20=($19&255); //@line 1548 "./stb_image.h"
 var $21=$2; //@line 1548 "./stb_image.h"
 var $22=(($21+1024)|0); //@line 1548 "./stb_image.h"
 var $23=(($22+$20)|0); //@line 1548 "./stb_image.h"
 var $24=HEAP8[($23)]; //@line 1548 "./stb_image.h"
 var $25=($24&255); //@line 1548 "./stb_image.h"
 $rs=$25; //@line 1548 "./stb_image.h"
 var $26=$rs; //@line 1549 "./stb_image.h"
 var $27=$26>>4; //@line 1549 "./stb_image.h"
 var $28=$27&15; //@line 1549 "./stb_image.h"
 $run=$28; //@line 1549 "./stb_image.h"
 var $29=$rs; //@line 1550 "./stb_image.h"
 var $30=$29&15; //@line 1550 "./stb_image.h"
 $magbits=$30; //@line 1550 "./stb_image.h"
 var $31=$fast; //@line 1551 "./stb_image.h"
 var $32=($31&255); //@line 1551 "./stb_image.h"
 var $33=$2; //@line 1551 "./stb_image.h"
 var $34=(($33+1280)|0); //@line 1551 "./stb_image.h"
 var $35=(($34+$32)|0); //@line 1551 "./stb_image.h"
 var $36=HEAP8[($35)]; //@line 1551 "./stb_image.h"
 var $37=($36&255); //@line 1551 "./stb_image.h"
 $len=$37; //@line 1551 "./stb_image.h"
 var $38=$magbits; //@line 1553 "./stb_image.h"
 var $39=($38|0)!=0; //@line 1553 "./stb_image.h"
 if($39){label=5;break;}else{label=12;break;} //@line 1553 "./stb_image.h"
 case 5: 
 var $41=$len; //@line 1553 "./stb_image.h"
 var $42=$magbits; //@line 1553 "./stb_image.h"
 var $43=((($41)+($42))|0); //@line 1553 "./stb_image.h"
 var $44=($43|0)<=9; //@line 1553 "./stb_image.h"
 if($44){label=6;break;}else{label=12;break;} //@line 1553 "./stb_image.h"
 case 6: 
 var $46=$i; //@line 1555 "./stb_image.h"
 var $47=$len; //@line 1555 "./stb_image.h"
 var $48=$46<<$47; //@line 1555 "./stb_image.h"
 var $49=$48&511; //@line 1555 "./stb_image.h"
 var $50=$magbits; //@line 1555 "./stb_image.h"
 var $51=(((9)-($50))|0); //@line 1555 "./stb_image.h"
 var $52=$49>>($51|0); //@line 1555 "./stb_image.h"
 $k=$52; //@line 1555 "./stb_image.h"
 var $53=$magbits; //@line 1556 "./stb_image.h"
 var $54=((($53)-(1))|0); //@line 1556 "./stb_image.h"
 var $55=1<<$54; //@line 1556 "./stb_image.h"
 $m=$55; //@line 1556 "./stb_image.h"
 var $56=$k; //@line 1557 "./stb_image.h"
 var $57=$m; //@line 1557 "./stb_image.h"
 var $58=($56|0)<($57|0); //@line 1557 "./stb_image.h"
 if($58){label=7;break;}else{label=8;break;} //@line 1557 "./stb_image.h"
 case 7: 
 var $60=$magbits; //@line 1557 "./stb_image.h"
 var $61=-1<<$60; //@line 1557 "./stb_image.h"
 var $62=((($61)+(1))|0); //@line 1557 "./stb_image.h"
 var $63=$k; //@line 1557 "./stb_image.h"
 var $64=((($63)+($62))|0); //@line 1557 "./stb_image.h"
 $k=$64; //@line 1557 "./stb_image.h"
 label=8;break; //@line 1557 "./stb_image.h"
 case 8: 
 var $66=$k; //@line 1559 "./stb_image.h"
 var $67=($66|0)>=-128; //@line 1559 "./stb_image.h"
 if($67){label=9;break;}else{label=11;break;} //@line 1559 "./stb_image.h"
 case 9: 
 var $69=$k; //@line 1559 "./stb_image.h"
 var $70=($69|0)<=127; //@line 1559 "./stb_image.h"
 if($70){label=10;break;}else{label=11;break;} //@line 1559 "./stb_image.h"
 case 10: 
 var $72=$k; //@line 1560 "./stb_image.h"
 var $73=$72<<8; //@line 1560 "./stb_image.h"
 var $74=$run; //@line 1560 "./stb_image.h"
 var $75=$74<<4; //@line 1560 "./stb_image.h"
 var $76=((($73)+($75))|0); //@line 1560 "./stb_image.h"
 var $77=$len; //@line 1560 "./stb_image.h"
 var $78=$magbits; //@line 1560 "./stb_image.h"
 var $79=((($77)+($78))|0); //@line 1560 "./stb_image.h"
 var $80=((($76)+($79))|0); //@line 1560 "./stb_image.h"
 var $81=(($80)&65535); //@line 1560 "./stb_image.h"
 var $82=$i; //@line 1560 "./stb_image.h"
 var $83=$1; //@line 1560 "./stb_image.h"
 var $84=(($83+($82<<1))|0); //@line 1560 "./stb_image.h"
 HEAP16[(($84)>>1)]=$81; //@line 1560 "./stb_image.h"
 label=11;break; //@line 1560 "./stb_image.h"
 case 11: 
 label=12;break; //@line 1561 "./stb_image.h"
 case 12: 
 label=13;break; //@line 1562 "./stb_image.h"
 case 13: 
 label=14;break; //@line 1563 "./stb_image.h"
 case 14: 
 var $89=$i; //@line 1544 "./stb_image.h"
 var $90=((($89)+(1))|0); //@line 1544 "./stb_image.h"
 $i=$90; //@line 1544 "./stb_image.h"
 label=2;break; //@line 1544 "./stb_image.h"
 case 15: 
 STACKTOP=sp;return; //@line 1564 "./stb_image.h"
  default: assert(0, "bad label: " + label);
 }

}


function _stbi__hdr_test_core($s){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $signature;
 var $i;
 $2=$s;
 $signature=138184; //@line 5780 "./stb_image.h"
 $i=0; //@line 5782 "./stb_image.h"
 label=2;break; //@line 5782 "./stb_image.h"
 case 2: 
 var $4=$i; //@line 5782 "./stb_image.h"
 var $5=$signature; //@line 5782 "./stb_image.h"
 var $6=(($5+$4)|0); //@line 5782 "./stb_image.h"
 var $7=HEAP8[($6)]; //@line 5782 "./stb_image.h"
 var $8=(($7<<24)>>24)!=0; //@line 5782 "./stb_image.h"
 if($8){label=3;break;}else{label=7;break;} //@line 5782 "./stb_image.h"
 case 3: 
 var $10=$2; //@line 5783 "./stb_image.h"
 var $11=_stbi__get8($10); //@line 5783 "./stb_image.h"
 var $12=($11&255); //@line 5783 "./stb_image.h"
 var $13=$i; //@line 5783 "./stb_image.h"
 var $14=$signature; //@line 5783 "./stb_image.h"
 var $15=(($14+$13)|0); //@line 5783 "./stb_image.h"
 var $16=HEAP8[($15)]; //@line 5783 "./stb_image.h"
 var $17=(($16<<24)>>24); //@line 5783 "./stb_image.h"
 var $18=($12|0)!=($17|0); //@line 5783 "./stb_image.h"
 if($18){label=4;break;}else{label=5;break;} //@line 5783 "./stb_image.h"
 case 4: 
 $1=0; //@line 5784 "./stb_image.h"
 label=8;break; //@line 5784 "./stb_image.h"
 case 5: 
 label=6;break; //@line 5784 "./stb_image.h"
 case 6: 
 var $22=$i; //@line 5782 "./stb_image.h"
 var $23=((($22)+(1))|0); //@line 5782 "./stb_image.h"
 $i=$23; //@line 5782 "./stb_image.h"
 label=2;break; //@line 5782 "./stb_image.h"
 case 7: 
 $1=1; //@line 5785 "./stb_image.h"
 label=8;break; //@line 5785 "./stb_image.h"
 case 8: 
 var $26=$1; //@line 5785 "./stb_image.h"
 STACKTOP=sp;return $26; //@line 5785 "./stb_image.h"
  default: assert(0, "bad label: " + label);
 }

}


function _stbi__parse_zlib($a,$parse_header){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $final;
 var $type;
 $2=$a;
 $3=$parse_header;
 var $4=$3; //@line 3771 "./stb_image.h"
 var $5=($4|0)!=0; //@line 3771 "./stb_image.h"
 if($5){label=2;break;}else{label=5;break;} //@line 3771 "./stb_image.h"
 case 2: 
 var $7=$2; //@line 3772 "./stb_image.h"
 var $8=_stbi__parse_zlib_header($7); //@line 3772 "./stb_image.h"
 var $9=($8|0)!=0; //@line 3772 "./stb_image.h"
 if($9){label=4;break;}else{label=3;break;} //@line 3772 "./stb_image.h"
 case 3: 
 $1=0; //@line 3772 "./stb_image.h"
 label=30;break; //@line 3772 "./stb_image.h"
 case 4: 
 label=5;break; //@line 3772 "./stb_image.h"
 case 5: 
 var $13=$2; //@line 3773 "./stb_image.h"
 var $14=(($13+8)|0); //@line 3773 "./stb_image.h"
 HEAP32[(($14)>>2)]=0; //@line 3773 "./stb_image.h"
 var $15=$2; //@line 3774 "./stb_image.h"
 var $16=(($15+12)|0); //@line 3774 "./stb_image.h"
 HEAP32[(($16)>>2)]=0; //@line 3774 "./stb_image.h"
 label=6;break; //@line 3775 "./stb_image.h"
 case 6: 
 var $18=$2; //@line 3776 "./stb_image.h"
 var $19=_stbi__zreceive($18,1); //@line 3776 "./stb_image.h"
 $final=$19; //@line 3776 "./stb_image.h"
 var $20=$2; //@line 3777 "./stb_image.h"
 var $21=_stbi__zreceive($20,2); //@line 3777 "./stb_image.h"
 $type=$21; //@line 3777 "./stb_image.h"
 var $22=$type; //@line 3778 "./stb_image.h"
 var $23=($22|0)==0; //@line 3778 "./stb_image.h"
 if($23){label=7;break;}else{label=10;break;} //@line 3778 "./stb_image.h"
 case 7: 
 var $25=$2; //@line 3779 "./stb_image.h"
 var $26=_stbi__parse_uncomperssed_block($25); //@line 3779 "./stb_image.h"
 var $27=($26|0)!=0; //@line 3779 "./stb_image.h"
 if($27){label=9;break;}else{label=8;break;} //@line 3779 "./stb_image.h"
 case 8: 
 $1=0; //@line 3779 "./stb_image.h"
 label=30;break; //@line 3779 "./stb_image.h"
 case 9: 
 label=27;break; //@line 3780 "./stb_image.h"
 case 10: 
 var $31=$type; //@line 3780 "./stb_image.h"
 var $32=($31|0)==3; //@line 3780 "./stb_image.h"
 if($32){label=11;break;}else{label=12;break;} //@line 3780 "./stb_image.h"
 case 11: 
 $1=0; //@line 3781 "./stb_image.h"
 label=30;break; //@line 3781 "./stb_image.h"
 case 12: 
 var $35=$type; //@line 3783 "./stb_image.h"
 var $36=($35|0)==1; //@line 3783 "./stb_image.h"
 if($36){label=13;break;}else{label=20;break;} //@line 3783 "./stb_image.h"
 case 13: 
 var $38=HEAP8[(140983)]; //@line 3785 "./stb_image.h"
 var $39=(($38<<24)>>24)!=0; //@line 3785 "./stb_image.h"
 if($39){label=15;break;}else{label=14;break;} //@line 3785 "./stb_image.h"
 case 14: 
 _stbi__init_zdefaults(); //@line 3785 "./stb_image.h"
 label=15;break; //@line 3785 "./stb_image.h"
 case 15: 
 var $42=$2; //@line 3786 "./stb_image.h"
 var $43=(($42+32)|0); //@line 3786 "./stb_image.h"
 var $44=_stbi__zbuild_huffman($43,140664,288); //@line 3786 "./stb_image.h"
 var $45=($44|0)!=0; //@line 3786 "./stb_image.h"
 if($45){label=17;break;}else{label=16;break;} //@line 3786 "./stb_image.h"
 case 16: 
 $1=0; //@line 3786 "./stb_image.h"
 label=30;break; //@line 3786 "./stb_image.h"
 case 17: 
 var $48=$2; //@line 3787 "./stb_image.h"
 var $49=(($48+2052)|0); //@line 3787 "./stb_image.h"
 var $50=_stbi__zbuild_huffman($49,140952,32); //@line 3787 "./stb_image.h"
 var $51=($50|0)!=0; //@line 3787 "./stb_image.h"
 if($51){label=19;break;}else{label=18;break;} //@line 3787 "./stb_image.h"
 case 18: 
 $1=0; //@line 3787 "./stb_image.h"
 label=30;break; //@line 3787 "./stb_image.h"
 case 19: 
 label=23;break; //@line 3788 "./stb_image.h"
 case 20: 
 var $55=$2; //@line 3789 "./stb_image.h"
 var $56=_stbi__compute_huffman_codes($55); //@line 3789 "./stb_image.h"
 var $57=($56|0)!=0; //@line 3789 "./stb_image.h"
 if($57){label=22;break;}else{label=21;break;} //@line 3789 "./stb_image.h"
 case 21: 
 $1=0; //@line 3789 "./stb_image.h"
 label=30;break; //@line 3789 "./stb_image.h"
 case 22: 
 label=23;break;
 case 23: 
 var $61=$2; //@line 3791 "./stb_image.h"
 var $62=_stbi__parse_huffman_block($61); //@line 3791 "./stb_image.h"
 var $63=($62|0)!=0; //@line 3791 "./stb_image.h"
 if($63){label=25;break;}else{label=24;break;} //@line 3791 "./stb_image.h"
 case 24: 
 $1=0; //@line 3791 "./stb_image.h"
 label=30;break; //@line 3791 "./stb_image.h"
 case 25: 
 label=26;break;
 case 26: 
 label=27;break;
 case 27: 
 label=28;break; //@line 3793 "./stb_image.h"
 case 28: 
 var $69=$final; //@line 3793 "./stb_image.h"
 var $70=($69|0)!=0; //@line 3793 "./stb_image.h"
 var $71=$70^1; //@line 3793 "./stb_image.h"
 if($71){label=6;break;}else{label=29;break;} //@line 3793 "./stb_image.h"
 case 29: 
 $1=1; //@line 3794 "./stb_image.h"
 label=30;break; //@line 3794 "./stb_image.h"
 case 30: 
 var $74=$1; //@line 3794 "./stb_image.h"
 STACKTOP=sp;return $74; //@line 3794 "./stb_image.h"
  default: assert(0, "bad label: " + label);
 }

}


function _stbi__parse_zlib_header($a){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $cmf;
 var $cm;
 var $flg;
 $2=$a;
 var $3=$2; //@line 3744 "./stb_image.h"
 var $4=_stbi__zget8($3); //@line 3744 "./stb_image.h"
 var $5=($4&255); //@line 3744 "./stb_image.h"
 $cmf=$5; //@line 3744 "./stb_image.h"
 var $6=$cmf; //@line 3745 "./stb_image.h"
 var $7=$6&15; //@line 3745 "./stb_image.h"
 $cm=$7; //@line 3745 "./stb_image.h"
 var $8=$2; //@line 3747 "./stb_image.h"
 var $9=_stbi__zget8($8); //@line 3747 "./stb_image.h"
 var $10=($9&255); //@line 3747 "./stb_image.h"
 $flg=$10; //@line 3747 "./stb_image.h"
 var $11=$cmf; //@line 3748 "./stb_image.h"
 var $12=($11<<8); //@line 3748 "./stb_image.h"
 var $13=$flg; //@line 3748 "./stb_image.h"
 var $14=((($12)+($13))|0); //@line 3748 "./stb_image.h"
 var $15=(((($14|0))%(31))&-1); //@line 3748 "./stb_image.h"
 var $16=($15|0)!=0; //@line 3748 "./stb_image.h"
 if($16){label=2;break;}else{label=3;break;} //@line 3748 "./stb_image.h"
 case 2: 
 var $18=_stbi__err(137848); //@line 3748 "./stb_image.h"
 $1=$18; //@line 3748 "./stb_image.h"
 label=8;break; //@line 3748 "./stb_image.h"
 case 3: 
 var $20=$flg; //@line 3749 "./stb_image.h"
 var $21=$20&32; //@line 3749 "./stb_image.h"
 var $22=($21|0)!=0; //@line 3749 "./stb_image.h"
 if($22){label=4;break;}else{label=5;break;} //@line 3749 "./stb_image.h"
 case 4: 
 var $24=_stbi__err(137816); //@line 3749 "./stb_image.h"
 $1=$24; //@line 3749 "./stb_image.h"
 label=8;break; //@line 3749 "./stb_image.h"
 case 5: 
 var $26=$cm; //@line 3750 "./stb_image.h"
 var $27=($26|0)!=8; //@line 3750 "./stb_image.h"
 if($27){label=6;break;}else{label=7;break;} //@line 3750 "./stb_image.h"
 case 6: 
 var $29=_stbi__err(137800); //@line 3750 "./stb_image.h"
 $1=$29; //@line 3750 "./stb_image.h"
 label=8;break; //@line 3750 "./stb_image.h"
 case 7: 
 $1=1; //@line 3752 "./stb_image.h"
 label=8;break; //@line 3752 "./stb_image.h"
 case 8: 
 var $32=$1; //@line 3753 "./stb_image.h"
 STACKTOP=sp;return $32; //@line 3753 "./stb_image.h"
  default: assert(0, "bad label: " + label);
 }

}


function _stbi__zreceive($z,$n){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $k;
 $1=$z;
 $2=$n;
 var $3=$1; //@line 3554 "./stb_image.h"
 var $4=(($3+8)|0); //@line 3554 "./stb_image.h"
 var $5=HEAP32[(($4)>>2)]; //@line 3554 "./stb_image.h"
 var $6=$2; //@line 3554 "./stb_image.h"
 var $7=($5|0)<($6|0); //@line 3554 "./stb_image.h"
 if($7){label=2;break;}else{label=3;break;} //@line 3554 "./stb_image.h"
 case 2: 
 var $9=$1; //@line 3554 "./stb_image.h"
 _stbi__fill_bits($9); //@line 3554 "./stb_image.h"
 label=3;break; //@line 3554 "./stb_image.h"
 case 3: 
 var $11=$1; //@line 3555 "./stb_image.h"
 var $12=(($11+12)|0); //@line 3555 "./stb_image.h"
 var $13=HEAP32[(($12)>>2)]; //@line 3555 "./stb_image.h"
 var $14=$2; //@line 3555 "./stb_image.h"
 var $15=1<<$14; //@line 3555 "./stb_image.h"
 var $16=((($15)-(1))|0); //@line 3555 "./stb_image.h"
 var $17=$13&$16; //@line 3555 "./stb_image.h"
 $k=$17; //@line 3555 "./stb_image.h"
 var $18=$2; //@line 3556 "./stb_image.h"
 var $19=$1; //@line 3556 "./stb_image.h"
 var $20=(($19+12)|0); //@line 3556 "./stb_image.h"
 var $21=HEAP32[(($20)>>2)]; //@line 3556 "./stb_image.h"
 var $22=$21>>>($18>>>0); //@line 3556 "./stb_image.h"
 HEAP32[(($20)>>2)]=$22; //@line 3556 "./stb_image.h"
 var $23=$2; //@line 3557 "./stb_image.h"
 var $24=$1; //@line 3557 "./stb_image.h"
 var $25=(($24+8)|0); //@line 3557 "./stb_image.h"
 var $26=HEAP32[(($25)>>2)]; //@line 3557 "./stb_image.h"
 var $27=((($26)-($23))|0); //@line 3557 "./stb_image.h"
 HEAP32[(($25)>>2)]=$27; //@line 3557 "./stb_image.h"
 var $28=$k; //@line 3558 "./stb_image.h"
 STACKTOP=sp;return $28; //@line 3558 "./stb_image.h"
  default: assert(0, "bad label: " + label);
 }

}


function _stbi__parse_uncomperssed_block($a){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $header=sp;
 var $len;
 var $nlen;
 var $k;
 $2=$a;
 var $3=$2; //@line 3717 "./stb_image.h"
 var $4=(($3+8)|0); //@line 3717 "./stb_image.h"
 var $5=HEAP32[(($4)>>2)]; //@line 3717 "./stb_image.h"
 var $6=$5&7; //@line 3717 "./stb_image.h"
 var $7=($6|0)!=0; //@line 3717 "./stb_image.h"
 if($7){label=2;break;}else{label=3;break;} //@line 3717 "./stb_image.h"
 case 2: 
 var $9=$2; //@line 3718 "./stb_image.h"
 var $10=$2; //@line 3718 "./stb_image.h"
 var $11=(($10+8)|0); //@line 3718 "./stb_image.h"
 var $12=HEAP32[(($11)>>2)]; //@line 3718 "./stb_image.h"
 var $13=$12&7; //@line 3718 "./stb_image.h"
 var $14=_stbi__zreceive($9,$13); //@line 3718 "./stb_image.h"
 label=3;break; //@line 3718 "./stb_image.h"
 case 3: 
 $k=0; //@line 3720 "./stb_image.h"
 label=4;break; //@line 3721 "./stb_image.h"
 case 4: 
 var $17=$2; //@line 3721 "./stb_image.h"
 var $18=(($17+8)|0); //@line 3721 "./stb_image.h"
 var $19=HEAP32[(($18)>>2)]; //@line 3721 "./stb_image.h"
 var $20=($19|0)>0; //@line 3721 "./stb_image.h"
 if($20){label=5;break;}else{label=6;break;} //@line 3721 "./stb_image.h"
 case 5: 
 var $22=$2; //@line 3722 "./stb_image.h"
 var $23=(($22+12)|0); //@line 3722 "./stb_image.h"
 var $24=HEAP32[(($23)>>2)]; //@line 3722 "./stb_image.h"
 var $25=$24&255; //@line 3722 "./stb_image.h"
 var $26=(($25)&255); //@line 3722 "./stb_image.h"
 var $27=$k; //@line 3722 "./stb_image.h"
 var $28=((($27)+(1))|0); //@line 3722 "./stb_image.h"
 $k=$28; //@line 3722 "./stb_image.h"
 var $29=(($header+$27)|0); //@line 3722 "./stb_image.h"
 HEAP8[($29)]=$26; //@line 3722 "./stb_image.h"
 var $30=$2; //@line 3723 "./stb_image.h"
 var $31=(($30+12)|0); //@line 3723 "./stb_image.h"
 var $32=HEAP32[(($31)>>2)]; //@line 3723 "./stb_image.h"
 var $33=$32>>>8; //@line 3723 "./stb_image.h"
 HEAP32[(($31)>>2)]=$33; //@line 3723 "./stb_image.h"
 var $34=$2; //@line 3724 "./stb_image.h"
 var $35=(($34+8)|0); //@line 3724 "./stb_image.h"
 var $36=HEAP32[(($35)>>2)]; //@line 3724 "./stb_image.h"
 var $37=((($36)-(8))|0); //@line 3724 "./stb_image.h"
 HEAP32[(($35)>>2)]=$37; //@line 3724 "./stb_image.h"
 label=4;break; //@line 3725 "./stb_image.h"
 case 6: 
 var $39=$2; //@line 3726 "./stb_image.h"
 var $40=(($39+8)|0); //@line 3726 "./stb_image.h"
 var $41=HEAP32[(($40)>>2)]; //@line 3726 "./stb_image.h"
 var $42=($41|0)==0; //@line 3726 "./stb_image.h"
 if($42){var $46=1;label=8;break;}else{label=7;break;} //@line 3726 "./stb_image.h"
 case 7: 
 ___assert_fail(137920,138824,3726,139960); //@line 3726 "./stb_image.h"
 throw "Reached an unreachable!"; //@line 3726 "./stb_image.h"
 label=8;break; //@line 3726 "./stb_image.h"
 case 8: 
 var $46;
 var $47=($46&1); //@line 3726 "./stb_image.h"
 label=9;break; //@line 3728 "./stb_image.h"
 case 9: 
 var $49=$k; //@line 3728 "./stb_image.h"
 var $50=($49|0)<4; //@line 3728 "./stb_image.h"
 if($50){label=10;break;}else{label=11;break;} //@line 3728 "./stb_image.h"
 case 10: 
 var $52=$2; //@line 3729 "./stb_image.h"
 var $53=_stbi__zget8($52); //@line 3729 "./stb_image.h"
 var $54=$k; //@line 3729 "./stb_image.h"
 var $55=((($54)+(1))|0); //@line 3729 "./stb_image.h"
 $k=$55; //@line 3729 "./stb_image.h"
 var $56=(($header+$54)|0); //@line 3729 "./stb_image.h"
 HEAP8[($56)]=$53; //@line 3729 "./stb_image.h"
 label=9;break; //@line 3729 "./stb_image.h"
 case 11: 
 var $58=(($header+1)|0); //@line 3730 "./stb_image.h"
 var $59=HEAP8[($58)]; //@line 3730 "./stb_image.h"
 var $60=($59&255); //@line 3730 "./stb_image.h"
 var $61=($60<<8); //@line 3730 "./stb_image.h"
 var $62=(($header)|0); //@line 3730 "./stb_image.h"
 var $63=HEAP8[($62)]; //@line 3730 "./stb_image.h"
 var $64=($63&255); //@line 3730 "./stb_image.h"
 var $65=((($61)+($64))|0); //@line 3730 "./stb_image.h"
 $len=$65; //@line 3730 "./stb_image.h"
 var $66=(($header+3)|0); //@line 3731 "./stb_image.h"
 var $67=HEAP8[($66)]; //@line 3731 "./stb_image.h"
 var $68=($67&255); //@line 3731 "./stb_image.h"
 var $69=($68<<8); //@line 3731 "./stb_image.h"
 var $70=(($header+2)|0); //@line 3731 "./stb_image.h"
 var $71=HEAP8[($70)]; //@line 3731 "./stb_image.h"
 var $72=($71&255); //@line 3731 "./stb_image.h"
 var $73=((($69)+($72))|0); //@line 3731 "./stb_image.h"
 $nlen=$73; //@line 3731 "./stb_image.h"
 var $74=$nlen; //@line 3732 "./stb_image.h"
 var $75=$len; //@line 3732 "./stb_image.h"
 var $76=$75^65535; //@line 3732 "./stb_image.h"
 var $77=($74|0)!=($76|0); //@line 3732 "./stb_image.h"
 if($77){label=12;break;}else{label=13;break;} //@line 3732 "./stb_image.h"
 case 12: 
 var $79=_stbi__err(137904); //@line 3732 "./stb_image.h"
 $1=$79; //@line 3732 "./stb_image.h"
 label=20;break; //@line 3732 "./stb_image.h"
 case 13: 
 var $81=$2; //@line 3733 "./stb_image.h"
 var $82=(($81)|0); //@line 3733 "./stb_image.h"
 var $83=HEAP32[(($82)>>2)]; //@line 3733 "./stb_image.h"
 var $84=$len; //@line 3733 "./stb_image.h"
 var $85=(($83+$84)|0); //@line 3733 "./stb_image.h"
 var $86=$2; //@line 3733 "./stb_image.h"
 var $87=(($86+4)|0); //@line 3733 "./stb_image.h"
 var $88=HEAP32[(($87)>>2)]; //@line 3733 "./stb_image.h"
 var $89=($85>>>0)>($88>>>0); //@line 3733 "./stb_image.h"
 if($89){label=14;break;}else{label=15;break;} //@line 3733 "./stb_image.h"
 case 14: 
 var $91=_stbi__err(137872); //@line 3733 "./stb_image.h"
 $1=$91; //@line 3733 "./stb_image.h"
 label=20;break; //@line 3733 "./stb_image.h"
 case 15: 
 var $93=$2; //@line 3734 "./stb_image.h"
 var $94=(($93+16)|0); //@line 3734 "./stb_image.h"
 var $95=HEAP32[(($94)>>2)]; //@line 3734 "./stb_image.h"
 var $96=$len; //@line 3734 "./stb_image.h"
 var $97=(($95+$96)|0); //@line 3734 "./stb_image.h"
 var $98=$2; //@line 3734 "./stb_image.h"
 var $99=(($98+24)|0); //@line 3734 "./stb_image.h"
 var $100=HEAP32[(($99)>>2)]; //@line 3734 "./stb_image.h"
 var $101=($97>>>0)>($100>>>0); //@line 3734 "./stb_image.h"
 if($101){label=16;break;}else{label=19;break;} //@line 3734 "./stb_image.h"
 case 16: 
 var $103=$2; //@line 3735 "./stb_image.h"
 var $104=$2; //@line 3735 "./stb_image.h"
 var $105=(($104+16)|0); //@line 3735 "./stb_image.h"
 var $106=HEAP32[(($105)>>2)]; //@line 3735 "./stb_image.h"
 var $107=$len; //@line 3735 "./stb_image.h"
 var $108=_stbi__zexpand($103,$106,$107); //@line 3735 "./stb_image.h"
 var $109=($108|0)!=0; //@line 3735 "./stb_image.h"
 if($109){label=18;break;}else{label=17;break;} //@line 3735 "./stb_image.h"
 case 17: 
 $1=0; //@line 3735 "./stb_image.h"
 label=20;break; //@line 3735 "./stb_image.h"
 case 18: 
 label=19;break; //@line 3735 "./stb_image.h"
 case 19: 
 var $113=$2; //@line 3736 "./stb_image.h"
 var $114=(($113+16)|0); //@line 3736 "./stb_image.h"
 var $115=HEAP32[(($114)>>2)]; //@line 3736 "./stb_image.h"
 var $116=$2; //@line 3736 "./stb_image.h"
 var $117=(($116)|0); //@line 3736 "./stb_image.h"
 var $118=HEAP32[(($117)>>2)]; //@line 3736 "./stb_image.h"
 var $119=$len; //@line 3736 "./stb_image.h"
 assert($119 % 1 === 0);(_memcpy($115, $118, $119)|0); //@line 3736 "./stb_image.h"
 var $120=$len; //@line 3737 "./stb_image.h"
 var $121=$2; //@line 3737 "./stb_image.h"
 var $122=(($121)|0); //@line 3737 "./stb_image.h"
 var $123=HEAP32[(($122)>>2)]; //@line 3737 "./stb_image.h"
 var $124=(($123+$120)|0); //@line 3737 "./stb_image.h"
 HEAP32[(($122)>>2)]=$124; //@line 3737 "./stb_image.h"
 var $125=$len; //@line 3738 "./stb_image.h"
 var $126=$2; //@line 3738 "./stb_image.h"
 var $127=(($126+16)|0); //@line 3738 "./stb_image.h"
 var $128=HEAP32[(($127)>>2)]; //@line 3738 "./stb_image.h"
 var $129=(($128+$125)|0); //@line 3738 "./stb_image.h"
 HEAP32[(($127)>>2)]=$129; //@line 3738 "./stb_image.h"
 $1=1; //@line 3739 "./stb_image.h"
 label=20;break; //@line 3739 "./stb_image.h"
 case 20: 
 var $131=$1; //@line 3740 "./stb_image.h"
 STACKTOP=sp;return $131; //@line 3740 "./stb_image.h"
  default: assert(0, "bad label: " + label);
 }

}


function _stbi__init_zdefaults(){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $i;
 $i=0; //@line 3760 "./stb_image.h"
 label=2;break; //@line 3760 "./stb_image.h"
 case 2: 
 var $2=$i; //@line 3760 "./stb_image.h"
 var $3=($2|0)<=143; //@line 3760 "./stb_image.h"
 if($3){label=3;break;}else{label=5;break;} //@line 3760 "./stb_image.h"
 case 3: 
 var $5=$i; //@line 3760 "./stb_image.h"
 var $6=((140664+$5)|0); //@line 3760 "./stb_image.h"
 HEAP8[($6)]=8; //@line 3760 "./stb_image.h"
 label=4;break; //@line 3760 "./stb_image.h"
 case 4: 
 var $8=$i; //@line 3760 "./stb_image.h"
 var $9=((($8)+(1))|0); //@line 3760 "./stb_image.h"
 $i=$9; //@line 3760 "./stb_image.h"
 label=2;break; //@line 3760 "./stb_image.h"
 case 5: 
 label=6;break; //@line 3761 "./stb_image.h"
 case 6: 
 var $12=$i; //@line 3761 "./stb_image.h"
 var $13=($12|0)<=255; //@line 3761 "./stb_image.h"
 if($13){label=7;break;}else{label=9;break;} //@line 3761 "./stb_image.h"
 case 7: 
 var $15=$i; //@line 3761 "./stb_image.h"
 var $16=((140664+$15)|0); //@line 3761 "./stb_image.h"
 HEAP8[($16)]=9; //@line 3761 "./stb_image.h"
 label=8;break; //@line 3761 "./stb_image.h"
 case 8: 
 var $18=$i; //@line 3761 "./stb_image.h"
 var $19=((($18)+(1))|0); //@line 3761 "./stb_image.h"
 $i=$19; //@line 3761 "./stb_image.h"
 label=6;break; //@line 3761 "./stb_image.h"
 case 9: 
 label=10;break; //@line 3762 "./stb_image.h"
 case 10: 
 var $22=$i; //@line 3762 "./stb_image.h"
 var $23=($22|0)<=279; //@line 3762 "./stb_image.h"
 if($23){label=11;break;}else{label=13;break;} //@line 3762 "./stb_image.h"
 case 11: 
 var $25=$i; //@line 3762 "./stb_image.h"
 var $26=((140664+$25)|0); //@line 3762 "./stb_image.h"
 HEAP8[($26)]=7; //@line 3762 "./stb_image.h"
 label=12;break; //@line 3762 "./stb_image.h"
 case 12: 
 var $28=$i; //@line 3762 "./stb_image.h"
 var $29=((($28)+(1))|0); //@line 3762 "./stb_image.h"
 $i=$29; //@line 3762 "./stb_image.h"
 label=10;break; //@line 3762 "./stb_image.h"
 case 13: 
 label=14;break; //@line 3763 "./stb_image.h"
 case 14: 
 var $32=$i; //@line 3763 "./stb_image.h"
 var $33=($32|0)<=287; //@line 3763 "./stb_image.h"
 if($33){label=15;break;}else{label=17;break;} //@line 3763 "./stb_image.h"
 case 15: 
 var $35=$i; //@line 3763 "./stb_image.h"
 var $36=((140664+$35)|0); //@line 3763 "./stb_image.h"
 HEAP8[($36)]=8; //@line 3763 "./stb_image.h"
 label=16;break; //@line 3763 "./stb_image.h"
 case 16: 
 var $38=$i; //@line 3763 "./stb_image.h"
 var $39=((($38)+(1))|0); //@line 3763 "./stb_image.h"
 $i=$39; //@line 3763 "./stb_image.h"
 label=14;break; //@line 3763 "./stb_image.h"
 case 17: 
 $i=0; //@line 3765 "./stb_image.h"
 label=18;break; //@line 3765 "./stb_image.h"
 case 18: 
 var $42=$i; //@line 3765 "./stb_image.h"
 var $43=($42|0)<=31; //@line 3765 "./stb_image.h"
 if($43){label=19;break;}else{label=21;break;} //@line 3765 "./stb_image.h"
 case 19: 
 var $45=$i; //@line 3765 "./stb_image.h"
 var $46=((140952+$45)|0); //@line 3765 "./stb_image.h"
 HEAP8[($46)]=5; //@line 3765 "./stb_image.h"
 label=20;break; //@line 3765 "./stb_image.h"
 case 20: 
 var $48=$i; //@line 3765 "./stb_image.h"
 var $49=((($48)+(1))|0); //@line 3765 "./stb_image.h"
 $i=$49; //@line 3765 "./stb_image.h"
 label=18;break; //@line 3765 "./stb_image.h"
 case 21: 
 STACKTOP=sp;return; //@line 3766 "./stb_image.h"
  default: assert(0, "bad label: " + label);
 }

}


function _stbi__zbuild_huffman($z,$sizelist,$num){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+136)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $i;
 var $k;
 var $code;
 var $next_code=sp;
 var $sizes=(sp)+(64);
 var $s;
 var $c;
 var $fastv;
 var $k1;
 $2=$z;
 $3=$sizelist;
 $4=$num;
 $k=0; //@line 3471 "./stb_image.h"
 var $5=$sizes; //@line 3475 "./stb_image.h"
 _memset($5, 0, 68)|0; //@line 3475 "./stb_image.h"
 var $6=$2; //@line 3476 "./stb_image.h"
 var $7=(($6)|0); //@line 3476 "./stb_image.h"
 var $8=$7; //@line 3476 "./stb_image.h"
 _memset($8, 0, 1024)|0; //@line 3476 "./stb_image.h"
 $i=0; //@line 3477 "./stb_image.h"
 label=2;break; //@line 3477 "./stb_image.h"
 case 2: 
 var $10=$i; //@line 3477 "./stb_image.h"
 var $11=$4; //@line 3477 "./stb_image.h"
 var $12=($10|0)<($11|0); //@line 3477 "./stb_image.h"
 if($12){label=3;break;}else{label=5;break;} //@line 3477 "./stb_image.h"
 case 3: 
 var $14=$i; //@line 3478 "./stb_image.h"
 var $15=$3; //@line 3478 "./stb_image.h"
 var $16=(($15+$14)|0); //@line 3478 "./stb_image.h"
 var $17=HEAP8[($16)]; //@line 3478 "./stb_image.h"
 var $18=($17&255); //@line 3478 "./stb_image.h"
 var $19=(($sizes+($18<<2))|0); //@line 3478 "./stb_image.h"
 var $20=HEAP32[(($19)>>2)]; //@line 3478 "./stb_image.h"
 var $21=((($20)+(1))|0); //@line 3478 "./stb_image.h"
 HEAP32[(($19)>>2)]=$21; //@line 3478 "./stb_image.h"
 label=4;break; //@line 3478 "./stb_image.h"
 case 4: 
 var $23=$i; //@line 3477 "./stb_image.h"
 var $24=((($23)+(1))|0); //@line 3477 "./stb_image.h"
 $i=$24; //@line 3477 "./stb_image.h"
 label=2;break; //@line 3477 "./stb_image.h"
 case 5: 
 var $26=(($sizes)|0); //@line 3479 "./stb_image.h"
 HEAP32[(($26)>>2)]=0; //@line 3479 "./stb_image.h"
 $i=1; //@line 3480 "./stb_image.h"
 label=6;break; //@line 3480 "./stb_image.h"
 case 6: 
 var $28=$i; //@line 3480 "./stb_image.h"
 var $29=($28|0)<16; //@line 3480 "./stb_image.h"
 if($29){label=7;break;}else{label=11;break;} //@line 3480 "./stb_image.h"
 case 7: 
 var $31=$i; //@line 3481 "./stb_image.h"
 var $32=(($sizes+($31<<2))|0); //@line 3481 "./stb_image.h"
 var $33=HEAP32[(($32)>>2)]; //@line 3481 "./stb_image.h"
 var $34=$i; //@line 3481 "./stb_image.h"
 var $35=1<<$34; //@line 3481 "./stb_image.h"
 var $36=($33|0)>($35|0); //@line 3481 "./stb_image.h"
 if($36){label=8;break;}else{label=9;break;} //@line 3481 "./stb_image.h"
 case 8: 
 var $38=_stbi__err(137944); //@line 3482 "./stb_image.h"
 $1=$38; //@line 3482 "./stb_image.h"
 label=31;break; //@line 3482 "./stb_image.h"
 case 9: 
 label=10;break; //@line 3482 "./stb_image.h"
 case 10: 
 var $41=$i; //@line 3480 "./stb_image.h"
 var $42=((($41)+(1))|0); //@line 3480 "./stb_image.h"
 $i=$42; //@line 3480 "./stb_image.h"
 label=6;break; //@line 3480 "./stb_image.h"
 case 11: 
 $code=0; //@line 3483 "./stb_image.h"
 $i=1; //@line 3484 "./stb_image.h"
 label=12;break; //@line 3484 "./stb_image.h"
 case 12: 
 var $45=$i; //@line 3484 "./stb_image.h"
 var $46=($45|0)<16; //@line 3484 "./stb_image.h"
 if($46){label=13;break;}else{label=19;break;} //@line 3484 "./stb_image.h"
 case 13: 
 var $48=$code; //@line 3485 "./stb_image.h"
 var $49=$i; //@line 3485 "./stb_image.h"
 var $50=(($next_code+($49<<2))|0); //@line 3485 "./stb_image.h"
 HEAP32[(($50)>>2)]=$48; //@line 3485 "./stb_image.h"
 var $51=$code; //@line 3486 "./stb_image.h"
 var $52=(($51)&65535); //@line 3486 "./stb_image.h"
 var $53=$i; //@line 3486 "./stb_image.h"
 var $54=$2; //@line 3486 "./stb_image.h"
 var $55=(($54+1024)|0); //@line 3486 "./stb_image.h"
 var $56=(($55+($53<<1))|0); //@line 3486 "./stb_image.h"
 HEAP16[(($56)>>1)]=$52; //@line 3486 "./stb_image.h"
 var $57=$k; //@line 3487 "./stb_image.h"
 var $58=(($57)&65535); //@line 3487 "./stb_image.h"
 var $59=$i; //@line 3487 "./stb_image.h"
 var $60=$2; //@line 3487 "./stb_image.h"
 var $61=(($60+1124)|0); //@line 3487 "./stb_image.h"
 var $62=(($61+($59<<1))|0); //@line 3487 "./stb_image.h"
 HEAP16[(($62)>>1)]=$58; //@line 3487 "./stb_image.h"
 var $63=$code; //@line 3488 "./stb_image.h"
 var $64=$i; //@line 3488 "./stb_image.h"
 var $65=(($sizes+($64<<2))|0); //@line 3488 "./stb_image.h"
 var $66=HEAP32[(($65)>>2)]; //@line 3488 "./stb_image.h"
 var $67=((($63)+($66))|0); //@line 3488 "./stb_image.h"
 $code=$67; //@line 3488 "./stb_image.h"
 var $68=$i; //@line 3489 "./stb_image.h"
 var $69=(($sizes+($68<<2))|0); //@line 3489 "./stb_image.h"
 var $70=HEAP32[(($69)>>2)]; //@line 3489 "./stb_image.h"
 var $71=($70|0)!=0; //@line 3489 "./stb_image.h"
 if($71){label=14;break;}else{label=17;break;} //@line 3489 "./stb_image.h"
 case 14: 
 var $73=$code; //@line 3490 "./stb_image.h"
 var $74=((($73)-(1))|0); //@line 3490 "./stb_image.h"
 var $75=$i; //@line 3490 "./stb_image.h"
 var $76=1<<$75; //@line 3490 "./stb_image.h"
 var $77=($74|0)>=($76|0); //@line 3490 "./stb_image.h"
 if($77){label=15;break;}else{label=16;break;} //@line 3490 "./stb_image.h"
 case 15: 
 var $79=_stbi__err(137968); //@line 3490 "./stb_image.h"
 $1=$79; //@line 3490 "./stb_image.h"
 label=31;break; //@line 3490 "./stb_image.h"
 case 16: 
 label=17;break; //@line 3490 "./stb_image.h"
 case 17: 
 var $82=$code; //@line 3491 "./stb_image.h"
 var $83=$i; //@line 3491 "./stb_image.h"
 var $84=(((16)-($83))|0); //@line 3491 "./stb_image.h"
 var $85=$82<<$84; //@line 3491 "./stb_image.h"
 var $86=$i; //@line 3491 "./stb_image.h"
 var $87=$2; //@line 3491 "./stb_image.h"
 var $88=(($87+1056)|0); //@line 3491 "./stb_image.h"
 var $89=(($88+($86<<2))|0); //@line 3491 "./stb_image.h"
 HEAP32[(($89)>>2)]=$85; //@line 3491 "./stb_image.h"
 var $90=$code; //@line 3492 "./stb_image.h"
 var $91=$90<<1; //@line 3492 "./stb_image.h"
 $code=$91; //@line 3492 "./stb_image.h"
 var $92=$i; //@line 3493 "./stb_image.h"
 var $93=(($sizes+($92<<2))|0); //@line 3493 "./stb_image.h"
 var $94=HEAP32[(($93)>>2)]; //@line 3493 "./stb_image.h"
 var $95=$k; //@line 3493 "./stb_image.h"
 var $96=((($95)+($94))|0); //@line 3493 "./stb_image.h"
 $k=$96; //@line 3493 "./stb_image.h"
 label=18;break; //@line 3494 "./stb_image.h"
 case 18: 
 var $98=$i; //@line 3484 "./stb_image.h"
 var $99=((($98)+(1))|0); //@line 3484 "./stb_image.h"
 $i=$99; //@line 3484 "./stb_image.h"
 label=12;break; //@line 3484 "./stb_image.h"
 case 19: 
 var $101=$2; //@line 3495 "./stb_image.h"
 var $102=(($101+1056)|0); //@line 3495 "./stb_image.h"
 var $103=(($102+64)|0); //@line 3495 "./stb_image.h"
 HEAP32[(($103)>>2)]=65536; //@line 3495 "./stb_image.h"
 $i=0; //@line 3496 "./stb_image.h"
 label=20;break; //@line 3496 "./stb_image.h"
 case 20: 
 var $105=$i; //@line 3496 "./stb_image.h"
 var $106=$4; //@line 3496 "./stb_image.h"
 var $107=($105|0)<($106|0); //@line 3496 "./stb_image.h"
 if($107){label=21;break;}else{label=30;break;} //@line 3496 "./stb_image.h"
 case 21: 
 var $109=$i; //@line 3497 "./stb_image.h"
 var $110=$3; //@line 3497 "./stb_image.h"
 var $111=(($110+$109)|0); //@line 3497 "./stb_image.h"
 var $112=HEAP8[($111)]; //@line 3497 "./stb_image.h"
 var $113=($112&255); //@line 3497 "./stb_image.h"
 $s=$113; //@line 3497 "./stb_image.h"
 var $114=$s; //@line 3498 "./stb_image.h"
 var $115=($114|0)!=0; //@line 3498 "./stb_image.h"
 if($115){label=22;break;}else{label=28;break;} //@line 3498 "./stb_image.h"
 case 22: 
 var $117=$s; //@line 3499 "./stb_image.h"
 var $118=(($next_code+($117<<2))|0); //@line 3499 "./stb_image.h"
 var $119=HEAP32[(($118)>>2)]; //@line 3499 "./stb_image.h"
 var $120=$s; //@line 3499 "./stb_image.h"
 var $121=$2; //@line 3499 "./stb_image.h"
 var $122=(($121+1024)|0); //@line 3499 "./stb_image.h"
 var $123=(($122+($120<<1))|0); //@line 3499 "./stb_image.h"
 var $124=HEAP16[(($123)>>1)]; //@line 3499 "./stb_image.h"
 var $125=($124&65535); //@line 3499 "./stb_image.h"
 var $126=((($119)-($125))|0); //@line 3499 "./stb_image.h"
 var $127=$s; //@line 3499 "./stb_image.h"
 var $128=$2; //@line 3499 "./stb_image.h"
 var $129=(($128+1124)|0); //@line 3499 "./stb_image.h"
 var $130=(($129+($127<<1))|0); //@line 3499 "./stb_image.h"
 var $131=HEAP16[(($130)>>1)]; //@line 3499 "./stb_image.h"
 var $132=($131&65535); //@line 3499 "./stb_image.h"
 var $133=((($126)+($132))|0); //@line 3499 "./stb_image.h"
 $c=$133; //@line 3499 "./stb_image.h"
 var $134=$s; //@line 3500 "./stb_image.h"
 var $135=$134<<9; //@line 3500 "./stb_image.h"
 var $136=$i; //@line 3500 "./stb_image.h"
 var $137=$135|$136; //@line 3500 "./stb_image.h"
 var $138=(($137)&65535); //@line 3500 "./stb_image.h"
 $fastv=$138; //@line 3500 "./stb_image.h"
 var $139=$s; //@line 3501 "./stb_image.h"
 var $140=(($139)&255); //@line 3501 "./stb_image.h"
 var $141=$c; //@line 3501 "./stb_image.h"
 var $142=$2; //@line 3501 "./stb_image.h"
 var $143=(($142+1156)|0); //@line 3501 "./stb_image.h"
 var $144=(($143+$141)|0); //@line 3501 "./stb_image.h"
 HEAP8[($144)]=$140; //@line 3501 "./stb_image.h"
 var $145=$i; //@line 3502 "./stb_image.h"
 var $146=(($145)&65535); //@line 3502 "./stb_image.h"
 var $147=$c; //@line 3502 "./stb_image.h"
 var $148=$2; //@line 3502 "./stb_image.h"
 var $149=(($148+1444)|0); //@line 3502 "./stb_image.h"
 var $150=(($149+($147<<1))|0); //@line 3502 "./stb_image.h"
 HEAP16[(($150)>>1)]=$146; //@line 3502 "./stb_image.h"
 var $151=$s; //@line 3503 "./stb_image.h"
 var $152=($151|0)<=9; //@line 3503 "./stb_image.h"
 if($152){label=23;break;}else{label=27;break;} //@line 3503 "./stb_image.h"
 case 23: 
 var $154=$s; //@line 3504 "./stb_image.h"
 var $155=(($next_code+($154<<2))|0); //@line 3504 "./stb_image.h"
 var $156=HEAP32[(($155)>>2)]; //@line 3504 "./stb_image.h"
 var $157=$s; //@line 3504 "./stb_image.h"
 var $158=_stbi__bit_reverse($156,$157); //@line 3504 "./stb_image.h"
 $k1=$158; //@line 3504 "./stb_image.h"
 label=24;break; //@line 3505 "./stb_image.h"
 case 24: 
 var $160=$k1; //@line 3505 "./stb_image.h"
 var $161=($160|0)<512; //@line 3505 "./stb_image.h"
 if($161){label=25;break;}else{label=26;break;} //@line 3505 "./stb_image.h"
 case 25: 
 var $163=$fastv; //@line 3506 "./stb_image.h"
 var $164=$k1; //@line 3506 "./stb_image.h"
 var $165=$2; //@line 3506 "./stb_image.h"
 var $166=(($165)|0); //@line 3506 "./stb_image.h"
 var $167=(($166+($164<<1))|0); //@line 3506 "./stb_image.h"
 HEAP16[(($167)>>1)]=$163; //@line 3506 "./stb_image.h"
 var $168=$s; //@line 3507 "./stb_image.h"
 var $169=1<<$168; //@line 3507 "./stb_image.h"
 var $170=$k1; //@line 3507 "./stb_image.h"
 var $171=((($170)+($169))|0); //@line 3507 "./stb_image.h"
 $k1=$171; //@line 3507 "./stb_image.h"
 label=24;break; //@line 3508 "./stb_image.h"
 case 26: 
 label=27;break; //@line 3509 "./stb_image.h"
 case 27: 
 var $174=$s; //@line 3510 "./stb_image.h"
 var $175=(($next_code+($174<<2))|0); //@line 3510 "./stb_image.h"
 var $176=HEAP32[(($175)>>2)]; //@line 3510 "./stb_image.h"
 var $177=((($176)+(1))|0); //@line 3510 "./stb_image.h"
 HEAP32[(($175)>>2)]=$177; //@line 3510 "./stb_image.h"
 label=28;break; //@line 3511 "./stb_image.h"
 case 28: 
 label=29;break; //@line 3512 "./stb_image.h"
 case 29: 
 var $180=$i; //@line 3496 "./stb_image.h"
 var $181=((($180)+(1))|0); //@line 3496 "./stb_image.h"
 $i=$181; //@line 3496 "./stb_image.h"
 label=20;break; //@line 3496 "./stb_image.h"
 case 30: 
 $1=1; //@line 3513 "./stb_image.h"
 label=31;break; //@line 3513 "./stb_image.h"
 case 31: 
 var $184=$1; //@line 3514 "./stb_image.h"
 STACKTOP=sp;return $184; //@line 3514 "./stb_image.h"
  default: assert(0, "bad label: " + label);
 }

}


function _stbi__compute_huffman_codes($a){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+2504)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $z_codelength=sp;
 var $lencodes=(sp)+(2024);
 var $codelength_sizes=(sp)+(2480);
 var $i;
 var $n;
 var $hlit;
 var $hdist;
 var $hclen;
 var $s;
 var $c;
 $2=$a;
 var $3=$2; //@line 3675 "./stb_image.h"
 var $4=_stbi__zreceive($3,5); //@line 3675 "./stb_image.h"
 var $5=((($4)+(257))|0); //@line 3675 "./stb_image.h"
 $hlit=$5; //@line 3675 "./stb_image.h"
 var $6=$2; //@line 3676 "./stb_image.h"
 var $7=_stbi__zreceive($6,5); //@line 3676 "./stb_image.h"
 var $8=((($7)+(1))|0); //@line 3676 "./stb_image.h"
 $hdist=$8; //@line 3676 "./stb_image.h"
 var $9=$2; //@line 3677 "./stb_image.h"
 var $10=_stbi__zreceive($9,4); //@line 3677 "./stb_image.h"
 var $11=((($10)+(4))|0); //@line 3677 "./stb_image.h"
 $hclen=$11; //@line 3677 "./stb_image.h"
 var $12=$codelength_sizes; //@line 3679 "./stb_image.h"
 _memset($12, 0, 19)|0; //@line 3679 "./stb_image.h"
 $i=0; //@line 3680 "./stb_image.h"
 label=2;break; //@line 3680 "./stb_image.h"
 case 2: 
 var $14=$i; //@line 3680 "./stb_image.h"
 var $15=$hclen; //@line 3680 "./stb_image.h"
 var $16=($14|0)<($15|0); //@line 3680 "./stb_image.h"
 if($16){label=3;break;}else{label=5;break;} //@line 3680 "./stb_image.h"
 case 3: 
 var $18=$2; //@line 3681 "./stb_image.h"
 var $19=_stbi__zreceive($18,3); //@line 3681 "./stb_image.h"
 $s=$19; //@line 3681 "./stb_image.h"
 var $20=$s; //@line 3682 "./stb_image.h"
 var $21=(($20)&255); //@line 3682 "./stb_image.h"
 var $22=$i; //@line 3682 "./stb_image.h"
 var $23=((10456+$22)|0); //@line 3682 "./stb_image.h"
 var $24=HEAP8[($23)]; //@line 3682 "./stb_image.h"
 var $25=($24&255); //@line 3682 "./stb_image.h"
 var $26=(($codelength_sizes+$25)|0); //@line 3682 "./stb_image.h"
 HEAP8[($26)]=$21; //@line 3682 "./stb_image.h"
 label=4;break; //@line 3683 "./stb_image.h"
 case 4: 
 var $28=$i; //@line 3680 "./stb_image.h"
 var $29=((($28)+(1))|0); //@line 3680 "./stb_image.h"
 $i=$29; //@line 3680 "./stb_image.h"
 label=2;break; //@line 3680 "./stb_image.h"
 case 5: 
 var $31=(($codelength_sizes)|0); //@line 3684 "./stb_image.h"
 var $32=_stbi__zbuild_huffman($z_codelength,$31,19); //@line 3684 "./stb_image.h"
 var $33=($32|0)!=0; //@line 3684 "./stb_image.h"
 if($33){label=7;break;}else{label=6;break;} //@line 3684 "./stb_image.h"
 case 6: 
 $1=0; //@line 3684 "./stb_image.h"
 label=31;break; //@line 3684 "./stb_image.h"
 case 7: 
 $n=0; //@line 3686 "./stb_image.h"
 label=8;break; //@line 3687 "./stb_image.h"
 case 8: 
 var $37=$n; //@line 3687 "./stb_image.h"
 var $38=$hlit; //@line 3687 "./stb_image.h"
 var $39=$hdist; //@line 3687 "./stb_image.h"
 var $40=((($38)+($39))|0); //@line 3687 "./stb_image.h"
 var $41=($37|0)<($40|0); //@line 3687 "./stb_image.h"
 if($41){label=9;break;}else{label=24;break;} //@line 3687 "./stb_image.h"
 case 9: 
 var $43=$2; //@line 3688 "./stb_image.h"
 var $44=_stbi__zhuffman_decode($43,$z_codelength); //@line 3688 "./stb_image.h"
 $c=$44; //@line 3688 "./stb_image.h"
 var $45=$c; //@line 3689 "./stb_image.h"
 var $46=($45|0)<0; //@line 3689 "./stb_image.h"
 if($46){label=11;break;}else{label=10;break;} //@line 3689 "./stb_image.h"
 case 10: 
 var $48=$c; //@line 3689 "./stb_image.h"
 var $49=($48|0)>=19; //@line 3689 "./stb_image.h"
 if($49){label=11;break;}else{label=12;break;} //@line 3689 "./stb_image.h"
 case 11: 
 var $51=_stbi__err(137968); //@line 3689 "./stb_image.h"
 $1=$51; //@line 3689 "./stb_image.h"
 label=31;break; //@line 3689 "./stb_image.h"
 case 12: 
 var $53=$c; //@line 3690 "./stb_image.h"
 var $54=($53|0)<16; //@line 3690 "./stb_image.h"
 if($54){label=13;break;}else{label=14;break;} //@line 3690 "./stb_image.h"
 case 13: 
 var $56=$c; //@line 3691 "./stb_image.h"
 var $57=(($56)&255); //@line 3691 "./stb_image.h"
 var $58=$n; //@line 3691 "./stb_image.h"
 var $59=((($58)+(1))|0); //@line 3691 "./stb_image.h"
 $n=$59; //@line 3691 "./stb_image.h"
 var $60=(($lencodes+$58)|0); //@line 3691 "./stb_image.h"
 HEAP8[($60)]=$57; //@line 3691 "./stb_image.h"
 label=23;break; //@line 3691 "./stb_image.h"
 case 14: 
 var $62=$c; //@line 3692 "./stb_image.h"
 var $63=($62|0)==16; //@line 3692 "./stb_image.h"
 if($63){label=15;break;}else{label=16;break;} //@line 3692 "./stb_image.h"
 case 15: 
 var $65=$2; //@line 3693 "./stb_image.h"
 var $66=_stbi__zreceive($65,2); //@line 3693 "./stb_image.h"
 var $67=((($66)+(3))|0); //@line 3693 "./stb_image.h"
 $c=$67; //@line 3693 "./stb_image.h"
 var $68=(($lencodes)|0); //@line 3694 "./stb_image.h"
 var $69=$n; //@line 3694 "./stb_image.h"
 var $70=(($68+$69)|0); //@line 3694 "./stb_image.h"
 var $71=$n; //@line 3694 "./stb_image.h"
 var $72=((($71)-(1))|0); //@line 3694 "./stb_image.h"
 var $73=(($lencodes+$72)|0); //@line 3694 "./stb_image.h"
 var $74=HEAP8[($73)]; //@line 3694 "./stb_image.h"
 var $75=($74&255); //@line 3694 "./stb_image.h"
 var $76=(($75)&255); //@line 3694 "./stb_image.h"
 var $77=$c; //@line 3694 "./stb_image.h"
 _memset($70, $76, $77)|0; //@line 3694 "./stb_image.h"
 var $78=$c; //@line 3695 "./stb_image.h"
 var $79=$n; //@line 3695 "./stb_image.h"
 var $80=((($79)+($78))|0); //@line 3695 "./stb_image.h"
 $n=$80; //@line 3695 "./stb_image.h"
 label=22;break; //@line 3696 "./stb_image.h"
 case 16: 
 var $82=$c; //@line 3696 "./stb_image.h"
 var $83=($82|0)==17; //@line 3696 "./stb_image.h"
 if($83){label=17;break;}else{label=18;break;} //@line 3696 "./stb_image.h"
 case 17: 
 var $85=$2; //@line 3697 "./stb_image.h"
 var $86=_stbi__zreceive($85,3); //@line 3697 "./stb_image.h"
 var $87=((($86)+(3))|0); //@line 3697 "./stb_image.h"
 $c=$87; //@line 3697 "./stb_image.h"
 var $88=(($lencodes)|0); //@line 3698 "./stb_image.h"
 var $89=$n; //@line 3698 "./stb_image.h"
 var $90=(($88+$89)|0); //@line 3698 "./stb_image.h"
 var $91=$c; //@line 3698 "./stb_image.h"
 _memset($90, 0, $91)|0; //@line 3698 "./stb_image.h"
 var $92=$c; //@line 3699 "./stb_image.h"
 var $93=$n; //@line 3699 "./stb_image.h"
 var $94=((($93)+($92))|0); //@line 3699 "./stb_image.h"
 $n=$94; //@line 3699 "./stb_image.h"
 label=21;break; //@line 3700 "./stb_image.h"
 case 18: 
 var $96=$c; //@line 3701 "./stb_image.h"
 var $97=($96|0)==18; //@line 3701 "./stb_image.h"
 if($97){var $101=1;label=20;break;}else{label=19;break;} //@line 3701 "./stb_image.h"
 case 19: 
 ___assert_fail(137960,138824,3701,140160); //@line 3701 "./stb_image.h"
 throw "Reached an unreachable!"; //@line 3701 "./stb_image.h"
 label=20;break; //@line 3701 "./stb_image.h"
 case 20: 
 var $101;
 var $102=($101&1); //@line 3701 "./stb_image.h"
 var $103=$2; //@line 3702 "./stb_image.h"
 var $104=_stbi__zreceive($103,7); //@line 3702 "./stb_image.h"
 var $105=((($104)+(11))|0); //@line 3702 "./stb_image.h"
 $c=$105; //@line 3702 "./stb_image.h"
 var $106=(($lencodes)|0); //@line 3703 "./stb_image.h"
 var $107=$n; //@line 3703 "./stb_image.h"
 var $108=(($106+$107)|0); //@line 3703 "./stb_image.h"
 var $109=$c; //@line 3703 "./stb_image.h"
 _memset($108, 0, $109)|0; //@line 3703 "./stb_image.h"
 var $110=$c; //@line 3704 "./stb_image.h"
 var $111=$n; //@line 3704 "./stb_image.h"
 var $112=((($111)+($110))|0); //@line 3704 "./stb_image.h"
 $n=$112; //@line 3704 "./stb_image.h"
 label=21;break;
 case 21: 
 label=22;break;
 case 22: 
 label=23;break;
 case 23: 
 label=8;break; //@line 3706 "./stb_image.h"
 case 24: 
 var $117=$n; //@line 3707 "./stb_image.h"
 var $118=$hlit; //@line 3707 "./stb_image.h"
 var $119=$hdist; //@line 3707 "./stb_image.h"
 var $120=((($118)+($119))|0); //@line 3707 "./stb_image.h"
 var $121=($117|0)!=($120|0); //@line 3707 "./stb_image.h"
 if($121){label=25;break;}else{label=26;break;} //@line 3707 "./stb_image.h"
 case 25: 
 var $123=_stbi__err(137968); //@line 3707 "./stb_image.h"
 $1=$123; //@line 3707 "./stb_image.h"
 label=31;break; //@line 3707 "./stb_image.h"
 case 26: 
 var $125=$2; //@line 3708 "./stb_image.h"
 var $126=(($125+32)|0); //@line 3708 "./stb_image.h"
 var $127=(($lencodes)|0); //@line 3708 "./stb_image.h"
 var $128=$hlit; //@line 3708 "./stb_image.h"
 var $129=_stbi__zbuild_huffman($126,$127,$128); //@line 3708 "./stb_image.h"
 var $130=($129|0)!=0; //@line 3708 "./stb_image.h"
 if($130){label=28;break;}else{label=27;break;} //@line 3708 "./stb_image.h"
 case 27: 
 $1=0; //@line 3708 "./stb_image.h"
 label=31;break; //@line 3708 "./stb_image.h"
 case 28: 
 var $133=$2; //@line 3709 "./stb_image.h"
 var $134=(($133+2052)|0); //@line 3709 "./stb_image.h"
 var $135=(($lencodes)|0); //@line 3709 "./stb_image.h"
 var $136=$hlit; //@line 3709 "./stb_image.h"
 var $137=(($135+$136)|0); //@line 3709 "./stb_image.h"
 var $138=$hdist; //@line 3709 "./stb_image.h"
 var $139=_stbi__zbuild_huffman($134,$137,$138); //@line 3709 "./stb_image.h"
 var $140=($139|0)!=0; //@line 3709 "./stb_image.h"
 if($140){label=30;break;}else{label=29;break;} //@line 3709 "./stb_image.h"
 case 29: 
 $1=0; //@line 3709 "./stb_image.h"
 label=31;break; //@line 3709 "./stb_image.h"
 case 30: 
 $1=1; //@line 3710 "./stb_image.h"
 label=31;break; //@line 3710 "./stb_image.h"
 case 31: 
 var $144=$1; //@line 3711 "./stb_image.h"
 STACKTOP=sp;return $144; //@line 3711 "./stb_image.h"
  default: assert(0, "bad label: " + label);
 }

}


function _stbi__parse_huffman_block($a){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $zout;
 var $z;
 var $p;
 var $len;
 var $dist;
 var $v;
 $2=$a;
 var $3=$2; //@line 3627 "./stb_image.h"
 var $4=(($3+16)|0); //@line 3627 "./stb_image.h"
 var $5=HEAP32[(($4)>>2)]; //@line 3627 "./stb_image.h"
 $zout=$5; //@line 3627 "./stb_image.h"
 label=2;break; //@line 3628 "./stb_image.h"
 case 2: 
 var $7=$2; //@line 3629 "./stb_image.h"
 var $8=$2; //@line 3629 "./stb_image.h"
 var $9=(($8+32)|0); //@line 3629 "./stb_image.h"
 var $10=_stbi__zhuffman_decode($7,$9); //@line 3629 "./stb_image.h"
 $z=$10; //@line 3629 "./stb_image.h"
 var $11=$z; //@line 3630 "./stb_image.h"
 var $12=($11|0)<256; //@line 3630 "./stb_image.h"
 if($12){label=3;break;}else{label=10;break;} //@line 3630 "./stb_image.h"
 case 3: 
 var $14=$z; //@line 3631 "./stb_image.h"
 var $15=($14|0)<0; //@line 3631 "./stb_image.h"
 if($15){label=4;break;}else{label=5;break;} //@line 3631 "./stb_image.h"
 case 4: 
 var $17=_stbi__err(138160); //@line 3631 "./stb_image.h"
 $1=$17; //@line 3631 "./stb_image.h"
 label=39;break; //@line 3631 "./stb_image.h"
 case 5: 
 var $19=$zout; //@line 3632 "./stb_image.h"
 var $20=$2; //@line 3632 "./stb_image.h"
 var $21=(($20+24)|0); //@line 3632 "./stb_image.h"
 var $22=HEAP32[(($21)>>2)]; //@line 3632 "./stb_image.h"
 var $23=($19>>>0)>=($22>>>0); //@line 3632 "./stb_image.h"
 if($23){label=6;break;}else{label=9;break;} //@line 3632 "./stb_image.h"
 case 6: 
 var $25=$2; //@line 3633 "./stb_image.h"
 var $26=$zout; //@line 3633 "./stb_image.h"
 var $27=_stbi__zexpand($25,$26,1); //@line 3633 "./stb_image.h"
 var $28=($27|0)!=0; //@line 3633 "./stb_image.h"
 if($28){label=8;break;}else{label=7;break;} //@line 3633 "./stb_image.h"
 case 7: 
 $1=0; //@line 3633 "./stb_image.h"
 label=39;break; //@line 3633 "./stb_image.h"
 case 8: 
 var $31=$2; //@line 3634 "./stb_image.h"
 var $32=(($31+16)|0); //@line 3634 "./stb_image.h"
 var $33=HEAP32[(($32)>>2)]; //@line 3634 "./stb_image.h"
 $zout=$33; //@line 3634 "./stb_image.h"
 label=9;break; //@line 3635 "./stb_image.h"
 case 9: 
 var $35=$z; //@line 3636 "./stb_image.h"
 var $36=(($35)&255); //@line 3636 "./stb_image.h"
 var $37=$zout; //@line 3636 "./stb_image.h"
 var $38=(($37+1)|0); //@line 3636 "./stb_image.h"
 $zout=$38; //@line 3636 "./stb_image.h"
 HEAP8[($37)]=$36; //@line 3636 "./stb_image.h"
 label=38;break; //@line 3637 "./stb_image.h"
 case 10: 
 var $40=$z; //@line 3640 "./stb_image.h"
 var $41=($40|0)==256; //@line 3640 "./stb_image.h"
 if($41){label=11;break;}else{label=12;break;} //@line 3640 "./stb_image.h"
 case 11: 
 var $43=$zout; //@line 3641 "./stb_image.h"
 var $44=$2; //@line 3641 "./stb_image.h"
 var $45=(($44+16)|0); //@line 3641 "./stb_image.h"
 HEAP32[(($45)>>2)]=$43; //@line 3641 "./stb_image.h"
 $1=1; //@line 3642 "./stb_image.h"
 label=39;break; //@line 3642 "./stb_image.h"
 case 12: 
 var $47=$z; //@line 3644 "./stb_image.h"
 var $48=((($47)-(257))|0); //@line 3644 "./stb_image.h"
 $z=$48; //@line 3644 "./stb_image.h"
 var $49=$z; //@line 3645 "./stb_image.h"
 var $50=((9704+($49<<2))|0); //@line 3645 "./stb_image.h"
 var $51=HEAP32[(($50)>>2)]; //@line 3645 "./stb_image.h"
 $len=$51; //@line 3645 "./stb_image.h"
 var $52=$z; //@line 3646 "./stb_image.h"
 var $53=((9576+($52<<2))|0); //@line 3646 "./stb_image.h"
 var $54=HEAP32[(($53)>>2)]; //@line 3646 "./stb_image.h"
 var $55=($54|0)!=0; //@line 3646 "./stb_image.h"
 if($55){label=13;break;}else{label=14;break;} //@line 3646 "./stb_image.h"
 case 13: 
 var $57=$2; //@line 3646 "./stb_image.h"
 var $58=$z; //@line 3646 "./stb_image.h"
 var $59=((9576+($58<<2))|0); //@line 3646 "./stb_image.h"
 var $60=HEAP32[(($59)>>2)]; //@line 3646 "./stb_image.h"
 var $61=_stbi__zreceive($57,$60); //@line 3646 "./stb_image.h"
 var $62=$len; //@line 3646 "./stb_image.h"
 var $63=((($62)+($61))|0); //@line 3646 "./stb_image.h"
 $len=$63; //@line 3646 "./stb_image.h"
 label=14;break; //@line 3646 "./stb_image.h"
 case 14: 
 var $65=$2; //@line 3647 "./stb_image.h"
 var $66=$2; //@line 3647 "./stb_image.h"
 var $67=(($66+2052)|0); //@line 3647 "./stb_image.h"
 var $68=_stbi__zhuffman_decode($65,$67); //@line 3647 "./stb_image.h"
 $z=$68; //@line 3647 "./stb_image.h"
 var $69=$z; //@line 3648 "./stb_image.h"
 var $70=($69|0)<0; //@line 3648 "./stb_image.h"
 if($70){label=15;break;}else{label=16;break;} //@line 3648 "./stb_image.h"
 case 15: 
 var $72=_stbi__err(138160); //@line 3648 "./stb_image.h"
 $1=$72; //@line 3648 "./stb_image.h"
 label=39;break; //@line 3648 "./stb_image.h"
 case 16: 
 var $74=$z; //@line 3649 "./stb_image.h"
 var $75=((9960+($74<<2))|0); //@line 3649 "./stb_image.h"
 var $76=HEAP32[(($75)>>2)]; //@line 3649 "./stb_image.h"
 $dist=$76; //@line 3649 "./stb_image.h"
 var $77=$z; //@line 3650 "./stb_image.h"
 var $78=((9832+($77<<2))|0); //@line 3650 "./stb_image.h"
 var $79=HEAP32[(($78)>>2)]; //@line 3650 "./stb_image.h"
 var $80=($79|0)!=0; //@line 3650 "./stb_image.h"
 if($80){label=17;break;}else{label=18;break;} //@line 3650 "./stb_image.h"
 case 17: 
 var $82=$2; //@line 3650 "./stb_image.h"
 var $83=$z; //@line 3650 "./stb_image.h"
 var $84=((9832+($83<<2))|0); //@line 3650 "./stb_image.h"
 var $85=HEAP32[(($84)>>2)]; //@line 3650 "./stb_image.h"
 var $86=_stbi__zreceive($82,$85); //@line 3650 "./stb_image.h"
 var $87=$dist; //@line 3650 "./stb_image.h"
 var $88=((($87)+($86))|0); //@line 3650 "./stb_image.h"
 $dist=$88; //@line 3650 "./stb_image.h"
 label=18;break; //@line 3650 "./stb_image.h"
 case 18: 
 var $90=$zout; //@line 3651 "./stb_image.h"
 var $91=$2; //@line 3651 "./stb_image.h"
 var $92=(($91+20)|0); //@line 3651 "./stb_image.h"
 var $93=HEAP32[(($92)>>2)]; //@line 3651 "./stb_image.h"
 var $94=$90; //@line 3651 "./stb_image.h"
 var $95=$93; //@line 3651 "./stb_image.h"
 var $96=((($94)-($95))|0); //@line 3651 "./stb_image.h"
 var $97=$dist; //@line 3651 "./stb_image.h"
 var $98=($96|0)<($97|0); //@line 3651 "./stb_image.h"
 if($98){label=19;break;}else{label=20;break;} //@line 3651 "./stb_image.h"
 case 19: 
 var $100=_stbi__err(138136); //@line 3651 "./stb_image.h"
 $1=$100; //@line 3651 "./stb_image.h"
 label=39;break; //@line 3651 "./stb_image.h"
 case 20: 
 var $102=$zout; //@line 3652 "./stb_image.h"
 var $103=$len; //@line 3652 "./stb_image.h"
 var $104=(($102+$103)|0); //@line 3652 "./stb_image.h"
 var $105=$2; //@line 3652 "./stb_image.h"
 var $106=(($105+24)|0); //@line 3652 "./stb_image.h"
 var $107=HEAP32[(($106)>>2)]; //@line 3652 "./stb_image.h"
 var $108=($104>>>0)>($107>>>0); //@line 3652 "./stb_image.h"
 if($108){label=21;break;}else{label=24;break;} //@line 3652 "./stb_image.h"
 case 21: 
 var $110=$2; //@line 3653 "./stb_image.h"
 var $111=$zout; //@line 3653 "./stb_image.h"
 var $112=$len; //@line 3653 "./stb_image.h"
 var $113=_stbi__zexpand($110,$111,$112); //@line 3653 "./stb_image.h"
 var $114=($113|0)!=0; //@line 3653 "./stb_image.h"
 if($114){label=23;break;}else{label=22;break;} //@line 3653 "./stb_image.h"
 case 22: 
 $1=0; //@line 3653 "./stb_image.h"
 label=39;break; //@line 3653 "./stb_image.h"
 case 23: 
 var $117=$2; //@line 3654 "./stb_image.h"
 var $118=(($117+16)|0); //@line 3654 "./stb_image.h"
 var $119=HEAP32[(($118)>>2)]; //@line 3654 "./stb_image.h"
 $zout=$119; //@line 3654 "./stb_image.h"
 label=24;break; //@line 3655 "./stb_image.h"
 case 24: 
 var $121=$zout; //@line 3656 "./stb_image.h"
 var $122=$dist; //@line 3656 "./stb_image.h"
 var $123=(((-$122))|0); //@line 3656 "./stb_image.h"
 var $124=(($121+$123)|0); //@line 3656 "./stb_image.h"
 $p=$124; //@line 3656 "./stb_image.h"
 var $125=$dist; //@line 3657 "./stb_image.h"
 var $126=($125|0)==1; //@line 3657 "./stb_image.h"
 if($126){label=25;break;}else{label=31;break;} //@line 3657 "./stb_image.h"
 case 25: 
 var $128=$p; //@line 3658 "./stb_image.h"
 var $129=HEAP8[($128)]; //@line 3658 "./stb_image.h"
 $v=$129; //@line 3658 "./stb_image.h"
 var $130=$len; //@line 3659 "./stb_image.h"
 var $131=($130|0)!=0; //@line 3659 "./stb_image.h"
 if($131){label=26;break;}else{label=30;break;} //@line 3659 "./stb_image.h"
 case 26: 
 label=27;break; //@line 3659 "./stb_image.h"
 case 27: 
 var $134=$v; //@line 3659 "./stb_image.h"
 var $135=$zout; //@line 3659 "./stb_image.h"
 var $136=(($135+1)|0); //@line 3659 "./stb_image.h"
 $zout=$136; //@line 3659 "./stb_image.h"
 HEAP8[($135)]=$134; //@line 3659 "./stb_image.h"
 label=28;break; //@line 3659 "./stb_image.h"
 case 28: 
 var $138=$len; //@line 3659 "./stb_image.h"
 var $139=((($138)-(1))|0); //@line 3659 "./stb_image.h"
 $len=$139; //@line 3659 "./stb_image.h"
 var $140=($139|0)!=0; //@line 3659 "./stb_image.h"
 if($140){label=27;break;}else{label=29;break;} //@line 3659 "./stb_image.h"
 case 29: 
 label=30;break; //@line 3659 "./stb_image.h"
 case 30: 
 label=37;break; //@line 3660 "./stb_image.h"
 case 31: 
 var $144=$len; //@line 3661 "./stb_image.h"
 var $145=($144|0)!=0; //@line 3661 "./stb_image.h"
 if($145){label=32;break;}else{label=36;break;} //@line 3661 "./stb_image.h"
 case 32: 
 label=33;break; //@line 3661 "./stb_image.h"
 case 33: 
 var $148=$p; //@line 3661 "./stb_image.h"
 var $149=(($148+1)|0); //@line 3661 "./stb_image.h"
 $p=$149; //@line 3661 "./stb_image.h"
 var $150=HEAP8[($148)]; //@line 3661 "./stb_image.h"
 var $151=$zout; //@line 3661 "./stb_image.h"
 var $152=(($151+1)|0); //@line 3661 "./stb_image.h"
 $zout=$152; //@line 3661 "./stb_image.h"
 HEAP8[($151)]=$150; //@line 3661 "./stb_image.h"
 label=34;break; //@line 3661 "./stb_image.h"
 case 34: 
 var $154=$len; //@line 3661 "./stb_image.h"
 var $155=((($154)-(1))|0); //@line 3661 "./stb_image.h"
 $len=$155; //@line 3661 "./stb_image.h"
 var $156=($155|0)!=0; //@line 3661 "./stb_image.h"
 if($156){label=33;break;}else{label=35;break;} //@line 3661 "./stb_image.h"
 case 35: 
 label=36;break; //@line 3661 "./stb_image.h"
 case 36: 
 label=37;break;
 case 37: 
 label=38;break;
 case 38: 
 label=2;break; //@line 3664 "./stb_image.h"
 case 39: 
 var $162=$1; //@line 3665 "./stb_image.h"
 STACKTOP=sp;return $162; //@line 3665 "./stb_image.h"
  default: assert(0, "bad label: " + label);
 }

}


function _stbi__zhuffman_decode($a,$z){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $b;
 var $s;
 $2=$a;
 $3=$z;
 var $4=$2; //@line 3582 "./stb_image.h"
 var $5=(($4+8)|0); //@line 3582 "./stb_image.h"
 var $6=HEAP32[(($5)>>2)]; //@line 3582 "./stb_image.h"
 var $7=($6|0)<16; //@line 3582 "./stb_image.h"
 if($7){label=2;break;}else{label=3;break;} //@line 3582 "./stb_image.h"
 case 2: 
 var $9=$2; //@line 3582 "./stb_image.h"
 _stbi__fill_bits($9); //@line 3582 "./stb_image.h"
 label=3;break; //@line 3582 "./stb_image.h"
 case 3: 
 var $11=$2; //@line 3583 "./stb_image.h"
 var $12=(($11+12)|0); //@line 3583 "./stb_image.h"
 var $13=HEAP32[(($12)>>2)]; //@line 3583 "./stb_image.h"
 var $14=$13&511; //@line 3583 "./stb_image.h"
 var $15=$3; //@line 3583 "./stb_image.h"
 var $16=(($15)|0); //@line 3583 "./stb_image.h"
 var $17=(($16+($14<<1))|0); //@line 3583 "./stb_image.h"
 var $18=HEAP16[(($17)>>1)]; //@line 3583 "./stb_image.h"
 var $19=($18&65535); //@line 3583 "./stb_image.h"
 $b=$19; //@line 3583 "./stb_image.h"
 var $20=$b; //@line 3584 "./stb_image.h"
 var $21=($20|0)!=0; //@line 3584 "./stb_image.h"
 if($21){label=4;break;}else{label=5;break;} //@line 3584 "./stb_image.h"
 case 4: 
 var $23=$b; //@line 3585 "./stb_image.h"
 var $24=$23>>9; //@line 3585 "./stb_image.h"
 $s=$24; //@line 3585 "./stb_image.h"
 var $25=$s; //@line 3586 "./stb_image.h"
 var $26=$2; //@line 3586 "./stb_image.h"
 var $27=(($26+12)|0); //@line 3586 "./stb_image.h"
 var $28=HEAP32[(($27)>>2)]; //@line 3586 "./stb_image.h"
 var $29=$28>>>($25>>>0); //@line 3586 "./stb_image.h"
 HEAP32[(($27)>>2)]=$29; //@line 3586 "./stb_image.h"
 var $30=$s; //@line 3587 "./stb_image.h"
 var $31=$2; //@line 3587 "./stb_image.h"
 var $32=(($31+8)|0); //@line 3587 "./stb_image.h"
 var $33=HEAP32[(($32)>>2)]; //@line 3587 "./stb_image.h"
 var $34=((($33)-($30))|0); //@line 3587 "./stb_image.h"
 HEAP32[(($32)>>2)]=$34; //@line 3587 "./stb_image.h"
 var $35=$b; //@line 3588 "./stb_image.h"
 var $36=$35&511; //@line 3588 "./stb_image.h"
 $1=$36; //@line 3588 "./stb_image.h"
 label=6;break; //@line 3588 "./stb_image.h"
 case 5: 
 var $38=$2; //@line 3590 "./stb_image.h"
 var $39=$3; //@line 3590 "./stb_image.h"
 var $40=_stbi__zhuffman_decode_slowpath($38,$39); //@line 3590 "./stb_image.h"
 $1=$40; //@line 3590 "./stb_image.h"
 label=6;break; //@line 3590 "./stb_image.h"
 case 6: 
 var $42=$1; //@line 3591 "./stb_image.h"
 STACKTOP=sp;return $42; //@line 3591 "./stb_image.h"
  default: assert(0, "bad label: " + label);
 }

}


function _stbi__zexpand($z,$zout,$n){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $q;
 var $cur;
 var $limit;
 $2=$z;
 $3=$zout;
 $4=$n;
 var $5=$3; //@line 3597 "./stb_image.h"
 var $6=$2; //@line 3597 "./stb_image.h"
 var $7=(($6+16)|0); //@line 3597 "./stb_image.h"
 HEAP32[(($7)>>2)]=$5; //@line 3597 "./stb_image.h"
 var $8=$2; //@line 3598 "./stb_image.h"
 var $9=(($8+28)|0); //@line 3598 "./stb_image.h"
 var $10=HEAP32[(($9)>>2)]; //@line 3598 "./stb_image.h"
 var $11=($10|0)!=0; //@line 3598 "./stb_image.h"
 if($11){label=3;break;}else{label=2;break;} //@line 3598 "./stb_image.h"
 case 2: 
 var $13=_stbi__err(138104); //@line 3598 "./stb_image.h"
 $1=$13; //@line 3598 "./stb_image.h"
 label=9;break; //@line 3598 "./stb_image.h"
 case 3: 
 var $15=$2; //@line 3599 "./stb_image.h"
 var $16=(($15+16)|0); //@line 3599 "./stb_image.h"
 var $17=HEAP32[(($16)>>2)]; //@line 3599 "./stb_image.h"
 var $18=$2; //@line 3599 "./stb_image.h"
 var $19=(($18+20)|0); //@line 3599 "./stb_image.h"
 var $20=HEAP32[(($19)>>2)]; //@line 3599 "./stb_image.h"
 var $21=$17; //@line 3599 "./stb_image.h"
 var $22=$20; //@line 3599 "./stb_image.h"
 var $23=((($21)-($22))|0); //@line 3599 "./stb_image.h"
 $cur=$23; //@line 3599 "./stb_image.h"
 var $24=$2; //@line 3600 "./stb_image.h"
 var $25=(($24+24)|0); //@line 3600 "./stb_image.h"
 var $26=HEAP32[(($25)>>2)]; //@line 3600 "./stb_image.h"
 var $27=$2; //@line 3600 "./stb_image.h"
 var $28=(($27+20)|0); //@line 3600 "./stb_image.h"
 var $29=HEAP32[(($28)>>2)]; //@line 3600 "./stb_image.h"
 var $30=$26; //@line 3600 "./stb_image.h"
 var $31=$29; //@line 3600 "./stb_image.h"
 var $32=((($30)-($31))|0); //@line 3600 "./stb_image.h"
 $limit=$32; //@line 3600 "./stb_image.h"
 label=4;break; //@line 3601 "./stb_image.h"
 case 4: 
 var $34=$cur; //@line 3601 "./stb_image.h"
 var $35=$4; //@line 3601 "./stb_image.h"
 var $36=((($34)+($35))|0); //@line 3601 "./stb_image.h"
 var $37=$limit; //@line 3601 "./stb_image.h"
 var $38=($36|0)>($37|0); //@line 3601 "./stb_image.h"
 if($38){label=5;break;}else{label=6;break;} //@line 3601 "./stb_image.h"
 case 5: 
 var $40=$limit; //@line 3602 "./stb_image.h"
 var $41=($40<<1); //@line 3602 "./stb_image.h"
 $limit=$41; //@line 3602 "./stb_image.h"
 label=4;break; //@line 3602 "./stb_image.h"
 case 6: 
 var $43=$2; //@line 3603 "./stb_image.h"
 var $44=(($43+20)|0); //@line 3603 "./stb_image.h"
 var $45=HEAP32[(($44)>>2)]; //@line 3603 "./stb_image.h"
 var $46=$limit; //@line 3603 "./stb_image.h"
 var $47=_realloc($45,$46); //@line 3603 "./stb_image.h"
 $q=$47; //@line 3603 "./stb_image.h"
 var $48=$q; //@line 3604 "./stb_image.h"
 var $49=($48|0)==0; //@line 3604 "./stb_image.h"
 if($49){label=7;break;}else{label=8;break;} //@line 3604 "./stb_image.h"
 case 7: 
 var $51=_stbi__err(138952); //@line 3604 "./stb_image.h"
 $1=$51; //@line 3604 "./stb_image.h"
 label=9;break; //@line 3604 "./stb_image.h"
 case 8: 
 var $53=$q; //@line 3605 "./stb_image.h"
 var $54=$2; //@line 3605 "./stb_image.h"
 var $55=(($54+20)|0); //@line 3605 "./stb_image.h"
 HEAP32[(($55)>>2)]=$53; //@line 3605 "./stb_image.h"
 var $56=$q; //@line 3606 "./stb_image.h"
 var $57=$cur; //@line 3606 "./stb_image.h"
 var $58=(($56+$57)|0); //@line 3606 "./stb_image.h"
 var $59=$2; //@line 3606 "./stb_image.h"
 var $60=(($59+16)|0); //@line 3606 "./stb_image.h"
 HEAP32[(($60)>>2)]=$58; //@line 3606 "./stb_image.h"
 var $61=$q; //@line 3607 "./stb_image.h"
 var $62=$limit; //@line 3607 "./stb_image.h"
 var $63=(($61+$62)|0); //@line 3607 "./stb_image.h"
 var $64=$2; //@line 3607 "./stb_image.h"
 var $65=(($64+24)|0); //@line 3607 "./stb_image.h"
 HEAP32[(($65)>>2)]=$63; //@line 3607 "./stb_image.h"
 $1=1; //@line 3608 "./stb_image.h"
 label=9;break; //@line 3608 "./stb_image.h"
 case 9: 
 var $67=$1; //@line 3609 "./stb_image.h"
 STACKTOP=sp;return $67; //@line 3609 "./stb_image.h"
  default: assert(0, "bad label: " + label);
 }

}


function _stbi__fill_bits($z){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 $1=$z;
 label=2;break; //@line 3544 "./stb_image.h"
 case 2: 
 var $3=$1; //@line 3545 "./stb_image.h"
 var $4=(($3+12)|0); //@line 3545 "./stb_image.h"
 var $5=HEAP32[(($4)>>2)]; //@line 3545 "./stb_image.h"
 var $6=$1; //@line 3545 "./stb_image.h"
 var $7=(($6+8)|0); //@line 3545 "./stb_image.h"
 var $8=HEAP32[(($7)>>2)]; //@line 3545 "./stb_image.h"
 var $9=1<<$8; //@line 3545 "./stb_image.h"
 var $10=($5>>>0)<($9>>>0); //@line 3545 "./stb_image.h"
 if($10){var $14=1;label=4;break;}else{label=3;break;} //@line 3545 "./stb_image.h"
 case 3: 
 ___assert_fail(137984,138824,3545,140016); //@line 3545 "./stb_image.h"
 throw "Reached an unreachable!"; //@line 3545 "./stb_image.h"
 label=4;break; //@line 3545 "./stb_image.h"
 case 4: 
 var $14;
 var $15=($14&1); //@line 3545 "./stb_image.h"
 var $16=$1; //@line 3546 "./stb_image.h"
 var $17=_stbi__zget8($16); //@line 3546 "./stb_image.h"
 var $18=($17&255); //@line 3546 "./stb_image.h"
 var $19=$1; //@line 3546 "./stb_image.h"
 var $20=(($19+8)|0); //@line 3546 "./stb_image.h"
 var $21=HEAP32[(($20)>>2)]; //@line 3546 "./stb_image.h"
 var $22=$18<<$21; //@line 3546 "./stb_image.h"
 var $23=$1; //@line 3546 "./stb_image.h"
 var $24=(($23+12)|0); //@line 3546 "./stb_image.h"
 var $25=HEAP32[(($24)>>2)]; //@line 3546 "./stb_image.h"
 var $26=$25|$22; //@line 3546 "./stb_image.h"
 HEAP32[(($24)>>2)]=$26; //@line 3546 "./stb_image.h"
 var $27=$1; //@line 3547 "./stb_image.h"
 var $28=(($27+8)|0); //@line 3547 "./stb_image.h"
 var $29=HEAP32[(($28)>>2)]; //@line 3547 "./stb_image.h"
 var $30=((($29)+(8))|0); //@line 3547 "./stb_image.h"
 HEAP32[(($28)>>2)]=$30; //@line 3547 "./stb_image.h"
 label=5;break; //@line 3548 "./stb_image.h"
 case 5: 
 var $32=$1; //@line 3548 "./stb_image.h"
 var $33=(($32+8)|0); //@line 3548 "./stb_image.h"
 var $34=HEAP32[(($33)>>2)]; //@line 3548 "./stb_image.h"
 var $35=($34|0)<=24; //@line 3548 "./stb_image.h"
 if($35){label=2;break;}else{label=6;break;} //@line 3548 "./stb_image.h"
 case 6: 
 STACKTOP=sp;return; //@line 3549 "./stb_image.h"
  default: assert(0, "bad label: " + label);
 }

}


function _stbi__zhuffman_decode_slowpath($a,$z){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $b;
 var $s;
 var $k;
 $2=$a;
 $3=$z;
 var $4=$2; //@line 3566 "./stb_image.h"
 var $5=(($4+12)|0); //@line 3566 "./stb_image.h"
 var $6=HEAP32[(($5)>>2)]; //@line 3566 "./stb_image.h"
 var $7=_stbi__bit_reverse($6,16); //@line 3566 "./stb_image.h"
 $k=$7; //@line 3566 "./stb_image.h"
 $s=10; //@line 3567 "./stb_image.h"
 label=2;break; //@line 3567 "./stb_image.h"
 case 2: 
 var $9=$k; //@line 3568 "./stb_image.h"
 var $10=$s; //@line 3568 "./stb_image.h"
 var $11=$3; //@line 3568 "./stb_image.h"
 var $12=(($11+1056)|0); //@line 3568 "./stb_image.h"
 var $13=(($12+($10<<2))|0); //@line 3568 "./stb_image.h"
 var $14=HEAP32[(($13)>>2)]; //@line 3568 "./stb_image.h"
 var $15=($9|0)<($14|0); //@line 3568 "./stb_image.h"
 if($15){label=3;break;}else{label=4;break;} //@line 3568 "./stb_image.h"
 case 3: 
 label=6;break; //@line 3569 "./stb_image.h"
 case 4: 
 label=5;break; //@line 3569 "./stb_image.h"
 case 5: 
 var $19=$s; //@line 3567 "./stb_image.h"
 var $20=((($19)+(1))|0); //@line 3567 "./stb_image.h"
 $s=$20; //@line 3567 "./stb_image.h"
 label=2;break; //@line 3567 "./stb_image.h"
 case 6: 
 var $22=$s; //@line 3570 "./stb_image.h"
 var $23=($22|0)==16; //@line 3570 "./stb_image.h"
 if($23){label=7;break;}else{label=8;break;} //@line 3570 "./stb_image.h"
 case 7: 
 $1=-1; //@line 3570 "./stb_image.h"
 label=11;break; //@line 3570 "./stb_image.h"
 case 8: 
 var $26=$k; //@line 3572 "./stb_image.h"
 var $27=$s; //@line 3572 "./stb_image.h"
 var $28=(((16)-($27))|0); //@line 3572 "./stb_image.h"
 var $29=$26>>($28|0); //@line 3572 "./stb_image.h"
 var $30=$s; //@line 3572 "./stb_image.h"
 var $31=$3; //@line 3572 "./stb_image.h"
 var $32=(($31+1024)|0); //@line 3572 "./stb_image.h"
 var $33=(($32+($30<<1))|0); //@line 3572 "./stb_image.h"
 var $34=HEAP16[(($33)>>1)]; //@line 3572 "./stb_image.h"
 var $35=($34&65535); //@line 3572 "./stb_image.h"
 var $36=((($29)-($35))|0); //@line 3572 "./stb_image.h"
 var $37=$s; //@line 3572 "./stb_image.h"
 var $38=$3; //@line 3572 "./stb_image.h"
 var $39=(($38+1124)|0); //@line 3572 "./stb_image.h"
 var $40=(($39+($37<<1))|0); //@line 3572 "./stb_image.h"
 var $41=HEAP16[(($40)>>1)]; //@line 3572 "./stb_image.h"
 var $42=($41&65535); //@line 3572 "./stb_image.h"
 var $43=((($36)+($42))|0); //@line 3572 "./stb_image.h"
 $b=$43; //@line 3572 "./stb_image.h"
 var $44=$b; //@line 3573 "./stb_image.h"
 var $45=$3; //@line 3573 "./stb_image.h"
 var $46=(($45+1156)|0); //@line 3573 "./stb_image.h"
 var $47=(($46+$44)|0); //@line 3573 "./stb_image.h"
 var $48=HEAP8[($47)]; //@line 3573 "./stb_image.h"
 var $49=($48&255); //@line 3573 "./stb_image.h"
 var $50=$s; //@line 3573 "./stb_image.h"
 var $51=($49|0)==($50|0); //@line 3573 "./stb_image.h"
 if($51){var $55=1;label=10;break;}else{label=9;break;} //@line 3573 "./stb_image.h"
 case 9: 
 ___assert_fail(138080,138824,3573,139928); //@line 3573 "./stb_image.h"
 throw "Reached an unreachable!"; //@line 3573 "./stb_image.h"
 label=10;break; //@line 3573 "./stb_image.h"
 case 10: 
 var $55;
 var $56=($55&1); //@line 3573 "./stb_image.h"
 var $57=$s; //@line 3574 "./stb_image.h"
 var $58=$2; //@line 3574 "./stb_image.h"
 var $59=(($58+12)|0); //@line 3574 "./stb_image.h"
 var $60=HEAP32[(($59)>>2)]; //@line 3574 "./stb_image.h"
 var $61=$60>>>($57>>>0); //@line 3574 "./stb_image.h"
 HEAP32[(($59)>>2)]=$61; //@line 3574 "./stb_image.h"
 var $62=$s; //@line 3575 "./stb_image.h"
 var $63=$2; //@line 3575 "./stb_image.h"
 var $64=(($63+8)|0); //@line 3575 "./stb_image.h"
 var $65=HEAP32[(($64)>>2)]; //@line 3575 "./stb_image.h"
 var $66=((($65)-($62))|0); //@line 3575 "./stb_image.h"
 HEAP32[(($64)>>2)]=$66; //@line 3575 "./stb_image.h"
 var $67=$b; //@line 3576 "./stb_image.h"
 var $68=$3; //@line 3576 "./stb_image.h"
 var $69=(($68+1444)|0); //@line 3576 "./stb_image.h"
 var $70=(($69+($67<<1))|0); //@line 3576 "./stb_image.h"
 var $71=HEAP16[(($70)>>1)]; //@line 3576 "./stb_image.h"
 var $72=($71&65535); //@line 3576 "./stb_image.h"
 $1=$72; //@line 3576 "./stb_image.h"
 label=11;break; //@line 3576 "./stb_image.h"
 case 11: 
 var $74=$1; //@line 3577 "./stb_image.h"
 STACKTOP=sp;return $74; //@line 3577 "./stb_image.h"
  default: assert(0, "bad label: " + label);
 }

}


function _stbi__bit_reverse($v,$bits){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 $1=$v;
 $2=$bits;
 var $3=$2; //@line 3463 "./stb_image.h"
 var $4=($3|0)<=16; //@line 3463 "./stb_image.h"
 if($4){var $8=0;label=3;break;}else{label=2;break;} //@line 3463 "./stb_image.h"
 case 2: 
 ___assert_fail(138064,138824,3463,140208); //@line 3463 "./stb_image.h"
 throw "Reached an unreachable!"; //@line 3463 "./stb_image.h"
 label=3;break; //@line 3463 "./stb_image.h"
 case 3: 
 var $8;
 var $9=($8&1); //@line 3463 "./stb_image.h"
 var $10=$1; //@line 3466 "./stb_image.h"
 var $11=_stbi__bitreverse16($10); //@line 3466 "./stb_image.h"
 var $12=$2; //@line 3466 "./stb_image.h"
 var $13=(((16)-($12))|0); //@line 3466 "./stb_image.h"
 var $14=$11>>($13|0); //@line 3466 "./stb_image.h"
 STACKTOP=sp;return $14; //@line 3466 "./stb_image.h"
  default: assert(0, "bad label: " + label);
 }

}


function _stbi__bitreverse16($n){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 $1=$n;
 var $2=$1; //@line 3454 "./stb_image.h"
 var $3=$2&43690; //@line 3454 "./stb_image.h"
 var $4=$3>>1; //@line 3454 "./stb_image.h"
 var $5=$1; //@line 3454 "./stb_image.h"
 var $6=$5&21845; //@line 3454 "./stb_image.h"
 var $7=$6<<1; //@line 3454 "./stb_image.h"
 var $8=$4|$7; //@line 3454 "./stb_image.h"
 $1=$8; //@line 3454 "./stb_image.h"
 var $9=$1; //@line 3455 "./stb_image.h"
 var $10=$9&52428; //@line 3455 "./stb_image.h"
 var $11=$10>>2; //@line 3455 "./stb_image.h"
 var $12=$1; //@line 3455 "./stb_image.h"
 var $13=$12&13107; //@line 3455 "./stb_image.h"
 var $14=$13<<2; //@line 3455 "./stb_image.h"
 var $15=$11|$14; //@line 3455 "./stb_image.h"
 $1=$15; //@line 3455 "./stb_image.h"
 var $16=$1; //@line 3456 "./stb_image.h"
 var $17=$16&61680; //@line 3456 "./stb_image.h"
 var $18=$17>>4; //@line 3456 "./stb_image.h"
 var $19=$1; //@line 3456 "./stb_image.h"
 var $20=$19&3855; //@line 3456 "./stb_image.h"
 var $21=$20<<4; //@line 3456 "./stb_image.h"
 var $22=$18|$21; //@line 3456 "./stb_image.h"
 $1=$22; //@line 3456 "./stb_image.h"
 var $23=$1; //@line 3457 "./stb_image.h"
 var $24=$23&65280; //@line 3457 "./stb_image.h"
 var $25=$24>>8; //@line 3457 "./stb_image.h"
 var $26=$1; //@line 3457 "./stb_image.h"
 var $27=$26&255; //@line 3457 "./stb_image.h"
 var $28=$27<<8; //@line 3457 "./stb_image.h"
 var $29=$25|$28; //@line 3457 "./stb_image.h"
 $1=$29; //@line 3457 "./stb_image.h"
 var $30=$1; //@line 3458 "./stb_image.h"
 STACKTOP=sp;return $30; //@line 3458 "./stb_image.h"
}


function _stbi__zget8($z){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 $2=$z;
 var $3=$2; //@line 3538 "./stb_image.h"
 var $4=(($3)|0); //@line 3538 "./stb_image.h"
 var $5=HEAP32[(($4)>>2)]; //@line 3538 "./stb_image.h"
 var $6=$2; //@line 3538 "./stb_image.h"
 var $7=(($6+4)|0); //@line 3538 "./stb_image.h"
 var $8=HEAP32[(($7)>>2)]; //@line 3538 "./stb_image.h"
 var $9=($5>>>0)>=($8>>>0); //@line 3538 "./stb_image.h"
 if($9){label=2;break;}else{label=3;break;} //@line 3538 "./stb_image.h"
 case 2: 
 $1=0; //@line 3538 "./stb_image.h"
 label=4;break; //@line 3538 "./stb_image.h"
 case 3: 
 var $12=$2; //@line 3539 "./stb_image.h"
 var $13=(($12)|0); //@line 3539 "./stb_image.h"
 var $14=HEAP32[(($13)>>2)]; //@line 3539 "./stb_image.h"
 var $15=(($14+1)|0); //@line 3539 "./stb_image.h"
 HEAP32[(($13)>>2)]=$15; //@line 3539 "./stb_image.h"
 var $16=HEAP8[($14)]; //@line 3539 "./stb_image.h"
 $1=$16; //@line 3539 "./stb_image.h"
 label=4;break; //@line 3539 "./stb_image.h"
 case 4: 
 var $18=$1; //@line 3540 "./stb_image.h"
 STACKTOP=sp;return $18; //@line 3540 "./stb_image.h"
  default: assert(0, "bad label: " + label);
 }

}


function _stbi__hdr_load($s,$x,$y,$comp,$req_comp){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+1048)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 var $buffer=sp;
 var $token=(sp)+(1024);
 var $valid;
 var $width;
 var $height;
 var $scanline;
 var $hdr_data;
 var $len;
 var $count;
 var $value;
 var $i;
 var $j;
 var $k;
 var $c1;
 var $c2;
 var $z;
 var $rgbe=(sp)+(1032);
 var $rgbe1=(sp)+(1040);
 $2=$s;
 $3=$x;
 $4=$y;
 $5=$comp;
 $6=$req_comp;
 $valid=0; //@line 5849 "./stb_image.h"
 var $7=$2; //@line 5859 "./stb_image.h"
 var $8=(($buffer)|0); //@line 5859 "./stb_image.h"
 var $9=_stbi__hdr_gettoken($7,$8); //@line 5859 "./stb_image.h"
 var $10=_strcmp($9,138840); //@line 5859 "./stb_image.h"
 var $11=($10|0)!=0; //@line 5859 "./stb_image.h"
 if($11){label=2;break;}else{label=3;break;} //@line 5859 "./stb_image.h"
 case 2: 
 var $13=_stbi__err(137776); //@line 5860 "./stb_image.h"
 var $14=($13|0)!=0; //@line 5860 "./stb_image.h"
 var $15=($14?0:0); //@line 5860 "./stb_image.h"
 var $16=$15; //@line 5860 "./stb_image.h"
 $1=$16; //@line 5860 "./stb_image.h"
 label=70;break; //@line 5860 "./stb_image.h"
 case 3: 
 label=4;break; //@line 5863 "./stb_image.h"
 case 4: 
 var $19=$2; //@line 5864 "./stb_image.h"
 var $20=(($buffer)|0); //@line 5864 "./stb_image.h"
 var $21=_stbi__hdr_gettoken($19,$20); //@line 5864 "./stb_image.h"
 HEAP32[(($token)>>2)]=$21; //@line 5864 "./stb_image.h"
 var $22=HEAP32[(($token)>>2)]; //@line 5865 "./stb_image.h"
 var $23=(($22)|0); //@line 5865 "./stb_image.h"
 var $24=HEAP8[($23)]; //@line 5865 "./stb_image.h"
 var $25=(($24<<24)>>24); //@line 5865 "./stb_image.h"
 var $26=($25|0)==0; //@line 5865 "./stb_image.h"
 if($26){label=5;break;}else{label=6;break;} //@line 5865 "./stb_image.h"
 case 5: 
 label=9;break; //@line 5865 "./stb_image.h"
 case 6: 
 var $29=HEAP32[(($token)>>2)]; //@line 5866 "./stb_image.h"
 var $30=_strcmp($29,138504); //@line 5866 "./stb_image.h"
 var $31=($30|0)==0; //@line 5866 "./stb_image.h"
 if($31){label=7;break;}else{label=8;break;} //@line 5866 "./stb_image.h"
 case 7: 
 $valid=1; //@line 5866 "./stb_image.h"
 label=8;break; //@line 5866 "./stb_image.h"
 case 8: 
 label=4;break; //@line 5867 "./stb_image.h"
 case 9: 
 var $35=$valid; //@line 5869 "./stb_image.h"
 var $36=($35|0)!=0; //@line 5869 "./stb_image.h"
 if($36){label=11;break;}else{label=10;break;} //@line 5869 "./stb_image.h"
 case 10: 
 var $38=_stbi__err(137752); //@line 5869 "./stb_image.h"
 var $39=($38|0)!=0; //@line 5869 "./stb_image.h"
 var $40=($39?0:0); //@line 5869 "./stb_image.h"
 var $41=$40; //@line 5869 "./stb_image.h"
 $1=$41; //@line 5869 "./stb_image.h"
 label=70;break; //@line 5869 "./stb_image.h"
 case 11: 
 var $43=$2; //@line 5873 "./stb_image.h"
 var $44=(($buffer)|0); //@line 5873 "./stb_image.h"
 var $45=_stbi__hdr_gettoken($43,$44); //@line 5873 "./stb_image.h"
 HEAP32[(($token)>>2)]=$45; //@line 5873 "./stb_image.h"
 var $46=HEAP32[(($token)>>2)]; //@line 5874 "./stb_image.h"
 var $47=_strncmp($46,138312,3); //@line 5874 "./stb_image.h"
 var $48=($47|0)!=0; //@line 5874 "./stb_image.h"
 if($48){label=12;break;}else{label=13;break;} //@line 5874 "./stb_image.h"
 case 12: 
 var $50=_stbi__err(137728); //@line 5874 "./stb_image.h"
 var $51=($50|0)!=0; //@line 5874 "./stb_image.h"
 var $52=($51?0:0); //@line 5874 "./stb_image.h"
 var $53=$52; //@line 5874 "./stb_image.h"
 $1=$53; //@line 5874 "./stb_image.h"
 label=70;break; //@line 5874 "./stb_image.h"
 case 13: 
 var $55=HEAP32[(($token)>>2)]; //@line 5875 "./stb_image.h"
 var $56=(($55+3)|0); //@line 5875 "./stb_image.h"
 HEAP32[(($token)>>2)]=$56; //@line 5875 "./stb_image.h"
 var $57=HEAP32[(($token)>>2)]; //@line 5876 "./stb_image.h"
 var $58=_strtol($57,$token,10); //@line 5876 "./stb_image.h"
 $height=$58; //@line 5876 "./stb_image.h"
 label=14;break; //@line 5877 "./stb_image.h"
 case 14: 
 var $60=HEAP32[(($token)>>2)]; //@line 5877 "./stb_image.h"
 var $61=HEAP8[($60)]; //@line 5877 "./stb_image.h"
 var $62=(($61<<24)>>24); //@line 5877 "./stb_image.h"
 var $63=($62|0)==32; //@line 5877 "./stb_image.h"
 if($63){label=15;break;}else{label=16;break;} //@line 5877 "./stb_image.h"
 case 15: 
 var $65=HEAP32[(($token)>>2)]; //@line 5877 "./stb_image.h"
 var $66=(($65+1)|0); //@line 5877 "./stb_image.h"
 HEAP32[(($token)>>2)]=$66; //@line 5877 "./stb_image.h"
 label=14;break; //@line 5877 "./stb_image.h"
 case 16: 
 var $68=HEAP32[(($token)>>2)]; //@line 5878 "./stb_image.h"
 var $69=_strncmp($68,138096,3); //@line 5878 "./stb_image.h"
 var $70=($69|0)!=0; //@line 5878 "./stb_image.h"
 if($70){label=17;break;}else{label=18;break;} //@line 5878 "./stb_image.h"
 case 17: 
 var $72=_stbi__err(137728); //@line 5878 "./stb_image.h"
 var $73=($72|0)!=0; //@line 5878 "./stb_image.h"
 var $74=($73?0:0); //@line 5878 "./stb_image.h"
 var $75=$74; //@line 5878 "./stb_image.h"
 $1=$75; //@line 5878 "./stb_image.h"
 label=70;break; //@line 5878 "./stb_image.h"
 case 18: 
 var $77=HEAP32[(($token)>>2)]; //@line 5879 "./stb_image.h"
 var $78=(($77+3)|0); //@line 5879 "./stb_image.h"
 HEAP32[(($token)>>2)]=$78; //@line 5879 "./stb_image.h"
 var $79=HEAP32[(($token)>>2)]; //@line 5880 "./stb_image.h"
 var $80=_strtol($79,0,10); //@line 5880 "./stb_image.h"
 $width=$80; //@line 5880 "./stb_image.h"
 var $81=$width; //@line 5882 "./stb_image.h"
 var $82=$3; //@line 5882 "./stb_image.h"
 HEAP32[(($82)>>2)]=$81; //@line 5882 "./stb_image.h"
 var $83=$height; //@line 5883 "./stb_image.h"
 var $84=$4; //@line 5883 "./stb_image.h"
 HEAP32[(($84)>>2)]=$83; //@line 5883 "./stb_image.h"
 var $85=$5; //@line 5885 "./stb_image.h"
 var $86=($85|0)!=0; //@line 5885 "./stb_image.h"
 if($86){label=19;break;}else{label=20;break;} //@line 5885 "./stb_image.h"
 case 19: 
 var $88=$5; //@line 5885 "./stb_image.h"
 HEAP32[(($88)>>2)]=3; //@line 5885 "./stb_image.h"
 label=20;break; //@line 5885 "./stb_image.h"
 case 20: 
 var $90=$6; //@line 5886 "./stb_image.h"
 var $91=($90|0)==0; //@line 5886 "./stb_image.h"
 if($91){label=21;break;}else{label=22;break;} //@line 5886 "./stb_image.h"
 case 21: 
 $6=3; //@line 5886 "./stb_image.h"
 label=22;break; //@line 5886 "./stb_image.h"
 case 22: 
 var $94=$height; //@line 5889 "./stb_image.h"
 var $95=$width; //@line 5889 "./stb_image.h"
 var $96=(Math_imul($94,$95)|0); //@line 5889 "./stb_image.h"
 var $97=$6; //@line 5889 "./stb_image.h"
 var $98=(Math_imul($96,$97)|0); //@line 5889 "./stb_image.h"
 var $99=($98<<2); //@line 5889 "./stb_image.h"
 var $100=_stbi__malloc($99); //@line 5889 "./stb_image.h"
 var $101=$100; //@line 5889 "./stb_image.h"
 $hdr_data=$101; //@line 5889 "./stb_image.h"
 var $102=$width; //@line 5893 "./stb_image.h"
 var $103=($102|0)<8; //@line 5893 "./stb_image.h"
 if($103){label=24;break;}else{label=23;break;} //@line 5893 "./stb_image.h"
 case 23: 
 var $105=$width; //@line 5893 "./stb_image.h"
 var $106=($105|0)>=32768; //@line 5893 "./stb_image.h"
 if($106){label=24;break;}else{label=34;break;} //@line 5893 "./stb_image.h"
 case 24: 
 $j=0; //@line 5895 "./stb_image.h"
 label=25;break; //@line 5895 "./stb_image.h"
 case 25: 
 var $109=$j; //@line 5895 "./stb_image.h"
 var $110=$height; //@line 5895 "./stb_image.h"
 var $111=($109|0)<($110|0); //@line 5895 "./stb_image.h"
 if($111){label=26;break;}else{label=33;break;} //@line 5895 "./stb_image.h"
 case 26: 
 $i=0; //@line 5896 "./stb_image.h"
 label=27;break; //@line 5896 "./stb_image.h"
 case 27: 
 var $114=$i; //@line 5896 "./stb_image.h"
 var $115=$width; //@line 5896 "./stb_image.h"
 var $116=($114|0)<($115|0); //@line 5896 "./stb_image.h"
 if($116){label=28;break;}else{label=31;break;} //@line 5896 "./stb_image.h"
 case 28: 
 label=29;break; //@line 5897 "./stb_image.h"
 case 29: 
 var $119=$2; //@line 5899 "./stb_image.h"
 var $120=(($rgbe)|0); //@line 5899 "./stb_image.h"
 var $121=_stbi__getn($119,$120,4); //@line 5899 "./stb_image.h"
 var $122=$hdr_data; //@line 5900 "./stb_image.h"
 var $123=$j; //@line 5900 "./stb_image.h"
 var $124=$width; //@line 5900 "./stb_image.h"
 var $125=(Math_imul($123,$124)|0); //@line 5900 "./stb_image.h"
 var $126=$6; //@line 5900 "./stb_image.h"
 var $127=(Math_imul($125,$126)|0); //@line 5900 "./stb_image.h"
 var $128=(($122+($127<<2))|0); //@line 5900 "./stb_image.h"
 var $129=$i; //@line 5900 "./stb_image.h"
 var $130=$6; //@line 5900 "./stb_image.h"
 var $131=(Math_imul($129,$130)|0); //@line 5900 "./stb_image.h"
 var $132=(($128+($131<<2))|0); //@line 5900 "./stb_image.h"
 var $133=(($rgbe)|0); //@line 5900 "./stb_image.h"
 var $134=$6; //@line 5900 "./stb_image.h"
 _stbi__hdr_convert($132,$133,$134); //@line 5900 "./stb_image.h"
 label=30;break; //@line 5901 "./stb_image.h"
 case 30: 
 var $136=$i; //@line 5896 "./stb_image.h"
 var $137=((($136)+(1))|0); //@line 5896 "./stb_image.h"
 $i=$137; //@line 5896 "./stb_image.h"
 label=27;break; //@line 5896 "./stb_image.h"
 case 31: 
 label=32;break; //@line 5902 "./stb_image.h"
 case 32: 
 var $140=$j; //@line 5895 "./stb_image.h"
 var $141=((($140)+(1))|0); //@line 5895 "./stb_image.h"
 $j=$141; //@line 5895 "./stb_image.h"
 label=25;break; //@line 5895 "./stb_image.h"
 case 33: 
 label=69;break; //@line 5903 "./stb_image.h"
 case 34: 
 $scanline=0; //@line 5905 "./stb_image.h"
 $j=0; //@line 5907 "./stb_image.h"
 label=35;break; //@line 5907 "./stb_image.h"
 case 35: 
 var $145=$j; //@line 5907 "./stb_image.h"
 var $146=$height; //@line 5907 "./stb_image.h"
 var $147=($145|0)<($146|0); //@line 5907 "./stb_image.h"
 if($147){label=36;break;}else{label=68;break;} //@line 5907 "./stb_image.h"
 case 36: 
 var $149=$2; //@line 5908 "./stb_image.h"
 var $150=_stbi__get8($149); //@line 5908 "./stb_image.h"
 var $151=($150&255); //@line 5908 "./stb_image.h"
 $c1=$151; //@line 5908 "./stb_image.h"
 var $152=$2; //@line 5909 "./stb_image.h"
 var $153=_stbi__get8($152); //@line 5909 "./stb_image.h"
 var $154=($153&255); //@line 5909 "./stb_image.h"
 $c2=$154; //@line 5909 "./stb_image.h"
 var $155=$2; //@line 5910 "./stb_image.h"
 var $156=_stbi__get8($155); //@line 5910 "./stb_image.h"
 var $157=($156&255); //@line 5910 "./stb_image.h"
 $len=$157; //@line 5910 "./stb_image.h"
 var $158=$c1; //@line 5911 "./stb_image.h"
 var $159=($158|0)!=2; //@line 5911 "./stb_image.h"
 if($159){label=39;break;}else{label=37;break;} //@line 5911 "./stb_image.h"
 case 37: 
 var $161=$c2; //@line 5911 "./stb_image.h"
 var $162=($161|0)!=2; //@line 5911 "./stb_image.h"
 if($162){label=39;break;}else{label=38;break;} //@line 5911 "./stb_image.h"
 case 38: 
 var $164=$len; //@line 5911 "./stb_image.h"
 var $165=$164&128; //@line 5911 "./stb_image.h"
 var $166=($165|0)!=0; //@line 5911 "./stb_image.h"
 if($166){label=39;break;}else{label=40;break;} //@line 5911 "./stb_image.h"
 case 39: 
 var $168=$c1; //@line 5915 "./stb_image.h"
 var $169=(($168)&255); //@line 5915 "./stb_image.h"
 var $170=(($rgbe1)|0); //@line 5915 "./stb_image.h"
 HEAP8[($170)]=$169; //@line 5915 "./stb_image.h"
 var $171=$c2; //@line 5916 "./stb_image.h"
 var $172=(($171)&255); //@line 5916 "./stb_image.h"
 var $173=(($rgbe1+1)|0); //@line 5916 "./stb_image.h"
 HEAP8[($173)]=$172; //@line 5916 "./stb_image.h"
 var $174=$len; //@line 5917 "./stb_image.h"
 var $175=(($174)&255); //@line 5917 "./stb_image.h"
 var $176=(($rgbe1+2)|0); //@line 5917 "./stb_image.h"
 HEAP8[($176)]=$175; //@line 5917 "./stb_image.h"
 var $177=$2; //@line 5918 "./stb_image.h"
 var $178=_stbi__get8($177); //@line 5918 "./stb_image.h"
 var $179=(($rgbe1+3)|0); //@line 5918 "./stb_image.h"
 HEAP8[($179)]=$178; //@line 5918 "./stb_image.h"
 var $180=$hdr_data; //@line 5919 "./stb_image.h"
 var $181=(($rgbe1)|0); //@line 5919 "./stb_image.h"
 var $182=$6; //@line 5919 "./stb_image.h"
 _stbi__hdr_convert($180,$181,$182); //@line 5919 "./stb_image.h"
 $i=1; //@line 5920 "./stb_image.h"
 $j=0; //@line 5921 "./stb_image.h"
 var $183=$scanline; //@line 5922 "./stb_image.h"
 _free($183); //@line 5922 "./stb_image.h"
 label=29;break; //@line 5923 "./stb_image.h"
 case 40: 
 var $185=$len; //@line 5925 "./stb_image.h"
 var $186=$185<<8; //@line 5925 "./stb_image.h"
 $len=$186; //@line 5925 "./stb_image.h"
 var $187=$2; //@line 5926 "./stb_image.h"
 var $188=_stbi__get8($187); //@line 5926 "./stb_image.h"
 var $189=($188&255); //@line 5926 "./stb_image.h"
 var $190=$len; //@line 5926 "./stb_image.h"
 var $191=$190|$189; //@line 5926 "./stb_image.h"
 $len=$191; //@line 5926 "./stb_image.h"
 var $192=$len; //@line 5927 "./stb_image.h"
 var $193=$width; //@line 5927 "./stb_image.h"
 var $194=($192|0)!=($193|0); //@line 5927 "./stb_image.h"
 if($194){label=41;break;}else{label=42;break;} //@line 5927 "./stb_image.h"
 case 41: 
 var $196=$hdr_data; //@line 5927 "./stb_image.h"
 var $197=$196; //@line 5927 "./stb_image.h"
 _free($197); //@line 5927 "./stb_image.h"
 var $198=$scanline; //@line 5927 "./stb_image.h"
 _free($198); //@line 5927 "./stb_image.h"
 var $199=_stbi__err(137696); //@line 5927 "./stb_image.h"
 var $200=($199|0)!=0; //@line 5927 "./stb_image.h"
 var $201=($200?0:0); //@line 5927 "./stb_image.h"
 var $202=$201; //@line 5927 "./stb_image.h"
 $1=$202; //@line 5927 "./stb_image.h"
 label=70;break; //@line 5927 "./stb_image.h"
 case 42: 
 var $204=$scanline; //@line 5928 "./stb_image.h"
 var $205=($204|0)==0; //@line 5928 "./stb_image.h"
 if($205){label=43;break;}else{label=44;break;} //@line 5928 "./stb_image.h"
 case 43: 
 var $207=$width; //@line 5928 "./stb_image.h"
 var $208=($207<<2); //@line 5928 "./stb_image.h"
 var $209=_stbi__malloc($208); //@line 5928 "./stb_image.h"
 $scanline=$209; //@line 5928 "./stb_image.h"
 label=44;break; //@line 5928 "./stb_image.h"
 case 44: 
 $k=0; //@line 5930 "./stb_image.h"
 label=45;break; //@line 5930 "./stb_image.h"
 case 45: 
 var $212=$k; //@line 5930 "./stb_image.h"
 var $213=($212|0)<4; //@line 5930 "./stb_image.h"
 if($213){label=46;break;}else{label=62;break;} //@line 5930 "./stb_image.h"
 case 46: 
 $i=0; //@line 5931 "./stb_image.h"
 label=47;break; //@line 5932 "./stb_image.h"
 case 47: 
 var $216=$i; //@line 5932 "./stb_image.h"
 var $217=$width; //@line 5932 "./stb_image.h"
 var $218=($216|0)<($217|0); //@line 5932 "./stb_image.h"
 if($218){label=48;break;}else{label=60;break;} //@line 5932 "./stb_image.h"
 case 48: 
 var $220=$2; //@line 5933 "./stb_image.h"
 var $221=_stbi__get8($220); //@line 5933 "./stb_image.h"
 $count=$221; //@line 5933 "./stb_image.h"
 var $222=$count; //@line 5934 "./stb_image.h"
 var $223=($222&255); //@line 5934 "./stb_image.h"
 var $224=($223|0)>128; //@line 5934 "./stb_image.h"
 if($224){label=49;break;}else{label=54;break;} //@line 5934 "./stb_image.h"
 case 49: 
 var $226=$2; //@line 5936 "./stb_image.h"
 var $227=_stbi__get8($226); //@line 5936 "./stb_image.h"
 $value=$227; //@line 5936 "./stb_image.h"
 var $228=$count; //@line 5937 "./stb_image.h"
 var $229=($228&255); //@line 5937 "./stb_image.h"
 var $230=((($229)-(128))|0); //@line 5937 "./stb_image.h"
 var $231=(($230)&255); //@line 5937 "./stb_image.h"
 $count=$231; //@line 5937 "./stb_image.h"
 $z=0; //@line 5938 "./stb_image.h"
 label=50;break; //@line 5938 "./stb_image.h"
 case 50: 
 var $233=$z; //@line 5938 "./stb_image.h"
 var $234=$count; //@line 5938 "./stb_image.h"
 var $235=($234&255); //@line 5938 "./stb_image.h"
 var $236=($233|0)<($235|0); //@line 5938 "./stb_image.h"
 if($236){label=51;break;}else{label=53;break;} //@line 5938 "./stb_image.h"
 case 51: 
 var $238=$value; //@line 5939 "./stb_image.h"
 var $239=$i; //@line 5939 "./stb_image.h"
 var $240=((($239)+(1))|0); //@line 5939 "./stb_image.h"
 $i=$240; //@line 5939 "./stb_image.h"
 var $241=($239<<2); //@line 5939 "./stb_image.h"
 var $242=$k; //@line 5939 "./stb_image.h"
 var $243=((($241)+($242))|0); //@line 5939 "./stb_image.h"
 var $244=$scanline; //@line 5939 "./stb_image.h"
 var $245=(($244+$243)|0); //@line 5939 "./stb_image.h"
 HEAP8[($245)]=$238; //@line 5939 "./stb_image.h"
 label=52;break; //@line 5939 "./stb_image.h"
 case 52: 
 var $247=$z; //@line 5938 "./stb_image.h"
 var $248=((($247)+(1))|0); //@line 5938 "./stb_image.h"
 $z=$248; //@line 5938 "./stb_image.h"
 label=50;break; //@line 5938 "./stb_image.h"
 case 53: 
 label=59;break; //@line 5940 "./stb_image.h"
 case 54: 
 $z=0; //@line 5942 "./stb_image.h"
 label=55;break; //@line 5942 "./stb_image.h"
 case 55: 
 var $252=$z; //@line 5942 "./stb_image.h"
 var $253=$count; //@line 5942 "./stb_image.h"
 var $254=($253&255); //@line 5942 "./stb_image.h"
 var $255=($252|0)<($254|0); //@line 5942 "./stb_image.h"
 if($255){label=56;break;}else{label=58;break;} //@line 5942 "./stb_image.h"
 case 56: 
 var $257=$2; //@line 5943 "./stb_image.h"
 var $258=_stbi__get8($257); //@line 5943 "./stb_image.h"
 var $259=$i; //@line 5943 "./stb_image.h"
 var $260=((($259)+(1))|0); //@line 5943 "./stb_image.h"
 $i=$260; //@line 5943 "./stb_image.h"
 var $261=($259<<2); //@line 5943 "./stb_image.h"
 var $262=$k; //@line 5943 "./stb_image.h"
 var $263=((($261)+($262))|0); //@line 5943 "./stb_image.h"
 var $264=$scanline; //@line 5943 "./stb_image.h"
 var $265=(($264+$263)|0); //@line 5943 "./stb_image.h"
 HEAP8[($265)]=$258; //@line 5943 "./stb_image.h"
 label=57;break; //@line 5943 "./stb_image.h"
 case 57: 
 var $267=$z; //@line 5942 "./stb_image.h"
 var $268=((($267)+(1))|0); //@line 5942 "./stb_image.h"
 $z=$268; //@line 5942 "./stb_image.h"
 label=55;break; //@line 5942 "./stb_image.h"
 case 58: 
 label=59;break;
 case 59: 
 label=47;break; //@line 5945 "./stb_image.h"
 case 60: 
 label=61;break; //@line 5946 "./stb_image.h"
 case 61: 
 var $273=$k; //@line 5930 "./stb_image.h"
 var $274=((($273)+(1))|0); //@line 5930 "./stb_image.h"
 $k=$274; //@line 5930 "./stb_image.h"
 label=45;break; //@line 5930 "./stb_image.h"
 case 62: 
 $i=0; //@line 5947 "./stb_image.h"
 label=63;break; //@line 5947 "./stb_image.h"
 case 63: 
 var $277=$i; //@line 5947 "./stb_image.h"
 var $278=$width; //@line 5947 "./stb_image.h"
 var $279=($277|0)<($278|0); //@line 5947 "./stb_image.h"
 if($279){label=64;break;}else{label=66;break;} //@line 5947 "./stb_image.h"
 case 64: 
 var $281=$hdr_data; //@line 5948 "./stb_image.h"
 var $282=$j; //@line 5948 "./stb_image.h"
 var $283=$width; //@line 5948 "./stb_image.h"
 var $284=(Math_imul($282,$283)|0); //@line 5948 "./stb_image.h"
 var $285=$i; //@line 5948 "./stb_image.h"
 var $286=((($284)+($285))|0); //@line 5948 "./stb_image.h"
 var $287=$6; //@line 5948 "./stb_image.h"
 var $288=(Math_imul($286,$287)|0); //@line 5948 "./stb_image.h"
 var $289=(($281+($288<<2))|0); //@line 5948 "./stb_image.h"
 var $290=$scanline; //@line 5948 "./stb_image.h"
 var $291=$i; //@line 5948 "./stb_image.h"
 var $292=($291<<2); //@line 5948 "./stb_image.h"
 var $293=(($290+$292)|0); //@line 5948 "./stb_image.h"
 var $294=$6; //@line 5948 "./stb_image.h"
 _stbi__hdr_convert($289,$293,$294); //@line 5948 "./stb_image.h"
 label=65;break; //@line 5948 "./stb_image.h"
 case 65: 
 var $296=$i; //@line 5947 "./stb_image.h"
 var $297=((($296)+(1))|0); //@line 5947 "./stb_image.h"
 $i=$297; //@line 5947 "./stb_image.h"
 label=63;break; //@line 5947 "./stb_image.h"
 case 66: 
 label=67;break; //@line 5949 "./stb_image.h"
 case 67: 
 var $300=$j; //@line 5907 "./stb_image.h"
 var $301=((($300)+(1))|0); //@line 5907 "./stb_image.h"
 $j=$301; //@line 5907 "./stb_image.h"
 label=35;break; //@line 5907 "./stb_image.h"
 case 68: 
 var $303=$scanline; //@line 5950 "./stb_image.h"
 _free($303); //@line 5950 "./stb_image.h"
 label=69;break;
 case 69: 
 var $305=$hdr_data; //@line 5953 "./stb_image.h"
 $1=$305; //@line 5953 "./stb_image.h"
 label=70;break; //@line 5953 "./stb_image.h"
 case 70: 
 var $307=$1; //@line 5954 "./stb_image.h"
 STACKTOP=sp;return $307; //@line 5954 "./stb_image.h"
  default: assert(0, "bad label: " + label);
 }

}


function _stbi__float_postprocess($result,$x,$y,$comp,$req_comp){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $w;
 var $h;
 var $depth;
 var $row;
 var $col;
 var $z;
 var $temp;
 $1=$result;
 $2=$x;
 $3=$y;
 $4=$comp;
 $5=$req_comp;
 var $6=HEAP32[((140984)>>2)]; //@line 994 "./stb_image.h"
 var $7=($6|0)!=0; //@line 994 "./stb_image.h"
 if($7){label=2;break;}else{label=19;break;} //@line 994 "./stb_image.h"
 case 2: 
 var $9=$1; //@line 994 "./stb_image.h"
 var $10=($9|0)!=0; //@line 994 "./stb_image.h"
 if($10){label=3;break;}else{label=19;break;} //@line 994 "./stb_image.h"
 case 3: 
 var $12=$2; //@line 995 "./stb_image.h"
 var $13=HEAP32[(($12)>>2)]; //@line 995 "./stb_image.h"
 $w=$13; //@line 995 "./stb_image.h"
 var $14=$3; //@line 995 "./stb_image.h"
 var $15=HEAP32[(($14)>>2)]; //@line 995 "./stb_image.h"
 $h=$15; //@line 995 "./stb_image.h"
 var $16=$5; //@line 996 "./stb_image.h"
 var $17=($16|0)!=0; //@line 996 "./stb_image.h"
 if($17){label=4;break;}else{label=5;break;} //@line 996 "./stb_image.h"
 case 4: 
 var $19=$5; //@line 996 "./stb_image.h"
 var $24=$19;label=6;break; //@line 996 "./stb_image.h"
 case 5: 
 var $21=$4; //@line 996 "./stb_image.h"
 var $22=HEAP32[(($21)>>2)]; //@line 996 "./stb_image.h"
 var $24=$22;label=6;break; //@line 996 "./stb_image.h"
 case 6: 
 var $24; //@line 996 "./stb_image.h"
 $depth=$24; //@line 996 "./stb_image.h"
 $row=0; //@line 1001 "./stb_image.h"
 label=7;break; //@line 1001 "./stb_image.h"
 case 7: 
 var $26=$row; //@line 1001 "./stb_image.h"
 var $27=$h; //@line 1001 "./stb_image.h"
 var $28=$27>>1; //@line 1001 "./stb_image.h"
 var $29=($26|0)<($28|0); //@line 1001 "./stb_image.h"
 if($29){label=8;break;}else{label=18;break;} //@line 1001 "./stb_image.h"
 case 8: 
 $col=0; //@line 1002 "./stb_image.h"
 label=9;break; //@line 1002 "./stb_image.h"
 case 9: 
 var $32=$col; //@line 1002 "./stb_image.h"
 var $33=$w; //@line 1002 "./stb_image.h"
 var $34=($32|0)<($33|0); //@line 1002 "./stb_image.h"
 if($34){label=10;break;}else{label=16;break;} //@line 1002 "./stb_image.h"
 case 10: 
 $z=0; //@line 1003 "./stb_image.h"
 label=11;break; //@line 1003 "./stb_image.h"
 case 11: 
 var $37=$z; //@line 1003 "./stb_image.h"
 var $38=$depth; //@line 1003 "./stb_image.h"
 var $39=($37|0)<($38|0); //@line 1003 "./stb_image.h"
 if($39){label=12;break;}else{label=14;break;} //@line 1003 "./stb_image.h"
 case 12: 
 var $41=$row; //@line 1004 "./stb_image.h"
 var $42=$w; //@line 1004 "./stb_image.h"
 var $43=(Math_imul($41,$42)|0); //@line 1004 "./stb_image.h"
 var $44=$col; //@line 1004 "./stb_image.h"
 var $45=((($43)+($44))|0); //@line 1004 "./stb_image.h"
 var $46=$depth; //@line 1004 "./stb_image.h"
 var $47=(Math_imul($45,$46)|0); //@line 1004 "./stb_image.h"
 var $48=$z; //@line 1004 "./stb_image.h"
 var $49=((($47)+($48))|0); //@line 1004 "./stb_image.h"
 var $50=$1; //@line 1004 "./stb_image.h"
 var $51=(($50+($49<<2))|0); //@line 1004 "./stb_image.h"
 var $52=HEAPF32[(($51)>>2)]; //@line 1004 "./stb_image.h"
 $temp=$52; //@line 1004 "./stb_image.h"
 var $53=$h; //@line 1005 "./stb_image.h"
 var $54=$row; //@line 1005 "./stb_image.h"
 var $55=((($53)-($54))|0); //@line 1005 "./stb_image.h"
 var $56=((($55)-(1))|0); //@line 1005 "./stb_image.h"
 var $57=$w; //@line 1005 "./stb_image.h"
 var $58=(Math_imul($56,$57)|0); //@line 1005 "./stb_image.h"
 var $59=$col; //@line 1005 "./stb_image.h"
 var $60=((($58)+($59))|0); //@line 1005 "./stb_image.h"
 var $61=$depth; //@line 1005 "./stb_image.h"
 var $62=(Math_imul($60,$61)|0); //@line 1005 "./stb_image.h"
 var $63=$z; //@line 1005 "./stb_image.h"
 var $64=((($62)+($63))|0); //@line 1005 "./stb_image.h"
 var $65=$1; //@line 1005 "./stb_image.h"
 var $66=(($65+($64<<2))|0); //@line 1005 "./stb_image.h"
 var $67=HEAPF32[(($66)>>2)]; //@line 1005 "./stb_image.h"
 var $68=$row; //@line 1005 "./stb_image.h"
 var $69=$w; //@line 1005 "./stb_image.h"
 var $70=(Math_imul($68,$69)|0); //@line 1005 "./stb_image.h"
 var $71=$col; //@line 1005 "./stb_image.h"
 var $72=((($70)+($71))|0); //@line 1005 "./stb_image.h"
 var $73=$depth; //@line 1005 "./stb_image.h"
 var $74=(Math_imul($72,$73)|0); //@line 1005 "./stb_image.h"
 var $75=$z; //@line 1005 "./stb_image.h"
 var $76=((($74)+($75))|0); //@line 1005 "./stb_image.h"
 var $77=$1; //@line 1005 "./stb_image.h"
 var $78=(($77+($76<<2))|0); //@line 1005 "./stb_image.h"
 HEAPF32[(($78)>>2)]=$67; //@line 1005 "./stb_image.h"
 var $79=$temp; //@line 1006 "./stb_image.h"
 var $80=$h; //@line 1006 "./stb_image.h"
 var $81=$row; //@line 1006 "./stb_image.h"
 var $82=((($80)-($81))|0); //@line 1006 "./stb_image.h"
 var $83=((($82)-(1))|0); //@line 1006 "./stb_image.h"
 var $84=$w; //@line 1006 "./stb_image.h"
 var $85=(Math_imul($83,$84)|0); //@line 1006 "./stb_image.h"
 var $86=$col; //@line 1006 "./stb_image.h"
 var $87=((($85)+($86))|0); //@line 1006 "./stb_image.h"
 var $88=$depth; //@line 1006 "./stb_image.h"
 var $89=(Math_imul($87,$88)|0); //@line 1006 "./stb_image.h"
 var $90=$z; //@line 1006 "./stb_image.h"
 var $91=((($89)+($90))|0); //@line 1006 "./stb_image.h"
 var $92=$1; //@line 1006 "./stb_image.h"
 var $93=(($92+($91<<2))|0); //@line 1006 "./stb_image.h"
 HEAPF32[(($93)>>2)]=$79; //@line 1006 "./stb_image.h"
 label=13;break; //@line 1007 "./stb_image.h"
 case 13: 
 var $95=$z; //@line 1003 "./stb_image.h"
 var $96=((($95)+(1))|0); //@line 1003 "./stb_image.h"
 $z=$96; //@line 1003 "./stb_image.h"
 label=11;break; //@line 1003 "./stb_image.h"
 case 14: 
 label=15;break; //@line 1008 "./stb_image.h"
 case 15: 
 var $99=$col; //@line 1002 "./stb_image.h"
 var $100=((($99)+(1))|0); //@line 1002 "./stb_image.h"
 $col=$100; //@line 1002 "./stb_image.h"
 label=9;break; //@line 1002 "./stb_image.h"
 case 16: 
 label=17;break; //@line 1009 "./stb_image.h"
 case 17: 
 var $103=$row; //@line 1001 "./stb_image.h"
 var $104=((($103)+(1))|0); //@line 1001 "./stb_image.h"
 $row=$104; //@line 1001 "./stb_image.h"
 label=7;break; //@line 1001 "./stb_image.h"
 case 18: 
 label=19;break; //@line 1010 "./stb_image.h"
 case 19: 
 STACKTOP=sp;return; //@line 1011 "./stb_image.h"
  default: assert(0, "bad label: " + label);
 }

}


function _stbi__ldr_to_hdr($data,$x,$y,$comp){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $i;
 var $k;
 var $n;
 var $output;
 $2=$data;
 $3=$x;
 $4=$y;
 $5=$comp;
 var $6=$3; //@line 1367 "./stb_image.h"
 var $7=$4; //@line 1367 "./stb_image.h"
 var $8=(Math_imul($6,$7)|0); //@line 1367 "./stb_image.h"
 var $9=$5; //@line 1367 "./stb_image.h"
 var $10=(Math_imul($8,$9)|0); //@line 1367 "./stb_image.h"
 var $11=($10<<2); //@line 1367 "./stb_image.h"
 var $12=_stbi__malloc($11); //@line 1367 "./stb_image.h"
 var $13=$12; //@line 1367 "./stb_image.h"
 $output=$13; //@line 1367 "./stb_image.h"
 var $14=$output; //@line 1368 "./stb_image.h"
 var $15=($14|0)==0; //@line 1368 "./stb_image.h"
 if($15){label=2;break;}else{label=3;break;} //@line 1368 "./stb_image.h"
 case 2: 
 var $17=$2; //@line 1368 "./stb_image.h"
 _free($17); //@line 1368 "./stb_image.h"
 var $18=_stbi__err(138952); //@line 1368 "./stb_image.h"
 var $19=($18|0)!=0; //@line 1368 "./stb_image.h"
 var $20=($19?0:0); //@line 1368 "./stb_image.h"
 var $21=$20; //@line 1368 "./stb_image.h"
 $1=$21; //@line 1368 "./stb_image.h"
 label=17;break; //@line 1368 "./stb_image.h"
 case 3: 
 var $23=$5; //@line 1370 "./stb_image.h"
 var $24=$23&1; //@line 1370 "./stb_image.h"
 var $25=($24|0)!=0; //@line 1370 "./stb_image.h"
 if($25){label=4;break;}else{label=5;break;} //@line 1370 "./stb_image.h"
 case 4: 
 var $27=$5; //@line 1370 "./stb_image.h"
 $n=$27; //@line 1370 "./stb_image.h"
 label=6;break; //@line 1370 "./stb_image.h"
 case 5: 
 var $29=$5; //@line 1370 "./stb_image.h"
 var $30=((($29)-(1))|0); //@line 1370 "./stb_image.h"
 $n=$30; //@line 1370 "./stb_image.h"
 label=6;break;
 case 6: 
 $i=0; //@line 1371 "./stb_image.h"
 label=7;break; //@line 1371 "./stb_image.h"
 case 7: 
 var $33=$i; //@line 1371 "./stb_image.h"
 var $34=$3; //@line 1371 "./stb_image.h"
 var $35=$4; //@line 1371 "./stb_image.h"
 var $36=(Math_imul($34,$35)|0); //@line 1371 "./stb_image.h"
 var $37=($33|0)<($36|0); //@line 1371 "./stb_image.h"
 if($37){label=8;break;}else{label=16;break;} //@line 1371 "./stb_image.h"
 case 8: 
 $k=0; //@line 1372 "./stb_image.h"
 label=9;break; //@line 1372 "./stb_image.h"
 case 9: 
 var $40=$k; //@line 1372 "./stb_image.h"
 var $41=$n; //@line 1372 "./stb_image.h"
 var $42=($40|0)<($41|0); //@line 1372 "./stb_image.h"
 if($42){label=10;break;}else{label=12;break;} //@line 1372 "./stb_image.h"
 case 10: 
 var $44=$i; //@line 1373 "./stb_image.h"
 var $45=$5; //@line 1373 "./stb_image.h"
 var $46=(Math_imul($44,$45)|0); //@line 1373 "./stb_image.h"
 var $47=$k; //@line 1373 "./stb_image.h"
 var $48=((($46)+($47))|0); //@line 1373 "./stb_image.h"
 var $49=$2; //@line 1373 "./stb_image.h"
 var $50=(($49+$48)|0); //@line 1373 "./stb_image.h"
 var $51=HEAP8[($50)]; //@line 1373 "./stb_image.h"
 var $52=($51&255); //@line 1373 "./stb_image.h"
 var $53=($52|0); //@line 1373 "./stb_image.h"
 var $54=($53)/(255); //@line 1373 "./stb_image.h"
 var $55=$54; //@line 1373 "./stb_image.h"
 var $56=HEAPF32[((10144)>>2)]; //@line 1373 "./stb_image.h"
 var $57=$56; //@line 1373 "./stb_image.h"
 var $58=Math_pow($55,$57); //@line 1373 "./stb_image.h"
 var $59=HEAPF32[((10136)>>2)]; //@line 1373 "./stb_image.h"
 var $60=$59; //@line 1373 "./stb_image.h"
 var $61=($58)*($60); //@line 1373 "./stb_image.h"
 var $62=$61; //@line 1373 "./stb_image.h"
 var $63=$i; //@line 1373 "./stb_image.h"
 var $64=$5; //@line 1373 "./stb_image.h"
 var $65=(Math_imul($63,$64)|0); //@line 1373 "./stb_image.h"
 var $66=$k; //@line 1373 "./stb_image.h"
 var $67=((($65)+($66))|0); //@line 1373 "./stb_image.h"
 var $68=$output; //@line 1373 "./stb_image.h"
 var $69=(($68+($67<<2))|0); //@line 1373 "./stb_image.h"
 HEAPF32[(($69)>>2)]=$62; //@line 1373 "./stb_image.h"
 label=11;break; //@line 1374 "./stb_image.h"
 case 11: 
 var $71=$k; //@line 1372 "./stb_image.h"
 var $72=((($71)+(1))|0); //@line 1372 "./stb_image.h"
 $k=$72; //@line 1372 "./stb_image.h"
 label=9;break; //@line 1372 "./stb_image.h"
 case 12: 
 var $74=$k; //@line 1375 "./stb_image.h"
 var $75=$5; //@line 1375 "./stb_image.h"
 var $76=($74|0)<($75|0); //@line 1375 "./stb_image.h"
 if($76){label=13;break;}else{label=14;break;} //@line 1375 "./stb_image.h"
 case 13: 
 var $78=$i; //@line 1375 "./stb_image.h"
 var $79=$5; //@line 1375 "./stb_image.h"
 var $80=(Math_imul($78,$79)|0); //@line 1375 "./stb_image.h"
 var $81=$k; //@line 1375 "./stb_image.h"
 var $82=((($80)+($81))|0); //@line 1375 "./stb_image.h"
 var $83=$2; //@line 1375 "./stb_image.h"
 var $84=(($83+$82)|0); //@line 1375 "./stb_image.h"
 var $85=HEAP8[($84)]; //@line 1375 "./stb_image.h"
 var $86=($85&255); //@line 1375 "./stb_image.h"
 var $87=($86|0); //@line 1375 "./stb_image.h"
 var $88=($87)/(255); //@line 1375 "./stb_image.h"
 var $89=$i; //@line 1375 "./stb_image.h"
 var $90=$5; //@line 1375 "./stb_image.h"
 var $91=(Math_imul($89,$90)|0); //@line 1375 "./stb_image.h"
 var $92=$k; //@line 1375 "./stb_image.h"
 var $93=((($91)+($92))|0); //@line 1375 "./stb_image.h"
 var $94=$output; //@line 1375 "./stb_image.h"
 var $95=(($94+($93<<2))|0); //@line 1375 "./stb_image.h"
 HEAPF32[(($95)>>2)]=$88; //@line 1375 "./stb_image.h"
 label=14;break; //@line 1375 "./stb_image.h"
 case 14: 
 label=15;break; //@line 1376 "./stb_image.h"
 case 15: 
 var $98=$i; //@line 1371 "./stb_image.h"
 var $99=((($98)+(1))|0); //@line 1371 "./stb_image.h"
 $i=$99; //@line 1371 "./stb_image.h"
 label=7;break; //@line 1371 "./stb_image.h"
 case 16: 
 var $101=$2; //@line 1377 "./stb_image.h"
 _free($101); //@line 1377 "./stb_image.h"
 var $102=$output; //@line 1378 "./stb_image.h"
 $1=$102; //@line 1378 "./stb_image.h"
 label=17;break; //@line 1378 "./stb_image.h"
 case 17: 
 var $104=$1; //@line 1379 "./stb_image.h"
 STACKTOP=sp;return $104; //@line 1379 "./stb_image.h"
  default: assert(0, "bad label: " + label);
 }

}


function _stbi__hdr_convert($output,$input,$req_comp){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $f1;
 $1=$output;
 $2=$input;
 $3=$req_comp;
 var $4=$2; //@line 5820 "./stb_image.h"
 var $5=(($4+3)|0); //@line 5820 "./stb_image.h"
 var $6=HEAP8[($5)]; //@line 5820 "./stb_image.h"
 var $7=($6&255); //@line 5820 "./stb_image.h"
 var $8=($7|0)!=0; //@line 5820 "./stb_image.h"
 if($8){label=2;break;}else{label=10;break;} //@line 5820 "./stb_image.h"
 case 2: 
 var $10=$2; //@line 5823 "./stb_image.h"
 var $11=(($10+3)|0); //@line 5823 "./stb_image.h"
 var $12=HEAP8[($11)]; //@line 5823 "./stb_image.h"
 var $13=($12&255); //@line 5823 "./stb_image.h"
 var $14=((($13)-(136))|0); //@line 5823 "./stb_image.h"
 var $15=_ldexp(1,$14); //@line 5823 "./stb_image.h"
 var $16=$15; //@line 5823 "./stb_image.h"
 $f1=$16; //@line 5823 "./stb_image.h"
 var $17=$3; //@line 5824 "./stb_image.h"
 var $18=($17|0)<=2; //@line 5824 "./stb_image.h"
 if($18){label=3;break;}else{label=4;break;} //@line 5824 "./stb_image.h"
 case 3: 
 var $20=$2; //@line 5825 "./stb_image.h"
 var $21=(($20)|0); //@line 5825 "./stb_image.h"
 var $22=HEAP8[($21)]; //@line 5825 "./stb_image.h"
 var $23=($22&255); //@line 5825 "./stb_image.h"
 var $24=$2; //@line 5825 "./stb_image.h"
 var $25=(($24+1)|0); //@line 5825 "./stb_image.h"
 var $26=HEAP8[($25)]; //@line 5825 "./stb_image.h"
 var $27=($26&255); //@line 5825 "./stb_image.h"
 var $28=((($23)+($27))|0); //@line 5825 "./stb_image.h"
 var $29=$2; //@line 5825 "./stb_image.h"
 var $30=(($29+2)|0); //@line 5825 "./stb_image.h"
 var $31=HEAP8[($30)]; //@line 5825 "./stb_image.h"
 var $32=($31&255); //@line 5825 "./stb_image.h"
 var $33=((($28)+($32))|0); //@line 5825 "./stb_image.h"
 var $34=($33|0); //@line 5825 "./stb_image.h"
 var $35=$f1; //@line 5825 "./stb_image.h"
 var $36=($34)*($35); //@line 5825 "./stb_image.h"
 var $37=($36)/(3); //@line 5825 "./stb_image.h"
 var $38=$1; //@line 5825 "./stb_image.h"
 var $39=(($38)|0); //@line 5825 "./stb_image.h"
 HEAPF32[(($39)>>2)]=$37; //@line 5825 "./stb_image.h"
 label=5;break; //@line 5825 "./stb_image.h"
 case 4: 
 var $41=$2; //@line 5827 "./stb_image.h"
 var $42=(($41)|0); //@line 5827 "./stb_image.h"
 var $43=HEAP8[($42)]; //@line 5827 "./stb_image.h"
 var $44=($43&255); //@line 5827 "./stb_image.h"
 var $45=($44|0); //@line 5827 "./stb_image.h"
 var $46=$f1; //@line 5827 "./stb_image.h"
 var $47=($45)*($46); //@line 5827 "./stb_image.h"
 var $48=$1; //@line 5827 "./stb_image.h"
 var $49=(($48)|0); //@line 5827 "./stb_image.h"
 HEAPF32[(($49)>>2)]=$47; //@line 5827 "./stb_image.h"
 var $50=$2; //@line 5828 "./stb_image.h"
 var $51=(($50+1)|0); //@line 5828 "./stb_image.h"
 var $52=HEAP8[($51)]; //@line 5828 "./stb_image.h"
 var $53=($52&255); //@line 5828 "./stb_image.h"
 var $54=($53|0); //@line 5828 "./stb_image.h"
 var $55=$f1; //@line 5828 "./stb_image.h"
 var $56=($54)*($55); //@line 5828 "./stb_image.h"
 var $57=$1; //@line 5828 "./stb_image.h"
 var $58=(($57+4)|0); //@line 5828 "./stb_image.h"
 HEAPF32[(($58)>>2)]=$56; //@line 5828 "./stb_image.h"
 var $59=$2; //@line 5829 "./stb_image.h"
 var $60=(($59+2)|0); //@line 5829 "./stb_image.h"
 var $61=HEAP8[($60)]; //@line 5829 "./stb_image.h"
 var $62=($61&255); //@line 5829 "./stb_image.h"
 var $63=($62|0); //@line 5829 "./stb_image.h"
 var $64=$f1; //@line 5829 "./stb_image.h"
 var $65=($63)*($64); //@line 5829 "./stb_image.h"
 var $66=$1; //@line 5829 "./stb_image.h"
 var $67=(($66+8)|0); //@line 5829 "./stb_image.h"
 HEAPF32[(($67)>>2)]=$65; //@line 5829 "./stb_image.h"
 label=5;break;
 case 5: 
 var $69=$3; //@line 5831 "./stb_image.h"
 var $70=($69|0)==2; //@line 5831 "./stb_image.h"
 if($70){label=6;break;}else{label=7;break;} //@line 5831 "./stb_image.h"
 case 6: 
 var $72=$1; //@line 5831 "./stb_image.h"
 var $73=(($72+4)|0); //@line 5831 "./stb_image.h"
 HEAPF32[(($73)>>2)]=1; //@line 5831 "./stb_image.h"
 label=7;break; //@line 5831 "./stb_image.h"
 case 7: 
 var $75=$3; //@line 5832 "./stb_image.h"
 var $76=($75|0)==4; //@line 5832 "./stb_image.h"
 if($76){label=8;break;}else{label=9;break;} //@line 5832 "./stb_image.h"
 case 8: 
 var $78=$1; //@line 5832 "./stb_image.h"
 var $79=(($78+12)|0); //@line 5832 "./stb_image.h"
 HEAPF32[(($79)>>2)]=1; //@line 5832 "./stb_image.h"
 label=9;break; //@line 5832 "./stb_image.h"
 case 9: 
 label=16;break; //@line 5833 "./stb_image.h"
 case 10: 
 var $82=$3; //@line 5834 "./stb_image.h"
 if(($82|0)==4){ label=11;break;}else if(($82|0)==3){ label=12;break;}else if(($82|0)==2){ label=13;break;}else if(($82|0)==1){ label=14;break;}else{label=15;break;}
 case 11: 
 var $84=$1; //@line 5835 "./stb_image.h"
 var $85=(($84+12)|0); //@line 5835 "./stb_image.h"
 HEAPF32[(($85)>>2)]=1; //@line 5835 "./stb_image.h"
 label=12;break; //@line 5835 "./stb_image.h"
 case 12: 
 var $87=$1; //@line 5836 "./stb_image.h"
 var $88=(($87+8)|0); //@line 5836 "./stb_image.h"
 HEAPF32[(($88)>>2)]=0; //@line 5836 "./stb_image.h"
 var $89=$1; //@line 5836 "./stb_image.h"
 var $90=(($89+4)|0); //@line 5836 "./stb_image.h"
 HEAPF32[(($90)>>2)]=0; //@line 5836 "./stb_image.h"
 var $91=$1; //@line 5836 "./stb_image.h"
 var $92=(($91)|0); //@line 5836 "./stb_image.h"
 HEAPF32[(($92)>>2)]=0; //@line 5836 "./stb_image.h"
 label=15;break; //@line 5837 "./stb_image.h"
 case 13: 
 var $94=$1; //@line 5838 "./stb_image.h"
 var $95=(($94+4)|0); //@line 5838 "./stb_image.h"
 HEAPF32[(($95)>>2)]=1; //@line 5838 "./stb_image.h"
 label=14;break; //@line 5838 "./stb_image.h"
 case 14: 
 var $97=$1; //@line 5839 "./stb_image.h"
 var $98=(($97)|0); //@line 5839 "./stb_image.h"
 HEAPF32[(($98)>>2)]=0; //@line 5839 "./stb_image.h"
 label=15;break; //@line 5840 "./stb_image.h"
 case 15: 
 label=16;break;
 case 16: 
 STACKTOP=sp;return; //@line 5843 "./stb_image.h"
  default: assert(0, "bad label: " + label);
 }

}


function _stbi__load_main($s,$x,$y,$comp,$req_comp){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 var $hdr;
 $2=$s;
 $3=$x;
 $4=$y;
 $5=$comp;
 $6=$req_comp;
 var $7=$2; //@line 930 "./stb_image.h"
 var $8=_stbi__jpeg_test($7); //@line 930 "./stb_image.h"
 var $9=($8|0)!=0; //@line 930 "./stb_image.h"
 if($9){label=2;break;}else{label=3;break;} //@line 930 "./stb_image.h"
 case 2: 
 var $11=$2; //@line 930 "./stb_image.h"
 var $12=$3; //@line 930 "./stb_image.h"
 var $13=$4; //@line 930 "./stb_image.h"
 var $14=$5; //@line 930 "./stb_image.h"
 var $15=$6; //@line 930 "./stb_image.h"
 var $16=_stbi__jpeg_load($11,$12,$13,$14,$15); //@line 930 "./stb_image.h"
 $1=$16; //@line 930 "./stb_image.h"
 label=23;break; //@line 930 "./stb_image.h"
 case 3: 
 var $18=$2; //@line 933 "./stb_image.h"
 var $19=_stbi__png_test($18); //@line 933 "./stb_image.h"
 var $20=($19|0)!=0; //@line 933 "./stb_image.h"
 if($20){label=4;break;}else{label=5;break;} //@line 933 "./stb_image.h"
 case 4: 
 var $22=$2; //@line 933 "./stb_image.h"
 var $23=$3; //@line 933 "./stb_image.h"
 var $24=$4; //@line 933 "./stb_image.h"
 var $25=$5; //@line 933 "./stb_image.h"
 var $26=$6; //@line 933 "./stb_image.h"
 var $27=_stbi__png_load($22,$23,$24,$25,$26); //@line 933 "./stb_image.h"
 $1=$27; //@line 933 "./stb_image.h"
 label=23;break; //@line 933 "./stb_image.h"
 case 5: 
 var $29=$2; //@line 936 "./stb_image.h"
 var $30=_stbi__bmp_test($29); //@line 936 "./stb_image.h"
 var $31=($30|0)!=0; //@line 936 "./stb_image.h"
 if($31){label=6;break;}else{label=7;break;} //@line 936 "./stb_image.h"
 case 6: 
 var $33=$2; //@line 936 "./stb_image.h"
 var $34=$3; //@line 936 "./stb_image.h"
 var $35=$4; //@line 936 "./stb_image.h"
 var $36=$5; //@line 936 "./stb_image.h"
 var $37=$6; //@line 936 "./stb_image.h"
 var $38=_stbi__bmp_load($33,$34,$35,$36,$37); //@line 936 "./stb_image.h"
 $1=$38; //@line 936 "./stb_image.h"
 label=23;break; //@line 936 "./stb_image.h"
 case 7: 
 var $40=$2; //@line 939 "./stb_image.h"
 var $41=_stbi__gif_test($40); //@line 939 "./stb_image.h"
 var $42=($41|0)!=0; //@line 939 "./stb_image.h"
 if($42){label=8;break;}else{label=9;break;} //@line 939 "./stb_image.h"
 case 8: 
 var $44=$2; //@line 939 "./stb_image.h"
 var $45=$3; //@line 939 "./stb_image.h"
 var $46=$4; //@line 939 "./stb_image.h"
 var $47=$5; //@line 939 "./stb_image.h"
 var $48=$6; //@line 939 "./stb_image.h"
 var $49=_stbi__gif_load($44,$45,$46,$47,$48); //@line 939 "./stb_image.h"
 $1=$49; //@line 939 "./stb_image.h"
 label=23;break; //@line 939 "./stb_image.h"
 case 9: 
 var $51=$2; //@line 942 "./stb_image.h"
 var $52=_stbi__psd_test($51); //@line 942 "./stb_image.h"
 var $53=($52|0)!=0; //@line 942 "./stb_image.h"
 if($53){label=10;break;}else{label=11;break;} //@line 942 "./stb_image.h"
 case 10: 
 var $55=$2; //@line 942 "./stb_image.h"
 var $56=$3; //@line 942 "./stb_image.h"
 var $57=$4; //@line 942 "./stb_image.h"
 var $58=$5; //@line 942 "./stb_image.h"
 var $59=$6; //@line 942 "./stb_image.h"
 var $60=_stbi__psd_load($55,$56,$57,$58,$59); //@line 942 "./stb_image.h"
 $1=$60; //@line 942 "./stb_image.h"
 label=23;break; //@line 942 "./stb_image.h"
 case 11: 
 var $62=$2; //@line 945 "./stb_image.h"
 var $63=_stbi__pic_test($62); //@line 945 "./stb_image.h"
 var $64=($63|0)!=0; //@line 945 "./stb_image.h"
 if($64){label=12;break;}else{label=13;break;} //@line 945 "./stb_image.h"
 case 12: 
 var $66=$2; //@line 945 "./stb_image.h"
 var $67=$3; //@line 945 "./stb_image.h"
 var $68=$4; //@line 945 "./stb_image.h"
 var $69=$5; //@line 945 "./stb_image.h"
 var $70=$6; //@line 945 "./stb_image.h"
 var $71=_stbi__pic_load($66,$67,$68,$69,$70); //@line 945 "./stb_image.h"
 $1=$71; //@line 945 "./stb_image.h"
 label=23;break; //@line 945 "./stb_image.h"
 case 13: 
 var $73=$2; //@line 948 "./stb_image.h"
 var $74=_stbi__pnm_test($73); //@line 948 "./stb_image.h"
 var $75=($74|0)!=0; //@line 948 "./stb_image.h"
 if($75){label=14;break;}else{label=15;break;} //@line 948 "./stb_image.h"
 case 14: 
 var $77=$2; //@line 948 "./stb_image.h"
 var $78=$3; //@line 948 "./stb_image.h"
 var $79=$4; //@line 948 "./stb_image.h"
 var $80=$5; //@line 948 "./stb_image.h"
 var $81=$6; //@line 948 "./stb_image.h"
 var $82=_stbi__pnm_load($77,$78,$79,$80,$81); //@line 948 "./stb_image.h"
 $1=$82; //@line 948 "./stb_image.h"
 label=23;break; //@line 948 "./stb_image.h"
 case 15: 
 var $84=$2; //@line 952 "./stb_image.h"
 var $85=_stbi__hdr_test($84); //@line 952 "./stb_image.h"
 var $86=($85|0)!=0; //@line 952 "./stb_image.h"
 if($86){label=16;break;}else{label=20;break;} //@line 952 "./stb_image.h"
 case 16: 
 var $88=$2; //@line 953 "./stb_image.h"
 var $89=$3; //@line 953 "./stb_image.h"
 var $90=$4; //@line 953 "./stb_image.h"
 var $91=$5; //@line 953 "./stb_image.h"
 var $92=$6; //@line 953 "./stb_image.h"
 var $93=_stbi__hdr_load($88,$89,$90,$91,$92); //@line 953 "./stb_image.h"
 $hdr=$93; //@line 953 "./stb_image.h"
 var $94=$hdr; //@line 954 "./stb_image.h"
 var $95=$3; //@line 954 "./stb_image.h"
 var $96=HEAP32[(($95)>>2)]; //@line 954 "./stb_image.h"
 var $97=$4; //@line 954 "./stb_image.h"
 var $98=HEAP32[(($97)>>2)]; //@line 954 "./stb_image.h"
 var $99=$6; //@line 954 "./stb_image.h"
 var $100=($99|0)!=0; //@line 954 "./stb_image.h"
 if($100){label=17;break;}else{label=18;break;} //@line 954 "./stb_image.h"
 case 17: 
 var $102=$6; //@line 954 "./stb_image.h"
 var $107=$102;label=19;break; //@line 954 "./stb_image.h"
 case 18: 
 var $104=$5; //@line 954 "./stb_image.h"
 var $105=HEAP32[(($104)>>2)]; //@line 954 "./stb_image.h"
 var $107=$105;label=19;break; //@line 954 "./stb_image.h"
 case 19: 
 var $107; //@line 954 "./stb_image.h"
 var $108=_stbi__hdr_to_ldr($94,$96,$98,$107); //@line 954 "./stb_image.h"
 $1=$108; //@line 954 "./stb_image.h"
 label=23;break; //@line 954 "./stb_image.h"
 case 20: 
 var $110=$2; //@line 960 "./stb_image.h"
 var $111=_stbi__tga_test($110); //@line 960 "./stb_image.h"
 var $112=($111|0)!=0; //@line 960 "./stb_image.h"
 if($112){label=21;break;}else{label=22;break;} //@line 960 "./stb_image.h"
 case 21: 
 var $114=$2; //@line 961 "./stb_image.h"
 var $115=$3; //@line 961 "./stb_image.h"
 var $116=$4; //@line 961 "./stb_image.h"
 var $117=$5; //@line 961 "./stb_image.h"
 var $118=$6; //@line 961 "./stb_image.h"
 var $119=_stbi__tga_load($114,$115,$116,$117,$118); //@line 961 "./stb_image.h"
 $1=$119; //@line 961 "./stb_image.h"
 label=23;break; //@line 961 "./stb_image.h"
 case 22: 
 var $121=_stbi__err(139152); //@line 964 "./stb_image.h"
 var $122=($121|0)!=0; //@line 964 "./stb_image.h"
 var $123=($122?0:0); //@line 964 "./stb_image.h"
 var $124=$123; //@line 964 "./stb_image.h"
 $1=$124; //@line 964 "./stb_image.h"
 label=23;break; //@line 964 "./stb_image.h"
 case 23: 
 var $126=$1; //@line 965 "./stb_image.h"
 STACKTOP=sp;return $126; //@line 965 "./stb_image.h"
  default: assert(0, "bad label: " + label);
 }

}


function _stbi__jpeg_test($s){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+18192)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 var $r;
 var $j=sp;
 $1=$s;
 var $2=$1; //@line 3400 "./stb_image.h"
 var $3=(($j)|0); //@line 3400 "./stb_image.h"
 HEAP32[(($3)>>2)]=$2; //@line 3400 "./stb_image.h"
 _stbi__setup_jpeg($j); //@line 3401 "./stb_image.h"
 var $4=_stbi__decode_jpeg_header($j,1); //@line 3402 "./stb_image.h"
 $r=$4; //@line 3402 "./stb_image.h"
 var $5=$1; //@line 3403 "./stb_image.h"
 _stbi__rewind($5); //@line 3403 "./stb_image.h"
 var $6=$r; //@line 3404 "./stb_image.h"
 STACKTOP=sp;return $6; //@line 3404 "./stb_image.h"
}


function _stbi__jpeg_load($s,$x,$y,$comp,$req_comp){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+18192)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $j=sp;
 $1=$s;
 $2=$x;
 $3=$y;
 $4=$comp;
 $5=$req_comp;
 var $6=$1; //@line 3391 "./stb_image.h"
 var $7=(($j)|0); //@line 3391 "./stb_image.h"
 HEAP32[(($7)>>2)]=$6; //@line 3391 "./stb_image.h"
 _stbi__setup_jpeg($j); //@line 3392 "./stb_image.h"
 var $8=$2; //@line 3393 "./stb_image.h"
 var $9=$3; //@line 3393 "./stb_image.h"
 var $10=$4; //@line 3393 "./stb_image.h"
 var $11=$5; //@line 3393 "./stb_image.h"
 var $12=_load_jpeg_image($j,$8,$9,$10,$11); //@line 3393 "./stb_image.h"
 STACKTOP=sp;return $12; //@line 3393 "./stb_image.h"
}


function _stbi__png_test($s){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 var $r;
 $1=$s;
 var $2=$1; //@line 4487 "./stb_image.h"
 var $3=_stbi__check_png_header($2); //@line 4487 "./stb_image.h"
 $r=$3; //@line 4487 "./stb_image.h"
 var $4=$1; //@line 4488 "./stb_image.h"
 _stbi__rewind($4); //@line 4488 "./stb_image.h"
 var $5=$r; //@line 4489 "./stb_image.h"
 STACKTOP=sp;return $5; //@line 4489 "./stb_image.h"
}


function _stbi__png_load($s,$x,$y,$comp,$req_comp){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $p=sp;
 $1=$s;
 $2=$x;
 $3=$y;
 $4=$comp;
 $5=$req_comp;
 var $6=$1; //@line 4480 "./stb_image.h"
 var $7=(($p)|0); //@line 4480 "./stb_image.h"
 HEAP32[(($7)>>2)]=$6; //@line 4480 "./stb_image.h"
 var $8=$2; //@line 4481 "./stb_image.h"
 var $9=$3; //@line 4481 "./stb_image.h"
 var $10=$4; //@line 4481 "./stb_image.h"
 var $11=$5; //@line 4481 "./stb_image.h"
 var $12=_stbi__do_png($p,$8,$9,$10,$11); //@line 4481 "./stb_image.h"
 STACKTOP=sp;return $12; //@line 4481 "./stb_image.h"
}


function _stbi__bmp_test($s){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 var $r;
 $1=$s;
 var $2=$1; //@line 4532 "./stb_image.h"
 var $3=_stbi__bmp_test_raw($2); //@line 4532 "./stb_image.h"
 $r=$3; //@line 4532 "./stb_image.h"
 var $4=$1; //@line 4533 "./stb_image.h"
 _stbi__rewind($4); //@line 4533 "./stb_image.h"
 var $5=$r; //@line 4534 "./stb_image.h"
 STACKTOP=sp;return $5; //@line 4534 "./stb_image.h"
}


function _stbi__bmp_load($s,$x,$y,$comp,$req_comp){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+1024)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 var $out;
 var $mr;
 var $mg;
 var $mb;
 var $ma;
 var $fake_a;
 var $pal=sp;
 var $psize;
 var $i;
 var $j;
 var $compress;
 var $width;
 var $bpp;
 var $flip_vertically;
 var $pad;
 var $target;
 var $offset;
 var $hsz;
 var $z;
 var $v;
 var $v2;
 var $rshift;
 var $gshift;
 var $bshift;
 var $ashift;
 var $rcount;
 var $gcount;
 var $bcount;
 var $acount;
 var $z1;
 var $easy;
 var $a;
 var $v3;
 var $a4;
 var $t;
 var $p1;
 var $p2;
 $2=$s;
 $3=$x;
 $4=$y;
 $5=$comp;
 $6=$req_comp;
 $mr=0; //@line 4581 "./stb_image.h"
 $mg=0; //@line 4581 "./stb_image.h"
 $mb=0; //@line 4581 "./stb_image.h"
 $ma=0; //@line 4581 "./stb_image.h"
 $fake_a=0; //@line 4581 "./stb_image.h"
 $psize=0; //@line 4583 "./stb_image.h"
 $compress=0; //@line 4583 "./stb_image.h"
 var $7=$2; //@line 4585 "./stb_image.h"
 var $8=_stbi__get8($7); //@line 4585 "./stb_image.h"
 var $9=($8&255); //@line 4585 "./stb_image.h"
 var $10=($9|0)!=66; //@line 4585 "./stb_image.h"
 if($10){label=3;break;}else{label=2;break;} //@line 4585 "./stb_image.h"
 case 2: 
 var $12=$2; //@line 4585 "./stb_image.h"
 var $13=_stbi__get8($12); //@line 4585 "./stb_image.h"
 var $14=($13&255); //@line 4585 "./stb_image.h"
 var $15=($14|0)!=77; //@line 4585 "./stb_image.h"
 if($15){label=3;break;}else{label=4;break;} //@line 4585 "./stb_image.h"
 case 3: 
 var $17=_stbi__err(137248); //@line 4585 "./stb_image.h"
 var $18=($17|0)!=0; //@line 4585 "./stb_image.h"
 var $19=($18?0:0); //@line 4585 "./stb_image.h"
 var $20=$19; //@line 4585 "./stb_image.h"
 $1=$20; //@line 4585 "./stb_image.h"
 label=168;break; //@line 4585 "./stb_image.h"
 case 4: 
 var $22=$2; //@line 4586 "./stb_image.h"
 var $23=_stbi__get32le($22); //@line 4586 "./stb_image.h"
 var $24=$2; //@line 4587 "./stb_image.h"
 var $25=_stbi__get16le($24); //@line 4587 "./stb_image.h"
 var $26=$2; //@line 4588 "./stb_image.h"
 var $27=_stbi__get16le($26); //@line 4588 "./stb_image.h"
 var $28=$2; //@line 4589 "./stb_image.h"
 var $29=_stbi__get32le($28); //@line 4589 "./stb_image.h"
 $offset=$29; //@line 4589 "./stb_image.h"
 var $30=$2; //@line 4590 "./stb_image.h"
 var $31=_stbi__get32le($30); //@line 4590 "./stb_image.h"
 $hsz=$31; //@line 4590 "./stb_image.h"
 var $32=$hsz; //@line 4591 "./stb_image.h"
 var $33=($32|0)!=12; //@line 4591 "./stb_image.h"
 if($33){label=5;break;}else{label=10;break;} //@line 4591 "./stb_image.h"
 case 5: 
 var $35=$hsz; //@line 4591 "./stb_image.h"
 var $36=($35|0)!=40; //@line 4591 "./stb_image.h"
 if($36){label=6;break;}else{label=10;break;} //@line 4591 "./stb_image.h"
 case 6: 
 var $38=$hsz; //@line 4591 "./stb_image.h"
 var $39=($38|0)!=56; //@line 4591 "./stb_image.h"
 if($39){label=7;break;}else{label=10;break;} //@line 4591 "./stb_image.h"
 case 7: 
 var $41=$hsz; //@line 4591 "./stb_image.h"
 var $42=($41|0)!=108; //@line 4591 "./stb_image.h"
 if($42){label=8;break;}else{label=10;break;} //@line 4591 "./stb_image.h"
 case 8: 
 var $44=$hsz; //@line 4591 "./stb_image.h"
 var $45=($44|0)!=124; //@line 4591 "./stb_image.h"
 if($45){label=9;break;}else{label=10;break;} //@line 4591 "./stb_image.h"
 case 9: 
 var $47=_stbi__err(137224); //@line 4591 "./stb_image.h"
 var $48=($47|0)!=0; //@line 4591 "./stb_image.h"
 var $49=($48?0:0); //@line 4591 "./stb_image.h"
 var $50=$49; //@line 4591 "./stb_image.h"
 $1=$50; //@line 4591 "./stb_image.h"
 label=168;break; //@line 4591 "./stb_image.h"
 case 10: 
 var $52=$hsz; //@line 4592 "./stb_image.h"
 var $53=($52|0)==12; //@line 4592 "./stb_image.h"
 if($53){label=11;break;}else{label=12;break;} //@line 4592 "./stb_image.h"
 case 11: 
 var $55=$2; //@line 4593 "./stb_image.h"
 var $56=_stbi__get16le($55); //@line 4593 "./stb_image.h"
 var $57=$2; //@line 4593 "./stb_image.h"
 var $58=(($57)|0); //@line 4593 "./stb_image.h"
 HEAP32[(($58)>>2)]=$56; //@line 4593 "./stb_image.h"
 var $59=$2; //@line 4594 "./stb_image.h"
 var $60=_stbi__get16le($59); //@line 4594 "./stb_image.h"
 var $61=$2; //@line 4594 "./stb_image.h"
 var $62=(($61+4)|0); //@line 4594 "./stb_image.h"
 HEAP32[(($62)>>2)]=$60; //@line 4594 "./stb_image.h"
 label=13;break; //@line 4595 "./stb_image.h"
 case 12: 
 var $64=$2; //@line 4596 "./stb_image.h"
 var $65=_stbi__get32le($64); //@line 4596 "./stb_image.h"
 var $66=$2; //@line 4596 "./stb_image.h"
 var $67=(($66)|0); //@line 4596 "./stb_image.h"
 HEAP32[(($67)>>2)]=$65; //@line 4596 "./stb_image.h"
 var $68=$2; //@line 4597 "./stb_image.h"
 var $69=_stbi__get32le($68); //@line 4597 "./stb_image.h"
 var $70=$2; //@line 4597 "./stb_image.h"
 var $71=(($70+4)|0); //@line 4597 "./stb_image.h"
 HEAP32[(($71)>>2)]=$69; //@line 4597 "./stb_image.h"
 label=13;break;
 case 13: 
 var $73=$2; //@line 4599 "./stb_image.h"
 var $74=_stbi__get16le($73); //@line 4599 "./stb_image.h"
 var $75=($74|0)!=1; //@line 4599 "./stb_image.h"
 if($75){label=14;break;}else{label=15;break;} //@line 4599 "./stb_image.h"
 case 14: 
 var $77=_stbi__err(137208); //@line 4599 "./stb_image.h"
 var $78=($77|0)!=0; //@line 4599 "./stb_image.h"
 var $79=($78?0:0); //@line 4599 "./stb_image.h"
 var $80=$79; //@line 4599 "./stb_image.h"
 $1=$80; //@line 4599 "./stb_image.h"
 label=168;break; //@line 4599 "./stb_image.h"
 case 15: 
 var $82=$2; //@line 4600 "./stb_image.h"
 var $83=_stbi__get16le($82); //@line 4600 "./stb_image.h"
 $bpp=$83; //@line 4600 "./stb_image.h"
 var $84=$bpp; //@line 4601 "./stb_image.h"
 var $85=($84|0)==1; //@line 4601 "./stb_image.h"
 if($85){label=16;break;}else{label=17;break;} //@line 4601 "./stb_image.h"
 case 16: 
 var $87=_stbi__err(137192); //@line 4601 "./stb_image.h"
 var $88=($87|0)!=0; //@line 4601 "./stb_image.h"
 var $89=($88?0:0); //@line 4601 "./stb_image.h"
 var $90=$89; //@line 4601 "./stb_image.h"
 $1=$90; //@line 4601 "./stb_image.h"
 label=168;break; //@line 4601 "./stb_image.h"
 case 17: 
 var $92=$2; //@line 4602 "./stb_image.h"
 var $93=(($92+4)|0); //@line 4602 "./stb_image.h"
 var $94=HEAP32[(($93)>>2)]; //@line 4602 "./stb_image.h"
 var $95=($94|0)>0; //@line 4602 "./stb_image.h"
 var $96=($95&1); //@line 4602 "./stb_image.h"
 $flip_vertically=$96; //@line 4602 "./stb_image.h"
 var $97=$2; //@line 4603 "./stb_image.h"
 var $98=(($97+4)|0); //@line 4603 "./stb_image.h"
 var $99=HEAP32[(($98)>>2)]; //@line 4603 "./stb_image.h"
 var $100=Math_abs($99); //@line 4603 "./stb_image.h"
 var $101=$2; //@line 4603 "./stb_image.h"
 var $102=(($101+4)|0); //@line 4603 "./stb_image.h"
 HEAP32[(($102)>>2)]=$100; //@line 4603 "./stb_image.h"
 var $103=$hsz; //@line 4604 "./stb_image.h"
 var $104=($103|0)==12; //@line 4604 "./stb_image.h"
 if($104){label=18;break;}else{label=21;break;} //@line 4604 "./stb_image.h"
 case 18: 
 var $106=$bpp; //@line 4605 "./stb_image.h"
 var $107=($106|0)<24; //@line 4605 "./stb_image.h"
 if($107){label=19;break;}else{label=20;break;} //@line 4605 "./stb_image.h"
 case 19: 
 var $109=$offset; //@line 4606 "./stb_image.h"
 var $110=((($109)-(14))|0); //@line 4606 "./stb_image.h"
 var $111=((($110)-(24))|0); //@line 4606 "./stb_image.h"
 var $112=(((($111|0))/(3))&-1); //@line 4606 "./stb_image.h"
 $psize=$112; //@line 4606 "./stb_image.h"
 label=20;break; //@line 4606 "./stb_image.h"
 case 20: 
 label=57;break; //@line 4607 "./stb_image.h"
 case 21: 
 var $115=$2; //@line 4608 "./stb_image.h"
 var $116=_stbi__get32le($115); //@line 4608 "./stb_image.h"
 $compress=$116; //@line 4608 "./stb_image.h"
 var $117=$compress; //@line 4609 "./stb_image.h"
 var $118=($117|0)==1; //@line 4609 "./stb_image.h"
 if($118){label=23;break;}else{label=22;break;} //@line 4609 "./stb_image.h"
 case 22: 
 var $120=$compress; //@line 4609 "./stb_image.h"
 var $121=($120|0)==2; //@line 4609 "./stb_image.h"
 if($121){label=23;break;}else{label=24;break;} //@line 4609 "./stb_image.h"
 case 23: 
 var $123=_stbi__err(137184); //@line 4609 "./stb_image.h"
 var $124=($123|0)!=0; //@line 4609 "./stb_image.h"
 var $125=($124?0:0); //@line 4609 "./stb_image.h"
 var $126=$125; //@line 4609 "./stb_image.h"
 $1=$126; //@line 4609 "./stb_image.h"
 label=168;break; //@line 4609 "./stb_image.h"
 case 24: 
 var $128=$2; //@line 4610 "./stb_image.h"
 var $129=_stbi__get32le($128); //@line 4610 "./stb_image.h"
 var $130=$2; //@line 4611 "./stb_image.h"
 var $131=_stbi__get32le($130); //@line 4611 "./stb_image.h"
 var $132=$2; //@line 4612 "./stb_image.h"
 var $133=_stbi__get32le($132); //@line 4612 "./stb_image.h"
 var $134=$2; //@line 4613 "./stb_image.h"
 var $135=_stbi__get32le($134); //@line 4613 "./stb_image.h"
 var $136=$2; //@line 4614 "./stb_image.h"
 var $137=_stbi__get32le($136); //@line 4614 "./stb_image.h"
 var $138=$hsz; //@line 4615 "./stb_image.h"
 var $139=($138|0)==40; //@line 4615 "./stb_image.h"
 if($139){label=26;break;}else{label=25;break;} //@line 4615 "./stb_image.h"
 case 25: 
 var $141=$hsz; //@line 4615 "./stb_image.h"
 var $142=($141|0)==56; //@line 4615 "./stb_image.h"
 if($142){label=26;break;}else{label=44;break;} //@line 4615 "./stb_image.h"
 case 26: 
 var $144=$hsz; //@line 4616 "./stb_image.h"
 var $145=($144|0)==56; //@line 4616 "./stb_image.h"
 if($145){label=27;break;}else{label=28;break;} //@line 4616 "./stb_image.h"
 case 27: 
 var $147=$2; //@line 4617 "./stb_image.h"
 var $148=_stbi__get32le($147); //@line 4617 "./stb_image.h"
 var $149=$2; //@line 4618 "./stb_image.h"
 var $150=_stbi__get32le($149); //@line 4618 "./stb_image.h"
 var $151=$2; //@line 4619 "./stb_image.h"
 var $152=_stbi__get32le($151); //@line 4619 "./stb_image.h"
 var $153=$2; //@line 4620 "./stb_image.h"
 var $154=_stbi__get32le($153); //@line 4620 "./stb_image.h"
 label=28;break; //@line 4621 "./stb_image.h"
 case 28: 
 var $156=$bpp; //@line 4622 "./stb_image.h"
 var $157=($156|0)==16; //@line 4622 "./stb_image.h"
 if($157){label=30;break;}else{label=29;break;} //@line 4622 "./stb_image.h"
 case 29: 
 var $159=$bpp; //@line 4622 "./stb_image.h"
 var $160=($159|0)==32; //@line 4622 "./stb_image.h"
 if($160){label=30;break;}else{label=43;break;} //@line 4622 "./stb_image.h"
 case 30: 
 $mb=0; //@line 4623 "./stb_image.h"
 $mg=0; //@line 4623 "./stb_image.h"
 $mr=0; //@line 4623 "./stb_image.h"
 var $162=$compress; //@line 4624 "./stb_image.h"
 var $163=($162|0)==0; //@line 4624 "./stb_image.h"
 if($163){label=31;break;}else{label=35;break;} //@line 4624 "./stb_image.h"
 case 31: 
 var $165=$bpp; //@line 4625 "./stb_image.h"
 var $166=($165|0)==32; //@line 4625 "./stb_image.h"
 if($166){label=32;break;}else{label=33;break;} //@line 4625 "./stb_image.h"
 case 32: 
 $mr=16711680; //@line 4626 "./stb_image.h"
 $mg=65280; //@line 4627 "./stb_image.h"
 $mb=255; //@line 4628 "./stb_image.h"
 $ma=-16777216; //@line 4629 "./stb_image.h"
 $fake_a=1; //@line 4630 "./stb_image.h"
 label=34;break; //@line 4632 "./stb_image.h"
 case 33: 
 $mr=31744; //@line 4633 "./stb_image.h"
 $mg=992; //@line 4634 "./stb_image.h"
 $mb=31; //@line 4635 "./stb_image.h"
 label=34;break;
 case 34: 
 label=42;break; //@line 4637 "./stb_image.h"
 case 35: 
 var $171=$compress; //@line 4637 "./stb_image.h"
 var $172=($171|0)==3; //@line 4637 "./stb_image.h"
 if($172){label=36;break;}else{label=40;break;} //@line 4637 "./stb_image.h"
 case 36: 
 var $174=$2; //@line 4638 "./stb_image.h"
 var $175=_stbi__get32le($174); //@line 4638 "./stb_image.h"
 $mr=$175; //@line 4638 "./stb_image.h"
 var $176=$2; //@line 4639 "./stb_image.h"
 var $177=_stbi__get32le($176); //@line 4639 "./stb_image.h"
 $mg=$177; //@line 4639 "./stb_image.h"
 var $178=$2; //@line 4640 "./stb_image.h"
 var $179=_stbi__get32le($178); //@line 4640 "./stb_image.h"
 $mb=$179; //@line 4640 "./stb_image.h"
 var $180=$mr; //@line 4642 "./stb_image.h"
 var $181=$mg; //@line 4642 "./stb_image.h"
 var $182=($180|0)==($181|0); //@line 4642 "./stb_image.h"
 if($182){label=37;break;}else{label=39;break;} //@line 4642 "./stb_image.h"
 case 37: 
 var $184=$mg; //@line 4642 "./stb_image.h"
 var $185=$mb; //@line 4642 "./stb_image.h"
 var $186=($184|0)==($185|0); //@line 4642 "./stb_image.h"
 if($186){label=38;break;}else{label=39;break;} //@line 4642 "./stb_image.h"
 case 38: 
 var $188=_stbi__err(137208); //@line 4644 "./stb_image.h"
 var $189=($188|0)!=0; //@line 4644 "./stb_image.h"
 var $190=($189?0:0); //@line 4644 "./stb_image.h"
 var $191=$190; //@line 4644 "./stb_image.h"
 $1=$191; //@line 4644 "./stb_image.h"
 label=168;break; //@line 4644 "./stb_image.h"
 case 39: 
 label=41;break; //@line 4646 "./stb_image.h"
 case 40: 
 var $194=_stbi__err(137208); //@line 4647 "./stb_image.h"
 var $195=($194|0)!=0; //@line 4647 "./stb_image.h"
 var $196=($195?0:0); //@line 4647 "./stb_image.h"
 var $197=$196; //@line 4647 "./stb_image.h"
 $1=$197; //@line 4647 "./stb_image.h"
 label=168;break; //@line 4647 "./stb_image.h"
 case 41: 
 label=42;break;
 case 42: 
 label=43;break; //@line 4648 "./stb_image.h"
 case 43: 
 label=54;break; //@line 4649 "./stb_image.h"
 case 44: 
 var $202=$hsz; //@line 4650 "./stb_image.h"
 var $203=($202|0)==108; //@line 4650 "./stb_image.h"
 if($203){var $210=1;label=47;break;}else{label=45;break;} //@line 4650 "./stb_image.h"
 case 45: 
 var $205=$hsz; //@line 4650 "./stb_image.h"
 var $206=($205|0)==124; //@line 4650 "./stb_image.h"
 if($206){var $210=1;label=47;break;}else{label=46;break;} //@line 4650 "./stb_image.h"
 case 46: 
 ___assert_fail(137152,138824,4650,140192); //@line 4650 "./stb_image.h"
 throw "Reached an unreachable!"; //@line 4650 "./stb_image.h"
 label=47;break; //@line 4650 "./stb_image.h"
 case 47: 
 var $210;
 var $211=($210&1); //@line 4650 "./stb_image.h"
 var $212=$2; //@line 4651 "./stb_image.h"
 var $213=_stbi__get32le($212); //@line 4651 "./stb_image.h"
 $mr=$213; //@line 4651 "./stb_image.h"
 var $214=$2; //@line 4652 "./stb_image.h"
 var $215=_stbi__get32le($214); //@line 4652 "./stb_image.h"
 $mg=$215; //@line 4652 "./stb_image.h"
 var $216=$2; //@line 4653 "./stb_image.h"
 var $217=_stbi__get32le($216); //@line 4653 "./stb_image.h"
 $mb=$217; //@line 4653 "./stb_image.h"
 var $218=$2; //@line 4654 "./stb_image.h"
 var $219=_stbi__get32le($218); //@line 4654 "./stb_image.h"
 $ma=$219; //@line 4654 "./stb_image.h"
 var $220=$2; //@line 4655 "./stb_image.h"
 var $221=_stbi__get32le($220); //@line 4655 "./stb_image.h"
 $i=0; //@line 4656 "./stb_image.h"
 label=48;break; //@line 4656 "./stb_image.h"
 case 48: 
 var $223=$i; //@line 4656 "./stb_image.h"
 var $224=($223|0)<12; //@line 4656 "./stb_image.h"
 if($224){label=49;break;}else{label=51;break;} //@line 4656 "./stb_image.h"
 case 49: 
 var $226=$2; //@line 4657 "./stb_image.h"
 var $227=_stbi__get32le($226); //@line 4657 "./stb_image.h"
 label=50;break; //@line 4657 "./stb_image.h"
 case 50: 
 var $229=$i; //@line 4656 "./stb_image.h"
 var $230=((($229)+(1))|0); //@line 4656 "./stb_image.h"
 $i=$230; //@line 4656 "./stb_image.h"
 label=48;break; //@line 4656 "./stb_image.h"
 case 51: 
 var $232=$hsz; //@line 4658 "./stb_image.h"
 var $233=($232|0)==124; //@line 4658 "./stb_image.h"
 if($233){label=52;break;}else{label=53;break;} //@line 4658 "./stb_image.h"
 case 52: 
 var $235=$2; //@line 4659 "./stb_image.h"
 var $236=_stbi__get32le($235); //@line 4659 "./stb_image.h"
 var $237=$2; //@line 4660 "./stb_image.h"
 var $238=_stbi__get32le($237); //@line 4660 "./stb_image.h"
 var $239=$2; //@line 4661 "./stb_image.h"
 var $240=_stbi__get32le($239); //@line 4661 "./stb_image.h"
 var $241=$2; //@line 4662 "./stb_image.h"
 var $242=_stbi__get32le($241); //@line 4662 "./stb_image.h"
 label=53;break; //@line 4663 "./stb_image.h"
 case 53: 
 label=54;break;
 case 54: 
 var $245=$bpp; //@line 4665 "./stb_image.h"
 var $246=($245|0)<16; //@line 4665 "./stb_image.h"
 if($246){label=55;break;}else{label=56;break;} //@line 4665 "./stb_image.h"
 case 55: 
 var $248=$offset; //@line 4666 "./stb_image.h"
 var $249=((($248)-(14))|0); //@line 4666 "./stb_image.h"
 var $250=$hsz; //@line 4666 "./stb_image.h"
 var $251=((($249)-($250))|0); //@line 4666 "./stb_image.h"
 var $252=$251>>2; //@line 4666 "./stb_image.h"
 $psize=$252; //@line 4666 "./stb_image.h"
 label=56;break; //@line 4666 "./stb_image.h"
 case 56: 
 label=57;break;
 case 57: 
 var $255=$ma; //@line 4668 "./stb_image.h"
 var $256=($255|0)!=0; //@line 4668 "./stb_image.h"
 var $257=($256?4:3); //@line 4668 "./stb_image.h"
 var $258=$2; //@line 4668 "./stb_image.h"
 var $259=(($258+8)|0); //@line 4668 "./stb_image.h"
 HEAP32[(($259)>>2)]=$257; //@line 4668 "./stb_image.h"
 var $260=$6; //@line 4669 "./stb_image.h"
 var $261=($260|0)!=0; //@line 4669 "./stb_image.h"
 if($261){label=58;break;}else{label=60;break;} //@line 4669 "./stb_image.h"
 case 58: 
 var $263=$6; //@line 4669 "./stb_image.h"
 var $264=($263|0)>=3; //@line 4669 "./stb_image.h"
 if($264){label=59;break;}else{label=60;break;} //@line 4669 "./stb_image.h"
 case 59: 
 var $266=$6; //@line 4670 "./stb_image.h"
 $target=$266; //@line 4670 "./stb_image.h"
 label=61;break; //@line 4670 "./stb_image.h"
 case 60: 
 var $268=$2; //@line 4672 "./stb_image.h"
 var $269=(($268+8)|0); //@line 4672 "./stb_image.h"
 var $270=HEAP32[(($269)>>2)]; //@line 4672 "./stb_image.h"
 $target=$270; //@line 4672 "./stb_image.h"
 label=61;break;
 case 61: 
 var $272=$target; //@line 4673 "./stb_image.h"
 var $273=$2; //@line 4673 "./stb_image.h"
 var $274=(($273)|0); //@line 4673 "./stb_image.h"
 var $275=HEAP32[(($274)>>2)]; //@line 4673 "./stb_image.h"
 var $276=(Math_imul($272,$275)|0); //@line 4673 "./stb_image.h"
 var $277=$2; //@line 4673 "./stb_image.h"
 var $278=(($277+4)|0); //@line 4673 "./stb_image.h"
 var $279=HEAP32[(($278)>>2)]; //@line 4673 "./stb_image.h"
 var $280=(Math_imul($276,$279)|0); //@line 4673 "./stb_image.h"
 var $281=_stbi__malloc($280); //@line 4673 "./stb_image.h"
 $out=$281; //@line 4673 "./stb_image.h"
 var $282=$out; //@line 4674 "./stb_image.h"
 var $283=($282|0)!=0; //@line 4674 "./stb_image.h"
 if($283){label=63;break;}else{label=62;break;} //@line 4674 "./stb_image.h"
 case 62: 
 var $285=_stbi__err(138952); //@line 4674 "./stb_image.h"
 var $286=($285|0)!=0; //@line 4674 "./stb_image.h"
 var $287=($286?0:0); //@line 4674 "./stb_image.h"
 var $288=$287; //@line 4674 "./stb_image.h"
 $1=$288; //@line 4674 "./stb_image.h"
 label=168;break; //@line 4674 "./stb_image.h"
 case 63: 
 var $290=$bpp; //@line 4675 "./stb_image.h"
 var $291=($290|0)<16; //@line 4675 "./stb_image.h"
 if($291){label=64;break;}else{label=99;break;} //@line 4675 "./stb_image.h"
 case 64: 
 $z=0; //@line 4676 "./stb_image.h"
 var $293=$psize; //@line 4677 "./stb_image.h"
 var $294=($293|0)==0; //@line 4677 "./stb_image.h"
 if($294){label=66;break;}else{label=65;break;} //@line 4677 "./stb_image.h"
 case 65: 
 var $296=$psize; //@line 4677 "./stb_image.h"
 var $297=($296|0)>256; //@line 4677 "./stb_image.h"
 if($297){label=66;break;}else{label=67;break;} //@line 4677 "./stb_image.h"
 case 66: 
 var $299=$out; //@line 4677 "./stb_image.h"
 _free($299); //@line 4677 "./stb_image.h"
 var $300=_stbi__err(139880); //@line 4677 "./stb_image.h"
 var $301=($300|0)!=0; //@line 4677 "./stb_image.h"
 var $302=($301?0:0); //@line 4677 "./stb_image.h"
 var $303=$302; //@line 4677 "./stb_image.h"
 $1=$303; //@line 4677 "./stb_image.h"
 label=168;break; //@line 4677 "./stb_image.h"
 case 67: 
 $i=0; //@line 4678 "./stb_image.h"
 label=68;break; //@line 4678 "./stb_image.h"
 case 68: 
 var $306=$i; //@line 4678 "./stb_image.h"
 var $307=$psize; //@line 4678 "./stb_image.h"
 var $308=($306|0)<($307|0); //@line 4678 "./stb_image.h"
 if($308){label=69;break;}else{label=73;break;} //@line 4678 "./stb_image.h"
 case 69: 
 var $310=$2; //@line 4679 "./stb_image.h"
 var $311=_stbi__get8($310); //@line 4679 "./stb_image.h"
 var $312=$i; //@line 4679 "./stb_image.h"
 var $313=(($pal+($312<<2))|0); //@line 4679 "./stb_image.h"
 var $314=(($313+2)|0); //@line 4679 "./stb_image.h"
 HEAP8[($314)]=$311; //@line 4679 "./stb_image.h"
 var $315=$2; //@line 4680 "./stb_image.h"
 var $316=_stbi__get8($315); //@line 4680 "./stb_image.h"
 var $317=$i; //@line 4680 "./stb_image.h"
 var $318=(($pal+($317<<2))|0); //@line 4680 "./stb_image.h"
 var $319=(($318+1)|0); //@line 4680 "./stb_image.h"
 HEAP8[($319)]=$316; //@line 4680 "./stb_image.h"
 var $320=$2; //@line 4681 "./stb_image.h"
 var $321=_stbi__get8($320); //@line 4681 "./stb_image.h"
 var $322=$i; //@line 4681 "./stb_image.h"
 var $323=(($pal+($322<<2))|0); //@line 4681 "./stb_image.h"
 var $324=(($323)|0); //@line 4681 "./stb_image.h"
 HEAP8[($324)]=$321; //@line 4681 "./stb_image.h"
 var $325=$hsz; //@line 4682 "./stb_image.h"
 var $326=($325|0)!=12; //@line 4682 "./stb_image.h"
 if($326){label=70;break;}else{label=71;break;} //@line 4682 "./stb_image.h"
 case 70: 
 var $328=$2; //@line 4682 "./stb_image.h"
 var $329=_stbi__get8($328); //@line 4682 "./stb_image.h"
 label=71;break; //@line 4682 "./stb_image.h"
 case 71: 
 var $331=$i; //@line 4683 "./stb_image.h"
 var $332=(($pal+($331<<2))|0); //@line 4683 "./stb_image.h"
 var $333=(($332+3)|0); //@line 4683 "./stb_image.h"
 HEAP8[($333)]=-1; //@line 4683 "./stb_image.h"
 label=72;break; //@line 4684 "./stb_image.h"
 case 72: 
 var $335=$i; //@line 4678 "./stb_image.h"
 var $336=((($335)+(1))|0); //@line 4678 "./stb_image.h"
 $i=$336; //@line 4678 "./stb_image.h"
 label=68;break; //@line 4678 "./stb_image.h"
 case 73: 
 var $338=$2; //@line 4685 "./stb_image.h"
 var $339=$offset; //@line 4685 "./stb_image.h"
 var $340=((($339)-(14))|0); //@line 4685 "./stb_image.h"
 var $341=$hsz; //@line 4685 "./stb_image.h"
 var $342=((($340)-($341))|0); //@line 4685 "./stb_image.h"
 var $343=$psize; //@line 4685 "./stb_image.h"
 var $344=$hsz; //@line 4685 "./stb_image.h"
 var $345=($344|0)==12; //@line 4685 "./stb_image.h"
 var $346=($345?3:4); //@line 4685 "./stb_image.h"
 var $347=(Math_imul($343,$346)|0); //@line 4685 "./stb_image.h"
 var $348=((($342)-($347))|0); //@line 4685 "./stb_image.h"
 _stbi__skip($338,$348); //@line 4685 "./stb_image.h"
 var $349=$bpp; //@line 4686 "./stb_image.h"
 var $350=($349|0)==4; //@line 4686 "./stb_image.h"
 if($350){label=74;break;}else{label=75;break;} //@line 4686 "./stb_image.h"
 case 74: 
 var $352=$2; //@line 4686 "./stb_image.h"
 var $353=(($352)|0); //@line 4686 "./stb_image.h"
 var $354=HEAP32[(($353)>>2)]; //@line 4686 "./stb_image.h"
 var $355=((($354)+(1))|0); //@line 4686 "./stb_image.h"
 var $356=$355>>>1; //@line 4686 "./stb_image.h"
 $width=$356; //@line 4686 "./stb_image.h"
 label=79;break; //@line 4686 "./stb_image.h"
 case 75: 
 var $358=$bpp; //@line 4687 "./stb_image.h"
 var $359=($358|0)==8; //@line 4687 "./stb_image.h"
 if($359){label=76;break;}else{label=77;break;} //@line 4687 "./stb_image.h"
 case 76: 
 var $361=$2; //@line 4687 "./stb_image.h"
 var $362=(($361)|0); //@line 4687 "./stb_image.h"
 var $363=HEAP32[(($362)>>2)]; //@line 4687 "./stb_image.h"
 $width=$363; //@line 4687 "./stb_image.h"
 label=78;break; //@line 4687 "./stb_image.h"
 case 77: 
 var $365=$out; //@line 4688 "./stb_image.h"
 _free($365); //@line 4688 "./stb_image.h"
 var $366=_stbi__err(139872); //@line 4688 "./stb_image.h"
 var $367=($366|0)!=0; //@line 4688 "./stb_image.h"
 var $368=($367?0:0); //@line 4688 "./stb_image.h"
 var $369=$368; //@line 4688 "./stb_image.h"
 $1=$369; //@line 4688 "./stb_image.h"
 label=168;break; //@line 4688 "./stb_image.h"
 case 78: 
 label=79;break;
 case 79: 
 var $372=$width; //@line 4689 "./stb_image.h"
 var $373=(((-$372))|0); //@line 4689 "./stb_image.h"
 var $374=$373&3; //@line 4689 "./stb_image.h"
 $pad=$374; //@line 4689 "./stb_image.h"
 $j=0; //@line 4690 "./stb_image.h"
 label=80;break; //@line 4690 "./stb_image.h"
 case 80: 
 var $376=$j; //@line 4690 "./stb_image.h"
 var $377=$2; //@line 4690 "./stb_image.h"
 var $378=(($377+4)|0); //@line 4690 "./stb_image.h"
 var $379=HEAP32[(($378)>>2)]; //@line 4690 "./stb_image.h"
 var $380=($376|0)<($379|0); //@line 4690 "./stb_image.h"
 if($380){label=81;break;}else{label=98;break;} //@line 4690 "./stb_image.h"
 case 81: 
 $i=0; //@line 4691 "./stb_image.h"
 label=82;break; //@line 4691 "./stb_image.h"
 case 82: 
 var $383=$i; //@line 4691 "./stb_image.h"
 var $384=$2; //@line 4691 "./stb_image.h"
 var $385=(($384)|0); //@line 4691 "./stb_image.h"
 var $386=HEAP32[(($385)>>2)]; //@line 4691 "./stb_image.h"
 var $387=($383|0)<($386|0); //@line 4691 "./stb_image.h"
 if($387){label=83;break;}else{label=96;break;} //@line 4691 "./stb_image.h"
 case 83: 
 var $389=$2; //@line 4692 "./stb_image.h"
 var $390=_stbi__get8($389); //@line 4692 "./stb_image.h"
 var $391=($390&255); //@line 4692 "./stb_image.h"
 $v=$391; //@line 4692 "./stb_image.h"
 $v2=0; //@line 4692 "./stb_image.h"
 var $392=$bpp; //@line 4693 "./stb_image.h"
 var $393=($392|0)==4; //@line 4693 "./stb_image.h"
 if($393){label=84;break;}else{label=85;break;} //@line 4693 "./stb_image.h"
 case 84: 
 var $395=$v; //@line 4694 "./stb_image.h"
 var $396=$395&15; //@line 4694 "./stb_image.h"
 $v2=$396; //@line 4694 "./stb_image.h"
 var $397=$v; //@line 4695 "./stb_image.h"
 var $398=$397>>4; //@line 4695 "./stb_image.h"
 $v=$398; //@line 4695 "./stb_image.h"
 label=85;break; //@line 4696 "./stb_image.h"
 case 85: 
 var $400=$v; //@line 4697 "./stb_image.h"
 var $401=(($pal+($400<<2))|0); //@line 4697 "./stb_image.h"
 var $402=(($401)|0); //@line 4697 "./stb_image.h"
 var $403=HEAP8[($402)]; //@line 4697 "./stb_image.h"
 var $404=$z; //@line 4697 "./stb_image.h"
 var $405=((($404)+(1))|0); //@line 4697 "./stb_image.h"
 $z=$405; //@line 4697 "./stb_image.h"
 var $406=$out; //@line 4697 "./stb_image.h"
 var $407=(($406+$404)|0); //@line 4697 "./stb_image.h"
 HEAP8[($407)]=$403; //@line 4697 "./stb_image.h"
 var $408=$v; //@line 4698 "./stb_image.h"
 var $409=(($pal+($408<<2))|0); //@line 4698 "./stb_image.h"
 var $410=(($409+1)|0); //@line 4698 "./stb_image.h"
 var $411=HEAP8[($410)]; //@line 4698 "./stb_image.h"
 var $412=$z; //@line 4698 "./stb_image.h"
 var $413=((($412)+(1))|0); //@line 4698 "./stb_image.h"
 $z=$413; //@line 4698 "./stb_image.h"
 var $414=$out; //@line 4698 "./stb_image.h"
 var $415=(($414+$412)|0); //@line 4698 "./stb_image.h"
 HEAP8[($415)]=$411; //@line 4698 "./stb_image.h"
 var $416=$v; //@line 4699 "./stb_image.h"
 var $417=(($pal+($416<<2))|0); //@line 4699 "./stb_image.h"
 var $418=(($417+2)|0); //@line 4699 "./stb_image.h"
 var $419=HEAP8[($418)]; //@line 4699 "./stb_image.h"
 var $420=$z; //@line 4699 "./stb_image.h"
 var $421=((($420)+(1))|0); //@line 4699 "./stb_image.h"
 $z=$421; //@line 4699 "./stb_image.h"
 var $422=$out; //@line 4699 "./stb_image.h"
 var $423=(($422+$420)|0); //@line 4699 "./stb_image.h"
 HEAP8[($423)]=$419; //@line 4699 "./stb_image.h"
 var $424=$target; //@line 4700 "./stb_image.h"
 var $425=($424|0)==4; //@line 4700 "./stb_image.h"
 if($425){label=86;break;}else{label=87;break;} //@line 4700 "./stb_image.h"
 case 86: 
 var $427=$z; //@line 4700 "./stb_image.h"
 var $428=((($427)+(1))|0); //@line 4700 "./stb_image.h"
 $z=$428; //@line 4700 "./stb_image.h"
 var $429=$out; //@line 4700 "./stb_image.h"
 var $430=(($429+$427)|0); //@line 4700 "./stb_image.h"
 HEAP8[($430)]=-1; //@line 4700 "./stb_image.h"
 label=87;break; //@line 4700 "./stb_image.h"
 case 87: 
 var $432=$i; //@line 4701 "./stb_image.h"
 var $433=((($432)+(1))|0); //@line 4701 "./stb_image.h"
 var $434=$2; //@line 4701 "./stb_image.h"
 var $435=(($434)|0); //@line 4701 "./stb_image.h"
 var $436=HEAP32[(($435)>>2)]; //@line 4701 "./stb_image.h"
 var $437=($433|0)==($436|0); //@line 4701 "./stb_image.h"
 if($437){label=88;break;}else{label=89;break;} //@line 4701 "./stb_image.h"
 case 88: 
 label=96;break; //@line 4701 "./stb_image.h"
 case 89: 
 var $440=$bpp; //@line 4702 "./stb_image.h"
 var $441=($440|0)==8; //@line 4702 "./stb_image.h"
 if($441){label=90;break;}else{label=91;break;} //@line 4702 "./stb_image.h"
 case 90: 
 var $443=$2; //@line 4702 "./stb_image.h"
 var $444=_stbi__get8($443); //@line 4702 "./stb_image.h"
 var $445=($444&255); //@line 4702 "./stb_image.h"
 var $449=$445;label=92;break; //@line 4702 "./stb_image.h"
 case 91: 
 var $447=$v2; //@line 4702 "./stb_image.h"
 var $449=$447;label=92;break; //@line 4702 "./stb_image.h"
 case 92: 
 var $449; //@line 4702 "./stb_image.h"
 $v=$449; //@line 4702 "./stb_image.h"
 var $450=$v; //@line 4703 "./stb_image.h"
 var $451=(($pal+($450<<2))|0); //@line 4703 "./stb_image.h"
 var $452=(($451)|0); //@line 4703 "./stb_image.h"
 var $453=HEAP8[($452)]; //@line 4703 "./stb_image.h"
 var $454=$z; //@line 4703 "./stb_image.h"
 var $455=((($454)+(1))|0); //@line 4703 "./stb_image.h"
 $z=$455; //@line 4703 "./stb_image.h"
 var $456=$out; //@line 4703 "./stb_image.h"
 var $457=(($456+$454)|0); //@line 4703 "./stb_image.h"
 HEAP8[($457)]=$453; //@line 4703 "./stb_image.h"
 var $458=$v; //@line 4704 "./stb_image.h"
 var $459=(($pal+($458<<2))|0); //@line 4704 "./stb_image.h"
 var $460=(($459+1)|0); //@line 4704 "./stb_image.h"
 var $461=HEAP8[($460)]; //@line 4704 "./stb_image.h"
 var $462=$z; //@line 4704 "./stb_image.h"
 var $463=((($462)+(1))|0); //@line 4704 "./stb_image.h"
 $z=$463; //@line 4704 "./stb_image.h"
 var $464=$out; //@line 4704 "./stb_image.h"
 var $465=(($464+$462)|0); //@line 4704 "./stb_image.h"
 HEAP8[($465)]=$461; //@line 4704 "./stb_image.h"
 var $466=$v; //@line 4705 "./stb_image.h"
 var $467=(($pal+($466<<2))|0); //@line 4705 "./stb_image.h"
 var $468=(($467+2)|0); //@line 4705 "./stb_image.h"
 var $469=HEAP8[($468)]; //@line 4705 "./stb_image.h"
 var $470=$z; //@line 4705 "./stb_image.h"
 var $471=((($470)+(1))|0); //@line 4705 "./stb_image.h"
 $z=$471; //@line 4705 "./stb_image.h"
 var $472=$out; //@line 4705 "./stb_image.h"
 var $473=(($472+$470)|0); //@line 4705 "./stb_image.h"
 HEAP8[($473)]=$469; //@line 4705 "./stb_image.h"
 var $474=$target; //@line 4706 "./stb_image.h"
 var $475=($474|0)==4; //@line 4706 "./stb_image.h"
 if($475){label=93;break;}else{label=94;break;} //@line 4706 "./stb_image.h"
 case 93: 
 var $477=$z; //@line 4706 "./stb_image.h"
 var $478=((($477)+(1))|0); //@line 4706 "./stb_image.h"
 $z=$478; //@line 4706 "./stb_image.h"
 var $479=$out; //@line 4706 "./stb_image.h"
 var $480=(($479+$477)|0); //@line 4706 "./stb_image.h"
 HEAP8[($480)]=-1; //@line 4706 "./stb_image.h"
 label=94;break; //@line 4706 "./stb_image.h"
 case 94: 
 label=95;break; //@line 4707 "./stb_image.h"
 case 95: 
 var $483=$i; //@line 4691 "./stb_image.h"
 var $484=((($483)+(2))|0); //@line 4691 "./stb_image.h"
 $i=$484; //@line 4691 "./stb_image.h"
 label=82;break; //@line 4691 "./stb_image.h"
 case 96: 
 var $486=$2; //@line 4708 "./stb_image.h"
 var $487=$pad; //@line 4708 "./stb_image.h"
 _stbi__skip($486,$487); //@line 4708 "./stb_image.h"
 label=97;break; //@line 4709 "./stb_image.h"
 case 97: 
 var $489=$j; //@line 4690 "./stb_image.h"
 var $490=((($489)+(1))|0); //@line 4690 "./stb_image.h"
 $j=$490; //@line 4690 "./stb_image.h"
 label=80;break; //@line 4690 "./stb_image.h"
 case 98: 
 label=150;break; //@line 4710 "./stb_image.h"
 case 99: 
 $rshift=0; //@line 4711 "./stb_image.h"
 $gshift=0; //@line 4711 "./stb_image.h"
 $bshift=0; //@line 4711 "./stb_image.h"
 $ashift=0; //@line 4711 "./stb_image.h"
 $rcount=0; //@line 4711 "./stb_image.h"
 $gcount=0; //@line 4711 "./stb_image.h"
 $bcount=0; //@line 4711 "./stb_image.h"
 $acount=0; //@line 4711 "./stb_image.h"
 $z1=0; //@line 4712 "./stb_image.h"
 $easy=0; //@line 4713 "./stb_image.h"
 var $493=$2; //@line 4714 "./stb_image.h"
 var $494=$offset; //@line 4714 "./stb_image.h"
 var $495=((($494)-(14))|0); //@line 4714 "./stb_image.h"
 var $496=$hsz; //@line 4714 "./stb_image.h"
 var $497=((($495)-($496))|0); //@line 4714 "./stb_image.h"
 _stbi__skip($493,$497); //@line 4714 "./stb_image.h"
 var $498=$bpp; //@line 4715 "./stb_image.h"
 var $499=($498|0)==24; //@line 4715 "./stb_image.h"
 if($499){label=100;break;}else{label=101;break;} //@line 4715 "./stb_image.h"
 case 100: 
 var $501=$2; //@line 4715 "./stb_image.h"
 var $502=(($501)|0); //@line 4715 "./stb_image.h"
 var $503=HEAP32[(($502)>>2)]; //@line 4715 "./stb_image.h"
 var $504=((($503)*(3))&-1); //@line 4715 "./stb_image.h"
 $width=$504; //@line 4715 "./stb_image.h"
 label=105;break; //@line 4715 "./stb_image.h"
 case 101: 
 var $506=$bpp; //@line 4716 "./stb_image.h"
 var $507=($506|0)==16; //@line 4716 "./stb_image.h"
 if($507){label=102;break;}else{label=103;break;} //@line 4716 "./stb_image.h"
 case 102: 
 var $509=$2; //@line 4716 "./stb_image.h"
 var $510=(($509)|0); //@line 4716 "./stb_image.h"
 var $511=HEAP32[(($510)>>2)]; //@line 4716 "./stb_image.h"
 var $512=($511<<1); //@line 4716 "./stb_image.h"
 $width=$512; //@line 4716 "./stb_image.h"
 label=104;break; //@line 4716 "./stb_image.h"
 case 103: 
 $width=0; //@line 4717 "./stb_image.h"
 label=104;break;
 case 104: 
 label=105;break;
 case 105: 
 var $516=$width; //@line 4718 "./stb_image.h"
 var $517=(((-$516))|0); //@line 4718 "./stb_image.h"
 var $518=$517&3; //@line 4718 "./stb_image.h"
 $pad=$518; //@line 4718 "./stb_image.h"
 var $519=$bpp; //@line 4719 "./stb_image.h"
 var $520=($519|0)==24; //@line 4719 "./stb_image.h"
 if($520){label=106;break;}else{label=107;break;} //@line 4719 "./stb_image.h"
 case 106: 
 $easy=1; //@line 4720 "./stb_image.h"
 label=115;break; //@line 4721 "./stb_image.h"
 case 107: 
 var $523=$bpp; //@line 4721 "./stb_image.h"
 var $524=($523|0)==32; //@line 4721 "./stb_image.h"
 if($524){label=108;break;}else{label=114;break;} //@line 4721 "./stb_image.h"
 case 108: 
 var $526=$mb; //@line 4722 "./stb_image.h"
 var $527=($526|0)==255; //@line 4722 "./stb_image.h"
 if($527){label=109;break;}else{label=113;break;} //@line 4722 "./stb_image.h"
 case 109: 
 var $529=$mg; //@line 4722 "./stb_image.h"
 var $530=($529|0)==65280; //@line 4722 "./stb_image.h"
 if($530){label=110;break;}else{label=113;break;} //@line 4722 "./stb_image.h"
 case 110: 
 var $532=$mr; //@line 4722 "./stb_image.h"
 var $533=($532|0)==16711680; //@line 4722 "./stb_image.h"
 if($533){label=111;break;}else{label=113;break;} //@line 4722 "./stb_image.h"
 case 111: 
 var $535=$ma; //@line 4722 "./stb_image.h"
 var $536=($535|0)==-16777216; //@line 4722 "./stb_image.h"
 if($536){label=112;break;}else{label=113;break;} //@line 4722 "./stb_image.h"
 case 112: 
 $easy=2; //@line 4723 "./stb_image.h"
 label=113;break; //@line 4723 "./stb_image.h"
 case 113: 
 label=114;break; //@line 4724 "./stb_image.h"
 case 114: 
 label=115;break;
 case 115: 
 var $541=$easy; //@line 4725 "./stb_image.h"
 var $542=($541|0)!=0; //@line 4725 "./stb_image.h"
 if($542){label=121;break;}else{label=116;break;} //@line 4725 "./stb_image.h"
 case 116: 
 var $544=$mr; //@line 4726 "./stb_image.h"
 var $545=($544|0)!=0; //@line 4726 "./stb_image.h"
 if($545){label=117;break;}else{label=119;break;} //@line 4726 "./stb_image.h"
 case 117: 
 var $547=$mg; //@line 4726 "./stb_image.h"
 var $548=($547|0)!=0; //@line 4726 "./stb_image.h"
 if($548){label=118;break;}else{label=119;break;} //@line 4726 "./stb_image.h"
 case 118: 
 var $550=$mb; //@line 4726 "./stb_image.h"
 var $551=($550|0)!=0; //@line 4726 "./stb_image.h"
 if($551){label=120;break;}else{label=119;break;} //@line 4726 "./stb_image.h"
 case 119: 
 var $553=$out; //@line 4726 "./stb_image.h"
 _free($553); //@line 4726 "./stb_image.h"
 var $554=_stbi__err(139840); //@line 4726 "./stb_image.h"
 var $555=($554|0)!=0; //@line 4726 "./stb_image.h"
 var $556=($555?0:0); //@line 4726 "./stb_image.h"
 var $557=$556; //@line 4726 "./stb_image.h"
 $1=$557; //@line 4726 "./stb_image.h"
 label=168;break; //@line 4726 "./stb_image.h"
 case 120: 
 var $559=$mr; //@line 4728 "./stb_image.h"
 var $560=_stbi__high_bit($559); //@line 4728 "./stb_image.h"
 var $561=((($560)-(7))|0); //@line 4728 "./stb_image.h"
 $rshift=$561; //@line 4728 "./stb_image.h"
 var $562=$mr; //@line 4728 "./stb_image.h"
 var $563=_stbi__bitcount($562); //@line 4728 "./stb_image.h"
 $rcount=$563; //@line 4728 "./stb_image.h"
 var $564=$mg; //@line 4729 "./stb_image.h"
 var $565=_stbi__high_bit($564); //@line 4729 "./stb_image.h"
 var $566=((($565)-(7))|0); //@line 4729 "./stb_image.h"
 $gshift=$566; //@line 4729 "./stb_image.h"
 var $567=$mg; //@line 4729 "./stb_image.h"
 var $568=_stbi__bitcount($567); //@line 4729 "./stb_image.h"
 $gcount=$568; //@line 4729 "./stb_image.h"
 var $569=$mb; //@line 4730 "./stb_image.h"
 var $570=_stbi__high_bit($569); //@line 4730 "./stb_image.h"
 var $571=((($570)-(7))|0); //@line 4730 "./stb_image.h"
 $bshift=$571; //@line 4730 "./stb_image.h"
 var $572=$mb; //@line 4730 "./stb_image.h"
 var $573=_stbi__bitcount($572); //@line 4730 "./stb_image.h"
 $bcount=$573; //@line 4730 "./stb_image.h"
 var $574=$ma; //@line 4731 "./stb_image.h"
 var $575=_stbi__high_bit($574); //@line 4731 "./stb_image.h"
 var $576=((($575)-(7))|0); //@line 4731 "./stb_image.h"
 $ashift=$576; //@line 4731 "./stb_image.h"
 var $577=$ma; //@line 4731 "./stb_image.h"
 var $578=_stbi__bitcount($577); //@line 4731 "./stb_image.h"
 $acount=$578; //@line 4731 "./stb_image.h"
 label=121;break; //@line 4732 "./stb_image.h"
 case 121: 
 $j=0; //@line 4733 "./stb_image.h"
 label=122;break; //@line 4733 "./stb_image.h"
 case 122: 
 var $581=$j; //@line 4733 "./stb_image.h"
 var $582=$2; //@line 4733 "./stb_image.h"
 var $583=(($582+4)|0); //@line 4733 "./stb_image.h"
 var $584=HEAP32[(($583)>>2)]; //@line 4733 "./stb_image.h"
 var $585=($581|0)<($584|0); //@line 4733 "./stb_image.h"
 if($585){label=123;break;}else{label=149;break;} //@line 4733 "./stb_image.h"
 case 123: 
 var $587=$easy; //@line 4734 "./stb_image.h"
 var $588=($587|0)!=0; //@line 4734 "./stb_image.h"
 if($588){label=124;break;}else{label=134;break;} //@line 4734 "./stb_image.h"
 case 124: 
 $i=0; //@line 4735 "./stb_image.h"
 label=125;break; //@line 4735 "./stb_image.h"
 case 125: 
 var $591=$i; //@line 4735 "./stb_image.h"
 var $592=$2; //@line 4735 "./stb_image.h"
 var $593=(($592)|0); //@line 4735 "./stb_image.h"
 var $594=HEAP32[(($593)>>2)]; //@line 4735 "./stb_image.h"
 var $595=($591|0)<($594|0); //@line 4735 "./stb_image.h"
 if($595){label=126;break;}else{label=133;break;} //@line 4735 "./stb_image.h"
 case 126: 
 var $597=$2; //@line 4737 "./stb_image.h"
 var $598=_stbi__get8($597); //@line 4737 "./stb_image.h"
 var $599=$z1; //@line 4737 "./stb_image.h"
 var $600=((($599)+(2))|0); //@line 4737 "./stb_image.h"
 var $601=$out; //@line 4737 "./stb_image.h"
 var $602=(($601+$600)|0); //@line 4737 "./stb_image.h"
 HEAP8[($602)]=$598; //@line 4737 "./stb_image.h"
 var $603=$2; //@line 4738 "./stb_image.h"
 var $604=_stbi__get8($603); //@line 4738 "./stb_image.h"
 var $605=$z1; //@line 4738 "./stb_image.h"
 var $606=((($605)+(1))|0); //@line 4738 "./stb_image.h"
 var $607=$out; //@line 4738 "./stb_image.h"
 var $608=(($607+$606)|0); //@line 4738 "./stb_image.h"
 HEAP8[($608)]=$604; //@line 4738 "./stb_image.h"
 var $609=$2; //@line 4739 "./stb_image.h"
 var $610=_stbi__get8($609); //@line 4739 "./stb_image.h"
 var $611=$z1; //@line 4739 "./stb_image.h"
 var $612=(($611)|0); //@line 4739 "./stb_image.h"
 var $613=$out; //@line 4739 "./stb_image.h"
 var $614=(($613+$612)|0); //@line 4739 "./stb_image.h"
 HEAP8[($614)]=$610; //@line 4739 "./stb_image.h"
 var $615=$z1; //@line 4740 "./stb_image.h"
 var $616=((($615)+(3))|0); //@line 4740 "./stb_image.h"
 $z1=$616; //@line 4740 "./stb_image.h"
 var $617=$easy; //@line 4741 "./stb_image.h"
 var $618=($617|0)==2; //@line 4741 "./stb_image.h"
 if($618){label=127;break;}else{label=128;break;} //@line 4741 "./stb_image.h"
 case 127: 
 var $620=$2; //@line 4741 "./stb_image.h"
 var $621=_stbi__get8($620); //@line 4741 "./stb_image.h"
 var $622=($621&255); //@line 4741 "./stb_image.h"
 var $625=$622;label=129;break; //@line 4741 "./stb_image.h"
 case 128: 
 var $625=255;label=129;break; //@line 4741 "./stb_image.h"
 case 129: 
 var $625; //@line 4741 "./stb_image.h"
 var $626=(($625)&255); //@line 4741 "./stb_image.h"
 $a=$626; //@line 4741 "./stb_image.h"
 var $627=$target; //@line 4742 "./stb_image.h"
 var $628=($627|0)==4; //@line 4742 "./stb_image.h"
 if($628){label=130;break;}else{label=131;break;} //@line 4742 "./stb_image.h"
 case 130: 
 var $630=$a; //@line 4742 "./stb_image.h"
 var $631=$z1; //@line 4742 "./stb_image.h"
 var $632=((($631)+(1))|0); //@line 4742 "./stb_image.h"
 $z1=$632; //@line 4742 "./stb_image.h"
 var $633=$out; //@line 4742 "./stb_image.h"
 var $634=(($633+$631)|0); //@line 4742 "./stb_image.h"
 HEAP8[($634)]=$630; //@line 4742 "./stb_image.h"
 label=131;break; //@line 4742 "./stb_image.h"
 case 131: 
 label=132;break; //@line 4743 "./stb_image.h"
 case 132: 
 var $637=$i; //@line 4735 "./stb_image.h"
 var $638=((($637)+(1))|0); //@line 4735 "./stb_image.h"
 $i=$638; //@line 4735 "./stb_image.h"
 label=125;break; //@line 4735 "./stb_image.h"
 case 133: 
 label=147;break; //@line 4744 "./stb_image.h"
 case 134: 
 $i=0; //@line 4745 "./stb_image.h"
 label=135;break; //@line 4745 "./stb_image.h"
 case 135: 
 var $642=$i; //@line 4745 "./stb_image.h"
 var $643=$2; //@line 4745 "./stb_image.h"
 var $644=(($643)|0); //@line 4745 "./stb_image.h"
 var $645=HEAP32[(($644)>>2)]; //@line 4745 "./stb_image.h"
 var $646=($642|0)<($645|0); //@line 4745 "./stb_image.h"
 if($646){label=136;break;}else{label=146;break;} //@line 4745 "./stb_image.h"
 case 136: 
 var $648=$bpp; //@line 4746 "./stb_image.h"
 var $649=($648|0)==16; //@line 4746 "./stb_image.h"
 if($649){label=137;break;}else{label=138;break;} //@line 4746 "./stb_image.h"
 case 137: 
 var $651=$2; //@line 4746 "./stb_image.h"
 var $652=_stbi__get16le($651); //@line 4746 "./stb_image.h"
 var $657=$652;label=139;break; //@line 4746 "./stb_image.h"
 case 138: 
 var $654=$2; //@line 4746 "./stb_image.h"
 var $655=_stbi__get32le($654); //@line 4746 "./stb_image.h"
 var $657=$655;label=139;break; //@line 4746 "./stb_image.h"
 case 139: 
 var $657; //@line 4746 "./stb_image.h"
 $v3=$657; //@line 4746 "./stb_image.h"
 var $658=$v3; //@line 4748 "./stb_image.h"
 var $659=$mr; //@line 4748 "./stb_image.h"
 var $660=$658&$659; //@line 4748 "./stb_image.h"
 var $661=$rshift; //@line 4748 "./stb_image.h"
 var $662=$rcount; //@line 4748 "./stb_image.h"
 var $663=_stbi__shiftsigned($660,$661,$662); //@line 4748 "./stb_image.h"
 var $664=$663&255; //@line 4748 "./stb_image.h"
 var $665=(($664)&255); //@line 4748 "./stb_image.h"
 var $666=$z1; //@line 4748 "./stb_image.h"
 var $667=((($666)+(1))|0); //@line 4748 "./stb_image.h"
 $z1=$667; //@line 4748 "./stb_image.h"
 var $668=$out; //@line 4748 "./stb_image.h"
 var $669=(($668+$666)|0); //@line 4748 "./stb_image.h"
 HEAP8[($669)]=$665; //@line 4748 "./stb_image.h"
 var $670=$v3; //@line 4749 "./stb_image.h"
 var $671=$mg; //@line 4749 "./stb_image.h"
 var $672=$670&$671; //@line 4749 "./stb_image.h"
 var $673=$gshift; //@line 4749 "./stb_image.h"
 var $674=$gcount; //@line 4749 "./stb_image.h"
 var $675=_stbi__shiftsigned($672,$673,$674); //@line 4749 "./stb_image.h"
 var $676=$675&255; //@line 4749 "./stb_image.h"
 var $677=(($676)&255); //@line 4749 "./stb_image.h"
 var $678=$z1; //@line 4749 "./stb_image.h"
 var $679=((($678)+(1))|0); //@line 4749 "./stb_image.h"
 $z1=$679; //@line 4749 "./stb_image.h"
 var $680=$out; //@line 4749 "./stb_image.h"
 var $681=(($680+$678)|0); //@line 4749 "./stb_image.h"
 HEAP8[($681)]=$677; //@line 4749 "./stb_image.h"
 var $682=$v3; //@line 4750 "./stb_image.h"
 var $683=$mb; //@line 4750 "./stb_image.h"
 var $684=$682&$683; //@line 4750 "./stb_image.h"
 var $685=$bshift; //@line 4750 "./stb_image.h"
 var $686=$bcount; //@line 4750 "./stb_image.h"
 var $687=_stbi__shiftsigned($684,$685,$686); //@line 4750 "./stb_image.h"
 var $688=$687&255; //@line 4750 "./stb_image.h"
 var $689=(($688)&255); //@line 4750 "./stb_image.h"
 var $690=$z1; //@line 4750 "./stb_image.h"
 var $691=((($690)+(1))|0); //@line 4750 "./stb_image.h"
 $z1=$691; //@line 4750 "./stb_image.h"
 var $692=$out; //@line 4750 "./stb_image.h"
 var $693=(($692+$690)|0); //@line 4750 "./stb_image.h"
 HEAP8[($693)]=$689; //@line 4750 "./stb_image.h"
 var $694=$ma; //@line 4751 "./stb_image.h"
 var $695=($694|0)!=0; //@line 4751 "./stb_image.h"
 if($695){label=140;break;}else{label=141;break;} //@line 4751 "./stb_image.h"
 case 140: 
 var $697=$v3; //@line 4751 "./stb_image.h"
 var $698=$ma; //@line 4751 "./stb_image.h"
 var $699=$697&$698; //@line 4751 "./stb_image.h"
 var $700=$ashift; //@line 4751 "./stb_image.h"
 var $701=$acount; //@line 4751 "./stb_image.h"
 var $702=_stbi__shiftsigned($699,$700,$701); //@line 4751 "./stb_image.h"
 var $705=$702;label=142;break; //@line 4751 "./stb_image.h"
 case 141: 
 var $705=255;label=142;break; //@line 4751 "./stb_image.h"
 case 142: 
 var $705; //@line 4751 "./stb_image.h"
 $a4=$705; //@line 4751 "./stb_image.h"
 var $706=$target; //@line 4752 "./stb_image.h"
 var $707=($706|0)==4; //@line 4752 "./stb_image.h"
 if($707){label=143;break;}else{label=144;break;} //@line 4752 "./stb_image.h"
 case 143: 
 var $709=$a4; //@line 4752 "./stb_image.h"
 var $710=$709&255; //@line 4752 "./stb_image.h"
 var $711=(($710)&255); //@line 4752 "./stb_image.h"
 var $712=$z1; //@line 4752 "./stb_image.h"
 var $713=((($712)+(1))|0); //@line 4752 "./stb_image.h"
 $z1=$713; //@line 4752 "./stb_image.h"
 var $714=$out; //@line 4752 "./stb_image.h"
 var $715=(($714+$712)|0); //@line 4752 "./stb_image.h"
 HEAP8[($715)]=$711; //@line 4752 "./stb_image.h"
 label=144;break; //@line 4752 "./stb_image.h"
 case 144: 
 label=145;break; //@line 4753 "./stb_image.h"
 case 145: 
 var $718=$i; //@line 4745 "./stb_image.h"
 var $719=((($718)+(1))|0); //@line 4745 "./stb_image.h"
 $i=$719; //@line 4745 "./stb_image.h"
 label=135;break; //@line 4745 "./stb_image.h"
 case 146: 
 label=147;break;
 case 147: 
 var $722=$2; //@line 4755 "./stb_image.h"
 var $723=$pad; //@line 4755 "./stb_image.h"
 _stbi__skip($722,$723); //@line 4755 "./stb_image.h"
 label=148;break; //@line 4756 "./stb_image.h"
 case 148: 
 var $725=$j; //@line 4733 "./stb_image.h"
 var $726=((($725)+(1))|0); //@line 4733 "./stb_image.h"
 $j=$726; //@line 4733 "./stb_image.h"
 label=122;break; //@line 4733 "./stb_image.h"
 case 149: 
 label=150;break;
 case 150: 
 var $729=$flip_vertically; //@line 4758 "./stb_image.h"
 var $730=($729|0)!=0; //@line 4758 "./stb_image.h"
 if($730){label=151;break;}else{label=160;break;} //@line 4758 "./stb_image.h"
 case 151: 
 $j=0; //@line 4760 "./stb_image.h"
 label=152;break; //@line 4760 "./stb_image.h"
 case 152: 
 var $733=$j; //@line 4760 "./stb_image.h"
 var $734=$2; //@line 4760 "./stb_image.h"
 var $735=(($734+4)|0); //@line 4760 "./stb_image.h"
 var $736=HEAP32[(($735)>>2)]; //@line 4760 "./stb_image.h"
 var $737=$736>>1; //@line 4760 "./stb_image.h"
 var $738=($733|0)<($737|0); //@line 4760 "./stb_image.h"
 if($738){label=153;break;}else{label=159;break;} //@line 4760 "./stb_image.h"
 case 153: 
 var $740=$out; //@line 4761 "./stb_image.h"
 var $741=$j; //@line 4761 "./stb_image.h"
 var $742=$2; //@line 4761 "./stb_image.h"
 var $743=(($742)|0); //@line 4761 "./stb_image.h"
 var $744=HEAP32[(($743)>>2)]; //@line 4761 "./stb_image.h"
 var $745=(Math_imul($741,$744)|0); //@line 4761 "./stb_image.h"
 var $746=$target; //@line 4761 "./stb_image.h"
 var $747=(Math_imul($745,$746)|0); //@line 4761 "./stb_image.h"
 var $748=(($740+$747)|0); //@line 4761 "./stb_image.h"
 $p1=$748; //@line 4761 "./stb_image.h"
 var $749=$out; //@line 4762 "./stb_image.h"
 var $750=$2; //@line 4762 "./stb_image.h"
 var $751=(($750+4)|0); //@line 4762 "./stb_image.h"
 var $752=HEAP32[(($751)>>2)]; //@line 4762 "./stb_image.h"
 var $753=((($752)-(1))|0); //@line 4762 "./stb_image.h"
 var $754=$j; //@line 4762 "./stb_image.h"
 var $755=((($753)-($754))|0); //@line 4762 "./stb_image.h"
 var $756=$2; //@line 4762 "./stb_image.h"
 var $757=(($756)|0); //@line 4762 "./stb_image.h"
 var $758=HEAP32[(($757)>>2)]; //@line 4762 "./stb_image.h"
 var $759=(Math_imul($755,$758)|0); //@line 4762 "./stb_image.h"
 var $760=$target; //@line 4762 "./stb_image.h"
 var $761=(Math_imul($759,$760)|0); //@line 4762 "./stb_image.h"
 var $762=(($749+$761)|0); //@line 4762 "./stb_image.h"
 $p2=$762; //@line 4762 "./stb_image.h"
 $i=0; //@line 4763 "./stb_image.h"
 label=154;break; //@line 4763 "./stb_image.h"
 case 154: 
 var $764=$i; //@line 4763 "./stb_image.h"
 var $765=$2; //@line 4763 "./stb_image.h"
 var $766=(($765)|0); //@line 4763 "./stb_image.h"
 var $767=HEAP32[(($766)>>2)]; //@line 4763 "./stb_image.h"
 var $768=$target; //@line 4763 "./stb_image.h"
 var $769=(Math_imul($767,$768)|0); //@line 4763 "./stb_image.h"
 var $770=($764|0)<($769|0); //@line 4763 "./stb_image.h"
 if($770){label=155;break;}else{label=157;break;} //@line 4763 "./stb_image.h"
 case 155: 
 var $772=$i; //@line 4764 "./stb_image.h"
 var $773=$p1; //@line 4764 "./stb_image.h"
 var $774=(($773+$772)|0); //@line 4764 "./stb_image.h"
 var $775=HEAP8[($774)]; //@line 4764 "./stb_image.h"
 $t=$775; //@line 4764 "./stb_image.h"
 var $776=$i; //@line 4764 "./stb_image.h"
 var $777=$p2; //@line 4764 "./stb_image.h"
 var $778=(($777+$776)|0); //@line 4764 "./stb_image.h"
 var $779=HEAP8[($778)]; //@line 4764 "./stb_image.h"
 var $780=$i; //@line 4764 "./stb_image.h"
 var $781=$p1; //@line 4764 "./stb_image.h"
 var $782=(($781+$780)|0); //@line 4764 "./stb_image.h"
 HEAP8[($782)]=$779; //@line 4764 "./stb_image.h"
 var $783=$t; //@line 4764 "./stb_image.h"
 var $784=$i; //@line 4764 "./stb_image.h"
 var $785=$p2; //@line 4764 "./stb_image.h"
 var $786=(($785+$784)|0); //@line 4764 "./stb_image.h"
 HEAP8[($786)]=$783; //@line 4764 "./stb_image.h"
 label=156;break; //@line 4765 "./stb_image.h"
 case 156: 
 var $788=$i; //@line 4763 "./stb_image.h"
 var $789=((($788)+(1))|0); //@line 4763 "./stb_image.h"
 $i=$789; //@line 4763 "./stb_image.h"
 label=154;break; //@line 4763 "./stb_image.h"
 case 157: 
 label=158;break; //@line 4766 "./stb_image.h"
 case 158: 
 var $792=$j; //@line 4760 "./stb_image.h"
 var $793=((($792)+(1))|0); //@line 4760 "./stb_image.h"
 $j=$793; //@line 4760 "./stb_image.h"
 label=152;break; //@line 4760 "./stb_image.h"
 case 159: 
 label=160;break; //@line 4767 "./stb_image.h"
 case 160: 
 var $796=$6; //@line 4769 "./stb_image.h"
 var $797=($796|0)!=0; //@line 4769 "./stb_image.h"
 if($797){label=161;break;}else{label=165;break;} //@line 4769 "./stb_image.h"
 case 161: 
 var $799=$6; //@line 4769 "./stb_image.h"
 var $800=$target; //@line 4769 "./stb_image.h"
 var $801=($799|0)!=($800|0); //@line 4769 "./stb_image.h"
 if($801){label=162;break;}else{label=165;break;} //@line 4769 "./stb_image.h"
 case 162: 
 var $803=$out; //@line 4770 "./stb_image.h"
 var $804=$target; //@line 4770 "./stb_image.h"
 var $805=$6; //@line 4770 "./stb_image.h"
 var $806=$2; //@line 4770 "./stb_image.h"
 var $807=(($806)|0); //@line 4770 "./stb_image.h"
 var $808=HEAP32[(($807)>>2)]; //@line 4770 "./stb_image.h"
 var $809=$2; //@line 4770 "./stb_image.h"
 var $810=(($809+4)|0); //@line 4770 "./stb_image.h"
 var $811=HEAP32[(($810)>>2)]; //@line 4770 "./stb_image.h"
 var $812=_stbi__convert_format($803,$804,$805,$808,$811); //@line 4770 "./stb_image.h"
 $out=$812; //@line 4770 "./stb_image.h"
 var $813=$out; //@line 4771 "./stb_image.h"
 var $814=($813|0)==0; //@line 4771 "./stb_image.h"
 if($814){label=163;break;}else{label=164;break;} //@line 4771 "./stb_image.h"
 case 163: 
 var $816=$out; //@line 4771 "./stb_image.h"
 $1=$816; //@line 4771 "./stb_image.h"
 label=168;break; //@line 4771 "./stb_image.h"
 case 164: 
 label=165;break; //@line 4772 "./stb_image.h"
 case 165: 
 var $819=$2; //@line 4774 "./stb_image.h"
 var $820=(($819)|0); //@line 4774 "./stb_image.h"
 var $821=HEAP32[(($820)>>2)]; //@line 4774 "./stb_image.h"
 var $822=$3; //@line 4774 "./stb_image.h"
 HEAP32[(($822)>>2)]=$821; //@line 4774 "./stb_image.h"
 var $823=$2; //@line 4775 "./stb_image.h"
 var $824=(($823+4)|0); //@line 4775 "./stb_image.h"
 var $825=HEAP32[(($824)>>2)]; //@line 4775 "./stb_image.h"
 var $826=$4; //@line 4775 "./stb_image.h"
 HEAP32[(($826)>>2)]=$825; //@line 4775 "./stb_image.h"
 var $827=$5; //@line 4776 "./stb_image.h"
 var $828=($827|0)!=0; //@line 4776 "./stb_image.h"
 if($828){label=166;break;}else{label=167;break;} //@line 4776 "./stb_image.h"
 case 166: 
 var $830=$2; //@line 4776 "./stb_image.h"
 var $831=(($830+8)|0); //@line 4776 "./stb_image.h"
 var $832=HEAP32[(($831)>>2)]; //@line 4776 "./stb_image.h"
 var $833=$5; //@line 4776 "./stb_image.h"
 HEAP32[(($833)>>2)]=$832; //@line 4776 "./stb_image.h"
 label=167;break; //@line 4776 "./stb_image.h"
 case 167: 
 var $835=$out; //@line 4777 "./stb_image.h"
 $1=$835; //@line 4777 "./stb_image.h"
 label=168;break; //@line 4777 "./stb_image.h"
 case 168: 
 var $837=$1; //@line 4778 "./stb_image.h"
 STACKTOP=sp;return $837; //@line 4778 "./stb_image.h"
  default: assert(0, "bad label: " + label);
 }

}


function _stbi__gif_test($s){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 var $r;
 $1=$s;
 var $2=$1; //@line 5467 "./stb_image.h"
 var $3=_stbi__gif_test_raw($2); //@line 5467 "./stb_image.h"
 $r=$3; //@line 5467 "./stb_image.h"
 var $4=$1; //@line 5468 "./stb_image.h"
 _stbi__rewind($4); //@line 5468 "./stb_image.h"
 var $5=$r; //@line 5469 "./stb_image.h"
 STACKTOP=sp;return $5; //@line 5469 "./stb_image.h"
}


function _stbi__gif_load($s,$x,$y,$comp,$req_comp){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+18512)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $u;
 var $g=sp;
 $1=$s;
 $2=$x;
 $3=$y;
 $4=$comp;
 $5=$req_comp;
 $u=0; //@line 5754 "./stb_image.h"
 var $6=$g; //@line 5756 "./stb_image.h"
 _memset($6, 0, 18508)|0; //@line 5756 "./stb_image.h"
 var $7=$1; //@line 5758 "./stb_image.h"
 var $8=$4; //@line 5758 "./stb_image.h"
 var $9=$5; //@line 5758 "./stb_image.h"
 var $10=_stbi__gif_load_next($7,$g,$8,$9); //@line 5758 "./stb_image.h"
 $u=$10; //@line 5758 "./stb_image.h"
 var $11=$u; //@line 5759 "./stb_image.h"
 var $12=$1; //@line 5759 "./stb_image.h"
 var $13=$12; //@line 5759 "./stb_image.h"
 var $14=($11|0)==($13|0); //@line 5759 "./stb_image.h"
 if($14){label=2;break;}else{label=3;break;} //@line 5759 "./stb_image.h"
 case 2: 
 $u=0; //@line 5759 "./stb_image.h"
 label=3;break; //@line 5759 "./stb_image.h"
 case 3: 
 var $17=$u; //@line 5760 "./stb_image.h"
 var $18=($17|0)!=0; //@line 5760 "./stb_image.h"
 if($18){label=4;break;}else{label=5;break;} //@line 5760 "./stb_image.h"
 case 4: 
 var $20=(($g)|0); //@line 5761 "./stb_image.h"
 var $21=HEAP32[(($20)>>2)]; //@line 5761 "./stb_image.h"
 var $22=$2; //@line 5761 "./stb_image.h"
 HEAP32[(($22)>>2)]=$21; //@line 5761 "./stb_image.h"
 var $23=(($g+4)|0); //@line 5762 "./stb_image.h"
 var $24=HEAP32[(($23)>>2)]; //@line 5762 "./stb_image.h"
 var $25=$3; //@line 5762 "./stb_image.h"
 HEAP32[(($25)>>2)]=$24; //@line 5762 "./stb_image.h"
 label=5;break; //@line 5763 "./stb_image.h"
 case 5: 
 var $27=$u; //@line 5765 "./stb_image.h"
 STACKTOP=sp;return $27; //@line 5765 "./stb_image.h"
  default: assert(0, "bad label: " + label);
 }

}


function _stbi__psd_test($s){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 var $r;
 $1=$s;
 var $2=$1; //@line 5047 "./stb_image.h"
 var $3=_stbi__get32be($2); //@line 5047 "./stb_image.h"
 var $4=($3|0)==943870035; //@line 5047 "./stb_image.h"
 var $5=($4&1); //@line 5047 "./stb_image.h"
 $r=$5; //@line 5047 "./stb_image.h"
 var $6=$1; //@line 5048 "./stb_image.h"
 _stbi__rewind($6); //@line 5048 "./stb_image.h"
 var $7=$r; //@line 5049 "./stb_image.h"
 STACKTOP=sp;return $7; //@line 5049 "./stb_image.h"
}


function _stbi__psd_load($s,$x,$y,$comp,$req_comp){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 var $pixelCount;
 var $channelCount;
 var $compression;
 var $channel;
 var $i;
 var $count;
 var $len;
 var $w;
 var $h;
 var $out;
 var $p;
 var $val;
 var $p1;
 $2=$s;
 $3=$x;
 $4=$y;
 $5=$comp;
 $6=$req_comp;
 var $7=$2; //@line 5061 "./stb_image.h"
 var $8=_stbi__get32be($7); //@line 5061 "./stb_image.h"
 var $9=($8|0)!=943870035; //@line 5061 "./stb_image.h"
 if($9){label=2;break;}else{label=3;break;} //@line 5061 "./stb_image.h"
 case 2: 
 var $11=_stbi__err(137512); //@line 5062 "./stb_image.h"
 var $12=($11|0)!=0; //@line 5062 "./stb_image.h"
 var $13=($12?0:0); //@line 5062 "./stb_image.h"
 var $14=$13; //@line 5062 "./stb_image.h"
 $1=$14; //@line 5062 "./stb_image.h"
 label=70;break; //@line 5062 "./stb_image.h"
 case 3: 
 var $16=$2; //@line 5065 "./stb_image.h"
 var $17=_stbi__get16be($16); //@line 5065 "./stb_image.h"
 var $18=($17|0)!=1; //@line 5065 "./stb_image.h"
 if($18){label=4;break;}else{label=5;break;} //@line 5065 "./stb_image.h"
 case 4: 
 var $20=_stbi__err(137496); //@line 5066 "./stb_image.h"
 var $21=($20|0)!=0; //@line 5066 "./stb_image.h"
 var $22=($21?0:0); //@line 5066 "./stb_image.h"
 var $23=$22; //@line 5066 "./stb_image.h"
 $1=$23; //@line 5066 "./stb_image.h"
 label=70;break; //@line 5066 "./stb_image.h"
 case 5: 
 var $25=$2; //@line 5069 "./stb_image.h"
 _stbi__skip($25,6); //@line 5069 "./stb_image.h"
 var $26=$2; //@line 5072 "./stb_image.h"
 var $27=_stbi__get16be($26); //@line 5072 "./stb_image.h"
 $channelCount=$27; //@line 5072 "./stb_image.h"
 var $28=$channelCount; //@line 5073 "./stb_image.h"
 var $29=($28|0)<0; //@line 5073 "./stb_image.h"
 if($29){label=7;break;}else{label=6;break;} //@line 5073 "./stb_image.h"
 case 6: 
 var $31=$channelCount; //@line 5073 "./stb_image.h"
 var $32=($31|0)>16; //@line 5073 "./stb_image.h"
 if($32){label=7;break;}else{label=8;break;} //@line 5073 "./stb_image.h"
 case 7: 
 var $34=_stbi__err(137472); //@line 5074 "./stb_image.h"
 var $35=($34|0)!=0; //@line 5074 "./stb_image.h"
 var $36=($35?0:0); //@line 5074 "./stb_image.h"
 var $37=$36; //@line 5074 "./stb_image.h"
 $1=$37; //@line 5074 "./stb_image.h"
 label=70;break; //@line 5074 "./stb_image.h"
 case 8: 
 var $39=$2; //@line 5077 "./stb_image.h"
 var $40=_stbi__get32be($39); //@line 5077 "./stb_image.h"
 $h=$40; //@line 5077 "./stb_image.h"
 var $41=$2; //@line 5078 "./stb_image.h"
 var $42=_stbi__get32be($41); //@line 5078 "./stb_image.h"
 $w=$42; //@line 5078 "./stb_image.h"
 var $43=$2; //@line 5081 "./stb_image.h"
 var $44=_stbi__get16be($43); //@line 5081 "./stb_image.h"
 var $45=($44|0)!=8; //@line 5081 "./stb_image.h"
 if($45){label=9;break;}else{label=10;break;} //@line 5081 "./stb_image.h"
 case 9: 
 var $47=_stbi__err(137448); //@line 5082 "./stb_image.h"
 var $48=($47|0)!=0; //@line 5082 "./stb_image.h"
 var $49=($48?0:0); //@line 5082 "./stb_image.h"
 var $50=$49; //@line 5082 "./stb_image.h"
 $1=$50; //@line 5082 "./stb_image.h"
 label=70;break; //@line 5082 "./stb_image.h"
 case 10: 
 var $52=$2; //@line 5094 "./stb_image.h"
 var $53=_stbi__get16be($52); //@line 5094 "./stb_image.h"
 var $54=($53|0)!=3; //@line 5094 "./stb_image.h"
 if($54){label=11;break;}else{label=12;break;} //@line 5094 "./stb_image.h"
 case 11: 
 var $56=_stbi__err(137416); //@line 5095 "./stb_image.h"
 var $57=($56|0)!=0; //@line 5095 "./stb_image.h"
 var $58=($57?0:0); //@line 5095 "./stb_image.h"
 var $59=$58; //@line 5095 "./stb_image.h"
 $1=$59; //@line 5095 "./stb_image.h"
 label=70;break; //@line 5095 "./stb_image.h"
 case 12: 
 var $61=$2; //@line 5098 "./stb_image.h"
 var $62=$2; //@line 5098 "./stb_image.h"
 var $63=_stbi__get32be($62); //@line 5098 "./stb_image.h"
 _stbi__skip($61,$63); //@line 5098 "./stb_image.h"
 var $64=$2; //@line 5101 "./stb_image.h"
 var $65=$2; //@line 5101 "./stb_image.h"
 var $66=_stbi__get32be($65); //@line 5101 "./stb_image.h"
 _stbi__skip($64,$66); //@line 5101 "./stb_image.h"
 var $67=$2; //@line 5104 "./stb_image.h"
 var $68=$2; //@line 5104 "./stb_image.h"
 var $69=_stbi__get32be($68); //@line 5104 "./stb_image.h"
 _stbi__skip($67,$69); //@line 5104 "./stb_image.h"
 var $70=$2; //@line 5110 "./stb_image.h"
 var $71=_stbi__get16be($70); //@line 5110 "./stb_image.h"
 $compression=$71; //@line 5110 "./stb_image.h"
 var $72=$compression; //@line 5111 "./stb_image.h"
 var $73=($72|0)>1; //@line 5111 "./stb_image.h"
 if($73){label=13;break;}else{label=14;break;} //@line 5111 "./stb_image.h"
 case 13: 
 var $75=_stbi__err(137800); //@line 5112 "./stb_image.h"
 var $76=($75|0)!=0; //@line 5112 "./stb_image.h"
 var $77=($76?0:0); //@line 5112 "./stb_image.h"
 var $78=$77; //@line 5112 "./stb_image.h"
 $1=$78; //@line 5112 "./stb_image.h"
 label=70;break; //@line 5112 "./stb_image.h"
 case 14: 
 var $80=$w; //@line 5115 "./stb_image.h"
 var $81=($80<<2); //@line 5115 "./stb_image.h"
 var $82=$h; //@line 5115 "./stb_image.h"
 var $83=(Math_imul($81,$82)|0); //@line 5115 "./stb_image.h"
 var $84=_stbi__malloc($83); //@line 5115 "./stb_image.h"
 $out=$84; //@line 5115 "./stb_image.h"
 var $85=$out; //@line 5116 "./stb_image.h"
 var $86=($85|0)!=0; //@line 5116 "./stb_image.h"
 if($86){label=16;break;}else{label=15;break;} //@line 5116 "./stb_image.h"
 case 15: 
 var $88=_stbi__err(138952); //@line 5116 "./stb_image.h"
 var $89=($88|0)!=0; //@line 5116 "./stb_image.h"
 var $90=($89?0:0); //@line 5116 "./stb_image.h"
 var $91=$90; //@line 5116 "./stb_image.h"
 $1=$91; //@line 5116 "./stb_image.h"
 label=70;break; //@line 5116 "./stb_image.h"
 case 16: 
 var $93=$w; //@line 5117 "./stb_image.h"
 var $94=$h; //@line 5117 "./stb_image.h"
 var $95=(Math_imul($93,$94)|0); //@line 5117 "./stb_image.h"
 $pixelCount=$95; //@line 5117 "./stb_image.h"
 var $96=$compression; //@line 5123 "./stb_image.h"
 var $97=($96|0)!=0; //@line 5123 "./stb_image.h"
 if($97){label=17;break;}else{label=46;break;} //@line 5123 "./stb_image.h"
 case 17: 
 var $99=$2; //@line 5134 "./stb_image.h"
 var $100=$h; //@line 5134 "./stb_image.h"
 var $101=$channelCount; //@line 5134 "./stb_image.h"
 var $102=(Math_imul($100,$101)|0); //@line 5134 "./stb_image.h"
 var $103=($102<<1); //@line 5134 "./stb_image.h"
 _stbi__skip($99,$103); //@line 5134 "./stb_image.h"
 $channel=0; //@line 5137 "./stb_image.h"
 label=18;break; //@line 5137 "./stb_image.h"
 case 18: 
 var $105=$channel; //@line 5137 "./stb_image.h"
 var $106=($105|0)<4; //@line 5137 "./stb_image.h"
 if($106){label=19;break;}else{label=45;break;} //@line 5137 "./stb_image.h"
 case 19: 
 var $108=$out; //@line 5140 "./stb_image.h"
 var $109=$channel; //@line 5140 "./stb_image.h"
 var $110=(($108+$109)|0); //@line 5140 "./stb_image.h"
 $p=$110; //@line 5140 "./stb_image.h"
 var $111=$channel; //@line 5141 "./stb_image.h"
 var $112=$channelCount; //@line 5141 "./stb_image.h"
 var $113=($111|0)>=($112|0); //@line 5141 "./stb_image.h"
 if($113){label=20;break;}else{label=25;break;} //@line 5141 "./stb_image.h"
 case 20: 
 $i=0; //@line 5143 "./stb_image.h"
 label=21;break; //@line 5143 "./stb_image.h"
 case 21: 
 var $116=$i; //@line 5143 "./stb_image.h"
 var $117=$pixelCount; //@line 5143 "./stb_image.h"
 var $118=($116|0)<($117|0); //@line 5143 "./stb_image.h"
 if($118){label=22;break;}else{label=24;break;} //@line 5143 "./stb_image.h"
 case 22: 
 var $120=$channel; //@line 5144 "./stb_image.h"
 var $121=($120|0)==3; //@line 5144 "./stb_image.h"
 var $122=($121?255:0); //@line 5144 "./stb_image.h"
 var $123=(($122)&255); //@line 5144 "./stb_image.h"
 var $124=$p; //@line 5144 "./stb_image.h"
 HEAP8[($124)]=$123; //@line 5144 "./stb_image.h"
 label=23;break; //@line 5144 "./stb_image.h"
 case 23: 
 var $126=$i; //@line 5143 "./stb_image.h"
 var $127=((($126)+(1))|0); //@line 5143 "./stb_image.h"
 $i=$127; //@line 5143 "./stb_image.h"
 var $128=$p; //@line 5143 "./stb_image.h"
 var $129=(($128+4)|0); //@line 5143 "./stb_image.h"
 $p=$129; //@line 5143 "./stb_image.h"
 label=21;break; //@line 5143 "./stb_image.h"
 case 24: 
 label=43;break; //@line 5145 "./stb_image.h"
 case 25: 
 $count=0; //@line 5147 "./stb_image.h"
 label=26;break; //@line 5148 "./stb_image.h"
 case 26: 
 var $133=$count; //@line 5148 "./stb_image.h"
 var $134=$pixelCount; //@line 5148 "./stb_image.h"
 var $135=($133|0)<($134|0); //@line 5148 "./stb_image.h"
 if($135){label=27;break;}else{label=42;break;} //@line 5148 "./stb_image.h"
 case 27: 
 var $137=$2; //@line 5149 "./stb_image.h"
 var $138=_stbi__get8($137); //@line 5149 "./stb_image.h"
 var $139=($138&255); //@line 5149 "./stb_image.h"
 $len=$139; //@line 5149 "./stb_image.h"
 var $140=$len; //@line 5150 "./stb_image.h"
 var $141=($140|0)==128; //@line 5150 "./stb_image.h"
 if($141){label=28;break;}else{label=29;break;} //@line 5150 "./stb_image.h"
 case 28: 
 label=41;break; //@line 5152 "./stb_image.h"
 case 29: 
 var $144=$len; //@line 5152 "./stb_image.h"
 var $145=($144|0)<128; //@line 5152 "./stb_image.h"
 if($145){label=30;break;}else{label=34;break;} //@line 5152 "./stb_image.h"
 case 30: 
 var $147=$len; //@line 5154 "./stb_image.h"
 var $148=((($147)+(1))|0); //@line 5154 "./stb_image.h"
 $len=$148; //@line 5154 "./stb_image.h"
 var $149=$len; //@line 5155 "./stb_image.h"
 var $150=$count; //@line 5155 "./stb_image.h"
 var $151=((($150)+($149))|0); //@line 5155 "./stb_image.h"
 $count=$151; //@line 5155 "./stb_image.h"
 label=31;break; //@line 5156 "./stb_image.h"
 case 31: 
 var $153=$len; //@line 5156 "./stb_image.h"
 var $154=($153|0)!=0; //@line 5156 "./stb_image.h"
 if($154){label=32;break;}else{label=33;break;} //@line 5156 "./stb_image.h"
 case 32: 
 var $156=$2; //@line 5157 "./stb_image.h"
 var $157=_stbi__get8($156); //@line 5157 "./stb_image.h"
 var $158=$p; //@line 5157 "./stb_image.h"
 HEAP8[($158)]=$157; //@line 5157 "./stb_image.h"
 var $159=$p; //@line 5158 "./stb_image.h"
 var $160=(($159+4)|0); //@line 5158 "./stb_image.h"
 $p=$160; //@line 5158 "./stb_image.h"
 var $161=$len; //@line 5159 "./stb_image.h"
 var $162=((($161)-(1))|0); //@line 5159 "./stb_image.h"
 $len=$162; //@line 5159 "./stb_image.h"
 label=31;break; //@line 5160 "./stb_image.h"
 case 33: 
 label=40;break; //@line 5161 "./stb_image.h"
 case 34: 
 var $165=$len; //@line 5161 "./stb_image.h"
 var $166=($165|0)>128; //@line 5161 "./stb_image.h"
 if($166){label=35;break;}else{label=39;break;} //@line 5161 "./stb_image.h"
 case 35: 
 var $168=$len; //@line 5165 "./stb_image.h"
 var $169=$168^255; //@line 5165 "./stb_image.h"
 $len=$169; //@line 5165 "./stb_image.h"
 var $170=$len; //@line 5166 "./stb_image.h"
 var $171=((($170)+(2))|0); //@line 5166 "./stb_image.h"
 $len=$171; //@line 5166 "./stb_image.h"
 var $172=$2; //@line 5167 "./stb_image.h"
 var $173=_stbi__get8($172); //@line 5167 "./stb_image.h"
 $val=$173; //@line 5167 "./stb_image.h"
 var $174=$len; //@line 5168 "./stb_image.h"
 var $175=$count; //@line 5168 "./stb_image.h"
 var $176=((($175)+($174))|0); //@line 5168 "./stb_image.h"
 $count=$176; //@line 5168 "./stb_image.h"
 label=36;break; //@line 5169 "./stb_image.h"
 case 36: 
 var $178=$len; //@line 5169 "./stb_image.h"
 var $179=($178|0)!=0; //@line 5169 "./stb_image.h"
 if($179){label=37;break;}else{label=38;break;} //@line 5169 "./stb_image.h"
 case 37: 
 var $181=$val; //@line 5170 "./stb_image.h"
 var $182=$p; //@line 5170 "./stb_image.h"
 HEAP8[($182)]=$181; //@line 5170 "./stb_image.h"
 var $183=$p; //@line 5171 "./stb_image.h"
 var $184=(($183+4)|0); //@line 5171 "./stb_image.h"
 $p=$184; //@line 5171 "./stb_image.h"
 var $185=$len; //@line 5172 "./stb_image.h"
 var $186=((($185)-(1))|0); //@line 5172 "./stb_image.h"
 $len=$186; //@line 5172 "./stb_image.h"
 label=36;break; //@line 5173 "./stb_image.h"
 case 38: 
 label=39;break; //@line 5174 "./stb_image.h"
 case 39: 
 label=40;break;
 case 40: 
 label=41;break;
 case 41: 
 label=26;break; //@line 5175 "./stb_image.h"
 case 42: 
 label=43;break;
 case 43: 
 label=44;break; //@line 5177 "./stb_image.h"
 case 44: 
 var $194=$channel; //@line 5137 "./stb_image.h"
 var $195=((($194)+(1))|0); //@line 5137 "./stb_image.h"
 $channel=$195; //@line 5137 "./stb_image.h"
 label=18;break; //@line 5137 "./stb_image.h"
 case 45: 
 label=62;break; //@line 5179 "./stb_image.h"
 case 46: 
 $channel=0; //@line 5184 "./stb_image.h"
 label=47;break; //@line 5184 "./stb_image.h"
 case 47: 
 var $199=$channel; //@line 5184 "./stb_image.h"
 var $200=($199|0)<4; //@line 5184 "./stb_image.h"
 if($200){label=48;break;}else{label=61;break;} //@line 5184 "./stb_image.h"
 case 48: 
 var $202=$out; //@line 5187 "./stb_image.h"
 var $203=$channel; //@line 5187 "./stb_image.h"
 var $204=(($202+$203)|0); //@line 5187 "./stb_image.h"
 $p1=$204; //@line 5187 "./stb_image.h"
 var $205=$channel; //@line 5188 "./stb_image.h"
 var $206=$channelCount; //@line 5188 "./stb_image.h"
 var $207=($205|0)>($206|0); //@line 5188 "./stb_image.h"
 if($207){label=49;break;}else{label=54;break;} //@line 5188 "./stb_image.h"
 case 49: 
 $i=0; //@line 5190 "./stb_image.h"
 label=50;break; //@line 5190 "./stb_image.h"
 case 50: 
 var $210=$i; //@line 5190 "./stb_image.h"
 var $211=$pixelCount; //@line 5190 "./stb_image.h"
 var $212=($210|0)<($211|0); //@line 5190 "./stb_image.h"
 if($212){label=51;break;}else{label=53;break;} //@line 5190 "./stb_image.h"
 case 51: 
 var $214=$channel; //@line 5191 "./stb_image.h"
 var $215=($214|0)==3; //@line 5191 "./stb_image.h"
 var $216=($215?255:0); //@line 5191 "./stb_image.h"
 var $217=(($216)&255); //@line 5191 "./stb_image.h"
 var $218=$p1; //@line 5191 "./stb_image.h"
 HEAP8[($218)]=$217; //@line 5191 "./stb_image.h"
 label=52;break; //@line 5191 "./stb_image.h"
 case 52: 
 var $220=$i; //@line 5190 "./stb_image.h"
 var $221=((($220)+(1))|0); //@line 5190 "./stb_image.h"
 $i=$221; //@line 5190 "./stb_image.h"
 var $222=$p1; //@line 5190 "./stb_image.h"
 var $223=(($222+4)|0); //@line 5190 "./stb_image.h"
 $p1=$223; //@line 5190 "./stb_image.h"
 label=50;break; //@line 5190 "./stb_image.h"
 case 53: 
 label=59;break; //@line 5192 "./stb_image.h"
 case 54: 
 $i=0; //@line 5194 "./stb_image.h"
 label=55;break; //@line 5194 "./stb_image.h"
 case 55: 
 var $227=$i; //@line 5194 "./stb_image.h"
 var $228=$pixelCount; //@line 5194 "./stb_image.h"
 var $229=($227|0)<($228|0); //@line 5194 "./stb_image.h"
 if($229){label=56;break;}else{label=58;break;} //@line 5194 "./stb_image.h"
 case 56: 
 var $231=$2; //@line 5195 "./stb_image.h"
 var $232=_stbi__get8($231); //@line 5195 "./stb_image.h"
 var $233=$p1; //@line 5195 "./stb_image.h"
 HEAP8[($233)]=$232; //@line 5195 "./stb_image.h"
 label=57;break; //@line 5195 "./stb_image.h"
 case 57: 
 var $235=$i; //@line 5194 "./stb_image.h"
 var $236=((($235)+(1))|0); //@line 5194 "./stb_image.h"
 $i=$236; //@line 5194 "./stb_image.h"
 var $237=$p1; //@line 5194 "./stb_image.h"
 var $238=(($237+4)|0); //@line 5194 "./stb_image.h"
 $p1=$238; //@line 5194 "./stb_image.h"
 label=55;break; //@line 5194 "./stb_image.h"
 case 58: 
 label=59;break;
 case 59: 
 label=60;break; //@line 5197 "./stb_image.h"
 case 60: 
 var $242=$channel; //@line 5184 "./stb_image.h"
 var $243=((($242)+(1))|0); //@line 5184 "./stb_image.h"
 $channel=$243; //@line 5184 "./stb_image.h"
 label=47;break; //@line 5184 "./stb_image.h"
 case 61: 
 label=62;break;
 case 62: 
 var $246=$6; //@line 5200 "./stb_image.h"
 var $247=($246|0)!=0; //@line 5200 "./stb_image.h"
 if($247){label=63;break;}else{label=67;break;} //@line 5200 "./stb_image.h"
 case 63: 
 var $249=$6; //@line 5200 "./stb_image.h"
 var $250=($249|0)!=4; //@line 5200 "./stb_image.h"
 if($250){label=64;break;}else{label=67;break;} //@line 5200 "./stb_image.h"
 case 64: 
 var $252=$out; //@line 5201 "./stb_image.h"
 var $253=$6; //@line 5201 "./stb_image.h"
 var $254=$w; //@line 5201 "./stb_image.h"
 var $255=$h; //@line 5201 "./stb_image.h"
 var $256=_stbi__convert_format($252,4,$253,$254,$255); //@line 5201 "./stb_image.h"
 $out=$256; //@line 5201 "./stb_image.h"
 var $257=$out; //@line 5202 "./stb_image.h"
 var $258=($257|0)==0; //@line 5202 "./stb_image.h"
 if($258){label=65;break;}else{label=66;break;} //@line 5202 "./stb_image.h"
 case 65: 
 var $260=$out; //@line 5202 "./stb_image.h"
 $1=$260; //@line 5202 "./stb_image.h"
 label=70;break; //@line 5202 "./stb_image.h"
 case 66: 
 label=67;break; //@line 5203 "./stb_image.h"
 case 67: 
 var $263=$5; //@line 5205 "./stb_image.h"
 var $264=($263|0)!=0; //@line 5205 "./stb_image.h"
 if($264){label=68;break;}else{label=69;break;} //@line 5205 "./stb_image.h"
 case 68: 
 var $266=$5; //@line 5205 "./stb_image.h"
 HEAP32[(($266)>>2)]=4; //@line 5205 "./stb_image.h"
 label=69;break; //@line 5205 "./stb_image.h"
 case 69: 
 var $268=$h; //@line 5206 "./stb_image.h"
 var $269=$4; //@line 5206 "./stb_image.h"
 HEAP32[(($269)>>2)]=$268; //@line 5206 "./stb_image.h"
 var $270=$w; //@line 5207 "./stb_image.h"
 var $271=$3; //@line 5207 "./stb_image.h"
 HEAP32[(($271)>>2)]=$270; //@line 5207 "./stb_image.h"
 var $272=$out; //@line 5209 "./stb_image.h"
 $1=$272; //@line 5209 "./stb_image.h"
 label=70;break; //@line 5209 "./stb_image.h"
 case 70: 
 var $274=$1; //@line 5210 "./stb_image.h"
 STACKTOP=sp;return $274; //@line 5210 "./stb_image.h"
  default: assert(0, "bad label: " + label);
 }

}


function _stbi__pic_test($s){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 var $r;
 $1=$s;
 var $2=$1; //@line 5421 "./stb_image.h"
 var $3=_stbi__pic_test_core($2); //@line 5421 "./stb_image.h"
 $r=$3; //@line 5421 "./stb_image.h"
 var $4=$1; //@line 5422 "./stb_image.h"
 _stbi__rewind($4); //@line 5422 "./stb_image.h"
 var $5=$r; //@line 5423 "./stb_image.h"
 STACKTOP=sp;return $5; //@line 5423 "./stb_image.h"
}


function _stbi__pic_load($s,$px,$py,$comp,$req_comp){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 var $result;
 var $i;
 var $x;
 var $y;
 $2=$s;
 $3=$px;
 $4=$py;
 $5=$comp;
 $6=$req_comp;
 $i=0; //@line 5391 "./stb_image.h"
 label=2;break; //@line 5391 "./stb_image.h"
 case 2: 
 var $8=$i; //@line 5391 "./stb_image.h"
 var $9=($8|0)<92; //@line 5391 "./stb_image.h"
 if($9){label=3;break;}else{label=5;break;} //@line 5391 "./stb_image.h"
 case 3: 
 var $11=$2; //@line 5392 "./stb_image.h"
 var $12=_stbi__get8($11); //@line 5392 "./stb_image.h"
 label=4;break; //@line 5392 "./stb_image.h"
 case 4: 
 var $14=$i; //@line 5391 "./stb_image.h"
 var $15=((($14)+(1))|0); //@line 5391 "./stb_image.h"
 $i=$15; //@line 5391 "./stb_image.h"
 label=2;break; //@line 5391 "./stb_image.h"
 case 5: 
 var $17=$2; //@line 5394 "./stb_image.h"
 var $18=_stbi__get16be($17); //@line 5394 "./stb_image.h"
 $x=$18; //@line 5394 "./stb_image.h"
 var $19=$2; //@line 5395 "./stb_image.h"
 var $20=_stbi__get16be($19); //@line 5395 "./stb_image.h"
 $y=$20; //@line 5395 "./stb_image.h"
 var $21=$2; //@line 5396 "./stb_image.h"
 var $22=_stbi__at_eof($21); //@line 5396 "./stb_image.h"
 var $23=($22|0)!=0; //@line 5396 "./stb_image.h"
 if($23){label=6;break;}else{label=7;break;} //@line 5396 "./stb_image.h"
 case 6: 
 var $25=_stbi__err(137616); //@line 5396 "./stb_image.h"
 var $26=($25|0)!=0; //@line 5396 "./stb_image.h"
 var $27=($26?0:0); //@line 5396 "./stb_image.h"
 var $28=$27; //@line 5396 "./stb_image.h"
 $1=$28; //@line 5396 "./stb_image.h"
 label=14;break; //@line 5396 "./stb_image.h"
 case 7: 
 var $30=$x; //@line 5397 "./stb_image.h"
 var $31=(((268435456)/(($30|0)))&-1); //@line 5397 "./stb_image.h"
 var $32=$y; //@line 5397 "./stb_image.h"
 var $33=($31|0)<($32|0); //@line 5397 "./stb_image.h"
 if($33){label=8;break;}else{label=9;break;} //@line 5397 "./stb_image.h"
 case 8: 
 var $35=_stbi__err(139448); //@line 5397 "./stb_image.h"
 var $36=($35|0)!=0; //@line 5397 "./stb_image.h"
 var $37=($36?0:0); //@line 5397 "./stb_image.h"
 var $38=$37; //@line 5397 "./stb_image.h"
 $1=$38; //@line 5397 "./stb_image.h"
 label=14;break; //@line 5397 "./stb_image.h"
 case 9: 
 var $40=$2; //@line 5399 "./stb_image.h"
 var $41=_stbi__get32be($40); //@line 5399 "./stb_image.h"
 var $42=$2; //@line 5400 "./stb_image.h"
 var $43=_stbi__get16be($42); //@line 5400 "./stb_image.h"
 var $44=$2; //@line 5401 "./stb_image.h"
 var $45=_stbi__get16be($44); //@line 5401 "./stb_image.h"
 var $46=$x; //@line 5404 "./stb_image.h"
 var $47=$y; //@line 5404 "./stb_image.h"
 var $48=(Math_imul($46,$47)|0); //@line 5404 "./stb_image.h"
 var $49=($48<<2); //@line 5404 "./stb_image.h"
 var $50=_stbi__malloc($49); //@line 5404 "./stb_image.h"
 $result=$50; //@line 5404 "./stb_image.h"
 var $51=$result; //@line 5405 "./stb_image.h"
 var $52=$x; //@line 5405 "./stb_image.h"
 var $53=$y; //@line 5405 "./stb_image.h"
 var $54=(Math_imul($52,$53)|0); //@line 5405 "./stb_image.h"
 var $55=($54<<2); //@line 5405 "./stb_image.h"
 _memset($51, -1, $55)|0; //@line 5405 "./stb_image.h"
 var $56=$2; //@line 5407 "./stb_image.h"
 var $57=$x; //@line 5407 "./stb_image.h"
 var $58=$y; //@line 5407 "./stb_image.h"
 var $59=$5; //@line 5407 "./stb_image.h"
 var $60=$result; //@line 5407 "./stb_image.h"
 var $61=_stbi__pic_load_core($56,$57,$58,$59,$60); //@line 5407 "./stb_image.h"
 var $62=($61|0)!=0; //@line 5407 "./stb_image.h"
 if($62){label=11;break;}else{label=10;break;} //@line 5407 "./stb_image.h"
 case 10: 
 var $64=$result; //@line 5408 "./stb_image.h"
 _free($64); //@line 5408 "./stb_image.h"
 $result=0; //@line 5409 "./stb_image.h"
 label=11;break; //@line 5410 "./stb_image.h"
 case 11: 
 var $66=$x; //@line 5411 "./stb_image.h"
 var $67=$3; //@line 5411 "./stb_image.h"
 HEAP32[(($67)>>2)]=$66; //@line 5411 "./stb_image.h"
 var $68=$y; //@line 5412 "./stb_image.h"
 var $69=$4; //@line 5412 "./stb_image.h"
 HEAP32[(($69)>>2)]=$68; //@line 5412 "./stb_image.h"
 var $70=$6; //@line 5413 "./stb_image.h"
 var $71=($70|0)==0; //@line 5413 "./stb_image.h"
 if($71){label=12;break;}else{label=13;break;} //@line 5413 "./stb_image.h"
 case 12: 
 var $73=$5; //@line 5413 "./stb_image.h"
 var $74=HEAP32[(($73)>>2)]; //@line 5413 "./stb_image.h"
 $6=$74; //@line 5413 "./stb_image.h"
 label=13;break; //@line 5413 "./stb_image.h"
 case 13: 
 var $76=$result; //@line 5414 "./stb_image.h"
 var $77=$6; //@line 5414 "./stb_image.h"
 var $78=$x; //@line 5414 "./stb_image.h"
 var $79=$y; //@line 5414 "./stb_image.h"
 var $80=_stbi__convert_format($76,4,$77,$78,$79); //@line 5414 "./stb_image.h"
 $result=$80; //@line 5414 "./stb_image.h"
 var $81=$result; //@line 5416 "./stb_image.h"
 $1=$81; //@line 5416 "./stb_image.h"
 label=14;break; //@line 5416 "./stb_image.h"
 case 14: 
 var $83=$1; //@line 5417 "./stb_image.h"
 STACKTOP=sp;return $83; //@line 5417 "./stb_image.h"
  default: assert(0, "bad label: " + label);
 }

}


function _stbi__pnm_test($s){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $p;
 var $t;
 $2=$s;
 var $3=$2; //@line 6123 "./stb_image.h"
 var $4=_stbi__get8($3); //@line 6123 "./stb_image.h"
 $p=$4; //@line 6123 "./stb_image.h"
 var $5=$2; //@line 6124 "./stb_image.h"
 var $6=_stbi__get8($5); //@line 6124 "./stb_image.h"
 $t=$6; //@line 6124 "./stb_image.h"
 var $7=$p; //@line 6125 "./stb_image.h"
 var $8=(($7<<24)>>24); //@line 6125 "./stb_image.h"
 var $9=($8|0)!=80; //@line 6125 "./stb_image.h"
 if($9){label=4;break;}else{label=2;break;} //@line 6125 "./stb_image.h"
 case 2: 
 var $11=$t; //@line 6125 "./stb_image.h"
 var $12=(($11<<24)>>24); //@line 6125 "./stb_image.h"
 var $13=($12|0)!=53; //@line 6125 "./stb_image.h"
 if($13){label=3;break;}else{label=5;break;} //@line 6125 "./stb_image.h"
 case 3: 
 var $15=$t; //@line 6125 "./stb_image.h"
 var $16=(($15<<24)>>24); //@line 6125 "./stb_image.h"
 var $17=($16|0)!=54; //@line 6125 "./stb_image.h"
 if($17){label=4;break;}else{label=5;break;} //@line 6125 "./stb_image.h"
 case 4: 
 var $19=$2; //@line 6126 "./stb_image.h"
 _stbi__rewind($19); //@line 6126 "./stb_image.h"
 $1=0; //@line 6127 "./stb_image.h"
 label=6;break; //@line 6127 "./stb_image.h"
 case 5: 
 $1=1; //@line 6129 "./stb_image.h"
 label=6;break; //@line 6129 "./stb_image.h"
 case 6: 
 var $22=$1; //@line 6129 "./stb_image.h"
 STACKTOP=sp;return $22; //@line 6129 "./stb_image.h"
  default: assert(0, "bad label: " + label);
 }

}


function _stbi__pnm_load($s,$x,$y,$comp,$req_comp){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 var $out;
 $2=$s;
 $3=$x;
 $4=$y;
 $5=$comp;
 $6=$req_comp;
 var $7=$2; //@line 6135 "./stb_image.h"
 var $8=$2; //@line 6135 "./stb_image.h"
 var $9=(($8)|0); //@line 6135 "./stb_image.h"
 var $10=$2; //@line 6135 "./stb_image.h"
 var $11=(($10+4)|0); //@line 6135 "./stb_image.h"
 var $12=$2; //@line 6135 "./stb_image.h"
 var $13=(($12+8)|0); //@line 6135 "./stb_image.h"
 var $14=_stbi__pnm_info($7,$9,$11,$13); //@line 6135 "./stb_image.h"
 var $15=($14|0)!=0; //@line 6135 "./stb_image.h"
 if($15){label=3;break;}else{label=2;break;} //@line 6135 "./stb_image.h"
 case 2: 
 $1=0; //@line 6136 "./stb_image.h"
 label=11;break; //@line 6136 "./stb_image.h"
 case 3: 
 var $18=$2; //@line 6137 "./stb_image.h"
 var $19=(($18)|0); //@line 6137 "./stb_image.h"
 var $20=HEAP32[(($19)>>2)]; //@line 6137 "./stb_image.h"
 var $21=$3; //@line 6137 "./stb_image.h"
 HEAP32[(($21)>>2)]=$20; //@line 6137 "./stb_image.h"
 var $22=$2; //@line 6138 "./stb_image.h"
 var $23=(($22+4)|0); //@line 6138 "./stb_image.h"
 var $24=HEAP32[(($23)>>2)]; //@line 6138 "./stb_image.h"
 var $25=$4; //@line 6138 "./stb_image.h"
 HEAP32[(($25)>>2)]=$24; //@line 6138 "./stb_image.h"
 var $26=$2; //@line 6139 "./stb_image.h"
 var $27=(($26+8)|0); //@line 6139 "./stb_image.h"
 var $28=HEAP32[(($27)>>2)]; //@line 6139 "./stb_image.h"
 var $29=$5; //@line 6139 "./stb_image.h"
 HEAP32[(($29)>>2)]=$28; //@line 6139 "./stb_image.h"
 var $30=$2; //@line 6141 "./stb_image.h"
 var $31=(($30+8)|0); //@line 6141 "./stb_image.h"
 var $32=HEAP32[(($31)>>2)]; //@line 6141 "./stb_image.h"
 var $33=$2; //@line 6141 "./stb_image.h"
 var $34=(($33)|0); //@line 6141 "./stb_image.h"
 var $35=HEAP32[(($34)>>2)]; //@line 6141 "./stb_image.h"
 var $36=(Math_imul($32,$35)|0); //@line 6141 "./stb_image.h"
 var $37=$2; //@line 6141 "./stb_image.h"
 var $38=(($37+4)|0); //@line 6141 "./stb_image.h"
 var $39=HEAP32[(($38)>>2)]; //@line 6141 "./stb_image.h"
 var $40=(Math_imul($36,$39)|0); //@line 6141 "./stb_image.h"
 var $41=_stbi__malloc($40); //@line 6141 "./stb_image.h"
 $out=$41; //@line 6141 "./stb_image.h"
 var $42=$out; //@line 6142 "./stb_image.h"
 var $43=($42|0)!=0; //@line 6142 "./stb_image.h"
 if($43){label=5;break;}else{label=4;break;} //@line 6142 "./stb_image.h"
 case 4: 
 var $45=_stbi__err(138952); //@line 6142 "./stb_image.h"
 var $46=($45|0)!=0; //@line 6142 "./stb_image.h"
 var $47=($46?0:0); //@line 6142 "./stb_image.h"
 var $48=$47; //@line 6142 "./stb_image.h"
 $1=$48; //@line 6142 "./stb_image.h"
 label=11;break; //@line 6142 "./stb_image.h"
 case 5: 
 var $50=$2; //@line 6143 "./stb_image.h"
 var $51=$out; //@line 6143 "./stb_image.h"
 var $52=$2; //@line 6143 "./stb_image.h"
 var $53=(($52+8)|0); //@line 6143 "./stb_image.h"
 var $54=HEAP32[(($53)>>2)]; //@line 6143 "./stb_image.h"
 var $55=$2; //@line 6143 "./stb_image.h"
 var $56=(($55)|0); //@line 6143 "./stb_image.h"
 var $57=HEAP32[(($56)>>2)]; //@line 6143 "./stb_image.h"
 var $58=(Math_imul($54,$57)|0); //@line 6143 "./stb_image.h"
 var $59=$2; //@line 6143 "./stb_image.h"
 var $60=(($59+4)|0); //@line 6143 "./stb_image.h"
 var $61=HEAP32[(($60)>>2)]; //@line 6143 "./stb_image.h"
 var $62=(Math_imul($58,$61)|0); //@line 6143 "./stb_image.h"
 var $63=_stbi__getn($50,$51,$62); //@line 6143 "./stb_image.h"
 var $64=$6; //@line 6145 "./stb_image.h"
 var $65=($64|0)!=0; //@line 6145 "./stb_image.h"
 if($65){label=6;break;}else{label=10;break;} //@line 6145 "./stb_image.h"
 case 6: 
 var $67=$6; //@line 6145 "./stb_image.h"
 var $68=$2; //@line 6145 "./stb_image.h"
 var $69=(($68+8)|0); //@line 6145 "./stb_image.h"
 var $70=HEAP32[(($69)>>2)]; //@line 6145 "./stb_image.h"
 var $71=($67|0)!=($70|0); //@line 6145 "./stb_image.h"
 if($71){label=7;break;}else{label=10;break;} //@line 6145 "./stb_image.h"
 case 7: 
 var $73=$out; //@line 6146 "./stb_image.h"
 var $74=$2; //@line 6146 "./stb_image.h"
 var $75=(($74+8)|0); //@line 6146 "./stb_image.h"
 var $76=HEAP32[(($75)>>2)]; //@line 6146 "./stb_image.h"
 var $77=$6; //@line 6146 "./stb_image.h"
 var $78=$2; //@line 6146 "./stb_image.h"
 var $79=(($78)|0); //@line 6146 "./stb_image.h"
 var $80=HEAP32[(($79)>>2)]; //@line 6146 "./stb_image.h"
 var $81=$2; //@line 6146 "./stb_image.h"
 var $82=(($81+4)|0); //@line 6146 "./stb_image.h"
 var $83=HEAP32[(($82)>>2)]; //@line 6146 "./stb_image.h"
 var $84=_stbi__convert_format($73,$76,$77,$80,$83); //@line 6146 "./stb_image.h"
 $out=$84; //@line 6146 "./stb_image.h"
 var $85=$out; //@line 6147 "./stb_image.h"
 var $86=($85|0)==0; //@line 6147 "./stb_image.h"
 if($86){label=8;break;}else{label=9;break;} //@line 6147 "./stb_image.h"
 case 8: 
 var $88=$out; //@line 6147 "./stb_image.h"
 $1=$88; //@line 6147 "./stb_image.h"
 label=11;break; //@line 6147 "./stb_image.h"
 case 9: 
 label=10;break; //@line 6148 "./stb_image.h"
 case 10: 
 var $91=$out; //@line 6149 "./stb_image.h"
 $1=$91; //@line 6149 "./stb_image.h"
 label=11;break; //@line 6149 "./stb_image.h"
 case 11: 
 var $93=$1; //@line 6150 "./stb_image.h"
 STACKTOP=sp;return $93; //@line 6150 "./stb_image.h"
  default: assert(0, "bad label: " + label);
 }

}


function _stbi__hdr_to_ldr($data,$x,$y,$comp){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $i;
 var $k;
 var $n;
 var $output;
 var $z;
 var $z1;
 $2=$data;
 $3=$x;
 $4=$y;
 $5=$comp;
 var $6=$3; //@line 1387 "./stb_image.h"
 var $7=$4; //@line 1387 "./stb_image.h"
 var $8=(Math_imul($6,$7)|0); //@line 1387 "./stb_image.h"
 var $9=$5; //@line 1387 "./stb_image.h"
 var $10=(Math_imul($8,$9)|0); //@line 1387 "./stb_image.h"
 var $11=_stbi__malloc($10); //@line 1387 "./stb_image.h"
 $output=$11; //@line 1387 "./stb_image.h"
 var $12=$output; //@line 1388 "./stb_image.h"
 var $13=($12|0)==0; //@line 1388 "./stb_image.h"
 if($13){label=2;break;}else{label=3;break;} //@line 1388 "./stb_image.h"
 case 2: 
 var $15=$2; //@line 1388 "./stb_image.h"
 var $16=$15; //@line 1388 "./stb_image.h"
 _free($16); //@line 1388 "./stb_image.h"
 var $17=_stbi__err(138952); //@line 1388 "./stb_image.h"
 var $18=($17|0)!=0; //@line 1388 "./stb_image.h"
 var $19=($18?0:0); //@line 1388 "./stb_image.h"
 var $20=$19; //@line 1388 "./stb_image.h"
 $1=$20; //@line 1388 "./stb_image.h"
 label=25;break; //@line 1388 "./stb_image.h"
 case 3: 
 var $22=$5; //@line 1390 "./stb_image.h"
 var $23=$22&1; //@line 1390 "./stb_image.h"
 var $24=($23|0)!=0; //@line 1390 "./stb_image.h"
 if($24){label=4;break;}else{label=5;break;} //@line 1390 "./stb_image.h"
 case 4: 
 var $26=$5; //@line 1390 "./stb_image.h"
 $n=$26; //@line 1390 "./stb_image.h"
 label=6;break; //@line 1390 "./stb_image.h"
 case 5: 
 var $28=$5; //@line 1390 "./stb_image.h"
 var $29=((($28)-(1))|0); //@line 1390 "./stb_image.h"
 $n=$29; //@line 1390 "./stb_image.h"
 label=6;break;
 case 6: 
 $i=0; //@line 1391 "./stb_image.h"
 label=7;break; //@line 1391 "./stb_image.h"
 case 7: 
 var $32=$i; //@line 1391 "./stb_image.h"
 var $33=$3; //@line 1391 "./stb_image.h"
 var $34=$4; //@line 1391 "./stb_image.h"
 var $35=(Math_imul($33,$34)|0); //@line 1391 "./stb_image.h"
 var $36=($32|0)<($35|0); //@line 1391 "./stb_image.h"
 if($36){label=8;break;}else{label=24;break;} //@line 1391 "./stb_image.h"
 case 8: 
 $k=0; //@line 1392 "./stb_image.h"
 label=9;break; //@line 1392 "./stb_image.h"
 case 9: 
 var $39=$k; //@line 1392 "./stb_image.h"
 var $40=$n; //@line 1392 "./stb_image.h"
 var $41=($39|0)<($40|0); //@line 1392 "./stb_image.h"
 if($41){label=10;break;}else{label=16;break;} //@line 1392 "./stb_image.h"
 case 10: 
 var $43=$i; //@line 1393 "./stb_image.h"
 var $44=$5; //@line 1393 "./stb_image.h"
 var $45=(Math_imul($43,$44)|0); //@line 1393 "./stb_image.h"
 var $46=$k; //@line 1393 "./stb_image.h"
 var $47=((($45)+($46))|0); //@line 1393 "./stb_image.h"
 var $48=$2; //@line 1393 "./stb_image.h"
 var $49=(($48+($47<<2))|0); //@line 1393 "./stb_image.h"
 var $50=HEAPF32[(($49)>>2)]; //@line 1393 "./stb_image.h"
 var $51=HEAPF32[((10296)>>2)]; //@line 1393 "./stb_image.h"
 var $52=($50)*($51); //@line 1393 "./stb_image.h"
 var $53=$52; //@line 1393 "./stb_image.h"
 var $54=HEAPF32[((10304)>>2)]; //@line 1393 "./stb_image.h"
 var $55=$54; //@line 1393 "./stb_image.h"
 var $56=Math_pow($53,$55); //@line 1393 "./stb_image.h"
 var $57=$56; //@line 1393 "./stb_image.h"
 var $58=($57)*(255); //@line 1393 "./stb_image.h"
 var $59=($58)+((0.5)); //@line 1393 "./stb_image.h"
 $z=$59; //@line 1393 "./stb_image.h"
 var $60=$z; //@line 1394 "./stb_image.h"
 var $61=$60<0; //@line 1394 "./stb_image.h"
 if($61){label=11;break;}else{label=12;break;} //@line 1394 "./stb_image.h"
 case 11: 
 $z=0; //@line 1394 "./stb_image.h"
 label=12;break; //@line 1394 "./stb_image.h"
 case 12: 
 var $64=$z; //@line 1395 "./stb_image.h"
 var $65=$64>255; //@line 1395 "./stb_image.h"
 if($65){label=13;break;}else{label=14;break;} //@line 1395 "./stb_image.h"
 case 13: 
 $z=255; //@line 1395 "./stb_image.h"
 label=14;break; //@line 1395 "./stb_image.h"
 case 14: 
 var $68=$z; //@line 1396 "./stb_image.h"
 var $69=(($68)&-1); //@line 1396 "./stb_image.h"
 var $70=(($69)&255); //@line 1396 "./stb_image.h"
 var $71=$i; //@line 1396 "./stb_image.h"
 var $72=$5; //@line 1396 "./stb_image.h"
 var $73=(Math_imul($71,$72)|0); //@line 1396 "./stb_image.h"
 var $74=$k; //@line 1396 "./stb_image.h"
 var $75=((($73)+($74))|0); //@line 1396 "./stb_image.h"
 var $76=$output; //@line 1396 "./stb_image.h"
 var $77=(($76+$75)|0); //@line 1396 "./stb_image.h"
 HEAP8[($77)]=$70; //@line 1396 "./stb_image.h"
 label=15;break; //@line 1397 "./stb_image.h"
 case 15: 
 var $79=$k; //@line 1392 "./stb_image.h"
 var $80=((($79)+(1))|0); //@line 1392 "./stb_image.h"
 $k=$80; //@line 1392 "./stb_image.h"
 label=9;break; //@line 1392 "./stb_image.h"
 case 16: 
 var $82=$k; //@line 1398 "./stb_image.h"
 var $83=$5; //@line 1398 "./stb_image.h"
 var $84=($82|0)<($83|0); //@line 1398 "./stb_image.h"
 if($84){label=17;break;}else{label=22;break;} //@line 1398 "./stb_image.h"
 case 17: 
 var $86=$i; //@line 1399 "./stb_image.h"
 var $87=$5; //@line 1399 "./stb_image.h"
 var $88=(Math_imul($86,$87)|0); //@line 1399 "./stb_image.h"
 var $89=$k; //@line 1399 "./stb_image.h"
 var $90=((($88)+($89))|0); //@line 1399 "./stb_image.h"
 var $91=$2; //@line 1399 "./stb_image.h"
 var $92=(($91+($90<<2))|0); //@line 1399 "./stb_image.h"
 var $93=HEAPF32[(($92)>>2)]; //@line 1399 "./stb_image.h"
 var $94=($93)*(255); //@line 1399 "./stb_image.h"
 var $95=($94)+((0.5)); //@line 1399 "./stb_image.h"
 $z1=$95; //@line 1399 "./stb_image.h"
 var $96=$z1; //@line 1400 "./stb_image.h"
 var $97=$96<0; //@line 1400 "./stb_image.h"
 if($97){label=18;break;}else{label=19;break;} //@line 1400 "./stb_image.h"
 case 18: 
 $z1=0; //@line 1400 "./stb_image.h"
 label=19;break; //@line 1400 "./stb_image.h"
 case 19: 
 var $100=$z1; //@line 1401 "./stb_image.h"
 var $101=$100>255; //@line 1401 "./stb_image.h"
 if($101){label=20;break;}else{label=21;break;} //@line 1401 "./stb_image.h"
 case 20: 
 $z1=255; //@line 1401 "./stb_image.h"
 label=21;break; //@line 1401 "./stb_image.h"
 case 21: 
 var $104=$z1; //@line 1402 "./stb_image.h"
 var $105=(($104)&-1); //@line 1402 "./stb_image.h"
 var $106=(($105)&255); //@line 1402 "./stb_image.h"
 var $107=$i; //@line 1402 "./stb_image.h"
 var $108=$5; //@line 1402 "./stb_image.h"
 var $109=(Math_imul($107,$108)|0); //@line 1402 "./stb_image.h"
 var $110=$k; //@line 1402 "./stb_image.h"
 var $111=((($109)+($110))|0); //@line 1402 "./stb_image.h"
 var $112=$output; //@line 1402 "./stb_image.h"
 var $113=(($112+$111)|0); //@line 1402 "./stb_image.h"
 HEAP8[($113)]=$106; //@line 1402 "./stb_image.h"
 label=22;break; //@line 1403 "./stb_image.h"
 case 22: 
 label=23;break; //@line 1404 "./stb_image.h"
 case 23: 
 var $116=$i; //@line 1391 "./stb_image.h"
 var $117=((($116)+(1))|0); //@line 1391 "./stb_image.h"
 $i=$117; //@line 1391 "./stb_image.h"
 label=7;break; //@line 1391 "./stb_image.h"
 case 24: 
 var $119=$2; //@line 1405 "./stb_image.h"
 var $120=$119; //@line 1405 "./stb_image.h"
 _free($120); //@line 1405 "./stb_image.h"
 var $121=$output; //@line 1406 "./stb_image.h"
 $1=$121; //@line 1406 "./stb_image.h"
 label=25;break; //@line 1406 "./stb_image.h"
 case 25: 
 var $123=$1; //@line 1407 "./stb_image.h"
 STACKTOP=sp;return $123; //@line 1407 "./stb_image.h"
  default: assert(0, "bad label: " + label);
 }

}


function _stbi__tga_test($s){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $res;
 var $sz;
 $2=$s;
 var $3=$2; //@line 4825 "./stb_image.h"
 var $4=_stbi__get8($3); //@line 4825 "./stb_image.h"
 var $5=$2; //@line 4826 "./stb_image.h"
 var $6=_stbi__get8($5); //@line 4826 "./stb_image.h"
 var $7=($6&255); //@line 4826 "./stb_image.h"
 $sz=$7; //@line 4826 "./stb_image.h"
 var $8=$sz; //@line 4827 "./stb_image.h"
 var $9=($8|0)>1; //@line 4827 "./stb_image.h"
 if($9){label=2;break;}else{label=3;break;} //@line 4827 "./stb_image.h"
 case 2: 
 $1=0; //@line 4827 "./stb_image.h"
 label=21;break; //@line 4827 "./stb_image.h"
 case 3: 
 var $12=$2; //@line 4828 "./stb_image.h"
 var $13=_stbi__get8($12); //@line 4828 "./stb_image.h"
 var $14=($13&255); //@line 4828 "./stb_image.h"
 $sz=$14; //@line 4828 "./stb_image.h"
 var $15=$sz; //@line 4829 "./stb_image.h"
 var $16=($15|0)!=1; //@line 4829 "./stb_image.h"
 if($16){label=4;break;}else{label=10;break;} //@line 4829 "./stb_image.h"
 case 4: 
 var $18=$sz; //@line 4829 "./stb_image.h"
 var $19=($18|0)!=2; //@line 4829 "./stb_image.h"
 if($19){label=5;break;}else{label=10;break;} //@line 4829 "./stb_image.h"
 case 5: 
 var $21=$sz; //@line 4829 "./stb_image.h"
 var $22=($21|0)!=3; //@line 4829 "./stb_image.h"
 if($22){label=6;break;}else{label=10;break;} //@line 4829 "./stb_image.h"
 case 6: 
 var $24=$sz; //@line 4829 "./stb_image.h"
 var $25=($24|0)!=9; //@line 4829 "./stb_image.h"
 if($25){label=7;break;}else{label=10;break;} //@line 4829 "./stb_image.h"
 case 7: 
 var $27=$sz; //@line 4829 "./stb_image.h"
 var $28=($27|0)!=10; //@line 4829 "./stb_image.h"
 if($28){label=8;break;}else{label=10;break;} //@line 4829 "./stb_image.h"
 case 8: 
 var $30=$sz; //@line 4829 "./stb_image.h"
 var $31=($30|0)!=11; //@line 4829 "./stb_image.h"
 if($31){label=9;break;}else{label=10;break;} //@line 4829 "./stb_image.h"
 case 9: 
 $1=0; //@line 4829 "./stb_image.h"
 label=21;break; //@line 4829 "./stb_image.h"
 case 10: 
 var $34=$2; //@line 4830 "./stb_image.h"
 var $35=_stbi__get16be($34); //@line 4830 "./stb_image.h"
 var $36=$2; //@line 4831 "./stb_image.h"
 var $37=_stbi__get16be($36); //@line 4831 "./stb_image.h"
 var $38=$2; //@line 4832 "./stb_image.h"
 var $39=_stbi__get8($38); //@line 4832 "./stb_image.h"
 var $40=$2; //@line 4833 "./stb_image.h"
 var $41=_stbi__get16be($40); //@line 4833 "./stb_image.h"
 var $42=$2; //@line 4834 "./stb_image.h"
 var $43=_stbi__get16be($42); //@line 4834 "./stb_image.h"
 var $44=$2; //@line 4835 "./stb_image.h"
 var $45=_stbi__get16be($44); //@line 4835 "./stb_image.h"
 var $46=($45|0)<1; //@line 4835 "./stb_image.h"
 if($46){label=11;break;}else{label=12;break;} //@line 4835 "./stb_image.h"
 case 11: 
 $1=0; //@line 4835 "./stb_image.h"
 label=21;break; //@line 4835 "./stb_image.h"
 case 12: 
 var $49=$2; //@line 4836 "./stb_image.h"
 var $50=_stbi__get16be($49); //@line 4836 "./stb_image.h"
 var $51=($50|0)<1; //@line 4836 "./stb_image.h"
 if($51){label=13;break;}else{label=14;break;} //@line 4836 "./stb_image.h"
 case 13: 
 $1=0; //@line 4836 "./stb_image.h"
 label=21;break; //@line 4836 "./stb_image.h"
 case 14: 
 var $54=$2; //@line 4837 "./stb_image.h"
 var $55=_stbi__get8($54); //@line 4837 "./stb_image.h"
 var $56=($55&255); //@line 4837 "./stb_image.h"
 $sz=$56; //@line 4837 "./stb_image.h"
 var $57=$sz; //@line 4838 "./stb_image.h"
 var $58=($57|0)!=8; //@line 4838 "./stb_image.h"
 if($58){label=15;break;}else{label=19;break;} //@line 4838 "./stb_image.h"
 case 15: 
 var $60=$sz; //@line 4838 "./stb_image.h"
 var $61=($60|0)!=16; //@line 4838 "./stb_image.h"
 if($61){label=16;break;}else{label=19;break;} //@line 4838 "./stb_image.h"
 case 16: 
 var $63=$sz; //@line 4838 "./stb_image.h"
 var $64=($63|0)!=24; //@line 4838 "./stb_image.h"
 if($64){label=17;break;}else{label=19;break;} //@line 4838 "./stb_image.h"
 case 17: 
 var $66=$sz; //@line 4838 "./stb_image.h"
 var $67=($66|0)!=32; //@line 4838 "./stb_image.h"
 if($67){label=18;break;}else{label=19;break;} //@line 4838 "./stb_image.h"
 case 18: 
 $res=0; //@line 4839 "./stb_image.h"
 label=20;break; //@line 4839 "./stb_image.h"
 case 19: 
 $res=1; //@line 4841 "./stb_image.h"
 label=20;break;
 case 20: 
 var $71=$2; //@line 4842 "./stb_image.h"
 _stbi__rewind($71); //@line 4842 "./stb_image.h"
 var $72=$res; //@line 4843 "./stb_image.h"
 $1=$72; //@line 4843 "./stb_image.h"
 label=21;break; //@line 4843 "./stb_image.h"
 case 21: 
 var $74=$1; //@line 4844 "./stb_image.h"
 STACKTOP=sp;return $74; //@line 4844 "./stb_image.h"
  default: assert(0, "bad label: " + label);
 }

}


function _stbi__tga_load($s,$x,$y,$comp,$req_comp){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 var $tga_offset;
 var $tga_indexed;
 var $tga_image_type;
 var $tga_is_RLE;
 var $tga_palette_start;
 var $tga_palette_len;
 var $tga_palette_bits;
 var $tga_x_origin;
 var $tga_y_origin;
 var $tga_width;
 var $tga_height;
 var $tga_bits_per_pixel;
 var $tga_comp;
 var $tga_inverted;
 var $tga_data;
 var $tga_palette;
 var $i;
 var $j;
 var $raw_data=sp;
 var $RLE_count;
 var $RLE_repeating;
 var $read_next_pixel;
 var $y1;
 var $tga_row;
 var $RLE_cmd;
 var $pal_idx;
 var $index1;
 var $index2;
 var $temp;
 var $tga_pixel;
 var $temp2;
 $2=$s;
 $3=$x;
 $4=$y;
 $5=$comp;
 $6=$req_comp;
 var $7=$2; //@line 4849 "./stb_image.h"
 var $8=_stbi__get8($7); //@line 4849 "./stb_image.h"
 var $9=($8&255); //@line 4849 "./stb_image.h"
 $tga_offset=$9; //@line 4849 "./stb_image.h"
 var $10=$2; //@line 4850 "./stb_image.h"
 var $11=_stbi__get8($10); //@line 4850 "./stb_image.h"
 var $12=($11&255); //@line 4850 "./stb_image.h"
 $tga_indexed=$12; //@line 4850 "./stb_image.h"
 var $13=$2; //@line 4851 "./stb_image.h"
 var $14=_stbi__get8($13); //@line 4851 "./stb_image.h"
 var $15=($14&255); //@line 4851 "./stb_image.h"
 $tga_image_type=$15; //@line 4851 "./stb_image.h"
 $tga_is_RLE=0; //@line 4852 "./stb_image.h"
 var $16=$2; //@line 4853 "./stb_image.h"
 var $17=_stbi__get16le($16); //@line 4853 "./stb_image.h"
 $tga_palette_start=$17; //@line 4853 "./stb_image.h"
 var $18=$2; //@line 4854 "./stb_image.h"
 var $19=_stbi__get16le($18); //@line 4854 "./stb_image.h"
 $tga_palette_len=$19; //@line 4854 "./stb_image.h"
 var $20=$2; //@line 4855 "./stb_image.h"
 var $21=_stbi__get8($20); //@line 4855 "./stb_image.h"
 var $22=($21&255); //@line 4855 "./stb_image.h"
 $tga_palette_bits=$22; //@line 4855 "./stb_image.h"
 var $23=$2; //@line 4856 "./stb_image.h"
 var $24=_stbi__get16le($23); //@line 4856 "./stb_image.h"
 $tga_x_origin=$24; //@line 4856 "./stb_image.h"
 var $25=$2; //@line 4857 "./stb_image.h"
 var $26=_stbi__get16le($25); //@line 4857 "./stb_image.h"
 $tga_y_origin=$26; //@line 4857 "./stb_image.h"
 var $27=$2; //@line 4858 "./stb_image.h"
 var $28=_stbi__get16le($27); //@line 4858 "./stb_image.h"
 $tga_width=$28; //@line 4858 "./stb_image.h"
 var $29=$2; //@line 4859 "./stb_image.h"
 var $30=_stbi__get16le($29); //@line 4859 "./stb_image.h"
 $tga_height=$30; //@line 4859 "./stb_image.h"
 var $31=$2; //@line 4860 "./stb_image.h"
 var $32=_stbi__get8($31); //@line 4860 "./stb_image.h"
 var $33=($32&255); //@line 4860 "./stb_image.h"
 $tga_bits_per_pixel=$33; //@line 4860 "./stb_image.h"
 var $34=$tga_bits_per_pixel; //@line 4861 "./stb_image.h"
 var $35=(((($34|0))/(8))&-1); //@line 4861 "./stb_image.h"
 $tga_comp=$35; //@line 4861 "./stb_image.h"
 var $36=$2; //@line 4862 "./stb_image.h"
 var $37=_stbi__get8($36); //@line 4862 "./stb_image.h"
 var $38=($37&255); //@line 4862 "./stb_image.h"
 $tga_inverted=$38; //@line 4862 "./stb_image.h"
 $tga_palette=0; //@line 4865 "./stb_image.h"
 $RLE_count=0; //@line 4868 "./stb_image.h"
 $RLE_repeating=0; //@line 4869 "./stb_image.h"
 $read_next_pixel=1; //@line 4870 "./stb_image.h"
 var $39=$tga_image_type; //@line 4873 "./stb_image.h"
 var $40=($39|0)>=8; //@line 4873 "./stb_image.h"
 if($40){label=2;break;}else{label=3;break;} //@line 4873 "./stb_image.h"
 case 2: 
 var $42=$tga_image_type; //@line 4875 "./stb_image.h"
 var $43=((($42)-(8))|0); //@line 4875 "./stb_image.h"
 $tga_image_type=$43; //@line 4875 "./stb_image.h"
 $tga_is_RLE=1; //@line 4876 "./stb_image.h"
 label=3;break; //@line 4877 "./stb_image.h"
 case 3: 
 var $45=$tga_inverted; //@line 4879 "./stb_image.h"
 var $46=$45>>5; //@line 4879 "./stb_image.h"
 var $47=$46&1; //@line 4879 "./stb_image.h"
 var $48=(((1)-($47))|0); //@line 4879 "./stb_image.h"
 $tga_inverted=$48; //@line 4879 "./stb_image.h"
 var $49=$tga_width; //@line 4882 "./stb_image.h"
 var $50=($49|0)<1; //@line 4882 "./stb_image.h"
 if($50){label=11;break;}else{label=4;break;} //@line 4882 "./stb_image.h"
 case 4: 
 var $52=$tga_height; //@line 4882 "./stb_image.h"
 var $53=($52|0)<1; //@line 4882 "./stb_image.h"
 if($53){label=11;break;}else{label=5;break;} //@line 4882 "./stb_image.h"
 case 5: 
 var $55=$tga_image_type; //@line 4882 "./stb_image.h"
 var $56=($55|0)<1; //@line 4882 "./stb_image.h"
 if($56){label=11;break;}else{label=6;break;} //@line 4882 "./stb_image.h"
 case 6: 
 var $58=$tga_image_type; //@line 4882 "./stb_image.h"
 var $59=($58|0)>3; //@line 4882 "./stb_image.h"
 if($59){label=11;break;}else{label=7;break;} //@line 4882 "./stb_image.h"
 case 7: 
 var $61=$tga_bits_per_pixel; //@line 4882 "./stb_image.h"
 var $62=($61|0)!=8; //@line 4882 "./stb_image.h"
 if($62){label=8;break;}else{label=12;break;} //@line 4882 "./stb_image.h"
 case 8: 
 var $64=$tga_bits_per_pixel; //@line 4882 "./stb_image.h"
 var $65=($64|0)!=16; //@line 4882 "./stb_image.h"
 if($65){label=9;break;}else{label=12;break;} //@line 4882 "./stb_image.h"
 case 9: 
 var $67=$tga_bits_per_pixel; //@line 4882 "./stb_image.h"
 var $68=($67|0)!=24; //@line 4882 "./stb_image.h"
 if($68){label=10;break;}else{label=12;break;} //@line 4882 "./stb_image.h"
 case 10: 
 var $70=$tga_bits_per_pixel; //@line 4882 "./stb_image.h"
 var $71=($70|0)!=32; //@line 4882 "./stb_image.h"
 if($71){label=11;break;}else{label=12;break;} //@line 4882 "./stb_image.h"
 case 11: 
 $1=0; //@line 4889 "./stb_image.h"
 label=88;break; //@line 4889 "./stb_image.h"
 case 12: 
 var $74=$tga_indexed; //@line 4893 "./stb_image.h"
 var $75=($74|0)!=0; //@line 4893 "./stb_image.h"
 if($75){label=13;break;}else{label=14;break;} //@line 4893 "./stb_image.h"
 case 13: 
 var $77=$tga_palette_bits; //@line 4895 "./stb_image.h"
 var $78=(((($77|0))/(8))&-1); //@line 4895 "./stb_image.h"
 $tga_comp=$78; //@line 4895 "./stb_image.h"
 label=14;break; //@line 4896 "./stb_image.h"
 case 14: 
 var $80=$tga_width; //@line 4899 "./stb_image.h"
 var $81=$3; //@line 4899 "./stb_image.h"
 HEAP32[(($81)>>2)]=$80; //@line 4899 "./stb_image.h"
 var $82=$tga_height; //@line 4900 "./stb_image.h"
 var $83=$4; //@line 4900 "./stb_image.h"
 HEAP32[(($83)>>2)]=$82; //@line 4900 "./stb_image.h"
 var $84=$5; //@line 4901 "./stb_image.h"
 var $85=($84|0)!=0; //@line 4901 "./stb_image.h"
 if($85){label=15;break;}else{label=16;break;} //@line 4901 "./stb_image.h"
 case 15: 
 var $87=$tga_comp; //@line 4901 "./stb_image.h"
 var $88=$5; //@line 4901 "./stb_image.h"
 HEAP32[(($88)>>2)]=$87; //@line 4901 "./stb_image.h"
 label=16;break; //@line 4901 "./stb_image.h"
 case 16: 
 var $90=$tga_width; //@line 4903 "./stb_image.h"
 var $91=$tga_height; //@line 4903 "./stb_image.h"
 var $92=(Math_imul($90,$91)|0); //@line 4903 "./stb_image.h"
 var $93=$tga_comp; //@line 4903 "./stb_image.h"
 var $94=(Math_imul($92,$93)|0); //@line 4903 "./stb_image.h"
 var $95=_stbi__malloc($94); //@line 4903 "./stb_image.h"
 $tga_data=$95; //@line 4903 "./stb_image.h"
 var $96=$tga_data; //@line 4904 "./stb_image.h"
 var $97=($96|0)!=0; //@line 4904 "./stb_image.h"
 if($97){label=18;break;}else{label=17;break;} //@line 4904 "./stb_image.h"
 case 17: 
 var $99=_stbi__err(138952); //@line 4904 "./stb_image.h"
 var $100=($99|0)!=0; //@line 4904 "./stb_image.h"
 var $101=($100?0:0); //@line 4904 "./stb_image.h"
 var $102=$101; //@line 4904 "./stb_image.h"
 $1=$102; //@line 4904 "./stb_image.h"
 label=88;break; //@line 4904 "./stb_image.h"
 case 18: 
 var $104=$2; //@line 4907 "./stb_image.h"
 var $105=$tga_offset; //@line 4907 "./stb_image.h"
 _stbi__skip($104,$105); //@line 4907 "./stb_image.h"
 var $106=$tga_indexed; //@line 4909 "./stb_image.h"
 var $107=($106|0)!=0; //@line 4909 "./stb_image.h"
 if($107){label=28;break;}else{label=19;break;} //@line 4909 "./stb_image.h"
 case 19: 
 var $109=$tga_is_RLE; //@line 4909 "./stb_image.h"
 var $110=($109|0)!=0; //@line 4909 "./stb_image.h"
 if($110){label=28;break;}else{label=20;break;} //@line 4909 "./stb_image.h"
 case 20: 
 $i=0; //@line 4910 "./stb_image.h"
 label=21;break; //@line 4910 "./stb_image.h"
 case 21: 
 var $113=$i; //@line 4910 "./stb_image.h"
 var $114=$tga_height; //@line 4910 "./stb_image.h"
 var $115=($113|0)<($114|0); //@line 4910 "./stb_image.h"
 if($115){label=22;break;}else{label=27;break;} //@line 4910 "./stb_image.h"
 case 22: 
 var $117=$tga_inverted; //@line 4911 "./stb_image.h"
 var $118=($117|0)!=0; //@line 4911 "./stb_image.h"
 if($118){label=23;break;}else{label=24;break;} //@line 4911 "./stb_image.h"
 case 23: 
 var $120=$tga_height; //@line 4911 "./stb_image.h"
 var $121=$i; //@line 4911 "./stb_image.h"
 var $122=((($120)-($121))|0); //@line 4911 "./stb_image.h"
 var $123=((($122)-(1))|0); //@line 4911 "./stb_image.h"
 var $127=$123;label=25;break; //@line 4911 "./stb_image.h"
 case 24: 
 var $125=$i; //@line 4911 "./stb_image.h"
 var $127=$125;label=25;break; //@line 4911 "./stb_image.h"
 case 25: 
 var $127; //@line 4911 "./stb_image.h"
 $y1=$127; //@line 4911 "./stb_image.h"
 var $128=$tga_data; //@line 4912 "./stb_image.h"
 var $129=$y1; //@line 4912 "./stb_image.h"
 var $130=$tga_width; //@line 4912 "./stb_image.h"
 var $131=(Math_imul($129,$130)|0); //@line 4912 "./stb_image.h"
 var $132=$tga_comp; //@line 4912 "./stb_image.h"
 var $133=(Math_imul($131,$132)|0); //@line 4912 "./stb_image.h"
 var $134=(($128+$133)|0); //@line 4912 "./stb_image.h"
 $tga_row=$134; //@line 4912 "./stb_image.h"
 var $135=$2; //@line 4913 "./stb_image.h"
 var $136=$tga_row; //@line 4913 "./stb_image.h"
 var $137=$tga_width; //@line 4913 "./stb_image.h"
 var $138=$tga_comp; //@line 4913 "./stb_image.h"
 var $139=(Math_imul($137,$138)|0); //@line 4913 "./stb_image.h"
 var $140=_stbi__getn($135,$136,$139); //@line 4913 "./stb_image.h"
 label=26;break; //@line 4914 "./stb_image.h"
 case 26: 
 var $142=$i; //@line 4910 "./stb_image.h"
 var $143=((($142)+(1))|0); //@line 4910 "./stb_image.h"
 $i=$143; //@line 4910 "./stb_image.h"
 label=21;break; //@line 4910 "./stb_image.h"
 case 27: 
 label=78;break; //@line 4915 "./stb_image.h"
 case 28: 
 var $146=$tga_indexed; //@line 4917 "./stb_image.h"
 var $147=($146|0)!=0; //@line 4917 "./stb_image.h"
 if($147){label=29;break;}else{label=34;break;} //@line 4917 "./stb_image.h"
 case 29: 
 var $149=$2; //@line 4920 "./stb_image.h"
 var $150=$tga_palette_start; //@line 4920 "./stb_image.h"
 _stbi__skip($149,$150); //@line 4920 "./stb_image.h"
 var $151=$tga_palette_len; //@line 4922 "./stb_image.h"
 var $152=$tga_palette_bits; //@line 4922 "./stb_image.h"
 var $153=(Math_imul($151,$152)|0); //@line 4922 "./stb_image.h"
 var $154=(((($153|0))/(8))&-1); //@line 4922 "./stb_image.h"
 var $155=_stbi__malloc($154); //@line 4922 "./stb_image.h"
 $tga_palette=$155; //@line 4922 "./stb_image.h"
 var $156=$tga_palette; //@line 4923 "./stb_image.h"
 var $157=($156|0)!=0; //@line 4923 "./stb_image.h"
 if($157){label=31;break;}else{label=30;break;} //@line 4923 "./stb_image.h"
 case 30: 
 var $159=$tga_data; //@line 4924 "./stb_image.h"
 _free($159); //@line 4924 "./stb_image.h"
 var $160=_stbi__err(138952); //@line 4925 "./stb_image.h"
 var $161=($160|0)!=0; //@line 4925 "./stb_image.h"
 var $162=($161?0:0); //@line 4925 "./stb_image.h"
 var $163=$162; //@line 4925 "./stb_image.h"
 $1=$163; //@line 4925 "./stb_image.h"
 label=88;break; //@line 4925 "./stb_image.h"
 case 31: 
 var $165=$2; //@line 4927 "./stb_image.h"
 var $166=$tga_palette; //@line 4927 "./stb_image.h"
 var $167=$tga_palette_len; //@line 4927 "./stb_image.h"
 var $168=$tga_palette_bits; //@line 4927 "./stb_image.h"
 var $169=(Math_imul($167,$168)|0); //@line 4927 "./stb_image.h"
 var $170=(((($169|0))/(8))&-1); //@line 4927 "./stb_image.h"
 var $171=_stbi__getn($165,$166,$170); //@line 4927 "./stb_image.h"
 var $172=($171|0)!=0; //@line 4927 "./stb_image.h"
 if($172){label=33;break;}else{label=32;break;} //@line 4927 "./stb_image.h"
 case 32: 
 var $174=$tga_data; //@line 4928 "./stb_image.h"
 _free($174); //@line 4928 "./stb_image.h"
 var $175=$tga_palette; //@line 4929 "./stb_image.h"
 _free($175); //@line 4929 "./stb_image.h"
 var $176=_stbi__err(137680); //@line 4930 "./stb_image.h"
 var $177=($176|0)!=0; //@line 4930 "./stb_image.h"
 var $178=($177?0:0); //@line 4930 "./stb_image.h"
 var $179=$178; //@line 4930 "./stb_image.h"
 $1=$179; //@line 4930 "./stb_image.h"
 label=88;break; //@line 4930 "./stb_image.h"
 case 33: 
 label=34;break; //@line 4932 "./stb_image.h"
 case 34: 
 $i=0; //@line 4934 "./stb_image.h"
 label=35;break; //@line 4934 "./stb_image.h"
 case 35: 
 var $183=$i; //@line 4934 "./stb_image.h"
 var $184=$tga_width; //@line 4934 "./stb_image.h"
 var $185=$tga_height; //@line 4934 "./stb_image.h"
 var $186=(Math_imul($184,$185)|0); //@line 4934 "./stb_image.h"
 var $187=($183|0)<($186|0); //@line 4934 "./stb_image.h"
 if($187){label=36;break;}else{label=65;break;} //@line 4934 "./stb_image.h"
 case 36: 
 var $189=$tga_is_RLE; //@line 4937 "./stb_image.h"
 var $190=($189|0)!=0; //@line 4937 "./stb_image.h"
 if($190){label=37;break;}else{label=43;break;} //@line 4937 "./stb_image.h"
 case 37: 
 var $192=$RLE_count; //@line 4939 "./stb_image.h"
 var $193=($192|0)==0; //@line 4939 "./stb_image.h"
 if($193){label=38;break;}else{label=39;break;} //@line 4939 "./stb_image.h"
 case 38: 
 var $195=$2; //@line 4942 "./stb_image.h"
 var $196=_stbi__get8($195); //@line 4942 "./stb_image.h"
 var $197=($196&255); //@line 4942 "./stb_image.h"
 $RLE_cmd=$197; //@line 4942 "./stb_image.h"
 var $198=$RLE_cmd; //@line 4943 "./stb_image.h"
 var $199=$198&127; //@line 4943 "./stb_image.h"
 var $200=((($199)+(1))|0); //@line 4943 "./stb_image.h"
 $RLE_count=$200; //@line 4943 "./stb_image.h"
 var $201=$RLE_cmd; //@line 4944 "./stb_image.h"
 var $202=$201>>7; //@line 4944 "./stb_image.h"
 $RLE_repeating=$202; //@line 4944 "./stb_image.h"
 $read_next_pixel=1; //@line 4945 "./stb_image.h"
 label=42;break; //@line 4946 "./stb_image.h"
 case 39: 
 var $204=$RLE_repeating; //@line 4946 "./stb_image.h"
 var $205=($204|0)!=0; //@line 4946 "./stb_image.h"
 if($205){label=41;break;}else{label=40;break;} //@line 4946 "./stb_image.h"
 case 40: 
 $read_next_pixel=1; //@line 4948 "./stb_image.h"
 label=41;break; //@line 4949 "./stb_image.h"
 case 41: 
 label=42;break;
 case 42: 
 label=44;break; //@line 4950 "./stb_image.h"
 case 43: 
 $read_next_pixel=1; //@line 4952 "./stb_image.h"
 label=44;break;
 case 44: 
 var $211=$read_next_pixel; //@line 4955 "./stb_image.h"
 var $212=($211|0)!=0; //@line 4955 "./stb_image.h"
 if($212){label=45;break;}else{label=59;break;} //@line 4955 "./stb_image.h"
 case 45: 
 var $214=$tga_indexed; //@line 4958 "./stb_image.h"
 var $215=($214|0)!=0; //@line 4958 "./stb_image.h"
 if($215){label=46;break;}else{label=53;break;} //@line 4958 "./stb_image.h"
 case 46: 
 var $217=$2; //@line 4961 "./stb_image.h"
 var $218=_stbi__get8($217); //@line 4961 "./stb_image.h"
 var $219=($218&255); //@line 4961 "./stb_image.h"
 $pal_idx=$219; //@line 4961 "./stb_image.h"
 var $220=$pal_idx; //@line 4962 "./stb_image.h"
 var $221=$tga_palette_len; //@line 4962 "./stb_image.h"
 var $222=($220|0)>=($221|0); //@line 4962 "./stb_image.h"
 if($222){label=47;break;}else{label=48;break;} //@line 4962 "./stb_image.h"
 case 47: 
 $pal_idx=0; //@line 4965 "./stb_image.h"
 label=48;break; //@line 4966 "./stb_image.h"
 case 48: 
 var $225=$tga_bits_per_pixel; //@line 4967 "./stb_image.h"
 var $226=(((($225|0))/(8))&-1); //@line 4967 "./stb_image.h"
 var $227=$pal_idx; //@line 4967 "./stb_image.h"
 var $228=(Math_imul($227,$226)|0); //@line 4967 "./stb_image.h"
 $pal_idx=$228; //@line 4967 "./stb_image.h"
 $j=0; //@line 4968 "./stb_image.h"
 label=49;break; //@line 4968 "./stb_image.h"
 case 49: 
 var $230=$j; //@line 4968 "./stb_image.h"
 var $231=($230<<3); //@line 4968 "./stb_image.h"
 var $232=$tga_bits_per_pixel; //@line 4968 "./stb_image.h"
 var $233=($231|0)<($232|0); //@line 4968 "./stb_image.h"
 if($233){label=50;break;}else{label=52;break;} //@line 4968 "./stb_image.h"
 case 50: 
 var $235=$pal_idx; //@line 4970 "./stb_image.h"
 var $236=$j; //@line 4970 "./stb_image.h"
 var $237=((($235)+($236))|0); //@line 4970 "./stb_image.h"
 var $238=$tga_palette; //@line 4970 "./stb_image.h"
 var $239=(($238+$237)|0); //@line 4970 "./stb_image.h"
 var $240=HEAP8[($239)]; //@line 4970 "./stb_image.h"
 var $241=$j; //@line 4970 "./stb_image.h"
 var $242=(($raw_data+$241)|0); //@line 4970 "./stb_image.h"
 HEAP8[($242)]=$240; //@line 4970 "./stb_image.h"
 label=51;break; //@line 4971 "./stb_image.h"
 case 51: 
 var $244=$j; //@line 4968 "./stb_image.h"
 var $245=((($244)+(1))|0); //@line 4968 "./stb_image.h"
 $j=$245; //@line 4968 "./stb_image.h"
 label=49;break; //@line 4968 "./stb_image.h"
 case 52: 
 label=58;break; //@line 4972 "./stb_image.h"
 case 53: 
 $j=0; //@line 4975 "./stb_image.h"
 label=54;break; //@line 4975 "./stb_image.h"
 case 54: 
 var $249=$j; //@line 4975 "./stb_image.h"
 var $250=($249<<3); //@line 4975 "./stb_image.h"
 var $251=$tga_bits_per_pixel; //@line 4975 "./stb_image.h"
 var $252=($250|0)<($251|0); //@line 4975 "./stb_image.h"
 if($252){label=55;break;}else{label=57;break;} //@line 4975 "./stb_image.h"
 case 55: 
 var $254=$2; //@line 4977 "./stb_image.h"
 var $255=_stbi__get8($254); //@line 4977 "./stb_image.h"
 var $256=$j; //@line 4977 "./stb_image.h"
 var $257=(($raw_data+$256)|0); //@line 4977 "./stb_image.h"
 HEAP8[($257)]=$255; //@line 4977 "./stb_image.h"
 label=56;break; //@line 4978 "./stb_image.h"
 case 56: 
 var $259=$j; //@line 4975 "./stb_image.h"
 var $260=((($259)+(1))|0); //@line 4975 "./stb_image.h"
 $j=$260; //@line 4975 "./stb_image.h"
 label=54;break; //@line 4975 "./stb_image.h"
 case 57: 
 label=58;break;
 case 58: 
 $read_next_pixel=0; //@line 4981 "./stb_image.h"
 label=59;break; //@line 4982 "./stb_image.h"
 case 59: 
 $j=0; //@line 4985 "./stb_image.h"
 label=60;break; //@line 4985 "./stb_image.h"
 case 60: 
 var $265=$j; //@line 4985 "./stb_image.h"
 var $266=$tga_comp; //@line 4985 "./stb_image.h"
 var $267=($265|0)<($266|0); //@line 4985 "./stb_image.h"
 if($267){label=61;break;}else{label=63;break;} //@line 4985 "./stb_image.h"
 case 61: 
 var $269=$j; //@line 4986 "./stb_image.h"
 var $270=(($raw_data+$269)|0); //@line 4986 "./stb_image.h"
 var $271=HEAP8[($270)]; //@line 4986 "./stb_image.h"
 var $272=$i; //@line 4986 "./stb_image.h"
 var $273=$tga_comp; //@line 4986 "./stb_image.h"
 var $274=(Math_imul($272,$273)|0); //@line 4986 "./stb_image.h"
 var $275=$j; //@line 4986 "./stb_image.h"
 var $276=((($274)+($275))|0); //@line 4986 "./stb_image.h"
 var $277=$tga_data; //@line 4986 "./stb_image.h"
 var $278=(($277+$276)|0); //@line 4986 "./stb_image.h"
 HEAP8[($278)]=$271; //@line 4986 "./stb_image.h"
 label=62;break; //@line 4986 "./stb_image.h"
 case 62: 
 var $280=$j; //@line 4985 "./stb_image.h"
 var $281=((($280)+(1))|0); //@line 4985 "./stb_image.h"
 $j=$281; //@line 4985 "./stb_image.h"
 label=60;break; //@line 4985 "./stb_image.h"
 case 63: 
 var $283=$RLE_count; //@line 4989 "./stb_image.h"
 var $284=((($283)-(1))|0); //@line 4989 "./stb_image.h"
 $RLE_count=$284; //@line 4989 "./stb_image.h"
 label=64;break; //@line 4990 "./stb_image.h"
 case 64: 
 var $286=$i; //@line 4934 "./stb_image.h"
 var $287=((($286)+(1))|0); //@line 4934 "./stb_image.h"
 $i=$287; //@line 4934 "./stb_image.h"
 label=35;break; //@line 4934 "./stb_image.h"
 case 65: 
 var $289=$tga_inverted; //@line 4992 "./stb_image.h"
 var $290=($289|0)!=0; //@line 4992 "./stb_image.h"
 if($290){label=66;break;}else{label=75;break;} //@line 4992 "./stb_image.h"
 case 66: 
 $j=0; //@line 4994 "./stb_image.h"
 label=67;break; //@line 4994 "./stb_image.h"
 case 67: 
 var $293=$j; //@line 4994 "./stb_image.h"
 var $294=($293<<1); //@line 4994 "./stb_image.h"
 var $295=$tga_height; //@line 4994 "./stb_image.h"
 var $296=($294|0)<($295|0); //@line 4994 "./stb_image.h"
 if($296){label=68;break;}else{label=74;break;} //@line 4994 "./stb_image.h"
 case 68: 
 var $298=$j; //@line 4996 "./stb_image.h"
 var $299=$tga_width; //@line 4996 "./stb_image.h"
 var $300=(Math_imul($298,$299)|0); //@line 4996 "./stb_image.h"
 var $301=$tga_comp; //@line 4996 "./stb_image.h"
 var $302=(Math_imul($300,$301)|0); //@line 4996 "./stb_image.h"
 $index1=$302; //@line 4996 "./stb_image.h"
 var $303=$tga_height; //@line 4997 "./stb_image.h"
 var $304=((($303)-(1))|0); //@line 4997 "./stb_image.h"
 var $305=$j; //@line 4997 "./stb_image.h"
 var $306=((($304)-($305))|0); //@line 4997 "./stb_image.h"
 var $307=$tga_width; //@line 4997 "./stb_image.h"
 var $308=(Math_imul($306,$307)|0); //@line 4997 "./stb_image.h"
 var $309=$tga_comp; //@line 4997 "./stb_image.h"
 var $310=(Math_imul($308,$309)|0); //@line 4997 "./stb_image.h"
 $index2=$310; //@line 4997 "./stb_image.h"
 var $311=$tga_width; //@line 4998 "./stb_image.h"
 var $312=$tga_comp; //@line 4998 "./stb_image.h"
 var $313=(Math_imul($311,$312)|0); //@line 4998 "./stb_image.h"
 $i=$313; //@line 4998 "./stb_image.h"
 label=69;break; //@line 4998 "./stb_image.h"
 case 69: 
 var $315=$i; //@line 4998 "./stb_image.h"
 var $316=($315|0)>0; //@line 4998 "./stb_image.h"
 if($316){label=70;break;}else{label=72;break;} //@line 4998 "./stb_image.h"
 case 70: 
 var $318=$index1; //@line 5000 "./stb_image.h"
 var $319=$tga_data; //@line 5000 "./stb_image.h"
 var $320=(($319+$318)|0); //@line 5000 "./stb_image.h"
 var $321=HEAP8[($320)]; //@line 5000 "./stb_image.h"
 $temp=$321; //@line 5000 "./stb_image.h"
 var $322=$index2; //@line 5001 "./stb_image.h"
 var $323=$tga_data; //@line 5001 "./stb_image.h"
 var $324=(($323+$322)|0); //@line 5001 "./stb_image.h"
 var $325=HEAP8[($324)]; //@line 5001 "./stb_image.h"
 var $326=$index1; //@line 5001 "./stb_image.h"
 var $327=$tga_data; //@line 5001 "./stb_image.h"
 var $328=(($327+$326)|0); //@line 5001 "./stb_image.h"
 HEAP8[($328)]=$325; //@line 5001 "./stb_image.h"
 var $329=$temp; //@line 5002 "./stb_image.h"
 var $330=$index2; //@line 5002 "./stb_image.h"
 var $331=$tga_data; //@line 5002 "./stb_image.h"
 var $332=(($331+$330)|0); //@line 5002 "./stb_image.h"
 HEAP8[($332)]=$329; //@line 5002 "./stb_image.h"
 var $333=$index1; //@line 5003 "./stb_image.h"
 var $334=((($333)+(1))|0); //@line 5003 "./stb_image.h"
 $index1=$334; //@line 5003 "./stb_image.h"
 var $335=$index2; //@line 5004 "./stb_image.h"
 var $336=((($335)+(1))|0); //@line 5004 "./stb_image.h"
 $index2=$336; //@line 5004 "./stb_image.h"
 label=71;break; //@line 5005 "./stb_image.h"
 case 71: 
 var $338=$i; //@line 4998 "./stb_image.h"
 var $339=((($338)-(1))|0); //@line 4998 "./stb_image.h"
 $i=$339; //@line 4998 "./stb_image.h"
 label=69;break; //@line 4998 "./stb_image.h"
 case 72: 
 label=73;break; //@line 5006 "./stb_image.h"
 case 73: 
 var $342=$j; //@line 4994 "./stb_image.h"
 var $343=((($342)+(1))|0); //@line 4994 "./stb_image.h"
 $j=$343; //@line 4994 "./stb_image.h"
 label=67;break; //@line 4994 "./stb_image.h"
 case 74: 
 label=75;break; //@line 5007 "./stb_image.h"
 case 75: 
 var $346=$tga_palette; //@line 5009 "./stb_image.h"
 var $347=($346|0)!=0; //@line 5009 "./stb_image.h"
 if($347){label=76;break;}else{label=77;break;} //@line 5009 "./stb_image.h"
 case 76: 
 var $349=$tga_palette; //@line 5011 "./stb_image.h"
 _free($349); //@line 5011 "./stb_image.h"
 label=77;break; //@line 5012 "./stb_image.h"
 case 77: 
 label=78;break;
 case 78: 
 var $352=$tga_comp; //@line 5016 "./stb_image.h"
 var $353=($352|0)>=3; //@line 5016 "./stb_image.h"
 if($353){label=79;break;}else{label=84;break;} //@line 5016 "./stb_image.h"
 case 79: 
 var $355=$tga_data; //@line 5018 "./stb_image.h"
 $tga_pixel=$355; //@line 5018 "./stb_image.h"
 $i=0; //@line 5019 "./stb_image.h"
 label=80;break; //@line 5019 "./stb_image.h"
 case 80: 
 var $357=$i; //@line 5019 "./stb_image.h"
 var $358=$tga_width; //@line 5019 "./stb_image.h"
 var $359=$tga_height; //@line 5019 "./stb_image.h"
 var $360=(Math_imul($358,$359)|0); //@line 5019 "./stb_image.h"
 var $361=($357|0)<($360|0); //@line 5019 "./stb_image.h"
 if($361){label=81;break;}else{label=83;break;} //@line 5019 "./stb_image.h"
 case 81: 
 var $363=$tga_pixel; //@line 5021 "./stb_image.h"
 var $364=(($363)|0); //@line 5021 "./stb_image.h"
 var $365=HEAP8[($364)]; //@line 5021 "./stb_image.h"
 $temp2=$365; //@line 5021 "./stb_image.h"
 var $366=$tga_pixel; //@line 5022 "./stb_image.h"
 var $367=(($366+2)|0); //@line 5022 "./stb_image.h"
 var $368=HEAP8[($367)]; //@line 5022 "./stb_image.h"
 var $369=$tga_pixel; //@line 5022 "./stb_image.h"
 var $370=(($369)|0); //@line 5022 "./stb_image.h"
 HEAP8[($370)]=$368; //@line 5022 "./stb_image.h"
 var $371=$temp2; //@line 5023 "./stb_image.h"
 var $372=$tga_pixel; //@line 5023 "./stb_image.h"
 var $373=(($372+2)|0); //@line 5023 "./stb_image.h"
 HEAP8[($373)]=$371; //@line 5023 "./stb_image.h"
 var $374=$tga_comp; //@line 5024 "./stb_image.h"
 var $375=$tga_pixel; //@line 5024 "./stb_image.h"
 var $376=(($375+$374)|0); //@line 5024 "./stb_image.h"
 $tga_pixel=$376; //@line 5024 "./stb_image.h"
 label=82;break; //@line 5025 "./stb_image.h"
 case 82: 
 var $378=$i; //@line 5019 "./stb_image.h"
 var $379=((($378)+(1))|0); //@line 5019 "./stb_image.h"
 $i=$379; //@line 5019 "./stb_image.h"
 label=80;break; //@line 5019 "./stb_image.h"
 case 83: 
 label=84;break; //@line 5026 "./stb_image.h"
 case 84: 
 var $382=$6; //@line 5029 "./stb_image.h"
 var $383=($382|0)!=0; //@line 5029 "./stb_image.h"
 if($383){label=85;break;}else{label=87;break;} //@line 5029 "./stb_image.h"
 case 85: 
 var $385=$6; //@line 5029 "./stb_image.h"
 var $386=$tga_comp; //@line 5029 "./stb_image.h"
 var $387=($385|0)!=($386|0); //@line 5029 "./stb_image.h"
 if($387){label=86;break;}else{label=87;break;} //@line 5029 "./stb_image.h"
 case 86: 
 var $389=$tga_data; //@line 5030 "./stb_image.h"
 var $390=$tga_comp; //@line 5030 "./stb_image.h"
 var $391=$6; //@line 5030 "./stb_image.h"
 var $392=$tga_width; //@line 5030 "./stb_image.h"
 var $393=$tga_height; //@line 5030 "./stb_image.h"
 var $394=_stbi__convert_format($389,$390,$391,$392,$393); //@line 5030 "./stb_image.h"
 $tga_data=$394; //@line 5030 "./stb_image.h"
 label=87;break; //@line 5030 "./stb_image.h"
 case 87: 
 $tga_y_origin=0; //@line 5034 "./stb_image.h"
 $tga_x_origin=0; //@line 5034 "./stb_image.h"
 $tga_palette_bits=0; //@line 5034 "./stb_image.h"
 $tga_palette_len=0; //@line 5034 "./stb_image.h"
 $tga_palette_start=0; //@line 5034 "./stb_image.h"
 var $396=$tga_data; //@line 5037 "./stb_image.h"
 $1=$396; //@line 5037 "./stb_image.h"
 label=88;break; //@line 5037 "./stb_image.h"
 case 88: 
 var $398=$1; //@line 5038 "./stb_image.h"
 STACKTOP=sp;return $398; //@line 5038 "./stb_image.h"
  default: assert(0, "bad label: " + label);
 }

}


function _stbi__convert_format($data,$img_n,$req_comp,$x,$y){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 var $i;
 var $j;
 var $good;
 var $src;
 var $dest;
 $2=$data;
 $3=$img_n;
 $4=$req_comp;
 $5=$x;
 $6=$y;
 var $7=$4; //@line 1324 "./stb_image.h"
 var $8=$3; //@line 1324 "./stb_image.h"
 var $9=($7|0)==($8|0); //@line 1324 "./stb_image.h"
 if($9){label=2;break;}else{label=3;break;} //@line 1324 "./stb_image.h"
 case 2: 
 var $11=$2; //@line 1324 "./stb_image.h"
 $1=$11; //@line 1324 "./stb_image.h"
 label=75;break; //@line 1324 "./stb_image.h"
 case 3: 
 var $13=$4; //@line 1325 "./stb_image.h"
 var $14=($13|0)>=1; //@line 1325 "./stb_image.h"
 if($14){label=4;break;}else{label=5;break;} //@line 1325 "./stb_image.h"
 case 4: 
 var $16=$4; //@line 1325 "./stb_image.h"
 var $17=($16|0)<=4; //@line 1325 "./stb_image.h"
 if($17){var $21=1;label=6;break;}else{label=5;break;} //@line 1325 "./stb_image.h"
 case 5: 
 ___assert_fail(137648,138824,1325,140104); //@line 1325 "./stb_image.h"
 throw "Reached an unreachable!"; //@line 1325 "./stb_image.h"
 label=6;break; //@line 1325 "./stb_image.h"
 case 6: 
 var $21;
 var $22=($21&1); //@line 1325 "./stb_image.h"
 var $23=$4; //@line 1327 "./stb_image.h"
 var $24=$5; //@line 1327 "./stb_image.h"
 var $25=(Math_imul($23,$24)|0); //@line 1327 "./stb_image.h"
 var $26=$6; //@line 1327 "./stb_image.h"
 var $27=(Math_imul($25,$26)|0); //@line 1327 "./stb_image.h"
 var $28=_stbi__malloc($27); //@line 1327 "./stb_image.h"
 $good=$28; //@line 1327 "./stb_image.h"
 var $29=$good; //@line 1328 "./stb_image.h"
 var $30=($29|0)==0; //@line 1328 "./stb_image.h"
 if($30){label=7;break;}else{label=8;break;} //@line 1328 "./stb_image.h"
 case 7: 
 var $32=$2; //@line 1329 "./stb_image.h"
 _free($32); //@line 1329 "./stb_image.h"
 var $33=_stbi__err(138952); //@line 1330 "./stb_image.h"
 var $34=($33|0)!=0; //@line 1330 "./stb_image.h"
 var $35=($34?0:0); //@line 1330 "./stb_image.h"
 var $36=$35; //@line 1330 "./stb_image.h"
 $1=$36; //@line 1330 "./stb_image.h"
 label=75;break; //@line 1330 "./stb_image.h"
 case 8: 
 $j=0; //@line 1333 "./stb_image.h"
 label=9;break; //@line 1333 "./stb_image.h"
 case 9: 
 var $39=$j; //@line 1333 "./stb_image.h"
 var $40=$6; //@line 1333 "./stb_image.h"
 var $41=($39|0)<($40|0); //@line 1333 "./stb_image.h"
 if($41){label=10;break;}else{label=74;break;} //@line 1333 "./stb_image.h"
 case 10: 
 var $43=$2; //@line 1334 "./stb_image.h"
 var $44=$j; //@line 1334 "./stb_image.h"
 var $45=$5; //@line 1334 "./stb_image.h"
 var $46=(Math_imul($44,$45)|0); //@line 1334 "./stb_image.h"
 var $47=$3; //@line 1334 "./stb_image.h"
 var $48=(Math_imul($46,$47)|0); //@line 1334 "./stb_image.h"
 var $49=(($43+$48)|0); //@line 1334 "./stb_image.h"
 $src=$49; //@line 1334 "./stb_image.h"
 var $50=$good; //@line 1335 "./stb_image.h"
 var $51=$j; //@line 1335 "./stb_image.h"
 var $52=$5; //@line 1335 "./stb_image.h"
 var $53=(Math_imul($51,$52)|0); //@line 1335 "./stb_image.h"
 var $54=$4; //@line 1335 "./stb_image.h"
 var $55=(Math_imul($53,$54)|0); //@line 1335 "./stb_image.h"
 var $56=(($50+$55)|0); //@line 1335 "./stb_image.h"
 $dest=$56; //@line 1335 "./stb_image.h"
 var $57=$3; //@line 1341 "./stb_image.h"
 var $58=($57<<3); //@line 1341 "./stb_image.h"
 var $59=$4; //@line 1341 "./stb_image.h"
 var $60=((($58)+($59))|0); //@line 1341 "./stb_image.h"
 switch(($60|0)){case 10:{ label=11;break;}case 11:{ label=16;break;}case 12:{ label=21;break;}case 17:{ label=26;break;}case 19:{ label=31;break;}case 20:{ label=36;break;}case 28:{ label=41;break;}case 25:{ label=46;break;}case 26:{ label=51;break;}case 33:{ label=56;break;}case 34:{ label=61;break;}case 35:{ label=66;break;}default:{label=71;break;}}break;
 case 11: 
 var $62=$5; //@line 1342 "./stb_image.h"
 var $63=((($62)-(1))|0); //@line 1342 "./stb_image.h"
 $i=$63; //@line 1342 "./stb_image.h"
 label=12;break; //@line 1342 "./stb_image.h"
 case 12: 
 var $65=$i; //@line 1342 "./stb_image.h"
 var $66=($65|0)>=0; //@line 1342 "./stb_image.h"
 if($66){label=13;break;}else{label=15;break;} //@line 1342 "./stb_image.h"
 case 13: 
 var $68=$src; //@line 1342 "./stb_image.h"
 var $69=(($68)|0); //@line 1342 "./stb_image.h"
 var $70=HEAP8[($69)]; //@line 1342 "./stb_image.h"
 var $71=$dest; //@line 1342 "./stb_image.h"
 var $72=(($71)|0); //@line 1342 "./stb_image.h"
 HEAP8[($72)]=$70; //@line 1342 "./stb_image.h"
 var $73=$dest; //@line 1342 "./stb_image.h"
 var $74=(($73+1)|0); //@line 1342 "./stb_image.h"
 HEAP8[($74)]=-1; //@line 1342 "./stb_image.h"
 label=14;break; //@line 1342 "./stb_image.h"
 case 14: 
 var $76=$i; //@line 1342 "./stb_image.h"
 var $77=((($76)-(1))|0); //@line 1342 "./stb_image.h"
 $i=$77; //@line 1342 "./stb_image.h"
 var $78=$src; //@line 1342 "./stb_image.h"
 var $79=(($78+1)|0); //@line 1342 "./stb_image.h"
 $src=$79; //@line 1342 "./stb_image.h"
 var $80=$dest; //@line 1342 "./stb_image.h"
 var $81=(($80+2)|0); //@line 1342 "./stb_image.h"
 $dest=$81; //@line 1342 "./stb_image.h"
 label=12;break; //@line 1342 "./stb_image.h"
 case 15: 
 label=72;break; //@line 1342 "./stb_image.h"
 case 16: 
 var $84=$5; //@line 1343 "./stb_image.h"
 var $85=((($84)-(1))|0); //@line 1343 "./stb_image.h"
 $i=$85; //@line 1343 "./stb_image.h"
 label=17;break; //@line 1343 "./stb_image.h"
 case 17: 
 var $87=$i; //@line 1343 "./stb_image.h"
 var $88=($87|0)>=0; //@line 1343 "./stb_image.h"
 if($88){label=18;break;}else{label=20;break;} //@line 1343 "./stb_image.h"
 case 18: 
 var $90=$src; //@line 1343 "./stb_image.h"
 var $91=(($90)|0); //@line 1343 "./stb_image.h"
 var $92=HEAP8[($91)]; //@line 1343 "./stb_image.h"
 var $93=$dest; //@line 1343 "./stb_image.h"
 var $94=(($93+2)|0); //@line 1343 "./stb_image.h"
 HEAP8[($94)]=$92; //@line 1343 "./stb_image.h"
 var $95=$dest; //@line 1343 "./stb_image.h"
 var $96=(($95+1)|0); //@line 1343 "./stb_image.h"
 HEAP8[($96)]=$92; //@line 1343 "./stb_image.h"
 var $97=$dest; //@line 1343 "./stb_image.h"
 var $98=(($97)|0); //@line 1343 "./stb_image.h"
 HEAP8[($98)]=$92; //@line 1343 "./stb_image.h"
 label=19;break; //@line 1343 "./stb_image.h"
 case 19: 
 var $100=$i; //@line 1343 "./stb_image.h"
 var $101=((($100)-(1))|0); //@line 1343 "./stb_image.h"
 $i=$101; //@line 1343 "./stb_image.h"
 var $102=$src; //@line 1343 "./stb_image.h"
 var $103=(($102+1)|0); //@line 1343 "./stb_image.h"
 $src=$103; //@line 1343 "./stb_image.h"
 var $104=$dest; //@line 1343 "./stb_image.h"
 var $105=(($104+3)|0); //@line 1343 "./stb_image.h"
 $dest=$105; //@line 1343 "./stb_image.h"
 label=17;break; //@line 1343 "./stb_image.h"
 case 20: 
 label=72;break; //@line 1343 "./stb_image.h"
 case 21: 
 var $108=$5; //@line 1344 "./stb_image.h"
 var $109=((($108)-(1))|0); //@line 1344 "./stb_image.h"
 $i=$109; //@line 1344 "./stb_image.h"
 label=22;break; //@line 1344 "./stb_image.h"
 case 22: 
 var $111=$i; //@line 1344 "./stb_image.h"
 var $112=($111|0)>=0; //@line 1344 "./stb_image.h"
 if($112){label=23;break;}else{label=25;break;} //@line 1344 "./stb_image.h"
 case 23: 
 var $114=$src; //@line 1344 "./stb_image.h"
 var $115=(($114)|0); //@line 1344 "./stb_image.h"
 var $116=HEAP8[($115)]; //@line 1344 "./stb_image.h"
 var $117=$dest; //@line 1344 "./stb_image.h"
 var $118=(($117+2)|0); //@line 1344 "./stb_image.h"
 HEAP8[($118)]=$116; //@line 1344 "./stb_image.h"
 var $119=$dest; //@line 1344 "./stb_image.h"
 var $120=(($119+1)|0); //@line 1344 "./stb_image.h"
 HEAP8[($120)]=$116; //@line 1344 "./stb_image.h"
 var $121=$dest; //@line 1344 "./stb_image.h"
 var $122=(($121)|0); //@line 1344 "./stb_image.h"
 HEAP8[($122)]=$116; //@line 1344 "./stb_image.h"
 var $123=$dest; //@line 1344 "./stb_image.h"
 var $124=(($123+3)|0); //@line 1344 "./stb_image.h"
 HEAP8[($124)]=-1; //@line 1344 "./stb_image.h"
 label=24;break; //@line 1344 "./stb_image.h"
 case 24: 
 var $126=$i; //@line 1344 "./stb_image.h"
 var $127=((($126)-(1))|0); //@line 1344 "./stb_image.h"
 $i=$127; //@line 1344 "./stb_image.h"
 var $128=$src; //@line 1344 "./stb_image.h"
 var $129=(($128+1)|0); //@line 1344 "./stb_image.h"
 $src=$129; //@line 1344 "./stb_image.h"
 var $130=$dest; //@line 1344 "./stb_image.h"
 var $131=(($130+4)|0); //@line 1344 "./stb_image.h"
 $dest=$131; //@line 1344 "./stb_image.h"
 label=22;break; //@line 1344 "./stb_image.h"
 case 25: 
 label=72;break; //@line 1344 "./stb_image.h"
 case 26: 
 var $134=$5; //@line 1345 "./stb_image.h"
 var $135=((($134)-(1))|0); //@line 1345 "./stb_image.h"
 $i=$135; //@line 1345 "./stb_image.h"
 label=27;break; //@line 1345 "./stb_image.h"
 case 27: 
 var $137=$i; //@line 1345 "./stb_image.h"
 var $138=($137|0)>=0; //@line 1345 "./stb_image.h"
 if($138){label=28;break;}else{label=30;break;} //@line 1345 "./stb_image.h"
 case 28: 
 var $140=$src; //@line 1345 "./stb_image.h"
 var $141=(($140)|0); //@line 1345 "./stb_image.h"
 var $142=HEAP8[($141)]; //@line 1345 "./stb_image.h"
 var $143=$dest; //@line 1345 "./stb_image.h"
 var $144=(($143)|0); //@line 1345 "./stb_image.h"
 HEAP8[($144)]=$142; //@line 1345 "./stb_image.h"
 label=29;break; //@line 1345 "./stb_image.h"
 case 29: 
 var $146=$i; //@line 1345 "./stb_image.h"
 var $147=((($146)-(1))|0); //@line 1345 "./stb_image.h"
 $i=$147; //@line 1345 "./stb_image.h"
 var $148=$src; //@line 1345 "./stb_image.h"
 var $149=(($148+2)|0); //@line 1345 "./stb_image.h"
 $src=$149; //@line 1345 "./stb_image.h"
 var $150=$dest; //@line 1345 "./stb_image.h"
 var $151=(($150+1)|0); //@line 1345 "./stb_image.h"
 $dest=$151; //@line 1345 "./stb_image.h"
 label=27;break; //@line 1345 "./stb_image.h"
 case 30: 
 label=72;break; //@line 1345 "./stb_image.h"
 case 31: 
 var $154=$5; //@line 1346 "./stb_image.h"
 var $155=((($154)-(1))|0); //@line 1346 "./stb_image.h"
 $i=$155; //@line 1346 "./stb_image.h"
 label=32;break; //@line 1346 "./stb_image.h"
 case 32: 
 var $157=$i; //@line 1346 "./stb_image.h"
 var $158=($157|0)>=0; //@line 1346 "./stb_image.h"
 if($158){label=33;break;}else{label=35;break;} //@line 1346 "./stb_image.h"
 case 33: 
 var $160=$src; //@line 1346 "./stb_image.h"
 var $161=(($160)|0); //@line 1346 "./stb_image.h"
 var $162=HEAP8[($161)]; //@line 1346 "./stb_image.h"
 var $163=$dest; //@line 1346 "./stb_image.h"
 var $164=(($163+2)|0); //@line 1346 "./stb_image.h"
 HEAP8[($164)]=$162; //@line 1346 "./stb_image.h"
 var $165=$dest; //@line 1346 "./stb_image.h"
 var $166=(($165+1)|0); //@line 1346 "./stb_image.h"
 HEAP8[($166)]=$162; //@line 1346 "./stb_image.h"
 var $167=$dest; //@line 1346 "./stb_image.h"
 var $168=(($167)|0); //@line 1346 "./stb_image.h"
 HEAP8[($168)]=$162; //@line 1346 "./stb_image.h"
 label=34;break; //@line 1346 "./stb_image.h"
 case 34: 
 var $170=$i; //@line 1346 "./stb_image.h"
 var $171=((($170)-(1))|0); //@line 1346 "./stb_image.h"
 $i=$171; //@line 1346 "./stb_image.h"
 var $172=$src; //@line 1346 "./stb_image.h"
 var $173=(($172+2)|0); //@line 1346 "./stb_image.h"
 $src=$173; //@line 1346 "./stb_image.h"
 var $174=$dest; //@line 1346 "./stb_image.h"
 var $175=(($174+3)|0); //@line 1346 "./stb_image.h"
 $dest=$175; //@line 1346 "./stb_image.h"
 label=32;break; //@line 1346 "./stb_image.h"
 case 35: 
 label=72;break; //@line 1346 "./stb_image.h"
 case 36: 
 var $178=$5; //@line 1347 "./stb_image.h"
 var $179=((($178)-(1))|0); //@line 1347 "./stb_image.h"
 $i=$179; //@line 1347 "./stb_image.h"
 label=37;break; //@line 1347 "./stb_image.h"
 case 37: 
 var $181=$i; //@line 1347 "./stb_image.h"
 var $182=($181|0)>=0; //@line 1347 "./stb_image.h"
 if($182){label=38;break;}else{label=40;break;} //@line 1347 "./stb_image.h"
 case 38: 
 var $184=$src; //@line 1347 "./stb_image.h"
 var $185=(($184)|0); //@line 1347 "./stb_image.h"
 var $186=HEAP8[($185)]; //@line 1347 "./stb_image.h"
 var $187=$dest; //@line 1347 "./stb_image.h"
 var $188=(($187+2)|0); //@line 1347 "./stb_image.h"
 HEAP8[($188)]=$186; //@line 1347 "./stb_image.h"
 var $189=$dest; //@line 1347 "./stb_image.h"
 var $190=(($189+1)|0); //@line 1347 "./stb_image.h"
 HEAP8[($190)]=$186; //@line 1347 "./stb_image.h"
 var $191=$dest; //@line 1347 "./stb_image.h"
 var $192=(($191)|0); //@line 1347 "./stb_image.h"
 HEAP8[($192)]=$186; //@line 1347 "./stb_image.h"
 var $193=$src; //@line 1347 "./stb_image.h"
 var $194=(($193+1)|0); //@line 1347 "./stb_image.h"
 var $195=HEAP8[($194)]; //@line 1347 "./stb_image.h"
 var $196=$dest; //@line 1347 "./stb_image.h"
 var $197=(($196+3)|0); //@line 1347 "./stb_image.h"
 HEAP8[($197)]=$195; //@line 1347 "./stb_image.h"
 label=39;break; //@line 1347 "./stb_image.h"
 case 39: 
 var $199=$i; //@line 1347 "./stb_image.h"
 var $200=((($199)-(1))|0); //@line 1347 "./stb_image.h"
 $i=$200; //@line 1347 "./stb_image.h"
 var $201=$src; //@line 1347 "./stb_image.h"
 var $202=(($201+2)|0); //@line 1347 "./stb_image.h"
 $src=$202; //@line 1347 "./stb_image.h"
 var $203=$dest; //@line 1347 "./stb_image.h"
 var $204=(($203+4)|0); //@line 1347 "./stb_image.h"
 $dest=$204; //@line 1347 "./stb_image.h"
 label=37;break; //@line 1347 "./stb_image.h"
 case 40: 
 label=72;break; //@line 1347 "./stb_image.h"
 case 41: 
 var $207=$5; //@line 1348 "./stb_image.h"
 var $208=((($207)-(1))|0); //@line 1348 "./stb_image.h"
 $i=$208; //@line 1348 "./stb_image.h"
 label=42;break; //@line 1348 "./stb_image.h"
 case 42: 
 var $210=$i; //@line 1348 "./stb_image.h"
 var $211=($210|0)>=0; //@line 1348 "./stb_image.h"
 if($211){label=43;break;}else{label=45;break;} //@line 1348 "./stb_image.h"
 case 43: 
 var $213=$src; //@line 1348 "./stb_image.h"
 var $214=(($213)|0); //@line 1348 "./stb_image.h"
 var $215=HEAP8[($214)]; //@line 1348 "./stb_image.h"
 var $216=$dest; //@line 1348 "./stb_image.h"
 var $217=(($216)|0); //@line 1348 "./stb_image.h"
 HEAP8[($217)]=$215; //@line 1348 "./stb_image.h"
 var $218=$src; //@line 1348 "./stb_image.h"
 var $219=(($218+1)|0); //@line 1348 "./stb_image.h"
 var $220=HEAP8[($219)]; //@line 1348 "./stb_image.h"
 var $221=$dest; //@line 1348 "./stb_image.h"
 var $222=(($221+1)|0); //@line 1348 "./stb_image.h"
 HEAP8[($222)]=$220; //@line 1348 "./stb_image.h"
 var $223=$src; //@line 1348 "./stb_image.h"
 var $224=(($223+2)|0); //@line 1348 "./stb_image.h"
 var $225=HEAP8[($224)]; //@line 1348 "./stb_image.h"
 var $226=$dest; //@line 1348 "./stb_image.h"
 var $227=(($226+2)|0); //@line 1348 "./stb_image.h"
 HEAP8[($227)]=$225; //@line 1348 "./stb_image.h"
 var $228=$dest; //@line 1348 "./stb_image.h"
 var $229=(($228+3)|0); //@line 1348 "./stb_image.h"
 HEAP8[($229)]=-1; //@line 1348 "./stb_image.h"
 label=44;break; //@line 1348 "./stb_image.h"
 case 44: 
 var $231=$i; //@line 1348 "./stb_image.h"
 var $232=((($231)-(1))|0); //@line 1348 "./stb_image.h"
 $i=$232; //@line 1348 "./stb_image.h"
 var $233=$src; //@line 1348 "./stb_image.h"
 var $234=(($233+3)|0); //@line 1348 "./stb_image.h"
 $src=$234; //@line 1348 "./stb_image.h"
 var $235=$dest; //@line 1348 "./stb_image.h"
 var $236=(($235+4)|0); //@line 1348 "./stb_image.h"
 $dest=$236; //@line 1348 "./stb_image.h"
 label=42;break; //@line 1348 "./stb_image.h"
 case 45: 
 label=72;break; //@line 1348 "./stb_image.h"
 case 46: 
 var $239=$5; //@line 1349 "./stb_image.h"
 var $240=((($239)-(1))|0); //@line 1349 "./stb_image.h"
 $i=$240; //@line 1349 "./stb_image.h"
 label=47;break; //@line 1349 "./stb_image.h"
 case 47: 
 var $242=$i; //@line 1349 "./stb_image.h"
 var $243=($242|0)>=0; //@line 1349 "./stb_image.h"
 if($243){label=48;break;}else{label=50;break;} //@line 1349 "./stb_image.h"
 case 48: 
 var $245=$src; //@line 1349 "./stb_image.h"
 var $246=(($245)|0); //@line 1349 "./stb_image.h"
 var $247=HEAP8[($246)]; //@line 1349 "./stb_image.h"
 var $248=($247&255); //@line 1349 "./stb_image.h"
 var $249=$src; //@line 1349 "./stb_image.h"
 var $250=(($249+1)|0); //@line 1349 "./stb_image.h"
 var $251=HEAP8[($250)]; //@line 1349 "./stb_image.h"
 var $252=($251&255); //@line 1349 "./stb_image.h"
 var $253=$src; //@line 1349 "./stb_image.h"
 var $254=(($253+2)|0); //@line 1349 "./stb_image.h"
 var $255=HEAP8[($254)]; //@line 1349 "./stb_image.h"
 var $256=($255&255); //@line 1349 "./stb_image.h"
 var $257=_stbi__compute_y($248,$252,$256); //@line 1349 "./stb_image.h"
 var $258=$dest; //@line 1349 "./stb_image.h"
 var $259=(($258)|0); //@line 1349 "./stb_image.h"
 HEAP8[($259)]=$257; //@line 1349 "./stb_image.h"
 label=49;break; //@line 1349 "./stb_image.h"
 case 49: 
 var $261=$i; //@line 1349 "./stb_image.h"
 var $262=((($261)-(1))|0); //@line 1349 "./stb_image.h"
 $i=$262; //@line 1349 "./stb_image.h"
 var $263=$src; //@line 1349 "./stb_image.h"
 var $264=(($263+3)|0); //@line 1349 "./stb_image.h"
 $src=$264; //@line 1349 "./stb_image.h"
 var $265=$dest; //@line 1349 "./stb_image.h"
 var $266=(($265+1)|0); //@line 1349 "./stb_image.h"
 $dest=$266; //@line 1349 "./stb_image.h"
 label=47;break; //@line 1349 "./stb_image.h"
 case 50: 
 label=72;break; //@line 1349 "./stb_image.h"
 case 51: 
 var $269=$5; //@line 1350 "./stb_image.h"
 var $270=((($269)-(1))|0); //@line 1350 "./stb_image.h"
 $i=$270; //@line 1350 "./stb_image.h"
 label=52;break; //@line 1350 "./stb_image.h"
 case 52: 
 var $272=$i; //@line 1350 "./stb_image.h"
 var $273=($272|0)>=0; //@line 1350 "./stb_image.h"
 if($273){label=53;break;}else{label=55;break;} //@line 1350 "./stb_image.h"
 case 53: 
 var $275=$src; //@line 1350 "./stb_image.h"
 var $276=(($275)|0); //@line 1350 "./stb_image.h"
 var $277=HEAP8[($276)]; //@line 1350 "./stb_image.h"
 var $278=($277&255); //@line 1350 "./stb_image.h"
 var $279=$src; //@line 1350 "./stb_image.h"
 var $280=(($279+1)|0); //@line 1350 "./stb_image.h"
 var $281=HEAP8[($280)]; //@line 1350 "./stb_image.h"
 var $282=($281&255); //@line 1350 "./stb_image.h"
 var $283=$src; //@line 1350 "./stb_image.h"
 var $284=(($283+2)|0); //@line 1350 "./stb_image.h"
 var $285=HEAP8[($284)]; //@line 1350 "./stb_image.h"
 var $286=($285&255); //@line 1350 "./stb_image.h"
 var $287=_stbi__compute_y($278,$282,$286); //@line 1350 "./stb_image.h"
 var $288=$dest; //@line 1350 "./stb_image.h"
 var $289=(($288)|0); //@line 1350 "./stb_image.h"
 HEAP8[($289)]=$287; //@line 1350 "./stb_image.h"
 var $290=$dest; //@line 1350 "./stb_image.h"
 var $291=(($290+1)|0); //@line 1350 "./stb_image.h"
 HEAP8[($291)]=-1; //@line 1350 "./stb_image.h"
 label=54;break; //@line 1350 "./stb_image.h"
 case 54: 
 var $293=$i; //@line 1350 "./stb_image.h"
 var $294=((($293)-(1))|0); //@line 1350 "./stb_image.h"
 $i=$294; //@line 1350 "./stb_image.h"
 var $295=$src; //@line 1350 "./stb_image.h"
 var $296=(($295+3)|0); //@line 1350 "./stb_image.h"
 $src=$296; //@line 1350 "./stb_image.h"
 var $297=$dest; //@line 1350 "./stb_image.h"
 var $298=(($297+2)|0); //@line 1350 "./stb_image.h"
 $dest=$298; //@line 1350 "./stb_image.h"
 label=52;break; //@line 1350 "./stb_image.h"
 case 55: 
 label=72;break; //@line 1350 "./stb_image.h"
 case 56: 
 var $301=$5; //@line 1351 "./stb_image.h"
 var $302=((($301)-(1))|0); //@line 1351 "./stb_image.h"
 $i=$302; //@line 1351 "./stb_image.h"
 label=57;break; //@line 1351 "./stb_image.h"
 case 57: 
 var $304=$i; //@line 1351 "./stb_image.h"
 var $305=($304|0)>=0; //@line 1351 "./stb_image.h"
 if($305){label=58;break;}else{label=60;break;} //@line 1351 "./stb_image.h"
 case 58: 
 var $307=$src; //@line 1351 "./stb_image.h"
 var $308=(($307)|0); //@line 1351 "./stb_image.h"
 var $309=HEAP8[($308)]; //@line 1351 "./stb_image.h"
 var $310=($309&255); //@line 1351 "./stb_image.h"
 var $311=$src; //@line 1351 "./stb_image.h"
 var $312=(($311+1)|0); //@line 1351 "./stb_image.h"
 var $313=HEAP8[($312)]; //@line 1351 "./stb_image.h"
 var $314=($313&255); //@line 1351 "./stb_image.h"
 var $315=$src; //@line 1351 "./stb_image.h"
 var $316=(($315+2)|0); //@line 1351 "./stb_image.h"
 var $317=HEAP8[($316)]; //@line 1351 "./stb_image.h"
 var $318=($317&255); //@line 1351 "./stb_image.h"
 var $319=_stbi__compute_y($310,$314,$318); //@line 1351 "./stb_image.h"
 var $320=$dest; //@line 1351 "./stb_image.h"
 var $321=(($320)|0); //@line 1351 "./stb_image.h"
 HEAP8[($321)]=$319; //@line 1351 "./stb_image.h"
 label=59;break; //@line 1351 "./stb_image.h"
 case 59: 
 var $323=$i; //@line 1351 "./stb_image.h"
 var $324=((($323)-(1))|0); //@line 1351 "./stb_image.h"
 $i=$324; //@line 1351 "./stb_image.h"
 var $325=$src; //@line 1351 "./stb_image.h"
 var $326=(($325+4)|0); //@line 1351 "./stb_image.h"
 $src=$326; //@line 1351 "./stb_image.h"
 var $327=$dest; //@line 1351 "./stb_image.h"
 var $328=(($327+1)|0); //@line 1351 "./stb_image.h"
 $dest=$328; //@line 1351 "./stb_image.h"
 label=57;break; //@line 1351 "./stb_image.h"
 case 60: 
 label=72;break; //@line 1351 "./stb_image.h"
 case 61: 
 var $331=$5; //@line 1352 "./stb_image.h"
 var $332=((($331)-(1))|0); //@line 1352 "./stb_image.h"
 $i=$332; //@line 1352 "./stb_image.h"
 label=62;break; //@line 1352 "./stb_image.h"
 case 62: 
 var $334=$i; //@line 1352 "./stb_image.h"
 var $335=($334|0)>=0; //@line 1352 "./stb_image.h"
 if($335){label=63;break;}else{label=65;break;} //@line 1352 "./stb_image.h"
 case 63: 
 var $337=$src; //@line 1352 "./stb_image.h"
 var $338=(($337)|0); //@line 1352 "./stb_image.h"
 var $339=HEAP8[($338)]; //@line 1352 "./stb_image.h"
 var $340=($339&255); //@line 1352 "./stb_image.h"
 var $341=$src; //@line 1352 "./stb_image.h"
 var $342=(($341+1)|0); //@line 1352 "./stb_image.h"
 var $343=HEAP8[($342)]; //@line 1352 "./stb_image.h"
 var $344=($343&255); //@line 1352 "./stb_image.h"
 var $345=$src; //@line 1352 "./stb_image.h"
 var $346=(($345+2)|0); //@line 1352 "./stb_image.h"
 var $347=HEAP8[($346)]; //@line 1352 "./stb_image.h"
 var $348=($347&255); //@line 1352 "./stb_image.h"
 var $349=_stbi__compute_y($340,$344,$348); //@line 1352 "./stb_image.h"
 var $350=$dest; //@line 1352 "./stb_image.h"
 var $351=(($350)|0); //@line 1352 "./stb_image.h"
 HEAP8[($351)]=$349; //@line 1352 "./stb_image.h"
 var $352=$src; //@line 1352 "./stb_image.h"
 var $353=(($352+3)|0); //@line 1352 "./stb_image.h"
 var $354=HEAP8[($353)]; //@line 1352 "./stb_image.h"
 var $355=$dest; //@line 1352 "./stb_image.h"
 var $356=(($355+1)|0); //@line 1352 "./stb_image.h"
 HEAP8[($356)]=$354; //@line 1352 "./stb_image.h"
 label=64;break; //@line 1352 "./stb_image.h"
 case 64: 
 var $358=$i; //@line 1352 "./stb_image.h"
 var $359=((($358)-(1))|0); //@line 1352 "./stb_image.h"
 $i=$359; //@line 1352 "./stb_image.h"
 var $360=$src; //@line 1352 "./stb_image.h"
 var $361=(($360+4)|0); //@line 1352 "./stb_image.h"
 $src=$361; //@line 1352 "./stb_image.h"
 var $362=$dest; //@line 1352 "./stb_image.h"
 var $363=(($362+2)|0); //@line 1352 "./stb_image.h"
 $dest=$363; //@line 1352 "./stb_image.h"
 label=62;break; //@line 1352 "./stb_image.h"
 case 65: 
 label=72;break; //@line 1352 "./stb_image.h"
 case 66: 
 var $366=$5; //@line 1353 "./stb_image.h"
 var $367=((($366)-(1))|0); //@line 1353 "./stb_image.h"
 $i=$367; //@line 1353 "./stb_image.h"
 label=67;break; //@line 1353 "./stb_image.h"
 case 67: 
 var $369=$i; //@line 1353 "./stb_image.h"
 var $370=($369|0)>=0; //@line 1353 "./stb_image.h"
 if($370){label=68;break;}else{label=70;break;} //@line 1353 "./stb_image.h"
 case 68: 
 var $372=$src; //@line 1353 "./stb_image.h"
 var $373=(($372)|0); //@line 1353 "./stb_image.h"
 var $374=HEAP8[($373)]; //@line 1353 "./stb_image.h"
 var $375=$dest; //@line 1353 "./stb_image.h"
 var $376=(($375)|0); //@line 1353 "./stb_image.h"
 HEAP8[($376)]=$374; //@line 1353 "./stb_image.h"
 var $377=$src; //@line 1353 "./stb_image.h"
 var $378=(($377+1)|0); //@line 1353 "./stb_image.h"
 var $379=HEAP8[($378)]; //@line 1353 "./stb_image.h"
 var $380=$dest; //@line 1353 "./stb_image.h"
 var $381=(($380+1)|0); //@line 1353 "./stb_image.h"
 HEAP8[($381)]=$379; //@line 1353 "./stb_image.h"
 var $382=$src; //@line 1353 "./stb_image.h"
 var $383=(($382+2)|0); //@line 1353 "./stb_image.h"
 var $384=HEAP8[($383)]; //@line 1353 "./stb_image.h"
 var $385=$dest; //@line 1353 "./stb_image.h"
 var $386=(($385+2)|0); //@line 1353 "./stb_image.h"
 HEAP8[($386)]=$384; //@line 1353 "./stb_image.h"
 label=69;break; //@line 1353 "./stb_image.h"
 case 69: 
 var $388=$i; //@line 1353 "./stb_image.h"
 var $389=((($388)-(1))|0); //@line 1353 "./stb_image.h"
 $i=$389; //@line 1353 "./stb_image.h"
 var $390=$src; //@line 1353 "./stb_image.h"
 var $391=(($390+4)|0); //@line 1353 "./stb_image.h"
 $src=$391; //@line 1353 "./stb_image.h"
 var $392=$dest; //@line 1353 "./stb_image.h"
 var $393=(($392+3)|0); //@line 1353 "./stb_image.h"
 $dest=$393; //@line 1353 "./stb_image.h"
 label=67;break; //@line 1353 "./stb_image.h"
 case 70: 
 label=72;break; //@line 1353 "./stb_image.h"
 case 71: 
 ___assert_fail(137632,138824,1354,140104); //@line 1354 "./stb_image.h"
 throw "Reached an unreachable!"; //@line 1354 "./stb_image.h"
 case 72: 
 label=73;break; //@line 1357 "./stb_image.h"
 case 73: 
 var $398=$j; //@line 1333 "./stb_image.h"
 var $399=((($398)+(1))|0); //@line 1333 "./stb_image.h"
 $j=$399; //@line 1333 "./stb_image.h"
 label=9;break; //@line 1333 "./stb_image.h"
 case 74: 
 var $401=$2; //@line 1359 "./stb_image.h"
 _free($401); //@line 1359 "./stb_image.h"
 var $402=$good; //@line 1360 "./stb_image.h"
 $1=$402; //@line 1360 "./stb_image.h"
 label=75;break; //@line 1360 "./stb_image.h"
 case 75: 
 var $404=$1; //@line 1361 "./stb_image.h"
 STACKTOP=sp;return $404; //@line 1361 "./stb_image.h"
  default: assert(0, "bad label: " + label);
 }

}


function _stbi__compute_y($r,$g,$b){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 var $2;
 var $3;
 $1=$r;
 $2=$g;
 $3=$b;
 var $4=$1; //@line 1316 "./stb_image.h"
 var $5=((($4)*(77))&-1); //@line 1316 "./stb_image.h"
 var $6=$2; //@line 1316 "./stb_image.h"
 var $7=((($6)*(150))&-1); //@line 1316 "./stb_image.h"
 var $8=((($5)+($7))|0); //@line 1316 "./stb_image.h"
 var $9=$3; //@line 1316 "./stb_image.h"
 var $10=((($9)*(29))&-1); //@line 1316 "./stb_image.h"
 var $11=((($8)+($10))|0); //@line 1316 "./stb_image.h"
 var $12=$11>>8; //@line 1316 "./stb_image.h"
 var $13=(($12)&255); //@line 1316 "./stb_image.h"
 STACKTOP=sp;return $13; //@line 1316 "./stb_image.h"
}


function _stbi__pic_load_core($s,$width,$height,$comp,$result){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+48)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 var $act_comp;
 var $num_packets;
 var $y;
 var $chained;
 var $packets=sp;
 var $packet;
 var $packet_idx;
 var $packet1;
 var $dest;
 var $x;
 var $left;
 var $i;
 var $count;
 var $value=(sp)+(32);
 var $left2;
 var $count3;
 var $i4;
 var $value5=(sp)+(40);
 var $i6;
 $2=$s;
 $3=$width;
 $4=$height;
 $5=$comp;
 $6=$result;
 $act_comp=0; //@line 5277 "./stb_image.h"
 $num_packets=0; //@line 5277 "./stb_image.h"
 label=2;break; //@line 5282 "./stb_image.h"
 case 2: 
 var $8=$num_packets; //@line 5285 "./stb_image.h"
 var $9=($8|0)==10; //@line 5285 "./stb_image.h"
 if($9){label=3;break;}else{label=4;break;} //@line 5285 "./stb_image.h"
 case 3: 
 var $11=_stbi__err(137552); //@line 5286 "./stb_image.h"
 var $12=($11|0)!=0; //@line 5286 "./stb_image.h"
 var $13=($12?0:0); //@line 5286 "./stb_image.h"
 var $14=$13; //@line 5286 "./stb_image.h"
 $1=$14; //@line 5286 "./stb_image.h"
 label=70;break; //@line 5286 "./stb_image.h"
 case 4: 
 var $16=$num_packets; //@line 5288 "./stb_image.h"
 var $17=((($16)+(1))|0); //@line 5288 "./stb_image.h"
 $num_packets=$17; //@line 5288 "./stb_image.h"
 var $18=(($packets+((($16)*(3))&-1))|0); //@line 5288 "./stb_image.h"
 $packet=$18; //@line 5288 "./stb_image.h"
 var $19=$2; //@line 5290 "./stb_image.h"
 var $20=_stbi__get8($19); //@line 5290 "./stb_image.h"
 var $21=($20&255); //@line 5290 "./stb_image.h"
 $chained=$21; //@line 5290 "./stb_image.h"
 var $22=$2; //@line 5291 "./stb_image.h"
 var $23=_stbi__get8($22); //@line 5291 "./stb_image.h"
 var $24=$packet; //@line 5291 "./stb_image.h"
 var $25=(($24)|0); //@line 5291 "./stb_image.h"
 HEAP8[($25)]=$23; //@line 5291 "./stb_image.h"
 var $26=$2; //@line 5292 "./stb_image.h"
 var $27=_stbi__get8($26); //@line 5292 "./stb_image.h"
 var $28=$packet; //@line 5292 "./stb_image.h"
 var $29=(($28+1)|0); //@line 5292 "./stb_image.h"
 HEAP8[($29)]=$27; //@line 5292 "./stb_image.h"
 var $30=$2; //@line 5293 "./stb_image.h"
 var $31=_stbi__get8($30); //@line 5293 "./stb_image.h"
 var $32=$packet; //@line 5293 "./stb_image.h"
 var $33=(($32+2)|0); //@line 5293 "./stb_image.h"
 HEAP8[($33)]=$31; //@line 5293 "./stb_image.h"
 var $34=$packet; //@line 5295 "./stb_image.h"
 var $35=(($34+2)|0); //@line 5295 "./stb_image.h"
 var $36=HEAP8[($35)]; //@line 5295 "./stb_image.h"
 var $37=($36&255); //@line 5295 "./stb_image.h"
 var $38=$act_comp; //@line 5295 "./stb_image.h"
 var $39=$38|$37; //@line 5295 "./stb_image.h"
 $act_comp=$39; //@line 5295 "./stb_image.h"
 var $40=$2; //@line 5297 "./stb_image.h"
 var $41=_stbi__at_eof($40); //@line 5297 "./stb_image.h"
 var $42=($41|0)!=0; //@line 5297 "./stb_image.h"
 if($42){label=5;break;}else{label=6;break;} //@line 5297 "./stb_image.h"
 case 5: 
 var $44=_stbi__err(137616); //@line 5297 "./stb_image.h"
 var $45=($44|0)!=0; //@line 5297 "./stb_image.h"
 var $46=($45?0:0); //@line 5297 "./stb_image.h"
 var $47=$46; //@line 5297 "./stb_image.h"
 $1=$47; //@line 5297 "./stb_image.h"
 label=70;break; //@line 5297 "./stb_image.h"
 case 6: 
 var $49=$packet; //@line 5298 "./stb_image.h"
 var $50=(($49)|0); //@line 5298 "./stb_image.h"
 var $51=HEAP8[($50)]; //@line 5298 "./stb_image.h"
 var $52=($51&255); //@line 5298 "./stb_image.h"
 var $53=($52|0)!=8; //@line 5298 "./stb_image.h"
 if($53){label=7;break;}else{label=8;break;} //@line 5298 "./stb_image.h"
 case 7: 
 var $55=_stbi__err(137552); //@line 5298 "./stb_image.h"
 var $56=($55|0)!=0; //@line 5298 "./stb_image.h"
 var $57=($56?0:0); //@line 5298 "./stb_image.h"
 var $58=$57; //@line 5298 "./stb_image.h"
 $1=$58; //@line 5298 "./stb_image.h"
 label=70;break; //@line 5298 "./stb_image.h"
 case 8: 
 label=9;break; //@line 5299 "./stb_image.h"
 case 9: 
 var $61=$chained; //@line 5299 "./stb_image.h"
 var $62=($61|0)!=0; //@line 5299 "./stb_image.h"
 if($62){label=2;break;}else{label=10;break;} //@line 5299 "./stb_image.h"
 case 10: 
 var $64=$act_comp; //@line 5301 "./stb_image.h"
 var $65=$64&16; //@line 5301 "./stb_image.h"
 var $66=($65|0)!=0; //@line 5301 "./stb_image.h"
 var $67=($66?4:3); //@line 5301 "./stb_image.h"
 var $68=$5; //@line 5301 "./stb_image.h"
 HEAP32[(($68)>>2)]=$67; //@line 5301 "./stb_image.h"
 $y=0; //@line 5303 "./stb_image.h"
 label=11;break; //@line 5303 "./stb_image.h"
 case 11: 
 var $70=$y; //@line 5303 "./stb_image.h"
 var $71=$4; //@line 5303 "./stb_image.h"
 var $72=($70|0)<($71|0); //@line 5303 "./stb_image.h"
 if($72){label=12;break;}else{label=69;break;} //@line 5303 "./stb_image.h"
 case 12: 
 $packet_idx=0; //@line 5306 "./stb_image.h"
 label=13;break; //@line 5306 "./stb_image.h"
 case 13: 
 var $75=$packet_idx; //@line 5306 "./stb_image.h"
 var $76=$num_packets; //@line 5306 "./stb_image.h"
 var $77=($75|0)<($76|0); //@line 5306 "./stb_image.h"
 if($77){label=14;break;}else{label=67;break;} //@line 5306 "./stb_image.h"
 case 14: 
 var $79=$packet_idx; //@line 5307 "./stb_image.h"
 var $80=(($packets+((($79)*(3))&-1))|0); //@line 5307 "./stb_image.h"
 $packet1=$80; //@line 5307 "./stb_image.h"
 var $81=$6; //@line 5308 "./stb_image.h"
 var $82=$y; //@line 5308 "./stb_image.h"
 var $83=$3; //@line 5308 "./stb_image.h"
 var $84=(Math_imul($82,$83)|0); //@line 5308 "./stb_image.h"
 var $85=($84<<2); //@line 5308 "./stb_image.h"
 var $86=(($81+$85)|0); //@line 5308 "./stb_image.h"
 $dest=$86; //@line 5308 "./stb_image.h"
 var $87=$packet1; //@line 5310 "./stb_image.h"
 var $88=(($87+1)|0); //@line 5310 "./stb_image.h"
 var $89=HEAP8[($88)]; //@line 5310 "./stb_image.h"
 var $90=($89&255); //@line 5310 "./stb_image.h"
 if(($90|0)==0){ label=16;break;}else if(($90|0)==1){ label=23;break;}else if(($90|0)==2){ label=37;break;}else{label=15;break;}
 case 15: 
 var $92=_stbi__err(137552); //@line 5312 "./stb_image.h"
 var $93=($92|0)!=0; //@line 5312 "./stb_image.h"
 var $94=($93?0:0); //@line 5312 "./stb_image.h"
 var $95=$94; //@line 5312 "./stb_image.h"
 $1=$95; //@line 5312 "./stb_image.h"
 label=70;break; //@line 5312 "./stb_image.h"
 case 16: 
 $x=0; //@line 5317 "./stb_image.h"
 label=17;break; //@line 5317 "./stb_image.h"
 case 17: 
 var $98=$x; //@line 5317 "./stb_image.h"
 var $99=$3; //@line 5317 "./stb_image.h"
 var $100=($98|0)<($99|0); //@line 5317 "./stb_image.h"
 if($100){label=18;break;}else{label=22;break;} //@line 5317 "./stb_image.h"
 case 18: 
 var $102=$2; //@line 5318 "./stb_image.h"
 var $103=$packet1; //@line 5318 "./stb_image.h"
 var $104=(($103+2)|0); //@line 5318 "./stb_image.h"
 var $105=HEAP8[($104)]; //@line 5318 "./stb_image.h"
 var $106=($105&255); //@line 5318 "./stb_image.h"
 var $107=$dest; //@line 5318 "./stb_image.h"
 var $108=_stbi__readval($102,$106,$107); //@line 5318 "./stb_image.h"
 var $109=($108|0)!=0; //@line 5318 "./stb_image.h"
 if($109){label=20;break;}else{label=19;break;} //@line 5318 "./stb_image.h"
 case 19: 
 $1=0; //@line 5319 "./stb_image.h"
 label=70;break; //@line 5319 "./stb_image.h"
 case 20: 
 label=21;break; //@line 5319 "./stb_image.h"
 case 21: 
 var $113=$x; //@line 5317 "./stb_image.h"
 var $114=((($113)+(1))|0); //@line 5317 "./stb_image.h"
 $x=$114; //@line 5317 "./stb_image.h"
 var $115=$dest; //@line 5317 "./stb_image.h"
 var $116=(($115+4)|0); //@line 5317 "./stb_image.h"
 $dest=$116; //@line 5317 "./stb_image.h"
 label=17;break; //@line 5317 "./stb_image.h"
 case 22: 
 label=65;break; //@line 5320 "./stb_image.h"
 case 23: 
 var $119=$3; //@line 5325 "./stb_image.h"
 $left=$119; //@line 5325 "./stb_image.h"
 label=24;break; //@line 5327 "./stb_image.h"
 case 24: 
 var $121=$left; //@line 5327 "./stb_image.h"
 var $122=($121|0)>0; //@line 5327 "./stb_image.h"
 if($122){label=25;break;}else{label=36;break;} //@line 5327 "./stb_image.h"
 case 25: 
 var $124=$2; //@line 5330 "./stb_image.h"
 var $125=_stbi__get8($124); //@line 5330 "./stb_image.h"
 $count=$125; //@line 5330 "./stb_image.h"
 var $126=$2; //@line 5331 "./stb_image.h"
 var $127=_stbi__at_eof($126); //@line 5331 "./stb_image.h"
 var $128=($127|0)!=0; //@line 5331 "./stb_image.h"
 if($128){label=26;break;}else{label=27;break;} //@line 5331 "./stb_image.h"
 case 26: 
 var $130=_stbi__err(137616); //@line 5331 "./stb_image.h"
 var $131=($130|0)!=0; //@line 5331 "./stb_image.h"
 var $132=($131?0:0); //@line 5331 "./stb_image.h"
 var $133=$132; //@line 5331 "./stb_image.h"
 $1=$133; //@line 5331 "./stb_image.h"
 label=70;break; //@line 5331 "./stb_image.h"
 case 27: 
 var $135=$count; //@line 5333 "./stb_image.h"
 var $136=($135&255); //@line 5333 "./stb_image.h"
 var $137=$left; //@line 5333 "./stb_image.h"
 var $138=($136|0)>($137|0); //@line 5333 "./stb_image.h"
 if($138){label=28;break;}else{label=29;break;} //@line 5333 "./stb_image.h"
 case 28: 
 var $140=$left; //@line 5334 "./stb_image.h"
 var $141=(($140)&255); //@line 5334 "./stb_image.h"
 $count=$141; //@line 5334 "./stb_image.h"
 label=29;break; //@line 5334 "./stb_image.h"
 case 29: 
 var $143=$2; //@line 5336 "./stb_image.h"
 var $144=$packet1; //@line 5336 "./stb_image.h"
 var $145=(($144+2)|0); //@line 5336 "./stb_image.h"
 var $146=HEAP8[($145)]; //@line 5336 "./stb_image.h"
 var $147=($146&255); //@line 5336 "./stb_image.h"
 var $148=(($value)|0); //@line 5336 "./stb_image.h"
 var $149=_stbi__readval($143,$147,$148); //@line 5336 "./stb_image.h"
 var $150=($149|0)!=0; //@line 5336 "./stb_image.h"
 if($150){label=31;break;}else{label=30;break;} //@line 5336 "./stb_image.h"
 case 30: 
 $1=0; //@line 5336 "./stb_image.h"
 label=70;break; //@line 5336 "./stb_image.h"
 case 31: 
 $i=0; //@line 5338 "./stb_image.h"
 label=32;break; //@line 5338 "./stb_image.h"
 case 32: 
 var $154=$i; //@line 5338 "./stb_image.h"
 var $155=$count; //@line 5338 "./stb_image.h"
 var $156=($155&255); //@line 5338 "./stb_image.h"
 var $157=($154|0)<($156|0); //@line 5338 "./stb_image.h"
 if($157){label=33;break;}else{label=35;break;} //@line 5338 "./stb_image.h"
 case 33: 
 var $159=$packet1; //@line 5339 "./stb_image.h"
 var $160=(($159+2)|0); //@line 5339 "./stb_image.h"
 var $161=HEAP8[($160)]; //@line 5339 "./stb_image.h"
 var $162=($161&255); //@line 5339 "./stb_image.h"
 var $163=$dest; //@line 5339 "./stb_image.h"
 var $164=(($value)|0); //@line 5339 "./stb_image.h"
 _stbi__copyval($162,$163,$164); //@line 5339 "./stb_image.h"
 label=34;break; //@line 5339 "./stb_image.h"
 case 34: 
 var $166=$i; //@line 5338 "./stb_image.h"
 var $167=((($166)+(1))|0); //@line 5338 "./stb_image.h"
 $i=$167; //@line 5338 "./stb_image.h"
 var $168=$dest; //@line 5338 "./stb_image.h"
 var $169=(($168+4)|0); //@line 5338 "./stb_image.h"
 $dest=$169; //@line 5338 "./stb_image.h"
 label=32;break; //@line 5338 "./stb_image.h"
 case 35: 
 var $171=$count; //@line 5340 "./stb_image.h"
 var $172=($171&255); //@line 5340 "./stb_image.h"
 var $173=$left; //@line 5340 "./stb_image.h"
 var $174=((($173)-($172))|0); //@line 5340 "./stb_image.h"
 $left=$174; //@line 5340 "./stb_image.h"
 label=24;break; //@line 5341 "./stb_image.h"
 case 36: 
 label=65;break; //@line 5343 "./stb_image.h"
 case 37: 
 var $177=$3; //@line 5346 "./stb_image.h"
 $left2=$177; //@line 5346 "./stb_image.h"
 label=38;break; //@line 5347 "./stb_image.h"
 case 38: 
 var $179=$left2; //@line 5347 "./stb_image.h"
 var $180=($179|0)>0; //@line 5347 "./stb_image.h"
 if($180){label=39;break;}else{label=64;break;} //@line 5347 "./stb_image.h"
 case 39: 
 var $182=$2; //@line 5348 "./stb_image.h"
 var $183=_stbi__get8($182); //@line 5348 "./stb_image.h"
 var $184=($183&255); //@line 5348 "./stb_image.h"
 $count3=$184; //@line 5348 "./stb_image.h"
 var $185=$2; //@line 5349 "./stb_image.h"
 var $186=_stbi__at_eof($185); //@line 5349 "./stb_image.h"
 var $187=($186|0)!=0; //@line 5349 "./stb_image.h"
 if($187){label=40;break;}else{label=41;break;} //@line 5349 "./stb_image.h"
 case 40: 
 var $189=_stbi__err(137616); //@line 5349 "./stb_image.h"
 var $190=($189|0)!=0; //@line 5349 "./stb_image.h"
 var $191=($190?0:0); //@line 5349 "./stb_image.h"
 var $192=$191; //@line 5349 "./stb_image.h"
 $1=$192; //@line 5349 "./stb_image.h"
 label=70;break; //@line 5349 "./stb_image.h"
 case 41: 
 var $194=$count3; //@line 5351 "./stb_image.h"
 var $195=($194|0)>=128; //@line 5351 "./stb_image.h"
 if($195){label=42;break;}else{label=54;break;} //@line 5351 "./stb_image.h"
 case 42: 
 var $197=$count3; //@line 5355 "./stb_image.h"
 var $198=($197|0)==128; //@line 5355 "./stb_image.h"
 if($198){label=43;break;}else{label=44;break;} //@line 5355 "./stb_image.h"
 case 43: 
 var $200=$2; //@line 5356 "./stb_image.h"
 var $201=_stbi__get16be($200); //@line 5356 "./stb_image.h"
 $count3=$201; //@line 5356 "./stb_image.h"
 label=45;break; //@line 5356 "./stb_image.h"
 case 44: 
 var $203=$count3; //@line 5358 "./stb_image.h"
 var $204=((($203)-(127))|0); //@line 5358 "./stb_image.h"
 $count3=$204; //@line 5358 "./stb_image.h"
 label=45;break;
 case 45: 
 var $206=$count3; //@line 5359 "./stb_image.h"
 var $207=$left2; //@line 5359 "./stb_image.h"
 var $208=($206|0)>($207|0); //@line 5359 "./stb_image.h"
 if($208){label=46;break;}else{label=47;break;} //@line 5359 "./stb_image.h"
 case 46: 
 var $210=_stbi__err(137616); //@line 5360 "./stb_image.h"
 var $211=($210|0)!=0; //@line 5360 "./stb_image.h"
 var $212=($211?0:0); //@line 5360 "./stb_image.h"
 var $213=$212; //@line 5360 "./stb_image.h"
 $1=$213; //@line 5360 "./stb_image.h"
 label=70;break; //@line 5360 "./stb_image.h"
 case 47: 
 var $215=$2; //@line 5362 "./stb_image.h"
 var $216=$packet1; //@line 5362 "./stb_image.h"
 var $217=(($216+2)|0); //@line 5362 "./stb_image.h"
 var $218=HEAP8[($217)]; //@line 5362 "./stb_image.h"
 var $219=($218&255); //@line 5362 "./stb_image.h"
 var $220=(($value5)|0); //@line 5362 "./stb_image.h"
 var $221=_stbi__readval($215,$219,$220); //@line 5362 "./stb_image.h"
 var $222=($221|0)!=0; //@line 5362 "./stb_image.h"
 if($222){label=49;break;}else{label=48;break;} //@line 5362 "./stb_image.h"
 case 48: 
 $1=0; //@line 5363 "./stb_image.h"
 label=70;break; //@line 5363 "./stb_image.h"
 case 49: 
 $i6=0; //@line 5365 "./stb_image.h"
 label=50;break; //@line 5365 "./stb_image.h"
 case 50: 
 var $226=$i6; //@line 5365 "./stb_image.h"
 var $227=$count3; //@line 5365 "./stb_image.h"
 var $228=($226|0)<($227|0); //@line 5365 "./stb_image.h"
 if($228){label=51;break;}else{label=53;break;} //@line 5365 "./stb_image.h"
 case 51: 
 var $230=$packet1; //@line 5366 "./stb_image.h"
 var $231=(($230+2)|0); //@line 5366 "./stb_image.h"
 var $232=HEAP8[($231)]; //@line 5366 "./stb_image.h"
 var $233=($232&255); //@line 5366 "./stb_image.h"
 var $234=$dest; //@line 5366 "./stb_image.h"
 var $235=(($value5)|0); //@line 5366 "./stb_image.h"
 _stbi__copyval($233,$234,$235); //@line 5366 "./stb_image.h"
 label=52;break; //@line 5366 "./stb_image.h"
 case 52: 
 var $237=$i6; //@line 5365 "./stb_image.h"
 var $238=((($237)+(1))|0); //@line 5365 "./stb_image.h"
 $i6=$238; //@line 5365 "./stb_image.h"
 var $239=$dest; //@line 5365 "./stb_image.h"
 var $240=(($239+4)|0); //@line 5365 "./stb_image.h"
 $dest=$240; //@line 5365 "./stb_image.h"
 label=50;break; //@line 5365 "./stb_image.h"
 case 53: 
 label=63;break; //@line 5367 "./stb_image.h"
 case 54: 
 var $243=$count3; //@line 5368 "./stb_image.h"
 var $244=((($243)+(1))|0); //@line 5368 "./stb_image.h"
 $count3=$244; //@line 5368 "./stb_image.h"
 var $245=$count3; //@line 5369 "./stb_image.h"
 var $246=$left2; //@line 5369 "./stb_image.h"
 var $247=($245|0)>($246|0); //@line 5369 "./stb_image.h"
 if($247){label=55;break;}else{label=56;break;} //@line 5369 "./stb_image.h"
 case 55: 
 var $249=_stbi__err(137616); //@line 5369 "./stb_image.h"
 var $250=($249|0)!=0; //@line 5369 "./stb_image.h"
 var $251=($250?0:0); //@line 5369 "./stb_image.h"
 var $252=$251; //@line 5369 "./stb_image.h"
 $1=$252; //@line 5369 "./stb_image.h"
 label=70;break; //@line 5369 "./stb_image.h"
 case 56: 
 $i4=0; //@line 5371 "./stb_image.h"
 label=57;break; //@line 5371 "./stb_image.h"
 case 57: 
 var $255=$i4; //@line 5371 "./stb_image.h"
 var $256=$count3; //@line 5371 "./stb_image.h"
 var $257=($255|0)<($256|0); //@line 5371 "./stb_image.h"
 if($257){label=58;break;}else{label=62;break;} //@line 5371 "./stb_image.h"
 case 58: 
 var $259=$2; //@line 5372 "./stb_image.h"
 var $260=$packet1; //@line 5372 "./stb_image.h"
 var $261=(($260+2)|0); //@line 5372 "./stb_image.h"
 var $262=HEAP8[($261)]; //@line 5372 "./stb_image.h"
 var $263=($262&255); //@line 5372 "./stb_image.h"
 var $264=$dest; //@line 5372 "./stb_image.h"
 var $265=_stbi__readval($259,$263,$264); //@line 5372 "./stb_image.h"
 var $266=($265|0)!=0; //@line 5372 "./stb_image.h"
 if($266){label=60;break;}else{label=59;break;} //@line 5372 "./stb_image.h"
 case 59: 
 $1=0; //@line 5373 "./stb_image.h"
 label=70;break; //@line 5373 "./stb_image.h"
 case 60: 
 label=61;break; //@line 5373 "./stb_image.h"
 case 61: 
 var $270=$i4; //@line 5371 "./stb_image.h"
 var $271=((($270)+(1))|0); //@line 5371 "./stb_image.h"
 $i4=$271; //@line 5371 "./stb_image.h"
 var $272=$dest; //@line 5371 "./stb_image.h"
 var $273=(($272+4)|0); //@line 5371 "./stb_image.h"
 $dest=$273; //@line 5371 "./stb_image.h"
 label=57;break; //@line 5371 "./stb_image.h"
 case 62: 
 label=63;break;
 case 63: 
 var $276=$count3; //@line 5375 "./stb_image.h"
 var $277=$left2; //@line 5375 "./stb_image.h"
 var $278=((($277)-($276))|0); //@line 5375 "./stb_image.h"
 $left2=$278; //@line 5375 "./stb_image.h"
 label=38;break; //@line 5376 "./stb_image.h"
 case 64: 
 label=65;break; //@line 5377 "./stb_image.h"
 case 65: 
 label=66;break; //@line 5380 "./stb_image.h"
 case 66: 
 var $282=$packet_idx; //@line 5306 "./stb_image.h"
 var $283=((($282)+(1))|0); //@line 5306 "./stb_image.h"
 $packet_idx=$283; //@line 5306 "./stb_image.h"
 label=13;break; //@line 5306 "./stb_image.h"
 case 67: 
 label=68;break; //@line 5381 "./stb_image.h"
 case 68: 
 var $286=$y; //@line 5303 "./stb_image.h"
 var $287=((($286)+(1))|0); //@line 5303 "./stb_image.h"
 $y=$287; //@line 5303 "./stb_image.h"
 label=11;break; //@line 5303 "./stb_image.h"
 case 69: 
 var $289=$6; //@line 5383 "./stb_image.h"
 $1=$289; //@line 5383 "./stb_image.h"
 label=70;break; //@line 5383 "./stb_image.h"
 case 70: 
 var $291=$1; //@line 5384 "./stb_image.h"
 STACKTOP=sp;return $291; //@line 5384 "./stb_image.h"
  default: assert(0, "bad label: " + label);
 }

}


function _stbi__readval($s,$channel,$dest){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $mask;
 var $i;
 $2=$s;
 $3=$channel;
 $4=$dest;
 $mask=128; //@line 5254 "./stb_image.h"
 $i=0; //@line 5256 "./stb_image.h"
 label=2;break; //@line 5256 "./stb_image.h"
 case 2: 
 var $6=$i; //@line 5256 "./stb_image.h"
 var $7=($6|0)<4; //@line 5256 "./stb_image.h"
 if($7){label=3;break;}else{label=9;break;} //@line 5256 "./stb_image.h"
 case 3: 
 var $9=$3; //@line 5257 "./stb_image.h"
 var $10=$mask; //@line 5257 "./stb_image.h"
 var $11=$9&$10; //@line 5257 "./stb_image.h"
 var $12=($11|0)!=0; //@line 5257 "./stb_image.h"
 if($12){label=4;break;}else{label=7;break;} //@line 5257 "./stb_image.h"
 case 4: 
 var $14=$2; //@line 5258 "./stb_image.h"
 var $15=_stbi__at_eof($14); //@line 5258 "./stb_image.h"
 var $16=($15|0)!=0; //@line 5258 "./stb_image.h"
 if($16){label=5;break;}else{label=6;break;} //@line 5258 "./stb_image.h"
 case 5: 
 var $18=_stbi__err(137616); //@line 5258 "./stb_image.h"
 var $19=($18|0)!=0; //@line 5258 "./stb_image.h"
 var $20=($19?0:0); //@line 5258 "./stb_image.h"
 var $21=$20; //@line 5258 "./stb_image.h"
 $1=$21; //@line 5258 "./stb_image.h"
 label=10;break; //@line 5258 "./stb_image.h"
 case 6: 
 var $23=$2; //@line 5259 "./stb_image.h"
 var $24=_stbi__get8($23); //@line 5259 "./stb_image.h"
 var $25=$i; //@line 5259 "./stb_image.h"
 var $26=$4; //@line 5259 "./stb_image.h"
 var $27=(($26+$25)|0); //@line 5259 "./stb_image.h"
 HEAP8[($27)]=$24; //@line 5259 "./stb_image.h"
 label=7;break; //@line 5260 "./stb_image.h"
 case 7: 
 label=8;break; //@line 5261 "./stb_image.h"
 case 8: 
 var $30=$i; //@line 5256 "./stb_image.h"
 var $31=((($30)+(1))|0); //@line 5256 "./stb_image.h"
 $i=$31; //@line 5256 "./stb_image.h"
 var $32=$mask; //@line 5256 "./stb_image.h"
 var $33=$32>>1; //@line 5256 "./stb_image.h"
 $mask=$33; //@line 5256 "./stb_image.h"
 label=2;break; //@line 5256 "./stb_image.h"
 case 9: 
 var $35=$4; //@line 5263 "./stb_image.h"
 $1=$35; //@line 5263 "./stb_image.h"
 label=10;break; //@line 5263 "./stb_image.h"
 case 10: 
 var $37=$1; //@line 5264 "./stb_image.h"
 STACKTOP=sp;return $37; //@line 5264 "./stb_image.h"
  default: assert(0, "bad label: " + label);
 }

}


function _stbi__copyval($channel,$dest,$src){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $mask;
 var $i;
 $1=$channel;
 $2=$dest;
 $3=$src;
 $mask=128; //@line 5268 "./stb_image.h"
 $i=0; //@line 5270 "./stb_image.h"
 label=2;break; //@line 5270 "./stb_image.h"
 case 2: 
 var $5=$i; //@line 5270 "./stb_image.h"
 var $6=($5|0)<4; //@line 5270 "./stb_image.h"
 if($6){label=3;break;}else{label=7;break;} //@line 5270 "./stb_image.h"
 case 3: 
 var $8=$1; //@line 5271 "./stb_image.h"
 var $9=$mask; //@line 5271 "./stb_image.h"
 var $10=$8&$9; //@line 5271 "./stb_image.h"
 var $11=($10|0)!=0; //@line 5271 "./stb_image.h"
 if($11){label=4;break;}else{label=5;break;} //@line 5271 "./stb_image.h"
 case 4: 
 var $13=$i; //@line 5272 "./stb_image.h"
 var $14=$3; //@line 5272 "./stb_image.h"
 var $15=(($14+$13)|0); //@line 5272 "./stb_image.h"
 var $16=HEAP8[($15)]; //@line 5272 "./stb_image.h"
 var $17=$i; //@line 5272 "./stb_image.h"
 var $18=$2; //@line 5272 "./stb_image.h"
 var $19=(($18+$17)|0); //@line 5272 "./stb_image.h"
 HEAP8[($19)]=$16; //@line 5272 "./stb_image.h"
 label=5;break; //@line 5272 "./stb_image.h"
 case 5: 
 label=6;break; //@line 5272 "./stb_image.h"
 case 6: 
 var $22=$i; //@line 5270 "./stb_image.h"
 var $23=((($22)+(1))|0); //@line 5270 "./stb_image.h"
 $i=$23; //@line 5270 "./stb_image.h"
 var $24=$mask; //@line 5270 "./stb_image.h"
 var $25=$24>>1; //@line 5270 "./stb_image.h"
 $mask=$25; //@line 5270 "./stb_image.h"
 label=2;break; //@line 5270 "./stb_image.h"
 case 7: 
 STACKTOP=sp;return; //@line 5273 "./stb_image.h"
  default: assert(0, "bad label: " + label);
 }

}


function _stbi__pic_test_core($s){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $i;
 $2=$s;
 var $3=$2; //@line 5235 "./stb_image.h"
 var $4=_stbi__pic_is4($3,137544); //@line 5235 "./stb_image.h"
 var $5=($4|0)!=0; //@line 5235 "./stb_image.h"
 if($5){label=3;break;}else{label=2;break;} //@line 5235 "./stb_image.h"
 case 2: 
 $1=0; //@line 5236 "./stb_image.h"
 label=10;break; //@line 5236 "./stb_image.h"
 case 3: 
 $i=0; //@line 5238 "./stb_image.h"
 label=4;break; //@line 5238 "./stb_image.h"
 case 4: 
 var $9=$i; //@line 5238 "./stb_image.h"
 var $10=($9|0)<84; //@line 5238 "./stb_image.h"
 if($10){label=5;break;}else{label=7;break;} //@line 5238 "./stb_image.h"
 case 5: 
 var $12=$2; //@line 5239 "./stb_image.h"
 var $13=_stbi__get8($12); //@line 5239 "./stb_image.h"
 label=6;break; //@line 5239 "./stb_image.h"
 case 6: 
 var $15=$i; //@line 5238 "./stb_image.h"
 var $16=((($15)+(1))|0); //@line 5238 "./stb_image.h"
 $i=$16; //@line 5238 "./stb_image.h"
 label=4;break; //@line 5238 "./stb_image.h"
 case 7: 
 var $18=$2; //@line 5241 "./stb_image.h"
 var $19=_stbi__pic_is4($18,137520); //@line 5241 "./stb_image.h"
 var $20=($19|0)!=0; //@line 5241 "./stb_image.h"
 if($20){label=9;break;}else{label=8;break;} //@line 5241 "./stb_image.h"
 case 8: 
 $1=0; //@line 5242 "./stb_image.h"
 label=10;break; //@line 5242 "./stb_image.h"
 case 9: 
 $1=1; //@line 5244 "./stb_image.h"
 label=10;break; //@line 5244 "./stb_image.h"
 case 10: 
 var $24=$1; //@line 5244 "./stb_image.h"
 STACKTOP=sp;return $24; //@line 5244 "./stb_image.h"
  default: assert(0, "bad label: " + label);
 }

}


function _stbi__pic_is4($s,$str){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $i;
 $2=$s;
 $3=$str;
 $i=0; //@line 5224 "./stb_image.h"
 label=2;break; //@line 5224 "./stb_image.h"
 case 2: 
 var $5=$i; //@line 5224 "./stb_image.h"
 var $6=($5|0)<4; //@line 5224 "./stb_image.h"
 if($6){label=3;break;}else{label=7;break;} //@line 5224 "./stb_image.h"
 case 3: 
 var $8=$2; //@line 5225 "./stb_image.h"
 var $9=_stbi__get8($8); //@line 5225 "./stb_image.h"
 var $10=($9&255); //@line 5225 "./stb_image.h"
 var $11=$i; //@line 5225 "./stb_image.h"
 var $12=$3; //@line 5225 "./stb_image.h"
 var $13=(($12+$11)|0); //@line 5225 "./stb_image.h"
 var $14=HEAP8[($13)]; //@line 5225 "./stb_image.h"
 var $15=($14&255); //@line 5225 "./stb_image.h"
 var $16=($10|0)!=($15|0); //@line 5225 "./stb_image.h"
 if($16){label=4;break;}else{label=5;break;} //@line 5225 "./stb_image.h"
 case 4: 
 $1=0; //@line 5226 "./stb_image.h"
 label=8;break; //@line 5226 "./stb_image.h"
 case 5: 
 label=6;break; //@line 5226 "./stb_image.h"
 case 6: 
 var $20=$i; //@line 5224 "./stb_image.h"
 var $21=((($20)+(1))|0); //@line 5224 "./stb_image.h"
 $i=$21; //@line 5224 "./stb_image.h"
 label=2;break; //@line 5224 "./stb_image.h"
 case 7: 
 $1=1; //@line 5228 "./stb_image.h"
 label=8;break; //@line 5228 "./stb_image.h"
 case 8: 
 var $24=$1; //@line 5228 "./stb_image.h"
 STACKTOP=sp;return $24; //@line 5228 "./stb_image.h"
  default: assert(0, "bad label: " + label);
 }

}


function _stbi__gif_load_next($s,$g,$comp,$req_comp){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $i;
 var $old_out;
 var $x;
 var $y;
 var $w;
 var $h;
 var $o;
 var $len;
 $2=$s;
 $3=$g;
 $4=$comp;
 $5=$req_comp;
 $old_out=0; //@line 5655 "./stb_image.h"
 var $6=$3; //@line 5657 "./stb_image.h"
 var $7=(($6+8)|0); //@line 5657 "./stb_image.h"
 var $8=HEAP32[(($7)>>2)]; //@line 5657 "./stb_image.h"
 var $9=($8|0)==0; //@line 5657 "./stb_image.h"
 if($9){label=2;break;}else{label=7;break;} //@line 5657 "./stb_image.h"
 case 2: 
 var $11=$2; //@line 5658 "./stb_image.h"
 var $12=$3; //@line 5658 "./stb_image.h"
 var $13=$4; //@line 5658 "./stb_image.h"
 var $14=_stbi__gif_header($11,$12,$13,0); //@line 5658 "./stb_image.h"
 var $15=($14|0)!=0; //@line 5658 "./stb_image.h"
 if($15){label=4;break;}else{label=3;break;} //@line 5658 "./stb_image.h"
 case 3: 
 $1=0; //@line 5658 "./stb_image.h"
 label=54;break; //@line 5658 "./stb_image.h"
 case 4: 
 var $18=$3; //@line 5659 "./stb_image.h"
 var $19=(($18)|0); //@line 5659 "./stb_image.h"
 var $20=HEAP32[(($19)>>2)]; //@line 5659 "./stb_image.h"
 var $21=($20<<2); //@line 5659 "./stb_image.h"
 var $22=$3; //@line 5659 "./stb_image.h"
 var $23=(($22+4)|0); //@line 5659 "./stb_image.h"
 var $24=HEAP32[(($23)>>2)]; //@line 5659 "./stb_image.h"
 var $25=(Math_imul($21,$24)|0); //@line 5659 "./stb_image.h"
 var $26=_stbi__malloc($25); //@line 5659 "./stb_image.h"
 var $27=$3; //@line 5659 "./stb_image.h"
 var $28=(($27+8)|0); //@line 5659 "./stb_image.h"
 HEAP32[(($28)>>2)]=$26; //@line 5659 "./stb_image.h"
 var $29=$3; //@line 5660 "./stb_image.h"
 var $30=(($29+8)|0); //@line 5660 "./stb_image.h"
 var $31=HEAP32[(($30)>>2)]; //@line 5660 "./stb_image.h"
 var $32=($31|0)==0; //@line 5660 "./stb_image.h"
 if($32){label=5;break;}else{label=6;break;} //@line 5660 "./stb_image.h"
 case 5: 
 var $34=_stbi__err(138952); //@line 5660 "./stb_image.h"
 var $35=($34|0)!=0; //@line 5660 "./stb_image.h"
 var $36=($35?0:0); //@line 5660 "./stb_image.h"
 var $37=$36; //@line 5660 "./stb_image.h"
 $1=$37; //@line 5660 "./stb_image.h"
 label=54;break; //@line 5660 "./stb_image.h"
 case 6: 
 var $39=$3; //@line 5661 "./stb_image.h"
 _stbi__fill_gif_background($39); //@line 5661 "./stb_image.h"
 label=12;break; //@line 5662 "./stb_image.h"
 case 7: 
 var $41=$3; //@line 5664 "./stb_image.h"
 var $42=(($41+28)|0); //@line 5664 "./stb_image.h"
 var $43=HEAP32[(($42)>>2)]; //@line 5664 "./stb_image.h"
 var $44=$43&28; //@line 5664 "./stb_image.h"
 var $45=$44>>2; //@line 5664 "./stb_image.h"
 var $46=($45|0)==3; //@line 5664 "./stb_image.h"
 if($46){label=8;break;}else{label=11;break;} //@line 5664 "./stb_image.h"
 case 8: 
 var $48=$3; //@line 5665 "./stb_image.h"
 var $49=(($48+8)|0); //@line 5665 "./stb_image.h"
 var $50=HEAP32[(($49)>>2)]; //@line 5665 "./stb_image.h"
 $old_out=$50; //@line 5665 "./stb_image.h"
 var $51=$3; //@line 5666 "./stb_image.h"
 var $52=(($51)|0); //@line 5666 "./stb_image.h"
 var $53=HEAP32[(($52)>>2)]; //@line 5666 "./stb_image.h"
 var $54=($53<<2); //@line 5666 "./stb_image.h"
 var $55=$3; //@line 5666 "./stb_image.h"
 var $56=(($55+4)|0); //@line 5666 "./stb_image.h"
 var $57=HEAP32[(($56)>>2)]; //@line 5666 "./stb_image.h"
 var $58=(Math_imul($54,$57)|0); //@line 5666 "./stb_image.h"
 var $59=_stbi__malloc($58); //@line 5666 "./stb_image.h"
 var $60=$3; //@line 5666 "./stb_image.h"
 var $61=(($60+8)|0); //@line 5666 "./stb_image.h"
 HEAP32[(($61)>>2)]=$59; //@line 5666 "./stb_image.h"
 var $62=$3; //@line 5667 "./stb_image.h"
 var $63=(($62+8)|0); //@line 5667 "./stb_image.h"
 var $64=HEAP32[(($63)>>2)]; //@line 5667 "./stb_image.h"
 var $65=($64|0)==0; //@line 5667 "./stb_image.h"
 if($65){label=9;break;}else{label=10;break;} //@line 5667 "./stb_image.h"
 case 9: 
 var $67=_stbi__err(138952); //@line 5667 "./stb_image.h"
 var $68=($67|0)!=0; //@line 5667 "./stb_image.h"
 var $69=($68?0:0); //@line 5667 "./stb_image.h"
 var $70=$69; //@line 5667 "./stb_image.h"
 $1=$70; //@line 5667 "./stb_image.h"
 label=54;break; //@line 5667 "./stb_image.h"
 case 10: 
 var $72=$3; //@line 5668 "./stb_image.h"
 var $73=(($72+8)|0); //@line 5668 "./stb_image.h"
 var $74=HEAP32[(($73)>>2)]; //@line 5668 "./stb_image.h"
 var $75=$old_out; //@line 5668 "./stb_image.h"
 var $76=$3; //@line 5668 "./stb_image.h"
 var $77=(($76)|0); //@line 5668 "./stb_image.h"
 var $78=HEAP32[(($77)>>2)]; //@line 5668 "./stb_image.h"
 var $79=$3; //@line 5668 "./stb_image.h"
 var $80=(($79+4)|0); //@line 5668 "./stb_image.h"
 var $81=HEAP32[(($80)>>2)]; //@line 5668 "./stb_image.h"
 var $82=(Math_imul($78,$81)|0); //@line 5668 "./stb_image.h"
 var $83=($82<<2); //@line 5668 "./stb_image.h"
 assert($83 % 1 === 0);(_memcpy($74, $75, $83)|0); //@line 5668 "./stb_image.h"
 label=11;break; //@line 5669 "./stb_image.h"
 case 11: 
 label=12;break;
 case 12: 
 label=13;break; //@line 5672 "./stb_image.h"
 case 13: 
 var $87=$2; //@line 5673 "./stb_image.h"
 var $88=_stbi__get8($87); //@line 5673 "./stb_image.h"
 var $89=($88&255); //@line 5673 "./stb_image.h"
 if(($89|0)==44){ label=14;break;}else if(($89|0)==33){ label=42;break;}else if(($89|0)==59){ label=51;break;}else{label=52;break;}
 case 14: 
 var $91=$2; //@line 5679 "./stb_image.h"
 var $92=_stbi__get16le($91); //@line 5679 "./stb_image.h"
 $x=$92; //@line 5679 "./stb_image.h"
 var $93=$2; //@line 5680 "./stb_image.h"
 var $94=_stbi__get16le($93); //@line 5680 "./stb_image.h"
 $y=$94; //@line 5680 "./stb_image.h"
 var $95=$2; //@line 5681 "./stb_image.h"
 var $96=_stbi__get16le($95); //@line 5681 "./stb_image.h"
 $w=$96; //@line 5681 "./stb_image.h"
 var $97=$2; //@line 5682 "./stb_image.h"
 var $98=_stbi__get16le($97); //@line 5682 "./stb_image.h"
 $h=$98; //@line 5682 "./stb_image.h"
 var $99=$x; //@line 5683 "./stb_image.h"
 var $100=$w; //@line 5683 "./stb_image.h"
 var $101=((($99)+($100))|0); //@line 5683 "./stb_image.h"
 var $102=$3; //@line 5683 "./stb_image.h"
 var $103=(($102)|0); //@line 5683 "./stb_image.h"
 var $104=HEAP32[(($103)>>2)]; //@line 5683 "./stb_image.h"
 var $105=($101|0)>($104|0); //@line 5683 "./stb_image.h"
 if($105){label=16;break;}else{label=15;break;} //@line 5683 "./stb_image.h"
 case 15: 
 var $107=$y; //@line 5683 "./stb_image.h"
 var $108=$h; //@line 5683 "./stb_image.h"
 var $109=((($107)+($108))|0); //@line 5683 "./stb_image.h"
 var $110=$3; //@line 5683 "./stb_image.h"
 var $111=(($110+4)|0); //@line 5683 "./stb_image.h"
 var $112=HEAP32[(($111)>>2)]; //@line 5683 "./stb_image.h"
 var $113=($109|0)>($112|0); //@line 5683 "./stb_image.h"
 if($113){label=16;break;}else{label=17;break;} //@line 5683 "./stb_image.h"
 case 16: 
 var $115=_stbi__err(137376); //@line 5684 "./stb_image.h"
 var $116=($115|0)!=0; //@line 5684 "./stb_image.h"
 var $117=($116?0:0); //@line 5684 "./stb_image.h"
 var $118=$117; //@line 5684 "./stb_image.h"
 $1=$118; //@line 5684 "./stb_image.h"
 label=54;break; //@line 5684 "./stb_image.h"
 case 17: 
 var $120=$3; //@line 5686 "./stb_image.h"
 var $121=(($120)|0); //@line 5686 "./stb_image.h"
 var $122=HEAP32[(($121)>>2)]; //@line 5686 "./stb_image.h"
 var $123=($122<<2); //@line 5686 "./stb_image.h"
 var $124=$3; //@line 5686 "./stb_image.h"
 var $125=(($124+18504)|0); //@line 5686 "./stb_image.h"
 HEAP32[(($125)>>2)]=$123; //@line 5686 "./stb_image.h"
 var $126=$x; //@line 5687 "./stb_image.h"
 var $127=($126<<2); //@line 5687 "./stb_image.h"
 var $128=$3; //@line 5687 "./stb_image.h"
 var $129=(($128+18480)|0); //@line 5687 "./stb_image.h"
 HEAP32[(($129)>>2)]=$127; //@line 5687 "./stb_image.h"
 var $130=$y; //@line 5688 "./stb_image.h"
 var $131=$3; //@line 5688 "./stb_image.h"
 var $132=(($131+18504)|0); //@line 5688 "./stb_image.h"
 var $133=HEAP32[(($132)>>2)]; //@line 5688 "./stb_image.h"
 var $134=(Math_imul($130,$133)|0); //@line 5688 "./stb_image.h"
 var $135=$3; //@line 5688 "./stb_image.h"
 var $136=(($135+18484)|0); //@line 5688 "./stb_image.h"
 HEAP32[(($136)>>2)]=$134; //@line 5688 "./stb_image.h"
 var $137=$3; //@line 5689 "./stb_image.h"
 var $138=(($137+18480)|0); //@line 5689 "./stb_image.h"
 var $139=HEAP32[(($138)>>2)]; //@line 5689 "./stb_image.h"
 var $140=$w; //@line 5689 "./stb_image.h"
 var $141=($140<<2); //@line 5689 "./stb_image.h"
 var $142=((($139)+($141))|0); //@line 5689 "./stb_image.h"
 var $143=$3; //@line 5689 "./stb_image.h"
 var $144=(($143+18488)|0); //@line 5689 "./stb_image.h"
 HEAP32[(($144)>>2)]=$142; //@line 5689 "./stb_image.h"
 var $145=$3; //@line 5690 "./stb_image.h"
 var $146=(($145+18484)|0); //@line 5690 "./stb_image.h"
 var $147=HEAP32[(($146)>>2)]; //@line 5690 "./stb_image.h"
 var $148=$h; //@line 5690 "./stb_image.h"
 var $149=$3; //@line 5690 "./stb_image.h"
 var $150=(($149+18504)|0); //@line 5690 "./stb_image.h"
 var $151=HEAP32[(($150)>>2)]; //@line 5690 "./stb_image.h"
 var $152=(Math_imul($148,$151)|0); //@line 5690 "./stb_image.h"
 var $153=((($147)+($152))|0); //@line 5690 "./stb_image.h"
 var $154=$3; //@line 5690 "./stb_image.h"
 var $155=(($154+18492)|0); //@line 5690 "./stb_image.h"
 HEAP32[(($155)>>2)]=$153; //@line 5690 "./stb_image.h"
 var $156=$3; //@line 5691 "./stb_image.h"
 var $157=(($156+18480)|0); //@line 5691 "./stb_image.h"
 var $158=HEAP32[(($157)>>2)]; //@line 5691 "./stb_image.h"
 var $159=$3; //@line 5691 "./stb_image.h"
 var $160=(($159+18496)|0); //@line 5691 "./stb_image.h"
 HEAP32[(($160)>>2)]=$158; //@line 5691 "./stb_image.h"
 var $161=$3; //@line 5692 "./stb_image.h"
 var $162=(($161+18484)|0); //@line 5692 "./stb_image.h"
 var $163=HEAP32[(($162)>>2)]; //@line 5692 "./stb_image.h"
 var $164=$3; //@line 5692 "./stb_image.h"
 var $165=(($164+18500)|0); //@line 5692 "./stb_image.h"
 HEAP32[(($165)>>2)]=$163; //@line 5692 "./stb_image.h"
 var $166=$2; //@line 5694 "./stb_image.h"
 var $167=_stbi__get8($166); //@line 5694 "./stb_image.h"
 var $168=($167&255); //@line 5694 "./stb_image.h"
 var $169=$3; //@line 5694 "./stb_image.h"
 var $170=(($169+18476)|0); //@line 5694 "./stb_image.h"
 HEAP32[(($170)>>2)]=$168; //@line 5694 "./stb_image.h"
 var $171=$3; //@line 5696 "./stb_image.h"
 var $172=(($171+18476)|0); //@line 5696 "./stb_image.h"
 var $173=HEAP32[(($172)>>2)]; //@line 5696 "./stb_image.h"
 var $174=$173&64; //@line 5696 "./stb_image.h"
 var $175=($174|0)!=0; //@line 5696 "./stb_image.h"
 if($175){label=18;break;}else{label=19;break;} //@line 5696 "./stb_image.h"
 case 18: 
 var $177=$3; //@line 5697 "./stb_image.h"
 var $178=(($177+18504)|0); //@line 5697 "./stb_image.h"
 var $179=HEAP32[(($178)>>2)]; //@line 5697 "./stb_image.h"
 var $180=($179<<3); //@line 5697 "./stb_image.h"
 var $181=$3; //@line 5697 "./stb_image.h"
 var $182=(($181+18472)|0); //@line 5697 "./stb_image.h"
 HEAP32[(($182)>>2)]=$180; //@line 5697 "./stb_image.h"
 var $183=$3; //@line 5698 "./stb_image.h"
 var $184=(($183+18468)|0); //@line 5698 "./stb_image.h"
 HEAP32[(($184)>>2)]=3; //@line 5698 "./stb_image.h"
 label=20;break; //@line 5699 "./stb_image.h"
 case 19: 
 var $186=$3; //@line 5700 "./stb_image.h"
 var $187=(($186+18504)|0); //@line 5700 "./stb_image.h"
 var $188=HEAP32[(($187)>>2)]; //@line 5700 "./stb_image.h"
 var $189=$3; //@line 5700 "./stb_image.h"
 var $190=(($189+18472)|0); //@line 5700 "./stb_image.h"
 HEAP32[(($190)>>2)]=$188; //@line 5700 "./stb_image.h"
 var $191=$3; //@line 5701 "./stb_image.h"
 var $192=(($191+18468)|0); //@line 5701 "./stb_image.h"
 HEAP32[(($192)>>2)]=0; //@line 5701 "./stb_image.h"
 label=20;break;
 case 20: 
 var $194=$3; //@line 5704 "./stb_image.h"
 var $195=(($194+18476)|0); //@line 5704 "./stb_image.h"
 var $196=HEAP32[(($195)>>2)]; //@line 5704 "./stb_image.h"
 var $197=$196&128; //@line 5704 "./stb_image.h"
 var $198=($197|0)!=0; //@line 5704 "./stb_image.h"
 if($198){label=21;break;}else{label=25;break;} //@line 5704 "./stb_image.h"
 case 21: 
 var $200=$2; //@line 5705 "./stb_image.h"
 var $201=$3; //@line 5705 "./stb_image.h"
 var $202=(($201+1056)|0); //@line 5705 "./stb_image.h"
 var $203=(($202)|0); //@line 5705 "./stb_image.h"
 var $204=$3; //@line 5705 "./stb_image.h"
 var $205=(($204+18476)|0); //@line 5705 "./stb_image.h"
 var $206=HEAP32[(($205)>>2)]; //@line 5705 "./stb_image.h"
 var $207=$206&7; //@line 5705 "./stb_image.h"
 var $208=2<<$207; //@line 5705 "./stb_image.h"
 var $209=$3; //@line 5705 "./stb_image.h"
 var $210=(($209+28)|0); //@line 5705 "./stb_image.h"
 var $211=HEAP32[(($210)>>2)]; //@line 5705 "./stb_image.h"
 var $212=$211&1; //@line 5705 "./stb_image.h"
 var $213=($212|0)!=0; //@line 5705 "./stb_image.h"
 if($213){label=22;break;}else{label=23;break;} //@line 5705 "./stb_image.h"
 case 22: 
 var $215=$3; //@line 5705 "./stb_image.h"
 var $216=(($215+24)|0); //@line 5705 "./stb_image.h"
 var $217=HEAP32[(($216)>>2)]; //@line 5705 "./stb_image.h"
 var $220=$217;label=24;break; //@line 5705 "./stb_image.h"
 case 23: 
 var $220=-1;label=24;break; //@line 5705 "./stb_image.h"
 case 24: 
 var $220; //@line 5705 "./stb_image.h"
 _stbi__gif_parse_colortable($200,$203,$208,$220); //@line 5705 "./stb_image.h"
 var $221=$3; //@line 5706 "./stb_image.h"
 var $222=(($221+1056)|0); //@line 5706 "./stb_image.h"
 var $223=(($222)|0); //@line 5706 "./stb_image.h"
 var $224=$223; //@line 5706 "./stb_image.h"
 var $225=$3; //@line 5706 "./stb_image.h"
 var $226=(($225+18464)|0); //@line 5706 "./stb_image.h"
 HEAP32[(($226)>>2)]=$224; //@line 5706 "./stb_image.h"
 label=36;break; //@line 5707 "./stb_image.h"
 case 25: 
 var $228=$3; //@line 5707 "./stb_image.h"
 var $229=(($228+12)|0); //@line 5707 "./stb_image.h"
 var $230=HEAP32[(($229)>>2)]; //@line 5707 "./stb_image.h"
 var $231=$230&128; //@line 5707 "./stb_image.h"
 var $232=($231|0)!=0; //@line 5707 "./stb_image.h"
 if($232){label=26;break;}else{label=34;break;} //@line 5707 "./stb_image.h"
 case 26: 
 $i=0; //@line 5708 "./stb_image.h"
 label=27;break; //@line 5708 "./stb_image.h"
 case 27: 
 var $235=$i; //@line 5708 "./stb_image.h"
 var $236=($235|0)<256; //@line 5708 "./stb_image.h"
 if($236){label=28;break;}else{label=30;break;} //@line 5708 "./stb_image.h"
 case 28: 
 var $238=$i; //@line 5709 "./stb_image.h"
 var $239=$3; //@line 5709 "./stb_image.h"
 var $240=(($239+32)|0); //@line 5709 "./stb_image.h"
 var $241=(($240+($238<<2))|0); //@line 5709 "./stb_image.h"
 var $242=(($241+3)|0); //@line 5709 "./stb_image.h"
 HEAP8[($242)]=-1; //@line 5709 "./stb_image.h"
 label=29;break; //@line 5709 "./stb_image.h"
 case 29: 
 var $244=$i; //@line 5708 "./stb_image.h"
 var $245=((($244)+(1))|0); //@line 5708 "./stb_image.h"
 $i=$245; //@line 5708 "./stb_image.h"
 label=27;break; //@line 5708 "./stb_image.h"
 case 30: 
 var $247=$3; //@line 5710 "./stb_image.h"
 var $248=(($247+24)|0); //@line 5710 "./stb_image.h"
 var $249=HEAP32[(($248)>>2)]; //@line 5710 "./stb_image.h"
 var $250=($249|0)>=0; //@line 5710 "./stb_image.h"
 if($250){label=31;break;}else{label=33;break;} //@line 5710 "./stb_image.h"
 case 31: 
 var $252=$3; //@line 5710 "./stb_image.h"
 var $253=(($252+28)|0); //@line 5710 "./stb_image.h"
 var $254=HEAP32[(($253)>>2)]; //@line 5710 "./stb_image.h"
 var $255=$254&1; //@line 5710 "./stb_image.h"
 var $256=($255|0)!=0; //@line 5710 "./stb_image.h"
 if($256){label=32;break;}else{label=33;break;} //@line 5710 "./stb_image.h"
 case 32: 
 var $258=$3; //@line 5711 "./stb_image.h"
 var $259=(($258+24)|0); //@line 5711 "./stb_image.h"
 var $260=HEAP32[(($259)>>2)]; //@line 5711 "./stb_image.h"
 var $261=$3; //@line 5711 "./stb_image.h"
 var $262=(($261+32)|0); //@line 5711 "./stb_image.h"
 var $263=(($262+($260<<2))|0); //@line 5711 "./stb_image.h"
 var $264=(($263+3)|0); //@line 5711 "./stb_image.h"
 HEAP8[($264)]=0; //@line 5711 "./stb_image.h"
 label=33;break; //@line 5711 "./stb_image.h"
 case 33: 
 var $266=$3; //@line 5712 "./stb_image.h"
 var $267=(($266+32)|0); //@line 5712 "./stb_image.h"
 var $268=(($267)|0); //@line 5712 "./stb_image.h"
 var $269=$268; //@line 5712 "./stb_image.h"
 var $270=$3; //@line 5712 "./stb_image.h"
 var $271=(($270+18464)|0); //@line 5712 "./stb_image.h"
 HEAP32[(($271)>>2)]=$269; //@line 5712 "./stb_image.h"
 label=35;break; //@line 5713 "./stb_image.h"
 case 34: 
 var $273=_stbi__err(137352); //@line 5714 "./stb_image.h"
 var $274=($273|0)!=0; //@line 5714 "./stb_image.h"
 var $275=($274?0:0); //@line 5714 "./stb_image.h"
 var $276=$275; //@line 5714 "./stb_image.h"
 $1=$276; //@line 5714 "./stb_image.h"
 label=54;break; //@line 5714 "./stb_image.h"
 case 35: 
 label=36;break;
 case 36: 
 var $279=$2; //@line 5716 "./stb_image.h"
 var $280=$3; //@line 5716 "./stb_image.h"
 var $281=_stbi__process_gif_raster($279,$280); //@line 5716 "./stb_image.h"
 $o=$281; //@line 5716 "./stb_image.h"
 var $282=$o; //@line 5717 "./stb_image.h"
 var $283=($282|0)==0; //@line 5717 "./stb_image.h"
 if($283){label=37;break;}else{label=38;break;} //@line 5717 "./stb_image.h"
 case 37: 
 $1=0; //@line 5717 "./stb_image.h"
 label=54;break; //@line 5717 "./stb_image.h"
 case 38: 
 var $286=$5; //@line 5719 "./stb_image.h"
 var $287=($286|0)!=0; //@line 5719 "./stb_image.h"
 if($287){label=39;break;}else{label=41;break;} //@line 5719 "./stb_image.h"
 case 39: 
 var $289=$5; //@line 5719 "./stb_image.h"
 var $290=($289|0)!=4; //@line 5719 "./stb_image.h"
 if($290){label=40;break;}else{label=41;break;} //@line 5719 "./stb_image.h"
 case 40: 
 var $292=$o; //@line 5720 "./stb_image.h"
 var $293=$5; //@line 5720 "./stb_image.h"
 var $294=$3; //@line 5720 "./stb_image.h"
 var $295=(($294)|0); //@line 5720 "./stb_image.h"
 var $296=HEAP32[(($295)>>2)]; //@line 5720 "./stb_image.h"
 var $297=$3; //@line 5720 "./stb_image.h"
 var $298=(($297+4)|0); //@line 5720 "./stb_image.h"
 var $299=HEAP32[(($298)>>2)]; //@line 5720 "./stb_image.h"
 var $300=_stbi__convert_format($292,4,$293,$296,$299); //@line 5720 "./stb_image.h"
 $o=$300; //@line 5720 "./stb_image.h"
 label=41;break; //@line 5720 "./stb_image.h"
 case 41: 
 var $302=$o; //@line 5721 "./stb_image.h"
 $1=$302; //@line 5721 "./stb_image.h"
 label=54;break; //@line 5721 "./stb_image.h"
 case 42: 
 var $304=$2; //@line 5727 "./stb_image.h"
 var $305=_stbi__get8($304); //@line 5727 "./stb_image.h"
 var $306=($305&255); //@line 5727 "./stb_image.h"
 var $307=($306|0)==249; //@line 5727 "./stb_image.h"
 if($307){label=43;break;}else{label=47;break;} //@line 5727 "./stb_image.h"
 case 43: 
 var $309=$2; //@line 5728 "./stb_image.h"
 var $310=_stbi__get8($309); //@line 5728 "./stb_image.h"
 var $311=($310&255); //@line 5728 "./stb_image.h"
 $len=$311; //@line 5728 "./stb_image.h"
 var $312=$len; //@line 5729 "./stb_image.h"
 var $313=($312|0)==4; //@line 5729 "./stb_image.h"
 if($313){label=44;break;}else{label=45;break;} //@line 5729 "./stb_image.h"
 case 44: 
 var $315=$2; //@line 5730 "./stb_image.h"
 var $316=_stbi__get8($315); //@line 5730 "./stb_image.h"
 var $317=($316&255); //@line 5730 "./stb_image.h"
 var $318=$3; //@line 5730 "./stb_image.h"
 var $319=(($318+28)|0); //@line 5730 "./stb_image.h"
 HEAP32[(($319)>>2)]=$317; //@line 5730 "./stb_image.h"
 var $320=$2; //@line 5731 "./stb_image.h"
 var $321=_stbi__get16le($320); //@line 5731 "./stb_image.h"
 var $322=$2; //@line 5732 "./stb_image.h"
 var $323=_stbi__get8($322); //@line 5732 "./stb_image.h"
 var $324=($323&255); //@line 5732 "./stb_image.h"
 var $325=$3; //@line 5732 "./stb_image.h"
 var $326=(($325+24)|0); //@line 5732 "./stb_image.h"
 HEAP32[(($326)>>2)]=$324; //@line 5732 "./stb_image.h"
 label=46;break; //@line 5733 "./stb_image.h"
 case 45: 
 var $328=$2; //@line 5734 "./stb_image.h"
 var $329=$len; //@line 5734 "./stb_image.h"
 _stbi__skip($328,$329); //@line 5734 "./stb_image.h"
 label=53;break; //@line 5735 "./stb_image.h"
 case 46: 
 label=47;break; //@line 5737 "./stb_image.h"
 case 47: 
 label=48;break; //@line 5738 "./stb_image.h"
 case 48: 
 var $333=$2; //@line 5738 "./stb_image.h"
 var $334=_stbi__get8($333); //@line 5738 "./stb_image.h"
 var $335=($334&255); //@line 5738 "./stb_image.h"
 $len=$335; //@line 5738 "./stb_image.h"
 var $336=($335|0)!=0; //@line 5738 "./stb_image.h"
 if($336){label=49;break;}else{label=50;break;} //@line 5738 "./stb_image.h"
 case 49: 
 var $338=$2; //@line 5739 "./stb_image.h"
 var $339=$len; //@line 5739 "./stb_image.h"
 _stbi__skip($338,$339); //@line 5739 "./stb_image.h"
 label=48;break; //@line 5739 "./stb_image.h"
 case 50: 
 label=53;break; //@line 5740 "./stb_image.h"
 case 51: 
 var $342=$2; //@line 5744 "./stb_image.h"
 var $343=$342; //@line 5744 "./stb_image.h"
 $1=$343; //@line 5744 "./stb_image.h"
 label=54;break; //@line 5744 "./stb_image.h"
 case 52: 
 var $345=_stbi__err(137336); //@line 5747 "./stb_image.h"
 var $346=($345|0)!=0; //@line 5747 "./stb_image.h"
 var $347=($346?0:0); //@line 5747 "./stb_image.h"
 var $348=$347; //@line 5747 "./stb_image.h"
 $1=$348; //@line 5747 "./stb_image.h"
 label=54;break; //@line 5747 "./stb_image.h"
 case 53: 
 label=13;break; //@line 5749 "./stb_image.h"
 case 54: 
 var $351=$1; //@line 5750 "./stb_image.h"
 STACKTOP=sp;return $351; //@line 5750 "./stb_image.h"
  default: assert(0, "bad label: " + label);
 }

}


function _stbi__fill_gif_background($g){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $i;
 var $c;
 var $p;
 $1=$g;
 var $2=$1; //@line 5640 "./stb_image.h"
 var $3=(($2+16)|0); //@line 5640 "./stb_image.h"
 var $4=HEAP32[(($3)>>2)]; //@line 5640 "./stb_image.h"
 var $5=$1; //@line 5640 "./stb_image.h"
 var $6=(($5+32)|0); //@line 5640 "./stb_image.h"
 var $7=(($6+($4<<2))|0); //@line 5640 "./stb_image.h"
 var $8=(($7)|0); //@line 5640 "./stb_image.h"
 $c=$8; //@line 5640 "./stb_image.h"
 $i=0; //@line 5642 "./stb_image.h"
 label=2;break; //@line 5642 "./stb_image.h"
 case 2: 
 var $10=$i; //@line 5642 "./stb_image.h"
 var $11=$1; //@line 5642 "./stb_image.h"
 var $12=(($11)|0); //@line 5642 "./stb_image.h"
 var $13=HEAP32[(($12)>>2)]; //@line 5642 "./stb_image.h"
 var $14=$1; //@line 5642 "./stb_image.h"
 var $15=(($14+4)|0); //@line 5642 "./stb_image.h"
 var $16=HEAP32[(($15)>>2)]; //@line 5642 "./stb_image.h"
 var $17=(Math_imul($13,$16)|0); //@line 5642 "./stb_image.h"
 var $18=($17<<2); //@line 5642 "./stb_image.h"
 var $19=($10|0)<($18|0); //@line 5642 "./stb_image.h"
 if($19){label=3;break;}else{label=5;break;} //@line 5642 "./stb_image.h"
 case 3: 
 var $21=$i; //@line 5643 "./stb_image.h"
 var $22=$1; //@line 5643 "./stb_image.h"
 var $23=(($22+8)|0); //@line 5643 "./stb_image.h"
 var $24=HEAP32[(($23)>>2)]; //@line 5643 "./stb_image.h"
 var $25=(($24+$21)|0); //@line 5643 "./stb_image.h"
 $p=$25; //@line 5643 "./stb_image.h"
 var $26=$c; //@line 5644 "./stb_image.h"
 var $27=(($26+2)|0); //@line 5644 "./stb_image.h"
 var $28=HEAP8[($27)]; //@line 5644 "./stb_image.h"
 var $29=$p; //@line 5644 "./stb_image.h"
 var $30=(($29)|0); //@line 5644 "./stb_image.h"
 HEAP8[($30)]=$28; //@line 5644 "./stb_image.h"
 var $31=$c; //@line 5645 "./stb_image.h"
 var $32=(($31+1)|0); //@line 5645 "./stb_image.h"
 var $33=HEAP8[($32)]; //@line 5645 "./stb_image.h"
 var $34=$p; //@line 5645 "./stb_image.h"
 var $35=(($34+1)|0); //@line 5645 "./stb_image.h"
 HEAP8[($35)]=$33; //@line 5645 "./stb_image.h"
 var $36=$c; //@line 5646 "./stb_image.h"
 var $37=(($36)|0); //@line 5646 "./stb_image.h"
 var $38=HEAP8[($37)]; //@line 5646 "./stb_image.h"
 var $39=$p; //@line 5646 "./stb_image.h"
 var $40=(($39+2)|0); //@line 5646 "./stb_image.h"
 HEAP8[($40)]=$38; //@line 5646 "./stb_image.h"
 var $41=$c; //@line 5647 "./stb_image.h"
 var $42=(($41+3)|0); //@line 5647 "./stb_image.h"
 var $43=HEAP8[($42)]; //@line 5647 "./stb_image.h"
 var $44=$p; //@line 5647 "./stb_image.h"
 var $45=(($44+3)|0); //@line 5647 "./stb_image.h"
 HEAP8[($45)]=$43; //@line 5647 "./stb_image.h"
 label=4;break; //@line 5648 "./stb_image.h"
 case 4: 
 var $47=$i; //@line 5642 "./stb_image.h"
 var $48=((($47)+(4))|0); //@line 5642 "./stb_image.h"
 $i=$48; //@line 5642 "./stb_image.h"
 label=2;break; //@line 5642 "./stb_image.h"
 case 5: 
 STACKTOP=sp;return; //@line 5649 "./stb_image.h"
  default: assert(0, "bad label: " + label);
 }

}


function _stbi__process_gif_raster($s,$g){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $lzw_cs;
 var $len;
 var $code;
 var $first;
 var $codesize;
 var $codemask;
 var $avail;
 var $oldcode;
 var $bits;
 var $valid_bits;
 var $clear;
 var $p;
 var $code1;
 $2=$s;
 $3=$g;
 var $4=$2; //@line 5565 "./stb_image.h"
 var $5=_stbi__get8($4); //@line 5565 "./stb_image.h"
 $lzw_cs=$5; //@line 5565 "./stb_image.h"
 var $6=$lzw_cs; //@line 5566 "./stb_image.h"
 var $7=($6&255); //@line 5566 "./stb_image.h"
 var $8=($7|0)>12; //@line 5566 "./stb_image.h"
 if($8){label=2;break;}else{label=3;break;} //@line 5566 "./stb_image.h"
 case 2: 
 $1=0; //@line 5566 "./stb_image.h"
 label=43;break; //@line 5566 "./stb_image.h"
 case 3: 
 var $11=$lzw_cs; //@line 5567 "./stb_image.h"
 var $12=($11&255); //@line 5567 "./stb_image.h"
 var $13=1<<$12; //@line 5567 "./stb_image.h"
 $clear=$13; //@line 5567 "./stb_image.h"
 $first=1; //@line 5568 "./stb_image.h"
 var $14=$lzw_cs; //@line 5569 "./stb_image.h"
 var $15=($14&255); //@line 5569 "./stb_image.h"
 var $16=((($15)+(1))|0); //@line 5569 "./stb_image.h"
 $codesize=$16; //@line 5569 "./stb_image.h"
 var $17=$codesize; //@line 5570 "./stb_image.h"
 var $18=1<<$17; //@line 5570 "./stb_image.h"
 var $19=((($18)-(1))|0); //@line 5570 "./stb_image.h"
 $codemask=$19; //@line 5570 "./stb_image.h"
 $bits=0; //@line 5571 "./stb_image.h"
 $valid_bits=0; //@line 5572 "./stb_image.h"
 $code=0; //@line 5573 "./stb_image.h"
 label=4;break; //@line 5573 "./stb_image.h"
 case 4: 
 var $21=$code; //@line 5573 "./stb_image.h"
 var $22=$clear; //@line 5573 "./stb_image.h"
 var $23=($21|0)<($22|0); //@line 5573 "./stb_image.h"
 if($23){label=5;break;}else{label=7;break;} //@line 5573 "./stb_image.h"
 case 5: 
 var $25=$code; //@line 5574 "./stb_image.h"
 var $26=$3; //@line 5574 "./stb_image.h"
 var $27=(($26+2080)|0); //@line 5574 "./stb_image.h"
 var $28=(($27+($25<<2))|0); //@line 5574 "./stb_image.h"
 var $29=(($28)|0); //@line 5574 "./stb_image.h"
 HEAP16[(($29)>>1)]=-1; //@line 5574 "./stb_image.h"
 var $30=$code; //@line 5575 "./stb_image.h"
 var $31=(($30)&255); //@line 5575 "./stb_image.h"
 var $32=$code; //@line 5575 "./stb_image.h"
 var $33=$3; //@line 5575 "./stb_image.h"
 var $34=(($33+2080)|0); //@line 5575 "./stb_image.h"
 var $35=(($34+($32<<2))|0); //@line 5575 "./stb_image.h"
 var $36=(($35+2)|0); //@line 5575 "./stb_image.h"
 HEAP8[($36)]=$31; //@line 5575 "./stb_image.h"
 var $37=$code; //@line 5576 "./stb_image.h"
 var $38=(($37)&255); //@line 5576 "./stb_image.h"
 var $39=$code; //@line 5576 "./stb_image.h"
 var $40=$3; //@line 5576 "./stb_image.h"
 var $41=(($40+2080)|0); //@line 5576 "./stb_image.h"
 var $42=(($41+($39<<2))|0); //@line 5576 "./stb_image.h"
 var $43=(($42+3)|0); //@line 5576 "./stb_image.h"
 HEAP8[($43)]=$38; //@line 5576 "./stb_image.h"
 label=6;break; //@line 5577 "./stb_image.h"
 case 6: 
 var $45=$code; //@line 5573 "./stb_image.h"
 var $46=((($45)+(1))|0); //@line 5573 "./stb_image.h"
 $code=$46; //@line 5573 "./stb_image.h"
 label=4;break; //@line 5573 "./stb_image.h"
 case 7: 
 var $48=$clear; //@line 5580 "./stb_image.h"
 var $49=((($48)+(2))|0); //@line 5580 "./stb_image.h"
 $avail=$49; //@line 5580 "./stb_image.h"
 $oldcode=-1; //@line 5581 "./stb_image.h"
 $len=0; //@line 5583 "./stb_image.h"
 label=8;break; //@line 5584 "./stb_image.h"
 case 8: 
 var $51=$valid_bits; //@line 5585 "./stb_image.h"
 var $52=$codesize; //@line 5585 "./stb_image.h"
 var $53=($51|0)<($52|0); //@line 5585 "./stb_image.h"
 if($53){label=9;break;}else{label=14;break;} //@line 5585 "./stb_image.h"
 case 9: 
 var $55=$len; //@line 5586 "./stb_image.h"
 var $56=($55|0)==0; //@line 5586 "./stb_image.h"
 if($56){label=10;break;}else{label=13;break;} //@line 5586 "./stb_image.h"
 case 10: 
 var $58=$2; //@line 5587 "./stb_image.h"
 var $59=_stbi__get8($58); //@line 5587 "./stb_image.h"
 var $60=($59&255); //@line 5587 "./stb_image.h"
 $len=$60; //@line 5587 "./stb_image.h"
 var $61=$len; //@line 5588 "./stb_image.h"
 var $62=($61|0)==0; //@line 5588 "./stb_image.h"
 if($62){label=11;break;}else{label=12;break;} //@line 5588 "./stb_image.h"
 case 11: 
 var $64=$3; //@line 5589 "./stb_image.h"
 var $65=(($64+8)|0); //@line 5589 "./stb_image.h"
 var $66=HEAP32[(($65)>>2)]; //@line 5589 "./stb_image.h"
 $1=$66; //@line 5589 "./stb_image.h"
 label=43;break; //@line 5589 "./stb_image.h"
 case 12: 
 label=13;break; //@line 5590 "./stb_image.h"
 case 13: 
 var $69=$len; //@line 5591 "./stb_image.h"
 var $70=((($69)-(1))|0); //@line 5591 "./stb_image.h"
 $len=$70; //@line 5591 "./stb_image.h"
 var $71=$2; //@line 5592 "./stb_image.h"
 var $72=_stbi__get8($71); //@line 5592 "./stb_image.h"
 var $73=($72&255); //@line 5592 "./stb_image.h"
 var $74=$valid_bits; //@line 5592 "./stb_image.h"
 var $75=$73<<$74; //@line 5592 "./stb_image.h"
 var $76=$bits; //@line 5592 "./stb_image.h"
 var $77=$76|$75; //@line 5592 "./stb_image.h"
 $bits=$77; //@line 5592 "./stb_image.h"
 var $78=$valid_bits; //@line 5593 "./stb_image.h"
 var $79=((($78)+(8))|0); //@line 5593 "./stb_image.h"
 $valid_bits=$79; //@line 5593 "./stb_image.h"
 label=42;break; //@line 5594 "./stb_image.h"
 case 14: 
 var $81=$bits; //@line 5595 "./stb_image.h"
 var $82=$codemask; //@line 5595 "./stb_image.h"
 var $83=$81&$82; //@line 5595 "./stb_image.h"
 $code1=$83; //@line 5595 "./stb_image.h"
 var $84=$codesize; //@line 5596 "./stb_image.h"
 var $85=$bits; //@line 5596 "./stb_image.h"
 var $86=$85>>($84|0); //@line 5596 "./stb_image.h"
 $bits=$86; //@line 5596 "./stb_image.h"
 var $87=$codesize; //@line 5597 "./stb_image.h"
 var $88=$valid_bits; //@line 5597 "./stb_image.h"
 var $89=((($88)-($87))|0); //@line 5597 "./stb_image.h"
 $valid_bits=$89; //@line 5597 "./stb_image.h"
 var $90=$code1; //@line 5599 "./stb_image.h"
 var $91=$clear; //@line 5599 "./stb_image.h"
 var $92=($90|0)==($91|0); //@line 5599 "./stb_image.h"
 if($92){label=15;break;}else{label=16;break;} //@line 5599 "./stb_image.h"
 case 15: 
 var $94=$lzw_cs; //@line 5600 "./stb_image.h"
 var $95=($94&255); //@line 5600 "./stb_image.h"
 var $96=((($95)+(1))|0); //@line 5600 "./stb_image.h"
 $codesize=$96; //@line 5600 "./stb_image.h"
 var $97=$codesize; //@line 5601 "./stb_image.h"
 var $98=1<<$97; //@line 5601 "./stb_image.h"
 var $99=((($98)-(1))|0); //@line 5601 "./stb_image.h"
 $codemask=$99; //@line 5601 "./stb_image.h"
 var $100=$clear; //@line 5602 "./stb_image.h"
 var $101=((($100)+(2))|0); //@line 5602 "./stb_image.h"
 $avail=$101; //@line 5602 "./stb_image.h"
 $oldcode=-1; //@line 5603 "./stb_image.h"
 $first=0; //@line 5604 "./stb_image.h"
 label=41;break; //@line 5605 "./stb_image.h"
 case 16: 
 var $103=$code1; //@line 5605 "./stb_image.h"
 var $104=$clear; //@line 5605 "./stb_image.h"
 var $105=((($104)+(1))|0); //@line 5605 "./stb_image.h"
 var $106=($103|0)==($105|0); //@line 5605 "./stb_image.h"
 if($106){label=17;break;}else{label=21;break;} //@line 5605 "./stb_image.h"
 case 17: 
 var $108=$2; //@line 5606 "./stb_image.h"
 var $109=$len; //@line 5606 "./stb_image.h"
 _stbi__skip($108,$109); //@line 5606 "./stb_image.h"
 label=18;break; //@line 5607 "./stb_image.h"
 case 18: 
 var $111=$2; //@line 5607 "./stb_image.h"
 var $112=_stbi__get8($111); //@line 5607 "./stb_image.h"
 var $113=($112&255); //@line 5607 "./stb_image.h"
 $len=$113; //@line 5607 "./stb_image.h"
 var $114=($113|0)>0; //@line 5607 "./stb_image.h"
 if($114){label=19;break;}else{label=20;break;} //@line 5607 "./stb_image.h"
 case 19: 
 var $116=$2; //@line 5608 "./stb_image.h"
 var $117=$len; //@line 5608 "./stb_image.h"
 _stbi__skip($116,$117); //@line 5608 "./stb_image.h"
 label=18;break; //@line 5608 "./stb_image.h"
 case 20: 
 var $119=$3; //@line 5609 "./stb_image.h"
 var $120=(($119+8)|0); //@line 5609 "./stb_image.h"
 var $121=HEAP32[(($120)>>2)]; //@line 5609 "./stb_image.h"
 $1=$121; //@line 5609 "./stb_image.h"
 label=43;break; //@line 5609 "./stb_image.h"
 case 21: 
 var $123=$code1; //@line 5610 "./stb_image.h"
 var $124=$avail; //@line 5610 "./stb_image.h"
 var $125=($123|0)<=($124|0); //@line 5610 "./stb_image.h"
 if($125){label=22;break;}else{label=38;break;} //@line 5610 "./stb_image.h"
 case 22: 
 var $127=$first; //@line 5611 "./stb_image.h"
 var $128=($127|0)!=0; //@line 5611 "./stb_image.h"
 if($128){label=23;break;}else{label=24;break;} //@line 5611 "./stb_image.h"
 case 23: 
 var $130=_stbi__err(137320); //@line 5611 "./stb_image.h"
 var $131=($130|0)!=0; //@line 5611 "./stb_image.h"
 var $132=($131?0:0); //@line 5611 "./stb_image.h"
 var $133=$132; //@line 5611 "./stb_image.h"
 $1=$133; //@line 5611 "./stb_image.h"
 label=43;break; //@line 5611 "./stb_image.h"
 case 24: 
 var $135=$oldcode; //@line 5613 "./stb_image.h"
 var $136=($135|0)>=0; //@line 5613 "./stb_image.h"
 if($136){label=25;break;}else{label=31;break;} //@line 5613 "./stb_image.h"
 case 25: 
 var $138=$avail; //@line 5614 "./stb_image.h"
 var $139=((($138)+(1))|0); //@line 5614 "./stb_image.h"
 $avail=$139; //@line 5614 "./stb_image.h"
 var $140=$3; //@line 5614 "./stb_image.h"
 var $141=(($140+2080)|0); //@line 5614 "./stb_image.h"
 var $142=(($141+($138<<2))|0); //@line 5614 "./stb_image.h"
 $p=$142; //@line 5614 "./stb_image.h"
 var $143=$avail; //@line 5615 "./stb_image.h"
 var $144=($143|0)>4096; //@line 5615 "./stb_image.h"
 if($144){label=26;break;}else{label=27;break;} //@line 5615 "./stb_image.h"
 case 26: 
 var $146=_stbi__err(137280); //@line 5615 "./stb_image.h"
 var $147=($146|0)!=0; //@line 5615 "./stb_image.h"
 var $148=($147?0:0); //@line 5615 "./stb_image.h"
 var $149=$148; //@line 5615 "./stb_image.h"
 $1=$149; //@line 5615 "./stb_image.h"
 label=43;break; //@line 5615 "./stb_image.h"
 case 27: 
 var $151=$oldcode; //@line 5616 "./stb_image.h"
 var $152=(($151)&65535); //@line 5616 "./stb_image.h"
 var $153=$p; //@line 5616 "./stb_image.h"
 var $154=(($153)|0); //@line 5616 "./stb_image.h"
 HEAP16[(($154)>>1)]=$152; //@line 5616 "./stb_image.h"
 var $155=$oldcode; //@line 5617 "./stb_image.h"
 var $156=$3; //@line 5617 "./stb_image.h"
 var $157=(($156+2080)|0); //@line 5617 "./stb_image.h"
 var $158=(($157+($155<<2))|0); //@line 5617 "./stb_image.h"
 var $159=(($158+2)|0); //@line 5617 "./stb_image.h"
 var $160=HEAP8[($159)]; //@line 5617 "./stb_image.h"
 var $161=$p; //@line 5617 "./stb_image.h"
 var $162=(($161+2)|0); //@line 5617 "./stb_image.h"
 HEAP8[($162)]=$160; //@line 5617 "./stb_image.h"
 var $163=$code1; //@line 5618 "./stb_image.h"
 var $164=$avail; //@line 5618 "./stb_image.h"
 var $165=($163|0)==($164|0); //@line 5618 "./stb_image.h"
 if($165){label=28;break;}else{label=29;break;} //@line 5618 "./stb_image.h"
 case 28: 
 var $167=$p; //@line 5618 "./stb_image.h"
 var $168=(($167+2)|0); //@line 5618 "./stb_image.h"
 var $169=HEAP8[($168)]; //@line 5618 "./stb_image.h"
 var $170=($169&255); //@line 5618 "./stb_image.h"
 var $180=$170;label=30;break; //@line 5618 "./stb_image.h"
 case 29: 
 var $172=$code1; //@line 5618 "./stb_image.h"
 var $173=$3; //@line 5618 "./stb_image.h"
 var $174=(($173+2080)|0); //@line 5618 "./stb_image.h"
 var $175=(($174+($172<<2))|0); //@line 5618 "./stb_image.h"
 var $176=(($175+2)|0); //@line 5618 "./stb_image.h"
 var $177=HEAP8[($176)]; //@line 5618 "./stb_image.h"
 var $178=($177&255); //@line 5618 "./stb_image.h"
 var $180=$178;label=30;break; //@line 5618 "./stb_image.h"
 case 30: 
 var $180; //@line 5618 "./stb_image.h"
 var $181=(($180)&255); //@line 5618 "./stb_image.h"
 var $182=$p; //@line 5618 "./stb_image.h"
 var $183=(($182+3)|0); //@line 5618 "./stb_image.h"
 HEAP8[($183)]=$181; //@line 5618 "./stb_image.h"
 label=34;break; //@line 5619 "./stb_image.h"
 case 31: 
 var $185=$code1; //@line 5619 "./stb_image.h"
 var $186=$avail; //@line 5619 "./stb_image.h"
 var $187=($185|0)==($186|0); //@line 5619 "./stb_image.h"
 if($187){label=32;break;}else{label=33;break;} //@line 5619 "./stb_image.h"
 case 32: 
 var $189=_stbi__err(137256); //@line 5620 "./stb_image.h"
 var $190=($189|0)!=0; //@line 5620 "./stb_image.h"
 var $191=($190?0:0); //@line 5620 "./stb_image.h"
 var $192=$191; //@line 5620 "./stb_image.h"
 $1=$192; //@line 5620 "./stb_image.h"
 label=43;break; //@line 5620 "./stb_image.h"
 case 33: 
 label=34;break;
 case 34: 
 var $195=$3; //@line 5622 "./stb_image.h"
 var $196=$code1; //@line 5622 "./stb_image.h"
 var $197=(($196)&65535); //@line 5622 "./stb_image.h"
 _stbi__out_gif_code($195,$197); //@line 5622 "./stb_image.h"
 var $198=$avail; //@line 5624 "./stb_image.h"
 var $199=$codemask; //@line 5624 "./stb_image.h"
 var $200=$198&$199; //@line 5624 "./stb_image.h"
 var $201=($200|0)==0; //@line 5624 "./stb_image.h"
 if($201){label=35;break;}else{label=37;break;} //@line 5624 "./stb_image.h"
 case 35: 
 var $203=$avail; //@line 5624 "./stb_image.h"
 var $204=($203|0)<=4095; //@line 5624 "./stb_image.h"
 if($204){label=36;break;}else{label=37;break;} //@line 5624 "./stb_image.h"
 case 36: 
 var $206=$codesize; //@line 5625 "./stb_image.h"
 var $207=((($206)+(1))|0); //@line 5625 "./stb_image.h"
 $codesize=$207; //@line 5625 "./stb_image.h"
 var $208=$codesize; //@line 5626 "./stb_image.h"
 var $209=1<<$208; //@line 5626 "./stb_image.h"
 var $210=((($209)-(1))|0); //@line 5626 "./stb_image.h"
 $codemask=$210; //@line 5626 "./stb_image.h"
 label=37;break; //@line 5627 "./stb_image.h"
 case 37: 
 var $212=$code1; //@line 5629 "./stb_image.h"
 $oldcode=$212; //@line 5629 "./stb_image.h"
 label=39;break; //@line 5630 "./stb_image.h"
 case 38: 
 var $214=_stbi__err(137256); //@line 5631 "./stb_image.h"
 var $215=($214|0)!=0; //@line 5631 "./stb_image.h"
 var $216=($215?0:0); //@line 5631 "./stb_image.h"
 var $217=$216; //@line 5631 "./stb_image.h"
 $1=$217; //@line 5631 "./stb_image.h"
 label=43;break; //@line 5631 "./stb_image.h"
 case 39: 
 label=40;break;
 case 40: 
 label=41;break;
 case 41: 
 label=42;break;
 case 42: 
 label=8;break; //@line 5634 "./stb_image.h"
 case 43: 
 var $223=$1; //@line 5635 "./stb_image.h"
 STACKTOP=sp;return $223; //@line 5635 "./stb_image.h"
  default: assert(0, "bad label: " + label);
 }

}


function _stbi__out_gif_code($g,$code){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $p;
 var $c;
 $1=$g;
 $2=$code;
 var $3=$2; //@line 5529 "./stb_image.h"
 var $4=($3&65535); //@line 5529 "./stb_image.h"
 var $5=$1; //@line 5529 "./stb_image.h"
 var $6=(($5+2080)|0); //@line 5529 "./stb_image.h"
 var $7=(($6+($4<<2))|0); //@line 5529 "./stb_image.h"
 var $8=(($7)|0); //@line 5529 "./stb_image.h"
 var $9=HEAP16[(($8)>>1)]; //@line 5529 "./stb_image.h"
 var $10=(($9<<16)>>16); //@line 5529 "./stb_image.h"
 var $11=($10|0)>=0; //@line 5529 "./stb_image.h"
 if($11){label=2;break;}else{label=3;break;} //@line 5529 "./stb_image.h"
 case 2: 
 var $13=$1; //@line 5530 "./stb_image.h"
 var $14=$2; //@line 5530 "./stb_image.h"
 var $15=($14&65535); //@line 5530 "./stb_image.h"
 var $16=$1; //@line 5530 "./stb_image.h"
 var $17=(($16+2080)|0); //@line 5530 "./stb_image.h"
 var $18=(($17+($15<<2))|0); //@line 5530 "./stb_image.h"
 var $19=(($18)|0); //@line 5530 "./stb_image.h"
 var $20=HEAP16[(($19)>>1)]; //@line 5530 "./stb_image.h"
 _stbi__out_gif_code($13,$20); //@line 5530 "./stb_image.h"
 label=3;break; //@line 5530 "./stb_image.h"
 case 3: 
 var $22=$1; //@line 5532 "./stb_image.h"
 var $23=(($22+18500)|0); //@line 5532 "./stb_image.h"
 var $24=HEAP32[(($23)>>2)]; //@line 5532 "./stb_image.h"
 var $25=$1; //@line 5532 "./stb_image.h"
 var $26=(($25+18492)|0); //@line 5532 "./stb_image.h"
 var $27=HEAP32[(($26)>>2)]; //@line 5532 "./stb_image.h"
 var $28=($24|0)>=($27|0); //@line 5532 "./stb_image.h"
 if($28){label=4;break;}else{label=5;break;} //@line 5532 "./stb_image.h"
 case 4: 
 label=14;break; //@line 5532 "./stb_image.h"
 case 5: 
 var $31=$1; //@line 5534 "./stb_image.h"
 var $32=(($31+18496)|0); //@line 5534 "./stb_image.h"
 var $33=HEAP32[(($32)>>2)]; //@line 5534 "./stb_image.h"
 var $34=$1; //@line 5534 "./stb_image.h"
 var $35=(($34+18500)|0); //@line 5534 "./stb_image.h"
 var $36=HEAP32[(($35)>>2)]; //@line 5534 "./stb_image.h"
 var $37=((($33)+($36))|0); //@line 5534 "./stb_image.h"
 var $38=$1; //@line 5534 "./stb_image.h"
 var $39=(($38+8)|0); //@line 5534 "./stb_image.h"
 var $40=HEAP32[(($39)>>2)]; //@line 5534 "./stb_image.h"
 var $41=(($40+$37)|0); //@line 5534 "./stb_image.h"
 $p=$41; //@line 5534 "./stb_image.h"
 var $42=$2; //@line 5535 "./stb_image.h"
 var $43=($42&65535); //@line 5535 "./stb_image.h"
 var $44=$1; //@line 5535 "./stb_image.h"
 var $45=(($44+2080)|0); //@line 5535 "./stb_image.h"
 var $46=(($45+($43<<2))|0); //@line 5535 "./stb_image.h"
 var $47=(($46+3)|0); //@line 5535 "./stb_image.h"
 var $48=HEAP8[($47)]; //@line 5535 "./stb_image.h"
 var $49=($48&255); //@line 5535 "./stb_image.h"
 var $50=($49<<2); //@line 5535 "./stb_image.h"
 var $51=$1; //@line 5535 "./stb_image.h"
 var $52=(($51+18464)|0); //@line 5535 "./stb_image.h"
 var $53=HEAP32[(($52)>>2)]; //@line 5535 "./stb_image.h"
 var $54=(($53+$50)|0); //@line 5535 "./stb_image.h"
 $c=$54; //@line 5535 "./stb_image.h"
 var $55=$c; //@line 5537 "./stb_image.h"
 var $56=(($55+3)|0); //@line 5537 "./stb_image.h"
 var $57=HEAP8[($56)]; //@line 5537 "./stb_image.h"
 var $58=($57&255); //@line 5537 "./stb_image.h"
 var $59=($58|0)>=128; //@line 5537 "./stb_image.h"
 if($59){label=6;break;}else{label=7;break;} //@line 5537 "./stb_image.h"
 case 6: 
 var $61=$c; //@line 5538 "./stb_image.h"
 var $62=(($61+2)|0); //@line 5538 "./stb_image.h"
 var $63=HEAP8[($62)]; //@line 5538 "./stb_image.h"
 var $64=$p; //@line 5538 "./stb_image.h"
 var $65=(($64)|0); //@line 5538 "./stb_image.h"
 HEAP8[($65)]=$63; //@line 5538 "./stb_image.h"
 var $66=$c; //@line 5539 "./stb_image.h"
 var $67=(($66+1)|0); //@line 5539 "./stb_image.h"
 var $68=HEAP8[($67)]; //@line 5539 "./stb_image.h"
 var $69=$p; //@line 5539 "./stb_image.h"
 var $70=(($69+1)|0); //@line 5539 "./stb_image.h"
 HEAP8[($70)]=$68; //@line 5539 "./stb_image.h"
 var $71=$c; //@line 5540 "./stb_image.h"
 var $72=(($71)|0); //@line 5540 "./stb_image.h"
 var $73=HEAP8[($72)]; //@line 5540 "./stb_image.h"
 var $74=$p; //@line 5540 "./stb_image.h"
 var $75=(($74+2)|0); //@line 5540 "./stb_image.h"
 HEAP8[($75)]=$73; //@line 5540 "./stb_image.h"
 var $76=$c; //@line 5541 "./stb_image.h"
 var $77=(($76+3)|0); //@line 5541 "./stb_image.h"
 var $78=HEAP8[($77)]; //@line 5541 "./stb_image.h"
 var $79=$p; //@line 5541 "./stb_image.h"
 var $80=(($79+3)|0); //@line 5541 "./stb_image.h"
 HEAP8[($80)]=$78; //@line 5541 "./stb_image.h"
 label=7;break; //@line 5542 "./stb_image.h"
 case 7: 
 var $82=$1; //@line 5543 "./stb_image.h"
 var $83=(($82+18496)|0); //@line 5543 "./stb_image.h"
 var $84=HEAP32[(($83)>>2)]; //@line 5543 "./stb_image.h"
 var $85=((($84)+(4))|0); //@line 5543 "./stb_image.h"
 HEAP32[(($83)>>2)]=$85; //@line 5543 "./stb_image.h"
 var $86=$1; //@line 5545 "./stb_image.h"
 var $87=(($86+18496)|0); //@line 5545 "./stb_image.h"
 var $88=HEAP32[(($87)>>2)]; //@line 5545 "./stb_image.h"
 var $89=$1; //@line 5545 "./stb_image.h"
 var $90=(($89+18488)|0); //@line 5545 "./stb_image.h"
 var $91=HEAP32[(($90)>>2)]; //@line 5545 "./stb_image.h"
 var $92=($88|0)>=($91|0); //@line 5545 "./stb_image.h"
 if($92){label=8;break;}else{label=14;break;} //@line 5545 "./stb_image.h"
 case 8: 
 var $94=$1; //@line 5546 "./stb_image.h"
 var $95=(($94+18480)|0); //@line 5546 "./stb_image.h"
 var $96=HEAP32[(($95)>>2)]; //@line 5546 "./stb_image.h"
 var $97=$1; //@line 5546 "./stb_image.h"
 var $98=(($97+18496)|0); //@line 5546 "./stb_image.h"
 HEAP32[(($98)>>2)]=$96; //@line 5546 "./stb_image.h"
 var $99=$1; //@line 5547 "./stb_image.h"
 var $100=(($99+18472)|0); //@line 5547 "./stb_image.h"
 var $101=HEAP32[(($100)>>2)]; //@line 5547 "./stb_image.h"
 var $102=$1; //@line 5547 "./stb_image.h"
 var $103=(($102+18500)|0); //@line 5547 "./stb_image.h"
 var $104=HEAP32[(($103)>>2)]; //@line 5547 "./stb_image.h"
 var $105=((($104)+($101))|0); //@line 5547 "./stb_image.h"
 HEAP32[(($103)>>2)]=$105; //@line 5547 "./stb_image.h"
 label=9;break; //@line 5549 "./stb_image.h"
 case 9: 
 var $107=$1; //@line 5549 "./stb_image.h"
 var $108=(($107+18500)|0); //@line 5549 "./stb_image.h"
 var $109=HEAP32[(($108)>>2)]; //@line 5549 "./stb_image.h"
 var $110=$1; //@line 5549 "./stb_image.h"
 var $111=(($110+18492)|0); //@line 5549 "./stb_image.h"
 var $112=HEAP32[(($111)>>2)]; //@line 5549 "./stb_image.h"
 var $113=($109|0)>=($112|0); //@line 5549 "./stb_image.h"
 if($113){label=10;break;}else{var $120=0;label=11;break;} //@line 5549 "./stb_image.h"
 case 10: 
 var $115=$1; //@line 5549 "./stb_image.h"
 var $116=(($115+18468)|0); //@line 5549 "./stb_image.h"
 var $117=HEAP32[(($116)>>2)]; //@line 5549 "./stb_image.h"
 var $118=($117|0)>0; //@line 5549 "./stb_image.h"
 var $120=$118;label=11;break;
 case 11: 
 var $120;
 if($120){label=12;break;}else{label=13;break;}
 case 12: 
 var $122=$1; //@line 5550 "./stb_image.h"
 var $123=(($122+18468)|0); //@line 5550 "./stb_image.h"
 var $124=HEAP32[(($123)>>2)]; //@line 5550 "./stb_image.h"
 var $125=1<<$124; //@line 5550 "./stb_image.h"
 var $126=$1; //@line 5550 "./stb_image.h"
 var $127=(($126+18504)|0); //@line 5550 "./stb_image.h"
 var $128=HEAP32[(($127)>>2)]; //@line 5550 "./stb_image.h"
 var $129=(Math_imul($125,$128)|0); //@line 5550 "./stb_image.h"
 var $130=$1; //@line 5550 "./stb_image.h"
 var $131=(($130+18472)|0); //@line 5550 "./stb_image.h"
 HEAP32[(($131)>>2)]=$129; //@line 5550 "./stb_image.h"
 var $132=$1; //@line 5551 "./stb_image.h"
 var $133=(($132+18484)|0); //@line 5551 "./stb_image.h"
 var $134=HEAP32[(($133)>>2)]; //@line 5551 "./stb_image.h"
 var $135=$1; //@line 5551 "./stb_image.h"
 var $136=(($135+18472)|0); //@line 5551 "./stb_image.h"
 var $137=HEAP32[(($136)>>2)]; //@line 5551 "./stb_image.h"
 var $138=$137>>1; //@line 5551 "./stb_image.h"
 var $139=((($134)+($138))|0); //@line 5551 "./stb_image.h"
 var $140=$1; //@line 5551 "./stb_image.h"
 var $141=(($140+18500)|0); //@line 5551 "./stb_image.h"
 HEAP32[(($141)>>2)]=$139; //@line 5551 "./stb_image.h"
 var $142=$1; //@line 5552 "./stb_image.h"
 var $143=(($142+18468)|0); //@line 5552 "./stb_image.h"
 var $144=HEAP32[(($143)>>2)]; //@line 5552 "./stb_image.h"
 var $145=((($144)-(1))|0); //@line 5552 "./stb_image.h"
 HEAP32[(($143)>>2)]=$145; //@line 5552 "./stb_image.h"
 label=9;break; //@line 5553 "./stb_image.h"
 case 13: 
 label=14;break; //@line 5554 "./stb_image.h"
 case 14: 
 STACKTOP=sp;return; //@line 5552 "./stb_image.h"
  default: assert(0, "bad label: " + label);
 }

}


function _stbi__gif_test_raw($s){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $sz;
 $2=$s;
 var $3=$2; //@line 5458 "./stb_image.h"
 var $4=_stbi__get8($3); //@line 5458 "./stb_image.h"
 var $5=($4&255); //@line 5458 "./stb_image.h"
 var $6=($5|0)!=71; //@line 5458 "./stb_image.h"
 if($6){label=5;break;}else{label=2;break;} //@line 5458 "./stb_image.h"
 case 2: 
 var $8=$2; //@line 5458 "./stb_image.h"
 var $9=_stbi__get8($8); //@line 5458 "./stb_image.h"
 var $10=($9&255); //@line 5458 "./stb_image.h"
 var $11=($10|0)!=73; //@line 5458 "./stb_image.h"
 if($11){label=5;break;}else{label=3;break;} //@line 5458 "./stb_image.h"
 case 3: 
 var $13=$2; //@line 5458 "./stb_image.h"
 var $14=_stbi__get8($13); //@line 5458 "./stb_image.h"
 var $15=($14&255); //@line 5458 "./stb_image.h"
 var $16=($15|0)!=70; //@line 5458 "./stb_image.h"
 if($16){label=5;break;}else{label=4;break;} //@line 5458 "./stb_image.h"
 case 4: 
 var $18=$2; //@line 5458 "./stb_image.h"
 var $19=_stbi__get8($18); //@line 5458 "./stb_image.h"
 var $20=($19&255); //@line 5458 "./stb_image.h"
 var $21=($20|0)!=56; //@line 5458 "./stb_image.h"
 if($21){label=5;break;}else{label=6;break;} //@line 5458 "./stb_image.h"
 case 5: 
 $1=0; //@line 5458 "./stb_image.h"
 label=12;break; //@line 5458 "./stb_image.h"
 case 6: 
 var $24=$2; //@line 5459 "./stb_image.h"
 var $25=_stbi__get8($24); //@line 5459 "./stb_image.h"
 var $26=($25&255); //@line 5459 "./stb_image.h"
 $sz=$26; //@line 5459 "./stb_image.h"
 var $27=$sz; //@line 5460 "./stb_image.h"
 var $28=($27|0)!=57; //@line 5460 "./stb_image.h"
 if($28){label=7;break;}else{label=9;break;} //@line 5460 "./stb_image.h"
 case 7: 
 var $30=$sz; //@line 5460 "./stb_image.h"
 var $31=($30|0)!=55; //@line 5460 "./stb_image.h"
 if($31){label=8;break;}else{label=9;break;} //@line 5460 "./stb_image.h"
 case 8: 
 $1=0; //@line 5460 "./stb_image.h"
 label=12;break; //@line 5460 "./stb_image.h"
 case 9: 
 var $34=$2; //@line 5461 "./stb_image.h"
 var $35=_stbi__get8($34); //@line 5461 "./stb_image.h"
 var $36=($35&255); //@line 5461 "./stb_image.h"
 var $37=($36|0)!=97; //@line 5461 "./stb_image.h"
 if($37){label=10;break;}else{label=11;break;} //@line 5461 "./stb_image.h"
 case 10: 
 $1=0; //@line 5461 "./stb_image.h"
 label=12;break; //@line 5461 "./stb_image.h"
 case 11: 
 $1=1; //@line 5462 "./stb_image.h"
 label=12;break; //@line 5462 "./stb_image.h"
 case 12: 
 var $41=$1; //@line 5462 "./stb_image.h"
 STACKTOP=sp;return $41; //@line 5462 "./stb_image.h"
  default: assert(0, "bad label: " + label);
 }

}


function _stbi__high_bit($z){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $n;
 $2=$z;
 $n=0; //@line 4541 "./stb_image.h"
 var $3=$2; //@line 4542 "./stb_image.h"
 var $4=($3|0)==0; //@line 4542 "./stb_image.h"
 if($4){label=2;break;}else{label=3;break;} //@line 4542 "./stb_image.h"
 case 2: 
 $1=-1; //@line 4542 "./stb_image.h"
 label=14;break; //@line 4542 "./stb_image.h"
 case 3: 
 var $7=$2; //@line 4543 "./stb_image.h"
 var $8=($7>>>0)>=65536; //@line 4543 "./stb_image.h"
 if($8){label=4;break;}else{label=5;break;} //@line 4543 "./stb_image.h"
 case 4: 
 var $10=$n; //@line 4543 "./stb_image.h"
 var $11=((($10)+(16))|0); //@line 4543 "./stb_image.h"
 $n=$11; //@line 4543 "./stb_image.h"
 var $12=$2; //@line 4543 "./stb_image.h"
 var $13=$12>>>16; //@line 4543 "./stb_image.h"
 $2=$13; //@line 4543 "./stb_image.h"
 label=5;break; //@line 4543 "./stb_image.h"
 case 5: 
 var $15=$2; //@line 4544 "./stb_image.h"
 var $16=($15>>>0)>=256; //@line 4544 "./stb_image.h"
 if($16){label=6;break;}else{label=7;break;} //@line 4544 "./stb_image.h"
 case 6: 
 var $18=$n; //@line 4544 "./stb_image.h"
 var $19=((($18)+(8))|0); //@line 4544 "./stb_image.h"
 $n=$19; //@line 4544 "./stb_image.h"
 var $20=$2; //@line 4544 "./stb_image.h"
 var $21=$20>>>8; //@line 4544 "./stb_image.h"
 $2=$21; //@line 4544 "./stb_image.h"
 label=7;break; //@line 4544 "./stb_image.h"
 case 7: 
 var $23=$2; //@line 4545 "./stb_image.h"
 var $24=($23>>>0)>=16; //@line 4545 "./stb_image.h"
 if($24){label=8;break;}else{label=9;break;} //@line 4545 "./stb_image.h"
 case 8: 
 var $26=$n; //@line 4545 "./stb_image.h"
 var $27=((($26)+(4))|0); //@line 4545 "./stb_image.h"
 $n=$27; //@line 4545 "./stb_image.h"
 var $28=$2; //@line 4545 "./stb_image.h"
 var $29=$28>>>4; //@line 4545 "./stb_image.h"
 $2=$29; //@line 4545 "./stb_image.h"
 label=9;break; //@line 4545 "./stb_image.h"
 case 9: 
 var $31=$2; //@line 4546 "./stb_image.h"
 var $32=($31>>>0)>=4; //@line 4546 "./stb_image.h"
 if($32){label=10;break;}else{label=11;break;} //@line 4546 "./stb_image.h"
 case 10: 
 var $34=$n; //@line 4546 "./stb_image.h"
 var $35=((($34)+(2))|0); //@line 4546 "./stb_image.h"
 $n=$35; //@line 4546 "./stb_image.h"
 var $36=$2; //@line 4546 "./stb_image.h"
 var $37=$36>>>2; //@line 4546 "./stb_image.h"
 $2=$37; //@line 4546 "./stb_image.h"
 label=11;break; //@line 4546 "./stb_image.h"
 case 11: 
 var $39=$2; //@line 4547 "./stb_image.h"
 var $40=($39>>>0)>=2; //@line 4547 "./stb_image.h"
 if($40){label=12;break;}else{label=13;break;} //@line 4547 "./stb_image.h"
 case 12: 
 var $42=$n; //@line 4547 "./stb_image.h"
 var $43=((($42)+(1))|0); //@line 4547 "./stb_image.h"
 $n=$43; //@line 4547 "./stb_image.h"
 var $44=$2; //@line 4547 "./stb_image.h"
 var $45=$44>>>1; //@line 4547 "./stb_image.h"
 $2=$45; //@line 4547 "./stb_image.h"
 label=13;break; //@line 4547 "./stb_image.h"
 case 13: 
 var $47=$n; //@line 4548 "./stb_image.h"
 $1=$47; //@line 4548 "./stb_image.h"
 label=14;break; //@line 4548 "./stb_image.h"
 case 14: 
 var $49=$1; //@line 4549 "./stb_image.h"
 STACKTOP=sp;return $49; //@line 4549 "./stb_image.h"
  default: assert(0, "bad label: " + label);
 }

}


function _stbi__bitcount($a){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 $1=$a;
 var $2=$1; //@line 4553 "./stb_image.h"
 var $3=$2&1431655765; //@line 4553 "./stb_image.h"
 var $4=$1; //@line 4553 "./stb_image.h"
 var $5=$4>>>1; //@line 4553 "./stb_image.h"
 var $6=$5&1431655765; //@line 4553 "./stb_image.h"
 var $7=((($3)+($6))|0); //@line 4553 "./stb_image.h"
 $1=$7; //@line 4553 "./stb_image.h"
 var $8=$1; //@line 4554 "./stb_image.h"
 var $9=$8&858993459; //@line 4554 "./stb_image.h"
 var $10=$1; //@line 4554 "./stb_image.h"
 var $11=$10>>>2; //@line 4554 "./stb_image.h"
 var $12=$11&858993459; //@line 4554 "./stb_image.h"
 var $13=((($9)+($12))|0); //@line 4554 "./stb_image.h"
 $1=$13; //@line 4554 "./stb_image.h"
 var $14=$1; //@line 4555 "./stb_image.h"
 var $15=$1; //@line 4555 "./stb_image.h"
 var $16=$15>>>4; //@line 4555 "./stb_image.h"
 var $17=((($14)+($16))|0); //@line 4555 "./stb_image.h"
 var $18=$17&252645135; //@line 4555 "./stb_image.h"
 $1=$18; //@line 4555 "./stb_image.h"
 var $19=$1; //@line 4556 "./stb_image.h"
 var $20=$1; //@line 4556 "./stb_image.h"
 var $21=$20>>>8; //@line 4556 "./stb_image.h"
 var $22=((($19)+($21))|0); //@line 4556 "./stb_image.h"
 $1=$22; //@line 4556 "./stb_image.h"
 var $23=$1; //@line 4557 "./stb_image.h"
 var $24=$1; //@line 4557 "./stb_image.h"
 var $25=$24>>>16; //@line 4557 "./stb_image.h"
 var $26=((($23)+($25))|0); //@line 4557 "./stb_image.h"
 $1=$26; //@line 4557 "./stb_image.h"
 var $27=$1; //@line 4558 "./stb_image.h"
 var $28=$27&255; //@line 4558 "./stb_image.h"
 STACKTOP=sp;return $28; //@line 4558 "./stb_image.h"
}


function _stbi__shiftsigned($v,$shift,$bits){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $result;
 var $z;
 $1=$v;
 $2=$shift;
 $3=$bits;
 $z=0; //@line 4564 "./stb_image.h"
 var $4=$2; //@line 4566 "./stb_image.h"
 var $5=($4|0)<0; //@line 4566 "./stb_image.h"
 if($5){label=2;break;}else{label=3;break;} //@line 4566 "./stb_image.h"
 case 2: 
 var $7=$2; //@line 4566 "./stb_image.h"
 var $8=(((-$7))|0); //@line 4566 "./stb_image.h"
 var $9=$1; //@line 4566 "./stb_image.h"
 var $10=$9<<$8; //@line 4566 "./stb_image.h"
 $1=$10; //@line 4566 "./stb_image.h"
 label=4;break; //@line 4566 "./stb_image.h"
 case 3: 
 var $12=$2; //@line 4567 "./stb_image.h"
 var $13=$1; //@line 4567 "./stb_image.h"
 var $14=$13>>($12|0); //@line 4567 "./stb_image.h"
 $1=$14; //@line 4567 "./stb_image.h"
 label=4;break;
 case 4: 
 var $16=$1; //@line 4568 "./stb_image.h"
 $result=$16; //@line 4568 "./stb_image.h"
 var $17=$3; //@line 4570 "./stb_image.h"
 $z=$17; //@line 4570 "./stb_image.h"
 label=5;break; //@line 4571 "./stb_image.h"
 case 5: 
 var $19=$z; //@line 4571 "./stb_image.h"
 var $20=($19|0)<8; //@line 4571 "./stb_image.h"
 if($20){label=6;break;}else{label=7;break;} //@line 4571 "./stb_image.h"
 case 6: 
 var $22=$1; //@line 4572 "./stb_image.h"
 var $23=$z; //@line 4572 "./stb_image.h"
 var $24=$22>>($23|0); //@line 4572 "./stb_image.h"
 var $25=$result; //@line 4572 "./stb_image.h"
 var $26=((($25)+($24))|0); //@line 4572 "./stb_image.h"
 $result=$26; //@line 4572 "./stb_image.h"
 var $27=$3; //@line 4573 "./stb_image.h"
 var $28=$z; //@line 4573 "./stb_image.h"
 var $29=((($28)+($27))|0); //@line 4573 "./stb_image.h"
 $z=$29; //@line 4573 "./stb_image.h"
 label=5;break; //@line 4574 "./stb_image.h"
 case 7: 
 var $31=$result; //@line 4575 "./stb_image.h"
 STACKTOP=sp;return $31; //@line 4575 "./stb_image.h"
  default: assert(0, "bad label: " + label);
 }

}


function _stbi__bmp_test_raw($s){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $r;
 var $sz;
 $2=$s;
 var $3=$2; //@line 4519 "./stb_image.h"
 var $4=_stbi__get8($3); //@line 4519 "./stb_image.h"
 var $5=($4&255); //@line 4519 "./stb_image.h"
 var $6=($5|0)!=66; //@line 4519 "./stb_image.h"
 if($6){label=2;break;}else{label=3;break;} //@line 4519 "./stb_image.h"
 case 2: 
 $1=0; //@line 4519 "./stb_image.h"
 label=11;break; //@line 4519 "./stb_image.h"
 case 3: 
 var $9=$2; //@line 4520 "./stb_image.h"
 var $10=_stbi__get8($9); //@line 4520 "./stb_image.h"
 var $11=($10&255); //@line 4520 "./stb_image.h"
 var $12=($11|0)!=77; //@line 4520 "./stb_image.h"
 if($12){label=4;break;}else{label=5;break;} //@line 4520 "./stb_image.h"
 case 4: 
 $1=0; //@line 4520 "./stb_image.h"
 label=11;break; //@line 4520 "./stb_image.h"
 case 5: 
 var $15=$2; //@line 4521 "./stb_image.h"
 var $16=_stbi__get32le($15); //@line 4521 "./stb_image.h"
 var $17=$2; //@line 4522 "./stb_image.h"
 var $18=_stbi__get16le($17); //@line 4522 "./stb_image.h"
 var $19=$2; //@line 4523 "./stb_image.h"
 var $20=_stbi__get16le($19); //@line 4523 "./stb_image.h"
 var $21=$2; //@line 4524 "./stb_image.h"
 var $22=_stbi__get32le($21); //@line 4524 "./stb_image.h"
 var $23=$2; //@line 4525 "./stb_image.h"
 var $24=_stbi__get32le($23); //@line 4525 "./stb_image.h"
 $sz=$24; //@line 4525 "./stb_image.h"
 var $25=$sz; //@line 4526 "./stb_image.h"
 var $26=($25|0)==12; //@line 4526 "./stb_image.h"
 if($26){var $40=1;label=10;break;}else{label=6;break;} //@line 4526 "./stb_image.h"
 case 6: 
 var $28=$sz; //@line 4526 "./stb_image.h"
 var $29=($28|0)==40; //@line 4526 "./stb_image.h"
 if($29){var $40=1;label=10;break;}else{label=7;break;} //@line 4526 "./stb_image.h"
 case 7: 
 var $31=$sz; //@line 4526 "./stb_image.h"
 var $32=($31|0)==56; //@line 4526 "./stb_image.h"
 if($32){var $40=1;label=10;break;}else{label=8;break;} //@line 4526 "./stb_image.h"
 case 8: 
 var $34=$sz; //@line 4526 "./stb_image.h"
 var $35=($34|0)==108; //@line 4526 "./stb_image.h"
 if($35){var $40=1;label=10;break;}else{label=9;break;} //@line 4526 "./stb_image.h"
 case 9: 
 var $37=$sz; //@line 4526 "./stb_image.h"
 var $38=($37|0)==124; //@line 4526 "./stb_image.h"
 var $40=$38;label=10;break; //@line 4526 "./stb_image.h"
 case 10: 
 var $40;
 var $41=($40&1); //@line 4526 "./stb_image.h"
 $r=$41; //@line 4526 "./stb_image.h"
 var $42=$r; //@line 4527 "./stb_image.h"
 $1=$42; //@line 4527 "./stb_image.h"
 label=11;break; //@line 4527 "./stb_image.h"
 case 11: 
 var $44=$1; //@line 4528 "./stb_image.h"
 STACKTOP=sp;return $44; //@line 4528 "./stb_image.h"
  default: assert(0, "bad label: " + label);
 }

}


function _stbi__do_png($p,$x,$y,$n,$req_comp){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 var $result;
 $2=$p;
 $3=$x;
 $4=$y;
 $5=$n;
 $6=$req_comp;
 $result=0; //@line 4456 "./stb_image.h"
 var $7=$6; //@line 4457 "./stb_image.h"
 var $8=($7|0)<0; //@line 4457 "./stb_image.h"
 if($8){label=3;break;}else{label=2;break;} //@line 4457 "./stb_image.h"
 case 2: 
 var $10=$6; //@line 4457 "./stb_image.h"
 var $11=($10|0)>4; //@line 4457 "./stb_image.h"
 if($11){label=3;break;}else{label=4;break;} //@line 4457 "./stb_image.h"
 case 3: 
 var $13=_stbi__err(139824); //@line 4457 "./stb_image.h"
 var $14=($13|0)!=0; //@line 4457 "./stb_image.h"
 var $15=($14?0:0); //@line 4457 "./stb_image.h"
 var $16=$15; //@line 4457 "./stb_image.h"
 $1=$16; //@line 4457 "./stb_image.h"
 label=14;break; //@line 4457 "./stb_image.h"
 case 4: 
 var $18=$2; //@line 4458 "./stb_image.h"
 var $19=$6; //@line 4458 "./stb_image.h"
 var $20=_stbi__parse_png_file($18,0,$19); //@line 4458 "./stb_image.h"
 var $21=($20|0)!=0; //@line 4458 "./stb_image.h"
 if($21){label=5;break;}else{label=13;break;} //@line 4458 "./stb_image.h"
 case 5: 
 var $23=$2; //@line 4459 "./stb_image.h"
 var $24=(($23+12)|0); //@line 4459 "./stb_image.h"
 var $25=HEAP32[(($24)>>2)]; //@line 4459 "./stb_image.h"
 $result=$25; //@line 4459 "./stb_image.h"
 var $26=$2; //@line 4460 "./stb_image.h"
 var $27=(($26+12)|0); //@line 4460 "./stb_image.h"
 HEAP32[(($27)>>2)]=0; //@line 4460 "./stb_image.h"
 var $28=$6; //@line 4461 "./stb_image.h"
 var $29=($28|0)!=0; //@line 4461 "./stb_image.h"
 if($29){label=6;break;}else{label=10;break;} //@line 4461 "./stb_image.h"
 case 6: 
 var $31=$6; //@line 4461 "./stb_image.h"
 var $32=$2; //@line 4461 "./stb_image.h"
 var $33=(($32)|0); //@line 4461 "./stb_image.h"
 var $34=HEAP32[(($33)>>2)]; //@line 4461 "./stb_image.h"
 var $35=(($34+12)|0); //@line 4461 "./stb_image.h"
 var $36=HEAP32[(($35)>>2)]; //@line 4461 "./stb_image.h"
 var $37=($31|0)!=($36|0); //@line 4461 "./stb_image.h"
 if($37){label=7;break;}else{label=10;break;} //@line 4461 "./stb_image.h"
 case 7: 
 var $39=$result; //@line 4462 "./stb_image.h"
 var $40=$2; //@line 4462 "./stb_image.h"
 var $41=(($40)|0); //@line 4462 "./stb_image.h"
 var $42=HEAP32[(($41)>>2)]; //@line 4462 "./stb_image.h"
 var $43=(($42+12)|0); //@line 4462 "./stb_image.h"
 var $44=HEAP32[(($43)>>2)]; //@line 4462 "./stb_image.h"
 var $45=$6; //@line 4462 "./stb_image.h"
 var $46=$2; //@line 4462 "./stb_image.h"
 var $47=(($46)|0); //@line 4462 "./stb_image.h"
 var $48=HEAP32[(($47)>>2)]; //@line 4462 "./stb_image.h"
 var $49=(($48)|0); //@line 4462 "./stb_image.h"
 var $50=HEAP32[(($49)>>2)]; //@line 4462 "./stb_image.h"
 var $51=$2; //@line 4462 "./stb_image.h"
 var $52=(($51)|0); //@line 4462 "./stb_image.h"
 var $53=HEAP32[(($52)>>2)]; //@line 4462 "./stb_image.h"
 var $54=(($53+4)|0); //@line 4462 "./stb_image.h"
 var $55=HEAP32[(($54)>>2)]; //@line 4462 "./stb_image.h"
 var $56=_stbi__convert_format($39,$44,$45,$50,$55); //@line 4462 "./stb_image.h"
 $result=$56; //@line 4462 "./stb_image.h"
 var $57=$6; //@line 4463 "./stb_image.h"
 var $58=$2; //@line 4463 "./stb_image.h"
 var $59=(($58)|0); //@line 4463 "./stb_image.h"
 var $60=HEAP32[(($59)>>2)]; //@line 4463 "./stb_image.h"
 var $61=(($60+12)|0); //@line 4463 "./stb_image.h"
 HEAP32[(($61)>>2)]=$57; //@line 4463 "./stb_image.h"
 var $62=$result; //@line 4464 "./stb_image.h"
 var $63=($62|0)==0; //@line 4464 "./stb_image.h"
 if($63){label=8;break;}else{label=9;break;} //@line 4464 "./stb_image.h"
 case 8: 
 var $65=$result; //@line 4464 "./stb_image.h"
 $1=$65; //@line 4464 "./stb_image.h"
 label=14;break; //@line 4464 "./stb_image.h"
 case 9: 
 label=10;break; //@line 4465 "./stb_image.h"
 case 10: 
 var $68=$2; //@line 4466 "./stb_image.h"
 var $69=(($68)|0); //@line 4466 "./stb_image.h"
 var $70=HEAP32[(($69)>>2)]; //@line 4466 "./stb_image.h"
 var $71=(($70)|0); //@line 4466 "./stb_image.h"
 var $72=HEAP32[(($71)>>2)]; //@line 4466 "./stb_image.h"
 var $73=$3; //@line 4466 "./stb_image.h"
 HEAP32[(($73)>>2)]=$72; //@line 4466 "./stb_image.h"
 var $74=$2; //@line 4467 "./stb_image.h"
 var $75=(($74)|0); //@line 4467 "./stb_image.h"
 var $76=HEAP32[(($75)>>2)]; //@line 4467 "./stb_image.h"
 var $77=(($76+4)|0); //@line 4467 "./stb_image.h"
 var $78=HEAP32[(($77)>>2)]; //@line 4467 "./stb_image.h"
 var $79=$4; //@line 4467 "./stb_image.h"
 HEAP32[(($79)>>2)]=$78; //@line 4467 "./stb_image.h"
 var $80=$5; //@line 4468 "./stb_image.h"
 var $81=($80|0)!=0; //@line 4468 "./stb_image.h"
 if($81){label=11;break;}else{label=12;break;} //@line 4468 "./stb_image.h"
 case 11: 
 var $83=$2; //@line 4468 "./stb_image.h"
 var $84=(($83)|0); //@line 4468 "./stb_image.h"
 var $85=HEAP32[(($84)>>2)]; //@line 4468 "./stb_image.h"
 var $86=(($85+12)|0); //@line 4468 "./stb_image.h"
 var $87=HEAP32[(($86)>>2)]; //@line 4468 "./stb_image.h"
 var $88=$5; //@line 4468 "./stb_image.h"
 HEAP32[(($88)>>2)]=$87; //@line 4468 "./stb_image.h"
 label=12;break; //@line 4468 "./stb_image.h"
 case 12: 
 label=13;break; //@line 4469 "./stb_image.h"
 case 13: 
 var $91=$2; //@line 4470 "./stb_image.h"
 var $92=(($91+12)|0); //@line 4470 "./stb_image.h"
 var $93=HEAP32[(($92)>>2)]; //@line 4470 "./stb_image.h"
 _free($93); //@line 4470 "./stb_image.h"
 var $94=$2; //@line 4470 "./stb_image.h"
 var $95=(($94+12)|0); //@line 4470 "./stb_image.h"
 HEAP32[(($95)>>2)]=0; //@line 4470 "./stb_image.h"
 var $96=$2; //@line 4471 "./stb_image.h"
 var $97=(($96+8)|0); //@line 4471 "./stb_image.h"
 var $98=HEAP32[(($97)>>2)]; //@line 4471 "./stb_image.h"
 _free($98); //@line 4471 "./stb_image.h"
 var $99=$2; //@line 4471 "./stb_image.h"
 var $100=(($99+8)|0); //@line 4471 "./stb_image.h"
 HEAP32[(($100)>>2)]=0; //@line 4471 "./stb_image.h"
 var $101=$2; //@line 4472 "./stb_image.h"
 var $102=(($101+4)|0); //@line 4472 "./stb_image.h"
 var $103=HEAP32[(($102)>>2)]; //@line 4472 "./stb_image.h"
 _free($103); //@line 4472 "./stb_image.h"
 var $104=$2; //@line 4472 "./stb_image.h"
 var $105=(($104+4)|0); //@line 4472 "./stb_image.h"
 HEAP32[(($105)>>2)]=0; //@line 4472 "./stb_image.h"
 var $106=$result; //@line 4474 "./stb_image.h"
 $1=$106; //@line 4474 "./stb_image.h"
 label=14;break; //@line 4474 "./stb_image.h"
 case 14: 
 var $108=$1; //@line 4475 "./stb_image.h"
 STACKTOP=sp;return $108; //@line 4475 "./stb_image.h"
  default: assert(0, "bad label: " + label);
 }

}


function _stbi__setup_jpeg($j){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 $1=$j;
 var $2=$1; //@line 3236 "./stb_image.h"
 var $3=(($2+18176)|0); //@line 3236 "./stb_image.h"
 HEAP32[(($3)>>2)]=16; //@line 3236 "./stb_image.h"
 var $4=$1; //@line 3237 "./stb_image.h"
 var $5=(($4+18180)|0); //@line 3237 "./stb_image.h"
 HEAP32[(($5)>>2)]=4; //@line 3237 "./stb_image.h"
 var $6=$1; //@line 3238 "./stb_image.h"
 var $7=(($6+18184)|0); //@line 3238 "./stb_image.h"
 HEAP32[(($7)>>2)]=60; //@line 3238 "./stb_image.h"
 STACKTOP=sp;return; //@line 3257 "./stb_image.h"
}


function _load_jpeg_image($z,$out_x,$out_y,$comp,$req_comp){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+144)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 var $n;
 var $decode_n;
 var $k;
 var $i;
 var $j;
 var $output;
 var $coutput=sp;
 var $res_comp=(sp)+(16);
 var $r;
 var $out;
 var $r1;
 var $y_bot;
 var $y;
 var $y2;
 $2=$z;
 $3=$out_x;
 $4=$out_y;
 $5=$comp;
 $6=$req_comp;
 var $7=$2; //@line 3294 "./stb_image.h"
 var $8=(($7)|0); //@line 3294 "./stb_image.h"
 var $9=HEAP32[(($8)>>2)]; //@line 3294 "./stb_image.h"
 var $10=(($9+8)|0); //@line 3294 "./stb_image.h"
 HEAP32[(($10)>>2)]=0; //@line 3294 "./stb_image.h"
 var $11=$6; //@line 3297 "./stb_image.h"
 var $12=($11|0)<0; //@line 3297 "./stb_image.h"
 if($12){label=3;break;}else{label=2;break;} //@line 3297 "./stb_image.h"
 case 2: 
 var $14=$6; //@line 3297 "./stb_image.h"
 var $15=($14|0)>4; //@line 3297 "./stb_image.h"
 if($15){label=3;break;}else{label=4;break;} //@line 3297 "./stb_image.h"
 case 3: 
 var $17=_stbi__err(139824); //@line 3297 "./stb_image.h"
 var $18=($17|0)!=0; //@line 3297 "./stb_image.h"
 var $19=($18?0:0); //@line 3297 "./stb_image.h"
 var $20=$19; //@line 3297 "./stb_image.h"
 $1=$20; //@line 3297 "./stb_image.h"
 label=79;break; //@line 3297 "./stb_image.h"
 case 4: 
 var $22=$2; //@line 3300 "./stb_image.h"
 var $23=_stbi__decode_jpeg_image($22); //@line 3300 "./stb_image.h"
 var $24=($23|0)!=0; //@line 3300 "./stb_image.h"
 if($24){label=6;break;}else{label=5;break;} //@line 3300 "./stb_image.h"
 case 5: 
 var $26=$2; //@line 3300 "./stb_image.h"
 _stbi__cleanup_jpeg($26); //@line 3300 "./stb_image.h"
 $1=0; //@line 3300 "./stb_image.h"
 label=79;break; //@line 3300 "./stb_image.h"
 case 6: 
 var $28=$6; //@line 3303 "./stb_image.h"
 var $29=($28|0)!=0; //@line 3303 "./stb_image.h"
 if($29){label=7;break;}else{label=8;break;} //@line 3303 "./stb_image.h"
 case 7: 
 var $31=$6; //@line 3303 "./stb_image.h"
 var $39=$31;label=9;break; //@line 3303 "./stb_image.h"
 case 8: 
 var $33=$2; //@line 3303 "./stb_image.h"
 var $34=(($33)|0); //@line 3303 "./stb_image.h"
 var $35=HEAP32[(($34)>>2)]; //@line 3303 "./stb_image.h"
 var $36=(($35+8)|0); //@line 3303 "./stb_image.h"
 var $37=HEAP32[(($36)>>2)]; //@line 3303 "./stb_image.h"
 var $39=$37;label=9;break; //@line 3303 "./stb_image.h"
 case 9: 
 var $39; //@line 3303 "./stb_image.h"
 $n=$39; //@line 3303 "./stb_image.h"
 var $40=$2; //@line 3305 "./stb_image.h"
 var $41=(($40)|0); //@line 3305 "./stb_image.h"
 var $42=HEAP32[(($41)>>2)]; //@line 3305 "./stb_image.h"
 var $43=(($42+8)|0); //@line 3305 "./stb_image.h"
 var $44=HEAP32[(($43)>>2)]; //@line 3305 "./stb_image.h"
 var $45=($44|0)==3; //@line 3305 "./stb_image.h"
 if($45){label=10;break;}else{label=12;break;} //@line 3305 "./stb_image.h"
 case 10: 
 var $47=$n; //@line 3305 "./stb_image.h"
 var $48=($47|0)<3; //@line 3305 "./stb_image.h"
 if($48){label=11;break;}else{label=12;break;} //@line 3305 "./stb_image.h"
 case 11: 
 $decode_n=1; //@line 3306 "./stb_image.h"
 label=13;break; //@line 3306 "./stb_image.h"
 case 12: 
 var $51=$2; //@line 3308 "./stb_image.h"
 var $52=(($51)|0); //@line 3308 "./stb_image.h"
 var $53=HEAP32[(($52)>>2)]; //@line 3308 "./stb_image.h"
 var $54=(($53+8)|0); //@line 3308 "./stb_image.h"
 var $55=HEAP32[(($54)>>2)]; //@line 3308 "./stb_image.h"
 $decode_n=$55; //@line 3308 "./stb_image.h"
 label=13;break;
 case 13: 
 $k=0; //@line 3319 "./stb_image.h"
 label=14;break; //@line 3319 "./stb_image.h"
 case 14: 
 var $58=$k; //@line 3319 "./stb_image.h"
 var $59=$decode_n; //@line 3319 "./stb_image.h"
 var $60=($58|0)<($59|0); //@line 3319 "./stb_image.h"
 if($60){label=15;break;}else{label=35;break;} //@line 3319 "./stb_image.h"
 case 15: 
 var $62=$k; //@line 3320 "./stb_image.h"
 var $63=(($res_comp+($62<<5))|0); //@line 3320 "./stb_image.h"
 $r=$63; //@line 3320 "./stb_image.h"
 var $64=$2; //@line 3324 "./stb_image.h"
 var $65=(($64)|0); //@line 3324 "./stb_image.h"
 var $66=HEAP32[(($65)>>2)]; //@line 3324 "./stb_image.h"
 var $67=(($66)|0); //@line 3324 "./stb_image.h"
 var $68=HEAP32[(($67)>>2)]; //@line 3324 "./stb_image.h"
 var $69=((($68)+(3))|0); //@line 3324 "./stb_image.h"
 var $70=_stbi__malloc($69); //@line 3324 "./stb_image.h"
 var $71=$k; //@line 3324 "./stb_image.h"
 var $72=$2; //@line 3324 "./stb_image.h"
 var $73=(($72+17820)|0); //@line 3324 "./stb_image.h"
 var $74=(($73+((($71)*(72))&-1))|0); //@line 3324 "./stb_image.h"
 var $75=(($74+56)|0); //@line 3324 "./stb_image.h"
 HEAP32[(($75)>>2)]=$70; //@line 3324 "./stb_image.h"
 var $76=$k; //@line 3325 "./stb_image.h"
 var $77=$2; //@line 3325 "./stb_image.h"
 var $78=(($77+17820)|0); //@line 3325 "./stb_image.h"
 var $79=(($78+((($76)*(72))&-1))|0); //@line 3325 "./stb_image.h"
 var $80=(($79+56)|0); //@line 3325 "./stb_image.h"
 var $81=HEAP32[(($80)>>2)]; //@line 3325 "./stb_image.h"
 var $82=($81|0)!=0; //@line 3325 "./stb_image.h"
 if($82){label=17;break;}else{label=16;break;} //@line 3325 "./stb_image.h"
 case 16: 
 var $84=$2; //@line 3325 "./stb_image.h"
 _stbi__cleanup_jpeg($84); //@line 3325 "./stb_image.h"
 var $85=_stbi__err(138952); //@line 3325 "./stb_image.h"
 var $86=($85|0)!=0; //@line 3325 "./stb_image.h"
 var $87=($86?0:0); //@line 3325 "./stb_image.h"
 var $88=$87; //@line 3325 "./stb_image.h"
 $1=$88; //@line 3325 "./stb_image.h"
 label=79;break; //@line 3325 "./stb_image.h"
 case 17: 
 var $90=$2; //@line 3327 "./stb_image.h"
 var $91=(($90+17796)|0); //@line 3327 "./stb_image.h"
 var $92=HEAP32[(($91)>>2)]; //@line 3327 "./stb_image.h"
 var $93=$k; //@line 3327 "./stb_image.h"
 var $94=$2; //@line 3327 "./stb_image.h"
 var $95=(($94+17820)|0); //@line 3327 "./stb_image.h"
 var $96=(($95+((($93)*(72))&-1))|0); //@line 3327 "./stb_image.h"
 var $97=(($96+4)|0); //@line 3327 "./stb_image.h"
 var $98=HEAP32[(($97)>>2)]; //@line 3327 "./stb_image.h"
 var $99=(((($92|0))/(($98|0)))&-1); //@line 3327 "./stb_image.h"
 var $100=$r; //@line 3327 "./stb_image.h"
 var $101=(($100+12)|0); //@line 3327 "./stb_image.h"
 HEAP32[(($101)>>2)]=$99; //@line 3327 "./stb_image.h"
 var $102=$2; //@line 3328 "./stb_image.h"
 var $103=(($102+17800)|0); //@line 3328 "./stb_image.h"
 var $104=HEAP32[(($103)>>2)]; //@line 3328 "./stb_image.h"
 var $105=$k; //@line 3328 "./stb_image.h"
 var $106=$2; //@line 3328 "./stb_image.h"
 var $107=(($106+17820)|0); //@line 3328 "./stb_image.h"
 var $108=(($107+((($105)*(72))&-1))|0); //@line 3328 "./stb_image.h"
 var $109=(($108+8)|0); //@line 3328 "./stb_image.h"
 var $110=HEAP32[(($109)>>2)]; //@line 3328 "./stb_image.h"
 var $111=(((($104|0))/(($110|0)))&-1); //@line 3328 "./stb_image.h"
 var $112=$r; //@line 3328 "./stb_image.h"
 var $113=(($112+16)|0); //@line 3328 "./stb_image.h"
 HEAP32[(($113)>>2)]=$111; //@line 3328 "./stb_image.h"
 var $114=$r; //@line 3329 "./stb_image.h"
 var $115=(($114+16)|0); //@line 3329 "./stb_image.h"
 var $116=HEAP32[(($115)>>2)]; //@line 3329 "./stb_image.h"
 var $117=$116>>1; //@line 3329 "./stb_image.h"
 var $118=$r; //@line 3329 "./stb_image.h"
 var $119=(($118+24)|0); //@line 3329 "./stb_image.h"
 HEAP32[(($119)>>2)]=$117; //@line 3329 "./stb_image.h"
 var $120=$2; //@line 3330 "./stb_image.h"
 var $121=(($120)|0); //@line 3330 "./stb_image.h"
 var $122=HEAP32[(($121)>>2)]; //@line 3330 "./stb_image.h"
 var $123=(($122)|0); //@line 3330 "./stb_image.h"
 var $124=HEAP32[(($123)>>2)]; //@line 3330 "./stb_image.h"
 var $125=$r; //@line 3330 "./stb_image.h"
 var $126=(($125+12)|0); //@line 3330 "./stb_image.h"
 var $127=HEAP32[(($126)>>2)]; //@line 3330 "./stb_image.h"
 var $128=((($124)+($127))|0); //@line 3330 "./stb_image.h"
 var $129=((($128)-(1))|0); //@line 3330 "./stb_image.h"
 var $130=$r; //@line 3330 "./stb_image.h"
 var $131=(($130+12)|0); //@line 3330 "./stb_image.h"
 var $132=HEAP32[(($131)>>2)]; //@line 3330 "./stb_image.h"
 var $133=(((($129>>>0))/(($132>>>0)))&-1); //@line 3330 "./stb_image.h"
 var $134=$r; //@line 3330 "./stb_image.h"
 var $135=(($134+20)|0); //@line 3330 "./stb_image.h"
 HEAP32[(($135)>>2)]=$133; //@line 3330 "./stb_image.h"
 var $136=$r; //@line 3331 "./stb_image.h"
 var $137=(($136+28)|0); //@line 3331 "./stb_image.h"
 HEAP32[(($137)>>2)]=0; //@line 3331 "./stb_image.h"
 var $138=$k; //@line 3332 "./stb_image.h"
 var $139=$2; //@line 3332 "./stb_image.h"
 var $140=(($139+17820)|0); //@line 3332 "./stb_image.h"
 var $141=(($140+((($138)*(72))&-1))|0); //@line 3332 "./stb_image.h"
 var $142=(($141+44)|0); //@line 3332 "./stb_image.h"
 var $143=HEAP32[(($142)>>2)]; //@line 3332 "./stb_image.h"
 var $144=$r; //@line 3332 "./stb_image.h"
 var $145=(($144+8)|0); //@line 3332 "./stb_image.h"
 HEAP32[(($145)>>2)]=$143; //@line 3332 "./stb_image.h"
 var $146=$r; //@line 3332 "./stb_image.h"
 var $147=(($146+4)|0); //@line 3332 "./stb_image.h"
 HEAP32[(($147)>>2)]=$143; //@line 3332 "./stb_image.h"
 var $148=$r; //@line 3334 "./stb_image.h"
 var $149=(($148+12)|0); //@line 3334 "./stb_image.h"
 var $150=HEAP32[(($149)>>2)]; //@line 3334 "./stb_image.h"
 var $151=($150|0)==1; //@line 3334 "./stb_image.h"
 if($151){label=18;break;}else{label=20;break;} //@line 3334 "./stb_image.h"
 case 18: 
 var $153=$r; //@line 3334 "./stb_image.h"
 var $154=(($153+16)|0); //@line 3334 "./stb_image.h"
 var $155=HEAP32[(($154)>>2)]; //@line 3334 "./stb_image.h"
 var $156=($155|0)==1; //@line 3334 "./stb_image.h"
 if($156){label=19;break;}else{label=20;break;} //@line 3334 "./stb_image.h"
 case 19: 
 var $158=$r; //@line 3334 "./stb_image.h"
 var $159=(($158)|0); //@line 3334 "./stb_image.h"
 HEAP32[(($159)>>2)]=38; //@line 3334 "./stb_image.h"
 label=33;break; //@line 3334 "./stb_image.h"
 case 20: 
 var $161=$r; //@line 3335 "./stb_image.h"
 var $162=(($161+12)|0); //@line 3335 "./stb_image.h"
 var $163=HEAP32[(($162)>>2)]; //@line 3335 "./stb_image.h"
 var $164=($163|0)==1; //@line 3335 "./stb_image.h"
 if($164){label=21;break;}else{label=23;break;} //@line 3335 "./stb_image.h"
 case 21: 
 var $166=$r; //@line 3335 "./stb_image.h"
 var $167=(($166+16)|0); //@line 3335 "./stb_image.h"
 var $168=HEAP32[(($167)>>2)]; //@line 3335 "./stb_image.h"
 var $169=($168|0)==2; //@line 3335 "./stb_image.h"
 if($169){label=22;break;}else{label=23;break;} //@line 3335 "./stb_image.h"
 case 22: 
 var $171=$r; //@line 3335 "./stb_image.h"
 var $172=(($171)|0); //@line 3335 "./stb_image.h"
 HEAP32[(($172)>>2)]=52; //@line 3335 "./stb_image.h"
 label=32;break; //@line 3335 "./stb_image.h"
 case 23: 
 var $174=$r; //@line 3336 "./stb_image.h"
 var $175=(($174+12)|0); //@line 3336 "./stb_image.h"
 var $176=HEAP32[(($175)>>2)]; //@line 3336 "./stb_image.h"
 var $177=($176|0)==2; //@line 3336 "./stb_image.h"
 if($177){label=24;break;}else{label=26;break;} //@line 3336 "./stb_image.h"
 case 24: 
 var $179=$r; //@line 3336 "./stb_image.h"
 var $180=(($179+16)|0); //@line 3336 "./stb_image.h"
 var $181=HEAP32[(($180)>>2)]; //@line 3336 "./stb_image.h"
 var $182=($181|0)==1; //@line 3336 "./stb_image.h"
 if($182){label=25;break;}else{label=26;break;} //@line 3336 "./stb_image.h"
 case 25: 
 var $184=$r; //@line 3336 "./stb_image.h"
 var $185=(($184)|0); //@line 3336 "./stb_image.h"
 HEAP32[(($185)>>2)]=28; //@line 3336 "./stb_image.h"
 label=31;break; //@line 3336 "./stb_image.h"
 case 26: 
 var $187=$r; //@line 3337 "./stb_image.h"
 var $188=(($187+12)|0); //@line 3337 "./stb_image.h"
 var $189=HEAP32[(($188)>>2)]; //@line 3337 "./stb_image.h"
 var $190=($189|0)==2; //@line 3337 "./stb_image.h"
 if($190){label=27;break;}else{label=29;break;} //@line 3337 "./stb_image.h"
 case 27: 
 var $192=$r; //@line 3337 "./stb_image.h"
 var $193=(($192+16)|0); //@line 3337 "./stb_image.h"
 var $194=HEAP32[(($193)>>2)]; //@line 3337 "./stb_image.h"
 var $195=($194|0)==2; //@line 3337 "./stb_image.h"
 if($195){label=28;break;}else{label=29;break;} //@line 3337 "./stb_image.h"
 case 28: 
 var $197=$2; //@line 3337 "./stb_image.h"
 var $198=(($197+18184)|0); //@line 3337 "./stb_image.h"
 var $199=HEAP32[(($198)>>2)]; //@line 3337 "./stb_image.h"
 var $200=$r; //@line 3337 "./stb_image.h"
 var $201=(($200)|0); //@line 3337 "./stb_image.h"
 HEAP32[(($201)>>2)]=$199; //@line 3337 "./stb_image.h"
 label=30;break; //@line 3337 "./stb_image.h"
 case 29: 
 var $203=$r; //@line 3338 "./stb_image.h"
 var $204=(($203)|0); //@line 3338 "./stb_image.h"
 HEAP32[(($204)>>2)]=76; //@line 3338 "./stb_image.h"
 label=30;break;
 case 30: 
 label=31;break;
 case 31: 
 label=32;break;
 case 32: 
 label=33;break;
 case 33: 
 label=34;break; //@line 3339 "./stb_image.h"
 case 34: 
 var $210=$k; //@line 3319 "./stb_image.h"
 var $211=((($210)+(1))|0); //@line 3319 "./stb_image.h"
 $k=$211; //@line 3319 "./stb_image.h"
 label=14;break; //@line 3319 "./stb_image.h"
 case 35: 
 var $213=$n; //@line 3342 "./stb_image.h"
 var $214=$2; //@line 3342 "./stb_image.h"
 var $215=(($214)|0); //@line 3342 "./stb_image.h"
 var $216=HEAP32[(($215)>>2)]; //@line 3342 "./stb_image.h"
 var $217=(($216)|0); //@line 3342 "./stb_image.h"
 var $218=HEAP32[(($217)>>2)]; //@line 3342 "./stb_image.h"
 var $219=(Math_imul($213,$218)|0); //@line 3342 "./stb_image.h"
 var $220=$2; //@line 3342 "./stb_image.h"
 var $221=(($220)|0); //@line 3342 "./stb_image.h"
 var $222=HEAP32[(($221)>>2)]; //@line 3342 "./stb_image.h"
 var $223=(($222+4)|0); //@line 3342 "./stb_image.h"
 var $224=HEAP32[(($223)>>2)]; //@line 3342 "./stb_image.h"
 var $225=(Math_imul($219,$224)|0); //@line 3342 "./stb_image.h"
 var $226=((($225)+(1))|0); //@line 3342 "./stb_image.h"
 var $227=_stbi__malloc($226); //@line 3342 "./stb_image.h"
 $output=$227; //@line 3342 "./stb_image.h"
 var $228=$output; //@line 3343 "./stb_image.h"
 var $229=($228|0)!=0; //@line 3343 "./stb_image.h"
 if($229){label=37;break;}else{label=36;break;} //@line 3343 "./stb_image.h"
 case 36: 
 var $231=$2; //@line 3343 "./stb_image.h"
 _stbi__cleanup_jpeg($231); //@line 3343 "./stb_image.h"
 var $232=_stbi__err(138952); //@line 3343 "./stb_image.h"
 var $233=($232|0)!=0; //@line 3343 "./stb_image.h"
 var $234=($233?0:0); //@line 3343 "./stb_image.h"
 var $235=$234; //@line 3343 "./stb_image.h"
 $1=$235; //@line 3343 "./stb_image.h"
 label=79;break; //@line 3343 "./stb_image.h"
 case 37: 
 $j=0; //@line 3346 "./stb_image.h"
 label=38;break; //@line 3346 "./stb_image.h"
 case 38: 
 var $238=$j; //@line 3346 "./stb_image.h"
 var $239=$2; //@line 3346 "./stb_image.h"
 var $240=(($239)|0); //@line 3346 "./stb_image.h"
 var $241=HEAP32[(($240)>>2)]; //@line 3346 "./stb_image.h"
 var $242=(($241+4)|0); //@line 3346 "./stb_image.h"
 var $243=HEAP32[(($242)>>2)]; //@line 3346 "./stb_image.h"
 var $244=($238>>>0)<($243>>>0); //@line 3346 "./stb_image.h"
 if($244){label=39;break;}else{label=76;break;} //@line 3346 "./stb_image.h"
 case 39: 
 var $246=$output; //@line 3347 "./stb_image.h"
 var $247=$n; //@line 3347 "./stb_image.h"
 var $248=$2; //@line 3347 "./stb_image.h"
 var $249=(($248)|0); //@line 3347 "./stb_image.h"
 var $250=HEAP32[(($249)>>2)]; //@line 3347 "./stb_image.h"
 var $251=(($250)|0); //@line 3347 "./stb_image.h"
 var $252=HEAP32[(($251)>>2)]; //@line 3347 "./stb_image.h"
 var $253=(Math_imul($247,$252)|0); //@line 3347 "./stb_image.h"
 var $254=$j; //@line 3347 "./stb_image.h"
 var $255=(Math_imul($253,$254)|0); //@line 3347 "./stb_image.h"
 var $256=(($246+$255)|0); //@line 3347 "./stb_image.h"
 $out=$256; //@line 3347 "./stb_image.h"
 $k=0; //@line 3348 "./stb_image.h"
 label=40;break; //@line 3348 "./stb_image.h"
 case 40: 
 var $258=$k; //@line 3348 "./stb_image.h"
 var $259=$decode_n; //@line 3348 "./stb_image.h"
 var $260=($258|0)<($259|0); //@line 3348 "./stb_image.h"
 if($260){label=41;break;}else{label=53;break;} //@line 3348 "./stb_image.h"
 case 41: 
 var $262=$k; //@line 3349 "./stb_image.h"
 var $263=(($res_comp+($262<<5))|0); //@line 3349 "./stb_image.h"
 $r1=$263; //@line 3349 "./stb_image.h"
 var $264=$r1; //@line 3350 "./stb_image.h"
 var $265=(($264+24)|0); //@line 3350 "./stb_image.h"
 var $266=HEAP32[(($265)>>2)]; //@line 3350 "./stb_image.h"
 var $267=$r1; //@line 3350 "./stb_image.h"
 var $268=(($267+16)|0); //@line 3350 "./stb_image.h"
 var $269=HEAP32[(($268)>>2)]; //@line 3350 "./stb_image.h"
 var $270=$269>>1; //@line 3350 "./stb_image.h"
 var $271=($266|0)>=($270|0); //@line 3350 "./stb_image.h"
 var $272=($271&1); //@line 3350 "./stb_image.h"
 $y_bot=$272; //@line 3350 "./stb_image.h"
 var $273=$r1; //@line 3351 "./stb_image.h"
 var $274=(($273)|0); //@line 3351 "./stb_image.h"
 var $275=HEAP32[(($274)>>2)]; //@line 3351 "./stb_image.h"
 var $276=$k; //@line 3351 "./stb_image.h"
 var $277=$2; //@line 3351 "./stb_image.h"
 var $278=(($277+17820)|0); //@line 3351 "./stb_image.h"
 var $279=(($278+((($276)*(72))&-1))|0); //@line 3351 "./stb_image.h"
 var $280=(($279+56)|0); //@line 3351 "./stb_image.h"
 var $281=HEAP32[(($280)>>2)]; //@line 3351 "./stb_image.h"
 var $282=$y_bot; //@line 3351 "./stb_image.h"
 var $283=($282|0)!=0; //@line 3351 "./stb_image.h"
 if($283){label=42;break;}else{label=43;break;} //@line 3351 "./stb_image.h"
 case 42: 
 var $285=$r1; //@line 3351 "./stb_image.h"
 var $286=(($285+8)|0); //@line 3351 "./stb_image.h"
 var $287=HEAP32[(($286)>>2)]; //@line 3351 "./stb_image.h"
 var $293=$287;label=44;break; //@line 3351 "./stb_image.h"
 case 43: 
 var $289=$r1; //@line 3351 "./stb_image.h"
 var $290=(($289+4)|0); //@line 3351 "./stb_image.h"
 var $291=HEAP32[(($290)>>2)]; //@line 3351 "./stb_image.h"
 var $293=$291;label=44;break; //@line 3351 "./stb_image.h"
 case 44: 
 var $293; //@line 3351 "./stb_image.h"
 var $294=$y_bot; //@line 3351 "./stb_image.h"
 var $295=($294|0)!=0; //@line 3351 "./stb_image.h"
 if($295){label=45;break;}else{label=46;break;} //@line 3351 "./stb_image.h"
 case 45: 
 var $297=$r1; //@line 3351 "./stb_image.h"
 var $298=(($297+4)|0); //@line 3351 "./stb_image.h"
 var $299=HEAP32[(($298)>>2)]; //@line 3351 "./stb_image.h"
 var $305=$299;label=47;break; //@line 3351 "./stb_image.h"
 case 46: 
 var $301=$r1; //@line 3351 "./stb_image.h"
 var $302=(($301+8)|0); //@line 3351 "./stb_image.h"
 var $303=HEAP32[(($302)>>2)]; //@line 3351 "./stb_image.h"
 var $305=$303;label=47;break; //@line 3351 "./stb_image.h"
 case 47: 
 var $305; //@line 3351 "./stb_image.h"
 var $306=$r1; //@line 3351 "./stb_image.h"
 var $307=(($306+20)|0); //@line 3351 "./stb_image.h"
 var $308=HEAP32[(($307)>>2)]; //@line 3351 "./stb_image.h"
 var $309=$r1; //@line 3351 "./stb_image.h"
 var $310=(($309+12)|0); //@line 3351 "./stb_image.h"
 var $311=HEAP32[(($310)>>2)]; //@line 3351 "./stb_image.h"
 var $312=FUNCTION_TABLE[$275]($281,$293,$305,$308,$311); //@line 3351 "./stb_image.h"
 var $313=$k; //@line 3351 "./stb_image.h"
 var $314=(($coutput+($313<<2))|0); //@line 3351 "./stb_image.h"
 HEAP32[(($314)>>2)]=$312; //@line 3351 "./stb_image.h"
 var $315=$r1; //@line 3355 "./stb_image.h"
 var $316=(($315+24)|0); //@line 3355 "./stb_image.h"
 var $317=HEAP32[(($316)>>2)]; //@line 3355 "./stb_image.h"
 var $318=((($317)+(1))|0); //@line 3355 "./stb_image.h"
 HEAP32[(($316)>>2)]=$318; //@line 3355 "./stb_image.h"
 var $319=$r1; //@line 3355 "./stb_image.h"
 var $320=(($319+16)|0); //@line 3355 "./stb_image.h"
 var $321=HEAP32[(($320)>>2)]; //@line 3355 "./stb_image.h"
 var $322=($318|0)>=($321|0); //@line 3355 "./stb_image.h"
 if($322){label=48;break;}else{label=51;break;} //@line 3355 "./stb_image.h"
 case 48: 
 var $324=$r1; //@line 3356 "./stb_image.h"
 var $325=(($324+24)|0); //@line 3356 "./stb_image.h"
 HEAP32[(($325)>>2)]=0; //@line 3356 "./stb_image.h"
 var $326=$r1; //@line 3357 "./stb_image.h"
 var $327=(($326+8)|0); //@line 3357 "./stb_image.h"
 var $328=HEAP32[(($327)>>2)]; //@line 3357 "./stb_image.h"
 var $329=$r1; //@line 3357 "./stb_image.h"
 var $330=(($329+4)|0); //@line 3357 "./stb_image.h"
 HEAP32[(($330)>>2)]=$328; //@line 3357 "./stb_image.h"
 var $331=$r1; //@line 3358 "./stb_image.h"
 var $332=(($331+28)|0); //@line 3358 "./stb_image.h"
 var $333=HEAP32[(($332)>>2)]; //@line 3358 "./stb_image.h"
 var $334=((($333)+(1))|0); //@line 3358 "./stb_image.h"
 HEAP32[(($332)>>2)]=$334; //@line 3358 "./stb_image.h"
 var $335=$k; //@line 3358 "./stb_image.h"
 var $336=$2; //@line 3358 "./stb_image.h"
 var $337=(($336+17820)|0); //@line 3358 "./stb_image.h"
 var $338=(($337+((($335)*(72))&-1))|0); //@line 3358 "./stb_image.h"
 var $339=(($338+32)|0); //@line 3358 "./stb_image.h"
 var $340=HEAP32[(($339)>>2)]; //@line 3358 "./stb_image.h"
 var $341=($334|0)<($340|0); //@line 3358 "./stb_image.h"
 if($341){label=49;break;}else{label=50;break;} //@line 3358 "./stb_image.h"
 case 49: 
 var $343=$k; //@line 3359 "./stb_image.h"
 var $344=$2; //@line 3359 "./stb_image.h"
 var $345=(($344+17820)|0); //@line 3359 "./stb_image.h"
 var $346=(($345+((($343)*(72))&-1))|0); //@line 3359 "./stb_image.h"
 var $347=(($346+36)|0); //@line 3359 "./stb_image.h"
 var $348=HEAP32[(($347)>>2)]; //@line 3359 "./stb_image.h"
 var $349=$r1; //@line 3359 "./stb_image.h"
 var $350=(($349+8)|0); //@line 3359 "./stb_image.h"
 var $351=HEAP32[(($350)>>2)]; //@line 3359 "./stb_image.h"
 var $352=(($351+$348)|0); //@line 3359 "./stb_image.h"
 HEAP32[(($350)>>2)]=$352; //@line 3359 "./stb_image.h"
 label=50;break; //@line 3359 "./stb_image.h"
 case 50: 
 label=51;break; //@line 3360 "./stb_image.h"
 case 51: 
 label=52;break; //@line 3361 "./stb_image.h"
 case 52: 
 var $356=$k; //@line 3348 "./stb_image.h"
 var $357=((($356)+(1))|0); //@line 3348 "./stb_image.h"
 $k=$357; //@line 3348 "./stb_image.h"
 label=40;break; //@line 3348 "./stb_image.h"
 case 53: 
 var $359=$n; //@line 3362 "./stb_image.h"
 var $360=($359|0)>=3; //@line 3362 "./stb_image.h"
 if($360){label=54;break;}else{label=62;break;} //@line 3362 "./stb_image.h"
 case 54: 
 var $362=(($coutput)|0); //@line 3363 "./stb_image.h"
 var $363=HEAP32[(($362)>>2)]; //@line 3363 "./stb_image.h"
 $y=$363; //@line 3363 "./stb_image.h"
 var $364=$2; //@line 3364 "./stb_image.h"
 var $365=(($364)|0); //@line 3364 "./stb_image.h"
 var $366=HEAP32[(($365)>>2)]; //@line 3364 "./stb_image.h"
 var $367=(($366+8)|0); //@line 3364 "./stb_image.h"
 var $368=HEAP32[(($367)>>2)]; //@line 3364 "./stb_image.h"
 var $369=($368|0)==3; //@line 3364 "./stb_image.h"
 if($369){label=55;break;}else{label=56;break;} //@line 3364 "./stb_image.h"
 case 55: 
 var $371=$2; //@line 3365 "./stb_image.h"
 var $372=(($371+18180)|0); //@line 3365 "./stb_image.h"
 var $373=HEAP32[(($372)>>2)]; //@line 3365 "./stb_image.h"
 var $374=$out; //@line 3365 "./stb_image.h"
 var $375=$y; //@line 3365 "./stb_image.h"
 var $376=(($coutput+4)|0); //@line 3365 "./stb_image.h"
 var $377=HEAP32[(($376)>>2)]; //@line 3365 "./stb_image.h"
 var $378=(($coutput+8)|0); //@line 3365 "./stb_image.h"
 var $379=HEAP32[(($378)>>2)]; //@line 3365 "./stb_image.h"
 var $380=$2; //@line 3365 "./stb_image.h"
 var $381=(($380)|0); //@line 3365 "./stb_image.h"
 var $382=HEAP32[(($381)>>2)]; //@line 3365 "./stb_image.h"
 var $383=(($382)|0); //@line 3365 "./stb_image.h"
 var $384=HEAP32[(($383)>>2)]; //@line 3365 "./stb_image.h"
 var $385=$n; //@line 3365 "./stb_image.h"
 FUNCTION_TABLE[$373]($374,$375,$377,$379,$384,$385); //@line 3365 "./stb_image.h"
 label=61;break; //@line 3366 "./stb_image.h"
 case 56: 
 $i=0; //@line 3367 "./stb_image.h"
 label=57;break; //@line 3367 "./stb_image.h"
 case 57: 
 var $388=$i; //@line 3367 "./stb_image.h"
 var $389=$2; //@line 3367 "./stb_image.h"
 var $390=(($389)|0); //@line 3367 "./stb_image.h"
 var $391=HEAP32[(($390)>>2)]; //@line 3367 "./stb_image.h"
 var $392=(($391)|0); //@line 3367 "./stb_image.h"
 var $393=HEAP32[(($392)>>2)]; //@line 3367 "./stb_image.h"
 var $394=($388>>>0)<($393>>>0); //@line 3367 "./stb_image.h"
 if($394){label=58;break;}else{label=60;break;} //@line 3367 "./stb_image.h"
 case 58: 
 var $396=$i; //@line 3368 "./stb_image.h"
 var $397=$y; //@line 3368 "./stb_image.h"
 var $398=(($397+$396)|0); //@line 3368 "./stb_image.h"
 var $399=HEAP8[($398)]; //@line 3368 "./stb_image.h"
 var $400=$out; //@line 3368 "./stb_image.h"
 var $401=(($400+2)|0); //@line 3368 "./stb_image.h"
 HEAP8[($401)]=$399; //@line 3368 "./stb_image.h"
 var $402=$out; //@line 3368 "./stb_image.h"
 var $403=(($402+1)|0); //@line 3368 "./stb_image.h"
 HEAP8[($403)]=$399; //@line 3368 "./stb_image.h"
 var $404=$out; //@line 3368 "./stb_image.h"
 var $405=(($404)|0); //@line 3368 "./stb_image.h"
 HEAP8[($405)]=$399; //@line 3368 "./stb_image.h"
 var $406=$out; //@line 3369 "./stb_image.h"
 var $407=(($406+3)|0); //@line 3369 "./stb_image.h"
 HEAP8[($407)]=-1; //@line 3369 "./stb_image.h"
 var $408=$n; //@line 3370 "./stb_image.h"
 var $409=$out; //@line 3370 "./stb_image.h"
 var $410=(($409+$408)|0); //@line 3370 "./stb_image.h"
 $out=$410; //@line 3370 "./stb_image.h"
 label=59;break; //@line 3371 "./stb_image.h"
 case 59: 
 var $412=$i; //@line 3367 "./stb_image.h"
 var $413=((($412)+(1))|0); //@line 3367 "./stb_image.h"
 $i=$413; //@line 3367 "./stb_image.h"
 label=57;break; //@line 3367 "./stb_image.h"
 case 60: 
 label=61;break;
 case 61: 
 label=74;break; //@line 3372 "./stb_image.h"
 case 62: 
 var $417=(($coutput)|0); //@line 3373 "./stb_image.h"
 var $418=HEAP32[(($417)>>2)]; //@line 3373 "./stb_image.h"
 $y2=$418; //@line 3373 "./stb_image.h"
 var $419=$n; //@line 3374 "./stb_image.h"
 var $420=($419|0)==1; //@line 3374 "./stb_image.h"
 if($420){label=63;break;}else{label=68;break;} //@line 3374 "./stb_image.h"
 case 63: 
 $i=0; //@line 3375 "./stb_image.h"
 label=64;break; //@line 3375 "./stb_image.h"
 case 64: 
 var $423=$i; //@line 3375 "./stb_image.h"
 var $424=$2; //@line 3375 "./stb_image.h"
 var $425=(($424)|0); //@line 3375 "./stb_image.h"
 var $426=HEAP32[(($425)>>2)]; //@line 3375 "./stb_image.h"
 var $427=(($426)|0); //@line 3375 "./stb_image.h"
 var $428=HEAP32[(($427)>>2)]; //@line 3375 "./stb_image.h"
 var $429=($423>>>0)<($428>>>0); //@line 3375 "./stb_image.h"
 if($429){label=65;break;}else{label=67;break;} //@line 3375 "./stb_image.h"
 case 65: 
 var $431=$i; //@line 3375 "./stb_image.h"
 var $432=$y2; //@line 3375 "./stb_image.h"
 var $433=(($432+$431)|0); //@line 3375 "./stb_image.h"
 var $434=HEAP8[($433)]; //@line 3375 "./stb_image.h"
 var $435=$i; //@line 3375 "./stb_image.h"
 var $436=$out; //@line 3375 "./stb_image.h"
 var $437=(($436+$435)|0); //@line 3375 "./stb_image.h"
 HEAP8[($437)]=$434; //@line 3375 "./stb_image.h"
 label=66;break; //@line 3375 "./stb_image.h"
 case 66: 
 var $439=$i; //@line 3375 "./stb_image.h"
 var $440=((($439)+(1))|0); //@line 3375 "./stb_image.h"
 $i=$440; //@line 3375 "./stb_image.h"
 label=64;break; //@line 3375 "./stb_image.h"
 case 67: 
 label=73;break; //@line 3375 "./stb_image.h"
 case 68: 
 $i=0; //@line 3377 "./stb_image.h"
 label=69;break; //@line 3377 "./stb_image.h"
 case 69: 
 var $444=$i; //@line 3377 "./stb_image.h"
 var $445=$2; //@line 3377 "./stb_image.h"
 var $446=(($445)|0); //@line 3377 "./stb_image.h"
 var $447=HEAP32[(($446)>>2)]; //@line 3377 "./stb_image.h"
 var $448=(($447)|0); //@line 3377 "./stb_image.h"
 var $449=HEAP32[(($448)>>2)]; //@line 3377 "./stb_image.h"
 var $450=($444>>>0)<($449>>>0); //@line 3377 "./stb_image.h"
 if($450){label=70;break;}else{label=72;break;} //@line 3377 "./stb_image.h"
 case 70: 
 var $452=$i; //@line 3377 "./stb_image.h"
 var $453=$y2; //@line 3377 "./stb_image.h"
 var $454=(($453+$452)|0); //@line 3377 "./stb_image.h"
 var $455=HEAP8[($454)]; //@line 3377 "./stb_image.h"
 var $456=$out; //@line 3377 "./stb_image.h"
 var $457=(($456+1)|0); //@line 3377 "./stb_image.h"
 $out=$457; //@line 3377 "./stb_image.h"
 HEAP8[($456)]=$455; //@line 3377 "./stb_image.h"
 var $458=$out; //@line 3377 "./stb_image.h"
 var $459=(($458+1)|0); //@line 3377 "./stb_image.h"
 $out=$459; //@line 3377 "./stb_image.h"
 HEAP8[($458)]=-1; //@line 3377 "./stb_image.h"
 label=71;break; //@line 3377 "./stb_image.h"
 case 71: 
 var $461=$i; //@line 3377 "./stb_image.h"
 var $462=((($461)+(1))|0); //@line 3377 "./stb_image.h"
 $i=$462; //@line 3377 "./stb_image.h"
 label=69;break; //@line 3377 "./stb_image.h"
 case 72: 
 label=73;break;
 case 73: 
 label=74;break;
 case 74: 
 label=75;break; //@line 3379 "./stb_image.h"
 case 75: 
 var $467=$j; //@line 3346 "./stb_image.h"
 var $468=((($467)+(1))|0); //@line 3346 "./stb_image.h"
 $j=$468; //@line 3346 "./stb_image.h"
 label=38;break; //@line 3346 "./stb_image.h"
 case 76: 
 var $470=$2; //@line 3380 "./stb_image.h"
 _stbi__cleanup_jpeg($470); //@line 3380 "./stb_image.h"
 var $471=$2; //@line 3381 "./stb_image.h"
 var $472=(($471)|0); //@line 3381 "./stb_image.h"
 var $473=HEAP32[(($472)>>2)]; //@line 3381 "./stb_image.h"
 var $474=(($473)|0); //@line 3381 "./stb_image.h"
 var $475=HEAP32[(($474)>>2)]; //@line 3381 "./stb_image.h"
 var $476=$3; //@line 3381 "./stb_image.h"
 HEAP32[(($476)>>2)]=$475; //@line 3381 "./stb_image.h"
 var $477=$2; //@line 3382 "./stb_image.h"
 var $478=(($477)|0); //@line 3382 "./stb_image.h"
 var $479=HEAP32[(($478)>>2)]; //@line 3382 "./stb_image.h"
 var $480=(($479+4)|0); //@line 3382 "./stb_image.h"
 var $481=HEAP32[(($480)>>2)]; //@line 3382 "./stb_image.h"
 var $482=$4; //@line 3382 "./stb_image.h"
 HEAP32[(($482)>>2)]=$481; //@line 3382 "./stb_image.h"
 var $483=$5; //@line 3383 "./stb_image.h"
 var $484=($483|0)!=0; //@line 3383 "./stb_image.h"
 if($484){label=77;break;}else{label=78;break;} //@line 3383 "./stb_image.h"
 case 77: 
 var $486=$2; //@line 3383 "./stb_image.h"
 var $487=(($486)|0); //@line 3383 "./stb_image.h"
 var $488=HEAP32[(($487)>>2)]; //@line 3383 "./stb_image.h"
 var $489=(($488+8)|0); //@line 3383 "./stb_image.h"
 var $490=HEAP32[(($489)>>2)]; //@line 3383 "./stb_image.h"
 var $491=$5; //@line 3383 "./stb_image.h"
 HEAP32[(($491)>>2)]=$490; //@line 3383 "./stb_image.h"
 label=78;break; //@line 3383 "./stb_image.h"
 case 78: 
 var $493=$output; //@line 3384 "./stb_image.h"
 $1=$493; //@line 3384 "./stb_image.h"
 label=79;break; //@line 3384 "./stb_image.h"
 case 79: 
 var $495=$1; //@line 3386 "./stb_image.h"
 STACKTOP=sp;return $495; //@line 3386 "./stb_image.h"
  default: assert(0, "bad label: " + label);
 }

}


function _stbi__decode_jpeg_image($j){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $m;
 var $x;
 $2=$j;
 $m=0; //@line 2798 "./stb_image.h"
 label=2;break; //@line 2798 "./stb_image.h"
 case 2: 
 var $4=$m; //@line 2798 "./stb_image.h"
 var $5=($4|0)<4; //@line 2798 "./stb_image.h"
 if($5){label=3;break;}else{label=5;break;} //@line 2798 "./stb_image.h"
 case 3: 
 var $7=$m; //@line 2799 "./stb_image.h"
 var $8=$2; //@line 2799 "./stb_image.h"
 var $9=(($8+17820)|0); //@line 2799 "./stb_image.h"
 var $10=(($9+((($7)*(72))&-1))|0); //@line 2799 "./stb_image.h"
 var $11=(($10+48)|0); //@line 2799 "./stb_image.h"
 HEAP32[(($11)>>2)]=0; //@line 2799 "./stb_image.h"
 var $12=$m; //@line 2800 "./stb_image.h"
 var $13=$2; //@line 2800 "./stb_image.h"
 var $14=(($13+17820)|0); //@line 2800 "./stb_image.h"
 var $15=(($14+((($12)*(72))&-1))|0); //@line 2800 "./stb_image.h"
 var $16=(($15+52)|0); //@line 2800 "./stb_image.h"
 HEAP32[(($16)>>2)]=0; //@line 2800 "./stb_image.h"
 label=4;break; //@line 2801 "./stb_image.h"
 case 4: 
 var $18=$m; //@line 2798 "./stb_image.h"
 var $19=((($18)+(1))|0); //@line 2798 "./stb_image.h"
 $m=$19; //@line 2798 "./stb_image.h"
 label=2;break; //@line 2798 "./stb_image.h"
 case 5: 
 var $21=$2; //@line 2802 "./stb_image.h"
 var $22=(($21+18168)|0); //@line 2802 "./stb_image.h"
 HEAP32[(($22)>>2)]=0; //@line 2802 "./stb_image.h"
 var $23=$2; //@line 2803 "./stb_image.h"
 var $24=_stbi__decode_jpeg_header($23,0); //@line 2803 "./stb_image.h"
 var $25=($24|0)!=0; //@line 2803 "./stb_image.h"
 if($25){label=7;break;}else{label=6;break;} //@line 2803 "./stb_image.h"
 case 6: 
 $1=0; //@line 2803 "./stb_image.h"
 label=32;break; //@line 2803 "./stb_image.h"
 case 7: 
 var $28=$2; //@line 2804 "./stb_image.h"
 var $29=_stbi__get_marker($28); //@line 2804 "./stb_image.h"
 var $30=($29&255); //@line 2804 "./stb_image.h"
 $m=$30; //@line 2804 "./stb_image.h"
 label=8;break; //@line 2805 "./stb_image.h"
 case 8: 
 var $32=$m; //@line 2805 "./stb_image.h"
 var $33=($32|0)==217; //@line 2805 "./stb_image.h"
 var $34=$33^1; //@line 2805 "./stb_image.h"
 if($34){label=9;break;}else{label=29;break;} //@line 2805 "./stb_image.h"
 case 9: 
 var $36=$m; //@line 2806 "./stb_image.h"
 var $37=($36|0)==218; //@line 2806 "./stb_image.h"
 if($37){label=10;break;}else{label=25;break;} //@line 2806 "./stb_image.h"
 case 10: 
 var $39=$2; //@line 2807 "./stb_image.h"
 var $40=_stbi__process_scan_header($39); //@line 2807 "./stb_image.h"
 var $41=($40|0)!=0; //@line 2807 "./stb_image.h"
 if($41){label=12;break;}else{label=11;break;} //@line 2807 "./stb_image.h"
 case 11: 
 $1=0; //@line 2807 "./stb_image.h"
 label=32;break; //@line 2807 "./stb_image.h"
 case 12: 
 var $44=$2; //@line 2808 "./stb_image.h"
 var $45=_stbi__parse_entropy_coded_data($44); //@line 2808 "./stb_image.h"
 var $46=($45|0)!=0; //@line 2808 "./stb_image.h"
 if($46){label=14;break;}else{label=13;break;} //@line 2808 "./stb_image.h"
 case 13: 
 $1=0; //@line 2808 "./stb_image.h"
 label=32;break; //@line 2808 "./stb_image.h"
 case 14: 
 var $49=$2; //@line 2809 "./stb_image.h"
 var $50=(($49+18116)|0); //@line 2809 "./stb_image.h"
 var $51=HEAP8[($50)]; //@line 2809 "./stb_image.h"
 var $52=($51&255); //@line 2809 "./stb_image.h"
 var $53=($52|0)==255; //@line 2809 "./stb_image.h"
 if($53){label=15;break;}else{label=24;break;} //@line 2809 "./stb_image.h"
 case 15: 
 label=16;break; //@line 2811 "./stb_image.h"
 case 16: 
 var $56=$2; //@line 2811 "./stb_image.h"
 var $57=(($56)|0); //@line 2811 "./stb_image.h"
 var $58=HEAP32[(($57)>>2)]; //@line 2811 "./stb_image.h"
 var $59=_stbi__at_eof($58); //@line 2811 "./stb_image.h"
 var $60=($59|0)!=0; //@line 2811 "./stb_image.h"
 var $61=$60^1; //@line 2811 "./stb_image.h"
 if($61){label=17;break;}else{label=23;break;} //@line 2811 "./stb_image.h"
 case 17: 
 var $63=$2; //@line 2812 "./stb_image.h"
 var $64=(($63)|0); //@line 2812 "./stb_image.h"
 var $65=HEAP32[(($64)>>2)]; //@line 2812 "./stb_image.h"
 var $66=_stbi__get8($65); //@line 2812 "./stb_image.h"
 var $67=($66&255); //@line 2812 "./stb_image.h"
 $x=$67; //@line 2812 "./stb_image.h"
 var $68=$x; //@line 2813 "./stb_image.h"
 var $69=($68|0)==255; //@line 2813 "./stb_image.h"
 if($69){label=18;break;}else{label=19;break;} //@line 2813 "./stb_image.h"
 case 18: 
 var $71=$2; //@line 2814 "./stb_image.h"
 var $72=(($71)|0); //@line 2814 "./stb_image.h"
 var $73=HEAP32[(($72)>>2)]; //@line 2814 "./stb_image.h"
 var $74=_stbi__get8($73); //@line 2814 "./stb_image.h"
 var $75=$2; //@line 2814 "./stb_image.h"
 var $76=(($75+18116)|0); //@line 2814 "./stb_image.h"
 HEAP8[($76)]=$74; //@line 2814 "./stb_image.h"
 label=23;break; //@line 2815 "./stb_image.h"
 case 19: 
 var $78=$x; //@line 2816 "./stb_image.h"
 var $79=($78|0)!=0; //@line 2816 "./stb_image.h"
 if($79){label=20;break;}else{label=21;break;} //@line 2816 "./stb_image.h"
 case 20: 
 var $81=_stbi__err(139800); //@line 2817 "./stb_image.h"
 $1=$81; //@line 2817 "./stb_image.h"
 label=32;break; //@line 2817 "./stb_image.h"
 case 21: 
 label=22;break;
 case 22: 
 label=16;break; //@line 2819 "./stb_image.h"
 case 23: 
 label=24;break; //@line 2821 "./stb_image.h"
 case 24: 
 label=28;break; //@line 2822 "./stb_image.h"
 case 25: 
 var $87=$2; //@line 2823 "./stb_image.h"
 var $88=$m; //@line 2823 "./stb_image.h"
 var $89=_stbi__process_marker($87,$88); //@line 2823 "./stb_image.h"
 var $90=($89|0)!=0; //@line 2823 "./stb_image.h"
 if($90){label=27;break;}else{label=26;break;} //@line 2823 "./stb_image.h"
 case 26: 
 $1=0; //@line 2823 "./stb_image.h"
 label=32;break; //@line 2823 "./stb_image.h"
 case 27: 
 label=28;break;
 case 28: 
 var $94=$2; //@line 2825 "./stb_image.h"
 var $95=_stbi__get_marker($94); //@line 2825 "./stb_image.h"
 var $96=($95&255); //@line 2825 "./stb_image.h"
 $m=$96; //@line 2825 "./stb_image.h"
 label=8;break; //@line 2826 "./stb_image.h"
 case 29: 
 var $98=$2; //@line 2827 "./stb_image.h"
 var $99=(($98+18124)|0); //@line 2827 "./stb_image.h"
 var $100=HEAP32[(($99)>>2)]; //@line 2827 "./stb_image.h"
 var $101=($100|0)!=0; //@line 2827 "./stb_image.h"
 if($101){label=30;break;}else{label=31;break;} //@line 2827 "./stb_image.h"
 case 30: 
 var $103=$2; //@line 2828 "./stb_image.h"
 _stbi__jpeg_finish($103); //@line 2828 "./stb_image.h"
 label=31;break; //@line 2828 "./stb_image.h"
 case 31: 
 $1=1; //@line 2829 "./stb_image.h"
 label=32;break; //@line 2829 "./stb_image.h"
 case 32: 
 var $106=$1; //@line 2830 "./stb_image.h"
 STACKTOP=sp;return $106; //@line 2830 "./stb_image.h"
  default: assert(0, "bad label: " + label);
 }

}


function _stbi__cleanup_jpeg($j){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $i;
 $1=$j;
 $i=0; //@line 3263 "./stb_image.h"
 label=2;break; //@line 3263 "./stb_image.h"
 case 2: 
 var $3=$i; //@line 3263 "./stb_image.h"
 var $4=$1; //@line 3263 "./stb_image.h"
 var $5=(($4)|0); //@line 3263 "./stb_image.h"
 var $6=HEAP32[(($5)>>2)]; //@line 3263 "./stb_image.h"
 var $7=(($6+8)|0); //@line 3263 "./stb_image.h"
 var $8=HEAP32[(($7)>>2)]; //@line 3263 "./stb_image.h"
 var $9=($3|0)<($8|0); //@line 3263 "./stb_image.h"
 if($9){label=3;break;}else{label=11;break;} //@line 3263 "./stb_image.h"
 case 3: 
 var $11=$i; //@line 3264 "./stb_image.h"
 var $12=$1; //@line 3264 "./stb_image.h"
 var $13=(($12+17820)|0); //@line 3264 "./stb_image.h"
 var $14=(($13+((($11)*(72))&-1))|0); //@line 3264 "./stb_image.h"
 var $15=(($14+48)|0); //@line 3264 "./stb_image.h"
 var $16=HEAP32[(($15)>>2)]; //@line 3264 "./stb_image.h"
 var $17=($16|0)!=0; //@line 3264 "./stb_image.h"
 if($17){label=4;break;}else{label=5;break;} //@line 3264 "./stb_image.h"
 case 4: 
 var $19=$i; //@line 3265 "./stb_image.h"
 var $20=$1; //@line 3265 "./stb_image.h"
 var $21=(($20+17820)|0); //@line 3265 "./stb_image.h"
 var $22=(($21+((($19)*(72))&-1))|0); //@line 3265 "./stb_image.h"
 var $23=(($22+48)|0); //@line 3265 "./stb_image.h"
 var $24=HEAP32[(($23)>>2)]; //@line 3265 "./stb_image.h"
 _free($24); //@line 3265 "./stb_image.h"
 var $25=$i; //@line 3266 "./stb_image.h"
 var $26=$1; //@line 3266 "./stb_image.h"
 var $27=(($26+17820)|0); //@line 3266 "./stb_image.h"
 var $28=(($27+((($25)*(72))&-1))|0); //@line 3266 "./stb_image.h"
 var $29=(($28+48)|0); //@line 3266 "./stb_image.h"
 HEAP32[(($29)>>2)]=0; //@line 3266 "./stb_image.h"
 var $30=$i; //@line 3267 "./stb_image.h"
 var $31=$1; //@line 3267 "./stb_image.h"
 var $32=(($31+17820)|0); //@line 3267 "./stb_image.h"
 var $33=(($32+((($30)*(72))&-1))|0); //@line 3267 "./stb_image.h"
 var $34=(($33+44)|0); //@line 3267 "./stb_image.h"
 HEAP32[(($34)>>2)]=0; //@line 3267 "./stb_image.h"
 label=5;break; //@line 3268 "./stb_image.h"
 case 5: 
 var $36=$i; //@line 3269 "./stb_image.h"
 var $37=$1; //@line 3269 "./stb_image.h"
 var $38=(($37+17820)|0); //@line 3269 "./stb_image.h"
 var $39=(($38+((($36)*(72))&-1))|0); //@line 3269 "./stb_image.h"
 var $40=(($39+52)|0); //@line 3269 "./stb_image.h"
 var $41=HEAP32[(($40)>>2)]; //@line 3269 "./stb_image.h"
 var $42=($41|0)!=0; //@line 3269 "./stb_image.h"
 if($42){label=6;break;}else{label=7;break;} //@line 3269 "./stb_image.h"
 case 6: 
 var $44=$i; //@line 3270 "./stb_image.h"
 var $45=$1; //@line 3270 "./stb_image.h"
 var $46=(($45+17820)|0); //@line 3270 "./stb_image.h"
 var $47=(($46+((($44)*(72))&-1))|0); //@line 3270 "./stb_image.h"
 var $48=(($47+52)|0); //@line 3270 "./stb_image.h"
 var $49=HEAP32[(($48)>>2)]; //@line 3270 "./stb_image.h"
 _free($49); //@line 3270 "./stb_image.h"
 var $50=$i; //@line 3271 "./stb_image.h"
 var $51=$1; //@line 3271 "./stb_image.h"
 var $52=(($51+17820)|0); //@line 3271 "./stb_image.h"
 var $53=(($52+((($50)*(72))&-1))|0); //@line 3271 "./stb_image.h"
 var $54=(($53+52)|0); //@line 3271 "./stb_image.h"
 HEAP32[(($54)>>2)]=0; //@line 3271 "./stb_image.h"
 var $55=$i; //@line 3272 "./stb_image.h"
 var $56=$1; //@line 3272 "./stb_image.h"
 var $57=(($56+17820)|0); //@line 3272 "./stb_image.h"
 var $58=(($57+((($55)*(72))&-1))|0); //@line 3272 "./stb_image.h"
 var $59=(($58+60)|0); //@line 3272 "./stb_image.h"
 HEAP32[(($59)>>2)]=0; //@line 3272 "./stb_image.h"
 label=7;break; //@line 3273 "./stb_image.h"
 case 7: 
 var $61=$i; //@line 3274 "./stb_image.h"
 var $62=$1; //@line 3274 "./stb_image.h"
 var $63=(($62+17820)|0); //@line 3274 "./stb_image.h"
 var $64=(($63+((($61)*(72))&-1))|0); //@line 3274 "./stb_image.h"
 var $65=(($64+56)|0); //@line 3274 "./stb_image.h"
 var $66=HEAP32[(($65)>>2)]; //@line 3274 "./stb_image.h"
 var $67=($66|0)!=0; //@line 3274 "./stb_image.h"
 if($67){label=8;break;}else{label=9;break;} //@line 3274 "./stb_image.h"
 case 8: 
 var $69=$i; //@line 3275 "./stb_image.h"
 var $70=$1; //@line 3275 "./stb_image.h"
 var $71=(($70+17820)|0); //@line 3275 "./stb_image.h"
 var $72=(($71+((($69)*(72))&-1))|0); //@line 3275 "./stb_image.h"
 var $73=(($72+56)|0); //@line 3275 "./stb_image.h"
 var $74=HEAP32[(($73)>>2)]; //@line 3275 "./stb_image.h"
 _free($74); //@line 3275 "./stb_image.h"
 var $75=$i; //@line 3276 "./stb_image.h"
 var $76=$1; //@line 3276 "./stb_image.h"
 var $77=(($76+17820)|0); //@line 3276 "./stb_image.h"
 var $78=(($77+((($75)*(72))&-1))|0); //@line 3276 "./stb_image.h"
 var $79=(($78+56)|0); //@line 3276 "./stb_image.h"
 HEAP32[(($79)>>2)]=0; //@line 3276 "./stb_image.h"
 label=9;break; //@line 3277 "./stb_image.h"
 case 9: 
 label=10;break; //@line 3278 "./stb_image.h"
 case 10: 
 var $82=$i; //@line 3263 "./stb_image.h"
 var $83=((($82)+(1))|0); //@line 3263 "./stb_image.h"
 $i=$83; //@line 3263 "./stb_image.h"
 label=2;break; //@line 3263 "./stb_image.h"
 case 11: 
 STACKTOP=sp;return; //@line 3279 "./stb_image.h"
  default: assert(0, "bad label: " + label);
 }

}


function _resample_row_1($out,$in_near,$in_far,$w,$hs){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 $1=$out;
 $2=$in_near;
 $3=$in_far;
 $4=$w;
 $5=$hs;
 var $6=$2; //@line 2845 "./stb_image.h"
 STACKTOP=sp;return $6; //@line 2845 "./stb_image.h"
}


function _stbi__resample_row_v_2($out,$in_near,$in_far,$w,$hs){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $i;
 $1=$out;
 $2=$in_near;
 $3=$in_far;
 $4=$w;
 $5=$hs;
 $i=0; //@line 2853 "./stb_image.h"
 label=2;break; //@line 2853 "./stb_image.h"
 case 2: 
 var $7=$i; //@line 2853 "./stb_image.h"
 var $8=$4; //@line 2853 "./stb_image.h"
 var $9=($7|0)<($8|0); //@line 2853 "./stb_image.h"
 if($9){label=3;break;}else{label=5;break;} //@line 2853 "./stb_image.h"
 case 3: 
 var $11=$i; //@line 2854 "./stb_image.h"
 var $12=$2; //@line 2854 "./stb_image.h"
 var $13=(($12+$11)|0); //@line 2854 "./stb_image.h"
 var $14=HEAP8[($13)]; //@line 2854 "./stb_image.h"
 var $15=($14&255); //@line 2854 "./stb_image.h"
 var $16=((($15)*(3))&-1); //@line 2854 "./stb_image.h"
 var $17=$i; //@line 2854 "./stb_image.h"
 var $18=$3; //@line 2854 "./stb_image.h"
 var $19=(($18+$17)|0); //@line 2854 "./stb_image.h"
 var $20=HEAP8[($19)]; //@line 2854 "./stb_image.h"
 var $21=($20&255); //@line 2854 "./stb_image.h"
 var $22=((($16)+($21))|0); //@line 2854 "./stb_image.h"
 var $23=((($22)+(2))|0); //@line 2854 "./stb_image.h"
 var $24=$23>>2; //@line 2854 "./stb_image.h"
 var $25=(($24)&255); //@line 2854 "./stb_image.h"
 var $26=$i; //@line 2854 "./stb_image.h"
 var $27=$1; //@line 2854 "./stb_image.h"
 var $28=(($27+$26)|0); //@line 2854 "./stb_image.h"
 HEAP8[($28)]=$25; //@line 2854 "./stb_image.h"
 label=4;break; //@line 2854 "./stb_image.h"
 case 4: 
 var $30=$i; //@line 2853 "./stb_image.h"
 var $31=((($30)+(1))|0); //@line 2853 "./stb_image.h"
 $i=$31; //@line 2853 "./stb_image.h"
 label=2;break; //@line 2853 "./stb_image.h"
 case 5: 
 var $33=$1; //@line 2855 "./stb_image.h"
 STACKTOP=sp;return $33; //@line 2855 "./stb_image.h"
  default: assert(0, "bad label: " + label);
 }

}


function _stbi__resample_row_h_2($out,$in_near,$in_far,$w,$hs){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 var $i;
 var $input;
 var $n;
 $2=$out;
 $3=$in_near;
 $4=$in_far;
 $5=$w;
 $6=$hs;
 var $7=$3; //@line 2862 "./stb_image.h"
 $input=$7; //@line 2862 "./stb_image.h"
 var $8=$5; //@line 2864 "./stb_image.h"
 var $9=($8|0)==1; //@line 2864 "./stb_image.h"
 if($9){label=2;break;}else{label=3;break;} //@line 2864 "./stb_image.h"
 case 2: 
 var $11=$input; //@line 2866 "./stb_image.h"
 var $12=(($11)|0); //@line 2866 "./stb_image.h"
 var $13=HEAP8[($12)]; //@line 2866 "./stb_image.h"
 var $14=$2; //@line 2866 "./stb_image.h"
 var $15=(($14+1)|0); //@line 2866 "./stb_image.h"
 HEAP8[($15)]=$13; //@line 2866 "./stb_image.h"
 var $16=$2; //@line 2866 "./stb_image.h"
 var $17=(($16)|0); //@line 2866 "./stb_image.h"
 HEAP8[($17)]=$13; //@line 2866 "./stb_image.h"
 var $18=$2; //@line 2867 "./stb_image.h"
 $1=$18; //@line 2867 "./stb_image.h"
 label=8;break; //@line 2867 "./stb_image.h"
 case 3: 
 var $20=$input; //@line 2870 "./stb_image.h"
 var $21=(($20)|0); //@line 2870 "./stb_image.h"
 var $22=HEAP8[($21)]; //@line 2870 "./stb_image.h"
 var $23=$2; //@line 2870 "./stb_image.h"
 var $24=(($23)|0); //@line 2870 "./stb_image.h"
 HEAP8[($24)]=$22; //@line 2870 "./stb_image.h"
 var $25=$input; //@line 2871 "./stb_image.h"
 var $26=(($25)|0); //@line 2871 "./stb_image.h"
 var $27=HEAP8[($26)]; //@line 2871 "./stb_image.h"
 var $28=($27&255); //@line 2871 "./stb_image.h"
 var $29=((($28)*(3))&-1); //@line 2871 "./stb_image.h"
 var $30=$input; //@line 2871 "./stb_image.h"
 var $31=(($30+1)|0); //@line 2871 "./stb_image.h"
 var $32=HEAP8[($31)]; //@line 2871 "./stb_image.h"
 var $33=($32&255); //@line 2871 "./stb_image.h"
 var $34=((($29)+($33))|0); //@line 2871 "./stb_image.h"
 var $35=((($34)+(2))|0); //@line 2871 "./stb_image.h"
 var $36=$35>>2; //@line 2871 "./stb_image.h"
 var $37=(($36)&255); //@line 2871 "./stb_image.h"
 var $38=$2; //@line 2871 "./stb_image.h"
 var $39=(($38+1)|0); //@line 2871 "./stb_image.h"
 HEAP8[($39)]=$37; //@line 2871 "./stb_image.h"
 $i=1; //@line 2872 "./stb_image.h"
 label=4;break; //@line 2872 "./stb_image.h"
 case 4: 
 var $41=$i; //@line 2872 "./stb_image.h"
 var $42=$5; //@line 2872 "./stb_image.h"
 var $43=((($42)-(1))|0); //@line 2872 "./stb_image.h"
 var $44=($41|0)<($43|0); //@line 2872 "./stb_image.h"
 if($44){label=5;break;}else{label=7;break;} //@line 2872 "./stb_image.h"
 case 5: 
 var $46=$i; //@line 2873 "./stb_image.h"
 var $47=$input; //@line 2873 "./stb_image.h"
 var $48=(($47+$46)|0); //@line 2873 "./stb_image.h"
 var $49=HEAP8[($48)]; //@line 2873 "./stb_image.h"
 var $50=($49&255); //@line 2873 "./stb_image.h"
 var $51=((($50)*(3))&-1); //@line 2873 "./stb_image.h"
 var $52=((($51)+(2))|0); //@line 2873 "./stb_image.h"
 $n=$52; //@line 2873 "./stb_image.h"
 var $53=$n; //@line 2874 "./stb_image.h"
 var $54=$i; //@line 2874 "./stb_image.h"
 var $55=((($54)-(1))|0); //@line 2874 "./stb_image.h"
 var $56=$input; //@line 2874 "./stb_image.h"
 var $57=(($56+$55)|0); //@line 2874 "./stb_image.h"
 var $58=HEAP8[($57)]; //@line 2874 "./stb_image.h"
 var $59=($58&255); //@line 2874 "./stb_image.h"
 var $60=((($53)+($59))|0); //@line 2874 "./stb_image.h"
 var $61=$60>>2; //@line 2874 "./stb_image.h"
 var $62=(($61)&255); //@line 2874 "./stb_image.h"
 var $63=$i; //@line 2874 "./stb_image.h"
 var $64=($63<<1); //@line 2874 "./stb_image.h"
 var $65=(($64)|0); //@line 2874 "./stb_image.h"
 var $66=$2; //@line 2874 "./stb_image.h"
 var $67=(($66+$65)|0); //@line 2874 "./stb_image.h"
 HEAP8[($67)]=$62; //@line 2874 "./stb_image.h"
 var $68=$n; //@line 2875 "./stb_image.h"
 var $69=$i; //@line 2875 "./stb_image.h"
 var $70=((($69)+(1))|0); //@line 2875 "./stb_image.h"
 var $71=$input; //@line 2875 "./stb_image.h"
 var $72=(($71+$70)|0); //@line 2875 "./stb_image.h"
 var $73=HEAP8[($72)]; //@line 2875 "./stb_image.h"
 var $74=($73&255); //@line 2875 "./stb_image.h"
 var $75=((($68)+($74))|0); //@line 2875 "./stb_image.h"
 var $76=$75>>2; //@line 2875 "./stb_image.h"
 var $77=(($76)&255); //@line 2875 "./stb_image.h"
 var $78=$i; //@line 2875 "./stb_image.h"
 var $79=($78<<1); //@line 2875 "./stb_image.h"
 var $80=((($79)+(1))|0); //@line 2875 "./stb_image.h"
 var $81=$2; //@line 2875 "./stb_image.h"
 var $82=(($81+$80)|0); //@line 2875 "./stb_image.h"
 HEAP8[($82)]=$77; //@line 2875 "./stb_image.h"
 label=6;break; //@line 2876 "./stb_image.h"
 case 6: 
 var $84=$i; //@line 2872 "./stb_image.h"
 var $85=((($84)+(1))|0); //@line 2872 "./stb_image.h"
 $i=$85; //@line 2872 "./stb_image.h"
 label=4;break; //@line 2872 "./stb_image.h"
 case 7: 
 var $87=$5; //@line 2877 "./stb_image.h"
 var $88=((($87)-(2))|0); //@line 2877 "./stb_image.h"
 var $89=$input; //@line 2877 "./stb_image.h"
 var $90=(($89+$88)|0); //@line 2877 "./stb_image.h"
 var $91=HEAP8[($90)]; //@line 2877 "./stb_image.h"
 var $92=($91&255); //@line 2877 "./stb_image.h"
 var $93=((($92)*(3))&-1); //@line 2877 "./stb_image.h"
 var $94=$5; //@line 2877 "./stb_image.h"
 var $95=((($94)-(1))|0); //@line 2877 "./stb_image.h"
 var $96=$input; //@line 2877 "./stb_image.h"
 var $97=(($96+$95)|0); //@line 2877 "./stb_image.h"
 var $98=HEAP8[($97)]; //@line 2877 "./stb_image.h"
 var $99=($98&255); //@line 2877 "./stb_image.h"
 var $100=((($93)+($99))|0); //@line 2877 "./stb_image.h"
 var $101=((($100)+(2))|0); //@line 2877 "./stb_image.h"
 var $102=$101>>2; //@line 2877 "./stb_image.h"
 var $103=(($102)&255); //@line 2877 "./stb_image.h"
 var $104=$i; //@line 2877 "./stb_image.h"
 var $105=($104<<1); //@line 2877 "./stb_image.h"
 var $106=(($105)|0); //@line 2877 "./stb_image.h"
 var $107=$2; //@line 2877 "./stb_image.h"
 var $108=(($107+$106)|0); //@line 2877 "./stb_image.h"
 HEAP8[($108)]=$103; //@line 2877 "./stb_image.h"
 var $109=$5; //@line 2878 "./stb_image.h"
 var $110=((($109)-(1))|0); //@line 2878 "./stb_image.h"
 var $111=$input; //@line 2878 "./stb_image.h"
 var $112=(($111+$110)|0); //@line 2878 "./stb_image.h"
 var $113=HEAP8[($112)]; //@line 2878 "./stb_image.h"
 var $114=$i; //@line 2878 "./stb_image.h"
 var $115=($114<<1); //@line 2878 "./stb_image.h"
 var $116=((($115)+(1))|0); //@line 2878 "./stb_image.h"
 var $117=$2; //@line 2878 "./stb_image.h"
 var $118=(($117+$116)|0); //@line 2878 "./stb_image.h"
 HEAP8[($118)]=$113; //@line 2878 "./stb_image.h"
 var $119=$2; //@line 2883 "./stb_image.h"
 $1=$119; //@line 2883 "./stb_image.h"
 label=8;break; //@line 2883 "./stb_image.h"
 case 8: 
 var $121=$1; //@line 2884 "./stb_image.h"
 STACKTOP=sp;return $121; //@line 2884 "./stb_image.h"
  default: assert(0, "bad label: " + label);
 }

}


function _stbi__resample_row_generic($out,$in_near,$in_far,$w,$hs){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $i;
 var $j;
 $1=$out;
 $2=$in_near;
 $3=$in_far;
 $4=$w;
 $5=$hs;
 $i=0; //@line 3034 "./stb_image.h"
 label=2;break; //@line 3034 "./stb_image.h"
 case 2: 
 var $7=$i; //@line 3034 "./stb_image.h"
 var $8=$4; //@line 3034 "./stb_image.h"
 var $9=($7|0)<($8|0); //@line 3034 "./stb_image.h"
 if($9){label=3;break;}else{label=9;break;} //@line 3034 "./stb_image.h"
 case 3: 
 $j=0; //@line 3035 "./stb_image.h"
 label=4;break; //@line 3035 "./stb_image.h"
 case 4: 
 var $12=$j; //@line 3035 "./stb_image.h"
 var $13=$5; //@line 3035 "./stb_image.h"
 var $14=($12|0)<($13|0); //@line 3035 "./stb_image.h"
 if($14){label=5;break;}else{label=7;break;} //@line 3035 "./stb_image.h"
 case 5: 
 var $16=$i; //@line 3036 "./stb_image.h"
 var $17=$2; //@line 3036 "./stb_image.h"
 var $18=(($17+$16)|0); //@line 3036 "./stb_image.h"
 var $19=HEAP8[($18)]; //@line 3036 "./stb_image.h"
 var $20=$i; //@line 3036 "./stb_image.h"
 var $21=$5; //@line 3036 "./stb_image.h"
 var $22=(Math_imul($20,$21)|0); //@line 3036 "./stb_image.h"
 var $23=$j; //@line 3036 "./stb_image.h"
 var $24=((($22)+($23))|0); //@line 3036 "./stb_image.h"
 var $25=$1; //@line 3036 "./stb_image.h"
 var $26=(($25+$24)|0); //@line 3036 "./stb_image.h"
 HEAP8[($26)]=$19; //@line 3036 "./stb_image.h"
 label=6;break; //@line 3036 "./stb_image.h"
 case 6: 
 var $28=$j; //@line 3035 "./stb_image.h"
 var $29=((($28)+(1))|0); //@line 3035 "./stb_image.h"
 $j=$29; //@line 3035 "./stb_image.h"
 label=4;break; //@line 3035 "./stb_image.h"
 case 7: 
 label=8;break; //@line 3036 "./stb_image.h"
 case 8: 
 var $32=$i; //@line 3034 "./stb_image.h"
 var $33=((($32)+(1))|0); //@line 3034 "./stb_image.h"
 $i=$33; //@line 3034 "./stb_image.h"
 label=2;break; //@line 3034 "./stb_image.h"
 case 9: 
 var $35=$1; //@line 3037 "./stb_image.h"
 STACKTOP=sp;return $35; //@line 3037 "./stb_image.h"
  default: assert(0, "bad label: " + label);
 }

}


function _stbi__process_scan_header($z){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $i;
 var $Ls;
 var $id;
 var $which;
 var $q;
 var $aa;
 $2=$z;
 var $3=$2; //@line 2645 "./stb_image.h"
 var $4=(($3)|0); //@line 2645 "./stb_image.h"
 var $5=HEAP32[(($4)>>2)]; //@line 2645 "./stb_image.h"
 var $6=_stbi__get16be($5); //@line 2645 "./stb_image.h"
 $Ls=$6; //@line 2645 "./stb_image.h"
 var $7=$2; //@line 2646 "./stb_image.h"
 var $8=(($7)|0); //@line 2646 "./stb_image.h"
 var $9=HEAP32[(($8)>>2)]; //@line 2646 "./stb_image.h"
 var $10=_stbi__get8($9); //@line 2646 "./stb_image.h"
 var $11=($10&255); //@line 2646 "./stb_image.h"
 var $12=$2; //@line 2646 "./stb_image.h"
 var $13=(($12+18148)|0); //@line 2646 "./stb_image.h"
 HEAP32[(($13)>>2)]=$11; //@line 2646 "./stb_image.h"
 var $14=$2; //@line 2647 "./stb_image.h"
 var $15=(($14+18148)|0); //@line 2647 "./stb_image.h"
 var $16=HEAP32[(($15)>>2)]; //@line 2647 "./stb_image.h"
 var $17=($16|0)<1; //@line 2647 "./stb_image.h"
 if($17){label=4;break;}else{label=2;break;} //@line 2647 "./stb_image.h"
 case 2: 
 var $19=$2; //@line 2647 "./stb_image.h"
 var $20=(($19+18148)|0); //@line 2647 "./stb_image.h"
 var $21=HEAP32[(($20)>>2)]; //@line 2647 "./stb_image.h"
 var $22=($21|0)>4; //@line 2647 "./stb_image.h"
 if($22){label=4;break;}else{label=3;break;} //@line 2647 "./stb_image.h"
 case 3: 
 var $24=$2; //@line 2647 "./stb_image.h"
 var $25=(($24+18148)|0); //@line 2647 "./stb_image.h"
 var $26=HEAP32[(($25)>>2)]; //@line 2647 "./stb_image.h"
 var $27=$2; //@line 2647 "./stb_image.h"
 var $28=(($27)|0); //@line 2647 "./stb_image.h"
 var $29=HEAP32[(($28)>>2)]; //@line 2647 "./stb_image.h"
 var $30=(($29+8)|0); //@line 2647 "./stb_image.h"
 var $31=HEAP32[(($30)>>2)]; //@line 2647 "./stb_image.h"
 var $32=($26|0)>($31|0); //@line 2647 "./stb_image.h"
 if($32){label=4;break;}else{label=5;break;} //@line 2647 "./stb_image.h"
 case 4: 
 var $34=_stbi__err(139600); //@line 2647 "./stb_image.h"
 $1=$34; //@line 2647 "./stb_image.h"
 label=38;break; //@line 2647 "./stb_image.h"
 case 5: 
 var $36=$Ls; //@line 2648 "./stb_image.h"
 var $37=$2; //@line 2648 "./stb_image.h"
 var $38=(($37+18148)|0); //@line 2648 "./stb_image.h"
 var $39=HEAP32[(($38)>>2)]; //@line 2648 "./stb_image.h"
 var $40=($39<<1); //@line 2648 "./stb_image.h"
 var $41=((($40)+(6))|0); //@line 2648 "./stb_image.h"
 var $42=($36|0)!=($41|0); //@line 2648 "./stb_image.h"
 if($42){label=6;break;}else{label=7;break;} //@line 2648 "./stb_image.h"
 case 6: 
 var $44=_stbi__err(139584); //@line 2648 "./stb_image.h"
 $1=$44; //@line 2648 "./stb_image.h"
 label=38;break; //@line 2648 "./stb_image.h"
 case 7: 
 $i=0; //@line 2649 "./stb_image.h"
 label=8;break; //@line 2649 "./stb_image.h"
 case 8: 
 var $47=$i; //@line 2649 "./stb_image.h"
 var $48=$2; //@line 2649 "./stb_image.h"
 var $49=(($48+18148)|0); //@line 2649 "./stb_image.h"
 var $50=HEAP32[(($49)>>2)]; //@line 2649 "./stb_image.h"
 var $51=($47|0)<($50|0); //@line 2649 "./stb_image.h"
 if($51){label=9;break;}else{label=23;break;} //@line 2649 "./stb_image.h"
 case 9: 
 var $53=$2; //@line 2650 "./stb_image.h"
 var $54=(($53)|0); //@line 2650 "./stb_image.h"
 var $55=HEAP32[(($54)>>2)]; //@line 2650 "./stb_image.h"
 var $56=_stbi__get8($55); //@line 2650 "./stb_image.h"
 var $57=($56&255); //@line 2650 "./stb_image.h"
 $id=$57; //@line 2650 "./stb_image.h"
 var $58=$2; //@line 2651 "./stb_image.h"
 var $59=(($58)|0); //@line 2651 "./stb_image.h"
 var $60=HEAP32[(($59)>>2)]; //@line 2651 "./stb_image.h"
 var $61=_stbi__get8($60); //@line 2651 "./stb_image.h"
 var $62=($61&255); //@line 2651 "./stb_image.h"
 $q=$62; //@line 2651 "./stb_image.h"
 $which=0; //@line 2652 "./stb_image.h"
 label=10;break; //@line 2652 "./stb_image.h"
 case 10: 
 var $64=$which; //@line 2652 "./stb_image.h"
 var $65=$2; //@line 2652 "./stb_image.h"
 var $66=(($65)|0); //@line 2652 "./stb_image.h"
 var $67=HEAP32[(($66)>>2)]; //@line 2652 "./stb_image.h"
 var $68=(($67+8)|0); //@line 2652 "./stb_image.h"
 var $69=HEAP32[(($68)>>2)]; //@line 2652 "./stb_image.h"
 var $70=($64|0)<($69|0); //@line 2652 "./stb_image.h"
 if($70){label=11;break;}else{label=15;break;} //@line 2652 "./stb_image.h"
 case 11: 
 var $72=$which; //@line 2653 "./stb_image.h"
 var $73=$2; //@line 2653 "./stb_image.h"
 var $74=(($73+17820)|0); //@line 2653 "./stb_image.h"
 var $75=(($74+((($72)*(72))&-1))|0); //@line 2653 "./stb_image.h"
 var $76=(($75)|0); //@line 2653 "./stb_image.h"
 var $77=HEAP32[(($76)>>2)]; //@line 2653 "./stb_image.h"
 var $78=$id; //@line 2653 "./stb_image.h"
 var $79=($77|0)==($78|0); //@line 2653 "./stb_image.h"
 if($79){label=12;break;}else{label=13;break;} //@line 2653 "./stb_image.h"
 case 12: 
 label=15;break; //@line 2654 "./stb_image.h"
 case 13: 
 label=14;break; //@line 2654 "./stb_image.h"
 case 14: 
 var $83=$which; //@line 2652 "./stb_image.h"
 var $84=((($83)+(1))|0); //@line 2652 "./stb_image.h"
 $which=$84; //@line 2652 "./stb_image.h"
 label=10;break; //@line 2652 "./stb_image.h"
 case 15: 
 var $86=$which; //@line 2655 "./stb_image.h"
 var $87=$2; //@line 2655 "./stb_image.h"
 var $88=(($87)|0); //@line 2655 "./stb_image.h"
 var $89=HEAP32[(($88)>>2)]; //@line 2655 "./stb_image.h"
 var $90=(($89+8)|0); //@line 2655 "./stb_image.h"
 var $91=HEAP32[(($90)>>2)]; //@line 2655 "./stb_image.h"
 var $92=($86|0)==($91|0); //@line 2655 "./stb_image.h"
 if($92){label=16;break;}else{label=17;break;} //@line 2655 "./stb_image.h"
 case 16: 
 $1=0; //@line 2655 "./stb_image.h"
 label=38;break; //@line 2655 "./stb_image.h"
 case 17: 
 var $95=$q; //@line 2656 "./stb_image.h"
 var $96=$95>>4; //@line 2656 "./stb_image.h"
 var $97=$which; //@line 2656 "./stb_image.h"
 var $98=$2; //@line 2656 "./stb_image.h"
 var $99=(($98+17820)|0); //@line 2656 "./stb_image.h"
 var $100=(($99+((($97)*(72))&-1))|0); //@line 2656 "./stb_image.h"
 var $101=(($100+16)|0); //@line 2656 "./stb_image.h"
 HEAP32[(($101)>>2)]=$96; //@line 2656 "./stb_image.h"
 var $102=$which; //@line 2656 "./stb_image.h"
 var $103=$2; //@line 2656 "./stb_image.h"
 var $104=(($103+17820)|0); //@line 2656 "./stb_image.h"
 var $105=(($104+((($102)*(72))&-1))|0); //@line 2656 "./stb_image.h"
 var $106=(($105+16)|0); //@line 2656 "./stb_image.h"
 var $107=HEAP32[(($106)>>2)]; //@line 2656 "./stb_image.h"
 var $108=($107|0)>3; //@line 2656 "./stb_image.h"
 if($108){label=18;break;}else{label=19;break;} //@line 2656 "./stb_image.h"
 case 18: 
 var $110=_stbi__err(139552); //@line 2656 "./stb_image.h"
 $1=$110; //@line 2656 "./stb_image.h"
 label=38;break; //@line 2656 "./stb_image.h"
 case 19: 
 var $112=$q; //@line 2657 "./stb_image.h"
 var $113=$112&15; //@line 2657 "./stb_image.h"
 var $114=$which; //@line 2657 "./stb_image.h"
 var $115=$2; //@line 2657 "./stb_image.h"
 var $116=(($115+17820)|0); //@line 2657 "./stb_image.h"
 var $117=(($116+((($114)*(72))&-1))|0); //@line 2657 "./stb_image.h"
 var $118=(($117+20)|0); //@line 2657 "./stb_image.h"
 HEAP32[(($118)>>2)]=$113; //@line 2657 "./stb_image.h"
 var $119=$which; //@line 2657 "./stb_image.h"
 var $120=$2; //@line 2657 "./stb_image.h"
 var $121=(($120+17820)|0); //@line 2657 "./stb_image.h"
 var $122=(($121+((($119)*(72))&-1))|0); //@line 2657 "./stb_image.h"
 var $123=(($122+20)|0); //@line 2657 "./stb_image.h"
 var $124=HEAP32[(($123)>>2)]; //@line 2657 "./stb_image.h"
 var $125=($124|0)>3; //@line 2657 "./stb_image.h"
 if($125){label=20;break;}else{label=21;break;} //@line 2657 "./stb_image.h"
 case 20: 
 var $127=_stbi__err(139536); //@line 2657 "./stb_image.h"
 $1=$127; //@line 2657 "./stb_image.h"
 label=38;break; //@line 2657 "./stb_image.h"
 case 21: 
 var $129=$which; //@line 2658 "./stb_image.h"
 var $130=$i; //@line 2658 "./stb_image.h"
 var $131=$2; //@line 2658 "./stb_image.h"
 var $132=(($131+18152)|0); //@line 2658 "./stb_image.h"
 var $133=(($132+($130<<2))|0); //@line 2658 "./stb_image.h"
 HEAP32[(($133)>>2)]=$129; //@line 2658 "./stb_image.h"
 label=22;break; //@line 2659 "./stb_image.h"
 case 22: 
 var $135=$i; //@line 2649 "./stb_image.h"
 var $136=((($135)+(1))|0); //@line 2649 "./stb_image.h"
 $i=$136; //@line 2649 "./stb_image.h"
 label=8;break; //@line 2649 "./stb_image.h"
 case 23: 
 var $138=$2; //@line 2663 "./stb_image.h"
 var $139=(($138)|0); //@line 2663 "./stb_image.h"
 var $140=HEAP32[(($139)>>2)]; //@line 2663 "./stb_image.h"
 var $141=_stbi__get8($140); //@line 2663 "./stb_image.h"
 var $142=($141&255); //@line 2663 "./stb_image.h"
 var $143=$2; //@line 2663 "./stb_image.h"
 var $144=(($143+18128)|0); //@line 2663 "./stb_image.h"
 HEAP32[(($144)>>2)]=$142; //@line 2663 "./stb_image.h"
 var $145=$2; //@line 2664 "./stb_image.h"
 var $146=(($145)|0); //@line 2664 "./stb_image.h"
 var $147=HEAP32[(($146)>>2)]; //@line 2664 "./stb_image.h"
 var $148=_stbi__get8($147); //@line 2664 "./stb_image.h"
 var $149=($148&255); //@line 2664 "./stb_image.h"
 var $150=$2; //@line 2664 "./stb_image.h"
 var $151=(($150+18132)|0); //@line 2664 "./stb_image.h"
 HEAP32[(($151)>>2)]=$149; //@line 2664 "./stb_image.h"
 var $152=$2; //@line 2665 "./stb_image.h"
 var $153=(($152)|0); //@line 2665 "./stb_image.h"
 var $154=HEAP32[(($153)>>2)]; //@line 2665 "./stb_image.h"
 var $155=_stbi__get8($154); //@line 2665 "./stb_image.h"
 var $156=($155&255); //@line 2665 "./stb_image.h"
 $aa=$156; //@line 2665 "./stb_image.h"
 var $157=$aa; //@line 2666 "./stb_image.h"
 var $158=$157>>4; //@line 2666 "./stb_image.h"
 var $159=$2; //@line 2666 "./stb_image.h"
 var $160=(($159+18136)|0); //@line 2666 "./stb_image.h"
 HEAP32[(($160)>>2)]=$158; //@line 2666 "./stb_image.h"
 var $161=$aa; //@line 2667 "./stb_image.h"
 var $162=$161&15; //@line 2667 "./stb_image.h"
 var $163=$2; //@line 2667 "./stb_image.h"
 var $164=(($163+18140)|0); //@line 2667 "./stb_image.h"
 HEAP32[(($164)>>2)]=$162; //@line 2667 "./stb_image.h"
 var $165=$2; //@line 2668 "./stb_image.h"
 var $166=(($165+18124)|0); //@line 2668 "./stb_image.h"
 var $167=HEAP32[(($166)>>2)]; //@line 2668 "./stb_image.h"
 var $168=($167|0)!=0; //@line 2668 "./stb_image.h"
 if($168){label=24;break;}else{label=31;break;} //@line 2668 "./stb_image.h"
 case 24: 
 var $170=$2; //@line 2669 "./stb_image.h"
 var $171=(($170+18128)|0); //@line 2669 "./stb_image.h"
 var $172=HEAP32[(($171)>>2)]; //@line 2669 "./stb_image.h"
 var $173=($172|0)>63; //@line 2669 "./stb_image.h"
 if($173){label=29;break;}else{label=25;break;} //@line 2669 "./stb_image.h"
 case 25: 
 var $175=$2; //@line 2669 "./stb_image.h"
 var $176=(($175+18132)|0); //@line 2669 "./stb_image.h"
 var $177=HEAP32[(($176)>>2)]; //@line 2669 "./stb_image.h"
 var $178=($177|0)>63; //@line 2669 "./stb_image.h"
 if($178){label=29;break;}else{label=26;break;} //@line 2669 "./stb_image.h"
 case 26: 
 var $180=$2; //@line 2669 "./stb_image.h"
 var $181=(($180+18128)|0); //@line 2669 "./stb_image.h"
 var $182=HEAP32[(($181)>>2)]; //@line 2669 "./stb_image.h"
 var $183=$2; //@line 2669 "./stb_image.h"
 var $184=(($183+18132)|0); //@line 2669 "./stb_image.h"
 var $185=HEAP32[(($184)>>2)]; //@line 2669 "./stb_image.h"
 var $186=($182|0)>($185|0); //@line 2669 "./stb_image.h"
 if($186){label=29;break;}else{label=27;break;} //@line 2669 "./stb_image.h"
 case 27: 
 var $188=$2; //@line 2669 "./stb_image.h"
 var $189=(($188+18136)|0); //@line 2669 "./stb_image.h"
 var $190=HEAP32[(($189)>>2)]; //@line 2669 "./stb_image.h"
 var $191=($190|0)>13; //@line 2669 "./stb_image.h"
 if($191){label=29;break;}else{label=28;break;} //@line 2669 "./stb_image.h"
 case 28: 
 var $193=$2; //@line 2669 "./stb_image.h"
 var $194=(($193+18140)|0); //@line 2669 "./stb_image.h"
 var $195=HEAP32[(($194)>>2)]; //@line 2669 "./stb_image.h"
 var $196=($195|0)>13; //@line 2669 "./stb_image.h"
 if($196){label=29;break;}else{label=30;break;} //@line 2669 "./stb_image.h"
 case 29: 
 var $198=_stbi__err(139504); //@line 2670 "./stb_image.h"
 $1=$198; //@line 2670 "./stb_image.h"
 label=38;break; //@line 2670 "./stb_image.h"
 case 30: 
 label=37;break; //@line 2671 "./stb_image.h"
 case 31: 
 var $201=$2; //@line 2672 "./stb_image.h"
 var $202=(($201+18128)|0); //@line 2672 "./stb_image.h"
 var $203=HEAP32[(($202)>>2)]; //@line 2672 "./stb_image.h"
 var $204=($203|0)!=0; //@line 2672 "./stb_image.h"
 if($204){label=32;break;}else{label=33;break;} //@line 2672 "./stb_image.h"
 case 32: 
 var $206=_stbi__err(139504); //@line 2672 "./stb_image.h"
 $1=$206; //@line 2672 "./stb_image.h"
 label=38;break; //@line 2672 "./stb_image.h"
 case 33: 
 var $208=$2; //@line 2673 "./stb_image.h"
 var $209=(($208+18136)|0); //@line 2673 "./stb_image.h"
 var $210=HEAP32[(($209)>>2)]; //@line 2673 "./stb_image.h"
 var $211=($210|0)!=0; //@line 2673 "./stb_image.h"
 if($211){label=35;break;}else{label=34;break;} //@line 2673 "./stb_image.h"
 case 34: 
 var $213=$2; //@line 2673 "./stb_image.h"
 var $214=(($213+18140)|0); //@line 2673 "./stb_image.h"
 var $215=HEAP32[(($214)>>2)]; //@line 2673 "./stb_image.h"
 var $216=($215|0)!=0; //@line 2673 "./stb_image.h"
 if($216){label=35;break;}else{label=36;break;} //@line 2673 "./stb_image.h"
 case 35: 
 var $218=_stbi__err(139504); //@line 2673 "./stb_image.h"
 $1=$218; //@line 2673 "./stb_image.h"
 label=38;break; //@line 2673 "./stb_image.h"
 case 36: 
 var $220=$2; //@line 2674 "./stb_image.h"
 var $221=(($220+18132)|0); //@line 2674 "./stb_image.h"
 HEAP32[(($221)>>2)]=63; //@line 2674 "./stb_image.h"
 label=37;break;
 case 37: 
 $1=1; //@line 2678 "./stb_image.h"
 label=38;break; //@line 2678 "./stb_image.h"
 case 38: 
 var $224=$1; //@line 2679 "./stb_image.h"
 STACKTOP=sp;return $224; //@line 2679 "./stb_image.h"
  default: assert(0, "bad label: " + label);
 }

}


function _stbi__parse_entropy_coded_data($z){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+256)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $i;
 var $j;
 var $data=sp;
 var $n;
 var $w;
 var $h;
 var $ha;
 var $i1;
 var $j2;
 var $k;
 var $x;
 var $y;
 var $data3=(sp)+(128);
 var $n4;
 var $x2;
 var $y2;
 var $ha5;
 var $i6;
 var $j7;
 var $n8;
 var $w9;
 var $h10;
 var $data11;
 var $ha12;
 var $i13;
 var $j14;
 var $k15;
 var $x16;
 var $y17;
 var $n18;
 var $x219;
 var $y220;
 var $data21;
 $2=$z;
 var $3=$2; //@line 2430 "./stb_image.h"
 _stbi__jpeg_reset($3); //@line 2430 "./stb_image.h"
 var $4=$2; //@line 2431 "./stb_image.h"
 var $5=(($4+18124)|0); //@line 2431 "./stb_image.h"
 var $6=HEAP32[(($5)>>2)]; //@line 2431 "./stb_image.h"
 var $7=($6|0)!=0; //@line 2431 "./stb_image.h"
 if($7){label=51;break;}else{label=2;break;} //@line 2431 "./stb_image.h"
 case 2: 
 var $9=$2; //@line 2432 "./stb_image.h"
 var $10=(($9+18148)|0); //@line 2432 "./stb_image.h"
 var $11=HEAP32[(($10)>>2)]; //@line 2432 "./stb_image.h"
 var $12=($11|0)==1; //@line 2432 "./stb_image.h"
 if($12){label=3;break;}else{label=21;break;} //@line 2432 "./stb_image.h"
 case 3: 
 var $14=$2; //@line 2435 "./stb_image.h"
 var $15=(($14+18152)|0); //@line 2435 "./stb_image.h"
 var $16=(($15)|0); //@line 2435 "./stb_image.h"
 var $17=HEAP32[(($16)>>2)]; //@line 2435 "./stb_image.h"
 $n=$17; //@line 2435 "./stb_image.h"
 var $18=$n; //@line 2440 "./stb_image.h"
 var $19=$2; //@line 2440 "./stb_image.h"
 var $20=(($19+17820)|0); //@line 2440 "./stb_image.h"
 var $21=(($20+((($18)*(72))&-1))|0); //@line 2440 "./stb_image.h"
 var $22=(($21+28)|0); //@line 2440 "./stb_image.h"
 var $23=HEAP32[(($22)>>2)]; //@line 2440 "./stb_image.h"
 var $24=((($23)+(7))|0); //@line 2440 "./stb_image.h"
 var $25=$24>>3; //@line 2440 "./stb_image.h"
 $w=$25; //@line 2440 "./stb_image.h"
 var $26=$n; //@line 2441 "./stb_image.h"
 var $27=$2; //@line 2441 "./stb_image.h"
 var $28=(($27+17820)|0); //@line 2441 "./stb_image.h"
 var $29=(($28+((($26)*(72))&-1))|0); //@line 2441 "./stb_image.h"
 var $30=(($29+32)|0); //@line 2441 "./stb_image.h"
 var $31=HEAP32[(($30)>>2)]; //@line 2441 "./stb_image.h"
 var $32=((($31)+(7))|0); //@line 2441 "./stb_image.h"
 var $33=$32>>3; //@line 2441 "./stb_image.h"
 $h=$33; //@line 2441 "./stb_image.h"
 $j=0; //@line 2442 "./stb_image.h"
 label=4;break; //@line 2442 "./stb_image.h"
 case 4: 
 var $35=$j; //@line 2442 "./stb_image.h"
 var $36=$h; //@line 2442 "./stb_image.h"
 var $37=($35|0)<($36|0); //@line 2442 "./stb_image.h"
 if($37){label=5;break;}else{label=20;break;} //@line 2442 "./stb_image.h"
 case 5: 
 $i=0; //@line 2443 "./stb_image.h"
 label=6;break; //@line 2443 "./stb_image.h"
 case 6: 
 var $40=$i; //@line 2443 "./stb_image.h"
 var $41=$w; //@line 2443 "./stb_image.h"
 var $42=($40|0)<($41|0); //@line 2443 "./stb_image.h"
 if($42){label=7;break;}else{label=18;break;} //@line 2443 "./stb_image.h"
 case 7: 
 var $44=$n; //@line 2444 "./stb_image.h"
 var $45=$2; //@line 2444 "./stb_image.h"
 var $46=(($45+17820)|0); //@line 2444 "./stb_image.h"
 var $47=(($46+((($44)*(72))&-1))|0); //@line 2444 "./stb_image.h"
 var $48=(($47+20)|0); //@line 2444 "./stb_image.h"
 var $49=HEAP32[(($48)>>2)]; //@line 2444 "./stb_image.h"
 $ha=$49; //@line 2444 "./stb_image.h"
 var $50=$2; //@line 2445 "./stb_image.h"
 var $51=(($data)|0); //@line 2445 "./stb_image.h"
 var $52=$2; //@line 2445 "./stb_image.h"
 var $53=(($52+4)|0); //@line 2445 "./stb_image.h"
 var $54=(($53)|0); //@line 2445 "./stb_image.h"
 var $55=$n; //@line 2445 "./stb_image.h"
 var $56=$2; //@line 2445 "./stb_image.h"
 var $57=(($56+17820)|0); //@line 2445 "./stb_image.h"
 var $58=(($57+((($55)*(72))&-1))|0); //@line 2445 "./stb_image.h"
 var $59=(($58+16)|0); //@line 2445 "./stb_image.h"
 var $60=HEAP32[(($59)>>2)]; //@line 2445 "./stb_image.h"
 var $61=(($54+((($60)*(1680))&-1))|0); //@line 2445 "./stb_image.h"
 var $62=$2; //@line 2445 "./stb_image.h"
 var $63=(($62+6724)|0); //@line 2445 "./stb_image.h"
 var $64=(($63)|0); //@line 2445 "./stb_image.h"
 var $65=$ha; //@line 2445 "./stb_image.h"
 var $66=(($64+((($65)*(1680))&-1))|0); //@line 2445 "./stb_image.h"
 var $67=$ha; //@line 2445 "./stb_image.h"
 var $68=$2; //@line 2445 "./stb_image.h"
 var $69=(($68+13700)|0); //@line 2445 "./stb_image.h"
 var $70=(($69+($67<<10))|0); //@line 2445 "./stb_image.h"
 var $71=(($70)|0); //@line 2445 "./stb_image.h"
 var $72=$n; //@line 2445 "./stb_image.h"
 var $73=$n; //@line 2445 "./stb_image.h"
 var $74=$2; //@line 2445 "./stb_image.h"
 var $75=(($74+17820)|0); //@line 2445 "./stb_image.h"
 var $76=(($75+((($73)*(72))&-1))|0); //@line 2445 "./stb_image.h"
 var $77=(($76+12)|0); //@line 2445 "./stb_image.h"
 var $78=HEAP32[(($77)>>2)]; //@line 2445 "./stb_image.h"
 var $79=$2; //@line 2445 "./stb_image.h"
 var $80=(($79+13444)|0); //@line 2445 "./stb_image.h"
 var $81=(($80+($78<<6))|0); //@line 2445 "./stb_image.h"
 var $82=(($81)|0); //@line 2445 "./stb_image.h"
 var $83=_stbi__jpeg_decode_block($50,$51,$61,$66,$71,$72,$82); //@line 2445 "./stb_image.h"
 var $84=($83|0)!=0; //@line 2445 "./stb_image.h"
 if($84){label=9;break;}else{label=8;break;} //@line 2445 "./stb_image.h"
 case 8: 
 $1=0; //@line 2445 "./stb_image.h"
 label=105;break; //@line 2445 "./stb_image.h"
 case 9: 
 var $87=$2; //@line 2446 "./stb_image.h"
 var $88=(($87+18176)|0); //@line 2446 "./stb_image.h"
 var $89=HEAP32[(($88)>>2)]; //@line 2446 "./stb_image.h"
 var $90=$n; //@line 2446 "./stb_image.h"
 var $91=$2; //@line 2446 "./stb_image.h"
 var $92=(($91+17820)|0); //@line 2446 "./stb_image.h"
 var $93=(($92+((($90)*(72))&-1))|0); //@line 2446 "./stb_image.h"
 var $94=(($93+44)|0); //@line 2446 "./stb_image.h"
 var $95=HEAP32[(($94)>>2)]; //@line 2446 "./stb_image.h"
 var $96=$n; //@line 2446 "./stb_image.h"
 var $97=$2; //@line 2446 "./stb_image.h"
 var $98=(($97+17820)|0); //@line 2446 "./stb_image.h"
 var $99=(($98+((($96)*(72))&-1))|0); //@line 2446 "./stb_image.h"
 var $100=(($99+36)|0); //@line 2446 "./stb_image.h"
 var $101=HEAP32[(($100)>>2)]; //@line 2446 "./stb_image.h"
 var $102=$j; //@line 2446 "./stb_image.h"
 var $103=(Math_imul($101,$102)|0); //@line 2446 "./stb_image.h"
 var $104=($103<<3); //@line 2446 "./stb_image.h"
 var $105=(($95+$104)|0); //@line 2446 "./stb_image.h"
 var $106=$i; //@line 2446 "./stb_image.h"
 var $107=($106<<3); //@line 2446 "./stb_image.h"
 var $108=(($105+$107)|0); //@line 2446 "./stb_image.h"
 var $109=$n; //@line 2446 "./stb_image.h"
 var $110=$2; //@line 2446 "./stb_image.h"
 var $111=(($110+17820)|0); //@line 2446 "./stb_image.h"
 var $112=(($111+((($109)*(72))&-1))|0); //@line 2446 "./stb_image.h"
 var $113=(($112+36)|0); //@line 2446 "./stb_image.h"
 var $114=HEAP32[(($113)>>2)]; //@line 2446 "./stb_image.h"
 var $115=(($data)|0); //@line 2446 "./stb_image.h"
 FUNCTION_TABLE[$89]($108,$114,$115); //@line 2446 "./stb_image.h"
 var $116=$2; //@line 2448 "./stb_image.h"
 var $117=(($116+18172)|0); //@line 2448 "./stb_image.h"
 var $118=HEAP32[(($117)>>2)]; //@line 2448 "./stb_image.h"
 var $119=((($118)-(1))|0); //@line 2448 "./stb_image.h"
 HEAP32[(($117)>>2)]=$119; //@line 2448 "./stb_image.h"
 var $120=($119|0)<=0; //@line 2448 "./stb_image.h"
 if($120){label=10;break;}else{label=16;break;} //@line 2448 "./stb_image.h"
 case 10: 
 var $122=$2; //@line 2449 "./stb_image.h"
 var $123=(($122+18112)|0); //@line 2449 "./stb_image.h"
 var $124=HEAP32[(($123)>>2)]; //@line 2449 "./stb_image.h"
 var $125=($124|0)<24; //@line 2449 "./stb_image.h"
 if($125){label=11;break;}else{label=12;break;} //@line 2449 "./stb_image.h"
 case 11: 
 var $127=$2; //@line 2449 "./stb_image.h"
 _stbi__grow_buffer_unsafe($127); //@line 2449 "./stb_image.h"
 label=12;break; //@line 2449 "./stb_image.h"
 case 12: 
 var $129=$2; //@line 2452 "./stb_image.h"
 var $130=(($129+18116)|0); //@line 2452 "./stb_image.h"
 var $131=HEAP8[($130)]; //@line 2452 "./stb_image.h"
 var $132=($131&255); //@line 2452 "./stb_image.h"
 var $133=($132|0)>=208; //@line 2452 "./stb_image.h"
 if($133){label=13;break;}else{label=14;break;} //@line 2452 "./stb_image.h"
 case 13: 
 var $135=$2; //@line 2452 "./stb_image.h"
 var $136=(($135+18116)|0); //@line 2452 "./stb_image.h"
 var $137=HEAP8[($136)]; //@line 2452 "./stb_image.h"
 var $138=($137&255); //@line 2452 "./stb_image.h"
 var $139=($138|0)<=215; //@line 2452 "./stb_image.h"
 if($139){label=15;break;}else{label=14;break;} //@line 2452 "./stb_image.h"
 case 14: 
 $1=1; //@line 2452 "./stb_image.h"
 label=105;break; //@line 2452 "./stb_image.h"
 case 15: 
 var $142=$2; //@line 2453 "./stb_image.h"
 _stbi__jpeg_reset($142); //@line 2453 "./stb_image.h"
 label=16;break; //@line 2454 "./stb_image.h"
 case 16: 
 label=17;break; //@line 2455 "./stb_image.h"
 case 17: 
 var $145=$i; //@line 2443 "./stb_image.h"
 var $146=((($145)+(1))|0); //@line 2443 "./stb_image.h"
 $i=$146; //@line 2443 "./stb_image.h"
 label=6;break; //@line 2443 "./stb_image.h"
 case 18: 
 label=19;break; //@line 2456 "./stb_image.h"
 case 19: 
 var $149=$j; //@line 2442 "./stb_image.h"
 var $150=((($149)+(1))|0); //@line 2442 "./stb_image.h"
 $j=$150; //@line 2442 "./stb_image.h"
 label=4;break; //@line 2442 "./stb_image.h"
 case 20: 
 $1=1; //@line 2457 "./stb_image.h"
 label=105;break; //@line 2457 "./stb_image.h"
 case 21: 
 $j2=0; //@line 2461 "./stb_image.h"
 label=22;break; //@line 2461 "./stb_image.h"
 case 22: 
 var $154=$j2; //@line 2461 "./stb_image.h"
 var $155=$2; //@line 2461 "./stb_image.h"
 var $156=(($155+17808)|0); //@line 2461 "./stb_image.h"
 var $157=HEAP32[(($156)>>2)]; //@line 2461 "./stb_image.h"
 var $158=($154|0)<($157|0); //@line 2461 "./stb_image.h"
 if($158){label=23;break;}else{label=50;break;} //@line 2461 "./stb_image.h"
 case 23: 
 $i1=0; //@line 2462 "./stb_image.h"
 label=24;break; //@line 2462 "./stb_image.h"
 case 24: 
 var $161=$i1; //@line 2462 "./stb_image.h"
 var $162=$2; //@line 2462 "./stb_image.h"
 var $163=(($162+17804)|0); //@line 2462 "./stb_image.h"
 var $164=HEAP32[(($163)>>2)]; //@line 2462 "./stb_image.h"
 var $165=($161|0)<($164|0); //@line 2462 "./stb_image.h"
 if($165){label=25;break;}else{label=48;break;} //@line 2462 "./stb_image.h"
 case 25: 
 $k=0; //@line 2464 "./stb_image.h"
 label=26;break; //@line 2464 "./stb_image.h"
 case 26: 
 var $168=$k; //@line 2464 "./stb_image.h"
 var $169=$2; //@line 2464 "./stb_image.h"
 var $170=(($169+18148)|0); //@line 2464 "./stb_image.h"
 var $171=HEAP32[(($170)>>2)]; //@line 2464 "./stb_image.h"
 var $172=($168|0)<($171|0); //@line 2464 "./stb_image.h"
 if($172){label=27;break;}else{label=39;break;} //@line 2464 "./stb_image.h"
 case 27: 
 var $174=$k; //@line 2465 "./stb_image.h"
 var $175=$2; //@line 2465 "./stb_image.h"
 var $176=(($175+18152)|0); //@line 2465 "./stb_image.h"
 var $177=(($176+($174<<2))|0); //@line 2465 "./stb_image.h"
 var $178=HEAP32[(($177)>>2)]; //@line 2465 "./stb_image.h"
 $n4=$178; //@line 2465 "./stb_image.h"
 $y=0; //@line 2468 "./stb_image.h"
 label=28;break; //@line 2468 "./stb_image.h"
 case 28: 
 var $180=$y; //@line 2468 "./stb_image.h"
 var $181=$n4; //@line 2468 "./stb_image.h"
 var $182=$2; //@line 2468 "./stb_image.h"
 var $183=(($182+17820)|0); //@line 2468 "./stb_image.h"
 var $184=(($183+((($181)*(72))&-1))|0); //@line 2468 "./stb_image.h"
 var $185=(($184+8)|0); //@line 2468 "./stb_image.h"
 var $186=HEAP32[(($185)>>2)]; //@line 2468 "./stb_image.h"
 var $187=($180|0)<($186|0); //@line 2468 "./stb_image.h"
 if($187){label=29;break;}else{label=37;break;} //@line 2468 "./stb_image.h"
 case 29: 
 $x=0; //@line 2469 "./stb_image.h"
 label=30;break; //@line 2469 "./stb_image.h"
 case 30: 
 var $190=$x; //@line 2469 "./stb_image.h"
 var $191=$n4; //@line 2469 "./stb_image.h"
 var $192=$2; //@line 2469 "./stb_image.h"
 var $193=(($192+17820)|0); //@line 2469 "./stb_image.h"
 var $194=(($193+((($191)*(72))&-1))|0); //@line 2469 "./stb_image.h"
 var $195=(($194+4)|0); //@line 2469 "./stb_image.h"
 var $196=HEAP32[(($195)>>2)]; //@line 2469 "./stb_image.h"
 var $197=($190|0)<($196|0); //@line 2469 "./stb_image.h"
 if($197){label=31;break;}else{label=35;break;} //@line 2469 "./stb_image.h"
 case 31: 
 var $199=$i1; //@line 2470 "./stb_image.h"
 var $200=$n4; //@line 2470 "./stb_image.h"
 var $201=$2; //@line 2470 "./stb_image.h"
 var $202=(($201+17820)|0); //@line 2470 "./stb_image.h"
 var $203=(($202+((($200)*(72))&-1))|0); //@line 2470 "./stb_image.h"
 var $204=(($203+4)|0); //@line 2470 "./stb_image.h"
 var $205=HEAP32[(($204)>>2)]; //@line 2470 "./stb_image.h"
 var $206=(Math_imul($199,$205)|0); //@line 2470 "./stb_image.h"
 var $207=$x; //@line 2470 "./stb_image.h"
 var $208=((($206)+($207))|0); //@line 2470 "./stb_image.h"
 var $209=($208<<3); //@line 2470 "./stb_image.h"
 $x2=$209; //@line 2470 "./stb_image.h"
 var $210=$j2; //@line 2471 "./stb_image.h"
 var $211=$n4; //@line 2471 "./stb_image.h"
 var $212=$2; //@line 2471 "./stb_image.h"
 var $213=(($212+17820)|0); //@line 2471 "./stb_image.h"
 var $214=(($213+((($211)*(72))&-1))|0); //@line 2471 "./stb_image.h"
 var $215=(($214+8)|0); //@line 2471 "./stb_image.h"
 var $216=HEAP32[(($215)>>2)]; //@line 2471 "./stb_image.h"
 var $217=(Math_imul($210,$216)|0); //@line 2471 "./stb_image.h"
 var $218=$y; //@line 2471 "./stb_image.h"
 var $219=((($217)+($218))|0); //@line 2471 "./stb_image.h"
 var $220=($219<<3); //@line 2471 "./stb_image.h"
 $y2=$220; //@line 2471 "./stb_image.h"
 var $221=$n4; //@line 2472 "./stb_image.h"
 var $222=$2; //@line 2472 "./stb_image.h"
 var $223=(($222+17820)|0); //@line 2472 "./stb_image.h"
 var $224=(($223+((($221)*(72))&-1))|0); //@line 2472 "./stb_image.h"
 var $225=(($224+20)|0); //@line 2472 "./stb_image.h"
 var $226=HEAP32[(($225)>>2)]; //@line 2472 "./stb_image.h"
 $ha5=$226; //@line 2472 "./stb_image.h"
 var $227=$2; //@line 2473 "./stb_image.h"
 var $228=(($data3)|0); //@line 2473 "./stb_image.h"
 var $229=$2; //@line 2473 "./stb_image.h"
 var $230=(($229+4)|0); //@line 2473 "./stb_image.h"
 var $231=(($230)|0); //@line 2473 "./stb_image.h"
 var $232=$n4; //@line 2473 "./stb_image.h"
 var $233=$2; //@line 2473 "./stb_image.h"
 var $234=(($233+17820)|0); //@line 2473 "./stb_image.h"
 var $235=(($234+((($232)*(72))&-1))|0); //@line 2473 "./stb_image.h"
 var $236=(($235+16)|0); //@line 2473 "./stb_image.h"
 var $237=HEAP32[(($236)>>2)]; //@line 2473 "./stb_image.h"
 var $238=(($231+((($237)*(1680))&-1))|0); //@line 2473 "./stb_image.h"
 var $239=$2; //@line 2473 "./stb_image.h"
 var $240=(($239+6724)|0); //@line 2473 "./stb_image.h"
 var $241=(($240)|0); //@line 2473 "./stb_image.h"
 var $242=$ha5; //@line 2473 "./stb_image.h"
 var $243=(($241+((($242)*(1680))&-1))|0); //@line 2473 "./stb_image.h"
 var $244=$ha5; //@line 2473 "./stb_image.h"
 var $245=$2; //@line 2473 "./stb_image.h"
 var $246=(($245+13700)|0); //@line 2473 "./stb_image.h"
 var $247=(($246+($244<<10))|0); //@line 2473 "./stb_image.h"
 var $248=(($247)|0); //@line 2473 "./stb_image.h"
 var $249=$n4; //@line 2473 "./stb_image.h"
 var $250=$n4; //@line 2473 "./stb_image.h"
 var $251=$2; //@line 2473 "./stb_image.h"
 var $252=(($251+17820)|0); //@line 2473 "./stb_image.h"
 var $253=(($252+((($250)*(72))&-1))|0); //@line 2473 "./stb_image.h"
 var $254=(($253+12)|0); //@line 2473 "./stb_image.h"
 var $255=HEAP32[(($254)>>2)]; //@line 2473 "./stb_image.h"
 var $256=$2; //@line 2473 "./stb_image.h"
 var $257=(($256+13444)|0); //@line 2473 "./stb_image.h"
 var $258=(($257+($255<<6))|0); //@line 2473 "./stb_image.h"
 var $259=(($258)|0); //@line 2473 "./stb_image.h"
 var $260=_stbi__jpeg_decode_block($227,$228,$238,$243,$248,$249,$259); //@line 2473 "./stb_image.h"
 var $261=($260|0)!=0; //@line 2473 "./stb_image.h"
 if($261){label=33;break;}else{label=32;break;} //@line 2473 "./stb_image.h"
 case 32: 
 $1=0; //@line 2473 "./stb_image.h"
 label=105;break; //@line 2473 "./stb_image.h"
 case 33: 
 var $264=$2; //@line 2474 "./stb_image.h"
 var $265=(($264+18176)|0); //@line 2474 "./stb_image.h"
 var $266=HEAP32[(($265)>>2)]; //@line 2474 "./stb_image.h"
 var $267=$n4; //@line 2474 "./stb_image.h"
 var $268=$2; //@line 2474 "./stb_image.h"
 var $269=(($268+17820)|0); //@line 2474 "./stb_image.h"
 var $270=(($269+((($267)*(72))&-1))|0); //@line 2474 "./stb_image.h"
 var $271=(($270+44)|0); //@line 2474 "./stb_image.h"
 var $272=HEAP32[(($271)>>2)]; //@line 2474 "./stb_image.h"
 var $273=$n4; //@line 2474 "./stb_image.h"
 var $274=$2; //@line 2474 "./stb_image.h"
 var $275=(($274+17820)|0); //@line 2474 "./stb_image.h"
 var $276=(($275+((($273)*(72))&-1))|0); //@line 2474 "./stb_image.h"
 var $277=(($276+36)|0); //@line 2474 "./stb_image.h"
 var $278=HEAP32[(($277)>>2)]; //@line 2474 "./stb_image.h"
 var $279=$y2; //@line 2474 "./stb_image.h"
 var $280=(Math_imul($278,$279)|0); //@line 2474 "./stb_image.h"
 var $281=(($272+$280)|0); //@line 2474 "./stb_image.h"
 var $282=$x2; //@line 2474 "./stb_image.h"
 var $283=(($281+$282)|0); //@line 2474 "./stb_image.h"
 var $284=$n4; //@line 2474 "./stb_image.h"
 var $285=$2; //@line 2474 "./stb_image.h"
 var $286=(($285+17820)|0); //@line 2474 "./stb_image.h"
 var $287=(($286+((($284)*(72))&-1))|0); //@line 2474 "./stb_image.h"
 var $288=(($287+36)|0); //@line 2474 "./stb_image.h"
 var $289=HEAP32[(($288)>>2)]; //@line 2474 "./stb_image.h"
 var $290=(($data3)|0); //@line 2474 "./stb_image.h"
 FUNCTION_TABLE[$266]($283,$289,$290); //@line 2474 "./stb_image.h"
 label=34;break; //@line 2475 "./stb_image.h"
 case 34: 
 var $292=$x; //@line 2469 "./stb_image.h"
 var $293=((($292)+(1))|0); //@line 2469 "./stb_image.h"
 $x=$293; //@line 2469 "./stb_image.h"
 label=30;break; //@line 2469 "./stb_image.h"
 case 35: 
 label=36;break; //@line 2476 "./stb_image.h"
 case 36: 
 var $296=$y; //@line 2468 "./stb_image.h"
 var $297=((($296)+(1))|0); //@line 2468 "./stb_image.h"
 $y=$297; //@line 2468 "./stb_image.h"
 label=28;break; //@line 2468 "./stb_image.h"
 case 37: 
 label=38;break; //@line 2477 "./stb_image.h"
 case 38: 
 var $300=$k; //@line 2464 "./stb_image.h"
 var $301=((($300)+(1))|0); //@line 2464 "./stb_image.h"
 $k=$301; //@line 2464 "./stb_image.h"
 label=26;break; //@line 2464 "./stb_image.h"
 case 39: 
 var $303=$2; //@line 2480 "./stb_image.h"
 var $304=(($303+18172)|0); //@line 2480 "./stb_image.h"
 var $305=HEAP32[(($304)>>2)]; //@line 2480 "./stb_image.h"
 var $306=((($305)-(1))|0); //@line 2480 "./stb_image.h"
 HEAP32[(($304)>>2)]=$306; //@line 2480 "./stb_image.h"
 var $307=($306|0)<=0; //@line 2480 "./stb_image.h"
 if($307){label=40;break;}else{label=46;break;} //@line 2480 "./stb_image.h"
 case 40: 
 var $309=$2; //@line 2481 "./stb_image.h"
 var $310=(($309+18112)|0); //@line 2481 "./stb_image.h"
 var $311=HEAP32[(($310)>>2)]; //@line 2481 "./stb_image.h"
 var $312=($311|0)<24; //@line 2481 "./stb_image.h"
 if($312){label=41;break;}else{label=42;break;} //@line 2481 "./stb_image.h"
 case 41: 
 var $314=$2; //@line 2481 "./stb_image.h"
 _stbi__grow_buffer_unsafe($314); //@line 2481 "./stb_image.h"
 label=42;break; //@line 2481 "./stb_image.h"
 case 42: 
 var $316=$2; //@line 2482 "./stb_image.h"
 var $317=(($316+18116)|0); //@line 2482 "./stb_image.h"
 var $318=HEAP8[($317)]; //@line 2482 "./stb_image.h"
 var $319=($318&255); //@line 2482 "./stb_image.h"
 var $320=($319|0)>=208; //@line 2482 "./stb_image.h"
 if($320){label=43;break;}else{label=44;break;} //@line 2482 "./stb_image.h"
 case 43: 
 var $322=$2; //@line 2482 "./stb_image.h"
 var $323=(($322+18116)|0); //@line 2482 "./stb_image.h"
 var $324=HEAP8[($323)]; //@line 2482 "./stb_image.h"
 var $325=($324&255); //@line 2482 "./stb_image.h"
 var $326=($325|0)<=215; //@line 2482 "./stb_image.h"
 if($326){label=45;break;}else{label=44;break;} //@line 2482 "./stb_image.h"
 case 44: 
 $1=1; //@line 2482 "./stb_image.h"
 label=105;break; //@line 2482 "./stb_image.h"
 case 45: 
 var $329=$2; //@line 2483 "./stb_image.h"
 _stbi__jpeg_reset($329); //@line 2483 "./stb_image.h"
 label=46;break; //@line 2484 "./stb_image.h"
 case 46: 
 label=47;break; //@line 2485 "./stb_image.h"
 case 47: 
 var $332=$i1; //@line 2462 "./stb_image.h"
 var $333=((($332)+(1))|0); //@line 2462 "./stb_image.h"
 $i1=$333; //@line 2462 "./stb_image.h"
 label=24;break; //@line 2462 "./stb_image.h"
 case 48: 
 label=49;break; //@line 2486 "./stb_image.h"
 case 49: 
 var $336=$j2; //@line 2461 "./stb_image.h"
 var $337=((($336)+(1))|0); //@line 2461 "./stb_image.h"
 $j2=$337; //@line 2461 "./stb_image.h"
 label=22;break; //@line 2461 "./stb_image.h"
 case 50: 
 $1=1; //@line 2487 "./stb_image.h"
 label=105;break; //@line 2487 "./stb_image.h"
 case 51: 
 var $340=$2; //@line 2490 "./stb_image.h"
 var $341=(($340+18148)|0); //@line 2490 "./stb_image.h"
 var $342=HEAP32[(($341)>>2)]; //@line 2490 "./stb_image.h"
 var $343=($342|0)==1; //@line 2490 "./stb_image.h"
 if($343){label=52;break;}else{label=75;break;} //@line 2490 "./stb_image.h"
 case 52: 
 var $345=$2; //@line 2492 "./stb_image.h"
 var $346=(($345+18152)|0); //@line 2492 "./stb_image.h"
 var $347=(($346)|0); //@line 2492 "./stb_image.h"
 var $348=HEAP32[(($347)>>2)]; //@line 2492 "./stb_image.h"
 $n8=$348; //@line 2492 "./stb_image.h"
 var $349=$n8; //@line 2497 "./stb_image.h"
 var $350=$2; //@line 2497 "./stb_image.h"
 var $351=(($350+17820)|0); //@line 2497 "./stb_image.h"
 var $352=(($351+((($349)*(72))&-1))|0); //@line 2497 "./stb_image.h"
 var $353=(($352+28)|0); //@line 2497 "./stb_image.h"
 var $354=HEAP32[(($353)>>2)]; //@line 2497 "./stb_image.h"
 var $355=((($354)+(7))|0); //@line 2497 "./stb_image.h"
 var $356=$355>>3; //@line 2497 "./stb_image.h"
 $w9=$356; //@line 2497 "./stb_image.h"
 var $357=$n8; //@line 2498 "./stb_image.h"
 var $358=$2; //@line 2498 "./stb_image.h"
 var $359=(($358+17820)|0); //@line 2498 "./stb_image.h"
 var $360=(($359+((($357)*(72))&-1))|0); //@line 2498 "./stb_image.h"
 var $361=(($360+32)|0); //@line 2498 "./stb_image.h"
 var $362=HEAP32[(($361)>>2)]; //@line 2498 "./stb_image.h"
 var $363=((($362)+(7))|0); //@line 2498 "./stb_image.h"
 var $364=$363>>3; //@line 2498 "./stb_image.h"
 $h10=$364; //@line 2498 "./stb_image.h"
 $j7=0; //@line 2499 "./stb_image.h"
 label=53;break; //@line 2499 "./stb_image.h"
 case 53: 
 var $366=$j7; //@line 2499 "./stb_image.h"
 var $367=$h10; //@line 2499 "./stb_image.h"
 var $368=($366|0)<($367|0); //@line 2499 "./stb_image.h"
 if($368){label=54;break;}else{label=74;break;} //@line 2499 "./stb_image.h"
 case 54: 
 $i6=0; //@line 2500 "./stb_image.h"
 label=55;break; //@line 2500 "./stb_image.h"
 case 55: 
 var $371=$i6; //@line 2500 "./stb_image.h"
 var $372=$w9; //@line 2500 "./stb_image.h"
 var $373=($371|0)<($372|0); //@line 2500 "./stb_image.h"
 if($373){label=56;break;}else{label=72;break;} //@line 2500 "./stb_image.h"
 case 56: 
 var $375=$n8; //@line 2501 "./stb_image.h"
 var $376=$2; //@line 2501 "./stb_image.h"
 var $377=(($376+17820)|0); //@line 2501 "./stb_image.h"
 var $378=(($377+((($375)*(72))&-1))|0); //@line 2501 "./stb_image.h"
 var $379=(($378+60)|0); //@line 2501 "./stb_image.h"
 var $380=HEAP32[(($379)>>2)]; //@line 2501 "./stb_image.h"
 var $381=$i6; //@line 2501 "./stb_image.h"
 var $382=$j7; //@line 2501 "./stb_image.h"
 var $383=$n8; //@line 2501 "./stb_image.h"
 var $384=$2; //@line 2501 "./stb_image.h"
 var $385=(($384+17820)|0); //@line 2501 "./stb_image.h"
 var $386=(($385+((($383)*(72))&-1))|0); //@line 2501 "./stb_image.h"
 var $387=(($386+64)|0); //@line 2501 "./stb_image.h"
 var $388=HEAP32[(($387)>>2)]; //@line 2501 "./stb_image.h"
 var $389=(Math_imul($382,$388)|0); //@line 2501 "./stb_image.h"
 var $390=((($381)+($389))|0); //@line 2501 "./stb_image.h"
 var $391=($390<<6); //@line 2501 "./stb_image.h"
 var $392=(($380+($391<<1))|0); //@line 2501 "./stb_image.h"
 $data11=$392; //@line 2501 "./stb_image.h"
 var $393=$2; //@line 2502 "./stb_image.h"
 var $394=(($393+18128)|0); //@line 2502 "./stb_image.h"
 var $395=HEAP32[(($394)>>2)]; //@line 2502 "./stb_image.h"
 var $396=($395|0)==0; //@line 2502 "./stb_image.h"
 if($396){label=57;break;}else{label=60;break;} //@line 2502 "./stb_image.h"
 case 57: 
 var $398=$2; //@line 2503 "./stb_image.h"
 var $399=$data11; //@line 2503 "./stb_image.h"
 var $400=$n8; //@line 2503 "./stb_image.h"
 var $401=$2; //@line 2503 "./stb_image.h"
 var $402=(($401+17820)|0); //@line 2503 "./stb_image.h"
 var $403=(($402+((($400)*(72))&-1))|0); //@line 2503 "./stb_image.h"
 var $404=(($403+16)|0); //@line 2503 "./stb_image.h"
 var $405=HEAP32[(($404)>>2)]; //@line 2503 "./stb_image.h"
 var $406=$2; //@line 2503 "./stb_image.h"
 var $407=(($406+4)|0); //@line 2503 "./stb_image.h"
 var $408=(($407+((($405)*(1680))&-1))|0); //@line 2503 "./stb_image.h"
 var $409=$n8; //@line 2503 "./stb_image.h"
 var $410=_stbi__jpeg_decode_block_prog_dc($398,$399,$408,$409); //@line 2503 "./stb_image.h"
 var $411=($410|0)!=0; //@line 2503 "./stb_image.h"
 if($411){label=59;break;}else{label=58;break;} //@line 2503 "./stb_image.h"
 case 58: 
 $1=0; //@line 2504 "./stb_image.h"
 label=105;break; //@line 2504 "./stb_image.h"
 case 59: 
 label=63;break; //@line 2505 "./stb_image.h"
 case 60: 
 var $415=$n8; //@line 2506 "./stb_image.h"
 var $416=$2; //@line 2506 "./stb_image.h"
 var $417=(($416+17820)|0); //@line 2506 "./stb_image.h"
 var $418=(($417+((($415)*(72))&-1))|0); //@line 2506 "./stb_image.h"
 var $419=(($418+20)|0); //@line 2506 "./stb_image.h"
 var $420=HEAP32[(($419)>>2)]; //@line 2506 "./stb_image.h"
 $ha12=$420; //@line 2506 "./stb_image.h"
 var $421=$2; //@line 2507 "./stb_image.h"
 var $422=$data11; //@line 2507 "./stb_image.h"
 var $423=$ha12; //@line 2507 "./stb_image.h"
 var $424=$2; //@line 2507 "./stb_image.h"
 var $425=(($424+6724)|0); //@line 2507 "./stb_image.h"
 var $426=(($425+((($423)*(1680))&-1))|0); //@line 2507 "./stb_image.h"
 var $427=$ha12; //@line 2507 "./stb_image.h"
 var $428=$2; //@line 2507 "./stb_image.h"
 var $429=(($428+13700)|0); //@line 2507 "./stb_image.h"
 var $430=(($429+($427<<10))|0); //@line 2507 "./stb_image.h"
 var $431=(($430)|0); //@line 2507 "./stb_image.h"
 var $432=_stbi__jpeg_decode_block_prog_ac($421,$422,$426,$431); //@line 2507 "./stb_image.h"
 var $433=($432|0)!=0; //@line 2507 "./stb_image.h"
 if($433){label=62;break;}else{label=61;break;} //@line 2507 "./stb_image.h"
 case 61: 
 $1=0; //@line 2508 "./stb_image.h"
 label=105;break; //@line 2508 "./stb_image.h"
 case 62: 
 label=63;break;
 case 63: 
 var $437=$2; //@line 2511 "./stb_image.h"
 var $438=(($437+18172)|0); //@line 2511 "./stb_image.h"
 var $439=HEAP32[(($438)>>2)]; //@line 2511 "./stb_image.h"
 var $440=((($439)-(1))|0); //@line 2511 "./stb_image.h"
 HEAP32[(($438)>>2)]=$440; //@line 2511 "./stb_image.h"
 var $441=($440|0)<=0; //@line 2511 "./stb_image.h"
 if($441){label=64;break;}else{label=70;break;} //@line 2511 "./stb_image.h"
 case 64: 
 var $443=$2; //@line 2512 "./stb_image.h"
 var $444=(($443+18112)|0); //@line 2512 "./stb_image.h"
 var $445=HEAP32[(($444)>>2)]; //@line 2512 "./stb_image.h"
 var $446=($445|0)<24; //@line 2512 "./stb_image.h"
 if($446){label=65;break;}else{label=66;break;} //@line 2512 "./stb_image.h"
 case 65: 
 var $448=$2; //@line 2512 "./stb_image.h"
 _stbi__grow_buffer_unsafe($448); //@line 2512 "./stb_image.h"
 label=66;break; //@line 2512 "./stb_image.h"
 case 66: 
 var $450=$2; //@line 2513 "./stb_image.h"
 var $451=(($450+18116)|0); //@line 2513 "./stb_image.h"
 var $452=HEAP8[($451)]; //@line 2513 "./stb_image.h"
 var $453=($452&255); //@line 2513 "./stb_image.h"
 var $454=($453|0)>=208; //@line 2513 "./stb_image.h"
 if($454){label=67;break;}else{label=68;break;} //@line 2513 "./stb_image.h"
 case 67: 
 var $456=$2; //@line 2513 "./stb_image.h"
 var $457=(($456+18116)|0); //@line 2513 "./stb_image.h"
 var $458=HEAP8[($457)]; //@line 2513 "./stb_image.h"
 var $459=($458&255); //@line 2513 "./stb_image.h"
 var $460=($459|0)<=215; //@line 2513 "./stb_image.h"
 if($460){label=69;break;}else{label=68;break;} //@line 2513 "./stb_image.h"
 case 68: 
 $1=1; //@line 2513 "./stb_image.h"
 label=105;break; //@line 2513 "./stb_image.h"
 case 69: 
 var $463=$2; //@line 2514 "./stb_image.h"
 _stbi__jpeg_reset($463); //@line 2514 "./stb_image.h"
 label=70;break; //@line 2515 "./stb_image.h"
 case 70: 
 label=71;break; //@line 2516 "./stb_image.h"
 case 71: 
 var $466=$i6; //@line 2500 "./stb_image.h"
 var $467=((($466)+(1))|0); //@line 2500 "./stb_image.h"
 $i6=$467; //@line 2500 "./stb_image.h"
 label=55;break; //@line 2500 "./stb_image.h"
 case 72: 
 label=73;break; //@line 2517 "./stb_image.h"
 case 73: 
 var $470=$j7; //@line 2499 "./stb_image.h"
 var $471=((($470)+(1))|0); //@line 2499 "./stb_image.h"
 $j7=$471; //@line 2499 "./stb_image.h"
 label=53;break; //@line 2499 "./stb_image.h"
 case 74: 
 $1=1; //@line 2518 "./stb_image.h"
 label=105;break; //@line 2518 "./stb_image.h"
 case 75: 
 $j14=0; //@line 2521 "./stb_image.h"
 label=76;break; //@line 2521 "./stb_image.h"
 case 76: 
 var $475=$j14; //@line 2521 "./stb_image.h"
 var $476=$2; //@line 2521 "./stb_image.h"
 var $477=(($476+17808)|0); //@line 2521 "./stb_image.h"
 var $478=HEAP32[(($477)>>2)]; //@line 2521 "./stb_image.h"
 var $479=($475|0)<($478|0); //@line 2521 "./stb_image.h"
 if($479){label=77;break;}else{label=104;break;} //@line 2521 "./stb_image.h"
 case 77: 
 $i13=0; //@line 2522 "./stb_image.h"
 label=78;break; //@line 2522 "./stb_image.h"
 case 78: 
 var $482=$i13; //@line 2522 "./stb_image.h"
 var $483=$2; //@line 2522 "./stb_image.h"
 var $484=(($483+17804)|0); //@line 2522 "./stb_image.h"
 var $485=HEAP32[(($484)>>2)]; //@line 2522 "./stb_image.h"
 var $486=($482|0)<($485|0); //@line 2522 "./stb_image.h"
 if($486){label=79;break;}else{label=102;break;} //@line 2522 "./stb_image.h"
 case 79: 
 $k15=0; //@line 2524 "./stb_image.h"
 label=80;break; //@line 2524 "./stb_image.h"
 case 80: 
 var $489=$k15; //@line 2524 "./stb_image.h"
 var $490=$2; //@line 2524 "./stb_image.h"
 var $491=(($490+18148)|0); //@line 2524 "./stb_image.h"
 var $492=HEAP32[(($491)>>2)]; //@line 2524 "./stb_image.h"
 var $493=($489|0)<($492|0); //@line 2524 "./stb_image.h"
 if($493){label=81;break;}else{label=93;break;} //@line 2524 "./stb_image.h"
 case 81: 
 var $495=$k15; //@line 2525 "./stb_image.h"
 var $496=$2; //@line 2525 "./stb_image.h"
 var $497=(($496+18152)|0); //@line 2525 "./stb_image.h"
 var $498=(($497+($495<<2))|0); //@line 2525 "./stb_image.h"
 var $499=HEAP32[(($498)>>2)]; //@line 2525 "./stb_image.h"
 $n18=$499; //@line 2525 "./stb_image.h"
 $y17=0; //@line 2528 "./stb_image.h"
 label=82;break; //@line 2528 "./stb_image.h"
 case 82: 
 var $501=$y17; //@line 2528 "./stb_image.h"
 var $502=$n18; //@line 2528 "./stb_image.h"
 var $503=$2; //@line 2528 "./stb_image.h"
 var $504=(($503+17820)|0); //@line 2528 "./stb_image.h"
 var $505=(($504+((($502)*(72))&-1))|0); //@line 2528 "./stb_image.h"
 var $506=(($505+8)|0); //@line 2528 "./stb_image.h"
 var $507=HEAP32[(($506)>>2)]; //@line 2528 "./stb_image.h"
 var $508=($501|0)<($507|0); //@line 2528 "./stb_image.h"
 if($508){label=83;break;}else{label=91;break;} //@line 2528 "./stb_image.h"
 case 83: 
 $x16=0; //@line 2529 "./stb_image.h"
 label=84;break; //@line 2529 "./stb_image.h"
 case 84: 
 var $511=$x16; //@line 2529 "./stb_image.h"
 var $512=$n18; //@line 2529 "./stb_image.h"
 var $513=$2; //@line 2529 "./stb_image.h"
 var $514=(($513+17820)|0); //@line 2529 "./stb_image.h"
 var $515=(($514+((($512)*(72))&-1))|0); //@line 2529 "./stb_image.h"
 var $516=(($515+4)|0); //@line 2529 "./stb_image.h"
 var $517=HEAP32[(($516)>>2)]; //@line 2529 "./stb_image.h"
 var $518=($511|0)<($517|0); //@line 2529 "./stb_image.h"
 if($518){label=85;break;}else{label=89;break;} //@line 2529 "./stb_image.h"
 case 85: 
 var $520=$i13; //@line 2530 "./stb_image.h"
 var $521=$n18; //@line 2530 "./stb_image.h"
 var $522=$2; //@line 2530 "./stb_image.h"
 var $523=(($522+17820)|0); //@line 2530 "./stb_image.h"
 var $524=(($523+((($521)*(72))&-1))|0); //@line 2530 "./stb_image.h"
 var $525=(($524+4)|0); //@line 2530 "./stb_image.h"
 var $526=HEAP32[(($525)>>2)]; //@line 2530 "./stb_image.h"
 var $527=(Math_imul($520,$526)|0); //@line 2530 "./stb_image.h"
 var $528=$x16; //@line 2530 "./stb_image.h"
 var $529=((($527)+($528))|0); //@line 2530 "./stb_image.h"
 $x219=$529; //@line 2530 "./stb_image.h"
 var $530=$j14; //@line 2531 "./stb_image.h"
 var $531=$n18; //@line 2531 "./stb_image.h"
 var $532=$2; //@line 2531 "./stb_image.h"
 var $533=(($532+17820)|0); //@line 2531 "./stb_image.h"
 var $534=(($533+((($531)*(72))&-1))|0); //@line 2531 "./stb_image.h"
 var $535=(($534+8)|0); //@line 2531 "./stb_image.h"
 var $536=HEAP32[(($535)>>2)]; //@line 2531 "./stb_image.h"
 var $537=(Math_imul($530,$536)|0); //@line 2531 "./stb_image.h"
 var $538=$y17; //@line 2531 "./stb_image.h"
 var $539=((($537)+($538))|0); //@line 2531 "./stb_image.h"
 $y220=$539; //@line 2531 "./stb_image.h"
 var $540=$n18; //@line 2532 "./stb_image.h"
 var $541=$2; //@line 2532 "./stb_image.h"
 var $542=(($541+17820)|0); //@line 2532 "./stb_image.h"
 var $543=(($542+((($540)*(72))&-1))|0); //@line 2532 "./stb_image.h"
 var $544=(($543+60)|0); //@line 2532 "./stb_image.h"
 var $545=HEAP32[(($544)>>2)]; //@line 2532 "./stb_image.h"
 var $546=$x219; //@line 2532 "./stb_image.h"
 var $547=$y220; //@line 2532 "./stb_image.h"
 var $548=$n18; //@line 2532 "./stb_image.h"
 var $549=$2; //@line 2532 "./stb_image.h"
 var $550=(($549+17820)|0); //@line 2532 "./stb_image.h"
 var $551=(($550+((($548)*(72))&-1))|0); //@line 2532 "./stb_image.h"
 var $552=(($551+64)|0); //@line 2532 "./stb_image.h"
 var $553=HEAP32[(($552)>>2)]; //@line 2532 "./stb_image.h"
 var $554=(Math_imul($547,$553)|0); //@line 2532 "./stb_image.h"
 var $555=((($546)+($554))|0); //@line 2532 "./stb_image.h"
 var $556=($555<<6); //@line 2532 "./stb_image.h"
 var $557=(($545+($556<<1))|0); //@line 2532 "./stb_image.h"
 $data21=$557; //@line 2532 "./stb_image.h"
 var $558=$2; //@line 2533 "./stb_image.h"
 var $559=$data21; //@line 2533 "./stb_image.h"
 var $560=$n18; //@line 2533 "./stb_image.h"
 var $561=$2; //@line 2533 "./stb_image.h"
 var $562=(($561+17820)|0); //@line 2533 "./stb_image.h"
 var $563=(($562+((($560)*(72))&-1))|0); //@line 2533 "./stb_image.h"
 var $564=(($563+16)|0); //@line 2533 "./stb_image.h"
 var $565=HEAP32[(($564)>>2)]; //@line 2533 "./stb_image.h"
 var $566=$2; //@line 2533 "./stb_image.h"
 var $567=(($566+4)|0); //@line 2533 "./stb_image.h"
 var $568=(($567+((($565)*(1680))&-1))|0); //@line 2533 "./stb_image.h"
 var $569=$n18; //@line 2533 "./stb_image.h"
 var $570=_stbi__jpeg_decode_block_prog_dc($558,$559,$568,$569); //@line 2533 "./stb_image.h"
 var $571=($570|0)!=0; //@line 2533 "./stb_image.h"
 if($571){label=87;break;}else{label=86;break;} //@line 2533 "./stb_image.h"
 case 86: 
 $1=0; //@line 2534 "./stb_image.h"
 label=105;break; //@line 2534 "./stb_image.h"
 case 87: 
 label=88;break; //@line 2535 "./stb_image.h"
 case 88: 
 var $575=$x16; //@line 2529 "./stb_image.h"
 var $576=((($575)+(1))|0); //@line 2529 "./stb_image.h"
 $x16=$576; //@line 2529 "./stb_image.h"
 label=84;break; //@line 2529 "./stb_image.h"
 case 89: 
 label=90;break; //@line 2536 "./stb_image.h"
 case 90: 
 var $579=$y17; //@line 2528 "./stb_image.h"
 var $580=((($579)+(1))|0); //@line 2528 "./stb_image.h"
 $y17=$580; //@line 2528 "./stb_image.h"
 label=82;break; //@line 2528 "./stb_image.h"
 case 91: 
 label=92;break; //@line 2537 "./stb_image.h"
 case 92: 
 var $583=$k15; //@line 2524 "./stb_image.h"
 var $584=((($583)+(1))|0); //@line 2524 "./stb_image.h"
 $k15=$584; //@line 2524 "./stb_image.h"
 label=80;break; //@line 2524 "./stb_image.h"
 case 93: 
 var $586=$2; //@line 2540 "./stb_image.h"
 var $587=(($586+18172)|0); //@line 2540 "./stb_image.h"
 var $588=HEAP32[(($587)>>2)]; //@line 2540 "./stb_image.h"
 var $589=((($588)-(1))|0); //@line 2540 "./stb_image.h"
 HEAP32[(($587)>>2)]=$589; //@line 2540 "./stb_image.h"
 var $590=($589|0)<=0; //@line 2540 "./stb_image.h"
 if($590){label=94;break;}else{label=100;break;} //@line 2540 "./stb_image.h"
 case 94: 
 var $592=$2; //@line 2541 "./stb_image.h"
 var $593=(($592+18112)|0); //@line 2541 "./stb_image.h"
 var $594=HEAP32[(($593)>>2)]; //@line 2541 "./stb_image.h"
 var $595=($594|0)<24; //@line 2541 "./stb_image.h"
 if($595){label=95;break;}else{label=96;break;} //@line 2541 "./stb_image.h"
 case 95: 
 var $597=$2; //@line 2541 "./stb_image.h"
 _stbi__grow_buffer_unsafe($597); //@line 2541 "./stb_image.h"
 label=96;break; //@line 2541 "./stb_image.h"
 case 96: 
 var $599=$2; //@line 2542 "./stb_image.h"
 var $600=(($599+18116)|0); //@line 2542 "./stb_image.h"
 var $601=HEAP8[($600)]; //@line 2542 "./stb_image.h"
 var $602=($601&255); //@line 2542 "./stb_image.h"
 var $603=($602|0)>=208; //@line 2542 "./stb_image.h"
 if($603){label=97;break;}else{label=98;break;} //@line 2542 "./stb_image.h"
 case 97: 
 var $605=$2; //@line 2542 "./stb_image.h"
 var $606=(($605+18116)|0); //@line 2542 "./stb_image.h"
 var $607=HEAP8[($606)]; //@line 2542 "./stb_image.h"
 var $608=($607&255); //@line 2542 "./stb_image.h"
 var $609=($608|0)<=215; //@line 2542 "./stb_image.h"
 if($609){label=99;break;}else{label=98;break;} //@line 2542 "./stb_image.h"
 case 98: 
 $1=1; //@line 2542 "./stb_image.h"
 label=105;break; //@line 2542 "./stb_image.h"
 case 99: 
 var $612=$2; //@line 2543 "./stb_image.h"
 _stbi__jpeg_reset($612); //@line 2543 "./stb_image.h"
 label=100;break; //@line 2544 "./stb_image.h"
 case 100: 
 label=101;break; //@line 2545 "./stb_image.h"
 case 101: 
 var $615=$i13; //@line 2522 "./stb_image.h"
 var $616=((($615)+(1))|0); //@line 2522 "./stb_image.h"
 $i13=$616; //@line 2522 "./stb_image.h"
 label=78;break; //@line 2522 "./stb_image.h"
 case 102: 
 label=103;break; //@line 2546 "./stb_image.h"
 case 103: 
 var $619=$j14; //@line 2521 "./stb_image.h"
 var $620=((($619)+(1))|0); //@line 2521 "./stb_image.h"
 $j14=$620; //@line 2521 "./stb_image.h"
 label=76;break; //@line 2521 "./stb_image.h"
 case 104: 
 $1=1; //@line 2547 "./stb_image.h"
 label=105;break; //@line 2547 "./stb_image.h"
 case 105: 
 var $623=$1; //@line 2547 "./stb_image.h"
 STACKTOP=sp;return $623; //@line 2547 "./stb_image.h"
  default: assert(0, "bad label: " + label);
 }

}


function _stbi__jpeg_finish($z){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $i;
 var $j;
 var $n;
 var $w;
 var $h;
 var $data;
 $1=$z;
 var $2=$1; //@line 2561 "./stb_image.h"
 var $3=(($2+18124)|0); //@line 2561 "./stb_image.h"
 var $4=HEAP32[(($3)>>2)]; //@line 2561 "./stb_image.h"
 var $5=($4|0)!=0; //@line 2561 "./stb_image.h"
 if($5){label=2;break;}else{label=15;break;} //@line 2561 "./stb_image.h"
 case 2: 
 $n=0; //@line 2564 "./stb_image.h"
 label=3;break; //@line 2564 "./stb_image.h"
 case 3: 
 var $8=$n; //@line 2564 "./stb_image.h"
 var $9=$1; //@line 2564 "./stb_image.h"
 var $10=(($9)|0); //@line 2564 "./stb_image.h"
 var $11=HEAP32[(($10)>>2)]; //@line 2564 "./stb_image.h"
 var $12=(($11+8)|0); //@line 2564 "./stb_image.h"
 var $13=HEAP32[(($12)>>2)]; //@line 2564 "./stb_image.h"
 var $14=($8|0)<($13|0); //@line 2564 "./stb_image.h"
 if($14){label=4;break;}else{label=14;break;} //@line 2564 "./stb_image.h"
 case 4: 
 var $16=$n; //@line 2565 "./stb_image.h"
 var $17=$1; //@line 2565 "./stb_image.h"
 var $18=(($17+17820)|0); //@line 2565 "./stb_image.h"
 var $19=(($18+((($16)*(72))&-1))|0); //@line 2565 "./stb_image.h"
 var $20=(($19+28)|0); //@line 2565 "./stb_image.h"
 var $21=HEAP32[(($20)>>2)]; //@line 2565 "./stb_image.h"
 var $22=((($21)+(7))|0); //@line 2565 "./stb_image.h"
 var $23=$22>>3; //@line 2565 "./stb_image.h"
 $w=$23; //@line 2565 "./stb_image.h"
 var $24=$n; //@line 2566 "./stb_image.h"
 var $25=$1; //@line 2566 "./stb_image.h"
 var $26=(($25+17820)|0); //@line 2566 "./stb_image.h"
 var $27=(($26+((($24)*(72))&-1))|0); //@line 2566 "./stb_image.h"
 var $28=(($27+32)|0); //@line 2566 "./stb_image.h"
 var $29=HEAP32[(($28)>>2)]; //@line 2566 "./stb_image.h"
 var $30=((($29)+(7))|0); //@line 2566 "./stb_image.h"
 var $31=$30>>3; //@line 2566 "./stb_image.h"
 $h=$31; //@line 2566 "./stb_image.h"
 $j=0; //@line 2567 "./stb_image.h"
 label=5;break; //@line 2567 "./stb_image.h"
 case 5: 
 var $33=$j; //@line 2567 "./stb_image.h"
 var $34=$h; //@line 2567 "./stb_image.h"
 var $35=($33|0)<($34|0); //@line 2567 "./stb_image.h"
 if($35){label=6;break;}else{label=12;break;} //@line 2567 "./stb_image.h"
 case 6: 
 $i=0; //@line 2568 "./stb_image.h"
 label=7;break; //@line 2568 "./stb_image.h"
 case 7: 
 var $38=$i; //@line 2568 "./stb_image.h"
 var $39=$w; //@line 2568 "./stb_image.h"
 var $40=($38|0)<($39|0); //@line 2568 "./stb_image.h"
 if($40){label=8;break;}else{label=10;break;} //@line 2568 "./stb_image.h"
 case 8: 
 var $42=$n; //@line 2569 "./stb_image.h"
 var $43=$1; //@line 2569 "./stb_image.h"
 var $44=(($43+17820)|0); //@line 2569 "./stb_image.h"
 var $45=(($44+((($42)*(72))&-1))|0); //@line 2569 "./stb_image.h"
 var $46=(($45+60)|0); //@line 2569 "./stb_image.h"
 var $47=HEAP32[(($46)>>2)]; //@line 2569 "./stb_image.h"
 var $48=$i; //@line 2569 "./stb_image.h"
 var $49=$j; //@line 2569 "./stb_image.h"
 var $50=$n; //@line 2569 "./stb_image.h"
 var $51=$1; //@line 2569 "./stb_image.h"
 var $52=(($51+17820)|0); //@line 2569 "./stb_image.h"
 var $53=(($52+((($50)*(72))&-1))|0); //@line 2569 "./stb_image.h"
 var $54=(($53+64)|0); //@line 2569 "./stb_image.h"
 var $55=HEAP32[(($54)>>2)]; //@line 2569 "./stb_image.h"
 var $56=(Math_imul($49,$55)|0); //@line 2569 "./stb_image.h"
 var $57=((($48)+($56))|0); //@line 2569 "./stb_image.h"
 var $58=($57<<6); //@line 2569 "./stb_image.h"
 var $59=(($47+($58<<1))|0); //@line 2569 "./stb_image.h"
 $data=$59; //@line 2569 "./stb_image.h"
 var $60=$data; //@line 2570 "./stb_image.h"
 var $61=$n; //@line 2570 "./stb_image.h"
 var $62=$1; //@line 2570 "./stb_image.h"
 var $63=(($62+17820)|0); //@line 2570 "./stb_image.h"
 var $64=(($63+((($61)*(72))&-1))|0); //@line 2570 "./stb_image.h"
 var $65=(($64+12)|0); //@line 2570 "./stb_image.h"
 var $66=HEAP32[(($65)>>2)]; //@line 2570 "./stb_image.h"
 var $67=$1; //@line 2570 "./stb_image.h"
 var $68=(($67+13444)|0); //@line 2570 "./stb_image.h"
 var $69=(($68+($66<<6))|0); //@line 2570 "./stb_image.h"
 var $70=(($69)|0); //@line 2570 "./stb_image.h"
 _stbi__jpeg_dequantize($60,$70); //@line 2570 "./stb_image.h"
 var $71=$1; //@line 2571 "./stb_image.h"
 var $72=(($71+18176)|0); //@line 2571 "./stb_image.h"
 var $73=HEAP32[(($72)>>2)]; //@line 2571 "./stb_image.h"
 var $74=$n; //@line 2571 "./stb_image.h"
 var $75=$1; //@line 2571 "./stb_image.h"
 var $76=(($75+17820)|0); //@line 2571 "./stb_image.h"
 var $77=(($76+((($74)*(72))&-1))|0); //@line 2571 "./stb_image.h"
 var $78=(($77+44)|0); //@line 2571 "./stb_image.h"
 var $79=HEAP32[(($78)>>2)]; //@line 2571 "./stb_image.h"
 var $80=$n; //@line 2571 "./stb_image.h"
 var $81=$1; //@line 2571 "./stb_image.h"
 var $82=(($81+17820)|0); //@line 2571 "./stb_image.h"
 var $83=(($82+((($80)*(72))&-1))|0); //@line 2571 "./stb_image.h"
 var $84=(($83+36)|0); //@line 2571 "./stb_image.h"
 var $85=HEAP32[(($84)>>2)]; //@line 2571 "./stb_image.h"
 var $86=$j; //@line 2571 "./stb_image.h"
 var $87=(Math_imul($85,$86)|0); //@line 2571 "./stb_image.h"
 var $88=($87<<3); //@line 2571 "./stb_image.h"
 var $89=(($79+$88)|0); //@line 2571 "./stb_image.h"
 var $90=$i; //@line 2571 "./stb_image.h"
 var $91=($90<<3); //@line 2571 "./stb_image.h"
 var $92=(($89+$91)|0); //@line 2571 "./stb_image.h"
 var $93=$n; //@line 2571 "./stb_image.h"
 var $94=$1; //@line 2571 "./stb_image.h"
 var $95=(($94+17820)|0); //@line 2571 "./stb_image.h"
 var $96=(($95+((($93)*(72))&-1))|0); //@line 2571 "./stb_image.h"
 var $97=(($96+36)|0); //@line 2571 "./stb_image.h"
 var $98=HEAP32[(($97)>>2)]; //@line 2571 "./stb_image.h"
 var $99=$data; //@line 2571 "./stb_image.h"
 FUNCTION_TABLE[$73]($92,$98,$99); //@line 2571 "./stb_image.h"
 label=9;break; //@line 2572 "./stb_image.h"
 case 9: 
 var $101=$i; //@line 2568 "./stb_image.h"
 var $102=((($101)+(1))|0); //@line 2568 "./stb_image.h"
 $i=$102; //@line 2568 "./stb_image.h"
 label=7;break; //@line 2568 "./stb_image.h"
 case 10: 
 label=11;break; //@line 2573 "./stb_image.h"
 case 11: 
 var $105=$j; //@line 2567 "./stb_image.h"
 var $106=((($105)+(1))|0); //@line 2567 "./stb_image.h"
 $j=$106; //@line 2567 "./stb_image.h"
 label=5;break; //@line 2567 "./stb_image.h"
 case 12: 
 label=13;break; //@line 2574 "./stb_image.h"
 case 13: 
 var $109=$n; //@line 2564 "./stb_image.h"
 var $110=((($109)+(1))|0); //@line 2564 "./stb_image.h"
 $n=$110; //@line 2564 "./stb_image.h"
 label=3;break; //@line 2564 "./stb_image.h"
 case 14: 
 label=15;break; //@line 2575 "./stb_image.h"
 case 15: 
 STACKTOP=sp;return; //@line 2576 "./stb_image.h"
  default: assert(0, "bad label: " + label);
 }

}


function _stbi__jpeg_dequantize($data,$dequant){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $i;
 $1=$data;
 $2=$dequant;
 $i=0; //@line 2555 "./stb_image.h"
 label=2;break; //@line 2555 "./stb_image.h"
 case 2: 
 var $4=$i; //@line 2555 "./stb_image.h"
 var $5=($4|0)<64; //@line 2555 "./stb_image.h"
 if($5){label=3;break;}else{label=5;break;} //@line 2555 "./stb_image.h"
 case 3: 
 var $7=$i; //@line 2556 "./stb_image.h"
 var $8=$2; //@line 2556 "./stb_image.h"
 var $9=(($8+$7)|0); //@line 2556 "./stb_image.h"
 var $10=HEAP8[($9)]; //@line 2556 "./stb_image.h"
 var $11=($10&255); //@line 2556 "./stb_image.h"
 var $12=$i; //@line 2556 "./stb_image.h"
 var $13=$1; //@line 2556 "./stb_image.h"
 var $14=(($13+($12<<1))|0); //@line 2556 "./stb_image.h"
 var $15=HEAP16[(($14)>>1)]; //@line 2556 "./stb_image.h"
 var $16=(($15<<16)>>16); //@line 2556 "./stb_image.h"
 var $17=(Math_imul($16,$11)|0); //@line 2556 "./stb_image.h"
 var $18=(($17)&65535); //@line 2556 "./stb_image.h"
 HEAP16[(($14)>>1)]=$18; //@line 2556 "./stb_image.h"
 label=4;break; //@line 2556 "./stb_image.h"
 case 4: 
 var $20=$i; //@line 2555 "./stb_image.h"
 var $21=((($20)+(1))|0); //@line 2555 "./stb_image.h"
 $i=$21; //@line 2555 "./stb_image.h"
 label=2;break; //@line 2555 "./stb_image.h"
 case 5: 
 STACKTOP=sp;return; //@line 2557 "./stb_image.h"
  default: assert(0, "bad label: " + label);
 }

}


function _stbi__jpeg_reset($j){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 $1=$j;
 var $2=$1; //@line 2417 "./stb_image.h"
 var $3=(($2+18112)|0); //@line 2417 "./stb_image.h"
 HEAP32[(($3)>>2)]=0; //@line 2417 "./stb_image.h"
 var $4=$1; //@line 2418 "./stb_image.h"
 var $5=(($4+18108)|0); //@line 2418 "./stb_image.h"
 HEAP32[(($5)>>2)]=0; //@line 2418 "./stb_image.h"
 var $6=$1; //@line 2419 "./stb_image.h"
 var $7=(($6+18120)|0); //@line 2419 "./stb_image.h"
 HEAP32[(($7)>>2)]=0; //@line 2419 "./stb_image.h"
 var $8=$1; //@line 2420 "./stb_image.h"
 var $9=(($8+17820)|0); //@line 2420 "./stb_image.h"
 var $10=(($9+144)|0); //@line 2420 "./stb_image.h"
 var $11=(($10+24)|0); //@line 2420 "./stb_image.h"
 HEAP32[(($11)>>2)]=0; //@line 2420 "./stb_image.h"
 var $12=$1; //@line 2420 "./stb_image.h"
 var $13=(($12+17820)|0); //@line 2420 "./stb_image.h"
 var $14=(($13+72)|0); //@line 2420 "./stb_image.h"
 var $15=(($14+24)|0); //@line 2420 "./stb_image.h"
 HEAP32[(($15)>>2)]=0; //@line 2420 "./stb_image.h"
 var $16=$1; //@line 2420 "./stb_image.h"
 var $17=(($16+17820)|0); //@line 2420 "./stb_image.h"
 var $18=(($17)|0); //@line 2420 "./stb_image.h"
 var $19=(($18+24)|0); //@line 2420 "./stb_image.h"
 HEAP32[(($19)>>2)]=0; //@line 2420 "./stb_image.h"
 var $20=$1; //@line 2421 "./stb_image.h"
 var $21=(($20+18116)|0); //@line 2421 "./stb_image.h"
 HEAP8[($21)]=-1; //@line 2421 "./stb_image.h"
 var $22=$1; //@line 2422 "./stb_image.h"
 var $23=(($22+18168)|0); //@line 2422 "./stb_image.h"
 var $24=HEAP32[(($23)>>2)]; //@line 2422 "./stb_image.h"
 var $25=($24|0)!=0; //@line 2422 "./stb_image.h"
 if($25){label=2;break;}else{label=3;break;} //@line 2422 "./stb_image.h"
 case 2: 
 var $27=$1; //@line 2422 "./stb_image.h"
 var $28=(($27+18168)|0); //@line 2422 "./stb_image.h"
 var $29=HEAP32[(($28)>>2)]; //@line 2422 "./stb_image.h"
 var $32=$29;label=4;break; //@line 2422 "./stb_image.h"
 case 3: 
 var $32=2147483647;label=4;break; //@line 2422 "./stb_image.h"
 case 4: 
 var $32; //@line 2422 "./stb_image.h"
 var $33=$1; //@line 2422 "./stb_image.h"
 var $34=(($33+18172)|0); //@line 2422 "./stb_image.h"
 HEAP32[(($34)>>2)]=$32; //@line 2422 "./stb_image.h"
 var $35=$1; //@line 2423 "./stb_image.h"
 var $36=(($35+18144)|0); //@line 2423 "./stb_image.h"
 HEAP32[(($36)>>2)]=0; //@line 2423 "./stb_image.h"
 STACKTOP=sp;return; //@line 2426 "./stb_image.h"
  default: assert(0, "bad label: " + label);
 }

}


function _stbi__jpeg_decode_block($j,$data,$hdc,$hac,$fac,$b,$dequant){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 var $7;
 var $8;
 var $diff;
 var $dc;
 var $k;
 var $t;
 var $zig;
 var $c;
 var $r;
 var $s;
 var $rs;
 $2=$j;
 $3=$data;
 $4=$hdc;
 $5=$hac;
 $6=$fac;
 $7=$b;
 $8=$dequant;
 var $9=$2; //@line 1701 "./stb_image.h"
 var $10=(($9+18112)|0); //@line 1701 "./stb_image.h"
 var $11=HEAP32[(($10)>>2)]; //@line 1701 "./stb_image.h"
 var $12=($11|0)<16; //@line 1701 "./stb_image.h"
 if($12){label=2;break;}else{label=3;break;} //@line 1701 "./stb_image.h"
 case 2: 
 var $14=$2; //@line 1701 "./stb_image.h"
 _stbi__grow_buffer_unsafe($14); //@line 1701 "./stb_image.h"
 label=3;break; //@line 1701 "./stb_image.h"
 case 3: 
 var $16=$2; //@line 1702 "./stb_image.h"
 var $17=$4; //@line 1702 "./stb_image.h"
 var $18=_stbi__jpeg_huff_decode($16,$17); //@line 1702 "./stb_image.h"
 $t=$18; //@line 1702 "./stb_image.h"
 var $19=$t; //@line 1703 "./stb_image.h"
 var $20=($19|0)<0; //@line 1703 "./stb_image.h"
 if($20){label=4;break;}else{label=5;break;} //@line 1703 "./stb_image.h"
 case 4: 
 var $22=_stbi__err(138160); //@line 1703 "./stb_image.h"
 $1=$22; //@line 1703 "./stb_image.h"
 label=24;break; //@line 1703 "./stb_image.h"
 case 5: 
 var $24=$3; //@line 1706 "./stb_image.h"
 var $25=$24; //@line 1706 "./stb_image.h"
 _memset($25, 0, 128)|0; //@line 1706 "./stb_image.h"
 var $26=$t; //@line 1708 "./stb_image.h"
 var $27=($26|0)!=0; //@line 1708 "./stb_image.h"
 if($27){label=6;break;}else{label=7;break;} //@line 1708 "./stb_image.h"
 case 6: 
 var $29=$2; //@line 1708 "./stb_image.h"
 var $30=$t; //@line 1708 "./stb_image.h"
 var $31=_stbi__extend_receive($29,$30); //@line 1708 "./stb_image.h"
 var $34=$31;label=8;break; //@line 1708 "./stb_image.h"
 case 7: 
 var $34=0;label=8;break; //@line 1708 "./stb_image.h"
 case 8: 
 var $34; //@line 1708 "./stb_image.h"
 $diff=$34; //@line 1708 "./stb_image.h"
 var $35=$7; //@line 1709 "./stb_image.h"
 var $36=$2; //@line 1709 "./stb_image.h"
 var $37=(($36+17820)|0); //@line 1709 "./stb_image.h"
 var $38=(($37+((($35)*(72))&-1))|0); //@line 1709 "./stb_image.h"
 var $39=(($38+24)|0); //@line 1709 "./stb_image.h"
 var $40=HEAP32[(($39)>>2)]; //@line 1709 "./stb_image.h"
 var $41=$diff; //@line 1709 "./stb_image.h"
 var $42=((($40)+($41))|0); //@line 1709 "./stb_image.h"
 $dc=$42; //@line 1709 "./stb_image.h"
 var $43=$dc; //@line 1710 "./stb_image.h"
 var $44=$7; //@line 1710 "./stb_image.h"
 var $45=$2; //@line 1710 "./stb_image.h"
 var $46=(($45+17820)|0); //@line 1710 "./stb_image.h"
 var $47=(($46+((($44)*(72))&-1))|0); //@line 1710 "./stb_image.h"
 var $48=(($47+24)|0); //@line 1710 "./stb_image.h"
 HEAP32[(($48)>>2)]=$43; //@line 1710 "./stb_image.h"
 var $49=$dc; //@line 1711 "./stb_image.h"
 var $50=$8; //@line 1711 "./stb_image.h"
 var $51=(($50)|0); //@line 1711 "./stb_image.h"
 var $52=HEAP8[($51)]; //@line 1711 "./stb_image.h"
 var $53=($52&255); //@line 1711 "./stb_image.h"
 var $54=(Math_imul($49,$53)|0); //@line 1711 "./stb_image.h"
 var $55=(($54)&65535); //@line 1711 "./stb_image.h"
 var $56=$3; //@line 1711 "./stb_image.h"
 var $57=(($56)|0); //@line 1711 "./stb_image.h"
 HEAP16[(($57)>>1)]=$55; //@line 1711 "./stb_image.h"
 $k=1; //@line 1714 "./stb_image.h"
 label=9;break; //@line 1715 "./stb_image.h"
 case 9: 
 var $59=$2; //@line 1718 "./stb_image.h"
 var $60=(($59+18112)|0); //@line 1718 "./stb_image.h"
 var $61=HEAP32[(($60)>>2)]; //@line 1718 "./stb_image.h"
 var $62=($61|0)<16; //@line 1718 "./stb_image.h"
 if($62){label=10;break;}else{label=11;break;} //@line 1718 "./stb_image.h"
 case 10: 
 var $64=$2; //@line 1718 "./stb_image.h"
 _stbi__grow_buffer_unsafe($64); //@line 1718 "./stb_image.h"
 label=11;break; //@line 1718 "./stb_image.h"
 case 11: 
 var $66=$2; //@line 1719 "./stb_image.h"
 var $67=(($66+18108)|0); //@line 1719 "./stb_image.h"
 var $68=HEAP32[(($67)>>2)]; //@line 1719 "./stb_image.h"
 var $69=$68>>>23; //@line 1719 "./stb_image.h"
 var $70=$69&511; //@line 1719 "./stb_image.h"
 $c=$70; //@line 1719 "./stb_image.h"
 var $71=$c; //@line 1720 "./stb_image.h"
 var $72=$6; //@line 1720 "./stb_image.h"
 var $73=(($72+($71<<1))|0); //@line 1720 "./stb_image.h"
 var $74=HEAP16[(($73)>>1)]; //@line 1720 "./stb_image.h"
 var $75=(($74<<16)>>16); //@line 1720 "./stb_image.h"
 $r=$75; //@line 1720 "./stb_image.h"
 var $76=$r; //@line 1721 "./stb_image.h"
 var $77=($76|0)!=0; //@line 1721 "./stb_image.h"
 if($77){label=12;break;}else{label=13;break;} //@line 1721 "./stb_image.h"
 case 12: 
 var $79=$r; //@line 1722 "./stb_image.h"
 var $80=$79>>4; //@line 1722 "./stb_image.h"
 var $81=$80&15; //@line 1722 "./stb_image.h"
 var $82=$k; //@line 1722 "./stb_image.h"
 var $83=((($82)+($81))|0); //@line 1722 "./stb_image.h"
 $k=$83; //@line 1722 "./stb_image.h"
 var $84=$r; //@line 1723 "./stb_image.h"
 var $85=$84&15; //@line 1723 "./stb_image.h"
 $s=$85; //@line 1723 "./stb_image.h"
 var $86=$s; //@line 1724 "./stb_image.h"
 var $87=$2; //@line 1724 "./stb_image.h"
 var $88=(($87+18108)|0); //@line 1724 "./stb_image.h"
 var $89=HEAP32[(($88)>>2)]; //@line 1724 "./stb_image.h"
 var $90=$89<<$86; //@line 1724 "./stb_image.h"
 HEAP32[(($88)>>2)]=$90; //@line 1724 "./stb_image.h"
 var $91=$s; //@line 1725 "./stb_image.h"
 var $92=$2; //@line 1725 "./stb_image.h"
 var $93=(($92+18112)|0); //@line 1725 "./stb_image.h"
 var $94=HEAP32[(($93)>>2)]; //@line 1725 "./stb_image.h"
 var $95=((($94)-($91))|0); //@line 1725 "./stb_image.h"
 HEAP32[(($93)>>2)]=$95; //@line 1725 "./stb_image.h"
 var $96=$k; //@line 1727 "./stb_image.h"
 var $97=((($96)+(1))|0); //@line 1727 "./stb_image.h"
 $k=$97; //@line 1727 "./stb_image.h"
 var $98=((10152+$96)|0); //@line 1727 "./stb_image.h"
 var $99=HEAP8[($98)]; //@line 1727 "./stb_image.h"
 var $100=($99&255); //@line 1727 "./stb_image.h"
 $zig=$100; //@line 1727 "./stb_image.h"
 var $101=$r; //@line 1728 "./stb_image.h"
 var $102=$101>>8; //@line 1728 "./stb_image.h"
 var $103=$zig; //@line 1728 "./stb_image.h"
 var $104=$8; //@line 1728 "./stb_image.h"
 var $105=(($104+$103)|0); //@line 1728 "./stb_image.h"
 var $106=HEAP8[($105)]; //@line 1728 "./stb_image.h"
 var $107=($106&255); //@line 1728 "./stb_image.h"
 var $108=(Math_imul($102,$107)|0); //@line 1728 "./stb_image.h"
 var $109=(($108)&65535); //@line 1728 "./stb_image.h"
 var $110=$zig; //@line 1728 "./stb_image.h"
 var $111=$3; //@line 1728 "./stb_image.h"
 var $112=(($111+($110<<1))|0); //@line 1728 "./stb_image.h"
 HEAP16[(($112)>>1)]=$109; //@line 1728 "./stb_image.h"
 label=21;break; //@line 1729 "./stb_image.h"
 case 13: 
 var $114=$2; //@line 1730 "./stb_image.h"
 var $115=$5; //@line 1730 "./stb_image.h"
 var $116=_stbi__jpeg_huff_decode($114,$115); //@line 1730 "./stb_image.h"
 $rs=$116; //@line 1730 "./stb_image.h"
 var $117=$rs; //@line 1731 "./stb_image.h"
 var $118=($117|0)<0; //@line 1731 "./stb_image.h"
 if($118){label=14;break;}else{label=15;break;} //@line 1731 "./stb_image.h"
 case 14: 
 var $120=_stbi__err(138160); //@line 1731 "./stb_image.h"
 $1=$120; //@line 1731 "./stb_image.h"
 label=24;break; //@line 1731 "./stb_image.h"
 case 15: 
 var $122=$rs; //@line 1732 "./stb_image.h"
 var $123=$122&15; //@line 1732 "./stb_image.h"
 $s=$123; //@line 1732 "./stb_image.h"
 var $124=$rs; //@line 1733 "./stb_image.h"
 var $125=$124>>4; //@line 1733 "./stb_image.h"
 $r=$125; //@line 1733 "./stb_image.h"
 var $126=$s; //@line 1734 "./stb_image.h"
 var $127=($126|0)==0; //@line 1734 "./stb_image.h"
 if($127){label=16;break;}else{label=19;break;} //@line 1734 "./stb_image.h"
 case 16: 
 var $129=$rs; //@line 1735 "./stb_image.h"
 var $130=($129|0)!=240; //@line 1735 "./stb_image.h"
 if($130){label=17;break;}else{label=18;break;} //@line 1735 "./stb_image.h"
 case 17: 
 label=23;break; //@line 1735 "./stb_image.h"
 case 18: 
 var $133=$k; //@line 1736 "./stb_image.h"
 var $134=((($133)+(16))|0); //@line 1736 "./stb_image.h"
 $k=$134; //@line 1736 "./stb_image.h"
 label=20;break; //@line 1737 "./stb_image.h"
 case 19: 
 var $136=$r; //@line 1738 "./stb_image.h"
 var $137=$k; //@line 1738 "./stb_image.h"
 var $138=((($137)+($136))|0); //@line 1738 "./stb_image.h"
 $k=$138; //@line 1738 "./stb_image.h"
 var $139=$k; //@line 1740 "./stb_image.h"
 var $140=((($139)+(1))|0); //@line 1740 "./stb_image.h"
 $k=$140; //@line 1740 "./stb_image.h"
 var $141=((10152+$139)|0); //@line 1740 "./stb_image.h"
 var $142=HEAP8[($141)]; //@line 1740 "./stb_image.h"
 var $143=($142&255); //@line 1740 "./stb_image.h"
 $zig=$143; //@line 1740 "./stb_image.h"
 var $144=$2; //@line 1741 "./stb_image.h"
 var $145=$s; //@line 1741 "./stb_image.h"
 var $146=_stbi__extend_receive($144,$145); //@line 1741 "./stb_image.h"
 var $147=$zig; //@line 1741 "./stb_image.h"
 var $148=$8; //@line 1741 "./stb_image.h"
 var $149=(($148+$147)|0); //@line 1741 "./stb_image.h"
 var $150=HEAP8[($149)]; //@line 1741 "./stb_image.h"
 var $151=($150&255); //@line 1741 "./stb_image.h"
 var $152=(Math_imul($146,$151)|0); //@line 1741 "./stb_image.h"
 var $153=(($152)&65535); //@line 1741 "./stb_image.h"
 var $154=$zig; //@line 1741 "./stb_image.h"
 var $155=$3; //@line 1741 "./stb_image.h"
 var $156=(($155+($154<<1))|0); //@line 1741 "./stb_image.h"
 HEAP16[(($156)>>1)]=$153; //@line 1741 "./stb_image.h"
 label=20;break;
 case 20: 
 label=21;break;
 case 21: 
 label=22;break; //@line 1744 "./stb_image.h"
 case 22: 
 var $160=$k; //@line 1744 "./stb_image.h"
 var $161=($160|0)<64; //@line 1744 "./stb_image.h"
 if($161){label=9;break;}else{label=23;break;} //@line 1744 "./stb_image.h"
 case 23: 
 $1=1; //@line 1745 "./stb_image.h"
 label=24;break; //@line 1745 "./stb_image.h"
 case 24: 
 var $164=$1; //@line 1746 "./stb_image.h"
 STACKTOP=sp;return $164; //@line 1746 "./stb_image.h"
  default: assert(0, "bad label: " + label);
 }

}


function _stbi__grow_buffer_unsafe($j){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $b;
 var $c;
 $1=$j;
 label=2;break; //@line 1568 "./stb_image.h"
 case 2: 
 var $3=$1; //@line 1569 "./stb_image.h"
 var $4=(($3+18120)|0); //@line 1569 "./stb_image.h"
 var $5=HEAP32[(($4)>>2)]; //@line 1569 "./stb_image.h"
 var $6=($5|0)!=0; //@line 1569 "./stb_image.h"
 if($6){label=3;break;}else{label=4;break;} //@line 1569 "./stb_image.h"
 case 3: 
 var $15=0;label=5;break; //@line 1569 "./stb_image.h"
 case 4: 
 var $9=$1; //@line 1569 "./stb_image.h"
 var $10=(($9)|0); //@line 1569 "./stb_image.h"
 var $11=HEAP32[(($10)>>2)]; //@line 1569 "./stb_image.h"
 var $12=_stbi__get8($11); //@line 1569 "./stb_image.h"
 var $13=($12&255); //@line 1569 "./stb_image.h"
 var $15=$13;label=5;break; //@line 1569 "./stb_image.h"
 case 5: 
 var $15; //@line 1569 "./stb_image.h"
 $b=$15; //@line 1569 "./stb_image.h"
 var $16=$b; //@line 1570 "./stb_image.h"
 var $17=($16|0)==255; //@line 1570 "./stb_image.h"
 if($17){label=6;break;}else{label=9;break;} //@line 1570 "./stb_image.h"
 case 6: 
 var $19=$1; //@line 1571 "./stb_image.h"
 var $20=(($19)|0); //@line 1571 "./stb_image.h"
 var $21=HEAP32[(($20)>>2)]; //@line 1571 "./stb_image.h"
 var $22=_stbi__get8($21); //@line 1571 "./stb_image.h"
 var $23=($22&255); //@line 1571 "./stb_image.h"
 $c=$23; //@line 1571 "./stb_image.h"
 var $24=$c; //@line 1572 "./stb_image.h"
 var $25=($24|0)!=0; //@line 1572 "./stb_image.h"
 if($25){label=7;break;}else{label=8;break;} //@line 1572 "./stb_image.h"
 case 7: 
 var $27=$c; //@line 1573 "./stb_image.h"
 var $28=(($27)&255); //@line 1573 "./stb_image.h"
 var $29=$1; //@line 1573 "./stb_image.h"
 var $30=(($29+18116)|0); //@line 1573 "./stb_image.h"
 HEAP8[($30)]=$28; //@line 1573 "./stb_image.h"
 var $31=$1; //@line 1574 "./stb_image.h"
 var $32=(($31+18120)|0); //@line 1574 "./stb_image.h"
 HEAP32[(($32)>>2)]=1; //@line 1574 "./stb_image.h"
 label=11;break; //@line 1575 "./stb_image.h"
 case 8: 
 label=9;break; //@line 1577 "./stb_image.h"
 case 9: 
 var $35=$b; //@line 1578 "./stb_image.h"
 var $36=$1; //@line 1578 "./stb_image.h"
 var $37=(($36+18112)|0); //@line 1578 "./stb_image.h"
 var $38=HEAP32[(($37)>>2)]; //@line 1578 "./stb_image.h"
 var $39=(((24)-($38))|0); //@line 1578 "./stb_image.h"
 var $40=$35<<$39; //@line 1578 "./stb_image.h"
 var $41=$1; //@line 1578 "./stb_image.h"
 var $42=(($41+18108)|0); //@line 1578 "./stb_image.h"
 var $43=HEAP32[(($42)>>2)]; //@line 1578 "./stb_image.h"
 var $44=$43|$40; //@line 1578 "./stb_image.h"
 HEAP32[(($42)>>2)]=$44; //@line 1578 "./stb_image.h"
 var $45=$1; //@line 1579 "./stb_image.h"
 var $46=(($45+18112)|0); //@line 1579 "./stb_image.h"
 var $47=HEAP32[(($46)>>2)]; //@line 1579 "./stb_image.h"
 var $48=((($47)+(8))|0); //@line 1579 "./stb_image.h"
 HEAP32[(($46)>>2)]=$48; //@line 1579 "./stb_image.h"
 label=10;break; //@line 1580 "./stb_image.h"
 case 10: 
 var $50=$1; //@line 1580 "./stb_image.h"
 var $51=(($50+18112)|0); //@line 1580 "./stb_image.h"
 var $52=HEAP32[(($51)>>2)]; //@line 1580 "./stb_image.h"
 var $53=($52|0)<=24; //@line 1580 "./stb_image.h"
 if($53){label=2;break;}else{label=11;break;} //@line 1580 "./stb_image.h"
 case 11: 
 STACKTOP=sp;return; //@line 1579 "./stb_image.h"
  default: assert(0, "bad label: " + label);
 }

}


function _stbi__jpeg_decode_block_prog_dc($j,$data,$hdc,$b){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $diff;
 var $dc;
 var $t;
 $2=$j;
 $3=$data;
 $4=$hdc;
 $5=$b;
 var $6=$2; //@line 1752 "./stb_image.h"
 var $7=(($6+18132)|0); //@line 1752 "./stb_image.h"
 var $8=HEAP32[(($7)>>2)]; //@line 1752 "./stb_image.h"
 var $9=($8|0)!=0; //@line 1752 "./stb_image.h"
 if($9){label=2;break;}else{label=3;break;} //@line 1752 "./stb_image.h"
 case 2: 
 var $11=_stbi__err(139776); //@line 1752 "./stb_image.h"
 $1=$11; //@line 1752 "./stb_image.h"
 label=14;break; //@line 1752 "./stb_image.h"
 case 3: 
 var $13=$2; //@line 1754 "./stb_image.h"
 var $14=(($13+18112)|0); //@line 1754 "./stb_image.h"
 var $15=HEAP32[(($14)>>2)]; //@line 1754 "./stb_image.h"
 var $16=($15|0)<16; //@line 1754 "./stb_image.h"
 if($16){label=4;break;}else{label=5;break;} //@line 1754 "./stb_image.h"
 case 4: 
 var $18=$2; //@line 1754 "./stb_image.h"
 _stbi__grow_buffer_unsafe($18); //@line 1754 "./stb_image.h"
 label=5;break; //@line 1754 "./stb_image.h"
 case 5: 
 var $20=$2; //@line 1756 "./stb_image.h"
 var $21=(($20+18136)|0); //@line 1756 "./stb_image.h"
 var $22=HEAP32[(($21)>>2)]; //@line 1756 "./stb_image.h"
 var $23=($22|0)==0; //@line 1756 "./stb_image.h"
 if($23){label=6;break;}else{label=10;break;} //@line 1756 "./stb_image.h"
 case 6: 
 var $25=$3; //@line 1758 "./stb_image.h"
 var $26=$25; //@line 1758 "./stb_image.h"
 _memset($26, 0, 128)|0; //@line 1758 "./stb_image.h"
 var $27=$2; //@line 1759 "./stb_image.h"
 var $28=$4; //@line 1759 "./stb_image.h"
 var $29=_stbi__jpeg_huff_decode($27,$28); //@line 1759 "./stb_image.h"
 $t=$29; //@line 1759 "./stb_image.h"
 var $30=$t; //@line 1760 "./stb_image.h"
 var $31=($30|0)!=0; //@line 1760 "./stb_image.h"
 if($31){label=7;break;}else{label=8;break;} //@line 1760 "./stb_image.h"
 case 7: 
 var $33=$2; //@line 1760 "./stb_image.h"
 var $34=$t; //@line 1760 "./stb_image.h"
 var $35=_stbi__extend_receive($33,$34); //@line 1760 "./stb_image.h"
 var $38=$35;label=9;break; //@line 1760 "./stb_image.h"
 case 8: 
 var $38=0;label=9;break; //@line 1760 "./stb_image.h"
 case 9: 
 var $38; //@line 1760 "./stb_image.h"
 $diff=$38; //@line 1760 "./stb_image.h"
 var $39=$5; //@line 1762 "./stb_image.h"
 var $40=$2; //@line 1762 "./stb_image.h"
 var $41=(($40+17820)|0); //@line 1762 "./stb_image.h"
 var $42=(($41+((($39)*(72))&-1))|0); //@line 1762 "./stb_image.h"
 var $43=(($42+24)|0); //@line 1762 "./stb_image.h"
 var $44=HEAP32[(($43)>>2)]; //@line 1762 "./stb_image.h"
 var $45=$diff; //@line 1762 "./stb_image.h"
 var $46=((($44)+($45))|0); //@line 1762 "./stb_image.h"
 $dc=$46; //@line 1762 "./stb_image.h"
 var $47=$dc; //@line 1763 "./stb_image.h"
 var $48=$5; //@line 1763 "./stb_image.h"
 var $49=$2; //@line 1763 "./stb_image.h"
 var $50=(($49+17820)|0); //@line 1763 "./stb_image.h"
 var $51=(($50+((($48)*(72))&-1))|0); //@line 1763 "./stb_image.h"
 var $52=(($51+24)|0); //@line 1763 "./stb_image.h"
 HEAP32[(($52)>>2)]=$47; //@line 1763 "./stb_image.h"
 var $53=$dc; //@line 1764 "./stb_image.h"
 var $54=$2; //@line 1764 "./stb_image.h"
 var $55=(($54+18140)|0); //@line 1764 "./stb_image.h"
 var $56=HEAP32[(($55)>>2)]; //@line 1764 "./stb_image.h"
 var $57=$53<<$56; //@line 1764 "./stb_image.h"
 var $58=(($57)&65535); //@line 1764 "./stb_image.h"
 var $59=$3; //@line 1764 "./stb_image.h"
 var $60=(($59)|0); //@line 1764 "./stb_image.h"
 HEAP16[(($60)>>1)]=$58; //@line 1764 "./stb_image.h"
 label=13;break; //@line 1765 "./stb_image.h"
 case 10: 
 var $62=$2; //@line 1767 "./stb_image.h"
 var $63=_stbi__jpeg_get_bit($62); //@line 1767 "./stb_image.h"
 var $64=($63|0)!=0; //@line 1767 "./stb_image.h"
 if($64){label=11;break;}else{label=12;break;} //@line 1767 "./stb_image.h"
 case 11: 
 var $66=$2; //@line 1768 "./stb_image.h"
 var $67=(($66+18140)|0); //@line 1768 "./stb_image.h"
 var $68=HEAP32[(($67)>>2)]; //@line 1768 "./stb_image.h"
 var $69=1<<$68; //@line 1768 "./stb_image.h"
 var $70=(($69)&65535); //@line 1768 "./stb_image.h"
 var $71=(($70<<16)>>16); //@line 1768 "./stb_image.h"
 var $72=$3; //@line 1768 "./stb_image.h"
 var $73=(($72)|0); //@line 1768 "./stb_image.h"
 var $74=HEAP16[(($73)>>1)]; //@line 1768 "./stb_image.h"
 var $75=(($74<<16)>>16); //@line 1768 "./stb_image.h"
 var $76=((($75)+($71))|0); //@line 1768 "./stb_image.h"
 var $77=(($76)&65535); //@line 1768 "./stb_image.h"
 HEAP16[(($73)>>1)]=$77; //@line 1768 "./stb_image.h"
 label=12;break; //@line 1768 "./stb_image.h"
 case 12: 
 label=13;break;
 case 13: 
 $1=1; //@line 1770 "./stb_image.h"
 label=14;break; //@line 1770 "./stb_image.h"
 case 14: 
 var $81=$1; //@line 1771 "./stb_image.h"
 STACKTOP=sp;return $81; //@line 1771 "./stb_image.h"
  default: assert(0, "bad label: " + label);
 }

}


function _stbi__jpeg_decode_block_prog_ac($j,$data,$hac,$fac){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $k;
 var $shift;
 var $zig;
 var $c;
 var $r;
 var $s;
 var $rs;
 var $bit;
 var $p;
 var $r1;
 var $s2;
 var $rs3;
 var $p4;
 $2=$j;
 $3=$data;
 $4=$hac;
 $5=$fac;
 var $6=$2; //@line 1778 "./stb_image.h"
 var $7=(($6+18128)|0); //@line 1778 "./stb_image.h"
 var $8=HEAP32[(($7)>>2)]; //@line 1778 "./stb_image.h"
 var $9=($8|0)==0; //@line 1778 "./stb_image.h"
 if($9){label=2;break;}else{label=3;break;} //@line 1778 "./stb_image.h"
 case 2: 
 var $11=_stbi__err(139776); //@line 1778 "./stb_image.h"
 $1=$11; //@line 1778 "./stb_image.h"
 label=75;break; //@line 1778 "./stb_image.h"
 case 3: 
 var $13=$2; //@line 1780 "./stb_image.h"
 var $14=(($13+18136)|0); //@line 1780 "./stb_image.h"
 var $15=HEAP32[(($14)>>2)]; //@line 1780 "./stb_image.h"
 var $16=($15|0)==0; //@line 1780 "./stb_image.h"
 if($16){label=4;break;}else{label=24;break;} //@line 1780 "./stb_image.h"
 case 4: 
 var $18=$2; //@line 1781 "./stb_image.h"
 var $19=(($18+18140)|0); //@line 1781 "./stb_image.h"
 var $20=HEAP32[(($19)>>2)]; //@line 1781 "./stb_image.h"
 $shift=$20; //@line 1781 "./stb_image.h"
 var $21=$2; //@line 1783 "./stb_image.h"
 var $22=(($21+18144)|0); //@line 1783 "./stb_image.h"
 var $23=HEAP32[(($22)>>2)]; //@line 1783 "./stb_image.h"
 var $24=($23|0)!=0; //@line 1783 "./stb_image.h"
 if($24){label=5;break;}else{label=6;break;} //@line 1783 "./stb_image.h"
 case 5: 
 var $26=$2; //@line 1784 "./stb_image.h"
 var $27=(($26+18144)|0); //@line 1784 "./stb_image.h"
 var $28=HEAP32[(($27)>>2)]; //@line 1784 "./stb_image.h"
 var $29=((($28)-(1))|0); //@line 1784 "./stb_image.h"
 HEAP32[(($27)>>2)]=$29; //@line 1784 "./stb_image.h"
 $1=1; //@line 1785 "./stb_image.h"
 label=75;break; //@line 1785 "./stb_image.h"
 case 6: 
 var $31=$2; //@line 1788 "./stb_image.h"
 var $32=(($31+18128)|0); //@line 1788 "./stb_image.h"
 var $33=HEAP32[(($32)>>2)]; //@line 1788 "./stb_image.h"
 $k=$33; //@line 1788 "./stb_image.h"
 label=7;break; //@line 1789 "./stb_image.h"
 case 7: 
 var $35=$2; //@line 1792 "./stb_image.h"
 var $36=(($35+18112)|0); //@line 1792 "./stb_image.h"
 var $37=HEAP32[(($36)>>2)]; //@line 1792 "./stb_image.h"
 var $38=($37|0)<16; //@line 1792 "./stb_image.h"
 if($38){label=8;break;}else{label=9;break;} //@line 1792 "./stb_image.h"
 case 8: 
 var $40=$2; //@line 1792 "./stb_image.h"
 _stbi__grow_buffer_unsafe($40); //@line 1792 "./stb_image.h"
 label=9;break; //@line 1792 "./stb_image.h"
 case 9: 
 var $42=$2; //@line 1793 "./stb_image.h"
 var $43=(($42+18108)|0); //@line 1793 "./stb_image.h"
 var $44=HEAP32[(($43)>>2)]; //@line 1793 "./stb_image.h"
 var $45=$44>>>23; //@line 1793 "./stb_image.h"
 var $46=$45&511; //@line 1793 "./stb_image.h"
 $c=$46; //@line 1793 "./stb_image.h"
 var $47=$c; //@line 1794 "./stb_image.h"
 var $48=$5; //@line 1794 "./stb_image.h"
 var $49=(($48+($47<<1))|0); //@line 1794 "./stb_image.h"
 var $50=HEAP16[(($49)>>1)]; //@line 1794 "./stb_image.h"
 var $51=(($50<<16)>>16); //@line 1794 "./stb_image.h"
 $r=$51; //@line 1794 "./stb_image.h"
 var $52=$r; //@line 1795 "./stb_image.h"
 var $53=($52|0)!=0; //@line 1795 "./stb_image.h"
 if($53){label=10;break;}else{label=11;break;} //@line 1795 "./stb_image.h"
 case 10: 
 var $55=$r; //@line 1796 "./stb_image.h"
 var $56=$55>>4; //@line 1796 "./stb_image.h"
 var $57=$56&15; //@line 1796 "./stb_image.h"
 var $58=$k; //@line 1796 "./stb_image.h"
 var $59=((($58)+($57))|0); //@line 1796 "./stb_image.h"
 $k=$59; //@line 1796 "./stb_image.h"
 var $60=$r; //@line 1797 "./stb_image.h"
 var $61=$60&15; //@line 1797 "./stb_image.h"
 $s=$61; //@line 1797 "./stb_image.h"
 var $62=$s; //@line 1798 "./stb_image.h"
 var $63=$2; //@line 1798 "./stb_image.h"
 var $64=(($63+18108)|0); //@line 1798 "./stb_image.h"
 var $65=HEAP32[(($64)>>2)]; //@line 1798 "./stb_image.h"
 var $66=$65<<$62; //@line 1798 "./stb_image.h"
 HEAP32[(($64)>>2)]=$66; //@line 1798 "./stb_image.h"
 var $67=$s; //@line 1799 "./stb_image.h"
 var $68=$2; //@line 1799 "./stb_image.h"
 var $69=(($68+18112)|0); //@line 1799 "./stb_image.h"
 var $70=HEAP32[(($69)>>2)]; //@line 1799 "./stb_image.h"
 var $71=((($70)-($67))|0); //@line 1799 "./stb_image.h"
 HEAP32[(($69)>>2)]=$71; //@line 1799 "./stb_image.h"
 var $72=$k; //@line 1800 "./stb_image.h"
 var $73=((($72)+(1))|0); //@line 1800 "./stb_image.h"
 $k=$73; //@line 1800 "./stb_image.h"
 var $74=((10152+$72)|0); //@line 1800 "./stb_image.h"
 var $75=HEAP8[($74)]; //@line 1800 "./stb_image.h"
 var $76=($75&255); //@line 1800 "./stb_image.h"
 $zig=$76; //@line 1800 "./stb_image.h"
 var $77=$r; //@line 1801 "./stb_image.h"
 var $78=$77>>8; //@line 1801 "./stb_image.h"
 var $79=$shift; //@line 1801 "./stb_image.h"
 var $80=$78<<$79; //@line 1801 "./stb_image.h"
 var $81=(($80)&65535); //@line 1801 "./stb_image.h"
 var $82=$zig; //@line 1801 "./stb_image.h"
 var $83=$3; //@line 1801 "./stb_image.h"
 var $84=(($83+($82<<1))|0); //@line 1801 "./stb_image.h"
 HEAP16[(($84)>>1)]=$81; //@line 1801 "./stb_image.h"
 label=21;break; //@line 1802 "./stb_image.h"
 case 11: 
 var $86=$2; //@line 1803 "./stb_image.h"
 var $87=$4; //@line 1803 "./stb_image.h"
 var $88=_stbi__jpeg_huff_decode($86,$87); //@line 1803 "./stb_image.h"
 $rs=$88; //@line 1803 "./stb_image.h"
 var $89=$rs; //@line 1804 "./stb_image.h"
 var $90=($89|0)<0; //@line 1804 "./stb_image.h"
 if($90){label=12;break;}else{label=13;break;} //@line 1804 "./stb_image.h"
 case 12: 
 var $92=_stbi__err(138160); //@line 1804 "./stb_image.h"
 $1=$92; //@line 1804 "./stb_image.h"
 label=75;break; //@line 1804 "./stb_image.h"
 case 13: 
 var $94=$rs; //@line 1805 "./stb_image.h"
 var $95=$94&15; //@line 1805 "./stb_image.h"
 $s=$95; //@line 1805 "./stb_image.h"
 var $96=$rs; //@line 1806 "./stb_image.h"
 var $97=$96>>4; //@line 1806 "./stb_image.h"
 $r=$97; //@line 1806 "./stb_image.h"
 var $98=$s; //@line 1807 "./stb_image.h"
 var $99=($98|0)==0; //@line 1807 "./stb_image.h"
 if($99){label=14;break;}else{label=19;break;} //@line 1807 "./stb_image.h"
 case 14: 
 var $101=$r; //@line 1808 "./stb_image.h"
 var $102=($101|0)<15; //@line 1808 "./stb_image.h"
 if($102){label=15;break;}else{label=18;break;} //@line 1808 "./stb_image.h"
 case 15: 
 var $104=$r; //@line 1809 "./stb_image.h"
 var $105=1<<$104; //@line 1809 "./stb_image.h"
 var $106=$2; //@line 1809 "./stb_image.h"
 var $107=(($106+18144)|0); //@line 1809 "./stb_image.h"
 HEAP32[(($107)>>2)]=$105; //@line 1809 "./stb_image.h"
 var $108=$r; //@line 1810 "./stb_image.h"
 var $109=($108|0)!=0; //@line 1810 "./stb_image.h"
 if($109){label=16;break;}else{label=17;break;} //@line 1810 "./stb_image.h"
 case 16: 
 var $111=$2; //@line 1811 "./stb_image.h"
 var $112=$r; //@line 1811 "./stb_image.h"
 var $113=_stbi__jpeg_get_bits($111,$112); //@line 1811 "./stb_image.h"
 var $114=$2; //@line 1811 "./stb_image.h"
 var $115=(($114+18144)|0); //@line 1811 "./stb_image.h"
 var $116=HEAP32[(($115)>>2)]; //@line 1811 "./stb_image.h"
 var $117=((($116)+($113))|0); //@line 1811 "./stb_image.h"
 HEAP32[(($115)>>2)]=$117; //@line 1811 "./stb_image.h"
 label=17;break; //@line 1811 "./stb_image.h"
 case 17: 
 var $119=$2; //@line 1812 "./stb_image.h"
 var $120=(($119+18144)|0); //@line 1812 "./stb_image.h"
 var $121=HEAP32[(($120)>>2)]; //@line 1812 "./stb_image.h"
 var $122=((($121)-(1))|0); //@line 1812 "./stb_image.h"
 HEAP32[(($120)>>2)]=$122; //@line 1812 "./stb_image.h"
 label=23;break; //@line 1813 "./stb_image.h"
 case 18: 
 var $124=$k; //@line 1815 "./stb_image.h"
 var $125=((($124)+(16))|0); //@line 1815 "./stb_image.h"
 $k=$125; //@line 1815 "./stb_image.h"
 label=20;break; //@line 1816 "./stb_image.h"
 case 19: 
 var $127=$r; //@line 1817 "./stb_image.h"
 var $128=$k; //@line 1817 "./stb_image.h"
 var $129=((($128)+($127))|0); //@line 1817 "./stb_image.h"
 $k=$129; //@line 1817 "./stb_image.h"
 var $130=$k; //@line 1818 "./stb_image.h"
 var $131=((($130)+(1))|0); //@line 1818 "./stb_image.h"
 $k=$131; //@line 1818 "./stb_image.h"
 var $132=((10152+$130)|0); //@line 1818 "./stb_image.h"
 var $133=HEAP8[($132)]; //@line 1818 "./stb_image.h"
 var $134=($133&255); //@line 1818 "./stb_image.h"
 $zig=$134; //@line 1818 "./stb_image.h"
 var $135=$2; //@line 1819 "./stb_image.h"
 var $136=$s; //@line 1819 "./stb_image.h"
 var $137=_stbi__extend_receive($135,$136); //@line 1819 "./stb_image.h"
 var $138=$shift; //@line 1819 "./stb_image.h"
 var $139=$137<<$138; //@line 1819 "./stb_image.h"
 var $140=(($139)&65535); //@line 1819 "./stb_image.h"
 var $141=$zig; //@line 1819 "./stb_image.h"
 var $142=$3; //@line 1819 "./stb_image.h"
 var $143=(($142+($141<<1))|0); //@line 1819 "./stb_image.h"
 HEAP16[(($143)>>1)]=$140; //@line 1819 "./stb_image.h"
 label=20;break;
 case 20: 
 label=21;break;
 case 21: 
 label=22;break; //@line 1822 "./stb_image.h"
 case 22: 
 var $147=$k; //@line 1822 "./stb_image.h"
 var $148=$2; //@line 1822 "./stb_image.h"
 var $149=(($148+18132)|0); //@line 1822 "./stb_image.h"
 var $150=HEAP32[(($149)>>2)]; //@line 1822 "./stb_image.h"
 var $151=($147|0)<=($150|0); //@line 1822 "./stb_image.h"
 if($151){label=7;break;}else{label=23;break;} //@line 1822 "./stb_image.h"
 case 23: 
 label=74;break; //@line 1823 "./stb_image.h"
 case 24: 
 var $154=$2; //@line 1826 "./stb_image.h"
 var $155=(($154+18140)|0); //@line 1826 "./stb_image.h"
 var $156=HEAP32[(($155)>>2)]; //@line 1826 "./stb_image.h"
 var $157=1<<$156; //@line 1826 "./stb_image.h"
 var $158=(($157)&65535); //@line 1826 "./stb_image.h"
 $bit=$158; //@line 1826 "./stb_image.h"
 var $159=$2; //@line 1828 "./stb_image.h"
 var $160=(($159+18144)|0); //@line 1828 "./stb_image.h"
 var $161=HEAP32[(($160)>>2)]; //@line 1828 "./stb_image.h"
 var $162=($161|0)!=0; //@line 1828 "./stb_image.h"
 if($162){label=25;break;}else{label=39;break;} //@line 1828 "./stb_image.h"
 case 25: 
 var $164=$2; //@line 1829 "./stb_image.h"
 var $165=(($164+18144)|0); //@line 1829 "./stb_image.h"
 var $166=HEAP32[(($165)>>2)]; //@line 1829 "./stb_image.h"
 var $167=((($166)-(1))|0); //@line 1829 "./stb_image.h"
 HEAP32[(($165)>>2)]=$167; //@line 1829 "./stb_image.h"
 var $168=$2; //@line 1830 "./stb_image.h"
 var $169=(($168+18128)|0); //@line 1830 "./stb_image.h"
 var $170=HEAP32[(($169)>>2)]; //@line 1830 "./stb_image.h"
 $k=$170; //@line 1830 "./stb_image.h"
 label=26;break; //@line 1830 "./stb_image.h"
 case 26: 
 var $172=$k; //@line 1830 "./stb_image.h"
 var $173=$2; //@line 1830 "./stb_image.h"
 var $174=(($173+18132)|0); //@line 1830 "./stb_image.h"
 var $175=HEAP32[(($174)>>2)]; //@line 1830 "./stb_image.h"
 var $176=($172|0)<=($175|0); //@line 1830 "./stb_image.h"
 if($176){label=27;break;}else{label=38;break;} //@line 1830 "./stb_image.h"
 case 27: 
 var $178=$k; //@line 1831 "./stb_image.h"
 var $179=((10152+$178)|0); //@line 1831 "./stb_image.h"
 var $180=HEAP8[($179)]; //@line 1831 "./stb_image.h"
 var $181=($180&255); //@line 1831 "./stb_image.h"
 var $182=$3; //@line 1831 "./stb_image.h"
 var $183=(($182+($181<<1))|0); //@line 1831 "./stb_image.h"
 $p=$183; //@line 1831 "./stb_image.h"
 var $184=$p; //@line 1832 "./stb_image.h"
 var $185=HEAP16[(($184)>>1)]; //@line 1832 "./stb_image.h"
 var $186=(($185<<16)>>16); //@line 1832 "./stb_image.h"
 var $187=($186|0)!=0; //@line 1832 "./stb_image.h"
 if($187){label=28;break;}else{label=36;break;} //@line 1832 "./stb_image.h"
 case 28: 
 var $189=$2; //@line 1833 "./stb_image.h"
 var $190=_stbi__jpeg_get_bit($189); //@line 1833 "./stb_image.h"
 var $191=($190|0)!=0; //@line 1833 "./stb_image.h"
 if($191){label=29;break;}else{label=35;break;} //@line 1833 "./stb_image.h"
 case 29: 
 var $193=$p; //@line 1834 "./stb_image.h"
 var $194=HEAP16[(($193)>>1)]; //@line 1834 "./stb_image.h"
 var $195=(($194<<16)>>16); //@line 1834 "./stb_image.h"
 var $196=$bit; //@line 1834 "./stb_image.h"
 var $197=(($196<<16)>>16); //@line 1834 "./stb_image.h"
 var $198=$195&$197; //@line 1834 "./stb_image.h"
 var $199=($198|0)==0; //@line 1834 "./stb_image.h"
 if($199){label=30;break;}else{label=34;break;} //@line 1834 "./stb_image.h"
 case 30: 
 var $201=$p; //@line 1835 "./stb_image.h"
 var $202=HEAP16[(($201)>>1)]; //@line 1835 "./stb_image.h"
 var $203=(($202<<16)>>16); //@line 1835 "./stb_image.h"
 var $204=($203|0)>0; //@line 1835 "./stb_image.h"
 if($204){label=31;break;}else{label=32;break;} //@line 1835 "./stb_image.h"
 case 31: 
 var $206=$bit; //@line 1836 "./stb_image.h"
 var $207=(($206<<16)>>16); //@line 1836 "./stb_image.h"
 var $208=$p; //@line 1836 "./stb_image.h"
 var $209=HEAP16[(($208)>>1)]; //@line 1836 "./stb_image.h"
 var $210=(($209<<16)>>16); //@line 1836 "./stb_image.h"
 var $211=((($210)+($207))|0); //@line 1836 "./stb_image.h"
 var $212=(($211)&65535); //@line 1836 "./stb_image.h"
 HEAP16[(($208)>>1)]=$212; //@line 1836 "./stb_image.h"
 label=33;break; //@line 1836 "./stb_image.h"
 case 32: 
 var $214=$bit; //@line 1838 "./stb_image.h"
 var $215=(($214<<16)>>16); //@line 1838 "./stb_image.h"
 var $216=$p; //@line 1838 "./stb_image.h"
 var $217=HEAP16[(($216)>>1)]; //@line 1838 "./stb_image.h"
 var $218=(($217<<16)>>16); //@line 1838 "./stb_image.h"
 var $219=((($218)-($215))|0); //@line 1838 "./stb_image.h"
 var $220=(($219)&65535); //@line 1838 "./stb_image.h"
 HEAP16[(($216)>>1)]=$220; //@line 1838 "./stb_image.h"
 label=33;break;
 case 33: 
 label=34;break; //@line 1839 "./stb_image.h"
 case 34: 
 label=35;break; //@line 1839 "./stb_image.h"
 case 35: 
 label=36;break; //@line 1839 "./stb_image.h"
 case 36: 
 label=37;break; //@line 1840 "./stb_image.h"
 case 37: 
 var $226=$k; //@line 1830 "./stb_image.h"
 var $227=((($226)+(1))|0); //@line 1830 "./stb_image.h"
 $k=$227; //@line 1830 "./stb_image.h"
 label=26;break; //@line 1830 "./stb_image.h"
 case 38: 
 label=73;break; //@line 1841 "./stb_image.h"
 case 39: 
 var $230=$2; //@line 1842 "./stb_image.h"
 var $231=(($230+18128)|0); //@line 1842 "./stb_image.h"
 var $232=HEAP32[(($231)>>2)]; //@line 1842 "./stb_image.h"
 $k=$232; //@line 1842 "./stb_image.h"
 label=40;break; //@line 1843 "./stb_image.h"
 case 40: 
 var $234=$2; //@line 1845 "./stb_image.h"
 var $235=$4; //@line 1845 "./stb_image.h"
 var $236=_stbi__jpeg_huff_decode($234,$235); //@line 1845 "./stb_image.h"
 $rs3=$236; //@line 1845 "./stb_image.h"
 var $237=$rs3; //@line 1846 "./stb_image.h"
 var $238=($237|0)<0; //@line 1846 "./stb_image.h"
 if($238){label=41;break;}else{label=42;break;} //@line 1846 "./stb_image.h"
 case 41: 
 var $240=_stbi__err(138160); //@line 1846 "./stb_image.h"
 $1=$240; //@line 1846 "./stb_image.h"
 label=75;break; //@line 1846 "./stb_image.h"
 case 42: 
 var $242=$rs3; //@line 1847 "./stb_image.h"
 var $243=$242&15; //@line 1847 "./stb_image.h"
 $s2=$243; //@line 1847 "./stb_image.h"
 var $244=$rs3; //@line 1848 "./stb_image.h"
 var $245=$244>>4; //@line 1848 "./stb_image.h"
 $r1=$245; //@line 1848 "./stb_image.h"
 var $246=$s2; //@line 1849 "./stb_image.h"
 var $247=($246|0)==0; //@line 1849 "./stb_image.h"
 if($247){label=43;break;}else{label=49;break;} //@line 1849 "./stb_image.h"
 case 43: 
 var $249=$r1; //@line 1850 "./stb_image.h"
 var $250=($249|0)<15; //@line 1850 "./stb_image.h"
 if($250){label=44;break;}else{label=47;break;} //@line 1850 "./stb_image.h"
 case 44: 
 var $252=$r1; //@line 1851 "./stb_image.h"
 var $253=1<<$252; //@line 1851 "./stb_image.h"
 var $254=((($253)-(1))|0); //@line 1851 "./stb_image.h"
 var $255=$2; //@line 1851 "./stb_image.h"
 var $256=(($255+18144)|0); //@line 1851 "./stb_image.h"
 HEAP32[(($256)>>2)]=$254; //@line 1851 "./stb_image.h"
 var $257=$r1; //@line 1852 "./stb_image.h"
 var $258=($257|0)!=0; //@line 1852 "./stb_image.h"
 if($258){label=45;break;}else{label=46;break;} //@line 1852 "./stb_image.h"
 case 45: 
 var $260=$2; //@line 1853 "./stb_image.h"
 var $261=$r1; //@line 1853 "./stb_image.h"
 var $262=_stbi__jpeg_get_bits($260,$261); //@line 1853 "./stb_image.h"
 var $263=$2; //@line 1853 "./stb_image.h"
 var $264=(($263+18144)|0); //@line 1853 "./stb_image.h"
 var $265=HEAP32[(($264)>>2)]; //@line 1853 "./stb_image.h"
 var $266=((($265)+($262))|0); //@line 1853 "./stb_image.h"
 HEAP32[(($264)>>2)]=$266; //@line 1853 "./stb_image.h"
 label=46;break; //@line 1853 "./stb_image.h"
 case 46: 
 $r1=64; //@line 1854 "./stb_image.h"
 label=48;break; //@line 1855 "./stb_image.h"
 case 47: 
 label=48;break;
 case 48: 
 label=55;break; //@line 1860 "./stb_image.h"
 case 49: 
 var $271=$s2; //@line 1861 "./stb_image.h"
 var $272=($271|0)!=1; //@line 1861 "./stb_image.h"
 if($272){label=50;break;}else{label=51;break;} //@line 1861 "./stb_image.h"
 case 50: 
 var $274=_stbi__err(138160); //@line 1861 "./stb_image.h"
 $1=$274; //@line 1861 "./stb_image.h"
 label=75;break; //@line 1861 "./stb_image.h"
 case 51: 
 var $276=$2; //@line 1863 "./stb_image.h"
 var $277=_stbi__jpeg_get_bit($276); //@line 1863 "./stb_image.h"
 var $278=($277|0)!=0; //@line 1863 "./stb_image.h"
 if($278){label=52;break;}else{label=53;break;} //@line 1863 "./stb_image.h"
 case 52: 
 var $280=$bit; //@line 1864 "./stb_image.h"
 var $281=(($280<<16)>>16); //@line 1864 "./stb_image.h"
 $s2=$281; //@line 1864 "./stb_image.h"
 label=54;break; //@line 1864 "./stb_image.h"
 case 53: 
 var $283=$bit; //@line 1866 "./stb_image.h"
 var $284=(($283<<16)>>16); //@line 1866 "./stb_image.h"
 var $285=(((-$284))|0); //@line 1866 "./stb_image.h"
 $s2=$285; //@line 1866 "./stb_image.h"
 label=54;break;
 case 54: 
 label=55;break;
 case 55: 
 label=56;break; //@line 1870 "./stb_image.h"
 case 56: 
 var $289=$k; //@line 1870 "./stb_image.h"
 var $290=$2; //@line 1870 "./stb_image.h"
 var $291=(($290+18132)|0); //@line 1870 "./stb_image.h"
 var $292=HEAP32[(($291)>>2)]; //@line 1870 "./stb_image.h"
 var $293=($289|0)<=($292|0); //@line 1870 "./stb_image.h"
 if($293){label=57;break;}else{label=70;break;} //@line 1870 "./stb_image.h"
 case 57: 
 var $295=$k; //@line 1871 "./stb_image.h"
 var $296=((($295)+(1))|0); //@line 1871 "./stb_image.h"
 $k=$296; //@line 1871 "./stb_image.h"
 var $297=((10152+$295)|0); //@line 1871 "./stb_image.h"
 var $298=HEAP8[($297)]; //@line 1871 "./stb_image.h"
 var $299=($298&255); //@line 1871 "./stb_image.h"
 var $300=$3; //@line 1871 "./stb_image.h"
 var $301=(($300+($299<<1))|0); //@line 1871 "./stb_image.h"
 $p4=$301; //@line 1871 "./stb_image.h"
 var $302=$p4; //@line 1872 "./stb_image.h"
 var $303=HEAP16[(($302)>>1)]; //@line 1872 "./stb_image.h"
 var $304=(($303<<16)>>16); //@line 1872 "./stb_image.h"
 var $305=($304|0)!=0; //@line 1872 "./stb_image.h"
 if($305){label=58;break;}else{label=66;break;} //@line 1872 "./stb_image.h"
 case 58: 
 var $307=$2; //@line 1873 "./stb_image.h"
 var $308=_stbi__jpeg_get_bit($307); //@line 1873 "./stb_image.h"
 var $309=($308|0)!=0; //@line 1873 "./stb_image.h"
 if($309){label=59;break;}else{label=65;break;} //@line 1873 "./stb_image.h"
 case 59: 
 var $311=$p4; //@line 1874 "./stb_image.h"
 var $312=HEAP16[(($311)>>1)]; //@line 1874 "./stb_image.h"
 var $313=(($312<<16)>>16); //@line 1874 "./stb_image.h"
 var $314=$bit; //@line 1874 "./stb_image.h"
 var $315=(($314<<16)>>16); //@line 1874 "./stb_image.h"
 var $316=$313&$315; //@line 1874 "./stb_image.h"
 var $317=($316|0)==0; //@line 1874 "./stb_image.h"
 if($317){label=60;break;}else{label=64;break;} //@line 1874 "./stb_image.h"
 case 60: 
 var $319=$p4; //@line 1875 "./stb_image.h"
 var $320=HEAP16[(($319)>>1)]; //@line 1875 "./stb_image.h"
 var $321=(($320<<16)>>16); //@line 1875 "./stb_image.h"
 var $322=($321|0)>0; //@line 1875 "./stb_image.h"
 if($322){label=61;break;}else{label=62;break;} //@line 1875 "./stb_image.h"
 case 61: 
 var $324=$bit; //@line 1876 "./stb_image.h"
 var $325=(($324<<16)>>16); //@line 1876 "./stb_image.h"
 var $326=$p4; //@line 1876 "./stb_image.h"
 var $327=HEAP16[(($326)>>1)]; //@line 1876 "./stb_image.h"
 var $328=(($327<<16)>>16); //@line 1876 "./stb_image.h"
 var $329=((($328)+($325))|0); //@line 1876 "./stb_image.h"
 var $330=(($329)&65535); //@line 1876 "./stb_image.h"
 HEAP16[(($326)>>1)]=$330; //@line 1876 "./stb_image.h"
 label=63;break; //@line 1876 "./stb_image.h"
 case 62: 
 var $332=$bit; //@line 1878 "./stb_image.h"
 var $333=(($332<<16)>>16); //@line 1878 "./stb_image.h"
 var $334=$p4; //@line 1878 "./stb_image.h"
 var $335=HEAP16[(($334)>>1)]; //@line 1878 "./stb_image.h"
 var $336=(($335<<16)>>16); //@line 1878 "./stb_image.h"
 var $337=((($336)-($333))|0); //@line 1878 "./stb_image.h"
 var $338=(($337)&65535); //@line 1878 "./stb_image.h"
 HEAP16[(($334)>>1)]=$338; //@line 1878 "./stb_image.h"
 label=63;break;
 case 63: 
 label=64;break; //@line 1879 "./stb_image.h"
 case 64: 
 label=65;break; //@line 1879 "./stb_image.h"
 case 65: 
 label=69;break; //@line 1880 "./stb_image.h"
 case 66: 
 var $343=$r1; //@line 1881 "./stb_image.h"
 var $344=($343|0)==0; //@line 1881 "./stb_image.h"
 if($344){label=67;break;}else{label=68;break;} //@line 1881 "./stb_image.h"
 case 67: 
 var $346=$s2; //@line 1882 "./stb_image.h"
 var $347=(($346)&65535); //@line 1882 "./stb_image.h"
 var $348=$p4; //@line 1882 "./stb_image.h"
 HEAP16[(($348)>>1)]=$347; //@line 1882 "./stb_image.h"
 label=70;break; //@line 1883 "./stb_image.h"
 case 68: 
 var $350=$r1; //@line 1885 "./stb_image.h"
 var $351=((($350)-(1))|0); //@line 1885 "./stb_image.h"
 $r1=$351; //@line 1885 "./stb_image.h"
 label=69;break;
 case 69: 
 label=56;break; //@line 1887 "./stb_image.h"
 case 70: 
 label=71;break; //@line 1888 "./stb_image.h"
 case 71: 
 var $355=$k; //@line 1888 "./stb_image.h"
 var $356=$2; //@line 1888 "./stb_image.h"
 var $357=(($356+18132)|0); //@line 1888 "./stb_image.h"
 var $358=HEAP32[(($357)>>2)]; //@line 1888 "./stb_image.h"
 var $359=($355|0)<=($358|0); //@line 1888 "./stb_image.h"
 if($359){label=40;break;}else{label=72;break;} //@line 1888 "./stb_image.h"
 case 72: 
 label=73;break;
 case 73: 
 label=74;break;
 case 74: 
 $1=1; //@line 1891 "./stb_image.h"
 label=75;break; //@line 1891 "./stb_image.h"
 case 75: 
 var $364=$1; //@line 1892 "./stb_image.h"
 STACKTOP=sp;return $364; //@line 1892 "./stb_image.h"
  default: assert(0, "bad label: " + label);
 }

}


function _stbi__jpeg_huff_decode($j,$h){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $temp;
 var $c;
 var $k;
 var $s;
 $2=$j;
 $3=$h;
 var $4=$2; //@line 1592 "./stb_image.h"
 var $5=(($4+18112)|0); //@line 1592 "./stb_image.h"
 var $6=HEAP32[(($5)>>2)]; //@line 1592 "./stb_image.h"
 var $7=($6|0)<16; //@line 1592 "./stb_image.h"
 if($7){label=2;break;}else{label=3;break;} //@line 1592 "./stb_image.h"
 case 2: 
 var $9=$2; //@line 1592 "./stb_image.h"
 _stbi__grow_buffer_unsafe($9); //@line 1592 "./stb_image.h"
 label=3;break; //@line 1592 "./stb_image.h"
 case 3: 
 var $11=$2; //@line 1596 "./stb_image.h"
 var $12=(($11+18108)|0); //@line 1596 "./stb_image.h"
 var $13=HEAP32[(($12)>>2)]; //@line 1596 "./stb_image.h"
 var $14=$13>>>23; //@line 1596 "./stb_image.h"
 var $15=$14&511; //@line 1596 "./stb_image.h"
 $c=$15; //@line 1596 "./stb_image.h"
 var $16=$c; //@line 1597 "./stb_image.h"
 var $17=$3; //@line 1597 "./stb_image.h"
 var $18=(($17)|0); //@line 1597 "./stb_image.h"
 var $19=(($18+$16)|0); //@line 1597 "./stb_image.h"
 var $20=HEAP8[($19)]; //@line 1597 "./stb_image.h"
 var $21=($20&255); //@line 1597 "./stb_image.h"
 $k=$21; //@line 1597 "./stb_image.h"
 var $22=$k; //@line 1598 "./stb_image.h"
 var $23=($22|0)<255; //@line 1598 "./stb_image.h"
 if($23){label=4;break;}else{label=7;break;} //@line 1598 "./stb_image.h"
 case 4: 
 var $25=$k; //@line 1599 "./stb_image.h"
 var $26=$3; //@line 1599 "./stb_image.h"
 var $27=(($26+1280)|0); //@line 1599 "./stb_image.h"
 var $28=(($27+$25)|0); //@line 1599 "./stb_image.h"
 var $29=HEAP8[($28)]; //@line 1599 "./stb_image.h"
 var $30=($29&255); //@line 1599 "./stb_image.h"
 $s=$30; //@line 1599 "./stb_image.h"
 var $31=$s; //@line 1600 "./stb_image.h"
 var $32=$2; //@line 1600 "./stb_image.h"
 var $33=(($32+18112)|0); //@line 1600 "./stb_image.h"
 var $34=HEAP32[(($33)>>2)]; //@line 1600 "./stb_image.h"
 var $35=($31|0)>($34|0); //@line 1600 "./stb_image.h"
 if($35){label=5;break;}else{label=6;break;} //@line 1600 "./stb_image.h"
 case 5: 
 $1=-1; //@line 1601 "./stb_image.h"
 label=19;break; //@line 1601 "./stb_image.h"
 case 6: 
 var $38=$s; //@line 1602 "./stb_image.h"
 var $39=$2; //@line 1602 "./stb_image.h"
 var $40=(($39+18108)|0); //@line 1602 "./stb_image.h"
 var $41=HEAP32[(($40)>>2)]; //@line 1602 "./stb_image.h"
 var $42=$41<<$38; //@line 1602 "./stb_image.h"
 HEAP32[(($40)>>2)]=$42; //@line 1602 "./stb_image.h"
 var $43=$s; //@line 1603 "./stb_image.h"
 var $44=$2; //@line 1603 "./stb_image.h"
 var $45=(($44+18112)|0); //@line 1603 "./stb_image.h"
 var $46=HEAP32[(($45)>>2)]; //@line 1603 "./stb_image.h"
 var $47=((($46)-($43))|0); //@line 1603 "./stb_image.h"
 HEAP32[(($45)>>2)]=$47; //@line 1603 "./stb_image.h"
 var $48=$k; //@line 1604 "./stb_image.h"
 var $49=$3; //@line 1604 "./stb_image.h"
 var $50=(($49+1024)|0); //@line 1604 "./stb_image.h"
 var $51=(($50+$48)|0); //@line 1604 "./stb_image.h"
 var $52=HEAP8[($51)]; //@line 1604 "./stb_image.h"
 var $53=($52&255); //@line 1604 "./stb_image.h"
 $1=$53; //@line 1604 "./stb_image.h"
 label=19;break; //@line 1604 "./stb_image.h"
 case 7: 
 var $55=$2; //@line 1613 "./stb_image.h"
 var $56=(($55+18108)|0); //@line 1613 "./stb_image.h"
 var $57=HEAP32[(($56)>>2)]; //@line 1613 "./stb_image.h"
 var $58=$57>>>16; //@line 1613 "./stb_image.h"
 $temp=$58; //@line 1613 "./stb_image.h"
 $k=10; //@line 1614 "./stb_image.h"
 label=8;break; //@line 1614 "./stb_image.h"
 case 8: 
 var $60=$temp; //@line 1615 "./stb_image.h"
 var $61=$k; //@line 1615 "./stb_image.h"
 var $62=$3; //@line 1615 "./stb_image.h"
 var $63=(($62+1540)|0); //@line 1615 "./stb_image.h"
 var $64=(($63+($61<<2))|0); //@line 1615 "./stb_image.h"
 var $65=HEAP32[(($64)>>2)]; //@line 1615 "./stb_image.h"
 var $66=($60>>>0)<($65>>>0); //@line 1615 "./stb_image.h"
 if($66){label=9;break;}else{label=10;break;} //@line 1615 "./stb_image.h"
 case 9: 
 label=12;break; //@line 1616 "./stb_image.h"
 case 10: 
 label=11;break; //@line 1616 "./stb_image.h"
 case 11: 
 var $70=$k; //@line 1614 "./stb_image.h"
 var $71=((($70)+(1))|0); //@line 1614 "./stb_image.h"
 $k=$71; //@line 1614 "./stb_image.h"
 label=8;break; //@line 1614 "./stb_image.h"
 case 12: 
 var $73=$k; //@line 1617 "./stb_image.h"
 var $74=($73|0)==17; //@line 1617 "./stb_image.h"
 if($74){label=13;break;}else{label=14;break;} //@line 1617 "./stb_image.h"
 case 13: 
 var $76=$2; //@line 1619 "./stb_image.h"
 var $77=(($76+18112)|0); //@line 1619 "./stb_image.h"
 var $78=HEAP32[(($77)>>2)]; //@line 1619 "./stb_image.h"
 var $79=((($78)-(16))|0); //@line 1619 "./stb_image.h"
 HEAP32[(($77)>>2)]=$79; //@line 1619 "./stb_image.h"
 $1=-1; //@line 1620 "./stb_image.h"
 label=19;break; //@line 1620 "./stb_image.h"
 case 14: 
 var $81=$k; //@line 1623 "./stb_image.h"
 var $82=$2; //@line 1623 "./stb_image.h"
 var $83=(($82+18112)|0); //@line 1623 "./stb_image.h"
 var $84=HEAP32[(($83)>>2)]; //@line 1623 "./stb_image.h"
 var $85=($81|0)>($84|0); //@line 1623 "./stb_image.h"
 if($85){label=15;break;}else{label=16;break;} //@line 1623 "./stb_image.h"
 case 15: 
 $1=-1; //@line 1624 "./stb_image.h"
 label=19;break; //@line 1624 "./stb_image.h"
 case 16: 
 var $88=$2; //@line 1627 "./stb_image.h"
 var $89=(($88+18108)|0); //@line 1627 "./stb_image.h"
 var $90=HEAP32[(($89)>>2)]; //@line 1627 "./stb_image.h"
 var $91=$k; //@line 1627 "./stb_image.h"
 var $92=(((32)-($91))|0); //@line 1627 "./stb_image.h"
 var $93=$90>>>($92>>>0); //@line 1627 "./stb_image.h"
 var $94=$k; //@line 1627 "./stb_image.h"
 var $95=((10488+($94<<2))|0); //@line 1627 "./stb_image.h"
 var $96=HEAP32[(($95)>>2)]; //@line 1627 "./stb_image.h"
 var $97=$93&$96; //@line 1627 "./stb_image.h"
 var $98=$k; //@line 1627 "./stb_image.h"
 var $99=$3; //@line 1627 "./stb_image.h"
 var $100=(($99+1612)|0); //@line 1627 "./stb_image.h"
 var $101=(($100+($98<<2))|0); //@line 1627 "./stb_image.h"
 var $102=HEAP32[(($101)>>2)]; //@line 1627 "./stb_image.h"
 var $103=((($97)+($102))|0); //@line 1627 "./stb_image.h"
 $c=$103; //@line 1627 "./stb_image.h"
 var $104=$2; //@line 1628 "./stb_image.h"
 var $105=(($104+18108)|0); //@line 1628 "./stb_image.h"
 var $106=HEAP32[(($105)>>2)]; //@line 1628 "./stb_image.h"
 var $107=$c; //@line 1628 "./stb_image.h"
 var $108=$3; //@line 1628 "./stb_image.h"
 var $109=(($108+1280)|0); //@line 1628 "./stb_image.h"
 var $110=(($109+$107)|0); //@line 1628 "./stb_image.h"
 var $111=HEAP8[($110)]; //@line 1628 "./stb_image.h"
 var $112=($111&255); //@line 1628 "./stb_image.h"
 var $113=(((32)-($112))|0); //@line 1628 "./stb_image.h"
 var $114=$106>>>($113>>>0); //@line 1628 "./stb_image.h"
 var $115=$c; //@line 1628 "./stb_image.h"
 var $116=$3; //@line 1628 "./stb_image.h"
 var $117=(($116+1280)|0); //@line 1628 "./stb_image.h"
 var $118=(($117+$115)|0); //@line 1628 "./stb_image.h"
 var $119=HEAP8[($118)]; //@line 1628 "./stb_image.h"
 var $120=($119&255); //@line 1628 "./stb_image.h"
 var $121=((10488+($120<<2))|0); //@line 1628 "./stb_image.h"
 var $122=HEAP32[(($121)>>2)]; //@line 1628 "./stb_image.h"
 var $123=$114&$122; //@line 1628 "./stb_image.h"
 var $124=$c; //@line 1628 "./stb_image.h"
 var $125=$3; //@line 1628 "./stb_image.h"
 var $126=(($125+512)|0); //@line 1628 "./stb_image.h"
 var $127=(($126+($124<<1))|0); //@line 1628 "./stb_image.h"
 var $128=HEAP16[(($127)>>1)]; //@line 1628 "./stb_image.h"
 var $129=($128&65535); //@line 1628 "./stb_image.h"
 var $130=($123|0)==($129|0); //@line 1628 "./stb_image.h"
 if($130){var $134=1;label=18;break;}else{label=17;break;} //@line 1628 "./stb_image.h"
 case 17: 
 ___assert_fail(139624,138824,1628,139992); //@line 1628 "./stb_image.h"
 throw "Reached an unreachable!"; //@line 1628 "./stb_image.h"
 label=18;break; //@line 1628 "./stb_image.h"
 case 18: 
 var $134;
 var $135=($134&1); //@line 1628 "./stb_image.h"
 var $136=$k; //@line 1631 "./stb_image.h"
 var $137=$2; //@line 1631 "./stb_image.h"
 var $138=(($137+18112)|0); //@line 1631 "./stb_image.h"
 var $139=HEAP32[(($138)>>2)]; //@line 1631 "./stb_image.h"
 var $140=((($139)-($136))|0); //@line 1631 "./stb_image.h"
 HEAP32[(($138)>>2)]=$140; //@line 1631 "./stb_image.h"
 var $141=$k; //@line 1632 "./stb_image.h"
 var $142=$2; //@line 1632 "./stb_image.h"
 var $143=(($142+18108)|0); //@line 1632 "./stb_image.h"
 var $144=HEAP32[(($143)>>2)]; //@line 1632 "./stb_image.h"
 var $145=$144<<$141; //@line 1632 "./stb_image.h"
 HEAP32[(($143)>>2)]=$145; //@line 1632 "./stb_image.h"
 var $146=$c; //@line 1633 "./stb_image.h"
 var $147=$3; //@line 1633 "./stb_image.h"
 var $148=(($147+1024)|0); //@line 1633 "./stb_image.h"
 var $149=(($148+$146)|0); //@line 1633 "./stb_image.h"
 var $150=HEAP8[($149)]; //@line 1633 "./stb_image.h"
 var $151=($150&255); //@line 1633 "./stb_image.h"
 $1=$151; //@line 1633 "./stb_image.h"
 label=19;break; //@line 1633 "./stb_image.h"
 case 19: 
 var $153=$1; //@line 1634 "./stb_image.h"
 STACKTOP=sp;return $153; //@line 1634 "./stb_image.h"
  default: assert(0, "bad label: " + label);
 }

}


function _stbi__jpeg_get_bits($j,$n){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $k;
 $1=$j;
 $2=$n;
 var $3=$1; //@line 1660 "./stb_image.h"
 var $4=(($3+18112)|0); //@line 1660 "./stb_image.h"
 var $5=HEAP32[(($4)>>2)]; //@line 1660 "./stb_image.h"
 var $6=$2; //@line 1660 "./stb_image.h"
 var $7=($5|0)<($6|0); //@line 1660 "./stb_image.h"
 if($7){label=2;break;}else{label=3;break;} //@line 1660 "./stb_image.h"
 case 2: 
 var $9=$1; //@line 1660 "./stb_image.h"
 _stbi__grow_buffer_unsafe($9); //@line 1660 "./stb_image.h"
 label=3;break; //@line 1660 "./stb_image.h"
 case 3: 
 var $11=$1; //@line 1661 "./stb_image.h"
 var $12=(($11+18108)|0); //@line 1661 "./stb_image.h"
 var $13=HEAP32[(($12)>>2)]; //@line 1661 "./stb_image.h"
 var $14=$2; //@line 1661 "./stb_image.h"
 var $15=$13<<$14; //@line 1661 "./stb_image.h"
 var $16=$1; //@line 1661 "./stb_image.h"
 var $17=(($16+18108)|0); //@line 1661 "./stb_image.h"
 var $18=HEAP32[(($17)>>2)]; //@line 1661 "./stb_image.h"
 var $19=$2; //@line 1661 "./stb_image.h"
 var $20=(((32)-($19))|0); //@line 1661 "./stb_image.h"
 var $21=$18>>>($20>>>0); //@line 1661 "./stb_image.h"
 var $22=$15|$21; //@line 1661 "./stb_image.h"
 $k=$22; //@line 1661 "./stb_image.h"
 var $23=$k; //@line 1662 "./stb_image.h"
 var $24=$2; //@line 1662 "./stb_image.h"
 var $25=((10488+($24<<2))|0); //@line 1662 "./stb_image.h"
 var $26=HEAP32[(($25)>>2)]; //@line 1662 "./stb_image.h"
 var $27=$26^-1; //@line 1662 "./stb_image.h"
 var $28=$23&$27; //@line 1662 "./stb_image.h"
 var $29=$1; //@line 1662 "./stb_image.h"
 var $30=(($29+18108)|0); //@line 1662 "./stb_image.h"
 HEAP32[(($30)>>2)]=$28; //@line 1662 "./stb_image.h"
 var $31=$2; //@line 1663 "./stb_image.h"
 var $32=((10488+($31<<2))|0); //@line 1663 "./stb_image.h"
 var $33=HEAP32[(($32)>>2)]; //@line 1663 "./stb_image.h"
 var $34=$k; //@line 1663 "./stb_image.h"
 var $35=$34&$33; //@line 1663 "./stb_image.h"
 $k=$35; //@line 1663 "./stb_image.h"
 var $36=$2; //@line 1664 "./stb_image.h"
 var $37=$1; //@line 1664 "./stb_image.h"
 var $38=(($37+18112)|0); //@line 1664 "./stb_image.h"
 var $39=HEAP32[(($38)>>2)]; //@line 1664 "./stb_image.h"
 var $40=((($39)-($36))|0); //@line 1664 "./stb_image.h"
 HEAP32[(($38)>>2)]=$40; //@line 1664 "./stb_image.h"
 var $41=$k; //@line 1665 "./stb_image.h"
 STACKTOP=sp;return $41; //@line 1665 "./stb_image.h"
  default: assert(0, "bad label: " + label);
 }

}


function _stbi__extend_receive($j,$n){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $k;
 var $sgn;
 $1=$j;
 $2=$n;
 var $3=$1; //@line 1645 "./stb_image.h"
 var $4=(($3+18112)|0); //@line 1645 "./stb_image.h"
 var $5=HEAP32[(($4)>>2)]; //@line 1645 "./stb_image.h"
 var $6=$2; //@line 1645 "./stb_image.h"
 var $7=($5|0)<($6|0); //@line 1645 "./stb_image.h"
 if($7){label=2;break;}else{label=3;break;} //@line 1645 "./stb_image.h"
 case 2: 
 var $9=$1; //@line 1645 "./stb_image.h"
 _stbi__grow_buffer_unsafe($9); //@line 1645 "./stb_image.h"
 label=3;break; //@line 1645 "./stb_image.h"
 case 3: 
 var $11=$1; //@line 1647 "./stb_image.h"
 var $12=(($11+18108)|0); //@line 1647 "./stb_image.h"
 var $13=HEAP32[(($12)>>2)]; //@line 1647 "./stb_image.h"
 var $14=$13>>31; //@line 1647 "./stb_image.h"
 $sgn=$14; //@line 1647 "./stb_image.h"
 var $15=$1; //@line 1648 "./stb_image.h"
 var $16=(($15+18108)|0); //@line 1648 "./stb_image.h"
 var $17=HEAP32[(($16)>>2)]; //@line 1648 "./stb_image.h"
 var $18=$2; //@line 1648 "./stb_image.h"
 var $19=$17<<$18; //@line 1648 "./stb_image.h"
 var $20=$1; //@line 1648 "./stb_image.h"
 var $21=(($20+18108)|0); //@line 1648 "./stb_image.h"
 var $22=HEAP32[(($21)>>2)]; //@line 1648 "./stb_image.h"
 var $23=$2; //@line 1648 "./stb_image.h"
 var $24=(((32)-($23))|0); //@line 1648 "./stb_image.h"
 var $25=$22>>>($24>>>0); //@line 1648 "./stb_image.h"
 var $26=$19|$25; //@line 1648 "./stb_image.h"
 $k=$26; //@line 1648 "./stb_image.h"
 var $27=$2; //@line 1649 "./stb_image.h"
 var $28=($27|0)>=0; //@line 1649 "./stb_image.h"
 if($28){label=4;break;}else{label=5;break;} //@line 1649 "./stb_image.h"
 case 4: 
 var $30=$2; //@line 1649 "./stb_image.h"
 var $31=($30|0)<17; //@line 1649 "./stb_image.h"
 if($31){var $35=1;label=6;break;}else{label=5;break;} //@line 1649 "./stb_image.h"
 case 5: 
 ___assert_fail(139712,138824,1649,140032); //@line 1649 "./stb_image.h"
 throw "Reached an unreachable!"; //@line 1649 "./stb_image.h"
 label=6;break; //@line 1649 "./stb_image.h"
 case 6: 
 var $35;
 var $36=($35&1); //@line 1649 "./stb_image.h"
 var $37=$k; //@line 1650 "./stb_image.h"
 var $38=$2; //@line 1650 "./stb_image.h"
 var $39=((10488+($38<<2))|0); //@line 1650 "./stb_image.h"
 var $40=HEAP32[(($39)>>2)]; //@line 1650 "./stb_image.h"
 var $41=$40^-1; //@line 1650 "./stb_image.h"
 var $42=$37&$41; //@line 1650 "./stb_image.h"
 var $43=$1; //@line 1650 "./stb_image.h"
 var $44=(($43+18108)|0); //@line 1650 "./stb_image.h"
 HEAP32[(($44)>>2)]=$42; //@line 1650 "./stb_image.h"
 var $45=$2; //@line 1651 "./stb_image.h"
 var $46=((10488+($45<<2))|0); //@line 1651 "./stb_image.h"
 var $47=HEAP32[(($46)>>2)]; //@line 1651 "./stb_image.h"
 var $48=$k; //@line 1651 "./stb_image.h"
 var $49=$48&$47; //@line 1651 "./stb_image.h"
 $k=$49; //@line 1651 "./stb_image.h"
 var $50=$2; //@line 1652 "./stb_image.h"
 var $51=$1; //@line 1652 "./stb_image.h"
 var $52=(($51+18112)|0); //@line 1652 "./stb_image.h"
 var $53=HEAP32[(($52)>>2)]; //@line 1652 "./stb_image.h"
 var $54=((($53)-($50))|0); //@line 1652 "./stb_image.h"
 HEAP32[(($52)>>2)]=$54; //@line 1652 "./stb_image.h"
 var $55=$k; //@line 1653 "./stb_image.h"
 var $56=$2; //@line 1653 "./stb_image.h"
 var $57=((10232+($56<<2))|0); //@line 1653 "./stb_image.h"
 var $58=HEAP32[(($57)>>2)]; //@line 1653 "./stb_image.h"
 var $59=$sgn; //@line 1653 "./stb_image.h"
 var $60=$59^-1; //@line 1653 "./stb_image.h"
 var $61=$58&$60; //@line 1653 "./stb_image.h"
 var $62=((($55)+($61))|0); //@line 1653 "./stb_image.h"
 STACKTOP=sp;return $62; //@line 1653 "./stb_image.h"
  default: assert(0, "bad label: " + label);
 }

}


function _stbi__jpeg_get_bit($j){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $k;
 $1=$j;
 var $2=$1; //@line 1671 "./stb_image.h"
 var $3=(($2+18112)|0); //@line 1671 "./stb_image.h"
 var $4=HEAP32[(($3)>>2)]; //@line 1671 "./stb_image.h"
 var $5=($4|0)<1; //@line 1671 "./stb_image.h"
 if($5){label=2;break;}else{label=3;break;} //@line 1671 "./stb_image.h"
 case 2: 
 var $7=$1; //@line 1671 "./stb_image.h"
 _stbi__grow_buffer_unsafe($7); //@line 1671 "./stb_image.h"
 label=3;break; //@line 1671 "./stb_image.h"
 case 3: 
 var $9=$1; //@line 1672 "./stb_image.h"
 var $10=(($9+18108)|0); //@line 1672 "./stb_image.h"
 var $11=HEAP32[(($10)>>2)]; //@line 1672 "./stb_image.h"
 $k=$11; //@line 1672 "./stb_image.h"
 var $12=$1; //@line 1673 "./stb_image.h"
 var $13=(($12+18108)|0); //@line 1673 "./stb_image.h"
 var $14=HEAP32[(($13)>>2)]; //@line 1673 "./stb_image.h"
 var $15=$14<<1; //@line 1673 "./stb_image.h"
 HEAP32[(($13)>>2)]=$15; //@line 1673 "./stb_image.h"
 var $16=$1; //@line 1674 "./stb_image.h"
 var $17=(($16+18112)|0); //@line 1674 "./stb_image.h"
 var $18=HEAP32[(($17)>>2)]; //@line 1674 "./stb_image.h"
 var $19=((($18)-(1))|0); //@line 1674 "./stb_image.h"
 HEAP32[(($17)>>2)]=$19; //@line 1674 "./stb_image.h"
 var $20=$k; //@line 1675 "./stb_image.h"
 var $21=$20&-2147483648; //@line 1675 "./stb_image.h"
 STACKTOP=sp;return $21; //@line 1675 "./stb_image.h"
  default: assert(0, "bad label: " + label);
 }

}


function _stbi__idct_block($out,$out_stride,$data){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+256)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $i;
 var $val=sp;
 var $v;
 var $o;
 var $d;
 var $dcterm;
 var $t0;
 var $t1;
 var $t2;
 var $t3;
 var $p1;
 var $p2;
 var $p3;
 var $p4;
 var $p5;
 var $x0;
 var $x1;
 var $x2;
 var $x3;
 var $t01;
 var $t12;
 var $t23;
 var $t34;
 var $p15;
 var $p26;
 var $p37;
 var $p48;
 var $p59;
 var $x010;
 var $x111;
 var $x212;
 var $x313;
 $1=$out;
 $2=$out_stride;
 $3=$data;
 var $4=(($val)|0); //@line 1948 "./stb_image.h"
 $v=$4; //@line 1948 "./stb_image.h"
 var $5=$3; //@line 1950 "./stb_image.h"
 $d=$5; //@line 1950 "./stb_image.h"
 $i=0; //@line 1953 "./stb_image.h"
 label=2;break; //@line 1953 "./stb_image.h"
 case 2: 
 var $7=$i; //@line 1953 "./stb_image.h"
 var $8=($7|0)<8; //@line 1953 "./stb_image.h"
 if($8){label=3;break;}else{label=14;break;} //@line 1953 "./stb_image.h"
 case 3: 
 var $10=$d; //@line 1955 "./stb_image.h"
 var $11=(($10+16)|0); //@line 1955 "./stb_image.h"
 var $12=HEAP16[(($11)>>1)]; //@line 1955 "./stb_image.h"
 var $13=(($12<<16)>>16); //@line 1955 "./stb_image.h"
 var $14=($13|0)==0; //@line 1955 "./stb_image.h"
 if($14){label=4;break;}else{label=11;break;} //@line 1955 "./stb_image.h"
 case 4: 
 var $16=$d; //@line 1955 "./stb_image.h"
 var $17=(($16+32)|0); //@line 1955 "./stb_image.h"
 var $18=HEAP16[(($17)>>1)]; //@line 1955 "./stb_image.h"
 var $19=(($18<<16)>>16); //@line 1955 "./stb_image.h"
 var $20=($19|0)==0; //@line 1955 "./stb_image.h"
 if($20){label=5;break;}else{label=11;break;} //@line 1955 "./stb_image.h"
 case 5: 
 var $22=$d; //@line 1955 "./stb_image.h"
 var $23=(($22+48)|0); //@line 1955 "./stb_image.h"
 var $24=HEAP16[(($23)>>1)]; //@line 1955 "./stb_image.h"
 var $25=(($24<<16)>>16); //@line 1955 "./stb_image.h"
 var $26=($25|0)==0; //@line 1955 "./stb_image.h"
 if($26){label=6;break;}else{label=11;break;} //@line 1955 "./stb_image.h"
 case 6: 
 var $28=$d; //@line 1955 "./stb_image.h"
 var $29=(($28+64)|0); //@line 1955 "./stb_image.h"
 var $30=HEAP16[(($29)>>1)]; //@line 1955 "./stb_image.h"
 var $31=(($30<<16)>>16); //@line 1955 "./stb_image.h"
 var $32=($31|0)==0; //@line 1955 "./stb_image.h"
 if($32){label=7;break;}else{label=11;break;} //@line 1955 "./stb_image.h"
 case 7: 
 var $34=$d; //@line 1955 "./stb_image.h"
 var $35=(($34+80)|0); //@line 1955 "./stb_image.h"
 var $36=HEAP16[(($35)>>1)]; //@line 1955 "./stb_image.h"
 var $37=(($36<<16)>>16); //@line 1955 "./stb_image.h"
 var $38=($37|0)==0; //@line 1955 "./stb_image.h"
 if($38){label=8;break;}else{label=11;break;} //@line 1955 "./stb_image.h"
 case 8: 
 var $40=$d; //@line 1955 "./stb_image.h"
 var $41=(($40+96)|0); //@line 1955 "./stb_image.h"
 var $42=HEAP16[(($41)>>1)]; //@line 1955 "./stb_image.h"
 var $43=(($42<<16)>>16); //@line 1955 "./stb_image.h"
 var $44=($43|0)==0; //@line 1955 "./stb_image.h"
 if($44){label=9;break;}else{label=11;break;} //@line 1955 "./stb_image.h"
 case 9: 
 var $46=$d; //@line 1955 "./stb_image.h"
 var $47=(($46+112)|0); //@line 1955 "./stb_image.h"
 var $48=HEAP16[(($47)>>1)]; //@line 1955 "./stb_image.h"
 var $49=(($48<<16)>>16); //@line 1955 "./stb_image.h"
 var $50=($49|0)==0; //@line 1955 "./stb_image.h"
 if($50){label=10;break;}else{label=11;break;} //@line 1955 "./stb_image.h"
 case 10: 
 var $52=$d; //@line 1961 "./stb_image.h"
 var $53=(($52)|0); //@line 1961 "./stb_image.h"
 var $54=HEAP16[(($53)>>1)]; //@line 1961 "./stb_image.h"
 var $55=(($54<<16)>>16); //@line 1961 "./stb_image.h"
 var $56=$55<<2; //@line 1961 "./stb_image.h"
 $dcterm=$56; //@line 1961 "./stb_image.h"
 var $57=$dcterm; //@line 1962 "./stb_image.h"
 var $58=$v; //@line 1962 "./stb_image.h"
 var $59=(($58+224)|0); //@line 1962 "./stb_image.h"
 HEAP32[(($59)>>2)]=$57; //@line 1962 "./stb_image.h"
 var $60=$v; //@line 1962 "./stb_image.h"
 var $61=(($60+192)|0); //@line 1962 "./stb_image.h"
 HEAP32[(($61)>>2)]=$57; //@line 1962 "./stb_image.h"
 var $62=$v; //@line 1962 "./stb_image.h"
 var $63=(($62+160)|0); //@line 1962 "./stb_image.h"
 HEAP32[(($63)>>2)]=$57; //@line 1962 "./stb_image.h"
 var $64=$v; //@line 1962 "./stb_image.h"
 var $65=(($64+128)|0); //@line 1962 "./stb_image.h"
 HEAP32[(($65)>>2)]=$57; //@line 1962 "./stb_image.h"
 var $66=$v; //@line 1962 "./stb_image.h"
 var $67=(($66+96)|0); //@line 1962 "./stb_image.h"
 HEAP32[(($67)>>2)]=$57; //@line 1962 "./stb_image.h"
 var $68=$v; //@line 1962 "./stb_image.h"
 var $69=(($68+64)|0); //@line 1962 "./stb_image.h"
 HEAP32[(($69)>>2)]=$57; //@line 1962 "./stb_image.h"
 var $70=$v; //@line 1962 "./stb_image.h"
 var $71=(($70+32)|0); //@line 1962 "./stb_image.h"
 HEAP32[(($71)>>2)]=$57; //@line 1962 "./stb_image.h"
 var $72=$v; //@line 1962 "./stb_image.h"
 var $73=(($72)|0); //@line 1962 "./stb_image.h"
 HEAP32[(($73)>>2)]=$57; //@line 1962 "./stb_image.h"
 label=12;break; //@line 1963 "./stb_image.h"
 case 11: 
 var $75=$d; //@line 1964 "./stb_image.h"
 var $76=(($75+32)|0); //@line 1964 "./stb_image.h"
 var $77=HEAP16[(($76)>>1)]; //@line 1964 "./stb_image.h"
 var $78=(($77<<16)>>16); //@line 1964 "./stb_image.h"
 $p2=$78; //@line 1964 "./stb_image.h"
 var $79=$d; //@line 1964 "./stb_image.h"
 var $80=(($79+96)|0); //@line 1964 "./stb_image.h"
 var $81=HEAP16[(($80)>>1)]; //@line 1964 "./stb_image.h"
 var $82=(($81<<16)>>16); //@line 1964 "./stb_image.h"
 $p3=$82; //@line 1964 "./stb_image.h"
 var $83=$p2; //@line 1964 "./stb_image.h"
 var $84=$p3; //@line 1964 "./stb_image.h"
 var $85=((($83)+($84))|0); //@line 1964 "./stb_image.h"
 var $86=((($85)*(2217))&-1); //@line 1964 "./stb_image.h"
 $p1=$86; //@line 1964 "./stb_image.h"
 var $87=$p1; //@line 1964 "./stb_image.h"
 var $88=$p3; //@line 1964 "./stb_image.h"
 var $89=((($88)*(-7567))&-1); //@line 1964 "./stb_image.h"
 var $90=((($87)+($89))|0); //@line 1964 "./stb_image.h"
 $t2=$90; //@line 1964 "./stb_image.h"
 var $91=$p1; //@line 1964 "./stb_image.h"
 var $92=$p2; //@line 1964 "./stb_image.h"
 var $93=((($92)*(3135))&-1); //@line 1964 "./stb_image.h"
 var $94=((($91)+($93))|0); //@line 1964 "./stb_image.h"
 $t3=$94; //@line 1964 "./stb_image.h"
 var $95=$d; //@line 1964 "./stb_image.h"
 var $96=(($95)|0); //@line 1964 "./stb_image.h"
 var $97=HEAP16[(($96)>>1)]; //@line 1964 "./stb_image.h"
 var $98=(($97<<16)>>16); //@line 1964 "./stb_image.h"
 $p2=$98; //@line 1964 "./stb_image.h"
 var $99=$d; //@line 1964 "./stb_image.h"
 var $100=(($99+64)|0); //@line 1964 "./stb_image.h"
 var $101=HEAP16[(($100)>>1)]; //@line 1964 "./stb_image.h"
 var $102=(($101<<16)>>16); //@line 1964 "./stb_image.h"
 $p3=$102; //@line 1964 "./stb_image.h"
 var $103=$p2; //@line 1964 "./stb_image.h"
 var $104=$p3; //@line 1964 "./stb_image.h"
 var $105=((($103)+($104))|0); //@line 1964 "./stb_image.h"
 var $106=$105<<12; //@line 1964 "./stb_image.h"
 $t0=$106; //@line 1964 "./stb_image.h"
 var $107=$p2; //@line 1964 "./stb_image.h"
 var $108=$p3; //@line 1964 "./stb_image.h"
 var $109=((($107)-($108))|0); //@line 1964 "./stb_image.h"
 var $110=$109<<12; //@line 1964 "./stb_image.h"
 $t1=$110; //@line 1964 "./stb_image.h"
 var $111=$t0; //@line 1964 "./stb_image.h"
 var $112=$t3; //@line 1964 "./stb_image.h"
 var $113=((($111)+($112))|0); //@line 1964 "./stb_image.h"
 $x0=$113; //@line 1964 "./stb_image.h"
 var $114=$t0; //@line 1964 "./stb_image.h"
 var $115=$t3; //@line 1964 "./stb_image.h"
 var $116=((($114)-($115))|0); //@line 1964 "./stb_image.h"
 $x3=$116; //@line 1964 "./stb_image.h"
 var $117=$t1; //@line 1964 "./stb_image.h"
 var $118=$t2; //@line 1964 "./stb_image.h"
 var $119=((($117)+($118))|0); //@line 1964 "./stb_image.h"
 $x1=$119; //@line 1964 "./stb_image.h"
 var $120=$t1; //@line 1964 "./stb_image.h"
 var $121=$t2; //@line 1964 "./stb_image.h"
 var $122=((($120)-($121))|0); //@line 1964 "./stb_image.h"
 $x2=$122; //@line 1964 "./stb_image.h"
 var $123=$d; //@line 1964 "./stb_image.h"
 var $124=(($123+112)|0); //@line 1964 "./stb_image.h"
 var $125=HEAP16[(($124)>>1)]; //@line 1964 "./stb_image.h"
 var $126=(($125<<16)>>16); //@line 1964 "./stb_image.h"
 $t0=$126; //@line 1964 "./stb_image.h"
 var $127=$d; //@line 1964 "./stb_image.h"
 var $128=(($127+80)|0); //@line 1964 "./stb_image.h"
 var $129=HEAP16[(($128)>>1)]; //@line 1964 "./stb_image.h"
 var $130=(($129<<16)>>16); //@line 1964 "./stb_image.h"
 $t1=$130; //@line 1964 "./stb_image.h"
 var $131=$d; //@line 1964 "./stb_image.h"
 var $132=(($131+48)|0); //@line 1964 "./stb_image.h"
 var $133=HEAP16[(($132)>>1)]; //@line 1964 "./stb_image.h"
 var $134=(($133<<16)>>16); //@line 1964 "./stb_image.h"
 $t2=$134; //@line 1964 "./stb_image.h"
 var $135=$d; //@line 1964 "./stb_image.h"
 var $136=(($135+16)|0); //@line 1964 "./stb_image.h"
 var $137=HEAP16[(($136)>>1)]; //@line 1964 "./stb_image.h"
 var $138=(($137<<16)>>16); //@line 1964 "./stb_image.h"
 $t3=$138; //@line 1964 "./stb_image.h"
 var $139=$t0; //@line 1964 "./stb_image.h"
 var $140=$t2; //@line 1964 "./stb_image.h"
 var $141=((($139)+($140))|0); //@line 1964 "./stb_image.h"
 $p3=$141; //@line 1964 "./stb_image.h"
 var $142=$t1; //@line 1964 "./stb_image.h"
 var $143=$t3; //@line 1964 "./stb_image.h"
 var $144=((($142)+($143))|0); //@line 1964 "./stb_image.h"
 $p4=$144; //@line 1964 "./stb_image.h"
 var $145=$t0; //@line 1964 "./stb_image.h"
 var $146=$t3; //@line 1964 "./stb_image.h"
 var $147=((($145)+($146))|0); //@line 1964 "./stb_image.h"
 $p1=$147; //@line 1964 "./stb_image.h"
 var $148=$t1; //@line 1964 "./stb_image.h"
 var $149=$t2; //@line 1964 "./stb_image.h"
 var $150=((($148)+($149))|0); //@line 1964 "./stb_image.h"
 $p2=$150; //@line 1964 "./stb_image.h"
 var $151=$p3; //@line 1964 "./stb_image.h"
 var $152=$p4; //@line 1964 "./stb_image.h"
 var $153=((($151)+($152))|0); //@line 1964 "./stb_image.h"
 var $154=((($153)*(4816))&-1); //@line 1964 "./stb_image.h"
 $p5=$154; //@line 1964 "./stb_image.h"
 var $155=$t0; //@line 1964 "./stb_image.h"
 var $156=((($155)*(1223))&-1); //@line 1964 "./stb_image.h"
 $t0=$156; //@line 1964 "./stb_image.h"
 var $157=$t1; //@line 1964 "./stb_image.h"
 var $158=((($157)*(8410))&-1); //@line 1964 "./stb_image.h"
 $t1=$158; //@line 1964 "./stb_image.h"
 var $159=$t2; //@line 1964 "./stb_image.h"
 var $160=((($159)*(12586))&-1); //@line 1964 "./stb_image.h"
 $t2=$160; //@line 1964 "./stb_image.h"
 var $161=$t3; //@line 1964 "./stb_image.h"
 var $162=((($161)*(6149))&-1); //@line 1964 "./stb_image.h"
 $t3=$162; //@line 1964 "./stb_image.h"
 var $163=$p5; //@line 1964 "./stb_image.h"
 var $164=$p1; //@line 1964 "./stb_image.h"
 var $165=((($164)*(-3685))&-1); //@line 1964 "./stb_image.h"
 var $166=((($163)+($165))|0); //@line 1964 "./stb_image.h"
 $p1=$166; //@line 1964 "./stb_image.h"
 var $167=$p5; //@line 1964 "./stb_image.h"
 var $168=$p2; //@line 1964 "./stb_image.h"
 var $169=((($168)*(-10497))&-1); //@line 1964 "./stb_image.h"
 var $170=((($167)+($169))|0); //@line 1964 "./stb_image.h"
 $p2=$170; //@line 1964 "./stb_image.h"
 var $171=$p3; //@line 1964 "./stb_image.h"
 var $172=((($171)*(-8034))&-1); //@line 1964 "./stb_image.h"
 $p3=$172; //@line 1964 "./stb_image.h"
 var $173=$p4; //@line 1964 "./stb_image.h"
 var $174=((($173)*(-1597))&-1); //@line 1964 "./stb_image.h"
 $p4=$174; //@line 1964 "./stb_image.h"
 var $175=$p1; //@line 1964 "./stb_image.h"
 var $176=$p4; //@line 1964 "./stb_image.h"
 var $177=((($175)+($176))|0); //@line 1964 "./stb_image.h"
 var $178=$t3; //@line 1964 "./stb_image.h"
 var $179=((($178)+($177))|0); //@line 1964 "./stb_image.h"
 $t3=$179; //@line 1964 "./stb_image.h"
 var $180=$p2; //@line 1964 "./stb_image.h"
 var $181=$p3; //@line 1964 "./stb_image.h"
 var $182=((($180)+($181))|0); //@line 1964 "./stb_image.h"
 var $183=$t2; //@line 1964 "./stb_image.h"
 var $184=((($183)+($182))|0); //@line 1964 "./stb_image.h"
 $t2=$184; //@line 1964 "./stb_image.h"
 var $185=$p2; //@line 1964 "./stb_image.h"
 var $186=$p4; //@line 1964 "./stb_image.h"
 var $187=((($185)+($186))|0); //@line 1964 "./stb_image.h"
 var $188=$t1; //@line 1964 "./stb_image.h"
 var $189=((($188)+($187))|0); //@line 1964 "./stb_image.h"
 $t1=$189; //@line 1964 "./stb_image.h"
 var $190=$p1; //@line 1964 "./stb_image.h"
 var $191=$p3; //@line 1964 "./stb_image.h"
 var $192=((($190)+($191))|0); //@line 1964 "./stb_image.h"
 var $193=$t0; //@line 1964 "./stb_image.h"
 var $194=((($193)+($192))|0); //@line 1964 "./stb_image.h"
 $t0=$194; //@line 1964 "./stb_image.h"
 var $195=$x0; //@line 1967 "./stb_image.h"
 var $196=((($195)+(512))|0); //@line 1967 "./stb_image.h"
 $x0=$196; //@line 1967 "./stb_image.h"
 var $197=$x1; //@line 1967 "./stb_image.h"
 var $198=((($197)+(512))|0); //@line 1967 "./stb_image.h"
 $x1=$198; //@line 1967 "./stb_image.h"
 var $199=$x2; //@line 1967 "./stb_image.h"
 var $200=((($199)+(512))|0); //@line 1967 "./stb_image.h"
 $x2=$200; //@line 1967 "./stb_image.h"
 var $201=$x3; //@line 1967 "./stb_image.h"
 var $202=((($201)+(512))|0); //@line 1967 "./stb_image.h"
 $x3=$202; //@line 1967 "./stb_image.h"
 var $203=$x0; //@line 1968 "./stb_image.h"
 var $204=$t3; //@line 1968 "./stb_image.h"
 var $205=((($203)+($204))|0); //@line 1968 "./stb_image.h"
 var $206=$205>>10; //@line 1968 "./stb_image.h"
 var $207=$v; //@line 1968 "./stb_image.h"
 var $208=(($207)|0); //@line 1968 "./stb_image.h"
 HEAP32[(($208)>>2)]=$206; //@line 1968 "./stb_image.h"
 var $209=$x0; //@line 1969 "./stb_image.h"
 var $210=$t3; //@line 1969 "./stb_image.h"
 var $211=((($209)-($210))|0); //@line 1969 "./stb_image.h"
 var $212=$211>>10; //@line 1969 "./stb_image.h"
 var $213=$v; //@line 1969 "./stb_image.h"
 var $214=(($213+224)|0); //@line 1969 "./stb_image.h"
 HEAP32[(($214)>>2)]=$212; //@line 1969 "./stb_image.h"
 var $215=$x1; //@line 1970 "./stb_image.h"
 var $216=$t2; //@line 1970 "./stb_image.h"
 var $217=((($215)+($216))|0); //@line 1970 "./stb_image.h"
 var $218=$217>>10; //@line 1970 "./stb_image.h"
 var $219=$v; //@line 1970 "./stb_image.h"
 var $220=(($219+32)|0); //@line 1970 "./stb_image.h"
 HEAP32[(($220)>>2)]=$218; //@line 1970 "./stb_image.h"
 var $221=$x1; //@line 1971 "./stb_image.h"
 var $222=$t2; //@line 1971 "./stb_image.h"
 var $223=((($221)-($222))|0); //@line 1971 "./stb_image.h"
 var $224=$223>>10; //@line 1971 "./stb_image.h"
 var $225=$v; //@line 1971 "./stb_image.h"
 var $226=(($225+192)|0); //@line 1971 "./stb_image.h"
 HEAP32[(($226)>>2)]=$224; //@line 1971 "./stb_image.h"
 var $227=$x2; //@line 1972 "./stb_image.h"
 var $228=$t1; //@line 1972 "./stb_image.h"
 var $229=((($227)+($228))|0); //@line 1972 "./stb_image.h"
 var $230=$229>>10; //@line 1972 "./stb_image.h"
 var $231=$v; //@line 1972 "./stb_image.h"
 var $232=(($231+64)|0); //@line 1972 "./stb_image.h"
 HEAP32[(($232)>>2)]=$230; //@line 1972 "./stb_image.h"
 var $233=$x2; //@line 1973 "./stb_image.h"
 var $234=$t1; //@line 1973 "./stb_image.h"
 var $235=((($233)-($234))|0); //@line 1973 "./stb_image.h"
 var $236=$235>>10; //@line 1973 "./stb_image.h"
 var $237=$v; //@line 1973 "./stb_image.h"
 var $238=(($237+160)|0); //@line 1973 "./stb_image.h"
 HEAP32[(($238)>>2)]=$236; //@line 1973 "./stb_image.h"
 var $239=$x3; //@line 1974 "./stb_image.h"
 var $240=$t0; //@line 1974 "./stb_image.h"
 var $241=((($239)+($240))|0); //@line 1974 "./stb_image.h"
 var $242=$241>>10; //@line 1974 "./stb_image.h"
 var $243=$v; //@line 1974 "./stb_image.h"
 var $244=(($243+96)|0); //@line 1974 "./stb_image.h"
 HEAP32[(($244)>>2)]=$242; //@line 1974 "./stb_image.h"
 var $245=$x3; //@line 1975 "./stb_image.h"
 var $246=$t0; //@line 1975 "./stb_image.h"
 var $247=((($245)-($246))|0); //@line 1975 "./stb_image.h"
 var $248=$247>>10; //@line 1975 "./stb_image.h"
 var $249=$v; //@line 1975 "./stb_image.h"
 var $250=(($249+128)|0); //@line 1975 "./stb_image.h"
 HEAP32[(($250)>>2)]=$248; //@line 1975 "./stb_image.h"
 label=12;break;
 case 12: 
 label=13;break; //@line 1977 "./stb_image.h"
 case 13: 
 var $253=$i; //@line 1953 "./stb_image.h"
 var $254=((($253)+(1))|0); //@line 1953 "./stb_image.h"
 $i=$254; //@line 1953 "./stb_image.h"
 var $255=$d; //@line 1953 "./stb_image.h"
 var $256=(($255+2)|0); //@line 1953 "./stb_image.h"
 $d=$256; //@line 1953 "./stb_image.h"
 var $257=$v; //@line 1953 "./stb_image.h"
 var $258=(($257+4)|0); //@line 1953 "./stb_image.h"
 $v=$258; //@line 1953 "./stb_image.h"
 label=2;break; //@line 1953 "./stb_image.h"
 case 14: 
 $i=0; //@line 1979 "./stb_image.h"
 var $260=(($val)|0); //@line 1979 "./stb_image.h"
 $v=$260; //@line 1979 "./stb_image.h"
 var $261=$1; //@line 1979 "./stb_image.h"
 $o=$261; //@line 1979 "./stb_image.h"
 label=15;break; //@line 1979 "./stb_image.h"
 case 15: 
 var $263=$i; //@line 1979 "./stb_image.h"
 var $264=($263|0)<8; //@line 1979 "./stb_image.h"
 if($264){label=16;break;}else{label=18;break;} //@line 1979 "./stb_image.h"
 case 16: 
 var $266=$v; //@line 1981 "./stb_image.h"
 var $267=(($266+8)|0); //@line 1981 "./stb_image.h"
 var $268=HEAP32[(($267)>>2)]; //@line 1981 "./stb_image.h"
 $p26=$268; //@line 1981 "./stb_image.h"
 var $269=$v; //@line 1981 "./stb_image.h"
 var $270=(($269+24)|0); //@line 1981 "./stb_image.h"
 var $271=HEAP32[(($270)>>2)]; //@line 1981 "./stb_image.h"
 $p37=$271; //@line 1981 "./stb_image.h"
 var $272=$p26; //@line 1981 "./stb_image.h"
 var $273=$p37; //@line 1981 "./stb_image.h"
 var $274=((($272)+($273))|0); //@line 1981 "./stb_image.h"
 var $275=((($274)*(2217))&-1); //@line 1981 "./stb_image.h"
 $p15=$275; //@line 1981 "./stb_image.h"
 var $276=$p15; //@line 1981 "./stb_image.h"
 var $277=$p37; //@line 1981 "./stb_image.h"
 var $278=((($277)*(-7567))&-1); //@line 1981 "./stb_image.h"
 var $279=((($276)+($278))|0); //@line 1981 "./stb_image.h"
 $t23=$279; //@line 1981 "./stb_image.h"
 var $280=$p15; //@line 1981 "./stb_image.h"
 var $281=$p26; //@line 1981 "./stb_image.h"
 var $282=((($281)*(3135))&-1); //@line 1981 "./stb_image.h"
 var $283=((($280)+($282))|0); //@line 1981 "./stb_image.h"
 $t34=$283; //@line 1981 "./stb_image.h"
 var $284=$v; //@line 1981 "./stb_image.h"
 var $285=(($284)|0); //@line 1981 "./stb_image.h"
 var $286=HEAP32[(($285)>>2)]; //@line 1981 "./stb_image.h"
 $p26=$286; //@line 1981 "./stb_image.h"
 var $287=$v; //@line 1981 "./stb_image.h"
 var $288=(($287+16)|0); //@line 1981 "./stb_image.h"
 var $289=HEAP32[(($288)>>2)]; //@line 1981 "./stb_image.h"
 $p37=$289; //@line 1981 "./stb_image.h"
 var $290=$p26; //@line 1981 "./stb_image.h"
 var $291=$p37; //@line 1981 "./stb_image.h"
 var $292=((($290)+($291))|0); //@line 1981 "./stb_image.h"
 var $293=$292<<12; //@line 1981 "./stb_image.h"
 $t01=$293; //@line 1981 "./stb_image.h"
 var $294=$p26; //@line 1981 "./stb_image.h"
 var $295=$p37; //@line 1981 "./stb_image.h"
 var $296=((($294)-($295))|0); //@line 1981 "./stb_image.h"
 var $297=$296<<12; //@line 1981 "./stb_image.h"
 $t12=$297; //@line 1981 "./stb_image.h"
 var $298=$t01; //@line 1981 "./stb_image.h"
 var $299=$t34; //@line 1981 "./stb_image.h"
 var $300=((($298)+($299))|0); //@line 1981 "./stb_image.h"
 $x010=$300; //@line 1981 "./stb_image.h"
 var $301=$t01; //@line 1981 "./stb_image.h"
 var $302=$t34; //@line 1981 "./stb_image.h"
 var $303=((($301)-($302))|0); //@line 1981 "./stb_image.h"
 $x313=$303; //@line 1981 "./stb_image.h"
 var $304=$t12; //@line 1981 "./stb_image.h"
 var $305=$t23; //@line 1981 "./stb_image.h"
 var $306=((($304)+($305))|0); //@line 1981 "./stb_image.h"
 $x111=$306; //@line 1981 "./stb_image.h"
 var $307=$t12; //@line 1981 "./stb_image.h"
 var $308=$t23; //@line 1981 "./stb_image.h"
 var $309=((($307)-($308))|0); //@line 1981 "./stb_image.h"
 $x212=$309; //@line 1981 "./stb_image.h"
 var $310=$v; //@line 1981 "./stb_image.h"
 var $311=(($310+28)|0); //@line 1981 "./stb_image.h"
 var $312=HEAP32[(($311)>>2)]; //@line 1981 "./stb_image.h"
 $t01=$312; //@line 1981 "./stb_image.h"
 var $313=$v; //@line 1981 "./stb_image.h"
 var $314=(($313+20)|0); //@line 1981 "./stb_image.h"
 var $315=HEAP32[(($314)>>2)]; //@line 1981 "./stb_image.h"
 $t12=$315; //@line 1981 "./stb_image.h"
 var $316=$v; //@line 1981 "./stb_image.h"
 var $317=(($316+12)|0); //@line 1981 "./stb_image.h"
 var $318=HEAP32[(($317)>>2)]; //@line 1981 "./stb_image.h"
 $t23=$318; //@line 1981 "./stb_image.h"
 var $319=$v; //@line 1981 "./stb_image.h"
 var $320=(($319+4)|0); //@line 1981 "./stb_image.h"
 var $321=HEAP32[(($320)>>2)]; //@line 1981 "./stb_image.h"
 $t34=$321; //@line 1981 "./stb_image.h"
 var $322=$t01; //@line 1981 "./stb_image.h"
 var $323=$t23; //@line 1981 "./stb_image.h"
 var $324=((($322)+($323))|0); //@line 1981 "./stb_image.h"
 $p37=$324; //@line 1981 "./stb_image.h"
 var $325=$t12; //@line 1981 "./stb_image.h"
 var $326=$t34; //@line 1981 "./stb_image.h"
 var $327=((($325)+($326))|0); //@line 1981 "./stb_image.h"
 $p48=$327; //@line 1981 "./stb_image.h"
 var $328=$t01; //@line 1981 "./stb_image.h"
 var $329=$t34; //@line 1981 "./stb_image.h"
 var $330=((($328)+($329))|0); //@line 1981 "./stb_image.h"
 $p15=$330; //@line 1981 "./stb_image.h"
 var $331=$t12; //@line 1981 "./stb_image.h"
 var $332=$t23; //@line 1981 "./stb_image.h"
 var $333=((($331)+($332))|0); //@line 1981 "./stb_image.h"
 $p26=$333; //@line 1981 "./stb_image.h"
 var $334=$p37; //@line 1981 "./stb_image.h"
 var $335=$p48; //@line 1981 "./stb_image.h"
 var $336=((($334)+($335))|0); //@line 1981 "./stb_image.h"
 var $337=((($336)*(4816))&-1); //@line 1981 "./stb_image.h"
 $p59=$337; //@line 1981 "./stb_image.h"
 var $338=$t01; //@line 1981 "./stb_image.h"
 var $339=((($338)*(1223))&-1); //@line 1981 "./stb_image.h"
 $t01=$339; //@line 1981 "./stb_image.h"
 var $340=$t12; //@line 1981 "./stb_image.h"
 var $341=((($340)*(8410))&-1); //@line 1981 "./stb_image.h"
 $t12=$341; //@line 1981 "./stb_image.h"
 var $342=$t23; //@line 1981 "./stb_image.h"
 var $343=((($342)*(12586))&-1); //@line 1981 "./stb_image.h"
 $t23=$343; //@line 1981 "./stb_image.h"
 var $344=$t34; //@line 1981 "./stb_image.h"
 var $345=((($344)*(6149))&-1); //@line 1981 "./stb_image.h"
 $t34=$345; //@line 1981 "./stb_image.h"
 var $346=$p59; //@line 1981 "./stb_image.h"
 var $347=$p15; //@line 1981 "./stb_image.h"
 var $348=((($347)*(-3685))&-1); //@line 1981 "./stb_image.h"
 var $349=((($346)+($348))|0); //@line 1981 "./stb_image.h"
 $p15=$349; //@line 1981 "./stb_image.h"
 var $350=$p59; //@line 1981 "./stb_image.h"
 var $351=$p26; //@line 1981 "./stb_image.h"
 var $352=((($351)*(-10497))&-1); //@line 1981 "./stb_image.h"
 var $353=((($350)+($352))|0); //@line 1981 "./stb_image.h"
 $p26=$353; //@line 1981 "./stb_image.h"
 var $354=$p37; //@line 1981 "./stb_image.h"
 var $355=((($354)*(-8034))&-1); //@line 1981 "./stb_image.h"
 $p37=$355; //@line 1981 "./stb_image.h"
 var $356=$p48; //@line 1981 "./stb_image.h"
 var $357=((($356)*(-1597))&-1); //@line 1981 "./stb_image.h"
 $p48=$357; //@line 1981 "./stb_image.h"
 var $358=$p15; //@line 1981 "./stb_image.h"
 var $359=$p48; //@line 1981 "./stb_image.h"
 var $360=((($358)+($359))|0); //@line 1981 "./stb_image.h"
 var $361=$t34; //@line 1981 "./stb_image.h"
 var $362=((($361)+($360))|0); //@line 1981 "./stb_image.h"
 $t34=$362; //@line 1981 "./stb_image.h"
 var $363=$p26; //@line 1981 "./stb_image.h"
 var $364=$p37; //@line 1981 "./stb_image.h"
 var $365=((($363)+($364))|0); //@line 1981 "./stb_image.h"
 var $366=$t23; //@line 1981 "./stb_image.h"
 var $367=((($366)+($365))|0); //@line 1981 "./stb_image.h"
 $t23=$367; //@line 1981 "./stb_image.h"
 var $368=$p26; //@line 1981 "./stb_image.h"
 var $369=$p48; //@line 1981 "./stb_image.h"
 var $370=((($368)+($369))|0); //@line 1981 "./stb_image.h"
 var $371=$t12; //@line 1981 "./stb_image.h"
 var $372=((($371)+($370))|0); //@line 1981 "./stb_image.h"
 $t12=$372; //@line 1981 "./stb_image.h"
 var $373=$p15; //@line 1981 "./stb_image.h"
 var $374=$p37; //@line 1981 "./stb_image.h"
 var $375=((($373)+($374))|0); //@line 1981 "./stb_image.h"
 var $376=$t01; //@line 1981 "./stb_image.h"
 var $377=((($376)+($375))|0); //@line 1981 "./stb_image.h"
 $t01=$377; //@line 1981 "./stb_image.h"
 var $378=$x010; //@line 1988 "./stb_image.h"
 var $379=((($378)+(16842752))|0); //@line 1988 "./stb_image.h"
 $x010=$379; //@line 1988 "./stb_image.h"
 var $380=$x111; //@line 1989 "./stb_image.h"
 var $381=((($380)+(16842752))|0); //@line 1989 "./stb_image.h"
 $x111=$381; //@line 1989 "./stb_image.h"
 var $382=$x212; //@line 1990 "./stb_image.h"
 var $383=((($382)+(16842752))|0); //@line 1990 "./stb_image.h"
 $x212=$383; //@line 1990 "./stb_image.h"
 var $384=$x313; //@line 1991 "./stb_image.h"
 var $385=((($384)+(16842752))|0); //@line 1991 "./stb_image.h"
 $x313=$385; //@line 1991 "./stb_image.h"
 var $386=$x010; //@line 1994 "./stb_image.h"
 var $387=$t34; //@line 1994 "./stb_image.h"
 var $388=((($386)+($387))|0); //@line 1994 "./stb_image.h"
 var $389=$388>>17; //@line 1994 "./stb_image.h"
 var $390=_stbi__clamp($389); //@line 1994 "./stb_image.h"
 var $391=$o; //@line 1994 "./stb_image.h"
 var $392=(($391)|0); //@line 1994 "./stb_image.h"
 HEAP8[($392)]=$390; //@line 1994 "./stb_image.h"
 var $393=$x010; //@line 1995 "./stb_image.h"
 var $394=$t34; //@line 1995 "./stb_image.h"
 var $395=((($393)-($394))|0); //@line 1995 "./stb_image.h"
 var $396=$395>>17; //@line 1995 "./stb_image.h"
 var $397=_stbi__clamp($396); //@line 1995 "./stb_image.h"
 var $398=$o; //@line 1995 "./stb_image.h"
 var $399=(($398+7)|0); //@line 1995 "./stb_image.h"
 HEAP8[($399)]=$397; //@line 1995 "./stb_image.h"
 var $400=$x111; //@line 1996 "./stb_image.h"
 var $401=$t23; //@line 1996 "./stb_image.h"
 var $402=((($400)+($401))|0); //@line 1996 "./stb_image.h"
 var $403=$402>>17; //@line 1996 "./stb_image.h"
 var $404=_stbi__clamp($403); //@line 1996 "./stb_image.h"
 var $405=$o; //@line 1996 "./stb_image.h"
 var $406=(($405+1)|0); //@line 1996 "./stb_image.h"
 HEAP8[($406)]=$404; //@line 1996 "./stb_image.h"
 var $407=$x111; //@line 1997 "./stb_image.h"
 var $408=$t23; //@line 1997 "./stb_image.h"
 var $409=((($407)-($408))|0); //@line 1997 "./stb_image.h"
 var $410=$409>>17; //@line 1997 "./stb_image.h"
 var $411=_stbi__clamp($410); //@line 1997 "./stb_image.h"
 var $412=$o; //@line 1997 "./stb_image.h"
 var $413=(($412+6)|0); //@line 1997 "./stb_image.h"
 HEAP8[($413)]=$411; //@line 1997 "./stb_image.h"
 var $414=$x212; //@line 1998 "./stb_image.h"
 var $415=$t12; //@line 1998 "./stb_image.h"
 var $416=((($414)+($415))|0); //@line 1998 "./stb_image.h"
 var $417=$416>>17; //@line 1998 "./stb_image.h"
 var $418=_stbi__clamp($417); //@line 1998 "./stb_image.h"
 var $419=$o; //@line 1998 "./stb_image.h"
 var $420=(($419+2)|0); //@line 1998 "./stb_image.h"
 HEAP8[($420)]=$418; //@line 1998 "./stb_image.h"
 var $421=$x212; //@line 1999 "./stb_image.h"
 var $422=$t12; //@line 1999 "./stb_image.h"
 var $423=((($421)-($422))|0); //@line 1999 "./stb_image.h"
 var $424=$423>>17; //@line 1999 "./stb_image.h"
 var $425=_stbi__clamp($424); //@line 1999 "./stb_image.h"
 var $426=$o; //@line 1999 "./stb_image.h"
 var $427=(($426+5)|0); //@line 1999 "./stb_image.h"
 HEAP8[($427)]=$425; //@line 1999 "./stb_image.h"
 var $428=$x313; //@line 2000 "./stb_image.h"
 var $429=$t01; //@line 2000 "./stb_image.h"
 var $430=((($428)+($429))|0); //@line 2000 "./stb_image.h"
 var $431=$430>>17; //@line 2000 "./stb_image.h"
 var $432=_stbi__clamp($431); //@line 2000 "./stb_image.h"
 var $433=$o; //@line 2000 "./stb_image.h"
 var $434=(($433+3)|0); //@line 2000 "./stb_image.h"
 HEAP8[($434)]=$432; //@line 2000 "./stb_image.h"
 var $435=$x313; //@line 2001 "./stb_image.h"
 var $436=$t01; //@line 2001 "./stb_image.h"
 var $437=((($435)-($436))|0); //@line 2001 "./stb_image.h"
 var $438=$437>>17; //@line 2001 "./stb_image.h"
 var $439=_stbi__clamp($438); //@line 2001 "./stb_image.h"
 var $440=$o; //@line 2001 "./stb_image.h"
 var $441=(($440+4)|0); //@line 2001 "./stb_image.h"
 HEAP8[($441)]=$439; //@line 2001 "./stb_image.h"
 label=17;break; //@line 2002 "./stb_image.h"
 case 17: 
 var $443=$i; //@line 1979 "./stb_image.h"
 var $444=((($443)+(1))|0); //@line 1979 "./stb_image.h"
 $i=$444; //@line 1979 "./stb_image.h"
 var $445=$v; //@line 1979 "./stb_image.h"
 var $446=(($445+32)|0); //@line 1979 "./stb_image.h"
 $v=$446; //@line 1979 "./stb_image.h"
 var $447=$2; //@line 1979 "./stb_image.h"
 var $448=$o; //@line 1979 "./stb_image.h"
 var $449=(($448+$447)|0); //@line 1979 "./stb_image.h"
 $o=$449; //@line 1979 "./stb_image.h"
 label=15;break; //@line 1979 "./stb_image.h"
 case 18: 
 STACKTOP=sp;return; //@line 2003 "./stb_image.h"
  default: assert(0, "bad label: " + label);
 }

}


function _stbi__YCbCr_to_RGB_row($out,$y,$pcb,$pcr,$count,$step){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 var $i;
 var $y_fixed;
 var $r;
 var $g;
 var $b;
 var $cr;
 var $cb;
 $1=$out;
 $2=$y;
 $3=$pcb;
 $4=$pcr;
 $5=$count;
 $6=$step;
 $i=0; //@line 3047 "./stb_image.h"
 label=2;break; //@line 3047 "./stb_image.h"
 case 2: 
 var $8=$i; //@line 3047 "./stb_image.h"
 var $9=$5; //@line 3047 "./stb_image.h"
 var $10=($8|0)<($9|0); //@line 3047 "./stb_image.h"
 if($10){label=3;break;}else{label=20;break;} //@line 3047 "./stb_image.h"
 case 3: 
 var $12=$i; //@line 3048 "./stb_image.h"
 var $13=$2; //@line 3048 "./stb_image.h"
 var $14=(($13+$12)|0); //@line 3048 "./stb_image.h"
 var $15=HEAP8[($14)]; //@line 3048 "./stb_image.h"
 var $16=($15&255); //@line 3048 "./stb_image.h"
 var $17=$16<<16; //@line 3048 "./stb_image.h"
 var $18=((($17)+(32768))|0); //@line 3048 "./stb_image.h"
 $y_fixed=$18; //@line 3048 "./stb_image.h"
 var $19=$i; //@line 3050 "./stb_image.h"
 var $20=$4; //@line 3050 "./stb_image.h"
 var $21=(($20+$19)|0); //@line 3050 "./stb_image.h"
 var $22=HEAP8[($21)]; //@line 3050 "./stb_image.h"
 var $23=($22&255); //@line 3050 "./stb_image.h"
 var $24=((($23)-(128))|0); //@line 3050 "./stb_image.h"
 $cr=$24; //@line 3050 "./stb_image.h"
 var $25=$i; //@line 3051 "./stb_image.h"
 var $26=$3; //@line 3051 "./stb_image.h"
 var $27=(($26+$25)|0); //@line 3051 "./stb_image.h"
 var $28=HEAP8[($27)]; //@line 3051 "./stb_image.h"
 var $29=($28&255); //@line 3051 "./stb_image.h"
 var $30=((($29)-(128))|0); //@line 3051 "./stb_image.h"
 $cb=$30; //@line 3051 "./stb_image.h"
 var $31=$y_fixed; //@line 3052 "./stb_image.h"
 var $32=$cr; //@line 3052 "./stb_image.h"
 var $33=((($32)*(91881))&-1); //@line 3052 "./stb_image.h"
 var $34=((($31)+($33))|0); //@line 3052 "./stb_image.h"
 $r=$34; //@line 3052 "./stb_image.h"
 var $35=$y_fixed; //@line 3053 "./stb_image.h"
 var $36=$cr; //@line 3053 "./stb_image.h"
 var $37=((($36)*(46802))&-1); //@line 3053 "./stb_image.h"
 var $38=((($35)-($37))|0); //@line 3053 "./stb_image.h"
 var $39=$cb; //@line 3053 "./stb_image.h"
 var $40=((($39)*(22554))&-1); //@line 3053 "./stb_image.h"
 var $41=((($38)-($40))|0); //@line 3053 "./stb_image.h"
 $g=$41; //@line 3053 "./stb_image.h"
 var $42=$y_fixed; //@line 3054 "./stb_image.h"
 var $43=$cb; //@line 3054 "./stb_image.h"
 var $44=((($43)*(116130))&-1); //@line 3054 "./stb_image.h"
 var $45=((($42)+($44))|0); //@line 3054 "./stb_image.h"
 $b=$45; //@line 3054 "./stb_image.h"
 var $46=$r; //@line 3055 "./stb_image.h"
 var $47=$46>>16; //@line 3055 "./stb_image.h"
 $r=$47; //@line 3055 "./stb_image.h"
 var $48=$g; //@line 3056 "./stb_image.h"
 var $49=$48>>16; //@line 3056 "./stb_image.h"
 $g=$49; //@line 3056 "./stb_image.h"
 var $50=$b; //@line 3057 "./stb_image.h"
 var $51=$50>>16; //@line 3057 "./stb_image.h"
 $b=$51; //@line 3057 "./stb_image.h"
 var $52=$r; //@line 3058 "./stb_image.h"
 var $53=($52>>>0)>255; //@line 3058 "./stb_image.h"
 if($53){label=4;break;}else{label=8;break;} //@line 3058 "./stb_image.h"
 case 4: 
 var $55=$r; //@line 3058 "./stb_image.h"
 var $56=($55|0)<0; //@line 3058 "./stb_image.h"
 if($56){label=5;break;}else{label=6;break;} //@line 3058 "./stb_image.h"
 case 5: 
 $r=0; //@line 3058 "./stb_image.h"
 label=7;break; //@line 3058 "./stb_image.h"
 case 6: 
 $r=255; //@line 3058 "./stb_image.h"
 label=7;break;
 case 7: 
 label=8;break; //@line 3058 "./stb_image.h"
 case 8: 
 var $61=$g; //@line 3059 "./stb_image.h"
 var $62=($61>>>0)>255; //@line 3059 "./stb_image.h"
 if($62){label=9;break;}else{label=13;break;} //@line 3059 "./stb_image.h"
 case 9: 
 var $64=$g; //@line 3059 "./stb_image.h"
 var $65=($64|0)<0; //@line 3059 "./stb_image.h"
 if($65){label=10;break;}else{label=11;break;} //@line 3059 "./stb_image.h"
 case 10: 
 $g=0; //@line 3059 "./stb_image.h"
 label=12;break; //@line 3059 "./stb_image.h"
 case 11: 
 $g=255; //@line 3059 "./stb_image.h"
 label=12;break;
 case 12: 
 label=13;break; //@line 3059 "./stb_image.h"
 case 13: 
 var $70=$b; //@line 3060 "./stb_image.h"
 var $71=($70>>>0)>255; //@line 3060 "./stb_image.h"
 if($71){label=14;break;}else{label=18;break;} //@line 3060 "./stb_image.h"
 case 14: 
 var $73=$b; //@line 3060 "./stb_image.h"
 var $74=($73|0)<0; //@line 3060 "./stb_image.h"
 if($74){label=15;break;}else{label=16;break;} //@line 3060 "./stb_image.h"
 case 15: 
 $b=0; //@line 3060 "./stb_image.h"
 label=17;break; //@line 3060 "./stb_image.h"
 case 16: 
 $b=255; //@line 3060 "./stb_image.h"
 label=17;break;
 case 17: 
 label=18;break; //@line 3060 "./stb_image.h"
 case 18: 
 var $79=$r; //@line 3061 "./stb_image.h"
 var $80=(($79)&255); //@line 3061 "./stb_image.h"
 var $81=$1; //@line 3061 "./stb_image.h"
 var $82=(($81)|0); //@line 3061 "./stb_image.h"
 HEAP8[($82)]=$80; //@line 3061 "./stb_image.h"
 var $83=$g; //@line 3062 "./stb_image.h"
 var $84=(($83)&255); //@line 3062 "./stb_image.h"
 var $85=$1; //@line 3062 "./stb_image.h"
 var $86=(($85+1)|0); //@line 3062 "./stb_image.h"
 HEAP8[($86)]=$84; //@line 3062 "./stb_image.h"
 var $87=$b; //@line 3063 "./stb_image.h"
 var $88=(($87)&255); //@line 3063 "./stb_image.h"
 var $89=$1; //@line 3063 "./stb_image.h"
 var $90=(($89+2)|0); //@line 3063 "./stb_image.h"
 HEAP8[($90)]=$88; //@line 3063 "./stb_image.h"
 var $91=$1; //@line 3064 "./stb_image.h"
 var $92=(($91+3)|0); //@line 3064 "./stb_image.h"
 HEAP8[($92)]=-1; //@line 3064 "./stb_image.h"
 var $93=$6; //@line 3065 "./stb_image.h"
 var $94=$1; //@line 3065 "./stb_image.h"
 var $95=(($94+$93)|0); //@line 3065 "./stb_image.h"
 $1=$95; //@line 3065 "./stb_image.h"
 label=19;break; //@line 3066 "./stb_image.h"
 case 19: 
 var $97=$i; //@line 3047 "./stb_image.h"
 var $98=((($97)+(1))|0); //@line 3047 "./stb_image.h"
 $i=$98; //@line 3047 "./stb_image.h"
 label=2;break; //@line 3047 "./stb_image.h"
 case 20: 
 STACKTOP=sp;return; //@line 3067 "./stb_image.h"
  default: assert(0, "bad label: " + label);
 }

}


function _stbi__resample_row_hv_2($out,$in_near,$in_far,$w,$hs){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 var $i;
 var $t0;
 var $t1;
 $2=$out;
 $3=$in_near;
 $4=$in_far;
 $5=$w;
 $6=$hs;
 var $7=$5; //@line 2892 "./stb_image.h"
 var $8=($7|0)==1; //@line 2892 "./stb_image.h"
 if($8){label=2;break;}else{label=3;break;} //@line 2892 "./stb_image.h"
 case 2: 
 var $10=$3; //@line 2893 "./stb_image.h"
 var $11=(($10)|0); //@line 2893 "./stb_image.h"
 var $12=HEAP8[($11)]; //@line 2893 "./stb_image.h"
 var $13=($12&255); //@line 2893 "./stb_image.h"
 var $14=((($13)*(3))&-1); //@line 2893 "./stb_image.h"
 var $15=$4; //@line 2893 "./stb_image.h"
 var $16=(($15)|0); //@line 2893 "./stb_image.h"
 var $17=HEAP8[($16)]; //@line 2893 "./stb_image.h"
 var $18=($17&255); //@line 2893 "./stb_image.h"
 var $19=((($14)+($18))|0); //@line 2893 "./stb_image.h"
 var $20=((($19)+(2))|0); //@line 2893 "./stb_image.h"
 var $21=$20>>2; //@line 2893 "./stb_image.h"
 var $22=(($21)&255); //@line 2893 "./stb_image.h"
 var $23=$2; //@line 2893 "./stb_image.h"
 var $24=(($23+1)|0); //@line 2893 "./stb_image.h"
 HEAP8[($24)]=$22; //@line 2893 "./stb_image.h"
 var $25=$2; //@line 2893 "./stb_image.h"
 var $26=(($25)|0); //@line 2893 "./stb_image.h"
 HEAP8[($26)]=$22; //@line 2893 "./stb_image.h"
 var $27=$2; //@line 2894 "./stb_image.h"
 $1=$27; //@line 2894 "./stb_image.h"
 label=8;break; //@line 2894 "./stb_image.h"
 case 3: 
 var $29=$3; //@line 2897 "./stb_image.h"
 var $30=(($29)|0); //@line 2897 "./stb_image.h"
 var $31=HEAP8[($30)]; //@line 2897 "./stb_image.h"
 var $32=($31&255); //@line 2897 "./stb_image.h"
 var $33=((($32)*(3))&-1); //@line 2897 "./stb_image.h"
 var $34=$4; //@line 2897 "./stb_image.h"
 var $35=(($34)|0); //@line 2897 "./stb_image.h"
 var $36=HEAP8[($35)]; //@line 2897 "./stb_image.h"
 var $37=($36&255); //@line 2897 "./stb_image.h"
 var $38=((($33)+($37))|0); //@line 2897 "./stb_image.h"
 $t1=$38; //@line 2897 "./stb_image.h"
 var $39=$t1; //@line 2898 "./stb_image.h"
 var $40=((($39)+(2))|0); //@line 2898 "./stb_image.h"
 var $41=$40>>2; //@line 2898 "./stb_image.h"
 var $42=(($41)&255); //@line 2898 "./stb_image.h"
 var $43=$2; //@line 2898 "./stb_image.h"
 var $44=(($43)|0); //@line 2898 "./stb_image.h"
 HEAP8[($44)]=$42; //@line 2898 "./stb_image.h"
 $i=1; //@line 2899 "./stb_image.h"
 label=4;break; //@line 2899 "./stb_image.h"
 case 4: 
 var $46=$i; //@line 2899 "./stb_image.h"
 var $47=$5; //@line 2899 "./stb_image.h"
 var $48=($46|0)<($47|0); //@line 2899 "./stb_image.h"
 if($48){label=5;break;}else{label=7;break;} //@line 2899 "./stb_image.h"
 case 5: 
 var $50=$t1; //@line 2900 "./stb_image.h"
 $t0=$50; //@line 2900 "./stb_image.h"
 var $51=$i; //@line 2901 "./stb_image.h"
 var $52=$3; //@line 2901 "./stb_image.h"
 var $53=(($52+$51)|0); //@line 2901 "./stb_image.h"
 var $54=HEAP8[($53)]; //@line 2901 "./stb_image.h"
 var $55=($54&255); //@line 2901 "./stb_image.h"
 var $56=((($55)*(3))&-1); //@line 2901 "./stb_image.h"
 var $57=$i; //@line 2901 "./stb_image.h"
 var $58=$4; //@line 2901 "./stb_image.h"
 var $59=(($58+$57)|0); //@line 2901 "./stb_image.h"
 var $60=HEAP8[($59)]; //@line 2901 "./stb_image.h"
 var $61=($60&255); //@line 2901 "./stb_image.h"
 var $62=((($56)+($61))|0); //@line 2901 "./stb_image.h"
 $t1=$62; //@line 2901 "./stb_image.h"
 var $63=$t0; //@line 2902 "./stb_image.h"
 var $64=((($63)*(3))&-1); //@line 2902 "./stb_image.h"
 var $65=$t1; //@line 2902 "./stb_image.h"
 var $66=((($64)+($65))|0); //@line 2902 "./stb_image.h"
 var $67=((($66)+(8))|0); //@line 2902 "./stb_image.h"
 var $68=$67>>4; //@line 2902 "./stb_image.h"
 var $69=(($68)&255); //@line 2902 "./stb_image.h"
 var $70=$i; //@line 2902 "./stb_image.h"
 var $71=($70<<1); //@line 2902 "./stb_image.h"
 var $72=((($71)-(1))|0); //@line 2902 "./stb_image.h"
 var $73=$2; //@line 2902 "./stb_image.h"
 var $74=(($73+$72)|0); //@line 2902 "./stb_image.h"
 HEAP8[($74)]=$69; //@line 2902 "./stb_image.h"
 var $75=$t1; //@line 2903 "./stb_image.h"
 var $76=((($75)*(3))&-1); //@line 2903 "./stb_image.h"
 var $77=$t0; //@line 2903 "./stb_image.h"
 var $78=((($76)+($77))|0); //@line 2903 "./stb_image.h"
 var $79=((($78)+(8))|0); //@line 2903 "./stb_image.h"
 var $80=$79>>4; //@line 2903 "./stb_image.h"
 var $81=(($80)&255); //@line 2903 "./stb_image.h"
 var $82=$i; //@line 2903 "./stb_image.h"
 var $83=($82<<1); //@line 2903 "./stb_image.h"
 var $84=$2; //@line 2903 "./stb_image.h"
 var $85=(($84+$83)|0); //@line 2903 "./stb_image.h"
 HEAP8[($85)]=$81; //@line 2903 "./stb_image.h"
 label=6;break; //@line 2904 "./stb_image.h"
 case 6: 
 var $87=$i; //@line 2899 "./stb_image.h"
 var $88=((($87)+(1))|0); //@line 2899 "./stb_image.h"
 $i=$88; //@line 2899 "./stb_image.h"
 label=4;break; //@line 2899 "./stb_image.h"
 case 7: 
 var $90=$t1; //@line 2905 "./stb_image.h"
 var $91=((($90)+(2))|0); //@line 2905 "./stb_image.h"
 var $92=$91>>2; //@line 2905 "./stb_image.h"
 var $93=(($92)&255); //@line 2905 "./stb_image.h"
 var $94=$5; //@line 2905 "./stb_image.h"
 var $95=($94<<1); //@line 2905 "./stb_image.h"
 var $96=((($95)-(1))|0); //@line 2905 "./stb_image.h"
 var $97=$2; //@line 2905 "./stb_image.h"
 var $98=(($97+$96)|0); //@line 2905 "./stb_image.h"
 HEAP8[($98)]=$93; //@line 2905 "./stb_image.h"
 var $99=$2; //@line 2909 "./stb_image.h"
 $1=$99; //@line 2909 "./stb_image.h"
 label=8;break; //@line 2909 "./stb_image.h"
 case 8: 
 var $101=$1; //@line 2910 "./stb_image.h"
 STACKTOP=sp;return $101; //@line 2910 "./stb_image.h"
  default: assert(0, "bad label: " + label);
 }

}


function _stbi__clamp($x){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 $2=$x;
 var $3=$2; //@line 1898 "./stb_image.h"
 var $4=($3>>>0)>255; //@line 1898 "./stb_image.h"
 if($4){label=2;break;}else{label=7;break;} //@line 1898 "./stb_image.h"
 case 2: 
 var $6=$2; //@line 1899 "./stb_image.h"
 var $7=($6|0)<0; //@line 1899 "./stb_image.h"
 if($7){label=3;break;}else{label=4;break;} //@line 1899 "./stb_image.h"
 case 3: 
 $1=0; //@line 1899 "./stb_image.h"
 label=8;break; //@line 1899 "./stb_image.h"
 case 4: 
 var $10=$2; //@line 1900 "./stb_image.h"
 var $11=($10|0)>255; //@line 1900 "./stb_image.h"
 if($11){label=5;break;}else{label=6;break;} //@line 1900 "./stb_image.h"
 case 5: 
 $1=-1; //@line 1900 "./stb_image.h"
 label=8;break; //@line 1900 "./stb_image.h"
 case 6: 
 label=7;break; //@line 1901 "./stb_image.h"
 case 7: 
 var $15=$2; //@line 1902 "./stb_image.h"
 var $16=(($15)&255); //@line 1902 "./stb_image.h"
 $1=$16; //@line 1902 "./stb_image.h"
 label=8;break; //@line 1902 "./stb_image.h"
 case 8: 
 var $18=$1; //@line 1903 "./stb_image.h"
 STACKTOP=sp;return $18; //@line 1903 "./stb_image.h"
  default: assert(0, "bad label: " + label);
 }

}


function _stbi__stdio_read($user,$data,$size){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 var $2;
 var $3;
 $1=$user;
 $2=$data;
 $3=$size;
 var $4=$2; //@line 782 "./stb_image.h"
 var $5=$3; //@line 782 "./stb_image.h"
 var $6=$1; //@line 782 "./stb_image.h"
 var $7=$6; //@line 782 "./stb_image.h"
 var $8=_fread($4,1,$5,$7); //@line 782 "./stb_image.h"
 STACKTOP=sp;return $8; //@line 782 "./stb_image.h"
}


function _stbi__stdio_skip($user,$n){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 var $2;
 $1=$user;
 $2=$n;
 var $3=$1; //@line 787 "./stb_image.h"
 var $4=$3; //@line 787 "./stb_image.h"
 var $5=$2; //@line 787 "./stb_image.h"
 var $6=_fseek($4,$5,1); //@line 787 "./stb_image.h"
 STACKTOP=sp;return; //@line 788 "./stb_image.h"
}


function _stbi__stdio_eof($user){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 $1=$user;
 var $2=$1; //@line 792 "./stb_image.h"
 var $3=$2; //@line 792 "./stb_image.h"
 var $4=_feof($3); //@line 792 "./stb_image.h"
 STACKTOP=sp;return $4; //@line 792 "./stb_image.h"
}


function _iswalnum($wc){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=_iswdigit($wc);
 var $2=($1|0)==0;
 if($2){label=2;break;}else{var $7=1;label=3;break;}
 case 2: 
 var $4=_iswalpha($wc);
 var $5=($4|0)!=0;
 var $phitmp=($5&1);
 var $7=$phitmp;label=3;break;
 case 3: 
 var $7;
 return $7;
  default: assert(0, "bad label: " + label);
 }

}


function _iswalpha($wc){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($wc>>>0)<131072;
 if($1){label=2;break;}else{label=3;break;}
 case 2: 
 var $3=$wc>>>8;
 var $4=((6600+$3)|0);
 var $5=HEAP8[($4)];
 var $6=($5&255);
 var $7=$6<<5;
 var $8=$wc>>>3;
 var $9=$8&31;
 var $10=$7|$9;
 var $11=((6600+$10)|0);
 var $12=HEAP8[($11)];
 var $13=($12&255);
 var $14=$wc&7;
 var $15=$13>>>($14>>>0);
 var $16=$15&1;
 var $_0=$16;label=4;break;
 case 3: 
 var $18=($wc>>>0)<196606;
 var $_=($18&1);
 var $_0=$_;label=4;break;
 case 4: 
 var $_0;
 return $_0;
  default: assert(0, "bad label: " + label);
 }

}


function _iswblank($wc){
 var label=0;


 var $1=_isblank($wc);
 return $1;
}


function _iswcntrl($wc){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($wc>>>0)<32;
 var $2=((($wc)-(127))|0);
 var $3=($2>>>0)<33;
 var $or_cond=$1|$3;
 var $4=((($wc)-(8232))|0);
 var $5=($4>>>0)<2;
 var $or_cond3=$or_cond|$5;
 if($or_cond3){var $10=1;label=3;break;}else{label=2;break;}
 case 2: 
 var $7=((($wc)-(65529))|0);
 var $8=($7>>>0)<3;
 var $phitmp=($8&1);
 var $10=$phitmp;label=3;break;
 case 3: 
 var $10;
 return $10;
  default: assert(0, "bad label: " + label);
 }

}


function _iswctype($wc,$type){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 switch(($type|0)){case 9:{ label=10;break;}case 10:{ label=11;break;}case 11:{ label=12;break;}case 12:{ label=13;break;}case 1:{ label=2;break;}case 2:{ label=3;break;}case 3:{ label=4;break;}case 4:{ label=5;break;}case 5:{ label=6;break;}case 6:{ label=7;break;}case 7:{ label=8;break;}case 8:{ label=9;break;}default:{var $_0=0;label=14;break;}}break;
 case 2: 
 var $2=_iswalnum($wc);
 var $_0=$2;label=14;break;
 case 3: 
 var $4=_iswalpha($wc);
 var $_0=$4;label=14;break;
 case 4: 
 var $6=_iswblank($wc);
 var $_0=$6;label=14;break;
 case 5: 
 var $8=_iswcntrl($wc);
 var $_0=$8;label=14;break;
 case 6: 
 var $10=_iswdigit($wc);
 var $_0=$10;label=14;break;
 case 7: 
 var $12=_iswgraph($wc);
 var $_0=$12;label=14;break;
 case 8: 
 var $14=_iswlower($wc);
 var $_0=$14;label=14;break;
 case 9: 
 var $16=_iswprint($wc);
 var $_0=$16;label=14;break;
 case 10: 
 var $18=_iswpunct($wc);
 var $_0=$18;label=14;break;
 case 11: 
 var $20=_iswspace($wc);
 var $_0=$20;label=14;break;
 case 12: 
 var $22=_iswupper($wc);
 var $_0=$22;label=14;break;
 case 13: 
 var $24=_iswxdigit($wc);
 var $_0=$24;label=14;break;
 case 14: 
 var $_0;
 return $_0;
  default: assert(0, "bad label: " + label);
 }

}


function _wctype($s){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=HEAP8[($s)];
 var $i_01=1;var $p_02=1064;var $3=97;label=2;break;
 case 2: 
 var $3;
 var $p_02;
 var $i_01;
 var $4=(($1<<24)>>24)==(($3<<24)>>24);
 if($4){label=3;break;}else{label=4;break;}
 case 3: 
 var $6=_strcmp($s,$p_02);
 var $7=($6|0)==0;
 if($7){var $_0=$i_01;label=5;break;}else{label=4;break;}
 case 4: 
 var $9=((($i_01)+(1))|0);
 var $10=(($p_02+6)|0);
 var $11=HEAP8[($10)];
 var $12=(($11<<24)>>24)==0;
 if($12){var $_0=0;label=5;break;}else{var $i_01=$9;var $p_02=$10;var $3=$11;label=2;break;}
 case 5: 
 var $_0;
 return $_0;
  default: assert(0, "bad label: " + label);
 }

}


function _iswdigit($wc){
 var label=0;


 var $1=((($wc)-(48))|0);
 var $2=($1>>>0)<10;
 var $3=($2&1);
 return $3;
}


function _iswgraph($wc){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=_iswspace($wc);
 var $2=($1|0)==0;
 if($2){label=2;break;}else{var $7=0;label=3;break;}
 case 2: 
 var $4=_iswprint($wc);
 var $5=($4|0)!=0;
 var $phitmp=($5&1);
 var $7=$phitmp;label=3;break;
 case 3: 
 var $7;
 return $7;
  default: assert(0, "bad label: " + label);
 }

}


function _iswlower($wc){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=_towupper($wc);
 var $2=($1|0)==($wc|0);
 if($2){label=2;break;}else{var $6=1;label=3;break;}
 case 2: 
 var $4=($wc|0)==223;
 var $phitmp=($4&1);
 var $6=$phitmp;label=3;break;
 case 3: 
 var $6;
 return $6;
  default: assert(0, "bad label: " + label);
 }

}


function _iswprint($wc){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($wc>>>0)<255;
 if($1){label=2;break;}else{label=3;break;}
 case 2: 
 var $3=((($wc)+(1))|0);
 var $4=$3&127;
 var $5=($4>>>0)>32;
 var $6=($5&1);
 var $_0=$6;label=5;break;
 case 3: 
 var $8=($wc>>>0)<8232;
 var $9=((($wc)-(8234))|0);
 var $10=($9>>>0)<47062;
 var $or_cond=$8|$10;
 var $11=((($wc)-(57344))|0);
 var $12=($11>>>0)<8185;
 var $or_cond3=$or_cond|$12;
 if($or_cond3){var $_0=1;label=5;break;}else{label=4;break;}
 case 4: 
 var $14=((($wc)-(65532))|0);
 var $15=($14>>>0)>1048579;
 var $16=$wc&65534;
 var $17=($16|0)==65534;
 var $or_cond5=$15|$17;
 var $18=($or_cond5&1);
 var $_=$18^1;
 return $_;
 case 5: 
 var $_0;
 return $_0;
  default: assert(0, "bad label: " + label);
 }

}


function _iswpunct($wc){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($wc>>>0)<131072;
 if($1){label=2;break;}else{var $_0=0;label=3;break;}
 case 2: 
 var $3=$wc>>>8;
 var $4=((3432+$3)|0);
 var $5=HEAP8[($4)];
 var $6=($5&255);
 var $7=$6<<5;
 var $8=$wc>>>3;
 var $9=$8&31;
 var $10=$7|$9;
 var $11=((3432+$10)|0);
 var $12=HEAP8[($11)];
 var $13=($12&255);
 var $14=$wc&7;
 var $15=$13>>>($14>>>0);
 var $16=$15&1;
 var $_0=$16;label=3;break;
 case 3: 
 var $_0;
 return $_0;
  default: assert(0, "bad label: " + label);
 }

}


function _iswspace($wc){
 var label=0;


 var $1=_wcschr(46376,$wc);
 var $not_=($1|0)!=0;
 var $_=($not_&1);
 return $_;
}


function _iswupper($wc){
 var label=0;


 var $1=_towlower($wc);
 var $2=($1|0)!=($wc|0);
 var $3=($2&1);
 return $3;
}


function _iswxdigit($wc){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=((($wc)-(48))|0);
 var $2=($1>>>0)<10;
 if($2){var $8=1;label=3;break;}else{label=2;break;}
 case 2: 
 var $4=$wc|32;
 var $5=((($4)-(97))|0);
 var $6=($5>>>0)<6;
 var $phitmp=($6&1);
 var $8=$phitmp;label=3;break;
 case 3: 
 var $8;
 return $8;
  default: assert(0, "bad label: " + label);
 }

}


function _towupper($wc){
 var label=0;


 var $1=___towcase($wc,0);
 return $1;
}


function ___towcase($wc,$lower){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=$lower<<1;
 var $2=((($1)-(1))|0);
 var $3=((($lower)-(1))|0);
 var $4=_iswalpha($wc);
 var $5=($4|0)==0;
 var $6=((($wc)-(1536))|0);
 var $7=($6>>>0)<2560;
 var $or_cond9=$5|$7;
 var $8=((($wc)-(11776))|0);
 var $9=($8>>>0)<30784;
 var $or_cond11=$or_cond9|$9;
 var $10=((($wc)-(43008))|0);
 var $11=($10>>>0)<22272;
 var $or_cond13=$or_cond11|$11;
 if($or_cond13){var $_0=$wc;label=20;break;}else{label=2;break;}
 case 2: 
 var $13=($lower|0)==0;
 if($13){label=7;break;}else{label=3;break;}
 case 3: 
 var $15=((($wc)-(4256))|0);
 var $16=($15>>>0)<46;
 if($16){label=4;break;}else{var $i_024=0;label=11;break;}
 case 4: 
 var $18=($wc|0)>4293;
 if($18){label=5;break;}else{label=6;break;}
 case 5: 
 if(($wc|0)==4301|($wc|0)==4295){ label=6;break;}else{var $_0=$wc;label=20;break;}
 case 6: 
 var $20=((($wc)+(7264))|0);
 var $_0=$20;label=20;break;
 case 7: 
 var $21=((($wc)-(11520))|0);
 var $22=($21>>>0)<38;
 if($22){label=8;break;}else{var $i_024=0;label=11;break;}
 case 8: 
 var $24=((($wc)-(7264))|0);
 var $_0=$24;label=20;break;
 case 9: 
 var $25=($42|0)==61;
 if($25){label=10;break;}else{var $i_024=$42;label=11;break;}
 case 10: 
 var $26=(((1)-($lower))|0);
 var $27=((11048+($26<<1))|0);
 var $28=HEAP16[(($27)>>1)];
 var $29=(($28<<16)>>16)==0;
 if($29){label=18;break;}else{var $i_121=0;var $56=$28;label=16;break;}
 case 11: 
 var $i_024;
 var $30=((108952+($i_024<<2)+3)|0);
 var $31=HEAP8[($30)];
 var $32=((108952+($i_024<<2))|0);
 var $33=HEAP16[(($32)>>1)];
 var $34=($33&65535);
 var $35=((108952+($i_024<<2)+2)|0);
 var $36=HEAP8[($35)];
 var $37=(($36<<24)>>24);
 var $38=$37&$3;
 var $_neg16=((($wc)-($34))|0);
 var $39=((($_neg16)-($38))|0);
 var $40=($31&255);
 var $41=($39>>>0)<($40>>>0);
 var $42=((($i_024)+(1))|0);
 if($41){label=12;break;}else{label=9;break;}
 case 12: 
 var $44=(($36<<24)>>24)==1;
 if($44){label=13;break;}else{label=14;break;}
 case 13: 
 var $46=((($lower)+($wc))|0);
 var $47=$_neg16&1;
 var $48=((($46)-($47))|0);
 var $_0=$48;label=20;break;
 case 14: 
 var $50=(Math_imul($37,$2)|0);
 var $51=((($50)+($wc))|0);
 var $_0=$51;label=20;break;
 case 15: 
 var $53=((11048+($59<<2)+($26<<1))|0);
 var $54=HEAP16[(($53)>>1)];
 var $55=(($54<<16)>>16)==0;
 if($55){label=18;break;}else{var $i_121=$59;var $56=$54;label=16;break;}
 case 16: 
 var $56;
 var $i_121;
 var $57=($56&65535);
 var $58=($57|0)==($wc|0);
 var $59=((($i_121)+(1))|0);
 if($58){label=17;break;}else{label=15;break;}
 case 17: 
 var $61=((11048+($i_121<<2)+($lower<<1))|0);
 var $62=HEAP16[(($61)>>1)];
 var $63=($62&65535);
 var $_0=$63;label=20;break;
 case 18: 
 var $64=((($lower)*(40))&-1);
 var $_neg19=((($wc)-(66600))|0);
 var $65=((($_neg19)+($64))|0);
 var $66=($65>>>0)<40;
 if($66){label=19;break;}else{var $_0=$wc;label=20;break;}
 case 19: 
 var $68=((($wc)-(40))|0);
 var $69=((($lower)*(80))&-1);
 var $70=((($68)+($69))|0);
 var $_0=$70;label=20;break;
 case 20: 
 var $_0;
 return $_0;
  default: assert(0, "bad label: " + label);
 }

}


function _towlower($wc){
 var label=0;


 var $1=___towcase($wc,1);
 return $1;
}


function _wcswidth($wcs,$n){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($n|0)==0;
 if($1){var $k_1=0;var $l_0_lcssa=0;label=5;break;}else{var $_023=$wcs;var $l_04=0;var $k_05=0;var $_in=$n;label=2;break;}
 case 2: 
 var $_in;
 var $k_05;
 var $l_04;
 var $_023;
 var $2=((($_in)-(1))|0);
 var $3=HEAP32[(($_023)>>2)];
 var $4=($3|0)==0;
 if($4){var $k_1=$k_05;var $l_0_lcssa=$l_04;label=5;break;}else{label=3;break;}
 case 3: 
 var $6=_wcwidth($3);
 var $7=($6|0)>-1;
 if($7){label=4;break;}else{var $k_1=$6;var $l_0_lcssa=$l_04;label=5;break;}
 case 4: 
 var $9=((($6)+($l_04))|0);
 var $10=(($_023+4)|0);
 var $11=($2|0)==0;
 if($11){var $k_1=$6;var $l_0_lcssa=$9;label=5;break;}else{var $_023=$10;var $l_04=$9;var $k_05=$6;var $_in=$2;label=2;break;}
 case 5: 
 var $l_0_lcssa;
 var $k_1;
 var $12=($k_1|0)<0;
 var $13=($12?$k_1:$l_0_lcssa);
 return $13;
  default: assert(0, "bad label: " + label);
 }

}


function _wctrans($class){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=_strcmp($class,139496);
 var $2=($1|0)==0;
 if($2){var $_0=1;label=3;break;}else{label=2;break;}
 case 2: 
 var $4=_strcmp($class,139512);
 var $5=($4|0)==0;
 var $_=($5?2:0);
 var $_0=$_;label=3;break;
 case 3: 
 var $_0;
 return $_0;
  default: assert(0, "bad label: " + label);
 }

}


function _towctrans($wc,$trans){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $magicptr=$trans;
 if(($magicptr|0)==1){ label=2;break;}else if(($magicptr|0)==2){ label=3;break;}else{var $_0=$wc;label=4;break;}
 case 2: 
 var $2=_towupper($wc);
 var $_0=$2;label=4;break;
 case 3: 
 var $4=_towlower($wc);
 var $_0=$4;label=4;break;
 case 4: 
 var $_0;
 return $_0;
  default: assert(0, "bad label: " + label);
 }

}


function _wcwidth($wc){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($wc>>>0)<255;
 if($1){label=2;break;}else{label=4;break;}
 case 2: 
 var $3=((($wc)+(1))|0);
 var $4=$3&127;
 var $5=($4>>>0)>32;
 if($5){var $_0=1;label=10;break;}else{label=3;break;}
 case 3: 
 var $7=($wc|0)!=0;
 var $8=(($7<<31)>>31);
 var $_0=$8;label=10;break;
 case 4: 
 var $10=$wc&-65538;
 var $11=($10>>>0)<65534;
 if($11){label=5;break;}else{label=7;break;}
 case 5: 
 var $13=$wc>>8;
 var $14=((1512+$13)|0);
 var $15=HEAP8[($14)];
 var $16=($15&255);
 var $17=$16<<5;
 var $18=$wc>>>3;
 var $19=$18&31;
 var $20=$17|$19;
 var $21=((1512+$20)|0);
 var $22=HEAP8[($21)];
 var $23=($22&255);
 var $24=$wc&7;
 var $25=1<<$24;
 var $26=$23&$25;
 var $27=($26|0)==0;
 if($27){label=6;break;}else{var $_0=0;label=10;break;}
 case 6: 
 var $29=((8+$13)|0);
 var $30=HEAP8[($29)];
 var $31=($30&255);
 var $32=$31<<5;
 var $33=$32|$19;
 var $34=((8+$33)|0);
 var $35=HEAP8[($34)];
 var $36=($35&255);
 var $37=$36&$25;
 var $38=($37|0)==0;
 var $_=($38?1:2);
 var $_0=$_;label=10;break;
 case 7: 
 var $40=$wc&65534;
 var $41=($40|0)==65534;
 if($41){var $_0=-1;label=10;break;}else{label=8;break;}
 case 8: 
 var $43=((($wc)-(131072))|0);
 var $44=($43>>>0)<131072;
 if($44){var $_0=2;label=10;break;}else{label=9;break;}
 case 9: 
 var $46=($wc|0)==917505;
 var $47=((($wc)-(917536))|0);
 var $48=($47>>>0)<95;
 var $or_cond=$46|$48;
 var $49=((($wc)-(917760))|0);
 var $50=($49|0)<239;
 var $or_cond3=$or_cond|$50;
 var $51=($or_cond3&1);
 var $_4=$51^1;
 return $_4;
 case 10: 
 var $_0;
 return $_0;
  default: assert(0, "bad label: " + label);
 }

}


function ___intscan($f,$base,$pok,$lim$0,$lim$1){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($base>>>0)>36;
 if($1){label=3;break;}else{label=2;break;}
 case 2: 
 var $2=(($f+4)|0);
 var $3=(($f+100)|0);
 label=4;break;
 case 3: 
 var $5=___errno_location();
 HEAP32[(($5)>>2)]=22;
 var $_0$1=0;var $_0$0=0;label=87;break;
 case 4: 
 var $7=HEAP32[(($2)>>2)];
 var $8=HEAP32[(($3)>>2)];
 var $9=($7>>>0)<($8>>>0);
 if($9){label=5;break;}else{label=6;break;}
 case 5: 
 var $11=(($7+1)|0);
 HEAP32[(($2)>>2)]=$11;
 var $12=HEAP8[($7)];
 var $13=($12&255);
 var $17=$13;label=7;break;
 case 6: 
 var $15=___shgetc($f);
 var $17=$15;label=7;break;
 case 7: 
 var $17;
 var $18=_isspace($17);
 var $19=($18|0)==0;
 if($19){label=8;break;}else{label=4;break;}
 case 8: 
 var $21=($17|0)==45;
 if(($17|0)==45|($17|0)==43){ label=9;break;}else{var $neg_0=0;var $c_0=$17;label=12;break;}
 case 9: 
 var $23=(($21<<31)>>31);
 var $24=HEAP32[(($2)>>2)];
 var $25=HEAP32[(($3)>>2)];
 var $26=($24>>>0)<($25>>>0);
 if($26){label=10;break;}else{label=11;break;}
 case 10: 
 var $28=(($24+1)|0);
 HEAP32[(($2)>>2)]=$28;
 var $29=HEAP8[($24)];
 var $30=($29&255);
 var $neg_0=$23;var $c_0=$30;label=12;break;
 case 11: 
 var $32=___shgetc($f);
 var $neg_0=$23;var $c_0=$32;label=12;break;
 case 12: 
 var $c_0;
 var $neg_0;
 var $34=($base|0)==0;
 var $35=$base&-17;
 var $36=($35|0)==0;
 var $37=($c_0|0)==48;
 var $or_cond=$36&$37;
 if($or_cond){label=13;break;}else{label=28;break;}
 case 13: 
 var $39=HEAP32[(($2)>>2)];
 var $40=HEAP32[(($3)>>2)];
 var $41=($39>>>0)<($40>>>0);
 if($41){label=14;break;}else{label=15;break;}
 case 14: 
 var $43=(($39+1)|0);
 HEAP32[(($2)>>2)]=$43;
 var $44=HEAP8[($39)];
 var $45=($44&255);
 var $49=$45;label=16;break;
 case 15: 
 var $47=___shgetc($f);
 var $49=$47;label=16;break;
 case 16: 
 var $49;
 var $50=$49|32;
 var $51=($50|0)==120;
 if($51){label=17;break;}else{label=27;break;}
 case 17: 
 var $53=HEAP32[(($2)>>2)];
 var $54=HEAP32[(($3)>>2)];
 var $55=($53>>>0)<($54>>>0);
 if($55){label=18;break;}else{label=19;break;}
 case 18: 
 var $57=(($53+1)|0);
 HEAP32[(($2)>>2)]=$57;
 var $58=HEAP8[($53)];
 var $59=($58&255);
 var $63=$59;label=20;break;
 case 19: 
 var $61=___shgetc($f);
 var $63=$61;label=20;break;
 case 20: 
 var $63;
 var $_sum15=((($63)+(1))|0);
 var $64=((1248+$_sum15)|0);
 var $65=HEAP8[($64)];
 var $66=($65&255)>15;
 if($66){label=21;break;}else{var $_122=16;var $c_123=$63;label=47;break;}
 case 21: 
 var $68=HEAP32[(($3)>>2)];
 var $69=($68|0)==0;
 if($69){label=23;break;}else{label=22;break;}
 case 22: 
 var $71=HEAP32[(($2)>>2)];
 var $72=((($71)-(1))|0);
 HEAP32[(($2)>>2)]=$72;
 label=23;break;
 case 23: 
 var $74=($pok|0)==0;
 if($74){label=26;break;}else{label=24;break;}
 case 24: 
 if($69){var $_0$1=0;var $_0$0=0;label=87;break;}else{label=25;break;}
 case 25: 
 var $77=HEAP32[(($2)>>2)];
 var $78=((($77)-(1))|0);
 HEAP32[(($2)>>2)]=$78;
 var $_0$1=0;var $_0$0=0;label=87;break;
 case 26: 
 ___shlim($f,0);
 var $_0$1=0;var $_0$0=0;label=87;break;
 case 27: 
 var $_base=($34?8:$base);
 var $c_1=$49;var $_1=$_base;label=32;break;
 case 28: 
 var $_base16=($34?10:$base);
 var $_sum=((($c_0)+(1))|0);
 var $82=((1248+$_sum)|0);
 var $83=HEAP8[($82)];
 var $84=($83&255);
 var $85=($84>>>0)<($_base16>>>0);
 if($85){var $c_1=$c_0;var $_1=$_base16;label=32;break;}else{label=29;break;}
 case 29: 
 var $87=HEAP32[(($3)>>2)];
 var $88=($87|0)==0;
 if($88){label=31;break;}else{label=30;break;}
 case 30: 
 var $90=HEAP32[(($2)>>2)];
 var $91=((($90)-(1))|0);
 HEAP32[(($2)>>2)]=$91;
 label=31;break;
 case 31: 
 ___shlim($f,0);
 var $93=___errno_location();
 HEAP32[(($93)>>2)]=22;
 var $_0$1=0;var $_0$0=0;label=87;break;
 case 32: 
 var $_1;
 var $c_1;
 var $95=($_1|0)==10;
 if($95){label=33;break;}else{var $_122=$_1;var $c_123=$c_1;label=47;break;}
 case 33: 
 var $96=((($c_1)-(48))|0);
 var $97=($96>>>0)<10;
 if($97){var $x_068=0;var $98=$96;label=34;break;}else{var $c_2_lcssa=$c_1;var $x_0_lcssa$1=0;var $x_0_lcssa$0=0;label=40;break;}
 case 34: 
 var $98;
 var $x_068;
 var $99=((($x_068)+($98))|0);
 var $100=HEAP32[(($2)>>2)];
 var $101=HEAP32[(($3)>>2)];
 var $102=($100>>>0)<($101>>>0);
 if($102){label=35;break;}else{label=36;break;}
 case 35: 
 var $104=(($100+1)|0);
 HEAP32[(($2)>>2)]=$104;
 var $105=HEAP8[($100)];
 var $106=($105&255);
 var $c_2_be=$106;label=37;break;
 case 36: 
 var $108=___shgetc($f);
 var $c_2_be=$108;label=37;break;
 case 37: 
 var $c_2_be;
 var $109=((($c_2_be)-(48))|0);
 var $110=($109>>>0)<10;
 var $111=($99>>>0)<429496729;
 var $_=$110&$111;
 if($_){label=38;break;}else{label=39;break;}
 case 38: 
 var $phitmp93=((($99)*(10))&-1);
 var $x_068=$phitmp93;var $98=$109;label=34;break;
 case 39: 
 var $phitmp78$0=$99;
 var $phitmp78$1=0;
 var $c_2_lcssa=$c_2_be;var $x_0_lcssa$1=$phitmp78$1;var $x_0_lcssa$0=$phitmp78$0;label=40;break;
 case 40: 
 var $x_0_lcssa$0;
 var $x_0_lcssa$1;
 var $c_2_lcssa;
 var $113=((($c_2_lcssa)-(48))|0);
 var $114=($113>>>0)<10;
 if($114){var $c_359=$c_2_lcssa;var $y_060$1=$x_0_lcssa$1;var $y_060$0=$x_0_lcssa$0;var $115=$113;label=41;break;}else{var $y_4$1=$x_0_lcssa$1;var $y_4$0=$x_0_lcssa$0;label=79;break;}
 case 41: 
 var $115;
 var $y_060$0;
 var $y_060$1;
 var $c_359;
 var $$etemp$0$0=10;
 var $$etemp$0$1=0;
 var $116$0=___muldi3($y_060$0,$y_060$1,$$etemp$0$0,$$etemp$0$1);var $116$1=tempRet0;
 var $117$0=$115;
 var $117$1=((((($115|0)<0))|0)?-1:0);
 var $$etemp$1$0=-1;
 var $$etemp$1$1=-1;
 var $118$0=$117$0^$$etemp$1$0;
 var $118$1=$117$1^$$etemp$1$1;
 var $119=(($116$1>>>0) > ($118$1>>>0)) | (((($116$1>>>0) == ($118$1>>>0) & ($116$0>>>0) >  ($118$0>>>0))));
 if($119){var $c_3_lcssa=$c_359;var $y_0_lcssa$1=$y_060$1;var $y_0_lcssa$0=$y_060$0;var $_lcssa=$115;label=46;break;}else{label=42;break;}
 case 42: 
 var $121$0=_i64Add($116$0,$116$1,$117$0,$117$1);var $121$1=tempRet0;
 var $122=HEAP32[(($2)>>2)];
 var $123=HEAP32[(($3)>>2)];
 var $124=($122>>>0)<($123>>>0);
 if($124){label=43;break;}else{label=44;break;}
 case 43: 
 var $126=(($122+1)|0);
 HEAP32[(($2)>>2)]=$126;
 var $127=HEAP8[($122)];
 var $128=($127&255);
 var $c_3_be=$128;label=45;break;
 case 44: 
 var $130=___shgetc($f);
 var $c_3_be=$130;label=45;break;
 case 45: 
 var $c_3_be;
 var $131=((($c_3_be)-(48))|0);
 var $132=($131>>>0)<10;
 var $$etemp$2$0=-1717986918;
 var $$etemp$2$1=429496729;
 var $133=(($121$1>>>0) < ($$etemp$2$1>>>0)) | (((($121$1>>>0) == ($$etemp$2$1>>>0) & ($121$0>>>0) <  ($$etemp$2$0>>>0))));
 var $or_cond17=$132&$133;
 if($or_cond17){var $c_359=$c_3_be;var $y_060$1=$121$1;var $y_060$0=$121$0;var $115=$131;label=41;break;}else{var $c_3_lcssa=$c_3_be;var $y_0_lcssa$1=$121$1;var $y_0_lcssa$0=$121$0;var $_lcssa=$131;label=46;break;}
 case 46: 
 var $_lcssa;
 var $y_0_lcssa$0;
 var $y_0_lcssa$1;
 var $c_3_lcssa;
 var $134=($_lcssa>>>0)>9;
 if($134){var $y_4$1=$y_0_lcssa$1;var $y_4$0=$y_0_lcssa$0;label=79;break;}else{var $y_3$1=$y_0_lcssa$1;var $y_3$0=$y_0_lcssa$0;var $c_8=$c_3_lcssa;var $_121=10;label=73;break;}
 case 47: 
 var $c_123;
 var $_122;
 var $135=((($_122)-(1))|0);
 var $136=$135&$_122;
 var $137=($136|0)==0;
 if($137){label=49;break;}else{label=48;break;}
 case 48: 
 var $_sum1352=((($c_123)+(1))|0);
 var $138=((1248+$_sum1352)|0);
 var $139=HEAP8[($138)];
 var $140=($139&255);
 var $141=($140>>>0)<($_122>>>0);
 if($141){var $x_253=0;var $195=$140;label=60;break;}else{var $c_6_lcssa=$c_123;var $x_2_lcssa$1=0;var $x_2_lcssa$0=0;var $213=$139;label=65;break;}
 case 49: 
 var $143=((($_122)*(23))&-1);
 var $144=$143>>>5;
 var $145=$144&7;
 var $146=((138896+$145)|0);
 var $147=HEAP8[($146)];
 var $148=(($147<<24)>>24);
 var $_sum934=((($c_123)+(1))|0);
 var $149=((1248+$_sum934)|0);
 var $150=HEAP8[($149)];
 var $151=($150&255);
 var $152=($151>>>0)<($_122>>>0);
 if($152){var $x_135=0;var $153=$151;label=50;break;}else{var $c_4_lcssa=$c_123;var $x_1_lcssa$1=0;var $x_1_lcssa$0=0;var $171=$150;label=55;break;}
 case 50: 
 var $153;
 var $x_135;
 var $154=$x_135<<$148;
 var $155=$153|$154;
 var $156=HEAP32[(($2)>>2)];
 var $157=HEAP32[(($3)>>2)];
 var $158=($156>>>0)<($157>>>0);
 if($158){label=51;break;}else{label=52;break;}
 case 51: 
 var $160=(($156+1)|0);
 HEAP32[(($2)>>2)]=$160;
 var $161=HEAP8[($156)];
 var $162=($161&255);
 var $c_4_be=$162;label=53;break;
 case 52: 
 var $164=___shgetc($f);
 var $c_4_be=$164;label=53;break;
 case 53: 
 var $c_4_be;
 var $_sum9=((($c_4_be)+(1))|0);
 var $165=((1248+$_sum9)|0);
 var $166=HEAP8[($165)];
 var $167=($166&255);
 var $168=($167>>>0)<($_122>>>0);
 var $169=($155>>>0)<134217728;
 var $_18=$168&$169;
 if($_18){var $x_135=$155;var $153=$167;label=50;break;}else{label=54;break;}
 case 54: 
 var $phitmp77$0=$155;
 var $phitmp77$1=0;
 var $c_4_lcssa=$c_4_be;var $x_1_lcssa$1=$phitmp77$1;var $x_1_lcssa$0=$phitmp77$0;var $171=$166;label=55;break;
 case 55: 
 var $171;
 var $x_1_lcssa$0;
 var $x_1_lcssa$1;
 var $c_4_lcssa;
 var $172$0=$148;
 var $172$1=0;
 var $$etemp$3$0=-1;
 var $$etemp$3$1=-1;
 var $173$0=_bitshift64Lshr($$etemp$3$0,$$etemp$3$1,$172$0);var $173$1=tempRet0;
 var $174=($171&255);
 var $175=($174>>>0)>=($_122>>>0);
 var $176=(($x_1_lcssa$1>>>0) > ($173$1>>>0)) | (((($x_1_lcssa$1>>>0) == ($173$1>>>0) & ($x_1_lcssa$0>>>0) >  ($173$0>>>0))));
 var $or_cond2628=$175|$176;
 if($or_cond2628){var $y_3$1=$x_1_lcssa$1;var $y_3$0=$x_1_lcssa$0;var $c_8=$c_4_lcssa;var $_121=$_122;label=73;break;}else{var $y_129$1=$x_1_lcssa$1;var $y_129$0=$x_1_lcssa$0;var $177=$171;label=56;break;}
 case 56: 
 var $177;
 var $y_129$0;
 var $y_129$1;
 var $178$0=_bitshift64Shl($y_129$0,$y_129$1,$172$0);var $178$1=tempRet0;
 var $179$0=($177&255);
 var $179$1=0;
 var $180$0=$179$0|$178$0;
 var $180$1=$179$1|$178$1;
 var $181=HEAP32[(($2)>>2)];
 var $182=HEAP32[(($3)>>2)];
 var $183=($181>>>0)<($182>>>0);
 if($183){label=57;break;}else{label=58;break;}
 case 57: 
 var $185=(($181+1)|0);
 HEAP32[(($2)>>2)]=$185;
 var $186=HEAP8[($181)];
 var $187=($186&255);
 var $c_5_be=$187;label=59;break;
 case 58: 
 var $189=___shgetc($f);
 var $c_5_be=$189;label=59;break;
 case 59: 
 var $c_5_be;
 var $_sum10=((($c_5_be)+(1))|0);
 var $190=((1248+$_sum10)|0);
 var $191=HEAP8[($190)];
 var $192=($191&255);
 var $193=($192>>>0)>=($_122>>>0);
 var $194=(($180$1>>>0) > ($173$1>>>0)) | (((($180$1>>>0) == ($173$1>>>0) & ($180$0>>>0) >  ($173$0>>>0))));
 var $or_cond26=$193|$194;
 if($or_cond26){var $y_3$1=$180$1;var $y_3$0=$180$0;var $c_8=$c_5_be;var $_121=$_122;label=73;break;}else{var $y_129$1=$180$1;var $y_129$0=$180$0;var $177=$191;label=56;break;}
 case 60: 
 var $195;
 var $x_253;
 var $196=(Math_imul($x_253,$_122)|0);
 var $197=((($195)+($196))|0);
 var $198=HEAP32[(($2)>>2)];
 var $199=HEAP32[(($3)>>2)];
 var $200=($198>>>0)<($199>>>0);
 if($200){label=61;break;}else{label=62;break;}
 case 61: 
 var $202=(($198+1)|0);
 HEAP32[(($2)>>2)]=$202;
 var $203=HEAP8[($198)];
 var $204=($203&255);
 var $c_6_be=$204;label=63;break;
 case 62: 
 var $206=___shgetc($f);
 var $c_6_be=$206;label=63;break;
 case 63: 
 var $c_6_be;
 var $_sum13=((($c_6_be)+(1))|0);
 var $207=((1248+$_sum13)|0);
 var $208=HEAP8[($207)];
 var $209=($208&255);
 var $210=($209>>>0)<($_122>>>0);
 var $211=($197>>>0)<119304647;
 var $_19=$210&$211;
 if($_19){var $x_253=$197;var $195=$209;label=60;break;}else{label=64;break;}
 case 64: 
 var $phitmp$0=$197;
 var $phitmp$1=0;
 var $c_6_lcssa=$c_6_be;var $x_2_lcssa$1=$phitmp$1;var $x_2_lcssa$0=$phitmp$0;var $213=$208;label=65;break;
 case 65: 
 var $213;
 var $x_2_lcssa$0;
 var $x_2_lcssa$1;
 var $c_6_lcssa;
 var $214$0=$_122;
 var $214$1=0;
 var $215=($213&255);
 var $216=($215>>>0)<($_122>>>0);
 if($216){label=66;break;}else{var $y_3$1=$x_2_lcssa$1;var $y_3$0=$x_2_lcssa$0;var $c_8=$c_6_lcssa;var $_121=$_122;label=73;break;}
 case 66: 
 var $$etemp$4$0=-1;
 var $$etemp$4$1=-1;
 var $217$0=___udivdi3($$etemp$4$0,$$etemp$4$1,$214$0,$214$1);var $217$1=tempRet0;
 var $c_744=$c_6_lcssa;var $y_245$1=$x_2_lcssa$1;var $y_245$0=$x_2_lcssa$0;var $219=$213;label=67;break;
 case 67: 
 var $219;
 var $y_245$0;
 var $y_245$1;
 var $c_744;
 var $220=(($y_245$1>>>0) > ($217$1>>>0)) | (((($y_245$1>>>0) == ($217$1>>>0) & ($y_245$0>>>0) >  ($217$0>>>0))));
 if($220){var $y_3$1=$y_245$1;var $y_3$0=$y_245$0;var $c_8=$c_744;var $_121=$_122;label=73;break;}else{label=68;break;}
 case 68: 
 var $222$0=___muldi3($y_245$0,$y_245$1,$214$0,$214$1);var $222$1=tempRet0;
 var $223$0=($219&255);
 var $223$1=0;
 var $$etemp$5$0=-1;
 var $$etemp$5$1=-1;
 var $224$0=$223$0^$$etemp$5$0;
 var $224$1=$223$1^$$etemp$5$1;
 var $225=(($222$1>>>0) > ($224$1>>>0)) | (((($222$1>>>0) == ($224$1>>>0) & ($222$0>>>0) >  ($224$0>>>0))));
 if($225){var $y_3$1=$y_245$1;var $y_3$0=$y_245$0;var $c_8=$c_744;var $_121=$_122;label=73;break;}else{label=69;break;}
 case 69: 
 var $227$0=_i64Add($223$0,$223$1,$222$0,$222$1);var $227$1=tempRet0;
 var $228=HEAP32[(($2)>>2)];
 var $229=HEAP32[(($3)>>2)];
 var $230=($228>>>0)<($229>>>0);
 if($230){label=70;break;}else{label=71;break;}
 case 70: 
 var $232=(($228+1)|0);
 HEAP32[(($2)>>2)]=$232;
 var $233=HEAP8[($228)];
 var $234=($233&255);
 var $c_7_be=$234;label=72;break;
 case 71: 
 var $236=___shgetc($f);
 var $c_7_be=$236;label=72;break;
 case 72: 
 var $c_7_be;
 var $_sum14=((($c_7_be)+(1))|0);
 var $237=((1248+$_sum14)|0);
 var $238=HEAP8[($237)];
 var $239=($238&255);
 var $240=($239>>>0)<($_122>>>0);
 if($240){var $c_744=$c_7_be;var $y_245$1=$227$1;var $y_245$0=$227$0;var $219=$238;label=67;break;}else{var $y_3$1=$227$1;var $y_3$0=$227$0;var $c_8=$c_7_be;var $_121=$_122;label=73;break;}
 case 73: 
 var $_121;
 var $c_8;
 var $y_3$0;
 var $y_3$1;
 var $_sum11=((($c_8)+(1))|0);
 var $241=((1248+$_sum11)|0);
 var $242=HEAP8[($241)];
 var $243=($242&255);
 var $244=($243>>>0)<($_121>>>0);
 if($244){label=74;break;}else{var $y_4$1=$y_3$1;var $y_4$0=$y_3$0;label=79;break;}
 case 74: 
 var $245=HEAP32[(($2)>>2)];
 var $246=HEAP32[(($3)>>2)];
 var $247=($245>>>0)<($246>>>0);
 if($247){label=75;break;}else{label=76;break;}
 case 75: 
 var $249=(($245+1)|0);
 HEAP32[(($2)>>2)]=$249;
 var $250=HEAP8[($245)];
 var $251=($250&255);
 var $c_9_be=$251;label=77;break;
 case 76: 
 var $253=___shgetc($f);
 var $c_9_be=$253;label=77;break;
 case 77: 
 var $c_9_be;
 var $_sum12=((($c_9_be)+(1))|0);
 var $254=((1248+$_sum12)|0);
 var $255=HEAP8[($254)];
 var $256=($255&255);
 var $257=($256>>>0)<($_121>>>0);
 if($257){label=74;break;}else{label=78;break;}
 case 78: 
 var $258=___errno_location();
 HEAP32[(($258)>>2)]=34;
 var $y_4$1=$lim$1;var $y_4$0=$lim$0;label=79;break;
 case 79: 
 var $y_4$0;
 var $y_4$1;
 var $259=HEAP32[(($3)>>2)];
 var $260=($259|0)==0;
 if($260){label=81;break;}else{label=80;break;}
 case 80: 
 var $262=HEAP32[(($2)>>2)];
 var $263=((($262)-(1))|0);
 HEAP32[(($2)>>2)]=$263;
 label=81;break;
 case 81: 
 var $265=(($y_4$1>>>0) < ($lim$1>>>0)) | (((($y_4$1>>>0) == ($lim$1>>>0) & ($y_4$0>>>0) <  ($lim$0>>>0))));
 if($265){label=86;break;}else{label=82;break;}
 case 82: 
 var $$etemp$6$0=1;
 var $$etemp$6$1=0;
 var $267$0=$lim$0&$$etemp$6$0;
 var $267$1=$lim$1&$$etemp$6$1;
 var $$etemp$7$0=0;
 var $$etemp$7$1=0;
 var $268=(($267$0|0) == ($$etemp$7$0|0)) & (($267$1|0) == ($$etemp$7$1|0));
 var $269=($neg_0|0)==0;
 var $or_cond20=$268&$269;
 if($or_cond20){label=83;break;}else{label=84;break;}
 case 83: 
 var $271=___errno_location();
 HEAP32[(($271)>>2)]=34;
 var $$etemp$8$0=-1;
 var $$etemp$8$1=-1;
 var $272$0=_i64Add($lim$0,$lim$1,$$etemp$8$0,$$etemp$8$1);var $272$1=tempRet0;
 var $_0$1=$272$1;var $_0$0=$272$0;label=87;break;
 case 84: 
 var $274=(($y_4$1>>>0) > ($lim$1>>>0)) | (((($y_4$1>>>0) == ($lim$1>>>0) & ($y_4$0>>>0) >  ($lim$0>>>0))));
 if($274){label=85;break;}else{label=86;break;}
 case 85: 
 var $276=___errno_location();
 HEAP32[(($276)>>2)]=34;
 var $_0$1=$lim$1;var $_0$0=$lim$0;label=87;break;
 case 86: 
 var $278$0=$neg_0;
 var $278$1=((((($neg_0|0)<0))|0)?-1:0);
 var $279$0=$y_4$0^$278$0;
 var $279$1=$y_4$1^$278$1;
 var $280$0=_i64Subtract($279$0,$279$1,$278$0,$278$1);var $280$1=tempRet0;
 var $_0$1=$280$1;var $_0$0=$280$0;label=87;break;
 case 87: 
 var $_0$0;
 var $_0$1;
 return (tempRet0=$_0$1,$_0$0);
  default: assert(0, "bad label: " + label);
 }

}


function _vwarn($fmt,$ap){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=HEAP32[((_stderr)>>2)];
 var $2=HEAP32[((___progname)>>2)];
 var $3=_fprintf($1,138856,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$2,tempVarArgs)); STACKTOP=tempVarArgs;
 var $4=($fmt|0)==0;
 if($4){label=3;break;}else{label=2;break;}
 case 2: 
 var $6=_vfprintf($1,$fmt,$ap);
 var $7=_fwrite(139416,2,1,$1);
 label=3;break;
 case 3: 
 _perror(0);
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function _vwarnx($fmt,$ap){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=HEAP32[((_stderr)>>2)];
 var $2=HEAP32[((___progname)>>2)];
 var $3=_fprintf($1,138856,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$2,tempVarArgs)); STACKTOP=tempVarArgs;
 var $4=($fmt|0)==0;
 if($4){label=3;break;}else{label=2;break;}
 case 2: 
 var $6=_vfprintf($1,$fmt,$ap);
 label=3;break;
 case 3: 
 var $8=_fputc(10,$1);
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function _verr($status,$fmt,$ap){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=HEAP32[((_stderr)>>2)];
 var $2=HEAP32[((___progname)>>2)];
 var $3=_fprintf($1,138856,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$2,tempVarArgs)); STACKTOP=tempVarArgs;
 var $4=($fmt|0)==0;
 if($4){label=3;break;}else{label=2;break;}
 case 2: 
 var $6=_vfprintf($1,$fmt,$ap);
 var $7=_fwrite(139416,2,1,$1);
 label=3;break;
 case 3: 
 _perror(0);
 _exit($status);
 throw "Reached an unreachable!";
  default: assert(0, "bad label: " + label);
 }

}


function _verrx($status,$fmt,$ap){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=HEAP32[((_stderr)>>2)];
 var $2=HEAP32[((___progname)>>2)];
 var $3=_fprintf($1,138856,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$2,tempVarArgs)); STACKTOP=tempVarArgs;
 var $4=($fmt|0)==0;
 if($4){label=3;break;}else{label=2;break;}
 case 2: 
 var $6=_vfprintf($1,$fmt,$ap);
 label=3;break;
 case 3: 
 var $7=_fputc(10,$1);
 _exit($status);
 throw "Reached an unreachable!";
  default: assert(0, "bad label: " + label);
 }

}


function _warn($fmt,varrp){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $ap=sp;
 var $1=$ap;
 HEAP32[(($1)>>2)]=varrp;HEAP32[((($1)+(4))>>2)]=0;
 var $2=HEAP32[((_stderr)>>2)];
 var $3=HEAP32[((___progname)>>2)];
 var $4=_fprintf($2,138856,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$3,tempVarArgs)); STACKTOP=tempVarArgs;
 var $5=($fmt|0)==0;
 if($5){label=3;break;}else{label=2;break;}
 case 2: 
 var $7=(($ap)|0);
 var $8=_vfprintf($2,$fmt,$7);
 var $9=_fwrite(139416,2,1,$2);
 label=3;break;
 case 3: 
 _perror(0);

 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function _warnx($fmt,varrp){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $ap=sp;
 var $1=$ap;
 HEAP32[(($1)>>2)]=varrp;HEAP32[((($1)+(4))>>2)]=0;
 var $2=HEAP32[((_stderr)>>2)];
 var $3=HEAP32[((___progname)>>2)];
 var $4=_fprintf($2,138856,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$3,tempVarArgs)); STACKTOP=tempVarArgs;
 var $5=($fmt|0)==0;
 if($5){label=3;break;}else{label=2;break;}
 case 2: 
 var $7=(($ap)|0);
 var $8=_vfprintf($2,$fmt,$7);
 label=3;break;
 case 3: 
 var $9=_fputc(10,$2);

 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function _err($status,$fmt,varrp){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $ap=sp;
 var $1=(($ap)|0);
 var $2=$ap;
 HEAP32[(($2)>>2)]=varrp;HEAP32[((($2)+(4))>>2)]=0;
 _verr($status,$fmt,$1);
 throw "Reached an unreachable!";
}


function _errx($status,$fmt,varrp){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $ap=sp;
 var $1=(($ap)|0);
 var $2=$ap;
 HEAP32[(($2)>>2)]=varrp;HEAP32[((($2)+(4))>>2)]=0;
 _verrx($status,$fmt,$1);
 throw "Reached an unreachable!";
}


function _iconv_open($to,$from){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=_find_charmap($to);
 var $2=($1|0)==-1;
 if($2){label=4;break;}else{label=2;break;}
 case 2: 
 var $4=_find_charmap($from);
 var $5=($4|0)==-1;
 if($5){label=4;break;}else{label=3;break;}
 case 3: 
 var $7=((104920+$1)|0);
 var $8=HEAP8[($7)];
 var $9=($8&255)>207;
 if($9){label=4;break;}else{label=5;break;}
 case 4: 
 var $11=___errno_location();
 HEAP32[(($11)>>2)]=22;
 var $_0=-1;label=6;break;
 case 5: 
 var $13=$4<<16;
 var $14=$13|$1;
 var $15=$14;
 var $_0=$15;label=6;break;
 case 6: 
 var $_0;
 return $_0;
  default: assert(0, "bad label: " + label);
 }

}


function _find_charmap($name){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=HEAP8[($name)];
 var $2=(($1<<24)>>24)==0;
 if($2){var $s_06_us=104920;label=2;break;}else{var $s_06=104920;label=8;break;}
 case 2: 
 var $s_06_us;
 var $3=HEAP8[($s_06_us)];
 var $4=(($3<<24)>>24)==0;
 if($4){var $s_1_lcssa=$s_06_us;label=18;break;}else{label=3;break;}
 case 3: 
 var $5=_strlen($s_06_us);
 var $6=((($5)+(1))|0);
 var $7=(($s_06_us+$6)|0);
 var $8=HEAP8[($7)];
 var $9=(($8<<24)>>24)==0;
 if($9){label=4;break;}else{var $s_0_be_us=$7;label=7;break;}
 case 4: 
 var $_sum_us=((($5)+(2))|0);
 var $11=(($s_06_us+$_sum_us)|0);
 var $12=HEAP8[($11)];
 var $13=($12&255)>128;
 if($13){label=6;break;}else{label=5;break;}
 case 5: 
 var $15=($12&255);
 var $16=(((128)-($15))|0);
 var $17=$16>>>2;
 var $18=((($17)*(5))&-1);
 var $19=((($5)+(3))|0);
 var $_sum1_us=((($19)+($18))|0);
 var $20=(($s_06_us+$_sum1_us)|0);
 var $s_0_be_us=$20;label=7;break;
 case 6: 
 var $_sum2_us=((($5)+(3))|0);
 var $22=(($s_06_us+$_sum2_us)|0);
 var $s_0_be_us=$22;label=7;break;
 case 7: 
 var $s_0_be_us;
 var $23=HEAP8[($s_0_be_us)];
 var $24=(($23<<24)>>24)==0;
 if($24){var $_0=-1;label=24;break;}else{var $s_06_us=$s_0_be_us;label=2;break;}
 case 8: 
 var $s_06;
 var $_019_i=$name;var $_010_i=$s_06;var $25=$1;label=9;break;
 case 9: 
 var $25;
 var $_010_i;
 var $_019_i;
 var $26=HEAP8[($_010_i)];
 var $27=(($26<<24)>>24)==0;
 if($27){var $_0_lcssa_i_ph=$_010_i;var $_ph4=$25;label=15;break;}else{label=10;break;}
 case 10: 
 var $28=(($25<<24)>>24)==0;
 if($28){var $_1_lcssa_i=$_019_i;var $39=0;label=13;break;}else{var $_16_i=$_019_i;var $_in_i=$25;label=12;break;}
 case 11: 
 var $30=HEAP8[($38)];
 var $31=(($30<<24)>>24)==0;
 if($31){var $_1_lcssa_i=$38;var $39=0;label=13;break;}else{var $_16_i=$38;var $_in_i=$30;label=12;break;}
 case 12: 
 var $_in_i;
 var $_16_i;
 var $32=($_in_i&255);
 var $33=$32|32;
 var $34=((($33)-(97))|0);
 var $35=($34>>>0)>26;
 var $36=((($32)-(48))|0);
 var $37=($36>>>0)>10;
 var $or_cond_i=$35&$37;
 var $38=(($_16_i+1)|0);
 if($or_cond_i){label=11;break;}else{var $_1_lcssa_i=$_16_i;var $39=$_in_i;label=13;break;}
 case 13: 
 var $39;
 var $_1_lcssa_i;
 var $40=($39&255);
 var $41=$40|32;
 var $42=($26&255);
 var $43=($41|0)==($42|0);
 if($43){label=14;break;}else{label=19;break;}
 case 14: 
 var $45=(($_1_lcssa_i+1)|0);
 var $46=(($_010_i+1)|0);
 var $47=HEAP8[($45)];
 var $48=(($47<<24)>>24)==0;
 if($48){var $_0_lcssa_i_ph=$46;var $_ph4=0;label=15;break;}else{var $_019_i=$45;var $_010_i=$46;var $25=$47;label=9;break;}
 case 15: 
 var $_ph4;
 var $_0_lcssa_i_ph;
 var $49=HEAP8[($_0_lcssa_i_ph)];
 var $50=(($_ph4<<24)>>24)==(($49<<24)>>24);
 if($50){label=16;break;}else{label=19;break;}
 case 16: 
 var $_pre=HEAP8[($s_06)];
 var $phitmp=(($_pre<<24)>>24)==0;
 if($phitmp){var $s_1_lcssa=$s_06;label=18;break;}else{var $s_13=$s_06;label=17;break;}
 case 17: 
 var $s_13;
 var $51=_strlen($s_13);
 var $52=((($51)+(1))|0);
 var $53=(($s_13+$52)|0);
 var $54=HEAP8[($53)];
 var $55=(($54<<24)>>24)==0;
 if($55){var $s_1_lcssa=$53;label=18;break;}else{var $s_13=$53;label=17;break;}
 case 18: 
 var $s_1_lcssa;
 var $56=(($s_1_lcssa+1)|0);
 var $57=$56;
 var $58=((($57)-(104920))|0);
 var $_0=$58;label=24;break;
 case 19: 
 var $59=_strlen($s_06);
 var $60=((($59)+(1))|0);
 var $61=(($s_06+$60)|0);
 var $62=HEAP8[($61)];
 var $63=(($62<<24)>>24)==0;
 if($63){label=20;break;}else{var $s_0_be=$61;label=22;break;}
 case 20: 
 var $_sum=((($59)+(2))|0);
 var $65=(($s_06+$_sum)|0);
 var $66=HEAP8[($65)];
 var $67=($66&255)>128;
 if($67){label=21;break;}else{label=23;break;}
 case 21: 
 var $_sum2=((($59)+(3))|0);
 var $69=(($s_06+$_sum2)|0);
 var $s_0_be=$69;label=22;break;
 case 22: 
 var $s_0_be;
 var $70=HEAP8[($s_0_be)];
 var $71=(($70<<24)>>24)==0;
 if($71){var $_0=-1;label=24;break;}else{var $s_06=$s_0_be;label=8;break;}
 case 23: 
 var $73=($66&255);
 var $74=(((128)-($73))|0);
 var $75=$74>>>2;
 var $76=((($75)*(5))&-1);
 var $77=((($59)+(3))|0);
 var $_sum1=((($77)+($76))|0);
 var $78=(($s_06+$_sum1)|0);
 var $s_0_be=$78;label=22;break;
 case 24: 
 var $_0;
 return $_0;
  default: assert(0, "bad label: " + label);
 }

}


function _iconv_close($cd){
 var label=0;


 return 0;
}


function _iconv($cd0,$in,$inb,$out,$outb){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $st=sp;
 var $tmpcast=$st;
 var $wc=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $1=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $2=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $tmp=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $3=$cd0;
 var $4=$3&65535;
 var $5=$3>>>16;
 var $_sum=((($5)+(1))|0);
 var $_sum6=((($4)+(1))|0);
 var $$etemp$0$0=0;
 var $$etemp$0$1=0;
 var $st$1$0=(($st)|0);
 HEAP32[(($st$1$0)>>2)]=$$etemp$0$0;
 var $st$2$1=(($st+4)|0);
 HEAP32[(($st$2$1)>>2)]=$$etemp$0$1;
 var $6=((104920+$5)|0);
 var $7=HEAP8[($6)];
 var $8=((104920+$4)|0);
 var $9=HEAP8[($8)];
 var $10=($in|0)==0;
 if($10){var $_0=0;label=117;break;}else{label=2;break;}
 case 2: 
 var $12=HEAP32[(($in)>>2)];
 var $13=($12|0)==0;
 if($13){var $_0=0;label=117;break;}else{label=3;break;}
 case 3: 
 var $15=HEAP32[(($inb)>>2)];
 var $16=($15|0)==0;
 if($16){var $_0=0;label=117;break;}else{label=4;break;}
 case 4: 
 var $17=($7&255);
 var $18=((($17)+(128))|0);
 var $19=((($5)+(2))|0);
 var $20=$17&3;
 var $21=$20^1;
 var $22=$20^2;
 var $23=$20^3;
 var $24=$17&1;
 var $25=$24^1;
 var $26=((($17)-(196))|0);
 var $27=($26>>>0)<2;
 var $_sum3132=$24|2;
 var $_sum3334=$25|2;
 var $28=(($7<<24)>>24)==-38;
 var $29=(($7<<24)>>24)==-40;
 var $30=($9&255);
 var $31=((($30)-(192))|0);
 var $32=($31>>>0)>8;
 var $33=$4;
 var $34=((138776+$31)|0);
 var $35=((($30)+(128))|0);
 var $36=(((128)-($30))|0);
 var $37=(($9<<24)>>24)==-128;
 var $38=((($4)+(2))|0);
 var $39=(($tmp)|0);
 var $40=$30&1;
 var $41=$40^1;
 var $_sum2627=$40|2;
 var $_sum2829=$41|2;
 var $42=$30&3;
 var $43=$42^1;
 var $44=$42^2;
 var $45=$42^3;
 var $46=((($17)-(192))|0);
 var $47=($46>>>0)<7;
 var $x_060=0;var $50=$12;var $49=$15;label=5;break;
 case 5: 
 var $49;
 var $50;
 var $x_060;
 var $51=HEAP8[($50)];
 var $52=($51&255);
 var $53=(($51<<24)>>24)<0;
 var $brmerge=$53|$47;
 if($brmerge){label=6;break;}else{var $l_2=1;var $c_8=$52;label=90;break;}
 case 6: 
 switch(($17|0)){case 198:{ label=10;break;}case 199:{ var $err_0_ph=84;label=115;break;}case 192:case 195:{ label=12;break;}case 196:case 197:case 194:case 193:{ label=15;break;}case 209:{ label=22;break;}case 208:{ label=33;break;}case 218:{ label=39;break;}case 217:case 216:{ label=40;break;}case 224:{ label=55;break;}case 232:{ label=69;break;}case 200:{ label=7;break;}default:{label=88;break;}}break;
 case 7: 
 var $56=_mbrtowc($wc,$50,$49,$tmpcast);
 if(($56|0)==-1){ var $err_0_ph=84;label=115;break;}else if(($56|0)==-2){ var $err_0=22;label=116;break;}else if(($56|0)==0){ label=8;break;}else{var $l_0=$56;label=9;break;}
 case 8: 
 var $l_0=1;label=9;break;
 case 9: 
 var $l_0;
 var $59=HEAP32[(($wc)>>2)];
 var $l_2=$l_0;var $c_8=$59;label=90;break;
 case 10: 
 var $61=($49>>>0)<4;
 if($61){var $err_0=22;label=116;break;}else{label=11;break;}
 case 11: 
 var $63=$50;
 var $64=HEAP32[(($63)>>2)];
 var $c_0=$64;label=14;break;
 case 12: 
 var $66=($49>>>0)<4;
 if($66){var $err_0=22;label=116;break;}else{label=13;break;}
 case 13: 
 var $68=(($50+$20)|0);
 var $69=HEAP8[($68)];
 var $70=($69&255);
 var $71=$70<<24;
 var $72=(($50+$21)|0);
 var $73=HEAP8[($72)];
 var $74=($73&255);
 var $75=$74<<16;
 var $76=$75|$71;
 var $77=(($50+$22)|0);
 var $78=HEAP8[($77)];
 var $79=($78&255);
 var $80=$79<<8;
 var $81=$76|$80;
 var $82=(($50+$23)|0);
 var $83=HEAP8[($82)];
 var $84=($83&255);
 var $85=$81|$84;
 var $c_0=$85;label=14;break;
 case 14: 
 var $c_0;
 var $87=((($c_0)-(55296))|0);
 var $88=($87>>>0)<2048;
 var $89=($c_0>>>0)>1114111;
 var $or_cond=$88|$89;
 if($or_cond){var $err_0_ph=84;label=115;break;}else{var $l_2=4;var $c_8=$c_0;label=90;break;}
 case 15: 
 var $91=($49>>>0)<2;
 if($91){var $err_0=22;label=116;break;}else{label=16;break;}
 case 16: 
 var $93=(($50+$24)|0);
 var $94=HEAP8[($93)];
 var $95=($94&255);
 var $96=$95<<8;
 var $97=(($50+$25)|0);
 var $98=HEAP8[($97)];
 var $99=($98&255);
 var $100=$96|$99;
 var $101=((($100)-(56320))|0);
 var $102=($101>>>0)<1024;
 if($102){var $err_0_ph=84;label=115;break;}else{label=17;break;}
 case 17: 
 var $104=((($100)-(55296))|0);
 var $105=($104>>>0)<1024;
 if($105){label=18;break;}else{var $l_2=2;var $c_8=$100;label=90;break;}
 case 18: 
 if($27){var $err_0_ph=84;label=115;break;}else{label=19;break;}
 case 19: 
 var $108=($49>>>0)<4;
 if($108){var $err_0=22;label=116;break;}else{label=20;break;}
 case 20: 
 var $110=(($50+$_sum3132)|0);
 var $111=HEAP8[($110)];
 var $112=($111&255);
 var $113=$112<<8;
 var $114=(($50+$_sum3334)|0);
 var $115=HEAP8[($114)];
 var $116=($115&255);
 var $117=$113|$116;
 var $118=((($117)-(56320))|0);
 var $119=($118>>>0)>1023;
 if($119){var $err_0_ph=84;label=115;break;}else{label=21;break;}
 case 21: 
 var $121=$100<<10;
 var $122=((($121)-(56557568))|0);
 var $123=((($122)+($118))|0);
 var $l_2=4;var $c_8=$123;label=90;break;
 case 22: 
 var $125=((($52)-(161))|0);
 var $126=($125>>>0)<63;
 if($126){label=23;break;}else{label=24;break;}
 case 23: 
 var $128=((($52)+(65216))|0);
 var $l_2=1;var $c_8=$128;label=90;break;
 case 24: 
 var $130=($49>>>0)<2;
 if($130){var $err_0=22;label=116;break;}else{label=25;break;}
 case 25: 
 var $132=(($50+1)|0);
 var $133=HEAP8[($132)];
 var $134=($133&255);
 var $135=((($52)-(129))|0);
 var $136=($135>>>0)<31;
 if($136){var $c_1=$135;label=28;break;}else{label=26;break;}
 case 26: 
 var $138=((($52)-(224))|0);
 var $139=($138>>>0)<16;
 if($139){label=27;break;}else{var $err_0_ph=84;label=115;break;}
 case 27: 
 var $141=((($52)-(193))|0);
 var $c_1=$141;label=28;break;
 case 28: 
 var $c_1;
 var $143=$c_1<<1;
 var $144=((($134)-(64))|0);
 var $145=($144>>>0)<95;
 if($145){label=29;break;}else{label=31;break;}
 case 29: 
 var $147=(($133<<24)>>24)==127;
 if($147){var $err_0_ph=84;label=115;break;}else{label=30;break;}
 case 30: 
 var $_lobit=(($133<<24)>>24)>>7;
 var $149=(($_lobit<<24)>>24);
 var $150=((($144)+($149))|0);
 var $d_1=$150;var $c_2=$143;label=32;break;
 case 31: 
 var $152=((($134)-(159))|0);
 var $153=($152>>>0)<94;
 var $154=($153&1);
 var $_15=$143|$154;
 var $_16=($153?$152:$134);
 var $d_1=$_16;var $c_2=$_15;label=32;break;
 case 32: 
 var $c_2;
 var $d_1;
 var $156=((30584+((($c_2)*(188))&-1)+($d_1<<1))|0);
 var $157=HEAP16[(($156)>>1)];
 var $158=($157&65535);
 var $159=(($157<<16)>>16)==0;
 if($159){var $err_0_ph=84;label=115;break;}else{var $l_2=2;var $c_8=$158;label=90;break;}
 case 33: 
 var $161=($49>>>0)<2;
 if($161){var $err_0=22;label=116;break;}else{label=34;break;}
 case 34: 
 var $163=(($50+1)|0);
 var $164=HEAP8[($163)];
 var $165=($164&255);
 var $166=(($51<<24)>>24)==-114;
 if($166){label=35;break;}else{label=37;break;}
 case 35: 
 var $168=((($165)-(161))|0);
 var $169=($168>>>0)>62;
 if($169){var $err_0_ph=84;label=115;break;}else{label=36;break;}
 case 36: 
 var $171=((($165)+(65216))|0);
 var $l_2=2;var $c_8=$171;label=90;break;
 case 37: 
 var $173=((($52)-(161))|0);
 var $174=((($165)-(161))|0);
 var $175=($173>>>0)>83;
 var $176=($174>>>0)>93;
 var $or_cond17=$175|$176;
 if($or_cond17){var $err_0_ph=84;label=115;break;}else{label=38;break;}
 case 38: 
 var $178=((30584+((($173)*(188))&-1)+($174<<1))|0);
 var $179=HEAP16[(($178)>>1)];
 var $180=($179&65535);
 var $181=(($179<<16)>>16)==0;
 if($181){var $err_0_ph=84;label=115;break;}else{var $l_2=2;var $c_8=$180;label=90;break;}
 case 39: 
 var $183=($51&255)<161;
 if($183){var $err_0_ph=84;label=115;break;}else{label=40;break;}
 case 40: 
 var $185=((($52)-(129))|0);
 var $186=($185>>>0)>125;
 if($186){var $err_0_ph=84;label=115;break;}else{label=41;break;}
 case 41: 
 var $188=($49>>>0)<2;
 if($188){var $err_0=22;label=116;break;}else{label=42;break;}
 case 42: 
 var $190=(($50+1)|0);
 var $191=HEAP8[($190)];
 var $192=($191&255);
 var $193=($191&255)<161;
 var $or_cond18=$193&$28;
 if($or_cond18){var $err_0_ph=84;label=115;break;}else{label=43;break;}
 case 43: 
 var $195=((($192)-(64))|0);
 var $196=($195>>>0)>190;
 var $197=(($191<<24)>>24)==127;
 var $or_cond3=$196|$197;
 if($or_cond3){label=44;break;}else{label=54;break;}
 case 44: 
 var $199=((($192)-(48))|0);
 var $200=($199>>>0)<10;
 var $or_cond19=$200&$29;
 if($or_cond19){label=45;break;}else{var $err_0_ph=84;label=115;break;}
 case 45: 
 var $202=($49>>>0)<4;
 if($202){var $err_0=22;label=116;break;}else{label=46;break;}
 case 46: 
 var $204=(($50+2)|0);
 var $205=HEAP8[($204)];
 var $206=($205&255);
 var $207=((($206)-(129))|0);
 var $208=($207>>>0)>126;
 if($208){var $err_0_ph=84;label=115;break;}else{label=47;break;}
 case 47: 
 var $210=(($50+3)|0);
 var $211=HEAP8[($210)];
 var $212=($211&255);
 var $213=((($212)-(48))|0);
 var $214=($213>>>0)>9;
 if($214){var $err_0_ph=84;label=115;break;}else{label=48;break;}
 case 48: 
 var $216=((($185)*(10))&-1);
 var $217=((($192)+($216))|0);
 var $218=((($217)*(1260))&-1);
 var $219=((($207)*(10))&-1);
 var $220=((($218)-(60352))|0);
 var $221=((($220)+($219))|0);
 var $222=((($221)+($213))|0);
 var $c_349=$222;var $d_250=0;label=49;break;
 case 49: 
 var $d_250;
 var $c_349;
 var $223=((($c_349)-($d_250))|0);
 var $k_046=0;var $i_047=0;label=50;break;
 case 50: 
 var $i_047;
 var $k_046;
 var $k_143=$k_046;var $j_044=0;label=51;break;
 case 51: 
 var $j_044;
 var $k_143;
 var $225=((56808+((($i_047)*(380))&-1)+($j_044<<1))|0);
 var $226=HEAP16[(($225)>>1)];
 var $227=($226&65535);
 var $228=((($227)-($d_250))|0);
 var $not_30=($228>>>0)<=($223>>>0);
 var $229=($not_30&1);
 var $k_1_=((($229)+($k_143))|0);
 var $230=((($j_044)+(1))|0);
 var $231=($230|0)<190;
 if($231){var $k_143=$k_1_;var $j_044=$230;label=51;break;}else{label=52;break;}
 case 52: 
 var $233=((($i_047)+(1))|0);
 var $234=($233|0)<126;
 if($234){var $k_046=$k_1_;var $i_047=$233;label=50;break;}else{label=53;break;}
 case 53: 
 var $236=((($c_349)+(1))|0);
 var $237=((($k_1_)+($c_349))|0);
 var $238=($236>>>0)>($237>>>0);
 if($238){var $l_2=4;var $c_8=$237;label=90;break;}else{var $c_349=$237;var $d_250=$236;label=49;break;}
 case 54: 
 var $240=($195>>>0)>63;
 var $241=((($192)-(65))|0);
 var $_20=($240?$241:$195);
 var $242=((56808+((($185)*(380))&-1)+($_20<<1))|0);
 var $243=HEAP16[(($242)>>1)];
 var $244=($243&65535);
 var $l_2=2;var $c_8=$244;label=90;break;
 case 55: 
 var $246=($49>>>0)<2;
 if($246){var $err_0=22;label=116;break;}else{label=56;break;}
 case 56: 
 var $248=(($50+1)|0);
 var $249=HEAP8[($248)];
 var $250=($249&255);
 var $251=((($250)-(64))|0);
 var $252=($251>>>0)>190;
 var $253=((($250)-(127))|0);
 var $254=($253>>>0)<34;
 var $or_cond22=$252|$254;
 if($or_cond22){var $err_0_ph=84;label=115;break;}else{label=57;break;}
 case 57: 
 var $256=($251>>>0)>62;
 var $257=((($250)-(98))|0);
 var $_23=($256?$257:$251);
 var $258=((($52)-(161))|0);
 var $259=($258>>>0)>88;
 if($259){label=58;break;}else{label=65;break;}
 case 58: 
 var $261=((($52)-(135))|0);
 var $262=($261>>>0)>119;
 if($262){var $err_0_ph=84;label=115;break;}else{label=59;break;}
 case 59: 
 var $264=($51&255)<161;
 var $265=((($52)-(224))|0);
 var $c_4=($264?$261:$265);
 var $266=((($c_4)*(157))&-1);
 var $267=((($_23)+($266))|0);
 var $268=$267>>>4;
 var $269=((($268)+(4867))|0);
 var $270=((46464+($269<<1))|0);
 var $271=HEAP16[(($270)>>1)];
 var $272=($271&65535);
 var $273=$267&15;
 var $274=$272>>>($273>>>0);
 var $275=(((($274|0))%(2))&-1);
 var $276=$275<<17;
 var $277=((46464+($267<<1))|0);
 var $278=HEAP16[(($277)>>1)];
 var $279=($278&65535);
 var $280=$279|$276;
 var $_mask=$280&-65792;
 var $281=($_mask|0)==56320;
 if($281){label=60;break;}else{label=64;break;}
 case 60: 
 if($32){var $k_3=2;label=62;break;}else{label=61;break;}
 case 61: 
 var $284=HEAP8[($34)];
 var $285=(($284<<24)>>24);
 var $k_3=$285;label=62;break;
 case 62: 
 var $k_3;
 var $286=HEAP32[(($outb)>>2)];
 var $287=($k_3>>>0)>($286>>>0);
 if($287){var $err_0_ph=7;label=115;break;}else{label=63;break;}
 case 63: 
 var $289=$279&255;
 var $290=((139392+$289)|0);
 HEAP32[(($1)>>2)]=$290;
 HEAP32[(($2)>>2)]=4;
 var $291=_iconv($33,$1,$2,$out,$outb);
 var $292=((($291)+($x_060))|0);
 var $x_3=$292;var $l_3=2;label=114;break;
 case 64: 
 var $294=($280|0)==0;
 if($294){var $err_0_ph=84;label=115;break;}else{var $l_2=2;var $c_8=$280;label=90;break;}
 case 65: 
 var $296=((109200+((($258)*(314))&-1)+($_23<<1))|0);
 var $297=HEAP16[(($296)>>1)];
 var $298=($297&65535);
 var $299=($258|0)==39;
 if($299){label=66;break;}else{var $304=0;label=68;break;}
 case 66: 
 if(($_23|0)==60|($_23|0)==58){ var $304=131072;label=68;break;}else{label=67;break;}
 case 67: 
 var $302=($_23|0)==66;
 var $phitmp=($302&1);
 var $phitmp12=$phitmp<<17;
 var $304=$phitmp12;label=68;break;
 case 68: 
 var $304;
 var $305=$304|$298;
 var $306=($305|0)==0;
 if($306){var $err_0_ph=84;label=115;break;}else{var $l_2=2;var $c_8=$305;label=90;break;}
 case 69: 
 var $308=($49>>>0)<2;
 if($308){var $err_0=22;label=116;break;}else{label=70;break;}
 case 70: 
 var $310=(($50+1)|0);
 var $311=HEAP8[($310)];
 var $312=($311&255);
 var $313=((($52)-(161))|0);
 var $314=((($312)-(161))|0);
 var $315=($313>>>0)>92;
 var $316=($314>>>0)>93;
 var $or_cond24=$315|$316;
 if($or_cond24){label=71;break;}else{label=87;break;}
 case 71: 
 var $318=((($52)-(129))|0);
 var $319=($318>>>0)>92;
 if($319){var $err_0_ph=84;label=115;break;}else{label=72;break;}
 case 72: 
 var $321=($318>>>0)>68;
 var $322=($311&255)>82;
 var $or_cond25=$321&$322;
 if($or_cond25){var $err_0_ph=84;label=115;break;}else{label=73;break;}
 case 73: 
 var $324=((($312)-(65))|0);
 var $325=($324>>>0)<26;
 if($325){var $d_5=$324;label=78;break;}else{label=74;break;}
 case 74: 
 var $327=((($312)-(97))|0);
 var $328=($327>>>0)<26;
 if($328){label=75;break;}else{label=76;break;}
 case 75: 
 var $330=((($312)-(71))|0);
 var $d_5=$330;label=78;break;
 case 76: 
 var $332=((($312)-(129))|0);
 var $333=($332>>>0)<126;
 if($333){label=77;break;}else{var $err_0_ph=84;label=115;break;}
 case 77: 
 var $335=((($312)-(77))|0);
 var $d_5=$335;label=78;break;
 case 78: 
 var $d_5;
 var $337=($318>>>0)<32;
 if($337){label=79;break;}else{label=80;break;}
 case 79: 
 var $339=((($318)*(178))&-1);
 var $_pn=$339;label=81;break;
 case 80: 
 var $341=((($313)*(84))&-1);
 var $342=((($341)+(5696))|0);
 var $_pn=$342;label=81;break;
 case 81: 
 var $_pn;
 var $c_5=((($d_5)+(44032))|0);
 var $344=((($c_5)+($_pn))|0);
 var $345=($344>>>0)<44032;
 if($345){var $l_2=2;var $c_8=$344;label=90;break;}else{var $c_640=$344;var $d_641=44032;label=82;break;}
 case 82: 
 var $d_641;
 var $c_640;
 var $346=((($c_640)-($d_641))|0);
 var $k_438=0;var $i1_039=0;label=83;break;
 case 83: 
 var $i1_039;
 var $k_438;
 var $k_535=$k_438;var $j2_036=0;label=84;break;
 case 84: 
 var $j2_036;
 var $k_535;
 var $348=((13096+((($i1_039)*(188))&-1)+($j2_036<<1))|0);
 var $349=HEAP16[(($348)>>1)];
 var $350=($349&65535);
 var $351=((($350)-($d_641))|0);
 var $not_=($351>>>0)<=($346>>>0);
 var $352=($not_&1);
 var $k_5_=((($352)+($k_535))|0);
 var $353=((($j2_036)+(1))|0);
 var $354=($353|0)<94;
 if($354){var $k_535=$k_5_;var $j2_036=$353;label=84;break;}else{label=85;break;}
 case 85: 
 var $356=((($i1_039)+(1))|0);
 var $357=($356|0)<93;
 if($357){var $k_438=$k_5_;var $i1_039=$356;label=83;break;}else{label=86;break;}
 case 86: 
 var $359=((($c_640)+(1))|0);
 var $360=((($k_5_)+($c_640))|0);
 var $361=($359>>>0)>($360>>>0);
 if($361){var $l_2=2;var $c_8=$360;label=90;break;}else{var $c_640=$360;var $d_641=$359;label=82;break;}
 case 87: 
 var $363=((13096+((($313)*(188))&-1)+($314<<1))|0);
 var $364=HEAP16[(($363)>>1)];
 var $365=($364&65535);
 var $366=(($364<<16)>>16)==0;
 if($366){var $err_0_ph=84;label=115;break;}else{var $l_2=2;var $c_8=$365;label=90;break;}
 case 88: 
 var $368=($52>>>0)<($18>>>0);
 if($368){var $l_2=1;var $c_8=$52;label=90;break;}else{label=89;break;}
 case 89: 
 var $370=((($52)-($18))|0);
 var $371=((($370)*(5))&-1);
 var $372=$371>>>2;
 var $_sum13=((($372)+($_sum))|0);
 var $373=((104920+$_sum13)|0);
 var $374=HEAP8[($373)];
 var $375=($374&255);
 var $376=$370<<1;
 var $377=$376&6;
 var $378=$375>>>($377>>>0);
 var $_sum14=((($19)+($372))|0);
 var $379=((104920+$_sum14)|0);
 var $380=HEAP8[($379)];
 var $381=($380&255);
 var $382=(((8)-($377))|0);
 var $383=$381<<$382;
 var $384=$383&1023;
 var $385=$384|$378;
 var $386=((11848+($385<<1))|0);
 var $387=HEAP16[(($386)>>1)];
 var $388=($387&65535);
 var $389=($385|0)==0;
 var $_=($389?$52:$388);
 var $390=($_|0)==1;
 if($390){var $err_0_ph=84;label=115;break;}else{var $l_2=1;var $c_8=$_;label=90;break;}
 case 90: 
 var $c_8;
 var $l_2;
 switch(($30|0)){case 196:case 197:case 194:case 193:{ label=107;break;}case 192:case 195:{ label=112;break;}case 198:{ label=91;break;}case 200:{ label=93;break;}case 199:{ label=98;break;}default:{var $x_2=$x_060;var $c_9=$c_8;label=100;break;}}break;
 case 91: 
 var $392=HEAP32[(($outb)>>2)];
 var $393=($392>>>0)<4;
 if($393){var $err_0_ph=7;label=115;break;}else{label=92;break;}
 case 92: 
 var $395=HEAP32[(($out)>>2)];
 var $396=$395;
 HEAP32[(($396)>>2)]=$c_8;
 var $397=(($395+4)|0);
 HEAP32[(($out)>>2)]=$397;
 var $398=HEAP32[(($outb)>>2)];
 var $399=((($398)-(4))|0);
 HEAP32[(($outb)>>2)]=$399;
 var $x_3=$x_060;var $l_3=$l_2;label=114;break;
 case 93: 
 var $401=HEAP32[(($outb)>>2)];
 var $402=($401>>>0)<4;
 if($402){label=94;break;}else{label=96;break;}
 case 94: 
 var $404=_wctomb($39,$c_8);
 var $405=HEAP32[(($outb)>>2)];
 var $406=($405>>>0)<($404>>>0);
 if($406){var $err_0_ph=7;label=115;break;}else{label=95;break;}
 case 95: 
 var $408=HEAP32[(($out)>>2)];
 assert($404 % 1 === 0);(_memcpy($408, $39, $404)|0);
 var $k_7=$404;var $413=$408;label=97;break;
 case 96: 
 var $410=HEAP32[(($out)>>2)];
 var $411=_wctomb($410,$c_8);
 var $k_7=$411;var $413=$410;label=97;break;
 case 97: 
 var $413;
 var $k_7;
 var $414=(($413+$k_7)|0);
 HEAP32[(($out)>>2)]=$414;
 var $415=HEAP32[(($outb)>>2)];
 var $416=((($415)-($k_7))|0);
 HEAP32[(($outb)>>2)]=$416;
 var $x_3=$x_060;var $l_3=$l_2;label=114;break;
 case 98: 
 var $418=($c_8>>>0)>127;
 if($418){var $x_1=$x_060;label=99;break;}else{var $x_2=$x_060;var $c_9=$c_8;label=100;break;}
 case 99: 
 var $x_1;
 var $419=((($x_1)+(1))|0);
 var $x_2=$419;var $c_9=42;label=100;break;
 case 100: 
 var $c_9;
 var $x_2;
 var $420=HEAP32[(($outb)>>2)];
 var $421=($420|0)==0;
 if($421){var $err_0_ph=7;label=115;break;}else{label=101;break;}
 case 101: 
 var $423=($c_9>>>0)<($35>>>0);
 var $extract_t74=(($c_9)&255);
 if($423){var $c_9_sink_off0=$extract_t74;label=103;break;}else{label=102;break;}
 case 102: 
 if($37){var $x_1=$x_2;label=99;break;}else{var $c_1154=0;label=105;break;}
 case 103: 
 var $c_9_sink_off0;
 var $424=HEAP32[(($out)>>2)];
 var $425=(($424+1)|0);
 HEAP32[(($out)>>2)]=$425;
 HEAP8[($424)]=$c_9_sink_off0;
 var $426=HEAP32[(($outb)>>2)];
 var $427=((($426)-(1))|0);
 HEAP32[(($outb)>>2)]=$427;
 var $x_3=$x_2;var $l_3=$l_2;label=114;break;
 case 104: 
 var $429=($449>>>0)<($36>>>0);
 if($429){var $c_1154=$449;label=105;break;}else{var $x_1=$x_2;label=99;break;}
 case 105: 
 var $c_1154;
 var $430=((($c_1154)*(5))&-1);
 var $431=$430>>>2;
 var $_sum9=((($431)+($_sum6))|0);
 var $432=((104920+$_sum9)|0);
 var $433=HEAP8[($432)];
 var $434=($433&255);
 var $435=$c_1154<<1;
 var $436=$435&6;
 var $437=$434>>>($436>>>0);
 var $_sum10=((($38)+($431))|0);
 var $438=((104920+$_sum10)|0);
 var $439=HEAP8[($438)];
 var $440=($439&255);
 var $441=(((8)-($436))|0);
 var $442=$440<<$441;
 var $443=$442&1023;
 var $444=$443|$437;
 var $445=((11848+($444<<1))|0);
 var $446=HEAP16[(($445)>>1)];
 var $447=($446&65535);
 var $448=($c_9|0)==($447|0);
 var $449=((($c_1154)+(1))|0);
 if($448){label=106;break;}else{label=104;break;}
 case 106: 
 var $451=((($c_1154)+(128))|0);
 var $extract_t73=(($451)&255);
 var $c_9_sink_off0=$extract_t73;label=103;break;
 case 107: 
 var $453=($c_8>>>0)<65536;
 var $brmerge72=$453|$27;
 if($brmerge72){label=108;break;}else{label=110;break;}
 case 108: 
 var $454=($c_8>>>0)>65535;
 var $_c_8=($454?65533:$c_8);
 var $455=HEAP32[(($outb)>>2)];
 var $456=($455>>>0)<2;
 if($456){var $err_0_ph=7;label=115;break;}else{label=109;break;}
 case 109: 
 var $458=HEAP32[(($out)>>2)];
 var $459=$_c_8>>>8;
 var $460=(($459)&255);
 var $461=(($458+$40)|0);
 HEAP8[($461)]=$460;
 var $462=(($_c_8)&255);
 var $463=(($458+$41)|0);
 HEAP8[($463)]=$462;
 var $464=(($458+2)|0);
 HEAP32[(($out)>>2)]=$464;
 var $465=HEAP32[(($outb)>>2)];
 var $466=((($465)-(2))|0);
 HEAP32[(($outb)>>2)]=$466;
 var $x_3=$x_060;var $l_3=$l_2;label=114;break;
 case 110: 
 var $468=HEAP32[(($outb)>>2)];
 var $469=($468>>>0)<4;
 if($469){var $err_0_ph=7;label=115;break;}else{label=111;break;}
 case 111: 
 var $471=((($c_8)-(65536))|0);
 var $472=HEAP32[(($out)>>2)];
 var $473=$471>>>10;
 var $474=$471>>>18;
 var $475=$474|216;
 var $476=(($475)&255);
 var $477=(($472+$40)|0);
 HEAP8[($477)]=$476;
 var $478=(($473)&255);
 var $479=(($472+$41)|0);
 HEAP8[($479)]=$478;
 var $480=$471>>>8;
 var $481=$480&3;
 var $482=$481|220;
 var $483=(($482)&255);
 var $484=(($472+$_sum2627)|0);
 HEAP8[($484)]=$483;
 var $485=(($471)&255);
 var $486=(($472+$_sum2829)|0);
 HEAP8[($486)]=$485;
 var $487=(($472+4)|0);
 HEAP32[(($out)>>2)]=$487;
 var $488=HEAP32[(($outb)>>2)];
 var $489=((($488)-(4))|0);
 HEAP32[(($outb)>>2)]=$489;
 var $x_3=$x_060;var $l_3=$l_2;label=114;break;
 case 112: 
 var $490=HEAP32[(($outb)>>2)];
 var $491=($490>>>0)<4;
 if($491){var $err_0_ph=7;label=115;break;}else{label=113;break;}
 case 113: 
 var $493=HEAP32[(($out)>>2)];
 var $494=$c_8>>>24;
 var $495=(($494)&255);
 var $496=(($493+$42)|0);
 HEAP8[($496)]=$495;
 var $497=$c_8>>>16;
 var $498=(($497)&255);
 var $499=(($493+$43)|0);
 HEAP8[($499)]=$498;
 var $500=$c_8>>>8;
 var $501=(($500)&255);
 var $502=(($493+$44)|0);
 HEAP8[($502)]=$501;
 var $503=(($c_8)&255);
 var $504=(($493+$45)|0);
 HEAP8[($504)]=$503;
 var $505=(($493+4)|0);
 HEAP32[(($out)>>2)]=$505;
 var $506=HEAP32[(($outb)>>2)];
 var $507=((($506)-(4))|0);
 HEAP32[(($outb)>>2)]=$507;
 var $x_3=$x_060;var $l_3=$l_2;label=114;break;
 case 114: 
 var $l_3;
 var $x_3;
 var $509=HEAP32[(($in)>>2)];
 var $510=(($509+$l_3)|0);
 HEAP32[(($in)>>2)]=$510;
 var $511=((($49)-($l_3))|0);
 HEAP32[(($inb)>>2)]=$511;
 var $512=($49|0)==($l_3|0);
 if($512){var $_0=$x_3;label=117;break;}else{var $x_060=$x_3;var $50=$510;var $49=$511;label=5;break;}
 case 115: 
 var $err_0_ph;
 var $err_0=$err_0_ph;label=116;break;
 case 116: 
 var $err_0;
 var $514=___errno_location();
 HEAP32[(($514)>>2)]=$err_0;
 var $_0=-1;label=117;break;
 case 117: 
 var $_0;
 STACKTOP=sp;return $_0;
  default: assert(0, "bad label: " + label);
 }

}


function _iswalnum_l($c,$l){
 var label=0;


 var $1=_iswalnum($c);
 return $1;
}


function _iswalpha_l($c,$l){
 var label=0;


 var $1=_iswalpha($c);
 return $1;
}


function _iswblank_l($c,$l){
 var label=0;


 var $1=_iswblank($c);
 return $1;
}


function _iswcntrl_l($c,$l){
 var label=0;


 var $1=_iswcntrl($c);
 return $1;
}


function _iswctype_l($c,$t,$l){
 var label=0;


 var $1=_iswctype($c,$t);
 return $1;
}


function _iswdigit_l($c,$l){
 var label=0;


 var $1=_iswdigit($c);
 return $1;
}


function _iswgraph_l($c,$l){
 var label=0;


 var $1=_iswgraph($c);
 return $1;
}


function _iswlower_l($c,$l){
 var label=0;


 var $1=_iswlower($c);
 return $1;
}


function _iswprint_l($c,$l){
 var label=0;


 var $1=_iswprint($c);
 return $1;
}


function _iswpunct_l($c,$l){
 var label=0;


 var $1=_iswpunct($c);
 return $1;
}


function _iswspace_l($c,$l){
 var label=0;


 var $1=_iswspace($c);
 return $1;
}


function _iswupper_l($c,$l){
 var label=0;


 var $1=_iswupper($c);
 return $1;
}


function _iswxdigit_l($c,$l){
 var label=0;


 var $1=_iswxdigit($c);
 return $1;
}


function ___strcoll_l($l,$r,$loc){
 var label=0;


 var $1=_strcmp($l,$r);
 return $1;
}


function _strcoll($l,$r){
 var label=0;


 var $1=_strcmp($l,$r);
 return $1;
}


function _strcasecmp_l($l,$r,$loc){
 var label=0;


 var $1=_strcasecmp($l,$r);
 return $1;
}


function _strfmon_l($s,$n,$loc,$fmt,varrp){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $ap=sp;
 var $1=(($ap)|0);
 var $2=$ap;
 HEAP32[(($2)>>2)]=varrp;HEAP32[((($2)+(4))>>2)]=0;
 var $3=_vstrfmon_l($s,$n,$fmt,$1);

 STACKTOP=sp;return $3;
}


function _vstrfmon_l($s,$n,$fmt,$ap){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($n|0)==0;
 if($1){var $_01_lcssa=$s;label=21;break;}else{var $_0332=$fmt;var $_0233=$n;var $_0134=$s;label=2;break;}
 case 2: 
 var $_0134;
 var $_0233;
 var $_0332;
 var $2=HEAP8[($_0332)];
 if((($2<<24)>>24)==0){ var $_01_lcssa=$_0134;label=21;break;}else if((($2<<24)>>24)==37){ label=5;break;}else{var $_1=$_0332;var $4=$2;label=3;break;}
 case 3: 
 var $4;
 var $_1;
 var $5=(($_0134+1)|0);
 HEAP8[($_0134)]=$4;
 var $6=((($_0233)-(1))|0);
 var $_01_be=$5;var $_02_be=$6;var $_1_pn=$_1;label=4;break;
 case 4: 
 var $_1_pn;
 var $_02_be;
 var $_01_be;
 var $_03_be=(($_1_pn+1)|0);
 var $7=($_02_be|0)==0;
 if($7){var $_01_lcssa=$_01_be;label=21;break;}else{var $_0332=$_03_be;var $_0233=$_02_be;var $_0134=$_01_be;label=2;break;}
 case 5: 
 var $9=(($_0332+1)|0);
 var $10=HEAP8[($9)];
 var $11=(($10<<24)>>24)==37;
 if($11){var $_1=$9;var $4=37;label=3;break;}else{var $left_0=0;var $_2=$9;var $12=$10;label=6;break;}
 case 6: 
 var $12;
 var $_2;
 var $left_0;
 var $13=(($12<<24)>>24);
 switch(($13|0)){case 61:{ label=7;break;}case 45:{ label=8;break;}case 94:case 40:case 43:case 33:{ var $left_1=$left_0;var $_3=$_2;label=9;break;}default:{label=10;break;}}break;
 case 7: 
 var $15=(($_2+1)|0);
 var $left_1=$left_0;var $_3=$15;label=9;break;
 case 8: 
 var $left_1=1;var $_3=$_2;label=9;break;
 case 9: 
 var $_3;
 var $left_1;
 var $18=(($_3+1)|0);
 var $_pre=HEAP8[($18)];
 var $left_0=$left_1;var $_2=$18;var $12=$_pre;label=6;break;
 case 10: 
 var $isdigittmp5=((($13)-(48))|0);
 var $isdigit6=($isdigittmp5>>>0)<10;
 if($isdigit6){var $_47=$_2;var $fw_08=0;var $19=$13;label=11;break;}else{var $_4_lcssa=$_2;var $fw_0_lcssa=0;var $26=$12;label=12;break;}
 case 11: 
 var $19;
 var $fw_08;
 var $_47;
 var $20=((($fw_08)*(10))&-1);
 var $21=((($20)-(48))|0);
 var $22=((($21)+($19))|0);
 var $23=(($_47+1)|0);
 var $24=HEAP8[($23)];
 var $25=(($24<<24)>>24);
 var $isdigittmp=((($25)-(48))|0);
 var $isdigit=($isdigittmp>>>0)<10;
 if($isdigit){var $_47=$23;var $fw_08=$22;var $19=$25;label=11;break;}else{var $_4_lcssa=$23;var $fw_0_lcssa=$22;var $26=$24;label=12;break;}
 case 12: 
 var $26;
 var $fw_0_lcssa;
 var $_4_lcssa;
 var $27=(($26<<24)>>24)==35;
 if($27){label=13;break;}else{var $lp_1=0;var $_6=$_4_lcssa;var $36=$26;label=15;break;}
 case 13: 
 var $_513=(($_4_lcssa+1)|0);
 var $28=HEAP8[($_513)];
 var $29=(($28<<24)>>24);
 var $isdigittmp314=((($29)-(48))|0);
 var $isdigit415=($isdigittmp314>>>0)<10;
 if($isdigit415){var $lp_016=0;var $_517=$_513;var $30=$29;label=14;break;}else{var $lp_1=0;var $_6=$_513;var $36=$28;label=15;break;}
 case 14: 
 var $30;
 var $_517;
 var $lp_016;
 var $31=((($lp_016)*(10))&-1);
 var $32=((($31)-(48))|0);
 var $33=((($32)+($30))|0);
 var $_5=(($_517+1)|0);
 var $34=HEAP8[($_5)];
 var $35=(($34<<24)>>24);
 var $isdigittmp3=((($35)-(48))|0);
 var $isdigit4=($isdigittmp3>>>0)<10;
 if($isdigit4){var $lp_016=$33;var $_517=$_5;var $30=$35;label=14;break;}else{var $lp_1=$33;var $_6=$_5;var $36=$34;label=15;break;}
 case 15: 
 var $36;
 var $_6;
 var $lp_1;
 var $37=(($36<<24)>>24)==46;
 if($37){label=16;break;}else{var $rp_1=2;var $_8=$_6;label=18;break;}
 case 16: 
 var $_723=(($_6+1)|0);
 var $38=HEAP8[($_723)];
 var $39=(($38<<24)>>24);
 var $isdigittmp124=((($39)-(48))|0);
 var $isdigit225=($isdigittmp124>>>0)<10;
 if($isdigit225){var $rp_026=0;var $_727=$_723;var $40=$39;label=17;break;}else{var $rp_1=0;var $_8=$_723;label=18;break;}
 case 17: 
 var $40;
 var $_727;
 var $rp_026;
 var $41=((($rp_026)*(10))&-1);
 var $42=((($41)-(48))|0);
 var $43=((($42)+($40))|0);
 var $_7=(($_727+1)|0);
 var $44=HEAP8[($_7)];
 var $45=(($44<<24)>>24);
 var $isdigittmp1=((($45)-(48))|0);
 var $isdigit2=($isdigittmp1>>>0)<10;
 if($isdigit2){var $rp_026=$43;var $_727=$_7;var $40=$45;label=17;break;}else{var $rp_1=$43;var $_8=$_7;label=18;break;}
 case 18: 
 var $_8;
 var $rp_1;
 var $46=((($lp_1)+(1))|0);
 var $47=((($46)+($rp_1))|0);
 var $48=($left_0|0)==0;
 var $49=($fw_0_lcssa|0)>($47|0);
 var $or_cond=$48&$49;
 var $w_0=($or_cond?$fw_0_lcssa:$47);
 var $50=(tempInt=HEAP32[((($ap)+(4))>>2)],HEAP32[((($ap)+(4))>>2)]=tempInt + 8,HEAPF64[(((HEAP32[(($ap)>>2)])+(tempInt))>>3)]);
 var $51=_snprintf($_0134,$_0233,138672,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 24)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$w_0,HEAP32[(((tempVarArgs)+(8))>>2)]=$rp_1,HEAPF64[(((tempVarArgs)+(16))>>3)]=$50,tempVarArgs)); STACKTOP=tempVarArgs;
 var $52=($51>>>0)<($_0233>>>0);
 if($52){label=20;break;}else{label=19;break;}
 case 19: 
 var $54=___errno_location();
 HEAP32[(($54)>>2)]=7;
 var $_0=-1;label=22;break;
 case 20: 
 var $56=(($_0134+$51)|0);
 var $57=((($_0233)-($51))|0);
 var $_01_be=$56;var $_02_be=$57;var $_1_pn=$_8;label=4;break;
 case 21: 
 var $_01_lcssa;
 var $58=$_01_lcssa;
 var $59=$s;
 var $60=((($58)-($59))|0);
 var $_0=$60;label=22;break;
 case 22: 
 var $_0;
 STACKTOP=sp;return $_0;
  default: assert(0, "bad label: " + label);
 }

}


function _strfmon($s,$n,$fmt,varrp){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $ap=sp;
 var $1=(($ap)|0);
 var $2=$ap;
 HEAP32[(($2)>>2)]=varrp;HEAP32[((($2)+(4))>>2)]=0;
 var $3=_vstrfmon_l($s,$n,$fmt,$1);

 STACKTOP=sp;return $3;
}


function _strncasecmp_l($l,$r,$n,$loc){
 var label=0;


 var $1=_strncasecmp($l,$r,$n);
 return $1;
}


function ___strxfrm_l($dest,$src,$n,$loc){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=_strlen($src);
 var $2=($1>>>0)<($n>>>0);
 if($2){label=2;break;}else{label=3;break;}
 case 2: 
 var $4=_strcpy($dest,$src);
 label=3;break;
 case 3: 
 return $1;
  default: assert(0, "bad label: " + label);
 }

}


function _strxfrm($dest,$src,$n){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=_strlen($src);
 var $2=($1>>>0)<($n>>>0);
 if($2){label=2;break;}else{label=3;break;}
 case 2: 
 var $4=_strcpy($dest,$src);
 label=3;break;
 case 3: 
 return $1;
  default: assert(0, "bad label: " + label);
 }

}


function _towctrans_l($c,$t,$l){
 var label=0;


 var $1=_towctrans($c,$t);
 return $1;
}


function _towlower_l($c,$l){
 var label=0;


 var $1=_towlower($c);
 return $1;
}


function _towupper_l($c,$l){
 var label=0;


 var $1=_towupper($c);
 return $1;
}


function ___wcscoll_l($l,$r,$locale){
 var label=0;


 var $1=_wcscmp($l,$r);
 return $1;
}


function _wcscoll($l,$r){
 var label=0;


 var $1=_wcscmp($l,$r);
 return $1;
}


function _wcscoll_l($l,$r,$locale){
 var label=0;


 var $1=_wcscoll($l,$r);
 return $1;
}


function ___wcsxfrm_l($dest,$src,$n,$loc){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=_wcslen($src);
 var $2=($1>>>0)<($n>>>0);
 if($2){label=3;break;}else{label=2;break;}
 case 2: 
 var $4=((($n)-(1))|0);
 var $5=_wmemcpy($dest,$src,$4);
 var $6=(($dest+($4<<2))|0);
 HEAP32[(($6)>>2)]=0;
 label=4;break;
 case 3: 
 var $8=_wcscpy($dest,$src);
 label=4;break;
 case 4: 
 return $1;
  default: assert(0, "bad label: " + label);
 }

}


function _wcsxfrm($dest,$src,$n){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=_wcslen($src);
 var $2=($1>>>0)<($n>>>0);
 if($2){label=3;break;}else{label=2;break;}
 case 2: 
 var $4=((($n)-(1))|0);
 var $5=_wmemcpy($dest,$src,$4);
 var $6=(($dest+($4<<2))|0);
 HEAP32[(($6)>>2)]=0;
 label=4;break;
 case 3: 
 var $8=_wcscpy($dest,$src);
 label=4;break;
 case 4: 
 return $1;
  default: assert(0, "bad label: " + label);
 }

}


function _wcsxfrm_l($dest,$src,$n,$locale){
 var label=0;


 var $1=_wcsxfrm($dest,$src,$n);
 return $1;
}


function _wctrans_l($s,$l){
 var label=0;


 var $1=_wctrans($s);
 return $1;
}


function _wctype_l($s,$l){
 var label=0;


 var $1=_wctype($s);
 return $1;
}


function ___cos($x,$y){
 var label=0;


 var $1=($x)*($x);
 var $2=($1)*($1);
 var $3=($1)*((0.00002480158728947673));
 var $4=($3)+((-0.001388888888887411));
 var $5=($1)*($4);
 var $6=($5)+((0.0416666666666666));
 var $7=($1)*($6);
 var $8=($2)*($2);
 var $9=($1)*((-1.1359647557788195e-11));
 var $10=($9)+((2.087572321298175e-9));
 var $11=($1)*($10);
 var $12=($11)+((-2.7557314351390663e-7));
 var $13=($8)*($12);
 var $14=($7)+($13);
 var $15=($1)*((0.5));
 var $16=(1)-($15);
 var $17=(1)-($16);
 var $18=($17)-($15);
 var $19=($1)*($14);
 var $20=($x)*($y);
 var $21=($19)-($20);
 var $22=($18)+($21);
 var $23=($16)+($22);
 return $23;
}


function ___cosdf($x){
 var label=0;


 var $1=($x)*($x);
 var $2=($1)*($1);
 var $3=($1)*((0.00002439044879627741));
 var $4=($3)+((-0.001388676377460993));
 var $5=($1)*((-0.499999997251031));
 var $6=($5)+(1);
 var $7=($2)*((0.04166662332373906));
 var $8=($6)+($7);
 var $9=($1)*($2);
 var $10=($9)*($4);
 var $11=($8)+($10);
 var $12=$11;
 return $12;
}


function ___sin($x,$y,$iy){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($x)*($x);
 var $2=($1)*($1);
 var $3=($1)*((0.0000027557313707070068));
 var $4=($3)+((-0.0001984126982985795));
 var $5=($1)*($4);
 var $6=($5)+((0.00833333333332249));
 var $7=($1)*($2);
 var $8=($1)*((1.58969099521155e-10));
 var $9=($8)+((-2.5050760253406863e-8));
 var $10=($7)*($9);
 var $11=($10)+($6);
 var $12=($1)*($x);
 var $13=($iy|0)==0;
 if($13){label=2;break;}else{label=3;break;}
 case 2: 
 var $15=($1)*($11);
 var $16=($15)+((-0.16666666666666632));
 var $17=($12)*($16);
 var $18=($17)+($x);
 var $_0=$18;label=4;break;
 case 3: 
 var $20=($y)*((0.5));
 var $21=($12)*($11);
 var $22=($20)-($21);
 var $23=($1)*($22);
 var $24=($23)-($y);
 var $25=($12)*((-0.16666666666666632));
 var $26=($24)-($25);
 var $27=($x)-($26);
 var $_0=$27;label=4;break;
 case 4: 
 var $_0;
 return $_0;
  default: assert(0, "bad label: " + label);
 }

}


function ___sindf($x){
 var label=0;


 var $1=($x)*($x);
 var $2=($1)*($1);
 var $3=($1)*((0.000002718311493989822));
 var $4=($3)+((-0.00019839334836096632));
 var $5=($1)*($x);
 var $6=($1)*((0.008333329385889463));
 var $7=($6)+((-0.16666666641626524));
 var $8=($5)*($7);
 var $9=($8)+($x);
 var $10=($5)*($2);
 var $11=($10)*($4);
 var $12=($11)+($9);
 var $13=$12;
 return $13;
}


function _ilogb($x){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__x;
 var $__x1;
 HEAPF64[(tempDoublePtr)>>3]=$x; var $1$0=HEAP32[((tempDoublePtr)>>2)];var $1$1=HEAP32[(((tempDoublePtr)+(4))>>2)];
 var $2$0=($1$1>>>20)|(0<<12);
 var $2$1=(0>>>20)|(0<<12);
 var $_tr$0=$2$0;
 var $_tr=$_tr$0;
 var $3=$_tr&2047;
 if(($3|0)==0){ label=2;break;}else if(($3|0)==2047){ label=6;break;}else{label=7;break;}
 case 2: 
 var $5$0=($1$0<<12)|(0>>>20);
 var $5$1=($1$1<<12)|($1$0>>>20);
 var $$etemp$0$0=0;
 var $$etemp$0$1=0;
 var $6=(($5$0|0) == ($$etemp$0$0|0)) & (($5$1|0) == ($$etemp$0$1|0));
 if($6){label=4;break;}else{label=3;break;}
 case 3: 
 var $$etemp$1$0=-1;
 var $$etemp$1$1=-1;
 var $7=(($5$1|0) > ($$etemp$1$1|0)) | (((($5$1|0) == ($$etemp$1$1|0) & ($5$0>>>0) >  ($$etemp$1$0>>>0))));
 if($7){var $i_01$1=$5$1;var $i_01$0=$5$0;var $e_02=-1023;label=5;break;}else{var $_0=-1023;label=8;break;}
 case 4: 
 $__x=NaN;
 var $_0=-2147483648;label=8;break;
 case 5: 
 var $e_02;
 var $i_01$0;
 var $i_01$1;
 var $9=((($e_02)-(1))|0);
 var $10$0=($i_01$0<<1)|(0>>>31);
 var $10$1=($i_01$1<<1)|($i_01$0>>>31);
 var $$etemp$2$0=-1;
 var $$etemp$2$1=-1;
 var $11=(($10$1|0) > ($$etemp$2$1|0)) | (((($10$1|0) == ($$etemp$2$1|0) & ($10$0>>>0) >  ($$etemp$2$0>>>0))));
 if($11){var $i_01$1=$10$1;var $i_01$0=$10$0;var $e_02=$9;label=5;break;}else{var $_0=$9;label=8;break;}
 case 6: 
 $__x1=NaN;
 var $$etemp$3$0=-1;
 var $$etemp$3$1=1048575;
 var $_mask$0=$1$0&$$etemp$3$0;
 var $_mask$1=$1$1&$$etemp$3$1;
 var $$etemp$4$0=0;
 var $$etemp$4$1=0;
 var $13=(($_mask$0|0) != ($$etemp$4$0|0)) | (($_mask$1|0) != ($$etemp$4$1|0));
 var $14=($13?-2147483648:2147483647);
 var $_0=$14;label=8;break;
 case 7: 
 var $16=((($3)-(1023))|0);
 var $_0=$16;label=8;break;
 case 8: 
 var $_0;
 STACKTOP=sp;return $_0;
  default: assert(0, "bad label: " + label);
 }

}


function _ilogbf($x){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__x;
 var $__x1;
 var $1=(HEAPF32[((tempDoublePtr)>>2)]=$x,HEAP32[((tempDoublePtr)>>2)]);
 var $2=$1>>>23;
 var $3=$2&255;
 if(($3|0)==0){ label=2;break;}else if(($3|0)==255){ label=6;break;}else{label=7;break;}
 case 2: 
 var $5=$1<<9;
 var $6=($5|0)==0;
 if($6){label=4;break;}else{label=3;break;}
 case 3: 
 var $7=($5|0)>-1;
 if($7){var $i_01=$5;var $e_02=-127;label=5;break;}else{var $_0=-127;label=8;break;}
 case 4: 
 $__x=NaN;
 var $_0=-2147483648;label=8;break;
 case 5: 
 var $e_02;
 var $i_01;
 var $9=((($e_02)-(1))|0);
 var $10=$i_01<<1;
 var $11=($10|0)>-1;
 if($11){var $i_01=$10;var $e_02=$9;label=5;break;}else{var $_0=$9;label=8;break;}
 case 6: 
 $__x1=NaN;
 var $_mask=$1&8388607;
 var $13=($_mask|0)!=0;
 var $14=($13?-2147483648:2147483647);
 var $_0=$14;label=8;break;
 case 7: 
 var $16=((($3)-(127))|0);
 var $_0=$16;label=8;break;
 case 8: 
 var $_0;
 STACKTOP=sp;return $_0;
  default: assert(0, "bad label: " + label);
 }

}


function _ilogbl($x){
 var label=0;


 var $1=_ilogb($x);
 return $1;
}


function _ldexp($x,$n){
 var label=0;


 var $1=_scalbn($x,$n);
 return $1;
}


function _ldexpf($x,$n){
 var label=0;


 var $1=_scalbnf($x,$n);
 return $1;
}


function _ldexpl($x,$n){
 var label=0;


 var $1=_scalbnl($x,$n);
 return $1;
}


function _logb($x){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 HEAPF64[(tempDoublePtr)>>3]=$x; var $1$0=HEAP32[((tempDoublePtr)>>2)];var $1$1=HEAP32[(((tempDoublePtr)+(4))>>2)];
 var $$etemp$0$0=0;
 var $$etemp$0$1=2146435072;
 var $2$0=$1$0&$$etemp$0$0;
 var $2$1=$1$1&$$etemp$0$1;
 var $$etemp$1$0=0;
 var $$etemp$1$1=2146435072;
 var $3=(($2$1>>>0) < ($$etemp$1$1>>>0)) | (((($2$1>>>0) == ($$etemp$1$1>>>0) & ($2$0>>>0) <  ($$etemp$1$0>>>0))));
 if($3){label=3;break;}else{label=2;break;}
 case 2: 
 var $5=($x)*($x);
 var $_0=$5;label=6;break;
 case 3: 
 var $7=$x==0;
 if($7){label=4;break;}else{label=5;break;}
 case 4: 
 var $9=($x)*($x);
 var $10=(-1)/($9);
 var $_0=$10;label=6;break;
 case 5: 
 var $12=_ilogb($x);
 var $13=($12|0);
 var $_0=$13;label=6;break;
 case 6: 
 var $_0;
 return $_0;
  default: assert(0, "bad label: " + label);
 }

}


function _logbf($x){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(HEAPF32[((tempDoublePtr)>>2)]=$x,HEAP32[((tempDoublePtr)>>2)]);
 var $2=$1&2139095040;
 var $3=($2>>>0)<2139095040;
 if($3){label=3;break;}else{label=2;break;}
 case 2: 
 var $5=($x)*($x);
 var $_0=$5;label=6;break;
 case 3: 
 var $7=$x==0;
 if($7){label=4;break;}else{label=5;break;}
 case 4: 
 var $9=($x)*($x);
 var $10=(-1)/($9);
 var $_0=$10;label=6;break;
 case 5: 
 var $12=_ilogbf($x);
 var $13=($12|0);
 var $_0=$13;label=6;break;
 case 6: 
 var $_0;
 return $_0;
  default: assert(0, "bad label: " + label);
 }

}


function _logbl($x){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 HEAPF64[(tempDoublePtr)>>3]=$x; var $1$0=HEAP32[((tempDoublePtr)>>2)];var $1$1=HEAP32[(((tempDoublePtr)+(4))>>2)];
 var $$etemp$0$0=0;
 var $$etemp$0$1=2146435072;
 var $2$0=$1$0&$$etemp$0$0;
 var $2$1=$1$1&$$etemp$0$1;
 var $$etemp$1$0=0;
 var $$etemp$1$1=2146435072;
 var $3=(($2$1>>>0) < ($$etemp$1$1>>>0)) | (((($2$1>>>0) == ($$etemp$1$1>>>0) & ($2$0>>>0) <  ($$etemp$1$0>>>0))));
 if($3){label=3;break;}else{label=2;break;}
 case 2: 
 var $5=($x)*($x);
 var $_0=$5;label=6;break;
 case 3: 
 var $7=$x==0;
 if($7){label=4;break;}else{label=5;break;}
 case 4: 
 var $9=($x)*($x);
 var $10=(-1)/($9);
 var $_0=$10;label=6;break;
 case 5: 
 var $12=_ilogbl($x);
 var $13=($12|0);
 var $_0=$13;label=6;break;
 case 6: 
 var $_0;
 return $_0;
  default: assert(0, "bad label: " + label);
 }

}


function _lgamma($x){
 var label=0;


 var $1=___lgamma_r($x,141016);
 return $1;
}


function ___lgamma_r($x,$signgamp){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 HEAPF64[(tempDoublePtr)>>3]=$x; var $1$0=HEAP32[((tempDoublePtr)>>2)];var $1$1=HEAP32[(((tempDoublePtr)+(4))>>2)];
 var $2$0=$1$1;
 var $2$1=0;
 var $3$0=$2$0;
 var $3=$3$0;
 var $4$0=$1$0;
 var $4=$4$0;
 HEAP32[(($signgamp)>>2)]=1;
 var $5=$3&2147483647;
 var $6=($5>>>0)>2146435071;
 if($6){label=2;break;}else{label=3;break;}
 case 2: 
 var $8=($x)*($x);
 var $_0=$8;label=55;break;
 case 3: 
 var $10=$5|$4;
 var $11=($10|0)==0;
 if($11){var $_0=Infinity;label=55;break;}else{label=4;break;}
 case 4: 
 var $13=($5>>>0)<999292928;
 var $14=($3|0)<0;
 if($13){label=5;break;}else{label=8;break;}
 case 5: 
 if($14){label=6;break;}else{label=7;break;}
 case 6: 
 HEAP32[(($signgamp)>>2)]=-1;
 var $17=((-.0))-($x);
 var $18=Math_log($17);
 var $19=((-.0))-($18);
 var $_0=$19;label=55;break;
 case 7: 
 var $21=Math_log($x);
 var $22=((-.0))-($21);
 var $_0=$22;label=55;break;
 case 8: 
 if($14){label=9;break;}else{var $_01=$x;var $nadj_0=0;label=29;break;}
 case 9: 
 var $25=($5>>>0)>1127219199;
 if($25){var $_0=Infinity;label=55;break;}else{label=10;break;}
 case 10: 
 var $27=($5>>>0)<1070596096;
 if($27){label=11;break;}else{label=12;break;}
 case 11: 
 var $29=($x)*((3.141592653589793));
 var $30=___sin($29,0,0);
 var $_0_i=$30;label=25;break;
 case 12: 
 var $32=((-.0))-($x);
 var $33=Math_floor($32);
 var $34=$33!=$32;
 if($34){label=13;break;}else{label=14;break;}
 case 13: 
 var $36=($x)*((-0.5));
 var $37=Math_floor($36);
 var $38=($36)-($37);
 var $39=($38)*(2);
 var $40=($39)*(4);
 var $41=(($40)&-1);
 var $y_0_i=$39;var $n_0_i=$41;label=18;break;
 case 14: 
 var $43=($5>>>0)>1128267775;
 if($43){var $y_01_i=0;label=19;break;}else{label=15;break;}
 case 15: 
 var $45=($5>>>0)<1127219200;
 if($45){label=16;break;}else{var $z_0_i=$33;label=17;break;}
 case 16: 
 var $47=(4503599627370496)-($x);
 var $z_0_i=$47;label=17;break;
 case 17: 
 var $z_0_i;
 HEAPF64[(tempDoublePtr)>>3]=$z_0_i; var $49$0=HEAP32[((tempDoublePtr)>>2)];var $49$1=HEAP32[(((tempDoublePtr)+(4))>>2)];
 var $50$0=$49$0;
 var $50=$50$0;
 var $51=$50&1;
 var $52=($51|0);
 var $53=$51<<2;
 var $y_0_i=$52;var $n_0_i=$53;label=18;break;
 case 18: 
 var $n_0_i;
 var $y_0_i;
 switch(($n_0_i|0)){case 0:{ var $y_01_i=$y_0_i;label=19;break;}case 1:case 2:{ label=20;break;}case 3:case 4:{ label=21;break;}case 5:case 6:{ label=22;break;}default:{label=23;break;}}break;
 case 19: 
 var $y_01_i;
 var $55=($y_01_i)*((3.141592653589793));
 var $56=___sin($55,0,0);
 var $y_1_i=$56;label=24;break;
 case 20: 
 var $58=((0.5))-($y_0_i);
 var $59=($58)*((3.141592653589793));
 var $60=___cos($59,0);
 var $y_1_i=$60;label=24;break;
 case 21: 
 var $62=(1)-($y_0_i);
 var $63=($62)*((3.141592653589793));
 var $64=___sin($63,0,0);
 var $y_1_i=$64;label=24;break;
 case 22: 
 var $66=($y_0_i)+((-1.5));
 var $67=($66)*((3.141592653589793));
 var $68=___cos($67,0);
 var $69=((-.0))-($68);
 var $y_1_i=$69;label=24;break;
 case 23: 
 var $71=($y_0_i)-(2);
 var $72=($71)*((3.141592653589793));
 var $73=___sin($72,0,0);
 var $y_1_i=$73;label=24;break;
 case 24: 
 var $y_1_i;
 var $75=((-.0))-($y_1_i);
 var $_0_i=$75;label=25;break;
 case 25: 
 var $_0_i;
 var $76=$_0_i==0;
 if($76){var $_0=Infinity;label=55;break;}else{label=26;break;}
 case 26: 
 var $78=($_0_i)*($x);
 var $79=Math_abs($78);
 var $80=((3.141592653589793))/($79);
 var $81=Math_log($80);
 var $82=$_0_i<0;
 if($82){label=27;break;}else{label=28;break;}
 case 27: 
 HEAP32[(($signgamp)>>2)]=-1;
 label=28;break;
 case 28: 
 var $85=((-.0))-($x);
 var $_01=$85;var $nadj_0=$81;label=29;break;
 case 29: 
 var $nadj_0;
 var $_01;
 var $87=((($5)-(1072693248))|0);
 var $88=$87|$4;
 var $89=($88|0)==0;
 if($89){var $r_1=0;label=53;break;}else{label=30;break;}
 case 30: 
 var $91=((($5)-(1073741824))|0);
 var $92=$91|$4;
 var $93=($92|0)==0;
 if($93){var $r_1=0;label=53;break;}else{label=31;break;}
 case 31: 
 var $95=($5>>>0)<1073741824;
 if($95){label=32;break;}else{label=43;break;}
 case 32: 
 var $97=($5>>>0)<1072483533;
 if($97){label=33;break;}else{label=36;break;}
 case 33: 
 var $99=Math_log($_01);
 var $100=((-.0))-($99);
 var $101=($5>>>0)>1072130371;
 if($101){var $_pn=1;var $r_0_ph=$100;label=40;break;}else{label=34;break;}
 case 34: 
 var $103=($5>>>0)>1070442080;
 if($103){label=35;break;}else{var $y_0=$_01;var $r_0=$100;label=42;break;}
 case 35: 
 var $105=($_01)+((-0.46163214496836225));
 var $y_0_ph6=$105;var $r_0_ph5=$100;label=41;break;
 case 36: 
 var $107=($5>>>0)>1073460418;
 if($107){var $_pn=2;var $r_0_ph=0;label=40;break;}else{label=37;break;}
 case 37: 
 var $109=($5>>>0)>1072936131;
 if($109){label=38;break;}else{label=39;break;}
 case 38: 
 var $111=($_01)+((-1.4616321449683622));
 var $y_0_ph6=$111;var $r_0_ph5=0;label=41;break;
 case 39: 
 var $113=($_01)-(1);
 var $y_0=$113;var $r_0=0;label=42;break;
 case 40: 
 var $r_0_ph;
 var $_pn;
 var $y_0_ph=($_pn)-($_01);
 var $115=($y_0_ph)*($y_0_ph);
 var $116=($115)*((0.000025214456545125733));
 var $117=($116)+((0.00022086279071390839));
 var $118=($115)*($117);
 var $119=($118)+((0.0011927076318336207));
 var $120=($115)*($119);
 var $121=($120)+((0.007385550860814029));
 var $122=($115)*($121);
 var $123=($122)+((0.06735230105312927));
 var $124=($115)*($123);
 var $125=($124)+((0.07721566490153287));
 var $126=($115)*((0.000044864094961891516));
 var $127=($126)+((0.00010801156724758394));
 var $128=($115)*($127);
 var $129=($128)+((0.0005100697921535113));
 var $130=($115)*($129);
 var $131=($130)+((0.0028905138367341563));
 var $132=($115)*($131);
 var $133=($132)+((0.020580808432516733));
 var $134=($115)*($133);
 var $135=($134)+((0.3224670334241136));
 var $136=($115)*($135);
 var $137=($y_0_ph)*($125);
 var $138=($137)+($136);
 var $139=($y_0_ph)*((0.5));
 var $140=($138)-($139);
 var $141=($r_0_ph)+($140);
 var $r_1=$141;label=53;break;
 case 41: 
 var $r_0_ph5;
 var $y_0_ph6;
 var $143=($y_0_ph6)*($y_0_ph6);
 var $144=($y_0_ph6)*($143);
 var $145=($144)*((0.00031563207090362595));
 var $146=($145)+((-0.0014034646998923284));
 var $147=($144)*($146);
 var $148=($147)+((0.006100538702462913));
 var $149=($144)*($148);
 var $150=($149)+((-0.032788541075985965));
 var $151=($144)*($150);
 var $152=($151)+((0.48383612272381005));
 var $153=($144)*((-0.00031275416837512086));
 var $154=($153)+((0.000881081882437654));
 var $155=($144)*($154);
 var $156=($155)+((-0.0036845201678113826));
 var $157=($144)*($156);
 var $158=($157)+((0.01797067508118204));
 var $159=($144)*($158);
 var $160=($159)+((-0.1475877229945939));
 var $161=($144)*((0.0003355291926355191));
 var $162=($161)+((-0.0005385953053567405));
 var $163=($144)*($162);
 var $164=($163)+((0.0022596478090061247));
 var $165=($144)*($164);
 var $166=($165)+((-0.010314224129834144));
 var $167=($144)*($166);
 var $168=($167)+((0.06462494023913339));
 var $169=($143)*($152);
 var $170=($y_0_ph6)*($168);
 var $171=($160)+($170);
 var $172=($144)*($171);
 var $173=((-3.638676997039505e-18))-($172);
 var $174=($169)-($173);
 var $175=($174)+((-0.12148629053584961));
 var $176=($r_0_ph5)+($175);
 var $r_1=$176;label=53;break;
 case 42: 
 var $r_0;
 var $y_0;
 var $178=($y_0)*((0.013381091853678766));
 var $179=($178)+((0.22896372806469245));
 var $180=($y_0)*($179);
 var $181=($180)+((0.9777175279633727));
 var $182=($y_0)*($181);
 var $183=($182)+((1.4549225013723477));
 var $184=($y_0)*($183);
 var $185=($184)+((0.6328270640250934));
 var $186=($y_0)*($185);
 var $187=($186)+((-0.07721566490153287));
 var $188=($y_0)*($187);
 var $189=($y_0)*((0.003217092422824239));
 var $190=($189)+((0.10422264559336913));
 var $191=($y_0)*($190);
 var $192=($191)+((0.7692851504566728));
 var $193=($y_0)*($192);
 var $194=($193)+((2.128489763798934));
 var $195=($y_0)*($194);
 var $196=($195)+((2.4559779371304113));
 var $197=($y_0)*($196);
 var $198=($197)+(1);
 var $199=($y_0)*((-0.5));
 var $200=($188)/($198);
 var $201=($199)+($200);
 var $202=($r_0)+($201);
 var $r_1=$202;label=53;break;
 case 43: 
 var $204=($5>>>0)<1075838976;
 if($204){label=44;break;}else{label=50;break;}
 case 44: 
 var $206=(($_01)&-1);
 var $207=($206|0);
 var $208=($_01)-($207);
 var $209=($208)*((0.00003194753265841009));
 var $210=($209)+((0.0018402845140733772));
 var $211=($208)*($210);
 var $212=($211)+((0.02664227030336386));
 var $213=($208)*($212);
 var $214=($213)+((0.14635047265246445));
 var $215=($208)*($214);
 var $216=($215)+((0.325778796408931));
 var $217=($208)*($216);
 var $218=($217)+((0.21498241596060885));
 var $219=($208)*($218);
 var $220=($219)+((-0.07721566490153287));
 var $221=($208)*($220);
 var $222=($208)*((0.000007326684307446256));
 var $223=($222)+((0.0007779424963818936));
 var $224=($208)*($223);
 var $225=($224)+((0.01864591917156529));
 var $226=($208)*($225);
 var $227=($226)+((0.17193386563280308));
 var $228=($208)*($227);
 var $229=($228)+((0.7219355475671381));
 var $230=($208)*($229);
 var $231=($230)+((1.3920053346762105));
 var $232=($208)*($231);
 var $233=($232)+(1);
 var $234=($208)*((0.5));
 var $235=($221)/($233);
 var $236=($234)+($235);
 switch(($206|0)){case 7:{ label=45;break;}case 6:{ var $z_0=1;label=46;break;}case 5:{ var $z_1=1;label=47;break;}case 4:{ var $z_2=1;label=48;break;}case 3:{ var $z_3=1;label=49;break;}default:{var $r_1=$236;label=53;break;}}break;
 case 45: 
 var $238=($208)+(6);
 var $z_0=$238;label=46;break;
 case 46: 
 var $z_0;
 var $240=($208)+(5);
 var $241=($240)*($z_0);
 var $z_1=$241;label=47;break;
 case 47: 
 var $z_1;
 var $243=($208)+(4);
 var $244=($243)*($z_1);
 var $z_2=$244;label=48;break;
 case 48: 
 var $z_2;
 var $246=($208)+(3);
 var $247=($246)*($z_2);
 var $z_3=$247;label=49;break;
 case 49: 
 var $z_3;
 var $249=($208)+(2);
 var $250=($249)*($z_3);
 var $251=Math_log($250);
 var $252=($236)+($251);
 var $r_1=$252;label=53;break;
 case 50: 
 var $254=($5>>>0)<1133510656;
 var $255=Math_log($_01);
 if($254){label=51;break;}else{label=52;break;}
 case 51: 
 var $257=(1)/($_01);
 var $258=($257)*($257);
 var $259=($258)*((-0.0016309293409657527));
 var $260=($259)+((0.0008363399189962821));
 var $261=($258)*($260);
 var $262=($261)+((-0.00059518755745034));
 var $263=($258)*($262);
 var $264=($263)+((0.0007936505586430196));
 var $265=($258)*($264);
 var $266=($265)+((-0.0027777777772877554));
 var $267=($258)*($266);
 var $268=($267)+((0.08333333333333297));
 var $269=($257)*($268);
 var $270=($269)+((0.4189385332046727));
 var $271=($_01)+((-0.5));
 var $272=($255)-(1);
 var $273=($271)*($272);
 var $274=($273)+($270);
 var $r_1=$274;label=53;break;
 case 52: 
 var $276=($255)-(1);
 var $277=($_01)*($276);
 var $r_1=$277;label=53;break;
 case 53: 
 var $r_1;
 if($14){label=54;break;}else{var $_0=$r_1;label=55;break;}
 case 54: 
 var $280=($nadj_0)-($r_1);
 var $_0=$280;label=55;break;
 case 55: 
 var $_0;
 return $_0;
  default: assert(0, "bad label: " + label);
 }

}


function _lgammaf($x){
 var label=0;


 var $1=___lgammaf_r($x,141016);
 return $1;
}


function ___lgammaf_r($x,$signgamp){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(HEAPF32[((tempDoublePtr)>>2)]=$x,HEAP32[((tempDoublePtr)>>2)]);
 HEAP32[(($signgamp)>>2)]=1;
 var $2=$1&2147483647;
 var $3=($2>>>0)>2139095039;
 if($3){label=2;break;}else{label=3;break;}
 case 2: 
 var $5=($x)*($x);
 var $_0=$5;label=54;break;
 case 3: 
 var $7=($2|0)==0;
 if($7){var $_0=Infinity;label=54;break;}else{label=4;break;}
 case 4: 
 var $9=($2>>>0)<889192448;
 var $10=($1|0)<0;
 if($9){label=5;break;}else{label=8;break;}
 case 5: 
 if($10){label=6;break;}else{label=7;break;}
 case 6: 
 HEAP32[(($signgamp)>>2)]=-1;
 var $13=((-.0))-($x);
 var $14=Math_log($13);
 var $15=((-.0))-($14);
 var $_0=$15;label=54;break;
 case 7: 
 var $17=Math_log($x);
 var $18=((-.0))-($17);
 var $_0=$18;label=54;break;
 case 8: 
 if($10){label=9;break;}else{var $_02=$x;var $nadj_0=0;label=29;break;}
 case 9: 
 var $21=($2>>>0)>1258291199;
 if($21){var $_0=Infinity;label=54;break;}else{label=10;break;}
 case 10: 
 var $23=($2>>>0)<1048576000;
 if($23){label=11;break;}else{label=12;break;}
 case 11: 
 var $25=($x)*((3.1415927410125732));
 var $26=$25;
 var $27=___sindf($26);
 var $_0_i=$27;label=25;break;
 case 12: 
 var $29=((-.0))-($x);
 var $30=Math_floor($29);
 var $31=$30!=$29;
 if($31){label=13;break;}else{label=14;break;}
 case 13: 
 var $33=($x)*((-0.5));
 var $34=Math_floor($33);
 var $35=($33)-($34);
 var $36=($35)*(2);
 var $37=($36)*(4);
 var $38=(($37)&-1);
 var $y_0_i=$36;var $n_0_i=$38;label=18;break;
 case 14: 
 var $40=($2>>>0)>1266679807;
 if($40){var $y_01_i=0;label=19;break;}else{label=15;break;}
 case 15: 
 var $42=($2>>>0)<1258291200;
 if($42){label=16;break;}else{var $z_0_i=$30;label=17;break;}
 case 16: 
 var $44=(8388608)-($x);
 var $z_0_i=$44;label=17;break;
 case 17: 
 var $z_0_i;
 var $46=(HEAPF32[((tempDoublePtr)>>2)]=$z_0_i,HEAP32[((tempDoublePtr)>>2)]);
 var $47=$46&1;
 var $48=($47|0);
 var $49=$47<<2;
 var $y_0_i=$48;var $n_0_i=$49;label=18;break;
 case 18: 
 var $n_0_i;
 var $y_0_i;
 switch(($n_0_i|0)){case 0:{ var $y_01_i=$y_0_i;label=19;break;}case 1:case 2:{ label=20;break;}case 3:case 4:{ label=21;break;}case 5:case 6:{ label=22;break;}default:{label=23;break;}}break;
 case 19: 
 var $y_01_i;
 var $51=($y_01_i)*((3.1415927410125732));
 var $52=$51;
 var $53=___sindf($52);
 var $y_1_i=$53;label=24;break;
 case 20: 
 var $55=((0.5))-($y_0_i);
 var $56=($55)*((3.1415927410125732));
 var $57=$56;
 var $58=___cosdf($57);
 var $y_1_i=$58;label=24;break;
 case 21: 
 var $60=(1)-($y_0_i);
 var $61=($60)*((3.1415927410125732));
 var $62=$61;
 var $63=___sindf($62);
 var $y_1_i=$63;label=24;break;
 case 22: 
 var $65=($y_0_i)+((-1.5));
 var $66=($65)*((3.1415927410125732));
 var $67=$66;
 var $68=___cosdf($67);
 var $69=((-.0))-($68);
 var $y_1_i=$69;label=24;break;
 case 23: 
 var $71=($y_0_i)-(2);
 var $72=($71)*((3.1415927410125732));
 var $73=$72;
 var $74=___sindf($73);
 var $y_1_i=$74;label=24;break;
 case 24: 
 var $y_1_i;
 var $76=((-.0))-($y_1_i);
 var $_0_i=$76;label=25;break;
 case 25: 
 var $_0_i;
 var $77=$_0_i==0;
 if($77){var $_0=Infinity;label=54;break;}else{label=26;break;}
 case 26: 
 var $79=($_0_i)*($x);
 var $80=Math_abs($79);
 var $81=((3.1415927410125732))/($80);
 var $82=Math_log($81);
 var $83=$_0_i<0;
 if($83){label=27;break;}else{label=28;break;}
 case 27: 
 HEAP32[(($signgamp)>>2)]=-1;
 label=28;break;
 case 28: 
 var $86=((-.0))-($x);
 var $_02=$86;var $nadj_0=$82;label=29;break;
 case 29: 
 var $nadj_0;
 var $_02;
 if(($2|0)==1073741824|($2|0)==1065353216){ var $r_1=0;label=52;break;}else{label=30;break;}
 case 30: 
 var $89=($2>>>0)<1073741824;
 if($89){label=31;break;}else{label=42;break;}
 case 31: 
 var $91=($2>>>0)<1063675495;
 if($91){label=32;break;}else{label=35;break;}
 case 32: 
 var $93=Math_log($_02);
 var $94=((-.0))-($93);
 var $95=($2>>>0)>1060850207;
 if($95){var $r_0_ph=$94;var $_pn=1;label=39;break;}else{label=33;break;}
 case 33: 
 var $97=($2>>>0)>1047343879;
 if($97){label=34;break;}else{var $r_0=$94;var $y_0=$_02;label=41;break;}
 case 34: 
 var $99=($_02)+((-0.4616321325302124));
 var $r_0_ph7=$94;var $y_0_ph6=$99;label=40;break;
 case 35: 
 var $101=($2>>>0)>1071490583;
 if($101){var $r_0_ph=0;var $_pn=2;label=39;break;}else{label=36;break;}
 case 36: 
 var $103=($2>>>0)>1067296287;
 if($103){label=37;break;}else{label=38;break;}
 case 37: 
 var $105=($_02)+((-1.4616321325302124));
 var $r_0_ph7=0;var $y_0_ph6=$105;label=40;break;
 case 38: 
 var $107=($_02)-(1);
 var $r_0=0;var $y_0=$107;label=41;break;
 case 39: 
 var $_pn;
 var $r_0_ph;
 var $y_0_ph=($_pn)-($_02);
 var $109=($y_0_ph)*($y_0_ph);
 var $110=($109)*((0.000025214456400135532));
 var $111=($110)+((0.00022086278477218002));
 var $112=($109)*($111);
 var $113=($112)+((0.0011927076848223805));
 var $114=($109)*($113);
 var $115=($114)+((0.007385550998151302));
 var $116=($109)*($115);
 var $117=($116)+((0.0673523023724556));
 var $118=($109)*($117);
 var $119=($118)+((0.07721566408872604));
 var $120=($109)*((0.00004486409670789726));
 var $121=($120)+((0.00010801156895468011));
 var $122=($109)*($121);
 var $123=($122)+((0.0005100697744637728));
 var $124=($109)*($123);
 var $125=($124)+((0.0028905137442052364));
 var $126=($109)*($125);
 var $127=($126)+((0.020580807700753212));
 var $128=($109)*($127);
 var $129=($128)+((0.32246702909469604));
 var $130=($109)*($129);
 var $131=($y_0_ph)*($119);
 var $132=($131)+($130);
 var $133=($y_0_ph)*((0.5));
 var $134=($132)-($133);
 var $135=($r_0_ph)+($134);
 var $r_1=$135;label=52;break;
 case 40: 
 var $y_0_ph6;
 var $r_0_ph7;
 var $137=($y_0_ph6)*($y_0_ph6);
 var $138=($y_0_ph6)*($137);
 var $139=($138)*((0.000315632059937343));
 var $140=($139)+((-0.0014034647028893232));
 var $141=($138)*($140);
 var $142=($141)+((0.006100538652390242));
 var $143=($138)*($142);
 var $144=($143)+((-0.03278854116797447));
 var $145=($138)*($144);
 var $146=($145)+((0.4838361144065857));
 var $147=($138)*((-0.00031275415676645935));
 var $148=($147)+((0.0008810818544588983));
 var $149=($138)*($148);
 var $150=($149)+((-0.0036845202557742596));
 var $151=($138)*($150);
 var $152=($151)+((0.017970675602555275));
 var $153=($138)*($152);
 var $154=($153)+((-0.14758771657943726));
 var $155=($138)*((0.00033552918466739357));
 var $156=($155)+((-0.0005385953118093312));
 var $157=($138)*($156);
 var $158=($157)+((0.0022596477065235376));
 var $159=($138)*($158);
 var $160=($159)+((-0.010314224287867546));
 var $161=($138)*($160);
 var $162=($161)+((0.06462494283914566));
 var $163=($137)*($146);
 var $164=($y_0_ph6)*($162);
 var $165=($154)+($164);
 var $166=($138)*($165);
 var $167=((6.697100651820165e-9))-($166);
 var $168=($163)-($167);
 var $169=($168)+((-0.12148628383874893));
 var $170=($r_0_ph7)+($169);
 var $r_1=$170;label=52;break;
 case 41: 
 var $y_0;
 var $r_0;
 var $172=($y_0)*((0.013381091877818108));
 var $173=($172)+((0.2289637327194214));
 var $174=($y_0)*($173);
 var $175=($174)+((0.9777175188064575));
 var $176=($y_0)*($175);
 var $177=($176)+((1.4549225568771362));
 var $178=($y_0)*($177);
 var $179=($178)+((0.6328270435333252));
 var $180=($y_0)*($179);
 var $181=($180)+((-0.07721566408872604));
 var $182=($y_0)*($181);
 var $183=($y_0)*((0.0032170924823731184));
 var $184=($183)+((0.10422264784574509));
 var $185=($y_0)*($184);
 var $186=($185)+((0.7692851424217224));
 var $187=($y_0)*($186);
 var $188=($187)+((2.1284897327423096));
 var $189=($y_0)*($188);
 var $190=($189)+((2.4559779167175293));
 var $191=($y_0)*($190);
 var $192=($191)+(1);
 var $193=($y_0)*((-0.5));
 var $194=($182)/($192);
 var $195=($193)+($194);
 var $196=($r_0)+($195);
 var $r_1=$196;label=52;break;
 case 42: 
 var $198=($2>>>0)<1090519040;
 if($198){label=43;break;}else{label=49;break;}
 case 43: 
 var $200=(($_02)&-1);
 var $201=($200|0);
 var $202=($_02)-($201);
 var $203=($202)*((0.00003194753298885189));
 var $204=($203)+((0.0018402845598757267));
 var $205=($202)*($204);
 var $206=($205)+((0.026642270386219025));
 var $207=($202)*($206);
 var $208=($207)+((0.14635047316551208));
 var $209=($202)*($208);
 var $210=($209)+((0.3257787823677063));
 var $211=($202)*($210);
 var $212=($211)+((0.21498242020606995));
 var $213=($202)*($212);
 var $214=($213)+((-0.07721566408872604));
 var $215=($202)*($214);
 var $216=($202)*((0.00000732668422642746));
 var $217=($216)+((0.0007779424777254462));
 var $218=($202)*($217);
 var $219=($218)+((0.018645919859409332));
 var $220=($202)*($219);
 var $221=($220)+((0.1719338595867157));
 var $222=($202)*($221);
 var $223=($222)+((0.7219355702400208));
 var $224=($202)*($223);
 var $225=($224)+((1.3920053243637085));
 var $226=($202)*($225);
 var $227=($226)+(1);
 var $228=($202)*((0.5));
 var $229=($215)/($227);
 var $230=($228)+($229);
 switch(($200|0)){case 7:{ label=44;break;}case 6:{ var $z_0=1;label=45;break;}case 5:{ var $z_1=1;label=46;break;}case 4:{ var $z_2=1;label=47;break;}case 3:{ var $z_3=1;label=48;break;}default:{var $r_1=$230;label=52;break;}}break;
 case 44: 
 var $232=($202)+(6);
 var $z_0=$232;label=45;break;
 case 45: 
 var $z_0;
 var $234=($202)+(5);
 var $235=($234)*($z_0);
 var $z_1=$235;label=46;break;
 case 46: 
 var $z_1;
 var $237=($202)+(4);
 var $238=($237)*($z_1);
 var $z_2=$238;label=47;break;
 case 47: 
 var $z_2;
 var $240=($202)+(3);
 var $241=($240)*($z_2);
 var $z_3=$241;label=48;break;
 case 48: 
 var $z_3;
 var $243=($202)+(2);
 var $244=($243)*($z_3);
 var $245=Math_log($244);
 var $246=($230)+($245);
 var $r_1=$246;label=52;break;
 case 49: 
 var $248=($2>>>0)<1551892480;
 var $249=Math_log($_02);
 if($248){label=50;break;}else{label=51;break;}
 case 50: 
 var $251=(1)/($_02);
 var $252=($251)*($251);
 var $253=($252)*((-0.0016309292986989021));
 var $254=($253)+((0.0008363398956134915));
 var $255=($252)*($254);
 var $256=($255)+((-0.0005951875355094671));
 var $257=($252)*($256);
 var $258=($257)+((0.0007936505717225373));
 var $259=($252)*($258);
 var $260=($259)+((-0.0027777778450399637));
 var $261=($252)*($260);
 var $262=($261)+((0.0833333358168602));
 var $263=($251)*($262);
 var $264=($263)+((0.418938547372818));
 var $265=($_02)+((-0.5));
 var $266=($249)-(1);
 var $267=($265)*($266);
 var $268=($267)+($264);
 var $r_1=$268;label=52;break;
 case 51: 
 var $270=($249)-(1);
 var $271=($_02)*($270);
 var $r_1=$271;label=52;break;
 case 52: 
 var $r_1;
 if($10){label=53;break;}else{var $_0=$r_1;label=54;break;}
 case 53: 
 var $274=($nadj_0)-($r_1);
 var $_0=$274;label=54;break;
 case 54: 
 var $_0;
 return $_0;
  default: assert(0, "bad label: " + label);
 }

}


function ___lgammal_r($x,$sg){
 var label=0;


 var $1=___lgamma_r($x,$sg);
 return $1;
}


function _lgammal($x){
 var label=0;


 var $1=___lgamma_r($x,141016);
 return $1;
}


function _scalbnf($x,$n){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($n|0)>127;
 if($1){label=2;break;}else{label=4;break;}
 case 2: 
 var $3=($x)*((1.7014118346046923e+38));
 var $4=((($n)-(127))|0);
 var $5=($4|0)>127;
 if($5){label=3;break;}else{var $y_0=$3;var $_0=$4;label=7;break;}
 case 3: 
 var $7=($3)*((1.7014118346046923e+38));
 var $8=((($n)-(254))|0);
 var $9=($8|0)>127;
 var $_=($9?127:$8);
 var $y_0=$7;var $_0=$_;label=7;break;
 case 4: 
 var $11=($n|0)<-126;
 if($11){label=5;break;}else{var $y_0=$x;var $_0=$n;label=7;break;}
 case 5: 
 var $13=($x)*((1.1754943508222875e-38));
 var $14=((($n)+(126))|0);
 var $15=($14|0)<-126;
 if($15){label=6;break;}else{var $y_0=$13;var $_0=$14;label=7;break;}
 case 6: 
 var $17=($13)*((1.1754943508222875e-38));
 var $18=((($n)+(252))|0);
 var $19=($18|0)<-126;
 var $_1=($19?-126:$18);
 var $y_0=$17;var $_0=$_1;label=7;break;
 case 7: 
 var $_0;
 var $y_0;
 var $21=$_0<<23;
 var $22=((($21)+(1065353216))|0);
 var $23=(HEAP32[((tempDoublePtr)>>2)]=$22,HEAPF32[((tempDoublePtr)>>2)]);
 var $24=($y_0)*($23);
 return $24;
  default: assert(0, "bad label: " + label);
 }

}


function _tgamma($x){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__x;
 HEAPF64[(tempDoublePtr)>>3]=$x; var $1$0=HEAP32[((tempDoublePtr)>>2)];var $1$1=HEAP32[(((tempDoublePtr)+(4))>>2)];
 var $$etemp$0$0=0;
 var $$etemp$0$1=2146435072;
 var $2$0=$1$0&$$etemp$0$0;
 var $2$1=$1$1&$$etemp$0$1;
 var $$etemp$1$0=0;
 var $$etemp$1$1=2146435072;
 var $3=(($2$1>>>0) < ($$etemp$1$1>>>0)) | (((($2$1>>>0) == ($$etemp$1$1>>>0) & ($2$0>>>0) <  ($$etemp$1$0>>>0))));
 if($3){label=3;break;}else{label=2;break;}
 case 2: 
 var $5=($x)+(Infinity);
 var $_0=$5;label=29;break;
 case 3: 
 var $7=Math_floor($x);
 var $8=$7==$x;
 if($8){label=4;break;}else{label=9;break;}
 case 4: 
 var $10=$x==0;
 if($10){label=5;break;}else{label=6;break;}
 case 5: 
 var $12=(1)/($x);
 var $_0=$12;label=29;break;
 case 6: 
 var $14=$x<0;
 if($14){var $_0=NaN;label=29;break;}else{label=7;break;}
 case 7: 
 var $16=$x>23;
 if($16){label=9;break;}else{label=8;break;}
 case 8: 
 var $18=(($x)&-1);
 var $19=((($18)-(1))|0);
 var $20=((104696+($19<<3))|0);
 var $21=HEAPF64[(($20)>>3)];
 var $ld$2$0=(($20)|0);
 var $21$$SHADOW$0=HEAP32[(($ld$2$0)>>2)];
 var $ld$3$1=(($20+4)|0);
 var $21$$SHADOW$1=HEAP32[(($ld$3$1)>>2)];
 var $_0=$21;label=29;break;
 case 9: 
 var $23=Math_abs($x);
 var $24=$23<(5.551115123125783e-17);
 if($24){label=10;break;}else{label=11;break;}
 case 10: 
 var $26=(1)/($x);
 var $_0=$26;label=29;break;
 case 11: 
 var $28=$23<184;
 if($28){label=15;break;}else{label=12;break;}
 case 12: 
 var $30=$x<0;
 if($30){label=13;break;}else{label=14;break;}
 case 13: 
 var $32=((1.1754943508222875e-38))/($x);
 var $33=$32;
 $__x=$33;
 var $34=($7)*((0.5));
 var $35=($x)*((0.5));
 var $36=Math_floor($35);
 var $37=$34==$36;
 var $_=($37?0:(-.0));
 var $_0=$_;label=29;break;
 case 14: 
 var $39=($x)*((8.98846567431158e+307));
 var $_0=$39;label=29;break;
 case 15: 
 var $41=($23)+((5.52468004077673));
 var $42=$23>(5.52468004077673);
 if($42){label=16;break;}else{label=17;break;}
 case 16: 
 var $44=($41)-($23);
 var $45=($44)+((-5.52468004077673));
 var $dy_0=$45;label=18;break;
 case 17: 
 var $47=($41)+((-5.52468004077673));
 var $48=($47)-($23);
 var $dy_0=$48;label=18;break;
 case 18: 
 var $dy_0;
 var $50=($23)+((-0.5));
 var $51=$23<8;
 if($51){label=20;break;}else{label=19;break;}
 case 19: 
 var $52=(0)/($23);
 var $53=($52)+((23531376880.41076));
 var $54=$52;
 var $55=($53)/($23);
 var $56=($55)+((42919803642.6491));
 var $57=($54)/($23);
 var $58=($57)+(39916800);
 var $59=($56)/($23);
 var $60=($59)+((35711959237.35567));
 var $61=($58)/($23);
 var $62=($61)+(120543840);
 var $63=($60)/($23);
 var $64=($63)+((17921034426.03721));
 var $65=($62)/($23);
 var $66=($65)+(150917976);
 var $67=($64)/($23);
 var $68=($67)+((6039542586.352028));
 var $69=($66)/($23);
 var $70=($69)+(105258076);
 var $71=($68)/($23);
 var $72=($71)+((1439720407.3117216));
 var $73=($70)/($23);
 var $74=($73)+(45995730);
 var $75=($72)/($23);
 var $76=($75)+((248874557.86205417));
 var $77=($74)/($23);
 var $78=($77)+(13339535);
 var $79=($76)/($23);
 var $80=($79)+((31426415.585400194));
 var $81=($78)/($23);
 var $82=($81)+(2637558);
 var $83=($80)/($23);
 var $84=($83)+((2876370.6289353725));
 var $85=($82)/($23);
 var $86=($85)+(357423);
 var $87=($84)/($23);
 var $88=($87)+((186056.26539522348));
 var $89=($86)/($23);
 var $90=($89)+(32670);
 var $91=($88)/($23);
 var $92=($91)+((8071.672002365816));
 var $93=($90)/($23);
 var $94=($93)+(1925);
 var $95=($92)/($23);
 var $96=($95)+((210.82427775157936));
 var $97=($94)/($23);
 var $98=($97)+(66);
 var $99=($96)/($23);
 var $100=($99)+((2.5066282746310002));
 var $101=($98)/($23);
 var $102=($101)+(1);
 var $den_2_i=$102;var $num_2_i=$100;label=21;break;
 case 20: 
 var $103=($23)*(0);
 var $104=($103)+((2.5066282746310002));
 var $105=($103)+(1);
 var $106=($23)*($104);
 var $107=($106)+((210.82427775157936));
 var $108=($23)*($105);
 var $109=($108)+(66);
 var $110=($23)*($107);
 var $111=($110)+((8071.672002365816));
 var $112=($23)*($109);
 var $113=($112)+(1925);
 var $114=($23)*($111);
 var $115=($114)+((186056.26539522348));
 var $116=($23)*($113);
 var $117=($116)+(32670);
 var $118=($23)*($115);
 var $119=($118)+((2876370.6289353725));
 var $120=($23)*($117);
 var $121=($120)+(357423);
 var $122=($23)*($119);
 var $123=($122)+((31426415.585400194));
 var $124=($23)*($121);
 var $125=($124)+(2637558);
 var $126=($23)*($123);
 var $127=($126)+((248874557.86205417));
 var $128=($23)*($125);
 var $129=($128)+(13339535);
 var $130=($23)*($127);
 var $131=($130)+((1439720407.3117216));
 var $132=($23)*($129);
 var $133=($132)+(45995730);
 var $134=($23)*($131);
 var $135=($134)+((6039542586.352028));
 var $136=($23)*($133);
 var $137=($136)+(105258076);
 var $138=($23)*($135);
 var $139=($138)+((17921034426.03721));
 var $140=($23)*($137);
 var $141=($140)+(150917976);
 var $142=($23)*($139);
 var $143=($142)+((35711959237.35567));
 var $144=($23)*($141);
 var $145=($144)+(120543840);
 var $146=($23)*($143);
 var $147=($146)+((42919803642.6491));
 var $148=($23)*($145);
 var $149=($148)+(39916800);
 var $150=($23)*($147);
 var $151=($150)+((23531376880.41076));
 var $152=($23)*($149);
 var $153=$152;
 var $den_2_i=$153;var $num_2_i=$151;label=21;break;
 case 21: 
 var $num_2_i;
 var $den_2_i;
 var $154=($num_2_i)/($den_2_i);
 var $155=((-.0))-($41);
 var $156=Math_exp($155);
 var $157=($154)*($156);
 var $158=$x<0;
 if($158){label=22;break;}else{var $r_0=$157;var $z_0=$50;var $dy_1=$dy_0;label=28;break;}
 case 22: 
 var $160=($23)*((0.5));
 var $161=Math_floor($160);
 var $162=($160)-($161);
 var $163=($162)*(2);
 var $164=($163)*(4);
 var $165=(($164)&-1);
 var $166=((($165)+(1))|0);
 var $167=(((($166|0))/(2))&-1);
 var $168=($167|0);
 var $169=($168)*((0.5));
 var $170=($163)-($169);
 var $171=($170)*((3.141592653589793));
 if(($167|0)==1){ label=24;break;}else if(($167|0)==2){ label=25;break;}else if(($167|0)==3){ label=26;break;}else{label=23;break;}
 case 23: 
 var $173=___sin($171,0,0);
 var $_0_i=$173;label=27;break;
 case 24: 
 var $175=___cos($171,0);
 var $_0_i=$175;label=27;break;
 case 25: 
 var $177=(-$171);
 var $178=___sin($177,0,0);
 var $_0_i=$178;label=27;break;
 case 26: 
 var $180=___cos($171,0);
 var $181=((-.0))-($180);
 var $_0_i=$181;label=27;break;
 case 27: 
 var $_0_i;
 var $182=($23)*($_0_i);
 var $183=($157)*($182);
 var $184=((-3.141592653589793))/($183);
 var $185=((-.0))-($dy_0);
 var $186=((-.0))-($50);
 var $r_0=$184;var $z_0=$186;var $dy_1=$185;label=28;break;
 case 28: 
 var $dy_1;
 var $z_0;
 var $r_0;
 var $188=($dy_1)*((6.02468004077673));
 var $189=($188)*($r_0);
 var $190=($189)/($41);
 var $191=($r_0)+($190);
 var $192=($z_0)*((0.5));
 var $193=Math_pow($41,$192);
 var $194=($191)*($193);
 var $195=($193)*($194);
 var $_0=$195;label=29;break;
 case 29: 
 var $_0;
 STACKTOP=sp;return $_0;
  default: assert(0, "bad label: " + label);
 }

}


function _tgammaf($x){
 var label=0;


 var $1=$x;
 var $2=_tgamma($1);
 var $3=$2;
 return $3;
}


function _tgammal($x){
 var label=0;


 var $1=_tgamma($x);
 return $1;
}


function _getopt($argc,$argv,$optstring){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $c=sp;
 var $d=(sp)+(8);
 var $1=HEAP32[((11544)>>2)];
 var $2=($1|0)==0;
 var $3=HEAP32[((141584)>>2)];
 var $4=($3|0)!=0;
 var $or_cond=$2|$4;
 if($or_cond){label=2;break;}else{var $7=$1;label=3;break;}
 case 2: 
 HEAP32[((141584)>>2)]=0;
 HEAP32[((141592)>>2)]=0;
 HEAP32[((11544)>>2)]=1;
 var $7=1;label=3;break;
 case 3: 
 var $7;
 var $8=($7|0)<($argc|0);
 if($8){label=4;break;}else{var $_0=-1;label=28;break;}
 case 4: 
 var $10=(($argv+($7<<2))|0);
 var $11=HEAP32[(($10)>>2)];
 var $12=($11|0)==0;
 if($12){var $_0=-1;label=28;break;}else{label=5;break;}
 case 5: 
 var $14=HEAP8[($11)];
 var $15=(($14<<24)>>24)==45;
 if($15){label=6;break;}else{var $_0=-1;label=28;break;}
 case 6: 
 var $17=(($11+1)|0);
 var $18=HEAP8[($17)];
 if((($18<<24)>>24)==0){ var $_0=-1;label=28;break;}else if((($18<<24)>>24)==45){ label=7;break;}else{label=9;break;}
 case 7: 
 var $20=(($11+2)|0);
 var $21=HEAP8[($20)];
 var $22=(($21<<24)>>24)==0;
 if($22){label=8;break;}else{label=9;break;}
 case 8: 
 var $24=((($7)+(1))|0);
 HEAP32[((11544)>>2)]=$24;
 var $_0=-1;label=28;break;
 case 9: 
 var $25=HEAP32[((141592)>>2)];
 var $26=($25|0)==0;
 if($26){label=10;break;}else{var $29=$25;label=11;break;}
 case 10: 
 HEAP32[((141592)>>2)]=1;
 var $29=1;label=11;break;
 case 11: 
 var $29;
 var $30=(($11+$29)|0);
 var $31=_mbtowc($c,$30,4);
 var $32=($31|0)<0;
 if($32){label=13;break;}else{label=12;break;}
 case 12: 
 var $_pre=HEAP32[(($c)>>2)];
 var $k_0=$31;var $35=$_pre;label=14;break;
 case 13: 
 HEAP32[(($c)>>2)]=65533;
 var $k_0=1;var $35=65533;label=14;break;
 case 14: 
 var $35;
 var $k_0;
 var $36=HEAP32[((11544)>>2)];
 var $37=(($argv+($36<<2))|0);
 var $38=HEAP32[(($37)>>2)];
 var $39=HEAP32[((141592)>>2)];
 var $40=(($38+$39)|0);
 HEAP32[((141024)>>2)]=$35;
 var $41=((($39)+($k_0))|0);
 HEAP32[((141592)>>2)]=$41;
 var $42=(($38+$41)|0);
 var $43=HEAP8[($42)];
 var $44=(($43<<24)>>24)==0;
 if($44){label=15;break;}else{label=16;break;}
 case 15: 
 var $46=((($36)+(1))|0);
 HEAP32[((11544)>>2)]=$46;
 HEAP32[((141592)>>2)]=0;
 label=16;break;
 case 16: 
 var $47=_mbtowc($d,$optstring,4);
 var $48=($47|0)==0;
 if($48){var $i_0_lcssa=0;label=19;break;}else{var $i_04=0;var $49=$47;label=17;break;}
 case 17: 
 var $49;
 var $i_04;
 var $50=HEAP32[(($d)>>2)];
 var $51=HEAP32[(($c)>>2)];
 var $52=($50|0)==($51|0);
 if($52){var $i_0_lcssa=$i_04;label=19;break;}else{label=18;break;}
 case 18: 
 var $54=($49|0)<1;
 var $55=($54?1:$49);
 var $56=((($55)+($i_04))|0);
 var $57=(($optstring+$56)|0);
 var $58=_mbtowc($d,$57,4);
 var $59=($58|0)==0;
 if($59){var $i_0_lcssa=$56;label=19;break;}else{var $i_04=$56;var $49=$58;label=17;break;}
 case 19: 
 var $i_0_lcssa;
 var $60=HEAP32[(($d)>>2)];
 var $61=HEAP32[(($c)>>2)];
 var $62=($60|0)==($61|0);
 if($62){label=22;break;}else{label=20;break;}
 case 20: 
 var $64=HEAP8[($optstring)];
 var $65=(($64<<24)>>24)!=58;
 var $66=HEAP32[((11552)>>2)];
 var $67=($66|0)!=0;
 var $or_cond3=$65&$67;
 if($or_cond3){label=21;break;}else{var $_0=63;label=28;break;}
 case 21: 
 var $69=HEAP32[(($argv)>>2)];
 var $70=_strlen($69);
 var $71=_write(2,$69,$70);
 var $72=_write(2,138352,18);
 var $73=_write(2,$40,$k_0);
 var $74=_write(2,139312,1);
 var $_0=63;label=28;break;
 case 22: 
 var $76=((($i_0_lcssa)+(1))|0);
 var $77=(($optstring+$76)|0);
 var $78=HEAP8[($77)];
 var $79=(($78<<24)>>24)==58;
 if($79){label=23;break;}else{var $_0=$60;label=28;break;}
 case 23: 
 var $81=HEAP32[((11544)>>2)];
 var $82=($81|0)<($argc|0);
 if($82){label=27;break;}else{label=24;break;}
 case 24: 
 var $84=HEAP8[($optstring)];
 var $85=(($84<<24)>>24)==58;
 if($85){var $_0=58;label=28;break;}else{label=25;break;}
 case 25: 
 var $87=HEAP32[((11552)>>2)];
 var $88=($87|0)==0;
 if($88){var $_0=63;label=28;break;}else{label=26;break;}
 case 26: 
 var $90=HEAP32[(($argv)>>2)];
 var $91=_strlen($90);
 var $92=_write(2,$90,$91);
 var $93=_write(2,139088,31);
 var $94=_write(2,$40,$k_0);
 var $95=_write(2,139312,1);
 var $_0=63;label=28;break;
 case 27: 
 var $97=((($81)+(1))|0);
 HEAP32[((11544)>>2)]=$97;
 var $98=(($argv+($81<<2))|0);
 var $99=HEAP32[(($98)>>2)];
 var $100=HEAP32[((141592)>>2)];
 var $101=(($99+$100)|0);
 HEAP32[((141032)>>2)]=$101;
 HEAP32[((141592)>>2)]=0;
 var $_0=$60;label=28;break;
 case 28: 
 var $_0;
 STACKTOP=sp;return $_0;
  default: assert(0, "bad label: " + label);
 }

}


function _getopt_long($argc,$argv,$optstring,$longopts,$idx){
 var label=0;


 var $1=___getopt_long($argc,$argv,$optstring,$longopts,$idx,0);
 return $1;
}


function ___getopt_long($argc,$argv,$optstring,$longopts,$idx,$longonly){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=HEAP32[((11544)>>2)];
 var $2=($1|0)==0;
 var $3=HEAP32[((141584)>>2)];
 var $4=($3|0)!=0;
 var $or_cond=$2|$4;
 if($or_cond){label=2;break;}else{var $7=$1;label=3;break;}
 case 2: 
 HEAP32[((141584)>>2)]=0;
 HEAP32[((141592)>>2)]=0;
 HEAP32[((11544)>>2)]=1;
 var $7=1;label=3;break;
 case 3: 
 var $7;
 var $8=($7|0)<($argc|0);
 if($8){label=4;break;}else{var $_0=-1;label=30;break;}
 case 4: 
 var $10=(($argv+($7<<2))|0);
 var $11=HEAP32[(($10)>>2)];
 var $12=($11|0)==0;
 if($12){var $_0=-1;label=30;break;}else{label=5;break;}
 case 5: 
 var $14=HEAP8[($11)];
 var $15=(($14<<24)>>24)==45;
 if($15){label=6;break;}else{var $_0=-1;label=30;break;}
 case 6: 
 var $17=($longonly|0)==0;
 var $_phi_trans_insert=(($11+1)|0);
 var $_pre=HEAP8[($_phi_trans_insert)];
 if($17){label=8;break;}else{label=7;break;}
 case 7: 
 var $19=(($_pre<<24)>>24)==0;
 if($19){label=29;break;}else{var $25=$_pre;label=10;break;}
 case 8: 
 var $phitmp=(($_pre<<24)>>24)==45;
 if($phitmp){label=9;break;}else{label=29;break;}
 case 9: 
 var $22=(($11+2)|0);
 var $23=HEAP8[($22)];
 var $24=(($23<<24)>>24)==0;
 if($24){label=29;break;}else{var $25=45;label=10;break;}
 case 10: 
 var $25;
 var $26=(($longopts)|0);
 var $27=HEAP32[(($26)>>2)];
 var $28=($27|0)==0;
 var $29=(($11+1)|0);
 var $30=(($25<<24)>>24)==45;
 if($28){label=27;break;}else{var $i_018=0;var $31=$27;label=11;break;}
 case 11: 
 var $31;
 var $i_018;
 var $32=(($11+2)|0);
 var $_=($30?$32:$29);
 var $33=HEAP8[($31)];
 var $34=(($33<<24)>>24)==0;
 if($34){var $opt_04=$_;label=15;break;}else{var $name_05=$31;var $opt_06=$_;var $_pr=$33;label=12;break;}
 case 12: 
 var $_pr;
 var $opt_06;
 var $name_05;
 var $35=HEAP8[($opt_06)];
 var $36=(($_pr<<24)>>24)==(($35<<24)>>24);
 if($36){label=13;break;}else{label=14;break;}
 case 13: 
 var $38=(($name_05+1)|0);
 var $39=(($opt_06+1)|0);
 var $40=HEAP8[($38)];
 var $41=(($40<<24)>>24)==0;
 if($41){var $opt_04=$39;label=15;break;}else{var $name_05=$38;var $opt_06=$39;var $_pr=$40;label=12;break;}
 case 14: 
 var $42=(($_pr<<24)>>24)==0;
 if($42){var $opt_04=$opt_06;label=15;break;}else{label=26;break;}
 case 15: 
 var $opt_04;
 var $43=HEAP8[($opt_04)];
 if((($43<<24)>>24)==0|(($43<<24)>>24)==61){ label=16;break;}else{label=26;break;}
 case 16: 
 var $45=(($43<<24)>>24)==61;
 var $46=(($longopts+($i_018<<4)+4)|0);
 var $47=HEAP32[(($46)>>2)];
 if($45){label=17;break;}else{label=19;break;}
 case 17: 
 var $49=($47|0)==0;
 if($49){label=26;break;}else{label=18;break;}
 case 18: 
 var $51=(($opt_04+1)|0);
 HEAP32[((141032)>>2)]=$51;
 var $61=$7;label=22;break;
 case 19: 
 var $53=($47|0)==1;
 if($53){label=20;break;}else{label=21;break;}
 case 20: 
 var $55=((($7)+(1))|0);
 HEAP32[((11544)>>2)]=$55;
 var $56=(($argv+($55<<2))|0);
 var $57=HEAP32[(($56)>>2)];
 HEAP32[((141032)>>2)]=$57;
 var $58=($57|0)==0;
 if($58){var $_0=58;label=30;break;}else{var $61=$55;label=22;break;}
 case 21: 
 HEAP32[((141032)>>2)]=0;
 var $61=$7;label=22;break;
 case 22: 
 var $61;
 var $62=((($61)+(1))|0);
 HEAP32[((11544)>>2)]=$62;
 var $63=($idx|0)==0;
 if($63){label=24;break;}else{label=23;break;}
 case 23: 
 HEAP32[(($idx)>>2)]=$i_018;
 label=24;break;
 case 24: 
 var $66=(($longopts+($i_018<<4)+8)|0);
 var $67=HEAP32[(($66)>>2)];
 var $68=($67|0)==0;
 var $69=(($longopts+($i_018<<4)+12)|0);
 var $70=HEAP32[(($69)>>2)];
 if($68){var $_0=$70;label=30;break;}else{label=25;break;}
 case 25: 
 HEAP32[(($67)>>2)]=$70;
 var $_0=0;label=30;break;
 case 26: 
 var $73=((($i_018)+(1))|0);
 var $74=(($longopts+($73<<4))|0);
 var $75=HEAP32[(($74)>>2)];
 var $76=($75|0)==0;
 if($76){label=27;break;}else{var $i_018=$73;var $31=$75;label=11;break;}
 case 27: 
 if($30){label=28;break;}else{label=29;break;}
 case 28: 
 var $78=((($7)+(1))|0);
 HEAP32[((11544)>>2)]=$78;
 var $_0=63;label=30;break;
 case 29: 
 var $79=_getopt($argc,$argv,$optstring);
 var $_0=$79;label=30;break;
 case 30: 
 var $_0;
 return $_0;
  default: assert(0, "bad label: " + label);
 }

}


function _getopt_long_only($argc,$argv,$optstring,$longopts,$idx){
 var label=0;


 var $1=___getopt_long($argc,$argv,$optstring,$longopts,$idx,1);
 return $1;
}


function _btowc($c){
 var label=0;


 var $1=($c>>>0)<128;
 var $2=($1?$c:-1);
 return $2;
}


function _mblen($s,$n){
 var label=0;


 var $1=_mbtowc(0,$s,$n);
 return $1;
}


function _mbrlen($s,$n,$st){
 var label=0;


 var $1=($st|0)!=0;
 var $2=($1?$st:141072);
 var $3=_mbrtowc(0,$s,$n,$2);
 return $3;
}


function _mbrtowc($wc,$src,$n,$st){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=sp;
 HEAP32[(($1)>>2)]=$wc;
 var $2=($st|0)==0;
 var $_01=($2?141064:$st);
 var $3=(($_01)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=($src|0)==0;
 if($5){label=2;break;}else{label=3;break;}
 case 2: 
 var $7=($4|0)==0;
 if($7){var $_0=0;label=19;break;}else{label=18;break;}
 case 3: 
 var $9=($wc|0)==0;
 if($9){label=4;break;}else{var $13=$wc;label=5;break;}
 case 4: 
 var $11=$1;
 HEAP32[(($1)>>2)]=$11;
 var $13=$11;label=5;break;
 case 5: 
 var $13;
 var $14=($n|0)==0;
 if($14){var $_0=-2;label=19;break;}else{label=6;break;}
 case 6: 
 var $16=($4|0)==0;
 if($16){label=7;break;}else{var $s_0=$src;var $c_0=$4;var $_02=$n;label=11;break;}
 case 7: 
 var $18=HEAP8[($src)];
 var $19=($18&255);
 var $20=(($18<<24)>>24)>-1;
 if($20){label=8;break;}else{label=9;break;}
 case 8: 
 HEAP32[(($13)>>2)]=$19;
 var $22=(($18<<24)>>24)!=0;
 var $23=($22&1);
 var $_0=$23;label=19;break;
 case 9: 
 var $25=((($19)-(194))|0);
 var $26=($25>>>0)>50;
 if($26){label=18;break;}else{label=10;break;}
 case 10: 
 var $28=(($src+1)|0);
 var $29=((140232+($25<<2))|0);
 var $30=HEAP32[(($29)>>2)];
 var $31=((($n)-(1))|0);
 var $s_0=$28;var $c_0=$30;var $_02=$31;label=11;break;
 case 11: 
 var $_02;
 var $c_0;
 var $s_0;
 var $33=($_02|0)==0;
 if($33){var $c_2=$c_0;label=17;break;}else{label=12;break;}
 case 12: 
 var $35=HEAP8[($s_0)];
 var $36=($35&255);
 var $37=$36>>>3;
 var $38=((($37)-(16))|0);
 var $39=$c_0>>26;
 var $40=((($37)+($39))|0);
 var $41=$38|$40;
 var $42=($41>>>0)>7;
 if($42){label=18;break;}else{var $s_1=$s_0;var $c_1=$c_0;var $_1=$_02;var $43=$35;label=13;break;}
 case 13: 
 var $43;
 var $_1;
 var $c_1;
 var $s_1;
 var $44=$c_1<<6;
 var $45=(($s_1+1)|0);
 var $46=($43&255);
 var $47=((($46)-(128))|0);
 var $48=$47|$44;
 var $49=((($_1)-(1))|0);
 var $50=($48|0)<0;
 if($50){label=15;break;}else{label=14;break;}
 case 14: 
 HEAP32[(($3)>>2)]=0;
 HEAP32[(($13)>>2)]=$48;
 var $52=((($n)-($49))|0);
 var $_0=$52;label=19;break;
 case 15: 
 var $54=($49|0)==0;
 if($54){var $c_2=$48;label=17;break;}else{label=16;break;}
 case 16: 
 var $56=HEAP8[($45)];
 var $57=($56&255);
 var $58=((($57)-(128))|0);
 var $59=($58>>>0)>63;
 if($59){label=18;break;}else{var $s_1=$45;var $c_1=$48;var $_1=$49;var $43=$56;label=13;break;}
 case 17: 
 var $c_2;
 HEAP32[(($3)>>2)]=$c_2;
 var $_0=-2;label=19;break;
 case 18: 
 HEAP32[(($3)>>2)]=0;
 var $60=___errno_location();
 HEAP32[(($60)>>2)]=84;
 var $_0=-1;label=19;break;
 case 19: 
 var $_0;
 STACKTOP=sp;return $_0;
  default: assert(0, "bad label: " + label);
 }

}


function _mbsinit($st){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($st|0)==0;
 if($1){var $7=1;label=3;break;}else{label=2;break;}
 case 2: 
 var $3=(($st)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=($4|0)==0;
 var $phitmp=($5&1);
 var $7=$phitmp;label=3;break;
 case 3: 
 var $7;
 return $7;
  default: assert(0, "bad label: " + label);
 }

}


function _mbsnrtowcs($wcs,$src,$n,$wn,$st){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+1032)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $wbuf=sp;
 var $s=(sp)+(1024);
 var $1=$wbuf;
 var $$etemp$0$0=1024;
 var $$etemp$0$1=0;

 var $2=HEAP32[(($src)>>2)];
 HEAP32[(($s)>>2)]=$2;
 var $3=($wcs|0)!=0;
 var $4=(($wbuf)|0);
 var $wn_=($3?$wn:256);
 var $wcs_=($3?$wcs:$4);
 var $5=($2|0)==0;
 var $6=($wn_|0)==0;
 var $or_cond22=$5|$6;
 if($or_cond22){var $_1=$n;var $cnt_1=0;var $_26=$wn_;var $ws_018=$wcs_;var $23=$2;label=8;break;}else{var $_0423=$wn_;var $cnt_024=0;var $ws_025=$wcs_;var $_026=$n;var $_pr41=$2;label=2;break;}
 case 2: 
 var $_pr41;
 var $_026;
 var $ws_025;
 var $cnt_024;
 var $_0423;
 var $7=$_026>>>2;
 var $8=($7>>>0)>=($_0423>>>0);
 var $9=($_026>>>0)>131;
 var $or_cond7=$8|$9;
 if($or_cond7){label=3;break;}else{var $_1=$_026;var $cnt_1=$cnt_024;var $_26=$_0423;var $ws_018=$ws_025;var $23=$_pr41;label=8;break;}
 case 3: 
 var $_04_=($8?$_0423:$7);
 var $10=((($_026)-($_04_))|0);
 var $11=_mbsrtowcs($ws_025,$s,$_04_,$st);
 var $12=($11|0)==-1;
 if($12){label=4;break;}else{label=5;break;}
 case 4: 
 var $_pr_pre=HEAP32[(($s)>>2)];
 var $_1=$10;var $cnt_1=-1;var $_26=0;var $ws_018=$ws_025;var $23=$_pr_pre;label=8;break;
 case 5: 
 var $14=($ws_025|0)==($4|0);
 if($14){var $ws_1=$4;var $_15=$_0423;label=7;break;}else{label=6;break;}
 case 6: 
 var $16=(($ws_025+($11<<2))|0);
 var $17=((($_0423)-($11))|0);
 var $ws_1=$16;var $_15=$17;label=7;break;
 case 7: 
 var $_15;
 var $ws_1;
 var $19=((($11)+($cnt_024))|0);
 var $20=HEAP32[(($s)>>2)];
 var $21=($20|0)==0;
 var $22=($_15|0)==0;
 var $or_cond=$21|$22;
 if($or_cond){var $_1=$10;var $cnt_1=$19;var $_26=$_15;var $ws_018=$ws_1;var $23=$20;label=8;break;}else{var $_0423=$_15;var $cnt_024=$19;var $ws_025=$ws_1;var $_026=$10;var $_pr41=$20;label=2;break;}
 case 8: 
 var $23;
 var $ws_018;
 var $_26;
 var $cnt_1;
 var $_1;
 var $24=($23|0)==0;
 if($24){var $cnt_3=$cnt_1;label=15;break;}else{label=9;break;}
 case 9: 
 var $25=($_26|0)==0;
 var $26=($_1|0)==0;
 var $or_cond810=$25|$26;
 if($or_cond810){var $cnt_3=$cnt_1;label=15;break;}else{var $_311=$_26;var $cnt_212=$cnt_1;var $ws_213=$ws_018;var $_214=$_1;var $27=$23;label=10;break;}
 case 10: 
 var $27;
 var $_214;
 var $ws_213;
 var $cnt_212;
 var $_311;
 var $28=_mbrtowc($ws_213,$27,$_214,$st);
 var $29=((($28)+(2))|0);
 var $30=($29>>>0)<3;
 if($30){label=11;break;}else{label=14;break;}
 case 11: 
 if(($28|0)==0){ label=12;break;}else if(($28|0)==-1){ var $cnt_3=-1;label=15;break;}else{label=13;break;}
 case 12: 
 HEAP32[(($s)>>2)]=0;
 var $cnt_3=$cnt_212;label=15;break;
 case 13: 
 var $34=(($st)|0);
 HEAP32[(($34)>>2)]=0;
 var $cnt_3=$cnt_212;label=15;break;
 case 14: 
 var $36=HEAP32[(($s)>>2)];
 var $37=(($36+$28)|0);
 HEAP32[(($s)>>2)]=$37;
 var $38=((($_214)-($28))|0);
 var $39=(($ws_213+4)|0);
 var $40=((($_311)-(1))|0);
 var $41=((($cnt_212)+(1))|0);
 var $42=($40|0)==0;
 var $43=($_214|0)==($28|0);
 var $or_cond8=$42|$43;
 if($or_cond8){var $cnt_3=$41;label=15;break;}else{var $_311=$40;var $cnt_212=$41;var $ws_213=$39;var $_214=$38;var $27=$37;label=10;break;}
 case 15: 
 var $cnt_3;
 if($3){label=16;break;}else{label=17;break;}
 case 16: 
 var $45=HEAP32[(($s)>>2)];
 HEAP32[(($src)>>2)]=$45;
 label=17;break;
 case 17: 
 var $$etemp$1$0=1024;
 var $$etemp$1$1=0;

 STACKTOP=sp;return $cnt_3;
  default: assert(0, "bad label: " + label);
 }

}


function _mbsrtowcs($ws,$src,$wn,$st){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=HEAP32[(($src)>>2)];
 var $2=($st|0)==0;
 if($2){label=5;break;}else{label=2;break;}
 case 2: 
 var $4=(($st)|0);
 var $5=HEAP32[(($4)>>2)];
 var $6=($5|0)==0;
 if($6){label=5;break;}else{label=3;break;}
 case 3: 
 var $8=($ws|0)==0;
 if($8){var $c_2=$5;var $s_3=$1;var $_35=$wn;label=16;break;}else{label=4;break;}
 case 4: 
 HEAP32[(($4)>>2)]=0;
 var $c_4=$5;var $s_8=$1;var $_3=$ws;var $_7=$wn;label=36;break;
 case 5: 
 var $11=($ws|0)==0;
 if($11){var $s_0=$1;var $_02=$wn;label=7;break;}else{var $s_5_ph=$1;var $_01_ph=$ws;var $_46_ph=$wn;label=6;break;}
 case 6: 
 var $_46_ph;
 var $_01_ph;
 var $s_5_ph;
 var $12=($_46_ph|0)==0;
 if($12){var $_0=$wn;label=53;break;}else{var $_4622=$_46_ph;var $_0123=$_01_ph;var $s_524=$s_5_ph;label=26;break;}
 case 7: 
 var $_02;
 var $s_0;
 var $13=HEAP8[($s_0)];
 var $14=($13&255);
 var $15=((($14)-(1))|0);
 var $16=($15>>>0)<127;
 if($16){label=8;break;}else{var $s_2=$s_0;var $_24=$_02;var $37=$13;label=12;break;}
 case 8: 
 var $18=$s_0;
 var $19=$18&3;
 var $20=($19|0)==0;
 if($20){label=9;break;}else{var $s_2=$s_0;var $_24=$_02;var $37=$13;label=12;break;}
 case 9: 
 var $21=$s_0;
 var $22=HEAP32[(($21)>>2)];
 var $23=((($22)-(16843009))|0);
 var $24=$23|$22;
 var $25=$24&-2139062144;
 var $26=($25|0)==0;
 var $27=(($22)&255);
 if($26){var $_137=$_02;var $s_18=$s_0;label=10;break;}else{var $s_2=$s_0;var $_24=$_02;var $37=$27;label=12;break;}
 case 10: 
 var $s_18;
 var $_137;
 var $28=(($s_18+4)|0);
 var $29=((($_137)-(4))|0);
 var $30=$28;
 var $31=HEAP32[(($30)>>2)];
 var $32=((($31)-(16843009))|0);
 var $33=$32|$31;
 var $34=$33&-2139062144;
 var $35=($34|0)==0;
 if($35){var $_137=$29;var $s_18=$28;label=10;break;}else{label=11;break;}
 case 11: 
 var $36=(($31)&255);
 var $s_2=$28;var $_24=$29;var $37=$36;label=12;break;
 case 12: 
 var $37;
 var $_24;
 var $s_2;
 var $38=($37&255);
 var $39=((($38)-(1))|0);
 var $40=($39>>>0)<127;
 if($40){label=13;break;}else{label=14;break;}
 case 13: 
 var $42=(($s_2+1)|0);
 var $43=((($_24)-(1))|0);
 var $s_0=$42;var $_02=$43;label=7;break;
 case 14: 
 var $45=((($38)-(194))|0);
 var $46=($45>>>0)>50;
 if($46){var $_840=$_24;var $_442=$ws;var $s_1044=$s_2;label=47;break;}else{label=15;break;}
 case 15: 
 var $48=(($s_2+1)|0);
 var $49=((140232+($45<<2))|0);
 var $50=HEAP32[(($49)>>2)];
 var $c_2=$50;var $s_3=$48;var $_35=$_24;label=16;break;
 case 16: 
 var $_35;
 var $s_3;
 var $c_2;
 var $52=HEAP8[($s_3)];
 var $53=($52&255);
 var $54=$53>>>3;
 var $55=((($54)-(16))|0);
 var $56=$c_2>>26;
 var $57=((($54)+($56))|0);
 var $58=$55|$57;
 var $59=($58>>>0)>7;
 if($59){label=17;break;}else{label=18;break;}
 case 17: 
 var $61=((($s_3)-(1))|0);
 var $c_6=$c_2;var $s_10=$61;var $_4=$ws;var $_8=$_35;label=46;break;
 case 18: 
 var $63=(($s_3+1)|0);
 var $64=$c_2&33554432;
 var $65=($64|0)==0;
 if($65){var $s_4=$63;label=25;break;}else{label=19;break;}
 case 19: 
 var $67=HEAP8[($63)];
 var $68=($67&255);
 var $69=((($68)-(128))|0);
 var $70=($69>>>0)>63;
 if($70){label=20;break;}else{label=21;break;}
 case 20: 
 var $72=((($s_3)-(1))|0);
 var $c_6=$c_2;var $s_10=$72;var $_4=$ws;var $_8=$_35;label=46;break;
 case 21: 
 var $74=(($s_3+2)|0);
 var $75=$c_2&524288;
 var $76=($75|0)==0;
 if($76){var $s_4=$74;label=25;break;}else{label=22;break;}
 case 22: 
 var $78=HEAP8[($74)];
 var $79=($78&255);
 var $80=((($79)-(128))|0);
 var $81=($80>>>0)>63;
 if($81){label=23;break;}else{label=24;break;}
 case 23: 
 var $83=((($s_3)-(1))|0);
 var $c_6=$c_2;var $s_10=$83;var $_4=$ws;var $_8=$_35;label=46;break;
 case 24: 
 var $85=(($s_3+3)|0);
 var $s_4=$85;label=25;break;
 case 25: 
 var $s_4;
 var $87=((($_35)-(1))|0);
 var $s_0=$s_4;var $_02=$87;label=7;break;
 case 26: 
 var $s_524;
 var $_0123;
 var $_4622;
 var $88=HEAP8[($s_524)];
 var $89=($88&255);
 var $90=((($89)-(1))|0);
 var $91=($90>>>0)<127;
 if($91){label=27;break;}else{var $s_7=$s_524;var $_2=$_0123;var $_6=$_4622;var $122=$88;label=32;break;}
 case 27: 
 var $93=$s_524;
 var $94=$93&3;
 var $95=($94|0)==0;
 var $96=($_4622>>>0)>3;
 var $or_cond=$95&$96;
 if($or_cond){var $_512=$_4622;var $_113=$_0123;var $s_614=$s_524;label=28;break;}else{var $s_7=$s_524;var $_2=$_0123;var $_6=$_4622;var $122=$88;label=32;break;}
 case 28: 
 var $s_614;
 var $_113;
 var $_512;
 var $97=$s_614;
 var $98=HEAP32[(($97)>>2)];
 var $99=((($98)-(16843009))|0);
 var $100=$99|$98;
 var $101=$100&-2139062144;
 var $102=($101|0)==0;
 if($102){label=29;break;}else{label=30;break;}
 case 29: 
 var $104=(($s_614+1)|0);
 var $105=$98&255;
 var $106=(($_113+4)|0);
 HEAP32[(($_113)>>2)]=$105;
 var $107=(($s_614+2)|0);
 var $108=HEAP8[($104)];
 var $109=($108&255);
 var $110=(($_113+8)|0);
 HEAP32[(($106)>>2)]=$109;
 var $111=(($s_614+3)|0);
 var $112=HEAP8[($107)];
 var $113=($112&255);
 var $114=(($_113+12)|0);
 HEAP32[(($110)>>2)]=$113;
 var $115=(($s_614+4)|0);
 var $116=HEAP8[($111)];
 var $117=($116&255);
 var $118=(($_113+16)|0);
 HEAP32[(($114)>>2)]=$117;
 var $119=((($_512)-(4))|0);
 var $120=($119>>>0)>3;
 if($120){var $_512=$119;var $_113=$118;var $s_614=$115;label=28;break;}else{label=31;break;}
 case 30: 
 var $121=(($98)&255);
 var $s_7=$s_614;var $_2=$_113;var $_6=$_512;var $122=$121;label=32;break;
 case 31: 
 var $_pre_pre=HEAP8[($115)];
 var $s_7=$115;var $_2=$118;var $_6=$119;var $122=$_pre_pre;label=32;break;
 case 32: 
 var $122;
 var $_6;
 var $_2;
 var $s_7;
 var $123=($122&255);
 var $124=((($123)-(1))|0);
 var $125=($124>>>0)<127;
 if($125){label=33;break;}else{label=34;break;}
 case 33: 
 var $127=(($s_7+1)|0);
 var $128=(($_2+4)|0);
 HEAP32[(($_2)>>2)]=$123;
 var $129=((($_6)-(1))|0);
 var $130=($129|0)==0;
 if($130){var $_0=$wn;label=53;break;}else{var $_4622=$129;var $_0123=$128;var $s_524=$127;label=26;break;}
 case 34: 
 var $132=((($123)-(194))|0);
 var $133=($132>>>0)>50;
 if($133){var $_840=$_6;var $_442=$_2;var $s_1044=$s_7;label=47;break;}else{label=35;break;}
 case 35: 
 var $135=(($s_7+1)|0);
 var $136=((140232+($132<<2))|0);
 var $137=HEAP32[(($136)>>2)];
 var $c_4=$137;var $s_8=$135;var $_3=$_2;var $_7=$_6;label=36;break;
 case 36: 
 var $_7;
 var $_3;
 var $s_8;
 var $c_4;
 var $139=HEAP8[($s_8)];
 var $140=($139&255);
 var $141=$140>>>3;
 var $142=((($141)-(16))|0);
 var $143=$c_4>>26;
 var $144=((($141)+($143))|0);
 var $145=$142|$144;
 var $146=($145>>>0)>7;
 if($146){label=37;break;}else{label=38;break;}
 case 37: 
 var $148=((($s_8)-(1))|0);
 var $c_6=$c_4;var $s_10=$148;var $_4=$_3;var $_8=$_7;label=46;break;
 case 38: 
 var $150=$c_4<<6;
 var $151=(($s_8+1)|0);
 var $152=((($140)-(128))|0);
 var $153=$152|$150;
 var $154=($153|0)<0;
 if($154){label=39;break;}else{var $c_5=$153;var $s_9=$151;label=45;break;}
 case 39: 
 var $156=HEAP8[($151)];
 var $157=($156&255);
 var $158=((($157)-(128))|0);
 var $159=($158>>>0)>63;
 if($159){label=40;break;}else{label=41;break;}
 case 40: 
 var $161=((($s_8)-(1))|0);
 var $c_6=$153;var $s_10=$161;var $_4=$_3;var $_8=$_7;label=46;break;
 case 41: 
 var $163=$153<<6;
 var $164=(($s_8+2)|0);
 var $165=$158|$163;
 var $166=($165|0)<0;
 if($166){label=42;break;}else{var $c_5=$165;var $s_9=$164;label=45;break;}
 case 42: 
 var $168=HEAP8[($164)];
 var $169=($168&255);
 var $170=((($169)-(128))|0);
 var $171=($170>>>0)>63;
 if($171){label=43;break;}else{label=44;break;}
 case 43: 
 var $173=((($s_8)-(1))|0);
 var $c_6=$165;var $s_10=$173;var $_4=$_3;var $_8=$_7;label=46;break;
 case 44: 
 var $175=$165<<6;
 var $176=(($s_8+3)|0);
 var $177=$170|$175;
 var $c_5=$177;var $s_9=$176;label=45;break;
 case 45: 
 var $s_9;
 var $c_5;
 var $179=(($_3+4)|0);
 HEAP32[(($_3)>>2)]=$c_5;
 var $180=((($_7)-(1))|0);
 var $s_5_ph=$s_9;var $_01_ph=$179;var $_46_ph=$180;label=6;break;
 case 46: 
 var $_8;
 var $_4;
 var $s_10;
 var $c_6;
 var $182=($c_6|0)==0;
 if($182){var $_840=$_8;var $_442=$_4;var $s_1044=$s_10;label=47;break;}else{var $_441=$_4;var $s_1043=$s_10;label=51;break;}
 case 47: 
 var $s_1044;
 var $_442;
 var $_840;
 var $183=HEAP8[($s_1044)];
 var $184=(($183<<24)>>24)==0;
 if($184){label=48;break;}else{var $_441=$_442;var $s_1043=$s_1044;label=51;break;}
 case 48: 
 var $186=($_442|0)==0;
 if($186){label=50;break;}else{label=49;break;}
 case 49: 
 HEAP32[(($_442)>>2)]=0;
 HEAP32[(($src)>>2)]=0;
 label=50;break;
 case 50: 
 var $189=((($wn)-($_840))|0);
 var $_0=$189;label=53;break;
 case 51: 
 var $s_1043;
 var $_441;
 var $191=___errno_location();
 HEAP32[(($191)>>2)]=84;
 var $192=($_441|0)==0;
 if($192){var $_0=-1;label=53;break;}else{label=52;break;}
 case 52: 
 HEAP32[(($src)>>2)]=$s_1043;
 var $_0=-1;label=53;break;
 case 53: 
 var $_0;
 return $_0;
  default: assert(0, "bad label: " + label);
 }

}


function _mbstowcs($ws,$s,$wn){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1=sp;
 HEAP32[(($1)>>2)]=$s;
 var $2=_mbsrtowcs($ws,$1,$wn,0);
 STACKTOP=sp;return $2;
}


function _mbtowc($wc,$src,$n){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=sp;
 HEAP32[(($1)>>2)]=$wc;
 var $2=($src|0)==0;
 if($2){var $_0=0;label=19;break;}else{label=2;break;}
 case 2: 
 var $4=($n|0)==0;
 if($4){label=18;break;}else{label=3;break;}
 case 3: 
 var $6=($wc|0)==0;
 if($6){label=4;break;}else{var $10=$wc;label=5;break;}
 case 4: 
 var $8=$1;
 HEAP32[(($1)>>2)]=$8;
 var $10=$8;label=5;break;
 case 5: 
 var $10;
 var $11=HEAP8[($src)];
 var $12=($11&255);
 var $13=(($11<<24)>>24)>-1;
 if($13){label=6;break;}else{label=7;break;}
 case 6: 
 HEAP32[(($10)>>2)]=$12;
 var $15=(($11<<24)>>24)!=0;
 var $16=($15&1);
 var $_0=$16;label=19;break;
 case 7: 
 var $18=((($12)-(194))|0);
 var $19=($18>>>0)>50;
 if($19){label=18;break;}else{label=8;break;}
 case 8: 
 var $21=(($src+1)|0);
 var $22=((140232+($18<<2))|0);
 var $23=HEAP32[(($22)>>2)];
 var $24=($n>>>0)<4;
 if($24){label=9;break;}else{label=10;break;}
 case 9: 
 var $26=((($n)*(6))&-1);
 var $27=((($26)-(6))|0);
 var $28=-2147483648>>>($27>>>0);
 var $29=$23&$28;
 var $30=($29|0)==0;
 if($30){label=10;break;}else{label=18;break;}
 case 10: 
 var $32=HEAP8[($21)];
 var $33=($32&255);
 var $34=$33>>>3;
 var $35=((($34)-(16))|0);
 var $36=$23>>26;
 var $37=((($34)+($36))|0);
 var $38=$35|$37;
 var $39=($38>>>0)>7;
 if($39){label=18;break;}else{label=11;break;}
 case 11: 
 var $41=$23<<6;
 var $42=((($33)-(128))|0);
 var $43=$42|$41;
 var $44=($43|0)<0;
 if($44){label=13;break;}else{label=12;break;}
 case 12: 
 HEAP32[(($10)>>2)]=$43;
 var $_0=2;label=19;break;
 case 13: 
 var $47=(($src+2)|0);
 var $48=HEAP8[($47)];
 var $49=($48&255);
 var $50=((($49)-(128))|0);
 var $51=($50>>>0)>63;
 if($51){label=18;break;}else{label=14;break;}
 case 14: 
 var $53=$43<<6;
 var $54=$50|$53;
 var $55=($54|0)<0;
 if($55){label=16;break;}else{label=15;break;}
 case 15: 
 HEAP32[(($10)>>2)]=$54;
 var $_0=3;label=19;break;
 case 16: 
 var $58=(($src+3)|0);
 var $59=HEAP8[($58)];
 var $60=($59&255);
 var $61=((($60)-(128))|0);
 var $62=($61>>>0)>63;
 if($62){label=18;break;}else{label=17;break;}
 case 17: 
 var $64=$54<<6;
 var $65=$61|$64;
 HEAP32[(($10)>>2)]=$65;
 var $_0=4;label=19;break;
 case 18: 
 var $67=___errno_location();
 HEAP32[(($67)>>2)]=84;
 var $_0=-1;label=19;break;
 case 19: 
 var $_0;
 STACKTOP=sp;return $_0;
  default: assert(0, "bad label: " + label);
 }

}


function _wcrtomb($s,$wc,$st){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($s|0)==0;
 if($1){var $_0=1;label=11;break;}else{label=2;break;}
 case 2: 
 var $3=($wc>>>0)<128;
 if($3){label=3;break;}else{label=4;break;}
 case 3: 
 var $5=(($wc)&255);
 HEAP8[($s)]=$5;
 var $_0=1;label=11;break;
 case 4: 
 var $7=($wc>>>0)<2048;
 if($7){label=5;break;}else{label=6;break;}
 case 5: 
 var $9=$wc>>>6;
 var $10=$9|192;
 var $11=(($10)&255);
 var $12=(($s+1)|0);
 HEAP8[($s)]=$11;
 var $13=$wc&63;
 var $14=$13|128;
 var $15=(($14)&255);
 HEAP8[($12)]=$15;
 var $_0=2;label=11;break;
 case 6: 
 var $17=($wc>>>0)<55296;
 var $18=((($wc)-(57344))|0);
 var $19=($18>>>0)<8192;
 var $or_cond=$17|$19;
 if($or_cond){label=7;break;}else{label=8;break;}
 case 7: 
 var $21=$wc>>>12;
 var $22=$21|224;
 var $23=(($22)&255);
 var $24=(($s+1)|0);
 HEAP8[($s)]=$23;
 var $25=$wc>>>6;
 var $26=$25&63;
 var $27=$26|128;
 var $28=(($27)&255);
 var $29=(($s+2)|0);
 HEAP8[($24)]=$28;
 var $30=$wc&63;
 var $31=$30|128;
 var $32=(($31)&255);
 HEAP8[($29)]=$32;
 var $_0=3;label=11;break;
 case 8: 
 var $34=((($wc)-(65536))|0);
 var $35=($34>>>0)<1048576;
 if($35){label=9;break;}else{label=10;break;}
 case 9: 
 var $37=$wc>>>18;
 var $38=$37|240;
 var $39=(($38)&255);
 var $40=(($s+1)|0);
 HEAP8[($s)]=$39;
 var $41=$wc>>>12;
 var $42=$41&63;
 var $43=$42|128;
 var $44=(($43)&255);
 var $45=(($s+2)|0);
 HEAP8[($40)]=$44;
 var $46=$wc>>>6;
 var $47=$46&63;
 var $48=$47|128;
 var $49=(($48)&255);
 var $50=(($s+3)|0);
 HEAP8[($45)]=$49;
 var $51=$wc&63;
 var $52=$51|128;
 var $53=(($52)&255);
 HEAP8[($50)]=$53;
 var $_0=4;label=11;break;
 case 10: 
 var $55=___errno_location();
 HEAP32[(($55)>>2)]=84;
 var $_0=-1;label=11;break;
 case 11: 
 var $_0;
 return $_0;
  default: assert(0, "bad label: " + label);
 }

}


function _wcsnrtombs($dst,$wcs,$wn,$n,$st){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+264)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $buf=sp;
 var $ws=(sp)+(256);
 var $1=(($buf)|0);
 var $$etemp$0$0=256;
 var $$etemp$0$1=0;

 var $2=HEAP32[(($wcs)>>2)];
 HEAP32[(($ws)>>2)]=$2;
 var $3=($dst|0)!=0;
 var $n_=($3?$n:256);
 var $dst_=($3?$dst:$1);
 var $4=($2|0)==0;
 var $5=($n_|0)==0;
 var $or_cond22=$4|$5;
 if($or_cond22){var $_1=$wn;var $cnt_1=0;var $_26=$n_;var $s_018=$dst_;var $21=$2;label=8;break;}else{var $_0423=$n_;var $cnt_024=0;var $s_025=$dst_;var $_026=$wn;var $_pr41=$2;label=2;break;}
 case 2: 
 var $_pr41;
 var $_026;
 var $s_025;
 var $cnt_024;
 var $_0423;
 var $6=($_026>>>0)>=($_0423>>>0);
 var $7=($_026>>>0)>32;
 var $or_cond7=$6|$7;
 if($or_cond7){label=3;break;}else{var $_1=$_026;var $cnt_1=$cnt_024;var $_26=$_0423;var $s_018=$s_025;var $21=$_pr41;label=8;break;}
 case 3: 
 var $_04__0=($6?$_0423:$_026);
 var $8=((($_026)-($_04__0))|0);
 var $9=_wcsrtombs($s_025,$ws,$_04__0,0);
 var $10=($9|0)==-1;
 if($10){label=4;break;}else{label=5;break;}
 case 4: 
 var $_pr_pre=HEAP32[(($ws)>>2)];
 var $_1=$8;var $cnt_1=-1;var $_26=0;var $s_018=$s_025;var $21=$_pr_pre;label=8;break;
 case 5: 
 var $12=($s_025|0)==($1|0);
 if($12){var $s_1=$1;var $_15=$_0423;label=7;break;}else{label=6;break;}
 case 6: 
 var $14=(($s_025+$9)|0);
 var $15=((($_0423)-($9))|0);
 var $s_1=$14;var $_15=$15;label=7;break;
 case 7: 
 var $_15;
 var $s_1;
 var $17=((($9)+($cnt_024))|0);
 var $18=HEAP32[(($ws)>>2)];
 var $19=($18|0)==0;
 var $20=($_15|0)==0;
 var $or_cond=$19|$20;
 if($or_cond){var $_1=$8;var $cnt_1=$17;var $_26=$_15;var $s_018=$s_1;var $21=$18;label=8;break;}else{var $_0423=$_15;var $cnt_024=$17;var $s_025=$s_1;var $_026=$8;var $_pr41=$18;label=2;break;}
 case 8: 
 var $21;
 var $s_018;
 var $_26;
 var $cnt_1;
 var $_1;
 var $22=($21|0)==0;
 if($22){var $cnt_3=$cnt_1;label=14;break;}else{label=9;break;}
 case 9: 
 var $23=($_26|0)==0;
 var $24=($_1|0)==0;
 var $or_cond810=$23|$24;
 if($or_cond810){var $cnt_3=$cnt_1;label=14;break;}else{var $_311=$_26;var $cnt_212=$cnt_1;var $s_213=$s_018;var $_214=$_1;var $25=$21;label=10;break;}
 case 10: 
 var $25;
 var $_214;
 var $s_213;
 var $cnt_212;
 var $_311;
 var $26=HEAP32[(($25)>>2)];
 var $27=_wcrtomb($s_213,$26,0);
 var $28=((($27)+(1))|0);
 var $29=($28>>>0)<2;
 if($29){label=11;break;}else{label=13;break;}
 case 11: 
 var $31=($27|0)==0;
 if($31){label=12;break;}else{var $cnt_3=-1;label=14;break;}
 case 12: 
 HEAP32[(($ws)>>2)]=0;
 var $cnt_3=$cnt_212;label=14;break;
 case 13: 
 var $34=HEAP32[(($ws)>>2)];
 var $35=(($34+4)|0);
 HEAP32[(($ws)>>2)]=$35;
 var $36=((($_214)-(1))|0);
 var $37=(($s_213+$27)|0);
 var $38=((($_311)-($27))|0);
 var $39=((($cnt_212)+(1))|0);
 var $40=($_311|0)==($27|0);
 var $41=($36|0)==0;
 var $or_cond8=$40|$41;
 if($or_cond8){var $cnt_3=$39;label=14;break;}else{var $_311=$38;var $cnt_212=$39;var $s_213=$37;var $_214=$36;var $25=$35;label=10;break;}
 case 14: 
 var $cnt_3;
 if($3){label=15;break;}else{label=16;break;}
 case 15: 
 var $43=HEAP32[(($ws)>>2)];
 HEAP32[(($wcs)>>2)]=$43;
 label=16;break;
 case 16: 
 var $$etemp$1$0=256;
 var $$etemp$1$1=0;

 STACKTOP=sp;return $cnt_3;
  default: assert(0, "bad label: " + label);
 }

}


function _wcsrtombs($s,$ws,$n,$st){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $buf=sp;
 var $1=($s|0)==0;
 if($1){label=4;break;}else{label=2;break;}
 case 2: 
 var $2=($n>>>0)>3;
 if($2){label=3;break;}else{var $_25_lcssa=$n;var $_02_lcssa=$s;label=9;break;}
 case 3: 
 var $_pre41=HEAP32[(($ws)>>2)];
 var $_2525=$n;var $_0226=$s;var $18=$_pre41;label=8;break;
 case 4: 
 var $4=HEAP32[(($ws)>>2)];
 var $5=(($buf)|0);
 var $6=HEAP32[(($4)>>2)];
 var $7=($6|0)==0;
 if($7){var $_0=0;label=26;break;}else{var $_038=0;var $ws2_09=$4;var $8=$6;label=5;break;}
 case 5: 
 var $8;
 var $ws2_09;
 var $_038;
 var $9=($8>>>0)>127;
 if($9){label=6;break;}else{var $_pn=1;label=7;break;}
 case 6: 
 var $11=_wcrtomb($5,$8,0);
 var $12=($11|0)==-1;
 if($12){var $_0=-1;label=26;break;}else{var $_pn=$11;label=7;break;}
 case 7: 
 var $_pn;
 var $_14=((($_pn)+($_038))|0);
 var $14=(($ws2_09+4)|0);
 var $15=HEAP32[(($14)>>2)];
 var $16=($15|0)==0;
 if($16){var $_0=$_14;label=26;break;}else{var $_038=$_14;var $ws2_09=$14;var $8=$15;label=5;break;}
 case 8: 
 var $18;
 var $_0226;
 var $_2525;
 var $19=HEAP32[(($18)>>2)];
 var $20=($19|0)==0;
 if($20){var $_25_lcssa=$_2525;var $_02_lcssa=$_0226;label=9;break;}else{label=11;break;}
 case 9: 
 var $_02_lcssa;
 var $_25_lcssa;
 var $21=($_25_lcssa|0)==0;
 if($21){var $_414=0;label=25;break;}else{label=10;break;}
 case 10: 
 var $22=(($buf)|0);
 var $_pre=HEAP32[(($ws)>>2)];
 var $_418=$_25_lcssa;var $_219=$_02_lcssa;var $40=$_pre;label=16;break;
 case 11: 
 var $24=($19>>>0)>127;
 if($24){label=12;break;}else{label=14;break;}
 case 12: 
 var $26=_wcrtomb($_0226,$19,0);
 var $27=($26|0)==-1;
 if($27){var $_0=-1;label=26;break;}else{label=13;break;}
 case 13: 
 var $29=(($_0226+$26)|0);
 var $30=((($_2525)-($26))|0);
 var $_1=$29;var $_36=$30;var $36=$18;label=15;break;
 case 14: 
 var $32=(($19)&255);
 var $33=(($_0226+1)|0);
 HEAP8[($_0226)]=$32;
 var $34=((($_2525)-(1))|0);
 var $_pre42=HEAP32[(($ws)>>2)];
 var $_1=$33;var $_36=$34;var $36=$_pre42;label=15;break;
 case 15: 
 var $36;
 var $_36;
 var $_1;
 var $37=(($36+4)|0);
 HEAP32[(($ws)>>2)]=$37;
 var $38=($_36>>>0)>3;
 if($38){var $_2525=$_36;var $_0226=$_1;var $18=$37;label=8;break;}else{var $_25_lcssa=$_36;var $_02_lcssa=$_1;label=9;break;}
 case 16: 
 var $40;
 var $_219;
 var $_418;
 var $41=HEAP32[(($40)>>2)];
 var $42=($41|0)==0;
 if($42){label=24;break;}else{label=17;break;}
 case 17: 
 var $44=($41>>>0)>127;
 if($44){label=18;break;}else{label=22;break;}
 case 18: 
 var $46=_wcrtomb($22,$41,0);
 var $47=($46|0)==-1;
 if($47){var $_0=-1;label=26;break;}else{label=19;break;}
 case 19: 
 var $49=($46>>>0)>($_418>>>0);
 if($49){label=20;break;}else{label=21;break;}
 case 20: 
 var $51=((($n)-($_418))|0);
 var $_0=$51;label=26;break;
 case 21: 
 var $53=HEAP32[(($40)>>2)];
 var $54=_wcrtomb($_219,$53,0);
 var $55=(($_219+$46)|0);
 var $56=((($_418)-($46))|0);
 var $_3=$55;var $_5=$56;var $61=$40;label=23;break;
 case 22: 
 var $58=(($41)&255);
 var $59=(($_219+1)|0);
 HEAP8[($_219)]=$58;
 var $60=((($_418)-(1))|0);
 var $_pre40=HEAP32[(($ws)>>2)];
 var $_3=$59;var $_5=$60;var $61=$_pre40;label=23;break;
 case 23: 
 var $61;
 var $_5;
 var $_3;
 var $62=(($61+4)|0);
 HEAP32[(($ws)>>2)]=$62;
 var $63=($_5|0)==0;
 if($63){var $_414=0;label=25;break;}else{var $_418=$_5;var $_219=$_3;var $40=$62;label=16;break;}
 case 24: 
 HEAP8[($_219)]=0;
 var $_414=$_418;label=25;break;
 case 25: 
 var $_414;
 HEAP32[(($ws)>>2)]=0;
 var $65=((($n)-($_414))|0);
 var $_0=$65;label=26;break;
 case 26: 
 var $_0;
 STACKTOP=sp;return $_0;
  default: assert(0, "bad label: " + label);
 }

}


function _wcstombs($s,$ws,$n){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1=sp;
 HEAP32[(($1)>>2)]=$ws;
 var $2=_wcsrtombs($s,$1,$n,0);
 STACKTOP=sp;return $2;
}


function _wctob($c){
 var label=0;


 var $1=($c>>>0)<128;
 var $c_=($1?$c:-1);
 return $c_;
}


function _wctomb($s,$wc){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($s|0)==0;
 if($1){var $_0=0;label=3;break;}else{label=2;break;}
 case 2: 
 var $3=_wcrtomb($s,$wc,0);
 var $_0=$3;label=3;break;
 case 3: 
 var $_0;
 return $_0;
  default: assert(0, "bad label: " + label);
 }

}


function _fnmatch($pat,$str,$flags){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $inc=sp;
 var $1=$flags&1;
 var $2=($1|0)==0;
 if($2){label=12;break;}else{var $_02=$pat;var $_03=$str;label=2;break;}
 case 2: 
 var $_03;
 var $_02;
 var $s_0=$_03;label=3;break;
 case 3: 
 var $s_0;
 var $4=HEAP8[($s_0)];
 if((($4<<24)>>24)==0|(($4<<24)>>24)==47){ var $p_0=$_02;label=5;break;}else{label=4;break;}
 case 4: 
 var $6=(($s_0+1)|0);
 var $s_0=$6;label=3;break;
 case 5: 
 var $p_0;
 var $7=_pat_next($p_0,-1,$inc,$flags);
 if(($7|0)==-1|($7|0)==47){ label=7;break;}else{label=6;break;}
 case 6: 
 var $9=HEAP32[(($inc)>>2)];
 var $10=(($p_0+$9)|0);
 var $p_0=$10;label=5;break;
 case 7: 
 var $11=HEAP8[($s_0)];
 var $12=(($11<<24)>>24)==0;
 if($12){label=9;break;}else{label=8;break;}
 case 8: 
 var $14=HEAP8[($p_0)];
 var $15=(($14<<24)>>24)==(($11<<24)>>24);
 if($15){label=9;break;}else{var $_0=1;label=13;break;}
 case 9: 
 var $17=$p_0;
 var $18=$_02;
 var $19=((($17)-($18))|0);
 var $20=$s_0;
 var $21=$_03;
 var $22=((($20)-($21))|0);
 var $23=_fnmatch_internal($_02,$19,$_03,$22,$flags);
 var $24=($23|0)==0;
 if($24){label=10;break;}else{var $_0=1;label=13;break;}
 case 10: 
 var $26=HEAP8[($s_0)];
 var $27=(($26<<24)>>24)==0;
 var $28=($7|0)==-1;
 var $or_cond=$27&$28;
 if($or_cond){var $_0=0;label=13;break;}else{label=11;break;}
 case 11: 
 var $30=(($s_0+1)|0);
 var $31=(($p_0+1)|0);
 var $_02=$31;var $_03=$30;label=2;break;
 case 12: 
 var $33=_fnmatch_internal($pat,-1,$str,-1,$flags);
 var $_0=$33;label=13;break;
 case 13: 
 var $_0;
 STACKTOP=sp;return $_0;
  default: assert(0, "bad label: " + label);
 }

}


function _pat_next($pat,$m,$step,$flags){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $wc=sp;
 var $1=($m|0)==0;
 if($1){label=3;break;}else{label=2;break;}
 case 2: 
 var $3=HEAP8[($pat)];
 var $4=(($3<<24)>>24)==0;
 if($4){label=3;break;}else{label=4;break;}
 case 3: 
 HEAP32[(($step)>>2)]=0;
 var $_0=-1;label=36;break;
 case 4: 
 HEAP32[(($step)>>2)]=1;
 var $7=HEAP8[($pat)];
 if((($7<<24)>>24)==63){ label=30;break;}else if((($7<<24)>>24)==42){ var $_0=-5;label=36;break;}else if((($7<<24)>>24)==92){ label=5;break;}else if((($7<<24)>>24)==91){ label=7;break;}else{var $_02=$pat;var $esc_0=0;var $75=$7;label=31;break;}
 case 5: 
 var $9=$flags&2;
 var $10=($9|0)==0;
 if($10){label=6;break;}else{var $84=92;label=35;break;}
 case 6: 
 HEAP32[(($step)>>2)]=2;
 var $12=(($pat+1)|0);
 var $_pre=HEAP8[($12)];
 var $_02=$12;var $esc_0=1;var $75=$_pre;label=31;break;
 case 7: 
 var $14=($m>>>0)>1;
 if($14){label=8;break;}else{var $k_0=1;label=10;break;}
 case 8: 
 var $16=(($pat+1)|0);
 var $17=HEAP8[($16)];
 if((($17<<24)>>24)==94|(($17<<24)>>24)==33){ label=9;break;}else{var $k_0=1;label=10;break;}
 case 9: 
 var $k_0=2;label=10;break;
 case 10: 
 var $k_0;
 var $20=($k_0>>>0)<($m>>>0);
 if($20){label=11;break;}else{var $k_1_ph=$k_0;label=12;break;}
 case 11: 
 var $22=(($pat+$k_0)|0);
 var $23=HEAP8[($22)];
 var $24=(($23<<24)>>24)==93;
 var $25=($24&1);
 var $_k_0=((($25)+($k_0))|0);
 var $k_1_ph=$_k_0;label=12;break;
 case 12: 
 var $k_1_ph;
 var $26=($k_1_ph>>>0)<($m>>>0);
 if($26){var $k_18=$k_1_ph;label=13;break;}else{var $k_4=$k_1_ph;label=26;break;}
 case 13: 
 var $k_18;
 var $27=(($pat+$k_18)|0);
 var $28=HEAP8[($27)];
 if((($28<<24)>>24)==0|(($28<<24)>>24)==93){ var $k_4=$k_18;label=26;break;}else{label=14;break;}
 case 14: 
 var $30=((($k_18)+(1))|0);
 var $31=($30>>>0)<($m>>>0);
 if($31){label=15;break;}else{var $k_3=$k_18;label=25;break;}
 case 15: 
 var $33=(($pat+$30)|0);
 var $34=HEAP8[($33)];
 var $35=(($34<<24)>>24)!=0;
 var $36=(($28<<24)>>24)==91;
 var $or_cond=$35&$36;
 if($or_cond){label=16;break;}else{var $k_3=$k_18;label=25;break;}
 case 16: 
 if((($34<<24)>>24)==58|(($34<<24)>>24)==46|(($34<<24)>>24)==61){ label=17;break;}else{var $k_3=$k_18;label=25;break;}
 case 17: 
 var $39=((($k_18)+(2))|0);
 var $40=($39>>>0)<($m>>>0);
 if($40){label=18;break;}else{var $k_2_ph=$39;label=19;break;}
 case 18: 
 var $42=(($pat+$39)|0);
 var $43=HEAP8[($42)];
 var $44=(($43<<24)>>24)==0;
 var $45=((($k_18)+(3))|0);
 var $_=($44?$39:$45);
 var $k_2_ph=$_;label=19;break;
 case 19: 
 var $k_2_ph;
 var $46=($k_2_ph>>>0)<($m>>>0);
 if($46){var $k_26=$k_2_ph;label=21;break;}else{var $k_2_lcssa=$k_2_ph;label=23;break;}
 case 20: 
 var $48=($57>>>0)<($m>>>0);
 if($48){var $k_26=$57;label=21;break;}else{var $k_2_lcssa=$57;label=23;break;}
 case 21: 
 var $k_26;
 var $49=(($pat+$k_26)|0);
 var $50=HEAP8[($49)];
 var $51=(($50<<24)>>24)==0;
 if($51){var $k_2_lcssa=$k_26;label=23;break;}else{label=22;break;}
 case 22: 
 var $53=((($k_26)-(1))|0);
 var $54=(($pat+$53)|0);
 var $55=HEAP8[($54)];
 var $56=(($50<<24)>>24)!=93;
 var $not_=(($55<<24)>>24)!=(($34<<24)>>24);
 var $_3=$56|$not_;
 var $57=((($k_26)+(1))|0);
 if($_3){label=20;break;}else{var $k_2_lcssa=$k_26;label=23;break;}
 case 23: 
 var $k_2_lcssa;
 var $58=($k_2_lcssa|0)==($m|0);
 if($58){label=28;break;}else{label=24;break;}
 case 24: 
 var $60=(($pat+$k_2_lcssa)|0);
 var $61=HEAP8[($60)];
 var $62=(($61<<24)>>24)==0;
 if($62){var $k_4=$k_2_lcssa;label=26;break;}else{var $k_3=$k_2_lcssa;label=25;break;}
 case 25: 
 var $k_3;
 var $64=((($k_3)+(1))|0);
 var $65=($64>>>0)<($m>>>0);
 if($65){var $k_18=$64;label=13;break;}else{var $k_4=$64;label=26;break;}
 case 26: 
 var $k_4;
 var $66=($k_4|0)==($m|0);
 if($66){label=28;break;}else{label=27;break;}
 case 27: 
 var $68=(($pat+$k_4)|0);
 var $69=HEAP8[($68)];
 var $70=(($69<<24)>>24)==0;
 if($70){label=28;break;}else{label=29;break;}
 case 28: 
 HEAP32[(($step)>>2)]=1;
 var $_0=91;label=36;break;
 case 29: 
 var $72=((($k_4)+(1))|0);
 HEAP32[(($step)>>2)]=$72;
 var $_0=-3;label=36;break;
 case 30: 
 var $_0=-4;label=36;break;
 case 31: 
 var $75;
 var $esc_0;
 var $_02;
 var $76=(($75<<24)>>24)<0;
 if($76){label=32;break;}else{var $84=$75;label=35;break;}
 case 32: 
 var $78=_mbtowc($wc,$_02,$m);
 var $79=($78|0)<0;
 if($79){label=33;break;}else{label=34;break;}
 case 33: 
 HEAP32[(($step)>>2)]=0;
 var $_0=-2;label=36;break;
 case 34: 
 var $82=((($78)+($esc_0))|0);
 HEAP32[(($step)>>2)]=$82;
 var $83=HEAP32[(($wc)>>2)];
 var $_0=$83;label=36;break;
 case 35: 
 var $84;
 var $85=(($84<<24)>>24);
 var $_0=$85;label=36;break;
 case 36: 
 var $_0;
 STACKTOP=sp;return $_0;
  default: assert(0, "bad label: " + label);
 }

}


function _fnmatch_internal($pat,$m,$str,$n,$flags){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+48)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $wc_i20=sp;
 var $wc_i17=(sp)+(8);
 var $wc_i14=(sp)+(16);
 var $wc_i11=(sp)+(24);
 var $wc_i=(sp)+(32);
 var $pinc=(sp)+(40);
 var $1=$flags&4;
 var $2=($1|0)==0;
 if($2){label=4;break;}else{label=2;break;}
 case 2: 
 var $4=HEAP8[($str)];
 var $5=(($4<<24)>>24)==46;
 if($5){label=3;break;}else{label=4;break;}
 case 3: 
 var $7=HEAP8[($pat)];
 var $8=(($7<<24)>>24)==46;
 if($8){label=4;break;}else{var $_0=1;label=71;break;}
 case 4: 
 var $9=$wc_i;
 var $_02=$pat;var $_03=$n;var $_04=$str;var $_07=$m;label=5;break;
 case 5: 
 var $_07;
 var $_04;
 var $_03;
 var $_02;
 var $11=_pat_next($_02,$_07,$pinc,$flags);
 if(($11|0)==-5){ label=6;break;}else if(($11|0)==-2){ var $_0=1;label=71;break;}else{label=8;break;}
 case 6: 
 var $13=(($_02+1)|0);
 var $14=((($_07)-(1))|0);
 var $15=_strnlen($13,$14);
 var $_sum=((($15)+(1))|0);
 var $16=(($_02+$_sum)|0);
 var $17=($_sum|0)>1;
 if($17){label=7;break;}else{var $ptail_0_lcssa=$13;var $tailcnt_0_lcssa=0;label=23;break;}
 case 7: 
 var $18=$16;
 var $p_069=$13;var $ptail_070=$13;var $tailcnt_071=0;label=19;break;
 case 8: 
 var $$etemp$0$0=4;
 var $$etemp$0$1=0;

 var $20=($_03|0)==0;
 if($20){label=14;break;}else{label=9;break;}
 case 9: 
 var $22=HEAP8[($_04)];
 var $23=(($22<<24)>>24)<0;
 if($23){label=10;break;}else{label=12;break;}
 case 10: 
 var $25=_mbtowc($wc_i,$_04,$_03);
 var $26=($25|0)<0;
 if($26){label=14;break;}else{label=11;break;}
 case 11: 
 var $28=HEAP32[(($wc_i)>>2)];
 var $_0_i=$28;var $31=$25;label=13;break;
 case 12: 
 var $30=(($22<<24)>>24);
 var $_0_i=$30;var $31=1;label=13;break;
 case 13: 
 var $31;
 var $_0_i;
 var $$etemp$1$0=4;
 var $$etemp$1$1=0;

 var $32=($_0_i|0)<1;
 if($32){label=14;break;}else{label=15;break;}
 case 14: 
 var $not_=($11|0)!=-1;
 var $33=($not_&1);
 var $_0=$33;label=71;break;
 case 15: 
 var $35=(($_04+$31)|0);
 var $36=((($_03)-($31))|0);
 if(($11|0)==-3){ label=16;break;}else if(($11|0)==-4){ label=18;break;}else{label=17;break;}
 case 16: 
 var $38=_match_bracket($_02,$_0_i);
 var $39=($38|0)==0;
 if($39){var $_0=1;label=71;break;}else{label=18;break;}
 case 17: 
 var $41=($_0_i|0)==($11|0);
 if($41){label=18;break;}else{var $_0=1;label=71;break;}
 case 18: 
 var $43=HEAP32[(($pinc)>>2)];
 var $44=(($_02+$43)|0);
 var $45=((($_07)-($43))|0);
 var $_02=$44;var $_03=$36;var $_04=$35;var $_07=$45;label=5;break;
 case 19: 
 var $tailcnt_071;
 var $ptail_070;
 var $p_069;
 var $47=$p_069;
 var $48=((($18)-($47))|0);
 var $49=_pat_next($p_069,$48,$pinc,$flags);
 if(($49|0)==-5){ label=20;break;}else if(($49|0)==-2){ var $_0=1;label=71;break;}else{label=21;break;}
 case 20: 
 var $51=(($p_069+1)|0);
 var $tailcnt_1=0;var $ptail_1=$51;label=22;break;
 case 21: 
 var $53=((($tailcnt_071)+(1))|0);
 var $tailcnt_1=$53;var $ptail_1=$ptail_070;label=22;break;
 case 22: 
 var $ptail_1;
 var $tailcnt_1;
 var $55=HEAP32[(($pinc)>>2)];
 var $56=(($p_069+$55)|0);
 var $57=($56>>>0)<($16>>>0);
 if($57){var $p_069=$56;var $ptail_070=$ptail_1;var $tailcnt_071=$tailcnt_1;label=19;break;}else{var $ptail_0_lcssa=$ptail_1;var $tailcnt_0_lcssa=$tailcnt_1;label=23;break;}
 case 23: 
 var $tailcnt_0_lcssa;
 var $ptail_0_lcssa;
 var $58=_strnlen($_04,$_03);
 var $59=(($_04+$58)|0);
 var $60=($58>>>0)<($tailcnt_0_lcssa>>>0);
 if($60){var $_0=1;label=71;break;}else{label=24;break;}
 case 24: 
 var $61=($58|0)<1;
 var $62=($tailcnt_0_lcssa|0)==0;
 var $or_cond60=$61|$62;
 if($or_cond60){var $s_0_lcssa=$59;var $_lcssa59=$62;label=29;break;}else{var $s_061=$59;var $tailcnt_262=$tailcnt_0_lcssa;label=25;break;}
 case 25: 
 var $tailcnt_262;
 var $s_061;
 var $63=((($s_061)-(1))|0);
 var $64=HEAP8[($63)];
 var $65=(($64<<24)>>24)>-1;
 if($65){var $s_2=$63;label=28;break;}else{var $s_1=$s_061;var $66=$64;label=26;break;}
 case 26: 
 var $66;
 var $s_1;
 var $67=((($s_1)-(1))|0);
 var $68=($66&255);
 var $69=((($68)-(128))|0);
 var $70=($69>>>0)<64;
 var $71=($67>>>0)>($_04>>>0);
 var $or_cond10=$70&$71;
 if($or_cond10){label=27;break;}else{var $s_2=$67;label=28;break;}
 case 27: 
 var $_phi_trans_insert=((($s_1)-(2))|0);
 var $_pre=HEAP8[($_phi_trans_insert)];
 var $s_1=$67;var $66=$_pre;label=26;break;
 case 28: 
 var $s_2;
 var $72=((($tailcnt_262)-(1))|0);
 var $73=($s_2>>>0)<=($_04>>>0);
 var $74=($72|0)==0;
 var $or_cond=$73|$74;
 if($or_cond){var $s_0_lcssa=$s_2;var $_lcssa59=$74;label=29;break;}else{var $s_061=$s_2;var $tailcnt_262=$72;label=25;break;}
 case 29: 
 var $_lcssa59;
 var $s_0_lcssa;
 if($_lcssa59){label=30;break;}else{var $_0=1;label=71;break;}
 case 30: 
 var $75=$16;
 var $76=$ptail_0_lcssa;
 var $77=((($75)-($76))|0);
 var $78=_pat_next($ptail_0_lcssa,$77,$pinc,$flags);
 var $79=HEAP32[(($pinc)>>2)];
 var $80=$59;
 var $81=$wc_i11;
 var $$etemp$2$0=4;
 var $$etemp$2$1=0;

 var $82=($59|0)==($s_0_lcssa|0);
 if($82){var $_lcssa50=$78;label=37;break;}else{label=31;break;}
 case 31: 
 var $83=(($ptail_0_lcssa+$79)|0);
 var $p_152=$ptail_0_lcssa;var $86=$78;var $85=$83;var $_pn_in=$s_0_lcssa;label=32;break;
 case 32: 
 var $_pn_in;
 var $85;
 var $86;
 var $p_152;
 var $87=HEAP8[($_pn_in)];
 var $88=(($87<<24)>>24)<0;
 if($88){label=33;break;}else{label=35;break;}
 case 33: 
 var $_pn=$_pn_in;
 var $90=((($80)-($_pn))|0);
 var $91=_mbtowc($wc_i11,$_pn_in,$90);
 var $92=($91|0)<0;
 if($92){var $_lcssa50=$86;label=37;break;}else{label=34;break;}
 case 34: 
 var $94=HEAP32[(($wc_i11)>>2)];
 var $_0_i12=$94;var $97=$91;label=36;break;
 case 35: 
 var $96=(($87<<24)>>24);
 var $_0_i12=$96;var $97=1;label=36;break;
 case 36: 
 var $97;
 var $_0_i12;
 var $$etemp$3$0=4;
 var $$etemp$3$1=0;

 var $98=($_0_i12|0)<1;
 if($98){var $_lcssa50=$86;label=37;break;}else{label=40;break;}
 case 37: 
 var $_lcssa50;
 var $99=($_lcssa50|0)==-1;
 if($99){label=38;break;}else{var $_0=1;label=71;break;}
 case 38: 
 var $100=($13>>>0)<($ptail_0_lcssa>>>0);
 var $101=$s_0_lcssa;
 var $102=$wc_i14;
 if($100){label=39;break;}else{var $_0=0;label=71;break;}
 case 39: 
 var $103=$wc_i17;
 var $104=$wc_i20;
 var $_15_ph_ph94=$_04;var $_pn96_in=$13;label=45;break;
 case 40: 
 var $106=(($_pn_in+$97)|0);
 if(($86|0)==-3){ label=41;break;}else if(($86|0)==-4){ label=43;break;}else{label=42;break;}
 case 41: 
 var $108=_match_bracket($p_152,$_0_i12);
 var $109=($108|0)==0;
 if($109){var $_0=1;label=71;break;}else{label=43;break;}
 case 42: 
 var $111=($_0_i12|0)==($86|0);
 if($111){label=43;break;}else{var $_0=1;label=71;break;}
 case 43: 
 var $112=$85;
 var $113=((($75)-($112))|0);
 var $114=_pat_next($85,$113,$pinc,$flags);
 var $115=HEAP32[(($pinc)>>2)];
 var $116=(($85+$115)|0);
 var $$etemp$4$0=4;
 var $$etemp$4$1=0;

 var $117=($59|0)==($106|0);
 if($117){var $_lcssa50=$114;label=37;break;}else{var $p_152=$85;var $86=$114;var $85=$116;var $_pn_in=$106;label=32;break;}
 case 44: 
 var $_lcssa;
 var $s_4_lcssa;
 var $118=($_lcssa>>>0)<($ptail_0_lcssa>>>0);
 if($118){var $_15_ph_ph94=$s_4_lcssa;var $_pn96_in=$_lcssa;label=45;break;}else{var $_0=0;label=71;break;}
 case 45: 
 var $_pn96_in;
 var $_15_ph_ph94;
 var $_pn96=$_pn96_in;
 var $119=((($76)-($_pn96))|0);
 var $_15_ph92=$_15_ph_ph94;label=46;break;
 case 46: 
 var $_15_ph92;
 var $120=_pat_next($_pn96_in,$119,$pinc,$flags);
 var $121=HEAP32[(($pinc)>>2)];
 var $122=(($_pn96_in+$121)|0);
 var $123=($120|0)==-5;
 if($123){var $s_4_lcssa=$_15_ph92;var $_lcssa=$122;label=44;break;}else{var $p_235=$_pn96_in;var $s_436=$_15_ph92;var $125=$120;var $124=$122;label=47;break;}
 case 47: 
 var $124;
 var $125;
 var $s_436;
 var $p_235;
 var $126=$s_436;
 var $127=((($101)-($126))|0);
 var $$etemp$5$0=4;
 var $$etemp$5$1=0;

 var $128=($s_0_lcssa|0)==($s_436|0);
 if($128){var $_0=1;label=71;break;}else{label=48;break;}
 case 48: 
 var $130=HEAP8[($s_436)];
 var $131=(($130<<24)>>24)<0;
 if($131){label=49;break;}else{label=51;break;}
 case 49: 
 var $133=_mbtowc($wc_i14,$s_436,$127);
 var $134=($133|0)<0;
 if($134){var $141=1;var $_0_i1525=-1;label=53;break;}else{label=50;break;}
 case 50: 
 var $136=HEAP32[(($wc_i14)>>2)];
 var $_0_i15=$136;var $139=$133;label=52;break;
 case 51: 
 var $138=(($130<<24)>>24);
 var $_0_i15=$138;var $139=1;label=52;break;
 case 52: 
 var $139;
 var $_0_i15;
 var $$etemp$6$0=4;
 var $$etemp$6$1=0;

 var $140=($_0_i15|0)==0;
 if($140){var $_0=1;label=71;break;}else{var $141=$139;var $_0_i1525=$_0_i15;label=53;break;}
 case 53: 
 var $_0_i1525;
 var $141;
 if(($125|0)==-3){ label=54;break;}else if(($125|0)==-4){ label=56;break;}else{label=55;break;}
 case 54: 
 var $143=_match_bracket($p_235,$_0_i1525);
 var $144=($143|0)==0;
 if($144){label=57;break;}else{label=56;break;}
 case 55: 
 var $146=($_0_i1525|0)==($125|0);
 if($146){label=56;break;}else{label=57;break;}
 case 56: 
 var $148=(($s_436+$141)|0);
 var $149=$124;
 var $150=((($76)-($149))|0);
 var $151=_pat_next($124,$150,$pinc,$flags);
 var $152=HEAP32[(($pinc)>>2)];
 var $153=(($124+$152)|0);
 var $154=($151|0)==-5;
 if($154){var $s_4_lcssa=$148;var $_lcssa=$153;label=44;break;}else{var $p_235=$124;var $s_436=$148;var $125=$151;var $124=$153;label=47;break;}
 case 57: 
 var $156=$_15_ph92;
 var $157=((($101)-($156))|0);
 var $$etemp$7$0=4;
 var $$etemp$7$1=0;

 var $158=($s_0_lcssa|0)==($_15_ph92|0);
 if($158){label=60;break;}else{label=58;break;}
 case 58: 
 var $160=HEAP8[($_15_ph92)];
 var $161=(($160<<24)>>24)<0;
 if($161){label=59;break;}else{label=62;break;}
 case 59: 
 var $163=_mbtowc($wc_i17,$_15_ph92,$157);
 var $164=($163|0)<0;
 if($164){label=60;break;}else{label=61;break;}
 case 60: 
 var $_339=(($_15_ph92+1)|0);
 var $$etemp$8$0=4;
 var $$etemp$8$1=0;

 var $165=($s_0_lcssa|0)==($_339|0);
 if($165){var $_15_ph92=$s_0_lcssa;label=46;break;}else{var $_340=$_339;label=65;break;}
 case 61: 
 var $167=HEAP32[(($wc_i17)>>2)];
 var $_0_i18=$167;var $170=$163;label=63;break;
 case 62: 
 var $169=(($160<<24)>>24);
 var $_0_i18=$169;var $170=1;label=63;break;
 case 63: 
 var $170;
 var $_0_i18;
 var $$etemp$9$0=4;
 var $$etemp$9$1=0;

 var $171=($_0_i18|0)>0;
 if($171){label=64;break;}else{label=60;break;}
 case 64: 
 var $173=(($_15_ph92+$170)|0);
 var $_15_ph92=$173;label=46;break;
 case 65: 
 var $_340;
 var $174=HEAP8[($_340)];
 var $175=(($174<<24)>>24)<0;
 if($175){label=66;break;}else{label=68;break;}
 case 66: 
 var $_pn97=$_340;
 var $177=((($101)-($_pn97))|0);
 var $178=_mbtowc($wc_i20,$_340,$177);
 var $179=($178|0)<0;
 if($179){label=70;break;}else{label=67;break;}
 case 67: 
 var $181=HEAP32[(($wc_i20)>>2)];
 var $_0_i21=$181;label=69;break;
 case 68: 
 var $183=(($174<<24)>>24);
 var $_0_i21=$183;label=69;break;
 case 69: 
 var $_0_i21;
 var $$etemp$10$0=4;
 var $$etemp$10$1=0;

 var $184=($_0_i21|0)<0;
 if($184){label=70;break;}else{var $_15_ph92=$_340;label=46;break;}
 case 70: 
 var $_3=(($_340+1)|0);
 var $$etemp$11$0=4;
 var $$etemp$11$1=0;

 var $185=($s_0_lcssa|0)==($_3|0);
 if($185){var $_15_ph92=$s_0_lcssa;label=46;break;}else{var $_340=$_3;label=65;break;}
 case 71: 
 var $_0;
 STACKTOP=sp;return $_0;
  default: assert(0, "bad label: " + label);
 }

}


function _match_bracket($p,$k){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+32)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $wc=sp;
 var $wc2=(sp)+(8);
 var $buf=(sp)+(16);
 var $1=(($p+1)|0);
 var $2=HEAP8[($1)];
 if((($2<<24)>>24)==94|(($2<<24)>>24)==33){ label=2;break;}else{var $_01=$1;var $inv_0=0;var $6=$2;label=3;break;}
 case 2: 
 var $4=(($p+2)|0);
 var $_pre=HEAP8[($4)];
 var $_01=$4;var $inv_0=1;var $6=$_pre;label=3;break;
 case 3: 
 var $6;
 var $inv_0;
 var $_01;
 if((($6<<24)>>24)==93){ label=4;break;}else if((($6<<24)>>24)==45){ label=7;break;}else{var $_1=$_01;label=10;break;}
 case 4: 
 var $8=($k|0)==93;
 if($8){label=5;break;}else{label=6;break;}
 case 5: 
 var $10=$inv_0^1;
 var $_0=$10;label=34;break;
 case 6: 
 var $12=(($_01+1)|0);
 var $_1=$12;label=10;break;
 case 7: 
 var $14=($k|0)==45;
 if($14){label=8;break;}else{label=9;break;}
 case 8: 
 var $16=$inv_0^1;
 var $_0=$16;label=34;break;
 case 9: 
 var $18=(($_01+1)|0);
 var $_1=$18;label=10;break;
 case 10: 
 var $_1;
 var $20=((($_1)-(1))|0);
 var $21=HEAP8[($20)];
 var $22=(($21<<24)>>24);
 HEAP32[(($wc)>>2)]=$22;
 var $23=(($buf)|0);
 var $_2=$_1;label=11;break;
 case 11: 
 var $_2;
 var $25=HEAP8[($_2)];
 if((($25<<24)>>24)==45){ label=12;break;}else if((($25<<24)>>24)==91){ label=18;break;}else if((($25<<24)>>24)==93){ var $_0=$inv_0;label=34;break;}else{label=27;break;}
 case 12: 
 var $27=(($_2+1)|0);
 var $28=HEAP8[($27)];
 var $29=(($28<<24)>>24)==93;
 if($29){var $76=45;label=28;break;}else{label=13;break;}
 case 13: 
 var $31=_mbtowc($wc2,$27,4);
 var $32=($31|0)<0;
 if($32){var $_0=0;label=34;break;}else{label=14;break;}
 case 14: 
 var $34=HEAP32[(($wc)>>2)];
 var $35=HEAP32[(($wc2)>>2)];
 var $36=($34|0)>($35|0);
 if($36){label=17;break;}else{label=15;break;}
 case 15: 
 var $38=((($k)-($34))|0);
 var $39=((($35)-($34))|0);
 var $40=($38>>>0)>($39>>>0);
 if($40){label=17;break;}else{label=16;break;}
 case 16: 
 var $42=$inv_0^1;
 var $_0=$42;label=34;break;
 case 17: 
 var $44=((($31)-(1))|0);
 var $45=(($_2+$44)|0);
 var $_5=$45;label=33;break;
 case 18: 
 var $47=(($_2+1)|0);
 var $48=HEAP8[($47)];
 if((($48<<24)>>24)==58|(($48<<24)>>24)==46|(($48<<24)>>24)==61){ label=19;break;}else{var $76=91;label=28;break;}
 case 19: 
 var $50=(($_2+3)|0);
 var $_3=$50;label=20;break;
 case 20: 
 var $_3;
 var $52=((($_3)-(1))|0);
 var $53=HEAP8[($52)];
 var $54=(($53<<24)>>24)==(($48<<24)>>24);
 if($54){label=21;break;}else{label=22;break;}
 case 21: 
 var $56=HEAP8[($_3)];
 var $57=(($56<<24)>>24)==93;
 if($57){label=23;break;}else{label=22;break;}
 case 22: 
 var $58=(($_3+1)|0);
 var $_3=$58;label=20;break;
 case 23: 
 var $60=(($_2+2)|0);
 var $61=(($48<<24)>>24)==58;
 if($61){label=24;break;}else{var $_5=$_3;label=33;break;}
 case 24: 
 var $63=$52;
 var $64=$60;
 var $65=((($63)-($64))|0);
 var $66=($65|0)<16;
 if($66){label=25;break;}else{var $_5=$_3;label=33;break;}
 case 25: 
 assert($65 % 1 === 0);(_memcpy($23, $60, $65)|0);
 var $68=(($buf+$65)|0);
 HEAP8[($68)]=0;
 var $69=_wctype($23);
 var $70=_iswctype($k,$69);
 var $71=($70|0)==0;
 if($71){var $_5=$_3;label=33;break;}else{label=26;break;}
 case 26: 
 var $73=$inv_0^1;
 var $_0=$73;label=34;break;
 case 27: 
 var $75=(($25<<24)>>24)>-1;
 if($75){var $76=$25;label=28;break;}else{label=29;break;}
 case 28: 
 var $76;
 var $77=($76&255);
 HEAP32[(($wc)>>2)]=$77;
 var $_4=$_2;var $85=$77;label=31;break;
 case 29: 
 var $79=_mbtowc($wc,$_2,4);
 var $80=($79|0)<0;
 if($80){var $_0=0;label=34;break;}else{label=30;break;}
 case 30: 
 var $82=((($79)-(1))|0);
 var $83=(($_2+$82)|0);
 var $_pre2=HEAP32[(($wc)>>2)];
 var $_4=$83;var $85=$_pre2;label=31;break;
 case 31: 
 var $85;
 var $_4;
 var $86=($85|0)==($k|0);
 if($86){label=32;break;}else{var $_5=$_4;label=33;break;}
 case 32: 
 var $88=$inv_0^1;
 var $_0=$88;label=34;break;
 case 33: 
 var $_5;
 var $90=(($_5+1)|0);
 var $_2=$90;label=11;break;
 case 34: 
 var $_0;
 STACKTOP=sp;return $_0;
  default: assert(0, "bad label: " + label);
 }

}


function _regcomp($preg,$regex,$cflags){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+104)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $num_tags_i=sp;
 var $assertions_i=(sp)+(8);
 var $pos_add_i=(sp)+(16);
 var $max_pos_i=(sp)+(24);
 var $seq2_i=(sp)+(32);
 var $copy_i=(sp)+(40);
 var $copy3_i=(sp)+(48);
 var $parse_ctx=(sp)+(56);
 var $1=$parse_ctx;
 var $$etemp$0$0=44;
 var $$etemp$0$1=0;

 var $2=_malloc(20);
 var $3=$2;
 var $4=($2|0)==0;
 if($4){var $_0=12;label=183;break;}else{label=2;break;}
 case 2: 
 var $6=_malloc(2048);
 var $7=$6;
 var $8=(($2+16)|0);
 var $9=$8;
 HEAP32[(($9)>>2)]=$7;
 var $10=($6|0)==0;
 if($10){label=3;break;}else{label=4;break;}
 case 3: 
 _free($2);
 var $_0=12;label=183;break;
 case 4: 
 var $12=$2;
 HEAP32[(($12)>>2)]=512;
 var $13=(($2+4)|0);
 var $14=$13;
 HEAP32[(($14)>>2)]=10240;
 var $15=(($2+8)|0);
 var $16=$15;
 HEAP32[(($16)>>2)]=128;
 var $17=(($2+12)|0);
 var $18=$17;
 HEAP32[(($18)>>2)]=0;
 var $19=___tre_mem_new_impl(0,0);
 var $20=($19|0)==0;
 if($20){label=5;break;}else{label=6;break;}
 case 5: 
 var $22=(($2+16)|0);
 var $23=$22;
 var $24=HEAP32[(($23)>>2)];
 var $25=$24;
 _free($25);
 _free($2);
 var $_0=12;label=183;break;
 case 6: 
 _memset($1, 0, 44)|0;
 var $27=(($parse_ctx)|0);
 HEAP32[(($27)>>2)]=$19;
 var $28=(($parse_ctx+4)|0);
 HEAP32[(($28)>>2)]=$3;
 var $29=(($parse_ctx+12)|0);
 HEAP32[(($29)>>2)]=$regex;
 var $30=(($parse_ctx+36)|0);
 HEAP32[(($30)>>2)]=$cflags;
 var $31=(($parse_ctx+28)|0);
 HEAP32[(($31)>>2)]=-1;
 var $32=_tre_parse($parse_ctx);
 var $33=($32|0)==0;
 if($33){label=7;break;}else{var $errcode_0=$32;var $tnfa_0=0;var $counts_0=0;var $offs_0=0;label=178;break;}
 case 7: 
 var $35=(($parse_ctx+20)|0);
 var $36=HEAP32[(($35)>>2)];
 var $37=((($36)-(1))|0);
 var $38=(($preg)|0);
 HEAP32[(($38)>>2)]=$37;
 var $39=(($parse_ctx+8)|0);
 var $40=HEAP32[(($39)>>2)];
 var $41=HEAP32[(($31)>>2)];
 var $42=($41|0)>-1;
 if($42){label=8;break;}else{label=9;break;}
 case 8: 
 var $44=(($parse_ctx+32)|0);
 var $45=HEAP32[(($44)>>2)];
 var $46=($45|0)==0;
 if($46){label=9;break;}else{var $errcode_0=2;var $tnfa_0=0;var $counts_0=0;var $offs_0=0;label=178;break;}
 case 9: 
 var $48=($41|0)>($37|0);
 if($48){var $errcode_0=6;var $tnfa_0=0;var $counts_0=0;var $offs_0=0;label=178;break;}else{label=10;break;}
 case 10: 
 var $50=_calloc(1,68);
 var $51=$50;
 var $52=($50|0)==0;
 if($52){var $errcode_0=12;var $tnfa_0=$51;var $counts_0=0;var $offs_0=0;label=178;break;}else{label=11;break;}
 case 11: 
 var $_lobit=$41>>>31;
 var $_lobit_not=$_lobit^1;
 var $54=(($50+60)|0);
 var $55=$54;
 HEAP32[(($55)>>2)]=$_lobit_not;
 var $56=(($parse_ctx+32)|0);
 var $57=HEAP32[(($56)>>2)];
 var $58=(($50+64)|0);
 var $59=$58;
 HEAP32[(($59)>>2)]=$57;
 var $60=(($50+28)|0);
 var $61=$60;
 HEAP32[(($61)>>2)]=$36;
 var $62=($_lobit|0)==1;
 if($62){label=12;break;}else{label=13;break;}
 case 12: 
 var $64=$cflags&8;
 var $65=($64|0)==0;
 if($65){label=13;break;}else{var $tag_directions_1=0;label=20;break;}
 case 13: 
 var $67=_tre_add_tags(0,$3,$40,$51);
 var $68=($67|0)==0;
 if($68){label=14;break;}else{var $errcode_0=$67;var $tnfa_0=$51;var $counts_0=0;var $offs_0=0;label=178;break;}
 case 14: 
 var $70=(($50+40)|0);
 var $71=$70;
 var $72=HEAP32[(($71)>>2)];
 var $73=($72|0)>0;
 if($73){label=15;break;}else{var $tag_directions_0=0;label=17;break;}
 case 15: 
 var $75=$72<<2;
 var $76=((($75)+(4))|0);
 var $77=_malloc($76);
 var $78=$77;
 var $79=($77|0)==0;
 if($79){var $errcode_0=12;var $tnfa_0=$51;var $counts_0=0;var $offs_0=0;label=178;break;}else{label=16;break;}
 case 16: 
 var $81=(($50+32)|0);
 var $82=$81;
 HEAP32[(($82)>>2)]=$78;
 _memset($77, -1, $76)|0;
 var $tag_directions_0=$78;label=17;break;
 case 17: 
 var $tag_directions_0;
 var $84=$72<<1;
 var $85=$84|1;
 var $86=_calloc($85,4);
 var $87=$86;
 var $88=(($50+36)|0);
 var $89=$88;
 HEAP32[(($89)>>2)]=$87;
 var $90=($86|0)==0;
 if($90){var $errcode_0=12;var $tnfa_0=$51;var $counts_0=0;var $offs_0=0;label=178;break;}else{label=18;break;}
 case 18: 
 var $92=HEAP32[(($35)>>2)];
 var $93=_calloc($92,12);
 var $94=($93|0)==0;
 if($94){var $errcode_0=12;var $tnfa_0=$51;var $counts_0=0;var $offs_0=0;label=178;break;}else{label=19;break;}
 case 19: 
 var $96=$93;
 var $97=(($50+16)|0);
 var $98=$97;
 HEAP32[(($98)>>2)]=$96;
 var $99=_tre_add_tags($19,$3,$40,$51);
 var $100=($99|0)==0;
 if($100){var $tag_directions_1=$tag_directions_0;label=20;break;}else{var $errcode_0=$99;var $tnfa_0=$51;var $counts_0=0;var $offs_0=0;label=178;break;}
 case 20: 
 var $tag_directions_1;
 var $102=(($parse_ctx+24)|0);
 var $103=$pos_add_i;
 var $$etemp$1$0=4;
 var $$etemp$1$1=0;

 var $104=$max_pos_i;
 var $$etemp$2$0=4;
 var $$etemp$2$1=0;

 var $105=$seq2_i;
 var $$etemp$3$0=4;
 var $$etemp$3$1=0;

 var $106=$copy_i;
 var $$etemp$4$0=4;
 var $$etemp$4$1=0;

 var $107=$copy3_i;
 var $$etemp$5$0=4;
 var $$etemp$5$1=0;

 var $stack_idx2_i=(($2+12)|0);
 var $108=$stack_idx2_i;
 var $stack_idx2_val_i=HEAP32[(($108)>>2)];
 HEAP32[(($pos_add_i)>>2)]=0;
 HEAP32[(($max_pos_i)>>2)]=0;
 var $109=$40;
 var $110=_tre_stack_push($3,$109);
 var $111=($110|0)==0;
 if($111){label=21;break;}else{var $_0_i1=$110;label=90;break;}
 case 21: 
 var $113=_tre_stack_push($3,0);
 var $114=($113|0)==0;
 if($114){label=22;break;}else{var $_0_i1=$113;label=90;break;}
 case 22: 
 var $115=(($2+16)|0);
 var $116=$115;
 var $stack_idx_val_i82=HEAP32[(($108)>>2)];
 var $117=($stack_idx_val_i82|0)>($stack_idx2_val_i|0);
 if($117){var $118=0;var $pos_add_total_042_i83=0;var $iter_depth_041_i84=0;var $stack_idx_val_i85=$stack_idx_val_i82;label=23;break;}else{var $status_0_lcssa_i=0;var $pos_add_total_042_i_lcssa=0;label=89;break;}
 case 23: 
 var $stack_idx_val_i85;
 var $iter_depth_041_i84;
 var $pos_add_total_042_i83;
 var $118;
 var $119=((($stack_idx_val_i85)-(1))|0);
 HEAP32[(($108)>>2)]=$119;
 var $120=HEAP32[(($116)>>2)];
 var $121=(($120+($119<<2))|0);
 var $122=$121;
 var $123=HEAP32[(($122)>>2)];
 var $124=((($stack_idx_val_i85)-(2))|0);
 HEAP32[(($108)>>2)]=$124;
 var $125=(($120+($124<<2))|0);
 var $126=HEAP32[(($125)>>2)];
 if(($123|0)==0){ label=26;break;}else if(($123|0)==1){ label=47;break;}else{var $iter_depth_041_i_be=$iter_depth_041_i84;var $pos_add_total_042_i_be=$pos_add_total_042_i83;var $_be=$118;label=24;break;}
 case 24: 
 var $_be;
 var $pos_add_total_042_i_be;
 var $iter_depth_041_i_be;
 var $stack_idx_val_i=HEAP32[(($108)>>2)];
 var $127=($stack_idx_val_i|0)>($stack_idx2_val_i|0);
 if($127){var $118=$_be;var $pos_add_total_042_i83=$pos_add_total_042_i_be;var $iter_depth_041_i84=$iter_depth_041_i_be;var $stack_idx_val_i85=$stack_idx_val_i;label=23;break;}else{var $status_0_lcssa_i=0;var $pos_add_total_042_i_lcssa=$pos_add_total_042_i_be;label=89;break;}
 case 25: 
 var $status_0_be_i;
 var $128=($status_0_be_i|0)==0;
 if($128){var $iter_depth_041_i_be=$iter_depth_041_i84;var $pos_add_total_042_i_be=$pos_add_total_042_i83;var $_be=$118;label=24;break;}else{var $status_0_lcssa_i=$status_0_be_i;var $pos_add_total_042_i_lcssa=$pos_add_total_042_i83;label=89;break;}
 case 26: 
 var $130=$126;
 var $131=HEAP32[(($130)>>2)];
 if(($131|0)==0){ label=27;break;}else if(($131|0)==3){ label=30;break;}else if(($131|0)==1){ label=34;break;}else if(($131|0)==2){ label=38;break;}else{var $iter_depth_041_i_be=$iter_depth_041_i84;var $pos_add_total_042_i_be=$pos_add_total_042_i83;var $_be=$118;label=24;break;}
 case 27: 
 var $133=(($126+4)|0);
 var $134=$133;
 var $135=HEAP32[(($134)>>2)];
 var $136=$135;
 var $137=HEAP32[(($136)>>2)];
 var $138=($137|0)>-1;
 var $139=($137|0)==-4;
 var $or_cond1_i=$138|$139;
 if($or_cond1_i){label=28;break;}else{var $iter_depth_041_i_be=$iter_depth_041_i84;var $pos_add_total_042_i_be=$pos_add_total_042_i83;var $_be=$118;label=24;break;}
 case 28: 
 var $141=(($135+8)|0);
 var $142=$141;
 var $143=HEAP32[(($142)>>2)];
 var $144=((($143)+($118))|0);
 HEAP32[(($142)>>2)]=$144;
 var $145=HEAP32[(($max_pos_i)>>2)];
 var $146=($144|0)>($145|0);
 if($146){label=29;break;}else{var $iter_depth_041_i_be=$iter_depth_041_i84;var $pos_add_total_042_i_be=$pos_add_total_042_i83;var $_be=$118;label=24;break;}
 case 29: 
 HEAP32[(($max_pos_i)>>2)]=$144;
 var $iter_depth_041_i_be=$iter_depth_041_i84;var $pos_add_total_042_i_be=$pos_add_total_042_i83;var $_be=$118;label=24;break;
 case 30: 
 var $149=(($126+4)|0);
 var $150=$149;
 var $151=HEAP32[(($150)>>2)];
 var $152=(($151+4)|0);
 var $153=$152;
 var $154=HEAP32[(($153)>>2)];
 var $155=$154;
 var $156=_tre_stack_push($3,$155);
 var $157=($156|0)==0;
 if($157){label=31;break;}else{var $status_0_lcssa_i=$156;var $pos_add_total_042_i_lcssa=$pos_add_total_042_i83;label=89;break;}
 case 31: 
 var $159=_tre_stack_push($3,0);
 var $160=($159|0)==0;
 if($160){label=32;break;}else{var $status_0_lcssa_i=$159;var $pos_add_total_042_i_lcssa=$pos_add_total_042_i83;label=89;break;}
 case 32: 
 var $162=$151;
 var $163=HEAP32[(($162)>>2)];
 var $164=$163;
 var $165=_tre_stack_push($3,$164);
 var $166=($165|0)==0;
 if($166){label=33;break;}else{var $status_0_lcssa_i=$165;var $pos_add_total_042_i_lcssa=$pos_add_total_042_i83;label=89;break;}
 case 33: 
 var $168=_tre_stack_push($3,0);
 var $status_0_be_i=$168;label=25;break;
 case 34: 
 var $170=(($126+4)|0);
 var $171=$170;
 var $172=HEAP32[(($171)>>2)];
 var $173=(($172+4)|0);
 var $174=$173;
 var $175=HEAP32[(($174)>>2)];
 var $176=$175;
 var $177=_tre_stack_push($3,$176);
 var $178=($177|0)==0;
 if($178){label=35;break;}else{var $status_0_lcssa_i=$177;var $pos_add_total_042_i_lcssa=$pos_add_total_042_i83;label=89;break;}
 case 35: 
 var $180=_tre_stack_push($3,0);
 var $181=($180|0)==0;
 if($181){label=36;break;}else{var $status_0_lcssa_i=$180;var $pos_add_total_042_i_lcssa=$pos_add_total_042_i83;label=89;break;}
 case 36: 
 var $183=$172;
 var $184=HEAP32[(($183)>>2)];
 var $185=$184;
 var $186=_tre_stack_push($3,$185);
 var $187=($186|0)==0;
 if($187){label=37;break;}else{var $status_0_lcssa_i=$186;var $pos_add_total_042_i_lcssa=$pos_add_total_042_i83;label=89;break;}
 case 37: 
 var $189=_tre_stack_push($3,0);
 var $status_0_be_i=$189;label=25;break;
 case 38: 
 var $191=(($126+4)|0);
 var $192=$191;
 var $193=HEAP32[(($192)>>2)];
 var $value_c_i_i=$118;
 var $194=_tre_stack_push($3,$value_c_i_i);
 var $195=($194|0)==0;
 if($195){label=39;break;}else{var $status_0_lcssa_i=$194;var $pos_add_total_042_i_lcssa=$pos_add_total_042_i83;label=89;break;}
 case 39: 
 var $197=_tre_stack_push($3,$126);
 var $198=($197|0)==0;
 if($198){label=40;break;}else{var $status_0_lcssa_i=$197;var $pos_add_total_042_i_lcssa=$pos_add_total_042_i83;label=89;break;}
 case 40: 
 var $200=_tre_stack_push($3,1);
 var $201=($200|0)==0;
 if($201){label=41;break;}else{var $status_0_lcssa_i=$200;var $pos_add_total_042_i_lcssa=$pos_add_total_042_i83;label=89;break;}
 case 41: 
 var $203=$193;
 var $204=HEAP32[(($203)>>2)];
 var $205=$204;
 var $206=_tre_stack_push($3,$205);
 var $207=($206|0)==0;
 if($207){label=42;break;}else{var $status_0_lcssa_i=$206;var $pos_add_total_042_i_lcssa=$pos_add_total_042_i83;label=89;break;}
 case 42: 
 var $209=_tre_stack_push($3,0);
 var $210=($209|0)==0;
 if($210){label=43;break;}else{var $status_0_lcssa_i=$209;var $pos_add_total_042_i_lcssa=$pos_add_total_042_i83;label=89;break;}
 case 43: 
 var $212=(($193+4)|0);
 var $213=$212;
 var $214=HEAP32[(($213)>>2)];
 var $215=($214|0)>1;
 if($215){label=45;break;}else{label=44;break;}
 case 44: 
 var $217=(($193+8)|0);
 var $218=$217;
 var $219=HEAP32[(($218)>>2)];
 var $220=($219|0)>1;
 if($220){label=45;break;}else{var $223=$118;label=46;break;}
 case 45: 
 HEAP32[(($pos_add_i)>>2)]=0;
 var $223=0;label=46;break;
 case 46: 
 var $223;
 var $224=((($iter_depth_041_i84)+(1))|0);
 var $iter_depth_041_i_be=$224;var $pos_add_total_042_i_be=$pos_add_total_042_i83;var $_be=$223;label=24;break;
 case 47: 
 var $226=(($126+4)|0);
 var $227=$226;
 var $228=HEAP32[(($227)>>2)];
 var $229=((($stack_idx_val_i85)-(3))|0);
 HEAP32[(($108)>>2)]=$229;
 var $230=(($120+($229<<2))|0);
 var $231=$230;
 var $232=HEAP32[(($231)>>2)];
 HEAP32[(($pos_add_i)>>2)]=$232;
 var $233=(($228+4)|0);
 var $234=$233;
 var $235=HEAP32[(($234)>>2)];
 var $236=($235|0)>1;
 if($236){label=48;break;}else{label=49;break;}
 case 48: 
 HEAP32[(($seq2_i)>>2)]=0;
 var $237=$228;
 var $246=$237;label=51;break;
 case 49: 
 var $239=(($228+8)|0);
 var $240=$239;
 var $241=HEAP32[(($240)>>2)];
 var $242=($241|0)>1;
 if($242){label=50;break;}else{var $446=$232;label=87;break;}
 case 50: 
 HEAP32[(($seq2_i)>>2)]=0;
 var $244=$228;
 var $245=($235|0)>0;
 if($245){var $246=$244;label=51;break;}else{var $_lcssa54=$235;var $seq1_0_i_lcssa=0;var $pos_add_save_0_i_lcssa=$232;var $286=$244;label=60;break;}
 case 51: 
 var $246;
 var $249=$235;var $seq1_0_i58=0;var $j_0_i59=1;var $248=$232;label=52;break;
 case 52: 
 var $248;
 var $j_0_i59;
 var $seq1_0_i58;
 var $249;
 var $250=($j_0_i59|0)<($249|0);
 var $251=($250?1:2);
 var $252=HEAP32[(($246)>>2)];
 var $253=_tre_copy_ast($19,$3,$252,$251,$pos_add_i,$tag_directions_1,$copy_i,$max_pos_i);
 var $254=($253|0)==0;
 if($254){label=53;break;}else{var $_0_i1=$253;label=90;break;}
 case 53: 
 var $256=($seq1_0_i58|0)==0;
 var $257=HEAP32[(($copy_i)>>2)];
 if($256){var $seq1_1_i=$257;label=57;break;}else{label=54;break;}
 case 54: 
 var $259=___tre_mem_alloc_impl($19,0,0,1,32);
 var $260=$259;
 var $261=($259|0)==0;
 if($261){var $_0_i1=12;label=90;break;}else{label=55;break;}
 case 55: 
 var $263=___tre_mem_alloc_impl($19,0,0,1,8);
 var $264=(($259+4)|0);
 var $265=$264;
 HEAP32[(($265)>>2)]=$263;
 var $266=($263|0)==0;
 if($266){var $_0_i1=12;label=90;break;}else{label=56;break;}
 case 56: 
 var $268=$259;
 HEAP32[(($268)>>2)]=1;
 var $269=(($259+8)|0);
 var $270=$269;
 HEAP32[(($270)>>2)]=-1;
 var $271=(($259+12)|0);
 var $272=$271;
 HEAP32[(($272)>>2)]=-1;
 var $273=$263;
 HEAP32[(($273)>>2)]=$seq1_0_i58;
 var $274=HEAP32[(($265)>>2)];
 var $275=(($274+4)|0);
 var $276=$275;
 HEAP32[(($276)>>2)]=$257;
 var $277=(($seq1_0_i58+16)|0);
 var $278=HEAP32[(($277)>>2)];
 var $279=(($257+16)|0);
 var $280=HEAP32[(($279)>>2)];
 var $281=((($280)+($278))|0);
 var $282=(($259+16)|0);
 var $283=$282;
 HEAP32[(($283)>>2)]=$281;
 var $seq1_1_i=$260;label=57;break;
 case 57: 
 var $seq1_1_i;
 var $284=($seq1_1_i|0)==0;
 if($284){var $_0_i1=12;label=90;break;}else{label=58;break;}
 case 58: 
 var $_pre_i=HEAP32[(($234)>>2)];
 var $285=($j_0_i59|0)<($_pre_i|0);
 if($285){label=59;break;}else{var $_lcssa54=$_pre_i;var $seq1_0_i_lcssa=$seq1_1_i;var $pos_add_save_0_i_lcssa=$248;var $286=$246;label=60;break;}
 case 59: 
 var $_pre=HEAP32[(($pos_add_i)>>2)];
 var $phitmp126=((($j_0_i59)+(1))|0);
 var $249=$_pre_i;var $seq1_0_i58=$seq1_1_i;var $j_0_i59=$phitmp126;var $248=$_pre;label=52;break;
 case 60: 
 var $286;
 var $pos_add_save_0_i_lcssa;
 var $seq1_0_i_lcssa;
 var $_lcssa54;
 var $287=(($228+8)|0);
 var $288=$287;
 var $289=HEAP32[(($288)>>2)];
 var $290=($289|0)==-1;
 if($290){label=62;break;}else{label=61;break;}
 case 61: 
 var $291=($_lcssa54|0)<($289|0);
 if($291){var $j_124_i=$_lcssa54;var $345=0;label=68;break;}else{var $pos_add_save_2_i=$pos_add_save_0_i_lcssa;var $409=0;label=80;break;}
 case 62: 
 var $293=HEAP32[(($pos_add_i)>>2)];
 var $294=HEAP32[(($286)>>2)];
 var $295=_tre_copy_ast($19,$3,$294,0,$pos_add_i,0,$seq2_i,$max_pos_i);
 var $296=($295|0)==0;
 if($296){label=63;break;}else{var $_0_i1=$295;label=90;break;}
 case 63: 
 var $298=HEAP32[(($seq2_i)>>2)];
 var $299=___tre_mem_alloc_impl($19,0,0,1,32);
 var $300=$299;
 var $301=($299|0)==0;
 if($301){label=65;break;}else{label=64;break;}
 case 64: 
 var $303=___tre_mem_alloc_impl($19,0,0,1,16);
 var $304=(($299+4)|0);
 var $305=$304;
 HEAP32[(($305)>>2)]=$303;
 var $306=($303|0)==0;
 if($306){label=65;break;}else{label=66;break;}
 case 65: 
 HEAP32[(($seq2_i)>>2)]=0;
 var $_0_i1=12;label=90;break;
 case 66: 
 var $307=$299;
 HEAP32[(($307)>>2)]=2;
 var $308=(($299+8)|0);
 var $309=$308;
 HEAP32[(($309)>>2)]=-1;
 var $310=(($299+12)|0);
 var $311=$310;
 HEAP32[(($311)>>2)]=-1;
 var $312=$303;
 HEAP32[(($312)>>2)]=$298;
 var $313=(($303+4)|0);
 var $314=$313;
 HEAP32[(($314)>>2)]=0;
 var $315=(($303+8)|0);
 var $316=$315;
 HEAP32[(($316)>>2)]=-1;
 var $317=(($303+12)|0);
 var $318=HEAP8[($317)];
 var $319=$318&-2;
 HEAP8[($317)]=$319;
 var $320=(($298+16)|0);
 var $321=HEAP32[(($320)>>2)];
 var $322=(($299+16)|0);
 var $323=$322;
 HEAP32[(($323)>>2)]=$321;
 HEAP32[(($seq2_i)>>2)]=$300;
 var $pos_add_save_2_i=$293;var $409=$300;label=80;break;
 case 67: 
 var $325=$401;
 HEAP32[(($325)>>2)]=3;
 var $326=(($401+8)|0);
 var $327=$326;
 HEAP32[(($327)>>2)]=-1;
 var $328=(($401+12)|0);
 var $329=$328;
 HEAP32[(($329)>>2)]=-1;
 var $330=$405;
 HEAP32[(($330)>>2)]=$383;
 var $331=HEAP32[(($407)>>2)];
 var $332=(($331+4)|0);
 var $333=$332;
 HEAP32[(($333)>>2)]=$379;
 var $334=(($382+16)|0);
 var $335=$334;
 var $336=HEAP32[(($335)>>2)];
 var $337=(($379+16)|0);
 var $338=HEAP32[(($337)>>2)];
 var $339=((($338)+($336))|0);
 var $340=(($401+16)|0);
 var $341=$340;
 HEAP32[(($341)>>2)]=$339;
 HEAP32[(($seq2_i)>>2)]=$402;
 var $342=((($j_124_i)+(1))|0);
 var $343=HEAP32[(($288)>>2)];
 var $344=($342|0)<($343|0);
 if($344){var $j_124_i=$342;var $345=$402;label=68;break;}else{var $pos_add_save_2_i=$346;var $409=$402;label=80;break;}
 case 68: 
 var $345;
 var $j_124_i;
 var $346=HEAP32[(($pos_add_i)>>2)];
 var $347=HEAP32[(($286)>>2)];
 var $348=_tre_copy_ast($19,$3,$347,0,$pos_add_i,0,$copy3_i,$max_pos_i);
 var $349=($348|0)==0;
 if($349){label=69;break;}else{var $_0_i1=$348;label=90;break;}
 case 69: 
 var $351=($345|0)==0;
 var $352=HEAP32[(($copy3_i)>>2)];
 if($351){var $379=$352;label=74;break;}else{label=70;break;}
 case 70: 
 var $354=___tre_mem_alloc_impl($19,0,0,1,32);
 var $355=$354;
 var $356=($354|0)==0;
 if($356){label=73;break;}else{label=71;break;}
 case 71: 
 var $358=___tre_mem_alloc_impl($19,0,0,1,8);
 var $359=(($354+4)|0);
 var $360=$359;
 HEAP32[(($360)>>2)]=$358;
 var $361=($358|0)==0;
 if($361){label=73;break;}else{label=72;break;}
 case 72: 
 var $363=$354;
 HEAP32[(($363)>>2)]=1;
 var $364=(($354+8)|0);
 var $365=$364;
 HEAP32[(($365)>>2)]=-1;
 var $366=(($354+12)|0);
 var $367=$366;
 HEAP32[(($367)>>2)]=-1;
 var $368=$358;
 HEAP32[(($368)>>2)]=$352;
 var $369=HEAP32[(($360)>>2)];
 var $370=(($369+4)|0);
 var $371=$370;
 HEAP32[(($371)>>2)]=$345;
 var $372=(($352+16)|0);
 var $373=HEAP32[(($372)>>2)];
 var $374=(($345+16)|0);
 var $375=HEAP32[(($374)>>2)];
 var $376=((($375)+($373))|0);
 var $377=(($354+16)|0);
 var $378=$377;
 HEAP32[(($378)>>2)]=$376;
 var $379=$355;label=74;break;
 case 73: 
 HEAP32[(($seq2_i)>>2)]=0;
 var $_0_i1=12;label=90;break;
 case 74: 
 var $379;
 HEAP32[(($seq2_i)>>2)]=$379;
 var $380=($379|0)==0;
 if($380){var $_0_i1=12;label=90;break;}else{label=75;break;}
 case 75: 
 var $382=___tre_mem_alloc_impl($19,0,0,1,32);
 var $383=$382;
 var $384=($382|0)==0;
 if($384){var $_0_i1=12;label=90;break;}else{label=76;break;}
 case 76: 
 var $386=___tre_mem_alloc_impl($19,0,0,1,20);
 var $387=(($382+4)|0);
 var $388=$387;
 HEAP32[(($388)>>2)]=$386;
 var $389=($386|0)==0;
 if($389){var $_0_i1=12;label=90;break;}else{label=77;break;}
 case 77: 
 var $391=$382;
 HEAP32[(($391)>>2)]=0;
 var $392=(($382+8)|0);
 var $393=$392;
 HEAP32[(($393)>>2)]=-1;
 var $394=(($382+12)|0);
 var $395=$394;
 HEAP32[(($395)>>2)]=-1;
 var $396=$386;
 HEAP32[(($396)>>2)]=-1;
 var $397=(($386+4)|0);
 var $398=$397;
 HEAP32[(($398)>>2)]=-1;
 var $399=(($386+8)|0);
 var $400=$399;
 HEAP32[(($400)>>2)]=-1;
 var $401=___tre_mem_alloc_impl($19,0,0,1,32);
 var $402=$401;
 var $403=($401|0)==0;
 if($403){label=79;break;}else{label=78;break;}
 case 78: 
 var $405=___tre_mem_alloc_impl($19,0,0,1,8);
 var $406=(($401+4)|0);
 var $407=$406;
 HEAP32[(($407)>>2)]=$405;
 var $408=($405|0)==0;
 if($408){label=79;break;}else{label=67;break;}
 case 79: 
 HEAP32[(($seq2_i)>>2)]=0;
 var $_0_i1=12;label=90;break;
 case 80: 
 var $409;
 var $pos_add_save_2_i;
 HEAP32[(($pos_add_i)>>2)]=$pos_add_save_2_i;
 var $410=($seq1_0_i_lcssa|0)==0;
 if($410){var $seq1_2_i=$409;label=85;break;}else{label=81;break;}
 case 81: 
 var $412=($409|0)==0;
 if($412){var $seq1_211_i=$seq1_0_i_lcssa;label=86;break;}else{label=82;break;}
 case 82: 
 var $414=___tre_mem_alloc_impl($19,0,0,1,32);
 var $415=$414;
 var $416=($414|0)==0;
 if($416){var $_0_i1=12;label=90;break;}else{label=83;break;}
 case 83: 
 var $418=___tre_mem_alloc_impl($19,0,0,1,8);
 var $419=(($414+4)|0);
 var $420=$419;
 HEAP32[(($420)>>2)]=$418;
 var $421=($418|0)==0;
 if($421){var $_0_i1=12;label=90;break;}else{label=84;break;}
 case 84: 
 var $423=$414;
 HEAP32[(($423)>>2)]=1;
 var $424=(($414+8)|0);
 var $425=$424;
 HEAP32[(($425)>>2)]=-1;
 var $426=(($414+12)|0);
 var $427=$426;
 HEAP32[(($427)>>2)]=-1;
 var $428=$418;
 HEAP32[(($428)>>2)]=$seq1_0_i_lcssa;
 var $429=HEAP32[(($420)>>2)];
 var $430=(($429+4)|0);
 var $431=$430;
 HEAP32[(($431)>>2)]=$409;
 var $432=(($seq1_0_i_lcssa+16)|0);
 var $433=HEAP32[(($432)>>2)];
 var $434=(($409+16)|0);
 var $435=HEAP32[(($434)>>2)];
 var $436=((($435)+($433))|0);
 var $437=(($414+16)|0);
 var $438=$437;
 HEAP32[(($438)>>2)]=$436;
 var $seq1_2_i=$415;label=85;break;
 case 85: 
 var $seq1_2_i;
 var $439=($seq1_2_i|0)==0;
 if($439){var $_0_i1=12;label=90;break;}else{var $seq1_211_i=$seq1_2_i;label=86;break;}
 case 86: 
 var $seq1_211_i;
 var $440=(($seq1_211_i+4)|0);
 var $441=HEAP32[(($440)>>2)];
 HEAP32[(($227)>>2)]=$441;
 var $442=(($seq1_211_i)|0);
 var $443=HEAP32[(($442)>>2)];
 var $444=$126;
 HEAP32[(($444)>>2)]=$443;
 var $446=$pos_add_save_2_i;label=87;break;
 case 87: 
 var $446;
 var $447=((($iter_depth_041_i84)-(1))|0);
 var $448=((($446)-($232))|0);
 var $449=((($448)+($pos_add_total_042_i83))|0);
 var $450=($447|0)==0;
 if($450){label=88;break;}else{var $iter_depth_041_i_be=$447;var $pos_add_total_042_i_be=$449;var $_be=$446;label=24;break;}
 case 88: 
 HEAP32[(($pos_add_i)>>2)]=$449;
 var $iter_depth_041_i_be=0;var $pos_add_total_042_i_be=$449;var $_be=$449;label=24;break;
 case 89: 
 var $pos_add_total_042_i_lcssa;
 var $status_0_lcssa_i;
 var $452=HEAP32[(($102)>>2)];
 var $453=((($452)+($pos_add_total_042_i_lcssa))|0);
 var $454=HEAP32[(($max_pos_i)>>2)];
 var $455=($454|0)>($453|0);
 var $__i=($455?$454:$453);
 HEAP32[(($102)>>2)]=$__i;
 var $_0_i1=$status_0_lcssa_i;label=90;break;
 case 90: 
 var $_0_i1;
 var $$etemp$6$0=4;
 var $$etemp$6$1=0;

 var $$etemp$7$0=4;
 var $$etemp$7$1=0;

 var $$etemp$8$0=4;
 var $$etemp$8$1=0;

 var $$etemp$9$0=4;
 var $$etemp$9$1=0;

 var $$etemp$10$0=4;
 var $$etemp$10$1=0;

 var $456=($_0_i1|0)==0;
 if($456){label=91;break;}else{var $errcode_0=$_0_i1;var $tnfa_0=$51;var $counts_0=0;var $offs_0=0;label=178;break;}
 case 91: 
 var $458=HEAP32[(($102)>>2)];
 var $459=((($458)+(1))|0);
 HEAP32[(($102)>>2)]=$459;
 var $460=___tre_mem_alloc_impl($19,0,0,1,32);
 var $461=$460;
 var $462=($460|0)==0;
 if($462){var $errcode_0=12;var $tnfa_0=$51;var $counts_0=0;var $offs_0=0;label=178;break;}else{label=92;break;}
 case 92: 
 var $464=___tre_mem_alloc_impl($19,0,0,1,20);
 var $465=(($460+4)|0);
 var $466=$465;
 HEAP32[(($466)>>2)]=$464;
 var $467=($464|0)==0;
 if($467){var $errcode_0=12;var $tnfa_0=$51;var $counts_0=0;var $offs_0=0;label=178;break;}else{label=93;break;}
 case 93: 
 var $469=$460;
 HEAP32[(($469)>>2)]=0;
 var $470=(($460+8)|0);
 var $471=$470;
 HEAP32[(($471)>>2)]=-1;
 var $472=(($460+12)|0);
 var $473=$472;
 HEAP32[(($473)>>2)]=-1;
 var $474=$464;
 HEAP32[(($474)>>2)]=0;
 var $475=(($464+4)|0);
 var $476=$475;
 HEAP32[(($476)>>2)]=0;
 var $477=(($464+8)|0);
 var $478=$477;
 HEAP32[(($478)>>2)]=$458;
 var $479=___tre_mem_alloc_impl($19,0,0,1,32);
 var $480=$479;
 var $481=($479|0)==0;
 if($481){var $errcode_0=12;var $tnfa_0=$51;var $counts_0=0;var $offs_0=0;label=178;break;}else{label=94;break;}
 case 94: 
 var $483=___tre_mem_alloc_impl($19,0,0,1,8);
 var $484=(($479+4)|0);
 var $485=$484;
 HEAP32[(($485)>>2)]=$483;
 var $486=($483|0)==0;
 if($486){var $errcode_0=12;var $tnfa_0=$51;var $counts_0=0;var $offs_0=0;label=178;break;}else{label=95;break;}
 case 95: 
 var $488=$479;
 HEAP32[(($488)>>2)]=1;
 var $489=(($479+8)|0);
 var $490=$489;
 HEAP32[(($490)>>2)]=-1;
 var $491=(($479+12)|0);
 var $492=$491;
 HEAP32[(($492)>>2)]=-1;
 var $493=$483;
 HEAP32[(($493)>>2)]=$40;
 var $494=HEAP32[(($485)>>2)];
 var $495=(($494+4)|0);
 var $496=$495;
 HEAP32[(($496)>>2)]=$461;
 var $497=(($40+16)|0);
 var $498=HEAP32[(($497)>>2)];
 var $499=(($460+16)|0);
 var $500=$499;
 var $501=HEAP32[(($500)>>2)];
 var $502=((($501)+($498))|0);
 var $503=(($479+16)|0);
 var $504=$503;
 HEAP32[(($504)>>2)]=$502;
 var $505=$num_tags_i;
 var $$etemp$11$0=4;
 var $$etemp$11$1=0;

 var $506=$assertions_i;
 var $$etemp$12$0=4;
 var $$etemp$12$1=0;

 var $stack_idx2_val_i5=HEAP32[(($108)>>2)];
 var $507=_tre_stack_push($3,$479);
 var $508=($507|0)==0;
 if($508){label=96;break;}else{var $errcode_0=$507;var $tnfa_0=$51;var $counts_0=0;var $offs_0=0;label=178;break;}
 case 96: 
 var $510=_tre_stack_push($3,0);
 var $511=($510|0)==0;
 if($511){label=97;break;}else{var $errcode_0=$510;var $tnfa_0=$51;var $counts_0=0;var $offs_0=0;label=178;break;}
 case 97: 
 var $stack_idx_val22_i=HEAP32[(($108)>>2)];
 var $512=($stack_idx_val22_i|0)>($stack_idx2_val_i5|0);
 if($512){label=98;break;}else{label=160;break;}
 case 98: 
 var $513=(($2+16)|0);
 var $514=$513;
 var $515=$stack_idx_val22_i;label=99;break;
 case 99: 
 var $515;
 var $516=((($515)-(1))|0);
 HEAP32[(($108)>>2)]=$516;
 var $517=HEAP32[(($514)>>2)];
 var $518=(($517+($516<<2))|0);
 var $519=$518;
 var $520=HEAP32[(($519)>>2)];
 var $521=((($515)-(2))|0);
 HEAP32[(($108)>>2)]=$521;
 var $522=(($517+($521<<2))|0);
 var $523=HEAP32[(($522)>>2)];
 if(($520|0)==0){ label=101;break;}else if(($520|0)==1){ label=135;break;}else if(($520|0)==3){ label=139;break;}else if(($520|0)==2){ label=144;break;}else{label=100;break;}
 case 100: 
 var $stack_idx_val_i9=HEAP32[(($108)>>2)];
 var $524=($stack_idx_val_i9|0)>($stack_idx2_val_i5|0);
 if($524){var $515=$stack_idx_val_i9;label=99;break;}else{label=160;break;}
 case 101: 
 var $526=$523;
 var $527=HEAP32[(($526)>>2)];
 if(($527|0)==0){ label=102;break;}else if(($527|0)==3){ label=119;break;}else if(($527|0)==1){ label=125;break;}else if(($527|0)==2){ label=131;break;}else{label=100;break;}
 case 102: 
 var $529=(($523+4)|0);
 var $530=$529;
 var $531=HEAP32[(($530)>>2)];
 var $532=$531;
 var $533=HEAP32[(($532)>>2)];
 var $534=($533|0)==-4;
 if($534){label=103;break;}else{label=108;break;}
 case 103: 
 var $536=(($523+8)|0);
 var $537=$536;
 HEAP32[(($537)>>2)]=0;
 var $538=(($531+8)|0);
 var $539=$538;
 var $540=HEAP32[(($539)>>2)];
 var $541=___tre_mem_alloc_impl($19,0,0,1,64);
 var $542=($541|0)==0;
 if($542){label=104;break;}else{label=105;break;}
 case 104: 
 var $543=(($523+24)|0);
 var $544=$543;
 HEAP32[(($544)>>2)]=0;
 var $errcode_0=12;var $tnfa_0=$51;var $counts_0=0;var $offs_0=0;label=178;break;
 case 105: 
 var $545=$541;
 var $546=$541;
 HEAP32[(($546)>>2)]=$540;
 var $547=(($541+4)|0);
 var $548=$547;
 HEAP32[(($548)>>2)]=0;
 var $549=(($541+8)|0);
 var $550=$549;
 HEAP32[(($550)>>2)]=1114111;
 var $551=(($541+20)|0);
 var $552=$551;
 HEAP32[(($552)>>2)]=0;
 var $553=(($541+24)|0);
 var $554=$553;
 HEAP32[(($554)>>2)]=0;
 var $555=(($541+28)|0);
 var $556=(($523+24)|0);
 var $557=$556;
 HEAP32[(($555)>>2)]=-1; HEAP32[((($555)+(4))>>2)]=-1; HEAP32[((($555)+(8))>>2)]=-1; HEAP32[((($555)+(12))>>2)]=-1;
 HEAP32[(($557)>>2)]=$545;
 var $558=HEAP32[(($539)>>2)];
 var $559=(($531+4)|0);
 var $560=$559;
 var $561=HEAP32[(($560)>>2)];
 var $562=___tre_mem_alloc_impl($19,0,0,1,64);
 var $563=($562|0)==0;
 if($563){label=106;break;}else{label=107;break;}
 case 106: 
 var $564=(($523+28)|0);
 var $565=$564;
 HEAP32[(($565)>>2)]=0;
 var $errcode_0=12;var $tnfa_0=$51;var $counts_0=0;var $offs_0=0;label=178;break;
 case 107: 
 var $566=$562;
 var $567=$562;
 HEAP32[(($567)>>2)]=$558;
 var $568=(($562+4)|0);
 var $569=$568;
 HEAP32[(($569)>>2)]=0;
 var $570=(($562+8)|0);
 var $571=$570;
 HEAP32[(($571)>>2)]=1114111;
 var $572=(($562+20)|0);
 var $573=$572;
 HEAP32[(($573)>>2)]=0;
 var $574=(($562+24)|0);
 var $575=$574;
 HEAP32[(($575)>>2)]=0;
 var $576=(($562+28)|0);
 var $577=$576;
 HEAP32[(($577)>>2)]=$561;
 var $578=(($562+32)|0);
 var $579=$578;
 HEAP32[(($579)>>2)]=-1;
 var $580=(($562+36)|0);
 var $581=$580;
 HEAP32[(($581)>>2)]=-1;
 var $582=(($562+40)|0);
 var $583=$582;
 HEAP32[(($583)>>2)]=-1;
 var $584=(($523+28)|0);
 var $585=$584;
 HEAP32[(($585)>>2)]=$566;
 label=100;break;
 case 108: 
 var $587=($533|0)<0;
 var $588=(($523+8)|0);
 var $589=$588;
 if($587){label=109;break;}else{label=114;break;}
 case 109: 
 HEAP32[(($589)>>2)]=1;
 var $591=___tre_mem_alloc_impl($19,0,0,1,32);
 var $592=($591|0)==0;
 if($592){label=110;break;}else{label=111;break;}
 case 110: 
 var $593=(($523+24)|0);
 var $594=$593;
 HEAP32[(($594)>>2)]=0;
 var $errcode_0=12;var $tnfa_0=$51;var $counts_0=0;var $offs_0=0;label=178;break;
 case 111: 
 var $595=$591;
 var $596=$591;
 HEAP32[(($596)>>2)]=-1;
 var $597=(($591+4)|0);
 var $598=$597;
 HEAP32[(($598)>>2)]=-1;
 var $599=(($591+8)|0);
 var $600=$599;
 HEAP32[(($600)>>2)]=-1;
 var $601=(($523+24)|0);
 var $602=$601;
 HEAP32[(($602)>>2)]=$595;
 var $603=___tre_mem_alloc_impl($19,0,0,1,32);
 var $604=($603|0)==0;
 if($604){label=112;break;}else{label=113;break;}
 case 112: 
 var $605=(($523+28)|0);
 var $606=$605;
 HEAP32[(($606)>>2)]=0;
 var $errcode_0=12;var $tnfa_0=$51;var $counts_0=0;var $offs_0=0;label=178;break;
 case 113: 
 var $607=$603;
 var $608=$603;
 HEAP32[(($608)>>2)]=-1;
 var $609=(($603+4)|0);
 var $610=$609;
 HEAP32[(($610)>>2)]=-1;
 var $611=(($603+8)|0);
 var $612=$611;
 HEAP32[(($612)>>2)]=-1;
 var $613=(($523+28)|0);
 var $614=$613;
 HEAP32[(($614)>>2)]=$607;
 label=100;break;
 case 114: 
 HEAP32[(($589)>>2)]=0;
 var $616=(($531+8)|0);
 var $617=$616;
 var $618=HEAP32[(($617)>>2)];
 var $619=(($531+4)|0);
 var $620=$619;
 var $621=HEAP32[(($620)>>2)];
 var $622=___tre_mem_alloc_impl($19,0,0,1,64);
 var $623=($622|0)==0;
 if($623){label=115;break;}else{label=116;break;}
 case 115: 
 var $624=(($523+24)|0);
 var $625=$624;
 HEAP32[(($625)>>2)]=0;
 var $errcode_0=12;var $tnfa_0=$51;var $counts_0=0;var $offs_0=0;label=178;break;
 case 116: 
 var $626=$622;
 var $627=$622;
 HEAP32[(($627)>>2)]=$618;
 var $628=(($622+4)|0);
 var $629=$628;
 HEAP32[(($629)>>2)]=$533;
 var $630=(($622+8)|0);
 var $631=$630;
 HEAP32[(($631)>>2)]=$621;
 var $632=(($622+20)|0);
 var $633=$632;
 HEAP32[(($633)>>2)]=0;
 var $634=(($622+24)|0);
 var $635=$634;
 HEAP32[(($635)>>2)]=0;
 var $636=(($622+28)|0);
 var $637=(($523+24)|0);
 var $638=$637;
 HEAP32[(($636)>>2)]=-1; HEAP32[((($636)+(4))>>2)]=-1; HEAP32[((($636)+(8))>>2)]=-1; HEAP32[((($636)+(12))>>2)]=-1;
 HEAP32[(($638)>>2)]=$626;
 var $639=HEAP32[(($617)>>2)];
 var $640=HEAP32[(($532)>>2)];
 var $641=HEAP32[(($620)>>2)];
 var $642=(($531+12)|0);
 var $643=$642;
 var $644=HEAP32[(($643)>>2)];
 var $645=(($531+16)|0);
 var $646=$645;
 var $647=HEAP32[(($646)>>2)];
 var $648=___tre_mem_alloc_impl($19,0,0,1,64);
 var $649=($648|0)==0;
 if($649){label=117;break;}else{label=118;break;}
 case 117: 
 var $650=(($523+28)|0);
 var $651=$650;
 HEAP32[(($651)>>2)]=0;
 var $errcode_0=12;var $tnfa_0=$51;var $counts_0=0;var $offs_0=0;label=178;break;
 case 118: 
 var $652=$648;
 var $653=$648;
 HEAP32[(($653)>>2)]=$639;
 var $654=(($648+4)|0);
 var $655=$654;
 HEAP32[(($655)>>2)]=$640;
 var $656=(($648+8)|0);
 var $657=$656;
 HEAP32[(($657)>>2)]=$641;
 var $658=(($648+20)|0);
 var $659=$658;
 HEAP32[(($659)>>2)]=$644;
 var $660=(($648+24)|0);
 var $661=$660;
 HEAP32[(($661)>>2)]=$647;
 var $662=(($648+28)|0);
 var $663=(($523+28)|0);
 var $664=$663;
 HEAP32[(($662)>>2)]=-1; HEAP32[((($662)+(4))>>2)]=-1; HEAP32[((($662)+(8))>>2)]=-1; HEAP32[((($662)+(12))>>2)]=-1;
 HEAP32[(($664)>>2)]=$652;
 label=100;break;
 case 119: 
 var $666=_tre_stack_push($3,$523);
 var $667=($666|0)==0;
 if($667){label=120;break;}else{var $errcode_0=$666;var $tnfa_0=$51;var $counts_0=0;var $offs_0=0;label=178;break;}
 case 120: 
 var $669=_tre_stack_push($3,1);
 var $670=($669|0)==0;
 if($670){label=121;break;}else{var $errcode_0=$669;var $tnfa_0=$51;var $counts_0=0;var $offs_0=0;label=178;break;}
 case 121: 
 var $672=(($523+4)|0);
 var $673=$672;
 var $674=HEAP32[(($673)>>2)];
 var $675=(($674+4)|0);
 var $676=$675;
 var $677=HEAP32[(($676)>>2)];
 var $678=$677;
 var $679=_tre_stack_push($3,$678);
 var $680=($679|0)==0;
 if($680){label=122;break;}else{var $errcode_0=$679;var $tnfa_0=$51;var $counts_0=0;var $offs_0=0;label=178;break;}
 case 122: 
 var $682=_tre_stack_push($3,0);
 var $683=($682|0)==0;
 if($683){label=123;break;}else{var $errcode_0=$682;var $tnfa_0=$51;var $counts_0=0;var $offs_0=0;label=178;break;}
 case 123: 
 var $685=HEAP32[(($673)>>2)];
 var $686=$685;
 var $687=HEAP32[(($686)>>2)];
 var $688=$687;
 var $689=_tre_stack_push($3,$688);
 var $690=($689|0)==0;
 if($690){label=124;break;}else{var $errcode_0=$689;var $tnfa_0=$51;var $counts_0=0;var $offs_0=0;label=178;break;}
 case 124: 
 var $692=_tre_stack_push($3,0);
 var $693=($692|0)==0;
 if($693){label=100;break;}else{var $errcode_0=$692;var $tnfa_0=$51;var $counts_0=0;var $offs_0=0;label=178;break;}
 case 125: 
 var $695=_tre_stack_push($3,$523);
 var $696=($695|0)==0;
 if($696){label=126;break;}else{var $errcode_0=$695;var $tnfa_0=$51;var $counts_0=0;var $offs_0=0;label=178;break;}
 case 126: 
 var $698=_tre_stack_push($3,2);
 var $699=($698|0)==0;
 if($699){label=127;break;}else{var $errcode_0=$698;var $tnfa_0=$51;var $counts_0=0;var $offs_0=0;label=178;break;}
 case 127: 
 var $701=(($523+4)|0);
 var $702=$701;
 var $703=HEAP32[(($702)>>2)];
 var $704=(($703+4)|0);
 var $705=$704;
 var $706=HEAP32[(($705)>>2)];
 var $707=$706;
 var $708=_tre_stack_push($3,$707);
 var $709=($708|0)==0;
 if($709){label=128;break;}else{var $errcode_0=$708;var $tnfa_0=$51;var $counts_0=0;var $offs_0=0;label=178;break;}
 case 128: 
 var $711=_tre_stack_push($3,0);
 var $712=($711|0)==0;
 if($712){label=129;break;}else{var $errcode_0=$711;var $tnfa_0=$51;var $counts_0=0;var $offs_0=0;label=178;break;}
 case 129: 
 var $714=HEAP32[(($702)>>2)];
 var $715=$714;
 var $716=HEAP32[(($715)>>2)];
 var $717=$716;
 var $718=_tre_stack_push($3,$717);
 var $719=($718|0)==0;
 if($719){label=130;break;}else{var $errcode_0=$718;var $tnfa_0=$51;var $counts_0=0;var $offs_0=0;label=178;break;}
 case 130: 
 var $721=_tre_stack_push($3,0);
 var $722=($721|0)==0;
 if($722){label=100;break;}else{var $errcode_0=$721;var $tnfa_0=$51;var $counts_0=0;var $offs_0=0;label=178;break;}
 case 131: 
 var $724=_tre_stack_push($3,$523);
 var $725=($724|0)==0;
 if($725){label=132;break;}else{var $errcode_0=$724;var $tnfa_0=$51;var $counts_0=0;var $offs_0=0;label=178;break;}
 case 132: 
 var $727=_tre_stack_push($3,3);
 var $728=($727|0)==0;
 if($728){label=133;break;}else{var $errcode_0=$727;var $tnfa_0=$51;var $counts_0=0;var $offs_0=0;label=178;break;}
 case 133: 
 var $730=(($523+4)|0);
 var $731=$730;
 var $732=HEAP32[(($731)>>2)];
 var $733=$732;
 var $734=HEAP32[(($733)>>2)];
 var $735=$734;
 var $736=_tre_stack_push($3,$735);
 var $737=($736|0)==0;
 if($737){label=134;break;}else{var $errcode_0=$736;var $tnfa_0=$51;var $counts_0=0;var $offs_0=0;label=178;break;}
 case 134: 
 var $739=_tre_stack_push($3,0);
 var $740=($739|0)==0;
 if($740){label=100;break;}else{var $errcode_0=$739;var $tnfa_0=$51;var $counts_0=0;var $offs_0=0;label=178;break;}
 case 135: 
 var $742=(($523+4)|0);
 var $743=$742;
 var $744=HEAP32[(($743)>>2)];
 var $745=$744;
 var $746=HEAP32[(($745)>>2)];
 var $747=(($746+8)|0);
 var $748=HEAP32[(($747)>>2)];
 var $749=($748|0)==0;
 var $750=(($744+4)|0);
 var $751=$750;
 var $752=HEAP32[(($751)>>2)];
 if($749){label=136;break;}else{var $757=1;label=137;break;}
 case 136: 
 var $754=(($752+8)|0);
 var $755=HEAP32[(($754)>>2)];
 var $756=($755|0)!=0;
 var $phitmp1_i=($756&1);
 var $757=$phitmp1_i;label=137;break;
 case 137: 
 var $757;
 var $758=(($523+8)|0);
 var $759=$758;
 HEAP32[(($759)>>2)]=$757;
 var $760=(($746+24)|0);
 var $761=HEAP32[(($760)>>2)];
 var $762=(($752+24)|0);
 var $763=HEAP32[(($762)>>2)];
 var $764=_tre_set_union($19,$761,$763,0,0);
 var $765=(($523+24)|0);
 var $766=$765;
 HEAP32[(($766)>>2)]=$764;
 var $767=($764|0)==0;
 if($767){var $errcode_0=12;var $tnfa_0=$51;var $counts_0=0;var $offs_0=0;label=178;break;}else{label=138;break;}
 case 138: 
 var $769=HEAP32[(($745)>>2)];
 var $770=(($769+28)|0);
 var $771=HEAP32[(($770)>>2)];
 var $772=HEAP32[(($751)>>2)];
 var $773=(($772+28)|0);
 var $774=HEAP32[(($773)>>2)];
 var $775=_tre_set_union($19,$771,$774,0,0);
 var $776=(($523+28)|0);
 var $777=$776;
 HEAP32[(($777)>>2)]=$775;
 var $778=($775|0)==0;
 if($778){var $errcode_0=12;var $tnfa_0=$51;var $counts_0=0;var $offs_0=0;label=178;break;}else{label=100;break;}
 case 139: 
 var $780=(($523+4)|0);
 var $781=$780;
 var $782=HEAP32[(($781)>>2)];
 var $783=(($782+4)|0);
 var $784=$783;
 var $785=HEAP32[(($784)>>2)];
 var $786=($785|0)==0;
 var $_phi_trans_insert_phi_trans_insert_i=$782;
 var $_pre_pre_i=HEAP32[(($_phi_trans_insert_phi_trans_insert_i)>>2)];
 if($786){label=141;break;}else{label=140;break;}
 case 140: 
 var $788=(($_pre_pre_i+8)|0);
 var $789=HEAP32[(($788)>>2)];
 var $790=($789|0)==0;
 if($790){label=142;break;}else{label=141;break;}
 case 141: 
 var $791=(($523+8)|0);
 var $792=$791;
 HEAP32[(($792)>>2)]=1;
 label=143;break;
 case 142: 
 var $794=(($523+8)|0);
 var $795=$794;
 HEAP32[(($795)>>2)]=0;
 label=143;break;
 case 143: 
 var $797=(($_pre_pre_i+24)|0);
 var $798=HEAP32[(($797)>>2)];
 var $799=(($523+24)|0);
 var $800=$799;
 HEAP32[(($800)>>2)]=$798;
 var $801=HEAP32[(($_phi_trans_insert_phi_trans_insert_i)>>2)];
 var $802=(($801+28)|0);
 var $803=HEAP32[(($802)>>2)];
 var $804=(($523+28)|0);
 var $805=$804;
 HEAP32[(($805)>>2)]=$803;
 label=100;break;
 case 144: 
 var $807=(($523+4)|0);
 var $808=$807;
 var $809=HEAP32[(($808)>>2)];
 var $810=$809;
 var $811=HEAP32[(($810)>>2)];
 var $812=(($811+8)|0);
 var $813=HEAP32[(($812)>>2)];
 var $814=($813|0)==0;
 if($814){var $823=0;label=146;break;}else{label=145;break;}
 case 145: 
 var $816=(($809+4)|0);
 var $817=$816;
 var $818=HEAP32[(($817)>>2)];
 var $819=(($818+8)|0);
 var $820=HEAP32[(($819)>>2)];
 var $821=($820|0)!=0;
 var $phitmp_i=($821&1);
 var $823=$phitmp_i;label=146;break;
 case 146: 
 var $823;
 var $824=(($523+8)|0);
 var $825=$824;
 HEAP32[(($825)>>2)]=$823;
 var $826=HEAP32[(($812)>>2)];
 var $827=($826|0)==0;
 if($827){label=152;break;}else{label=147;break;}
 case 147: 
 var $829=_tre_match_empty($3,$811,0,0,$num_tags_i);
 var $830=($829|0)==0;
 if($830){label=148;break;}else{var $errcode_0=$829;var $tnfa_0=$51;var $counts_0=0;var $offs_0=0;label=178;break;}
 case 148: 
 var $832=HEAP32[(($num_tags_i)>>2)];
 var $833=$832<<2;
 var $834=((($833)+(4))|0);
 var $835=_malloc($834);
 var $836=$835;
 var $837=($835|0)==0;
 if($837){var $errcode_0=12;var $tnfa_0=$51;var $counts_0=0;var $offs_0=0;label=178;break;}else{label=149;break;}
 case 149: 
 HEAP32[(($836)>>2)]=-1;
 HEAP32[(($assertions_i)>>2)]=0;
 var $839=HEAP32[(($810)>>2)];
 var $840=_tre_match_empty($3,$839,$836,$assertions_i,0);
 var $841=($840|0)==0;
 if($841){label=151;break;}else{label=150;break;}
 case 150: 
 _free($835);
 var $errcode_0=$840;var $tnfa_0=$51;var $counts_0=0;var $offs_0=0;label=178;break;
 case 151: 
 var $844=(($809+4)|0);
 var $845=$844;
 var $846=HEAP32[(($845)>>2)];
 var $847=(($846+24)|0);
 var $848=HEAP32[(($847)>>2)];
 var $849=HEAP32[(($810)>>2)];
 var $850=(($849+24)|0);
 var $851=HEAP32[(($850)>>2)];
 var $852=HEAP32[(($assertions_i)>>2)];
 var $853=_tre_set_union($19,$848,$851,$836,$852);
 var $854=(($523+24)|0);
 var $855=$854;
 HEAP32[(($855)>>2)]=$853;
 _free($835);
 var $856=HEAP32[(($855)>>2)];
 var $857=($856|0)==0;
 if($857){var $errcode_0=12;var $tnfa_0=$51;var $counts_0=0;var $offs_0=0;label=178;break;}else{var $_pre_phi46_i=$845;label=153;break;}
 case 152: 
 var $859=(($811+24)|0);
 var $860=HEAP32[(($859)>>2)];
 var $861=(($523+24)|0);
 var $862=$861;
 HEAP32[(($862)>>2)]=$860;
 var $_pre44_i=(($809+4)|0);
 var $_pre45_i=$_pre44_i;
 var $_pre_phi46_i=$_pre45_i;label=153;break;
 case 153: 
 var $_pre_phi46_i;
 var $864=HEAP32[(($_pre_phi46_i)>>2)];
 var $865=(($864+8)|0);
 var $866=HEAP32[(($865)>>2)];
 var $867=($866|0)==0;
 if($867){label=159;break;}else{label=154;break;}
 case 154: 
 var $869=_tre_match_empty($3,$864,0,0,$num_tags_i);
 var $870=($869|0)==0;
 if($870){label=155;break;}else{var $errcode_0=$869;var $tnfa_0=$51;var $counts_0=0;var $offs_0=0;label=178;break;}
 case 155: 
 var $872=HEAP32[(($num_tags_i)>>2)];
 var $873=$872<<2;
 var $874=((($873)+(4))|0);
 var $875=_malloc($874);
 var $876=$875;
 var $877=($875|0)==0;
 if($877){var $errcode_0=12;var $tnfa_0=$51;var $counts_0=0;var $offs_0=0;label=178;break;}else{label=156;break;}
 case 156: 
 HEAP32[(($876)>>2)]=-1;
 HEAP32[(($assertions_i)>>2)]=0;
 var $879=HEAP32[(($_pre_phi46_i)>>2)];
 var $880=_tre_match_empty($3,$879,$876,$assertions_i,0);
 var $881=($880|0)==0;
 if($881){label=158;break;}else{label=157;break;}
 case 157: 
 _free($875);
 var $errcode_0=$880;var $tnfa_0=$51;var $counts_0=0;var $offs_0=0;label=178;break;
 case 158: 
 var $884=HEAP32[(($810)>>2)];
 var $885=(($884+28)|0);
 var $886=HEAP32[(($885)>>2)];
 var $887=HEAP32[(($_pre_phi46_i)>>2)];
 var $888=(($887+28)|0);
 var $889=HEAP32[(($888)>>2)];
 var $890=HEAP32[(($assertions_i)>>2)];
 var $891=_tre_set_union($19,$886,$889,$876,$890);
 var $892=(($523+28)|0);
 var $893=$892;
 HEAP32[(($893)>>2)]=$891;
 _free($875);
 var $894=HEAP32[(($893)>>2)];
 var $895=($894|0)==0;
 if($895){var $errcode_0=12;var $tnfa_0=$51;var $counts_0=0;var $offs_0=0;label=178;break;}else{label=100;break;}
 case 159: 
 var $897=(($864+28)|0);
 var $898=HEAP32[(($897)>>2)];
 var $899=(($523+28)|0);
 var $900=$899;
 HEAP32[(($900)>>2)]=$898;
 label=100;break;
 case 160: 
 var $$etemp$13$0=4;
 var $$etemp$13$1=0;

 var $$etemp$14$0=4;
 var $$etemp$14$1=0;

 var $901=HEAP32[(($102)>>2)];
 var $902=$901<<2;
 var $903=_malloc($902);
 var $904=$903;
 var $905=($903|0)==0;
 if($905){var $errcode_0=12;var $tnfa_0=$51;var $counts_0=$904;var $offs_0=0;label=178;break;}else{label=161;break;}
 case 161: 
 var $907=_malloc($902);
 var $908=$907;
 var $909=($907|0)==0;
 if($909){var $errcode_0=12;var $tnfa_0=$51;var $counts_0=$904;var $offs_0=$908;label=178;break;}else{label=162;break;}
 case 162: 
 var $910=($901|0)>0;
 if($910){label=163;break;}else{label=164;break;}
 case 163: 
 var $911=($901|0)>1;
 var $_op=$901<<2;
 var $912=($911?$_op:4);
 _memset($903, 0, $912)|0;
 label=164;break;
 case 164: 
 var $914=_tre_ast_to_tnfa($480,0,$904,0);
 var $915=HEAP32[(($102)>>2)];
 var $916=($915|0)>0;
 if($916){var $i_129=0;var $add_030=0;label=165;break;}else{var $add_0_lcssa=0;label=166;break;}
 case 165: 
 var $add_030;
 var $i_129;
 var $917=(($908+($i_129<<2))|0);
 HEAP32[(($917)>>2)]=$add_030;
 var $918=(($904+($i_129<<2))|0);
 var $919=HEAP32[(($918)>>2)];
 var $920=((($add_030)+(1))|0);
 var $921=((($920)+($919))|0);
 HEAP32[(($918)>>2)]=0;
 var $922=((($i_129)+(1))|0);
 var $923=($922|0)<($915|0);
 if($923){var $i_129=$922;var $add_030=$921;label=165;break;}else{var $add_0_lcssa=$921;label=166;break;}
 case 166: 
 var $add_0_lcssa;
 var $924=((($add_0_lcssa)+(1))|0);
 var $925=_calloc($924,32);
 var $926=$925;
 var $927=($925|0)==0;
 if($927){var $errcode_0=12;var $tnfa_0=$51;var $counts_0=$904;var $offs_0=$908;label=178;break;}else{label=167;break;}
 case 167: 
 var $929=$50;
 HEAP32[(($929)>>2)]=$926;
 var $930=(($50+4)|0);
 var $931=$930;
 HEAP32[(($931)>>2)]=$add_0_lcssa;
 var $932=_tre_ast_to_tnfa($480,$926,$904,$908);
 var $933=($932|0)==0;
 if($933){label=168;break;}else{var $errcode_0=$932;var $tnfa_0=$51;var $counts_0=$904;var $offs_0=$908;label=178;break;}
 case 168: 
 var $935=(($50+20)|0);
 var $936=$935;
 HEAP32[(($936)>>2)]=0;
 var $937=(($479+24)|0);
 var $938=$937;
 var $939=HEAP32[(($938)>>2)];
 var $940=(($939)|0);
 var $941=HEAP32[(($940)>>2)];
 var $942=($941|0)>-1;
 if($942){var $i_223=1;var $p_024=$939;label=169;break;}else{var $i_2_lcssa=1;label=170;break;}
 case 169: 
 var $p_024;
 var $i_223;
 var $943=(($p_024+32)|0);
 var $phitmp=((($i_223)+(1))|0);
 var $944=(($943)|0);
 var $945=HEAP32[(($944)>>2)];
 var $946=($945|0)>-1;
 if($946){var $i_223=$phitmp;var $p_024=$943;label=169;break;}else{var $i_2_lcssa=$phitmp;label=170;break;}
 case 170: 
 var $i_2_lcssa;
 var $947=_calloc($i_2_lcssa,32);
 var $948=$947;
 var $949=($947|0)==0;
 if($949){var $errcode_0=12;var $tnfa_0=$51;var $counts_0=$904;var $offs_0=$908;label=178;break;}else{label=171;break;}
 case 171: 
 var $951=(($50+8)|0);
 var $952=$951;
 HEAP32[(($952)>>2)]=$948;
 var $953=HEAP32[(($938)>>2)];
 var $954=(($953)|0);
 var $955=HEAP32[(($954)>>2)];
 var $956=($955|0)>-1;
 if($956){var $i_321=0;var $958=$954;var $957=$955;label=172;break;}else{var $i_3_lcssa=0;label=177;break;}
 case 172: 
 var $957;
 var $958;
 var $i_321;
 var $959=(($908+($957<<2))|0);
 var $960=HEAP32[(($959)>>2)];
 var $961=(($926+($960<<5))|0);
 var $962=(($948+($i_321<<5)+8)|0);
 HEAP32[(($962)>>2)]=$961;
 var $963=(($948+($i_321<<5)+12)|0);
 HEAP32[(($963)>>2)]=$957;
 var $964=(($948+($i_321<<5)+16)|0);
 HEAP32[(($964)>>2)]=0;
 var $965=(($958+12)|0);
 var $966=$965;
 var $967=HEAP32[(($966)>>2)];
 var $968=($967|0)==0;
 if($968){label=176;break;}else{var $j_0=0;label=173;break;}
 case 173: 
 var $j_0;
 var $969=(($967+($j_0<<2))|0);
 var $970=HEAP32[(($969)>>2)];
 var $971=($970|0)>-1;
 var $972=((($j_0)+(1))|0);
 if($971){var $j_0=$972;label=173;break;}else{label=174;break;}
 case 174: 
 var $974=$972<<2;
 var $975=_malloc($974);
 var $976=$975;
 HEAP32[(($964)>>2)]=$976;
 var $977=($975|0)==0;
 if($977){var $errcode_0=12;var $tnfa_0=$51;var $counts_0=$904;var $offs_0=$908;label=178;break;}else{label=175;break;}
 case 175: 
 var $979=HEAP32[(($966)>>2)];
 var $980=$979;
 assert($974 % 1 === 0);(_memcpy($975, $980, $974)|0);
 label=176;break;
 case 176: 
 var $982=(($958+16)|0);
 var $983=HEAP32[(($982)>>2)];
 var $984=(($948+($i_321<<5)+20)|0);
 HEAP32[(($984)>>2)]=$983;
 var $985=((($i_321)+(1))|0);
 var $986=(($958+32)|0);
 var $987=HEAP32[(($986)>>2)];
 var $988=($987|0)>-1;
 if($988){var $i_321=$985;var $958=$986;var $957=$987;label=172;break;}else{var $i_3_lcssa=$985;label=177;break;}
 case 177: 
 var $i_3_lcssa;
 var $989=(($948+($i_3_lcssa<<5)+8)|0);
 HEAP32[(($989)>>2)]=0;
 HEAP32[(($931)>>2)]=$add_0_lcssa;
 var $990=(($479+28)|0);
 var $991=$990;
 var $992=HEAP32[(($991)>>2)];
 var $993=(($992)|0);
 var $994=HEAP32[(($993)>>2)];
 var $995=(($908+($994<<2))|0);
 var $996=HEAP32[(($995)>>2)];
 var $997=(($926+($996<<5))|0);
 var $998=(($50+12)|0);
 var $999=$998;
 HEAP32[(($999)>>2)]=$997;
 var $1000=HEAP32[(($102)>>2)];
 var $1001=(($50+52)|0);
 var $1002=$1001;
 HEAP32[(($1002)>>2)]=$1000;
 var $1003=(($50+56)|0);
 var $1004=$1003;
 HEAP32[(($1004)>>2)]=$cflags;
 ___tre_mem_destroy($19);
 var $1005=(($2+16)|0);
 var $1006=$1005;
 var $1007=HEAP32[(($1006)>>2)];
 var $1008=$1007;
 _free($1008);
 _free($2);
 _free($903);
 _free($907);
 var $1009=(($preg+4)|0);
 HEAP32[(($1009)>>2)]=$50;
 var $_0=0;label=183;break;
 case 178: 
 var $offs_0;
 var $counts_0;
 var $tnfa_0;
 var $errcode_0;
 ___tre_mem_destroy($19);
 var $1011=(($2+16)|0);
 var $1012=$1011;
 var $1013=HEAP32[(($1012)>>2)];
 var $1014=$1013;
 _free($1014);
 _free($2);
 var $1015=($counts_0|0)==0;
 if($1015){label=180;break;}else{label=179;break;}
 case 179: 
 var $1017=$counts_0;
 _free($1017);
 label=180;break;
 case 180: 
 var $1019=($offs_0|0)==0;
 if($1019){label=182;break;}else{label=181;break;}
 case 181: 
 var $1021=$offs_0;
 _free($1021);
 label=182;break;
 case 182: 
 var $1023=$tnfa_0;
 var $1024=(($preg+4)|0);
 HEAP32[(($1024)>>2)]=$1023;
 _regfree($preg);
 var $_0=$errcode_0;label=183;break;
 case 183: 
 var $_0;
 var $$etemp$15$0=44;
 var $$etemp$15$1=0;

 STACKTOP=sp;return $_0;
  default: assert(0, "bad label: " + label);
 }

}


function _tre_parse($ctx){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+424)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $wc_i_i=sp;
 var $tmp_str_i_i=(sp)+(8);
 var $neg_classes_i=(sp)+(72);
 var $wc=(sp)+(328);
 var $subctx=(sp)+(336);
 var $tmp=(sp)+(384);
 var $tmp4=(sp)+(392);
 var $1=(($ctx+4)|0);
 var $2=HEAP32[(($1)>>2)];
 var $_idx13=(($2+12)|0);
 var $_idx13_val=HEAP32[(($_idx13)>>2)];
 var $3=(($ctx+40)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=($4|0)==0;
 if($5){label=2;break;}else{label=3;break;}
 case 2: 
 var $7=(($ctx+20)|0);
 var $8=HEAP32[(($7)>>2)];
 var $value_c_i=$8;
 var $9=_tre_stack_push($2,$value_c_i);
 var $10=_tre_stack_push($2,2);
 var $11=HEAP32[(($7)>>2)];
 var $12=((($11)+(1))|0);
 HEAP32[(($7)>>2)]=$12;
 label=3;break;
 case 3: 
 var $14=_tre_stack_push($2,0);
 var $15=(($ctx+12)|0);
 var $16=HEAP32[(($15)>>2)];
 var $17=(($ctx+16)|0);
 HEAP32[(($17)>>2)]=$16;
 var $_idx_val134=HEAP32[(($_idx13)>>2)];
 var $18=($_idx_val134|0)>($_idx13_val|0);
 var $19=($14|0)==0;
 var $or_cond135=$18&$19;
 if($or_cond135){label=4;break;}else{var $node_2_i68_lcssa=0;var $depth_0_lcssa=0;var $status_0_lcssa=$14;var $_lcssa131=$19;label=292;break;}
 case 4: 
 var $20=(($2+16)|0);
 var $21=(($ctx+36)|0);
 var $22=(($ctx)|0);
 var $23=(($ctx+24)|0);
 var $24=(($ctx+20)|0);
 var $25=$neg_classes_i;
 var $26=$wc_i_i;
 var $27=(($tmp_str_i_i)|0);
 var $28=(($ctx+28)|0);
 var $29=(($tmp4)|0);
 var $30=(($tmp)|0);
 var $31=(($tmp+1)|0);
 var $32=$subctx;
 var $33=$ctx;
 var $34=(($subctx+12)|0);
 var $35=(($subctx+40)|0);
 var $36=(($subctx+24)|0);
 var $37=(($subctx+8)|0);
 var $node_2_i68136=0;var $depth_0138=0;var $38=$_idx_val134;label=5;break;
 case 5: 
 var $38;
 var $depth_0138;
 var $node_2_i68136;
 var $39=((($38)-(1))|0);
 HEAP32[(($_idx13)>>2)]=$39;
 var $40=HEAP32[(($20)>>2)];
 var $41=(($40+($39<<2))|0);
 var $42=$41;
 var $43=HEAP32[(($42)>>2)];
 switch(($43|0)){case 3:{ label=11;break;}case 4:{ label=13;break;}case 5:{ label=15;break;}case 6:{ label=26;break;}case 2:{ label=284;break;}case 7:{ label=29;break;}case 10:{ label=291;break;}case 8:{ label=36;break;}case 9:{ label=39;break;}case 1:{ label=72;break;}case 0:{ label=8;break;}default:{var $status_0_be=0;var $depth_0_be=$depth_0138;var $node_2_i68_be=$node_2_i68136;label=7;break;}}break;
 case 6: 
 var $depth_0_be_ph;
 var $status_0_be_ph;
 var $44=($status_0_be_ph|0)==0;
 var $node_2_i68_lcssa=$node_2_i68136;var $depth_0_lcssa=$depth_0_be_ph;var $status_0_lcssa=$status_0_be_ph;var $_lcssa131=$44;label=292;break;
 case 7: 
 var $node_2_i68_be;
 var $depth_0_be;
 var $status_0_be;
 var $_idx_val=HEAP32[(($_idx13)>>2)];
 var $45=($_idx_val|0)>($_idx13_val|0);
 var $46=($status_0_be|0)==0;
 var $or_cond=$45&$46;
 if($or_cond){var $node_2_i68136=$node_2_i68_be;var $depth_0138=$depth_0_be;var $38=$_idx_val;label=5;break;}else{var $node_2_i68_lcssa=$node_2_i68_be;var $depth_0_lcssa=$depth_0_be;var $status_0_lcssa=$status_0_be;var $_lcssa131=$46;label=292;break;}
 case 8: 
 var $48=HEAP32[(($21)>>2)];
 var $49=$48&1;
 var $50=($49|0)==0;
 if($50){label=10;break;}else{label=9;break;}
 case 9: 
 var $52=_tre_stack_push($2,7);
 var $53=($52|0)==0;
 if($53){label=10;break;}else{var $status_0_be_ph=$52;var $depth_0_be_ph=$depth_0138;label=6;break;}
 case 10: 
 var $55=_tre_stack_push($2,3);
 var $status_0_be=$55;var $depth_0_be=$depth_0138;var $node_2_i68_be=$node_2_i68136;label=7;break;
 case 11: 
 var $57=_tre_stack_push($2,5);
 var $58=($57|0)==0;
 if($58){label=12;break;}else{var $status_0_be_ph=$57;var $depth_0_be_ph=$depth_0138;label=6;break;}
 case 12: 
 var $60=_tre_stack_push($2,4);
 var $status_0_be=$60;var $depth_0_be=$depth_0138;var $node_2_i68_be=$node_2_i68136;label=7;break;
 case 13: 
 var $62=_tre_stack_push($2,9);
 var $63=($62|0)==0;
 if($63){label=14;break;}else{var $status_0_be_ph=$62;var $depth_0_be_ph=$depth_0138;label=6;break;}
 case 14: 
 var $65=_tre_stack_push($2,1);
 var $status_0_be=$65;var $depth_0_be=$depth_0138;var $node_2_i68_be=$node_2_i68136;label=7;break;
 case 15: 
 var $67=HEAP32[(($15)>>2)];
 var $68=HEAP8[($67)];
 var $69=(($68<<24)>>24)==0;
 if($69){var $status_0_be=0;var $depth_0_be=$depth_0138;var $node_2_i68_be=$node_2_i68136;label=7;break;}else{label=16;break;}
 case 16: 
 var $71=HEAP32[(($21)>>2)];
 var $72=$71&1;
 var $73=($72|0)!=0;
 var $74=(($68<<24)>>24)==124;
 var $or_cond5=$73&$74;
 if($or_cond5){var $status_0_be=0;var $depth_0_be=$depth_0138;var $node_2_i68_be=$node_2_i68136;label=7;break;}else{label=17;break;}
 case 17: 
 var $76=(($68<<24)>>24)==41;
 var $or_cond6=$73&$76;
 var $77=($depth_0138|0)>0;
 var $or_cond7=$or_cond6&$77;
 if($or_cond7){label=20;break;}else{label=18;break;}
 case 18: 
 var $79=($72|0)==0;
 var $80=(($68<<24)>>24)==92;
 var $or_cond8=$79&$80;
 if($or_cond8){label=19;break;}else{label=22;break;}
 case 19: 
 var $82=(($67+1)|0);
 var $83=HEAP8[($82)];
 var $84=(($83<<24)>>24)==41;
 if($84){label=20;break;}else{label=22;break;}
 case 20: 
 var $86=($72|0)==0;
 var $87=$72|$depth_0138;
 var $88=($87|0)==0;
 var $status_1=($88?8:0);
 var $89=((($depth_0138)-(1))|0);
 if($86){label=21;break;}else{var $status_0_be=$status_1;var $depth_0_be=$89;var $node_2_i68_be=$node_2_i68136;label=7;break;}
 case 21: 
 var $91=(($67+2)|0);
 HEAP32[(($15)>>2)]=$91;
 var $status_0_be=$status_1;var $depth_0_be=$89;var $node_2_i68_be=$node_2_i68136;label=7;break;
 case 22: 
 var $93=_tre_stack_push($2,5);
 var $94=($93|0)==0;
 if($94){label=23;break;}else{var $status_0_be_ph=$93;var $depth_0_be_ph=$depth_0138;label=6;break;}
 case 23: 
 var $96=$node_2_i68136;
 var $97=_tre_stack_push($2,$96);
 var $98=($97|0)==0;
 if($98){label=24;break;}else{var $status_0_be_ph=$97;var $depth_0_be_ph=$depth_0138;label=6;break;}
 case 24: 
 var $100=_tre_stack_push($2,6);
 var $101=($100|0)==0;
 if($101){label=25;break;}else{var $status_0_be_ph=$100;var $depth_0_be_ph=$depth_0138;label=6;break;}
 case 25: 
 var $103=_tre_stack_push($2,4);
 var $status_0_be=$103;var $depth_0_be=$depth_0138;var $node_2_i68_be=$node_2_i68136;label=7;break;
 case 26: 
 var $105=((($38)-(2))|0);
 HEAP32[(($_idx13)>>2)]=$105;
 var $106=(($40+($105<<2))|0);
 var $107=HEAP32[(($106)>>2)];
 var $108=$107;
 var $109=HEAP32[(($22)>>2)];
 var $110=___tre_mem_alloc_impl($109,0,0,1,32);
 var $111=$110;
 var $112=($110|0)==0;
 if($112){var $_2=12;label=294;break;}else{label=27;break;}
 case 27: 
 var $114=___tre_mem_alloc_impl($109,0,0,1,8);
 var $115=(($110+4)|0);
 var $116=$115;
 HEAP32[(($116)>>2)]=$114;
 var $117=($114|0)==0;
 if($117){var $_2=12;label=294;break;}else{label=28;break;}
 case 28: 
 var $118=$110;
 HEAP32[(($118)>>2)]=1;
 var $119=(($110+8)|0);
 var $120=$119;
 HEAP32[(($120)>>2)]=-1;
 var $121=(($110+12)|0);
 var $122=$121;
 HEAP32[(($122)>>2)]=-1;
 var $123=$114;
 HEAP32[(($123)>>2)]=$108;
 var $124=HEAP32[(($116)>>2)];
 var $125=(($124+4)|0);
 var $126=$125;
 HEAP32[(($126)>>2)]=$node_2_i68136;
 var $127=(($107+16)|0);
 var $128=$127;
 var $129=HEAP32[(($128)>>2)];
 var $130=(($node_2_i68136+16)|0);
 var $131=HEAP32[(($130)>>2)];
 var $132=((($131)+($129))|0);
 var $133=(($110+16)|0);
 var $134=$133;
 HEAP32[(($134)>>2)]=$132;
 var $status_0_be=0;var $depth_0_be=$depth_0138;var $node_2_i68_be=$111;label=7;break;
 case 29: 
 var $136=HEAP32[(($15)>>2)];
 var $137=HEAP8[($136)];
 var $138=(($137<<24)>>24);
 if(($138|0)==124){ label=30;break;}else if(($138|0)==41){ label=35;break;}else{var $status_0_be=0;var $depth_0_be=$depth_0138;var $node_2_i68_be=$node_2_i68136;label=7;break;}
 case 30: 
 var $140=_tre_stack_push($2,7);
 var $141=($140|0)==0;
 if($141){label=31;break;}else{var $status_0_be_ph=$140;var $depth_0_be_ph=$depth_0138;label=6;break;}
 case 31: 
 var $143=$node_2_i68136;
 var $144=_tre_stack_push($2,$143);
 var $145=($144|0)==0;
 if($145){label=32;break;}else{var $status_0_be_ph=$144;var $depth_0_be_ph=$depth_0138;label=6;break;}
 case 32: 
 var $147=_tre_stack_push($2,8);
 var $148=($147|0)==0;
 if($148){label=33;break;}else{var $status_0_be_ph=$147;var $depth_0_be_ph=$depth_0138;label=6;break;}
 case 33: 
 var $150=_tre_stack_push($2,3);
 var $151=($150|0)==0;
 if($151){label=34;break;}else{var $status_0_be_ph=$150;var $depth_0_be_ph=$depth_0138;label=6;break;}
 case 34: 
 var $153=HEAP32[(($15)>>2)];
 var $154=(($153+1)|0);
 HEAP32[(($15)>>2)]=$154;
 var $status_0_be=0;var $depth_0_be=$depth_0138;var $node_2_i68_be=$node_2_i68136;label=7;break;
 case 35: 
 var $156=(($136+1)|0);
 HEAP32[(($15)>>2)]=$156;
 var $status_0_be=0;var $depth_0_be=$depth_0138;var $node_2_i68_be=$node_2_i68136;label=7;break;
 case 36: 
 var $158=((($38)-(2))|0);
 HEAP32[(($_idx13)>>2)]=$158;
 var $159=(($40+($158<<2))|0);
 var $160=HEAP32[(($159)>>2)];
 var $161=$160;
 var $162=HEAP32[(($22)>>2)];
 var $163=___tre_mem_alloc_impl($162,0,0,1,32);
 var $164=$163;
 var $165=($163|0)==0;
 if($165){var $_2=12;label=294;break;}else{label=37;break;}
 case 37: 
 var $167=___tre_mem_alloc_impl($162,0,0,1,8);
 var $168=(($163+4)|0);
 var $169=$168;
 HEAP32[(($169)>>2)]=$167;
 var $170=($167|0)==0;
 if($170){var $_2=12;label=294;break;}else{label=38;break;}
 case 38: 
 var $171=$163;
 HEAP32[(($171)>>2)]=3;
 var $172=(($163+8)|0);
 var $173=$172;
 HEAP32[(($173)>>2)]=-1;
 var $174=(($163+12)|0);
 var $175=$174;
 HEAP32[(($175)>>2)]=-1;
 var $176=$167;
 HEAP32[(($176)>>2)]=$161;
 var $177=HEAP32[(($169)>>2)];
 var $178=(($177+4)|0);
 var $179=$178;
 HEAP32[(($179)>>2)]=$node_2_i68136;
 var $180=(($160+16)|0);
 var $181=$180;
 var $182=HEAP32[(($181)>>2)];
 var $183=(($node_2_i68136+16)|0);
 var $184=HEAP32[(($183)>>2)];
 var $185=((($184)+($182))|0);
 var $186=(($163+16)|0);
 var $187=$186;
 HEAP32[(($187)>>2)]=$185;
 var $status_0_be=0;var $depth_0_be=$depth_0138;var $node_2_i68_be=$164;label=7;break;
 case 39: 
 var $189=HEAP32[(($15)>>2)];
 var $190=HEAP8[($189)];
 var $191=(($190<<24)>>24);
 switch(($191|0)){case 43:case 63:{ label=40;break;}case 42:{ label=41;break;}case 92:{ label=44;break;}case 123:{ label=47;break;}default:{var $status_0_be=0;var $depth_0_be=$depth_0138;var $node_2_i68_be=$node_2_i68136;label=7;break;}}break;
 case 40: 
 var $193=HEAP32[(($21)>>2)];
 var $194=$193&1;
 var $195=($194|0)==0;
 if($195){var $status_0_be=0;var $depth_0_be=$depth_0138;var $node_2_i68_be=$node_2_i68136;label=7;break;}else{label=41;break;}
 case 41: 
 var $197=(($190<<24)>>24)==43;
 var $_=($197&1);
 var $198=(($190<<24)>>24)==63;
 var $rep_max_0=($198?1:-1);
 var $199=(($189+1)|0);
 HEAP32[(($15)>>2)]=$199;
 var $200=HEAP32[(($22)>>2)];
 var $201=___tre_mem_alloc_impl($200,0,0,1,32);
 var $202=$201;
 var $203=($201|0)==0;
 if($203){var $_2=12;label=294;break;}else{label=42;break;}
 case 42: 
 var $205=___tre_mem_alloc_impl($200,0,0,1,16);
 var $206=(($201+4)|0);
 var $207=$206;
 HEAP32[(($207)>>2)]=$205;
 var $208=($205|0)==0;
 if($208){var $_2=12;label=294;break;}else{label=43;break;}
 case 43: 
 var $210=$201;
 HEAP32[(($210)>>2)]=2;
 var $211=(($201+8)|0);
 var $212=$211;
 HEAP32[(($212)>>2)]=-1;
 var $213=(($201+12)|0);
 var $214=$213;
 HEAP32[(($214)>>2)]=-1;
 var $215=$205;
 HEAP32[(($215)>>2)]=$node_2_i68136;
 var $216=(($205+4)|0);
 var $217=$216;
 HEAP32[(($217)>>2)]=$_;
 var $218=(($205+8)|0);
 var $219=$218;
 HEAP32[(($219)>>2)]=$rep_max_0;
 var $220=(($205+12)|0);
 var $221=HEAP8[($220)];
 var $222=$221&-2;
 HEAP8[($220)]=$222;
 var $223=(($node_2_i68136+16)|0);
 var $224=HEAP32[(($223)>>2)];
 var $225=(($201+16)|0);
 var $226=$225;
 HEAP32[(($226)>>2)]=$224;
 var $227=_tre_stack_push($2,9);
 var $status_0_be=$227;var $depth_0_be=$depth_0138;var $node_2_i68_be=$202;label=7;break;
 case 44: 
 var $229=HEAP32[(($21)>>2)];
 var $230=$229&1;
 var $231=($230|0)==0;
 if($231){label=45;break;}else{var $status_0_be=0;var $depth_0_be=$depth_0138;var $node_2_i68_be=$node_2_i68136;label=7;break;}
 case 45: 
 var $233=(($189+1)|0);
 var $234=HEAP8[($233)];
 var $235=(($234<<24)>>24)==123;
 if($235){label=46;break;}else{var $status_0_be=0;var $depth_0_be=$depth_0138;var $node_2_i68_be=$node_2_i68136;label=7;break;}
 case 46: 
 HEAP32[(($15)>>2)]=$233;
 var $243=$233;var $242=$229;label=48;break;
 case 47: 
 var $238=HEAP32[(($21)>>2)];
 var $239=$238&1;
 var $240=($239|0)==0;
 if($240){var $status_0_be=0;var $depth_0_be=$depth_0138;var $node_2_i68_be=$node_2_i68136;label=7;break;}else{var $243=$189;var $242=$238;label=48;break;}
 case 48: 
 var $242;
 var $243;
 var $244=(($243+1)|0);
 HEAP32[(($15)>>2)]=$244;
 var $245=HEAP8[($244)];
 var $_off_i=((($245)-(48))&255);
 var $246=($_off_i&255)<10;
 if($246){label=49;break;}else{var $min_0_i=-1;var $r_0_lcssa_i1015_i=$244;var $260=$245;label=51;break;}
 case 49: 
 var $248=(($245<<24)>>24);
 var $249=((($248)-(48))|0);
 var $250=($249>>>0)<10;
 if($250){var $num_01_i_i=-1;var $r_02_i_i=$244;var $251=$248;label=50;break;}else{var $_2=10;label=294;break;}
 case 50: 
 var $251;
 var $r_02_i_i;
 var $num_01_i_i;
 var $252=($num_01_i_i|0)<0;
 var $num_0_op_i_i=((($num_01_i_i)*(10))&-1);
 var $num_0_op_op_i_i=((($num_0_op_i_i)-(48))|0);
 var $253=($252?-48:$num_0_op_op_i_i);
 var $254=((($253)+($251))|0);
 var $255=(($r_02_i_i+1)|0);
 var $256=HEAP8[($255)];
 var $257=(($256<<24)>>24);
 var $258=((($257)-(48))|0);
 var $259=($258>>>0)<10;
 if($259){var $num_01_i_i=$254;var $r_02_i_i=$255;var $251=$257;label=50;break;}else{var $min_0_i=$254;var $r_0_lcssa_i1015_i=$255;var $260=$256;label=51;break;}
 case 51: 
 var $260;
 var $r_0_lcssa_i1015_i;
 var $min_0_i;
 var $261=(($260<<24)>>24)==44;
 if($261){label=52;break;}else{var $max_0_i=$min_0_i;var $r_0_lcssa_i1014_i=$r_0_lcssa_i1015_i;var $277=$260;label=54;break;}
 case 52: 
 var $263=(($r_0_lcssa_i1015_i+1)|0);
 var $264=HEAP8[($263)];
 var $265=(($264<<24)>>24);
 var $266=((($265)-(48))|0);
 var $267=($266>>>0)<10;
 if($267){var $num_01_i6_i=-1;var $r_02_i5_i=$263;var $268=$265;label=53;break;}else{var $r_0_lcssa_i101416_i=$263;var $max_019_i=-1;var $282=$264;label=56;break;}
 case 53: 
 var $268;
 var $r_02_i5_i;
 var $num_01_i6_i;
 var $269=($num_01_i6_i|0)<0;
 var $num_0_op_i7_i=((($num_01_i6_i)*(10))&-1);
 var $num_0_op_op_i8_i=((($num_0_op_i7_i)-(48))|0);
 var $270=($269?-48:$num_0_op_op_i8_i);
 var $271=((($270)+($268))|0);
 var $272=(($r_02_i5_i+1)|0);
 var $273=HEAP8[($272)];
 var $274=(($273<<24)>>24);
 var $275=((($274)-(48))|0);
 var $276=($275>>>0)<10;
 if($276){var $num_01_i6_i=$271;var $r_02_i5_i=$272;var $268=$274;label=53;break;}else{var $max_0_i=$271;var $r_0_lcssa_i1014_i=$272;var $277=$273;label=54;break;}
 case 54: 
 var $277;
 var $r_0_lcssa_i1014_i;
 var $max_0_i;
 var $278=($max_0_i|0)>-1;
 if($278){label=55;break;}else{var $r_0_lcssa_i101416_i=$r_0_lcssa_i1014_i;var $max_019_i=$max_0_i;var $282=$277;label=56;break;}
 case 55: 
 var $280=($min_0_i|0)>($max_0_i|0);
 var $281=($max_0_i|0)>255;
 var $or_cond_i=$280|$281;
 if($or_cond_i){var $_2=10;label=294;break;}else{var $r_0_lcssa_i101416_i=$r_0_lcssa_i1014_i;var $max_019_i=$max_0_i;var $282=$277;label=56;break;}
 case 56: 
 var $282;
 var $max_019_i;
 var $r_0_lcssa_i101416_i;
 var $283=(($282<<24)>>24)==0;
 if($283){var $_2=9;label=294;break;}else{label=57;break;}
 case 57: 
 var $285=($r_0_lcssa_i101416_i|0)==($244|0);
 if($285){var $_2=10;label=294;break;}else{label=58;break;}
 case 58: 
 var $287=$242&1;
 var $288=($287|0)==0;
 if($288){label=61;break;}else{label=59;break;}
 case 59: 
 var $290=(($282<<24)>>24)==125;
 if($290){label=60;break;}else{var $_2=10;label=294;break;}
 case 60: 
 var $292=(($r_0_lcssa_i101416_i+1)|0);
 var $storemerge_i=$292;label=64;break;
 case 61: 
 var $294=(($282<<24)>>24)==92;
 if($294){label=62;break;}else{var $_2=10;label=294;break;}
 case 62: 
 var $296=(($r_0_lcssa_i101416_i+1)|0);
 var $297=HEAP8[($296)];
 var $298=(($297<<24)>>24)==125;
 if($298){label=63;break;}else{var $_2=10;label=294;break;}
 case 63: 
 var $300=(($r_0_lcssa_i101416_i+2)|0);
 var $storemerge_i=$300;label=64;break;
 case 64: 
 var $storemerge_i;
 var $302=$max_019_i|$min_0_i;
 var $303=($302|0)==0;
 if($303){label=65;break;}else{label=68;break;}
 case 65: 
 var $305=HEAP32[(($22)>>2)];
 var $306=___tre_mem_alloc_impl($305,0,0,1,32);
 var $307=($306|0)==0;
 if($307){var $_2=12;label=294;break;}else{label=66;break;}
 case 66: 
 var $309=___tre_mem_alloc_impl($305,0,0,1,20);
 var $310=(($306+4)|0);
 var $311=$310;
 HEAP32[(($311)>>2)]=$309;
 var $312=($309|0)==0;
 if($312){var $_2=12;label=294;break;}else{label=67;break;}
 case 67: 
 var $313=$306;
 HEAP32[(($313)>>2)]=0;
 var $314=(($306+8)|0);
 var $315=$314;
 HEAP32[(($315)>>2)]=-1;
 var $316=(($306+12)|0);
 var $317=$316;
 HEAP32[(($317)>>2)]=-1;
 var $318=$309;
 HEAP32[(($318)>>2)]=-1;
 var $319=(($309+4)|0);
 var $320=$319;
 HEAP32[(($320)>>2)]=-1;
 var $321=(($309+8)|0);
 var $322=$321;
 HEAP32[(($322)>>2)]=-1;
 var $storemerge33_in_i=$306;label=71;break;
 case 68: 
 var $324=$max_019_i&$min_0_i;
 var $325=($324|0)<0;
 var $min_1_i=($325?1:$min_0_i);
 var $max_1_i=($325?1:$max_019_i);
 var $326=HEAP32[(($22)>>2)];
 var $327=___tre_mem_alloc_impl($326,0,0,1,32);
 var $328=($327|0)==0;
 if($328){var $_2=12;label=294;break;}else{label=69;break;}
 case 69: 
 var $330=___tre_mem_alloc_impl($326,0,0,1,16);
 var $331=(($327+4)|0);
 var $332=$331;
 HEAP32[(($332)>>2)]=$330;
 var $333=($330|0)==0;
 if($333){var $_2=12;label=294;break;}else{label=70;break;}
 case 70: 
 var $334=$327;
 HEAP32[(($334)>>2)]=2;
 var $335=(($327+8)|0);
 var $336=$335;
 HEAP32[(($336)>>2)]=-1;
 var $337=(($327+12)|0);
 var $338=$337;
 HEAP32[(($338)>>2)]=-1;
 var $339=$330;
 HEAP32[(($339)>>2)]=$node_2_i68136;
 var $340=(($330+4)|0);
 var $341=$340;
 HEAP32[(($341)>>2)]=$min_1_i;
 var $342=(($330+8)|0);
 var $343=$342;
 HEAP32[(($343)>>2)]=$max_1_i;
 var $344=(($330+12)|0);
 var $345=HEAP8[($344)];
 var $346=$345&-2;
 HEAP8[($344)]=$346;
 var $347=(($node_2_i68136+16)|0);
 var $348=HEAP32[(($347)>>2)];
 var $349=(($327+16)|0);
 var $350=$349;
 HEAP32[(($350)>>2)]=$348;
 var $storemerge33_in_i=$327;label=71;break;
 case 71: 
 var $storemerge33_in_i;
 var $storemerge33_i=$storemerge33_in_i;
 HEAP32[(($15)>>2)]=$storemerge_i;
 var $352=_tre_stack_push($2,9);
 var $status_0_be=$352;var $depth_0_be=$depth_0138;var $node_2_i68_be=$storemerge33_i;label=7;break;
 case 72: 
 var $354=HEAP32[(($15)>>2)];
 var $355=HEAP8[($354)];
 var $356=(($355<<24)>>24);
 switch(($356|0)){case 92:{ label=186;break;}case 46:{ label=240;break;}case 94:{ label=252;break;}case 36:{ label=258;break;}case 41:{ label=263;break;}case 42:case 124:case 123:case 43:case 63:{ label=264;break;}case 0:{ label=265;break;}case 40:{ label=73;break;}case 91:{ label=78;break;}default:{label=268;break;}}break;
 case 73: 
 var $358=HEAP32[(($21)>>2)];
 var $359=$358&1;
 var $360=($359|0)==0;
 if($360){label=268;break;}else{var $362=$354;label=74;break;}
 case 74: 
 var $362;
 var $363=((($depth_0138)+(1))|0);
 var $364=(($362+1)|0);
 HEAP32[(($15)>>2)]=$364;
 var $365=HEAP32[(($24)>>2)];
 var $value_c_i20=$365;
 var $366=_tre_stack_push($2,$value_c_i20);
 var $367=($366|0)==0;
 if($367){label=75;break;}else{var $status_0_be_ph=$366;var $depth_0_be_ph=$363;label=6;break;}
 case 75: 
 var $369=_tre_stack_push($2,2);
 var $370=($369|0)==0;
 if($370){label=76;break;}else{var $status_0_be_ph=$369;var $depth_0_be_ph=$363;label=6;break;}
 case 76: 
 var $372=_tre_stack_push($2,0);
 var $373=($372|0)==0;
 if($373){label=77;break;}else{var $status_0_be_ph=$372;var $depth_0_be_ph=$363;label=6;break;}
 case 77: 
 var $375=HEAP32[(($24)>>2)];
 var $376=((($375)+(1))|0);
 HEAP32[(($24)>>2)]=$376;
 var $status_0_be=0;var $depth_0_be=$363;var $node_2_i68_be=$node_2_i68136;label=7;break;
 case 78: 
 var $378=(($354+1)|0);
 HEAP32[(($15)>>2)]=$378;
 var $$etemp$0$0=256;
 var $$etemp$0$1=0;

 var $379=_malloc(128);
 var $380=$379;
 var $381=($379|0)==0;
 if($381){var $_2=12;label=294;break;}else{label=79;break;}
 case 79: 
 var $383=HEAP8[($378)];
 var $384=(($383<<24)>>24)==94;
 if($384){label=80;break;}else{var $negate_0_i=0;var $388=$378;label=81;break;}
 case 80: 
 var $386=(($354+2)|0);
 HEAP32[(($15)>>2)]=$386;
 var $negate_0_i=1;var $388=$386;label=81;break;
 case 81: 
 var $388;
 var $negate_0_i;
 var $$etemp$1$0=4;
 var $$etemp$1$1=0;

 var $389=($negate_0_i|0)==0;
 var $re_1_i_i=$388;var $393=32;var $392=0;var $391=0;var $390=$380;label=83;break;
 case 82: 
 if($510){var $re_1_i_i=$re_3_i_i;var $393=$506;var $392=$505;var $391=$504;var $390=$503;label=83;break;}else{var $re_4_i_ph_i=$re_3_i_i;var $status_10_i_ph_i=$status_6_i_i;var $_ph_i=$503;label=140;break;}
 case 83: 
 var $390;
 var $391;
 var $392;
 var $393;
 var $re_1_i_i;
 var $394=HEAP8[($re_1_i_i)];
 if((($394<<24)>>24)==0){ var $re_4_i_ph_i=$re_1_i_i;var $status_10_i_ph_i=7;var $_ph_i=$390;label=140;break;}else if((($394<<24)>>24)==93){ label=84;break;}else{label=86;break;}
 case 84: 
 var $396=HEAP32[(($15)>>2)];
 var $397=($re_1_i_i>>>0)>($396>>>0);
 if($397){label=85;break;}else{label=86;break;}
 case 85: 
 var $398=(($re_1_i_i+1)|0);
 HEAP32[(($15)>>2)]=$398;
 var $$etemp$2$0=4;
 var $$etemp$2$1=0;

 var $399=($negate_0_i|0)!=0;
 if($399){label=142;break;}else{label=143;break;}
 case 86: 
 var $401=_mbtowc($wc_i_i,$re_1_i_i,-1);
 var $402=($401|0)<0;
 if($402){label=87;break;}else{var $clen_0_i_i=$401;label=88;break;}
 case 87: 
 HEAP32[(($wc_i_i)>>2)]=-1;
 var $clen_0_i_i=1;label=88;break;
 case 88: 
 var $clen_0_i_i;
 var $405=(($re_1_i_i+$clen_0_i_i)|0);
 var $406=HEAP8[($405)];
 var $407=(($406<<24)>>24)==45;
 if($407){label=89;break;}else{label=94;break;}
 case 89: 
 var $_sum_i_i=((($clen_0_i_i)+(1))|0);
 var $409=(($re_1_i_i+$_sum_i_i)|0);
 var $410=HEAP8[($409)];
 var $411=(($410<<24)>>24)==93;
 if($411){label=94;break;}else{label=90;break;}
 case 90: 
 var $413=HEAP32[(($wc_i_i)>>2)];
 var $414=_mbtowc($wc_i_i,$409,-1);
 var $415=($414|0)<0;
 if($415){label=92;break;}else{label=91;break;}
 case 91: 
 var $_pre_i_i=HEAP32[(($wc_i_i)>>2)];
 var $clen_1_i_i=$414;var $418=$_pre_i_i;label=93;break;
 case 92: 
 HEAP32[(($wc_i_i)>>2)]=-1;
 var $clen_1_i_i=1;var $418=-1;label=93;break;
 case 93: 
 var $418;
 var $clen_1_i_i;
 var $_sum5_i_i=((($clen_1_i_i)+($_sum_i_i))|0);
 var $419=(($re_1_i_i+$_sum5_i_i)|0);
 var $420=($413>>>0)>($418>>>0);
 var $_status_1_i_i=($420?11:0);
 var $re_3_i_i=$419;var $max_0_i_i=$418;var $min_0_i_i=$413;var $status_5_i_i=$_status_1_i_i;var $class_1_i_i=0;label=103;break;
 case 94: 
 var $422=HEAP8[($re_1_i_i)];
 if((($422<<24)>>24)==45){ label=100;break;}else if((($422<<24)>>24)==91){ label=95;break;}else{var $status_4_i_i=0;label=102;break;}
 case 95: 
 var $424=(($re_1_i_i+1)|0);
 var $425=HEAP8[($424)];
 if((($425<<24)>>24)==46|(($425<<24)>>24)==61){ var $re_4_i_ph_i=$re_1_i_i;var $status_10_i_ph_i=3;var $_ph_i=$390;label=140;break;}else if((($425<<24)>>24)==58){ label=96;break;}else{var $status_4_i_i=0;label=102;break;}
 case 96: 
 var $$etemp$3$0=64;
 var $$etemp$3$1=0;

 var $427=(($re_1_i_i+2)|0);
 var $endptr_0_i_i=$427;label=97;break;
 case 97: 
 var $endptr_0_i_i;
 var $429=HEAP8[($endptr_0_i_i)];
 var $430=(($429<<24)>>24)==0;
 var $431=(($429<<24)>>24)!=58;
 var $not_32_i_i=$430^1;
 var $__i_i=$431&$not_32_i_i;
 var $432=(($endptr_0_i_i+1)|0);
 if($__i_i){var $endptr_0_i_i=$432;label=97;break;}else{label=98;break;}
 case 98: 
 if($430){var $re_4_i_ph_i=$re_1_i_i;var $status_10_i_ph_i=4;var $_ph_i=$390;label=140;break;}else{label=99;break;}
 case 99: 
 var $435=$endptr_0_i_i;
 var $436=$re_1_i_i;
 var $437=((($435)-($436))|0);
 var $438=((($437)-(2))|0);
 var $439=($438|0)>63;
 var $_6_i_i=($439?63:$438);
 var $440=_strncpy($27,$427,$_6_i_i);
 var $441=(($tmp_str_i_i+$_6_i_i)|0);
 HEAP8[($441)]=0;
 var $442=_wctype($27);
 var $443=($442|0)==0;
 var $status_2_i_i=($443?4:0);
 var $444=(($endptr_0_i_i+2)|0);
 var $re_3_i_i=$444;var $max_0_i_i=1114111;var $min_0_i_i=0;var $status_5_i_i=$status_2_i_i;var $class_1_i_i=$442;label=103;break;
 case 100: 
 var $446=(($re_1_i_i+1)|0);
 var $447=HEAP8[($446)];
 var $448=(($447<<24)>>24)==93;
 if($448){var $status_4_i_i=0;label=102;break;}else{label=101;break;}
 case 101: 
 var $450=HEAP32[(($15)>>2)];
 var $451=($450|0)==($re_1_i_i|0);
 var $status_1__i_i=($451?0:11);
 var $status_4_i_i=$status_1__i_i;label=102;break;
 case 102: 
 var $status_4_i_i;
 var $452=HEAP32[(($wc_i_i)>>2)];
 var $re_3_i_i=$405;var $max_0_i_i=$452;var $min_0_i_i=$452;var $status_5_i_i=$status_4_i_i;var $class_1_i_i=0;label=103;break;
 case 103: 
 var $class_1_i_i;
 var $status_5_i_i;
 var $min_0_i_i;
 var $max_0_i_i;
 var $re_3_i_i;
 var $454=($status_5_i_i|0)==0;
 if($454){label=104;break;}else{var $re_4_i_ph_i=$re_3_i_i;var $status_10_i_ph_i=$status_5_i_i;var $_ph_i=$390;label=140;break;}
 case 104: 
 var $456=($class_1_i_i|0)!=0;
 var $_not_i_i=$456^1;
 var $or_cond_i_i=$389|$_not_i_i;
 if($or_cond_i_i){label=107;break;}else{label=105;break;}
 case 105: 
 var $458=($391|0)>63;
 if($458){var $status_6_i_i=12;var $506=$393;var $505=$392;var $504=$391;var $503=$390;label=114;break;}else{label=106;break;}
 case 106: 
 var $460=((($391)+(1))|0);
 var $461=(($neg_classes_i+($391<<2))|0);
 HEAP32[(($461)>>2)]=$class_1_i_i;
 var $status_6_i_i=0;var $506=$393;var $505=$392;var $504=$460;var $503=$390;label=114;break;
 case 107: 
 var $463=HEAP32[(($22)>>2)];
 var $464=($392|0)<($393|0);
 if($464){var $476=$393;var $475=$390;label=110;break;}else{label=108;break;}
 case 108: 
 var $466=($393|0)>1024;
 if($466){var $re_4_i_ph_i=$re_3_i_i;var $status_10_i_ph_i=12;var $_ph_i=$390;label=140;break;}else{label=109;break;}
 case 109: 
 var $468=$393<<1;
 var $469=$390;
 var $470=$393<<3;
 var $471=_realloc($469,$470);
 var $472=$471;
 var $473=($471|0)==0;
 if($473){var $re_4_i_ph_i=$re_3_i_i;var $status_10_i_ph_i=12;var $_ph_i=$390;label=140;break;}else{var $476=$468;var $475=$472;label=110;break;}
 case 110: 
 var $475;
 var $476;
 var $477=___tre_mem_alloc_impl($463,0,0,1,32);
 var $478=$477;
 var $479=($477|0)==0;
 if($479){label=112;break;}else{label=111;break;}
 case 111: 
 var $481=___tre_mem_alloc_impl($463,0,0,1,20);
 var $482=(($477+4)|0);
 var $483=$482;
 HEAP32[(($483)>>2)]=$481;
 var $484=($481|0)==0;
 if($484){label=112;break;}else{label=113;break;}
 case 112: 
 var $485=(($475+($392<<2))|0);
 HEAP32[(($485)>>2)]=0;
 var $re_4_i_ph_i=$re_3_i_i;var $status_10_i_ph_i=12;var $_ph_i=$475;label=140;break;
 case 113: 
 var $487=$477;
 HEAP32[(($487)>>2)]=0;
 var $488=(($477+8)|0);
 var $489=$488;
 HEAP32[(($489)>>2)]=-1;
 var $490=(($477+12)|0);
 var $491=$490;
 HEAP32[(($491)>>2)]=-1;
 var $492=$481;
 HEAP32[(($492)>>2)]=$min_0_i_i;
 var $493=(($481+4)|0);
 var $494=$493;
 HEAP32[(($494)>>2)]=$max_0_i_i;
 var $495=(($481+8)|0);
 var $496=$495;
 HEAP32[(($496)>>2)]=-1;
 var $497=(($475+($392<<2))|0);
 HEAP32[(($497)>>2)]=$478;
 var $498=((($392)+(1))|0);
 var $499=HEAP32[(($483)>>2)];
 var $500=(($499+12)|0);
 var $501=$500;
 HEAP32[(($501)>>2)]=$class_1_i_i;
 var $status_6_i_i=0;var $506=$476;var $505=$498;var $504=$391;var $503=$475;label=114;break;
 case 114: 
 var $503;
 var $504;
 var $505;
 var $506;
 var $status_6_i_i;
 var $507=HEAP32[(($21)>>2)];
 var $508=$507&2;
 var $509=($508|0)==0;
 var $brmerge_i_i=$509|$456;
 var $brmerge_not_i_i=$brmerge_i_i^1;
 var $510=($status_6_i_i|0)==0;
 var $or_cond7_i_i=$510&$brmerge_not_i_i;
 if($or_cond7_i_i){var $min_1_i_ph_i=$min_0_i_i;var $_ph35_i=$506;var $_ph34_i=$505;var $_ph33_i=$503;label=115;break;}else{label=82;break;}
 case 115: 
 var $_ph33_i;
 var $_ph34_i;
 var $_ph35_i;
 var $min_1_i_ph_i;
 var $min_1_i_i=$min_1_i_ph_i;label=116;break;
 case 116: 
 var $min_1_i_i;
 var $511=($min_1_i_i>>>0)>($max_0_i_i>>>0);
 if($511){var $re_1_i_i=$re_3_i_i;var $393=$_ph35_i;var $392=$_ph34_i;var $391=$504;var $390=$_ph33_i;label=83;break;}else{label=117;break;}
 case 117: 
 var $513=_iswlower($min_1_i_i);
 var $514=($513|0)==0;
 if($514){label=128;break;}else{label=118;break;}
 case 118: 
 var $516=_towupper($min_1_i_i);
 var $min_233_i_i=((($min_1_i_i)+(1))|0);
 var $517=_iswlower($min_233_i_i);
 var $518=($517|0)==0;
 if($518){var $ccurr_0_lcssa_i_i=$516;var $min_2_lcssa_i_i=$min_233_i_i;label=121;break;}else{var $ccurr_034_i_i=$516;var $min_235_i_i=$min_233_i_i;label=119;break;}
 case 119: 
 var $min_235_i_i;
 var $ccurr_034_i_i;
 var $519=_towupper($min_235_i_i);
 var $520=((($ccurr_034_i_i)+(1))|0);
 var $521=($519|0)!=($520|0);
 var $522=($min_235_i_i>>>0)>($max_0_i_i>>>0);
 var $or_cond8_i_i=$521|$522;
 if($or_cond8_i_i){var $ccurr_0_lcssa_i_i=$ccurr_034_i_i;var $min_2_lcssa_i_i=$min_235_i_i;label=121;break;}else{label=120;break;}
 case 120: 
 var $524=_towupper($min_235_i_i);
 var $min_2_i_i=((($min_235_i_i)+(1))|0);
 var $525=_iswlower($min_2_i_i);
 var $526=($525|0)==0;
 if($526){var $ccurr_0_lcssa_i_i=$524;var $min_2_lcssa_i_i=$min_2_i_i;label=121;break;}else{var $ccurr_034_i_i=$524;var $min_235_i_i=$min_2_i_i;label=119;break;}
 case 121: 
 var $min_2_lcssa_i_i;
 var $ccurr_0_lcssa_i_i;
 var $527=HEAP32[(($22)>>2)];
 var $528=($_ph34_i|0)<($_ph35_i|0);
 if($528){var $540=$_ph35_i;var $539=$_ph33_i;label=124;break;}else{label=122;break;}
 case 122: 
 var $530=($_ph35_i|0)>1024;
 if($530){var $re_4_i_ph_i=$re_3_i_i;var $status_10_i_ph_i=12;var $_ph_i=$_ph33_i;label=140;break;}else{label=123;break;}
 case 123: 
 var $532=$_ph35_i<<1;
 var $533=$_ph33_i;
 var $534=$_ph35_i<<3;
 var $535=_realloc($533,$534);
 var $536=$535;
 var $537=($535|0)==0;
 if($537){var $re_4_i_ph_i=$re_3_i_i;var $status_10_i_ph_i=12;var $_ph_i=$_ph33_i;label=140;break;}else{var $540=$532;var $539=$536;label=124;break;}
 case 124: 
 var $539;
 var $540;
 var $541=___tre_mem_alloc_impl($527,0,0,1,32);
 var $542=$541;
 var $543=($541|0)==0;
 if($543){var $_0_i14_i_i=0;label=127;break;}else{label=125;break;}
 case 125: 
 var $545=___tre_mem_alloc_impl($527,0,0,1,20);
 var $546=(($541+4)|0);
 var $547=$546;
 HEAP32[(($547)>>2)]=$545;
 var $548=($545|0)==0;
 if($548){var $_0_i14_i_i=0;label=127;break;}else{label=126;break;}
 case 126: 
 var $550=$541;
 HEAP32[(($550)>>2)]=0;
 var $551=(($541+8)|0);
 var $552=$551;
 HEAP32[(($552)>>2)]=-1;
 var $553=(($541+12)|0);
 var $554=$553;
 HEAP32[(($554)>>2)]=-1;
 var $555=$545;
 HEAP32[(($555)>>2)]=$516;
 var $556=(($545+4)|0);
 var $557=$556;
 HEAP32[(($557)>>2)]=$ccurr_0_lcssa_i_i;
 var $558=(($545+8)|0);
 var $559=$558;
 HEAP32[(($559)>>2)]=-1;
 var $_0_i14_i_i=$542;label=127;break;
 case 127: 
 var $_0_i14_i_i;
 var $560=(($539+($_ph34_i<<2))|0);
 HEAP32[(($560)>>2)]=$_0_i14_i_i;
 var $min_4_i_i=$min_2_lcssa_i_i;var $613=$540;var $_0_i14_sink_i_i=$_0_i14_i_i;var $612=$539;label=139;break;
 case 128: 
 var $562=_iswupper($min_1_i_i);
 var $563=($562|0)==0;
 var $564=((($min_1_i_i)+(1))|0);
 if($563){var $min_1_i_i=$564;label=116;break;}else{label=129;break;}
 case 129: 
 var $566=_towlower($min_1_i_i);
 var $567=_iswupper($564);
 var $568=($567|0)==0;
 if($568){var $min_3_lcssa_i_i=$564;var $ccurr_1_lcssa_i_i=$566;label=132;break;}else{var $min_337_i_i=$564;var $ccurr_138_i_i=$566;label=130;break;}
 case 130: 
 var $ccurr_138_i_i;
 var $min_337_i_i;
 var $569=_towlower($min_337_i_i);
 var $570=((($ccurr_138_i_i)+(1))|0);
 var $571=($569|0)!=($570|0);
 var $572=($min_337_i_i>>>0)>($max_0_i_i>>>0);
 var $or_cond9_i_i=$571|$572;
 if($or_cond9_i_i){var $min_3_lcssa_i_i=$min_337_i_i;var $ccurr_1_lcssa_i_i=$ccurr_138_i_i;label=132;break;}else{label=131;break;}
 case 131: 
 var $574=((($min_337_i_i)+(1))|0);
 var $575=_towlower($min_337_i_i);
 var $576=_iswupper($574);
 var $577=($576|0)==0;
 if($577){var $min_3_lcssa_i_i=$574;var $ccurr_1_lcssa_i_i=$575;label=132;break;}else{var $min_337_i_i=$574;var $ccurr_138_i_i=$575;label=130;break;}
 case 132: 
 var $ccurr_1_lcssa_i_i;
 var $min_3_lcssa_i_i;
 var $578=HEAP32[(($22)>>2)];
 var $579=($_ph34_i|0)<($_ph35_i|0);
 if($579){var $591=$_ph35_i;var $590=$_ph33_i;label=135;break;}else{label=133;break;}
 case 133: 
 var $581=($_ph35_i|0)>1024;
 if($581){var $re_4_i_ph_i=$re_3_i_i;var $status_10_i_ph_i=12;var $_ph_i=$_ph33_i;label=140;break;}else{label=134;break;}
 case 134: 
 var $583=$_ph35_i<<1;
 var $584=$_ph33_i;
 var $585=$_ph35_i<<3;
 var $586=_realloc($584,$585);
 var $587=$586;
 var $588=($586|0)==0;
 if($588){var $re_4_i_ph_i=$re_3_i_i;var $status_10_i_ph_i=12;var $_ph_i=$_ph33_i;label=140;break;}else{var $591=$583;var $590=$587;label=135;break;}
 case 135: 
 var $590;
 var $591;
 var $592=___tre_mem_alloc_impl($578,0,0,1,32);
 var $593=$592;
 var $594=($592|0)==0;
 if($594){var $_0_i19_i_i=0;label=138;break;}else{label=136;break;}
 case 136: 
 var $596=___tre_mem_alloc_impl($578,0,0,1,20);
 var $597=(($592+4)|0);
 var $598=$597;
 HEAP32[(($598)>>2)]=$596;
 var $599=($596|0)==0;
 if($599){var $_0_i19_i_i=0;label=138;break;}else{label=137;break;}
 case 137: 
 var $601=$592;
 HEAP32[(($601)>>2)]=0;
 var $602=(($592+8)|0);
 var $603=$602;
 HEAP32[(($603)>>2)]=-1;
 var $604=(($592+12)|0);
 var $605=$604;
 HEAP32[(($605)>>2)]=-1;
 var $606=$596;
 HEAP32[(($606)>>2)]=$566;
 var $607=(($596+4)|0);
 var $608=$607;
 HEAP32[(($608)>>2)]=$ccurr_1_lcssa_i_i;
 var $609=(($596+8)|0);
 var $610=$609;
 HEAP32[(($610)>>2)]=-1;
 var $_0_i19_i_i=$593;label=138;break;
 case 138: 
 var $_0_i19_i_i;
 var $611=(($590+($_ph34_i<<2))|0);
 HEAP32[(($611)>>2)]=$_0_i19_i_i;
 var $min_4_i_i=$min_3_lcssa_i_i;var $613=$591;var $_0_i14_sink_i_i=$_0_i19_i_i;var $612=$590;label=139;break;
 case 139: 
 var $612;
 var $_0_i14_sink_i_i;
 var $613;
 var $min_4_i_i;
 var $614=($_0_i14_sink_i_i|0)==0;
 var $615=((($_ph34_i)+(1))|0);
 if($614){label=141;break;}else{var $min_1_i_ph_i=$min_4_i_i;var $_ph35_i=$613;var $_ph34_i=$615;var $_ph33_i=$612;label=115;break;}
 case 140: 
 var $_ph_i;
 var $status_10_i_ph_i;
 var $re_4_i_ph_i;
 HEAP32[(($15)>>2)]=$re_4_i_ph_i;
 var $$etemp$4$0=4;
 var $$etemp$4$1=0;

 var $node_2_i=0;var $status_5_i=$status_10_i_ph_i;var $820=$_ph_i;label=185;break;
 case 141: 
 HEAP32[(($15)>>2)]=$re_3_i_i;
 var $$etemp$5$0=4;
 var $$etemp$5$1=0;

 var $node_2_i=0;var $status_5_i=12;var $820=$612;label=185;break;
 case 142: 
 var $617=$390;
 _qsort($617,$392,4,70);
 label=143;break;
 case 143: 
 var $618=($392|0)>0;
 if($618){label=144;break;}else{var $status_0_lcssa_i=0;var $curr_min_0_lcssa_i=0;var $node_0_lcssa_i=0;label=173;break;}
 case 144: 
 var $619=($391|0)>0;
 var $620=$391<<2;
 var $621=((($620)+(4))|0);
 if($399){var $j_025_us_i=0;var $curr_max_026_us_i=0;var $curr_min_027_us_i=0;var $node_028_us_i=0;label=145;break;}else{var $j_025_i=0;var $node_028_i=0;label=161;break;}
 case 145: 
 var $node_028_us_i;
 var $curr_min_027_us_i;
 var $curr_max_026_us_i;
 var $j_025_us_i;
 var $622=(($390+($j_025_us_i<<2))|0);
 var $623=HEAP32[(($622)>>2)];
 var $624=(($623+4)|0);
 var $625=HEAP32[(($624)>>2)];
 var $626=$625;
 var $627=HEAP32[(($626)>>2)];
 var $628=(($625+4)|0);
 var $629=$628;
 var $630=HEAP32[(($629)>>2)];
 var $631=($627|0)<($curr_max_026_us_i|0);
 if($631){label=159;break;}else{label=146;break;}
 case 146: 
 var $633=($627|0)>($curr_min_027_us_i|0);
 if($633){label=148;break;}else{label=147;break;}
 case 147: 
 var $634=((($630)+(1))|0);
 var $node_1_us_i=$node_028_us_i;var $status_2_us_i=0;var $curr_max_19_us_i=$634;var $curr_min_110_us_i=$634;label=160;break;
 case 148: 
 var $636=((($627)-(1))|0);
 HEAP32[(($626)>>2)]=$curr_min_027_us_i;
 HEAP32[(($629)>>2)]=$636;
 var $637=((($630)+(1))|0);
 var $638=($625|0)==0;
 if($638){var $node_1_us_i=$node_028_us_i;var $status_2_us_i=0;var $curr_max_19_us_i=$637;var $curr_min_110_us_i=$637;label=160;break;}else{label=149;break;}
 case 149: 
 var $640=HEAP32[(($23)>>2)];
 var $641=(($625+8)|0);
 var $642=$641;
 HEAP32[(($642)>>2)]=$640;
 if($619){label=151;break;}else{label=150;break;}
 case 150: 
 var $644=(($625+16)|0);
 var $645=$644;
 HEAP32[(($645)>>2)]=0;
 label=153;break;
 case 151: 
 var $647=HEAP32[(($22)>>2)];
 var $648=___tre_mem_alloc_impl($647,0,0,0,$621);
 var $649=$648;
 var $650=(($625+16)|0);
 var $651=$650;
 HEAP32[(($651)>>2)]=$649;
 var $652=($648|0)==0;
 if($652){var $node_2_i=$node_028_us_i;var $status_5_i=12;var $820=$390;label=185;break;}else{label=152;break;}
 case 152: 
 assert($620 % 1 === 0);(_memcpy($648, $25, $620)|0);
 var $_pre_i=HEAP32[(($651)>>2)];
 var $654=(($_pre_i+($391<<2))|0);
 HEAP32[(($654)>>2)]=0;
 label=153;break;
 case 153: 
 var $656=($node_028_us_i|0)==0;
 if($656){label=158;break;}else{label=154;break;}
 case 154: 
 var $658=HEAP32[(($22)>>2)];
 var $659=HEAP32[(($622)>>2)];
 var $660=___tre_mem_alloc_impl($658,0,0,1,32);
 var $661=$660;
 var $662=($660|0)==0;
 if($662){var $_0_i_us_i=0;label=157;break;}else{label=155;break;}
 case 155: 
 var $664=___tre_mem_alloc_impl($658,0,0,1,8);
 var $665=(($660+4)|0);
 var $666=$665;
 HEAP32[(($666)>>2)]=$664;
 var $667=($664|0)==0;
 if($667){var $_0_i_us_i=0;label=157;break;}else{label=156;break;}
 case 156: 
 var $669=$660;
 HEAP32[(($669)>>2)]=3;
 var $670=(($660+8)|0);
 var $671=$670;
 HEAP32[(($671)>>2)]=-1;
 var $672=(($660+12)|0);
 var $673=$672;
 HEAP32[(($673)>>2)]=-1;
 var $674=$664;
 HEAP32[(($674)>>2)]=$node_028_us_i;
 var $675=HEAP32[(($666)>>2)];
 var $676=(($675+4)|0);
 var $677=$676;
 HEAP32[(($677)>>2)]=$659;
 var $678=(($node_028_us_i+16)|0);
 var $679=HEAP32[(($678)>>2)];
 var $680=(($659+16)|0);
 var $681=HEAP32[(($680)>>2)];
 var $682=((($681)+($679))|0);
 var $683=(($660+16)|0);
 var $684=$683;
 HEAP32[(($684)>>2)]=$682;
 var $_0_i_us_i=$661;label=157;break;
 case 157: 
 var $_0_i_us_i;
 var $685=($_0_i_us_i|0)==0;
 var $_status_0_us_i=($685?12:0);
 var $node_1_us_i=$_0_i_us_i;var $status_2_us_i=$_status_0_us_i;var $curr_max_19_us_i=$637;var $curr_min_110_us_i=$637;label=160;break;
 case 158: 
 var $687=HEAP32[(($622)>>2)];
 var $node_1_us_i=$687;var $status_2_us_i=0;var $curr_max_19_us_i=$637;var $curr_min_110_us_i=$637;label=160;break;
 case 159: 
 var $688=((($630)+(1))|0);
 var $689=($688|0)<($curr_max_026_us_i|0);
 var $curr_max_0__us_i=($689?$curr_max_026_us_i:$688);
 var $node_1_us_i=$node_028_us_i;var $status_2_us_i=0;var $curr_max_19_us_i=$curr_max_0__us_i;var $curr_min_110_us_i=$curr_min_027_us_i;label=160;break;
 case 160: 
 var $curr_min_110_us_i;
 var $curr_max_19_us_i;
 var $status_2_us_i;
 var $node_1_us_i;
 var $691=((($j_025_us_i)+(1))|0);
 var $692=($691|0)<($392|0);
 var $693=($status_2_us_i|0)==0;
 var $or_cond_us_i=$692&$693;
 if($or_cond_us_i){var $j_025_us_i=$691;var $curr_max_026_us_i=$curr_max_19_us_i;var $curr_min_027_us_i=$curr_min_110_us_i;var $node_028_us_i=$node_1_us_i;label=145;break;}else{var $status_0_lcssa_i=$status_2_us_i;var $curr_min_0_lcssa_i=$curr_min_110_us_i;var $node_0_lcssa_i=$node_1_us_i;label=173;break;}
 case 161: 
 var $node_028_i;
 var $j_025_i;
 var $694=(($390+($j_025_i<<2))|0);
 var $695=HEAP32[(($694)>>2)];
 var $696=(($695+4)|0);
 var $697=HEAP32[(($696)>>2)];
 var $698=($697|0)==0;
 if($698){var $node_1_i=$node_028_i;var $status_2_i=0;label=172;break;}else{label=162;break;}
 case 162: 
 var $700=HEAP32[(($23)>>2)];
 var $701=(($697+8)|0);
 var $702=$701;
 HEAP32[(($702)>>2)]=$700;
 if($619){label=163;break;}else{label=165;break;}
 case 163: 
 var $704=HEAP32[(($22)>>2)];
 var $705=___tre_mem_alloc_impl($704,0,0,0,$621);
 var $706=$705;
 var $707=(($697+16)|0);
 var $708=$707;
 HEAP32[(($708)>>2)]=$706;
 var $709=($705|0)==0;
 if($709){var $node_2_i=$node_028_i;var $status_5_i=12;var $820=$390;label=185;break;}else{label=164;break;}
 case 164: 
 assert($620 % 1 === 0);(_memcpy($705, $25, $620)|0);
 var $_pre107_i=HEAP32[(($708)>>2)];
 var $711=(($_pre107_i+($391<<2))|0);
 HEAP32[(($711)>>2)]=0;
 label=166;break;
 case 165: 
 var $713=(($697+16)|0);
 var $714=$713;
 HEAP32[(($714)>>2)]=0;
 label=166;break;
 case 166: 
 var $716=($node_028_i|0)==0;
 if($716){label=167;break;}else{label=168;break;}
 case 167: 
 var $718=HEAP32[(($694)>>2)];
 var $node_1_i=$718;var $status_2_i=0;label=172;break;
 case 168: 
 var $720=HEAP32[(($22)>>2)];
 var $721=HEAP32[(($694)>>2)];
 var $722=___tre_mem_alloc_impl($720,0,0,1,32);
 var $723=$722;
 var $724=($722|0)==0;
 if($724){var $_0_i_i=0;label=171;break;}else{label=169;break;}
 case 169: 
 var $726=___tre_mem_alloc_impl($720,0,0,1,8);
 var $727=(($722+4)|0);
 var $728=$727;
 HEAP32[(($728)>>2)]=$726;
 var $729=($726|0)==0;
 if($729){var $_0_i_i=0;label=171;break;}else{label=170;break;}
 case 170: 
 var $731=$722;
 HEAP32[(($731)>>2)]=3;
 var $732=(($722+8)|0);
 var $733=$732;
 HEAP32[(($733)>>2)]=-1;
 var $734=(($722+12)|0);
 var $735=$734;
 HEAP32[(($735)>>2)]=-1;
 var $736=$726;
 HEAP32[(($736)>>2)]=$node_028_i;
 var $737=HEAP32[(($728)>>2)];
 var $738=(($737+4)|0);
 var $739=$738;
 HEAP32[(($739)>>2)]=$721;
 var $740=(($node_028_i+16)|0);
 var $741=HEAP32[(($740)>>2)];
 var $742=(($721+16)|0);
 var $743=HEAP32[(($742)>>2)];
 var $744=((($743)+($741))|0);
 var $745=(($722+16)|0);
 var $746=$745;
 HEAP32[(($746)>>2)]=$744;
 var $_0_i_i=$723;label=171;break;
 case 171: 
 var $_0_i_i;
 var $747=($_0_i_i|0)==0;
 var $_status_0_i=($747?12:0);
 var $node_1_i=$_0_i_i;var $status_2_i=$_status_0_i;label=172;break;
 case 172: 
 var $status_2_i;
 var $node_1_i;
 var $749=((($j_025_i)+(1))|0);
 var $750=($749|0)<($392|0);
 var $751=($status_2_i|0)==0;
 var $or_cond_i22=$750&$751;
 if($or_cond_i22){var $j_025_i=$749;var $node_028_i=$node_1_i;label=161;break;}else{var $status_0_lcssa_i=$status_2_i;var $curr_min_0_lcssa_i=0;var $node_0_lcssa_i=$node_1_i;label=173;break;}
 case 173: 
 var $node_0_lcssa_i;
 var $curr_min_0_lcssa_i;
 var $status_0_lcssa_i;
 var $_not_i=($status_0_lcssa_i|0)!=0;
 var $_not1_i=$399^1;
 var $brmerge_i=$_not_i|$_not1_i;
 if($brmerge_i){var $node_2_i=$node_0_lcssa_i;var $status_5_i=$status_0_lcssa_i;var $820=$390;label=185;break;}else{label=174;break;}
 case 174: 
 var $753=HEAP32[(($22)>>2)];
 var $754=HEAP32[(($23)>>2)];
 var $755=___tre_mem_alloc_impl($753,0,0,1,32);
 var $756=$755;
 var $757=($755|0)==0;
 if($757){var $node_2_i=$node_0_lcssa_i;var $status_5_i=12;var $820=$390;label=185;break;}else{label=175;break;}
 case 175: 
 var $759=___tre_mem_alloc_impl($753,0,0,1,20);
 var $760=(($755+4)|0);
 var $761=$760;
 HEAP32[(($761)>>2)]=$759;
 var $762=($759|0)==0;
 if($762){var $node_2_i=$node_0_lcssa_i;var $status_5_i=12;var $820=$390;label=185;break;}else{label=176;break;}
 case 176: 
 var $764=$755;
 HEAP32[(($764)>>2)]=0;
 var $765=(($755+8)|0);
 var $766=$765;
 HEAP32[(($766)>>2)]=-1;
 var $767=(($755+12)|0);
 var $768=$767;
 HEAP32[(($768)>>2)]=-1;
 var $769=$759;
 HEAP32[(($769)>>2)]=$curr_min_0_lcssa_i;
 var $770=(($759+4)|0);
 var $771=$770;
 HEAP32[(($771)>>2)]=1114111;
 var $772=(($759+8)|0);
 var $773=$772;
 HEAP32[(($773)>>2)]=$754;
 var $774=($391|0)>0;
 if($774){label=177;break;}else{label=179;break;}
 case 177: 
 var $776=HEAP32[(($22)>>2)];
 var $777=$391<<2;
 var $778=((($777)+(4))|0);
 var $779=___tre_mem_alloc_impl($776,0,0,0,$778);
 var $780=$779;
 var $781=(($759+16)|0);
 var $782=$781;
 HEAP32[(($782)>>2)]=$780;
 var $783=($779|0)==0;
 if($783){var $node_2_i=$node_0_lcssa_i;var $status_5_i=12;var $820=$390;label=185;break;}else{label=178;break;}
 case 178: 
 assert($777 % 1 === 0);(_memcpy($779, $25, $777)|0);
 var $_pre108_i=HEAP32[(($782)>>2)];
 var $785=(($_pre108_i+($391<<2))|0);
 HEAP32[(($785)>>2)]=0;
 label=180;break;
 case 179: 
 var $787=(($759+16)|0);
 var $788=$787;
 HEAP32[(($788)>>2)]=0;
 label=180;break;
 case 180: 
 var $790=($node_0_lcssa_i|0)==0;
 if($790){var $node_2_i=$756;var $status_5_i=0;var $820=$390;label=185;break;}else{label=181;break;}
 case 181: 
 var $792=HEAP32[(($22)>>2)];
 var $793=___tre_mem_alloc_impl($792,0,0,1,32);
 var $794=$793;
 var $795=($793|0)==0;
 if($795){var $_0_i3_i=0;label=184;break;}else{label=182;break;}
 case 182: 
 var $797=___tre_mem_alloc_impl($792,0,0,1,8);
 var $798=(($793+4)|0);
 var $799=$798;
 HEAP32[(($799)>>2)]=$797;
 var $800=($797|0)==0;
 if($800){var $_0_i3_i=0;label=184;break;}else{label=183;break;}
 case 183: 
 var $802=$793;
 HEAP32[(($802)>>2)]=3;
 var $803=(($793+8)|0);
 var $804=$803;
 HEAP32[(($804)>>2)]=-1;
 var $805=(($793+12)|0);
 var $806=$805;
 HEAP32[(($806)>>2)]=-1;
 var $807=$797;
 HEAP32[(($807)>>2)]=$node_0_lcssa_i;
 var $808=HEAP32[(($799)>>2)];
 var $809=(($808+4)|0);
 var $810=$809;
 HEAP32[(($810)>>2)]=$756;
 var $811=(($node_0_lcssa_i+16)|0);
 var $812=HEAP32[(($811)>>2)];
 var $813=(($755+16)|0);
 var $814=$813;
 var $815=HEAP32[(($814)>>2)];
 var $816=((($815)+($812))|0);
 var $817=(($793+16)|0);
 var $818=$817;
 HEAP32[(($818)>>2)]=$816;
 var $_0_i3_i=$794;label=184;break;
 case 184: 
 var $_0_i3_i;
 var $819=($_0_i3_i|0)==0;
 var $_status_3_i=($819?12:0);
 var $node_2_i=$_0_i3_i;var $status_5_i=$_status_3_i;var $820=$390;label=185;break;
 case 185: 
 var $820;
 var $status_5_i;
 var $node_2_i;
 var $821=$820;
 _free($821);
 var $822=HEAP32[(($23)>>2)];
 var $823=((($822)+(1))|0);
 HEAP32[(($23)>>2)]=$823;
 var $$etemp$6$0=256;
 var $$etemp$6$1=0;

 var $824=($status_5_i|0)==0;
 if($824){var $status_0_be=0;var $depth_0_be=$depth_0138;var $node_2_i68_be=$node_2_i;label=7;break;}else{var $_2=$status_5_i;label=294;break;}
 case 186: 
 var $826=HEAP32[(($21)>>2)];
 var $827=$826&1;
 var $828=($827|0)==0;
 var $829=(($354+1)|0);
 var $830=HEAP8[($829)];
 if($828){label=187;break;}else{var $_val=$830;label=190;break;}
 case 187: 
 var $832=(($830<<24)>>24)==40;
 if($832){label=188;break;}else{label=189;break;}
 case 188: 
 HEAP32[(($15)>>2)]=$829;
 var $362=$829;label=74;break;
 case 189: 
 var $835=(($354+1)|0);
 var $836=HEAP8[($835)];
 var $837=(($836<<24)>>24)==41;
 if($837){label=265;break;}else{var $_val=$836;label=190;break;}
 case 190: 
 var $_val;
 var $838=(($354+1)|0);
 var $839=(($_val<<24)>>24)==0;
 if($839){var $_2=5;label=294;break;}else{var $i_01_i=0;var $843=1148;label=192;break;}
 case 191: 
 var $841=((1144+($847<<3)+4)|0);
 var $842=($847|0)==12;
 if($842){var $_lcssa_i=$841;label=193;break;}else{var $i_01_i=$847;var $843=$841;label=192;break;}
 case 192: 
 var $843;
 var $i_01_i;
 var $844=((1144+($i_01_i<<3))|0);
 var $845=HEAP8[($844)];
 var $846=(($845<<24)>>24)==(($_val<<24)>>24);
 var $847=((($i_01_i)+(1))|0);
 if($846){var $_lcssa_i=$843;label=193;break;}else{label=191;break;}
 case 193: 
 var $_lcssa_i;
 var $848=HEAP32[(($_lcssa_i)>>2)];
 var $849=($848|0)==0;
 if($849){label=196;break;}else{label=194;break;}
 case 194: 
 var $$etemp$7$0=44;
 var $$etemp$7$1=0;

 assert(40 % 1 === 0);(_memcpy($32, $33, 40)|0);
 HEAP32[(($34)>>2)]=$848;
 HEAP32[(($35)>>2)]=1;
 var $851=_tre_parse($subctx);
 var $852=($851|0)==0;
 if($852){label=195;break;}else{var $_2=$851;label=294;break;}
 case 195: 
 var $853=HEAP32[(($15)>>2)];
 var $854=(($853+2)|0);
 HEAP32[(($15)>>2)]=$854;
 var $855=HEAP32[(($36)>>2)];
 HEAP32[(($23)>>2)]=$855;
 var $856=HEAP32[(($37)>>2)];
 var $$etemp$8$0=44;
 var $$etemp$8$1=0;

 var $status_0_be=0;var $depth_0_be=$depth_0138;var $node_2_i68_be=$856;label=7;break;
 case 196: 
 if($839){var $_2=5;label=294;break;}else{label=197;break;}
 case 197: 
 HEAP32[(($15)>>2)]=$838;
 var $858=HEAP8[($838)];
 var $859=(($858<<24)>>24);
 switch(($859|0)){case 98:{ label=198;break;}case 66:{ label=202;break;}case 60:{ label=206;break;}case 62:{ label=210;break;}case 120:{ label=214;break;}default:{label=231;break;}}break;
 case 198: 
 var $861=HEAP32[(($22)>>2)];
 var $862=___tre_mem_alloc_impl($861,0,0,1,32);
 var $863=$862;
 var $864=($862|0)==0;
 if($864){var $_0_i26=0;label=201;break;}else{label=199;break;}
 case 199: 
 var $866=___tre_mem_alloc_impl($861,0,0,1,20);
 var $867=(($862+4)|0);
 var $868=$867;
 HEAP32[(($868)>>2)]=$866;
 var $869=($866|0)==0;
 if($869){var $_0_i26=0;label=201;break;}else{label=200;break;}
 case 200: 
 var $871=$862;
 HEAP32[(($871)>>2)]=0;
 var $872=(($862+8)|0);
 var $873=$872;
 HEAP32[(($873)>>2)]=-1;
 var $874=(($862+12)|0);
 var $875=$874;
 HEAP32[(($875)>>2)]=-1;
 var $876=$866;
 HEAP32[(($876)>>2)]=-2;
 var $877=(($866+4)|0);
 var $878=$877;
 HEAP32[(($878)>>2)]=64;
 var $879=(($866+8)|0);
 var $880=$879;
 HEAP32[(($880)>>2)]=-1;
 var $_0_i26=$863;label=201;break;
 case 201: 
 var $_0_i26;
 var $881=HEAP32[(($15)>>2)];
 var $882=(($881+1)|0);
 HEAP32[(($15)>>2)]=$882;
 var $node_2_i69=$_0_i26;label=239;break;
 case 202: 
 var $884=HEAP32[(($22)>>2)];
 var $885=___tre_mem_alloc_impl($884,0,0,1,32);
 var $886=$885;
 var $887=($885|0)==0;
 if($887){var $_0_i28=0;label=205;break;}else{label=203;break;}
 case 203: 
 var $889=___tre_mem_alloc_impl($884,0,0,1,20);
 var $890=(($885+4)|0);
 var $891=$890;
 HEAP32[(($891)>>2)]=$889;
 var $892=($889|0)==0;
 if($892){var $_0_i28=0;label=205;break;}else{label=204;break;}
 case 204: 
 var $894=$885;
 HEAP32[(($894)>>2)]=0;
 var $895=(($885+8)|0);
 var $896=$895;
 HEAP32[(($896)>>2)]=-1;
 var $897=(($885+12)|0);
 var $898=$897;
 HEAP32[(($898)>>2)]=-1;
 var $899=$889;
 HEAP32[(($899)>>2)]=-2;
 var $900=(($889+4)|0);
 var $901=$900;
 HEAP32[(($901)>>2)]=128;
 var $902=(($889+8)|0);
 var $903=$902;
 HEAP32[(($903)>>2)]=-1;
 var $_0_i28=$886;label=205;break;
 case 205: 
 var $_0_i28;
 var $904=HEAP32[(($15)>>2)];
 var $905=(($904+1)|0);
 HEAP32[(($15)>>2)]=$905;
 var $node_2_i69=$_0_i28;label=239;break;
 case 206: 
 var $907=HEAP32[(($22)>>2)];
 var $908=___tre_mem_alloc_impl($907,0,0,1,32);
 var $909=$908;
 var $910=($908|0)==0;
 if($910){var $_0_i30=0;label=209;break;}else{label=207;break;}
 case 207: 
 var $912=___tre_mem_alloc_impl($907,0,0,1,20);
 var $913=(($908+4)|0);
 var $914=$913;
 HEAP32[(($914)>>2)]=$912;
 var $915=($912|0)==0;
 if($915){var $_0_i30=0;label=209;break;}else{label=208;break;}
 case 208: 
 var $917=$908;
 HEAP32[(($917)>>2)]=0;
 var $918=(($908+8)|0);
 var $919=$918;
 HEAP32[(($919)>>2)]=-1;
 var $920=(($908+12)|0);
 var $921=$920;
 HEAP32[(($921)>>2)]=-1;
 var $922=$912;
 HEAP32[(($922)>>2)]=-2;
 var $923=(($912+4)|0);
 var $924=$923;
 HEAP32[(($924)>>2)]=16;
 var $925=(($912+8)|0);
 var $926=$925;
 HEAP32[(($926)>>2)]=-1;
 var $_0_i30=$909;label=209;break;
 case 209: 
 var $_0_i30;
 var $927=HEAP32[(($15)>>2)];
 var $928=(($927+1)|0);
 HEAP32[(($15)>>2)]=$928;
 var $node_2_i69=$_0_i30;label=239;break;
 case 210: 
 var $930=HEAP32[(($22)>>2)];
 var $931=___tre_mem_alloc_impl($930,0,0,1,32);
 var $932=$931;
 var $933=($931|0)==0;
 if($933){var $_0_i32=0;label=213;break;}else{label=211;break;}
 case 211: 
 var $935=___tre_mem_alloc_impl($930,0,0,1,20);
 var $936=(($931+4)|0);
 var $937=$936;
 HEAP32[(($937)>>2)]=$935;
 var $938=($935|0)==0;
 if($938){var $_0_i32=0;label=213;break;}else{label=212;break;}
 case 212: 
 var $940=$931;
 HEAP32[(($940)>>2)]=0;
 var $941=(($931+8)|0);
 var $942=$941;
 HEAP32[(($942)>>2)]=-1;
 var $943=(($931+12)|0);
 var $944=$943;
 HEAP32[(($944)>>2)]=-1;
 var $945=$935;
 HEAP32[(($945)>>2)]=-2;
 var $946=(($935+4)|0);
 var $947=$946;
 HEAP32[(($947)>>2)]=32;
 var $948=(($935+8)|0);
 var $949=$948;
 HEAP32[(($949)>>2)]=-1;
 var $_0_i32=$932;label=213;break;
 case 213: 
 var $_0_i32;
 var $950=HEAP32[(($15)>>2)];
 var $951=(($950+1)|0);
 HEAP32[(($15)>>2)]=$951;
 var $node_2_i69=$_0_i32;label=239;break;
 case 214: 
 var $953=(($354+2)|0);
 HEAP32[(($15)>>2)]=$953;
 var $954=HEAP8[($953)];
 var $955=(($954<<24)>>24)==123;
 if($955){label=223;break;}else{label=215;break;}
 case 215: 
 HEAP8[($30)]=0; HEAP8[((($30)+(1))|0)]=0; HEAP8[((($30)+(2))|0)]=0;
 var $957=(($954<<24)>>24);
 var $958=_iswxdigit($957);
 var $959=($958|0)==0;
 var $_pre=HEAP32[(($15)>>2)];
 if($959){var $963=$_pre;label=217;break;}else{label=216;break;}
 case 216: 
 var $961=HEAP8[($_pre)];
 HEAP8[($30)]=$961;
 var $962=(($_pre+1)|0);
 HEAP32[(($15)>>2)]=$962;
 var $963=$962;label=217;break;
 case 217: 
 var $963;
 var $964=HEAP8[($963)];
 var $965=(($964<<24)>>24);
 var $966=_iswxdigit($965);
 var $967=($966|0)==0;
 if($967){label=219;break;}else{label=218;break;}
 case 218: 
 var $969=HEAP32[(($15)>>2)];
 var $970=HEAP8[($969)];
 HEAP8[($31)]=$970;
 var $971=(($969+1)|0);
 HEAP32[(($15)>>2)]=$971;
 label=219;break;
 case 219: 
 var $973=_strtol($30,0,16);
 var $974=HEAP32[(($22)>>2)];
 var $975=HEAP32[(($23)>>2)];
 var $976=___tre_mem_alloc_impl($974,0,0,1,32);
 var $977=$976;
 var $978=($976|0)==0;
 if($978){var $_0_i34=0;label=222;break;}else{label=220;break;}
 case 220: 
 var $980=___tre_mem_alloc_impl($974,0,0,1,20);
 var $981=(($976+4)|0);
 var $982=$981;
 HEAP32[(($982)>>2)]=$980;
 var $983=($980|0)==0;
 if($983){var $_0_i34=0;label=222;break;}else{label=221;break;}
 case 221: 
 var $985=$976;
 HEAP32[(($985)>>2)]=0;
 var $986=(($976+8)|0);
 var $987=$986;
 HEAP32[(($987)>>2)]=-1;
 var $988=(($976+12)|0);
 var $989=$988;
 HEAP32[(($989)>>2)]=-1;
 var $990=$980;
 HEAP32[(($990)>>2)]=$973;
 var $991=(($980+4)|0);
 var $992=$991;
 HEAP32[(($992)>>2)]=$973;
 var $993=(($980+8)|0);
 var $994=$993;
 HEAP32[(($994)>>2)]=$975;
 var $_0_i34=$977;label=222;break;
 case 222: 
 var $_0_i34;
 var $995=HEAP32[(($23)>>2)];
 var $996=((($995)+(1))|0);
 HEAP32[(($23)>>2)]=$996;
 var $node_2_i69=$_0_i34;label=239;break;
 case 223: 
 var $998=(($354+3)|0);
 HEAP32[(($15)>>2)]=$998;
 var $i_077=0;var $_in=$998;label=224;break;
 case 224: 
 var $_in;
 var $i_077;
 var $999=HEAP8[($_in)];
 if((($999<<24)>>24)==125|(($999<<24)>>24)==0){ var $storemerge4_lcssa=$_in;var $i_0_lcssa=$i_077;label=227;break;}else{label=225;break;}
 case 225: 
 var $1001=(($999<<24)>>24);
 var $1002=_iswxdigit($1001);
 var $1003=($1002|0)==0;
 if($1003){var $_2=9;label=294;break;}else{label=226;break;}
 case 226: 
 var $1005=HEAP32[(($15)>>2)];
 var $1006=HEAP8[($1005)];
 var $1007=(($tmp4+$i_077)|0);
 HEAP8[($1007)]=$1006;
 var $1008=((($i_077)+(1))|0);
 var $1009=(($1005+1)|0);
 HEAP32[(($15)>>2)]=$1009;
 var $notrhs=($1008>>>0)>31;
 if($notrhs){var $storemerge4_lcssa=$1009;var $i_0_lcssa=$1008;label=227;break;}else{var $i_077=$1008;var $_in=$1009;label=224;break;}
 case 227: 
 var $i_0_lcssa;
 var $storemerge4_lcssa;
 var $1010=(($storemerge4_lcssa+1)|0);
 HEAP32[(($15)>>2)]=$1010;
 var $1011=(($tmp4+$i_0_lcssa)|0);
 HEAP8[($1011)]=0;
 var $1012=_strtol($29,0,16);
 var $1013=HEAP32[(($22)>>2)];
 var $1014=HEAP32[(($23)>>2)];
 var $1015=___tre_mem_alloc_impl($1013,0,0,1,32);
 var $1016=$1015;
 var $1017=($1015|0)==0;
 if($1017){var $_0_i36=0;label=230;break;}else{label=228;break;}
 case 228: 
 var $1019=___tre_mem_alloc_impl($1013,0,0,1,20);
 var $1020=(($1015+4)|0);
 var $1021=$1020;
 HEAP32[(($1021)>>2)]=$1019;
 var $1022=($1019|0)==0;
 if($1022){var $_0_i36=0;label=230;break;}else{label=229;break;}
 case 229: 
 var $1024=$1015;
 HEAP32[(($1024)>>2)]=0;
 var $1025=(($1015+8)|0);
 var $1026=$1025;
 HEAP32[(($1026)>>2)]=-1;
 var $1027=(($1015+12)|0);
 var $1028=$1027;
 HEAP32[(($1028)>>2)]=-1;
 var $1029=$1019;
 HEAP32[(($1029)>>2)]=$1012;
 var $1030=(($1019+4)|0);
 var $1031=$1030;
 HEAP32[(($1031)>>2)]=$1012;
 var $1032=(($1019+8)|0);
 var $1033=$1032;
 HEAP32[(($1033)>>2)]=$1014;
 var $_0_i36=$1016;label=230;break;
 case 230: 
 var $_0_i36;
 var $1034=HEAP32[(($23)>>2)];
 var $1035=((($1034)+(1))|0);
 HEAP32[(($23)>>2)]=$1035;
 var $node_2_i69=$_0_i36;label=239;break;
 case 231: 
 var $1037=_iswdigit($859);
 var $1038=($1037|0)==0;
 if($1038){label=235;break;}else{label=232;break;}
 case 232: 
 var $1040=HEAP32[(($15)>>2)];
 var $1041=HEAP8[($1040)];
 var $1042=(($1041<<24)>>24);
 var $1043=((($1042)-(48))|0);
 var $1044=HEAP32[(($22)>>2)];
 var $1045=HEAP32[(($23)>>2)];
 var $1046=___tre_mem_alloc_impl($1044,0,0,1,32);
 var $1047=$1046;
 var $1048=($1046|0)==0;
 if($1048){var $_2=12;label=294;break;}else{label=233;break;}
 case 233: 
 var $1050=___tre_mem_alloc_impl($1044,0,0,1,20);
 var $1051=(($1046+4)|0);
 var $1052=$1051;
 HEAP32[(($1052)>>2)]=$1050;
 var $1053=($1050|0)==0;
 if($1053){var $_2=12;label=294;break;}else{label=234;break;}
 case 234: 
 var $1054=$1046;
 HEAP32[(($1054)>>2)]=0;
 var $1055=(($1046+8)|0);
 var $1056=$1055;
 HEAP32[(($1056)>>2)]=-1;
 var $1057=(($1046+12)|0);
 var $1058=$1057;
 HEAP32[(($1058)>>2)]=-1;
 var $1059=$1050;
 HEAP32[(($1059)>>2)]=-4;
 var $1060=(($1050+4)|0);
 var $1061=$1060;
 HEAP32[(($1061)>>2)]=$1043;
 var $1062=(($1050+8)|0);
 var $1063=$1062;
 HEAP32[(($1063)>>2)]=$1045;
 var $1064=HEAP32[(($23)>>2)];
 var $1065=((($1064)+(1))|0);
 HEAP32[(($23)>>2)]=$1065;
 var $1066=HEAP32[(($28)>>2)];
 var $1067=($1043|0)<($1066|0);
 var $_12=($1067?$1066:$1043);
 HEAP32[(($28)>>2)]=$_12;
 var $1068=HEAP32[(($15)>>2)];
 var $1069=(($1068+1)|0);
 HEAP32[(($15)>>2)]=$1069;
 var $status_0_be=0;var $depth_0_be=$depth_0138;var $node_2_i68_be=$1047;label=7;break;
 case 235: 
 var $1071=HEAP32[(($22)>>2)];
 var $1072=HEAP32[(($15)>>2)];
 var $1073=HEAP8[($1072)];
 var $1074=(($1073<<24)>>24);
 var $1075=HEAP32[(($23)>>2)];
 var $1076=___tre_mem_alloc_impl($1071,0,0,1,32);
 var $1077=$1076;
 var $1078=($1076|0)==0;
 if($1078){var $_0_i40=0;label=238;break;}else{label=236;break;}
 case 236: 
 var $1080=___tre_mem_alloc_impl($1071,0,0,1,20);
 var $1081=(($1076+4)|0);
 var $1082=$1081;
 HEAP32[(($1082)>>2)]=$1080;
 var $1083=($1080|0)==0;
 if($1083){var $_0_i40=0;label=238;break;}else{label=237;break;}
 case 237: 
 var $1085=$1076;
 HEAP32[(($1085)>>2)]=0;
 var $1086=(($1076+8)|0);
 var $1087=$1086;
 HEAP32[(($1087)>>2)]=-1;
 var $1088=(($1076+12)|0);
 var $1089=$1088;
 HEAP32[(($1089)>>2)]=-1;
 var $1090=$1080;
 HEAP32[(($1090)>>2)]=$1074;
 var $1091=(($1080+4)|0);
 var $1092=$1091;
 HEAP32[(($1092)>>2)]=$1074;
 var $1093=(($1080+8)|0);
 var $1094=$1093;
 HEAP32[(($1094)>>2)]=$1075;
 var $_0_i40=$1077;label=238;break;
 case 238: 
 var $_0_i40;
 var $1095=HEAP32[(($23)>>2)];
 var $1096=((($1095)+(1))|0);
 HEAP32[(($23)>>2)]=$1096;
 var $1097=HEAP32[(($15)>>2)];
 var $1098=(($1097+1)|0);
 HEAP32[(($15)>>2)]=$1098;
 var $node_2_i69=$_0_i40;label=239;break;
 case 239: 
 var $node_2_i69;
 var $1100=($node_2_i69|0)==0;
 if($1100){var $_2=12;label=294;break;}else{var $status_0_be=0;var $depth_0_be=$depth_0138;var $node_2_i68_be=$node_2_i69;label=7;break;}
 case 240: 
 var $1102=HEAP32[(($21)>>2)];
 var $1103=$1102&4;
 var $1104=($1103|0)==0;
 var $1105=HEAP32[(($22)>>2)];
 var $1106=HEAP32[(($23)>>2)];
 var $1107=___tre_mem_alloc_impl($1105,0,0,1,32);
 var $1108=$1107;
 var $1109=($1107|0)==0;
 if($1104){label=248;break;}else{label=241;break;}
 case 241: 
 if($1109){var $_2=12;label=294;break;}else{label=242;break;}
 case 242: 
 var $1112=___tre_mem_alloc_impl($1105,0,0,1,20);
 var $1113=(($1107+4)|0);
 var $1114=$1113;
 HEAP32[(($1114)>>2)]=$1112;
 var $1115=($1112|0)==0;
 if($1115){var $_2=12;label=294;break;}else{label=243;break;}
 case 243: 
 var $1117=$1107;
 HEAP32[(($1117)>>2)]=0;
 var $1118=(($1107+8)|0);
 var $1119=$1118;
 HEAP32[(($1119)>>2)]=-1;
 var $1120=(($1107+12)|0);
 var $1121=$1120;
 HEAP32[(($1121)>>2)]=-1;
 var $1122=$1112;
 HEAP32[(($1122)>>2)]=0;
 var $1123=(($1112+4)|0);
 var $1124=$1123;
 HEAP32[(($1124)>>2)]=9;
 var $1125=(($1112+8)|0);
 var $1126=$1125;
 HEAP32[(($1126)>>2)]=$1106;
 var $1127=HEAP32[(($22)>>2)];
 var $1128=HEAP32[(($23)>>2)];
 var $1129=((($1128)+(1))|0);
 var $1130=___tre_mem_alloc_impl($1127,0,0,1,32);
 var $1131=$1130;
 var $1132=($1130|0)==0;
 if($1132){var $_2=12;label=294;break;}else{label=244;break;}
 case 244: 
 var $1134=___tre_mem_alloc_impl($1127,0,0,1,20);
 var $1135=(($1130+4)|0);
 var $1136=$1135;
 HEAP32[(($1136)>>2)]=$1134;
 var $1137=($1134|0)==0;
 if($1137){var $_2=12;label=294;break;}else{label=245;break;}
 case 245: 
 var $1139=$1130;
 HEAP32[(($1139)>>2)]=0;
 var $1140=(($1130+8)|0);
 var $1141=$1140;
 HEAP32[(($1141)>>2)]=-1;
 var $1142=(($1130+12)|0);
 var $1143=$1142;
 HEAP32[(($1143)>>2)]=-1;
 var $1144=$1134;
 HEAP32[(($1144)>>2)]=11;
 var $1145=(($1134+4)|0);
 var $1146=$1145;
 HEAP32[(($1146)>>2)]=1114111;
 var $1147=(($1134+8)|0);
 var $1148=$1147;
 HEAP32[(($1148)>>2)]=$1129;
 var $1149=HEAP32[(($22)>>2)];
 var $1150=___tre_mem_alloc_impl($1149,0,0,1,32);
 var $1151=$1150;
 var $1152=($1150|0)==0;
 if($1152){var $_2=12;label=294;break;}else{label=246;break;}
 case 246: 
 var $1154=___tre_mem_alloc_impl($1149,0,0,1,8);
 var $1155=(($1150+4)|0);
 var $1156=$1155;
 HEAP32[(($1156)>>2)]=$1154;
 var $1157=($1154|0)==0;
 if($1157){var $_2=12;label=294;break;}else{label=247;break;}
 case 247: 
 var $1159=$1150;
 HEAP32[(($1159)>>2)]=3;
 var $1160=(($1150+8)|0);
 var $1161=$1160;
 HEAP32[(($1161)>>2)]=-1;
 var $1162=(($1150+12)|0);
 var $1163=$1162;
 HEAP32[(($1163)>>2)]=-1;
 var $1164=$1154;
 HEAP32[(($1164)>>2)]=$1108;
 var $1165=HEAP32[(($1156)>>2)];
 var $1166=(($1165+4)|0);
 var $1167=$1166;
 HEAP32[(($1167)>>2)]=$1131;
 var $1168=(($1107+16)|0);
 var $1169=$1168;
 var $1170=HEAP32[(($1169)>>2)];
 var $1171=(($1130+16)|0);
 var $1172=$1171;
 var $1173=HEAP32[(($1172)>>2)];
 var $1174=((($1173)+($1170))|0);
 var $1175=(($1150+16)|0);
 var $1176=$1175;
 HEAP32[(($1176)>>2)]=$1174;
 var $1177=HEAP32[(($23)>>2)];
 var $1178=((($1177)+(2))|0);
 var $storemerge=$1178;var $node_2_i70=$1151;label=251;break;
 case 248: 
 if($1109){var $_2=12;label=294;break;}else{label=249;break;}
 case 249: 
 var $1181=___tre_mem_alloc_impl($1105,0,0,1,20);
 var $1182=(($1107+4)|0);
 var $1183=$1182;
 HEAP32[(($1183)>>2)]=$1181;
 var $1184=($1181|0)==0;
 if($1184){var $_2=12;label=294;break;}else{label=250;break;}
 case 250: 
 var $1186=$1107;
 HEAP32[(($1186)>>2)]=0;
 var $1187=(($1107+8)|0);
 var $1188=$1187;
 HEAP32[(($1188)>>2)]=-1;
 var $1189=(($1107+12)|0);
 var $1190=$1189;
 HEAP32[(($1190)>>2)]=-1;
 var $1191=$1181;
 HEAP32[(($1191)>>2)]=0;
 var $1192=(($1181+4)|0);
 var $1193=$1192;
 HEAP32[(($1193)>>2)]=1114111;
 var $1194=(($1181+8)|0);
 var $1195=$1194;
 HEAP32[(($1195)>>2)]=$1106;
 var $1196=HEAP32[(($23)>>2)];
 var $1197=((($1196)+(1))|0);
 var $storemerge=$1197;var $node_2_i70=$1108;label=251;break;
 case 251: 
 var $node_2_i70;
 var $storemerge;
 HEAP32[(($23)>>2)]=$storemerge;
 var $1199=HEAP32[(($15)>>2)];
 var $1200=(($1199+1)|0);
 HEAP32[(($15)>>2)]=$1200;
 var $status_0_be=0;var $depth_0_be=$depth_0138;var $node_2_i68_be=$node_2_i70;label=7;break;
 case 252: 
 var $1202=HEAP32[(($21)>>2)];
 var $1203=$1202&1;
 var $1204=($1203|0)==0;
 if($1204){label=253;break;}else{label=255;break;}
 case 253: 
 var $1206=HEAP32[(($17)>>2)];
 var $1207=($354|0)==($1206|0);
 if($1207){label=254;break;}else{label=268;break;}
 case 254: 
 var $1209=_tre_stack_push($2,5);
 var $1210=($1209|0)==0;
 if($1210){label=255;break;}else{var $status_0_be_ph=$1209;var $depth_0_be_ph=$depth_0138;label=6;break;}
 case 255: 
 var $1212=HEAP32[(($22)>>2)];
 var $1213=___tre_mem_alloc_impl($1212,0,0,1,32);
 var $1214=$1213;
 var $1215=($1213|0)==0;
 if($1215){var $_2=12;label=294;break;}else{label=256;break;}
 case 256: 
 var $1217=___tre_mem_alloc_impl($1212,0,0,1,20);
 var $1218=(($1213+4)|0);
 var $1219=$1218;
 HEAP32[(($1219)>>2)]=$1217;
 var $1220=($1217|0)==0;
 if($1220){var $_2=12;label=294;break;}else{label=257;break;}
 case 257: 
 var $1222=$1213;
 HEAP32[(($1222)>>2)]=0;
 var $1223=(($1213+8)|0);
 var $1224=$1223;
 HEAP32[(($1224)>>2)]=-1;
 var $1225=(($1213+12)|0);
 var $1226=$1225;
 HEAP32[(($1226)>>2)]=-1;
 var $1227=$1217;
 HEAP32[(($1227)>>2)]=-2;
 var $1228=(($1217+4)|0);
 var $1229=$1228;
 HEAP32[(($1229)>>2)]=1;
 var $1230=(($1217+8)|0);
 var $1231=$1230;
 HEAP32[(($1231)>>2)]=-1;
 var $1232=HEAP32[(($15)>>2)];
 var $1233=(($1232+1)|0);
 HEAP32[(($15)>>2)]=$1233;
 var $status_0_be=0;var $depth_0_be=$depth_0138;var $node_2_i68_be=$1214;label=7;break;
 case 258: 
 var $1235=HEAP32[(($21)>>2)];
 var $1236=$1235&1;
 var $1237=($1236|0)==0;
 if($1237){label=259;break;}else{label=260;break;}
 case 259: 
 var $1239=(($354+1)|0);
 var $1240=HEAP8[($1239)];
 var $1241=(($1240<<24)>>24)==0;
 if($1241){label=260;break;}else{label=268;break;}
 case 260: 
 var $1243=HEAP32[(($22)>>2)];
 var $1244=___tre_mem_alloc_impl($1243,0,0,1,32);
 var $1245=$1244;
 var $1246=($1244|0)==0;
 if($1246){var $_2=12;label=294;break;}else{label=261;break;}
 case 261: 
 var $1248=___tre_mem_alloc_impl($1243,0,0,1,20);
 var $1249=(($1244+4)|0);
 var $1250=$1249;
 HEAP32[(($1250)>>2)]=$1248;
 var $1251=($1248|0)==0;
 if($1251){var $_2=12;label=294;break;}else{label=262;break;}
 case 262: 
 var $1253=$1244;
 HEAP32[(($1253)>>2)]=0;
 var $1254=(($1244+8)|0);
 var $1255=$1254;
 HEAP32[(($1255)>>2)]=-1;
 var $1256=(($1244+12)|0);
 var $1257=$1256;
 HEAP32[(($1257)>>2)]=-1;
 var $1258=$1248;
 HEAP32[(($1258)>>2)]=-2;
 var $1259=(($1248+4)|0);
 var $1260=$1259;
 HEAP32[(($1260)>>2)]=2;
 var $1261=(($1248+8)|0);
 var $1262=$1261;
 HEAP32[(($1262)>>2)]=-1;
 var $1263=HEAP32[(($15)>>2)];
 var $1264=(($1263+1)|0);
 HEAP32[(($15)>>2)]=$1264;
 var $status_0_be=0;var $depth_0_be=$depth_0138;var $node_2_i68_be=$1245;label=7;break;
 case 263: 
 var $1266=($depth_0138|0)==0;
 if($1266){label=268;break;}else{label=264;break;}
 case 264: 
 var $1268=HEAP32[(($21)>>2)];
 var $1269=$1268&1;
 var $1270=($1269|0)==0;
 if($1270){label=268;break;}else{label=265;break;}
 case 265: 
 var $1272=HEAP32[(($22)>>2)];
 var $1273=___tre_mem_alloc_impl($1272,0,0,1,32);
 var $1274=$1273;
 var $1275=($1273|0)==0;
 if($1275){var $_2=12;label=294;break;}else{label=266;break;}
 case 266: 
 var $1277=___tre_mem_alloc_impl($1272,0,0,1,20);
 var $1278=(($1273+4)|0);
 var $1279=$1278;
 HEAP32[(($1279)>>2)]=$1277;
 var $1280=($1277|0)==0;
 if($1280){var $_2=12;label=294;break;}else{label=267;break;}
 case 267: 
 var $1281=$1273;
 HEAP32[(($1281)>>2)]=0;
 var $1282=(($1273+8)|0);
 var $1283=$1282;
 HEAP32[(($1283)>>2)]=-1;
 var $1284=(($1273+12)|0);
 var $1285=$1284;
 HEAP32[(($1285)>>2)]=-1;
 var $1286=$1277;
 HEAP32[(($1286)>>2)]=-1;
 var $1287=(($1277+4)|0);
 var $1288=$1287;
 HEAP32[(($1288)>>2)]=-1;
 var $1289=(($1277+8)|0);
 var $1290=$1289;
 HEAP32[(($1290)>>2)]=-1;
 var $status_0_be=0;var $depth_0_be=$depth_0138;var $node_2_i68_be=$1274;label=7;break;
 case 268: 
 var $1292=_mbtowc($wc,$354,-1);
 var $1293=($1292|0)<0;
 if($1293){label=269;break;}else{var $clen_0=$1292;label=270;break;}
 case 269: 
 HEAP32[(($wc)>>2)]=-1;
 var $clen_0=1;label=270;break;
 case 270: 
 var $clen_0;
 var $1296=HEAP32[(($21)>>2)];
 var $1297=$1296&2;
 var $1298=($1297|0)==0;
 if($1298){label=280;break;}else{label=271;break;}
 case 271: 
 var $1300=HEAP32[(($wc)>>2)];
 var $1301=_iswupper($1300);
 var $1302=($1301|0)==0;
 if($1302){label=272;break;}else{label=273;break;}
 case 272: 
 var $1304=HEAP32[(($wc)>>2)];
 var $1305=_iswlower($1304);
 var $1306=($1305|0)==0;
 if($1306){label=280;break;}else{label=273;break;}
 case 273: 
 var $1308=HEAP32[(($22)>>2)];
 var $1309=HEAP32[(($wc)>>2)];
 var $1310=_towupper($1309);
 var $1311=HEAP32[(($wc)>>2)];
 var $1312=_towupper($1311);
 var $1313=HEAP32[(($23)>>2)];
 var $1314=___tre_mem_alloc_impl($1308,0,0,1,32);
 var $1315=$1314;
 var $1316=($1314|0)==0;
 if($1316){var $_2=12;label=294;break;}else{label=274;break;}
 case 274: 
 var $1318=___tre_mem_alloc_impl($1308,0,0,1,20);
 var $1319=(($1314+4)|0);
 var $1320=$1319;
 HEAP32[(($1320)>>2)]=$1318;
 var $1321=($1318|0)==0;
 if($1321){var $_2=12;label=294;break;}else{label=275;break;}
 case 275: 
 var $1323=$1314;
 HEAP32[(($1323)>>2)]=0;
 var $1324=(($1314+8)|0);
 var $1325=$1324;
 HEAP32[(($1325)>>2)]=-1;
 var $1326=(($1314+12)|0);
 var $1327=$1326;
 HEAP32[(($1327)>>2)]=-1;
 var $1328=$1318;
 HEAP32[(($1328)>>2)]=$1310;
 var $1329=(($1318+4)|0);
 var $1330=$1329;
 HEAP32[(($1330)>>2)]=$1312;
 var $1331=(($1318+8)|0);
 var $1332=$1331;
 HEAP32[(($1332)>>2)]=$1313;
 var $1333=HEAP32[(($22)>>2)];
 var $1334=HEAP32[(($wc)>>2)];
 var $1335=_towlower($1334);
 var $1336=HEAP32[(($wc)>>2)];
 var $1337=_towlower($1336);
 var $1338=HEAP32[(($23)>>2)];
 var $1339=___tre_mem_alloc_impl($1333,0,0,1,32);
 var $1340=$1339;
 var $1341=($1339|0)==0;
 if($1341){var $_2=12;label=294;break;}else{label=276;break;}
 case 276: 
 var $1343=___tre_mem_alloc_impl($1333,0,0,1,20);
 var $1344=(($1339+4)|0);
 var $1345=$1344;
 HEAP32[(($1345)>>2)]=$1343;
 var $1346=($1343|0)==0;
 if($1346){var $_2=12;label=294;break;}else{label=277;break;}
 case 277: 
 var $1348=$1339;
 HEAP32[(($1348)>>2)]=0;
 var $1349=(($1339+8)|0);
 var $1350=$1349;
 HEAP32[(($1350)>>2)]=-1;
 var $1351=(($1339+12)|0);
 var $1352=$1351;
 HEAP32[(($1352)>>2)]=-1;
 var $1353=$1343;
 HEAP32[(($1353)>>2)]=$1335;
 var $1354=(($1343+4)|0);
 var $1355=$1354;
 HEAP32[(($1355)>>2)]=$1337;
 var $1356=(($1343+8)|0);
 var $1357=$1356;
 HEAP32[(($1357)>>2)]=$1338;
 var $1358=HEAP32[(($22)>>2)];
 var $1359=___tre_mem_alloc_impl($1358,0,0,1,32);
 var $1360=($1359|0)==0;
 if($1360){var $_2=12;label=294;break;}else{label=278;break;}
 case 278: 
 var $1362=___tre_mem_alloc_impl($1358,0,0,1,8);
 var $1363=(($1359+4)|0);
 var $1364=$1363;
 HEAP32[(($1364)>>2)]=$1362;
 var $1365=($1362|0)==0;
 if($1365){var $_2=12;label=294;break;}else{label=279;break;}
 case 279: 
 var $1366=$1359;
 HEAP32[(($1366)>>2)]=3;
 var $1367=(($1359+8)|0);
 var $1368=$1367;
 HEAP32[(($1368)>>2)]=-1;
 var $1369=(($1359+12)|0);
 var $1370=$1369;
 HEAP32[(($1370)>>2)]=-1;
 var $1371=$1362;
 HEAP32[(($1371)>>2)]=$1315;
 var $1372=HEAP32[(($1364)>>2)];
 var $1373=(($1372+4)|0);
 var $1374=$1373;
 HEAP32[(($1374)>>2)]=$1340;
 var $1375=(($1314+16)|0);
 var $1376=$1375;
 var $1377=HEAP32[(($1376)>>2)];
 var $1378=(($1339+16)|0);
 var $1379=$1378;
 var $1380=HEAP32[(($1379)>>2)];
 var $1381=((($1380)+($1377))|0);
 var $1382=(($1359+16)|0);
 var $1383=$1382;
 HEAP32[(($1383)>>2)]=$1381;
 var $node_2_i71_in=$1359;label=283;break;
 case 280: 
 var $1384=HEAP32[(($22)>>2)];
 var $1385=HEAP32[(($wc)>>2)];
 var $1386=HEAP32[(($23)>>2)];
 var $1387=___tre_mem_alloc_impl($1384,0,0,1,32);
 var $1388=($1387|0)==0;
 if($1388){var $_2=12;label=294;break;}else{label=281;break;}
 case 281: 
 var $1390=___tre_mem_alloc_impl($1384,0,0,1,20);
 var $1391=(($1387+4)|0);
 var $1392=$1391;
 HEAP32[(($1392)>>2)]=$1390;
 var $1393=($1390|0)==0;
 if($1393){var $_2=12;label=294;break;}else{label=282;break;}
 case 282: 
 var $1394=$1387;
 HEAP32[(($1394)>>2)]=0;
 var $1395=(($1387+8)|0);
 var $1396=$1395;
 HEAP32[(($1396)>>2)]=-1;
 var $1397=(($1387+12)|0);
 var $1398=$1397;
 HEAP32[(($1398)>>2)]=-1;
 var $1399=$1390;
 HEAP32[(($1399)>>2)]=$1385;
 var $1400=(($1390+4)|0);
 var $1401=$1400;
 HEAP32[(($1401)>>2)]=$1385;
 var $1402=(($1390+8)|0);
 var $1403=$1402;
 HEAP32[(($1403)>>2)]=$1386;
 var $node_2_i71_in=$1387;label=283;break;
 case 283: 
 var $node_2_i71_in;
 var $node_2_i71=$node_2_i71_in;
 var $1405=HEAP32[(($23)>>2)];
 var $1406=((($1405)+(1))|0);
 HEAP32[(($23)>>2)]=$1406;
 var $1407=HEAP32[(($15)>>2)];
 var $1408=(($1407+$clen_0)|0);
 HEAP32[(($15)>>2)]=$1408;
 var $status_0_be=0;var $depth_0_be=$depth_0138;var $node_2_i68_be=$node_2_i71;label=7;break;
 case 284: 
 var $1410=((($38)-(2))|0);
 HEAP32[(($_idx13)>>2)]=$1410;
 var $1411=(($40+($1410<<2))|0);
 var $1412=$1411;
 var $1413=HEAP32[(($1412)>>2)];
 var $1414=(($node_2_i68136+12)|0);
 var $1415=HEAP32[(($1414)>>2)];
 var $1416=($1415|0)>-1;
 if($1416){label=285;break;}else{var $node_2_i64=$node_2_i68136;label=290;break;}
 case 285: 
 var $1418=HEAP32[(($22)>>2)];
 var $1419=___tre_mem_alloc_impl($1418,0,0,1,32);
 var $1420=$1419;
 var $1421=($1419|0)==0;
 if($1421){var $_2=12;label=294;break;}else{label=286;break;}
 case 286: 
 var $1423=___tre_mem_alloc_impl($1418,0,0,1,20);
 var $1424=(($1419+4)|0);
 var $1425=$1424;
 HEAP32[(($1425)>>2)]=$1423;
 var $1426=($1423|0)==0;
 if($1426){var $_2=12;label=294;break;}else{label=287;break;}
 case 287: 
 var $1428=$1419;
 HEAP32[(($1428)>>2)]=0;
 var $1429=(($1419+8)|0);
 var $1430=$1429;
 HEAP32[(($1430)>>2)]=-1;
 var $1431=(($1419+12)|0);
 var $1432=$1431;
 HEAP32[(($1432)>>2)]=-1;
 var $1433=$1423;
 HEAP32[(($1433)>>2)]=-1;
 var $1434=(($1423+4)|0);
 var $1435=$1434;
 HEAP32[(($1435)>>2)]=-1;
 var $1436=(($1423+8)|0);
 var $1437=$1436;
 HEAP32[(($1437)>>2)]=-1;
 var $1438=HEAP32[(($22)>>2)];
 var $1439=___tre_mem_alloc_impl($1438,0,0,1,32);
 var $1440=$1439;
 var $1441=($1439|0)==0;
 if($1441){var $_2=12;label=294;break;}else{label=288;break;}
 case 288: 
 var $1443=___tre_mem_alloc_impl($1438,0,0,1,8);
 var $1444=(($1439+4)|0);
 var $1445=$1444;
 HEAP32[(($1445)>>2)]=$1443;
 var $1446=($1443|0)==0;
 if($1446){var $_2=12;label=294;break;}else{label=289;break;}
 case 289: 
 var $1448=$1439;
 HEAP32[(($1448)>>2)]=1;
 var $1449=(($1439+8)|0);
 var $1450=$1449;
 HEAP32[(($1450)>>2)]=-1;
 var $1451=(($1439+12)|0);
 var $1452=$1451;
 HEAP32[(($1452)>>2)]=-1;
 var $1453=$1443;
 HEAP32[(($1453)>>2)]=$1420;
 var $1454=HEAP32[(($1445)>>2)];
 var $1455=(($1454+4)|0);
 var $1456=$1455;
 HEAP32[(($1456)>>2)]=$node_2_i68136;
 var $1457=(($1419+16)|0);
 var $1458=$1457;
 var $1459=HEAP32[(($1458)>>2)];
 var $1460=(($node_2_i68136+16)|0);
 var $1461=HEAP32[(($1460)>>2)];
 var $1462=((($1461)+($1459))|0);
 var $1463=(($1439+16)|0);
 var $1464=$1463;
 HEAP32[(($1464)>>2)]=$1462;
 var $1465=HEAP32[(($1460)>>2)];
 HEAP32[(($1464)>>2)]=$1465;
 var $node_2_i64=$1440;label=290;break;
 case 290: 
 var $node_2_i64;
 var $1467=(($node_2_i64+12)|0);
 HEAP32[(($1467)>>2)]=$1413;
 var $1468=(($node_2_i64+16)|0);
 var $1469=HEAP32[(($1468)>>2)];
 var $1470=((($1469)+(1))|0);
 HEAP32[(($1468)>>2)]=$1470;
 var $status_0_be=0;var $depth_0_be=$depth_0138;var $node_2_i68_be=$node_2_i64;label=7;break;
 case 291: 
 var $1472=((($38)-(2))|0);
 HEAP32[(($_idx13)>>2)]=$1472;
 var $1473=(($40+($1472<<2))|0);
 var $1474=$1473;
 var $1475=HEAP32[(($1474)>>2)];
 HEAP32[(($21)>>2)]=$1475;
 var $status_0_be=0;var $depth_0_be=$depth_0138;var $node_2_i68_be=$node_2_i68136;label=7;break;
 case 292: 
 var $_lcssa131;
 var $status_0_lcssa;
 var $depth_0_lcssa;
 var $node_2_i68_lcssa;
 var $1476=($depth_0_lcssa|0)>0;
 var $_not=$_lcssa131^1;
 var $brmerge=$1476|$_not;
 var $_mux=($1476?8:$status_0_lcssa);
 if($brmerge){var $_2=$_mux;label=294;break;}else{label=293;break;}
 case 293: 
 var $1478=(($ctx+8)|0);
 HEAP32[(($1478)>>2)]=$node_2_i68_lcssa;
 var $_2=0;label=294;break;
 case 294: 
 var $_2;
 STACKTOP=sp;return $_2;
  default: assert(0, "bad label: " + label);
 }

}


function _tre_add_tags($mem,$stack,$tree,$tnfa){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $stack_idx4=(($stack+12)|0);
 var $stack_idx4_val=HEAP32[(($stack_idx4)>>2)];
 var $1=($mem|0)==0;
 var $2=($tnfa|0)==0;
 var $_=$1|$2;
 if($_){label=3;break;}else{label=2;break;}
 case 2: 
 var $4=(($tnfa+48)|0);
 HEAP32[(($4)>>2)]=0;
 var $5=(($tnfa+36)|0);
 var $6=HEAP32[(($5)>>2)];
 HEAP32[(($6)>>2)]=-1;
 label=3;break;
 case 3: 
 var $8=(($tnfa+28)|0);
 var $9=HEAP32[(($8)>>2)];
 var $10=$9<<3;
 var $11=((($10)+(8))|0);
 var $12=_malloc($11);
 var $13=$12;
 var $14=($12|0)==0;
 if($14){var $_0=12;label=139;break;}else{label=4;break;}
 case 4: 
 HEAP32[(($13)>>2)]=-1;
 var $16=$9<<2;
 var $17=((($16)+(4))|0);
 var $18=_malloc($17);
 var $19=$18;
 var $20=($18|0)==0;
 if($20){label=5;break;}else{label=6;break;}
 case 5: 
 _free($12);
 var $_0=12;label=139;break;
 case 6: 
 HEAP32[(($19)>>2)]=-1;
 var $i_0=0;label=7;break;
 case 7: 
 var $i_0;
 var $24=($i_0>>>0)>($9>>>0);
 var $25=((($i_0)+(1))|0);
 if($24){label=8;break;}else{var $i_0=$25;label=7;break;}
 case 8: 
 var $27=$tree;
 var $28=_tre_stack_push($stack,$27);
 var $29=_tre_stack_push($stack,0);
 var $stack_idx_val45=HEAP32[(($stack_idx4)>>2)];
 var $30=($stack_idx_val45|0)>($stack_idx4_val|0);
 var $31=($29|0)==0;
 var $or_cond46=$30&$31;
 if($or_cond46){label=9;break;}else{var $minimal_tag_0_lcssa=-1;var $tag_0_lcssa=0;var $num_minimals_0_lcssa=0;var $num_tags_0_lcssa=0;var $regset_0_lcssa=$13;var $status_0_lcssa=$29;label=127;break;}
 case 9: 
 var $32=(($stack+16)|0);
 var $33=(($tnfa+32)|0);
 var $34=(($tnfa+16)|0);
 var $35=(($tnfa+36)|0);
 var $direction_047=0;var $minimal_tag_050=-1;var $next_tag_053=1;var $tag_056=0;var $num_minimals_059=0;var $num_tags_062=0;var $regset_065=$13;var $36=$stack_idx_val45;label=10;break;
 case 10: 
 var $36;
 var $regset_065;
 var $num_tags_062;
 var $num_minimals_059;
 var $tag_056;
 var $next_tag_053;
 var $minimal_tag_050;
 var $direction_047;
 var $37=((($36)-(1))|0);
 HEAP32[(($stack_idx4)>>2)]=$37;
 var $38=HEAP32[(($32)>>2)];
 var $39=(($38+($37<<2))|0);
 var $40=$39;
 var $41=HEAP32[(($40)>>2)];
 switch(($41|0)){case 1:{ label=113;break;}case 4:{ label=116;break;}case 5:{ label=117;break;}case 2:{ var $regset_1=$regset_065;label=119;break;}case 6:{ label=12;break;}case 3:{ label=120;break;}case 0:{ label=17;break;}default:{var $status_0_be=0;var $regset_0_be=$regset_065;var $num_tags_0_be=$num_tags_062;var $num_minimals_0_be=$num_minimals_059;var $tag_0_be=$tag_056;var $next_tag_0_be=$next_tag_053;var $minimal_tag_0_be=$minimal_tag_050;var $direction_0_be=$direction_047;label=11;break;}}break;
 case 11: 
 var $direction_0_be;
 var $minimal_tag_0_be;
 var $next_tag_0_be;
 var $tag_0_be;
 var $num_minimals_0_be;
 var $num_tags_0_be;
 var $regset_0_be;
 var $status_0_be;
 var $stack_idx_val=HEAP32[(($stack_idx4)>>2)];
 var $42=($stack_idx_val|0)>($stack_idx4_val|0);
 var $43=($status_0_be|0)==0;
 var $or_cond=$42&$43;
 if($or_cond){var $direction_047=$direction_0_be;var $minimal_tag_050=$minimal_tag_0_be;var $next_tag_053=$next_tag_0_be;var $tag_056=$tag_0_be;var $num_minimals_059=$num_minimals_0_be;var $num_tags_062=$num_tags_0_be;var $regset_065=$regset_0_be;var $36=$stack_idx_val;label=10;break;}else{var $minimal_tag_0_lcssa=$minimal_tag_0_be;var $tag_0_lcssa=$tag_0_be;var $num_minimals_0_lcssa=$num_minimals_0_be;var $num_tags_0_lcssa=$num_tags_0_be;var $regset_0_lcssa=$regset_0_be;var $status_0_lcssa=$status_0_be;label=127;break;}
 case 12: 
 var $45=((($36)-(2))|0);
 HEAP32[(($stack_idx4)>>2)]=$45;
 var $46=(($38+($45<<2))|0);
 var $47=$46;
 var $48=HEAP32[(($47)>>2)];
 var $i1_0=0;label=13;break;
 case 13: 
 var $i1_0;
 var $50=(($regset_065+($i1_0<<2))|0);
 var $51=HEAP32[(($50)>>2)];
 var $52=($51|0)>-1;
 var $53=((($i1_0)+(1))|0);
 if($52){var $i1_0=$53;label=13;break;}else{label=14;break;}
 case 14: 
 var $55=$48<<1;
 var $56=$55|1;
 HEAP32[(($50)>>2)]=$56;
 var $57=(($regset_065+($53<<2))|0);
 HEAP32[(($57)>>2)]=-1;
 var $i1_1=0;label=15;break;
 case 15: 
 var $i1_1;
 var $59=(($19+($i1_1<<2))|0);
 var $60=HEAP32[(($59)>>2)];
 var $61=($60|0)>-1;
 var $62=((($i1_1)+(1))|0);
 if($61){var $i1_1=$62;label=15;break;}else{label=16;break;}
 case 16: 
 var $64=((($i1_1)-(1))|0);
 var $65=(($19+($64<<2))|0);
 HEAP32[(($65)>>2)]=-1;
 var $status_0_be=0;var $regset_0_be=$regset_065;var $num_tags_0_be=$num_tags_062;var $num_minimals_0_be=$num_minimals_059;var $tag_0_be=$tag_056;var $next_tag_0_be=$next_tag_053;var $minimal_tag_0_be=$minimal_tag_050;var $direction_0_be=$direction_047;label=11;break;
 case 17: 
 var $67=((($36)-(2))|0);
 HEAP32[(($stack_idx4)>>2)]=$67;
 var $68=(($38+($67<<2))|0);
 var $69=HEAP32[(($68)>>2)];
 var $70=$69;
 var $71=(($69+12)|0);
 var $72=$71;
 var $73=HEAP32[(($72)>>2)];
 var $74=($73|0)>-1;
 if($74){var $i3_0=0;label=18;break;}else{label=28;break;}
 case 18: 
 var $i3_0;
 var $75=(($regset_065+($i3_0<<2))|0);
 var $76=HEAP32[(($75)>>2)];
 var $77=($76|0)>-1;
 var $78=((($i3_0)+(1))|0);
 if($77){var $i3_0=$78;label=18;break;}else{label=19;break;}
 case 19: 
 var $80=$73<<1;
 HEAP32[(($75)>>2)]=$80;
 var $81=(($regset_065+($78<<2))|0);
 HEAP32[(($81)>>2)]=-1;
 if($_){label=26;break;}else{var $i3_1=0;label=20;break;}
 case 20: 
 var $i3_1;
 var $82=(($19+($i3_1<<2))|0);
 var $83=HEAP32[(($82)>>2)];
 var $84=($83|0)>-1;
 var $85=((($i3_1)+(1))|0);
 if($84){var $i3_1=$85;label=20;break;}else{label=21;break;}
 case 21: 
 var $87=HEAP32[(($34)>>2)];
 var $88=(($87+((($73)*(12))&-1)+8)|0);
 HEAP32[(($88)>>2)]=0;
 var $89=($i3_1|0)>0;
 if($89){label=22;break;}else{label=26;break;}
 case 22: 
 var $91=$i3_1<<2;
 var $92=((($91)+(4))|0);
 var $93=_malloc($92);
 var $94=$93;
 var $95=($93|0)==0;
 if($95){var $minimal_tag_0_lcssa=$minimal_tag_050;var $tag_0_lcssa=$tag_056;var $num_minimals_0_lcssa=$num_minimals_059;var $num_tags_0_lcssa=$num_tags_062;var $regset_0_lcssa=$regset_065;var $status_0_lcssa=12;label=127;break;}else{label=23;break;}
 case 23: 
 var $97=HEAP32[(($34)>>2)];
 var $98=(($97+((($73)*(12))&-1)+8)|0);
 HEAP32[(($98)>>2)]=$94;
 var $99=HEAP32[(($19)>>2)];
 var $100=($99|0)>-1;
 if($100){var $i3_230=0;var $102=$99;var $101=$94;label=24;break;}else{var $_lcssa29=$94;label=25;break;}
 case 24: 
 var $101;
 var $102;
 var $i3_230;
 HEAP32[(($101)>>2)]=$102;
 var $103=((($i3_230)+(1))|0);
 var $104=(($19+($103<<2))|0);
 var $105=HEAP32[(($104)>>2)];
 var $106=($105|0)>-1;
 var $107=(($94+($103<<2))|0);
 if($106){var $i3_230=$103;var $102=$105;var $101=$107;label=24;break;}else{var $_lcssa29=$107;label=25;break;}
 case 25: 
 var $_lcssa29;
 HEAP32[(($_lcssa29)>>2)]=-1;
 label=26;break;
 case 26: 
 var $109=HEAP32[(($72)>>2)];
 var $value_c_i=$109;
 var $110=_tre_stack_push($stack,$value_c_i);
 var $111=($110|0)==0;
 if($111){label=27;break;}else{var $minimal_tag_0_lcssa=$minimal_tag_050;var $tag_0_lcssa=$tag_056;var $num_minimals_0_lcssa=$num_minimals_059;var $num_tags_0_lcssa=$num_tags_062;var $regset_0_lcssa=$regset_065;var $status_0_lcssa=$110;label=127;break;}
 case 27: 
 var $113=_tre_stack_push($stack,6);
 var $114=($113|0)==0;
 if($114){label=28;break;}else{var $minimal_tag_0_lcssa=$minimal_tag_050;var $tag_0_lcssa=$tag_056;var $num_minimals_0_lcssa=$num_minimals_059;var $num_tags_0_lcssa=$num_tags_062;var $regset_0_lcssa=$regset_065;var $status_0_lcssa=$113;label=127;break;}
 case 28: 
 var $116=$69;
 var $117=HEAP32[(($116)>>2)];
 if(($117|0)==0){ label=29;break;}else if(($117|0)==1){ label=45;break;}else if(($117|0)==2){ label=56;break;}else if(($117|0)==3){ label=81;break;}else{var $status_7=0;var $num_tags_3=$num_tags_062;var $num_minimals_9=$num_minimals_059;var $tag_3=$tag_056;var $next_tag_4=$next_tag_053;var $minimal_tag_9=$minimal_tag_050;var $direction_1=$direction_047;label=110;break;}
 case 29: 
 var $119=(($69+4)|0);
 var $120=$119;
 var $121=HEAP32[(($120)>>2)];
 var $122=$121;
 var $123=HEAP32[(($122)>>2)];
 var $124=($123|0)>-1;
 var $125=($123|0)==-4;
 var $or_cond1=$124|$125;
 if($or_cond1){label=30;break;}else{var $status_7=0;var $num_tags_3=$num_tags_062;var $num_minimals_9=$num_minimals_059;var $tag_3=$tag_056;var $next_tag_4=$next_tag_053;var $minimal_tag_9=$minimal_tag_050;var $direction_1=$direction_047;label=110;break;}
 case 30: 
 var $127=HEAP32[(($regset_065)>>2)];
 var $128=($127|0)>-1;
 if($128){label=31;break;}else{var $status_7=0;var $num_tags_3=$num_tags_062;var $num_minimals_9=$num_minimals_059;var $tag_3=$tag_056;var $next_tag_4=$next_tag_053;var $minimal_tag_9=$minimal_tag_050;var $direction_1=$direction_047;label=110;break;}
 case 31: 
 if($_){label=43;break;}else{label=32;break;}
 case 32: 
 var $131=_tre_add_tag_left($mem,$70,$tag_056);
 var $132=HEAP32[(($33)>>2)];
 var $133=(($132+($tag_056<<2))|0);
 HEAP32[(($133)>>2)]=$direction_047;
 var $134=($minimal_tag_050|0)>-1;
 if($134){label=33;break;}else{var $num_minimals_1=$num_minimals_059;var $minimal_tag_1=$minimal_tag_050;label=36;break;}
 case 33: 
 var $135=HEAP32[(($35)>>2)];
 var $i4_0=0;label=34;break;
 case 34: 
 var $i4_0;
 var $137=(($135+($i4_0<<2))|0);
 var $138=HEAP32[(($137)>>2)];
 var $139=($138|0)>-1;
 var $140=((($i4_0)+(1))|0);
 if($139){var $i4_0=$140;label=34;break;}else{label=35;break;}
 case 35: 
 HEAP32[(($137)>>2)]=$tag_056;
 var $142=(($135+($140<<2))|0);
 HEAP32[(($142)>>2)]=$minimal_tag_050;
 var $143=((($i4_0)+(2))|0);
 var $144=(($135+($143<<2))|0);
 HEAP32[(($144)>>2)]=-1;
 var $145=((($num_minimals_059)+(1))|0);
 var $num_minimals_1=$145;var $minimal_tag_1=-1;label=36;break;
 case 36: 
 var $minimal_tag_1;
 var $num_minimals_1;
 var $147=HEAP32[(($regset_065)>>2)];
 var $148=($147|0)>-1;
 if($148){label=37;break;}else{label=42;break;}
 case 37: 
 var $149=HEAP32[(($34)>>2)];
 var $i_01_i9=0;var $151=$147;label=38;break;
 case 38: 
 var $151;
 var $i_01_i9;
 var $152=(((($151|0))/(2))&-1);
 var $153=$151&1;
 var $154=($153|0)==0;
 if($154){label=39;break;}else{label=40;break;}
 case 39: 
 var $156=(($149+((($152)*(12))&-1))|0);
 HEAP32[(($156)>>2)]=$tag_056;
 label=41;break;
 case 40: 
 var $158=(($149+((($152)*(12))&-1)+4)|0);
 HEAP32[(($158)>>2)]=$tag_056;
 label=41;break;
 case 41: 
 var $160=((($i_01_i9)+(1))|0);
 var $161=(($regset_065+($160<<2))|0);
 var $162=HEAP32[(($161)>>2)];
 var $163=($162|0)>-1;
 if($163){var $i_01_i9=$160;var $151=$162;label=38;break;}else{label=42;break;}
 case 42: 
 HEAP32[(($regset_065)>>2)]=-1;
 var $status_2=$131;var $num_minimals_2=$num_minimals_1;var $minimal_tag_2=$minimal_tag_1;label=44;break;
 case 43: 
 var $165=(($69+20)|0);
 var $166=$165;
 HEAP32[(($166)>>2)]=1;
 var $status_2=0;var $num_minimals_2=$num_minimals_059;var $minimal_tag_2=$minimal_tag_050;label=44;break;
 case 44: 
 var $minimal_tag_2;
 var $num_minimals_2;
 var $status_2;
 HEAP32[(($regset_065)>>2)]=-1;
 var $168=((($num_tags_062)+(1))|0);
 var $169=((($next_tag_053)+(1))|0);
 var $status_7=$status_2;var $num_tags_3=$168;var $num_minimals_9=$num_minimals_2;var $tag_3=$next_tag_053;var $next_tag_4=$169;var $minimal_tag_9=$minimal_tag_2;var $direction_1=$direction_047;label=110;break;
 case 45: 
 var $171=(($69+4)|0);
 var $172=$171;
 var $173=HEAP32[(($172)>>2)];
 var $174=$173;
 var $175=HEAP32[(($174)>>2)];
 var $176=(($173+4)|0);
 var $177=$176;
 var $178=HEAP32[(($177)>>2)];
 var $179=_tre_stack_push($stack,$69);
 var $180=($179|0)==0;
 if($180){label=46;break;}else{var $status_7=$179;var $num_tags_3=$num_tags_062;var $num_minimals_9=$num_minimals_059;var $tag_3=$tag_056;var $next_tag_4=$next_tag_053;var $minimal_tag_9=$minimal_tag_050;var $direction_1=$direction_047;label=110;break;}
 case 46: 
 var $182=_tre_stack_push($stack,5);
 var $183=($182|0)==0;
 if($183){label=47;break;}else{var $status_7=$182;var $num_tags_3=$num_tags_062;var $num_minimals_9=$num_minimals_059;var $tag_3=$tag_056;var $next_tag_4=$next_tag_053;var $minimal_tag_9=$minimal_tag_050;var $direction_1=$direction_047;label=110;break;}
 case 47: 
 var $185=$178;
 var $186=_tre_stack_push($stack,$185);
 var $187=($186|0)==0;
 if($187){label=48;break;}else{var $status_7=$186;var $num_tags_3=$num_tags_062;var $num_minimals_9=$num_minimals_059;var $tag_3=$tag_056;var $next_tag_4=$next_tag_053;var $minimal_tag_9=$minimal_tag_050;var $direction_1=$direction_047;label=110;break;}
 case 48: 
 var $189=_tre_stack_push($stack,0);
 var $190=($189|0)==0;
 if($190){label=49;break;}else{var $status_7=$189;var $num_tags_3=$num_tags_062;var $num_minimals_9=$num_minimals_059;var $tag_3=$tag_056;var $next_tag_4=$next_tag_053;var $minimal_tag_9=$minimal_tag_050;var $direction_1=$direction_047;label=110;break;}
 case 49: 
 var $192=(($175+20)|0);
 var $193=HEAP32[(($192)>>2)];
 var $194=((($193)+($next_tag_053))|0);
 var $value_c_i11=$194;
 var $195=_tre_stack_push($stack,$value_c_i11);
 var $196=($195|0)==0;
 if($196){label=50;break;}else{var $status_7=$195;var $num_tags_3=$num_tags_062;var $num_minimals_9=$num_minimals_059;var $tag_3=$tag_056;var $next_tag_4=$next_tag_053;var $minimal_tag_9=$minimal_tag_050;var $direction_1=$direction_047;label=110;break;}
 case 50: 
 var $198=HEAP32[(($192)>>2)];
 var $199=($198|0)>0;
 if($199){label=51;break;}else{var $next_tag_1=$next_tag_053;var $reserved_tag_0=-1;label=52;break;}
 case 51: 
 var $201=(($178+20)|0);
 var $202=HEAP32[(($201)>>2)];
 var $203=($202|0)>0;
 var $204=($203&1);
 var $_next_tag_0=((($204)+($next_tag_053))|0);
 var $205=$next_tag_053;
 var $phitmp23=($203?$205:-1);
 var $next_tag_1=$_next_tag_0;var $reserved_tag_0=$phitmp23;label=52;break;
 case 52: 
 var $reserved_tag_0;
 var $next_tag_1;
 var $207=_tre_stack_push($stack,$reserved_tag_0);
 var $208=($207|0)==0;
 if($208){label=53;break;}else{var $status_7=$207;var $num_tags_3=$num_tags_062;var $num_minimals_9=$num_minimals_059;var $tag_3=$tag_056;var $next_tag_4=$next_tag_1;var $minimal_tag_9=$minimal_tag_050;var $direction_1=$direction_047;label=110;break;}
 case 53: 
 var $210=_tre_stack_push($stack,4);
 var $211=($210|0)==0;
 if($211){label=54;break;}else{var $status_7=$210;var $num_tags_3=$num_tags_062;var $num_minimals_9=$num_minimals_059;var $tag_3=$tag_056;var $next_tag_4=$next_tag_1;var $minimal_tag_9=$minimal_tag_050;var $direction_1=$direction_047;label=110;break;}
 case 54: 
 var $213=$175;
 var $214=_tre_stack_push($stack,$213);
 var $215=($214|0)==0;
 if($215){label=55;break;}else{var $status_7=$214;var $num_tags_3=$num_tags_062;var $num_minimals_9=$num_minimals_059;var $tag_3=$tag_056;var $next_tag_4=$next_tag_1;var $minimal_tag_9=$minimal_tag_050;var $direction_1=$direction_047;label=110;break;}
 case 55: 
 var $217=_tre_stack_push($stack,0);
 var $status_7=$217;var $num_tags_3=$num_tags_062;var $num_minimals_9=$num_minimals_059;var $tag_3=$tag_056;var $next_tag_4=$next_tag_1;var $minimal_tag_9=$minimal_tag_050;var $direction_1=$direction_047;label=110;break;
 case 56: 
 var $219=(($69+4)|0);
 var $220=$219;
 var $221=HEAP32[(($220)>>2)];
 if($_){label=57;break;}else{label=60;break;}
 case 57: 
 var $223=HEAP32[(($regset_065)>>2)];
 var $224=($223|0)>-1;
 if($224){var $230=1;label=59;break;}else{label=58;break;}
 case 58: 
 var $226=(($221+12)|0);
 var $227=HEAP8[($226)];
 var $228=$227&1;
 var $phitmp=($228&255);
 var $phitmp22=$phitmp;
 var $230=$phitmp22;label=59;break;
 case 59: 
 var $230;
 var $231=_tre_stack_push($stack,$230);
 var $232=($231|0)==0;
 if($232){label=62;break;}else{var $status_7=$231;var $num_tags_3=$num_tags_062;var $num_minimals_9=$num_minimals_059;var $tag_3=$tag_056;var $next_tag_4=$next_tag_053;var $minimal_tag_9=$minimal_tag_050;var $direction_1=$direction_047;label=110;break;}
 case 60: 
 var $value_c_i14=$tag_056;
 var $234=_tre_stack_push($stack,$value_c_i14);
 var $235=($234|0)==0;
 if($235){label=61;break;}else{var $status_7=$234;var $num_tags_3=$num_tags_062;var $num_minimals_9=$num_minimals_059;var $tag_3=$tag_056;var $next_tag_4=$next_tag_053;var $minimal_tag_9=$minimal_tag_050;var $direction_1=$direction_047;label=110;break;}
 case 61: 
 var $237=(($221+12)|0);
 var $238=HEAP8[($237)];
 var $239=$238&1;
 var $240=($239&255);
 var $value_c_i15=$240;
 var $241=_tre_stack_push($stack,$value_c_i15);
 var $242=($241|0)==0;
 if($242){label=62;break;}else{var $status_7=$241;var $num_tags_3=$num_tags_062;var $num_minimals_9=$num_minimals_059;var $tag_3=$tag_056;var $next_tag_4=$next_tag_053;var $minimal_tag_9=$minimal_tag_050;var $direction_1=$direction_047;label=110;break;}
 case 62: 
 var $244=_tre_stack_push($stack,$69);
 var $245=($244|0)==0;
 if($245){label=63;break;}else{var $status_7=$244;var $num_tags_3=$num_tags_062;var $num_minimals_9=$num_minimals_059;var $tag_3=$tag_056;var $next_tag_4=$next_tag_053;var $minimal_tag_9=$minimal_tag_050;var $direction_1=$direction_047;label=110;break;}
 case 63: 
 var $247=_tre_stack_push($stack,1);
 var $248=($247|0)==0;
 if($248){label=64;break;}else{var $status_7=$247;var $num_tags_3=$num_tags_062;var $num_minimals_9=$num_minimals_059;var $tag_3=$tag_056;var $next_tag_4=$next_tag_053;var $minimal_tag_9=$minimal_tag_050;var $direction_1=$direction_047;label=110;break;}
 case 64: 
 var $250=$221;
 var $251=HEAP32[(($250)>>2)];
 var $252=$251;
 var $253=_tre_stack_push($stack,$252);
 var $254=($253|0)==0;
 if($254){label=65;break;}else{var $status_7=$253;var $num_tags_3=$num_tags_062;var $num_minimals_9=$num_minimals_059;var $tag_3=$tag_056;var $next_tag_4=$next_tag_053;var $minimal_tag_9=$minimal_tag_050;var $direction_1=$direction_047;label=110;break;}
 case 65: 
 var $256=_tre_stack_push($stack,0);
 var $257=($256|0)==0;
 if($257){label=66;break;}else{var $status_7=$256;var $num_tags_3=$num_tags_062;var $num_minimals_9=$num_minimals_059;var $tag_3=$tag_056;var $next_tag_4=$next_tag_053;var $minimal_tag_9=$minimal_tag_050;var $direction_1=$direction_047;label=110;break;}
 case 66: 
 var $259=HEAP32[(($regset_065)>>2)];
 var $260=($259|0)>-1;
 if($260){label=68;break;}else{label=67;break;}
 case 67: 
 var $262=(($221+12)|0);
 var $263=HEAP8[($262)];
 var $264=$263&1;
 var $265=(($264<<24)>>24)==0;
 if($265){var $status_7=0;var $num_tags_3=$num_tags_062;var $num_minimals_9=$num_minimals_059;var $tag_3=$tag_056;var $next_tag_4=$next_tag_053;var $minimal_tag_9=$minimal_tag_050;var $direction_1=0;label=110;break;}else{label=68;break;}
 case 68: 
 if($_){var $status_3=0;var $num_minimals_4=$num_minimals_059;var $minimal_tag_4=$minimal_tag_050;label=80;break;}else{label=69;break;}
 case 69: 
 var $268=_tre_add_tag_left($mem,$70,$tag_056);
 var $269=(($221+12)|0);
 var $270=HEAP8[($269)];
 var $271=$270&1;
 var $272=(($271<<24)>>24)==0;
 var $273=HEAP32[(($33)>>2)];
 var $274=(($273+($tag_056<<2))|0);
 var $direction_0_=($272?$direction_047:1);
 HEAP32[(($274)>>2)]=$direction_0_;
 var $275=($minimal_tag_050|0)>-1;
 if($275){label=70;break;}else{var $num_minimals_3=$num_minimals_059;var $minimal_tag_3=$minimal_tag_050;label=73;break;}
 case 70: 
 var $276=HEAP32[(($35)>>2)];
 var $i5_0=0;label=71;break;
 case 71: 
 var $i5_0;
 var $278=(($276+($i5_0<<2))|0);
 var $279=HEAP32[(($278)>>2)];
 var $280=($279|0)>-1;
 var $281=((($i5_0)+(1))|0);
 if($280){var $i5_0=$281;label=71;break;}else{label=72;break;}
 case 72: 
 HEAP32[(($278)>>2)]=$tag_056;
 var $283=(($276+($281<<2))|0);
 HEAP32[(($283)>>2)]=$minimal_tag_050;
 var $284=((($i5_0)+(2))|0);
 var $285=(($276+($284<<2))|0);
 HEAP32[(($285)>>2)]=-1;
 var $286=((($num_minimals_059)+(1))|0);
 var $num_minimals_3=$286;var $minimal_tag_3=-1;label=73;break;
 case 73: 
 var $minimal_tag_3;
 var $num_minimals_3;
 var $288=HEAP32[(($regset_065)>>2)];
 var $289=($288|0)>-1;
 if($289){label=74;break;}else{label=79;break;}
 case 74: 
 var $290=HEAP32[(($34)>>2)];
 var $i_01_i17=0;var $292=$288;label=75;break;
 case 75: 
 var $292;
 var $i_01_i17;
 var $293=(((($292|0))/(2))&-1);
 var $294=$292&1;
 var $295=($294|0)==0;
 if($295){label=76;break;}else{label=77;break;}
 case 76: 
 var $297=(($290+((($293)*(12))&-1))|0);
 HEAP32[(($297)>>2)]=$tag_056;
 label=78;break;
 case 77: 
 var $299=(($290+((($293)*(12))&-1)+4)|0);
 HEAP32[(($299)>>2)]=$tag_056;
 label=78;break;
 case 78: 
 var $301=((($i_01_i17)+(1))|0);
 var $302=(($regset_065+($301<<2))|0);
 var $303=HEAP32[(($302)>>2)];
 var $304=($303|0)>-1;
 if($304){var $i_01_i17=$301;var $292=$303;label=75;break;}else{label=79;break;}
 case 79: 
 HEAP32[(($regset_065)>>2)]=-1;
 var $status_3=$268;var $num_minimals_4=$num_minimals_3;var $minimal_tag_4=$minimal_tag_3;label=80;break;
 case 80: 
 var $minimal_tag_4;
 var $num_minimals_4;
 var $status_3;
 HEAP32[(($regset_065)>>2)]=-1;
 var $306=((($num_tags_062)+(1))|0);
 var $307=((($next_tag_053)+(1))|0);
 var $status_7=$status_3;var $num_tags_3=$306;var $num_minimals_9=$num_minimals_4;var $tag_3=$next_tag_053;var $next_tag_4=$307;var $minimal_tag_9=$minimal_tag_4;var $direction_1=0;label=110;break;
 case 81: 
 var $309=(($69+4)|0);
 var $310=$309;
 var $311=HEAP32[(($310)>>2)];
 var $312=$311;
 var $313=HEAP32[(($312)>>2)];
 var $314=(($311+4)|0);
 var $315=$314;
 var $316=HEAP32[(($315)>>2)];
 var $317=HEAP32[(($regset_065)>>2)];
 var $318=($317|0)>-1;
 var $319=((($next_tag_053)+(1))|0);
 var $right_tag_0=($318?$319:$next_tag_053);
 var $value_c_i19=$right_tag_0;
 var $320=_tre_stack_push($stack,$value_c_i19);
 var $321=($320|0)==0;
 if($321){label=82;break;}else{var $status_7=$320;var $num_tags_3=$num_tags_062;var $num_minimals_9=$num_minimals_059;var $tag_3=$tag_056;var $next_tag_4=$next_tag_053;var $minimal_tag_9=$minimal_tag_050;var $direction_1=$direction_047;label=110;break;}
 case 82: 
 var $left_tag_0=($318?$next_tag_053:$tag_056);
 var $value_c_i20=$left_tag_0;
 var $323=_tre_stack_push($stack,$value_c_i20);
 var $324=($323|0)==0;
 if($324){label=83;break;}else{var $status_7=$323;var $num_tags_3=$num_tags_062;var $num_minimals_9=$num_minimals_059;var $tag_3=$tag_056;var $next_tag_4=$next_tag_053;var $minimal_tag_9=$minimal_tag_050;var $direction_1=$direction_047;label=110;break;}
 case 83: 
 var $326=$regset_065;
 var $327=_tre_stack_push($stack,$326);
 var $328=($327|0)==0;
 if($328){label=84;break;}else{var $status_7=$327;var $num_tags_3=$num_tags_062;var $num_minimals_9=$num_minimals_059;var $tag_3=$tag_056;var $next_tag_4=$next_tag_053;var $minimal_tag_9=$minimal_tag_050;var $direction_1=$direction_047;label=110;break;}
 case 84: 
 var $330=HEAP32[(($regset_065)>>2)];
 var $_lobit=$330>>>31;
 var $_lobit_not=$_lobit^1;
 var $value_c_i21=$_lobit_not;
 var $331=_tre_stack_push($stack,$value_c_i21);
 var $332=($331|0)==0;
 if($332){label=85;break;}else{var $status_7=$331;var $num_tags_3=$num_tags_062;var $num_minimals_9=$num_minimals_059;var $tag_3=$tag_056;var $next_tag_4=$next_tag_053;var $minimal_tag_9=$minimal_tag_050;var $direction_1=$direction_047;label=110;break;}
 case 85: 
 var $334=_tre_stack_push($stack,$69);
 var $335=($334|0)==0;
 if($335){label=86;break;}else{var $status_7=$334;var $num_tags_3=$num_tags_062;var $num_minimals_9=$num_minimals_059;var $tag_3=$tag_056;var $next_tag_4=$next_tag_053;var $minimal_tag_9=$minimal_tag_050;var $direction_1=$direction_047;label=110;break;}
 case 86: 
 var $337=$316;
 var $338=_tre_stack_push($stack,$337);
 var $339=($338|0)==0;
 if($339){label=87;break;}else{var $status_7=$338;var $num_tags_3=$num_tags_062;var $num_minimals_9=$num_minimals_059;var $tag_3=$tag_056;var $next_tag_4=$next_tag_053;var $minimal_tag_9=$minimal_tag_050;var $direction_1=$direction_047;label=110;break;}
 case 87: 
 var $341=$313;
 var $342=_tre_stack_push($stack,$341);
 var $343=($342|0)==0;
 if($343){label=88;break;}else{var $status_7=$342;var $num_tags_3=$num_tags_062;var $num_minimals_9=$num_minimals_059;var $tag_3=$tag_056;var $next_tag_4=$next_tag_053;var $minimal_tag_9=$minimal_tag_050;var $direction_1=$direction_047;label=110;break;}
 case 88: 
 var $345=_tre_stack_push($stack,3);
 var $346=($345|0)==0;
 if($346){label=89;break;}else{var $status_7=$345;var $num_tags_3=$num_tags_062;var $num_minimals_9=$num_minimals_059;var $tag_3=$tag_056;var $next_tag_4=$next_tag_053;var $minimal_tag_9=$minimal_tag_050;var $direction_1=$direction_047;label=110;break;}
 case 89: 
 var $348=_tre_stack_push($stack,$337);
 var $349=($348|0)==0;
 if($349){label=90;break;}else{var $status_7=$348;var $num_tags_3=$num_tags_062;var $num_minimals_9=$num_minimals_059;var $tag_3=$tag_056;var $next_tag_4=$next_tag_053;var $minimal_tag_9=$minimal_tag_050;var $direction_1=$direction_047;label=110;break;}
 case 90: 
 var $351=_tre_stack_push($stack,0);
 var $352=($351|0)==0;
 if($352){label=91;break;}else{var $status_7=$351;var $num_tags_3=$num_tags_062;var $num_minimals_9=$num_minimals_059;var $tag_3=$tag_056;var $next_tag_4=$next_tag_053;var $minimal_tag_9=$minimal_tag_050;var $direction_1=$direction_047;label=110;break;}
 case 91: 
 var $354=_tre_stack_push($stack,2);
 var $355=($354|0)==0;
 if($355){label=92;break;}else{var $status_7=$354;var $num_tags_3=$num_tags_062;var $num_minimals_9=$num_minimals_059;var $tag_3=$tag_056;var $next_tag_4=$next_tag_053;var $minimal_tag_9=$minimal_tag_050;var $direction_1=$direction_047;label=110;break;}
 case 92: 
 var $357=_tre_stack_push($stack,$341);
 var $358=($357|0)==0;
 if($358){label=93;break;}else{var $status_7=$357;var $num_tags_3=$num_tags_062;var $num_minimals_9=$num_minimals_059;var $tag_3=$tag_056;var $next_tag_4=$next_tag_053;var $minimal_tag_9=$minimal_tag_050;var $direction_1=$direction_047;label=110;break;}
 case 93: 
 var $360=_tre_stack_push($stack,0);
 var $361=($360|0)==0;
 if($361){label=94;break;}else{var $status_7=$360;var $num_tags_3=$num_tags_062;var $num_minimals_9=$num_minimals_059;var $tag_3=$tag_056;var $next_tag_4=$next_tag_053;var $minimal_tag_9=$minimal_tag_050;var $direction_1=$direction_047;label=110;break;}
 case 94: 
 var $363=HEAP32[(($regset_065)>>2)];
 var $364=($363|0)>-1;
 if($364){label=95;break;}else{var $status_6=0;var $num_tags_2=$num_tags_062;var $num_minimals_8=$num_minimals_059;var $tag_2=$tag_056;var $next_tag_3=$next_tag_053;var $minimal_tag_8=$minimal_tag_050;label=108;break;}
 case 95: 
 if($_){var $status_5=0;var $num_minimals_7=$num_minimals_059;var $minimal_tag_7=$minimal_tag_050;label=107;break;}else{label=96;break;}
 case 96: 
 var $367=_tre_add_tag_left($mem,$70,$tag_056);
 var $368=HEAP32[(($33)>>2)];
 var $369=(($368+($tag_056<<2))|0);
 HEAP32[(($369)>>2)]=$direction_047;
 var $370=($minimal_tag_050|0)>-1;
 if($370){label=97;break;}else{var $num_minimals_6=$num_minimals_059;var $minimal_tag_6=$minimal_tag_050;label=100;break;}
 case 97: 
 var $371=HEAP32[(($35)>>2)];
 var $i8_0=0;label=98;break;
 case 98: 
 var $i8_0;
 var $373=(($371+($i8_0<<2))|0);
 var $374=HEAP32[(($373)>>2)];
 var $375=($374|0)>-1;
 var $376=((($i8_0)+(1))|0);
 if($375){var $i8_0=$376;label=98;break;}else{label=99;break;}
 case 99: 
 HEAP32[(($373)>>2)]=$tag_056;
 var $378=(($371+($376<<2))|0);
 HEAP32[(($378)>>2)]=$minimal_tag_050;
 var $379=((($i8_0)+(2))|0);
 var $380=(($371+($379<<2))|0);
 HEAP32[(($380)>>2)]=-1;
 var $381=((($num_minimals_059)+(1))|0);
 var $num_minimals_6=$381;var $minimal_tag_6=-1;label=100;break;
 case 100: 
 var $minimal_tag_6;
 var $num_minimals_6;
 var $383=HEAP32[(($regset_065)>>2)];
 var $384=($383|0)>-1;
 if($384){label=101;break;}else{label=106;break;}
 case 101: 
 var $385=HEAP32[(($34)>>2)];
 var $i_01_i6=0;var $387=$383;label=102;break;
 case 102: 
 var $387;
 var $i_01_i6;
 var $388=(((($387|0))/(2))&-1);
 var $389=$387&1;
 var $390=($389|0)==0;
 if($390){label=103;break;}else{label=104;break;}
 case 103: 
 var $392=(($385+((($388)*(12))&-1))|0);
 HEAP32[(($392)>>2)]=$tag_056;
 label=105;break;
 case 104: 
 var $394=(($385+((($388)*(12))&-1)+4)|0);
 HEAP32[(($394)>>2)]=$tag_056;
 label=105;break;
 case 105: 
 var $396=((($i_01_i6)+(1))|0);
 var $397=(($regset_065+($396<<2))|0);
 var $398=HEAP32[(($397)>>2)];
 var $399=($398|0)>-1;
 if($399){var $i_01_i6=$396;var $387=$398;label=102;break;}else{label=106;break;}
 case 106: 
 HEAP32[(($regset_065)>>2)]=-1;
 var $status_5=$367;var $num_minimals_7=$num_minimals_6;var $minimal_tag_7=$minimal_tag_6;label=107;break;
 case 107: 
 var $minimal_tag_7;
 var $num_minimals_7;
 var $status_5;
 HEAP32[(($regset_065)>>2)]=-1;
 var $401=((($num_tags_062)+(1))|0);
 var $status_6=$status_5;var $num_tags_2=$401;var $num_minimals_8=$num_minimals_7;var $tag_2=$next_tag_053;var $next_tag_3=$319;var $minimal_tag_8=$minimal_tag_7;label=108;break;
 case 108: 
 var $minimal_tag_8;
 var $next_tag_3;
 var $tag_2;
 var $num_minimals_8;
 var $num_tags_2;
 var $status_6;
 var $403=(($69+16)|0);
 var $404=$403;
 var $405=HEAP32[(($404)>>2)];
 var $406=($405|0)>0;
 if($406){label=109;break;}else{var $status_7=$status_6;var $num_tags_3=$num_tags_2;var $num_minimals_9=$num_minimals_8;var $tag_3=$tag_2;var $next_tag_4=$next_tag_3;var $minimal_tag_9=$minimal_tag_8;var $direction_1=$direction_047;label=110;break;}
 case 109: 
 var $408=((($next_tag_3)+(1))|0);
 var $409=((($next_tag_3)+(2))|0);
 var $status_7=$status_6;var $num_tags_3=$num_tags_2;var $num_minimals_9=$num_minimals_8;var $tag_3=$408;var $next_tag_4=$409;var $minimal_tag_9=$minimal_tag_8;var $direction_1=$direction_047;label=110;break;
 case 110: 
 var $direction_1;
 var $minimal_tag_9;
 var $next_tag_4;
 var $tag_3;
 var $num_minimals_9;
 var $num_tags_3;
 var $status_7;
 var $410=HEAP32[(($72)>>2)];
 var $411=($410|0)>-1;
 if($411){var $i9_0=0;label=111;break;}else{var $status_0_be=$status_7;var $regset_0_be=$regset_065;var $num_tags_0_be=$num_tags_3;var $num_minimals_0_be=$num_minimals_9;var $tag_0_be=$tag_3;var $next_tag_0_be=$next_tag_4;var $minimal_tag_0_be=$minimal_tag_9;var $direction_0_be=$direction_1;label=11;break;}
 case 111: 
 var $i9_0;
 var $412=(($19+($i9_0<<2))|0);
 var $413=HEAP32[(($412)>>2)];
 var $414=($413|0)>-1;
 var $415=((($i9_0)+(1))|0);
 if($414){var $i9_0=$415;label=111;break;}else{label=112;break;}
 case 112: 
 HEAP32[(($412)>>2)]=$410;
 var $417=(($19+($415<<2))|0);
 HEAP32[(($417)>>2)]=-1;
 var $status_0_be=$status_7;var $regset_0_be=$regset_065;var $num_tags_0_be=$num_tags_3;var $num_minimals_0_be=$num_minimals_9;var $tag_0_be=$tag_3;var $next_tag_0_be=$next_tag_4;var $minimal_tag_0_be=$minimal_tag_9;var $direction_0_be=$direction_1;label=11;break;
 case 113: 
 var $419=((($36)-(2))|0);
 HEAP32[(($stack_idx4)>>2)]=$419;
 var $420=(($38+($419<<2))|0);
 var $421=HEAP32[(($420)>>2)];
 if($_){label=114;break;}else{label=115;break;}
 case 114: 
 var $422=(($421+4)|0);
 var $423=$422;
 var $424=HEAP32[(($423)>>2)];
 var $425=$424;
 var $426=HEAP32[(($425)>>2)];
 var $427=(($426+20)|0);
 var $428=HEAP32[(($427)>>2)];
 var $429=((($36)-(3))|0);
 HEAP32[(($stack_idx4)>>2)]=$429;
 var $430=(($38+($429<<2))|0);
 var $431=$430;
 var $432=HEAP32[(($431)>>2)];
 var $433=((($432)+($428))|0);
 var $434=(($421+20)|0);
 var $435=$434;
 HEAP32[(($435)>>2)]=$433;
 var $status_0_be=0;var $regset_0_be=$regset_065;var $num_tags_0_be=$num_tags_062;var $num_minimals_0_be=$num_minimals_059;var $tag_0_be=$tag_056;var $next_tag_0_be=$next_tag_053;var $minimal_tag_0_be=-1;var $direction_0_be=$direction_047;label=11;break;
 case 115: 
 var $437=((($36)-(3))|0);
 HEAP32[(($stack_idx4)>>2)]=$437;
 var $438=(($38+($437<<2))|0);
 var $439=$438;
 var $440=HEAP32[(($439)>>2)];
 var $441=((($36)-(4))|0);
 HEAP32[(($stack_idx4)>>2)]=$441;
 var $442=(($38+($441<<2))|0);
 var $443=$442;
 var $444=HEAP32[(($443)>>2)];
 var $445=($440|0)==0;
 var $minimal_tag_0_=($445?$minimal_tag_050:$444);
 var $_2=($445&1);
 var $status_0_be=0;var $regset_0_be=$regset_065;var $num_tags_0_be=$num_tags_062;var $num_minimals_0_be=$num_minimals_059;var $tag_0_be=$tag_056;var $next_tag_0_be=$next_tag_053;var $minimal_tag_0_be=$minimal_tag_0_;var $direction_0_be=$_2;label=11;break;
 case 116: 
 var $447=((($36)-(2))|0);
 HEAP32[(($stack_idx4)>>2)]=$447;
 var $448=(($38+($447<<2))|0);
 var $449=$448;
 var $450=HEAP32[(($449)>>2)];
 var $451=((($36)-(3))|0);
 HEAP32[(($stack_idx4)>>2)]=$451;
 var $452=(($38+($451<<2))|0);
 var $453=$452;
 var $454=HEAP32[(($453)>>2)];
 var $455=($450|0)>-1;
 var $_tag_0=($455?$450:$tag_056);
 var $status_0_be=0;var $regset_0_be=$regset_065;var $num_tags_0_be=$num_tags_062;var $num_minimals_0_be=$num_minimals_059;var $tag_0_be=$_tag_0;var $next_tag_0_be=$454;var $minimal_tag_0_be=$minimal_tag_050;var $direction_0_be=$direction_047;label=11;break;
 case 117: 
 var $457=((($36)-(2))|0);
 HEAP32[(($stack_idx4)>>2)]=$457;
 var $458=(($38+($457<<2))|0);
 var $459=HEAP32[(($458)>>2)];
 if($_){label=118;break;}else{var $status_0_be=0;var $regset_0_be=$regset_065;var $num_tags_0_be=$num_tags_062;var $num_minimals_0_be=$num_minimals_059;var $tag_0_be=$tag_056;var $next_tag_0_be=$next_tag_053;var $minimal_tag_0_be=$minimal_tag_050;var $direction_0_be=$direction_047;label=11;break;}
 case 118: 
 var $461=(($459+4)|0);
 var $462=$461;
 var $463=HEAP32[(($462)>>2)];
 var $464=$463;
 var $465=HEAP32[(($464)>>2)];
 var $466=(($465+20)|0);
 var $467=HEAP32[(($466)>>2)];
 var $468=(($463+4)|0);
 var $469=$468;
 var $470=HEAP32[(($469)>>2)];
 var $471=(($470+20)|0);
 var $472=HEAP32[(($471)>>2)];
 var $473=((($472)+($467))|0);
 var $474=(($459+20)|0);
 var $475=$474;
 HEAP32[(($475)>>2)]=$473;
 var $status_0_be=0;var $regset_0_be=$regset_065;var $num_tags_0_be=$num_tags_062;var $num_minimals_0_be=$num_minimals_059;var $tag_0_be=$tag_056;var $next_tag_0_be=$next_tag_053;var $minimal_tag_0_be=$minimal_tag_050;var $direction_0_be=$direction_047;label=11;break;
 case 119: 
 var $regset_1;
 var $476=HEAP32[(($regset_1)>>2)];
 var $477=($476|0)>-1;
 var $478=(($regset_1+4)|0);
 if($477){var $regset_1=$478;label=119;break;}else{var $status_0_be=0;var $regset_0_be=$regset_1;var $num_tags_0_be=$num_tags_062;var $num_minimals_0_be=$num_minimals_059;var $tag_0_be=$tag_056;var $next_tag_0_be=$next_tag_053;var $minimal_tag_0_be=$minimal_tag_050;var $direction_0_be=$direction_047;label=11;break;}
 case 120: 
 var $480=((($36)-(2))|0);
 var $481=(($38+($480<<2))|0);
 var $482=HEAP32[(($481)>>2)];
 var $483=$482;
 var $484=((($36)-(3))|0);
 var $485=(($38+($484<<2))|0);
 var $486=HEAP32[(($485)>>2)];
 var $487=$486;
 var $488=((($36)-(4))|0);
 var $489=(($38+($488<<2))|0);
 var $490=HEAP32[(($489)>>2)];
 var $491=((($36)-(5))|0);
 HEAP32[(($stack_idx4)>>2)]=$491;
 if($_){label=122;break;}else{label=121;break;}
 case 121: 
 var $_pre123=(($490+16)|0);
 var $_pre124=$_pre123;
 var $519=$491;var $_pre_phi125=$_pre124;label=123;break;
 case 122: 
 var $493=(($38+($491<<2))|0);
 var $494=$493;
 var $495=HEAP32[(($494)>>2)];
 var $496=(($490+4)|0);
 var $497=$496;
 var $498=HEAP32[(($497)>>2)];
 var $499=$498;
 var $500=HEAP32[(($499)>>2)];
 var $501=(($500+20)|0);
 var $502=HEAP32[(($501)>>2)];
 var $503=(($498+4)|0);
 var $504=$503;
 var $505=HEAP32[(($504)>>2)];
 var $506=(($505+20)|0);
 var $507=HEAP32[(($506)>>2)];
 var $508=(($490+16)|0);
 var $509=$508;
 var $510=HEAP32[(($509)>>2)];
 var $511=($510|0)>0;
 var $512=($511?2:0);
 var $513=((($502)+($495))|0);
 var $514=((($513)+($507))|0);
 var $515=((($514)+($512))|0);
 var $516=(($490+20)|0);
 var $517=$516;
 HEAP32[(($517)>>2)]=$515;
 var $_pre=HEAP32[(($stack_idx4)>>2)];
 var $519=$_pre;var $_pre_phi125=$509;label=123;break;
 case 123: 
 var $_pre_phi125;
 var $519;
 var $520=((($519)-(1))|0);
 var $521=(($38+($520<<2))|0);
 var $522=HEAP32[(($521)>>2)];
 var $523=$522;
 var $524=((($519)-(2))|0);
 HEAP32[(($stack_idx4)>>2)]=$524;
 var $525=(($38+($524<<2))|0);
 var $526=$525;
 var $527=HEAP32[(($526)>>2)];
 var $528=((($519)-(3))|0);
 HEAP32[(($stack_idx4)>>2)]=$528;
 var $529=(($38+($528<<2))|0);
 var $530=$529;
 var $531=HEAP32[(($530)>>2)];
 var $532=HEAP32[(($_pre_phi125)>>2)];
 var $533=($532|0)>0;
 if($533){label=124;break;}else{var $status_0_be=0;var $regset_0_be=$523;var $num_tags_0_be=$num_tags_062;var $num_minimals_0_be=$num_minimals_059;var $tag_0_be=$tag_056;var $next_tag_0_be=$next_tag_053;var $minimal_tag_0_be=$minimal_tag_050;var $direction_0_be=1;label=11;break;}
 case 124: 
 if($_){var $status_8=0;label=126;break;}else{label=125;break;}
 case 125: 
 var $536=_tre_add_tag_right($mem,$483,$527);
 var $537=HEAP32[(($33)>>2)];
 var $538=(($537+($527<<2))|0);
 HEAP32[(($538)>>2)]=1;
 var $539=_tre_add_tag_right($mem,$487,$531);
 var $540=HEAP32[(($33)>>2)];
 var $541=(($540+($531<<2))|0);
 HEAP32[(($541)>>2)]=1;
 var $status_8=$539;label=126;break;
 case 126: 
 var $status_8;
 var $543=((($num_tags_062)+(2))|0);
 var $status_0_be=$status_8;var $regset_0_be=$523;var $num_tags_0_be=$543;var $num_minimals_0_be=$num_minimals_059;var $tag_0_be=$tag_056;var $next_tag_0_be=$next_tag_053;var $minimal_tag_0_be=$minimal_tag_050;var $direction_0_be=1;label=11;break;
 case 127: 
 var $status_0_lcssa;
 var $regset_0_lcssa;
 var $num_tags_0_lcssa;
 var $num_minimals_0_lcssa;
 var $tag_0_lcssa;
 var $minimal_tag_0_lcssa;
 if($_){var $num_minimals_10=$num_minimals_0_lcssa;label=138;break;}else{label=128;break;}
 case 128: 
 var $545=HEAP32[(($regset_0_lcssa)>>2)];
 var $546=($545|0)>-1;
 if($546){label=129;break;}else{label=134;break;}
 case 129: 
 var $547=(($tnfa+16)|0);
 var $548=HEAP32[(($547)>>2)];
 var $i_01_i=0;var $550=$545;label=130;break;
 case 130: 
 var $550;
 var $i_01_i;
 var $551=(((($550|0))/(2))&-1);
 var $552=$550&1;
 var $553=($552|0)==0;
 if($553){label=131;break;}else{label=132;break;}
 case 131: 
 var $555=(($548+((($551)*(12))&-1))|0);
 HEAP32[(($555)>>2)]=$tag_0_lcssa;
 label=133;break;
 case 132: 
 var $557=(($548+((($551)*(12))&-1)+4)|0);
 HEAP32[(($557)>>2)]=$tag_0_lcssa;
 label=133;break;
 case 133: 
 var $559=((($i_01_i)+(1))|0);
 var $560=(($regset_0_lcssa+($559<<2))|0);
 var $561=HEAP32[(($560)>>2)];
 var $562=($561|0)>-1;
 if($562){var $i_01_i=$559;var $550=$561;label=130;break;}else{label=134;break;}
 case 134: 
 HEAP32[(($regset_0_lcssa)>>2)]=-1;
 var $563=($minimal_tag_0_lcssa|0)>-1;
 if($563){label=135;break;}else{var $num_minimals_10=$num_minimals_0_lcssa;label=138;break;}
 case 135: 
 var $564=(($tnfa+36)|0);
 var $565=HEAP32[(($564)>>2)];
 var $i12_0=0;label=136;break;
 case 136: 
 var $i12_0;
 var $567=(($565+($i12_0<<2))|0);
 var $568=HEAP32[(($567)>>2)];
 var $569=($568|0)>-1;
 var $570=((($i12_0)+(1))|0);
 if($569){var $i12_0=$570;label=136;break;}else{label=137;break;}
 case 137: 
 HEAP32[(($567)>>2)]=$tag_0_lcssa;
 var $572=(($565+($570<<2))|0);
 HEAP32[(($572)>>2)]=$minimal_tag_0_lcssa;
 var $573=((($i12_0)+(2))|0);
 var $574=(($565+($573<<2))|0);
 HEAP32[(($574)>>2)]=-1;
 var $575=((($num_minimals_0_lcssa)+(1))|0);
 var $num_minimals_10=$575;label=138;break;
 case 138: 
 var $num_minimals_10;
 var $576=(($tnfa+48)|0);
 HEAP32[(($576)>>2)]=$num_tags_0_lcssa;
 var $577=(($tnfa+40)|0);
 HEAP32[(($577)>>2)]=$num_tags_0_lcssa;
 var $578=(($tnfa+44)|0);
 HEAP32[(($578)>>2)]=$num_minimals_10;
 _free($12);
 _free($18);
 var $_0=$status_0_lcssa;label=139;break;
 case 139: 
 var $_0;
 return $_0;
  default: assert(0, "bad label: " + label);
 }

}


function _tre_ast_to_tnfa($node,$transitions,$counts,$offs){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $node_tr=$node;label=2;break;
 case 2: 
 var $node_tr;
 var $1=(($node_tr)|0);
 var $2=HEAP32[(($1)>>2)];
 if(($2|0)==3){ label=3;break;}else if(($2|0)==1){ label=5;break;}else if(($2|0)==2){ label=7;break;}else{var $_0=0;label=10;break;}
 case 3: 
 var $4=(($node_tr+4)|0);
 var $5=HEAP32[(($4)>>2)];
 var $6=$5;
 var $7=HEAP32[(($6)>>2)];
 var $8=_tre_ast_to_tnfa($7,$transitions,$counts,$offs);
 var $9=($8|0)==0;
 if($9){label=4;break;}else{var $_0=$8;label=10;break;}
 case 4: 
 var $11=(($5+4)|0);
 var $12=$11;
 var $node_tr_be_in=$12;label=9;break;
 case 5: 
 var $14=(($node_tr+4)|0);
 var $15=HEAP32[(($14)>>2)];
 var $16=$15;
 var $17=HEAP32[(($16)>>2)];
 var $18=(($17+28)|0);
 var $19=HEAP32[(($18)>>2)];
 var $20=(($15+4)|0);
 var $21=$20;
 var $22=HEAP32[(($21)>>2)];
 var $23=(($22+24)|0);
 var $24=HEAP32[(($23)>>2)];
 var $25=_tre_make_trans($19,$24,$transitions,$counts,$offs);
 var $26=($25|0)==0;
 if($26){label=6;break;}else{var $_0=$25;label=10;break;}
 case 6: 
 var $28=HEAP32[(($16)>>2)];
 var $29=_tre_ast_to_tnfa($28,$transitions,$counts,$offs);
 var $30=($29|0)==0;
 if($30){var $node_tr_be_in=$21;label=9;break;}else{var $_0=$29;label=10;break;}
 case 7: 
 var $32=(($node_tr+4)|0);
 var $33=HEAP32[(($32)>>2)];
 var $34=(($33+8)|0);
 var $35=$34;
 var $36=HEAP32[(($35)>>2)];
 var $37=($36|0)==-1;
 var $38=$33;
 if($37){label=8;break;}else{var $node_tr_be_in=$38;label=9;break;}
 case 8: 
 var $40=HEAP32[(($38)>>2)];
 var $41=(($40+28)|0);
 var $42=HEAP32[(($41)>>2)];
 var $43=(($40+24)|0);
 var $44=HEAP32[(($43)>>2)];
 var $45=_tre_make_trans($42,$44,$transitions,$counts,$offs);
 var $46=($45|0)==0;
 if($46){var $node_tr_be_in=$38;label=9;break;}else{var $_0=$45;label=10;break;}
 case 9: 
 var $node_tr_be_in;
 var $node_tr_be=HEAP32[(($node_tr_be_in)>>2)];
 var $node_tr=$node_tr_be;label=2;break;
 case 10: 
 var $_0;
 return $_0;
  default: assert(0, "bad label: " + label);
 }

}


function _regfree($preg){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($preg+4)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=($2|0)==0;
 if($3){label=31;break;}else{label=2;break;}
 case 2: 
 var $4=(($2+4)|0);
 var $5=$4;
 var $6=HEAP32[(($5)>>2)];
 var $7=($6|0)==0;
 var $8=$2;
 var $9=HEAP32[(($8)>>2)];
 if($7){var $_lcssa7=$9;label=9;break;}else{var $i_08=0;var $10=$9;label=3;break;}
 case 3: 
 var $10;
 var $i_08;
 var $11=(($10+($i_08<<5)+8)|0);
 var $12=HEAP32[(($11)>>2)];
 var $13=($12|0)==0;
 if($13){var $27=$10;label=8;break;}else{label=4;break;}
 case 4: 
 var $15=(($10+($i_08<<5)+16)|0);
 var $16=HEAP32[(($15)>>2)];
 var $17=($16|0)==0;
 if($17){var $21=$10;label=6;break;}else{label=5;break;}
 case 5: 
 var $19=$16;
 _free($19);
 var $_pre18=HEAP32[(($8)>>2)];
 var $21=$_pre18;label=6;break;
 case 6: 
 var $21;
 var $22=(($21+($i_08<<5)+28)|0);
 var $23=HEAP32[(($22)>>2)];
 var $24=($23|0)==0;
 if($24){var $27=$21;label=8;break;}else{label=7;break;}
 case 7: 
 var $26=$23;
 _free($26);
 var $_pre17=HEAP32[(($8)>>2)];
 var $27=$_pre17;label=8;break;
 case 8: 
 var $27;
 var $28=((($i_08)+(1))|0);
 var $29=HEAP32[(($5)>>2)];
 var $30=($28>>>0)<($29>>>0);
 if($30){var $i_08=$28;var $10=$27;label=3;break;}else{var $_lcssa7=$27;label=9;break;}
 case 9: 
 var $_lcssa7;
 var $31=($_lcssa7|0)==0;
 if($31){label=11;break;}else{label=10;break;}
 case 10: 
 var $33=$_lcssa7;
 _free($33);
 label=11;break;
 case 11: 
 var $35=(($2+8)|0);
 var $36=$35;
 var $37=HEAP32[(($36)>>2)];
 var $38=($37|0)==0;
 if($38){label=18;break;}else{label=12;break;}
 case 12: 
 var $39=(($37+8)|0);
 var $40=HEAP32[(($39)>>2)];
 var $41=($40|0)==0;
 if($41){var $53=$37;label=17;break;}else{var $trans_03=$37;label=13;break;}
 case 13: 
 var $trans_03;
 var $42=(($trans_03+16)|0);
 var $43=HEAP32[(($42)>>2)];
 var $44=($43|0)==0;
 if($44){label=15;break;}else{label=14;break;}
 case 14: 
 var $46=$43;
 _free($46);
 label=15;break;
 case 15: 
 var $48=(($trans_03+32)|0);
 var $49=(($trans_03+40)|0);
 var $50=HEAP32[(($49)>>2)];
 var $51=($50|0)==0;
 if($51){label=16;break;}else{var $trans_03=$48;label=13;break;}
 case 16: 
 var $_pre16=HEAP32[(($36)>>2)];
 var $53=$_pre16;label=17;break;
 case 17: 
 var $53;
 var $54=$53;
 _free($54);
 label=18;break;
 case 18: 
 var $56=(($2+16)|0);
 var $57=$56;
 var $58=HEAP32[(($57)>>2)];
 var $59=($58|0)==0;
 if($59){label=24;break;}else{label=19;break;}
 case 19: 
 var $60=(($2+28)|0);
 var $61=$60;
 var $62=HEAP32[(($61)>>2)];
 var $63=($62|0)==0;
 if($63){var $_lcssa=$58;label=23;break;}else{var $i_11=0;var $65=$58;var $64=$62;label=20;break;}
 case 20: 
 var $64;
 var $65;
 var $i_11;
 var $66=(($65+((($i_11)*(12))&-1)+8)|0);
 var $67=HEAP32[(($66)>>2)];
 var $68=($67|0)==0;
 if($68){var $73=$64;var $72=$65;label=22;break;}else{label=21;break;}
 case 21: 
 var $70=$67;
 _free($70);
 var $_pre=HEAP32[(($61)>>2)];
 var $_pre15=HEAP32[(($57)>>2)];
 var $73=$_pre;var $72=$_pre15;label=22;break;
 case 22: 
 var $72;
 var $73;
 var $74=((($i_11)+(1))|0);
 var $75=($74>>>0)<($73>>>0);
 if($75){var $i_11=$74;var $65=$72;var $64=$73;label=20;break;}else{var $_lcssa=$72;label=23;break;}
 case 23: 
 var $_lcssa;
 var $76=$_lcssa;
 _free($76);
 label=24;break;
 case 24: 
 var $78=(($2+32)|0);
 var $79=$78;
 var $80=HEAP32[(($79)>>2)];
 var $81=($80|0)==0;
 if($81){label=26;break;}else{label=25;break;}
 case 25: 
 var $83=$80;
 _free($83);
 label=26;break;
 case 26: 
 var $85=(($2+20)|0);
 var $86=$85;
 var $87=HEAP32[(($86)>>2)];
 var $88=($87|0)==0;
 if($88){label=28;break;}else{label=27;break;}
 case 27: 
 _free($87);
 label=28;break;
 case 28: 
 var $91=(($2+36)|0);
 var $92=$91;
 var $93=HEAP32[(($92)>>2)];
 var $94=($93|0)==0;
 if($94){label=30;break;}else{label=29;break;}
 case 29: 
 var $96=$93;
 _free($96);
 label=30;break;
 case 30: 
 _free($2);
 label=31;break;
 case 31: 
 return;
  default: assert(0, "bad label: " + label);
 }

}


function _tre_make_trans($p1,$p2,$transitions,$counts,$offs){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($transitions|0)==0;
 var $2=(($p1)|0);
 var $3=HEAP32[(($2)>>2)];
 var $4=($3|0)>-1;
 if($1){label=4;break;}else{label=2;break;}
 case 2: 
 if($4){label=3;break;}else{var $_0=0;label=49;break;}
 case 3: 
 var $5=(($p2)|0);
 var $7=$2;label=6;break;
 case 4: 
 if($4){label=5;break;}else{var $_0=0;label=49;break;}
 case 5: 
 var $6=(($p2)|0);
 var $158=$2;var $157=$3;label=45;break;
 case 6: 
 var $7;
 var $8=HEAP32[(($5)>>2)];
 var $9=($8|0)>-1;
 if($9){label=7;break;}else{label=44;break;}
 case 7: 
 var $10=(($7+4)|0);
 var $11=(($7+8)|0);
 var $12=(($7+16)|0);
 var $13=(($7+20)|0);
 var $14=(($7+24)|0);
 var $15=$14;
 var $16=(($7+28)|0);
 var $17=(($7+12)|0);
 var $18=$17;
 var $_02_ph45=$p2;var $prev_p2_pos_0_ph46=-1;var $20=$5;var $19=$8;label=8;break;
 case 8: 
 var $19;
 var $20;
 var $prev_p2_pos_0_ph46;
 var $_02_ph45;
 var $_0241=$_02_ph45;var $27=$20;var $26=$19;label=10;break;
 case 9: 
 var $22=(($29)|0);
 var $23=HEAP32[(($22)>>2)];
 var $24=($23|0)>-1;
 if($24){var $_0241=$29;var $27=$22;var $26=$23;label=10;break;}else{label=44;break;}
 case 10: 
 var $26;
 var $27;
 var $_0241;
 var $28=($26|0)==($prev_p2_pos_0_ph46|0);
 var $29=(($_0241+32)|0);
 if($28){label=9;break;}else{label=11;break;}
 case 11: 
 var $31=HEAP32[(($7)>>2)];
 var $32=(($offs+($31<<2))|0);
 var $33=HEAP32[(($32)>>2)];
 var $34=(($transitions+($33<<5))|0);
 var $trans_0=$34;label=12;break;
 case 12: 
 var $trans_0;
 var $36=(($trans_0+8)|0);
 var $37=HEAP32[(($36)>>2)];
 var $38=($37|0)==0;
 var $39=(($trans_0+32)|0);
 if($38){label=13;break;}else{var $trans_0=$39;label=12;break;}
 case 13: 
 var $41=(($trans_0+40)|0);
 HEAP32[(($41)>>2)]=0;
 var $42=HEAP32[(($10)>>2)];
 var $43=(($trans_0)|0);
 HEAP32[(($43)>>2)]=$42;
 var $44=HEAP32[(($11)>>2)];
 var $45=(($trans_0+4)|0);
 HEAP32[(($45)>>2)]=$44;
 var $46=HEAP32[(($27)>>2)];
 var $47=(($offs+($46<<2))|0);
 var $48=HEAP32[(($47)>>2)];
 var $49=(($transitions+($48<<5))|0);
 HEAP32[(($36)>>2)]=$49;
 var $50=(($trans_0+12)|0);
 HEAP32[(($50)>>2)]=$46;
 var $51=HEAP32[(($12)>>2)];
 var $52=(($_0241+16)|0);
 var $53=HEAP32[(($52)>>2)];
 var $54=$53|$51;
 var $55=HEAP32[(($13)>>2)];
 var $56=($55|0)!=0;
 var $57=($56?4:0);
 var $58=$54|$57;
 var $59=HEAP32[(($15)>>2)];
 var $60=($59|0)!=0;
 var $61=($60?8:0);
 var $62=$58|$61;
 var $63=(($trans_0+20)|0);
 HEAP32[(($63)>>2)]=$62;
 var $64=HEAP32[(($16)>>2)];
 var $65=($64|0)>-1;
 var $66=(($trans_0+24)|0);
 if($65){label=14;break;}else{label=15;break;}
 case 14: 
 HEAP32[(($66)>>2)]=$64;
 var $68=$62|256;
 HEAP32[(($63)>>2)]=$68;
 label=16;break;
 case 15: 
 HEAP32[(($66)>>2)]=$55;
 label=16;break;
 case 16: 
 var $71=($59|0)==0;
 if($71){label=22;break;}else{var $i_0=0;label=17;break;}
 case 17: 
 var $i_0;
 var $72=(($59+($i_0<<2))|0);
 var $73=HEAP32[(($72)>>2)];
 var $74=($73|0)==0;
 var $75=((($i_0)+(1))|0);
 if($74){label=18;break;}else{var $i_0=$75;label=17;break;}
 case 18: 
 var $77=$75<<2;
 var $78=_malloc($77);
 var $79=$78;
 var $80=(($trans_0+28)|0);
 HEAP32[(($80)>>2)]=$79;
 var $81=($78|0)==0;
 if($81){var $_0=12;label=49;break;}else{label=19;break;}
 case 19: 
 var $82=HEAP32[(($15)>>2)];
 var $83=HEAP32[(($82)>>2)];
 var $84=($83|0)==0;
 if($84){var $_lcssa10=$79;label=21;break;}else{var $i_111=0;var $86=$83;var $85=$79;label=20;break;}
 case 20: 
 var $85;
 var $86;
 var $i_111;
 HEAP32[(($85)>>2)]=$86;
 var $87=((($i_111)+(1))|0);
 var $88=(($82+($87<<2))|0);
 var $89=HEAP32[(($88)>>2)];
 var $90=($89|0)==0;
 var $91=(($79+($87<<2))|0);
 if($90){var $_lcssa10=$91;label=21;break;}else{var $i_111=$87;var $86=$89;var $85=$91;label=20;break;}
 case 21: 
 var $_lcssa10;
 HEAP32[(($_lcssa10)>>2)]=0;
 label=23;break;
 case 22: 
 var $93=(($trans_0+28)|0);
 HEAP32[(($93)>>2)]=0;
 label=23;break;
 case 23: 
 var $95=HEAP32[(($18)>>2)];
 var $96=($95|0)==0;
 if($96){var $i_3=0;label=25;break;}else{var $i_2=0;label=24;break;}
 case 24: 
 var $i_2;
 var $97=(($95+($i_2<<2))|0);
 var $98=HEAP32[(($97)>>2)];
 var $99=($98|0)>-1;
 var $100=((($i_2)+(1))|0);
 if($99){var $i_2=$100;label=24;break;}else{var $i_3=$i_2;label=25;break;}
 case 25: 
 var $i_3;
 var $101=(($_0241+12)|0);
 var $102=HEAP32[(($101)>>2)];
 var $103=($102|0)==0;
 if($103){var $j_1=0;label=27;break;}else{var $j_0=0;label=26;break;}
 case 26: 
 var $j_0;
 var $104=(($102+($j_0<<2))|0);
 var $105=HEAP32[(($104)>>2)];
 var $106=($105|0)>-1;
 var $107=((($j_0)+(1))|0);
 if($106){var $j_0=$107;label=26;break;}else{var $j_1=$j_0;label=27;break;}
 case 27: 
 var $j_1;
 var $108=(($trans_0+16)|0);
 var $109=HEAP32[(($108)>>2)];
 var $110=($109|0)==0;
 if($110){label=29;break;}else{label=28;break;}
 case 28: 
 var $112=$109;
 _free($112);
 label=29;break;
 case 29: 
 HEAP32[(($108)>>2)]=0;
 var $114=((($j_1)+($i_3))|0);
 var $115=($114|0)>0;
 if($115){label=30;break;}else{label=43;break;}
 case 30: 
 var $117=$114<<2;
 var $118=((($117)+(4))|0);
 var $119=_malloc($118);
 var $120=$119;
 HEAP32[(($108)>>2)]=$120;
 var $121=($119|0)==0;
 if($121){var $_0=12;label=49;break;}else{label=31;break;}
 case 31: 
 var $123=HEAP32[(($18)>>2)];
 var $124=($123|0)==0;
 if($124){var $i_5=0;label=34;break;}else{label=32;break;}
 case 32: 
 var $125=HEAP32[(($123)>>2)];
 var $126=($125|0)>-1;
 if($126){var $i_420=0;var $127=$125;label=33;break;}else{var $i_5=0;label=34;break;}
 case 33: 
 var $127;
 var $i_420;
 var $128=(($120+($i_420<<2))|0);
 HEAP32[(($128)>>2)]=$127;
 var $129=((($i_420)+(1))|0);
 var $130=(($123+($129<<2))|0);
 var $131=HEAP32[(($130)>>2)];
 var $132=($131|0)>-1;
 if($132){var $i_420=$129;var $127=$131;label=33;break;}else{var $i_5=$129;label=34;break;}
 case 34: 
 var $i_5;
 var $133=HEAP32[(($101)>>2)];
 var $134=($133|0)==0;
 if($134){var $l_2=$i_5;label=42;break;}else{label=35;break;}
 case 35: 
 var $135=HEAP32[(($133)>>2)];
 var $136=($135|0)>-1;
 if($136){label=36;break;}else{var $l_2=$i_5;label=42;break;}
 case 36: 
 var $137=($i_5|0)>0;
 var $j_229=0;var $l_031=$i_5;var $_pre61=$135;label=37;break;
 case 37: 
 var $_pre61;
 var $l_031;
 var $j_229;
 if($137){var $k_025=0;label=39;break;}else{label=40;break;}
 case 38: 
 var $139=($143|0)<($i_5|0);
 if($139){var $k_025=$143;label=39;break;}else{label=40;break;}
 case 39: 
 var $k_025;
 var $140=(($120+($k_025<<2))|0);
 var $141=HEAP32[(($140)>>2)];
 var $142=($141|0)==($_pre61|0);
 var $143=((($k_025)+(1))|0);
 if($142){var $l_1=$l_031;label=41;break;}else{label=38;break;}
 case 40: 
 var $144=((($l_031)+(1))|0);
 var $145=(($120+($l_031<<2))|0);
 HEAP32[(($145)>>2)]=$_pre61;
 var $l_1=$144;label=41;break;
 case 41: 
 var $l_1;
 var $146=((($j_229)+(1))|0);
 var $147=(($133+($146<<2))|0);
 var $148=HEAP32[(($147)>>2)];
 var $149=($148|0)>-1;
 if($149){var $j_229=$146;var $l_031=$l_1;var $_pre61=$148;label=37;break;}else{var $l_2=$l_1;label=42;break;}
 case 42: 
 var $l_2;
 var $150=(($120+($l_2<<2))|0);
 HEAP32[(($150)>>2)]=-1;
 label=43;break;
 case 43: 
 var $151=(($29)|0);
 var $152=HEAP32[(($151)>>2)];
 var $153=($152|0)>-1;
 if($153){var $_02_ph45=$29;var $prev_p2_pos_0_ph46=$26;var $20=$151;var $19=$152;label=8;break;}else{label=44;break;}
 case 44: 
 var $154=(($7+32)|0);
 var $155=HEAP32[(($154)>>2)];
 var $156=($155|0)>-1;
 if($156){var $7=$154;label=6;break;}else{var $_0=0;label=49;break;}
 case 45: 
 var $157;
 var $158;
 var $159=HEAP32[(($6)>>2)];
 var $160=($159|0)>-1;
 if($160){var $_134=$p2;var $161=$157;label=46;break;}else{label=48;break;}
 case 46: 
 var $161;
 var $_134;
 var $162=(($counts+($161<<2))|0);
 var $163=HEAP32[(($162)>>2)];
 var $164=((($163)+(1))|0);
 HEAP32[(($162)>>2)]=$164;
 var $165=(($_134+32)|0);
 var $166=(($165)|0);
 var $167=HEAP32[(($166)>>2)];
 var $168=($167|0)>-1;
 if($168){label=47;break;}else{label=48;break;}
 case 47: 
 var $_pre=HEAP32[(($158)>>2)];
 var $_134=$165;var $161=$_pre;label=46;break;
 case 48: 
 var $169=(($158+32)|0);
 var $170=HEAP32[(($169)>>2)];
 var $171=($170|0)>-1;
 if($171){var $158=$169;var $157=$170;label=45;break;}else{var $_0=0;label=49;break;}
 case 49: 
 var $_0;
 return $_0;
  default: assert(0, "bad label: " + label);
 }

}


function _tre_set_union($mem,$set1,$set2,$tags,$assertions){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($tags|0)==0;
 if($1){var $num_tags_0_lcssa=0;label=4;break;}else{var $num_tags_032=0;label=3;break;}
 case 2: 
 var $3=((($num_tags_032)+(1))|0);
 var $num_tags_032=$3;label=3;break;
 case 3: 
 var $num_tags_032;
 var $4=(($tags+($num_tags_032<<2))|0);
 var $5=HEAP32[(($4)>>2)];
 var $6=($5|0)>-1;
 if($6){label=2;break;}else{var $num_tags_0_lcssa=$num_tags_032;label=4;break;}
 case 4: 
 var $num_tags_0_lcssa;
 var $s1_0=0;label=5;break;
 case 5: 
 var $s1_0;
 var $7=(($set1+($s1_0<<5))|0);
 var $8=HEAP32[(($7)>>2)];
 var $9=($8|0)>-1;
 var $10=((($s1_0)+(1))|0);
 if($9){var $s1_0=$10;label=5;break;}else{var $s2_0=0;label=6;break;}
 case 6: 
 var $s2_0;
 var $11=(($set2+($s2_0<<5))|0);
 var $12=HEAP32[(($11)>>2)];
 var $13=($12|0)>-1;
 var $14=((($s2_0)+(1))|0);
 if($13){var $s2_0=$14;label=6;break;}else{label=7;break;}
 case 7: 
 var $16=((($s2_0)+($s1_0))|0);
 var $17=$16<<5;
 var $18=((($17)+(32))|0);
 var $19=___tre_mem_alloc_impl($mem,0,0,1,$18);
 var $20=$19;
 var $21=($19|0)==0;
 if($21){var $_0=0;label=34;break;}else{label=8;break;}
 case 8: 
 var $22=(($set1)|0);
 var $23=HEAP32[(($22)>>2)];
 var $24=($23|0)>-1;
 if($24){label=9;break;}else{var $s1_1_lcssa=0;label=10;break;}
 case 9: 
 var $25=($num_tags_0_lcssa|0)>0;
 var $s1_126=0;var $31=$23;label=11;break;
 case 10: 
 var $s1_1_lcssa;
 var $26=(($set2)|0);
 var $27=HEAP32[(($26)>>2)];
 var $28=($27|0)>-1;
 var $29=(($20+($s1_1_lcssa<<5))|0);
 if($28){var $s2_16=0;var $92=$27;var $91=$s1_1_lcssa;var $90=$29;label=24;break;}else{var $_lcssa=$29;label=33;break;}
 case 11: 
 var $31;
 var $s1_126;
 var $32=(($20+($s1_126<<5))|0);
 HEAP32[(($32)>>2)]=$31;
 var $33=(($set1+($s1_126<<5)+4)|0);
 var $34=HEAP32[(($33)>>2)];
 var $35=(($20+($s1_126<<5)+4)|0);
 HEAP32[(($35)>>2)]=$34;
 var $36=(($set1+($s1_126<<5)+8)|0);
 var $37=HEAP32[(($36)>>2)];
 var $38=(($20+($s1_126<<5)+8)|0);
 HEAP32[(($38)>>2)]=$37;
 var $39=(($set1+($s1_126<<5)+16)|0);
 var $40=HEAP32[(($39)>>2)];
 var $41=$40|$assertions;
 var $42=(($20+($s1_126<<5)+16)|0);
 HEAP32[(($42)>>2)]=$41;
 var $43=(($set1+($s1_126<<5)+20)|0);
 var $44=HEAP32[(($43)>>2)];
 var $45=(($20+($s1_126<<5)+20)|0);
 HEAP32[(($45)>>2)]=$44;
 var $46=(($set1+($s1_126<<5)+24)|0);
 var $47=HEAP32[(($46)>>2)];
 var $48=(($20+($s1_126<<5)+24)|0);
 HEAP32[(($48)>>2)]=$47;
 var $49=(($set1+($s1_126<<5)+28)|0);
 var $50=HEAP32[(($49)>>2)];
 var $51=(($20+($s1_126<<5)+28)|0);
 HEAP32[(($51)>>2)]=$50;
 var $52=(($set1+($s1_126<<5)+12)|0);
 var $53=HEAP32[(($52)>>2)];
 var $54=($53|0)==0;
 var $or_cond=$54&$1;
 if($or_cond){label=13;break;}else{label=12;break;}
 case 12: 
 if($54){var $i_0_lcssa=0;label=16;break;}else{var $i_011=0;label=14;break;}
 case 13: 
 var $56=(($20+($s1_126<<5)+12)|0);
 HEAP32[(($56)>>2)]=0;
 label=23;break;
 case 14: 
 var $i_011;
 var $57=(($53+($i_011<<2))|0);
 var $58=HEAP32[(($57)>>2)];
 var $59=($58|0)>-1;
 if($59){label=15;break;}else{var $i_0_lcssa=$i_011;label=16;break;}
 case 15: 
 var $61=((($i_011)+(1))|0);
 var $i_011=$61;label=14;break;
 case 16: 
 var $i_0_lcssa;
 var $62=((($i_0_lcssa)+($num_tags_0_lcssa))|0);
 var $63=$62<<2;
 var $64=((($63)+(4))|0);
 var $65=___tre_mem_alloc_impl($mem,0,0,0,$64);
 var $66=$65;
 var $67=($65|0)==0;
 if($67){var $_0=0;label=34;break;}else{label=17;break;}
 case 17: 
 var $68=($i_0_lcssa|0)>0;
 if($68){label=18;break;}else{var $j_0_lcssa=0;label=20;break;}
 case 18: 
 var $69=HEAP32[(($52)>>2)];
 var $j_016=0;label=19;break;
 case 19: 
 var $j_016;
 var $71=(($69+($j_016<<2))|0);
 var $72=HEAP32[(($71)>>2)];
 var $73=(($66+($j_016<<2))|0);
 HEAP32[(($73)>>2)]=$72;
 var $74=((($j_016)+(1))|0);
 var $75=($74|0)<($i_0_lcssa|0);
 if($75){var $j_016=$74;label=19;break;}else{var $j_0_lcssa=$i_0_lcssa;label=20;break;}
 case 20: 
 var $j_0_lcssa;
 if($25){var $i_119=0;label=21;break;}else{var $i_1_lcssa=0;label=22;break;}
 case 21: 
 var $i_119;
 var $76=(($tags+($i_119<<2))|0);
 var $77=HEAP32[(($76)>>2)];
 var $78=((($i_119)+($j_0_lcssa))|0);
 var $79=(($66+($78<<2))|0);
 HEAP32[(($79)>>2)]=$77;
 var $80=((($i_119)+(1))|0);
 var $81=($80|0)<($num_tags_0_lcssa|0);
 if($81){var $i_119=$80;label=21;break;}else{var $i_1_lcssa=$num_tags_0_lcssa;label=22;break;}
 case 22: 
 var $i_1_lcssa;
 var $82=((($i_1_lcssa)+($j_0_lcssa))|0);
 var $83=(($66+($82<<2))|0);
 HEAP32[(($83)>>2)]=-1;
 var $84=(($20+($s1_126<<5)+12)|0);
 HEAP32[(($84)>>2)]=$66;
 label=23;break;
 case 23: 
 var $86=((($s1_126)+(1))|0);
 var $87=(($set1+($86<<5))|0);
 var $88=HEAP32[(($87)>>2)];
 var $89=($88|0)>-1;
 if($89){var $s1_126=$86;var $31=$88;label=11;break;}else{var $s1_1_lcssa=$86;label=10;break;}
 case 24: 
 var $90;
 var $91;
 var $92;
 var $s2_16;
 HEAP32[(($90)>>2)]=$92;
 var $93=(($set2+($s2_16<<5)+4)|0);
 var $94=HEAP32[(($93)>>2)];
 var $95=(($20+($91<<5)+4)|0);
 HEAP32[(($95)>>2)]=$94;
 var $96=(($set2+($s2_16<<5)+8)|0);
 var $97=HEAP32[(($96)>>2)];
 var $98=(($20+($91<<5)+8)|0);
 HEAP32[(($98)>>2)]=$97;
 var $99=(($set2+($s2_16<<5)+16)|0);
 var $100=HEAP32[(($99)>>2)];
 var $101=(($20+($91<<5)+16)|0);
 HEAP32[(($101)>>2)]=$100;
 var $102=(($set2+($s2_16<<5)+20)|0);
 var $103=HEAP32[(($102)>>2)];
 var $104=(($20+($91<<5)+20)|0);
 HEAP32[(($104)>>2)]=$103;
 var $105=(($set2+($s2_16<<5)+24)|0);
 var $106=HEAP32[(($105)>>2)];
 var $107=(($20+($91<<5)+24)|0);
 HEAP32[(($107)>>2)]=$106;
 var $108=(($set2+($s2_16<<5)+28)|0);
 var $109=HEAP32[(($108)>>2)];
 var $110=(($20+($91<<5)+28)|0);
 HEAP32[(($110)>>2)]=$109;
 var $111=(($set2+($s2_16<<5)+12)|0);
 var $112=HEAP32[(($111)>>2)];
 var $113=($112|0)==0;
 if($113){label=25;break;}else{var $i_2=0;label=26;break;}
 case 25: 
 var $115=(($20+($91<<5)+12)|0);
 HEAP32[(($115)>>2)]=0;
 label=32;break;
 case 26: 
 var $i_2;
 var $116=(($112+($i_2<<2))|0);
 var $117=HEAP32[(($116)>>2)];
 var $118=($117|0)>-1;
 var $119=((($i_2)+(1))|0);
 if($118){var $i_2=$119;label=26;break;}else{label=27;break;}
 case 27: 
 var $121=$i_2<<2;
 var $122=((($121)+(4))|0);
 var $123=___tre_mem_alloc_impl($mem,0,0,0,$122);
 var $124=$123;
 var $125=($123|0)==0;
 if($125){var $_0=0;label=34;break;}else{label=28;break;}
 case 28: 
 var $126=($i_2|0)>0;
 if($126){label=29;break;}else{var $j_1_lcssa=0;label=31;break;}
 case 29: 
 var $127=HEAP32[(($111)>>2)];
 var $j_13=0;label=30;break;
 case 30: 
 var $j_13;
 var $129=(($127+($j_13<<2))|0);
 var $130=HEAP32[(($129)>>2)];
 var $131=(($124+($j_13<<2))|0);
 HEAP32[(($131)>>2)]=$130;
 var $132=((($j_13)+(1))|0);
 var $133=($132|0)<($i_2|0);
 if($133){var $j_13=$132;label=30;break;}else{var $j_1_lcssa=$i_2;label=31;break;}
 case 31: 
 var $j_1_lcssa;
 var $134=(($124+($j_1_lcssa<<2))|0);
 HEAP32[(($134)>>2)]=-1;
 var $135=(($20+($91<<5)+12)|0);
 HEAP32[(($135)>>2)]=$124;
 label=32;break;
 case 32: 
 var $137=((($s2_16)+(1))|0);
 var $138=(($set2+($137<<5))|0);
 var $139=HEAP32[(($138)>>2)];
 var $140=($139|0)>-1;
 var $141=((($137)+($s1_1_lcssa))|0);
 var $142=(($20+($141<<5))|0);
 if($140){var $s2_16=$137;var $92=$139;var $91=$141;var $90=$142;label=24;break;}else{var $_lcssa=$142;label=33;break;}
 case 33: 
 var $_lcssa;
 HEAP32[(($_lcssa)>>2)]=-1;
 var $_0=$20;label=34;break;
 case 34: 
 var $_0;
 return $_0;
  default: assert(0, "bad label: " + label);
 }

}


function _tre_match_empty($stack,$node,$tags,$assertions,$num_tags_seen){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $stack_idx1=(($stack+12)|0);
 var $stack_idx1_val=HEAP32[(($stack_idx1)>>2)];
 var $1=($num_tags_seen|0)!=0;
 if($1){label=2;break;}else{label=3;break;}
 case 2: 
 HEAP32[(($num_tags_seen)>>2)]=0;
 label=3;break;
 case 3: 
 var $4=$node;
 var $5=_tre_stack_push($stack,$4);
 var $6=($5|0)==0;
 if($6){label=4;break;}else{var $status_0_lcssa=$5;label=28;break;}
 case 4: 
 var $7=(($stack+16)|0);
 var $8=($tags|0)==0;
 var $9=($assertions|0)==0;
 label=5;break;
 case 5: 
 var $stack_idx_val=HEAP32[(($stack_idx1)>>2)];
 var $10=($stack_idx_val|0)>($stack_idx1_val|0);
 if($10){label=6;break;}else{var $status_0_lcssa=0;label=28;break;}
 case 6: 
 var $12=((($stack_idx_val)-(1))|0);
 HEAP32[(($stack_idx1)>>2)]=$12;
 var $13=HEAP32[(($7)>>2)];
 var $14=(($13+($12<<2))|0);
 var $15=HEAP32[(($14)>>2)];
 var $16=$15;
 var $17=HEAP32[(($16)>>2)];
 if(($17|0)==3){ label=20;break;}else if(($17|0)==1){ label=24;break;}else if(($17|0)==2){ label=26;break;}else if(($17|0)==0){ label=8;break;}else{label=5;break;}
 case 7: 
 var $status_0_be;
 var $18=($status_0_be|0)==0;
 if($18){label=5;break;}else{var $status_0_lcssa=$status_0_be;label=28;break;}
 case 8: 
 var $20=(($15+4)|0);
 var $21=$20;
 var $22=HEAP32[(($21)>>2)];
 var $23=$22;
 var $24=HEAP32[(($23)>>2)];
 if(($24|0)==-2){ label=18;break;}else if(($24|0)==-3){ label=9;break;}else{label=5;break;}
 case 9: 
 var $26=(($22+4)|0);
 var $27=$26;
 var $28=HEAP32[(($27)>>2)];
 var $29=($28|0)>-1;
 if($29){label=10;break;}else{label=5;break;}
 case 10: 
 if($8){label=16;break;}else{label=11;break;}
 case 11: 
 var $31=HEAP32[(($tags)>>2)];
 var $32=($31|0)>-1;
 if($32){var $i_05=0;var $37=$tags;var $_pr=$31;label=13;break;}else{var $i_03=0;var $42=$tags;label=15;break;}
 case 12: 
 var $34=(($tags+($39<<2))|0);
 var $35=HEAP32[(($34)>>2)];
 var $36=($35|0)>-1;
 if($36){var $i_05=$39;var $37=$34;var $_pr=$35;label=13;break;}else{var $i_03=$39;var $42=$34;label=15;break;}
 case 13: 
 var $_pr;
 var $37;
 var $i_05;
 var $38=($_pr|0)==($28|0);
 var $39=((($i_05)+(1))|0);
 if($38){label=14;break;}else{label=12;break;}
 case 14: 
 var $41=($28|0)<0;
 if($41){var $i_03=$i_05;var $42=$37;label=15;break;}else{label=16;break;}
 case 15: 
 var $42;
 var $i_03;
 HEAP32[(($42)>>2)]=$28;
 var $43=((($i_03)+(1))|0);
 var $44=(($tags+($43<<2))|0);
 HEAP32[(($44)>>2)]=-1;
 label=16;break;
 case 16: 
 if($1){label=17;break;}else{label=5;break;}
 case 17: 
 var $47=HEAP32[(($num_tags_seen)>>2)];
 var $48=((($47)+(1))|0);
 HEAP32[(($num_tags_seen)>>2)]=$48;
 label=5;break;
 case 18: 
 if($9){label=5;break;}else{label=19;break;}
 case 19: 
 var $51=(($22+4)|0);
 var $52=$51;
 var $53=HEAP32[(($52)>>2)];
 var $54=HEAP32[(($assertions)>>2)];
 var $55=$54|$53;
 HEAP32[(($assertions)>>2)]=$55;
 label=5;break;
 case 20: 
 var $57=(($15+4)|0);
 var $58=$57;
 var $59=HEAP32[(($58)>>2)];
 var $60=$59;
 var $61=HEAP32[(($60)>>2)];
 var $62=(($61+8)|0);
 var $63=HEAP32[(($62)>>2)];
 var $64=($63|0)==0;
 if($64){label=22;break;}else{label=21;break;}
 case 21: 
 var $66=$61;
 var $67=_tre_stack_push($stack,$66);
 var $status_0_be=$67;label=7;break;
 case 22: 
 var $69=(($59+4)|0);
 var $70=$69;
 var $71=HEAP32[(($70)>>2)];
 var $72=(($71+8)|0);
 var $73=HEAP32[(($72)>>2)];
 var $74=($73|0)==0;
 if($74){label=5;break;}else{label=23;break;}
 case 23: 
 var $76=$71;
 var $77=_tre_stack_push($stack,$76);
 var $status_0_be=$77;label=7;break;
 case 24: 
 var $79=(($15+4)|0);
 var $80=$79;
 var $81=HEAP32[(($80)>>2)];
 var $82=$81;
 var $83=HEAP32[(($82)>>2)];
 var $84=$83;
 var $85=_tre_stack_push($stack,$84);
 var $86=($85|0)==0;
 if($86){label=25;break;}else{var $status_0_lcssa=$85;label=28;break;}
 case 25: 
 var $88=(($81+4)|0);
 var $89=$88;
 var $90=HEAP32[(($89)>>2)];
 var $91=$90;
 var $92=_tre_stack_push($stack,$91);
 var $status_0_be=$92;label=7;break;
 case 26: 
 var $94=(($15+4)|0);
 var $95=$94;
 var $96=HEAP32[(($95)>>2)];
 var $97=$96;
 var $98=HEAP32[(($97)>>2)];
 var $99=(($98+8)|0);
 var $100=HEAP32[(($99)>>2)];
 var $101=($100|0)==0;
 if($101){label=5;break;}else{label=27;break;}
 case 27: 
 var $103=$98;
 var $104=_tre_stack_push($stack,$103);
 var $status_0_be=$104;label=7;break;
 case 28: 
 var $status_0_lcssa;
 return $status_0_lcssa;
  default: assert(0, "bad label: " + label);
 }

}


function _tre_stack_push($s,$value_02){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($s+12)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($s)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=($2|0)<($4|0);
 if($5){label=2;break;}else{label=3;break;}
 case 2: 
 var $7=(($s+16)|0);
 var $8=HEAP32[(($7)>>2)];
 var $9=(($8+($2<<2))|0);
 HEAP32[(($9)>>2)]=$value_02;
 var $10=HEAP32[(($1)>>2)];
 var $11=((($10)+(1))|0);
 HEAP32[(($1)>>2)]=$11;
 var $_0=0;label=6;break;
 case 3: 
 var $13=(($s+4)|0);
 var $14=HEAP32[(($13)>>2)];
 var $15=($4|0)<($14|0);
 if($15){label=4;break;}else{var $_0=12;label=6;break;}
 case 4: 
 var $17=(($s+8)|0);
 var $18=HEAP32[(($17)>>2)];
 var $19=((($18)+($4))|0);
 var $20=($19|0)>($14|0);
 var $_=($20?$14:$19);
 var $21=(($s+16)|0);
 var $22=HEAP32[(($21)>>2)];
 var $23=$22;
 var $24=$_<<2;
 var $25=_realloc($23,$24);
 var $26=($25|0)==0;
 if($26){var $_0=12;label=6;break;}else{label=5;break;}
 case 5: 
 var $28=$25;
 HEAP32[(($3)>>2)]=$_;
 HEAP32[(($21)>>2)]=$28;
 var $29=_tre_stack_push($s,$value_02);
 return 0;
 case 6: 
 var $_0;
 return $_0;
  default: assert(0, "bad label: " + label);
 }

}


function _tre_copy_ast($mem,$stack,$ast,$flags,$pos_add,$tag_directions,$copy,$max_pos){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $stack_idx3=(($stack+12)|0);
 var $stack_idx3_val=HEAP32[(($stack_idx3)>>2)];
 var $1=$ast;
 var $2=_tre_stack_push($stack,$1);
 var $3=_tre_stack_push($stack,0);
 var $4=($3|0)==0;
 if($4){label=2;break;}else{var $num_copied_0_lcssa=0;var $status_0_lcssa=$3;label=43;break;}
 case 2: 
 var $5=(($stack+16)|0);
 var $6=$flags&1;
 var $7=($6|0)==0;
 var $8=$flags&2;
 var $9=($8|0)==0;
 var $result_07=$copy;var $first_tag_08=1;var $num_copied_09=0;label=3;break;
 case 3: 
 var $num_copied_09;
 var $first_tag_08;
 var $result_07;
 var $stack_idx_val=HEAP32[(($stack_idx3)>>2)];
 var $10=($stack_idx_val|0)>($stack_idx3_val|0);
 if($10){label=4;break;}else{var $num_copied_0_lcssa=$num_copied_09;var $status_0_lcssa=0;label=43;break;}
 case 4: 
 var $12=((($stack_idx_val)-(1))|0);
 HEAP32[(($stack_idx3)>>2)]=$12;
 var $13=HEAP32[(($5)>>2)];
 var $14=(($13+($12<<2))|0);
 var $15=$14;
 var $16=HEAP32[(($15)>>2)];
 if(($16|0)==1){ label=5;break;}else if(($16|0)==0){ label=6;break;}else{var $result_07=$result_07;var $first_tag_08=$first_tag_08;var $num_copied_09=$num_copied_09;label=3;break;}
 case 5: 
 var $18=((($stack_idx_val)-(2))|0);
 HEAP32[(($stack_idx3)>>2)]=$18;
 var $19=(($13+($18<<2))|0);
 var $20=HEAP32[(($19)>>2)];
 var $21=$20;
 var $result_07=$21;var $first_tag_08=$first_tag_08;var $num_copied_09=$num_copied_09;label=3;break;
 case 6: 
 var $23=((($stack_idx_val)-(2))|0);
 HEAP32[(($stack_idx3)>>2)]=$23;
 var $24=(($13+($23<<2))|0);
 var $25=HEAP32[(($24)>>2)];
 var $26=$25;
 var $27=HEAP32[(($26)>>2)];
 if(($27|0)==3){ label=18;break;}else if(($27|0)==1){ label=27;break;}else if(($27|0)==2){ label=36;break;}else if(($27|0)==0){ label=7;break;}else{var $result_07=$result_07;var $first_tag_08=$first_tag_08;var $num_copied_09=$num_copied_09;label=3;break;}
 case 7: 
 var $29=(($25+4)|0);
 var $30=$29;
 var $31=HEAP32[(($30)>>2)];
 var $32=(($31+8)|0);
 var $33=$32;
 var $34=HEAP32[(($33)>>2)];
 var $35=$31;
 var $36=HEAP32[(($35)>>2)];
 var $37=(($31+4)|0);
 var $38=$37;
 var $39=HEAP32[(($38)>>2)];
 var $40=($36|0)>-1;
 var $41=($36|0)==-4;
 var $or_cond1=$40|$41;
 if($or_cond1){label=8;break;}else{label=9;break;}
 case 8: 
 var $43=HEAP32[(($pos_add)>>2)];
 var $44=((($43)+($34))|0);
 var $45=((($num_copied_09)+(1))|0);
 var $num_copied_1=$45;var $first_tag_1=$first_tag_08;var $max_0=$39;var $min_0=$36;var $pos_0=$44;label=13;break;
 case 9: 
 var $47=($36|0)==-3;
 if($47){label=10;break;}else{var $num_copied_1=$num_copied_09;var $first_tag_1=$first_tag_08;var $max_0=$39;var $min_0=$36;var $pos_0=$34;label=13;break;}
 case 10: 
 if($7){label=11;break;}else{var $num_copied_1=$num_copied_09;var $first_tag_1=$first_tag_08;var $max_0=-1;var $min_0=-1;var $pos_0=-1;label=13;break;}
 case 11: 
 var $50=($first_tag_08|0)==0;
 var $or_cond2=$9|$50;
 if($or_cond2){var $num_copied_1=$num_copied_09;var $first_tag_1=$first_tag_08;var $max_0=$39;var $min_0=-3;var $pos_0=$34;label=13;break;}else{label=12;break;}
 case 12: 
 var $52=(($tag_directions+($39<<2))|0);
 HEAP32[(($52)>>2)]=1;
 var $num_copied_1=$num_copied_09;var $first_tag_1=0;var $max_0=$39;var $min_0=-3;var $pos_0=$34;label=13;break;
 case 13: 
 var $pos_0;
 var $min_0;
 var $max_0;
 var $first_tag_1;
 var $num_copied_1;
 var $54=___tre_mem_alloc_impl($mem,0,0,1,32);
 var $55=$54;
 var $56=($54|0)==0;
 if($56){var $_0_i4=0;label=16;break;}else{label=14;break;}
 case 14: 
 var $58=___tre_mem_alloc_impl($mem,0,0,1,20);
 var $59=(($54+4)|0);
 var $60=$59;
 HEAP32[(($60)>>2)]=$58;
 var $61=($58|0)==0;
 if($61){var $_0_i4=0;label=16;break;}else{label=15;break;}
 case 15: 
 var $63=$54;
 HEAP32[(($63)>>2)]=0;
 var $64=(($54+8)|0);
 var $65=$64;
 HEAP32[(($65)>>2)]=-1;
 var $66=(($54+12)|0);
 var $67=$66;
 HEAP32[(($67)>>2)]=-1;
 var $68=$58;
 HEAP32[(($68)>>2)]=$min_0;
 var $69=(($58+4)|0);
 var $70=$69;
 HEAP32[(($70)>>2)]=$max_0;
 var $71=(($58+8)|0);
 var $72=$71;
 HEAP32[(($72)>>2)]=$pos_0;
 var $_0_i4=$55;label=16;break;
 case 16: 
 var $_0_i4;
 HEAP32[(($result_07)>>2)]=$_0_i4;
 var $73=($_0_i4|0)==0;
 var $_status_0=($73?12:0);
 var $74=HEAP32[(($max_pos)>>2)];
 var $75=($pos_0|0)>($74|0);
 if($75){label=17;break;}else{var $status_0_be=$_status_0;var $num_copied_0_be=$num_copied_1;var $first_tag_0_be=$first_tag_1;var $result_0_be=$result_07;label=42;break;}
 case 17: 
 HEAP32[(($max_pos)>>2)]=$pos_0;
 var $status_0_be=$_status_0;var $num_copied_0_be=$num_copied_1;var $first_tag_0_be=$first_tag_1;var $result_0_be=$result_07;label=42;break;
 case 18: 
 var $78=(($25+4)|0);
 var $79=$78;
 var $80=HEAP32[(($79)>>2)];
 var $81=$80;
 var $82=HEAP32[(($81)>>2)];
 var $83=(($80+4)|0);
 var $84=$83;
 var $85=HEAP32[(($84)>>2)];
 var $86=___tre_mem_alloc_impl($mem,0,0,1,32);
 var $87=$86;
 var $88=($86|0)==0;
 if($88){label=20;break;}else{label=19;break;}
 case 19: 
 var $90=___tre_mem_alloc_impl($mem,0,0,1,8);
 var $91=(($86+4)|0);
 var $92=$91;
 HEAP32[(($92)>>2)]=$90;
 var $93=($90|0)==0;
 if($93){label=20;break;}else{label=21;break;}
 case 20: 
 HEAP32[(($result_07)>>2)]=0;
 var $num_copied_0_lcssa=$num_copied_09;var $status_0_lcssa=12;label=43;break;
 case 21: 
 var $95=$86;
 HEAP32[(($95)>>2)]=3;
 var $96=(($86+8)|0);
 var $97=$96;
 HEAP32[(($97)>>2)]=-1;
 var $98=(($86+12)|0);
 var $99=$98;
 HEAP32[(($99)>>2)]=-1;
 var $100=$90;
 HEAP32[(($100)>>2)]=$82;
 var $101=HEAP32[(($92)>>2)];
 var $102=(($101+4)|0);
 var $103=$102;
 HEAP32[(($103)>>2)]=$85;
 var $104=(($82+16)|0);
 var $105=HEAP32[(($104)>>2)];
 var $106=(($85+16)|0);
 var $107=HEAP32[(($106)>>2)];
 var $108=((($107)+($105))|0);
 var $109=(($86+16)|0);
 var $110=$109;
 HEAP32[(($110)>>2)]=$108;
 HEAP32[(($result_07)>>2)]=$87;
 var $111=HEAP32[(($92)>>2)];
 var $112=$111;
 var $113=HEAP32[(($84)>>2)];
 var $114=$113;
 var $115=_tre_stack_push($stack,$114);
 var $116=($115|0)==0;
 if($116){label=22;break;}else{var $num_copied_0_lcssa=$num_copied_09;var $status_0_lcssa=$115;label=43;break;}
 case 22: 
 var $118=_tre_stack_push($stack,0);
 var $119=($118|0)==0;
 if($119){label=23;break;}else{var $num_copied_0_lcssa=$num_copied_09;var $status_0_lcssa=$118;label=43;break;}
 case 23: 
 var $121=(($111+4)|0);
 var $122=_tre_stack_push($stack,$121);
 var $123=($122|0)==0;
 if($123){label=24;break;}else{var $num_copied_0_lcssa=$num_copied_09;var $status_0_lcssa=$122;label=43;break;}
 case 24: 
 var $125=_tre_stack_push($stack,1);
 var $126=($125|0)==0;
 if($126){label=25;break;}else{var $num_copied_0_lcssa=$num_copied_09;var $status_0_lcssa=$125;label=43;break;}
 case 25: 
 var $128=HEAP32[(($81)>>2)];
 var $129=$128;
 var $130=_tre_stack_push($stack,$129);
 var $131=($130|0)==0;
 if($131){label=26;break;}else{var $num_copied_0_lcssa=$num_copied_09;var $status_0_lcssa=$130;label=43;break;}
 case 26: 
 var $133=_tre_stack_push($stack,0);
 var $status_0_be=$133;var $num_copied_0_be=$num_copied_09;var $first_tag_0_be=$first_tag_08;var $result_0_be=$112;label=42;break;
 case 27: 
 var $135=(($25+4)|0);
 var $136=$135;
 var $137=HEAP32[(($136)>>2)];
 var $138=$137;
 var $139=HEAP32[(($138)>>2)];
 var $140=(($137+4)|0);
 var $141=$140;
 var $142=HEAP32[(($141)>>2)];
 var $143=___tre_mem_alloc_impl($mem,0,0,1,32);
 var $144=$143;
 var $145=($143|0)==0;
 if($145){label=29;break;}else{label=28;break;}
 case 28: 
 var $147=___tre_mem_alloc_impl($mem,0,0,1,8);
 var $148=(($143+4)|0);
 var $149=$148;
 HEAP32[(($149)>>2)]=$147;
 var $150=($147|0)==0;
 if($150){label=29;break;}else{label=30;break;}
 case 29: 
 HEAP32[(($result_07)>>2)]=0;
 var $num_copied_0_lcssa=$num_copied_09;var $status_0_lcssa=12;label=43;break;
 case 30: 
 var $152=$143;
 HEAP32[(($152)>>2)]=1;
 var $153=(($143+8)|0);
 var $154=$153;
 HEAP32[(($154)>>2)]=-1;
 var $155=(($143+12)|0);
 var $156=$155;
 HEAP32[(($156)>>2)]=-1;
 var $157=$147;
 HEAP32[(($157)>>2)]=$139;
 var $158=HEAP32[(($149)>>2)];
 var $159=(($158+4)|0);
 var $160=$159;
 HEAP32[(($160)>>2)]=$142;
 var $161=(($139+16)|0);
 var $162=HEAP32[(($161)>>2)];
 var $163=(($142+16)|0);
 var $164=HEAP32[(($163)>>2)];
 var $165=((($164)+($162))|0);
 var $166=(($143+16)|0);
 var $167=$166;
 HEAP32[(($167)>>2)]=$165;
 HEAP32[(($result_07)>>2)]=$144;
 var $168=HEAP32[(($149)>>2)];
 var $169=$168;
 HEAP32[(($169)>>2)]=0;
 var $170=(($168+4)|0);
 var $171=$170;
 HEAP32[(($171)>>2)]=0;
 var $172=HEAP32[(($141)>>2)];
 var $173=$172;
 var $174=_tre_stack_push($stack,$173);
 var $175=($174|0)==0;
 if($175){label=31;break;}else{var $num_copied_0_lcssa=$num_copied_09;var $status_0_lcssa=$174;label=43;break;}
 case 31: 
 var $177=_tre_stack_push($stack,0);
 var $178=($177|0)==0;
 if($178){label=32;break;}else{var $num_copied_0_lcssa=$num_copied_09;var $status_0_lcssa=$177;label=43;break;}
 case 32: 
 var $180=_tre_stack_push($stack,$170);
 var $181=($180|0)==0;
 if($181){label=33;break;}else{var $num_copied_0_lcssa=$num_copied_09;var $status_0_lcssa=$180;label=43;break;}
 case 33: 
 var $183=_tre_stack_push($stack,1);
 var $184=($183|0)==0;
 if($184){label=34;break;}else{var $num_copied_0_lcssa=$num_copied_09;var $status_0_lcssa=$183;label=43;break;}
 case 34: 
 var $186=HEAP32[(($138)>>2)];
 var $187=$186;
 var $188=_tre_stack_push($stack,$187);
 var $189=($188|0)==0;
 if($189){label=35;break;}else{var $num_copied_0_lcssa=$num_copied_09;var $status_0_lcssa=$188;label=43;break;}
 case 35: 
 var $191=_tre_stack_push($stack,0);
 var $status_0_be=$191;var $num_copied_0_be=$num_copied_09;var $first_tag_0_be=$first_tag_08;var $result_0_be=$169;label=42;break;
 case 36: 
 var $193=(($25+4)|0);
 var $194=$193;
 var $195=HEAP32[(($194)>>2)];
 var $196=$195;
 var $197=HEAP32[(($196)>>2)];
 var $198=$197;
 var $199=_tre_stack_push($stack,$198);
 var $200=($199|0)==0;
 if($200){label=37;break;}else{var $num_copied_0_lcssa=$num_copied_09;var $status_0_lcssa=$199;label=43;break;}
 case 37: 
 var $202=_tre_stack_push($stack,0);
 var $203=($202|0)==0;
 if($203){label=38;break;}else{var $num_copied_0_lcssa=$num_copied_09;var $status_0_lcssa=$202;label=43;break;}
 case 38: 
 var $205=HEAP32[(($196)>>2)];
 var $206=(($195+4)|0);
 var $207=$206;
 var $208=HEAP32[(($207)>>2)];
 var $209=(($195+8)|0);
 var $210=$209;
 var $211=HEAP32[(($210)>>2)];
 var $212=(($195+12)|0);
 var $213=HEAP8[($212)];
 var $214=___tre_mem_alloc_impl($mem,0,0,1,32);
 var $215=$214;
 var $216=($214|0)==0;
 if($216){label=40;break;}else{label=39;break;}
 case 39: 
 var $218=___tre_mem_alloc_impl($mem,0,0,1,16);
 var $219=(($214+4)|0);
 var $220=$219;
 HEAP32[(($220)>>2)]=$218;
 var $221=($218|0)==0;
 if($221){label=40;break;}else{label=41;break;}
 case 40: 
 HEAP32[(($result_07)>>2)]=0;
 var $num_copied_0_lcssa=$num_copied_09;var $status_0_lcssa=12;label=43;break;
 case 41: 
 var $223=$214;
 HEAP32[(($223)>>2)]=2;
 var $224=(($214+8)|0);
 var $225=$224;
 HEAP32[(($225)>>2)]=-1;
 var $226=(($214+12)|0);
 var $227=$226;
 HEAP32[(($227)>>2)]=-1;
 var $228=$218;
 HEAP32[(($228)>>2)]=$205;
 var $229=(($218+4)|0);
 var $230=$229;
 HEAP32[(($230)>>2)]=$208;
 var $231=(($218+8)|0);
 var $232=$231;
 HEAP32[(($232)>>2)]=$211;
 var $233=(($218+12)|0);
 var $234=HEAP8[($233)];
 var $235=$213&1;
 var $236=$234&-2;
 var $237=$236|$235;
 HEAP8[($233)]=$237;
 var $238=(($205+16)|0);
 var $239=HEAP32[(($238)>>2)];
 var $240=(($214+16)|0);
 var $241=$240;
 HEAP32[(($241)>>2)]=$239;
 HEAP32[(($result_07)>>2)]=$215;
 var $242=HEAP32[(($220)>>2)];
 var $243=$242;
 var $result_07=$243;var $first_tag_08=$first_tag_08;var $num_copied_09=$num_copied_09;label=3;break;
 case 42: 
 var $result_0_be;
 var $first_tag_0_be;
 var $num_copied_0_be;
 var $status_0_be;
 var $244=($status_0_be|0)==0;
 if($244){var $result_07=$result_0_be;var $first_tag_08=$first_tag_0_be;var $num_copied_09=$num_copied_0_be;label=3;break;}else{var $num_copied_0_lcssa=$num_copied_0_be;var $status_0_lcssa=$status_0_be;label=43;break;}
 case 43: 
 var $status_0_lcssa;
 var $num_copied_0_lcssa;
 var $245=HEAP32[(($pos_add)>>2)];
 var $246=((($245)+($num_copied_0_lcssa))|0);
 HEAP32[(($pos_add)>>2)]=$246;
 return $status_0_lcssa;
  default: assert(0, "bad label: " + label);
 }

}


function _tre_add_tag_left($mem,$node,$tag_id){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=___tre_mem_alloc_impl($mem,0,0,0,8);
 var $2=($1|0)==0;
 if($2){var $_0=12;label=7;break;}else{label=2;break;}
 case 2: 
 var $4=___tre_mem_alloc_impl($mem,0,0,1,32);
 var $5=$4;
 var $6=($4|0)==0;
 if($6){label=4;break;}else{label=3;break;}
 case 3: 
 var $8=___tre_mem_alloc_impl($mem,0,0,1,20);
 var $9=(($4+4)|0);
 var $10=$9;
 HEAP32[(($10)>>2)]=$8;
 var $11=($8|0)==0;
 if($11){label=4;break;}else{label=5;break;}
 case 4: 
 var $12=$1;
 HEAP32[(($12)>>2)]=0;
 var $_0=12;label=7;break;
 case 5: 
 var $14=$4;
 HEAP32[(($14)>>2)]=0;
 var $15=(($4+8)|0);
 var $16=$15;
 HEAP32[(($16)>>2)]=-1;
 var $17=(($4+12)|0);
 var $18=$17;
 HEAP32[(($18)>>2)]=-1;
 var $19=$8;
 HEAP32[(($19)>>2)]=-3;
 var $20=(($8+4)|0);
 var $21=$20;
 HEAP32[(($21)>>2)]=$tag_id;
 var $22=(($8+8)|0);
 var $23=$22;
 HEAP32[(($23)>>2)]=-1;
 var $24=$1;
 HEAP32[(($24)>>2)]=$5;
 var $25=___tre_mem_alloc_impl($mem,0,0,0,32);
 var $26=$25;
 var $27=(($1+4)|0);
 var $28=$27;
 HEAP32[(($28)>>2)]=$26;
 var $29=($25|0)==0;
 if($29){var $_0=12;label=7;break;}else{label=6;break;}
 case 6: 
 var $31=(($node+4)|0);
 var $32=HEAP32[(($31)>>2)];
 var $33=(($25+4)|0);
 var $34=$33;
 HEAP32[(($34)>>2)]=$32;
 var $35=(($node)|0);
 var $36=HEAP32[(($35)>>2)];
 var $37=HEAP32[(($28)>>2)];
 var $38=(($37)|0);
 HEAP32[(($38)>>2)]=$36;
 var $39=HEAP32[(($28)>>2)];
 var $40=(($39+8)|0);
 HEAP32[(($40)>>2)]=-1;
 var $41=(($39+12)|0);
 HEAP32[(($41)>>2)]=-1;
 var $42=(($39+24)|0);
 HEAP32[(($42)>>2)]=0;
 var $43=HEAP32[(($28)>>2)];
 var $44=(($43+28)|0);
 HEAP32[(($44)>>2)]=0;
 var $45=HEAP32[(($28)>>2)];
 var $46=(($45+20)|0);
 HEAP32[(($46)>>2)]=0;
 HEAP32[(($31)>>2)]=$1;
 HEAP32[(($35)>>2)]=1;
 var $_0=0;label=7;break;
 case 7: 
 var $_0;
 return $_0;
  default: assert(0, "bad label: " + label);
 }

}


function _tre_add_tag_right($mem,$node,$tag_id){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=___tre_mem_alloc_impl($mem,0,0,0,8);
 var $2=($1|0)==0;
 if($2){var $_0=12;label=7;break;}else{label=2;break;}
 case 2: 
 var $4=___tre_mem_alloc_impl($mem,0,0,1,32);
 var $5=$4;
 var $6=($4|0)==0;
 if($6){label=4;break;}else{label=3;break;}
 case 3: 
 var $8=___tre_mem_alloc_impl($mem,0,0,1,20);
 var $9=(($4+4)|0);
 var $10=$9;
 HEAP32[(($10)>>2)]=$8;
 var $11=($8|0)==0;
 if($11){label=4;break;}else{label=5;break;}
 case 4: 
 var $12=(($1+4)|0);
 var $13=$12;
 HEAP32[(($13)>>2)]=0;
 var $_0=12;label=7;break;
 case 5: 
 var $15=$4;
 HEAP32[(($15)>>2)]=0;
 var $16=(($4+8)|0);
 var $17=$16;
 HEAP32[(($17)>>2)]=-1;
 var $18=(($4+12)|0);
 var $19=$18;
 HEAP32[(($19)>>2)]=-1;
 var $20=$8;
 HEAP32[(($20)>>2)]=-3;
 var $21=(($8+4)|0);
 var $22=$21;
 HEAP32[(($22)>>2)]=$tag_id;
 var $23=(($8+8)|0);
 var $24=$23;
 HEAP32[(($24)>>2)]=-1;
 var $25=(($1+4)|0);
 var $26=$25;
 HEAP32[(($26)>>2)]=$5;
 var $27=___tre_mem_alloc_impl($mem,0,0,0,32);
 var $28=$27;
 var $29=$1;
 HEAP32[(($29)>>2)]=$28;
 var $30=($27|0)==0;
 if($30){var $_0=12;label=7;break;}else{label=6;break;}
 case 6: 
 var $32=(($node+4)|0);
 var $33=HEAP32[(($32)>>2)];
 var $34=(($27+4)|0);
 var $35=$34;
 HEAP32[(($35)>>2)]=$33;
 var $36=(($node)|0);
 var $37=HEAP32[(($36)>>2)];
 var $38=HEAP32[(($29)>>2)];
 var $39=(($38)|0);
 HEAP32[(($39)>>2)]=$37;
 var $40=HEAP32[(($29)>>2)];
 var $41=(($40+8)|0);
 HEAP32[(($41)>>2)]=-1;
 var $42=(($40+12)|0);
 HEAP32[(($42)>>2)]=-1;
 var $43=(($40+24)|0);
 HEAP32[(($43)>>2)]=0;
 var $44=HEAP32[(($29)>>2)];
 var $45=(($44+28)|0);
 HEAP32[(($45)>>2)]=0;
 var $46=HEAP32[(($29)>>2)];
 var $47=(($46+20)|0);
 HEAP32[(($47)>>2)]=0;
 HEAP32[(($32)>>2)]=$1;
 HEAP32[(($36)>>2)]=1;
 var $_0=0;label=7;break;
 case 7: 
 var $_0;
 return $_0;
  default: assert(0, "bad label: " + label);
 }

}


function _tre_compare_items($a,$b){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=$a;
 var $2=HEAP32[(($1)>>2)];
 var $3=$b;
 var $4=HEAP32[(($3)>>2)];
 var $5=(($2+4)|0);
 var $6=HEAP32[(($5)>>2)];
 var $7=(($4+4)|0);
 var $8=HEAP32[(($7)>>2)];
 var $9=$6;
 var $10=HEAP32[(($9)>>2)];
 var $11=$8;
 var $12=HEAP32[(($11)>>2)];
 var $13=($10|0)<($12|0);
 if($13){var $_0=-1;label=3;break;}else{label=2;break;}
 case 2: 
 var $15=($10|0)>($12|0);
 var $_=($15&1);
 var $_0=$_;label=3;break;
 case 3: 
 var $_0;
 return $_0;
  default: assert(0, "bad label: " + label);
 }

}


function _regerror($e,$preg,$buf,$size){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($e|0)==0;
 if($1){var $s_0_lcssa=11560;label=4;break;}else{var $_01=$e;var $s_02=11560;label=2;break;}
 case 2: 
 var $s_02;
 var $_01;
 var $2=HEAP8[($s_02)];
 var $3=(($2<<24)>>24)==0;
 if($3){var $s_0_lcssa=$s_02;label=4;break;}else{label=3;break;}
 case 3: 
 var $5=((($_01)-(1))|0);
 var $6=_strlen($s_02);
 var $7=((($6)+(1))|0);
 var $8=(($s_02+$7)|0);
 var $9=($5|0)==0;
 if($9){var $s_0_lcssa=$8;label=4;break;}else{var $_01=$5;var $s_02=$8;label=2;break;}
 case 4: 
 var $s_0_lcssa;
 var $10=HEAP8[($s_0_lcssa)];
 var $11=(($10<<24)>>24)==0;
 var $12=(($s_0_lcssa+1)|0);
 var $_s_0=($11?$12:$s_0_lcssa);
 var $13=_snprintf($buf,$size,138056,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$_s_0,tempVarArgs)); STACKTOP=tempVarArgs;
 var $14=((($13)+(1))|0);
 STACKTOP=sp;return $14;
  default: assert(0, "bad label: " + label);
 }

}


function _regexec($preg,$string,$nmatch,$pmatch,$eflags){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $next_c_i1=sp;
 var $next_c_i=(sp)+(8);
 var $1=(($preg+4)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=$2;
 var $4=(($2+40)|0);
 var $5=$4;
 var $6=HEAP32[(($5)>>2)];
 var $7=($6|0)<1;
 var $8=($nmatch|0)==0;
 var $or_cond=$7|$8;
 if($or_cond){var $tags_0=0;label=3;break;}else{label=2;break;}
 case 2: 
 var $10=$6<<2;
 var $11=_malloc($10);
 var $12=$11;
 var $13=($11|0)==0;
 if($13){var $_0=12;label=379;break;}else{var $tags_0=$12;label=3;break;}
 case 3: 
 var $tags_0;
 var $15=$tags_0;
 var $16=(($2+60)|0);
 var $17=$16;
 var $18=HEAP32[(($17)>>2)];
 var $19=($18|0)==0;
 if($19){label=212;break;}else{label=4;break;}
 case 4: 
 var $21=$next_c_i;
 var $$etemp$0$0=4;
 var $$etemp$0$1=0;

 HEAP32[(($next_c_i)>>2)]=0;
 var $22=$eflags&1;
 var $23=$eflags&2;
 var $24=(($2+56)|0);
 var $25=$24;
 var $26=HEAP32[(($25)>>2)];
 var $27=$26&4;
 var $28=___tre_mem_new_impl(0,0);
 var $29=($28|0)==0;
 if($29){var $status_096=12;label=377;break;}else{label=5;break;}
 case 5: 
 var $31=___tre_mem_alloc_impl($28,0,0,0,32);
 var $32=$31;
 var $33=($31|0)==0;
 if($33){label=6;break;}else{label=7;break;}
 case 6: 
 ___tre_mem_destroy($28);
 var $status_096=12;label=377;break;
 case 7: 
 var $35=(($31+24)|0);
 var $36=$35;
 HEAP32[(($36)>>2)]=0;
 var $37=(($31+28)|0);
 var $38=$37;
 HEAP32[(($38)>>2)]=0;
 var $39=HEAP32[(($5)>>2)];
 var $40=($39|0)==0;
 if($40){var $tags_0_i=0;label=9;break;}else{label=8;break;}
 case 8: 
 var $42=$39<<2;
 var $43=_malloc($42);
 var $44=$43;
 var $45=($43|0)==0;
 if($45){var $ret_0_i=12;var $pmatch_1_i=0;var $states_seen_1_i=0;var $tags_1_i=$44;var $match_eo_10_i35=0;label=206;break;}else{var $tags_0_i=$44;label=9;break;}
 case 9: 
 var $tags_0_i;
 var $47=$tags_0_i;
 var $48=(($2+28)|0);
 var $49=$48;
 var $50=HEAP32[(($49)>>2)];
 var $51=($50|0)==0;
 if($51){var $pmatch_0_i=0;label=11;break;}else{label=10;break;}
 case 10: 
 var $53=$50<<3;
 var $54=_malloc($53);
 var $55=$54;
 var $56=($54|0)==0;
 if($56){var $ret_0_i=12;var $pmatch_1_i=$55;var $states_seen_1_i=0;var $tags_1_i=$tags_0_i;var $match_eo_10_i35=0;label=206;break;}else{var $pmatch_0_i=$55;label=11;break;}
 case 11: 
 var $pmatch_0_i;
 var $58=(($2+52)|0);
 var $59=$58;
 var $60=HEAP32[(($59)>>2)];
 var $61=($60|0)==0;
 if($61){var $states_seen_0_ph_i=0;label=13;break;}else{label=12;break;}
 case 12: 
 var $63=$60<<2;
 var $64=_malloc($63);
 var $65=$64;
 var $66=($64|0)==0;
 if($66){var $ret_0_i=12;var $pmatch_1_i=$pmatch_0_i;var $states_seen_1_i=$65;var $tags_1_i=$tags_0_i;var $match_eo_10_i35=0;label=206;break;}else{var $states_seen_0_ph_i=$65;label=13;break;}
 case 13: 
 var $states_seen_0_ph_i;
 var $67=$states_seen_0_ph_i;
 var $68=($tags_0|0)==0;
 var $69=(($2+8)|0);
 var $70=$69;
 var $71=(($2+12)|0);
 var $72=$71;
 var $73=(($2+32)|0);
 var $74=$73;
 var $75=($27|0)==0;
 var $76=($22|0)==0;
 var $str_byte_0_i=$string;var $pos_add_next_0_i=1;var $pos_start_0_i=-1;var $match_eo_0_i=-1;var $stack_0_i=$32;var $78=$39;label=14;break;
 case 14: 
 var $78;
 var $stack_0_i;
 var $match_eo_0_i;
 var $pos_start_0_i;
 var $pos_add_next_0_i;
 var $str_byte_0_i;
 var $79=($78|0)>0;
 if($79){label=15;break;}else{label=18;break;}
 case 15: 
 if($68){label=16;break;}else{var $i_031_i=0;label=17;break;}
 case 16: 
 var $80=$78<<2;
 _memset($47, -1, $80)|0;
 label=18;break;
 case 17: 
 var $i_031_i;
 var $81=(($tags_0_i+($i_031_i<<2))|0);
 HEAP32[(($81)>>2)]=-1;
 var $82=(($tags_0+($i_031_i<<2))|0);
 HEAP32[(($82)>>2)]=-1;
 var $_pre152_i=HEAP32[(($5)>>2)];
 var $83=((($i_031_i)+(1))|0);
 var $84=($83|0)<($_pre152_i|0);
 if($84){var $i_031_i=$83;label=17;break;}else{label=18;break;}
 case 18: 
 var $85=HEAP32[(($59)>>2)];
 var $86=($85|0)>0;
 if($86){label=19;break;}else{label=20;break;}
 case 19: 
 var $87=$85<<2;
 _memset($67, 0, $87)|0;
 label=20;break;
 case 20: 
 var $88=HEAP32[(($next_c_i)>>2)];
 var $89=((($pos_add_next_0_i)+($pos_start_0_i))|0);
 var $90=_mbtowc($next_c_i,$str_byte_0_i,4);
 var $91=($90|0)<1;
 if($91){label=21;break;}else{var $pos_add_next_1_i=$90;label=23;break;}
 case 21: 
 var $93=($90|0)<0;
 if($93){var $status_096=1;label=377;break;}else{label=22;break;}
 case 22: 
 var $95=((($90)+(1))|0);
 var $pos_add_next_1_i=$95;label=23;break;
 case 23: 
 var $pos_add_next_1_i;
 var $97=(($str_byte_0_i+$pos_add_next_1_i)|0);
 var $98=HEAP32[(($next_c_i)>>2)];
 var $99=HEAP32[(($70)>>2)];
 var $100=(($99+8)|0);
 var $101=HEAP32[(($100)>>2)];
 var $102=($101|0)==0;
 if($102){var $pos_add_next_6_i=$pos_add_next_1_i;var $match_eo_2_i=$match_eo_0_i;var $stack_8_i=$stack_0_i;var $next_tags_8_i=0;label=196;break;}else{label=24;break;}
 case 24: 
 var $103=($89|0)==0;
 var $104=($88|0)==95;
 var $105=($89|0)<1;
 var $or_cond_i=$105&$76;
 var $106=($88|0)!=10;
 var $or_cond8_i=$106|$75;
 var $or_cond8_not_i=$or_cond8_i^1;
 var $state_047_i=0;var $next_tags_048_i=0;var $stack_149_i=$stack_0_i;var $trans_i_051_i=$99;var $108=$100;label=25;break;
 case 25: 
 var $108;
 var $trans_i_051_i;
 var $stack_149_i;
 var $next_tags_048_i;
 var $state_047_i;
 var $109=(($trans_i_051_i+20)|0);
 var $110=HEAP32[(($109)>>2)];
 var $111=($110|0)==0;
 if($111){label=56;break;}else{label=26;break;}
 case 26: 
 var $113=$110&1;
 var $114=($113|0)==0;
 var $brmerge_i=$114|$or_cond_i;
 var $brmerge188_i=$brmerge_i|$or_cond8_not_i;
 if($brmerge188_i){label=27;break;}else{var $stack_3_i=$stack_149_i;var $next_tags_1_i=$next_tags_048_i;var $state_1_i=$state_047_i;label=81;break;}
 case 27: 
 var $116=$110&2;
 var $117=($116|0)==0;
 if($117){label=29;break;}else{label=28;break;}
 case 28: 
 var $119=HEAP32[(($next_c_i)>>2)];
 var $120=$119|$23;
 var $121=($120|0)!=0;
 var $122=($119|0)!=10;
 var $or_cond10_i=$122|$75;
 var $or_cond189_i=$121&$or_cond10_i;
 if($or_cond189_i){var $stack_3_i=$stack_149_i;var $next_tags_1_i=$next_tags_048_i;var $state_1_i=$state_047_i;label=81;break;}else{label=29;break;}
 case 29: 
 var $124=$110&16;
 var $125=($124|0)==0;
 if($125){label=34;break;}else{label=30;break;}
 case 30: 
 if($104){var $stack_3_i=$stack_149_i;var $next_tags_1_i=$next_tags_048_i;var $state_1_i=$state_047_i;label=81;break;}else{label=31;break;}
 case 31: 
 var $128=_iswalnum($88);
 var $129=($128|0)==0;
 if($129){label=32;break;}else{var $stack_3_i=$stack_149_i;var $next_tags_1_i=$next_tags_048_i;var $state_1_i=$state_047_i;label=81;break;}
 case 32: 
 var $131=HEAP32[(($next_c_i)>>2)];
 var $132=($131|0)==95;
 if($132){label=34;break;}else{label=33;break;}
 case 33: 
 var $134=_iswalnum($131);
 var $135=($134|0)==0;
 if($135){var $stack_3_i=$stack_149_i;var $next_tags_1_i=$next_tags_048_i;var $state_1_i=$state_047_i;label=81;break;}else{label=34;break;}
 case 34: 
 var $136=HEAP32[(($109)>>2)];
 var $137=$136&32;
 var $138=($137|0)==0;
 if($138){var $149=$136;label=40;break;}else{label=35;break;}
 case 35: 
 if($104){label=37;break;}else{label=36;break;}
 case 36: 
 var $141=_iswalnum($88);
 var $142=($141|0)==0;
 if($142){var $stack_3_i=$stack_149_i;var $next_tags_1_i=$next_tags_048_i;var $state_1_i=$state_047_i;label=81;break;}else{label=37;break;}
 case 37: 
 var $143=HEAP32[(($next_c_i)>>2)];
 var $144=($143|0)==95;
 if($144){var $stack_3_i=$stack_149_i;var $next_tags_1_i=$next_tags_048_i;var $state_1_i=$state_047_i;label=81;break;}else{label=38;break;}
 case 38: 
 var $146=_iswalnum($143);
 var $147=($146|0)==0;
 if($147){label=39;break;}else{var $stack_3_i=$stack_149_i;var $next_tags_1_i=$next_tags_048_i;var $state_1_i=$state_047_i;label=81;break;}
 case 39: 
 var $_pre184_i=HEAP32[(($109)>>2)];
 var $149=$_pre184_i;label=40;break;
 case 40: 
 var $149;
 var $150=$149&64;
 var $151=($150|0)==0;
 var $or_cond11_i=$151|$103;
 if($or_cond11_i){var $170=$149;label=48;break;}else{label=41;break;}
 case 41: 
 var $153=HEAP32[(($next_c_i)>>2)];
 var $154=($153|0)==0;
 if($154){var $170=$149;label=48;break;}else{label=42;break;}
 case 42: 
 if($104){var $161=1;var $160=$153;label=44;break;}else{label=43;break;}
 case 43: 
 var $157=_iswalnum($88);
 var $158=($157|0)!=0;
 var $phitmp6_i=($158&1);
 var $_pre156_i=HEAP32[(($next_c_i)>>2)];
 var $161=$phitmp6_i;var $160=$_pre156_i;label=44;break;
 case 44: 
 var $160;
 var $161;
 var $162=($160|0)==95;
 if($162){var $167=1;label=46;break;}else{label=45;break;}
 case 45: 
 var $164=_iswalnum($160);
 var $165=($164|0)!=0;
 var $phitmp7_i=($165&1);
 var $167=$phitmp7_i;label=46;break;
 case 46: 
 var $167;
 var $168=($161|0)==($167|0);
 if($168){var $stack_3_i=$stack_149_i;var $next_tags_1_i=$next_tags_048_i;var $state_1_i=$state_047_i;label=81;break;}else{label=47;break;}
 case 47: 
 var $_pre185_i=HEAP32[(($109)>>2)];
 var $170=$_pre185_i;label=48;break;
 case 48: 
 var $170;
 var $171=$170&128;
 var $172=($171|0)==0;
 if($172){label=56;break;}else{label=49;break;}
 case 49: 
 if($103){var $stack_3_i=$stack_149_i;var $next_tags_1_i=$next_tags_048_i;var $state_1_i=$state_047_i;label=81;break;}else{label=50;break;}
 case 50: 
 var $175=HEAP32[(($next_c_i)>>2)];
 var $176=($175|0)==0;
 if($176){var $stack_3_i=$stack_149_i;var $next_tags_1_i=$next_tags_048_i;var $state_1_i=$state_047_i;label=81;break;}else{label=51;break;}
 case 51: 
 if($104){var $183=1;var $182=$175;label=53;break;}else{label=52;break;}
 case 52: 
 var $179=_iswalnum($88);
 var $180=($179|0)!=0;
 var $phitmp4_i=($180&1);
 var $_pre155_i=HEAP32[(($next_c_i)>>2)];
 var $183=$phitmp4_i;var $182=$_pre155_i;label=53;break;
 case 53: 
 var $182;
 var $183;
 var $184=($182|0)==95;
 if($184){var $189=1;label=55;break;}else{label=54;break;}
 case 54: 
 var $186=_iswalnum($182);
 var $187=($186|0)!=0;
 var $phitmp5_i=($187&1);
 var $189=$phitmp5_i;label=55;break;
 case 55: 
 var $189;
 var $190=($183|0)==($189|0);
 if($190){label=56;break;}else{var $stack_3_i=$stack_149_i;var $next_tags_1_i=$next_tags_048_i;var $state_1_i=$state_047_i;label=81;break;}
 case 56: 
 var $192=($state_047_i|0)==0;
 if($192){label=57;break;}else{label=58;break;}
 case 57: 
 var $194=HEAP32[(($108)>>2)];
 var $195=(($trans_i_051_i+16)|0);
 var $196=HEAP32[(($195)>>2)];
 var $stack_3_i=$stack_149_i;var $next_tags_1_i=$196;var $state_1_i=$194;label=81;break;
 case 58: 
 var $198=(($stack_149_i+28)|0);
 var $199=HEAP32[(($198)>>2)];
 var $200=($199|0)==0;
 if($200){label=59;break;}else{var $stack_2_i=$199;label=74;break;}
 case 59: 
 var $202=___tre_mem_alloc_impl($28,0,0,0,32);
 var $203=$202;
 var $204=($202|0)==0;
 if($204){label=60;break;}else{label=66;break;}
 case 60: 
 ___tre_mem_destroy($28);
 var $206=($tags_0_i|0)==0;
 if($206){label=62;break;}else{label=61;break;}
 case 61: 
 _free($47);
 label=62;break;
 case 62: 
 var $209=($pmatch_0_i|0)==0;
 if($209){label=64;break;}else{label=63;break;}
 case 63: 
 var $211=$pmatch_0_i;
 _free($211);
 label=64;break;
 case 64: 
 var $213=($states_seen_0_ph_i|0)==0;
 if($213){var $status_096=12;label=377;break;}else{label=65;break;}
 case 65: 
 _free($67);
 var $status_096=12;label=377;break;
 case 66: 
 var $216=(($202+24)|0);
 var $217=$216;
 HEAP32[(($217)>>2)]=$stack_149_i;
 var $218=(($202+28)|0);
 var $219=$218;
 HEAP32[(($219)>>2)]=0;
 var $220=HEAP32[(($5)>>2)];
 var $221=$220<<2;
 var $222=___tre_mem_alloc_impl($28,0,0,0,$221);
 var $223=$222;
 var $224=(($202+20)|0);
 var $225=$224;
 HEAP32[(($225)>>2)]=$223;
 var $226=($222|0)==0;
 if($226){label=67;break;}else{label=73;break;}
 case 67: 
 ___tre_mem_destroy($28);
 var $228=($tags_0_i|0)==0;
 if($228){label=69;break;}else{label=68;break;}
 case 68: 
 _free($47);
 label=69;break;
 case 69: 
 var $231=($pmatch_0_i|0)==0;
 if($231){label=71;break;}else{label=70;break;}
 case 70: 
 var $233=$pmatch_0_i;
 _free($233);
 label=71;break;
 case 71: 
 var $235=($states_seen_0_ph_i|0)==0;
 if($235){var $status_096=12;label=377;break;}else{label=72;break;}
 case 72: 
 _free($67);
 var $status_096=12;label=377;break;
 case 73: 
 HEAP32[(($198)>>2)]=$203;
 var $stack_2_i=$203;label=74;break;
 case 74: 
 var $stack_2_i;
 var $239=(($stack_2_i)|0);
 HEAP32[(($239)>>2)]=$89;
 var $240=(($stack_2_i+4)|0);
 HEAP32[(($240)>>2)]=$97;
 var $241=HEAP32[(($108)>>2)];
 var $242=(($stack_2_i+8)|0);
 HEAP32[(($242)>>2)]=$241;
 var $243=(($trans_i_051_i+12)|0);
 var $244=HEAP32[(($243)>>2)];
 var $245=(($stack_2_i+12)|0);
 HEAP32[(($245)>>2)]=$244;
 var $246=HEAP32[(($next_c_i)>>2)];
 var $247=(($stack_2_i+16)|0);
 HEAP32[(($247)>>2)]=$246;
 var $248=HEAP32[(($5)>>2)];
 var $249=($248|0)>0;
 if($249){label=75;break;}else{label=77;break;}
 case 75: 
 var $250=(($stack_2_i+20)|0);
 var $251=HEAP32[(($250)>>2)];
 var $i1_034_i=0;label=76;break;
 case 76: 
 var $i1_034_i;
 var $253=(($tags_0_i+($i1_034_i<<2))|0);
 var $254=HEAP32[(($253)>>2)];
 var $255=(($251+($i1_034_i<<2))|0);
 HEAP32[(($255)>>2)]=$254;
 var $256=((($i1_034_i)+(1))|0);
 var $257=HEAP32[(($5)>>2)];
 var $258=($256|0)<($257|0);
 if($258){var $i1_034_i=$256;label=76;break;}else{label=77;break;}
 case 77: 
 var $259=(($trans_i_051_i+16)|0);
 var $260=HEAP32[(($259)>>2)];
 var $261=($260|0)==0;
 if($261){var $stack_3_i=$stack_2_i;var $next_tags_1_i=$next_tags_048_i;var $state_1_i=$state_047_i;label=81;break;}else{label=78;break;}
 case 78: 
 var $262=HEAP32[(($260)>>2)];
 var $263=($262|0)>-1;
 if($263){label=79;break;}else{var $stack_3_i=$stack_2_i;var $next_tags_1_i=$next_tags_048_i;var $state_1_i=$state_047_i;label=81;break;}
 case 79: 
 var $264=(($stack_2_i+20)|0);
 var $265=HEAP32[(($264)>>2)];
 var $tmp_039_i=$260;var $267=$262;label=80;break;
 case 80: 
 var $267;
 var $tmp_039_i;
 var $268=(($tmp_039_i+4)|0);
 var $269=(($265+($267<<2))|0);
 HEAP32[(($269)>>2)]=$89;
 var $270=HEAP32[(($268)>>2)];
 var $271=($270|0)>-1;
 if($271){var $tmp_039_i=$268;var $267=$270;label=80;break;}else{var $stack_3_i=$stack_2_i;var $next_tags_1_i=$next_tags_048_i;var $state_1_i=$state_047_i;label=81;break;}
 case 81: 
 var $state_1_i;
 var $next_tags_1_i;
 var $stack_3_i;
 var $272=(($trans_i_051_i+32)|0);
 var $273=(($trans_i_051_i+40)|0);
 var $274=HEAP32[(($273)>>2)];
 var $275=($274|0)==0;
 if($275){label=82;break;}else{var $state_047_i=$state_1_i;var $next_tags_048_i=$next_tags_1_i;var $stack_149_i=$stack_3_i;var $trans_i_051_i=$272;var $108=$273;label=25;break;}
 case 82: 
 var $276=($next_tags_1_i|0)==0;
 if($276){var $next_tags_3_i=0;label=85;break;}else{label=83;break;}
 case 83: 
 var $277=HEAP32[(($next_tags_1_i)>>2)];
 var $278=($277|0)>-1;
 if($278){var $next_tags_260_i=$next_tags_1_i;var $279=$277;label=84;break;}else{var $next_tags_3_i=$next_tags_1_i;label=85;break;}
 case 84: 
 var $279;
 var $next_tags_260_i;
 var $280=(($tags_0_i+($279<<2))|0);
 HEAP32[(($280)>>2)]=$89;
 var $281=(($next_tags_260_i+4)|0);
 var $282=HEAP32[(($281)>>2)];
 var $283=($282|0)>-1;
 if($283){var $next_tags_260_i=$281;var $279=$282;label=84;break;}else{var $next_tags_3_i=$281;label=85;break;}
 case 85: 
 var $next_tags_3_i;
 var $284=($state_1_i|0)==0;
 if($284){var $pos_add_next_6_i=$pos_add_next_1_i;var $match_eo_2_i=$match_eo_0_i;var $stack_8_i=$stack_3_i;var $next_tags_8_i=$next_tags_3_i;label=196;break;}else{var $str_byte_1_ph_i=$97;var $pos_0_ph_i=$89;var $pos_add_next_2_ph_i=$pos_add_next_1_i;var $match_eo_1_ph_i=$match_eo_0_i;var $stack_4_ph_i=$stack_3_i;var $next_tags_4_ph_i=$next_tags_3_i;var $state_2_ph_i=$state_1_i;label=86;break;}
 case 86: 
 var $state_2_ph_i;
 var $next_tags_4_ph_i;
 var $stack_4_ph_i;
 var $match_eo_1_ph_i;
 var $pos_add_next_2_ph_i;
 var $pos_0_ph_i;
 var $str_byte_1_ph_i;
 var $285=HEAP32[(($72)>>2)];
 var $286=($state_2_ph_i|0)==($285|0);
 if($286){var $next_tags_4_lcssa_i=$next_tags_4_ph_i;var $stack_4_lcssa_i=$stack_4_ph_i;var $pos_add_next_2_lcssa_i=$pos_add_next_2_ph_i;var $pos_0_lcssa_i=$pos_0_ph_i;label=87;break;}else{var $state_2126_i=$state_2_ph_i;var $next_tags_4127_i=$next_tags_4_ph_i;var $stack_4129_i=$stack_4_ph_i;var $pos_add_next_2131_i=$pos_add_next_2_ph_i;var $pos_0133_i=$pos_0_ph_i;var $str_byte_1134_i=$str_byte_1_ph_i;label=100;break;}
 case 87: 
 var $pos_0_lcssa_i;
 var $pos_add_next_2_lcssa_i;
 var $stack_4_lcssa_i;
 var $next_tags_4_lcssa_i;
 var $287=($match_eo_1_ph_i|0)<($pos_0_lcssa_i|0);
 if($287){label=96;break;}else{label=88;break;}
 case 88: 
 var $289=($match_eo_1_ph_i|0)!=($pos_0_lcssa_i|0);
 var $or_cond12_i=$289|$68;
 if($or_cond12_i){var $pos_add_next_6_i=$pos_add_next_2_lcssa_i;var $match_eo_2_i=$match_eo_1_ph_i;var $stack_8_i=$stack_4_lcssa_i;var $next_tags_8_i=$next_tags_4_lcssa_i;label=196;break;}else{label=89;break;}
 case 89: 
 var $291=HEAP32[(($5)>>2)];
 var $292=HEAP32[(($74)>>2)];
 var $293=($291|0)>0;
 if($293){var $i_01_i_i=0;label=90;break;}else{var $pos_add_next_6_i=$pos_add_next_2_lcssa_i;var $match_eo_2_i=$match_eo_1_ph_i;var $stack_8_i=$stack_4_lcssa_i;var $next_tags_8_i=$next_tags_4_lcssa_i;label=196;break;}
 case 90: 
 var $i_01_i_i;
 var $294=(($292+($i_01_i_i<<2))|0);
 var $295=HEAP32[(($294)>>2)];
 var $296=($295|0)==0;
 var $297=(($tags_0_i+($i_01_i_i<<2))|0);
 var $298=HEAP32[(($297)>>2)];
 var $299=(($tags_0+($i_01_i_i<<2))|0);
 var $300=HEAP32[(($299)>>2)];
 if($296){label=91;break;}else{label=93;break;}
 case 91: 
 var $302=($298|0)<($300|0);
 if($302){label=96;break;}else{label=92;break;}
 case 92: 
 var $304=($298|0)>($300|0);
 if($304){var $pos_add_next_6_i=$pos_add_next_2_lcssa_i;var $match_eo_2_i=$match_eo_1_ph_i;var $stack_8_i=$stack_4_lcssa_i;var $next_tags_8_i=$next_tags_4_lcssa_i;label=196;break;}else{label=95;break;}
 case 93: 
 var $306=($298|0)>($300|0);
 if($306){var $312=$291;label=98;break;}else{label=94;break;}
 case 94: 
 var $308=($298|0)<($300|0);
 if($308){var $pos_add_next_6_i=$pos_add_next_2_lcssa_i;var $match_eo_2_i=$match_eo_1_ph_i;var $stack_8_i=$stack_4_lcssa_i;var $next_tags_8_i=$next_tags_4_lcssa_i;label=196;break;}else{label=95;break;}
 case 95: 
 var $310=((($i_01_i_i)+(1))|0);
 var $311=($310|0)<($291|0);
 if($311){var $i_01_i_i=$310;label=90;break;}else{var $pos_add_next_6_i=$pos_add_next_2_lcssa_i;var $match_eo_2_i=$match_eo_1_ph_i;var $stack_8_i=$stack_4_lcssa_i;var $next_tags_8_i=$next_tags_4_lcssa_i;label=196;break;}
 case 96: 
 if($68){var $pos_add_next_6_i=$pos_add_next_2_lcssa_i;var $match_eo_2_i=$pos_0_lcssa_i;var $stack_8_i=$stack_4_lcssa_i;var $next_tags_8_i=$next_tags_4_lcssa_i;label=196;break;}else{label=97;break;}
 case 97: 
 var $_pre178_i=HEAP32[(($5)>>2)];
 var $312=$_pre178_i;label=98;break;
 case 98: 
 var $312;
 var $313=($312|0)>0;
 if($313){var $i2_0143_i=0;label=99;break;}else{var $pos_add_next_6_i=$pos_add_next_2_lcssa_i;var $match_eo_2_i=$pos_0_lcssa_i;var $stack_8_i=$stack_4_lcssa_i;var $next_tags_8_i=$next_tags_4_lcssa_i;label=196;break;}
 case 99: 
 var $i2_0143_i;
 var $314=(($tags_0_i+($i2_0143_i<<2))|0);
 var $315=HEAP32[(($314)>>2)];
 var $316=(($tags_0+($i2_0143_i<<2))|0);
 HEAP32[(($316)>>2)]=$315;
 var $317=((($i2_0143_i)+(1))|0);
 var $318=HEAP32[(($5)>>2)];
 var $319=($317|0)<($318|0);
 if($319){var $i2_0143_i=$317;label=99;break;}else{var $pos_add_next_6_i=$pos_add_next_2_lcssa_i;var $match_eo_2_i=$pos_0_lcssa_i;var $stack_8_i=$stack_4_lcssa_i;var $next_tags_8_i=$next_tags_4_lcssa_i;label=196;break;}
 case 100: 
 var $str_byte_1134_i;
 var $pos_0133_i;
 var $pos_add_next_2131_i;
 var $stack_4129_i;
 var $next_tags_4127_i;
 var $state_2126_i;
 var $320=(($state_2126_i+8)|0);
 var $321=HEAP32[(($320)>>2)];
 var $322=($321|0)==0;
 if($322){label=109;break;}else{label=101;break;}
 case 101: 
 var $324=(($state_2126_i+20)|0);
 var $325=HEAP32[(($324)>>2)];
 var $326=$325&256;
 var $327=($326|0)==0;
 if($327){label=109;break;}else{label=102;break;}
 case 102: 
 var $329=(($state_2126_i+24)|0);
 var $330=HEAP32[(($329)>>2)];
 var $331=((($330)+(1))|0);
 var $332=HEAP32[(($25)>>2)];
 var $333=$332&-9;
 _tre_fill_pmatch($331,$pmatch_0_i,$333,$3,$tags_0_i,$pos_0133_i);
 var $334=(($pmatch_0_i+($330<<3))|0);
 var $335=HEAP32[(($334)>>2)];
 var $336=(($pmatch_0_i+($330<<3)+4)|0);
 var $337=HEAP32[(($336)>>2)];
 var $338=((($337)-($335))|0);
 var $339=(($string+$335)|0);
 var $340=((($str_byte_1134_i)-(1))|0);
 var $341=_strncmp($339,$340,$338);
 var $342=($341|0)==0;
 if($342){label=103;break;}else{var $pos_add_next_6_i=$pos_add_next_2131_i;var $match_eo_2_i=$match_eo_1_ph_i;var $stack_8_i=$stack_4129_i;var $next_tags_8_i=$next_tags_4127_i;label=196;break;}
 case 103: 
 var $344=($337|0)==($335|0);
 var $__i=($344&1);
 var $345=(($state_2126_i+12)|0);
 var $346=HEAP32[(($345)>>2)];
 var $347=(($states_seen_0_ph_i+($346<<2))|0);
 if($344){label=104;break;}else{label=105;break;}
 case 104: 
 var $349=HEAP32[(($347)>>2)];
 var $350=($349|0)==0;
 if($350){label=105;break;}else{var $pos_add_next_6_i=$pos_add_next_2131_i;var $match_eo_2_i=$match_eo_1_ph_i;var $stack_8_i=$stack_4129_i;var $next_tags_8_i=$next_tags_4127_i;label=196;break;}
 case 105: 
 HEAP32[(($347)>>2)]=$__i;
 var $351=((($338)-(1))|0);
 var $352=(($str_byte_1134_i+$351)|0);
 var $353=((($351)+($pos_0133_i))|0);
 var $354=HEAP32[(($next_c_i)>>2)];
 var $355=_mbtowc($next_c_i,$352,4);
 var $356=($355|0)<1;
 if($356){label=106;break;}else{var $pos_add_next_3_i=$355;label=108;break;}
 case 106: 
 var $358=($355|0)<0;
 if($358){var $status_096=1;label=377;break;}else{label=107;break;}
 case 107: 
 var $360=((($355)+(1))|0);
 var $pos_add_next_3_i=$360;label=108;break;
 case 108: 
 var $pos_add_next_3_i;
 var $_sum_i=((($pos_add_next_3_i)+($351))|0);
 var $prev_c_0_i=$354;var $_sum_pn_i=$_sum_i;var $_pn_i=$353;var $pos_add_next_5_i=$pos_add_next_3_i;label=113;break;
 case 109: 
 var $362=HEAP32[(($next_c_i)>>2)];
 var $363=($362|0)==0;
 if($363){var $pos_add_next_6_i=$pos_add_next_2131_i;var $match_eo_2_i=$match_eo_1_ph_i;var $stack_8_i=$stack_4129_i;var $next_tags_8_i=$next_tags_4127_i;label=196;break;}else{label=110;break;}
 case 110: 
 var $365=_mbtowc($next_c_i,$str_byte_1134_i,4);
 var $366=($365|0)<1;
 if($366){label=111;break;}else{var $prev_c_0_i=$362;var $_sum_pn_i=$365;var $_pn_i=$pos_0133_i;var $pos_add_next_5_i=$365;label=113;break;}
 case 111: 
 var $368=($365|0)<0;
 if($368){var $status_096=1;label=377;break;}else{label=112;break;}
 case 112: 
 var $370=((($365)+(1))|0);
 var $prev_c_0_i=$362;var $_sum_pn_i=$370;var $_pn_i=$pos_0133_i;var $pos_add_next_5_i=$370;label=113;break;
 case 113: 
 var $pos_add_next_5_i;
 var $_pn_i;
 var $_sum_pn_i;
 var $prev_c_0_i;
 var $str_byte_2_i=(($str_byte_1134_i+$_sum_pn_i)|0);
 var $pos_1_i=((($_pn_i)+($pos_add_next_2131_i))|0);
 var $372=HEAP32[(($320)>>2)];
 var $373=($372|0)==0;
 if($373){var $pos_add_next_6_i=$pos_add_next_5_i;var $match_eo_2_i=$match_eo_1_ph_i;var $stack_8_i=$stack_4129_i;var $next_tags_8_i=$next_tags_4127_i;label=196;break;}else{label=114;break;}
 case 114: 
 var $374=($pos_1_i|0)==0;
 var $375=($prev_c_0_i|0)==95;
 var $376=($pos_1_i|0)<1;
 var $or_cond13_i=$376&$76;
 var $377=($prev_c_0_i|0)!=10;
 var $or_cond14_i=$377|$75;
 var $or_cond14_not_i=$or_cond14_i^1;
 var $next_tags_583_i=$next_tags_4127_i;var $stack_584_i=$stack_4129_i;var $trans_i_186_i=$state_2126_i;var $next_state_089_i=0;var $379=$320;label=115;break;
 case 115: 
 var $379;
 var $next_state_089_i;
 var $trans_i_186_i;
 var $stack_584_i;
 var $next_tags_583_i;
 var $380=(($trans_i_186_i)|0);
 var $381=HEAP32[(($380)>>2)];
 var $382=($381>>>0)>($prev_c_0_i>>>0);
 if($382){var $next_state_1_i=$next_state_089_i;var $stack_7_i=$stack_584_i;var $next_tags_6_i=$next_tags_583_i;label=190;break;}else{label=116;break;}
 case 116: 
 var $384=(($trans_i_186_i+4)|0);
 var $385=HEAP32[(($384)>>2)];
 var $386=($385>>>0)<($prev_c_0_i>>>0);
 if($386){var $next_state_1_i=$next_state_089_i;var $stack_7_i=$stack_584_i;var $next_tags_6_i=$next_tags_583_i;label=190;break;}else{label=117;break;}
 case 117: 
 var $388=(($trans_i_186_i+20)|0);
 var $389=HEAP32[(($388)>>2)];
 var $390=($389|0)==0;
 if($390){label=165;break;}else{label=118;break;}
 case 118: 
 var $392=$389&1;
 var $393=($392|0)==0;
 var $brmerge190_i=$393|$or_cond13_i;
 var $brmerge191_i=$brmerge190_i|$or_cond14_not_i;
 if($brmerge191_i){label=119;break;}else{var $next_state_1_i=$next_state_089_i;var $stack_7_i=$stack_584_i;var $next_tags_6_i=$next_tags_583_i;label=190;break;}
 case 119: 
 var $395=$389&2;
 var $396=($395|0)==0;
 if($396){label=121;break;}else{label=120;break;}
 case 120: 
 var $398=HEAP32[(($next_c_i)>>2)];
 var $399=$398|$23;
 var $400=($399|0)!=0;
 var $401=($398|0)!=10;
 var $or_cond16_i=$401|$75;
 var $or_cond192_i=$400&$or_cond16_i;
 if($or_cond192_i){var $next_state_1_i=$next_state_089_i;var $stack_7_i=$stack_584_i;var $next_tags_6_i=$next_tags_583_i;label=190;break;}else{label=121;break;}
 case 121: 
 var $403=$389&16;
 var $404=($403|0)==0;
 if($404){label=126;break;}else{label=122;break;}
 case 122: 
 if($375){var $next_state_1_i=$next_state_089_i;var $stack_7_i=$stack_584_i;var $next_tags_6_i=$next_tags_583_i;label=190;break;}else{label=123;break;}
 case 123: 
 var $407=_iswalnum($prev_c_0_i);
 var $408=($407|0)==0;
 if($408){label=124;break;}else{var $next_state_1_i=$next_state_089_i;var $stack_7_i=$stack_584_i;var $next_tags_6_i=$next_tags_583_i;label=190;break;}
 case 124: 
 var $410=HEAP32[(($next_c_i)>>2)];
 var $411=($410|0)==95;
 if($411){label=126;break;}else{label=125;break;}
 case 125: 
 var $413=_iswalnum($410);
 var $414=($413|0)==0;
 if($414){var $next_state_1_i=$next_state_089_i;var $stack_7_i=$stack_584_i;var $next_tags_6_i=$next_tags_583_i;label=190;break;}else{label=126;break;}
 case 126: 
 var $415=HEAP32[(($388)>>2)];
 var $416=$415&32;
 var $417=($416|0)==0;
 if($417){var $428=$415;label=132;break;}else{label=127;break;}
 case 127: 
 if($375){label=129;break;}else{label=128;break;}
 case 128: 
 var $420=_iswalnum($prev_c_0_i);
 var $421=($420|0)==0;
 if($421){var $next_state_1_i=$next_state_089_i;var $stack_7_i=$stack_584_i;var $next_tags_6_i=$next_tags_583_i;label=190;break;}else{label=129;break;}
 case 129: 
 var $422=HEAP32[(($next_c_i)>>2)];
 var $423=($422|0)==95;
 if($423){var $next_state_1_i=$next_state_089_i;var $stack_7_i=$stack_584_i;var $next_tags_6_i=$next_tags_583_i;label=190;break;}else{label=130;break;}
 case 130: 
 var $425=_iswalnum($422);
 var $426=($425|0)==0;
 if($426){label=131;break;}else{var $next_state_1_i=$next_state_089_i;var $stack_7_i=$stack_584_i;var $next_tags_6_i=$next_tags_583_i;label=190;break;}
 case 131: 
 var $_pre179_i=HEAP32[(($388)>>2)];
 var $428=$_pre179_i;label=132;break;
 case 132: 
 var $428;
 var $429=$428&64;
 var $430=($429|0)==0;
 var $or_cond17_i=$430|$374;
 if($or_cond17_i){var $449=$428;label=140;break;}else{label=133;break;}
 case 133: 
 var $432=HEAP32[(($next_c_i)>>2)];
 var $433=($432|0)==0;
 if($433){var $449=$428;label=140;break;}else{label=134;break;}
 case 134: 
 if($375){var $440=1;var $439=$432;label=136;break;}else{label=135;break;}
 case 135: 
 var $436=_iswalnum($prev_c_0_i);
 var $437=($436|0)!=0;
 var $phitmp2_i=($437&1);
 var $_pre154_i=HEAP32[(($next_c_i)>>2)];
 var $440=$phitmp2_i;var $439=$_pre154_i;label=136;break;
 case 136: 
 var $439;
 var $440;
 var $441=($439|0)==95;
 if($441){var $446=1;label=138;break;}else{label=137;break;}
 case 137: 
 var $443=_iswalnum($439);
 var $444=($443|0)!=0;
 var $phitmp3_i=($444&1);
 var $446=$phitmp3_i;label=138;break;
 case 138: 
 var $446;
 var $447=($440|0)==($446|0);
 if($447){var $next_state_1_i=$next_state_089_i;var $stack_7_i=$stack_584_i;var $next_tags_6_i=$next_tags_583_i;label=190;break;}else{label=139;break;}
 case 139: 
 var $_pre180_i=HEAP32[(($388)>>2)];
 var $449=$_pre180_i;label=140;break;
 case 140: 
 var $449;
 var $450=$449&128;
 var $451=($450|0)==0;
 if($451){var $471=$449;label=149;break;}else{label=141;break;}
 case 141: 
 if($374){var $next_state_1_i=$next_state_089_i;var $stack_7_i=$stack_584_i;var $next_tags_6_i=$next_tags_583_i;label=190;break;}else{label=142;break;}
 case 142: 
 var $454=HEAP32[(($next_c_i)>>2)];
 var $455=($454|0)==0;
 if($455){var $next_state_1_i=$next_state_089_i;var $stack_7_i=$stack_584_i;var $next_tags_6_i=$next_tags_583_i;label=190;break;}else{label=143;break;}
 case 143: 
 if($375){var $462=1;var $461=$454;label=145;break;}else{label=144;break;}
 case 144: 
 var $458=_iswalnum($prev_c_0_i);
 var $459=($458|0)!=0;
 var $phitmp_i=($459&1);
 var $_pre153_i=HEAP32[(($next_c_i)>>2)];
 var $462=$phitmp_i;var $461=$_pre153_i;label=145;break;
 case 145: 
 var $461;
 var $462;
 var $463=($461|0)==95;
 if($463){var $468=1;label=147;break;}else{label=146;break;}
 case 146: 
 var $465=_iswalnum($461);
 var $466=($465|0)!=0;
 var $phitmp1_i=($466&1);
 var $468=$phitmp1_i;label=147;break;
 case 147: 
 var $468;
 var $469=($462|0)==($468|0);
 if($469){label=148;break;}else{var $next_state_1_i=$next_state_089_i;var $stack_7_i=$stack_584_i;var $next_tags_6_i=$next_tags_583_i;label=190;break;}
 case 148: 
 var $_pre181_i=HEAP32[(($388)>>2)];
 var $471=$_pre181_i;label=149;break;
 case 149: 
 var $471;
 var $472=$471&4;
 var $473=($472|0)==0;
 if($473){var $484=$471;label=153;break;}else{label=150;break;}
 case 150: 
 var $475=HEAP32[(($25)>>2)];
 var $476=$475&2;
 var $477=($476|0)==0;
 if($477){label=151;break;}else{var $484=$471;label=153;break;}
 case 151: 
 var $479=(($trans_i_186_i+24)|0);
 var $480=HEAP32[(($479)>>2)];
 var $481=_iswctype($prev_c_0_i,$480);
 var $482=($481|0)==0;
 if($482){var $next_state_1_i=$next_state_089_i;var $stack_7_i=$stack_584_i;var $next_tags_6_i=$next_tags_583_i;label=190;break;}else{label=152;break;}
 case 152: 
 var $_pre182_i=HEAP32[(($388)>>2)];
 var $484=$_pre182_i;label=153;break;
 case 153: 
 var $484;
 var $485=$484&4;
 var $486=($485|0)==0;
 if($486){label=157;break;}else{label=154;break;}
 case 154: 
 var $488=HEAP32[(($25)>>2)];
 var $489=$488&2;
 var $490=($489|0)==0;
 if($490){label=157;break;}else{label=155;break;}
 case 155: 
 var $492=_towlower($prev_c_0_i);
 var $493=(($trans_i_186_i+24)|0);
 var $494=HEAP32[(($493)>>2)];
 var $495=_iswctype($492,$494);
 var $496=($495|0)==0;
 if($496){label=156;break;}else{label=157;break;}
 case 156: 
 var $498=_towupper($prev_c_0_i);
 var $499=HEAP32[(($493)>>2)];
 var $500=_iswctype($498,$499);
 var $501=($500|0)==0;
 if($501){var $next_state_1_i=$next_state_089_i;var $stack_7_i=$stack_584_i;var $next_tags_6_i=$next_tags_583_i;label=190;break;}else{label=157;break;}
 case 157: 
 var $502=HEAP32[(($388)>>2)];
 var $503=$502&8;
 var $504=($503|0)==0;
 if($504){label=165;break;}else{label=158;break;}
 case 158: 
 var $506=(($trans_i_186_i+28)|0);
 var $507=HEAP32[(($506)>>2)];
 var $508=HEAP32[(($507)>>2)];
 var $509=($508|0)==0;
 if($509){label=165;break;}else{label=159;break;}
 case 159: 
 var $510=HEAP32[(($25)>>2)];
 var $511=$510&2;
 var $512=($511|0)==0;
 if($512){var $_012_us_i_i=$507;var $513=$508;label=160;break;}else{var $_012_i_i=$507;label=162;break;}
 case 160: 
 var $513;
 var $_012_us_i_i;
 var $514=_iswctype($prev_c_0_i,$513);
 var $515=($514|0)==0;
 if($515){label=161;break;}else{var $next_state_1_i=$next_state_089_i;var $stack_7_i=$stack_584_i;var $next_tags_6_i=$next_tags_583_i;label=190;break;}
 case 161: 
 var $517=(($_012_us_i_i+4)|0);
 var $518=HEAP32[(($517)>>2)];
 var $519=($518|0)==0;
 if($519){label=165;break;}else{var $_012_us_i_i=$517;var $513=$518;label=160;break;}
 case 162: 
 var $_012_i_i;
 var $520=_towupper($prev_c_0_i);
 var $521=HEAP32[(($_012_i_i)>>2)];
 var $522=_iswctype($520,$521);
 var $523=($522|0)==0;
 if($523){label=163;break;}else{var $next_state_1_i=$next_state_089_i;var $stack_7_i=$stack_584_i;var $next_tags_6_i=$next_tags_583_i;label=190;break;}
 case 163: 
 var $525=_towlower($prev_c_0_i);
 var $526=HEAP32[(($_012_i_i)>>2)];
 var $527=_iswctype($525,$526);
 var $528=($527|0)==0;
 if($528){label=164;break;}else{var $next_state_1_i=$next_state_089_i;var $stack_7_i=$stack_584_i;var $next_tags_6_i=$next_tags_583_i;label=190;break;}
 case 164: 
 var $530=(($_012_i_i+4)|0);
 var $531=HEAP32[(($530)>>2)];
 var $532=($531|0)==0;
 if($532){label=165;break;}else{var $_012_i_i=$530;label=162;break;}
 case 165: 
 var $533=($next_state_089_i|0)==0;
 if($533){label=166;break;}else{label=167;break;}
 case 166: 
 var $535=HEAP32[(($379)>>2)];
 var $536=(($trans_i_186_i+16)|0);
 var $537=HEAP32[(($536)>>2)];
 var $next_state_1_i=$535;var $stack_7_i=$stack_584_i;var $next_tags_6_i=$537;label=190;break;
 case 167: 
 var $539=(($stack_584_i+28)|0);
 var $540=HEAP32[(($539)>>2)];
 var $541=($540|0)==0;
 if($541){label=168;break;}else{var $stack_6_i=$540;label=183;break;}
 case 168: 
 var $543=___tre_mem_alloc_impl($28,0,0,0,32);
 var $544=$543;
 var $545=($543|0)==0;
 if($545){label=169;break;}else{label=175;break;}
 case 169: 
 ___tre_mem_destroy($28);
 var $547=($tags_0_i|0)==0;
 if($547){label=171;break;}else{label=170;break;}
 case 170: 
 _free($47);
 label=171;break;
 case 171: 
 var $550=($pmatch_0_i|0)==0;
 if($550){label=173;break;}else{label=172;break;}
 case 172: 
 var $552=$pmatch_0_i;
 _free($552);
 label=173;break;
 case 173: 
 var $554=($states_seen_0_ph_i|0)==0;
 if($554){var $status_096=12;label=377;break;}else{label=174;break;}
 case 174: 
 _free($67);
 var $status_096=12;label=377;break;
 case 175: 
 var $557=(($543+24)|0);
 var $558=$557;
 HEAP32[(($558)>>2)]=$stack_584_i;
 var $559=(($543+28)|0);
 var $560=$559;
 HEAP32[(($560)>>2)]=0;
 var $561=HEAP32[(($5)>>2)];
 var $562=$561<<2;
 var $563=___tre_mem_alloc_impl($28,0,0,0,$562);
 var $564=$563;
 var $565=(($543+20)|0);
 var $566=$565;
 HEAP32[(($566)>>2)]=$564;
 var $567=($563|0)==0;
 if($567){label=176;break;}else{label=182;break;}
 case 176: 
 ___tre_mem_destroy($28);
 var $569=($tags_0_i|0)==0;
 if($569){label=178;break;}else{label=177;break;}
 case 177: 
 _free($47);
 label=178;break;
 case 178: 
 var $572=($pmatch_0_i|0)==0;
 if($572){label=180;break;}else{label=179;break;}
 case 179: 
 var $574=$pmatch_0_i;
 _free($574);
 label=180;break;
 case 180: 
 var $576=($states_seen_0_ph_i|0)==0;
 if($576){var $status_096=12;label=377;break;}else{label=181;break;}
 case 181: 
 _free($67);
 var $status_096=12;label=377;break;
 case 182: 
 HEAP32[(($539)>>2)]=$544;
 var $stack_6_i=$544;label=183;break;
 case 183: 
 var $stack_6_i;
 var $580=(($stack_6_i)|0);
 HEAP32[(($580)>>2)]=$pos_1_i;
 var $581=(($stack_6_i+4)|0);
 HEAP32[(($581)>>2)]=$str_byte_2_i;
 var $582=HEAP32[(($379)>>2)];
 var $583=(($stack_6_i+8)|0);
 HEAP32[(($583)>>2)]=$582;
 var $584=(($trans_i_186_i+12)|0);
 var $585=HEAP32[(($584)>>2)];
 var $586=(($stack_6_i+12)|0);
 HEAP32[(($586)>>2)]=$585;
 var $587=HEAP32[(($next_c_i)>>2)];
 var $588=(($stack_6_i+16)|0);
 HEAP32[(($588)>>2)]=$587;
 var $589=HEAP32[(($5)>>2)];
 var $590=($589|0)>0;
 if($590){label=184;break;}else{label=186;break;}
 case 184: 
 var $591=(($stack_6_i+20)|0);
 var $592=HEAP32[(($591)>>2)];
 var $i3_069_i=0;label=185;break;
 case 185: 
 var $i3_069_i;
 var $594=(($tags_0_i+($i3_069_i<<2))|0);
 var $595=HEAP32[(($594)>>2)];
 var $596=(($592+($i3_069_i<<2))|0);
 HEAP32[(($596)>>2)]=$595;
 var $597=((($i3_069_i)+(1))|0);
 var $598=HEAP32[(($5)>>2)];
 var $599=($597|0)<($598|0);
 if($599){var $i3_069_i=$597;label=185;break;}else{label=186;break;}
 case 186: 
 var $600=(($trans_i_186_i+16)|0);
 var $601=HEAP32[(($600)>>2)];
 var $602=($601|0)==0;
 if($602){var $next_state_1_i=$next_state_089_i;var $stack_7_i=$stack_6_i;var $next_tags_6_i=$next_tags_583_i;label=190;break;}else{label=187;break;}
 case 187: 
 var $603=HEAP32[(($601)>>2)];
 var $604=($603|0)>-1;
 if($604){label=188;break;}else{var $next_state_1_i=$next_state_089_i;var $stack_7_i=$stack_6_i;var $next_tags_6_i=$next_tags_583_i;label=190;break;}
 case 188: 
 var $605=(($stack_6_i+20)|0);
 var $606=HEAP32[(($605)>>2)];
 var $tmp5_074_i56=$601;var $608=$603;label=189;break;
 case 189: 
 var $608;
 var $tmp5_074_i56;
 var $609=(($606+($608<<2))|0);
 HEAP32[(($609)>>2)]=$pos_1_i;
 var $610=(($tmp5_074_i56+4)|0);
 var $611=HEAP32[(($610)>>2)];
 var $612=($611|0)>-1;
 if($612){var $tmp5_074_i56=$610;var $608=$611;label=189;break;}else{var $next_state_1_i=$next_state_089_i;var $stack_7_i=$stack_6_i;var $next_tags_6_i=$next_tags_583_i;label=190;break;}
 case 190: 
 var $next_tags_6_i;
 var $stack_7_i;
 var $next_state_1_i;
 var $613=(($trans_i_186_i+32)|0);
 var $614=(($trans_i_186_i+40)|0);
 var $615=HEAP32[(($614)>>2)];
 var $616=($615|0)==0;
 if($616){label=191;break;}else{var $next_tags_583_i=$next_tags_6_i;var $stack_584_i=$stack_7_i;var $trans_i_186_i=$613;var $next_state_089_i=$next_state_1_i;var $379=$614;label=115;break;}
 case 191: 
 var $617=($next_state_1_i|0)==0;
 if($617){var $pos_add_next_6_i=$pos_add_next_5_i;var $match_eo_2_i=$match_eo_1_ph_i;var $stack_8_i=$stack_7_i;var $next_tags_8_i=$next_tags_6_i;label=196;break;}else{label=192;break;}
 case 192: 
 var $619=($next_tags_6_i|0)==0;
 if($619){var $next_tags_4_be_i=0;label=193;break;}else{label=194;break;}
 case 193: 
 var $next_tags_4_be_i;
 var $620=HEAP32[(($72)>>2)];
 var $621=($next_state_1_i|0)==($620|0);
 if($621){var $next_tags_4_lcssa_i=$next_tags_4_be_i;var $stack_4_lcssa_i=$stack_7_i;var $pos_add_next_2_lcssa_i=$pos_add_next_5_i;var $pos_0_lcssa_i=$pos_1_i;label=87;break;}else{var $state_2126_i=$next_state_1_i;var $next_tags_4127_i=$next_tags_4_be_i;var $stack_4129_i=$stack_7_i;var $pos_add_next_2131_i=$pos_add_next_5_i;var $pos_0133_i=$pos_1_i;var $str_byte_1134_i=$str_byte_2_i;label=100;break;}
 case 194: 
 var $622=HEAP32[(($next_tags_6_i)>>2)];
 var $623=($622|0)>-1;
 if($623){var $next_tags_798_i=$next_tags_6_i;var $624=$622;label=195;break;}else{var $next_tags_4_be_i=$next_tags_6_i;label=193;break;}
 case 195: 
 var $624;
 var $next_tags_798_i;
 var $625=(($next_tags_798_i+4)|0);
 var $626=(($tags_0_i+($624<<2))|0);
 HEAP32[(($626)>>2)]=$pos_1_i;
 var $627=HEAP32[(($625)>>2)];
 var $628=($627|0)>-1;
 if($628){var $next_tags_798_i=$625;var $624=$627;label=195;break;}else{var $next_tags_4_be_i=$625;label=193;break;}
 case 196: 
 var $next_tags_8_i;
 var $stack_8_i;
 var $match_eo_2_i;
 var $pos_add_next_6_i;
 var $629=(($stack_8_i+24)|0);
 var $630=HEAP32[(($629)>>2)];
 var $631=($630|0)==0;
 if($631){label=202;break;}else{label=197;break;}
 case 197: 
 var $633=(($stack_8_i+8)|0);
 var $634=HEAP32[(($633)>>2)];
 var $635=(($634+20)|0);
 var $636=HEAP32[(($635)>>2)];
 var $637=$636&256;
 var $638=($637|0)==0;
 if($638){label=199;break;}else{label=198;break;}
 case 198: 
 var $640=(($stack_8_i+12)|0);
 var $641=HEAP32[(($640)>>2)];
 var $642=(($states_seen_0_ph_i+($641<<2))|0);
 HEAP32[(($642)>>2)]=0;
 label=199;break;
 case 199: 
 var $643=(($stack_8_i)|0);
 var $644=HEAP32[(($643)>>2)];
 var $645=(($stack_8_i+4)|0);
 var $646=HEAP32[(($645)>>2)];
 var $647=(($stack_8_i+16)|0);
 var $648=HEAP32[(($647)>>2)];
 HEAP32[(($next_c_i)>>2)]=$648;
 var $649=HEAP32[(($5)>>2)];
 var $650=($649|0)>0;
 if($650){label=200;break;}else{var $str_byte_1_ph_i=$646;var $pos_0_ph_i=$644;var $pos_add_next_2_ph_i=$pos_add_next_6_i;var $match_eo_1_ph_i=$match_eo_2_i;var $stack_4_ph_i=$630;var $next_tags_4_ph_i=$next_tags_8_i;var $state_2_ph_i=$634;label=86;break;}
 case 200: 
 var $651=(($stack_8_i+20)|0);
 var $652=HEAP32[(($651)>>2)];
 var $i6_063_i=0;label=201;break;
 case 201: 
 var $i6_063_i;
 var $654=(($652+($i6_063_i<<2))|0);
 var $655=HEAP32[(($654)>>2)];
 var $656=(($tags_0_i+($i6_063_i<<2))|0);
 HEAP32[(($656)>>2)]=$655;
 var $657=((($i6_063_i)+(1))|0);
 var $658=($657|0)<($649|0);
 if($658){var $i6_063_i=$657;label=201;break;}else{var $str_byte_1_ph_i=$646;var $pos_0_ph_i=$644;var $pos_add_next_2_ph_i=$pos_add_next_6_i;var $match_eo_1_ph_i=$match_eo_2_i;var $stack_4_ph_i=$630;var $next_tags_4_ph_i=$next_tags_8_i;var $state_2_ph_i=$634;label=86;break;}
 case 202: 
 var $660=($match_eo_2_i|0)<0;
 if($660){label=203;break;}else{label=205;break;}
 case 203: 
 var $662=HEAP32[(($next_c_i)>>2)];
 var $663=($662|0)==0;
 if($663){label=205;break;}else{label=204;break;}
 case 204: 
 HEAP32[(($next_c_i)>>2)]=$98;
 var $_pre_i=HEAP32[(($5)>>2)];
 var $str_byte_0_i=$97;var $pos_add_next_0_i=$pos_add_next_6_i;var $pos_start_0_i=$89;var $match_eo_0_i=$match_eo_2_i;var $stack_0_i=$stack_8_i;var $78=$_pre_i;label=14;break;
 case 205: 
 var $match_eo_2_lobit_i=$match_eo_2_i>>>31;
 var $ret_0_i=$match_eo_2_lobit_i;var $pmatch_1_i=$pmatch_0_i;var $states_seen_1_i=$states_seen_0_ph_i;var $tags_1_i=$tags_0_i;var $match_eo_10_i35=$match_eo_2_i;label=206;break;
 case 206: 
 var $match_eo_10_i35;
 var $tags_1_i;
 var $states_seen_1_i;
 var $pmatch_1_i;
 var $ret_0_i;
 ___tre_mem_destroy($28);
 var $667=($tags_1_i|0)==0;
 if($667){label=208;break;}else{label=207;break;}
 case 207: 
 var $669=$tags_1_i;
 _free($669);
 label=208;break;
 case 208: 
 var $671=($pmatch_1_i|0)==0;
 if($671){label=210;break;}else{label=209;break;}
 case 209: 
 var $673=$pmatch_1_i;
 _free($673);
 label=210;break;
 case 210: 
 var $675=($states_seen_1_i|0)==0;
 if($675){var $status_0=$ret_0_i;var $match_eo_10_i32=$match_eo_10_i35;label=375;break;}else{label=211;break;}
 case 211: 
 var $677=$states_seen_1_i;
 _free($677);
 var $status_0=$ret_0_i;var $match_eo_10_i32=$match_eo_10_i35;label=375;break;
 case 212: 
 var $679=$next_c_i1;
 var $$etemp$1$0=4;
 var $$etemp$1$1=0;

 HEAP32[(($next_c_i1)>>2)]=0;
 var $680=$eflags&1;
 var $681=$eflags&2;
 var $682=(($2+56)|0);
 var $683=$682;
 var $684=HEAP32[(($683)>>2)];
 var $685=$684&4;
 var $686=($tags_0|0)==0;
 if($686){var $num_tags_0_i=0;label=214;break;}else{label=213;break;}
 case 213: 
 var $688=HEAP32[(($5)>>2)];
 var $num_tags_0_i=$688;label=214;break;
 case 214: 
 var $num_tags_0_i;
 var $690=$num_tags_0_i<<2;
 var $691=(($2+52)|0);
 var $692=$691;
 var $693=HEAP32[(($692)>>2)];
 var $694=$693<<3;
 var $695=((($694)+(8))|0);
 var $696=(Math_imul($690,$693)|0);
 var $697=((($695)+($696))|0);
 var $698=$697<<1;
 var $699=((($690)+(12))|0);
 var $700=((($699)+($694))|0);
 var $701=((($700)+($698))|0);
 var $702=_malloc($701);
 var $703=($702|0)==0;
 if($703){var $status_096=12;label=377;break;}else{label=215;break;}
 case 215: 
 _memset($702, 0, $701)|0;
 var $705=$702;
 var $706=(($702+$690)|0);
 var $707=$706;
 var $708=$707&3;
 var $709=($708|0)==0;
 var $710=(((4)-($708))|0);
 var $__i2=($709?0:$710);
 var $_sum_i3=((($__i2)+($690))|0);
 var $711=(($702+$_sum_i3)|0);
 var $712=$711;
 var $_sum1_i=((($_sum_i3)+($695))|0);
 var $713=(($702+$_sum1_i)|0);
 var $714=$713;
 var $715=$714&3;
 var $716=($715|0)==0;
 var $717=(((4)-($715))|0);
 var $718=($716?0:$717);
 var $_sum2_i=((($718)+($_sum1_i))|0);
 var $719=(($702+$_sum2_i)|0);
 var $720=$719;
 var $_sum3_i=((($_sum2_i)+($695))|0);
 var $721=(($702+$_sum3_i)|0);
 var $722=$721;
 var $723=$722&3;
 var $724=($723|0)==0;
 var $725=(((4)-($723))|0);
 var $_15_i=($724?0:$725);
 var $_sum4_i=((($_15_i)+($_sum3_i))|0);
 var $726=(($702+$_sum4_i)|0);
 var $727=$726;
 var $_sum5_i=((($_sum4_i)+($694))|0);
 var $728=(($702+$_sum5_i)|0);
 var $729=$728;
 var $730=$729&3;
 var $731=($693|0)>0;
 if($731){label=216;break;}else{label=219;break;}
 case 216: 
 var $732=(((4)-($730))|0);
 var $733=($730|0)==0;
 var $734=($733?0:$732);
 var $_sum6_i=((($734)+($_sum5_i))|0);
 var $735=(($702+$_sum6_i)|0);
 var $_sum14_i=$num_tags_0_i<<3;
 var $i_0125_i=0;var $tmp_buf_0126_i=$735;label=217;break;
 case 217: 
 var $tmp_buf_0126_i;
 var $i_0125_i;
 var $737=$tmp_buf_0126_i;
 var $738=(($720+($i_0125_i<<3)+4)|0);
 HEAP32[(($738)>>2)]=$737;
 var $739=(($tmp_buf_0126_i+$690)|0);
 var $740=$739;
 var $741=(($712+($i_0125_i<<3)+4)|0);
 HEAP32[(($741)>>2)]=$740;
 var $742=(($tmp_buf_0126_i+$_sum14_i)|0);
 var $743=((($i_0125_i)+(1))|0);
 var $744=($743|0)<($693|0);
 if($744){var $i_0125_i=$743;var $tmp_buf_0126_i=$742;label=217;break;}else{var $i_1122_i=0;label=218;break;}
 case 218: 
 var $i_1122_i;
 var $745=(($727+($i_1122_i<<3))|0);
 HEAP32[(($745)>>2)]=-1;
 var $746=((($i_1122_i)+(1))|0);
 var $747=($746|0)<($693|0);
 if($747){var $i_1122_i=$746;label=218;break;}else{label=219;break;}
 case 219: 
 var $748=_mbtowc($next_c_i1,$string,4);
 var $749=($748|0)<1;
 if($749){label=220;break;}else{var $pos_add_next_0_i4=$748;label=222;break;}
 case 220: 
 var $751=($748|0)<0;
 if($751){var $status_096=1;label=377;break;}else{label=221;break;}
 case 221: 
 var $753=((($748)+(1))|0);
 var $pos_add_next_0_i4=$753;label=222;break;
 case 222: 
 var $pos_add_next_0_i4;
 var $755=(($string+$pos_add_next_0_i4)|0);
 var $756=(($2+8)|0);
 var $757=$756;
 var $758=($685|0)==0;
 var $759=($680|0)==0;
 var $760=($num_tags_0_i|0)>0;
 var $761=(($2+12)|0);
 var $762=$761;
 var $763=(($2+44)|0);
 var $764=$763;
 var $765=(($2+32)|0);
 var $766=$765;
 var $767=(($2+36)|0);
 var $768=$767;
 var $769=($num_tags_0_i|0)==0;
 var $_not176_i=$760^1;
 var $prev_c_0_i8=0;var $str_byte_0_i7=$755;var $pos_0_i=0;var $pos_add_next_1_i6=$pos_add_next_0_i4;var $reach_0_i=$720;var $tmp_tags_0_i=$705;var $new_match_0_i=0;var $match_eo_0_i5=-1;var $reach_next_0_i=$712;var $reach_next_i_0_i=$712;label=223;break;
 case 223: 
 var $reach_next_i_0_i;
 var $reach_next_0_i;
 var $match_eo_0_i5;
 var $new_match_0_i;
 var $tmp_tags_0_i;
 var $reach_0_i;
 var $pos_add_next_1_i6;
 var $pos_0_i;
 var $str_byte_0_i7;
 var $prev_c_0_i8;
 var $771=($match_eo_0_i5|0)<0;
 if($771){label=224;break;}else{label=275;break;}
 case 224: 
 var $773=HEAP32[(($757)>>2)];
 var $774=(($773+8)|0);
 var $775=HEAP32[(($774)>>2)];
 var $776=($775|0)==0;
 if($776){var $reach_next_i_1_ph105_i=$reach_next_i_0_i;var $match_eo_1_ph107_i=$match_eo_0_i5;var $new_match_1_ph109_i=$new_match_0_i;label=274;break;}else{label=225;break;}
 case 225: 
 var $777=($pos_0_i|0)==0;
 var $778=($prev_c_0_i8|0)==95;
 var $779=($pos_0_i|0)<1;
 var $or_cond_i9=$779&$759;
 var $780=($prev_c_0_i8|0)!=10;
 var $or_cond16_i10=$780|$758;
 var $or_cond16_not_i=$or_cond16_i10^1;
 var $reach_next_i_1_ph110_i=$reach_next_i_0_i;var $match_eo_1_ph112_i=$match_eo_0_i5;var $new_match_1_ph114_i=$new_match_0_i;var $trans_i_0_ph116_i=$773;var $781=$774;label=226;break;
 case 226: 
 var $781;
 var $trans_i_0_ph116_i;
 var $new_match_1_ph114_i;
 var $match_eo_1_ph112_i;
 var $reach_next_i_1_ph110_i;
 var $trans_i_047_i=$trans_i_0_ph116_i;var $783=$781;label=227;break;
 case 227: 
 var $783;
 var $trans_i_047_i;
 var $784=(($trans_i_047_i+12)|0);
 var $785=HEAP32[(($784)>>2)];
 var $786=(($727+($785<<3))|0);
 var $787=HEAP32[(($786)>>2)];
 var $788=($787|0)<($pos_0_i|0);
 if($788){label=228;break;}else{var $new_match_3_i=$new_match_1_ph114_i;var $match_eo_3_i=$match_eo_1_ph112_i;var $reach_next_i_2_i=$reach_next_i_1_ph110_i;label=273;break;}
 case 228: 
 var $790=(($trans_i_047_i+20)|0);
 var $791=HEAP32[(($790)>>2)];
 var $792=($791|0)==0;
 if($792){label=260;break;}else{label=229;break;}
 case 229: 
 var $794=$791&1;
 var $795=($794|0)==0;
 var $brmerge_i11=$795|$or_cond_i9;
 var $brmerge174_i=$brmerge_i11|$or_cond16_not_i;
 if($brmerge174_i){label=230;break;}else{label=259;break;}
 case 230: 
 var $797=$791&2;
 var $798=($797|0)==0;
 if($798){label=232;break;}else{label=231;break;}
 case 231: 
 var $800=HEAP32[(($next_c_i1)>>2)];
 var $801=$800|$681;
 var $802=($801|0)!=0;
 var $803=($800|0)!=10;
 var $or_cond18_i=$803|$758;
 var $or_cond175_i=$802&$or_cond18_i;
 if($or_cond175_i){label=259;break;}else{label=232;break;}
 case 232: 
 var $805=$791&16;
 var $806=($805|0)==0;
 if($806){label=237;break;}else{label=233;break;}
 case 233: 
 if($778){label=259;break;}else{label=234;break;}
 case 234: 
 var $809=_iswalnum($prev_c_0_i8);
 var $810=($809|0)==0;
 if($810){label=235;break;}else{label=259;break;}
 case 235: 
 var $812=HEAP32[(($next_c_i1)>>2)];
 var $813=($812|0)==95;
 if($813){label=237;break;}else{label=236;break;}
 case 236: 
 var $815=_iswalnum($812);
 var $816=($815|0)==0;
 if($816){label=259;break;}else{label=237;break;}
 case 237: 
 var $817=HEAP32[(($790)>>2)];
 var $818=$817&32;
 var $819=($818|0)==0;
 if($819){var $830=$817;label=243;break;}else{label=238;break;}
 case 238: 
 if($778){label=240;break;}else{label=239;break;}
 case 239: 
 var $822=_iswalnum($prev_c_0_i8);
 var $823=($822|0)==0;
 if($823){label=259;break;}else{label=240;break;}
 case 240: 
 var $824=HEAP32[(($next_c_i1)>>2)];
 var $825=($824|0)==95;
 if($825){label=259;break;}else{label=241;break;}
 case 241: 
 var $827=_iswalnum($824);
 var $828=($827|0)==0;
 if($828){label=242;break;}else{label=259;break;}
 case 242: 
 var $_pre166_i=HEAP32[(($790)>>2)];
 var $830=$_pre166_i;label=243;break;
 case 243: 
 var $830;
 var $831=$830&64;
 var $832=($831|0)==0;
 var $or_cond19_i=$832|$777;
 if($or_cond19_i){var $851=$830;label=251;break;}else{label=244;break;}
 case 244: 
 var $834=HEAP32[(($next_c_i1)>>2)];
 var $835=($834|0)==0;
 if($835){var $851=$830;label=251;break;}else{label=245;break;}
 case 245: 
 if($778){var $842=1;var $841=$834;label=247;break;}else{label=246;break;}
 case 246: 
 var $838=_iswalnum($prev_c_0_i8);
 var $839=($838|0)!=0;
 var $phitmp12_i=($839&1);
 var $_pre143_i=HEAP32[(($next_c_i1)>>2)];
 var $842=$phitmp12_i;var $841=$_pre143_i;label=247;break;
 case 247: 
 var $841;
 var $842;
 var $843=($841|0)==95;
 if($843){var $848=1;label=249;break;}else{label=248;break;}
 case 248: 
 var $845=_iswalnum($841);
 var $846=($845|0)!=0;
 var $phitmp13_i=($846&1);
 var $848=$phitmp13_i;label=249;break;
 case 249: 
 var $848;
 var $849=($842|0)==($848|0);
 if($849){label=259;break;}else{label=250;break;}
 case 250: 
 var $_pre167_i=HEAP32[(($790)>>2)];
 var $851=$_pre167_i;label=251;break;
 case 251: 
 var $851;
 var $852=$851&128;
 var $853=($852|0)==0;
 if($853){label=260;break;}else{label=252;break;}
 case 252: 
 if($777){label=259;break;}else{label=253;break;}
 case 253: 
 var $856=HEAP32[(($next_c_i1)>>2)];
 var $857=($856|0)==0;
 if($857){label=259;break;}else{label=254;break;}
 case 254: 
 if($778){var $864=1;var $863=$856;label=256;break;}else{label=255;break;}
 case 255: 
 var $860=_iswalnum($prev_c_0_i8);
 var $861=($860|0)!=0;
 var $phitmp10_i=($861&1);
 var $_pre_i14=HEAP32[(($next_c_i1)>>2)];
 var $864=$phitmp10_i;var $863=$_pre_i14;label=256;break;
 case 256: 
 var $863;
 var $864;
 var $865=($863|0)==95;
 if($865){var $870=1;label=258;break;}else{label=257;break;}
 case 257: 
 var $867=_iswalnum($863);
 var $868=($867|0)!=0;
 var $phitmp11_i=($868&1);
 var $870=$phitmp11_i;label=258;break;
 case 258: 
 var $870;
 var $871=($864|0)==($870|0);
 if($871){label=260;break;}else{label=259;break;}
 case 259: 
 var $873=(($trans_i_047_i+32)|0);
 var $874=(($trans_i_047_i+40)|0);
 var $875=HEAP32[(($874)>>2)];
 var $876=($875|0)==0;
 if($876){var $reach_next_i_1_ph105_i=$reach_next_i_1_ph110_i;var $match_eo_1_ph107_i=$match_eo_1_ph112_i;var $new_match_1_ph109_i=$new_match_1_ph114_i;label=274;break;}else{var $trans_i_047_i=$873;var $783=$874;label=227;break;}
 case 260: 
 var $877=HEAP32[(($783)>>2)];
 var $878=(($reach_next_i_1_ph110_i)|0);
 HEAP32[(($878)>>2)]=$877;
 if($760){label=261;break;}else{label=262;break;}
 case 261: 
 var $879=(($reach_next_i_1_ph110_i+4)|0);
 var $880=HEAP32[(($879)>>2)];
 var $881=$880;
 _memset($881, -1, $690)|0;
 label=262;break;
 case 262: 
 var $883=(($trans_i_047_i+16)|0);
 var $884=HEAP32[(($883)>>2)];
 var $885=($884|0)==0;
 if($885){label=268;break;}else{label=263;break;}
 case 263: 
 var $886=HEAP32[(($884)>>2)];
 var $887=($886|0)>-1;
 if($887){label=264;break;}else{label=268;break;}
 case 264: 
 var $888=(($reach_next_i_1_ph110_i+4)|0);
 var $tag_i_034_i=$884;var $890=$886;label=265;break;
 case 265: 
 var $890;
 var $tag_i_034_i;
 var $891=($890|0)<($num_tags_0_i|0);
 if($891){label=266;break;}else{label=267;break;}
 case 266: 
 var $893=HEAP32[(($888)>>2)];
 var $894=(($893+($890<<2))|0);
 HEAP32[(($894)>>2)]=$pos_0_i;
 label=267;break;
 case 267: 
 var $896=(($tag_i_034_i+4)|0);
 var $897=HEAP32[(($896)>>2)];
 var $898=($897|0)>-1;
 if($898){var $tag_i_034_i=$896;var $890=$897;label=265;break;}else{label=268;break;}
 case 268: 
 var $899=HEAP32[(($878)>>2)];
 var $900=HEAP32[(($762)>>2)];
 var $_not_i=($899|0)!=($900|0);
 var $brmerge177_i=$_not_i|$_not176_i;
 if($brmerge177_i){label=269;break;}else{label=270;break;}
 case 269: 
 var $new_match_1_ph114_mux_i=($_not_i?$new_match_1_ph114_i:1);
 var $match_eo_1_ph112_mux_i=($_not_i?$match_eo_1_ph112_i:$pos_0_i);
 var $_pre93=(($reach_next_i_1_ph110_i+4)|0);
 var $new_match_2_i=$new_match_1_ph114_mux_i;var $match_eo_2_i19=$match_eo_1_ph112_mux_i;var $_pre_phi=$_pre93;label=272;break;
 case 270: 
 var $901=(($reach_next_i_1_ph110_i+4)|0);
 var $902=HEAP32[(($901)>>2)];
 var $i_338_i=0;label=271;break;
 case 271: 
 var $i_338_i;
 var $904=(($902+($i_338_i<<2))|0);
 var $905=HEAP32[(($904)>>2)];
 var $906=(($tags_0+($i_338_i<<2))|0);
 HEAP32[(($906)>>2)]=$905;
 var $907=((($i_338_i)+(1))|0);
 var $908=($907|0)<($num_tags_0_i|0);
 if($908){var $i_338_i=$907;label=271;break;}else{var $new_match_2_i=1;var $match_eo_2_i19=$pos_0_i;var $_pre_phi=$901;label=272;break;}
 case 272: 
 var $_pre_phi;
 var $match_eo_2_i19;
 var $new_match_2_i;
 var $909=HEAP32[(($784)>>2)];
 var $910=(($727+($909<<3))|0);
 HEAP32[(($910)>>2)]=$pos_0_i;
 var $911=HEAP32[(($784)>>2)];
 var $912=(($727+($911<<3)+4)|0);
 HEAP32[(($912)>>2)]=$_pre_phi;
 var $913=(($reach_next_i_1_ph110_i+8)|0);
 var $new_match_3_i=$new_match_2_i;var $match_eo_3_i=$match_eo_2_i19;var $reach_next_i_2_i=$913;label=273;break;
 case 273: 
 var $reach_next_i_2_i;
 var $match_eo_3_i;
 var $new_match_3_i;
 var $914=(($trans_i_047_i+32)|0);
 var $915=(($trans_i_047_i+40)|0);
 var $916=HEAP32[(($915)>>2)];
 var $917=($916|0)==0;
 if($917){var $reach_next_i_1_ph105_i=$reach_next_i_2_i;var $match_eo_1_ph107_i=$match_eo_3_i;var $new_match_1_ph109_i=$new_match_3_i;label=274;break;}else{var $reach_next_i_1_ph110_i=$reach_next_i_2_i;var $match_eo_1_ph112_i=$match_eo_3_i;var $new_match_1_ph114_i=$new_match_3_i;var $trans_i_0_ph116_i=$914;var $781=$915;label=226;break;}
 case 274: 
 var $new_match_1_ph109_i;
 var $match_eo_1_ph107_i;
 var $reach_next_i_1_ph105_i;
 var $918=(($reach_next_i_1_ph105_i)|0);
 HEAP32[(($918)>>2)]=0;
 var $new_match_4_i=$new_match_1_ph109_i;var $match_eo_4_i=$match_eo_1_ph107_i;label=276;break;
 case 275: 
 var $920=($reach_next_i_0_i|0)==($reach_next_0_i|0);
 var $or_cond20_i=$769|$920;
 if($or_cond20_i){var $match_eo_10_i=$match_eo_0_i5;label=374;break;}else{var $new_match_4_i=$new_match_0_i;var $match_eo_4_i=$match_eo_0_i5;label=276;break;}
 case 276: 
 var $match_eo_4_i;
 var $new_match_4_i;
 var $921=HEAP32[(($next_c_i1)>>2)];
 var $922=($921|0)==0;
 if($922){var $match_eo_10_i=$match_eo_4_i;label=374;break;}else{label=277;break;}
 case 277: 
 var $924=((($pos_0_i)+($pos_add_next_1_i6))|0);
 var $925=_mbtowc($next_c_i1,$str_byte_0_i7,4);
 var $926=($925|0)<1;
 if($926){label=278;break;}else{var $pos_add_next_2_i=$925;label=280;break;}
 case 278: 
 var $928=($925|0)<0;
 if($928){var $status_096=1;label=377;break;}else{label=279;break;}
 case 279: 
 var $930=((($925)+(1))|0);
 var $pos_add_next_2_i=$930;label=280;break;
 case 280: 
 var $pos_add_next_2_i;
 var $932=(($str_byte_0_i7+$pos_add_next_2_i)|0);
 var $933=HEAP32[(($764)>>2)];
 var $934=($933|0)==0;
 var $935=($new_match_4_i|0)==0;
 var $or_cond21_i=$934|$935;
 if($or_cond21_i){var $reach_1_i=$reach_next_0_i;var $new_match_5_i=$new_match_4_i;var $reach_next_1_i=$reach_0_i;label=290;break;}else{label=281;break;}
 case 281: 
 var $936=(($reach_next_0_i)|0);
 var $937=HEAP32[(($936)>>2)];
 var $938=($937|0)==0;
 if($938){var $reach_next_i_3_lcssa_i=$reach_0_i;label=289;break;}else{var $reach_next_i_358_i=$reach_0_i;var $940=$936;var $939=$937;label=282;break;}
 case 282: 
 var $939;
 var $940;
 var $reach_next_i_358_i;
 var $941=HEAP32[(($768)>>2)];
 var $942=HEAP32[(($941)>>2)];
 var $943=($942|0)>-1;
 var $944=(($940+4)|0);
 if($943){var $i_453_i=0;var $945=$942;label=283;break;}else{label=287;break;}
 case 283: 
 var $945;
 var $i_453_i;
 var $946=$i_453_i|1;
 var $947=(($941+($946<<2))|0);
 var $948=HEAP32[(($947)>>2)];
 var $949=($945|0)<($num_tags_0_i|0);
 if($949){label=284;break;}else{var $reach_next_i_4_i=$reach_next_i_358_i;label=288;break;}
 case 284: 
 var $951=HEAP32[(($944)>>2)];
 var $952=(($951)|0);
 var $953=(($952+($948<<2))|0);
 var $954=HEAP32[(($953)>>2)];
 var $955=(($tags_0+($948<<2))|0);
 var $956=HEAP32[(($955)>>2)];
 var $957=($954|0)==($956|0);
 if($957){label=285;break;}else{label=286;break;}
 case 285: 
 var $959=(($952+($945<<2))|0);
 var $960=HEAP32[(($959)>>2)];
 var $961=(($tags_0+($945<<2))|0);
 var $962=HEAP32[(($961)>>2)];
 var $963=($960|0)<($962|0);
 if($963){var $reach_next_i_4_i=$reach_next_i_358_i;label=288;break;}else{label=286;break;}
 case 286: 
 var $965=((($i_453_i)+(2))|0);
 var $966=(($941+($965<<2))|0);
 var $967=HEAP32[(($966)>>2)];
 var $968=($967|0)>-1;
 if($968){var $i_453_i=$965;var $945=$967;label=283;break;}else{label=287;break;}
 case 287: 
 var $969=(($reach_next_i_358_i)|0);
 HEAP32[(($969)>>2)]=$939;
 var $970=(($reach_next_i_358_i+4)|0);
 var $971=HEAP32[(($970)>>2)];
 var $_pre_phi173_i=HEAP32[(($944)>>2)];
 var $972=(($_pre_phi173_i)|0);
 HEAP32[(($970)>>2)]=$972;
 var $_c_i=$971;
 HEAP32[(($944)>>2)]=$_c_i;
 var $973=(($reach_next_i_358_i+8)|0);
 var $reach_next_i_4_i=$973;label=288;break;
 case 288: 
 var $reach_next_i_4_i;
 var $974=(($940+8)|0);
 var $975=HEAP32[(($974)>>2)];
 var $976=($975|0)==0;
 if($976){var $reach_next_i_3_lcssa_i=$reach_next_i_4_i;label=289;break;}else{var $reach_next_i_358_i=$reach_next_i_4_i;var $940=$974;var $939=$975;label=282;break;}
 case 289: 
 var $reach_next_i_3_lcssa_i;
 var $977=(($reach_next_i_3_lcssa_i)|0);
 HEAP32[(($977)>>2)]=0;
 var $reach_1_i=$reach_0_i;var $new_match_5_i=0;var $reach_next_1_i=$reach_next_0_i;label=290;break;
 case 290: 
 var $reach_next_1_i;
 var $new_match_5_i;
 var $reach_1_i;
 var $979=(($reach_1_i)|0);
 var $980=HEAP32[(($979)>>2)];
 var $981=($980|0)==0;
 if($981){var $reach_next_i_5_lcssa_i=$reach_next_1_i;var $match_eo_5_lcssa_i=$match_eo_4_i;var $new_match_6_lcssa_i=$new_match_5_i;var $tmp_tags_1_lcssa_i=$tmp_tags_0_i;label=373;break;}else{label=291;break;}
 case 291: 
 var $982=($924|0)==0;
 var $983=($921|0)==95;
 var $984=($924|0)<1;
 var $or_cond22_i=$984&$759;
 var $985=($921|0)!=10;
 var $or_cond23_i=$985|$758;
 var $or_cond23_not_i=$or_cond23_i^1;
 var $reach_i_193_i=$reach_1_i;var $reach_next_i_594_i=$reach_next_1_i;var $match_eo_595_i=$match_eo_4_i;var $new_match_696_i=$new_match_5_i;var $tmp_tags_197_i=$tmp_tags_0_i;var $986=$980;label=292;break;
 case 292: 
 var $986;
 var $tmp_tags_197_i;
 var $new_match_696_i;
 var $match_eo_595_i;
 var $reach_next_i_594_i;
 var $reach_i_193_i;
 var $987=(($986+8)|0);
 var $988=HEAP32[(($987)>>2)];
 var $989=($988|0)==0;
 if($989){var $reach_next_i_6_lcssa_i=$reach_next_i_594_i;var $match_eo_6_lcssa_i=$match_eo_595_i;var $new_match_7_lcssa_i=$new_match_696_i;var $tmp_tags_2_lcssa_i=$tmp_tags_197_i;label=372;break;}else{label=293;break;}
 case 293: 
 var $990=(($reach_i_193_i+4)|0);
 var $reach_next_i_679_i=$reach_next_i_594_i;var $match_eo_681_i=$match_eo_595_i;var $new_match_782_i=$new_match_696_i;var $tmp_tags_283_i=$tmp_tags_197_i;var $trans_i_184_i=$986;var $992=$987;label=294;break;
 case 294: 
 var $992;
 var $trans_i_184_i;
 var $tmp_tags_283_i;
 var $new_match_782_i;
 var $match_eo_681_i;
 var $reach_next_i_679_i;
 var $993=(($trans_i_184_i)|0);
 var $994=HEAP32[(($993)>>2)];
 var $995=($994>>>0)>($921>>>0);
 if($995){var $tmp_tags_3_i=$tmp_tags_283_i;var $new_match_10_i=$new_match_782_i;var $match_eo_9_i=$match_eo_681_i;var $reach_next_i_7_i=$reach_next_i_679_i;label=371;break;}else{label=295;break;}
 case 295: 
 var $997=(($trans_i_184_i+4)|0);
 var $998=HEAP32[(($997)>>2)];
 var $999=($998>>>0)<($921>>>0);
 if($999){var $tmp_tags_3_i=$tmp_tags_283_i;var $new_match_10_i=$new_match_782_i;var $match_eo_9_i=$match_eo_681_i;var $reach_next_i_7_i=$reach_next_i_679_i;label=371;break;}else{label=296;break;}
 case 296: 
 var $1001=(($trans_i_184_i+20)|0);
 var $1002=HEAP32[(($1001)>>2)];
 var $1003=($1002|0)==0;
 if($1003){label=344;break;}else{label=297;break;}
 case 297: 
 var $1005=$1002&1;
 var $1006=($1005|0)==0;
 var $brmerge178_i=$1006|$or_cond22_i;
 var $brmerge179_i=$brmerge178_i|$or_cond23_not_i;
 if($brmerge179_i){label=298;break;}else{var $tmp_tags_3_i=$tmp_tags_283_i;var $new_match_10_i=$new_match_782_i;var $match_eo_9_i=$match_eo_681_i;var $reach_next_i_7_i=$reach_next_i_679_i;label=371;break;}
 case 298: 
 var $1008=$1002&2;
 var $1009=($1008|0)==0;
 if($1009){label=300;break;}else{label=299;break;}
 case 299: 
 var $1011=HEAP32[(($next_c_i1)>>2)];
 var $1012=$1011|$681;
 var $1013=($1012|0)!=0;
 var $1014=($1011|0)!=10;
 var $or_cond25_i=$1014|$758;
 var $or_cond180_i=$1013&$or_cond25_i;
 if($or_cond180_i){var $tmp_tags_3_i=$tmp_tags_283_i;var $new_match_10_i=$new_match_782_i;var $match_eo_9_i=$match_eo_681_i;var $reach_next_i_7_i=$reach_next_i_679_i;label=371;break;}else{label=300;break;}
 case 300: 
 var $1016=$1002&16;
 var $1017=($1016|0)==0;
 if($1017){label=305;break;}else{label=301;break;}
 case 301: 
 if($983){var $tmp_tags_3_i=$tmp_tags_283_i;var $new_match_10_i=$new_match_782_i;var $match_eo_9_i=$match_eo_681_i;var $reach_next_i_7_i=$reach_next_i_679_i;label=371;break;}else{label=302;break;}
 case 302: 
 var $1020=_iswalnum($921);
 var $1021=($1020|0)==0;
 if($1021){label=303;break;}else{var $tmp_tags_3_i=$tmp_tags_283_i;var $new_match_10_i=$new_match_782_i;var $match_eo_9_i=$match_eo_681_i;var $reach_next_i_7_i=$reach_next_i_679_i;label=371;break;}
 case 303: 
 var $1023=HEAP32[(($next_c_i1)>>2)];
 var $1024=($1023|0)==95;
 if($1024){label=305;break;}else{label=304;break;}
 case 304: 
 var $1026=_iswalnum($1023);
 var $1027=($1026|0)==0;
 if($1027){var $tmp_tags_3_i=$tmp_tags_283_i;var $new_match_10_i=$new_match_782_i;var $match_eo_9_i=$match_eo_681_i;var $reach_next_i_7_i=$reach_next_i_679_i;label=371;break;}else{label=305;break;}
 case 305: 
 var $1028=HEAP32[(($1001)>>2)];
 var $1029=$1028&32;
 var $1030=($1029|0)==0;
 if($1030){var $1041=$1028;label=311;break;}else{label=306;break;}
 case 306: 
 if($983){label=308;break;}else{label=307;break;}
 case 307: 
 var $1033=_iswalnum($921);
 var $1034=($1033|0)==0;
 if($1034){var $tmp_tags_3_i=$tmp_tags_283_i;var $new_match_10_i=$new_match_782_i;var $match_eo_9_i=$match_eo_681_i;var $reach_next_i_7_i=$reach_next_i_679_i;label=371;break;}else{label=308;break;}
 case 308: 
 var $1035=HEAP32[(($next_c_i1)>>2)];
 var $1036=($1035|0)==95;
 if($1036){var $tmp_tags_3_i=$tmp_tags_283_i;var $new_match_10_i=$new_match_782_i;var $match_eo_9_i=$match_eo_681_i;var $reach_next_i_7_i=$reach_next_i_679_i;label=371;break;}else{label=309;break;}
 case 309: 
 var $1038=_iswalnum($1035);
 var $1039=($1038|0)==0;
 if($1039){label=310;break;}else{var $tmp_tags_3_i=$tmp_tags_283_i;var $new_match_10_i=$new_match_782_i;var $match_eo_9_i=$match_eo_681_i;var $reach_next_i_7_i=$reach_next_i_679_i;label=371;break;}
 case 310: 
 var $_pre168_i=HEAP32[(($1001)>>2)];
 var $1041=$_pre168_i;label=311;break;
 case 311: 
 var $1041;
 var $1042=$1041&64;
 var $1043=($1042|0)==0;
 var $or_cond26_i=$1043|$982;
 if($or_cond26_i){var $1062=$1041;label=319;break;}else{label=312;break;}
 case 312: 
 var $1045=HEAP32[(($next_c_i1)>>2)];
 var $1046=($1045|0)==0;
 if($1046){var $1062=$1041;label=319;break;}else{label=313;break;}
 case 313: 
 if($983){var $1053=1;var $1052=$1045;label=315;break;}else{label=314;break;}
 case 314: 
 var $1049=_iswalnum($921);
 var $1050=($1049|0)!=0;
 var $phitmp8_i=($1050&1);
 var $_pre145_i=HEAP32[(($next_c_i1)>>2)];
 var $1053=$phitmp8_i;var $1052=$_pre145_i;label=315;break;
 case 315: 
 var $1052;
 var $1053;
 var $1054=($1052|0)==95;
 if($1054){var $1059=1;label=317;break;}else{label=316;break;}
 case 316: 
 var $1056=_iswalnum($1052);
 var $1057=($1056|0)!=0;
 var $phitmp9_i=($1057&1);
 var $1059=$phitmp9_i;label=317;break;
 case 317: 
 var $1059;
 var $1060=($1053|0)==($1059|0);
 if($1060){var $tmp_tags_3_i=$tmp_tags_283_i;var $new_match_10_i=$new_match_782_i;var $match_eo_9_i=$match_eo_681_i;var $reach_next_i_7_i=$reach_next_i_679_i;label=371;break;}else{label=318;break;}
 case 318: 
 var $_pre169_i=HEAP32[(($1001)>>2)];
 var $1062=$_pre169_i;label=319;break;
 case 319: 
 var $1062;
 var $1063=$1062&128;
 var $1064=($1063|0)==0;
 if($1064){var $1084=$1062;label=328;break;}else{label=320;break;}
 case 320: 
 if($982){var $tmp_tags_3_i=$tmp_tags_283_i;var $new_match_10_i=$new_match_782_i;var $match_eo_9_i=$match_eo_681_i;var $reach_next_i_7_i=$reach_next_i_679_i;label=371;break;}else{label=321;break;}
 case 321: 
 var $1067=HEAP32[(($next_c_i1)>>2)];
 var $1068=($1067|0)==0;
 if($1068){var $tmp_tags_3_i=$tmp_tags_283_i;var $new_match_10_i=$new_match_782_i;var $match_eo_9_i=$match_eo_681_i;var $reach_next_i_7_i=$reach_next_i_679_i;label=371;break;}else{label=322;break;}
 case 322: 
 if($983){var $1075=1;var $1074=$1067;label=324;break;}else{label=323;break;}
 case 323: 
 var $1071=_iswalnum($921);
 var $1072=($1071|0)!=0;
 var $phitmp_i22=($1072&1);
 var $_pre144_i=HEAP32[(($next_c_i1)>>2)];
 var $1075=$phitmp_i22;var $1074=$_pre144_i;label=324;break;
 case 324: 
 var $1074;
 var $1075;
 var $1076=($1074|0)==95;
 if($1076){var $1081=1;label=326;break;}else{label=325;break;}
 case 325: 
 var $1078=_iswalnum($1074);
 var $1079=($1078|0)!=0;
 var $phitmp7_i23=($1079&1);
 var $1081=$phitmp7_i23;label=326;break;
 case 326: 
 var $1081;
 var $1082=($1075|0)==($1081|0);
 if($1082){label=327;break;}else{var $tmp_tags_3_i=$tmp_tags_283_i;var $new_match_10_i=$new_match_782_i;var $match_eo_9_i=$match_eo_681_i;var $reach_next_i_7_i=$reach_next_i_679_i;label=371;break;}
 case 327: 
 var $_pre170_i=HEAP32[(($1001)>>2)];
 var $1084=$_pre170_i;label=328;break;
 case 328: 
 var $1084;
 var $1085=$1084&4;
 var $1086=($1085|0)==0;
 if($1086){var $1097=$1084;label=332;break;}else{label=329;break;}
 case 329: 
 var $1088=HEAP32[(($683)>>2)];
 var $1089=$1088&2;
 var $1090=($1089|0)==0;
 if($1090){label=330;break;}else{var $1097=$1084;label=332;break;}
 case 330: 
 var $1092=(($trans_i_184_i+24)|0);
 var $1093=HEAP32[(($1092)>>2)];
 var $1094=_iswctype($921,$1093);
 var $1095=($1094|0)==0;
 if($1095){var $tmp_tags_3_i=$tmp_tags_283_i;var $new_match_10_i=$new_match_782_i;var $match_eo_9_i=$match_eo_681_i;var $reach_next_i_7_i=$reach_next_i_679_i;label=371;break;}else{label=331;break;}
 case 331: 
 var $_pre171_i=HEAP32[(($1001)>>2)];
 var $1097=$_pre171_i;label=332;break;
 case 332: 
 var $1097;
 var $1098=$1097&4;
 var $1099=($1098|0)==0;
 if($1099){label=336;break;}else{label=333;break;}
 case 333: 
 var $1101=HEAP32[(($683)>>2)];
 var $1102=$1101&2;
 var $1103=($1102|0)==0;
 if($1103){label=336;break;}else{label=334;break;}
 case 334: 
 var $1105=_towlower($921);
 var $1106=(($trans_i_184_i+24)|0);
 var $1107=HEAP32[(($1106)>>2)];
 var $1108=_iswctype($1105,$1107);
 var $1109=($1108|0)==0;
 if($1109){label=335;break;}else{label=336;break;}
 case 335: 
 var $1111=_towupper($921);
 var $1112=HEAP32[(($1106)>>2)];
 var $1113=_iswctype($1111,$1112);
 var $1114=($1113|0)==0;
 if($1114){var $tmp_tags_3_i=$tmp_tags_283_i;var $new_match_10_i=$new_match_782_i;var $match_eo_9_i=$match_eo_681_i;var $reach_next_i_7_i=$reach_next_i_679_i;label=371;break;}else{label=336;break;}
 case 336: 
 var $1115=HEAP32[(($1001)>>2)];
 var $1116=$1115&8;
 var $1117=($1116|0)==0;
 if($1117){label=344;break;}else{label=337;break;}
 case 337: 
 var $1119=(($trans_i_184_i+28)|0);
 var $1120=HEAP32[(($1119)>>2)];
 var $1121=HEAP32[(($1120)>>2)];
 var $1122=($1121|0)==0;
 if($1122){label=344;break;}else{label=338;break;}
 case 338: 
 var $1123=HEAP32[(($683)>>2)];
 var $1124=$1123&2;
 var $1125=($1124|0)==0;
 if($1125){var $_012_us_i_i25=$1120;var $1126=$1121;label=339;break;}else{var $_012_i_i27=$1120;label=341;break;}
 case 339: 
 var $1126;
 var $_012_us_i_i25;
 var $1127=_iswctype($921,$1126);
 var $1128=($1127|0)==0;
 if($1128){label=340;break;}else{var $tmp_tags_3_i=$tmp_tags_283_i;var $new_match_10_i=$new_match_782_i;var $match_eo_9_i=$match_eo_681_i;var $reach_next_i_7_i=$reach_next_i_679_i;label=371;break;}
 case 340: 
 var $1130=(($_012_us_i_i25+4)|0);
 var $1131=HEAP32[(($1130)>>2)];
 var $1132=($1131|0)==0;
 if($1132){label=344;break;}else{var $_012_us_i_i25=$1130;var $1126=$1131;label=339;break;}
 case 341: 
 var $_012_i_i27;
 var $1133=_towupper($921);
 var $1134=HEAP32[(($_012_i_i27)>>2)];
 var $1135=_iswctype($1133,$1134);
 var $1136=($1135|0)==0;
 if($1136){label=342;break;}else{var $tmp_tags_3_i=$tmp_tags_283_i;var $new_match_10_i=$new_match_782_i;var $match_eo_9_i=$match_eo_681_i;var $reach_next_i_7_i=$reach_next_i_679_i;label=371;break;}
 case 342: 
 var $1138=_towlower($921);
 var $1139=HEAP32[(($_012_i_i27)>>2)];
 var $1140=_iswctype($1138,$1139);
 var $1141=($1140|0)==0;
 if($1141){label=343;break;}else{var $tmp_tags_3_i=$tmp_tags_283_i;var $new_match_10_i=$new_match_782_i;var $match_eo_9_i=$match_eo_681_i;var $reach_next_i_7_i=$reach_next_i_679_i;label=371;break;}
 case 343: 
 var $1143=(($_012_i_i27+4)|0);
 var $1144=HEAP32[(($1143)>>2)];
 var $1145=($1144|0)==0;
 if($1145){label=344;break;}else{var $_012_i_i27=$1143;label=341;break;}
 case 344: 
 if($760){label=345;break;}else{label=347;break;}
 case 345: 
 var $1146=HEAP32[(($990)>>2)];
 var $i_563_i=0;label=346;break;
 case 346: 
 var $i_563_i;
 var $1147=(($1146+($i_563_i<<2))|0);
 var $1148=HEAP32[(($1147)>>2)];
 var $1149=(($tmp_tags_283_i+($i_563_i<<2))|0);
 HEAP32[(($1149)>>2)]=$1148;
 var $1150=((($i_563_i)+(1))|0);
 var $1151=($1150|0)<($num_tags_0_i|0);
 if($1151){var $i_563_i=$1150;label=346;break;}else{label=347;break;}
 case 347: 
 var $1152=(($trans_i_184_i+16)|0);
 var $1153=HEAP32[(($1152)>>2)];
 var $1154=($1153|0)==0;
 if($1154){label=352;break;}else{label=348;break;}
 case 348: 
 var $1155=HEAP32[(($1153)>>2)];
 var $1156=($1155|0)>-1;
 if($1156){var $tag_i_167_i=$1153;var $1157=$1155;label=349;break;}else{label=352;break;}
 case 349: 
 var $1157;
 var $tag_i_167_i;
 var $1158=($1157|0)<($num_tags_0_i|0);
 if($1158){label=350;break;}else{label=351;break;}
 case 350: 
 var $1160=(($tmp_tags_283_i+($1157<<2))|0);
 HEAP32[(($1160)>>2)]=$924;
 label=351;break;
 case 351: 
 var $1162=(($tag_i_167_i+4)|0);
 var $1163=HEAP32[(($1162)>>2)];
 var $1164=($1163|0)>-1;
 if($1164){var $tag_i_167_i=$1162;var $1157=$1163;label=349;break;}else{label=352;break;}
 case 352: 
 var $1165=(($trans_i_184_i+12)|0);
 var $1166=HEAP32[(($1165)>>2)];
 var $1167=(($727+($1166<<3))|0);
 var $1168=HEAP32[(($1167)>>2)];
 var $1169=($1168|0)<($924|0);
 if($1169){label=353;break;}else{label=362;break;}
 case 353: 
 var $1171=HEAP32[(($992)>>2)];
 var $1172=(($reach_next_i_679_i)|0);
 HEAP32[(($1172)>>2)]=$1171;
 var $1173=(($reach_next_i_679_i+4)|0);
 var $1174=HEAP32[(($1173)>>2)];
 HEAP32[(($1173)>>2)]=$tmp_tags_283_i;
 HEAP32[(($1167)>>2)]=$924;
 var $1175=HEAP32[(($1165)>>2)];
 var $1176=(($727+($1175<<3)+4)|0);
 HEAP32[(($1176)>>2)]=$1173;
 var $1177=HEAP32[(($1172)>>2)];
 var $1178=HEAP32[(($762)>>2)];
 var $1179=($1177|0)==($1178|0);
 if($1179){label=354;break;}else{var $new_match_8_i=$new_match_782_i;var $match_eo_7_i=$match_eo_681_i;label=361;break;}
 case 354: 
 var $1181=($match_eo_681_i|0)==-1;
 if($1181){label=357;break;}else{label=355;break;}
 case 355: 
 if($760){label=356;break;}else{var $new_match_8_i=$new_match_782_i;var $match_eo_7_i=$match_eo_681_i;label=361;break;}
 case 356: 
 var $1184=HEAP32[(($1173)>>2)];
 var $1185=HEAP32[(($1184)>>2)];
 var $1186=HEAP32[(($tags_0)>>2)];
 var $1187=($1185|0)>($1186|0);
 if($1187){var $new_match_8_i=$new_match_782_i;var $match_eo_7_i=$match_eo_681_i;label=361;break;}else{var $1188=$1184;label=359;break;}
 case 357: 
 if($760){label=358;break;}else{var $new_match_8_i=1;var $match_eo_7_i=$924;label=361;break;}
 case 358: 
 var $_pre=HEAP32[(($1173)>>2)];
 var $1188=$_pre;label=359;break;
 case 359: 
 var $1188;
 var $i_676_i=0;label=360;break;
 case 360: 
 var $i_676_i;
 var $1189=(($1188+($i_676_i<<2))|0);
 var $1190=HEAP32[(($1189)>>2)];
 var $1191=(($tags_0+($i_676_i<<2))|0);
 HEAP32[(($1191)>>2)]=$1190;
 var $1192=((($i_676_i)+(1))|0);
 var $1193=($1192|0)<($num_tags_0_i|0);
 if($1193){var $i_676_i=$1192;label=360;break;}else{var $new_match_8_i=1;var $match_eo_7_i=$924;label=361;break;}
 case 361: 
 var $match_eo_7_i;
 var $new_match_8_i;
 var $1194=(($reach_next_i_679_i+8)|0);
 var $tmp_tags_3_i=$1174;var $new_match_10_i=$new_match_8_i;var $match_eo_9_i=$match_eo_7_i;var $reach_next_i_7_i=$1194;label=371;break;
 case 362: 
 var $1196=HEAP32[(($766)>>2)];
 var $1197=(($727+($1166<<3)+4)|0);
 var $1198=HEAP32[(($1197)>>2)];
 var $1199=HEAP32[(($1198)>>2)];
 if($760){var $i_01_i_i30=0;label=363;break;}else{var $tmp_tags_3_i=$tmp_tags_283_i;var $new_match_10_i=$new_match_782_i;var $match_eo_9_i=$match_eo_681_i;var $reach_next_i_7_i=$reach_next_i_679_i;label=371;break;}
 case 363: 
 var $i_01_i_i30;
 var $1200=(($1196+($i_01_i_i30<<2))|0);
 var $1201=HEAP32[(($1200)>>2)];
 var $1202=($1201|0)==0;
 var $1203=(($tmp_tags_283_i+($i_01_i_i30<<2))|0);
 var $1204=HEAP32[(($1203)>>2)];
 var $1205=(($1199+($i_01_i_i30<<2))|0);
 var $1206=HEAP32[(($1205)>>2)];
 if($1202){label=364;break;}else{label=366;break;}
 case 364: 
 var $1208=($1204|0)<($1206|0);
 if($1208){label=369;break;}else{label=365;break;}
 case 365: 
 var $1210=($1204|0)>($1206|0);
 if($1210){var $tmp_tags_3_i=$tmp_tags_283_i;var $new_match_10_i=$new_match_782_i;var $match_eo_9_i=$match_eo_681_i;var $reach_next_i_7_i=$reach_next_i_679_i;label=371;break;}else{label=368;break;}
 case 366: 
 var $1212=($1204|0)>($1206|0);
 if($1212){label=369;break;}else{label=367;break;}
 case 367: 
 var $1214=($1204|0)<($1206|0);
 if($1214){var $tmp_tags_3_i=$tmp_tags_283_i;var $new_match_10_i=$new_match_782_i;var $match_eo_9_i=$match_eo_681_i;var $reach_next_i_7_i=$reach_next_i_679_i;label=371;break;}else{label=368;break;}
 case 368: 
 var $1216=((($i_01_i_i30)+(1))|0);
 var $1217=($1216|0)<($num_tags_0_i|0);
 if($1217){var $i_01_i_i30=$1216;label=363;break;}else{var $tmp_tags_3_i=$tmp_tags_283_i;var $new_match_10_i=$new_match_782_i;var $match_eo_9_i=$match_eo_681_i;var $reach_next_i_7_i=$reach_next_i_679_i;label=371;break;}
 case 369: 
 HEAP32[(($1198)>>2)]=$tmp_tags_283_i;
 var $1219=HEAP32[(($992)>>2)];
 var $1220=HEAP32[(($762)>>2)];
 var $1221=($1219|0)==($1220|0);
 if($1221){var $i_772_i=0;label=370;break;}else{var $tmp_tags_3_i=$1199;var $new_match_10_i=$new_match_782_i;var $match_eo_9_i=$match_eo_681_i;var $reach_next_i_7_i=$reach_next_i_679_i;label=371;break;}
 case 370: 
 var $i_772_i;
 var $1222=(($tmp_tags_283_i+($i_772_i<<2))|0);
 var $1223=HEAP32[(($1222)>>2)];
 var $1224=(($tags_0+($i_772_i<<2))|0);
 HEAP32[(($1224)>>2)]=$1223;
 var $1225=((($i_772_i)+(1))|0);
 var $1226=($1225|0)<($num_tags_0_i|0);
 if($1226){var $i_772_i=$1225;label=370;break;}else{var $tmp_tags_3_i=$1199;var $new_match_10_i=1;var $match_eo_9_i=$924;var $reach_next_i_7_i=$reach_next_i_679_i;label=371;break;}
 case 371: 
 var $reach_next_i_7_i;
 var $match_eo_9_i;
 var $new_match_10_i;
 var $tmp_tags_3_i;
 var $1227=(($trans_i_184_i+32)|0);
 var $1228=(($trans_i_184_i+40)|0);
 var $1229=HEAP32[(($1228)>>2)];
 var $1230=($1229|0)==0;
 if($1230){var $reach_next_i_6_lcssa_i=$reach_next_i_7_i;var $match_eo_6_lcssa_i=$match_eo_9_i;var $new_match_7_lcssa_i=$new_match_10_i;var $tmp_tags_2_lcssa_i=$tmp_tags_3_i;label=372;break;}else{var $reach_next_i_679_i=$reach_next_i_7_i;var $match_eo_681_i=$match_eo_9_i;var $new_match_782_i=$new_match_10_i;var $tmp_tags_283_i=$tmp_tags_3_i;var $trans_i_184_i=$1227;var $992=$1228;label=294;break;}
 case 372: 
 var $tmp_tags_2_lcssa_i;
 var $new_match_7_lcssa_i;
 var $match_eo_6_lcssa_i;
 var $reach_next_i_6_lcssa_i;
 var $1231=(($reach_i_193_i+8)|0);
 var $1232=(($1231)|0);
 var $1233=HEAP32[(($1232)>>2)];
 var $1234=($1233|0)==0;
 if($1234){var $reach_next_i_5_lcssa_i=$reach_next_i_6_lcssa_i;var $match_eo_5_lcssa_i=$match_eo_6_lcssa_i;var $new_match_6_lcssa_i=$new_match_7_lcssa_i;var $tmp_tags_1_lcssa_i=$tmp_tags_2_lcssa_i;label=373;break;}else{var $reach_i_193_i=$1231;var $reach_next_i_594_i=$reach_next_i_6_lcssa_i;var $match_eo_595_i=$match_eo_6_lcssa_i;var $new_match_696_i=$new_match_7_lcssa_i;var $tmp_tags_197_i=$tmp_tags_2_lcssa_i;var $986=$1233;label=292;break;}
 case 373: 
 var $tmp_tags_1_lcssa_i;
 var $new_match_6_lcssa_i;
 var $match_eo_5_lcssa_i;
 var $reach_next_i_5_lcssa_i;
 var $1235=(($reach_next_i_5_lcssa_i)|0);
 HEAP32[(($1235)>>2)]=0;
 var $prev_c_0_i8=$921;var $str_byte_0_i7=$932;var $pos_0_i=$924;var $pos_add_next_1_i6=$pos_add_next_2_i;var $reach_0_i=$reach_1_i;var $tmp_tags_0_i=$tmp_tags_1_lcssa_i;var $new_match_0_i=$new_match_6_lcssa_i;var $match_eo_0_i5=$match_eo_5_lcssa_i;var $reach_next_0_i=$reach_next_1_i;var $reach_next_i_0_i=$reach_next_i_5_lcssa_i;label=223;break;
 case 374: 
 var $match_eo_10_i;
 _free($702);
 var $match_eo_10_lobit_i=$match_eo_10_i>>>31;
 var $status_0=$match_eo_10_lobit_i;var $match_eo_10_i32=$match_eo_10_i;label=375;break;
 case 375: 
 var $match_eo_10_i32;
 var $status_0;
 var $1237=($status_0|0)==0;
 if($1237){label=376;break;}else{var $status_096=$status_0;label=377;break;}
 case 376: 
 var $1239=(($2+56)|0);
 var $1240=$1239;
 var $1241=HEAP32[(($1240)>>2)];
 _tre_fill_pmatch($nmatch,$pmatch,$1241,$3,$tags_0,$match_eo_10_i32);
 var $status_096=0;label=377;break;
 case 377: 
 var $status_096;
 var $1242=($tags_0|0)==0;
 if($1242){var $_0=$status_096;label=379;break;}else{label=378;break;}
 case 378: 
 _free($15);
 var $_0=$status_096;label=379;break;
 case 379: 
 var $_0;
 STACKTOP=sp;return $_0;
  default: assert(0, "bad label: " + label);
 }

}


function _tre_fill_pmatch($nmatch,$pmatch,$cflags,$tnfa,$tags,$match_eo){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($match_eo|0)>-1;
 if($1){label=2;break;}else{var $i_2_ph=0;label=3;break;}
 case 2: 
 var $3=$cflags&8;
 var $4=($3|0)==0;
 if($4){label=4;break;}else{var $i_2_ph=0;label=3;break;}
 case 3: 
 var $i_2_ph;
 var $5=($i_2_ph>>>0)<($nmatch>>>0);
 if($5){var $i_23=$i_2_ph;label=25;break;}else{label=26;break;}
 case 4: 
 var $7=(($tnfa+16)|0);
 var $8=HEAP32[(($7)>>2)];
 var $9=(($tnfa+28)|0);
 var $10=HEAP32[(($9)>>2)];
 var $11=($10|0)!=0;
 var $12=($nmatch|0)!=0;
 var $or_cond9=$11&$12;
 if($or_cond9){label=5;break;}else{var $14=$10;label=6;break;}
 case 5: 
 var $13=(($tnfa+48)|0);
 var $i_010=0;label=7;break;
 case 6: 
 var $14;
 var $15=($14|0)!=0;
 var $or_cond26=$15&$12;
 if($or_cond26){var $i_17=0;var $49=$14;label=16;break;}else{var $i_2_ph=0;label=3;break;}
 case 7: 
 var $i_010;
 var $17=(($8+((($i_010)*(12))&-1))|0);
 var $18=HEAP32[(($17)>>2)];
 var $19=HEAP32[(($13)>>2)];
 var $20=($18|0)==($19|0);
 if($20){label=8;break;}else{label=9;break;}
 case 8: 
 var $22=(($pmatch+($i_010<<3))|0);
 HEAP32[(($22)>>2)]=$match_eo;
 var $28=$match_eo;label=10;break;
 case 9: 
 var $24=(($tags+($18<<2))|0);
 var $25=HEAP32[(($24)>>2)];
 var $26=(($pmatch+($i_010<<3))|0);
 HEAP32[(($26)>>2)]=$25;
 var $28=$25;label=10;break;
 case 10: 
 var $28;
 var $29=(($8+((($i_010)*(12))&-1)+4)|0);
 var $30=HEAP32[(($29)>>2)];
 var $31=HEAP32[(($13)>>2)];
 var $32=($30|0)==($31|0);
 if($32){label=11;break;}else{label=12;break;}
 case 11: 
 var $34=(($pmatch+($i_010<<3)+4)|0);
 HEAP32[(($34)>>2)]=$match_eo;
 var $40=$match_eo;label=13;break;
 case 12: 
 var $36=(($tags+($30<<2))|0);
 var $37=HEAP32[(($36)>>2)];
 var $38=(($pmatch+($i_010<<3)+4)|0);
 HEAP32[(($38)>>2)]=$37;
 var $40=$37;label=13;break;
 case 13: 
 var $40;
 var $41=($28|0)==-1;
 var $42=($40|0)==-1;
 var $or_cond17=$41|$42;
 if($or_cond17){label=14;break;}else{label=15;break;}
 case 14: 
 var $43=(($pmatch+($i_010<<3))|0);
 var $_pre_phi=(($pmatch+($i_010<<3)+4)|0);
 HEAP32[(($_pre_phi)>>2)]=-1;
 HEAP32[(($43)>>2)]=-1;
 label=15;break;
 case 15: 
 var $45=((($i_010)+(1))|0);
 var $46=HEAP32[(($9)>>2)];
 var $47=($45>>>0)<($46>>>0);
 var $48=($45>>>0)<($nmatch>>>0);
 var $or_cond=$47&$48;
 if($or_cond){var $i_010=$45;label=7;break;}else{var $14=$46;label=6;break;}
 case 16: 
 var $49;
 var $i_17;
 var $50=(($pmatch+($i_17<<3)+4)|0);
 var $51=(($8+((($i_17)*(12))&-1)+8)|0);
 var $52=HEAP32[(($51)>>2)];
 var $53=($52|0)==0;
 if($53){var $75=$49;label=24;break;}else{label=17;break;}
 case 17: 
 var $54=HEAP32[(($52)>>2)];
 var $55=($54|0)>-1;
 if($55){label=18;break;}else{var $75=$49;label=24;break;}
 case 18: 
 var $56=(($pmatch+($i_17<<3))|0);
 var $_pre=HEAP32[(($56)>>2)];
 var $j_04=0;var $59=$54;var $58=$_pre;label=19;break;
 case 19: 
 var $58;
 var $59;
 var $j_04;
 var $60=(($pmatch+($59<<3))|0);
 var $61=HEAP32[(($60)>>2)];
 var $62=($58|0)<($61|0);
 if($62){label=21;break;}else{label=20;break;}
 case 20: 
 var $64=HEAP32[(($50)>>2)];
 var $65=(($pmatch+($59<<3)+4)|0);
 var $66=HEAP32[(($65)>>2)];
 var $67=($64|0)>($66|0);
 if($67){label=21;break;}else{var $70=$58;label=22;break;}
 case 21: 
 HEAP32[(($50)>>2)]=-1;
 HEAP32[(($56)>>2)]=-1;
 var $70=-1;label=22;break;
 case 22: 
 var $70;
 var $71=((($j_04)+(1))|0);
 var $72=(($52+($71<<2))|0);
 var $73=HEAP32[(($72)>>2)];
 var $74=($73|0)>-1;
 if($74){var $j_04=$71;var $59=$73;var $58=$70;label=19;break;}else{label=23;break;}
 case 23: 
 var $_pre14_pre=HEAP32[(($9)>>2)];
 var $75=$_pre14_pre;label=24;break;
 case 24: 
 var $75;
 var $76=((($i_17)+(1))|0);
 var $77=($76>>>0)<($75>>>0);
 var $78=($76>>>0)<($nmatch>>>0);
 var $or_cond2=$77&$78;
 if($or_cond2){var $i_17=$76;var $49=$75;label=16;break;}else{var $i_2_ph=$76;label=3;break;}
 case 25: 
 var $i_23;
 var $79=(($pmatch+($i_23<<3))|0);
 HEAP32[(($79)>>2)]=-1;
 var $80=(($pmatch+($i_23<<3)+4)|0);
 HEAP32[(($80)>>2)]=-1;
 var $81=((($i_23)+(1))|0);
 var $82=($81>>>0)<($nmatch>>>0);
 if($82){var $i_23=$81;label=25;break;}else{label=26;break;}
 case 26: 
 return;
  default: assert(0, "bad label: " + label);
 }

}


function ___tre_mem_new_impl($provided,$provided_block){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($provided|0)==0;
 if($1){label=3;break;}else{label=2;break;}
 case 2: 
 HEAP32[(($provided_block)>>2)]=0; HEAP32[((($provided_block)+(4))>>2)]=0; HEAP32[((($provided_block)+(8))>>2)]=0; HEAP32[((($provided_block)+(12))>>2)]=0; HEAP32[((($provided_block)+(16))>>2)]=0; HEAP32[((($provided_block)+(20))>>2)]=0;
 var $mem_0_in=$provided_block;label=4;break;
 case 3: 
 var $4=_calloc(1,24);
 var $mem_0_in=$4;label=4;break;
 case 4: 
 var $mem_0_in;
 var $6=($mem_0_in|0)==0;
 if($6){var $_0=0;label=6;break;}else{label=5;break;}
 case 5: 
 var $mem_0=$mem_0_in;
 var $_0=$mem_0;label=6;break;
 case 6: 
 var $_0;
 return $_0;
  default: assert(0, "bad label: " + label);
 }

}


function ___tre_mem_destroy($mem){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($mem)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=($2|0)==0;
 if($3){label=3;break;}else{var $l_01=$2;label=2;break;}
 case 2: 
 var $l_01;
 var $4=(($l_01)|0);
 var $5=HEAP32[(($4)>>2)];
 _free($5);
 var $6=(($l_01+4)|0);
 var $7=HEAP32[(($6)>>2)];
 var $8=$l_01;
 _free($8);
 var $9=($7|0)==0;
 if($9){label=3;break;}else{var $l_01=$7;label=2;break;}
 case 3: 
 var $10=$mem;
 _free($10);
 return;
  default: assert(0, "bad label: " + label);
 }

}


function ___tre_mem_alloc_impl($mem,$provided,$provided_block,$zero,$size){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($mem+16)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=($2|0)==0;
 if($3){label=2;break;}else{var $_0=0;label=19;break;}
 case 2: 
 var $5=(($mem+12)|0);
 var $6=HEAP32[(($5)>>2)];
 var $7=($6>>>0)<($size>>>0);
 if($7){label=4;break;}else{label=3;break;}
 case 3: 
 var $_phi_trans_insert=(($mem+8)|0);
 var $_pre=HEAP32[(($_phi_trans_insert)>>2)];
 var $44=$6;var $43=$_pre;label=17;break;
 case 4: 
 var $9=($provided|0)==0;
 if($9){label=8;break;}else{label=5;break;}
 case 5: 
 var $11=($provided_block|0)==0;
 if($11){label=6;break;}else{label=7;break;}
 case 6: 
 HEAP32[(($1)>>2)]=1;
 var $_0=0;label=19;break;
 case 7: 
 var $14=(($mem+8)|0);
 HEAP32[(($14)>>2)]=$provided_block;
 HEAP32[(($5)>>2)]=1024;
 var $44=1024;var $43=$provided_block;label=17;break;
 case 8: 
 var $16=$size<<3;
 var $17=($16>>>0)>1024;
 var $_=($17?$16:1024);
 var $18=_malloc(8);
 var $19=$18;
 var $20=($18|0)==0;
 if($20){label=9;break;}else{label=10;break;}
 case 9: 
 HEAP32[(($1)>>2)]=1;
 var $_0=0;label=19;break;
 case 10: 
 var $23=_malloc($_);
 var $24=$18;
 HEAP32[(($24)>>2)]=$23;
 var $25=($23|0)==0;
 if($25){label=11;break;}else{label=12;break;}
 case 11: 
 _free($18);
 HEAP32[(($1)>>2)]=1;
 var $_0=0;label=19;break;
 case 12: 
 var $28=(($18+4)|0);
 var $29=$28;
 HEAP32[(($29)>>2)]=0;
 var $30=(($mem+4)|0);
 var $31=HEAP32[(($30)>>2)];
 var $32=($31|0)==0;
 if($32){label=14;break;}else{label=13;break;}
 case 13: 
 var $34=(($31+4)|0);
 HEAP32[(($34)>>2)]=$19;
 label=14;break;
 case 14: 
 var $36=(($mem)|0);
 var $37=HEAP32[(($36)>>2)];
 var $38=($37|0)==0;
 if($38){label=15;break;}else{label=16;break;}
 case 15: 
 HEAP32[(($36)>>2)]=$19;
 label=16;break;
 case 16: 
 HEAP32[(($30)>>2)]=$19;
 var $40=HEAP32[(($24)>>2)];
 var $41=(($mem+8)|0);
 HEAP32[(($41)>>2)]=$40;
 HEAP32[(($5)>>2)]=$_;
 var $44=$_;var $43=$40;label=17;break;
 case 17: 
 var $43;
 var $44;
 var $45=(($mem+8)|0);
 var $46=$43;
 var $47=((($46)+($size))|0);
 var $48=$47&3;
 var $49=($48|0)==0;
 var $50=(((4)-($48))|0);
 var $_1=($49?0:$50);
 var $51=((($_1)+($size))|0);
 var $52=(($43+$51)|0);
 HEAP32[(($45)>>2)]=$52;
 var $53=((($44)-($51))|0);
 HEAP32[(($5)>>2)]=$53;
 var $54=($zero|0)==0;
 if($54){var $_0=$43;label=19;break;}else{label=18;break;}
 case 18: 
 _memset($43, 0, $51)|0;
 var $_0=$43;label=19;break;
 case 19: 
 var $_0;
 return $_0;
  default: assert(0, "bad label: " + label);
 }

}


function _fwprintf($f,$fmt,varrp){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $ap=sp;
 var $1=(($ap)|0);
 var $2=$ap;
 HEAP32[(($2)>>2)]=varrp;HEAP32[((($2)+(4))>>2)]=0;
 var $3=_vfwprintf($f,$fmt,$1);

 STACKTOP=sp;return $3;
}


function _swprintf($s,$n,$fmt,varrp){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $ap=sp;
 var $1=(($ap)|0);
 var $2=$ap;
 HEAP32[(($2)>>2)]=varrp;HEAP32[((($2)+(4))>>2)]=0;
 var $3=_vswprintf($s,$n,$fmt,$1);

 STACKTOP=sp;return $3;
}


function _vfwprintf($f,$fmt,$ap){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+128)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $ap2=sp;
 var $nl_type=(sp)+(16);
 var $nl_arg=(sp)+(56);
 var $1=$nl_type;
 var $$etemp$0$0=36;
 var $$etemp$0$1=0;

 _memset($1, 0, 36)|0;
 var $2=$nl_arg;
 var $$etemp$1$0=72;
 var $$etemp$1$1=0;

 var $3=$ap2;
 var $4=$ap;
 _llvm_va_copy($3,$4);
 var $5=(($nl_arg)|0);
 var $6=(($nl_type)|0);
 var $7=_wprintf_core(0,$fmt,$ap2,$5,$6);
 var $8=($7|0)<0;
 if($8){var $_0=-1;label=3;break;}else{label=2;break;}
 case 2: 
 var $10=_wprintf_core($f,$fmt,$ap2,$5,$6);

 var $_0=$10;label=3;break;
 case 3: 
 var $_0;
 var $$etemp$2$0=72;
 var $$etemp$2$1=0;

 var $$etemp$3$0=36;
 var $$etemp$3$1=0;

 STACKTOP=sp;return $_0;
  default: assert(0, "bad label: " + label);
 }

}


function _wprintf_core($f,$fmt,$ap,$nl_arg,$nl_type){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+24)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $charfmt=sp;
 var $wc=(sp)+(16);
 var $1=(($f)|0);
 var $2=($f|0)!=0;
 var $3=(($ap)|0);
 var $4=(($charfmt)|0);
 var $l_0=0;var $cnt_0=0;var $l10n_0=0;var $7=0;var $6=0;var $5=$fmt;label=2;break;
 case 2: 
 var $5;
 var $6;
 var $7;
 var $l10n_0;
 var $cnt_0;
 var $l_0;
 var $8=($cnt_0|0)>-1;
 if($8){label=3;break;}else{var $cnt_1=$cnt_0;label=7;break;}
 case 3: 
 var $10=(((2147483647)-($cnt_0))|0);
 var $11=($l_0|0)>($10|0);
 if($11){label=4;break;}else{label=6;break;}
 case 4: 
 var $13=HEAP32[(($1)>>2)];
 var $14=$13&32;
 var $15=($14|0)==0;
 if($15){label=5;break;}else{var $cnt_1=-1;label=7;break;}
 case 5: 
 var $17=___errno_location();
 HEAP32[(($17)>>2)]=75;
 var $cnt_1=-1;label=7;break;
 case 6: 
 var $19=((($l_0)+($cnt_0))|0);
 var $cnt_1=$19;label=7;break;
 case 7: 
 var $cnt_1;
 var $21=HEAP32[(($5)>>2)];
 var $22=($21|0)==0;
 if($22){label=100;break;}else{var $24=$5;var $23=$21;label=8;break;}
 case 8: 
 var $23;
 var $24;
 if(($23|0)==0|($23|0)==37){ label=10;break;}else{label=9;break;}
 case 9: 
 var $26=(($24+4)|0);
 var $_pre=HEAP32[(($26)>>2)];
 var $24=$26;var $23=$_pre;label=8;break;
 case 10: 
 var $27=_wcsspn($24,137864);
 var $28=$27>>>1;
 var $29=(($24+($28<<2))|0);
 var $30=$28<<1;
 var $31=(($24+($30<<2))|0);
 var $32=$29;
 var $33=$5;
 var $34=((($32)-($33))|0);
 var $35=$34>>2;
 if($2){label=11;break;}else{label=13;break;}
 case 11: 
 var $37=($35|0)==0;
 if($37){label=14;break;}else{var $_012_i=$5;var $_03_i=$35;label=12;break;}
 case 12: 
 var $_03_i;
 var $_012_i;
 var $38=((($_03_i)-(1))|0);
 var $39=(($_012_i+4)|0);
 var $40=HEAP32[(($_012_i)>>2)];
 var $41=_fputwc($40,$f);
 var $42=($38|0)==0;
 if($42){label=13;break;}else{var $_012_i=$39;var $_03_i=$38;label=12;break;}
 case 13: 
 var $43=($35|0)==0;
 if($43){label=14;break;}else{var $l_0=$35;var $cnt_0=$cnt_1;var $l10n_0=$l10n_0;var $7=$7;var $6=$6;var $5=$31;label=2;break;}
 case 14: 
 var $_sum30=$30|1;
 var $44=(($24+($_sum30<<2))|0);
 var $45=HEAP32[(($44)>>2)];
 var $46=_iswdigit($45);
 var $47=($46|0)==0;
 if($47){var $argpos_0=-1;var $l10n_1=$l10n_0;var $storemerge=$44;label=17;break;}else{label=15;break;}
 case 15: 
 var $_sum=((($30)+(2))|0);
 var $49=(($24+($_sum<<2))|0);
 var $50=HEAP32[(($49)>>2)];
 var $51=($50|0)==36;
 if($51){label=16;break;}else{var $argpos_0=-1;var $l10n_1=$l10n_0;var $storemerge=$44;label=17;break;}
 case 16: 
 var $53=HEAP32[(($44)>>2)];
 var $54=((($53)-(48))|0);
 var $_sum31=((($30)+(3))|0);
 var $55=(($24+($_sum31<<2))|0);
 var $argpos_0=$54;var $l10n_1=1;var $storemerge=$55;label=17;break;
 case 17: 
 var $storemerge;
 var $l10n_1;
 var $argpos_0;
 var $57=HEAP32[(($storemerge)>>2)];
 var $58=((($57)-(32))|0);
 var $59=($58>>>0)<32;
 if($59){var $storemerge542=$storemerge;var $fl_043=0;var $60=$57;label=18;break;}else{var $fl_039104=0;var $storemerge537106=$storemerge;var $101=$57;label=29;break;}
 case 18: 
 var $60;
 var $fl_043;
 var $storemerge542;
 var $61=((($60)-(32))|0);
 var $62=1<<$61;
 var $63=$62&75913;
 var $64=($63|0)==0;
 if($64){label=20;break;}else{label=19;break;}
 case 19: 
 var $66=$62|$fl_043;
 var $67=(($storemerge542+4)|0);
 var $68=HEAP32[(($67)>>2)];
 var $69=((($68)-(32))|0);
 var $70=($69>>>0)<32;
 if($70){var $storemerge542=$67;var $fl_043=$66;var $60=$68;label=18;break;}else{var $fl_039104=$66;var $storemerge537106=$67;var $101=$68;label=29;break;}
 case 20: 
 var $71=($60|0)==42;
 if($71){label=21;break;}else{var $fl_039104=$fl_043;var $storemerge537106=$storemerge542;var $101=$60;label=29;break;}
 case 21: 
 var $73=(($storemerge542+4)|0);
 var $74=HEAP32[(($73)>>2)];
 var $75=_iswdigit($74);
 var $76=($75|0)==0;
 if($76){label=24;break;}else{label=22;break;}
 case 22: 
 var $78=(($storemerge542+8)|0);
 var $79=HEAP32[(($78)>>2)];
 var $80=($79|0)==36;
 if($80){label=23;break;}else{label=24;break;}
 case 23: 
 var $82=HEAP32[(($73)>>2)];
 var $83=((($82)-(48))|0);
 var $84=(($nl_type+($83<<2))|0);
 HEAP32[(($84)>>2)]=10;
 var $85=HEAP32[(($73)>>2)];
 var $86=((($85)-(48))|0);
 var $87=(($nl_arg+($86<<3))|0);
 var $ld$0$0=(($87)|0);
 var $88$0=HEAP32[(($ld$0$0)>>2)];
 var $ld$1$1=(($87+4)|0);
 var $88$1=HEAP32[(($ld$1$1)>>2)];
 var $88$$SHADOW=HEAPF64[(($87)>>3)];
 var $89$0=$88$0;
 var $89=$89$0;
 var $90=(($storemerge542+12)|0);
 var $w_0=$89;var $l10n_2=1;var $storemerge9=$90;label=27;break;
 case 24: 
 var $92=($l10n_1|0)==0;
 if($92){label=25;break;}else{var $_0=-1;label=118;break;}
 case 25: 
 if($2){label=26;break;}else{var $w_1=0;var $fl_1=$fl_043;var $l10n_3=0;var $114=$73;label=32;break;}
 case 26: 
 var $95=(tempInt=HEAP32[((($3)+(4))>>2)],HEAP32[((($3)+(4))>>2)]=tempInt + 8,HEAP32[(((HEAP32[(($3)>>2)])+(tempInt))>>2)]);
 var $w_0=$95;var $l10n_2=0;var $storemerge9=$73;label=27;break;
 case 27: 
 var $storemerge9;
 var $l10n_2;
 var $w_0;
 var $97=($w_0|0)<0;
 if($97){label=28;break;}else{var $w_1=$w_0;var $fl_1=$fl_043;var $l10n_3=$l10n_2;var $114=$storemerge9;label=32;break;}
 case 28: 
 var $99=$fl_043|8192;
 var $100=(((-$w_0))|0);
 var $w_1=$100;var $fl_1=$99;var $l10n_3=$l10n_2;var $114=$storemerge9;label=32;break;
 case 29: 
 var $101;
 var $storemerge537106;
 var $fl_039104;
 var $102=_iswdigit($101);
 var $103=($102|0)==0;
 if($103){var $w_1=0;var $fl_1=$fl_039104;var $l10n_3=$l10n_1;var $114=$storemerge537106;label=32;break;}else{var $i_01_i=0;var $104=$storemerge537106;label=30;break;}
 case 30: 
 var $104;
 var $i_01_i;
 var $105=((($i_01_i)*(10))&-1);
 var $106=HEAP32[(($104)>>2)];
 var $107=((($105)-(48))|0);
 var $108=((($107)+($106))|0);
 var $109=(($104+4)|0);
 var $110=HEAP32[(($109)>>2)];
 var $111=_iswdigit($110);
 var $112=($111|0)==0;
 if($112){label=31;break;}else{var $i_01_i=$108;var $104=$109;label=30;break;}
 case 31: 
 var $113=($108|0)<0;
 if($113){var $_0=-1;label=118;break;}else{var $w_1=$108;var $fl_1=$fl_039104;var $l10n_3=$l10n_1;var $114=$109;label=32;break;}
 case 32: 
 var $114;
 var $l10n_3;
 var $fl_1;
 var $w_1;
 var $115=HEAP32[(($114)>>2)];
 var $116=($115|0)==46;
 if($116){label=33;break;}else{var $p_0=-1;var $153=$114;label=42;break;}
 case 33: 
 var $118=(($114+4)|0);
 var $119=HEAP32[(($118)>>2)];
 var $120=($119|0)==42;
 if($120){label=34;break;}else{label=40;break;}
 case 34: 
 var $122=(($114+8)|0);
 var $123=HEAP32[(($122)>>2)];
 var $isdigittmp=((($123)-(48))|0);
 var $isdigit=($isdigittmp>>>0)<10;
 if($isdigit){label=35;break;}else{label=37;break;}
 case 35: 
 var $125=(($114+12)|0);
 var $126=HEAP32[(($125)>>2)];
 var $127=($126|0)==36;
 if($127){label=36;break;}else{label=37;break;}
 case 36: 
 var $129=(($nl_type+($isdigittmp<<2))|0);
 HEAP32[(($129)>>2)]=10;
 var $130=HEAP32[(($122)>>2)];
 var $131=((($130)-(48))|0);
 var $132=(($nl_arg+($131<<3))|0);
 var $ld$2$0=(($132)|0);
 var $133$0=HEAP32[(($ld$2$0)>>2)];
 var $ld$3$1=(($132+4)|0);
 var $133$1=HEAP32[(($ld$3$1)>>2)];
 var $133$$SHADOW=HEAPF64[(($132)>>3)];
 var $134$0=$133$0;
 var $134=$134$0;
 var $135=(($114+16)|0);
 var $p_0=$134;var $153=$135;label=42;break;
 case 37: 
 var $137=($l10n_3|0)==0;
 if($137){label=38;break;}else{var $_0=-1;label=118;break;}
 case 38: 
 if($2){label=39;break;}else{var $p_0=0;var $153=$122;label=42;break;}
 case 39: 
 var $140=(tempInt=HEAP32[((($3)+(4))>>2)],HEAP32[((($3)+(4))>>2)]=tempInt + 8,HEAP32[(((HEAP32[(($3)>>2)])+(tempInt))>>2)]);
 var $p_0=$140;var $153=$122;label=42;break;
 case 40: 
 var $142=_iswdigit($119);
 var $143=($142|0)==0;
 if($143){var $p_0=0;var $153=$118;label=42;break;}else{var $i_01_i13=0;var $144=$118;label=41;break;}
 case 41: 
 var $144;
 var $i_01_i13;
 var $145=((($i_01_i13)*(10))&-1);
 var $146=HEAP32[(($144)>>2)];
 var $147=((($145)-(48))|0);
 var $148=((($147)+($146))|0);
 var $149=(($144+4)|0);
 var $150=HEAP32[(($149)>>2)];
 var $151=_iswdigit($150);
 var $152=($151|0)==0;
 if($152){var $p_0=$148;var $153=$149;label=42;break;}else{var $i_01_i13=$148;var $144=$149;label=41;break;}
 case 42: 
 var $153;
 var $p_0;
 var $st_0=0;var $154=$153;label=43;break;
 case 43: 
 var $154;
 var $st_0;
 var $155=HEAP32[(($154)>>2)];
 var $156=((($155)-(65))|0);
 var $157=($156>>>0)>57;
 if($157){var $_0=-1;label=118;break;}else{label=44;break;}
 case 44: 
 var $159=(($154+4)|0);
 var $160=((10560+((($st_0)*(58))&-1)+$156)|0);
 var $161=HEAP8[($160)];
 var $162=($161&255);
 var $163=((($162)-(1))|0);
 var $164=($163>>>0)<8;
 if($164){var $st_0=$162;var $154=$159;label=43;break;}else{label=45;break;}
 case 45: 
 var $166=(($161<<24)>>24)==0;
 if($166){var $_0=-1;label=118;break;}else{label=46;break;}
 case 46: 
 var $168=(($161<<24)>>24)==19;
 var $169=($argpos_0|0)>-1;
 if($168){label=47;break;}else{label=49;break;}
 case 47: 
 if($169){var $_0=-1;label=118;break;}else{label=48;break;}
 case 48: 
 if($2){var $237=$7;var $236=$6;var $235=$155;label=66;break;}else{var $l_0=$35;var $cnt_0=$cnt_1;var $l10n_0=$l10n_3;var $7=$7;var $6=$6;var $5=$159;label=2;break;}
 case 49: 
 if($169){label=50;break;}else{label=51;break;}
 case 50: 
 var $174=(($nl_type+($argpos_0<<2))|0);
 HEAP32[(($174)>>2)]=$162;
 var $175=(($nl_arg+($argpos_0<<3))|0);
 var $ld$4$0=(($175)|0);
 var $176$0=HEAP32[(($ld$4$0)>>2)];
 var $ld$5$1=(($175+4)|0);
 var $176$1=HEAP32[(($ld$5$1)>>2)];
 var $176$$SHADOW=HEAPF64[(($175)>>3)];
 var $177$0=$176$0;
 var $177=$177$0;
 var $extract$0=$176$1;
 var $extract$1=0;
 var $extract_t$0=$extract$0;
 var $extract_t=$extract_t$0;
 var $_sink113_off32=$extract_t;var $_sink=$177;label=64;break;
 case 51: 
 if($2){label=52;break;}else{var $_0=0;label=118;break;}
 case 52: 
 var $180=($161&255)>20;
 if($180){var $237=$7;var $236=$6;var $235=$155;label=66;break;}else{label=53;break;}
 case 53: 
 switch(($162|0)){case 9:{ label=54;break;}case 10:{ label=55;break;}case 11:{ label=56;break;}case 12:{ label=57;break;}case 13:{ label=58;break;}case 14:{ label=59;break;}case 15:{ label=60;break;}case 16:{ label=61;break;}case 17:{ label=62;break;}case 18:{ label=63;break;}default:{var $234=$6;var $233=$7;label=65;break;}}break;
 case 54: 
 var $183=(tempInt=HEAP32[((($3)+(4))>>2)],HEAP32[((($3)+(4))>>2)]=tempInt + 8,HEAP32[(((HEAP32[(($3)>>2)])+(tempInt))>>2)]);
 var $234=$6;var $233=$183;label=65;break;
 case 55: 
 var $185=(tempInt=HEAP32[((($3)+(4))>>2)],HEAP32[((($3)+(4))>>2)]=tempInt + 8,HEAP32[(((HEAP32[(($3)>>2)])+(tempInt))>>2)]);
 var $186$0=$185;
 var $186$1=((((($185|0)<0))|0)?-1:0);
 var $187=$185;
 var $188$0=$186$1;
 var $188$1=0;
 var $189$0=$188$0;
 var $189=$189$0;
 var $234=$189;var $233=$187;label=65;break;
 case 56: 
 var $191=(tempInt=HEAP32[((($3)+(4))>>2)],HEAP32[((($3)+(4))>>2)]=tempInt + 8,HEAP32[(((HEAP32[(($3)>>2)])+(tempInt))>>2)]);
 var $192=$191;
 var $234=0;var $233=$192;label=65;break;
 case 57: 
 var $194$0=(tempInt=HEAP32[((($3)+(4))>>2)],HEAP32[((($3)+(4))>>2)]=tempInt + 8,HEAP32[(((HEAP32[(($3)>>2)])+(tempInt))>>2)]);
 var $194$1=(tempInt=HEAP32[((($3)+(4))>>2)],HEAP32[((($3)+(4))>>2)]=tempInt + 8,HEAP32[(((HEAP32[(($3)>>2)])+(tempInt))>>2)]);
 var $195$0=$194$0;
 var $195=$195$0;
 var $196=$195;
 var $197$0=$194$1;
 var $197$1=0;
 var $198$0=$197$0;
 var $198=$198$0;
 var $234=$198;var $233=$196;label=65;break;
 case 58: 
 var $200=(tempInt=HEAP32[((($3)+(4))>>2)],HEAP32[((($3)+(4))>>2)]=tempInt + 8,HEAP32[(((HEAP32[(($3)>>2)])+(tempInt))>>2)]);
 var $201=(($200)&65535);
 var $202$0=(($201<<16)>>16);
 var $202$1=(((((($201<<16)>>16)<0))|0)?-1:0);
 var $203=(($201<<16)>>16);
 var $204=$203;
 var $205$0=$202$1;
 var $205$1=0;
 var $206$0=$205$0;
 var $206=$206$0;
 var $234=$206;var $233=$204;label=65;break;
 case 59: 
 var $208=(tempInt=HEAP32[((($3)+(4))>>2)],HEAP32[((($3)+(4))>>2)]=tempInt + 8,HEAP32[(((HEAP32[(($3)>>2)])+(tempInt))>>2)]);
 var $_mask1_i=$208&65535;
 var $209=$_mask1_i;
 var $234=0;var $233=$209;label=65;break;
 case 60: 
 var $211=(tempInt=HEAP32[((($3)+(4))>>2)],HEAP32[((($3)+(4))>>2)]=tempInt + 8,HEAP32[(((HEAP32[(($3)>>2)])+(tempInt))>>2)]);
 var $212=(($211)&255);
 var $213$0=(($212<<24)>>24);
 var $213$1=(((((($212<<24)>>24)<0))|0)?-1:0);
 var $214=(($212<<24)>>24);
 var $215=$214;
 var $216$0=$213$1;
 var $216$1=0;
 var $217$0=$216$0;
 var $217=$217$0;
 var $234=$217;var $233=$215;label=65;break;
 case 61: 
 var $219=(tempInt=HEAP32[((($3)+(4))>>2)],HEAP32[((($3)+(4))>>2)]=tempInt + 8,HEAP32[(((HEAP32[(($3)>>2)])+(tempInt))>>2)]);
 var $_mask_i=$219&255;
 var $220=$_mask_i;
 var $234=0;var $233=$220;label=65;break;
 case 62: 
 var $222=(tempInt=HEAP32[((($3)+(4))>>2)],HEAP32[((($3)+(4))>>2)]=tempInt + 8,HEAPF64[(((HEAP32[(($3)>>2)])+(tempInt))>>3)]);
 HEAPF64[(tempDoublePtr)>>3]=$222; var $223$0=HEAP32[((tempDoublePtr)>>2)];var $223$1=HEAP32[(((tempDoublePtr)+(4))>>2)];
 var $224$0=$223$0;
 var $224=$224$0;
 var $225=$224;
 var $226$0=$223$1;
 var $226$1=0;
 var $227$0=$226$0;
 var $227=$227$0;
 var $234=$227;var $233=$225;label=65;break;
 case 63: 
 var $229=(tempInt=HEAP32[((($3)+(4))>>2)],HEAP32[((($3)+(4))>>2)]=tempInt + 8,HEAPF64[(((HEAP32[(($3)>>2)])+(tempInt))>>3)]);
 HEAPF64[(tempDoublePtr)>>3]=$229; var $230$0=HEAP32[((tempDoublePtr)>>2)];var $230$1=HEAP32[(((tempDoublePtr)+(4))>>2)];
 var $231$0=$230$0;
 var $231=$231$0;
 var $extract114$0=$230$1;
 var $extract114$1=0;
 var $extract_t115$0=$extract114$0;
 var $extract_t115=$extract_t115$0;
 var $_sink113_off32=$extract_t115;var $_sink=$231;label=64;break;
 case 64: 
 var $_sink;
 var $_sink113_off32;
 var $232=$_sink;
 if($2){var $234=$_sink113_off32;var $233=$232;label=65;break;}else{var $l_0=$35;var $cnt_0=$cnt_1;var $l10n_0=$l10n_3;var $7=$232;var $6=$_sink113_off32;var $5=$159;label=2;break;}
 case 65: 
 var $233;
 var $234;
 var $_pre103=HEAP32[(($154)>>2)];
 var $237=$233;var $236=$234;var $235=$_pre103;label=66;break;
 case 66: 
 var $235;
 var $236;
 var $237;
 var $238=($st_0|0)==0;
 if($238){var $t_0=$235;label=68;break;}else{label=67;break;}
 case 67: 
 var $240=$235&15;
 var $241=($240|0)==3;
 var $242=$235&-33;
 var $_=($241?$242:$235);
 var $t_0=$_;label=68;break;
 case 68: 
 var $t_0;
 switch(($t_0|0)){case 110:{ label=69;break;}case 99:{ label=77;break;}case 67:{ label=78;break;}case 83:{ label=79;break;}case 115:{ label=87;break;}default:{label=97;break;}}break;
 case 69: 
 switch(($st_0|0)){case 0:{ label=70;break;}case 1:{ label=71;break;}case 2:{ label=72;break;}case 3:{ label=73;break;}case 4:{ label=74;break;}case 6:{ label=75;break;}case 7:{ label=76;break;}default:{var $l_0=$35;var $cnt_0=$cnt_1;var $l10n_0=$l10n_3;var $7=$237;var $6=$236;var $5=$159;label=2;break;}}break;
 case 70: 
 var $246=$237;
 HEAP32[(($246)>>2)]=$cnt_1;
 var $l_0=$35;var $cnt_0=$cnt_1;var $l10n_0=$l10n_3;var $7=$237;var $6=$236;var $5=$159;label=2;break;
 case 71: 
 var $248=$237;
 HEAP32[(($248)>>2)]=$cnt_1;
 var $l_0=$35;var $cnt_0=$cnt_1;var $l10n_0=$l10n_3;var $7=$237;var $6=$236;var $5=$159;label=2;break;
 case 72: 
 var $250$0=$cnt_1;
 var $250$1=((((($cnt_1|0)<0))|0)?-1:0);
 var $251=$237;
 var $st$6$0=(($251)|0);
 HEAP32[(($st$6$0)>>2)]=$250$0;
 var $st$7$1=(($251+4)|0);
 HEAP32[(($st$7$1)>>2)]=$250$1;
 var $l_0=$35;var $cnt_0=$cnt_1;var $l10n_0=$l10n_3;var $7=$237;var $6=$236;var $5=$159;label=2;break;
 case 73: 
 var $253=(($cnt_1)&65535);
 var $254=$237;
 HEAP16[(($254)>>1)]=$253;
 var $l_0=$35;var $cnt_0=$cnt_1;var $l10n_0=$l10n_3;var $7=$237;var $6=$236;var $5=$159;label=2;break;
 case 74: 
 var $256=(($cnt_1)&255);
 HEAP8[($237)]=$256;
 var $l_0=$35;var $cnt_0=$cnt_1;var $l10n_0=$l10n_3;var $7=$237;var $6=$236;var $5=$159;label=2;break;
 case 75: 
 var $258=$237;
 HEAP32[(($258)>>2)]=$cnt_1;
 var $l_0=$35;var $cnt_0=$cnt_1;var $l10n_0=$l10n_3;var $7=$237;var $6=$236;var $5=$159;label=2;break;
 case 76: 
 var $260$0=$cnt_1;
 var $260$1=((((($cnt_1|0)<0))|0)?-1:0);
 var $261=$237;
 var $st$8$0=(($261)|0);
 HEAP32[(($st$8$0)>>2)]=$260$0;
 var $st$9$1=(($261+4)|0);
 HEAP32[(($st$9$1)>>2)]=$260$1;
 var $l_0=$35;var $cnt_0=$cnt_1;var $l10n_0=$l10n_3;var $7=$237;var $6=$236;var $5=$159;label=2;break;
 case 77: 
 var $263=$237;
 var $264=_btowc($263);
 var $265=_fputwc($264,$f);
 var $l_0=1;var $cnt_0=$cnt_1;var $l10n_0=$l10n_3;var $7=$237;var $6=$236;var $5=$159;label=2;break;
 case 78: 
 var $267=$237;
 var $268=_fputwc($267,$f);
 var $l_0=1;var $cnt_0=$cnt_1;var $l10n_0=$l10n_3;var $7=$237;var $6=$236;var $5=$159;label=2;break;
 case 79: 
 var $270=$237;
 var $271=_wmemchr($270,0,$p_0);
 var $272=($271|0)==0;
 if($272){var $p_1=$p_0;label=81;break;}else{label=80;break;}
 case 80: 
 var $274=$271;
 var $275=$237;
 var $276=((($274)-($275))|0);
 var $277=$276>>2;
 var $p_1=$277;label=81;break;
 case 81: 
 var $p_1;
 var $279=($w_1|0)<($p_1|0);
 var $p_1_w_1=($279?$p_1:$w_1);
 var $280=$fl_1&8192;
 var $281=($280|0)==0;
 if($281){label=82;break;}else{label=84;break;}
 case 82: 
 var $283=((($p_1_w_1)-($p_1))|0);
 var $284=_fprintf($f,139256,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$283,HEAP32[(((tempVarArgs)+(8))>>2)]=141104,tempVarArgs)); STACKTOP=tempVarArgs;
 var $285=($p_1|0)==0;
 if($285){var $l_0=$p_1_w_1;var $cnt_0=$cnt_1;var $l10n_0=$l10n_3;var $7=$237;var $6=$236;var $5=$159;label=2;break;}else{var $_012_i18=$270;var $_03_i17=$p_1;label=83;break;}
 case 83: 
 var $_03_i17;
 var $_012_i18;
 var $286=((($_03_i17)-(1))|0);
 var $287=(($_012_i18+4)|0);
 var $288=HEAP32[(($_012_i18)>>2)];
 var $289=_fputwc($288,$f);
 var $290=($286|0)==0;
 if($290){var $l_0=$p_1_w_1;var $cnt_0=$cnt_1;var $l10n_0=$l10n_3;var $7=$237;var $6=$236;var $5=$159;label=2;break;}else{var $_012_i18=$287;var $_03_i17=$286;label=83;break;}
 case 84: 
 var $291=($p_1|0)==0;
 if($291){label=86;break;}else{var $_012_i22=$270;var $_03_i21=$p_1;label=85;break;}
 case 85: 
 var $_03_i21;
 var $_012_i22;
 var $292=((($_03_i21)-(1))|0);
 var $293=(($_012_i22+4)|0);
 var $294=HEAP32[(($_012_i22)>>2)];
 var $295=_fputwc($294,$f);
 var $296=($292|0)==0;
 if($296){label=86;break;}else{var $_012_i22=$293;var $_03_i21=$292;label=85;break;}
 case 86: 
 var $297=((($p_1_w_1)-($p_1))|0);
 var $298=_fprintf($f,139256,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$297,HEAP32[(((tempVarArgs)+(8))>>2)]=141104,tempVarArgs)); STACKTOP=tempVarArgs;
 var $l_0=$p_1_w_1;var $cnt_0=$cnt_1;var $l10n_0=$l10n_3;var $7=$237;var $6=$236;var $5=$159;label=2;break;
 case 87: 
 var $300=($p_0|0)<0;
 var $_p_0=($300?2147483647:$p_0);
 var $301=($_p_0|0)>0;
 if($301){var $l_158=0;var $bs_059=$237;label=88;break;}else{var $l_1_lcssa110=0;label=91;break;}
 case 88: 
 var $bs_059;
 var $l_158;
 var $302=_mbtowc($wc,$bs_059,4);
 var $303=($302|0)>0;
 if($303){label=89;break;}else{label=90;break;}
 case 89: 
 var $305=(($bs_059+$302)|0);
 var $306=((($l_158)+(1))|0);
 var $307=($306|0)<($_p_0|0);
 if($307){var $l_158=$306;var $bs_059=$305;label=88;break;}else{var $l_1_lcssa110=$306;label=91;break;}
 case 90: 
 var $308=($302|0)<0;
 if($308){var $_0=-1;label=118;break;}else{var $l_1_lcssa110=$l_158;label=91;break;}
 case 91: 
 var $l_1_lcssa110;
 var $309=($w_1|0)<($l_1_lcssa110|0);
 var $l_1_w_1=($309?$l_1_lcssa110:$w_1);
 var $310=$fl_1&8192;
 var $311=($310|0)!=0;
 if($311){label=93;break;}else{label=92;break;}
 case 92: 
 var $313=((($l_1_w_1)-($l_1_lcssa110))|0);
 var $314=_fprintf($f,139256,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$313,HEAP32[(((tempVarArgs)+(8))>>2)]=141104,tempVarArgs)); STACKTOP=tempVarArgs;
 label=93;break;
 case 93: 
 var $315=($l_1_lcssa110|0)==0;
 if($315){label=95;break;}else{var $l_264=$l_1_lcssa110;var $bs_165=$237;label=94;break;}
 case 94: 
 var $bs_165;
 var $l_264;
 var $316=((($l_264)-(1))|0);
 var $317=_mbtowc($wc,$bs_165,4);
 var $318=(($bs_165+$317)|0);
 var $319=HEAP32[(($wc)>>2)];
 var $320=_fputwc($319,$f);
 var $321=($316|0)==0;
 if($321){label=95;break;}else{var $l_264=$316;var $bs_165=$318;label=94;break;}
 case 95: 
 if($311){label=96;break;}else{var $l_0=$l_1_w_1;var $cnt_0=$cnt_1;var $l10n_0=$l10n_3;var $7=$237;var $6=$236;var $5=$159;label=2;break;}
 case 96: 
 var $323=((($l_1_w_1)-($l_1_lcssa110))|0);
 var $324=_fprintf($f,139256,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$323,HEAP32[(((tempVarArgs)+(8))>>2)]=141104,tempVarArgs)); STACKTOP=tempVarArgs;
 var $l_0=$l_1_w_1;var $cnt_0=$cnt_1;var $l10n_0=$l10n_3;var $7=$237;var $6=$236;var $5=$159;label=2;break;
 case 97: 
 var $326=$fl_1>>>3;
 var $_lobit=$326&1;
 var $327=$_lobit^1;
 var $328=((138336+$327)|0);
 var $329=$fl_1>>>11;
 var $_lobit6=$329&1;
 var $330=$_lobit6^1;
 var $331=((138152+$330)|0);
 var $332=$fl_1>>>13;
 var $_lobit7=$332&1;
 var $333=$_lobit7^1;
 var $334=((137896+$333)|0);
 var $335=$fl_1&1;
 var $336=$335^1;
 var $337=((137640+$336)|0);
 var $338=$fl_1>>>16;
 var $_lobit8=$338&1;
 var $339=$_lobit8^1;
 var $340=((137400+$339)|0);
 var $341=$t_0|32;
 var $342=((($341)-(97))|0);
 var $343=((11024+$342)|0);
 var $344=HEAP8[($343)];
 var $345=(($344<<24)>>24);
 var $346=_snprintf($4,16,138568,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 56)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$328,HEAP32[(((tempVarArgs)+(8))>>2)]=$331,HEAP32[(((tempVarArgs)+(16))>>2)]=$334,HEAP32[(((tempVarArgs)+(24))>>2)]=$337,HEAP32[(((tempVarArgs)+(32))>>2)]=$340,HEAP32[(((tempVarArgs)+(40))>>2)]=$345,HEAP32[(((tempVarArgs)+(48))>>2)]=$t_0,tempVarArgs)); STACKTOP=tempVarArgs;
 switch(($341|0)){case 97:case 101:case 102:case 103:{ label=98;break;}case 100:case 105:case 111:case 117:case 120:case 112:{ label=99;break;}default:{var $l_0=$35;var $cnt_0=$cnt_1;var $l10n_0=$l10n_3;var $7=$237;var $6=$236;var $5=$159;label=2;break;}}break;
 case 98: 
 var $348=$237;
 var $349$0=$236;
 var $349$1=0;
 var $350$0=0;
 var $350$1=$349$0;
 var $351$0=$348;
 var $351$1=0;
 var $352$0=$351$0|$350$0;
 var $352$1=$351$1|$350$1;
 var $353=(HEAP32[((tempDoublePtr)>>2)]=$352$0, HEAP32[(((tempDoublePtr)+(4))>>2)]=$352$1, HEAPF64[(tempDoublePtr)>>3]);
 var $354=_fprintf($f,$4,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 24)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$w_1,HEAP32[(((tempVarArgs)+(8))>>2)]=$p_0,HEAPF64[(((tempVarArgs)+(16))>>3)]=$353,tempVarArgs)); STACKTOP=tempVarArgs;
 var $l_0=$354;var $cnt_0=$cnt_1;var $l10n_0=$l10n_3;var $7=$237;var $6=$236;var $5=$159;label=2;break;
 case 99: 
 var $356=$237;
 var $357$0=$236;
 var $357$1=0;
 var $358$0=0;
 var $358$1=$357$0;
 var $359$0=$356;
 var $359$1=0;
 var $360$0=$359$0|$358$0;
 var $360$1=$359$1|$358$1;
 var $361=_fprintf($f,$4,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 32)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$w_1,HEAP32[(((tempVarArgs)+(8))>>2)]=$p_0,HEAP32[(((tempVarArgs)+(16))>>2)]=$360$0,HEAP32[(((tempVarArgs)+(24))>>2)]=$360$1,tempVarArgs)); STACKTOP=tempVarArgs;
 var $l_0=$361;var $cnt_0=$cnt_1;var $l10n_0=$l10n_3;var $7=$237;var $6=$236;var $5=$159;label=2;break;
 case 100: 
 var $363=($f|0)==0;
 if($363){label=101;break;}else{var $_0=$cnt_1;label=118;break;}
 case 101: 
 var $365=($l10n_0|0)==0;
 if($365){var $_0=0;label=118;break;}else{var $i_233=1;label=102;break;}
 case 102: 
 var $i_233;
 var $366=(($nl_type+($i_233<<2))|0);
 var $367=HEAP32[(($366)>>2)];
 var $368=($367|0)==0;
 if($368){var $i_332=$i_233;label=117;break;}else{label=103;break;}
 case 103: 
 var $370=(($nl_arg+($i_233<<3))|0);
 var $371=($367>>>0)>20;
 if($371){label=115;break;}else{label=104;break;}
 case 104: 
 switch(($367|0)){case 9:{ label=105;break;}case 10:{ label=106;break;}case 11:{ label=107;break;}case 12:{ label=108;break;}case 13:{ label=109;break;}case 14:{ label=110;break;}case 15:{ label=111;break;}case 16:{ label=112;break;}case 17:{ label=113;break;}case 18:{ label=114;break;}default:{label=115;break;}}break;
 case 105: 
 var $374=(tempInt=HEAP32[((($3)+(4))>>2)],HEAP32[((($3)+(4))>>2)]=tempInt + 8,HEAP32[(((HEAP32[(($3)>>2)])+(tempInt))>>2)]);
 var $375=$370;
 HEAP32[(($375)>>2)]=$374;
 label=115;break;
 case 106: 
 var $377=(tempInt=HEAP32[((($3)+(4))>>2)],HEAP32[((($3)+(4))>>2)]=tempInt + 8,HEAP32[(((HEAP32[(($3)>>2)])+(tempInt))>>2)]);
 var $378$0=$377;
 var $378$1=((((($377|0)<0))|0)?-1:0);
 var $379=(($370)|0);
 var $st$10$0=(($379)|0);
 HEAP32[(($st$10$0)>>2)]=$378$0;
 var $st$11$1=(($379+4)|0);
 HEAP32[(($st$11$1)>>2)]=$378$1;
 label=115;break;
 case 107: 
 var $381=(tempInt=HEAP32[((($3)+(4))>>2)],HEAP32[((($3)+(4))>>2)]=tempInt + 8,HEAP32[(((HEAP32[(($3)>>2)])+(tempInt))>>2)]);
 var $382$0=$381;
 var $382$1=0;
 var $383=(($370)|0);
 var $st$12$0=(($383)|0);
 HEAP32[(($st$12$0)>>2)]=$382$0;
 var $st$13$1=(($383+4)|0);
 HEAP32[(($st$13$1)>>2)]=$382$1;
 label=115;break;
 case 108: 
 var $385$0=(tempInt=HEAP32[((($3)+(4))>>2)],HEAP32[((($3)+(4))>>2)]=tempInt + 8,HEAP32[(((HEAP32[(($3)>>2)])+(tempInt))>>2)]);
 var $385$1=(tempInt=HEAP32[((($3)+(4))>>2)],HEAP32[((($3)+(4))>>2)]=tempInt + 8,HEAP32[(((HEAP32[(($3)>>2)])+(tempInt))>>2)]);
 var $386=(($370)|0);
 var $st$14$0=(($386)|0);
 HEAP32[(($st$14$0)>>2)]=$385$0;
 var $st$15$1=(($386+4)|0);
 HEAP32[(($st$15$1)>>2)]=$385$1;
 label=115;break;
 case 109: 
 var $388=(tempInt=HEAP32[((($3)+(4))>>2)],HEAP32[((($3)+(4))>>2)]=tempInt + 8,HEAP32[(((HEAP32[(($3)>>2)])+(tempInt))>>2)]);
 var $389=(($388)&65535);
 var $390$0=(($389<<16)>>16);
 var $390$1=(((((($389<<16)>>16)<0))|0)?-1:0);
 var $391=(($370)|0);
 var $st$16$0=(($391)|0);
 HEAP32[(($st$16$0)>>2)]=$390$0;
 var $st$17$1=(($391+4)|0);
 HEAP32[(($st$17$1)>>2)]=$390$1;
 label=115;break;
 case 110: 
 var $393=(tempInt=HEAP32[((($3)+(4))>>2)],HEAP32[((($3)+(4))>>2)]=tempInt + 8,HEAP32[(((HEAP32[(($3)>>2)])+(tempInt))>>2)]);
 var $_mask1_i25=$393&65535;
 var $394$0=$_mask1_i25;
 var $394$1=0;
 var $395=(($370)|0);
 var $st$18$0=(($395)|0);
 HEAP32[(($st$18$0)>>2)]=$394$0;
 var $st$19$1=(($395+4)|0);
 HEAP32[(($st$19$1)>>2)]=$394$1;
 label=115;break;
 case 111: 
 var $397=(tempInt=HEAP32[((($3)+(4))>>2)],HEAP32[((($3)+(4))>>2)]=tempInt + 8,HEAP32[(((HEAP32[(($3)>>2)])+(tempInt))>>2)]);
 var $398=(($397)&255);
 var $399$0=(($398<<24)>>24);
 var $399$1=(((((($398<<24)>>24)<0))|0)?-1:0);
 var $400=(($370)|0);
 var $st$20$0=(($400)|0);
 HEAP32[(($st$20$0)>>2)]=$399$0;
 var $st$21$1=(($400+4)|0);
 HEAP32[(($st$21$1)>>2)]=$399$1;
 label=115;break;
 case 112: 
 var $402=(tempInt=HEAP32[((($3)+(4))>>2)],HEAP32[((($3)+(4))>>2)]=tempInt + 8,HEAP32[(((HEAP32[(($3)>>2)])+(tempInt))>>2)]);
 var $_mask_i26=$402&255;
 var $403$0=$_mask_i26;
 var $403$1=0;
 var $404=(($370)|0);
 var $st$22$0=(($404)|0);
 HEAP32[(($st$22$0)>>2)]=$403$0;
 var $st$23$1=(($404+4)|0);
 HEAP32[(($st$23$1)>>2)]=$403$1;
 label=115;break;
 case 113: 
 var $406=(tempInt=HEAP32[((($3)+(4))>>2)],HEAP32[((($3)+(4))>>2)]=tempInt + 8,HEAPF64[(((HEAP32[(($3)>>2)])+(tempInt))>>3)]);
 var $407=$370;
 HEAPF64[(($407)>>3)]=$406;
 label=115;break;
 case 114: 
 var $409=(tempInt=HEAP32[((($3)+(4))>>2)],HEAP32[((($3)+(4))>>2)]=tempInt + 8,HEAPF64[(((HEAP32[(($3)>>2)])+(tempInt))>>3)]);
 var $410=$370;
 HEAPF64[(($410)>>3)]=$409;
 label=115;break;
 case 115: 
 var $411=((($i_233)+(1))|0);
 var $412=($411|0)<10;
 if($412){var $i_233=$411;label=102;break;}else{var $_0=1;label=118;break;}
 case 116: 
 var $413=($417|0)<10;
 if($413){var $i_332=$417;label=117;break;}else{var $_0=1;label=118;break;}
 case 117: 
 var $i_332;
 var $414=(($nl_type+($i_332<<2))|0);
 var $415=HEAP32[(($414)>>2)];
 var $416=($415|0)==0;
 var $417=((($i_332)+(1))|0);
 if($416){label=116;break;}else{var $_0=-1;label=118;break;}
 case 118: 
 var $_0;
 STACKTOP=sp;return $_0;
  default: assert(0, "bad label: " + label);
 }

}


function _vswprintf($s,$n,$fmt,$ap){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1=_fopen(137576,139200);
 var $2=_vfwprintf($1,$fmt,$ap);
 var $3=_fclose($1);
 var $4=_fopen(137576,138912);
 var $5=((($2)+(1))|0);
 var $6=STACKTOP;STACKTOP = (STACKTOP + $5)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $7=_fread($6,1,$2,$4);
 var $8=_fclose($4);
 var $9=_remove(137576);
 var $10=(($6+$2)|0);
 HEAP8[($10)]=0;
 var $11=_mbstowcs($s,$6,$n);
 var $12=($11>>>0)>=($n>>>0);
 var $13=($12?-1:$11);
 STACKTOP=sp;return $13;
}


function _vwprintf($fmt,$ap){
 var label=0;


 var $1=HEAP32[((_stdout)>>2)];
 var $2=_vfwprintf($1,$fmt,$ap);
 return $2;
}


function _wprintf($fmt,varrp){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $ap=sp;
 var $1=(($ap)|0);
 var $2=$ap;
 HEAP32[(($2)>>2)]=varrp;HEAP32[((($2)+(4))>>2)]=0;
 var $3=_vwprintf($fmt,$1);

 STACKTOP=sp;return $3;
}


function ___fputwc_unlocked($c,$f){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $mbc=sp;
 var $isascii=($c>>>0)<128;
 if($isascii){label=2;break;}else{label=3;break;}
 case 2: 
 var $2=_fputc($c,$f);
 var $_0=$2;label=7;break;
 case 3: 
 var $4=(($mbc)|0);
 var $5=_wctomb($4,$c);
 var $6=($5|0)<0;
 if($6){var $_0=-1;label=7;break;}else{label=4;break;}
 case 4: 
 var $7=($5|0)>0;
 if($7){var $i_01=0;label=6;break;}else{var $_0=$c;label=7;break;}
 case 5: 
 var $9=($15|0)<($5|0);
 if($9){var $i_01=$15;label=6;break;}else{var $_0=$c;label=7;break;}
 case 6: 
 var $i_01;
 var $10=(($mbc+$i_01)|0);
 var $11=HEAP8[($10)];
 var $12=(($11<<24)>>24);
 var $13=_fputc($12,$f);
 var $14=($13|0)==-1;
 var $15=((($i_01)+(1))|0);
 if($14){var $_0=-1;label=7;break;}else{label=5;break;}
 case 7: 
 var $_0;
 STACKTOP=sp;return $_0;
  default: assert(0, "bad label: " + label);
 }

}


function _fputwc($c,$f){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $mbc_i=sp;
 var $1=(($mbc_i)|0);
 var $$etemp$0$0=4;
 var $$etemp$0$1=0;

 var $isascii_i=($c>>>0)<128;
 if($isascii_i){label=2;break;}else{label=3;break;}
 case 2: 
 var $3=_fputc($c,$f);
 var $_0_i=$3;label=7;break;
 case 3: 
 var $5=_wctomb($1,$c);
 var $6=($5|0)<0;
 if($6){var $_0_i=-1;label=7;break;}else{label=4;break;}
 case 4: 
 var $7=($5|0)>0;
 if($7){var $i_01_i=0;label=6;break;}else{var $_0_i=$c;label=7;break;}
 case 5: 
 var $9=($15|0)<($5|0);
 if($9){var $i_01_i=$15;label=6;break;}else{var $_0_i=$c;label=7;break;}
 case 6: 
 var $i_01_i;
 var $10=(($mbc_i+$i_01_i)|0);
 var $11=HEAP8[($10)];
 var $12=(($11<<24)>>24);
 var $13=_fputc($12,$f);
 var $14=($13|0)==-1;
 var $15=((($i_01_i)+(1))|0);
 if($14){var $_0_i=-1;label=7;break;}else{label=5;break;}
 case 7: 
 var $_0_i;
 var $$etemp$1$0=4;
 var $$etemp$1$1=0;

 STACKTOP=sp;return $_0_i;
  default: assert(0, "bad label: " + label);
 }

}


function _fputws($ws,$f){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+1032)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=sp;
 var $buf=(sp)+(8);
 HEAP32[(($1)>>2)]=$ws;
 var $2=(($buf)|0);
 var $$etemp$0$0=1024;
 var $$etemp$0$1=0;

 var $l_0=0;var $4=$ws;label=2;break;
 case 2: 
 var $4;
 var $l_0;
 var $5=($4|0)==0;
 if($5){var $_0=$l_0;label=6;break;}else{label=3;break;}
 case 3: 
 var $7=_wcsrtombs($2,$1,1024,0);
 var $8=((($7)+(1))|0);
 var $9=($8>>>0)>1;
 if($9){label=4;break;}else{var $_0=$7;label=6;break;}
 case 4: 
 var $11=_fwrite($2,1,$7,$f);
 var $12=($11>>>0)<($7>>>0);
 if($12){var $_0=-1;label=6;break;}else{label=5;break;}
 case 5: 
 var $_pre=HEAP32[(($1)>>2)];
 var $l_0=$7;var $4=$_pre;label=2;break;
 case 6: 
 var $_0;
 var $$etemp$1$0=1024;
 var $$etemp$1$1=0;

 STACKTOP=sp;return $_0;
  default: assert(0, "bad label: " + label);
 }

}


function _atoll($s){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $_0=$s;label=2;break;
 case 2: 
 var $_0;
 var $2=HEAP8[($_0)];
 var $3=(($2<<24)>>24);
 var $4=_isspace($3);
 var $5=($4|0)==0;
 var $6=(($_0+1)|0);
 if($5){label=3;break;}else{var $_0=$6;label=2;break;}
 case 3: 
 var $8=HEAP8[($_0)];
 var $9=(($8<<24)>>24);
 if(($9|0)==45){ label=4;break;}else if(($9|0)==43){ var $neg_0=0;label=5;break;}else{var $neg_1_ph=0;var $_1_ph=$_0;var $12=$8;label=6;break;}
 case 4: 
 var $neg_0=1;label=5;break;
 case 5: 
 var $neg_0;
 var $_pre=HEAP8[($6)];
 var $neg_1_ph=$neg_0;var $_1_ph=$6;var $12=$_pre;label=6;break;
 case 6: 
 var $12;
 var $_1_ph;
 var $neg_1_ph;
 var $13=(($12<<24)>>24);
 var $isdigittmp1=((($13)-(48))|0);
 var $isdigit2=($isdigittmp1>>>0)<10;
 if($isdigit2){var $_13=$_1_ph;var $n_04$1=0;var $n_04$0=0;var $14=$13;label=7;break;}else{var $n_0_lcssa$1=0;var $n_0_lcssa$0=0;label=8;break;}
 case 7: 
 var $14;
 var $n_04$0;
 var $n_04$1;
 var $_13;
 var $$etemp$0$0=10;
 var $$etemp$0$1=0;
 var $15$0=___muldi3($n_04$0,$n_04$1,$$etemp$0$0,$$etemp$0$1);var $15$1=tempRet0;
 var $16=(($_13+1)|0);
 var $17=((($14)-(48))|0);
 var $18$0=$17;
 var $18$1=((((($17|0)<0))|0)?-1:0);
 var $19$0=_i64Subtract($15$0,$15$1,$18$0,$18$1);var $19$1=tempRet0;
 var $20=HEAP8[($16)];
 var $21=(($20<<24)>>24);
 var $isdigittmp=((($21)-(48))|0);
 var $isdigit=($isdigittmp>>>0)<10;
 if($isdigit){var $_13=$16;var $n_04$1=$19$1;var $n_04$0=$19$0;var $14=$21;label=7;break;}else{var $n_0_lcssa$1=$19$1;var $n_0_lcssa$0=$19$0;label=8;break;}
 case 8: 
 var $n_0_lcssa$0;
 var $n_0_lcssa$1;
 var $22=($neg_1_ph|0)!=0;
 var $$etemp$1$0=0;
 var $$etemp$1$1=0;
 var $23$0=_i64Subtract($$etemp$1$0,$$etemp$1$1,$n_0_lcssa$0,$n_0_lcssa$1);var $23$1=tempRet0;
 var $24$0=($22?$n_0_lcssa$0:$23$0);
 var $24$1=($22?$n_0_lcssa$1:$23$1);
 return (tempRet0=$24$1,$24$0);
  default: assert(0, "bad label: " + label);
 }

}


function _bsearch($key,$base,$nel,$width,$cmp){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($nel|0)==0;
 if($1){var $_0=0;label=5;break;}else{var $_023=$nel;var $_014=$base;label=2;break;}
 case 2: 
 var $_014;
 var $_023;
 var $2=$_023>>>1;
 var $3=(Math_imul($2,$width)|0);
 var $4=(($_014+$3)|0);
 var $5=FUNCTION_TABLE[$cmp]($key,$4);
 var $6=($5|0)==0;
 if($6){var $_0=$4;label=5;break;}else{label=3;break;}
 case 3: 
 var $8=($_023|0)==1;
 if($8){var $_0=0;label=5;break;}else{label=4;break;}
 case 4: 
 var $10=($5|0)<0;
 var $11=((($_023)-($2))|0);
 var $_=($10?$2:$11);
 var $_01_=($10?$_014:$4);
 var $12=($_|0)==0;
 if($12){var $_0=0;label=5;break;}else{var $_023=$_;var $_014=$_01_;label=2;break;}
 case 5: 
 var $_0;
 return $_0;
  default: assert(0, "bad label: " + label);
 }

}


function _ecvt($x,$n,$dp,$sign){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+32)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $tmp=sp;
 var $1=((($n)-(1))|0);
 var $2=($1>>>0)>15;
 var $3=(($tmp)|0);
 var $4=($2?14:$1);
 var $5=_sprintf($3,137440,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$4,HEAPF64[(((tempVarArgs)+(8))>>3)]=$x,tempVarArgs)); STACKTOP=tempVarArgs;
 var $6=HEAP8[($3)];
 var $7=(($6<<24)>>24)==45;
 var $8=($7&1);
 HEAP32[(($sign)>>2)]=$8;
 var $9=(($tmp+$8)|0);
 var $10=HEAP8[($9)];
 var $11=(($10<<24)>>24)==101;
 if($11){var $i_0_lcssa=$8;var $_lcssa=141080;label=3;break;}else{var $i_01=$8;var $j_02=0;var $13=$10;var $12=141080;label=2;break;}
 case 2: 
 var $12;
 var $13;
 var $j_02;
 var $i_01;
 HEAP8[($12)]=$13;
 var $14=((($i_01)+(1))|0);
 var $15=(($13<<24)>>24)!=46;
 var $16=($15&1);
 var $17=((($16)+($j_02))|0);
 var $18=(($tmp+$14)|0);
 var $19=HEAP8[($18)];
 var $20=(($19<<24)>>24)==101;
 var $21=((141080+$17)|0);
 if($20){var $i_0_lcssa=$14;var $_lcssa=$21;label=3;break;}else{var $i_01=$14;var $j_02=$17;var $13=$19;var $12=$21;label=2;break;}
 case 3: 
 var $_lcssa;
 var $i_0_lcssa;
 HEAP8[($_lcssa)]=0;
 var $_sum=((($i_0_lcssa)+(1))|0);
 var $22=(($tmp+$_sum)|0);
 var $23=_atoi($22);
 var $24=((($23)+(1))|0);
 HEAP32[(($dp)>>2)]=$24;
 STACKTOP=sp;return 141080;
  default: assert(0, "bad label: " + label);
 }

}


function _fcvt($x,$n,$dp,$sign){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+1504)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $tmp=sp;
 var $1=(($tmp)|0);
 var $$etemp$0$0=1500;
 var $$etemp$0$1=0;

 var $2=($n>>>0)>1400;
 var $_n=($2?1400:$n);
 var $3=_sprintf($1,137408,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$_n,HEAPF64[(((tempVarArgs)+(8))>>3)]=$x,tempVarArgs)); STACKTOP=tempVarArgs;
 var $4=HEAP8[($1)];
 var $5=(($4<<24)>>24)==45;
 var $6=($5&1);
 var $7=(($tmp+$6)|0);
 var $8=HEAP8[($7)];
 var $9=(($8<<24)>>24)==48;
 if($9){label=2;break;}else{label=3;break;}
 case 2: 
 var $_sum23=$6|2;
 var $11=(($tmp+$_sum23)|0);
 var $12=_strspn($11,139192);
 var $lz_0=$12;label=4;break;
 case 3: 
 var $14=_strcspn($7,138888);
 var $15=(((-$14))|0);
 var $lz_0=$15;label=4;break;
 case 4: 
 var $lz_0;
 var $17=($_n|0)>($lz_0|0);
 if($17){label=6;break;}else{label=5;break;}
 case 5: 
 HEAP32[(($sign)>>2)]=$6;
 HEAP32[(($dp)>>2)]=1;
 var $19=($_n>>>0)>14;
 var $_n_op=(((14)-($_n))|0);
 var $_sum=($19?0:$_n_op);
 var $20=((138528+$_sum)|0);
 var $_0=$20;label=7;break;
 case 6: 
 var $22=((($_n)-($lz_0))|0);
 var $23=_ecvt($x,$22,$dp,$sign);
 var $_0=$23;label=7;break;
 case 7: 
 var $_0;
 var $$etemp$1$0=1500;
 var $$etemp$1$1=0;

 STACKTOP=sp;return $_0;
  default: assert(0, "bad label: " + label);
 }

}


function _gcvt($x,$n,$b){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1=_sprintf($b,137312,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$n,HEAPF64[(((tempVarArgs)+(8))>>3)]=$x,tempVarArgs)); STACKTOP=tempVarArgs;
 STACKTOP=sp;return $b;
}


function _qsort($base,$nel,$width,$cmp){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+936)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $tmp_i26=sp;
 var $tmp_i=(sp)+(256);
 var $ar_i=(sp)+(512);
 var $lp=(sp)+(744);
 var $1=$lp;
 var $$etemp$0$0=192;
 var $$etemp$0$1=0;

 var $2=(Math_imul($width,$nel)|0);
 var $3=($2|0)==0;
 if($3){label=65;break;}else{label=2;break;}
 case 2: 
 var $_sum=((($2)-($width))|0);
 var $5=(($lp+4)|0);
 HEAP32[(($5)>>2)]=$width;
 var $6=(($lp)|0);
 HEAP32[(($6)>>2)]=$width;
 var $i_0=2;var $9=$width;var $8=$width;label=3;break;
 case 3: 
 var $8;
 var $9;
 var $i_0;
 var $10=((($9)+($width))|0);
 var $11=((($10)+($8))|0);
 var $12=(($lp+($i_0<<2))|0);
 HEAP32[(($12)>>2)]=$11;
 var $13=($11>>>0)<($2>>>0);
 var $14=((($i_0)+(1))|0);
 if($13){var $i_0=$14;var $9=$8;var $8=$11;label=3;break;}else{label=4;break;}
 case 4: 
 var $15=(((-$width))|0);
 var $16=(($base+$_sum)|0);
 var $17=($_sum|0)>0;
 if($17){label=5;break;}else{var $_lcssa74=0;var $_lcssa75=1;var $head_0_lcssa=$base;var $pshift_0_lcssa=1;label=48;break;}
 case 5: 
 var $18=$ar_i;
 var $19=(($ar_i)|0);
 var $20=(($tmp_i)|0);
 var $21=($width|0)==0;
 var $22=($width>>>0)>256;
 var $23=($22?256:$width);
 var $24=($23|0)==($width|0);
 var $25=$16;
 var $26=(($tmp_i26)|0);
 var $29=0;var $28=1;var $head_076=$base;var $pshift_077=1;label=6;break;
 case 6: 
 var $pshift_077;
 var $head_076;
 var $28;
 var $29;
 var $30=$28&3;
 var $31=($30|0)==3;
 if($31){label=7;break;}else{label=25;break;}
 case 7: 
 var $$etemp$1$0=228;
 var $$etemp$1$1=0;

 HEAP32[(($19)>>2)]=$head_076;
 var $33=($pshift_077|0)>1;
 if($33){var $_012_i=$pshift_077;var $_03_i=$head_076;var $i_04_i=1;var $34=$head_076;label=8;break;}else{label=24;break;}
 case 8: 
 var $34;
 var $i_04_i;
 var $_03_i;
 var $_012_i;
 var $35=(($_03_i+$15)|0);
 var $36=((($_012_i)-(2))|0);
 var $37=(($lp+($36<<2))|0);
 var $38=HEAP32[(($37)>>2)];
 var $sum_i=((($38)+($width))|0);
 var $_sum_i=(((-$sum_i))|0);
 var $39=(($_03_i+$_sum_i)|0);
 var $40=FUNCTION_TABLE[$cmp]($34,$39);
 var $41=($40|0)>-1;
 if($41){label=9;break;}else{label=10;break;}
 case 9: 
 var $43=FUNCTION_TABLE[$cmp]($34,$35);
 var $44=($43|0)>-1;
 if($44){var $i_0_lcssa_i=$i_04_i;label=15;break;}else{label=10;break;}
 case 10: 
 var $46=FUNCTION_TABLE[$cmp]($39,$35);
 var $47=($46|0)>-1;
 var $48=((($i_04_i)+(1))|0);
 var $49=(($ar_i+($i_04_i<<2))|0);
 if($47){label=11;break;}else{label=12;break;}
 case 11: 
 HEAP32[(($49)>>2)]=$39;
 var $51=((($_012_i)-(1))|0);
 var $_0_be_i=$39;var $_01_be_i=$51;label=13;break;
 case 12: 
 HEAP32[(($49)>>2)]=$35;
 var $_0_be_i=$35;var $_01_be_i=$36;label=13;break;
 case 13: 
 var $_01_be_i;
 var $_0_be_i;
 var $53=($_01_be_i|0)>1;
 if($53){label=14;break;}else{var $i_0_lcssa_i=$48;label=15;break;}
 case 14: 
 var $_pre_i=HEAP32[(($19)>>2)];
 var $_012_i=$_01_be_i;var $_03_i=$_0_be_i;var $i_04_i=$48;var $34=$_pre_i;label=8;break;
 case 15: 
 var $i_0_lcssa_i;
 var $$etemp$2$0=256;
 var $$etemp$2$1=0;

 var $54=($i_0_lcssa_i|0)<2;
 if($54){label=24;break;}else{label=16;break;}
 case 16: 
 var $56=(($ar_i+($i_0_lcssa_i<<2))|0);
 HEAP32[(($56)>>2)]=$20;
 if($21){label=24;break;}else{label=17;break;}
 case 17: 
 var $57=($i_0_lcssa_i|0)>0;
 if($57){var $_02_us_i=$width;var $70=$20;label=22;break;}else{label=18;break;}
 case 18: 
 var $58=HEAP32[(($19)>>2)];
 assert($23 % 1 === 0);(_memcpy($20, $58, $23)|0);
 if($24){label=24;break;}else{var $_02_i71=$width;var $74=$23;label=23;break;}
 case 19: 
 var $60=($_02_us_i|0)==($72|0);
 if($60){label=24;break;}else{label=20;break;}
 case 20: 
 var $61=((($_02_us_i)-($72))|0);
 var $_pre_i9=HEAP32[(($56)>>2)];
 var $_02_us_i=$61;var $70=$_pre_i9;label=22;break;
 case 21: 
 var $63;
 var $i_01_us_i;
 var $64=(($ar_i+($i_01_us_i<<2))|0);
 var $65=((($i_01_us_i)+(1))|0);
 var $66=(($ar_i+($65<<2))|0);
 var $67=HEAP32[(($66)>>2)];
 assert($72 % 1 === 0);(_memcpy($63, $67, $72)|0);
 var $68=(($63+$72)|0);
 HEAP32[(($64)>>2)]=$68;
 var $69=($65|0)<($i_0_lcssa_i|0);
 if($69){var $i_01_us_i=$65;var $63=$67;label=21;break;}else{label=19;break;}
 case 22: 
 var $70;
 var $_02_us_i;
 var $71=($_02_us_i>>>0)>256;
 var $72=($71?256:$_02_us_i);
 var $73=HEAP32[(($19)>>2)];
 assert($72 % 1 === 0);(_memcpy($70, $73, $72)|0);
 var $i_01_us_i=0;var $63=$73;label=21;break;
 case 23: 
 var $74;
 var $_02_i71;
 var $75=((($_02_i71)-($74))|0);
 var $76=($75>>>0)>256;
 var $77=($76?256:$75);
 assert($77 % 1 === 0);(_memcpy($20, $58, $77)|0);
 var $78=($75|0)==($77|0);
 if($78){label=24;break;}else{var $_02_i71=$75;var $74=$77;label=23;break;}
 case 24: 
 var $$etemp$3$0=256;
 var $$etemp$3$1=0;

 var $$etemp$4$0=228;
 var $$etemp$4$1=0;

 var $79=$28>>>2;
 var $80=$29<<30;
 var $81=$79|$80;
 var $82=$29>>>2;
 var $83=((($pshift_077)+(2))|0);
 var $pshift_1=$83;var $154=$81;var $153=$82;label=47;break;
 case 25: 
 var $85=((($pshift_077)-(1))|0);
 var $86=(($lp+($85<<2))|0);
 var $87=HEAP32[(($86)>>2)];
 var $88=$head_076;
 var $89=((($25)-($88))|0);
 var $90=($87>>>0)<($89>>>0);
 if($90){label=27;break;}else{label=26;break;}
 case 26: 
 _trinkle($head_076,$width,$cmp,$28,$29,$pshift_077,0,$6);
 label=44;break;
 case 27: 
 var $$etemp$5$0=228;
 var $$etemp$5$1=0;

 HEAP32[(($19)>>2)]=$head_076;
 var $93=($pshift_077|0)>1;
 if($93){var $_012_i16=$pshift_077;var $_03_i15=$head_076;var $i_04_i14=1;var $94=$head_076;label=28;break;}else{label=44;break;}
 case 28: 
 var $94;
 var $i_04_i14;
 var $_03_i15;
 var $_012_i16;
 var $95=(($_03_i15+$15)|0);
 var $96=((($_012_i16)-(2))|0);
 var $97=(($lp+($96<<2))|0);
 var $98=HEAP32[(($97)>>2)];
 var $sum_i17=((($98)+($width))|0);
 var $_sum_i18=(((-$sum_i17))|0);
 var $99=(($_03_i15+$_sum_i18)|0);
 var $100=FUNCTION_TABLE[$cmp]($94,$99);
 var $101=($100|0)>-1;
 if($101){label=29;break;}else{label=30;break;}
 case 29: 
 var $103=FUNCTION_TABLE[$cmp]($94,$95);
 var $104=($103|0)>-1;
 if($104){var $i_0_lcssa_i24=$i_04_i14;label=35;break;}else{label=30;break;}
 case 30: 
 var $106=FUNCTION_TABLE[$cmp]($99,$95);
 var $107=($106|0)>-1;
 var $108=((($i_04_i14)+(1))|0);
 var $109=(($ar_i+($i_04_i14<<2))|0);
 if($107){label=31;break;}else{label=32;break;}
 case 31: 
 HEAP32[(($109)>>2)]=$99;
 var $111=((($_012_i16)-(1))|0);
 var $_0_be_i20=$99;var $_01_be_i19=$111;label=33;break;
 case 32: 
 HEAP32[(($109)>>2)]=$95;
 var $_0_be_i20=$95;var $_01_be_i19=$96;label=33;break;
 case 33: 
 var $_01_be_i19;
 var $_0_be_i20;
 var $113=($_01_be_i19|0)>1;
 if($113){label=34;break;}else{var $i_0_lcssa_i24=$108;label=35;break;}
 case 34: 
 var $_pre_i22=HEAP32[(($19)>>2)];
 var $_012_i16=$_01_be_i19;var $_03_i15=$_0_be_i20;var $i_04_i14=$108;var $94=$_pre_i22;label=28;break;
 case 35: 
 var $i_0_lcssa_i24;
 var $$etemp$6$0=256;
 var $$etemp$6$1=0;

 var $114=($i_0_lcssa_i24|0)<2;
 if($114){label=44;break;}else{label=36;break;}
 case 36: 
 var $116=(($ar_i+($i_0_lcssa_i24<<2))|0);
 HEAP32[(($116)>>2)]=$26;
 if($21){label=44;break;}else{label=37;break;}
 case 37: 
 var $117=($i_0_lcssa_i24|0)>0;
 if($117){var $_02_us_i31=$width;var $130=$26;label=42;break;}else{label=38;break;}
 case 38: 
 var $118=HEAP32[(($19)>>2)];
 assert($23 % 1 === 0);(_memcpy($26, $118, $23)|0);
 if($24){label=44;break;}else{var $_02_i3368=$width;var $134=$23;label=43;break;}
 case 39: 
 var $120=($_02_us_i31|0)==($132|0);
 if($120){label=44;break;}else{label=40;break;}
 case 40: 
 var $121=((($_02_us_i31)-($132))|0);
 var $_pre_i28=HEAP32[(($116)>>2)];
 var $_02_us_i31=$121;var $130=$_pre_i28;label=42;break;
 case 41: 
 var $123;
 var $i_01_us_i30;
 var $124=(($ar_i+($i_01_us_i30<<2))|0);
 var $125=((($i_01_us_i30)+(1))|0);
 var $126=(($ar_i+($125<<2))|0);
 var $127=HEAP32[(($126)>>2)];
 assert($132 % 1 === 0);(_memcpy($123, $127, $132)|0);
 var $128=(($123+$132)|0);
 HEAP32[(($124)>>2)]=$128;
 var $129=($125|0)<($i_0_lcssa_i24|0);
 if($129){var $i_01_us_i30=$125;var $123=$127;label=41;break;}else{label=39;break;}
 case 42: 
 var $130;
 var $_02_us_i31;
 var $131=($_02_us_i31>>>0)>256;
 var $132=($131?256:$_02_us_i31);
 var $133=HEAP32[(($19)>>2)];
 assert($132 % 1 === 0);(_memcpy($130, $133, $132)|0);
 var $i_01_us_i30=0;var $123=$133;label=41;break;
 case 43: 
 var $134;
 var $_02_i3368;
 var $135=((($_02_i3368)-($134))|0);
 var $136=($135>>>0)>256;
 var $137=($136?256:$135);
 assert($137 % 1 === 0);(_memcpy($26, $118, $137)|0);
 var $138=($135|0)==($137|0);
 if($138){label=44;break;}else{var $_02_i3368=$135;var $134=$137;label=43;break;}
 case 44: 
 var $139=($pshift_077|0)==1;
 if($139){label=45;break;}else{label=46;break;}
 case 45: 
 var $141=$29<<1;
 var $142=$28>>>31;
 var $143=$142|$141;
 var $144=$28<<1;
 var $pshift_1=0;var $154=$144;var $153=$143;label=47;break;
 case 46: 
 var $145=($85>>>0)>31;
 var $146=((($pshift_077)-(33))|0);
 var $_=($145?0:$28);
 var $_65=($145?$28:$29);
 var $_66=($145?$146:$85);
 var $147=$_65<<$_66;
 var $148=(((32)-($_66))|0);
 var $149=$_>>>($148>>>0);
 var $150=$149|$147;
 var $151=$_<<$_66;
 var $pshift_1=1;var $154=$151;var $153=$150;label=47;break;
 case 47: 
 var $153;
 var $154;
 var $pshift_1;
 var $155=$154|1;
 var $156=(($head_076+$width)|0);
 var $157=($156>>>0)<($16>>>0);
 if($157){var $29=$153;var $28=$155;var $head_076=$156;var $pshift_077=$pshift_1;label=6;break;}else{var $_lcssa74=$153;var $_lcssa75=$155;var $head_0_lcssa=$156;var $pshift_0_lcssa=$pshift_1;label=48;break;}
 case 48: 
 var $pshift_0_lcssa;
 var $head_0_lcssa;
 var $_lcssa75;
 var $_lcssa74;
 _trinkle($head_0_lcssa,$width,$cmp,$_lcssa75,$_lcssa74,$pshift_0_lcssa,0,$6);
 var $pshift_2=$pshift_0_lcssa;var $head_1=$head_0_lcssa;var $160=$_lcssa75;var $159=$_lcssa74;label=49;break;
 case 49: 
 var $159;
 var $160;
 var $head_1;
 var $pshift_2;
 var $161=($pshift_2|0)==1;
 if($161){label=50;break;}else{label=52;break;}
 case 50: 
 var $163=($160|0)==1;
 if($163){label=51;break;}else{label=53;break;}
 case 51: 
 var $165=($159|0)==0;
 if($165){label=65;break;}else{label=52;break;}
 case 52: 
 var $166=($pshift_2|0)<2;
 if($166){label=53;break;}else{label=64;break;}
 case 53: 
 var $167=((($160)-(1))|0);
 var $168=($167|0)==0;
 if($168){var $187=32;label=62;break;}else{label=54;break;}
 case 54: 
 var $169=$167&1;
 var $170=($169|0)==0;
 if($170){var $_02_i_i=$167;var $nTrailingZeros_03_i_i=0;label=55;break;}else{label=57;break;}
 case 55: 
 var $nTrailingZeros_03_i_i;
 var $_02_i_i;
 var $171=((($nTrailingZeros_03_i_i)+(1))|0);
 var $172=$_02_i_i>>>1;
 var $173=$172&1;
 var $174=($173|0)==0;
 if($174){var $_02_i_i=$172;var $nTrailingZeros_03_i_i=$171;label=55;break;}else{label=56;break;}
 case 56: 
 var $175=($171|0)==0;
 if($175){label=57;break;}else{var $185=$171;label=61;break;}
 case 57: 
 var $176=($159|0)==0;
 if($176){var $_01_i5_i=32;label=60;break;}else{label=58;break;}
 case 58: 
 var $177=$159&1;
 var $178=($177|0)==0;
 if($178){var $_02_i3_i=$159;var $nTrailingZeros_03_i2_i=0;label=59;break;}else{var $_01_i5_i=0;label=60;break;}
 case 59: 
 var $nTrailingZeros_03_i2_i;
 var $_02_i3_i;
 var $179=((($nTrailingZeros_03_i2_i)+(1))|0);
 var $180=$_02_i3_i>>>1;
 var $181=$180&1;
 var $182=($181|0)==0;
 if($182){var $_02_i3_i=$180;var $nTrailingZeros_03_i2_i=$179;label=59;break;}else{var $_01_i5_i=$179;label=60;break;}
 case 60: 
 var $_01_i5_i;
 var $183=((($_01_i5_i)+(32))|0);
 var $184=($_01_i5_i|0)==0;
 var $__i=($184?0:$183);
 var $185=$__i;label=61;break;
 case 61: 
 var $185;
 var $186=($185>>>0)>31;
 if($186){var $187=$185;label=62;break;}else{var $_0_i49=$185;var $191=$160;var $190=$159;var $189=$185;label=63;break;}
 case 62: 
 var $187;
 var $188=((($187)-(32))|0);
 var $_0_i49=$188;var $191=$159;var $190=0;var $189=$187;label=63;break;
 case 63: 
 var $189;
 var $190;
 var $191;
 var $_0_i49;
 var $192=$191>>>($_0_i49>>>0);
 var $193=(((32)-($_0_i49))|0);
 var $194=$190<<$193;
 var $195=$194|$192;
 var $196=$190>>>($_0_i49>>>0);
 var $197=((($189)+($pshift_2))|0);
 var $_pre=(($head_1+$15)|0);
 var $pshift_2=$197;var $head_1=$_pre;var $160=$195;var $159=$196;label=49;break;
 case 64: 
 var $199=$159<<2;
 var $200=$160>>>30;
 var $201=$200|$199;
 var $202=((($pshift_2)-(2))|0);
 var $203=$160<<1;
 var $204=$203&2147483646;
 var $205=$200<<31;
 var $206=$204|$205;
 var $207=$206^3;
 var $208=$201>>>1;
 var $209=(($lp+($202<<2))|0);
 var $210=HEAP32[(($209)>>2)];
 var $sum=((($210)+($width))|0);
 var $_sum2=(((-$sum))|0);
 var $211=(($head_1+$_sum2)|0);
 var $212=((($pshift_2)-(1))|0);
 _trinkle($211,$width,$cmp,$207,$208,$212,1,$6);
 var $213=$208<<1;
 var $214=$200&1;
 var $215=$213|$214;
 var $216=$207<<1;
 var $217=$216|1;
 var $218=(($head_1+$15)|0);
 _trinkle($218,$width,$cmp,$217,$215,$202,1,$6);
 var $pshift_2=$202;var $head_1=$218;var $160=$217;var $159=$215;label=49;break;
 case 65: 
 var $$etemp$7$0=192;
 var $$etemp$7$1=0;

 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function _trinkle($head,$width,$cmp,$pp_val,$pp_1_val,$pshift,$trusty,$lp){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+976)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $tmp_i6=sp;
 var $tmp_i=(sp)+(256);
 var $ar_i=(sp)+(512);
 var $ar=(sp)+(744);
 var $1=$ar;
 var $$etemp$0$0=228;
 var $$etemp$0$1=0;

 var $2=(($ar)|0);
 HEAP32[(($2)>>2)]=$head;
 var $3=(((-$width))|0);
 var $4=($pp_val|0)==1;
 var $5=($pp_1_val|0)==0;
 var $or_cond18=$4&$5;
 if($or_cond18){var $_02_lcssa=$trusty;var $_01_lcssa=$pshift;var $i_0_lcssa=1;var $_0_lcssa=$head;label=18;break;}else{var $8=$pp_1_val;var $7=$pp_val;var $_029=$trusty;var $_0110=$pshift;var $i_011=1;var $_012=$head;var $6=$head;label=2;break;}
 case 2: 
 var $6;
 var $_012;
 var $i_011;
 var $_0110;
 var $_029;
 var $7;
 var $8;
 var $9=(($lp+($_0110<<2))|0);
 var $10=HEAP32[(($9)>>2)];
 var $11=(((-$10))|0);
 var $12=(($_012+$11)|0);
 var $13=FUNCTION_TABLE[$cmp]($12,$6);
 var $14=($13|0)<1;
 if($14){var $_02_lcssa=$_029;var $_01_lcssa=$_0110;var $i_0_lcssa=$i_011;var $_0_lcssa=$_012;label=18;break;}else{label=3;break;}
 case 3: 
 var $16=($_029|0)==0;
 var $17=($_0110|0)>1;
 var $or_cond=$16&$17;
 if($or_cond){label=4;break;}else{label=6;break;}
 case 4: 
 var $19=(($_012+$3)|0);
 var $20=((($_0110)-(2))|0);
 var $21=(($lp+($20<<2))|0);
 var $22=HEAP32[(($21)>>2)];
 var $23=FUNCTION_TABLE[$cmp]($19,$12);
 var $24=($23|0)>-1;
 if($24){var $_0_lcssa26=$_012;var $i_0_lcssa27=$i_011;var $_01_lcssa28=$_0110;label=19;break;}else{label=5;break;}
 case 5: 
 var $sum=((($22)+($width))|0);
 var $_sum=(((-$sum))|0);
 var $26=(($_012+$_sum)|0);
 var $27=FUNCTION_TABLE[$cmp]($26,$12);
 var $28=($27|0)>-1;
 if($28){var $_0_lcssa26=$_012;var $i_0_lcssa27=$i_011;var $_01_lcssa28=$_0110;label=19;break;}else{label=6;break;}
 case 6: 
 var $30=((($i_011)+(1))|0);
 var $31=(($ar+($i_011<<2))|0);
 HEAP32[(($31)>>2)]=$12;
 var $32=((($7)-(1))|0);
 var $33=($32|0)==0;
 if($33){var $52=32;label=15;break;}else{label=7;break;}
 case 7: 
 var $34=$32&1;
 var $35=($34|0)==0;
 if($35){var $_02_i_i=$32;var $nTrailingZeros_03_i_i=0;label=8;break;}else{label=10;break;}
 case 8: 
 var $nTrailingZeros_03_i_i;
 var $_02_i_i;
 var $36=((($nTrailingZeros_03_i_i)+(1))|0);
 var $37=$_02_i_i>>>1;
 var $38=$37&1;
 var $39=($38|0)==0;
 if($39){var $_02_i_i=$37;var $nTrailingZeros_03_i_i=$36;label=8;break;}else{label=9;break;}
 case 9: 
 var $40=($36|0)==0;
 if($40){label=10;break;}else{var $50=$36;label=14;break;}
 case 10: 
 var $41=($8|0)==0;
 if($41){var $_01_i5_i=32;label=13;break;}else{label=11;break;}
 case 11: 
 var $42=$8&1;
 var $43=($42|0)==0;
 if($43){var $_02_i3_i=$8;var $nTrailingZeros_03_i2_i=0;label=12;break;}else{var $_01_i5_i=0;label=13;break;}
 case 12: 
 var $nTrailingZeros_03_i2_i;
 var $_02_i3_i;
 var $44=((($nTrailingZeros_03_i2_i)+(1))|0);
 var $45=$_02_i3_i>>>1;
 var $46=$45&1;
 var $47=($46|0)==0;
 if($47){var $_02_i3_i=$45;var $nTrailingZeros_03_i2_i=$44;label=12;break;}else{var $_01_i5_i=$44;label=13;break;}
 case 13: 
 var $_01_i5_i;
 var $48=((($_01_i5_i)+(32))|0);
 var $49=($_01_i5_i|0)==0;
 var $__i=($49?0:$48);
 var $50=$__i;label=14;break;
 case 14: 
 var $50;
 var $51=($50>>>0)>31;
 if($51){var $52=$50;label=15;break;}else{var $_0_i=$50;var $56=$7;var $55=$8;var $54=$50;label=16;break;}
 case 15: 
 var $52;
 var $53=((($52)-(32))|0);
 var $_0_i=$53;var $56=$8;var $55=0;var $54=$52;label=16;break;
 case 16: 
 var $54;
 var $55;
 var $56;
 var $_0_i;
 var $57=$56>>>($_0_i>>>0);
 var $58=(((32)-($_0_i))|0);
 var $59=$55<<$58;
 var $60=$59|$57;
 var $61=$55>>>($_0_i>>>0);
 var $62=((($54)+($_0110))|0);
 var $63=($60|0)==1;
 var $64=($61|0)==0;
 var $or_cond1=$63&$64;
 if($or_cond1){var $_0_lcssa26=$12;var $i_0_lcssa27=$30;var $_01_lcssa28=$62;label=19;break;}else{label=17;break;}
 case 17: 
 var $_pre=HEAP32[(($2)>>2)];
 var $8=$61;var $7=$60;var $_029=0;var $_0110=$62;var $i_011=$30;var $_012=$12;var $6=$_pre;label=2;break;
 case 18: 
 var $_0_lcssa;
 var $i_0_lcssa;
 var $_01_lcssa;
 var $_02_lcssa;
 var $65=($_02_lcssa|0)==0;
 if($65){var $_0_lcssa26=$_0_lcssa;var $i_0_lcssa27=$i_0_lcssa;var $_01_lcssa28=$_01_lcssa;label=19;break;}else{label=47;break;}
 case 19: 
 var $_01_lcssa28;
 var $i_0_lcssa27;
 var $_0_lcssa26;
 var $66=(($tmp_i6)|0);
 var $$etemp$1$0=256;
 var $$etemp$1$1=0;

 var $67=($i_0_lcssa27|0)<2;
 if($67){label=28;break;}else{label=20;break;}
 case 20: 
 var $69=(($ar+($i_0_lcssa27<<2))|0);
 HEAP32[(($69)>>2)]=$66;
 var $70=($width|0)==0;
 if($70){label=28;break;}else{label=21;break;}
 case 21: 
 var $71=($i_0_lcssa27|0)>0;
 if($71){var $_02_us_i11=$width;var $87=$66;label=26;break;}else{label=22;break;}
 case 22: 
 var $72=($width>>>0)>256;
 var $73=($72?256:$width);
 var $74=HEAP32[(($2)>>2)];
 assert($73 % 1 === 0);(_memcpy($66, $74, $73)|0);
 var $75=($73|0)==($width|0);
 if($75){label=28;break;}else{var $_02_i136=$width;var $91=$73;label=27;break;}
 case 23: 
 var $77=($_02_us_i11|0)==($89|0);
 if($77){label=28;break;}else{label=24;break;}
 case 24: 
 var $78=((($_02_us_i11)-($89))|0);
 var $_pre_i8=HEAP32[(($69)>>2)];
 var $_02_us_i11=$78;var $87=$_pre_i8;label=26;break;
 case 25: 
 var $80;
 var $i_01_us_i10;
 var $81=(($ar+($i_01_us_i10<<2))|0);
 var $82=((($i_01_us_i10)+(1))|0);
 var $83=(($ar+($82<<2))|0);
 var $84=HEAP32[(($83)>>2)];
 assert($89 % 1 === 0);(_memcpy($80, $84, $89)|0);
 var $85=(($80+$89)|0);
 HEAP32[(($81)>>2)]=$85;
 var $86=($82|0)<($i_0_lcssa27|0);
 if($86){var $i_01_us_i10=$82;var $80=$84;label=25;break;}else{label=23;break;}
 case 26: 
 var $87;
 var $_02_us_i11;
 var $88=($_02_us_i11>>>0)>256;
 var $89=($88?256:$_02_us_i11);
 var $90=HEAP32[(($2)>>2)];
 assert($89 % 1 === 0);(_memcpy($87, $90, $89)|0);
 var $i_01_us_i10=0;var $80=$90;label=25;break;
 case 27: 
 var $91;
 var $_02_i136;
 var $92=((($_02_i136)-($91))|0);
 var $93=($92>>>0)>256;
 var $94=($93?256:$92);
 assert($94 % 1 === 0);(_memcpy($66, $74, $94)|0);
 var $95=($92|0)==($94|0);
 if($95){label=28;break;}else{var $_02_i136=$92;var $91=$94;label=27;break;}
 case 28: 
 var $$etemp$2$0=256;
 var $$etemp$2$1=0;

 var $96=$ar_i;
 var $$etemp$3$0=228;
 var $$etemp$3$1=0;

 var $97=(($ar_i)|0);
 HEAP32[(($97)>>2)]=$_0_lcssa26;
 var $98=($_01_lcssa28|0)>1;
 if($98){var $_012_i=$_01_lcssa28;var $_03_i=$_0_lcssa26;var $i_04_i=1;var $100=$_0_lcssa26;label=30;break;}else{label=29;break;}
 case 29: 
 var $99=(($tmp_i)|0);
 var $$etemp$4$0=256;
 var $$etemp$4$1=0;

 var $150=$99;label=46;break;
 case 30: 
 var $100;
 var $i_04_i;
 var $_03_i;
 var $_012_i;
 var $101=(($_03_i+$3)|0);
 var $102=((($_012_i)-(2))|0);
 var $103=(($lp+($102<<2))|0);
 var $104=HEAP32[(($103)>>2)];
 var $sum_i=((($104)+($width))|0);
 var $_sum_i=(((-$sum_i))|0);
 var $105=(($_03_i+$_sum_i)|0);
 var $106=FUNCTION_TABLE[$cmp]($100,$105);
 var $107=($106|0)>-1;
 if($107){label=31;break;}else{label=32;break;}
 case 31: 
 var $109=FUNCTION_TABLE[$cmp]($100,$101);
 var $110=($109|0)>-1;
 if($110){var $i_0_lcssa_i=$i_04_i;label=37;break;}else{label=32;break;}
 case 32: 
 var $112=FUNCTION_TABLE[$cmp]($105,$101);
 var $113=($112|0)>-1;
 var $114=((($i_04_i)+(1))|0);
 var $115=(($ar_i+($i_04_i<<2))|0);
 if($113){label=33;break;}else{label=34;break;}
 case 33: 
 HEAP32[(($115)>>2)]=$105;
 var $117=((($_012_i)-(1))|0);
 var $_0_be_i=$105;var $_01_be_i=$117;label=35;break;
 case 34: 
 HEAP32[(($115)>>2)]=$101;
 var $_0_be_i=$101;var $_01_be_i=$102;label=35;break;
 case 35: 
 var $_01_be_i;
 var $_0_be_i;
 var $119=($_01_be_i|0)>1;
 if($119){label=36;break;}else{var $i_0_lcssa_i=$114;label=37;break;}
 case 36: 
 var $_pre_i=HEAP32[(($97)>>2)];
 var $_012_i=$_01_be_i;var $_03_i=$_0_be_i;var $i_04_i=$114;var $100=$_pre_i;label=30;break;
 case 37: 
 var $i_0_lcssa_i;
 var $120=(($tmp_i)|0);
 var $$etemp$5$0=256;
 var $$etemp$5$1=0;

 var $121=($i_0_lcssa_i|0)<2;
 if($121){var $150=$120;label=46;break;}else{label=38;break;}
 case 38: 
 var $123=(($ar_i+($i_0_lcssa_i<<2))|0);
 HEAP32[(($123)>>2)]=$120;
 var $124=($width|0)==0;
 if($124){var $150=$120;label=46;break;}else{label=39;break;}
 case 39: 
 var $125=($i_0_lcssa_i|0)>0;
 if($125){var $_02_us_i=$width;var $141=$120;label=44;break;}else{label=40;break;}
 case 40: 
 var $126=($width>>>0)>256;
 var $127=($126?256:$width);
 var $128=HEAP32[(($97)>>2)];
 assert($127 % 1 === 0);(_memcpy($120, $128, $127)|0);
 var $129=($127|0)==($width|0);
 if($129){var $150=$120;label=46;break;}else{var $_02_i3=$width;var $145=$127;label=45;break;}
 case 41: 
 var $131=($_02_us_i|0)==($143|0);
 if($131){var $150=$120;label=46;break;}else{label=42;break;}
 case 42: 
 var $132=((($_02_us_i)-($143))|0);
 var $_pre_i3=HEAP32[(($123)>>2)];
 var $_02_us_i=$132;var $141=$_pre_i3;label=44;break;
 case 43: 
 var $134;
 var $i_01_us_i;
 var $135=(($ar_i+($i_01_us_i<<2))|0);
 var $136=((($i_01_us_i)+(1))|0);
 var $137=(($ar_i+($136<<2))|0);
 var $138=HEAP32[(($137)>>2)];
 assert($143 % 1 === 0);(_memcpy($134, $138, $143)|0);
 var $139=(($134+$143)|0);
 HEAP32[(($135)>>2)]=$139;
 var $140=($136|0)<($i_0_lcssa_i|0);
 if($140){var $i_01_us_i=$136;var $134=$138;label=43;break;}else{label=41;break;}
 case 44: 
 var $141;
 var $_02_us_i;
 var $142=($_02_us_i>>>0)>256;
 var $143=($142?256:$_02_us_i);
 var $144=HEAP32[(($97)>>2)];
 assert($143 % 1 === 0);(_memcpy($141, $144, $143)|0);
 var $i_01_us_i=0;var $134=$144;label=43;break;
 case 45: 
 var $145;
 var $_02_i3;
 var $146=((($_02_i3)-($145))|0);
 var $147=($146>>>0)>256;
 var $148=($147?256:$146);
 assert($148 % 1 === 0);(_memcpy($120, $128, $148)|0);
 var $149=($146|0)==($148|0);
 if($149){var $150=$120;label=46;break;}else{var $_02_i3=$146;var $145=$148;label=45;break;}
 case 46: 
 var $150;
 var $$etemp$6$0=256;
 var $$etemp$6$1=0;

 var $$etemp$7$0=228;
 var $$etemp$7$1=0;

 label=47;break;
 case 47: 
 var $$etemp$8$0=228;
 var $$etemp$8$1=0;

 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function _wcstof($s,$p){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+176)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $buf_i=sp;
 var $f_i=(sp)+(64);
 var $1=(($buf_i)|0);
 var $$etemp$0$0=64;
 var $$etemp$0$1=0;

 var $2=$f_i;
 var $$etemp$1$0=112;
 var $$etemp$1$1=0;

 _memset($2, 0, 112)|0;
 var $3=(($f_i)|0);
 HEAP32[(($3)>>2)]=0;
 var $4=(($f_i+8)|0);
 HEAP32[(($4)>>2)]=0;
 var $5=(($f_i+4)|0);
 HEAP32[(($5)>>2)]=0;
 var $6=(($buf_i+4)|0);
 var $7=(($f_i+44)|0);
 HEAP32[(($7)>>2)]=$6;
 var $8=(($f_i+48)|0);
 HEAP32[(($8)>>2)]=60;
 var $9=(($f_i+76)|0);
 HEAP32[(($9)>>2)]=-1;
 var $10=(($f_i+32)|0);
 HEAP32[(($10)>>2)]=32;
 var $t_0_i=$s;label=2;break;
 case 2: 
 var $t_0_i;
 var $12=HEAP32[(($t_0_i)>>2)];
 var $13=_iswspace($12);
 var $14=($13|0)==0;
 var $15=(($t_0_i+4)|0);
 if($14){label=3;break;}else{var $t_0_i=$15;label=2;break;}
 case 3: 
 var $17=$t_0_i;
 var $18=(($f_i+84)|0);
 HEAP32[(($18)>>2)]=$17;
 ___shlim($f_i,0);
 var $19=___floatscan($f_i,0,1);
 var $20=($p|0)==0;
 if($20){label=7;break;}else{label=4;break;}
 case 4: 
 var $22=(($f_i+108)|0);
 var $23=HEAP32[(($22)>>2)];
 var $24=HEAP32[(($5)>>2)];
 var $25=HEAP32[(($4)>>2)];
 var $26=$24;
 var $27=$25;
 var $28=((($26)-($27))|0);
 var $29=((($28)+($23))|0);
 var $30=($29|0)==0;
 if($30){var $34=$s;label=6;break;}else{label=5;break;}
 case 5: 
 var $32=(($t_0_i+($29<<2))|0);
 var $34=$32;label=6;break;
 case 6: 
 var $34;
 HEAP32[(($p)>>2)]=$34;
 label=7;break;
 case 7: 
 var $$etemp$2$0=112;
 var $$etemp$2$1=0;

 var $$etemp$3$0=64;
 var $$etemp$3$1=0;

 var $35=$19;
 STACKTOP=sp;return $35;
  default: assert(0, "bad label: " + label);
 }

}


function _wcstod($s,$p){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+176)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $buf_i=sp;
 var $f_i=(sp)+(64);
 var $1=(($buf_i)|0);
 var $$etemp$0$0=64;
 var $$etemp$0$1=0;

 var $2=$f_i;
 var $$etemp$1$0=112;
 var $$etemp$1$1=0;

 _memset($2, 0, 112)|0;
 var $3=(($f_i)|0);
 HEAP32[(($3)>>2)]=0;
 var $4=(($f_i+8)|0);
 HEAP32[(($4)>>2)]=0;
 var $5=(($f_i+4)|0);
 HEAP32[(($5)>>2)]=0;
 var $6=(($buf_i+4)|0);
 var $7=(($f_i+44)|0);
 HEAP32[(($7)>>2)]=$6;
 var $8=(($f_i+48)|0);
 HEAP32[(($8)>>2)]=60;
 var $9=(($f_i+76)|0);
 HEAP32[(($9)>>2)]=-1;
 var $10=(($f_i+32)|0);
 HEAP32[(($10)>>2)]=32;
 var $t_0_i=$s;label=2;break;
 case 2: 
 var $t_0_i;
 var $12=HEAP32[(($t_0_i)>>2)];
 var $13=_iswspace($12);
 var $14=($13|0)==0;
 var $15=(($t_0_i+4)|0);
 if($14){label=3;break;}else{var $t_0_i=$15;label=2;break;}
 case 3: 
 var $17=$t_0_i;
 var $18=(($f_i+84)|0);
 HEAP32[(($18)>>2)]=$17;
 ___shlim($f_i,0);
 var $19=___floatscan($f_i,1,1);
 var $20=($p|0)==0;
 if($20){label=7;break;}else{label=4;break;}
 case 4: 
 var $22=(($f_i+108)|0);
 var $23=HEAP32[(($22)>>2)];
 var $24=HEAP32[(($5)>>2)];
 var $25=HEAP32[(($4)>>2)];
 var $26=$24;
 var $27=$25;
 var $28=((($26)-($27))|0);
 var $29=((($28)+($23))|0);
 var $30=($29|0)==0;
 if($30){var $34=$s;label=6;break;}else{label=5;break;}
 case 5: 
 var $32=(($t_0_i+($29<<2))|0);
 var $34=$32;label=6;break;
 case 6: 
 var $34;
 HEAP32[(($p)>>2)]=$34;
 label=7;break;
 case 7: 
 var $$etemp$2$0=112;
 var $$etemp$2$1=0;

 var $$etemp$3$0=64;
 var $$etemp$3$1=0;

 STACKTOP=sp;return $19;
  default: assert(0, "bad label: " + label);
 }

}


function _wcstold($s,$p){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+176)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $buf_i=sp;
 var $f_i=(sp)+(64);
 var $1=(($buf_i)|0);
 var $$etemp$0$0=64;
 var $$etemp$0$1=0;

 var $2=$f_i;
 var $$etemp$1$0=112;
 var $$etemp$1$1=0;

 _memset($2, 0, 112)|0;
 var $3=(($f_i)|0);
 HEAP32[(($3)>>2)]=0;
 var $4=(($f_i+8)|0);
 HEAP32[(($4)>>2)]=0;
 var $5=(($f_i+4)|0);
 HEAP32[(($5)>>2)]=0;
 var $6=(($buf_i+4)|0);
 var $7=(($f_i+44)|0);
 HEAP32[(($7)>>2)]=$6;
 var $8=(($f_i+48)|0);
 HEAP32[(($8)>>2)]=60;
 var $9=(($f_i+76)|0);
 HEAP32[(($9)>>2)]=-1;
 var $10=(($f_i+32)|0);
 HEAP32[(($10)>>2)]=32;
 var $t_0_i=$s;label=2;break;
 case 2: 
 var $t_0_i;
 var $12=HEAP32[(($t_0_i)>>2)];
 var $13=_iswspace($12);
 var $14=($13|0)==0;
 var $15=(($t_0_i+4)|0);
 if($14){label=3;break;}else{var $t_0_i=$15;label=2;break;}
 case 3: 
 var $17=$t_0_i;
 var $18=(($f_i+84)|0);
 HEAP32[(($18)>>2)]=$17;
 ___shlim($f_i,0);
 var $19=___floatscan($f_i,2,1);
 var $20=($p|0)==0;
 if($20){label=7;break;}else{label=4;break;}
 case 4: 
 var $22=(($f_i+108)|0);
 var $23=HEAP32[(($22)>>2)];
 var $24=HEAP32[(($5)>>2)];
 var $25=HEAP32[(($4)>>2)];
 var $26=$24;
 var $27=$25;
 var $28=((($26)-($27))|0);
 var $29=((($28)+($23))|0);
 var $30=($29|0)==0;
 if($30){var $34=$s;label=6;break;}else{label=5;break;}
 case 5: 
 var $32=(($t_0_i+($29<<2))|0);
 var $34=$32;label=6;break;
 case 6: 
 var $34;
 HEAP32[(($p)>>2)]=$34;
 label=7;break;
 case 7: 
 var $$etemp$2$0=112;
 var $$etemp$2$1=0;

 var $$etemp$3$0=64;
 var $$etemp$3$1=0;

 STACKTOP=sp;return $19;
  default: assert(0, "bad label: " + label);
 }

}


function _do_read($f,$buf,$len){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($f+84)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=$2;
 var $4=HEAP32[(($3)>>2)];
 var $5=($4|0)!=0;
 var $_=($5?$3:137240);
 var $6=(($f+48)|0);
 var $7=HEAP32[(($6)>>2)];
 var $8=($7|0)==0;
 var $_pre=(($f+44)|0);
 if($8){var $i_0_lcssa=0;label=4;break;}else{var $i_01=0;label=2;break;}
 case 2: 
 var $i_01;
 var $9=(($_+($i_01<<2))|0);
 var $10=HEAP32[(($9)>>2)];
 var $11=($10|0)==0;
 if($11){var $i_0_lcssa=$i_01;label=4;break;}else{label=3;break;}
 case 3: 
 var $13=($10|0)<128;
 var $extract_t=(($10)&255);
 var $extract_t_=($13?$extract_t:64);
 var $14=HEAP32[(($_pre)>>2)];
 var $15=(($14+$i_01)|0);
 HEAP8[($15)]=$extract_t_;
 var $16=((($i_01)+(1))|0);
 var $17=HEAP32[(($6)>>2)];
 var $18=($16>>>0)<($17>>>0);
 if($18){var $i_01=$16;label=2;break;}else{var $i_0_lcssa=$16;label=4;break;}
 case 4: 
 var $i_0_lcssa;
 var $19=HEAP32[(($_pre)>>2)];
 var $20=(($f+4)|0);
 HEAP32[(($20)>>2)]=$19;
 var $21=(($19+$i_0_lcssa)|0);
 var $22=(($f+8)|0);
 HEAP32[(($22)>>2)]=$21;
 var $23=(($_+($i_0_lcssa<<2))|0);
 var $24=$23;
 HEAP32[(($1)>>2)]=$24;
 var $25=($i_0_lcssa|0)==0;
 var $26=($len|0)==0;
 var $or_cond=$25|$26;
 if($or_cond){var $_0=0;label=6;break;}else{label=5;break;}
 case 5: 
 var $28=(($19+1)|0);
 HEAP32[(($20)>>2)]=$28;
 var $29=HEAP8[($19)];
 HEAP8[($buf)]=$29;
 var $_0=1;label=6;break;
 case 6: 
 var $_0;
 return $_0;
  default: assert(0, "bad label: " + label);
 }

}


function _wcstoull($s,$p,$base){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+176)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $buf_i=sp;
 var $f_i=(sp)+(64);
 var $1=(($buf_i)|0);
 var $$etemp$0$0=64;
 var $$etemp$0$1=0;

 var $2=$f_i;
 var $$etemp$1$0=112;
 var $$etemp$1$1=0;

 _memset($2, 0, 112)|0;
 var $3=(($f_i)|0);
 HEAP32[(($3)>>2)]=0;
 var $4=(($f_i+8)|0);
 HEAP32[(($4)>>2)]=0;
 var $5=(($f_i+4)|0);
 HEAP32[(($5)>>2)]=0;
 var $6=(($buf_i+4)|0);
 var $7=(($f_i+44)|0);
 HEAP32[(($7)>>2)]=$6;
 var $8=(($f_i+48)|0);
 HEAP32[(($8)>>2)]=60;
 var $9=(($f_i+76)|0);
 HEAP32[(($9)>>2)]=-1;
 var $10=(($f_i+32)|0);
 HEAP32[(($10)>>2)]=12;
 var $t_0_i=$s;label=2;break;
 case 2: 
 var $t_0_i;
 var $12=HEAP32[(($t_0_i)>>2)];
 var $13=_iswspace($12);
 var $14=($13|0)==0;
 var $15=(($t_0_i+4)|0);
 if($14){label=3;break;}else{var $t_0_i=$15;label=2;break;}
 case 3: 
 var $17=$t_0_i;
 var $18=(($f_i+84)|0);
 HEAP32[(($18)>>2)]=$17;
 ___shlim($f_i,0);
 var $$etemp$2$0=-1;
 var $$etemp$2$1=-1;
 var $19$0=___intscan($f_i,$base,1,$$etemp$2$0,$$etemp$2$1);
 var $19$1=tempRet0;
 var $20=($p|0)==0;
 if($20){label=7;break;}else{label=4;break;}
 case 4: 
 var $22=(($f_i+108)|0);
 var $23=HEAP32[(($22)>>2)];
 var $24=HEAP32[(($5)>>2)];
 var $25=HEAP32[(($4)>>2)];
 var $26=$24;
 var $27=$25;
 var $28=((($26)-($27))|0);
 var $29=((($28)+($23))|0);
 var $30=($29|0)==0;
 if($30){var $34=$s;label=6;break;}else{label=5;break;}
 case 5: 
 var $32=(($t_0_i+($29<<2))|0);
 var $34=$32;label=6;break;
 case 6: 
 var $34;
 HEAP32[(($p)>>2)]=$34;
 label=7;break;
 case 7: 
 var $$etemp$3$0=112;
 var $$etemp$3$1=0;

 var $$etemp$4$0=64;
 var $$etemp$4$1=0;

 STACKTOP=sp;return (tempRet0=$19$1,$19$0);
  default: assert(0, "bad label: " + label);
 }

}


function _wcstoll($s,$p,$base){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+176)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $buf_i=sp;
 var $f_i=(sp)+(64);
 var $1=(($buf_i)|0);
 var $$etemp$0$0=64;
 var $$etemp$0$1=0;

 var $2=$f_i;
 var $$etemp$1$0=112;
 var $$etemp$1$1=0;

 _memset($2, 0, 112)|0;
 var $3=(($f_i)|0);
 HEAP32[(($3)>>2)]=0;
 var $4=(($f_i+8)|0);
 HEAP32[(($4)>>2)]=0;
 var $5=(($f_i+4)|0);
 HEAP32[(($5)>>2)]=0;
 var $6=(($buf_i+4)|0);
 var $7=(($f_i+44)|0);
 HEAP32[(($7)>>2)]=$6;
 var $8=(($f_i+48)|0);
 HEAP32[(($8)>>2)]=60;
 var $9=(($f_i+76)|0);
 HEAP32[(($9)>>2)]=-1;
 var $10=(($f_i+32)|0);
 HEAP32[(($10)>>2)]=12;
 var $t_0_i=$s;label=2;break;
 case 2: 
 var $t_0_i;
 var $12=HEAP32[(($t_0_i)>>2)];
 var $13=_iswspace($12);
 var $14=($13|0)==0;
 var $15=(($t_0_i+4)|0);
 if($14){label=3;break;}else{var $t_0_i=$15;label=2;break;}
 case 3: 
 var $17=$t_0_i;
 var $18=(($f_i+84)|0);
 HEAP32[(($18)>>2)]=$17;
 ___shlim($f_i,0);
 var $$etemp$2$0=0;
 var $$etemp$2$1=-2147483648;
 var $19$0=___intscan($f_i,$base,1,$$etemp$2$0,$$etemp$2$1);
 var $19$1=tempRet0;
 var $20=($p|0)==0;
 if($20){label=7;break;}else{label=4;break;}
 case 4: 
 var $22=(($f_i+108)|0);
 var $23=HEAP32[(($22)>>2)];
 var $24=HEAP32[(($5)>>2)];
 var $25=HEAP32[(($4)>>2)];
 var $26=$24;
 var $27=$25;
 var $28=((($26)-($27))|0);
 var $29=((($28)+($23))|0);
 var $30=($29|0)==0;
 if($30){var $34=$s;label=6;break;}else{label=5;break;}
 case 5: 
 var $32=(($t_0_i+($29<<2))|0);
 var $34=$32;label=6;break;
 case 6: 
 var $34;
 HEAP32[(($p)>>2)]=$34;
 label=7;break;
 case 7: 
 var $$etemp$3$0=112;
 var $$etemp$3$1=0;

 var $$etemp$4$0=64;
 var $$etemp$4$1=0;

 STACKTOP=sp;return (tempRet0=$19$1,$19$0);
  default: assert(0, "bad label: " + label);
 }

}


function _wcstoul($s,$p,$base){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+176)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $buf_i=sp;
 var $f_i=(sp)+(64);
 var $1=(($buf_i)|0);
 var $$etemp$0$0=64;
 var $$etemp$0$1=0;

 var $2=$f_i;
 var $$etemp$1$0=112;
 var $$etemp$1$1=0;

 _memset($2, 0, 112)|0;
 var $3=(($f_i)|0);
 HEAP32[(($3)>>2)]=0;
 var $4=(($f_i+8)|0);
 HEAP32[(($4)>>2)]=0;
 var $5=(($f_i+4)|0);
 HEAP32[(($5)>>2)]=0;
 var $6=(($buf_i+4)|0);
 var $7=(($f_i+44)|0);
 HEAP32[(($7)>>2)]=$6;
 var $8=(($f_i+48)|0);
 HEAP32[(($8)>>2)]=60;
 var $9=(($f_i+76)|0);
 HEAP32[(($9)>>2)]=-1;
 var $10=(($f_i+32)|0);
 HEAP32[(($10)>>2)]=12;
 var $t_0_i=$s;label=2;break;
 case 2: 
 var $t_0_i;
 var $12=HEAP32[(($t_0_i)>>2)];
 var $13=_iswspace($12);
 var $14=($13|0)==0;
 var $15=(($t_0_i+4)|0);
 if($14){label=3;break;}else{var $t_0_i=$15;label=2;break;}
 case 3: 
 var $17=$t_0_i;
 var $18=(($f_i+84)|0);
 HEAP32[(($18)>>2)]=$17;
 ___shlim($f_i,0);
 var $$etemp$2$0=-1;
 var $$etemp$2$1=0;
 var $19$0=___intscan($f_i,$base,1,$$etemp$2$0,$$etemp$2$1);
 var $19$1=tempRet0;
 var $20=($p|0)==0;
 if($20){label=7;break;}else{label=4;break;}
 case 4: 
 var $22=(($f_i+108)|0);
 var $23=HEAP32[(($22)>>2)];
 var $24=HEAP32[(($5)>>2)];
 var $25=HEAP32[(($4)>>2)];
 var $26=$24;
 var $27=$25;
 var $28=((($26)-($27))|0);
 var $29=((($28)+($23))|0);
 var $30=($29|0)==0;
 if($30){var $34=$s;label=6;break;}else{label=5;break;}
 case 5: 
 var $32=(($t_0_i+($29<<2))|0);
 var $34=$32;label=6;break;
 case 6: 
 var $34;
 HEAP32[(($p)>>2)]=$34;
 label=7;break;
 case 7: 
 var $$etemp$3$0=112;
 var $$etemp$3$1=0;

 var $$etemp$4$0=64;
 var $$etemp$4$1=0;

 var $35$0=$19$0;
 var $35=$35$0;
 STACKTOP=sp;return $35;
  default: assert(0, "bad label: " + label);
 }

}


function _wcstol($s,$p,$base){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+176)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $buf_i=sp;
 var $f_i=(sp)+(64);
 var $1=(($buf_i)|0);
 var $$etemp$0$0=64;
 var $$etemp$0$1=0;

 var $2=$f_i;
 var $$etemp$1$0=112;
 var $$etemp$1$1=0;

 _memset($2, 0, 112)|0;
 var $3=(($f_i)|0);
 HEAP32[(($3)>>2)]=0;
 var $4=(($f_i+8)|0);
 HEAP32[(($4)>>2)]=0;
 var $5=(($f_i+4)|0);
 HEAP32[(($5)>>2)]=0;
 var $6=(($buf_i+4)|0);
 var $7=(($f_i+44)|0);
 HEAP32[(($7)>>2)]=$6;
 var $8=(($f_i+48)|0);
 HEAP32[(($8)>>2)]=60;
 var $9=(($f_i+76)|0);
 HEAP32[(($9)>>2)]=-1;
 var $10=(($f_i+32)|0);
 HEAP32[(($10)>>2)]=12;
 var $t_0_i=$s;label=2;break;
 case 2: 
 var $t_0_i;
 var $12=HEAP32[(($t_0_i)>>2)];
 var $13=_iswspace($12);
 var $14=($13|0)==0;
 var $15=(($t_0_i+4)|0);
 if($14){label=3;break;}else{var $t_0_i=$15;label=2;break;}
 case 3: 
 var $17=$t_0_i;
 var $18=(($f_i+84)|0);
 HEAP32[(($18)>>2)]=$17;
 ___shlim($f_i,0);
 var $$etemp$2$0=-2147483648;
 var $$etemp$2$1=0;
 var $19$0=___intscan($f_i,$base,1,$$etemp$2$0,$$etemp$2$1);
 var $19$1=tempRet0;
 var $20=($p|0)==0;
 if($20){label=7;break;}else{label=4;break;}
 case 4: 
 var $22=(($f_i+108)|0);
 var $23=HEAP32[(($22)>>2)];
 var $24=HEAP32[(($5)>>2)];
 var $25=HEAP32[(($4)>>2)];
 var $26=$24;
 var $27=$25;
 var $28=((($26)-($27))|0);
 var $29=((($28)+($23))|0);
 var $30=($29|0)==0;
 if($30){var $34=$s;label=6;break;}else{label=5;break;}
 case 5: 
 var $32=(($t_0_i+($29<<2))|0);
 var $34=$32;label=6;break;
 case 6: 
 var $34;
 HEAP32[(($p)>>2)]=$34;
 label=7;break;
 case 7: 
 var $$etemp$3$0=112;
 var $$etemp$3$1=0;

 var $$etemp$4$0=64;
 var $$etemp$4$1=0;

 var $35$0=$19$0;
 var $35=$35$0;
 STACKTOP=sp;return $35;
  default: assert(0, "bad label: " + label);
 }

}


function _wcstoimax($s,$p,$base){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+176)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $buf_i_i=sp;
 var $f_i_i=(sp)+(64);
 var $1=(($buf_i_i)|0);
 var $$etemp$0$0=64;
 var $$etemp$0$1=0;

 var $2=$f_i_i;
 var $$etemp$1$0=112;
 var $$etemp$1$1=0;

 _memset($2, 0, 112)|0;
 var $3=(($f_i_i)|0);
 HEAP32[(($3)>>2)]=0;
 var $4=(($f_i_i+8)|0);
 HEAP32[(($4)>>2)]=0;
 var $5=(($f_i_i+4)|0);
 HEAP32[(($5)>>2)]=0;
 var $6=(($buf_i_i+4)|0);
 var $7=(($f_i_i+44)|0);
 HEAP32[(($7)>>2)]=$6;
 var $8=(($f_i_i+48)|0);
 HEAP32[(($8)>>2)]=60;
 var $9=(($f_i_i+76)|0);
 HEAP32[(($9)>>2)]=-1;
 var $10=(($f_i_i+32)|0);
 HEAP32[(($10)>>2)]=12;
 var $t_0_i_i=$s;label=2;break;
 case 2: 
 var $t_0_i_i;
 var $12=HEAP32[(($t_0_i_i)>>2)];
 var $13=_iswspace($12);
 var $14=($13|0)==0;
 var $15=(($t_0_i_i+4)|0);
 if($14){label=3;break;}else{var $t_0_i_i=$15;label=2;break;}
 case 3: 
 var $17=$t_0_i_i;
 var $18=(($f_i_i+84)|0);
 HEAP32[(($18)>>2)]=$17;
 ___shlim($f_i_i,0);
 var $$etemp$2$0=0;
 var $$etemp$2$1=-2147483648;
 var $19$0=___intscan($f_i_i,$base,1,$$etemp$2$0,$$etemp$2$1);
 var $19$1=tempRet0;
 var $20=($p|0)==0;
 if($20){label=7;break;}else{label=4;break;}
 case 4: 
 var $22=(($f_i_i+108)|0);
 var $23=HEAP32[(($22)>>2)];
 var $24=HEAP32[(($5)>>2)];
 var $25=HEAP32[(($4)>>2)];
 var $26=$24;
 var $27=$25;
 var $28=((($26)-($27))|0);
 var $29=((($28)+($23))|0);
 var $30=($29|0)==0;
 if($30){var $34=$s;label=6;break;}else{label=5;break;}
 case 5: 
 var $32=(($t_0_i_i+($29<<2))|0);
 var $34=$32;label=6;break;
 case 6: 
 var $34;
 HEAP32[(($p)>>2)]=$34;
 label=7;break;
 case 7: 
 var $$etemp$3$0=112;
 var $$etemp$3$1=0;

 var $$etemp$4$0=64;
 var $$etemp$4$1=0;

 STACKTOP=sp;return (tempRet0=$19$1,$19$0);
  default: assert(0, "bad label: " + label);
 }

}


function _wcstoumax($s,$p,$base){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+176)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $buf_i_i=sp;
 var $f_i_i=(sp)+(64);
 var $1=(($buf_i_i)|0);
 var $$etemp$0$0=64;
 var $$etemp$0$1=0;

 var $2=$f_i_i;
 var $$etemp$1$0=112;
 var $$etemp$1$1=0;

 _memset($2, 0, 112)|0;
 var $3=(($f_i_i)|0);
 HEAP32[(($3)>>2)]=0;
 var $4=(($f_i_i+8)|0);
 HEAP32[(($4)>>2)]=0;
 var $5=(($f_i_i+4)|0);
 HEAP32[(($5)>>2)]=0;
 var $6=(($buf_i_i+4)|0);
 var $7=(($f_i_i+44)|0);
 HEAP32[(($7)>>2)]=$6;
 var $8=(($f_i_i+48)|0);
 HEAP32[(($8)>>2)]=60;
 var $9=(($f_i_i+76)|0);
 HEAP32[(($9)>>2)]=-1;
 var $10=(($f_i_i+32)|0);
 HEAP32[(($10)>>2)]=12;
 var $t_0_i_i=$s;label=2;break;
 case 2: 
 var $t_0_i_i;
 var $12=HEAP32[(($t_0_i_i)>>2)];
 var $13=_iswspace($12);
 var $14=($13|0)==0;
 var $15=(($t_0_i_i+4)|0);
 if($14){label=3;break;}else{var $t_0_i_i=$15;label=2;break;}
 case 3: 
 var $17=$t_0_i_i;
 var $18=(($f_i_i+84)|0);
 HEAP32[(($18)>>2)]=$17;
 ___shlim($f_i_i,0);
 var $$etemp$2$0=-1;
 var $$etemp$2$1=-1;
 var $19$0=___intscan($f_i_i,$base,1,$$etemp$2$0,$$etemp$2$1);
 var $19$1=tempRet0;
 var $20=($p|0)==0;
 if($20){label=7;break;}else{label=4;break;}
 case 4: 
 var $22=(($f_i_i+108)|0);
 var $23=HEAP32[(($22)>>2)];
 var $24=HEAP32[(($5)>>2)];
 var $25=HEAP32[(($4)>>2)];
 var $26=$24;
 var $27=$25;
 var $28=((($26)-($27))|0);
 var $29=((($28)+($23))|0);
 var $30=($29|0)==0;
 if($30){var $34=$s;label=6;break;}else{label=5;break;}
 case 5: 
 var $32=(($t_0_i_i+($29<<2))|0);
 var $34=$32;label=6;break;
 case 6: 
 var $34;
 HEAP32[(($p)>>2)]=$34;
 label=7;break;
 case 7: 
 var $$etemp$3$0=112;
 var $$etemp$3$1=0;

 var $$etemp$4$0=64;
 var $$etemp$4$1=0;

 STACKTOP=sp;return (tempRet0=$19$1,$19$0);
  default: assert(0, "bad label: " + label);
 }

}


function _do_read96($f,$buf,$len){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($f+84)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=$2;
 var $4=HEAP32[(($3)>>2)];
 var $5=($4|0)!=0;
 var $_=($5?$3:137216);
 var $6=(($f+48)|0);
 var $7=HEAP32[(($6)>>2)];
 var $8=($7|0)==0;
 var $_pre=(($f+44)|0);
 if($8){var $i_0_lcssa=0;label=4;break;}else{var $i_01=0;label=2;break;}
 case 2: 
 var $i_01;
 var $9=(($_+($i_01<<2))|0);
 var $10=HEAP32[(($9)>>2)];
 var $11=($10|0)==0;
 if($11){var $i_0_lcssa=$i_01;label=4;break;}else{label=3;break;}
 case 3: 
 var $13=($10|0)<128;
 var $extract_t=(($10)&255);
 var $extract_t_=($13?$extract_t:64);
 var $14=HEAP32[(($_pre)>>2)];
 var $15=(($14+$i_01)|0);
 HEAP8[($15)]=$extract_t_;
 var $16=((($i_01)+(1))|0);
 var $17=HEAP32[(($6)>>2)];
 var $18=($16>>>0)<($17>>>0);
 if($18){var $i_01=$16;label=2;break;}else{var $i_0_lcssa=$16;label=4;break;}
 case 4: 
 var $i_0_lcssa;
 var $19=HEAP32[(($_pre)>>2)];
 var $20=(($f+4)|0);
 HEAP32[(($20)>>2)]=$19;
 var $21=(($19+$i_0_lcssa)|0);
 var $22=(($f+8)|0);
 HEAP32[(($22)>>2)]=$21;
 var $23=(($_+($i_0_lcssa<<2))|0);
 var $24=$23;
 HEAP32[(($1)>>2)]=$24;
 var $25=($i_0_lcssa|0)==0;
 var $26=($len|0)==0;
 var $or_cond=$25|$26;
 if($or_cond){var $_0=0;label=6;break;}else{label=5;break;}
 case 5: 
 var $28=(($19+1)|0);
 HEAP32[(($20)>>2)]=$28;
 var $29=HEAP8[($19)];
 HEAP8[($buf)]=$29;
 var $_0=1;label=6;break;
 case 6: 
 var $_0;
 return $_0;
  default: assert(0, "bad label: " + label);
 }

}


function _bcmp($s1,$s2,$n){
 var label=0;


 var $1=_memcmp($s1,$s2,$n);
 return $1;
}


function _bcopy($s1,$s2,$n){
 var label=0;


 _memmove($s2,$s1,$n,1,0);
 return;
}


function _bzero($s,$n){
 var label=0;


 _memset($s, 0, $n)|0;
 return;
}


function _index($s,$c){
 var label=0;


 var $1=_strchr($s,$c);
 return $1;
}


function _memccpy($dest,$src,$c,$n){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=$c&255;
 var $2=$src;
 var $3=$dest;
 var $4=$2^$3;
 var $5=$4&3;
 var $6=($5|0)==0;
 if($6){label=2;break;}else{var $s_1_ph=$src;var $d_1_ph=$dest;var $_2_ph=$n;label=11;break;}
 case 2: 
 var $7=$2&3;
 var $8=($7|0)!=0;
 var $_not17=$8^1;
 var $9=($n|0)==0;
 var $or_cond18=$9|$_not17;
 if($or_cond18){var $_04_lcssa=$n;var $d_0_lcssa=$dest;var $s_0_lcssa=$src;var $_lcssa=$8;label=6;break;}else{label=3;break;}
 case 3: 
 var $10=(($c)&255);
 var $_0419=$n;var $d_020=$dest;var $s_021=$src;var $12=$8;label=4;break;
 case 4: 
 var $12;
 var $s_021;
 var $d_020;
 var $_0419;
 var $13=HEAP8[($s_021)];
 HEAP8[($d_020)]=$13;
 var $14=(($13<<24)>>24)==(($10<<24)>>24);
 if($14){var $_04_lcssa=$_0419;var $d_0_lcssa=$d_020;var $s_0_lcssa=$s_021;var $_lcssa=$12;label=6;break;}else{label=5;break;}
 case 5: 
 var $16=((($_0419)-(1))|0);
 var $17=(($s_021+1)|0);
 var $18=(($d_020+1)|0);
 var $19=$17;
 var $20=$19&3;
 var $21=($20|0)!=0;
 var $_not=$21^1;
 var $22=($16|0)==0;
 var $or_cond=$22|$_not;
 if($or_cond){var $_04_lcssa=$16;var $d_0_lcssa=$18;var $s_0_lcssa=$17;var $_lcssa=$21;label=6;break;}else{var $_0419=$16;var $d_020=$18;var $s_021=$17;var $12=$21;label=4;break;}
 case 6: 
 var $_lcssa;
 var $s_0_lcssa;
 var $d_0_lcssa;
 var $_04_lcssa;
 if($_lcssa){var $s_2=$s_0_lcssa;var $d_2=$d_0_lcssa;label=15;break;}else{label=7;break;}
 case 7: 
 var $24=(Math_imul($1,16843009)|0);
 var $25=$d_0_lcssa;
 var $26=$s_0_lcssa;
 var $27=($_04_lcssa>>>0)>3;
 if($27){var $_19=$_04_lcssa;var $wd_010=$25;var $ws_011=$26;label=8;break;}else{var $_1_lcssa=$_04_lcssa;var $wd_0_lcssa=$25;var $ws_0_lcssa=$26;label=10;break;}
 case 8: 
 var $ws_011;
 var $wd_010;
 var $_19;
 var $28=HEAP32[(($ws_011)>>2)];
 var $29=$28^$24;
 var $30=((($29)-(16843009))|0);
 var $31=$29&-2139062144;
 var $32=$31^-2139062144;
 var $33=$32&$30;
 var $34=($33|0)==0;
 if($34){label=9;break;}else{var $_1_lcssa=$_19;var $wd_0_lcssa=$wd_010;var $ws_0_lcssa=$ws_011;label=10;break;}
 case 9: 
 HEAP32[(($wd_010)>>2)]=$28;
 var $36=((($_19)-(4))|0);
 var $37=(($ws_011+4)|0);
 var $38=(($wd_010+4)|0);
 var $39=($36>>>0)>3;
 if($39){var $_19=$36;var $wd_010=$38;var $ws_011=$37;label=8;break;}else{var $_1_lcssa=$36;var $wd_0_lcssa=$38;var $ws_0_lcssa=$37;label=10;break;}
 case 10: 
 var $ws_0_lcssa;
 var $wd_0_lcssa;
 var $_1_lcssa;
 var $40=$wd_0_lcssa;
 var $41=$ws_0_lcssa;
 var $s_1_ph=$41;var $d_1_ph=$40;var $_2_ph=$_1_lcssa;label=11;break;
 case 11: 
 var $_2_ph;
 var $d_1_ph;
 var $s_1_ph;
 var $42=($_2_ph|0)==0;
 if($42){var $s_2=$s_1_ph;var $d_2=$d_1_ph;label=15;break;}else{label=12;break;}
 case 12: 
 var $43=(($c)&255);
 var $_25=$_2_ph;var $d_16=$d_1_ph;var $s_17=$s_1_ph;label=13;break;
 case 13: 
 var $s_17;
 var $d_16;
 var $_25;
 var $45=HEAP8[($s_17)];
 HEAP8[($d_16)]=$45;
 var $46=(($45<<24)>>24)==(($43<<24)>>24);
 if($46){var $s_2=$s_17;var $d_2=$d_16;label=15;break;}else{label=14;break;}
 case 14: 
 var $48=((($_25)-(1))|0);
 var $49=(($s_17+1)|0);
 var $50=(($d_16+1)|0);
 var $51=($48|0)==0;
 if($51){var $s_2=$49;var $d_2=$50;label=15;break;}else{var $_25=$48;var $d_16=$50;var $s_17=$49;label=13;break;}
 case 15: 
 var $d_2;
 var $s_2;
 var $52=HEAP8[($s_2)];
 var $53=(($c)&255);
 var $54=(($52<<24)>>24)==(($53<<24)>>24);
 var $55=(($d_2+1)|0);
 var $_0=($54?$55:0);
 return $_0;
  default: assert(0, "bad label: " + label);
 }

}


function _memmem($h0,$k,$n0,$l){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+1056)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $byteset_i=sp;
 var $shift_i=(sp)+(32);
 var $1=($l|0)==0;
 if($1){var $_0=$h0;label=74;break;}else{label=2;break;}
 case 2: 
 var $3=($k>>>0)<($l>>>0);
 if($3){var $_0=0;label=74;break;}else{label=3;break;}
 case 3: 
 var $5=HEAP8[($n0)];
 var $6=($5&255);
 var $7=_memchr($h0,$6,$k);
 var $8=($7|0)==0;
 var $9=($l|0)==1;
 var $or_cond=$8|$9;
 if($or_cond){var $_0=$7;label=74;break;}else{label=4;break;}
 case 4: 
 if(($l|0)==3){ label=10;break;}else if(($l|0)==4){ label=15;break;}else if(($l|0)==2){ label=5;break;}else{label=20;break;}
 case 5: 
 var $n0_idx=(($n0+1)|0);
 var $n0_idx_val=HEAP8[($n0_idx)];
 var $12=($5&255);
 var $13=$12<<8;
 var $14=($n0_idx_val&255);
 var $15=$14|$13;
 var $16=(($7+1)|0);
 var $_022_i=((($k)-(1))|0);
 var $17=($_022_i|0)==0;
 if($17){var $_0=0;label=74;break;}else{label=6;break;}
 case 6: 
 var $18=HEAP8[($7)];
 var $19=HEAP8[($16)];
 var $20=($18&255);
 var $21=($19&255);
 var $22=$20<<8;
 var $23=$22|$21;
 var $_013_i=$16;var $hw_04_i=$23;var $_025_i=$_022_i;label=7;break;
 case 7: 
 var $_025_i;
 var $hw_04_i;
 var $_013_i;
 var $25=(($hw_04_i<<16)>>16)==(($15<<16)>>16);
 if($25){label=8;break;}else{label=9;break;}
 case 8: 
 var $27=((($_013_i)-(1))|0);
 var $_0=$27;label=74;break;
 case 9: 
 var $29=$hw_04_i<<8;
 var $30=(($_013_i+1)|0);
 var $31=HEAP8[($30)];
 var $32=($31&255);
 var $33=$32|$29;
 var $_02_i=((($_025_i)-(1))|0);
 var $34=($_02_i|0)==0;
 if($34){var $_0=0;label=74;break;}else{var $_013_i=$30;var $hw_04_i=$33;var $_025_i=$_02_i;label=7;break;}
 case 10: 
 var $n0_idx2=(($n0+1)|0);
 var $n0_idx2_val=HEAP8[($n0_idx2)];
 var $n0_idx3=(($n0+2)|0);
 var $n0_idx3_val=HEAP8[($n0_idx3)];
 var $36=$6<<24;
 var $37=($n0_idx2_val&255);
 var $38=$37<<16;
 var $39=$38|$36;
 var $40=($n0_idx3_val&255);
 var $41=$40<<8;
 var $42=$39|$41;
 var $43=(($7+2)|0);
 var $44=((($k)-(2))|0);
 var $45=($44|0)==0;
 if($45){var $_0=0;label=74;break;}else{label=11;break;}
 case 11: 
 var $46=(($7+1)|0);
 var $47=HEAP8[($46)];
 var $48=HEAP8[($7)];
 var $49=HEAP8[($43)];
 var $50=($47&255);
 var $51=($48&255);
 var $52=($49&255);
 var $53=$50<<16;
 var $54=$51<<24;
 var $55=$52<<8;
 var $56=$54|$53;
 var $57=$56|$55;
 var $_022_i9=$44;var $_013_i8=$43;var $hw_04_i7=$57;label=12;break;
 case 12: 
 var $hw_04_i7;
 var $_013_i8;
 var $_022_i9;
 var $59=($hw_04_i7|0)==($42|0);
 if($59){label=13;break;}else{label=14;break;}
 case 13: 
 var $61=((($_013_i8)-(2))|0);
 var $_0=$61;label=74;break;
 case 14: 
 var $63=((($_022_i9)-(1))|0);
 var $64=(($_013_i8+1)|0);
 var $65=HEAP8[($64)];
 var $66=($65&255);
 var $67=$66|$hw_04_i7;
 var $68=$67<<8;
 var $69=($63|0)==0;
 if($69){var $_0=0;label=74;break;}else{var $_022_i9=$63;var $_013_i8=$64;var $hw_04_i7=$68;label=12;break;}
 case 15: 
 var $71=$6<<24;
 var $72=(($n0+1)|0);
 var $73=HEAP8[($72)];
 var $74=($73&255);
 var $75=$74<<16;
 var $76=$75|$71;
 var $77=(($n0+2)|0);
 var $78=HEAP8[($77)];
 var $79=($78&255);
 var $80=$79<<8;
 var $81=$76|$80;
 var $82=(($n0+3)|0);
 var $83=HEAP8[($82)];
 var $84=($83&255);
 var $85=$81|$84;
 var $86=(($7+3)|0);
 var $87=((($k)-(3))|0);
 var $88=($87|0)==0;
 if($88){var $_0=0;label=74;break;}else{label=16;break;}
 case 16: 
 var $89=(($7+1)|0);
 var $90=(($7+2)|0);
 var $91=HEAP8[($89)];
 var $92=HEAP8[($7)];
 var $93=HEAP8[($90)];
 var $94=($91&255);
 var $95=($92&255);
 var $96=($93&255);
 var $97=$94<<16;
 var $98=$95<<24;
 var $99=HEAP8[($86)];
 var $100=$96<<8;
 var $101=$98|$97;
 var $102=($99&255);
 var $103=$101|$100;
 var $104=$103|$102;
 var $_024_i=$87;var $_015_i=$86;var $hw_06_i=$104;label=17;break;
 case 17: 
 var $hw_06_i;
 var $_015_i;
 var $_024_i;
 var $106=($hw_06_i|0)==($85|0);
 if($106){label=18;break;}else{label=19;break;}
 case 18: 
 var $108=((($_015_i)-(3))|0);
 var $_0=$108;label=74;break;
 case 19: 
 var $110=((($_024_i)-(1))|0);
 var $111=$hw_06_i<<8;
 var $112=(($_015_i+1)|0);
 var $113=HEAP8[($112)];
 var $114=($113&255);
 var $115=$114|$111;
 var $116=($110|0)==0;
 if($116){var $_0=0;label=74;break;}else{var $_024_i=$110;var $_015_i=$112;var $hw_06_i=$115;label=17;break;}
 case 20: 
 var $117=(($7+$k)|0);
 var $118=$byteset_i;
 var $$etemp$0$0=32;
 var $$etemp$0$1=0;

 _memset($118, 0, 32)|0;
 var $119=$shift_i;
 var $$etemp$1$0=1024;
 var $$etemp$1$1=0;

 var $i_034_i=1;var $121=$5;label=22;break;
 case 21: 
 var $120=($l>>>0)>1;
 if($120){var $ip_0_ph74_i=-1;var $jp_0_ph75_i=0;var $158=1;label=34;break;}else{var $p_1_ph_ph43_i=1;var $ip_1_ph51_i=-1;var $ip_0_ph71124_i=-1;var $p_0_ph_ph63128_i=1;label=45;break;}
 case 22: 
 var $121;
 var $i_034_i;
 var $122=($121&255);
 var $123=$122&31;
 var $124=1<<$123;
 var $125=$122>>>5;
 var $126=(($byteset_i+($125<<2))|0);
 var $127=HEAP32[(($126)>>2)];
 var $128=$124|$127;
 HEAP32[(($126)>>2)]=$128;
 var $129=(($shift_i+($122<<2))|0);
 HEAP32[(($129)>>2)]=$i_034_i;
 var $130=($i_034_i>>>0)<($l>>>0);
 if($130){label=23;break;}else{label=21;break;}
 case 23: 
 var $_phi_trans_insert=(($n0+$i_034_i)|0);
 var $_pre=HEAP8[($_phi_trans_insert)];
 var $phitmp=((($i_034_i)+(1))|0);
 var $i_034_i=$phitmp;var $121=$_pre;label=22;break;
 case 24: 
 var $132=((($144)+($jp_0_ph2459_i))|0);
 var $133=($132>>>0)<($l>>>0);
 if($133){var $k_032_i=$144;var $135=$132;label=26;break;}else{var $p_0_ph_ph63_i=$p_0_ph_ph66_i;var $ip_0_ph71_i=$ip_0_ph74_i;label=25;break;}
 case 25: 
 var $ip_0_ph71_i;
 var $p_0_ph_ph63_i;
 var $ip_1_ph54_i=-1;var $jp_1_ph55_i=0;var $186=1;label=44;break;
 case 26: 
 var $135;
 var $k_032_i;
 var $136=((($k_032_i)+($ip_0_ph74_i))|0);
 var $137=(($n0+$136)|0);
 var $138=HEAP8[($137)];
 var $139=(($n0+$135)|0);
 var $140=HEAP8[($139)];
 var $141=(($138<<24)>>24)==(($140<<24)>>24);
 if($141){label=27;break;}else{label=30;break;}
 case 27: 
 var $143=($k_032_i|0)==($p_0_ph_ph66_i|0);
 var $144=((($k_032_i)+(1))|0);
 if($143){label=28;break;}else{label=24;break;}
 case 28: 
 var $145=((($jp_0_ph2459_i)+($p_0_ph_ph66_i))|0);
 var $146=((($145)+(1))|0);
 var $147=($146>>>0)<($l>>>0);
 if($147){var $jp_0_ph2459_i=$145;var $148=$146;label=29;break;}else{var $p_0_ph_ph63_i=$p_0_ph_ph66_i;var $ip_0_ph71_i=$ip_0_ph74_i;label=25;break;}
 case 29: 
 var $148;
 var $jp_0_ph2459_i;
 var $k_032_i=1;var $135=$148;label=26;break;
 case 30: 
 var $150=($138&255)>($140&255);
 var $151=((($135)-($ip_0_ph74_i))|0);
 if($150){label=31;break;}else{label=33;break;}
 case 31: 
 var $152=((($135)+(1))|0);
 var $153=($152>>>0)<($l>>>0);
 if($153){var $jp_0_ph24_ph65_i=$135;var $p_0_ph_ph66_i=$151;var $154=$152;label=32;break;}else{var $p_0_ph_ph63_i=$151;var $ip_0_ph71_i=$ip_0_ph74_i;label=25;break;}
 case 32: 
 var $154;
 var $p_0_ph_ph66_i;
 var $jp_0_ph24_ph65_i;
 var $jp_0_ph2459_i=$jp_0_ph24_ph65_i;var $148=$154;label=29;break;
 case 33: 
 var $155=((($jp_0_ph2459_i)+(1))|0);
 var $156=((($jp_0_ph2459_i)+(2))|0);
 var $157=($156>>>0)<($l>>>0);
 if($157){var $ip_0_ph74_i=$jp_0_ph2459_i;var $jp_0_ph75_i=$155;var $158=$156;label=34;break;}else{var $p_0_ph_ph63_i=1;var $ip_0_ph71_i=$jp_0_ph2459_i;label=25;break;}
 case 34: 
 var $158;
 var $jp_0_ph75_i;
 var $ip_0_ph74_i;
 var $jp_0_ph24_ph65_i=$jp_0_ph75_i;var $p_0_ph_ph66_i=1;var $154=$158;label=32;break;
 case 35: 
 var $160=((($172)+($jp_1_ph1239_i))|0);
 var $161=($160>>>0)<($l>>>0);
 if($161){var $k_118_i=$172;var $163=$160;label=36;break;}else{var $p_1_ph_ph43_i=$p_1_ph_ph46_i;var $ip_1_ph51_i=$ip_1_ph54_i;var $ip_0_ph71124_i=$ip_0_ph71_i;var $p_0_ph_ph63128_i=$p_0_ph_ph63_i;label=45;break;}
 case 36: 
 var $163;
 var $k_118_i;
 var $164=((($k_118_i)+($ip_1_ph54_i))|0);
 var $165=(($n0+$164)|0);
 var $166=HEAP8[($165)];
 var $167=(($n0+$163)|0);
 var $168=HEAP8[($167)];
 var $169=(($166<<24)>>24)==(($168<<24)>>24);
 if($169){label=37;break;}else{label=40;break;}
 case 37: 
 var $171=($k_118_i|0)==($p_1_ph_ph46_i|0);
 var $172=((($k_118_i)+(1))|0);
 if($171){label=38;break;}else{label=35;break;}
 case 38: 
 var $173=((($jp_1_ph1239_i)+($p_1_ph_ph46_i))|0);
 var $174=((($173)+(1))|0);
 var $175=($174>>>0)<($l>>>0);
 if($175){var $jp_1_ph1239_i=$173;var $176=$174;label=39;break;}else{var $p_1_ph_ph43_i=$p_1_ph_ph46_i;var $ip_1_ph51_i=$ip_1_ph54_i;var $ip_0_ph71124_i=$ip_0_ph71_i;var $p_0_ph_ph63128_i=$p_0_ph_ph63_i;label=45;break;}
 case 39: 
 var $176;
 var $jp_1_ph1239_i;
 var $k_118_i=1;var $163=$176;label=36;break;
 case 40: 
 var $178=($166&255)<($168&255);
 var $179=((($163)-($ip_1_ph54_i))|0);
 if($178){label=41;break;}else{label=43;break;}
 case 41: 
 var $180=((($163)+(1))|0);
 var $181=($180>>>0)<($l>>>0);
 if($181){var $jp_1_ph12_ph45_i=$163;var $p_1_ph_ph46_i=$179;var $182=$180;label=42;break;}else{var $p_1_ph_ph43_i=$179;var $ip_1_ph51_i=$ip_1_ph54_i;var $ip_0_ph71124_i=$ip_0_ph71_i;var $p_0_ph_ph63128_i=$p_0_ph_ph63_i;label=45;break;}
 case 42: 
 var $182;
 var $p_1_ph_ph46_i;
 var $jp_1_ph12_ph45_i;
 var $jp_1_ph1239_i=$jp_1_ph12_ph45_i;var $176=$182;label=39;break;
 case 43: 
 var $183=((($jp_1_ph1239_i)+(1))|0);
 var $184=((($jp_1_ph1239_i)+(2))|0);
 var $185=($184>>>0)<($l>>>0);
 if($185){var $ip_1_ph54_i=$jp_1_ph1239_i;var $jp_1_ph55_i=$183;var $186=$184;label=44;break;}else{var $p_1_ph_ph43_i=1;var $ip_1_ph51_i=$jp_1_ph1239_i;var $ip_0_ph71124_i=$ip_0_ph71_i;var $p_0_ph_ph63128_i=$p_0_ph_ph63_i;label=45;break;}
 case 44: 
 var $186;
 var $jp_1_ph55_i;
 var $ip_1_ph54_i;
 var $jp_1_ph12_ph45_i=$jp_1_ph55_i;var $p_1_ph_ph46_i=1;var $182=$186;label=42;break;
 case 45: 
 var $p_0_ph_ph63128_i;
 var $ip_0_ph71124_i;
 var $ip_1_ph51_i;
 var $p_1_ph_ph43_i;
 var $187=((($ip_1_ph51_i)+(1))|0);
 var $188=((($ip_0_ph71124_i)+(1))|0);
 var $189=($187>>>0)>($188>>>0);
 var $p_1_p_0_i=($189?$p_1_ph_ph43_i:$p_0_ph_ph63128_i);
 var $ip_1_ip_0_i=($189?$ip_1_ph51_i:$ip_0_ph71124_i);
 var $190=(($n0+$p_1_p_0_i)|0);
 var $191=((($ip_1_ip_0_i)+(1))|0);
 var $192=_memcmp($n0,$190,$191);
 var $193=($192|0)==0;
 if($193){label=47;break;}else{label=46;break;}
 case 46: 
 var $194=((($l)-($ip_1_ip_0_i))|0);
 var $195=((($194)-(1))|0);
 var $196=($ip_1_ip_0_i>>>0)>($195>>>0);
 var $ip_1_ip_0__i=($196?$ip_1_ip_0_i:$195);
 var $197=((($ip_1_ip_0__i)+(1))|0);
 var $198=$117;
 var $199=((($l)-(1))|0);
 var $p_3_i115=$197;var $205=$198;var $204=$199;label=48;break;
 case 47: 
 var $200=((($l)-($p_1_p_0_i))|0);
 var $201=$117;
 var $202=((($l)-(1))|0);
 var $notlhs_i=($p_1_p_0_i|0)==($l|0);
 var $203=((($l)-($p_1_p_0_i))|0);
 if($notlhs_i){var $p_3_i115=$p_1_p_0_i;var $205=$201;var $204=$202;label=48;break;}else{var $_027_us_i=$7;var $mem_08_us_i=0;label=49;break;}
 case 48: 
 var $204;
 var $205;
 var $p_3_i115;
 var $206=(($n0+$191)|0);
 var $_027_i=$7;label=62;break;
 case 49: 
 var $mem_08_us_i;
 var $_027_us_i;
 var $207=(($_027_us_i+$202)|0);
 var $208=HEAP8[($207)];
 var $209=($208&255);
 var $210=$209>>>5;
 var $211=(($byteset_i+($210<<2))|0);
 var $212=HEAP32[(($211)>>2)];
 var $213=$209&31;
 var $214=1<<$213;
 var $215=$214&$212;
 var $216=($215|0)==0;
 if($216){label=60;break;}else{label=50;break;}
 case 50: 
 var $218=(($shift_i+($209<<2))|0);
 var $219=HEAP32[(($218)>>2)];
 var $220=((($l)-($219))|0);
 var $221=($219|0)==($l|0);
 if($221){label=52;break;}else{label=51;break;}
 case 51: 
 var $notrhs_us_i=($mem_08_us_i|0)!=0;
 var $223=($220>>>0)<($p_1_p_0_i>>>0);
 var $or_cond3_us_i=$notrhs_us_i&$223;
 var $k_2_us_i=($or_cond3_us_i?$203:$220);
 var $224=(($_027_us_i+$k_2_us_i)|0);
 var $mem_0_be_us_i=0;var $_02_be_us_i=$224;label=61;break;
 case 52: 
 var $226=($191>>>0)>($mem_08_us_i>>>0);
 var $_mem_0_us_i=($226?$191:$mem_08_us_i);
 var $227=(($n0+$_mem_0_us_i)|0);
 var $228=HEAP8[($227)];
 var $229=(($228<<24)>>24)==0;
 if($229){var $k_4_us_i=$191;label=56;break;}else{var $k_36_us_i=$_mem_0_us_i;var $_pr_us_i=$228;label=54;break;}
 case 53: 
 var $231=(($n0+$237)|0);
 var $232=HEAP8[($231)];
 var $233=(($232<<24)>>24)==0;
 if($233){var $k_4_us_i=$191;label=56;break;}else{var $k_36_us_i=$237;var $_pr_us_i=$232;label=54;break;}
 case 54: 
 var $_pr_us_i;
 var $k_36_us_i;
 var $234=(($_027_us_i+$k_36_us_i)|0);
 var $235=HEAP8[($234)];
 var $236=(($_pr_us_i<<24)>>24)==(($235<<24)>>24);
 var $237=((($k_36_us_i)+(1))|0);
 if($236){label=53;break;}else{label=55;break;}
 case 55: 
 var $239=((($k_36_us_i)-($ip_1_ip_0_i))|0);
 var $240=(($_027_us_i+$239)|0);
 var $mem_0_be_us_i=0;var $_02_be_us_i=$240;label=61;break;
 case 56: 
 var $k_4_us_i;
 var $241=($k_4_us_i>>>0)>($mem_08_us_i>>>0);
 if($241){label=57;break;}else{label=58;break;}
 case 57: 
 var $243=((($k_4_us_i)-(1))|0);
 var $244=(($n0+$243)|0);
 var $245=HEAP8[($244)];
 var $246=(($_027_us_i+$243)|0);
 var $247=HEAP8[($246)];
 var $248=(($245<<24)>>24)==(($247<<24)>>24);
 if($248){var $k_4_us_i=$243;label=56;break;}else{label=58;break;}
 case 58: 
 var $249=($k_4_us_i|0)==($mem_08_us_i|0);
 if($249){var $_0=$_027_us_i;label=74;break;}else{label=59;break;}
 case 59: 
 var $251=(($_027_us_i+$p_1_p_0_i)|0);
 var $mem_0_be_us_i=$200;var $_02_be_us_i=$251;label=61;break;
 case 60: 
 var $253=(($_027_us_i+$l)|0);
 var $mem_0_be_us_i=0;var $_02_be_us_i=$253;label=61;break;
 case 61: 
 var $_02_be_us_i;
 var $mem_0_be_us_i;
 var $254=$_02_be_us_i;
 var $255=((($201)-($254))|0);
 var $256=($255>>>0)<($l>>>0);
 if($256){var $_0=0;label=74;break;}else{var $_027_us_i=$_02_be_us_i;var $mem_08_us_i=$mem_0_be_us_i;label=49;break;}
 case 62: 
 var $_027_i;
 var $257=(($_027_i+$204)|0);
 var $258=HEAP8[($257)];
 var $259=($258&255);
 var $260=$259>>>5;
 var $261=(($byteset_i+($260<<2))|0);
 var $262=HEAP32[(($261)>>2)];
 var $263=$259&31;
 var $264=1<<$263;
 var $265=$264&$262;
 var $266=($265|0)==0;
 if($266){label=66;break;}else{label=63;break;}
 case 63: 
 var $268=(($shift_i+($259<<2))|0);
 var $269=HEAP32[(($268)>>2)];
 var $270=($269|0)==($l|0);
 if($270){label=67;break;}else{label=64;break;}
 case 64: 
 var $272=((($l)-($269))|0);
 var $273=(($_027_i+$272)|0);
 var $_02_be_i=$273;label=65;break;
 case 65: 
 var $_02_be_i;
 var $274=$_02_be_i;
 var $275=((($205)-($274))|0);
 var $276=($275>>>0)<($l>>>0);
 if($276){var $_0=0;label=74;break;}else{var $_027_i=$_02_be_i;label=62;break;}
 case 66: 
 var $278=(($_027_i+$l)|0);
 var $_02_be_i=$278;label=65;break;
 case 67: 
 var $280=HEAP8[($206)];
 var $281=(($280<<24)>>24)==0;
 if($281){var $k_4_i=$191;label=71;break;}else{var $k_36_i=$191;var $_pr_i=$280;label=69;break;}
 case 68: 
 var $283=(($n0+$289)|0);
 var $284=HEAP8[($283)];
 var $285=(($284<<24)>>24)==0;
 if($285){var $k_4_i=$191;label=71;break;}else{var $k_36_i=$289;var $_pr_i=$284;label=69;break;}
 case 69: 
 var $_pr_i;
 var $k_36_i;
 var $286=(($_027_i+$k_36_i)|0);
 var $287=HEAP8[($286)];
 var $288=(($_pr_i<<24)>>24)==(($287<<24)>>24);
 var $289=((($k_36_i)+(1))|0);
 if($288){label=68;break;}else{label=70;break;}
 case 70: 
 var $291=((($k_36_i)-($ip_1_ip_0_i))|0);
 var $292=(($_027_i+$291)|0);
 var $_02_be_i=$292;label=65;break;
 case 71: 
 var $k_4_i;
 var $293=($k_4_i|0)==0;
 if($293){var $_0=$_027_i;label=74;break;}else{label=72;break;}
 case 72: 
 var $295=((($k_4_i)-(1))|0);
 var $296=(($n0+$295)|0);
 var $297=HEAP8[($296)];
 var $298=(($_027_i+$295)|0);
 var $299=HEAP8[($298)];
 var $300=(($297<<24)>>24)==(($299<<24)>>24);
 if($300){var $k_4_i=$295;label=71;break;}else{label=73;break;}
 case 73: 
 var $302=(($_027_i+$p_3_i115)|0);
 var $_02_be_i=$302;label=65;break;
 case 74: 
 var $_0;
 STACKTOP=sp;return $_0;
  default: assert(0, "bad label: " + label);
 }

}


function _mempcpy($dest,$src,$n){
 var label=0;


 assert($n % 1 === 0);(_memcpy($dest, $src, $n)|0);
 var $1=(($dest+$n)|0);
 return $1;
}


function _memchr($src,$c,$n){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=$c&255;
 var $2=$src;
 var $3=$2&3;
 var $4=($3|0)==0;
 var $5=($n|0)==0;
 var $or_cond12=$4|$5;
 if($or_cond12){var $_0_lcssa=$n;var $s_0_lcssa=$src;var $_lcssa=$5;label=5;break;}else{label=2;break;}
 case 2: 
 var $6=(($c)&255);
 var $_013=$n;var $s_014=$src;label=3;break;
 case 3: 
 var $s_014;
 var $_013;
 var $8=HEAP8[($s_014)];
 var $9=(($8<<24)>>24)==(($6<<24)>>24);
 if($9){var $s_0_lcssa33=$s_014;var $_0_lcssa34=$_013;label=6;break;}else{label=4;break;}
 case 4: 
 var $11=(($s_014+1)|0);
 var $12=((($_013)-(1))|0);
 var $13=$11;
 var $14=$13&3;
 var $15=($14|0)==0;
 var $16=($12|0)==0;
 var $or_cond=$15|$16;
 if($or_cond){var $_0_lcssa=$12;var $s_0_lcssa=$11;var $_lcssa=$16;label=5;break;}else{var $_013=$12;var $s_014=$11;label=3;break;}
 case 5: 
 var $_lcssa;
 var $s_0_lcssa;
 var $_0_lcssa;
 if($_lcssa){var $s_2=$s_0_lcssa;var $_3=0;label=13;break;}else{var $s_0_lcssa33=$s_0_lcssa;var $_0_lcssa34=$_0_lcssa;label=6;break;}
 case 6: 
 var $_0_lcssa34;
 var $s_0_lcssa33;
 var $17=HEAP8[($s_0_lcssa33)];
 var $18=(($c)&255);
 var $19=(($17<<24)>>24)==(($18<<24)>>24);
 if($19){var $s_2=$s_0_lcssa33;var $_3=$_0_lcssa34;label=13;break;}else{label=7;break;}
 case 7: 
 var $21=(Math_imul($1,16843009)|0);
 var $22=$s_0_lcssa33;
 var $23=($_0_lcssa34>>>0)>3;
 if($23){var $_17=$_0_lcssa34;var $w_08=$22;label=8;break;}else{var $_1_lcssa=$_0_lcssa34;var $w_0_lcssa=$22;label=10;break;}
 case 8: 
 var $w_08;
 var $_17;
 var $24=HEAP32[(($w_08)>>2)];
 var $25=$24^$21;
 var $26=((($25)-(16843009))|0);
 var $27=$25&-2139062144;
 var $28=$27^-2139062144;
 var $29=$28&$26;
 var $30=($29|0)==0;
 if($30){label=9;break;}else{var $_1_lcssa=$_17;var $w_0_lcssa=$w_08;label=10;break;}
 case 9: 
 var $32=(($w_08+4)|0);
 var $33=((($_17)-(4))|0);
 var $34=($33>>>0)>3;
 if($34){var $_17=$33;var $w_08=$32;label=8;break;}else{var $_1_lcssa=$33;var $w_0_lcssa=$32;label=10;break;}
 case 10: 
 var $w_0_lcssa;
 var $_1_lcssa;
 var $35=$w_0_lcssa;
 var $36=($_1_lcssa|0)==0;
 if($36){var $s_2=$35;var $_3=0;label=13;break;}else{var $_24=$_1_lcssa;var $s_15=$35;label=11;break;}
 case 11: 
 var $s_15;
 var $_24;
 var $37=HEAP8[($s_15)];
 var $38=(($37<<24)>>24)==(($18<<24)>>24);
 if($38){var $s_2=$s_15;var $_3=$_24;label=13;break;}else{label=12;break;}
 case 12: 
 var $40=(($s_15+1)|0);
 var $41=((($_24)-(1))|0);
 var $42=($41|0)==0;
 if($42){var $s_2=$40;var $_3=0;label=13;break;}else{var $_24=$41;var $s_15=$40;label=11;break;}
 case 13: 
 var $_3;
 var $s_2;
 var $43=($_3|0)!=0;
 var $44=($43?$s_2:0);
 return $44;
  default: assert(0, "bad label: " + label);
 }

}


function ___memrchr($m,$c,$n){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($c)&255);
 var $_01=$n;label=2;break;
 case 2: 
 var $_01;
 var $3=((($_01)-(1))|0);
 var $4=($_01|0)==0;
 if($4){var $_0=0;label=4;break;}else{label=3;break;}
 case 3: 
 var $6=(($m+$3)|0);
 var $7=HEAP8[($6)];
 var $8=(($7<<24)>>24)==(($1<<24)>>24);
 if($8){var $_0=$6;label=4;break;}else{var $_01=$3;label=2;break;}
 case 4: 
 var $_0;
 return $_0;
  default: assert(0, "bad label: " + label);
 }

}


function _rindex($s,$c){
 var label=0;


 var $1=_strrchr($s,$c);
 return $1;
}


function ___stpcpy($d,$s){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=$s;
 var $2=$d;
 var $3=$1^$2;
 var $4=$3&3;
 var $5=($4|0)==0;
 if($5){label=2;break;}else{var $_1_ph=$s;var $_12_ph=$d;label=8;break;}
 case 2: 
 var $6=$1&3;
 var $7=($6|0)==0;
 if($7){var $_01_lcssa=$d;var $_0_lcssa=$s;label=5;break;}else{var $_0115=$d;var $_016=$s;label=3;break;}
 case 3: 
 var $_016;
 var $_0115;
 var $8=HEAP8[($_016)];
 HEAP8[($_0115)]=$8;
 var $9=(($8<<24)>>24)==0;
 if($9){var $_03=$_0115;label=10;break;}else{label=4;break;}
 case 4: 
 var $11=(($_016+1)|0);
 var $12=(($_0115+1)|0);
 var $13=$11;
 var $14=$13&3;
 var $15=($14|0)==0;
 if($15){var $_01_lcssa=$12;var $_0_lcssa=$11;label=5;break;}else{var $_0115=$12;var $_016=$11;label=3;break;}
 case 5: 
 var $_0_lcssa;
 var $_01_lcssa;
 var $16=$_01_lcssa;
 var $17=$_0_lcssa;
 var $18=HEAP32[(($17)>>2)];
 var $19=((($18)-(16843009))|0);
 var $20=$18&-2139062144;
 var $21=$20^-2139062144;
 var $22=$21&$19;
 var $23=($22|0)==0;
 if($23){var $wd_06=$16;var $ws_07=$17;var $24=$18;label=6;break;}else{var $wd_0_lcssa=$16;var $ws_0_lcssa=$17;label=7;break;}
 case 6: 
 var $24;
 var $ws_07;
 var $wd_06;
 var $25=(($ws_07+4)|0);
 var $26=(($wd_06+4)|0);
 HEAP32[(($wd_06)>>2)]=$24;
 var $27=HEAP32[(($25)>>2)];
 var $28=((($27)-(16843009))|0);
 var $29=$27&-2139062144;
 var $30=$29^-2139062144;
 var $31=$30&$28;
 var $32=($31|0)==0;
 if($32){var $wd_06=$26;var $ws_07=$25;var $24=$27;label=6;break;}else{var $wd_0_lcssa=$26;var $ws_0_lcssa=$25;label=7;break;}
 case 7: 
 var $ws_0_lcssa;
 var $wd_0_lcssa;
 var $33=$wd_0_lcssa;
 var $34=$ws_0_lcssa;
 var $_1_ph=$34;var $_12_ph=$33;label=8;break;
 case 8: 
 var $_12_ph;
 var $_1_ph;
 var $35=HEAP8[($_1_ph)];
 HEAP8[($_12_ph)]=$35;
 var $36=(($35<<24)>>24)==0;
 if($36){var $_03=$_12_ph;label=10;break;}else{var $_124=$_12_ph;var $_15=$_1_ph;label=9;break;}
 case 9: 
 var $_15;
 var $_124;
 var $37=(($_15+1)|0);
 var $38=(($_124+1)|0);
 var $39=HEAP8[($37)];
 HEAP8[($38)]=$39;
 var $40=(($39<<24)>>24)==0;
 if($40){var $_03=$38;label=10;break;}else{var $_124=$38;var $_15=$37;label=9;break;}
 case 10: 
 var $_03;
 return $_03;
  default: assert(0, "bad label: " + label);
 }

}


function _strcasestr($h,$n){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=_strlen($n);
 var $2=HEAP8[($h)];
 var $3=(($2<<24)>>24)==0;
 if($3){var $_0=0;label=4;break;}else{var $_012=$h;label=3;break;}
 case 2: 
 var $5=HEAP8[($9)];
 var $6=(($5<<24)>>24)==0;
 if($6){var $_0=0;label=4;break;}else{var $_012=$9;label=3;break;}
 case 3: 
 var $_012;
 var $7=_strncasecmp($_012,$n,$1);
 var $8=($7|0)==0;
 var $9=(($_012+1)|0);
 if($8){var $_0=$_012;label=4;break;}else{label=2;break;}
 case 4: 
 var $_0;
 return $_0;
  default: assert(0, "bad label: " + label);
 }

}


function _strchr($s,$c){
 var label=0;


 var $1=___strchrnul($s,$c);
 var $2=HEAP8[($1)];
 var $3=(($c)&255);
 var $4=(($2<<24)>>24)==(($3<<24)>>24);
 var $5=($4?$1:0);
 return $5;
}


function ___strchrnul($s,$c){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=$c&255;
 var $2=($1|0)==0;
 if($2){label=4;break;}else{label=2;break;}
 case 2: 
 var $3=$s;
 var $4=$3&3;
 var $5=($4|0)==0;
 if($5){var $_02_lcssa=$s;label=8;break;}else{label=3;break;}
 case 3: 
 var $6=(($c)&255);
 var $_026=$s;label=6;break;
 case 4: 
 var $8=_strlen($s);
 var $9=(($s+$8)|0);
 var $_0=$9;label=13;break;
 case 5: 
 var $11=$19;
 var $12=$11&3;
 var $13=($12|0)==0;
 if($13){var $_02_lcssa=$19;label=8;break;}else{var $_026=$19;label=6;break;}
 case 6: 
 var $_026;
 var $15=HEAP8[($_026)];
 var $16=(($15<<24)>>24)==0;
 if($16){var $_0=$_026;label=13;break;}else{label=7;break;}
 case 7: 
 var $18=(($15<<24)>>24)==(($6<<24)>>24);
 var $19=(($_026+1)|0);
 if($18){var $_0=$_026;label=13;break;}else{label=5;break;}
 case 8: 
 var $_02_lcssa;
 var $20=(Math_imul($1,16843009)|0);
 var $21=$_02_lcssa;
 var $22=HEAP32[(($21)>>2)];
 var $23=((($22)-(16843009))|0);
 var $24=$22&-2139062144;
 var $25=$24^-2139062144;
 var $26=$25&$23;
 var $27=($26|0)==0;
 if($27){var $w_03=$21;var $35=$22;label=10;break;}else{var $w_0_lcssa=$21;label=11;break;}
 case 9: 
 var $29=HEAP32[(($42)>>2)];
 var $30=((($29)-(16843009))|0);
 var $31=$29&-2139062144;
 var $32=$31^-2139062144;
 var $33=$32&$30;
 var $34=($33|0)==0;
 if($34){var $w_03=$42;var $35=$29;label=10;break;}else{var $w_0_lcssa=$42;label=11;break;}
 case 10: 
 var $35;
 var $w_03;
 var $36=$35^$20;
 var $37=((($36)-(16843009))|0);
 var $38=$36&-2139062144;
 var $39=$38^-2139062144;
 var $40=$39&$37;
 var $41=($40|0)==0;
 var $42=(($w_03+4)|0);
 if($41){label=9;break;}else{var $w_0_lcssa=$w_03;label=11;break;}
 case 11: 
 var $w_0_lcssa;
 var $43=$w_0_lcssa;
 var $44=(($c)&255);
 var $_1=$43;label=12;break;
 case 12: 
 var $_1;
 var $46=HEAP8[($_1)];
 var $47=(($46<<24)>>24)==0;
 var $48=(($46<<24)>>24)==(($44<<24)>>24);
 var $or_cond=$47|$48;
 var $49=(($_1+1)|0);
 if($or_cond){var $_0=$_1;label=13;break;}else{var $_1=$49;label=12;break;}
 case 13: 
 var $_0;
 return $_0;
  default: assert(0, "bad label: " + label);
 }

}


function _strcspn($s,$c){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+32)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $byteset=sp;
 var $1=HEAP8[($c)];
 var $2=(($1<<24)>>24)==0;
 if($2){label=3;break;}else{label=2;break;}
 case 2: 
 var $4=(($c+1)|0);
 var $5=HEAP8[($4)];
 var $6=(($5<<24)>>24)==0;
 if($6){label=3;break;}else{label=4;break;}
 case 3: 
 var $8=(($1<<24)>>24);
 var $9=___strchrnul($s,$8);
 var $10=$9;
 var $11=$s;
 var $12=((($10)-($11))|0);
 var $_0=$12;label=10;break;
 case 4: 
 var $13=$byteset;
 _memset($13, 0, 32)|0;
 var $_025=$c;var $17=$1;label=6;break;
 case 5: 
 var $14=HEAP8[($s)];
 var $15=(($14<<24)>>24)==0;
 if($15){var $_03_lcssa=$s;label=9;break;}else{var $_034=$s;var $30=$14;label=8;break;}
 case 6: 
 var $17;
 var $_025;
 var $18=($17&255);
 var $19=$18&31;
 var $20=1<<$19;
 var $21=$18>>>5;
 var $22=(($byteset+($21<<2))|0);
 var $23=HEAP32[(($22)>>2)];
 var $24=$23|$20;
 HEAP32[(($22)>>2)]=$24;
 var $25=(($_025+1)|0);
 var $26=HEAP8[($25)];
 var $27=(($26<<24)>>24)==0;
 if($27){label=5;break;}else{var $_025=$25;var $17=$26;label=6;break;}
 case 7: 
 var $28=HEAP8[($39)];
 var $29=(($28<<24)>>24)==0;
 if($29){var $_03_lcssa=$39;label=9;break;}else{var $_034=$39;var $30=$28;label=8;break;}
 case 8: 
 var $30;
 var $_034;
 var $31=($30&255);
 var $32=$31>>>5;
 var $33=(($byteset+($32<<2))|0);
 var $34=HEAP32[(($33)>>2)];
 var $35=$31&31;
 var $36=1<<$35;
 var $37=$34&$36;
 var $38=($37|0)==0;
 var $39=(($_034+1)|0);
 if($38){label=7;break;}else{var $_03_lcssa=$_034;label=9;break;}
 case 9: 
 var $_03_lcssa;
 var $40=$_03_lcssa;
 var $41=$s;
 var $42=((($40)-($41))|0);
 var $_0=$42;label=10;break;
 case 10: 
 var $_0;
 STACKTOP=sp;return $_0;
  default: assert(0, "bad label: " + label);
 }

}


function ___strdup($s){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=_strlen($s);
 var $2=((($1)+(1))|0);
 var $3=_malloc($2);
 var $4=($3|0)==0;
 if($4){var $_0=0;label=3;break;}else{label=2;break;}
 case 2: 
 assert($2 % 1 === 0);(_memcpy($3, $s, $2)|0);
 var $_0=$3;label=3;break;
 case 3: 
 var $_0;
 return $_0;
  default: assert(0, "bad label: " + label);
 }

}


function _strlcat($d,$s,$n){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=_strnlen($d,$n);
 var $2=($1|0)==($n|0);
 if($2){label=2;break;}else{label=3;break;}
 case 2: 
 var $4=_strlen($s);
 var $_pn=$4;label=4;break;
 case 3: 
 var $6=(($d+$1)|0);
 var $7=((($n)-($1))|0);
 var $8=_strlcpy($6,$s,$7);
 var $_pn=$8;label=4;break;
 case 4: 
 var $_pn;
 var $_0=((($_pn)+($1))|0);
 return $_0;
  default: assert(0, "bad label: " + label);
 }

}


function _strlcpy($d,$s,$n){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=((($n)-(1))|0);
 var $2=($n|0)==0;
 if($2){label=2;break;}else{label=3;break;}
 case 2: 
 var $_pre=$d;
 var $_2=$d;var $_29=$s;var $_pre_phi=$_pre;label=17;break;
 case 3: 
 var $4=$s;
 var $5=$d;
 var $6=$4^$5;
 var $7=$6&3;
 var $8=($7|0)==0;
 if($8){label=4;break;}else{var $_1_ph=$d;var $_26_ph=$1;var $_18_ph=$s;label=13;break;}
 case 4: 
 var $9=$4&3;
 var $10=($9|0)==0;
 var $11=($1|0)==0;
 var $or_cond22=$10|$11;
 if($or_cond22){var $_07_lcssa=$s;var $_04_lcssa=$1;var $_0_lcssa=$d;var $_lcssa=$11;label=7;break;}else{var $_0723=$s;var $_0424=$1;var $_025=$d;label=5;break;}
 case 5: 
 var $_025;
 var $_0424;
 var $_0723;
 var $12=HEAP8[($_0723)];
 HEAP8[($_025)]=$12;
 var $13=(($12<<24)>>24)==0;
 if($13){var $_0_lcssa51=$_025;var $_04_lcssa52=$_0424;var $_07_lcssa53=$_0723;label=8;break;}else{label=6;break;}
 case 6: 
 var $15=((($_0424)-(1))|0);
 var $16=(($_0723+1)|0);
 var $17=(($_025+1)|0);
 var $18=$16;
 var $19=$18&3;
 var $20=($19|0)==0;
 var $21=($15|0)==0;
 var $or_cond=$20|$21;
 if($or_cond){var $_07_lcssa=$16;var $_04_lcssa=$15;var $_0_lcssa=$17;var $_lcssa=$21;label=7;break;}else{var $_0723=$16;var $_0424=$15;var $_025=$17;label=5;break;}
 case 7: 
 var $_lcssa;
 var $_0_lcssa;
 var $_04_lcssa;
 var $_07_lcssa;
 if($_lcssa){var $_18_lcssa=$_07_lcssa;var $_1_lcssa=$_0_lcssa;label=16;break;}else{var $_0_lcssa51=$_0_lcssa;var $_04_lcssa52=$_04_lcssa;var $_07_lcssa53=$_07_lcssa;label=8;break;}
 case 8: 
 var $_07_lcssa53;
 var $_04_lcssa52;
 var $_0_lcssa51;
 var $22=HEAP8[($_07_lcssa53)];
 var $23=(($22<<24)>>24)==0;
 if($23){var $_1_ph=$_0_lcssa51;var $_26_ph=$_04_lcssa52;var $_18_ph=$_07_lcssa53;label=13;break;}else{label=9;break;}
 case 9: 
 var $25=$_0_lcssa51;
 var $26=$_07_lcssa53;
 var $27=($_04_lcssa52>>>0)>3;
 if($27){var $_1514=$_04_lcssa52;var $wd_015=$25;var $ws_016=$26;label=10;break;}else{var $_15_lcssa=$_04_lcssa52;var $wd_0_lcssa=$25;var $ws_0_lcssa=$26;label=12;break;}
 case 10: 
 var $ws_016;
 var $wd_015;
 var $_1514;
 var $28=HEAP32[(($ws_016)>>2)];
 var $29=((($28)-(16843009))|0);
 var $30=$28&-2139062144;
 var $31=$30^-2139062144;
 var $32=$31&$29;
 var $33=($32|0)==0;
 if($33){label=11;break;}else{var $_15_lcssa=$_1514;var $wd_0_lcssa=$wd_015;var $ws_0_lcssa=$ws_016;label=12;break;}
 case 11: 
 HEAP32[(($wd_015)>>2)]=$28;
 var $35=((($_1514)-(4))|0);
 var $36=(($ws_016+4)|0);
 var $37=(($wd_015+4)|0);
 var $38=($35>>>0)>3;
 if($38){var $_1514=$35;var $wd_015=$37;var $ws_016=$36;label=10;break;}else{var $_15_lcssa=$35;var $wd_0_lcssa=$37;var $ws_0_lcssa=$36;label=12;break;}
 case 12: 
 var $ws_0_lcssa;
 var $wd_0_lcssa;
 var $_15_lcssa;
 var $39=$wd_0_lcssa;
 var $40=$ws_0_lcssa;
 var $_1_ph=$39;var $_26_ph=$_15_lcssa;var $_18_ph=$40;label=13;break;
 case 13: 
 var $_18_ph;
 var $_26_ph;
 var $_1_ph;
 var $41=($_26_ph|0)==0;
 if($41){var $_18_lcssa=$_18_ph;var $_1_lcssa=$_1_ph;label=16;break;}else{var $_1810=$_18_ph;var $_2611=$_26_ph;var $_112=$_1_ph;label=14;break;}
 case 14: 
 var $_112;
 var $_2611;
 var $_1810;
 var $42=HEAP8[($_1810)];
 HEAP8[($_112)]=$42;
 var $43=(($42<<24)>>24)==0;
 if($43){var $_18_lcssa=$_1810;var $_1_lcssa=$_112;label=16;break;}else{label=15;break;}
 case 15: 
 var $45=((($_2611)-(1))|0);
 var $46=(($_1810+1)|0);
 var $47=(($_112+1)|0);
 var $48=($45|0)==0;
 if($48){var $_18_lcssa=$46;var $_1_lcssa=$47;label=16;break;}else{var $_1810=$46;var $_2611=$45;var $_112=$47;label=14;break;}
 case 16: 
 var $_1_lcssa;
 var $_18_lcssa;
 HEAP8[($_1_lcssa)]=0;
 var $_2=$_1_lcssa;var $_29=$_18_lcssa;var $_pre_phi=$5;label=17;break;
 case 17: 
 var $_pre_phi;
 var $_29;
 var $_2;
 var $50=$_2;
 var $51=((($50)-($_pre_phi))|0);
 var $52=_strlen($_29);
 var $53=((($51)+($52))|0);
 return $53;
  default: assert(0, "bad label: " + label);
 }

}


function _strncat($d,$s,$n){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=_strlen($d);
 var $2=(($d+$1)|0);
 var $3=($n|0)==0;
 if($3){var $_0_lcssa=$2;label=4;break;}else{var $_023=$s;var $_014=$n;var $_05=$2;label=2;break;}
 case 2: 
 var $_05;
 var $_014;
 var $_023;
 var $4=HEAP8[($_023)];
 var $5=(($4<<24)>>24)==0;
 if($5){var $_0_lcssa=$_05;label=4;break;}else{label=3;break;}
 case 3: 
 var $7=((($_014)-(1))|0);
 var $8=(($_023+1)|0);
 var $9=(($_05+1)|0);
 HEAP8[($_05)]=$4;
 var $10=($7|0)==0;
 if($10){var $_0_lcssa=$9;label=4;break;}else{var $_023=$8;var $_014=$7;var $_05=$9;label=2;break;}
 case 4: 
 var $_0_lcssa;
 HEAP8[($_0_lcssa)]=0;
 return $d;
  default: assert(0, "bad label: " + label);
 }

}


function _strndup($s,$n){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=_strnlen($s,$n);
 var $2=((($1)+(1))|0);
 var $3=_malloc($2);
 var $4=($3|0)==0;
 if($4){var $_0=0;label=3;break;}else{label=2;break;}
 case 2: 
 assert($1 % 1 === 0);(_memcpy($3, $s, $1)|0);
 var $6=(($3+$1)|0);
 HEAP8[($6)]=0;
 var $_0=$3;label=3;break;
 case 3: 
 var $_0;
 return $_0;
  default: assert(0, "bad label: " + label);
 }

}


function _strnlen($s,$n){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=_memchr($s,0,$n);
 var $2=($1|0)==0;
 if($2){var $8=$n;label=3;break;}else{label=2;break;}
 case 2: 
 var $4=$1;
 var $5=$s;
 var $6=((($4)-($5))|0);
 var $8=$6;label=3;break;
 case 3: 
 var $8;
 return $8;
  default: assert(0, "bad label: " + label);
 }

}


function _strpbrk($s,$b){
 var label=0;


 var $1=_strcspn($s,$b);
 var $2=(($s+$1)|0);
 var $3=HEAP8[($2)];
 var $4=(($3<<24)>>24)!=0;
 var $5=($4?$2:0);
 return $5;
}


function _strrchr($s,$c){
 var label=0;


 var $1=_strlen($s);
 var $2=((($1)+(1))|0);
 var $3=___memrchr($s,$c,$2);
 return $3;
}


function _strsep($str,$sep){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=HEAP32[(($str)>>2)];
 var $2=($1|0)==0;
 if($2){var $_0=0;label=5;break;}else{label=2;break;}
 case 2: 
 var $4=_strcspn($1,$sep);
 var $5=(($1+$4)|0);
 var $6=HEAP8[($5)];
 var $7=(($6<<24)>>24)==0;
 if($7){var $end_0=0;label=4;break;}else{label=3;break;}
 case 3: 
 var $_sum=((($4)+(1))|0);
 var $9=(($1+$_sum)|0);
 HEAP8[($5)]=0;
 var $end_0=$9;label=4;break;
 case 4: 
 var $end_0;
 HEAP32[(($str)>>2)]=$end_0;
 var $_0=$1;label=5;break;
 case 5: 
 var $_0;
 return $_0;
  default: assert(0, "bad label: " + label);
 }

}


function _strspn($s,$c){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+32)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $byteset=sp;
 var $1=$byteset;
 _memset($1, 0, 32)|0;
 var $2=HEAP8[($c)];
 var $3=(($2<<24)>>24)==0;
 if($3){var $_0=0;label=10;break;}else{label=2;break;}
 case 2: 
 var $5=(($c+1)|0);
 var $6=HEAP8[($5)];
 var $7=(($6<<24)>>24)==0;
 if($7){var $_03=$s;label=3;break;}else{var $_026=$c;var $17=$2;label=6;break;}
 case 3: 
 var $_03;
 var $8=HEAP8[($_03)];
 var $9=(($8<<24)>>24)==(($2<<24)>>24);
 var $10=(($_03+1)|0);
 if($9){var $_03=$10;label=3;break;}else{label=4;break;}
 case 4: 
 var $12=$_03;
 var $13=$s;
 var $14=((($12)-($13))|0);
 var $_0=$14;label=10;break;
 case 5: 
 var $15=HEAP8[($s)];
 var $16=(($15<<24)>>24)==0;
 if($16){var $_1_lcssa=$s;label=9;break;}else{var $_14=$s;var $30=$15;label=8;break;}
 case 6: 
 var $17;
 var $_026;
 var $18=($17&255);
 var $19=$18&31;
 var $20=1<<$19;
 var $21=$18>>>5;
 var $22=(($byteset+($21<<2))|0);
 var $23=HEAP32[(($22)>>2)];
 var $24=$23|$20;
 HEAP32[(($22)>>2)]=$24;
 var $25=(($_026+1)|0);
 var $26=HEAP8[($25)];
 var $27=(($26<<24)>>24)==0;
 if($27){label=5;break;}else{var $_026=$25;var $17=$26;label=6;break;}
 case 7: 
 var $28=HEAP8[($39)];
 var $29=(($28<<24)>>24)==0;
 if($29){var $_1_lcssa=$39;label=9;break;}else{var $_14=$39;var $30=$28;label=8;break;}
 case 8: 
 var $30;
 var $_14;
 var $31=($30&255);
 var $32=$31>>>5;
 var $33=(($byteset+($32<<2))|0);
 var $34=HEAP32[(($33)>>2)];
 var $35=$31&31;
 var $36=1<<$35;
 var $37=$34&$36;
 var $38=($37|0)==0;
 var $39=(($_14+1)|0);
 if($38){var $_1_lcssa=$_14;label=9;break;}else{label=7;break;}
 case 9: 
 var $_1_lcssa;
 var $40=$_1_lcssa;
 var $41=$s;
 var $42=((($40)-($41))|0);
 var $_0=$42;label=10;break;
 case 10: 
 var $_0;
 STACKTOP=sp;return $_0;
  default: assert(0, "bad label: " + label);
 }

}


function _strstr($h,$n){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+1056)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $byteset_i=sp;
 var $shift_i=(sp)+(32);
 var $1=HEAP8[($n)];
 var $2=(($1<<24)>>24)==0;
 if($2){var $_0=$h;label=79;break;}else{label=2;break;}
 case 2: 
 var $4=(($1<<24)>>24);
 var $5=_strchr($h,$4);
 var $6=($5|0)==0;
 if($6){var $_0=0;label=79;break;}else{label=3;break;}
 case 3: 
 var $8=(($n+1)|0);
 var $9=HEAP8[($8)];
 var $10=(($9<<24)>>24)==0;
 if($10){var $_0=$5;label=79;break;}else{label=4;break;}
 case 4: 
 var $12=(($5+1)|0);
 var $13=HEAP8[($12)];
 var $14=(($13<<24)>>24)==0;
 if($14){var $_0=0;label=79;break;}else{label=5;break;}
 case 5: 
 var $16=(($n+2)|0);
 var $17=HEAP8[($16)];
 var $18=(($17<<24)>>24)==0;
 if($18){label=6;break;}else{label=9;break;}
 case 6: 
 var $20=($1&255);
 var $21=$20<<8;
 var $22=($9&255);
 var $23=$22|$21;
 var $24=HEAP8[($5)];
 var $25=($24&255);
 var $26=$25<<8;
 var $27=($13&255);
 var $28=$26|$27;
 var $29=(($28<<16)>>16)==(($23<<16)>>16);
 if($29){var $_0_lcssa_i=$12;var $_lcssa_i=0;label=8;break;}else{var $_02_i=$12;var $hw_03_i=$28;label=7;break;}
 case 7: 
 var $hw_03_i;
 var $_02_i;
 var $30=$hw_03_i<<8;
 var $31=(($_02_i+1)|0);
 var $32=HEAP8[($31)];
 var $33=($32&255);
 var $34=$33|$30;
 var $35=(($32<<24)>>24)==0;
 var $36=(($34<<16)>>16)==(($23<<16)>>16);
 var $or_cond_i=$35|$36;
 if($or_cond_i){var $_0_lcssa_i=$31;var $_lcssa_i=$35;label=8;break;}else{var $_02_i=$31;var $hw_03_i=$34;label=7;break;}
 case 8: 
 var $_lcssa_i;
 var $_0_lcssa_i;
 var $37=((($_0_lcssa_i)-(1))|0);
 var $__i=($_lcssa_i?0:$37);
 var $_0=$__i;label=79;break;
 case 9: 
 var $39=(($5+2)|0);
 var $40=HEAP8[($39)];
 var $41=(($40<<24)>>24)==0;
 if($41){var $_0=0;label=79;break;}else{label=10;break;}
 case 10: 
 var $43=(($n+3)|0);
 var $44=HEAP8[($43)];
 var $45=(($44<<24)>>24)==0;
 if($45){label=11;break;}else{label=14;break;}
 case 11: 
 var $47=($1&255);
 var $48=$47<<24;
 var $49=($9&255);
 var $50=$49<<16;
 var $51=$50|$48;
 var $52=($17&255);
 var $53=$52<<8;
 var $54=$51|$53;
 var $55=HEAP8[($5)];
 var $56=($55&255);
 var $57=$56<<24;
 var $58=($13&255);
 var $59=$58<<16;
 var $60=($40&255);
 var $61=$60<<8;
 var $62=$61|$59;
 var $63=$62|$57;
 var $64=($63|0)==($54|0);
 if($64){var $_0_lcssa_i12=$39;var $_lcssa_i11=0;label=13;break;}else{var $_02_i8=$39;var $hw_03_i7=$63;label=12;break;}
 case 12: 
 var $hw_03_i7;
 var $_02_i8;
 var $65=(($_02_i8+1)|0);
 var $66=HEAP8[($65)];
 var $67=($66&255);
 var $68=$67|$hw_03_i7;
 var $69=$68<<8;
 var $70=(($66<<24)>>24)==0;
 var $71=($69|0)==($54|0);
 var $or_cond_i9=$70|$71;
 if($or_cond_i9){var $_0_lcssa_i12=$65;var $_lcssa_i11=$70;label=13;break;}else{var $_02_i8=$65;var $hw_03_i7=$69;label=12;break;}
 case 13: 
 var $_lcssa_i11;
 var $_0_lcssa_i12;
 var $72=((($_0_lcssa_i12)-(2))|0);
 var $__i13=($_lcssa_i11?0:$72);
 var $_0=$__i13;label=79;break;
 case 14: 
 var $74=(($5+3)|0);
 var $75=HEAP8[($74)];
 var $76=(($75<<24)>>24)==0;
 if($76){var $_0=0;label=79;break;}else{label=15;break;}
 case 15: 
 var $78=(($n+4)|0);
 var $79=HEAP8[($78)];
 var $80=(($79<<24)>>24)==0;
 if($80){label=16;break;}else{label=19;break;}
 case 16: 
 var $82=($1&255);
 var $83=$82<<24;
 var $84=($9&255);
 var $85=$84<<16;
 var $86=$85|$83;
 var $87=($17&255);
 var $88=$87<<8;
 var $89=$86|$88;
 var $90=($44&255);
 var $91=$89|$90;
 var $92=HEAP8[($5)];
 var $93=($92&255);
 var $94=$93<<24;
 var $95=($13&255);
 var $96=$95<<16;
 var $97=($40&255);
 var $98=$97<<8;
 var $99=($75&255);
 var $100=$98|$96;
 var $101=$100|$99;
 var $102=$101|$94;
 var $103=($102|0)==($91|0);
 if($103){var $_0_lcssa_i20=$74;var $_lcssa_i19=0;label=18;break;}else{var $_02_i16=$74;var $hw_03_i15=$102;label=17;break;}
 case 17: 
 var $hw_03_i15;
 var $_02_i16;
 var $104=$hw_03_i15<<8;
 var $105=(($_02_i16+1)|0);
 var $106=HEAP8[($105)];
 var $107=($106&255);
 var $108=$107|$104;
 var $109=(($106<<24)>>24)==0;
 var $110=($108|0)==($91|0);
 var $or_cond_i17=$109|$110;
 if($or_cond_i17){var $_0_lcssa_i20=$105;var $_lcssa_i19=$109;label=18;break;}else{var $_02_i16=$105;var $hw_03_i15=$108;label=17;break;}
 case 18: 
 var $_lcssa_i19;
 var $_0_lcssa_i20;
 var $111=((($_0_lcssa_i20)-(3))|0);
 var $__i21=($_lcssa_i19?0:$111);
 var $_0=$__i21;label=79;break;
 case 19: 
 var $112=$byteset_i;
 var $$etemp$0$0=32;
 var $$etemp$0$1=0;

 _memset($112, 0, 32)|0;
 var $113=$shift_i;
 var $$etemp$1$0=1024;
 var $$etemp$1$1=0;

 var $l_037_i=0;var $114=$1;label=20;break;
 case 20: 
 var $114;
 var $l_037_i;
 var $115=(($5+$l_037_i)|0);
 var $116=HEAP8[($115)];
 var $117=(($116<<24)>>24)==0;
 if($117){var $_0=0;label=79;break;}else{label=21;break;}
 case 21: 
 var $119=($114&255);
 var $120=$119&31;
 var $121=1<<$120;
 var $122=$119>>>5;
 var $123=(($byteset_i+($122<<2))|0);
 var $124=HEAP32[(($123)>>2)];
 var $125=$124|$121;
 HEAP32[(($123)>>2)]=$125;
 var $126=((($l_037_i)+(1))|0);
 var $127=(($shift_i+($119<<2))|0);
 HEAP32[(($127)>>2)]=$126;
 var $128=(($n+$126)|0);
 var $129=HEAP8[($128)];
 var $130=(($129<<24)>>24)==0;
 if($130){label=22;break;}else{var $l_037_i=$126;var $114=$129;label=20;break;}
 case 22: 
 var $131=($126>>>0)>1;
 if($131){var $ip_0_ph79_i=-1;var $jp_0_ph80_i=0;var $132=1;label=23;break;}else{var $p_1_ph_ph48_i=1;var $ip_1_ph56_i=-1;var $ip_0_ph76142_i=-1;var $p_0_ph_ph68146_i=1;label=44;break;}
 case 23: 
 var $132;
 var $jp_0_ph80_i;
 var $ip_0_ph79_i;
 var $jp_0_ph19_ph70_i=$jp_0_ph80_i;var $p_0_ph_ph71_i=1;var $135=$132;label=25;break;
 case 24: 
 var $133=((($141)+(1))|0);
 var $134=($133>>>0)<($126>>>0);
 if($134){var $jp_0_ph19_ph70_i=$141;var $p_0_ph_ph71_i=$156;var $135=$133;label=25;break;}else{var $p_0_ph_ph68_i=$156;var $ip_0_ph76_i=$ip_0_ph79_i;label=28;break;}
 case 25: 
 var $135;
 var $p_0_ph_ph71_i;
 var $jp_0_ph19_ph70_i;
 var $jp_0_ph1964_i=$jp_0_ph19_ph70_i;var $136=$135;label=26;break;
 case 26: 
 var $136;
 var $jp_0_ph1964_i;
 var $k_027_i=1;var $141=$136;label=29;break;
 case 27: 
 var $138=((($150)+($jp_0_ph1964_i))|0);
 var $139=($138>>>0)<($126>>>0);
 if($139){var $k_027_i=$150;var $141=$138;label=29;break;}else{var $p_0_ph_ph68_i=$p_0_ph_ph71_i;var $ip_0_ph76_i=$ip_0_ph79_i;label=28;break;}
 case 28: 
 var $ip_0_ph76_i;
 var $p_0_ph_ph68_i;
 var $ip_1_ph59_i=-1;var $jp_1_ph60_i=0;var $187=1;label=43;break;
 case 29: 
 var $141;
 var $k_027_i;
 var $142=((($k_027_i)+($ip_0_ph79_i))|0);
 var $143=(($n+$142)|0);
 var $144=HEAP8[($143)];
 var $145=(($n+$141)|0);
 var $146=HEAP8[($145)];
 var $147=(($144<<24)>>24)==(($146<<24)>>24);
 if($147){label=30;break;}else{label=32;break;}
 case 30: 
 var $149=($k_027_i|0)==($p_0_ph_ph71_i|0);
 var $150=((($k_027_i)+(1))|0);
 if($149){label=31;break;}else{label=27;break;}
 case 31: 
 var $151=((($jp_0_ph1964_i)+($p_0_ph_ph71_i))|0);
 var $152=((($151)+(1))|0);
 var $153=($152>>>0)<($126>>>0);
 if($153){var $jp_0_ph1964_i=$151;var $136=$152;label=26;break;}else{var $p_0_ph_ph68_i=$p_0_ph_ph71_i;var $ip_0_ph76_i=$ip_0_ph79_i;label=28;break;}
 case 32: 
 var $155=($144&255)>($146&255);
 var $156=((($141)-($ip_0_ph79_i))|0);
 if($155){label=24;break;}else{label=33;break;}
 case 33: 
 var $157=((($jp_0_ph1964_i)+(1))|0);
 var $158=((($jp_0_ph1964_i)+(2))|0);
 var $159=($158>>>0)<($126>>>0);
 if($159){var $ip_0_ph79_i=$jp_0_ph1964_i;var $jp_0_ph80_i=$157;var $132=$158;label=23;break;}else{var $p_0_ph_ph68_i=1;var $ip_0_ph76_i=$jp_0_ph1964_i;label=28;break;}
 case 34: 
 var $161=((($173)+($jp_1_ph844_i))|0);
 var $162=($161>>>0)<($126>>>0);
 if($162){var $k_114_i=$173;var $164=$161;label=35;break;}else{var $p_1_ph_ph48_i=$p_1_ph_ph51_i;var $ip_1_ph56_i=$ip_1_ph59_i;var $ip_0_ph76142_i=$ip_0_ph76_i;var $p_0_ph_ph68146_i=$p_0_ph_ph68_i;label=44;break;}
 case 35: 
 var $164;
 var $k_114_i;
 var $165=((($k_114_i)+($ip_1_ph59_i))|0);
 var $166=(($n+$165)|0);
 var $167=HEAP8[($166)];
 var $168=(($n+$164)|0);
 var $169=HEAP8[($168)];
 var $170=(($167<<24)>>24)==(($169<<24)>>24);
 if($170){label=36;break;}else{label=39;break;}
 case 36: 
 var $172=($k_114_i|0)==($p_1_ph_ph51_i|0);
 var $173=((($k_114_i)+(1))|0);
 if($172){label=37;break;}else{label=34;break;}
 case 37: 
 var $174=((($jp_1_ph844_i)+($p_1_ph_ph51_i))|0);
 var $175=((($174)+(1))|0);
 var $176=($175>>>0)<($126>>>0);
 if($176){var $jp_1_ph844_i=$174;var $177=$175;label=38;break;}else{var $p_1_ph_ph48_i=$p_1_ph_ph51_i;var $ip_1_ph56_i=$ip_1_ph59_i;var $ip_0_ph76142_i=$ip_0_ph76_i;var $p_0_ph_ph68146_i=$p_0_ph_ph68_i;label=44;break;}
 case 38: 
 var $177;
 var $jp_1_ph844_i;
 var $k_114_i=1;var $164=$177;label=35;break;
 case 39: 
 var $179=($167&255)<($169&255);
 var $180=((($164)-($ip_1_ph59_i))|0);
 if($179){label=40;break;}else{label=42;break;}
 case 40: 
 var $181=((($164)+(1))|0);
 var $182=($181>>>0)<($126>>>0);
 if($182){var $jp_1_ph8_ph50_i=$164;var $p_1_ph_ph51_i=$180;var $183=$181;label=41;break;}else{var $p_1_ph_ph48_i=$180;var $ip_1_ph56_i=$ip_1_ph59_i;var $ip_0_ph76142_i=$ip_0_ph76_i;var $p_0_ph_ph68146_i=$p_0_ph_ph68_i;label=44;break;}
 case 41: 
 var $183;
 var $p_1_ph_ph51_i;
 var $jp_1_ph8_ph50_i;
 var $jp_1_ph844_i=$jp_1_ph8_ph50_i;var $177=$183;label=38;break;
 case 42: 
 var $184=((($jp_1_ph844_i)+(1))|0);
 var $185=((($jp_1_ph844_i)+(2))|0);
 var $186=($185>>>0)<($126>>>0);
 if($186){var $ip_1_ph59_i=$jp_1_ph844_i;var $jp_1_ph60_i=$184;var $187=$185;label=43;break;}else{var $p_1_ph_ph48_i=1;var $ip_1_ph56_i=$jp_1_ph844_i;var $ip_0_ph76142_i=$ip_0_ph76_i;var $p_0_ph_ph68146_i=$p_0_ph_ph68_i;label=44;break;}
 case 43: 
 var $187;
 var $jp_1_ph60_i;
 var $ip_1_ph59_i;
 var $jp_1_ph8_ph50_i=$jp_1_ph60_i;var $p_1_ph_ph51_i=1;var $183=$187;label=41;break;
 case 44: 
 var $p_0_ph_ph68146_i;
 var $ip_0_ph76142_i;
 var $ip_1_ph56_i;
 var $p_1_ph_ph48_i;
 var $188=((($ip_1_ph56_i)+(1))|0);
 var $189=((($ip_0_ph76142_i)+(1))|0);
 var $190=($188>>>0)>($189>>>0);
 var $p_1_p_0_i=($190?$p_1_ph_ph48_i:$p_0_ph_ph68146_i);
 var $ip_1_ip_0_i=($190?$ip_1_ph56_i:$ip_0_ph76142_i);
 var $191=(($n+$p_1_p_0_i)|0);
 var $192=((($ip_1_ip_0_i)+(1))|0);
 var $193=_memcmp($n,$191,$192);
 var $194=($193|0)==0;
 if($194){label=46;break;}else{label=45;break;}
 case 45: 
 var $195=((($126)-($ip_1_ip_0_i))|0);
 var $196=((($195)-(1))|0);
 var $197=($ip_1_ip_0_i>>>0)>($196>>>0);
 var $ip_1_ip_0__i=($197?$ip_1_ip_0_i:$196);
 var $198=((($ip_1_ip_0__i)+(1))|0);
 var $199=$126|63;
 var $p_3151_i=$198;var $203=$199;label=47;break;
 case 46: 
 var $201=((($126)-($p_1_p_0_i))|0);
 var $202=$126|63;
 var $notlhs_i=($126|0)==($p_1_p_0_i|0);
 if($notlhs_i){var $p_3151_i=$126;var $203=$202;label=47;break;}else{var $_02_us_i=$5;var $mem_0_us_i=0;var $z_0_us_i=$5;label=48;break;}
 case 47: 
 var $203;
 var $p_3151_i;
 var $204=(($n+$192)|0);
 var $_02_i4=$5;var $z_0_i=$5;label=64;break;
 case 48: 
 var $z_0_us_i;
 var $mem_0_us_i;
 var $_02_us_i;
 var $205=$z_0_us_i;
 var $206=$_02_us_i;
 var $207=((($205)-($206))|0);
 var $208=($207>>>0)<($126>>>0);
 if($208){label=49;break;}else{var $z_1_us_i=$z_0_us_i;label=52;break;}
 case 49: 
 var $210=_memchr($z_0_us_i,0,$202);
 var $211=($210|0)==0;
 if($211){label=51;break;}else{label=50;break;}
 case 50: 
 var $213=$210;
 var $214=((($213)-($206))|0);
 var $215=($214>>>0)<($126>>>0);
 if($215){var $_0=0;label=79;break;}else{var $z_1_us_i=$210;label=52;break;}
 case 51: 
 var $217=(($z_0_us_i+$202)|0);
 var $z_1_us_i=$217;label=52;break;
 case 52: 
 var $z_1_us_i;
 var $219=(($_02_us_i+$l_037_i)|0);
 var $220=HEAP8[($219)];
 var $221=($220&255);
 var $222=$221>>>5;
 var $223=(($byteset_i+($222<<2))|0);
 var $224=HEAP32[(($223)>>2)];
 var $225=$221&31;
 var $226=1<<$225;
 var $227=$226&$224;
 var $228=($227|0)==0;
 if($228){label=63;break;}else{label=53;break;}
 case 53: 
 var $230=(($shift_i+($221<<2))|0);
 var $231=HEAP32[(($230)>>2)];
 var $232=((($126)-($231))|0);
 var $233=($126|0)==($231|0);
 if($233){label=55;break;}else{label=54;break;}
 case 54: 
 var $notrhs_us_i=($mem_0_us_i|0)!=0;
 var $235=($232>>>0)<($p_1_p_0_i>>>0);
 var $or_cond3_us_i=$notrhs_us_i&$235;
 var $k_2_us_i=($or_cond3_us_i?$201:$232);
 var $236=(($_02_us_i+$k_2_us_i)|0);
 var $_02_us_i=$236;var $mem_0_us_i=0;var $z_0_us_i=$z_1_us_i;label=48;break;
 case 55: 
 var $238=($192>>>0)>($mem_0_us_i>>>0);
 var $_mem_0_us_i=($238?$192:$mem_0_us_i);
 var $239=(($n+$_mem_0_us_i)|0);
 var $240=HEAP8[($239)];
 var $241=(($240<<24)>>24)==0;
 if($241){var $k_4_us_i=$192;label=59;break;}else{var $k_36_us_i=$_mem_0_us_i;var $_pr_us_i=$240;label=57;break;}
 case 56: 
 var $243=(($n+$249)|0);
 var $244=HEAP8[($243)];
 var $245=(($244<<24)>>24)==0;
 if($245){var $k_4_us_i=$192;label=59;break;}else{var $k_36_us_i=$249;var $_pr_us_i=$244;label=57;break;}
 case 57: 
 var $_pr_us_i;
 var $k_36_us_i;
 var $246=(($_02_us_i+$k_36_us_i)|0);
 var $247=HEAP8[($246)];
 var $248=(($_pr_us_i<<24)>>24)==(($247<<24)>>24);
 var $249=((($k_36_us_i)+(1))|0);
 if($248){label=56;break;}else{label=58;break;}
 case 58: 
 var $251=((($k_36_us_i)-($ip_1_ip_0_i))|0);
 var $252=(($_02_us_i+$251)|0);
 var $_02_us_i=$252;var $mem_0_us_i=0;var $z_0_us_i=$z_1_us_i;label=48;break;
 case 59: 
 var $k_4_us_i;
 var $253=($k_4_us_i>>>0)>($mem_0_us_i>>>0);
 if($253){label=60;break;}else{label=61;break;}
 case 60: 
 var $255=((($k_4_us_i)-(1))|0);
 var $256=(($n+$255)|0);
 var $257=HEAP8[($256)];
 var $258=(($_02_us_i+$255)|0);
 var $259=HEAP8[($258)];
 var $260=(($257<<24)>>24)==(($259<<24)>>24);
 if($260){var $k_4_us_i=$255;label=59;break;}else{label=61;break;}
 case 61: 
 var $261=($k_4_us_i|0)==($mem_0_us_i|0);
 if($261){var $_0=$_02_us_i;label=79;break;}else{label=62;break;}
 case 62: 
 var $263=(($_02_us_i+$p_1_p_0_i)|0);
 var $_02_us_i=$263;var $mem_0_us_i=$201;var $z_0_us_i=$z_1_us_i;label=48;break;
 case 63: 
 var $265=(($_02_us_i+$126)|0);
 var $_02_us_i=$265;var $mem_0_us_i=0;var $z_0_us_i=$z_1_us_i;label=48;break;
 case 64: 
 var $z_0_i;
 var $_02_i4;
 var $266=$z_0_i;
 var $267=$_02_i4;
 var $268=((($266)-($267))|0);
 var $269=($268>>>0)<($126>>>0);
 if($269){label=65;break;}else{var $z_1_i=$z_0_i;label=68;break;}
 case 65: 
 var $271=_memchr($z_0_i,0,$203);
 var $272=($271|0)==0;
 if($272){label=67;break;}else{label=66;break;}
 case 66: 
 var $274=$271;
 var $275=((($274)-($267))|0);
 var $276=($275>>>0)<($126>>>0);
 if($276){var $_0=0;label=79;break;}else{var $z_1_i=$271;label=68;break;}
 case 67: 
 var $278=(($z_0_i+$203)|0);
 var $z_1_i=$278;label=68;break;
 case 68: 
 var $z_1_i;
 var $280=(($_02_i4+$l_037_i)|0);
 var $281=HEAP8[($280)];
 var $282=($281&255);
 var $283=$282>>>5;
 var $284=(($byteset_i+($283<<2))|0);
 var $285=HEAP32[(($284)>>2)];
 var $286=$282&31;
 var $287=1<<$286;
 var $288=$287&$285;
 var $289=($288|0)==0;
 if($289){label=71;break;}else{label=69;break;}
 case 69: 
 var $291=(($shift_i+($282<<2))|0);
 var $292=HEAP32[(($291)>>2)];
 var $293=($126|0)==($292|0);
 if($293){label=72;break;}else{label=70;break;}
 case 70: 
 var $295=((($126)-($292))|0);
 var $296=(($_02_i4+$295)|0);
 var $_02_i4=$296;var $z_0_i=$z_1_i;label=64;break;
 case 71: 
 var $298=(($_02_i4+$126)|0);
 var $_02_i4=$298;var $z_0_i=$z_1_i;label=64;break;
 case 72: 
 var $300=HEAP8[($204)];
 var $301=(($300<<24)>>24)==0;
 if($301){var $k_4_i=$192;label=76;break;}else{var $k_36_i=$192;var $_pr_i=$300;label=74;break;}
 case 73: 
 var $303=(($n+$309)|0);
 var $304=HEAP8[($303)];
 var $305=(($304<<24)>>24)==0;
 if($305){var $k_4_i=$192;label=76;break;}else{var $k_36_i=$309;var $_pr_i=$304;label=74;break;}
 case 74: 
 var $_pr_i;
 var $k_36_i;
 var $306=(($_02_i4+$k_36_i)|0);
 var $307=HEAP8[($306)];
 var $308=(($_pr_i<<24)>>24)==(($307<<24)>>24);
 var $309=((($k_36_i)+(1))|0);
 if($308){label=73;break;}else{label=75;break;}
 case 75: 
 var $311=((($k_36_i)-($ip_1_ip_0_i))|0);
 var $312=(($_02_i4+$311)|0);
 var $_02_i4=$312;var $z_0_i=$z_1_i;label=64;break;
 case 76: 
 var $k_4_i;
 var $313=($k_4_i|0)==0;
 if($313){var $_0=$_02_i4;label=79;break;}else{label=77;break;}
 case 77: 
 var $315=((($k_4_i)-(1))|0);
 var $316=(($n+$315)|0);
 var $317=HEAP8[($316)];
 var $318=(($_02_i4+$315)|0);
 var $319=HEAP8[($318)];
 var $320=(($317<<24)>>24)==(($319<<24)>>24);
 if($320){var $k_4_i=$315;label=76;break;}else{label=78;break;}
 case 78: 
 var $322=(($_02_i4+$p_3151_i)|0);
 var $_02_i4=$322;var $z_0_i=$z_1_i;label=64;break;
 case 79: 
 var $_0;
 STACKTOP=sp;return $_0;
  default: assert(0, "bad label: " + label);
 }

}


function _strtok($s,$sep){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($s|0)==0;
 if($1){label=2;break;}else{var $_01=$s;label=3;break;}
 case 2: 
 var $3=HEAP32[((140656)>>2)];
 var $4=($3|0)==0;
 if($4){var $_0=0;label=8;break;}else{var $_01=$3;label=3;break;}
 case 3: 
 var $_01;
 var $6=_strspn($_01,$sep);
 var $7=(($_01+$6)|0);
 var $8=HEAP8[($7)];
 var $9=(($8<<24)>>24)==0;
 if($9){label=4;break;}else{label=5;break;}
 case 4: 
 HEAP32[((140656)>>2)]=0;
 var $_0=0;label=8;break;
 case 5: 
 var $12=_strcspn($7,$sep);
 var $_sum=((($12)+($6))|0);
 var $13=(($_01+$_sum)|0);
 HEAP32[((140656)>>2)]=$13;
 var $14=HEAP8[($13)];
 var $15=(($14<<24)>>24)==0;
 if($15){label=7;break;}else{label=6;break;}
 case 6: 
 var $_sum2=((($_sum)+(1))|0);
 var $17=(($_01+$_sum2)|0);
 HEAP32[((140656)>>2)]=$17;
 HEAP8[($13)]=0;
 var $_0=$7;label=8;break;
 case 7: 
 HEAP32[((140656)>>2)]=0;
 var $_0=$7;label=8;break;
 case 8: 
 var $_0;
 return $_0;
  default: assert(0, "bad label: " + label);
 }

}


function _strtok_r($s,$sep,$p){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($s|0)==0;
 if($1){label=2;break;}else{var $_01=$s;label=3;break;}
 case 2: 
 var $3=HEAP32[(($p)>>2)];
 var $4=($3|0)==0;
 if($4){var $_0=0;label=8;break;}else{var $_01=$3;label=3;break;}
 case 3: 
 var $_01;
 var $6=_strspn($_01,$sep);
 var $7=(($_01+$6)|0);
 var $8=HEAP8[($7)];
 var $9=(($8<<24)>>24)==0;
 if($9){label=4;break;}else{label=5;break;}
 case 4: 
 HEAP32[(($p)>>2)]=0;
 var $_0=0;label=8;break;
 case 5: 
 var $12=_strcspn($7,$sep);
 var $_sum=((($12)+($6))|0);
 var $13=(($_01+$_sum)|0);
 HEAP32[(($p)>>2)]=$13;
 var $14=HEAP8[($13)];
 var $15=(($14<<24)>>24)==0;
 if($15){label=7;break;}else{label=6;break;}
 case 6: 
 var $_sum2=((($_sum)+(1))|0);
 var $17=(($_01+$_sum2)|0);
 HEAP32[(($p)>>2)]=$17;
 HEAP8[($13)]=0;
 var $_0=$7;label=8;break;
 case 7: 
 HEAP32[(($p)>>2)]=0;
 var $_0=$7;label=8;break;
 case 8: 
 var $_0;
 return $_0;
  default: assert(0, "bad label: " + label);
 }

}


function _strverscmp($l,$r){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=HEAP8[($l)];
 var $2=HEAP8[($r)];
 var $3=(($1<<24)>>24)==(($2<<24)>>24);
 if($3){var $_0121=$l;var $_022=$r;var $haszero_023=1;var $_in=$1;label=2;break;}else{var $_lcssa1938=$2;var $_lcssa39=$1;var $_0_lcssa41=$r;var $_01_lcssa43=$l;label=8;break;}
 case 2: 
 var $_in;
 var $haszero_023;
 var $_022;
 var $_0121;
 if((($_in<<24)>>24)==0){ var $_02=0;label=19;break;}else if((($_in<<24)>>24)==48){ label=3;break;}else{label=4;break;}
 case 3: 
 var $5=($haszero_023|0)==1;
 var $_haszero_0=($5?0:$haszero_023);
 var $haszero_1=$_haszero_0;label=6;break;
 case 4: 
 var $7=(($_in<<24)>>24);
 var $isdigittmp9=((($7)-(48))|0);
 var $isdigit10=($isdigittmp9>>>0)<10;
 if($isdigit10){label=5;break;}else{var $haszero_1=1;label=6;break;}
 case 5: 
 var $9=($haszero_023|0)==1;
 var $_haszero_011=($9?2:$haszero_023);
 var $haszero_1=$_haszero_011;label=6;break;
 case 6: 
 var $haszero_1;
 var $11=(($_0121+1)|0);
 var $12=(($_022+1)|0);
 var $13=HEAP8[($11)];
 var $14=HEAP8[($12)];
 var $15=(($13<<24)>>24)==(($14<<24)>>24);
 if($15){var $_0121=$11;var $_022=$12;var $haszero_023=$haszero_1;var $_in=$13;label=2;break;}else{label=7;break;}
 case 7: 
 var $16=($haszero_1|0)==1;
 if($16){var $_lcssa1938=$14;var $_lcssa39=$13;var $_0_lcssa41=$12;var $_01_lcssa43=$11;label=8;break;}else{var $haszero_2=$haszero_1;var $22=$14;var $21=$13;var $_0_lcssa40=$12;var $_01_lcssa42=$11;label=9;break;}
 case 8: 
 var $_01_lcssa43;
 var $_0_lcssa41;
 var $_lcssa39;
 var $_lcssa1938;
 var $17=(($_lcssa39<<24)>>24)==48;
 var $18=(($_lcssa1938<<24)>>24)==48;
 var $or_cond=$17|$18;
 var $19=($or_cond&1);
 var $_haszero_013=$19^1;
 var $haszero_2=$_haszero_013;var $22=$_lcssa1938;var $21=$_lcssa39;var $_0_lcssa40=$_0_lcssa41;var $_01_lcssa42=$_01_lcssa43;label=9;break;
 case 9: 
 var $_01_lcssa42;
 var $_0_lcssa40;
 var $21;
 var $22;
 var $haszero_2;
 var $23=(($21<<24)>>24);
 var $isdigittmp=((($23)-(48))|0);
 var $isdigit=($isdigittmp>>>0)<10;
 var $24=(($22<<24)>>24);
 if($isdigit){label=10;break;}else{label=18;break;}
 case 10: 
 var $isdigittmp3=((($24)-(48))|0);
 var $isdigit4=($isdigittmp3>>>0)>9;
 var $26=($haszero_2|0)==0;
 var $or_cond12=$isdigit4|$26;
 if($or_cond12){label=18;break;}else{var $lenl_0=0;var $27=$21;label=11;break;}
 case 11: 
 var $27;
 var $lenl_0;
 var $28=(($27<<24)>>24);
 var $isdigittmp5=((($28)-(48))|0);
 var $isdigit6=($isdigittmp5>>>0)<10;
 var $29=((($lenl_0)+(1))|0);
 if($isdigit6){label=12;break;}else{var $lenr_0=0;var $30=$22;label=13;break;}
 case 12: 
 var $_phi_trans_insert=(($_01_lcssa42+$29)|0);
 var $_pre=HEAP8[($_phi_trans_insert)];
 var $lenl_0=$29;var $27=$_pre;label=11;break;
 case 13: 
 var $30;
 var $lenr_0;
 var $31=(($30<<24)>>24);
 var $isdigittmp7=((($31)-(48))|0);
 var $isdigit8=($isdigittmp7>>>0)<10;
 var $32=((($lenr_0)+(1))|0);
 if($isdigit8){label=14;break;}else{label=15;break;}
 case 14: 
 var $_phi_trans_insert34=(($_0_lcssa40+$32)|0);
 var $_pre35=HEAP8[($_phi_trans_insert34)];
 var $lenr_0=$32;var $30=$_pre35;label=13;break;
 case 15: 
 var $34=($lenl_0|0)==($lenr_0|0);
 if($34){label=16;break;}else{label=17;break;}
 case 16: 
 var $36=((($23)-($24))|0);
 var $_02=$36;label=19;break;
 case 17: 
 var $38=($lenl_0>>>0)>($lenr_0>>>0);
 var $_=($38?1:-1);
 var $_02=$_;label=19;break;
 case 18: 
 var $39=((($23)-($24))|0);
 var $_02=$39;label=19;break;
 case 19: 
 var $_02;
 return $_02;
  default: assert(0, "bad label: " + label);
 }

}


function _wcpcpy($d,$s){
 var label=0;


 var $1=_wcscpy($d,$s);
 var $2=_wcslen($s);
 var $3=(($1+($2<<2))|0);
 return $3;
}


function _wcpncpy($d,$s,$n){
 var label=0;


 var $1=_wcsncpy($d,$s,$n);
 var $2=_wcsnlen($s,$n);
 var $3=(($1+($2<<2))|0);
 return $3;
}


function _wcscasecmp($l,$r){
 var label=0;


 var $1=_wcsncasecmp($l,$r,-1);
 return $1;
}


function _wcscasecmp_l($l,$r,$locale){
 var label=0;


 var $1=_wcscasecmp($l,$r);
 return $1;
}


function _wcscat($dest,$src){
 var label=0;


 var $1=_wcslen($dest);
 var $2=(($dest+($1<<2))|0);
 var $3=_wcscpy($2,$src);
 return $dest;
}


function _wcschr($s,$c){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($c|0)==0;
 if($1){label=2;break;}else{var $_01=$s;label=3;break;}
 case 2: 
 var $3=_wcslen($s);
 var $4=(($s+($3<<2))|0);
 var $_0=$4;label=5;break;
 case 3: 
 var $_01;
 var $5=HEAP32[(($_01)>>2)];
 var $6=($5|0)==0;
 var $7=($5|0)==($c|0);
 var $or_cond=$6|$7;
 var $8=(($_01+4)|0);
 if($or_cond){label=4;break;}else{var $_01=$8;label=3;break;}
 case 4: 
 var $9=($5|0)!=0;
 var $10=($9?$_01:0);
 var $_0=$10;label=5;break;
 case 5: 
 var $_0;
 return $_0;
  default: assert(0, "bad label: " + label);
 }

}


function _wcscmp($l,$r){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=HEAP32[(($l)>>2)];
 var $2=HEAP32[(($r)>>2)];
 var $3=($1|0)!=($2|0);
 var $4=($1|0)==0;
 var $or_cond5=$3|$4;
 var $5=($2|0)==0;
 var $or_cond36=$or_cond5|$5;
 if($or_cond36){var $_lcssa=$1;var $_lcssa4=$2;label=3;break;}else{var $_027=$l;var $_08=$r;label=2;break;}
 case 2: 
 var $_08;
 var $_027;
 var $6=(($_027+4)|0);
 var $7=(($_08+4)|0);
 var $8=HEAP32[(($6)>>2)];
 var $9=HEAP32[(($7)>>2)];
 var $10=($8|0)!=($9|0);
 var $11=($8|0)==0;
 var $or_cond=$10|$11;
 var $12=($9|0)==0;
 var $or_cond3=$or_cond|$12;
 if($or_cond3){var $_lcssa=$8;var $_lcssa4=$9;label=3;break;}else{var $_027=$6;var $_08=$7;label=2;break;}
 case 3: 
 var $_lcssa4;
 var $_lcssa;
 var $13=((($_lcssa)-($_lcssa4))|0);
 return $13;
  default: assert(0, "bad label: " + label);
 }

}


function _wcscpy($d,$s){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $_0=$d;var $_01=$s;label=2;break;
 case 2: 
 var $_01;
 var $_0;
 var $2=(($_01+4)|0);
 var $3=HEAP32[(($_01)>>2)];
 var $4=(($_0+4)|0);
 HEAP32[(($_0)>>2)]=$3;
 var $5=($3|0)==0;
 if($5){label=3;break;}else{var $_0=$4;var $_01=$2;label=2;break;}
 case 3: 
 return $d;
  default: assert(0, "bad label: " + label);
 }

}


function _wcscspn($s,$c){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=HEAP32[(($c)>>2)];
 var $2=($1|0)==0;
 if($2){label=2;break;}else{label=3;break;}
 case 2: 
 var $4=_wcslen($s);
 var $_0=$4;label=11;break;
 case 3: 
 var $6=(($c+4)|0);
 var $7=HEAP32[(($6)>>2)];
 var $8=($7|0)==0;
 if($8){label=5;break;}else{label=4;break;}
 case 4: 
 var $9=HEAP32[(($s)>>2)];
 var $10=($9|0)==0;
 if($10){var $_01_lcssa=$s;label=10;break;}else{var $_012=$s;var $24=$9;label=9;break;}
 case 5: 
 var $12=_wcschr($s,$1);
 var $13=($12|0)==0;
 if($13){label=7;break;}else{label=6;break;}
 case 6: 
 var $15=$12;
 var $16=$s;
 var $17=((($15)-($16))|0);
 var $18=$17>>2;
 var $_0=$18;label=11;break;
 case 7: 
 var $20=_wcslen($s);
 var $_0=$20;label=11;break;
 case 8: 
 var $22=HEAP32[(($27)>>2)];
 var $23=($22|0)==0;
 if($23){var $_01_lcssa=$27;label=10;break;}else{var $_012=$27;var $24=$22;label=9;break;}
 case 9: 
 var $24;
 var $_012;
 var $25=_wcschr($c,$24);
 var $26=($25|0)==0;
 var $27=(($_012+4)|0);
 if($26){label=8;break;}else{var $_01_lcssa=$_012;label=10;break;}
 case 10: 
 var $_01_lcssa;
 var $28=$_01_lcssa;
 var $29=$s;
 var $30=((($28)-($29))|0);
 var $31=$30>>2;
 var $_0=$31;label=11;break;
 case 11: 
 var $_0;
 return $_0;
  default: assert(0, "bad label: " + label);
 }

}


function _wcsdup($s){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=_wcslen($s);
 var $2=((($1)+(1))|0);
 var $3=$2<<2;
 var $4=_malloc($3);
 var $5=($4|0)==0;
 if($5){var $_0=0;label=3;break;}else{label=2;break;}
 case 2: 
 var $7=$4;
 var $8=_wmemcpy($7,$s,$2);
 var $_0=$8;label=3;break;
 case 3: 
 var $_0;
 return $_0;
  default: assert(0, "bad label: " + label);
 }

}


function _wcslen($s){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $_0=$s;label=2;break;
 case 2: 
 var $_0;
 var $2=HEAP32[(($_0)>>2)];
 var $3=($2|0)==0;
 var $4=(($_0+4)|0);
 if($3){label=3;break;}else{var $_0=$4;label=2;break;}
 case 3: 
 var $6=$_0;
 var $7=$s;
 var $8=((($6)-($7))|0);
 var $9=$8>>2;
 return $9;
  default: assert(0, "bad label: " + label);
 }

}


function _wcsncasecmp($l,$r,$n){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($n|0)==0;
 if($1){var $_06=0;label=9;break;}else{label=2;break;}
 case 2: 
 var $2=HEAP32[(($l)>>2)];
 var $3=($2|0)==0;
 if($3){var $_04_lcssa=$r;var $19=0;label=8;break;}else{var $_058=$l;var $_049=$r;var $_010_in=$n;var $4=$2;label=3;break;}
 case 3: 
 var $4;
 var $_010_in;
 var $_049;
 var $_058;
 var $_010=((($_010_in)-(1))|0);
 var $5=HEAP32[(($_049)>>2)];
 var $6=($5|0)==0;
 var $7=($_010|0)==0;
 var $or_cond=$6|$7;
 if($or_cond){var $_04_lcssa=$_049;var $19=$4;label=8;break;}else{label=4;break;}
 case 4: 
 var $9=($4|0)==($5|0);
 if($9){label=7;break;}else{label=5;break;}
 case 5: 
 var $11=_towlower($4);
 var $12=HEAP32[(($_049)>>2)];
 var $13=_towlower($12);
 var $14=($11|0)==($13|0);
 if($14){label=7;break;}else{label=6;break;}
 case 6: 
 var $_pre_pre=HEAP32[(($_058)>>2)];
 var $_04_lcssa=$_049;var $19=$_pre_pre;label=8;break;
 case 7: 
 var $15=(($_058+4)|0);
 var $16=(($_049+4)|0);
 var $17=HEAP32[(($15)>>2)];
 var $18=($17|0)==0;
 if($18){var $_04_lcssa=$16;var $19=0;label=8;break;}else{var $_058=$15;var $_049=$16;var $_010_in=$_010;var $4=$17;label=3;break;}
 case 8: 
 var $19;
 var $_04_lcssa;
 var $20=_towlower($19);
 var $21=HEAP32[(($_04_lcssa)>>2)];
 var $22=_towlower($21);
 var $23=((($20)-($22))|0);
 var $_06=$23;label=9;break;
 case 9: 
 var $_06;
 return $_06;
  default: assert(0, "bad label: " + label);
 }

}


function _wcsncasecmp_l($l,$r,$n,$locale){
 var label=0;


 var $1=_wcsncasecmp($l,$r,$n);
 return $1;
}


function _wcsncat($d,$s,$n){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=_wcslen($d);
 var $2=(($d+($1<<2))|0);
 var $3=($n|0)==0;
 if($3){var $_0_lcssa=$2;label=4;break;}else{var $_023=$s;var $_014=$n;var $_05=$2;label=2;break;}
 case 2: 
 var $_05;
 var $_014;
 var $_023;
 var $4=HEAP32[(($_023)>>2)];
 var $5=($4|0)==0;
 if($5){var $_0_lcssa=$_05;label=4;break;}else{label=3;break;}
 case 3: 
 var $7=((($_014)-(1))|0);
 var $8=(($_023+4)|0);
 var $9=(($_05+4)|0);
 HEAP32[(($_05)>>2)]=$4;
 var $10=($7|0)==0;
 if($10){var $_0_lcssa=$9;label=4;break;}else{var $_023=$8;var $_014=$7;var $_05=$9;label=2;break;}
 case 4: 
 var $_0_lcssa;
 HEAP32[(($_0_lcssa)>>2)]=0;
 return $d;
  default: assert(0, "bad label: " + label);
 }

}


function _wcsncmp($l,$r,$n){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($n|0)==0;
 if($1){var $14=0;label=5;break;}else{var $_048=$l;var $_039=$r;var $_010=$n;label=2;break;}
 case 2: 
 var $_010;
 var $_039;
 var $_048;
 var $2=HEAP32[(($_048)>>2)];
 var $3=HEAP32[(($_039)>>2)];
 var $4=($2|0)!=($3|0);
 var $5=($2|0)==0;
 var $or_cond=$4|$5;
 var $6=($3|0)==0;
 var $or_cond5=$or_cond|$6;
 if($or_cond5){label=4;break;}else{label=3;break;}
 case 3: 
 var $8=((($_010)-(1))|0);
 var $9=(($_048+4)|0);
 var $10=(($_039+4)|0);
 var $11=($8|0)==0;
 if($11){var $14=0;label=5;break;}else{var $_048=$9;var $_039=$10;var $_010=$8;label=2;break;}
 case 4: 
 var $13=((($2)-($3))|0);
 var $14=$13;label=5;break;
 case 5: 
 var $14;
 return $14;
  default: assert(0, "bad label: " + label);
 }

}


function _wcsncpy($d,$s,$n){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($n|0)==0;
 if($1){var $_01_lcssa=0;var $_0_lcssa=$d;label=4;break;}else{var $_023=$s;var $_014=$n;var $_05=$d;label=2;break;}
 case 2: 
 var $_05;
 var $_014;
 var $_023;
 var $2=HEAP32[(($_023)>>2)];
 var $3=($2|0)==0;
 if($3){var $_01_lcssa=$_014;var $_0_lcssa=$_05;label=4;break;}else{label=3;break;}
 case 3: 
 var $5=((($_014)-(1))|0);
 var $6=(($_023+4)|0);
 var $7=(($_05+4)|0);
 HEAP32[(($_05)>>2)]=$2;
 var $8=($5|0)==0;
 if($8){var $_01_lcssa=0;var $_0_lcssa=$7;label=4;break;}else{var $_023=$6;var $_014=$5;var $_05=$7;label=2;break;}
 case 4: 
 var $_0_lcssa;
 var $_01_lcssa;
 var $9=_wmemset($_0_lcssa,0,$_01_lcssa);
 return $d;
  default: assert(0, "bad label: " + label);
 }

}


function _wcsnlen($s,$n){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=_wmemchr($s,0,$n);
 var $2=($1|0)==0;
 if($2){var $_0=$n;label=3;break;}else{label=2;break;}
 case 2: 
 var $4=$1;
 var $5=$s;
 var $6=((($4)-($5))|0);
 var $7=$6>>2;
 var $_0=$7;label=3;break;
 case 3: 
 var $_0;
 return $_0;
  default: assert(0, "bad label: " + label);
 }

}


function _wcspbrk($s,$b){
 var label=0;


 var $1=_wcscspn($s,$b);
 var $2=(($s+($1<<2))|0);
 var $3=HEAP32[(($2)>>2)];
 var $4=($3|0)!=0;
 var $5=($4?$2:0);
 return $5;
}


function _wcsrchr($s,$c){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=_wcslen($s);
 var $2=($1|0)>-1;
 if($2){label=2;break;}else{var $_lcssa=0;label=5;break;}
 case 2: 
 var $3=(($s+($1<<2))|0);
 var $p_01=$3;label=4;break;
 case 3: 
 var $5=($9>>>0)<($s>>>0);
 if($5){var $_lcssa=0;label=5;break;}else{var $p_01=$9;label=4;break;}
 case 4: 
 var $p_01;
 var $7=HEAP32[(($p_01)>>2)];
 var $8=($7|0)==($c|0);
 var $9=((($p_01)-(4))|0);
 if($8){var $_lcssa=$p_01;label=5;break;}else{label=3;break;}
 case 5: 
 var $_lcssa;
 return $_lcssa;
  default: assert(0, "bad label: " + label);
 }

}


function _wcsspn($s,$c){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=HEAP32[(($s)>>2)];
 var $2=($1|0)==0;
 if($2){var $_0_lcssa=$s;label=4;break;}else{var $_01=$s;var $6=$1;label=3;break;}
 case 2: 
 var $4=HEAP32[(($9)>>2)];
 var $5=($4|0)==0;
 if($5){var $_0_lcssa=$9;label=4;break;}else{var $_01=$9;var $6=$4;label=3;break;}
 case 3: 
 var $6;
 var $_01;
 var $7=_wcschr($c,$6);
 var $8=($7|0)==0;
 var $9=(($_01+4)|0);
 if($8){var $_0_lcssa=$_01;label=4;break;}else{label=2;break;}
 case 4: 
 var $_0_lcssa;
 var $10=$_0_lcssa;
 var $11=$s;
 var $12=((($10)-($11))|0);
 var $13=$12>>2;
 return $13;
  default: assert(0, "bad label: " + label);
 }

}


function _wcsstr($h,$n){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=HEAP32[(($n)>>2)];
 var $2=($1|0)==0;
 if($2){var $_0=$h;label=47;break;}else{label=2;break;}
 case 2: 
 var $4=HEAP32[(($h)>>2)];
 var $5=($4|0)==0;
 if($5){var $_0=0;label=47;break;}else{label=3;break;}
 case 3: 
 var $7=_wcschr($h,$1);
 var $8=($7|0)==0;
 if($8){var $_0=0;label=47;break;}else{label=4;break;}
 case 4: 
 var $10=(($n+4)|0);
 var $11=HEAP32[(($10)>>2)];
 var $12=($11|0)==0;
 if($12){var $_0=$7;label=47;break;}else{label=5;break;}
 case 5: 
 var $14=(($7+4)|0);
 var $15=HEAP32[(($14)>>2)];
 var $16=($15|0)==0;
 if($16){var $_0=0;label=47;break;}else{label=6;break;}
 case 6: 
 var $18=HEAP32[(($n)>>2)];
 var $19=($18|0)==0;
 if($19){var $p_1_ph_ph44_i=1;var $ip_1_ph52_i=-1;var $l_029130_i=0;var $ip_0_ph72134_i=-1;var $p_0_ph_ph64138_i=1;label=31;break;}else{var $l_034_i=0;label=8;break;}
 case 7: 
 var $21=(($n+($27<<2))|0);
 var $22=HEAP32[(($21)>>2)];
 var $23=($22|0)==0;
 if($23){label=9;break;}else{var $l_034_i=$27;label=8;break;}
 case 8: 
 var $l_034_i;
 var $24=(($7+($l_034_i<<2))|0);
 var $25=HEAP32[(($24)>>2)];
 var $26=($25|0)==0;
 var $27=((($l_034_i)+(1))|0);
 if($26){var $_0=0;label=47;break;}else{label=7;break;}
 case 9: 
 var $28=($27>>>0)>1;
 if($28){var $ip_0_ph75_i=-1;var $jp_0_ph76_i=0;var $29=1;label=10;break;}else{var $p_1_ph_ph44_i=1;var $ip_1_ph52_i=-1;var $l_029130_i=$27;var $ip_0_ph72134_i=-1;var $p_0_ph_ph64138_i=1;label=31;break;}
 case 10: 
 var $29;
 var $jp_0_ph76_i;
 var $ip_0_ph75_i;
 var $jp_0_ph18_ph66_i=$jp_0_ph76_i;var $p_0_ph_ph67_i=1;var $32=$29;label=12;break;
 case 11: 
 var $30=((($37)+(1))|0);
 var $31=($30>>>0)<($27>>>0);
 if($31){var $jp_0_ph18_ph66_i=$37;var $p_0_ph_ph67_i=$52;var $32=$30;label=12;break;}else{var $p_0_ph_ph64_i=$52;var $ip_0_ph72_i=$ip_0_ph75_i;label=15;break;}
 case 12: 
 var $32;
 var $p_0_ph_ph67_i;
 var $jp_0_ph18_ph66_i;
 var $jp_0_ph1860_i=$jp_0_ph18_ph66_i;var $33=$32;label=13;break;
 case 13: 
 var $33;
 var $jp_0_ph1860_i;
 var $k_026_i=1;var $37=$33;label=16;break;
 case 14: 
 var $34=((($46)+($jp_0_ph1860_i))|0);
 var $35=($34>>>0)<($27>>>0);
 if($35){var $k_026_i=$46;var $37=$34;label=16;break;}else{var $p_0_ph_ph64_i=$p_0_ph_ph67_i;var $ip_0_ph72_i=$ip_0_ph75_i;label=15;break;}
 case 15: 
 var $ip_0_ph72_i;
 var $p_0_ph_ph64_i;
 var $ip_1_ph55_i=-1;var $jp_1_ph56_i=0;var $83=1;label=30;break;
 case 16: 
 var $37;
 var $k_026_i;
 var $38=((($k_026_i)+($ip_0_ph75_i))|0);
 var $39=(($n+($38<<2))|0);
 var $40=HEAP32[(($39)>>2)];
 var $41=(($n+($37<<2))|0);
 var $42=HEAP32[(($41)>>2)];
 var $43=($40|0)==($42|0);
 if($43){label=17;break;}else{label=19;break;}
 case 17: 
 var $45=($k_026_i|0)==($p_0_ph_ph67_i|0);
 var $46=((($k_026_i)+(1))|0);
 if($45){label=18;break;}else{label=14;break;}
 case 18: 
 var $47=((($jp_0_ph1860_i)+($p_0_ph_ph67_i))|0);
 var $48=((($47)+(1))|0);
 var $49=($48>>>0)<($27>>>0);
 if($49){var $jp_0_ph1860_i=$47;var $33=$48;label=13;break;}else{var $p_0_ph_ph64_i=$p_0_ph_ph67_i;var $ip_0_ph72_i=$ip_0_ph75_i;label=15;break;}
 case 19: 
 var $51=($40|0)>($42|0);
 var $52=((($37)-($ip_0_ph75_i))|0);
 if($51){label=11;break;}else{label=20;break;}
 case 20: 
 var $53=((($jp_0_ph1860_i)+(1))|0);
 var $54=((($jp_0_ph1860_i)+(2))|0);
 var $55=($54>>>0)<($27>>>0);
 if($55){var $ip_0_ph75_i=$jp_0_ph1860_i;var $jp_0_ph76_i=$53;var $29=$54;label=10;break;}else{var $p_0_ph_ph64_i=1;var $ip_0_ph72_i=$jp_0_ph1860_i;label=15;break;}
 case 21: 
 var $57=((($69)+($jp_1_ph940_i))|0);
 var $58=($57>>>0)<($27>>>0);
 if($58){var $k_115_i=$69;var $60=$57;label=22;break;}else{var $p_1_ph_ph44_i=$p_1_ph_ph47_i;var $ip_1_ph52_i=$ip_1_ph55_i;var $l_029130_i=$27;var $ip_0_ph72134_i=$ip_0_ph72_i;var $p_0_ph_ph64138_i=$p_0_ph_ph64_i;label=31;break;}
 case 22: 
 var $60;
 var $k_115_i;
 var $61=((($k_115_i)+($ip_1_ph55_i))|0);
 var $62=(($n+($61<<2))|0);
 var $63=HEAP32[(($62)>>2)];
 var $64=(($n+($60<<2))|0);
 var $65=HEAP32[(($64)>>2)];
 var $66=($63|0)==($65|0);
 if($66){label=23;break;}else{label=26;break;}
 case 23: 
 var $68=($k_115_i|0)==($p_1_ph_ph47_i|0);
 var $69=((($k_115_i)+(1))|0);
 if($68){label=24;break;}else{label=21;break;}
 case 24: 
 var $70=((($jp_1_ph940_i)+($p_1_ph_ph47_i))|0);
 var $71=((($70)+(1))|0);
 var $72=($71>>>0)<($27>>>0);
 if($72){var $jp_1_ph940_i=$70;var $73=$71;label=25;break;}else{var $p_1_ph_ph44_i=$p_1_ph_ph47_i;var $ip_1_ph52_i=$ip_1_ph55_i;var $l_029130_i=$27;var $ip_0_ph72134_i=$ip_0_ph72_i;var $p_0_ph_ph64138_i=$p_0_ph_ph64_i;label=31;break;}
 case 25: 
 var $73;
 var $jp_1_ph940_i;
 var $k_115_i=1;var $60=$73;label=22;break;
 case 26: 
 var $75=($63|0)<($65|0);
 var $76=((($60)-($ip_1_ph55_i))|0);
 if($75){label=27;break;}else{label=29;break;}
 case 27: 
 var $77=((($60)+(1))|0);
 var $78=($77>>>0)<($27>>>0);
 if($78){var $jp_1_ph9_ph46_i=$60;var $p_1_ph_ph47_i=$76;var $79=$77;label=28;break;}else{var $p_1_ph_ph44_i=$76;var $ip_1_ph52_i=$ip_1_ph55_i;var $l_029130_i=$27;var $ip_0_ph72134_i=$ip_0_ph72_i;var $p_0_ph_ph64138_i=$p_0_ph_ph64_i;label=31;break;}
 case 28: 
 var $79;
 var $p_1_ph_ph47_i;
 var $jp_1_ph9_ph46_i;
 var $jp_1_ph940_i=$jp_1_ph9_ph46_i;var $73=$79;label=25;break;
 case 29: 
 var $80=((($jp_1_ph940_i)+(1))|0);
 var $81=((($jp_1_ph940_i)+(2))|0);
 var $82=($81>>>0)<($27>>>0);
 if($82){var $ip_1_ph55_i=$jp_1_ph940_i;var $jp_1_ph56_i=$80;var $83=$81;label=30;break;}else{var $p_1_ph_ph44_i=1;var $ip_1_ph52_i=$jp_1_ph940_i;var $l_029130_i=$27;var $ip_0_ph72134_i=$ip_0_ph72_i;var $p_0_ph_ph64138_i=$p_0_ph_ph64_i;label=31;break;}
 case 30: 
 var $83;
 var $jp_1_ph56_i;
 var $ip_1_ph55_i;
 var $jp_1_ph9_ph46_i=$jp_1_ph56_i;var $p_1_ph_ph47_i=1;var $79=$83;label=28;break;
 case 31: 
 var $p_0_ph_ph64138_i;
 var $ip_0_ph72134_i;
 var $l_029130_i;
 var $ip_1_ph52_i;
 var $p_1_ph_ph44_i;
 var $84=((($ip_1_ph52_i)+(1))|0);
 var $85=((($ip_0_ph72134_i)+(1))|0);
 var $86=($84>>>0)>($85>>>0);
 var $p_1_p_0_i=($86?$p_1_ph_ph44_i:$p_0_ph_ph64138_i);
 var $ip_1_ip_0_i=($86?$ip_1_ph52_i:$ip_0_ph72134_i);
 var $87=(($n+($p_1_p_0_i<<2))|0);
 var $88=((($ip_1_ip_0_i)+(1))|0);
 var $89=_wmemcmp($n,$87,$88);
 var $90=($89|0)==0;
 if($90){label=33;break;}else{label=32;break;}
 case 32: 
 var $92=((($l_029130_i)-($ip_1_ip_0_i))|0);
 var $93=((($92)-(1))|0);
 var $94=($ip_1_ip_0_i>>>0)>($93>>>0);
 var $ip_1_ip_0__i=($94?$ip_1_ip_0_i:$93);
 var $95=((($ip_1_ip_0__i)+(1))|0);
 var $mem0_0_i=0;var $p_3_i=$95;label=34;break;
 case 33: 
 var $97=((($l_029130_i)-($p_1_p_0_i))|0);
 var $mem0_0_i=$97;var $p_3_i=$p_1_p_0_i;label=34;break;
 case 34: 
 var $p_3_i;
 var $mem0_0_i;
 var $99=$l_029130_i|63;
 var $_03_i=$7;var $mem_0_i=0;var $z_0_i=$7;label=35;break;
 case 35: 
 var $z_0_i;
 var $mem_0_i;
 var $_03_i;
 var $101=$z_0_i;
 var $102=$_03_i;
 var $103=((($101)-($102))|0);
 var $104=$103>>2;
 var $105=($104>>>0)<($l_029130_i>>>0);
 if($105){label=36;break;}else{var $z_1_i=$z_0_i;label=39;break;}
 case 36: 
 var $107=_wmemchr($z_0_i,0,$99);
 var $108=($107|0)==0;
 if($108){label=38;break;}else{label=37;break;}
 case 37: 
 var $110=$107;
 var $111=((($110)-($102))|0);
 var $112=$111>>2;
 var $113=($112>>>0)<($l_029130_i>>>0);
 if($113){var $_0=0;label=47;break;}else{var $z_1_i=$107;label=39;break;}
 case 38: 
 var $115=(($z_0_i+($99<<2))|0);
 var $z_1_i=$115;label=39;break;
 case 39: 
 var $z_1_i;
 var $117=($88>>>0)>($mem_0_i>>>0);
 var $_mem_0_i=($117?$88:$mem_0_i);
 var $118=(($n+($_mem_0_i<<2))|0);
 var $119=HEAP32[(($118)>>2)];
 var $120=($119|0)==0;
 if($120){var $k_3_i=$88;label=44;break;}else{var $k_27_i=$_mem_0_i;var $_pr4_i=$119;label=41;break;}
 case 40: 
 var $122=(($n+($128<<2))|0);
 var $123=HEAP32[(($122)>>2)];
 var $124=($123|0)==0;
 if($124){var $k_3_i=$88;label=44;break;}else{var $k_27_i=$128;var $_pr4_i=$123;label=41;break;}
 case 41: 
 var $_pr4_i;
 var $k_27_i;
 var $125=(($_03_i+($k_27_i<<2))|0);
 var $126=HEAP32[(($125)>>2)];
 var $127=($_pr4_i|0)==($126|0);
 var $128=((($k_27_i)+(1))|0);
 if($127){label=40;break;}else{label=42;break;}
 case 42: 
 var $130=((($k_27_i)-($ip_1_ip_0_i))|0);
 var $_pn_i=$130;var $mem_0_be_i=0;label=43;break;
 case 43: 
 var $mem_0_be_i;
 var $_pn_i;
 var $_03_be_i=(($_03_i+($_pn_i<<2))|0);
 var $_03_i=$_03_be_i;var $mem_0_i=$mem_0_be_i;var $z_0_i=$z_1_i;label=35;break;
 case 44: 
 var $k_3_i;
 var $131=($k_3_i>>>0)>($mem_0_i>>>0);
 if($131){label=45;break;}else{label=46;break;}
 case 45: 
 var $133=((($k_3_i)-(1))|0);
 var $134=(($n+($133<<2))|0);
 var $135=HEAP32[(($134)>>2)];
 var $136=(($_03_i+($133<<2))|0);
 var $137=HEAP32[(($136)>>2)];
 var $138=($135|0)==($137|0);
 if($138){var $k_3_i=$133;label=44;break;}else{label=46;break;}
 case 46: 
 var $139=($k_3_i|0)==($mem_0_i|0);
 if($139){var $_0=$_03_i;label=47;break;}else{var $_pn_i=$p_3_i;var $mem_0_be_i=$mem0_0_i;label=43;break;}
 case 47: 
 var $_0;
 return $_0;
  default: assert(0, "bad label: " + label);
 }

}


function _wcstok($s,$sep,$p){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($s|0)==0;
 if($1){label=2;break;}else{var $_01=$s;label=3;break;}
 case 2: 
 var $3=HEAP32[(($p)>>2)];
 var $4=($3|0)==0;
 if($4){var $_0=0;label=8;break;}else{var $_01=$3;label=3;break;}
 case 3: 
 var $_01;
 var $6=_wcsspn($_01,$sep);
 var $7=(($_01+($6<<2))|0);
 var $8=HEAP32[(($7)>>2)];
 var $9=($8|0)==0;
 if($9){label=4;break;}else{label=5;break;}
 case 4: 
 HEAP32[(($p)>>2)]=0;
 var $_0=0;label=8;break;
 case 5: 
 var $12=_wcscspn($7,$sep);
 var $_sum=((($12)+($6))|0);
 var $13=(($_01+($_sum<<2))|0);
 HEAP32[(($p)>>2)]=$13;
 var $14=HEAP32[(($13)>>2)];
 var $15=($14|0)==0;
 if($15){label=7;break;}else{label=6;break;}
 case 6: 
 var $_sum2=((($_sum)+(1))|0);
 var $17=(($_01+($_sum2<<2))|0);
 HEAP32[(($p)>>2)]=$17;
 HEAP32[(($13)>>2)]=0;
 var $_0=$7;label=8;break;
 case 7: 
 HEAP32[(($p)>>2)]=0;
 var $_0=$7;label=8;break;
 case 8: 
 var $_0;
 return $_0;
  default: assert(0, "bad label: " + label);
 }

}


function _wcswcs($haystack,$needle){
 var label=0;


 var $1=_wcsstr($haystack,$needle);
 return $1;
}


function _wmemchr($s,$c,$n){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($n|0)==0;
 if($1){var $_lcssa=0;label=4;break;}else{var $_012=$s;var $_03=$n;label=2;break;}
 case 2: 
 var $_03;
 var $_012;
 var $2=HEAP32[(($_012)>>2)];
 var $3=($2|0)==($c|0);
 if($3){var $_lcssa=$_012;label=4;break;}else{label=3;break;}
 case 3: 
 var $5=((($_03)-(1))|0);
 var $6=(($_012+4)|0);
 var $7=($5|0)==0;
 if($7){var $_lcssa=0;label=4;break;}else{var $_012=$6;var $_03=$5;label=2;break;}
 case 4: 
 var $_lcssa;
 return $_lcssa;
  default: assert(0, "bad label: " + label);
 }

}


function _wmemcmp($l,$r,$n){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($n|0)==0;
 if($1){var $12=0;label=5;break;}else{var $_025=$l;var $_016=$r;var $_07=$n;label=2;break;}
 case 2: 
 var $_07;
 var $_016;
 var $_025;
 var $2=HEAP32[(($_025)>>2)];
 var $3=HEAP32[(($_016)>>2)];
 var $4=($2|0)==($3|0);
 if($4){label=3;break;}else{label=4;break;}
 case 3: 
 var $6=((($_07)-(1))|0);
 var $7=(($_025+4)|0);
 var $8=(($_016+4)|0);
 var $9=($6|0)==0;
 if($9){var $12=0;label=5;break;}else{var $_025=$7;var $_016=$8;var $_07=$6;label=2;break;}
 case 4: 
 var $11=((($2)-($3))|0);
 var $12=$11;label=5;break;
 case 5: 
 var $12;
 return $12;
  default: assert(0, "bad label: " + label);
 }

}


function _wmemcpy($d,$s,$n){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($n|0)==0;
 if($1){label=3;break;}else{var $_023=$s;var $_014=$n;var $_05=$d;label=2;break;}
 case 2: 
 var $_05;
 var $_014;
 var $_023;
 var $2=((($_014)-(1))|0);
 var $3=(($_023+4)|0);
 var $4=HEAP32[(($_023)>>2)];
 var $5=(($_05+4)|0);
 HEAP32[(($_05)>>2)]=$4;
 var $6=($2|0)==0;
 if($6){label=3;break;}else{var $_023=$3;var $_014=$2;var $_05=$5;label=2;break;}
 case 3: 
 return $d;
  default: assert(0, "bad label: " + label);
 }

}


function _wmemmove($d,$s,$n){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=$d;
 var $2=$s;
 var $3=((($1)-($2))|0);
 var $4=$3>>2;
 var $5=($4>>>0)<($n>>>0);
 var $6=($n|0)==0;
 if($5){label=3;break;}else{label=2;break;}
 case 2: 
 if($6){label=6;break;}else{var $_025=$s;var $_16=$n;var $_07=$d;label=5;break;}
 case 3: 
 if($6){label=6;break;}else{var $_in=$n;label=4;break;}
 case 4: 
 var $_in;
 var $7=((($_in)-(1))|0);
 var $8=(($s+($7<<2))|0);
 var $9=HEAP32[(($8)>>2)];
 var $10=(($d+($7<<2))|0);
 HEAP32[(($10)>>2)]=$9;
 var $11=($7|0)==0;
 if($11){label=6;break;}else{var $_in=$7;label=4;break;}
 case 5: 
 var $_07;
 var $_16;
 var $_025;
 var $12=((($_16)-(1))|0);
 var $13=(($_025+4)|0);
 var $14=HEAP32[(($_025)>>2)];
 var $15=(($_07+4)|0);
 HEAP32[(($_07)>>2)]=$14;
 var $16=($12|0)==0;
 if($16){label=6;break;}else{var $_025=$13;var $_16=$12;var $_07=$15;label=5;break;}
 case 6: 
 return $d;
  default: assert(0, "bad label: " + label);
 }

}


function _wmemset($d,$c,$n){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($n|0)==0;
 if($1){label=3;break;}else{var $_012=$n;var $_03=$d;label=2;break;}
 case 2: 
 var $_03;
 var $_012;
 var $2=((($_012)-(1))|0);
 var $3=(($_03+4)|0);
 HEAP32[(($_03)>>2)]=$c;
 var $4=($2|0)==0;
 if($4){label=3;break;}else{var $_012=$2;var $_03=$3;label=2;break;}
 case 3: 
 return $d;
  default: assert(0, "bad label: " + label);
 }

}


function _malloc($bytes){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($bytes>>>0)<245;
 if($1){label=2;break;}else{label=78;break;}
 case 2: 
 var $3=($bytes>>>0)<11;
 if($3){var $8=16;label=4;break;}else{label=3;break;}
 case 3: 
 var $5=((($bytes)+(11))|0);
 var $6=$5&-8;
 var $8=$6;label=4;break;
 case 4: 
 var $8;
 var $9=$8>>>3;
 var $10=HEAP32[((141112)>>2)];
 var $11=$10>>>($9>>>0);
 var $12=$11&3;
 var $13=($12|0)==0;
 if($13){label=12;break;}else{label=5;break;}
 case 5: 
 var $15=$11&1;
 var $16=$15^1;
 var $17=((($16)+($9))|0);
 var $18=$17<<1;
 var $19=((141152+($18<<2))|0);
 var $20=$19;
 var $_sum11=((($18)+(2))|0);
 var $21=((141152+($_sum11<<2))|0);
 var $22=HEAP32[(($21)>>2)];
 var $23=(($22+8)|0);
 var $24=HEAP32[(($23)>>2)];
 var $25=($20|0)==($24|0);
 if($25){label=6;break;}else{label=7;break;}
 case 6: 
 var $27=1<<$17;
 var $28=$27^-1;
 var $29=$10&$28;
 HEAP32[((141112)>>2)]=$29;
 label=11;break;
 case 7: 
 var $31=$24;
 var $32=HEAP32[((141128)>>2)];
 var $33=($31>>>0)<($32>>>0);
 if($33){label=10;break;}else{label=8;break;}
 case 8: 
 var $35=(($24+12)|0);
 var $36=HEAP32[(($35)>>2)];
 var $37=($36|0)==($22|0);
 if($37){label=9;break;}else{label=10;break;}
 case 9: 
 HEAP32[(($35)>>2)]=$20;
 HEAP32[(($21)>>2)]=$24;
 label=11;break;
 case 10: 
 _abort();
 throw "Reached an unreachable!";
 case 11: 
 var $40=$17<<3;
 var $41=$40|3;
 var $42=(($22+4)|0);
 HEAP32[(($42)>>2)]=$41;
 var $43=$22;
 var $_sum1314=$40|4;
 var $44=(($43+$_sum1314)|0);
 var $45=$44;
 var $46=HEAP32[(($45)>>2)];
 var $47=$46|1;
 HEAP32[(($45)>>2)]=$47;
 var $48=$23;
 var $mem_0=$48;label=344;break;
 case 12: 
 var $50=HEAP32[((141120)>>2)];
 var $51=($8>>>0)>($50>>>0);
 if($51){label=13;break;}else{var $nb_0=$8;label=161;break;}
 case 13: 
 var $53=($11|0)==0;
 if($53){label=27;break;}else{label=14;break;}
 case 14: 
 var $55=$11<<$9;
 var $56=2<<$9;
 var $57=(((-$56))|0);
 var $58=$56|$57;
 var $59=$55&$58;
 var $60=(((-$59))|0);
 var $61=$59&$60;
 var $62=((($61)-(1))|0);
 var $63=$62>>>12;
 var $64=$63&16;
 var $65=$62>>>($64>>>0);
 var $66=$65>>>5;
 var $67=$66&8;
 var $68=$67|$64;
 var $69=$65>>>($67>>>0);
 var $70=$69>>>2;
 var $71=$70&4;
 var $72=$68|$71;
 var $73=$69>>>($71>>>0);
 var $74=$73>>>1;
 var $75=$74&2;
 var $76=$72|$75;
 var $77=$73>>>($75>>>0);
 var $78=$77>>>1;
 var $79=$78&1;
 var $80=$76|$79;
 var $81=$77>>>($79>>>0);
 var $82=((($80)+($81))|0);
 var $83=$82<<1;
 var $84=((141152+($83<<2))|0);
 var $85=$84;
 var $_sum4=((($83)+(2))|0);
 var $86=((141152+($_sum4<<2))|0);
 var $87=HEAP32[(($86)>>2)];
 var $88=(($87+8)|0);
 var $89=HEAP32[(($88)>>2)];
 var $90=($85|0)==($89|0);
 if($90){label=15;break;}else{label=16;break;}
 case 15: 
 var $92=1<<$82;
 var $93=$92^-1;
 var $94=$10&$93;
 HEAP32[((141112)>>2)]=$94;
 label=20;break;
 case 16: 
 var $96=$89;
 var $97=HEAP32[((141128)>>2)];
 var $98=($96>>>0)<($97>>>0);
 if($98){label=19;break;}else{label=17;break;}
 case 17: 
 var $100=(($89+12)|0);
 var $101=HEAP32[(($100)>>2)];
 var $102=($101|0)==($87|0);
 if($102){label=18;break;}else{label=19;break;}
 case 18: 
 HEAP32[(($100)>>2)]=$85;
 HEAP32[(($86)>>2)]=$89;
 label=20;break;
 case 19: 
 _abort();
 throw "Reached an unreachable!";
 case 20: 
 var $105=$82<<3;
 var $106=((($105)-($8))|0);
 var $107=$8|3;
 var $108=(($87+4)|0);
 HEAP32[(($108)>>2)]=$107;
 var $109=$87;
 var $110=(($109+$8)|0);
 var $111=$110;
 var $112=$106|1;
 var $_sum67=$8|4;
 var $113=(($109+$_sum67)|0);
 var $114=$113;
 HEAP32[(($114)>>2)]=$112;
 var $115=(($109+$105)|0);
 var $116=$115;
 HEAP32[(($116)>>2)]=$106;
 var $117=HEAP32[((141120)>>2)];
 var $118=($117|0)==0;
 if($118){label=26;break;}else{label=21;break;}
 case 21: 
 var $120=HEAP32[((141132)>>2)];
 var $121=$117>>>3;
 var $122=$121<<1;
 var $123=((141152+($122<<2))|0);
 var $124=$123;
 var $125=HEAP32[((141112)>>2)];
 var $126=1<<$121;
 var $127=$125&$126;
 var $128=($127|0)==0;
 if($128){label=22;break;}else{label=23;break;}
 case 22: 
 var $130=$125|$126;
 HEAP32[((141112)>>2)]=$130;
 var $_sum9_pre=((($122)+(2))|0);
 var $_pre=((141152+($_sum9_pre<<2))|0);
 var $F4_0=$124;var $_pre_phi=$_pre;label=25;break;
 case 23: 
 var $_sum10=((($122)+(2))|0);
 var $132=((141152+($_sum10<<2))|0);
 var $133=HEAP32[(($132)>>2)];
 var $134=$133;
 var $135=HEAP32[((141128)>>2)];
 var $136=($134>>>0)<($135>>>0);
 if($136){label=24;break;}else{var $F4_0=$133;var $_pre_phi=$132;label=25;break;}
 case 24: 
 _abort();
 throw "Reached an unreachable!";
 case 25: 
 var $_pre_phi;
 var $F4_0;
 HEAP32[(($_pre_phi)>>2)]=$120;
 var $139=(($F4_0+12)|0);
 HEAP32[(($139)>>2)]=$120;
 var $140=(($120+8)|0);
 HEAP32[(($140)>>2)]=$F4_0;
 var $141=(($120+12)|0);
 HEAP32[(($141)>>2)]=$124;
 label=26;break;
 case 26: 
 HEAP32[((141120)>>2)]=$106;
 HEAP32[((141132)>>2)]=$111;
 var $143=$88;
 var $mem_0=$143;label=344;break;
 case 27: 
 var $145=HEAP32[((141116)>>2)];
 var $146=($145|0)==0;
 if($146){var $nb_0=$8;label=161;break;}else{label=28;break;}
 case 28: 
 var $148=(((-$145))|0);
 var $149=$145&$148;
 var $150=((($149)-(1))|0);
 var $151=$150>>>12;
 var $152=$151&16;
 var $153=$150>>>($152>>>0);
 var $154=$153>>>5;
 var $155=$154&8;
 var $156=$155|$152;
 var $157=$153>>>($155>>>0);
 var $158=$157>>>2;
 var $159=$158&4;
 var $160=$156|$159;
 var $161=$157>>>($159>>>0);
 var $162=$161>>>1;
 var $163=$162&2;
 var $164=$160|$163;
 var $165=$161>>>($163>>>0);
 var $166=$165>>>1;
 var $167=$166&1;
 var $168=$164|$167;
 var $169=$165>>>($167>>>0);
 var $170=((($168)+($169))|0);
 var $171=((141416+($170<<2))|0);
 var $172=HEAP32[(($171)>>2)];
 var $173=(($172+4)|0);
 var $174=HEAP32[(($173)>>2)];
 var $175=$174&-8;
 var $176=((($175)-($8))|0);
 var $t_0_i=$172;var $v_0_i=$172;var $rsize_0_i=$176;label=29;break;
 case 29: 
 var $rsize_0_i;
 var $v_0_i;
 var $t_0_i;
 var $178=(($t_0_i+16)|0);
 var $179=HEAP32[(($178)>>2)];
 var $180=($179|0)==0;
 if($180){label=30;break;}else{var $185=$179;label=31;break;}
 case 30: 
 var $182=(($t_0_i+20)|0);
 var $183=HEAP32[(($182)>>2)];
 var $184=($183|0)==0;
 if($184){label=32;break;}else{var $185=$183;label=31;break;}
 case 31: 
 var $185;
 var $186=(($185+4)|0);
 var $187=HEAP32[(($186)>>2)];
 var $188=$187&-8;
 var $189=((($188)-($8))|0);
 var $190=($189>>>0)<($rsize_0_i>>>0);
 var $_rsize_0_i=($190?$189:$rsize_0_i);
 var $_v_0_i=($190?$185:$v_0_i);
 var $t_0_i=$185;var $v_0_i=$_v_0_i;var $rsize_0_i=$_rsize_0_i;label=29;break;
 case 32: 
 var $192=$v_0_i;
 var $193=HEAP32[((141128)>>2)];
 var $194=($192>>>0)<($193>>>0);
 if($194){label=76;break;}else{label=33;break;}
 case 33: 
 var $196=(($192+$8)|0);
 var $197=$196;
 var $198=($192>>>0)<($196>>>0);
 if($198){label=34;break;}else{label=76;break;}
 case 34: 
 var $200=(($v_0_i+24)|0);
 var $201=HEAP32[(($200)>>2)];
 var $202=(($v_0_i+12)|0);
 var $203=HEAP32[(($202)>>2)];
 var $204=($203|0)==($v_0_i|0);
 if($204){label=40;break;}else{label=35;break;}
 case 35: 
 var $206=(($v_0_i+8)|0);
 var $207=HEAP32[(($206)>>2)];
 var $208=$207;
 var $209=($208>>>0)<($193>>>0);
 if($209){label=39;break;}else{label=36;break;}
 case 36: 
 var $211=(($207+12)|0);
 var $212=HEAP32[(($211)>>2)];
 var $213=($212|0)==($v_0_i|0);
 if($213){label=37;break;}else{label=39;break;}
 case 37: 
 var $215=(($203+8)|0);
 var $216=HEAP32[(($215)>>2)];
 var $217=($216|0)==($v_0_i|0);
 if($217){label=38;break;}else{label=39;break;}
 case 38: 
 HEAP32[(($211)>>2)]=$203;
 HEAP32[(($215)>>2)]=$207;
 var $R_1_i=$203;label=47;break;
 case 39: 
 _abort();
 throw "Reached an unreachable!";
 case 40: 
 var $220=(($v_0_i+20)|0);
 var $221=HEAP32[(($220)>>2)];
 var $222=($221|0)==0;
 if($222){label=41;break;}else{var $R_0_i=$221;var $RP_0_i=$220;label=42;break;}
 case 41: 
 var $224=(($v_0_i+16)|0);
 var $225=HEAP32[(($224)>>2)];
 var $226=($225|0)==0;
 if($226){var $R_1_i=0;label=47;break;}else{var $R_0_i=$225;var $RP_0_i=$224;label=42;break;}
 case 42: 
 var $RP_0_i;
 var $R_0_i;
 var $227=(($R_0_i+20)|0);
 var $228=HEAP32[(($227)>>2)];
 var $229=($228|0)==0;
 if($229){label=43;break;}else{var $R_0_i=$228;var $RP_0_i=$227;label=42;break;}
 case 43: 
 var $231=(($R_0_i+16)|0);
 var $232=HEAP32[(($231)>>2)];
 var $233=($232|0)==0;
 if($233){label=44;break;}else{var $R_0_i=$232;var $RP_0_i=$231;label=42;break;}
 case 44: 
 var $235=$RP_0_i;
 var $236=($235>>>0)<($193>>>0);
 if($236){label=46;break;}else{label=45;break;}
 case 45: 
 HEAP32[(($RP_0_i)>>2)]=0;
 var $R_1_i=$R_0_i;label=47;break;
 case 46: 
 _abort();
 throw "Reached an unreachable!";
 case 47: 
 var $R_1_i;
 var $240=($201|0)==0;
 if($240){label=67;break;}else{label=48;break;}
 case 48: 
 var $242=(($v_0_i+28)|0);
 var $243=HEAP32[(($242)>>2)];
 var $244=((141416+($243<<2))|0);
 var $245=HEAP32[(($244)>>2)];
 var $246=($v_0_i|0)==($245|0);
 if($246){label=49;break;}else{label=51;break;}
 case 49: 
 HEAP32[(($244)>>2)]=$R_1_i;
 var $cond_i=($R_1_i|0)==0;
 if($cond_i){label=50;break;}else{label=57;break;}
 case 50: 
 var $248=1<<$243;
 var $249=$248^-1;
 var $250=HEAP32[((141116)>>2)];
 var $251=$250&$249;
 HEAP32[((141116)>>2)]=$251;
 label=67;break;
 case 51: 
 var $253=$201;
 var $254=HEAP32[((141128)>>2)];
 var $255=($253>>>0)<($254>>>0);
 if($255){label=55;break;}else{label=52;break;}
 case 52: 
 var $257=(($201+16)|0);
 var $258=HEAP32[(($257)>>2)];
 var $259=($258|0)==($v_0_i|0);
 if($259){label=53;break;}else{label=54;break;}
 case 53: 
 HEAP32[(($257)>>2)]=$R_1_i;
 label=56;break;
 case 54: 
 var $262=(($201+20)|0);
 HEAP32[(($262)>>2)]=$R_1_i;
 label=56;break;
 case 55: 
 _abort();
 throw "Reached an unreachable!";
 case 56: 
 var $265=($R_1_i|0)==0;
 if($265){label=67;break;}else{label=57;break;}
 case 57: 
 var $267=$R_1_i;
 var $268=HEAP32[((141128)>>2)];
 var $269=($267>>>0)<($268>>>0);
 if($269){label=66;break;}else{label=58;break;}
 case 58: 
 var $271=(($R_1_i+24)|0);
 HEAP32[(($271)>>2)]=$201;
 var $272=(($v_0_i+16)|0);
 var $273=HEAP32[(($272)>>2)];
 var $274=($273|0)==0;
 if($274){label=62;break;}else{label=59;break;}
 case 59: 
 var $276=$273;
 var $277=HEAP32[((141128)>>2)];
 var $278=($276>>>0)<($277>>>0);
 if($278){label=61;break;}else{label=60;break;}
 case 60: 
 var $280=(($R_1_i+16)|0);
 HEAP32[(($280)>>2)]=$273;
 var $281=(($273+24)|0);
 HEAP32[(($281)>>2)]=$R_1_i;
 label=62;break;
 case 61: 
 _abort();
 throw "Reached an unreachable!";
 case 62: 
 var $284=(($v_0_i+20)|0);
 var $285=HEAP32[(($284)>>2)];
 var $286=($285|0)==0;
 if($286){label=67;break;}else{label=63;break;}
 case 63: 
 var $288=$285;
 var $289=HEAP32[((141128)>>2)];
 var $290=($288>>>0)<($289>>>0);
 if($290){label=65;break;}else{label=64;break;}
 case 64: 
 var $292=(($R_1_i+20)|0);
 HEAP32[(($292)>>2)]=$285;
 var $293=(($285+24)|0);
 HEAP32[(($293)>>2)]=$R_1_i;
 label=67;break;
 case 65: 
 _abort();
 throw "Reached an unreachable!";
 case 66: 
 _abort();
 throw "Reached an unreachable!";
 case 67: 
 var $297=($rsize_0_i>>>0)<16;
 if($297){label=68;break;}else{label=69;break;}
 case 68: 
 var $299=((($rsize_0_i)+($8))|0);
 var $300=$299|3;
 var $301=(($v_0_i+4)|0);
 HEAP32[(($301)>>2)]=$300;
 var $_sum4_i=((($299)+(4))|0);
 var $302=(($192+$_sum4_i)|0);
 var $303=$302;
 var $304=HEAP32[(($303)>>2)];
 var $305=$304|1;
 HEAP32[(($303)>>2)]=$305;
 label=77;break;
 case 69: 
 var $307=$8|3;
 var $308=(($v_0_i+4)|0);
 HEAP32[(($308)>>2)]=$307;
 var $309=$rsize_0_i|1;
 var $_sum_i37=$8|4;
 var $310=(($192+$_sum_i37)|0);
 var $311=$310;
 HEAP32[(($311)>>2)]=$309;
 var $_sum1_i=((($rsize_0_i)+($8))|0);
 var $312=(($192+$_sum1_i)|0);
 var $313=$312;
 HEAP32[(($313)>>2)]=$rsize_0_i;
 var $314=HEAP32[((141120)>>2)];
 var $315=($314|0)==0;
 if($315){label=75;break;}else{label=70;break;}
 case 70: 
 var $317=HEAP32[((141132)>>2)];
 var $318=$314>>>3;
 var $319=$318<<1;
 var $320=((141152+($319<<2))|0);
 var $321=$320;
 var $322=HEAP32[((141112)>>2)];
 var $323=1<<$318;
 var $324=$322&$323;
 var $325=($324|0)==0;
 if($325){label=71;break;}else{label=72;break;}
 case 71: 
 var $327=$322|$323;
 HEAP32[((141112)>>2)]=$327;
 var $_sum2_pre_i=((($319)+(2))|0);
 var $_pre_i=((141152+($_sum2_pre_i<<2))|0);
 var $F1_0_i=$321;var $_pre_phi_i=$_pre_i;label=74;break;
 case 72: 
 var $_sum3_i=((($319)+(2))|0);
 var $329=((141152+($_sum3_i<<2))|0);
 var $330=HEAP32[(($329)>>2)];
 var $331=$330;
 var $332=HEAP32[((141128)>>2)];
 var $333=($331>>>0)<($332>>>0);
 if($333){label=73;break;}else{var $F1_0_i=$330;var $_pre_phi_i=$329;label=74;break;}
 case 73: 
 _abort();
 throw "Reached an unreachable!";
 case 74: 
 var $_pre_phi_i;
 var $F1_0_i;
 HEAP32[(($_pre_phi_i)>>2)]=$317;
 var $336=(($F1_0_i+12)|0);
 HEAP32[(($336)>>2)]=$317;
 var $337=(($317+8)|0);
 HEAP32[(($337)>>2)]=$F1_0_i;
 var $338=(($317+12)|0);
 HEAP32[(($338)>>2)]=$321;
 label=75;break;
 case 75: 
 HEAP32[((141120)>>2)]=$rsize_0_i;
 HEAP32[((141132)>>2)]=$197;
 label=77;break;
 case 76: 
 _abort();
 throw "Reached an unreachable!";
 case 77: 
 var $341=(($v_0_i+8)|0);
 var $342=$341;
 var $mem_0=$342;label=344;break;
 case 78: 
 var $344=($bytes>>>0)>4294967231;
 if($344){var $nb_0=-1;label=161;break;}else{label=79;break;}
 case 79: 
 var $346=((($bytes)+(11))|0);
 var $347=$346&-8;
 var $348=HEAP32[((141116)>>2)];
 var $349=($348|0)==0;
 if($349){var $nb_0=$347;label=161;break;}else{label=80;break;}
 case 80: 
 var $351=(((-$347))|0);
 var $352=$346>>>8;
 var $353=($352|0)==0;
 if($353){var $idx_0_i=0;label=83;break;}else{label=81;break;}
 case 81: 
 var $355=($347>>>0)>16777215;
 if($355){var $idx_0_i=31;label=83;break;}else{label=82;break;}
 case 82: 
 var $357=((($352)+(1048320))|0);
 var $358=$357>>>16;
 var $359=$358&8;
 var $360=$352<<$359;
 var $361=((($360)+(520192))|0);
 var $362=$361>>>16;
 var $363=$362&4;
 var $364=$363|$359;
 var $365=$360<<$363;
 var $366=((($365)+(245760))|0);
 var $367=$366>>>16;
 var $368=$367&2;
 var $369=$364|$368;
 var $370=(((14)-($369))|0);
 var $371=$365<<$368;
 var $372=$371>>>15;
 var $373=((($370)+($372))|0);
 var $374=$373<<1;
 var $375=((($373)+(7))|0);
 var $376=$347>>>($375>>>0);
 var $377=$376&1;
 var $378=$377|$374;
 var $idx_0_i=$378;label=83;break;
 case 83: 
 var $idx_0_i;
 var $380=((141416+($idx_0_i<<2))|0);
 var $381=HEAP32[(($380)>>2)];
 var $382=($381|0)==0;
 if($382){var $v_2_i=0;var $rsize_2_i=$351;var $t_1_i=0;label=90;break;}else{label=84;break;}
 case 84: 
 var $384=($idx_0_i|0)==31;
 if($384){var $389=0;label=86;break;}else{label=85;break;}
 case 85: 
 var $386=$idx_0_i>>>1;
 var $387=(((25)-($386))|0);
 var $389=$387;label=86;break;
 case 86: 
 var $389;
 var $390=$347<<$389;
 var $v_0_i18=0;var $rsize_0_i17=$351;var $t_0_i16=$381;var $sizebits_0_i=$390;var $rst_0_i=0;label=87;break;
 case 87: 
 var $rst_0_i;
 var $sizebits_0_i;
 var $t_0_i16;
 var $rsize_0_i17;
 var $v_0_i18;
 var $392=(($t_0_i16+4)|0);
 var $393=HEAP32[(($392)>>2)];
 var $394=$393&-8;
 var $395=((($394)-($347))|0);
 var $396=($395>>>0)<($rsize_0_i17>>>0);
 if($396){label=88;break;}else{var $v_1_i=$v_0_i18;var $rsize_1_i=$rsize_0_i17;label=89;break;}
 case 88: 
 var $398=($394|0)==($347|0);
 if($398){var $v_2_i=$t_0_i16;var $rsize_2_i=$395;var $t_1_i=$t_0_i16;label=90;break;}else{var $v_1_i=$t_0_i16;var $rsize_1_i=$395;label=89;break;}
 case 89: 
 var $rsize_1_i;
 var $v_1_i;
 var $400=(($t_0_i16+20)|0);
 var $401=HEAP32[(($400)>>2)];
 var $402=$sizebits_0_i>>>31;
 var $403=(($t_0_i16+16+($402<<2))|0);
 var $404=HEAP32[(($403)>>2)];
 var $405=($401|0)==0;
 var $406=($401|0)==($404|0);
 var $or_cond_i=$405|$406;
 var $rst_1_i=($or_cond_i?$rst_0_i:$401);
 var $407=($404|0)==0;
 var $408=$sizebits_0_i<<1;
 if($407){var $v_2_i=$v_1_i;var $rsize_2_i=$rsize_1_i;var $t_1_i=$rst_1_i;label=90;break;}else{var $v_0_i18=$v_1_i;var $rsize_0_i17=$rsize_1_i;var $t_0_i16=$404;var $sizebits_0_i=$408;var $rst_0_i=$rst_1_i;label=87;break;}
 case 90: 
 var $t_1_i;
 var $rsize_2_i;
 var $v_2_i;
 var $409=($t_1_i|0)==0;
 var $410=($v_2_i|0)==0;
 var $or_cond21_i=$409&$410;
 if($or_cond21_i){label=91;break;}else{var $t_2_ph_i=$t_1_i;label=93;break;}
 case 91: 
 var $412=2<<$idx_0_i;
 var $413=(((-$412))|0);
 var $414=$412|$413;
 var $415=$348&$414;
 var $416=($415|0)==0;
 if($416){var $nb_0=$347;label=161;break;}else{label=92;break;}
 case 92: 
 var $418=(((-$415))|0);
 var $419=$415&$418;
 var $420=((($419)-(1))|0);
 var $421=$420>>>12;
 var $422=$421&16;
 var $423=$420>>>($422>>>0);
 var $424=$423>>>5;
 var $425=$424&8;
 var $426=$425|$422;
 var $427=$423>>>($425>>>0);
 var $428=$427>>>2;
 var $429=$428&4;
 var $430=$426|$429;
 var $431=$427>>>($429>>>0);
 var $432=$431>>>1;
 var $433=$432&2;
 var $434=$430|$433;
 var $435=$431>>>($433>>>0);
 var $436=$435>>>1;
 var $437=$436&1;
 var $438=$434|$437;
 var $439=$435>>>($437>>>0);
 var $440=((($438)+($439))|0);
 var $441=((141416+($440<<2))|0);
 var $442=HEAP32[(($441)>>2)];
 var $t_2_ph_i=$442;label=93;break;
 case 93: 
 var $t_2_ph_i;
 var $443=($t_2_ph_i|0)==0;
 if($443){var $rsize_3_lcssa_i=$rsize_2_i;var $v_3_lcssa_i=$v_2_i;label=96;break;}else{var $t_230_i=$t_2_ph_i;var $rsize_331_i=$rsize_2_i;var $v_332_i=$v_2_i;label=94;break;}
 case 94: 
 var $v_332_i;
 var $rsize_331_i;
 var $t_230_i;
 var $444=(($t_230_i+4)|0);
 var $445=HEAP32[(($444)>>2)];
 var $446=$445&-8;
 var $447=((($446)-($347))|0);
 var $448=($447>>>0)<($rsize_331_i>>>0);
 var $_rsize_3_i=($448?$447:$rsize_331_i);
 var $t_2_v_3_i=($448?$t_230_i:$v_332_i);
 var $449=(($t_230_i+16)|0);
 var $450=HEAP32[(($449)>>2)];
 var $451=($450|0)==0;
 if($451){label=95;break;}else{var $t_230_i=$450;var $rsize_331_i=$_rsize_3_i;var $v_332_i=$t_2_v_3_i;label=94;break;}
 case 95: 
 var $452=(($t_230_i+20)|0);
 var $453=HEAP32[(($452)>>2)];
 var $454=($453|0)==0;
 if($454){var $rsize_3_lcssa_i=$_rsize_3_i;var $v_3_lcssa_i=$t_2_v_3_i;label=96;break;}else{var $t_230_i=$453;var $rsize_331_i=$_rsize_3_i;var $v_332_i=$t_2_v_3_i;label=94;break;}
 case 96: 
 var $v_3_lcssa_i;
 var $rsize_3_lcssa_i;
 var $455=($v_3_lcssa_i|0)==0;
 if($455){var $nb_0=$347;label=161;break;}else{label=97;break;}
 case 97: 
 var $457=HEAP32[((141120)>>2)];
 var $458=((($457)-($347))|0);
 var $459=($rsize_3_lcssa_i>>>0)<($458>>>0);
 if($459){label=98;break;}else{var $nb_0=$347;label=161;break;}
 case 98: 
 var $461=$v_3_lcssa_i;
 var $462=HEAP32[((141128)>>2)];
 var $463=($461>>>0)<($462>>>0);
 if($463){label=159;break;}else{label=99;break;}
 case 99: 
 var $465=(($461+$347)|0);
 var $466=$465;
 var $467=($461>>>0)<($465>>>0);
 if($467){label=100;break;}else{label=159;break;}
 case 100: 
 var $469=(($v_3_lcssa_i+24)|0);
 var $470=HEAP32[(($469)>>2)];
 var $471=(($v_3_lcssa_i+12)|0);
 var $472=HEAP32[(($471)>>2)];
 var $473=($472|0)==($v_3_lcssa_i|0);
 if($473){label=106;break;}else{label=101;break;}
 case 101: 
 var $475=(($v_3_lcssa_i+8)|0);
 var $476=HEAP32[(($475)>>2)];
 var $477=$476;
 var $478=($477>>>0)<($462>>>0);
 if($478){label=105;break;}else{label=102;break;}
 case 102: 
 var $480=(($476+12)|0);
 var $481=HEAP32[(($480)>>2)];
 var $482=($481|0)==($v_3_lcssa_i|0);
 if($482){label=103;break;}else{label=105;break;}
 case 103: 
 var $484=(($472+8)|0);
 var $485=HEAP32[(($484)>>2)];
 var $486=($485|0)==($v_3_lcssa_i|0);
 if($486){label=104;break;}else{label=105;break;}
 case 104: 
 HEAP32[(($480)>>2)]=$472;
 HEAP32[(($484)>>2)]=$476;
 var $R_1_i22=$472;label=113;break;
 case 105: 
 _abort();
 throw "Reached an unreachable!";
 case 106: 
 var $489=(($v_3_lcssa_i+20)|0);
 var $490=HEAP32[(($489)>>2)];
 var $491=($490|0)==0;
 if($491){label=107;break;}else{var $R_0_i20=$490;var $RP_0_i19=$489;label=108;break;}
 case 107: 
 var $493=(($v_3_lcssa_i+16)|0);
 var $494=HEAP32[(($493)>>2)];
 var $495=($494|0)==0;
 if($495){var $R_1_i22=0;label=113;break;}else{var $R_0_i20=$494;var $RP_0_i19=$493;label=108;break;}
 case 108: 
 var $RP_0_i19;
 var $R_0_i20;
 var $496=(($R_0_i20+20)|0);
 var $497=HEAP32[(($496)>>2)];
 var $498=($497|0)==0;
 if($498){label=109;break;}else{var $R_0_i20=$497;var $RP_0_i19=$496;label=108;break;}
 case 109: 
 var $500=(($R_0_i20+16)|0);
 var $501=HEAP32[(($500)>>2)];
 var $502=($501|0)==0;
 if($502){label=110;break;}else{var $R_0_i20=$501;var $RP_0_i19=$500;label=108;break;}
 case 110: 
 var $504=$RP_0_i19;
 var $505=($504>>>0)<($462>>>0);
 if($505){label=112;break;}else{label=111;break;}
 case 111: 
 HEAP32[(($RP_0_i19)>>2)]=0;
 var $R_1_i22=$R_0_i20;label=113;break;
 case 112: 
 _abort();
 throw "Reached an unreachable!";
 case 113: 
 var $R_1_i22;
 var $509=($470|0)==0;
 if($509){label=133;break;}else{label=114;break;}
 case 114: 
 var $511=(($v_3_lcssa_i+28)|0);
 var $512=HEAP32[(($511)>>2)];
 var $513=((141416+($512<<2))|0);
 var $514=HEAP32[(($513)>>2)];
 var $515=($v_3_lcssa_i|0)==($514|0);
 if($515){label=115;break;}else{label=117;break;}
 case 115: 
 HEAP32[(($513)>>2)]=$R_1_i22;
 var $cond_i23=($R_1_i22|0)==0;
 if($cond_i23){label=116;break;}else{label=123;break;}
 case 116: 
 var $517=1<<$512;
 var $518=$517^-1;
 var $519=HEAP32[((141116)>>2)];
 var $520=$519&$518;
 HEAP32[((141116)>>2)]=$520;
 label=133;break;
 case 117: 
 var $522=$470;
 var $523=HEAP32[((141128)>>2)];
 var $524=($522>>>0)<($523>>>0);
 if($524){label=121;break;}else{label=118;break;}
 case 118: 
 var $526=(($470+16)|0);
 var $527=HEAP32[(($526)>>2)];
 var $528=($527|0)==($v_3_lcssa_i|0);
 if($528){label=119;break;}else{label=120;break;}
 case 119: 
 HEAP32[(($526)>>2)]=$R_1_i22;
 label=122;break;
 case 120: 
 var $531=(($470+20)|0);
 HEAP32[(($531)>>2)]=$R_1_i22;
 label=122;break;
 case 121: 
 _abort();
 throw "Reached an unreachable!";
 case 122: 
 var $534=($R_1_i22|0)==0;
 if($534){label=133;break;}else{label=123;break;}
 case 123: 
 var $536=$R_1_i22;
 var $537=HEAP32[((141128)>>2)];
 var $538=($536>>>0)<($537>>>0);
 if($538){label=132;break;}else{label=124;break;}
 case 124: 
 var $540=(($R_1_i22+24)|0);
 HEAP32[(($540)>>2)]=$470;
 var $541=(($v_3_lcssa_i+16)|0);
 var $542=HEAP32[(($541)>>2)];
 var $543=($542|0)==0;
 if($543){label=128;break;}else{label=125;break;}
 case 125: 
 var $545=$542;
 var $546=HEAP32[((141128)>>2)];
 var $547=($545>>>0)<($546>>>0);
 if($547){label=127;break;}else{label=126;break;}
 case 126: 
 var $549=(($R_1_i22+16)|0);
 HEAP32[(($549)>>2)]=$542;
 var $550=(($542+24)|0);
 HEAP32[(($550)>>2)]=$R_1_i22;
 label=128;break;
 case 127: 
 _abort();
 throw "Reached an unreachable!";
 case 128: 
 var $553=(($v_3_lcssa_i+20)|0);
 var $554=HEAP32[(($553)>>2)];
 var $555=($554|0)==0;
 if($555){label=133;break;}else{label=129;break;}
 case 129: 
 var $557=$554;
 var $558=HEAP32[((141128)>>2)];
 var $559=($557>>>0)<($558>>>0);
 if($559){label=131;break;}else{label=130;break;}
 case 130: 
 var $561=(($R_1_i22+20)|0);
 HEAP32[(($561)>>2)]=$554;
 var $562=(($554+24)|0);
 HEAP32[(($562)>>2)]=$R_1_i22;
 label=133;break;
 case 131: 
 _abort();
 throw "Reached an unreachable!";
 case 132: 
 _abort();
 throw "Reached an unreachable!";
 case 133: 
 var $566=($rsize_3_lcssa_i>>>0)<16;
 if($566){label=134;break;}else{label=135;break;}
 case 134: 
 var $568=((($rsize_3_lcssa_i)+($347))|0);
 var $569=$568|3;
 var $570=(($v_3_lcssa_i+4)|0);
 HEAP32[(($570)>>2)]=$569;
 var $_sum19_i=((($568)+(4))|0);
 var $571=(($461+$_sum19_i)|0);
 var $572=$571;
 var $573=HEAP32[(($572)>>2)];
 var $574=$573|1;
 HEAP32[(($572)>>2)]=$574;
 label=160;break;
 case 135: 
 var $576=$347|3;
 var $577=(($v_3_lcssa_i+4)|0);
 HEAP32[(($577)>>2)]=$576;
 var $578=$rsize_3_lcssa_i|1;
 var $_sum_i2536=$347|4;
 var $579=(($461+$_sum_i2536)|0);
 var $580=$579;
 HEAP32[(($580)>>2)]=$578;
 var $_sum1_i26=((($rsize_3_lcssa_i)+($347))|0);
 var $581=(($461+$_sum1_i26)|0);
 var $582=$581;
 HEAP32[(($582)>>2)]=$rsize_3_lcssa_i;
 var $583=$rsize_3_lcssa_i>>>3;
 var $584=($rsize_3_lcssa_i>>>0)<256;
 if($584){label=136;break;}else{label=141;break;}
 case 136: 
 var $586=$583<<1;
 var $587=((141152+($586<<2))|0);
 var $588=$587;
 var $589=HEAP32[((141112)>>2)];
 var $590=1<<$583;
 var $591=$589&$590;
 var $592=($591|0)==0;
 if($592){label=137;break;}else{label=138;break;}
 case 137: 
 var $594=$589|$590;
 HEAP32[((141112)>>2)]=$594;
 var $_sum15_pre_i=((($586)+(2))|0);
 var $_pre_i27=((141152+($_sum15_pre_i<<2))|0);
 var $F5_0_i=$588;var $_pre_phi_i28=$_pre_i27;label=140;break;
 case 138: 
 var $_sum18_i=((($586)+(2))|0);
 var $596=((141152+($_sum18_i<<2))|0);
 var $597=HEAP32[(($596)>>2)];
 var $598=$597;
 var $599=HEAP32[((141128)>>2)];
 var $600=($598>>>0)<($599>>>0);
 if($600){label=139;break;}else{var $F5_0_i=$597;var $_pre_phi_i28=$596;label=140;break;}
 case 139: 
 _abort();
 throw "Reached an unreachable!";
 case 140: 
 var $_pre_phi_i28;
 var $F5_0_i;
 HEAP32[(($_pre_phi_i28)>>2)]=$466;
 var $603=(($F5_0_i+12)|0);
 HEAP32[(($603)>>2)]=$466;
 var $_sum16_i=((($347)+(8))|0);
 var $604=(($461+$_sum16_i)|0);
 var $605=$604;
 HEAP32[(($605)>>2)]=$F5_0_i;
 var $_sum17_i=((($347)+(12))|0);
 var $606=(($461+$_sum17_i)|0);
 var $607=$606;
 HEAP32[(($607)>>2)]=$588;
 label=160;break;
 case 141: 
 var $609=$465;
 var $610=$rsize_3_lcssa_i>>>8;
 var $611=($610|0)==0;
 if($611){var $I7_0_i=0;label=144;break;}else{label=142;break;}
 case 142: 
 var $613=($rsize_3_lcssa_i>>>0)>16777215;
 if($613){var $I7_0_i=31;label=144;break;}else{label=143;break;}
 case 143: 
 var $615=((($610)+(1048320))|0);
 var $616=$615>>>16;
 var $617=$616&8;
 var $618=$610<<$617;
 var $619=((($618)+(520192))|0);
 var $620=$619>>>16;
 var $621=$620&4;
 var $622=$621|$617;
 var $623=$618<<$621;
 var $624=((($623)+(245760))|0);
 var $625=$624>>>16;
 var $626=$625&2;
 var $627=$622|$626;
 var $628=(((14)-($627))|0);
 var $629=$623<<$626;
 var $630=$629>>>15;
 var $631=((($628)+($630))|0);
 var $632=$631<<1;
 var $633=((($631)+(7))|0);
 var $634=$rsize_3_lcssa_i>>>($633>>>0);
 var $635=$634&1;
 var $636=$635|$632;
 var $I7_0_i=$636;label=144;break;
 case 144: 
 var $I7_0_i;
 var $638=((141416+($I7_0_i<<2))|0);
 var $_sum2_i=((($347)+(28))|0);
 var $639=(($461+$_sum2_i)|0);
 var $640=$639;
 HEAP32[(($640)>>2)]=$I7_0_i;
 var $_sum3_i29=((($347)+(16))|0);
 var $641=(($461+$_sum3_i29)|0);
 var $_sum4_i30=((($347)+(20))|0);
 var $642=(($461+$_sum4_i30)|0);
 var $643=$642;
 HEAP32[(($643)>>2)]=0;
 var $644=$641;
 HEAP32[(($644)>>2)]=0;
 var $645=HEAP32[((141116)>>2)];
 var $646=1<<$I7_0_i;
 var $647=$645&$646;
 var $648=($647|0)==0;
 if($648){label=145;break;}else{label=146;break;}
 case 145: 
 var $650=$645|$646;
 HEAP32[((141116)>>2)]=$650;
 HEAP32[(($638)>>2)]=$609;
 var $651=$638;
 var $_sum5_i=((($347)+(24))|0);
 var $652=(($461+$_sum5_i)|0);
 var $653=$652;
 HEAP32[(($653)>>2)]=$651;
 var $_sum6_i=((($347)+(12))|0);
 var $654=(($461+$_sum6_i)|0);
 var $655=$654;
 HEAP32[(($655)>>2)]=$609;
 var $_sum7_i=((($347)+(8))|0);
 var $656=(($461+$_sum7_i)|0);
 var $657=$656;
 HEAP32[(($657)>>2)]=$609;
 label=160;break;
 case 146: 
 var $659=HEAP32[(($638)>>2)];
 var $660=($I7_0_i|0)==31;
 if($660){var $665=0;label=148;break;}else{label=147;break;}
 case 147: 
 var $662=$I7_0_i>>>1;
 var $663=(((25)-($662))|0);
 var $665=$663;label=148;break;
 case 148: 
 var $665;
 var $666=(($659+4)|0);
 var $667=HEAP32[(($666)>>2)];
 var $668=$667&-8;
 var $669=($668|0)==($rsize_3_lcssa_i|0);
 if($669){var $T_0_lcssa_i=$659;label=155;break;}else{label=149;break;}
 case 149: 
 var $670=$rsize_3_lcssa_i<<$665;
 var $T_026_i=$659;var $K12_027_i=$670;label=151;break;
 case 150: 
 var $672=$K12_027_i<<1;
 var $673=(($680+4)|0);
 var $674=HEAP32[(($673)>>2)];
 var $675=$674&-8;
 var $676=($675|0)==($rsize_3_lcssa_i|0);
 if($676){var $T_0_lcssa_i=$680;label=155;break;}else{var $T_026_i=$680;var $K12_027_i=$672;label=151;break;}
 case 151: 
 var $K12_027_i;
 var $T_026_i;
 var $678=$K12_027_i>>>31;
 var $679=(($T_026_i+16+($678<<2))|0);
 var $680=HEAP32[(($679)>>2)];
 var $681=($680|0)==0;
 if($681){label=152;break;}else{label=150;break;}
 case 152: 
 var $683=$679;
 var $684=HEAP32[((141128)>>2)];
 var $685=($683>>>0)<($684>>>0);
 if($685){label=154;break;}else{label=153;break;}
 case 153: 
 HEAP32[(($679)>>2)]=$609;
 var $_sum12_i=((($347)+(24))|0);
 var $687=(($461+$_sum12_i)|0);
 var $688=$687;
 HEAP32[(($688)>>2)]=$T_026_i;
 var $_sum13_i=((($347)+(12))|0);
 var $689=(($461+$_sum13_i)|0);
 var $690=$689;
 HEAP32[(($690)>>2)]=$609;
 var $_sum14_i=((($347)+(8))|0);
 var $691=(($461+$_sum14_i)|0);
 var $692=$691;
 HEAP32[(($692)>>2)]=$609;
 label=160;break;
 case 154: 
 _abort();
 throw "Reached an unreachable!";
 case 155: 
 var $T_0_lcssa_i;
 var $694=(($T_0_lcssa_i+8)|0);
 var $695=HEAP32[(($694)>>2)];
 var $696=$T_0_lcssa_i;
 var $697=HEAP32[((141128)>>2)];
 var $698=($696>>>0)<($697>>>0);
 if($698){label=158;break;}else{label=156;break;}
 case 156: 
 var $700=$695;
 var $701=($700>>>0)<($697>>>0);
 if($701){label=158;break;}else{label=157;break;}
 case 157: 
 var $703=(($695+12)|0);
 HEAP32[(($703)>>2)]=$609;
 HEAP32[(($694)>>2)]=$609;
 var $_sum9_i=((($347)+(8))|0);
 var $704=(($461+$_sum9_i)|0);
 var $705=$704;
 HEAP32[(($705)>>2)]=$695;
 var $_sum10_i=((($347)+(12))|0);
 var $706=(($461+$_sum10_i)|0);
 var $707=$706;
 HEAP32[(($707)>>2)]=$T_0_lcssa_i;
 var $_sum11_i=((($347)+(24))|0);
 var $708=(($461+$_sum11_i)|0);
 var $709=$708;
 HEAP32[(($709)>>2)]=0;
 label=160;break;
 case 158: 
 _abort();
 throw "Reached an unreachable!";
 case 159: 
 _abort();
 throw "Reached an unreachable!";
 case 160: 
 var $711=(($v_3_lcssa_i+8)|0);
 var $712=$711;
 var $mem_0=$712;label=344;break;
 case 161: 
 var $nb_0;
 var $713=HEAP32[((141120)>>2)];
 var $714=($nb_0>>>0)>($713>>>0);
 if($714){label=166;break;}else{label=162;break;}
 case 162: 
 var $716=((($713)-($nb_0))|0);
 var $717=HEAP32[((141132)>>2)];
 var $718=($716>>>0)>15;
 if($718){label=163;break;}else{label=164;break;}
 case 163: 
 var $720=$717;
 var $721=(($720+$nb_0)|0);
 var $722=$721;
 HEAP32[((141132)>>2)]=$722;
 HEAP32[((141120)>>2)]=$716;
 var $723=$716|1;
 var $_sum2=((($nb_0)+(4))|0);
 var $724=(($720+$_sum2)|0);
 var $725=$724;
 HEAP32[(($725)>>2)]=$723;
 var $726=(($720+$713)|0);
 var $727=$726;
 HEAP32[(($727)>>2)]=$716;
 var $728=$nb_0|3;
 var $729=(($717+4)|0);
 HEAP32[(($729)>>2)]=$728;
 label=165;break;
 case 164: 
 HEAP32[((141120)>>2)]=0;
 HEAP32[((141132)>>2)]=0;
 var $731=$713|3;
 var $732=(($717+4)|0);
 HEAP32[(($732)>>2)]=$731;
 var $733=$717;
 var $_sum1=((($713)+(4))|0);
 var $734=(($733+$_sum1)|0);
 var $735=$734;
 var $736=HEAP32[(($735)>>2)];
 var $737=$736|1;
 HEAP32[(($735)>>2)]=$737;
 label=165;break;
 case 165: 
 var $739=(($717+8)|0);
 var $740=$739;
 var $mem_0=$740;label=344;break;
 case 166: 
 var $742=HEAP32[((141124)>>2)];
 var $743=($nb_0>>>0)<($742>>>0);
 if($743){label=167;break;}else{label=168;break;}
 case 167: 
 var $745=((($742)-($nb_0))|0);
 HEAP32[((141124)>>2)]=$745;
 var $746=HEAP32[((141136)>>2)];
 var $747=$746;
 var $748=(($747+$nb_0)|0);
 var $749=$748;
 HEAP32[((141136)>>2)]=$749;
 var $750=$745|1;
 var $_sum=((($nb_0)+(4))|0);
 var $751=(($747+$_sum)|0);
 var $752=$751;
 HEAP32[(($752)>>2)]=$750;
 var $753=$nb_0|3;
 var $754=(($746+4)|0);
 HEAP32[(($754)>>2)]=$753;
 var $755=(($746+8)|0);
 var $756=$755;
 var $mem_0=$756;label=344;break;
 case 168: 
 var $758=HEAP32[((141040)>>2)];
 var $759=($758|0)==0;
 if($759){label=169;break;}else{label=172;break;}
 case 169: 
 var $761=_sysconf(30);
 var $762=((($761)-(1))|0);
 var $763=$762&$761;
 var $764=($763|0)==0;
 if($764){label=171;break;}else{label=170;break;}
 case 170: 
 _abort();
 throw "Reached an unreachable!";
 case 171: 
 HEAP32[((141048)>>2)]=$761;
 HEAP32[((141044)>>2)]=$761;
 HEAP32[((141052)>>2)]=-1;
 HEAP32[((141056)>>2)]=-1;
 HEAP32[((141060)>>2)]=0;
 HEAP32[((141556)>>2)]=0;
 var $766=_time(0);
 var $767=$766&-16;
 var $768=$767^1431655768;
 HEAP32[((141040)>>2)]=$768;
 label=172;break;
 case 172: 
 var $770=((($nb_0)+(48))|0);
 var $771=HEAP32[((141048)>>2)];
 var $772=((($nb_0)+(47))|0);
 var $773=((($771)+($772))|0);
 var $774=(((-$771))|0);
 var $775=$773&$774;
 var $776=($775>>>0)>($nb_0>>>0);
 if($776){label=173;break;}else{var $mem_0=0;label=344;break;}
 case 173: 
 var $778=HEAP32[((141552)>>2)];
 var $779=($778|0)==0;
 if($779){label=175;break;}else{label=174;break;}
 case 174: 
 var $781=HEAP32[((141544)>>2)];
 var $782=((($781)+($775))|0);
 var $783=($782>>>0)<=($781>>>0);
 var $784=($782>>>0)>($778>>>0);
 var $or_cond1_i=$783|$784;
 if($or_cond1_i){var $mem_0=0;label=344;break;}else{label=175;break;}
 case 175: 
 var $786=HEAP32[((141556)>>2)];
 var $787=$786&4;
 var $788=($787|0)==0;
 if($788){label=176;break;}else{var $tsize_1_i=0;label=199;break;}
 case 176: 
 var $790=HEAP32[((141136)>>2)];
 var $791=($790|0)==0;
 if($791){label=182;break;}else{label=177;break;}
 case 177: 
 var $793=$790;
 var $sp_0_i_i=141560;label=178;break;
 case 178: 
 var $sp_0_i_i;
 var $795=(($sp_0_i_i)|0);
 var $796=HEAP32[(($795)>>2)];
 var $797=($796>>>0)>($793>>>0);
 if($797){label=180;break;}else{label=179;break;}
 case 179: 
 var $799=(($sp_0_i_i+4)|0);
 var $800=HEAP32[(($799)>>2)];
 var $801=(($796+$800)|0);
 var $802=($801>>>0)>($793>>>0);
 if($802){label=181;break;}else{label=180;break;}
 case 180: 
 var $804=(($sp_0_i_i+8)|0);
 var $805=HEAP32[(($804)>>2)];
 var $806=($805|0)==0;
 if($806){label=182;break;}else{var $sp_0_i_i=$805;label=178;break;}
 case 181: 
 var $807=($sp_0_i_i|0)==0;
 if($807){label=182;break;}else{label=189;break;}
 case 182: 
 var $808=_sbrk(0);
 var $809=($808|0)==-1;
 if($809){var $tsize_0323841_i=0;label=198;break;}else{label=183;break;}
 case 183: 
 var $811=$808;
 var $812=HEAP32[((141044)>>2)];
 var $813=((($812)-(1))|0);
 var $814=$813&$811;
 var $815=($814|0)==0;
 if($815){var $ssize_0_i=$775;label=185;break;}else{label=184;break;}
 case 184: 
 var $817=((($813)+($811))|0);
 var $818=(((-$812))|0);
 var $819=$817&$818;
 var $820=((($775)-($811))|0);
 var $821=((($820)+($819))|0);
 var $ssize_0_i=$821;label=185;break;
 case 185: 
 var $ssize_0_i;
 var $823=HEAP32[((141544)>>2)];
 var $824=((($823)+($ssize_0_i))|0);
 var $825=($ssize_0_i>>>0)>($nb_0>>>0);
 var $826=($ssize_0_i>>>0)<2147483647;
 var $or_cond_i31=$825&$826;
 if($or_cond_i31){label=186;break;}else{var $tsize_0323841_i=0;label=198;break;}
 case 186: 
 var $828=HEAP32[((141552)>>2)];
 var $829=($828|0)==0;
 if($829){label=188;break;}else{label=187;break;}
 case 187: 
 var $831=($824>>>0)<=($823>>>0);
 var $832=($824>>>0)>($828>>>0);
 var $or_cond2_i=$831|$832;
 if($or_cond2_i){var $tsize_0323841_i=0;label=198;break;}else{label=188;break;}
 case 188: 
 var $834=_sbrk($ssize_0_i);
 var $835=($834|0)==($808|0);
 var $ssize_0__i=($835?$ssize_0_i:0);
 var $__i=($835?$808:-1);
 var $tbase_0_i=$__i;var $tsize_0_i=$ssize_0__i;var $br_0_i=$834;var $ssize_1_i=$ssize_0_i;label=191;break;
 case 189: 
 var $837=HEAP32[((141124)>>2)];
 var $838=((($773)-($837))|0);
 var $839=$838&$774;
 var $840=($839>>>0)<2147483647;
 if($840){label=190;break;}else{var $tsize_0323841_i=0;label=198;break;}
 case 190: 
 var $842=_sbrk($839);
 var $843=HEAP32[(($795)>>2)];
 var $844=HEAP32[(($799)>>2)];
 var $845=(($843+$844)|0);
 var $846=($842|0)==($845|0);
 var $_3_i=($846?$839:0);
 var $_4_i=($846?$842:-1);
 var $tbase_0_i=$_4_i;var $tsize_0_i=$_3_i;var $br_0_i=$842;var $ssize_1_i=$839;label=191;break;
 case 191: 
 var $ssize_1_i;
 var $br_0_i;
 var $tsize_0_i;
 var $tbase_0_i;
 var $848=(((-$ssize_1_i))|0);
 var $849=($tbase_0_i|0)==-1;
 if($849){label=192;break;}else{var $tsize_246_i=$tsize_0_i;var $tbase_247_i=$tbase_0_i;label=202;break;}
 case 192: 
 var $851=($br_0_i|0)!=-1;
 var $852=($ssize_1_i>>>0)<2147483647;
 var $or_cond5_i=$851&$852;
 var $853=($ssize_1_i>>>0)<($770>>>0);
 var $or_cond6_i=$or_cond5_i&$853;
 if($or_cond6_i){label=193;break;}else{var $ssize_2_i=$ssize_1_i;label=197;break;}
 case 193: 
 var $855=HEAP32[((141048)>>2)];
 var $856=((($772)-($ssize_1_i))|0);
 var $857=((($856)+($855))|0);
 var $858=(((-$855))|0);
 var $859=$857&$858;
 var $860=($859>>>0)<2147483647;
 if($860){label=194;break;}else{var $ssize_2_i=$ssize_1_i;label=197;break;}
 case 194: 
 var $862=_sbrk($859);
 var $863=($862|0)==-1;
 if($863){label=196;break;}else{label=195;break;}
 case 195: 
 var $865=((($859)+($ssize_1_i))|0);
 var $ssize_2_i=$865;label=197;break;
 case 196: 
 var $867=_sbrk($848);
 var $tsize_0323841_i=$tsize_0_i;label=198;break;
 case 197: 
 var $ssize_2_i;
 var $869=($br_0_i|0)==-1;
 if($869){var $tsize_0323841_i=$tsize_0_i;label=198;break;}else{var $tsize_246_i=$ssize_2_i;var $tbase_247_i=$br_0_i;label=202;break;}
 case 198: 
 var $tsize_0323841_i;
 var $870=HEAP32[((141556)>>2)];
 var $871=$870|4;
 HEAP32[((141556)>>2)]=$871;
 var $tsize_1_i=$tsize_0323841_i;label=199;break;
 case 199: 
 var $tsize_1_i;
 var $873=($775>>>0)<2147483647;
 if($873){label=200;break;}else{label=343;break;}
 case 200: 
 var $875=_sbrk($775);
 var $876=_sbrk(0);
 var $notlhs_i=($875|0)!=-1;
 var $notrhs_i=($876|0)!=-1;
 var $or_cond8_not_i=$notrhs_i&$notlhs_i;
 var $877=($875>>>0)<($876>>>0);
 var $or_cond9_i=$or_cond8_not_i&$877;
 if($or_cond9_i){label=201;break;}else{label=343;break;}
 case 201: 
 var $878=$876;
 var $879=$875;
 var $880=((($878)-($879))|0);
 var $881=((($nb_0)+(40))|0);
 var $882=($880>>>0)>($881>>>0);
 var $_tsize_1_i=($882?$880:$tsize_1_i);
 if($882){var $tsize_246_i=$_tsize_1_i;var $tbase_247_i=$875;label=202;break;}else{label=343;break;}
 case 202: 
 var $tbase_247_i;
 var $tsize_246_i;
 var $883=HEAP32[((141544)>>2)];
 var $884=((($883)+($tsize_246_i))|0);
 HEAP32[((141544)>>2)]=$884;
 var $885=HEAP32[((141548)>>2)];
 var $886=($884>>>0)>($885>>>0);
 if($886){label=203;break;}else{label=204;break;}
 case 203: 
 HEAP32[((141548)>>2)]=$884;
 label=204;break;
 case 204: 
 var $888=HEAP32[((141136)>>2)];
 var $889=($888|0)==0;
 if($889){label=205;break;}else{var $sp_075_i=141560;label=212;break;}
 case 205: 
 var $891=HEAP32[((141128)>>2)];
 var $892=($891|0)==0;
 var $893=($tbase_247_i>>>0)<($891>>>0);
 var $or_cond10_i=$892|$893;
 if($or_cond10_i){label=206;break;}else{label=207;break;}
 case 206: 
 HEAP32[((141128)>>2)]=$tbase_247_i;
 label=207;break;
 case 207: 
 HEAP32[((141560)>>2)]=$tbase_247_i;
 HEAP32[((141564)>>2)]=$tsize_246_i;
 HEAP32[((141572)>>2)]=0;
 var $895=HEAP32[((141040)>>2)];
 HEAP32[((141148)>>2)]=$895;
 HEAP32[((141144)>>2)]=-1;
 var $i_02_i_i=0;label=208;break;
 case 208: 
 var $i_02_i_i;
 var $897=$i_02_i_i<<1;
 var $898=((141152+($897<<2))|0);
 var $899=$898;
 var $_sum_i_i=((($897)+(3))|0);
 var $900=((141152+($_sum_i_i<<2))|0);
 HEAP32[(($900)>>2)]=$899;
 var $_sum1_i_i=((($897)+(2))|0);
 var $901=((141152+($_sum1_i_i<<2))|0);
 HEAP32[(($901)>>2)]=$899;
 var $902=((($i_02_i_i)+(1))|0);
 var $903=($902>>>0)<32;
 if($903){var $i_02_i_i=$902;label=208;break;}else{label=209;break;}
 case 209: 
 var $904=((($tsize_246_i)-(40))|0);
 var $905=(($tbase_247_i+8)|0);
 var $906=$905;
 var $907=$906&7;
 var $908=($907|0)==0;
 if($908){var $912=0;label=211;break;}else{label=210;break;}
 case 210: 
 var $910=(((-$906))|0);
 var $911=$910&7;
 var $912=$911;label=211;break;
 case 211: 
 var $912;
 var $913=(($tbase_247_i+$912)|0);
 var $914=$913;
 var $915=((($904)-($912))|0);
 HEAP32[((141136)>>2)]=$914;
 HEAP32[((141124)>>2)]=$915;
 var $916=$915|1;
 var $_sum_i14_i=((($912)+(4))|0);
 var $917=(($tbase_247_i+$_sum_i14_i)|0);
 var $918=$917;
 HEAP32[(($918)>>2)]=$916;
 var $_sum2_i_i=((($tsize_246_i)-(36))|0);
 var $919=(($tbase_247_i+$_sum2_i_i)|0);
 var $920=$919;
 HEAP32[(($920)>>2)]=40;
 var $921=HEAP32[((141056)>>2)];
 HEAP32[((141140)>>2)]=$921;
 label=341;break;
 case 212: 
 var $sp_075_i;
 var $922=(($sp_075_i)|0);
 var $923=HEAP32[(($922)>>2)];
 var $924=(($sp_075_i+4)|0);
 var $925=HEAP32[(($924)>>2)];
 var $926=(($923+$925)|0);
 var $927=($tbase_247_i|0)==($926|0);
 if($927){label=214;break;}else{label=213;break;}
 case 213: 
 var $929=(($sp_075_i+8)|0);
 var $930=HEAP32[(($929)>>2)];
 var $931=($930|0)==0;
 if($931){label=219;break;}else{var $sp_075_i=$930;label=212;break;}
 case 214: 
 var $932=(($sp_075_i+12)|0);
 var $933=HEAP32[(($932)>>2)];
 var $934=$933&8;
 var $935=($934|0)==0;
 if($935){label=215;break;}else{label=219;break;}
 case 215: 
 var $937=$888;
 var $938=($937>>>0)>=($923>>>0);
 var $939=($937>>>0)<($tbase_247_i>>>0);
 var $or_cond49_i=$938&$939;
 if($or_cond49_i){label=216;break;}else{label=219;break;}
 case 216: 
 var $941=((($925)+($tsize_246_i))|0);
 HEAP32[(($924)>>2)]=$941;
 var $942=HEAP32[((141124)>>2)];
 var $943=((($942)+($tsize_246_i))|0);
 var $944=(($888+8)|0);
 var $945=$944;
 var $946=$945&7;
 var $947=($946|0)==0;
 if($947){var $951=0;label=218;break;}else{label=217;break;}
 case 217: 
 var $949=(((-$945))|0);
 var $950=$949&7;
 var $951=$950;label=218;break;
 case 218: 
 var $951;
 var $952=(($937+$951)|0);
 var $953=$952;
 var $954=((($943)-($951))|0);
 HEAP32[((141136)>>2)]=$953;
 HEAP32[((141124)>>2)]=$954;
 var $955=$954|1;
 var $_sum_i18_i=((($951)+(4))|0);
 var $956=(($937+$_sum_i18_i)|0);
 var $957=$956;
 HEAP32[(($957)>>2)]=$955;
 var $_sum2_i19_i=((($943)+(4))|0);
 var $958=(($937+$_sum2_i19_i)|0);
 var $959=$958;
 HEAP32[(($959)>>2)]=40;
 var $960=HEAP32[((141056)>>2)];
 HEAP32[((141140)>>2)]=$960;
 label=341;break;
 case 219: 
 var $961=HEAP32[((141128)>>2)];
 var $962=($tbase_247_i>>>0)<($961>>>0);
 if($962){label=220;break;}else{label=221;break;}
 case 220: 
 HEAP32[((141128)>>2)]=$tbase_247_i;
 label=221;break;
 case 221: 
 var $964=(($tbase_247_i+$tsize_246_i)|0);
 var $sp_168_i=141560;label=222;break;
 case 222: 
 var $sp_168_i;
 var $966=(($sp_168_i)|0);
 var $967=HEAP32[(($966)>>2)];
 var $968=($967|0)==($964|0);
 if($968){label=224;break;}else{label=223;break;}
 case 223: 
 var $970=(($sp_168_i+8)|0);
 var $971=HEAP32[(($970)>>2)];
 var $972=($971|0)==0;
 if($972){label=306;break;}else{var $sp_168_i=$971;label=222;break;}
 case 224: 
 var $973=(($sp_168_i+12)|0);
 var $974=HEAP32[(($973)>>2)];
 var $975=$974&8;
 var $976=($975|0)==0;
 if($976){label=225;break;}else{label=306;break;}
 case 225: 
 HEAP32[(($966)>>2)]=$tbase_247_i;
 var $978=(($sp_168_i+4)|0);
 var $979=HEAP32[(($978)>>2)];
 var $980=((($979)+($tsize_246_i))|0);
 HEAP32[(($978)>>2)]=$980;
 var $981=(($tbase_247_i+8)|0);
 var $982=$981;
 var $983=$982&7;
 var $984=($983|0)==0;
 if($984){var $989=0;label=227;break;}else{label=226;break;}
 case 226: 
 var $986=(((-$982))|0);
 var $987=$986&7;
 var $989=$987;label=227;break;
 case 227: 
 var $989;
 var $990=(($tbase_247_i+$989)|0);
 var $_sum107_i=((($tsize_246_i)+(8))|0);
 var $991=(($tbase_247_i+$_sum107_i)|0);
 var $992=$991;
 var $993=$992&7;
 var $994=($993|0)==0;
 if($994){var $999=0;label=229;break;}else{label=228;break;}
 case 228: 
 var $996=(((-$992))|0);
 var $997=$996&7;
 var $999=$997;label=229;break;
 case 229: 
 var $999;
 var $_sum108_i=((($999)+($tsize_246_i))|0);
 var $1000=(($tbase_247_i+$_sum108_i)|0);
 var $1001=$1000;
 var $1002=$1000;
 var $1003=$990;
 var $1004=((($1002)-($1003))|0);
 var $_sum_i21_i=((($989)+($nb_0))|0);
 var $1005=(($tbase_247_i+$_sum_i21_i)|0);
 var $1006=$1005;
 var $1007=((($1004)-($nb_0))|0);
 var $1008=$nb_0|3;
 var $_sum1_i22_i=((($989)+(4))|0);
 var $1009=(($tbase_247_i+$_sum1_i22_i)|0);
 var $1010=$1009;
 HEAP32[(($1010)>>2)]=$1008;
 var $1011=HEAP32[((141136)>>2)];
 var $1012=($1001|0)==($1011|0);
 if($1012){label=230;break;}else{label=231;break;}
 case 230: 
 var $1014=HEAP32[((141124)>>2)];
 var $1015=((($1014)+($1007))|0);
 HEAP32[((141124)>>2)]=$1015;
 HEAP32[((141136)>>2)]=$1006;
 var $1016=$1015|1;
 var $_sum46_i_i=((($_sum_i21_i)+(4))|0);
 var $1017=(($tbase_247_i+$_sum46_i_i)|0);
 var $1018=$1017;
 HEAP32[(($1018)>>2)]=$1016;
 label=305;break;
 case 231: 
 var $1020=HEAP32[((141132)>>2)];
 var $1021=($1001|0)==($1020|0);
 if($1021){label=232;break;}else{label=233;break;}
 case 232: 
 var $1023=HEAP32[((141120)>>2)];
 var $1024=((($1023)+($1007))|0);
 HEAP32[((141120)>>2)]=$1024;
 HEAP32[((141132)>>2)]=$1006;
 var $1025=$1024|1;
 var $_sum44_i_i=((($_sum_i21_i)+(4))|0);
 var $1026=(($tbase_247_i+$_sum44_i_i)|0);
 var $1027=$1026;
 HEAP32[(($1027)>>2)]=$1025;
 var $_sum45_i_i=((($1024)+($_sum_i21_i))|0);
 var $1028=(($tbase_247_i+$_sum45_i_i)|0);
 var $1029=$1028;
 HEAP32[(($1029)>>2)]=$1024;
 label=305;break;
 case 233: 
 var $_sum2_i23_i=((($tsize_246_i)+(4))|0);
 var $_sum109_i=((($_sum2_i23_i)+($999))|0);
 var $1031=(($tbase_247_i+$_sum109_i)|0);
 var $1032=$1031;
 var $1033=HEAP32[(($1032)>>2)];
 var $1034=$1033&3;
 var $1035=($1034|0)==1;
 if($1035){label=234;break;}else{var $oldfirst_0_i_i=$1001;var $qsize_0_i_i=$1007;label=281;break;}
 case 234: 
 var $1037=$1033&-8;
 var $1038=$1033>>>3;
 var $1039=($1033>>>0)<256;
 if($1039){label=235;break;}else{label=247;break;}
 case 235: 
 var $_sum3940_i_i=$999|8;
 var $_sum119_i=((($_sum3940_i_i)+($tsize_246_i))|0);
 var $1041=(($tbase_247_i+$_sum119_i)|0);
 var $1042=$1041;
 var $1043=HEAP32[(($1042)>>2)];
 var $_sum41_i_i=((($tsize_246_i)+(12))|0);
 var $_sum120_i=((($_sum41_i_i)+($999))|0);
 var $1044=(($tbase_247_i+$_sum120_i)|0);
 var $1045=$1044;
 var $1046=HEAP32[(($1045)>>2)];
 var $1047=$1038<<1;
 var $1048=((141152+($1047<<2))|0);
 var $1049=$1048;
 var $1050=($1043|0)==($1049|0);
 if($1050){label=238;break;}else{label=236;break;}
 case 236: 
 var $1052=$1043;
 var $1053=HEAP32[((141128)>>2)];
 var $1054=($1052>>>0)<($1053>>>0);
 if($1054){label=246;break;}else{label=237;break;}
 case 237: 
 var $1056=(($1043+12)|0);
 var $1057=HEAP32[(($1056)>>2)];
 var $1058=($1057|0)==($1001|0);
 if($1058){label=238;break;}else{label=246;break;}
 case 238: 
 var $1059=($1046|0)==($1043|0);
 if($1059){label=239;break;}else{label=240;break;}
 case 239: 
 var $1061=1<<$1038;
 var $1062=$1061^-1;
 var $1063=HEAP32[((141112)>>2)];
 var $1064=$1063&$1062;
 HEAP32[((141112)>>2)]=$1064;
 label=280;break;
 case 240: 
 var $1066=($1046|0)==($1049|0);
 if($1066){label=241;break;}else{label=242;break;}
 case 241: 
 var $_pre61_i_i=(($1046+8)|0);
 var $_pre_phi62_i_i=$_pre61_i_i;label=244;break;
 case 242: 
 var $1068=$1046;
 var $1069=HEAP32[((141128)>>2)];
 var $1070=($1068>>>0)<($1069>>>0);
 if($1070){label=245;break;}else{label=243;break;}
 case 243: 
 var $1072=(($1046+8)|0);
 var $1073=HEAP32[(($1072)>>2)];
 var $1074=($1073|0)==($1001|0);
 if($1074){var $_pre_phi62_i_i=$1072;label=244;break;}else{label=245;break;}
 case 244: 
 var $_pre_phi62_i_i;
 var $1075=(($1043+12)|0);
 HEAP32[(($1075)>>2)]=$1046;
 HEAP32[(($_pre_phi62_i_i)>>2)]=$1043;
 label=280;break;
 case 245: 
 _abort();
 throw "Reached an unreachable!";
 case 246: 
 _abort();
 throw "Reached an unreachable!";
 case 247: 
 var $1077=$1000;
 var $_sum34_i_i=$999|24;
 var $_sum110_i=((($_sum34_i_i)+($tsize_246_i))|0);
 var $1078=(($tbase_247_i+$_sum110_i)|0);
 var $1079=$1078;
 var $1080=HEAP32[(($1079)>>2)];
 var $_sum5_i_i=((($tsize_246_i)+(12))|0);
 var $_sum111_i=((($_sum5_i_i)+($999))|0);
 var $1081=(($tbase_247_i+$_sum111_i)|0);
 var $1082=$1081;
 var $1083=HEAP32[(($1082)>>2)];
 var $1084=($1083|0)==($1077|0);
 if($1084){label=253;break;}else{label=248;break;}
 case 248: 
 var $_sum3637_i_i=$999|8;
 var $_sum112_i=((($_sum3637_i_i)+($tsize_246_i))|0);
 var $1086=(($tbase_247_i+$_sum112_i)|0);
 var $1087=$1086;
 var $1088=HEAP32[(($1087)>>2)];
 var $1089=$1088;
 var $1090=HEAP32[((141128)>>2)];
 var $1091=($1089>>>0)<($1090>>>0);
 if($1091){label=252;break;}else{label=249;break;}
 case 249: 
 var $1093=(($1088+12)|0);
 var $1094=HEAP32[(($1093)>>2)];
 var $1095=($1094|0)==($1077|0);
 if($1095){label=250;break;}else{label=252;break;}
 case 250: 
 var $1097=(($1083+8)|0);
 var $1098=HEAP32[(($1097)>>2)];
 var $1099=($1098|0)==($1077|0);
 if($1099){label=251;break;}else{label=252;break;}
 case 251: 
 HEAP32[(($1093)>>2)]=$1083;
 HEAP32[(($1097)>>2)]=$1088;
 var $R_1_i_i=$1083;label=260;break;
 case 252: 
 _abort();
 throw "Reached an unreachable!";
 case 253: 
 var $_sum67_i_i=$999|16;
 var $_sum117_i=((($_sum2_i23_i)+($_sum67_i_i))|0);
 var $1102=(($tbase_247_i+$_sum117_i)|0);
 var $1103=$1102;
 var $1104=HEAP32[(($1103)>>2)];
 var $1105=($1104|0)==0;
 if($1105){label=254;break;}else{var $R_0_i_i=$1104;var $RP_0_i_i=$1103;label=255;break;}
 case 254: 
 var $_sum118_i=((($_sum67_i_i)+($tsize_246_i))|0);
 var $1107=(($tbase_247_i+$_sum118_i)|0);
 var $1108=$1107;
 var $1109=HEAP32[(($1108)>>2)];
 var $1110=($1109|0)==0;
 if($1110){var $R_1_i_i=0;label=260;break;}else{var $R_0_i_i=$1109;var $RP_0_i_i=$1108;label=255;break;}
 case 255: 
 var $RP_0_i_i;
 var $R_0_i_i;
 var $1111=(($R_0_i_i+20)|0);
 var $1112=HEAP32[(($1111)>>2)];
 var $1113=($1112|0)==0;
 if($1113){label=256;break;}else{var $R_0_i_i=$1112;var $RP_0_i_i=$1111;label=255;break;}
 case 256: 
 var $1115=(($R_0_i_i+16)|0);
 var $1116=HEAP32[(($1115)>>2)];
 var $1117=($1116|0)==0;
 if($1117){label=257;break;}else{var $R_0_i_i=$1116;var $RP_0_i_i=$1115;label=255;break;}
 case 257: 
 var $1119=$RP_0_i_i;
 var $1120=HEAP32[((141128)>>2)];
 var $1121=($1119>>>0)<($1120>>>0);
 if($1121){label=259;break;}else{label=258;break;}
 case 258: 
 HEAP32[(($RP_0_i_i)>>2)]=0;
 var $R_1_i_i=$R_0_i_i;label=260;break;
 case 259: 
 _abort();
 throw "Reached an unreachable!";
 case 260: 
 var $R_1_i_i;
 var $1125=($1080|0)==0;
 if($1125){label=280;break;}else{label=261;break;}
 case 261: 
 var $_sum31_i_i=((($tsize_246_i)+(28))|0);
 var $_sum113_i=((($_sum31_i_i)+($999))|0);
 var $1127=(($tbase_247_i+$_sum113_i)|0);
 var $1128=$1127;
 var $1129=HEAP32[(($1128)>>2)];
 var $1130=((141416+($1129<<2))|0);
 var $1131=HEAP32[(($1130)>>2)];
 var $1132=($1077|0)==($1131|0);
 if($1132){label=262;break;}else{label=264;break;}
 case 262: 
 HEAP32[(($1130)>>2)]=$R_1_i_i;
 var $cond_i_i=($R_1_i_i|0)==0;
 if($cond_i_i){label=263;break;}else{label=270;break;}
 case 263: 
 var $1134=1<<$1129;
 var $1135=$1134^-1;
 var $1136=HEAP32[((141116)>>2)];
 var $1137=$1136&$1135;
 HEAP32[((141116)>>2)]=$1137;
 label=280;break;
 case 264: 
 var $1139=$1080;
 var $1140=HEAP32[((141128)>>2)];
 var $1141=($1139>>>0)<($1140>>>0);
 if($1141){label=268;break;}else{label=265;break;}
 case 265: 
 var $1143=(($1080+16)|0);
 var $1144=HEAP32[(($1143)>>2)];
 var $1145=($1144|0)==($1077|0);
 if($1145){label=266;break;}else{label=267;break;}
 case 266: 
 HEAP32[(($1143)>>2)]=$R_1_i_i;
 label=269;break;
 case 267: 
 var $1148=(($1080+20)|0);
 HEAP32[(($1148)>>2)]=$R_1_i_i;
 label=269;break;
 case 268: 
 _abort();
 throw "Reached an unreachable!";
 case 269: 
 var $1151=($R_1_i_i|0)==0;
 if($1151){label=280;break;}else{label=270;break;}
 case 270: 
 var $1153=$R_1_i_i;
 var $1154=HEAP32[((141128)>>2)];
 var $1155=($1153>>>0)<($1154>>>0);
 if($1155){label=279;break;}else{label=271;break;}
 case 271: 
 var $1157=(($R_1_i_i+24)|0);
 HEAP32[(($1157)>>2)]=$1080;
 var $_sum3233_i_i=$999|16;
 var $_sum114_i=((($_sum3233_i_i)+($tsize_246_i))|0);
 var $1158=(($tbase_247_i+$_sum114_i)|0);
 var $1159=$1158;
 var $1160=HEAP32[(($1159)>>2)];
 var $1161=($1160|0)==0;
 if($1161){label=275;break;}else{label=272;break;}
 case 272: 
 var $1163=$1160;
 var $1164=HEAP32[((141128)>>2)];
 var $1165=($1163>>>0)<($1164>>>0);
 if($1165){label=274;break;}else{label=273;break;}
 case 273: 
 var $1167=(($R_1_i_i+16)|0);
 HEAP32[(($1167)>>2)]=$1160;
 var $1168=(($1160+24)|0);
 HEAP32[(($1168)>>2)]=$R_1_i_i;
 label=275;break;
 case 274: 
 _abort();
 throw "Reached an unreachable!";
 case 275: 
 var $_sum115_i=((($_sum2_i23_i)+($_sum3233_i_i))|0);
 var $1171=(($tbase_247_i+$_sum115_i)|0);
 var $1172=$1171;
 var $1173=HEAP32[(($1172)>>2)];
 var $1174=($1173|0)==0;
 if($1174){label=280;break;}else{label=276;break;}
 case 276: 
 var $1176=$1173;
 var $1177=HEAP32[((141128)>>2)];
 var $1178=($1176>>>0)<($1177>>>0);
 if($1178){label=278;break;}else{label=277;break;}
 case 277: 
 var $1180=(($R_1_i_i+20)|0);
 HEAP32[(($1180)>>2)]=$1173;
 var $1181=(($1173+24)|0);
 HEAP32[(($1181)>>2)]=$R_1_i_i;
 label=280;break;
 case 278: 
 _abort();
 throw "Reached an unreachable!";
 case 279: 
 _abort();
 throw "Reached an unreachable!";
 case 280: 
 var $_sum9_i_i=$1037|$999;
 var $_sum116_i=((($_sum9_i_i)+($tsize_246_i))|0);
 var $1185=(($tbase_247_i+$_sum116_i)|0);
 var $1186=$1185;
 var $1187=((($1037)+($1007))|0);
 var $oldfirst_0_i_i=$1186;var $qsize_0_i_i=$1187;label=281;break;
 case 281: 
 var $qsize_0_i_i;
 var $oldfirst_0_i_i;
 var $1189=(($oldfirst_0_i_i+4)|0);
 var $1190=HEAP32[(($1189)>>2)];
 var $1191=$1190&-2;
 HEAP32[(($1189)>>2)]=$1191;
 var $1192=$qsize_0_i_i|1;
 var $_sum10_i_i=((($_sum_i21_i)+(4))|0);
 var $1193=(($tbase_247_i+$_sum10_i_i)|0);
 var $1194=$1193;
 HEAP32[(($1194)>>2)]=$1192;
 var $_sum11_i_i=((($qsize_0_i_i)+($_sum_i21_i))|0);
 var $1195=(($tbase_247_i+$_sum11_i_i)|0);
 var $1196=$1195;
 HEAP32[(($1196)>>2)]=$qsize_0_i_i;
 var $1197=$qsize_0_i_i>>>3;
 var $1198=($qsize_0_i_i>>>0)<256;
 if($1198){label=282;break;}else{label=287;break;}
 case 282: 
 var $1200=$1197<<1;
 var $1201=((141152+($1200<<2))|0);
 var $1202=$1201;
 var $1203=HEAP32[((141112)>>2)];
 var $1204=1<<$1197;
 var $1205=$1203&$1204;
 var $1206=($1205|0)==0;
 if($1206){label=283;break;}else{label=284;break;}
 case 283: 
 var $1208=$1203|$1204;
 HEAP32[((141112)>>2)]=$1208;
 var $_sum27_pre_i_i=((($1200)+(2))|0);
 var $_pre_i24_i=((141152+($_sum27_pre_i_i<<2))|0);
 var $F4_0_i_i=$1202;var $_pre_phi_i25_i=$_pre_i24_i;label=286;break;
 case 284: 
 var $_sum30_i_i=((($1200)+(2))|0);
 var $1210=((141152+($_sum30_i_i<<2))|0);
 var $1211=HEAP32[(($1210)>>2)];
 var $1212=$1211;
 var $1213=HEAP32[((141128)>>2)];
 var $1214=($1212>>>0)<($1213>>>0);
 if($1214){label=285;break;}else{var $F4_0_i_i=$1211;var $_pre_phi_i25_i=$1210;label=286;break;}
 case 285: 
 _abort();
 throw "Reached an unreachable!";
 case 286: 
 var $_pre_phi_i25_i;
 var $F4_0_i_i;
 HEAP32[(($_pre_phi_i25_i)>>2)]=$1006;
 var $1217=(($F4_0_i_i+12)|0);
 HEAP32[(($1217)>>2)]=$1006;
 var $_sum28_i_i=((($_sum_i21_i)+(8))|0);
 var $1218=(($tbase_247_i+$_sum28_i_i)|0);
 var $1219=$1218;
 HEAP32[(($1219)>>2)]=$F4_0_i_i;
 var $_sum29_i_i=((($_sum_i21_i)+(12))|0);
 var $1220=(($tbase_247_i+$_sum29_i_i)|0);
 var $1221=$1220;
 HEAP32[(($1221)>>2)]=$1202;
 label=305;break;
 case 287: 
 var $1223=$1005;
 var $1224=$qsize_0_i_i>>>8;
 var $1225=($1224|0)==0;
 if($1225){var $I7_0_i_i=0;label=290;break;}else{label=288;break;}
 case 288: 
 var $1227=($qsize_0_i_i>>>0)>16777215;
 if($1227){var $I7_0_i_i=31;label=290;break;}else{label=289;break;}
 case 289: 
 var $1229=((($1224)+(1048320))|0);
 var $1230=$1229>>>16;
 var $1231=$1230&8;
 var $1232=$1224<<$1231;
 var $1233=((($1232)+(520192))|0);
 var $1234=$1233>>>16;
 var $1235=$1234&4;
 var $1236=$1235|$1231;
 var $1237=$1232<<$1235;
 var $1238=((($1237)+(245760))|0);
 var $1239=$1238>>>16;
 var $1240=$1239&2;
 var $1241=$1236|$1240;
 var $1242=(((14)-($1241))|0);
 var $1243=$1237<<$1240;
 var $1244=$1243>>>15;
 var $1245=((($1242)+($1244))|0);
 var $1246=$1245<<1;
 var $1247=((($1245)+(7))|0);
 var $1248=$qsize_0_i_i>>>($1247>>>0);
 var $1249=$1248&1;
 var $1250=$1249|$1246;
 var $I7_0_i_i=$1250;label=290;break;
 case 290: 
 var $I7_0_i_i;
 var $1252=((141416+($I7_0_i_i<<2))|0);
 var $_sum12_i26_i=((($_sum_i21_i)+(28))|0);
 var $1253=(($tbase_247_i+$_sum12_i26_i)|0);
 var $1254=$1253;
 HEAP32[(($1254)>>2)]=$I7_0_i_i;
 var $_sum13_i_i=((($_sum_i21_i)+(16))|0);
 var $1255=(($tbase_247_i+$_sum13_i_i)|0);
 var $_sum14_i_i=((($_sum_i21_i)+(20))|0);
 var $1256=(($tbase_247_i+$_sum14_i_i)|0);
 var $1257=$1256;
 HEAP32[(($1257)>>2)]=0;
 var $1258=$1255;
 HEAP32[(($1258)>>2)]=0;
 var $1259=HEAP32[((141116)>>2)];
 var $1260=1<<$I7_0_i_i;
 var $1261=$1259&$1260;
 var $1262=($1261|0)==0;
 if($1262){label=291;break;}else{label=292;break;}
 case 291: 
 var $1264=$1259|$1260;
 HEAP32[((141116)>>2)]=$1264;
 HEAP32[(($1252)>>2)]=$1223;
 var $1265=$1252;
 var $_sum15_i_i=((($_sum_i21_i)+(24))|0);
 var $1266=(($tbase_247_i+$_sum15_i_i)|0);
 var $1267=$1266;
 HEAP32[(($1267)>>2)]=$1265;
 var $_sum16_i_i=((($_sum_i21_i)+(12))|0);
 var $1268=(($tbase_247_i+$_sum16_i_i)|0);
 var $1269=$1268;
 HEAP32[(($1269)>>2)]=$1223;
 var $_sum17_i_i=((($_sum_i21_i)+(8))|0);
 var $1270=(($tbase_247_i+$_sum17_i_i)|0);
 var $1271=$1270;
 HEAP32[(($1271)>>2)]=$1223;
 label=305;break;
 case 292: 
 var $1273=HEAP32[(($1252)>>2)];
 var $1274=($I7_0_i_i|0)==31;
 if($1274){var $1279=0;label=294;break;}else{label=293;break;}
 case 293: 
 var $1276=$I7_0_i_i>>>1;
 var $1277=(((25)-($1276))|0);
 var $1279=$1277;label=294;break;
 case 294: 
 var $1279;
 var $1280=(($1273+4)|0);
 var $1281=HEAP32[(($1280)>>2)];
 var $1282=$1281&-8;
 var $1283=($1282|0)==($qsize_0_i_i|0);
 if($1283){var $T_0_lcssa_i28_i=$1273;label=301;break;}else{label=295;break;}
 case 295: 
 var $1284=$qsize_0_i_i<<$1279;
 var $T_055_i_i=$1273;var $K8_056_i_i=$1284;label=297;break;
 case 296: 
 var $1286=$K8_056_i_i<<1;
 var $1287=(($1294+4)|0);
 var $1288=HEAP32[(($1287)>>2)];
 var $1289=$1288&-8;
 var $1290=($1289|0)==($qsize_0_i_i|0);
 if($1290){var $T_0_lcssa_i28_i=$1294;label=301;break;}else{var $T_055_i_i=$1294;var $K8_056_i_i=$1286;label=297;break;}
 case 297: 
 var $K8_056_i_i;
 var $T_055_i_i;
 var $1292=$K8_056_i_i>>>31;
 var $1293=(($T_055_i_i+16+($1292<<2))|0);
 var $1294=HEAP32[(($1293)>>2)];
 var $1295=($1294|0)==0;
 if($1295){label=298;break;}else{label=296;break;}
 case 298: 
 var $1297=$1293;
 var $1298=HEAP32[((141128)>>2)];
 var $1299=($1297>>>0)<($1298>>>0);
 if($1299){label=300;break;}else{label=299;break;}
 case 299: 
 HEAP32[(($1293)>>2)]=$1223;
 var $_sum24_i_i=((($_sum_i21_i)+(24))|0);
 var $1301=(($tbase_247_i+$_sum24_i_i)|0);
 var $1302=$1301;
 HEAP32[(($1302)>>2)]=$T_055_i_i;
 var $_sum25_i_i=((($_sum_i21_i)+(12))|0);
 var $1303=(($tbase_247_i+$_sum25_i_i)|0);
 var $1304=$1303;
 HEAP32[(($1304)>>2)]=$1223;
 var $_sum26_i_i=((($_sum_i21_i)+(8))|0);
 var $1305=(($tbase_247_i+$_sum26_i_i)|0);
 var $1306=$1305;
 HEAP32[(($1306)>>2)]=$1223;
 label=305;break;
 case 300: 
 _abort();
 throw "Reached an unreachable!";
 case 301: 
 var $T_0_lcssa_i28_i;
 var $1308=(($T_0_lcssa_i28_i+8)|0);
 var $1309=HEAP32[(($1308)>>2)];
 var $1310=$T_0_lcssa_i28_i;
 var $1311=HEAP32[((141128)>>2)];
 var $1312=($1310>>>0)<($1311>>>0);
 if($1312){label=304;break;}else{label=302;break;}
 case 302: 
 var $1314=$1309;
 var $1315=($1314>>>0)<($1311>>>0);
 if($1315){label=304;break;}else{label=303;break;}
 case 303: 
 var $1317=(($1309+12)|0);
 HEAP32[(($1317)>>2)]=$1223;
 HEAP32[(($1308)>>2)]=$1223;
 var $_sum21_i_i=((($_sum_i21_i)+(8))|0);
 var $1318=(($tbase_247_i+$_sum21_i_i)|0);
 var $1319=$1318;
 HEAP32[(($1319)>>2)]=$1309;
 var $_sum22_i_i=((($_sum_i21_i)+(12))|0);
 var $1320=(($tbase_247_i+$_sum22_i_i)|0);
 var $1321=$1320;
 HEAP32[(($1321)>>2)]=$T_0_lcssa_i28_i;
 var $_sum23_i_i=((($_sum_i21_i)+(24))|0);
 var $1322=(($tbase_247_i+$_sum23_i_i)|0);
 var $1323=$1322;
 HEAP32[(($1323)>>2)]=0;
 label=305;break;
 case 304: 
 _abort();
 throw "Reached an unreachable!";
 case 305: 
 var $_sum1819_i_i=$989|8;
 var $1324=(($tbase_247_i+$_sum1819_i_i)|0);
 var $mem_0=$1324;label=344;break;
 case 306: 
 var $1325=$888;
 var $sp_0_i_i_i=141560;label=307;break;
 case 307: 
 var $sp_0_i_i_i;
 var $1327=(($sp_0_i_i_i)|0);
 var $1328=HEAP32[(($1327)>>2)];
 var $1329=($1328>>>0)>($1325>>>0);
 if($1329){label=309;break;}else{label=308;break;}
 case 308: 
 var $1331=(($sp_0_i_i_i+4)|0);
 var $1332=HEAP32[(($1331)>>2)];
 var $1333=(($1328+$1332)|0);
 var $1334=($1333>>>0)>($1325>>>0);
 if($1334){label=310;break;}else{label=309;break;}
 case 309: 
 var $1336=(($sp_0_i_i_i+8)|0);
 var $1337=HEAP32[(($1336)>>2)];
 var $sp_0_i_i_i=$1337;label=307;break;
 case 310: 
 var $_sum_i15_i=((($1332)-(47))|0);
 var $_sum1_i16_i=((($1332)-(39))|0);
 var $1338=(($1328+$_sum1_i16_i)|0);
 var $1339=$1338;
 var $1340=$1339&7;
 var $1341=($1340|0)==0;
 if($1341){var $1346=0;label=312;break;}else{label=311;break;}
 case 311: 
 var $1343=(((-$1339))|0);
 var $1344=$1343&7;
 var $1346=$1344;label=312;break;
 case 312: 
 var $1346;
 var $_sum2_i17_i=((($_sum_i15_i)+($1346))|0);
 var $1347=(($1328+$_sum2_i17_i)|0);
 var $1348=(($888+16)|0);
 var $1349=$1348;
 var $1350=($1347>>>0)<($1349>>>0);
 var $1351=($1350?$1325:$1347);
 var $1352=(($1351+8)|0);
 var $1353=$1352;
 var $1354=((($tsize_246_i)-(40))|0);
 var $1355=(($tbase_247_i+8)|0);
 var $1356=$1355;
 var $1357=$1356&7;
 var $1358=($1357|0)==0;
 if($1358){var $1362=0;label=314;break;}else{label=313;break;}
 case 313: 
 var $1360=(((-$1356))|0);
 var $1361=$1360&7;
 var $1362=$1361;label=314;break;
 case 314: 
 var $1362;
 var $1363=(($tbase_247_i+$1362)|0);
 var $1364=$1363;
 var $1365=((($1354)-($1362))|0);
 HEAP32[((141136)>>2)]=$1364;
 HEAP32[((141124)>>2)]=$1365;
 var $1366=$1365|1;
 var $_sum_i_i_i=((($1362)+(4))|0);
 var $1367=(($tbase_247_i+$_sum_i_i_i)|0);
 var $1368=$1367;
 HEAP32[(($1368)>>2)]=$1366;
 var $_sum2_i_i_i=((($tsize_246_i)-(36))|0);
 var $1369=(($tbase_247_i+$_sum2_i_i_i)|0);
 var $1370=$1369;
 HEAP32[(($1370)>>2)]=40;
 var $1371=HEAP32[((141056)>>2)];
 HEAP32[((141140)>>2)]=$1371;
 var $1372=(($1351+4)|0);
 var $1373=$1372;
 HEAP32[(($1373)>>2)]=27;
 assert(16 % 1 === 0);HEAP32[(($1352)>>2)]=HEAP32[((141560)>>2)];HEAP32[((($1352)+(4))>>2)]=HEAP32[((141564)>>2)];HEAP32[((($1352)+(8))>>2)]=HEAP32[((141568)>>2)];HEAP32[((($1352)+(12))>>2)]=HEAP32[((141572)>>2)];
 HEAP32[((141560)>>2)]=$tbase_247_i;
 HEAP32[((141564)>>2)]=$tsize_246_i;
 HEAP32[((141572)>>2)]=0;
 HEAP32[((141568)>>2)]=$1353;
 var $1374=(($1351+28)|0);
 var $1375=$1374;
 HEAP32[(($1375)>>2)]=7;
 var $1376=(($1351+32)|0);
 var $1377=($1376>>>0)<($1333>>>0);
 if($1377){var $1378=$1375;label=315;break;}else{label=316;break;}
 case 315: 
 var $1378;
 var $1379=(($1378+4)|0);
 HEAP32[(($1379)>>2)]=7;
 var $1380=(($1378+8)|0);
 var $1381=$1380;
 var $1382=($1381>>>0)<($1333>>>0);
 if($1382){var $1378=$1379;label=315;break;}else{label=316;break;}
 case 316: 
 var $1383=($1351|0)==($1325|0);
 if($1383){label=341;break;}else{label=317;break;}
 case 317: 
 var $1385=$1351;
 var $1386=$888;
 var $1387=((($1385)-($1386))|0);
 var $1388=(($1325+$1387)|0);
 var $_sum3_i_i=((($1387)+(4))|0);
 var $1389=(($1325+$_sum3_i_i)|0);
 var $1390=$1389;
 var $1391=HEAP32[(($1390)>>2)];
 var $1392=$1391&-2;
 HEAP32[(($1390)>>2)]=$1392;
 var $1393=$1387|1;
 var $1394=(($888+4)|0);
 HEAP32[(($1394)>>2)]=$1393;
 var $1395=$1388;
 HEAP32[(($1395)>>2)]=$1387;
 var $1396=$1387>>>3;
 var $1397=($1387>>>0)<256;
 if($1397){label=318;break;}else{label=323;break;}
 case 318: 
 var $1399=$1396<<1;
 var $1400=((141152+($1399<<2))|0);
 var $1401=$1400;
 var $1402=HEAP32[((141112)>>2)];
 var $1403=1<<$1396;
 var $1404=$1402&$1403;
 var $1405=($1404|0)==0;
 if($1405){label=319;break;}else{label=320;break;}
 case 319: 
 var $1407=$1402|$1403;
 HEAP32[((141112)>>2)]=$1407;
 var $_sum11_pre_i_i=((($1399)+(2))|0);
 var $_pre_i_i=((141152+($_sum11_pre_i_i<<2))|0);
 var $F_0_i_i=$1401;var $_pre_phi_i_i=$_pre_i_i;label=322;break;
 case 320: 
 var $_sum12_i_i=((($1399)+(2))|0);
 var $1409=((141152+($_sum12_i_i<<2))|0);
 var $1410=HEAP32[(($1409)>>2)];
 var $1411=$1410;
 var $1412=HEAP32[((141128)>>2)];
 var $1413=($1411>>>0)<($1412>>>0);
 if($1413){label=321;break;}else{var $F_0_i_i=$1410;var $_pre_phi_i_i=$1409;label=322;break;}
 case 321: 
 _abort();
 throw "Reached an unreachable!";
 case 322: 
 var $_pre_phi_i_i;
 var $F_0_i_i;
 HEAP32[(($_pre_phi_i_i)>>2)]=$888;
 var $1416=(($F_0_i_i+12)|0);
 HEAP32[(($1416)>>2)]=$888;
 var $1417=(($888+8)|0);
 HEAP32[(($1417)>>2)]=$F_0_i_i;
 var $1418=(($888+12)|0);
 HEAP32[(($1418)>>2)]=$1401;
 label=341;break;
 case 323: 
 var $1420=$888;
 var $1421=$1387>>>8;
 var $1422=($1421|0)==0;
 if($1422){var $I1_0_i_i=0;label=326;break;}else{label=324;break;}
 case 324: 
 var $1424=($1387>>>0)>16777215;
 if($1424){var $I1_0_i_i=31;label=326;break;}else{label=325;break;}
 case 325: 
 var $1426=((($1421)+(1048320))|0);
 var $1427=$1426>>>16;
 var $1428=$1427&8;
 var $1429=$1421<<$1428;
 var $1430=((($1429)+(520192))|0);
 var $1431=$1430>>>16;
 var $1432=$1431&4;
 var $1433=$1432|$1428;
 var $1434=$1429<<$1432;
 var $1435=((($1434)+(245760))|0);
 var $1436=$1435>>>16;
 var $1437=$1436&2;
 var $1438=$1433|$1437;
 var $1439=(((14)-($1438))|0);
 var $1440=$1434<<$1437;
 var $1441=$1440>>>15;
 var $1442=((($1439)+($1441))|0);
 var $1443=$1442<<1;
 var $1444=((($1442)+(7))|0);
 var $1445=$1387>>>($1444>>>0);
 var $1446=$1445&1;
 var $1447=$1446|$1443;
 var $I1_0_i_i=$1447;label=326;break;
 case 326: 
 var $I1_0_i_i;
 var $1449=((141416+($I1_0_i_i<<2))|0);
 var $1450=(($888+28)|0);
 var $I1_0_c_i_i=$I1_0_i_i;
 HEAP32[(($1450)>>2)]=$I1_0_c_i_i;
 var $1451=(($888+20)|0);
 HEAP32[(($1451)>>2)]=0;
 var $1452=(($888+16)|0);
 HEAP32[(($1452)>>2)]=0;
 var $1453=HEAP32[((141116)>>2)];
 var $1454=1<<$I1_0_i_i;
 var $1455=$1453&$1454;
 var $1456=($1455|0)==0;
 if($1456){label=327;break;}else{label=328;break;}
 case 327: 
 var $1458=$1453|$1454;
 HEAP32[((141116)>>2)]=$1458;
 HEAP32[(($1449)>>2)]=$1420;
 var $1459=(($888+24)|0);
 var $_c_i_i=$1449;
 HEAP32[(($1459)>>2)]=$_c_i_i;
 var $1460=(($888+12)|0);
 HEAP32[(($1460)>>2)]=$888;
 var $1461=(($888+8)|0);
 HEAP32[(($1461)>>2)]=$888;
 label=341;break;
 case 328: 
 var $1463=HEAP32[(($1449)>>2)];
 var $1464=($I1_0_i_i|0)==31;
 if($1464){var $1469=0;label=330;break;}else{label=329;break;}
 case 329: 
 var $1466=$I1_0_i_i>>>1;
 var $1467=(((25)-($1466))|0);
 var $1469=$1467;label=330;break;
 case 330: 
 var $1469;
 var $1470=(($1463+4)|0);
 var $1471=HEAP32[(($1470)>>2)];
 var $1472=$1471&-8;
 var $1473=($1472|0)==($1387|0);
 if($1473){var $T_0_lcssa_i_i=$1463;label=337;break;}else{label=331;break;}
 case 331: 
 var $1474=$1387<<$1469;
 var $T_014_i_i=$1463;var $K2_015_i_i=$1474;label=333;break;
 case 332: 
 var $1476=$K2_015_i_i<<1;
 var $1477=(($1484+4)|0);
 var $1478=HEAP32[(($1477)>>2)];
 var $1479=$1478&-8;
 var $1480=($1479|0)==($1387|0);
 if($1480){var $T_0_lcssa_i_i=$1484;label=337;break;}else{var $T_014_i_i=$1484;var $K2_015_i_i=$1476;label=333;break;}
 case 333: 
 var $K2_015_i_i;
 var $T_014_i_i;
 var $1482=$K2_015_i_i>>>31;
 var $1483=(($T_014_i_i+16+($1482<<2))|0);
 var $1484=HEAP32[(($1483)>>2)];
 var $1485=($1484|0)==0;
 if($1485){label=334;break;}else{label=332;break;}
 case 334: 
 var $1487=$1483;
 var $1488=HEAP32[((141128)>>2)];
 var $1489=($1487>>>0)<($1488>>>0);
 if($1489){label=336;break;}else{label=335;break;}
 case 335: 
 HEAP32[(($1483)>>2)]=$1420;
 var $1491=(($888+24)|0);
 var $T_0_c8_i_i=$T_014_i_i;
 HEAP32[(($1491)>>2)]=$T_0_c8_i_i;
 var $1492=(($888+12)|0);
 HEAP32[(($1492)>>2)]=$888;
 var $1493=(($888+8)|0);
 HEAP32[(($1493)>>2)]=$888;
 label=341;break;
 case 336: 
 _abort();
 throw "Reached an unreachable!";
 case 337: 
 var $T_0_lcssa_i_i;
 var $1495=(($T_0_lcssa_i_i+8)|0);
 var $1496=HEAP32[(($1495)>>2)];
 var $1497=$T_0_lcssa_i_i;
 var $1498=HEAP32[((141128)>>2)];
 var $1499=($1497>>>0)<($1498>>>0);
 if($1499){label=340;break;}else{label=338;break;}
 case 338: 
 var $1501=$1496;
 var $1502=($1501>>>0)<($1498>>>0);
 if($1502){label=340;break;}else{label=339;break;}
 case 339: 
 var $1504=(($1496+12)|0);
 HEAP32[(($1504)>>2)]=$1420;
 HEAP32[(($1495)>>2)]=$1420;
 var $1505=(($888+8)|0);
 var $_c7_i_i=$1496;
 HEAP32[(($1505)>>2)]=$_c7_i_i;
 var $1506=(($888+12)|0);
 var $T_0_c_i_i=$T_0_lcssa_i_i;
 HEAP32[(($1506)>>2)]=$T_0_c_i_i;
 var $1507=(($888+24)|0);
 HEAP32[(($1507)>>2)]=0;
 label=341;break;
 case 340: 
 _abort();
 throw "Reached an unreachable!";
 case 341: 
 var $1508=HEAP32[((141124)>>2)];
 var $1509=($1508>>>0)>($nb_0>>>0);
 if($1509){label=342;break;}else{label=343;break;}
 case 342: 
 var $1511=((($1508)-($nb_0))|0);
 HEAP32[((141124)>>2)]=$1511;
 var $1512=HEAP32[((141136)>>2)];
 var $1513=$1512;
 var $1514=(($1513+$nb_0)|0);
 var $1515=$1514;
 HEAP32[((141136)>>2)]=$1515;
 var $1516=$1511|1;
 var $_sum_i34=((($nb_0)+(4))|0);
 var $1517=(($1513+$_sum_i34)|0);
 var $1518=$1517;
 HEAP32[(($1518)>>2)]=$1516;
 var $1519=$nb_0|3;
 var $1520=(($1512+4)|0);
 HEAP32[(($1520)>>2)]=$1519;
 var $1521=(($1512+8)|0);
 var $1522=$1521;
 var $mem_0=$1522;label=344;break;
 case 343: 
 var $1523=___errno_location();
 HEAP32[(($1523)>>2)]=12;
 var $mem_0=0;label=344;break;
 case 344: 
 var $mem_0;
 return $mem_0;
  default: assert(0, "bad label: " + label);
 }

}
Module["_malloc"] = _malloc;

function _free($mem){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($mem|0)==0;
 if($1){label=141;break;}else{label=2;break;}
 case 2: 
 var $3=((($mem)-(8))|0);
 var $4=$3;
 var $5=HEAP32[((141128)>>2)];
 var $6=($3>>>0)<($5>>>0);
 if($6){label=140;break;}else{label=3;break;}
 case 3: 
 var $8=((($mem)-(4))|0);
 var $9=$8;
 var $10=HEAP32[(($9)>>2)];
 var $11=$10&3;
 var $12=($11|0)==1;
 if($12){label=140;break;}else{label=4;break;}
 case 4: 
 var $14=$10&-8;
 var $_sum=((($14)-(8))|0);
 var $15=(($mem+$_sum)|0);
 var $16=$15;
 var $17=$10&1;
 var $18=($17|0)==0;
 if($18){label=5;break;}else{var $p_0=$4;var $psize_0=$14;label=56;break;}
 case 5: 
 var $20=$3;
 var $21=HEAP32[(($20)>>2)];
 var $22=($11|0)==0;
 if($22){label=141;break;}else{label=6;break;}
 case 6: 
 var $_sum3=(((-8)-($21))|0);
 var $24=(($mem+$_sum3)|0);
 var $25=$24;
 var $26=((($21)+($14))|0);
 var $27=($24>>>0)<($5>>>0);
 if($27){label=140;break;}else{label=7;break;}
 case 7: 
 var $29=HEAP32[((141132)>>2)];
 var $30=($25|0)==($29|0);
 if($30){label=54;break;}else{label=8;break;}
 case 8: 
 var $32=$21>>>3;
 var $33=($21>>>0)<256;
 if($33){label=9;break;}else{label=21;break;}
 case 9: 
 var $_sum47=((($_sum3)+(8))|0);
 var $35=(($mem+$_sum47)|0);
 var $36=$35;
 var $37=HEAP32[(($36)>>2)];
 var $_sum48=((($_sum3)+(12))|0);
 var $38=(($mem+$_sum48)|0);
 var $39=$38;
 var $40=HEAP32[(($39)>>2)];
 var $41=$32<<1;
 var $42=((141152+($41<<2))|0);
 var $43=$42;
 var $44=($37|0)==($43|0);
 if($44){label=12;break;}else{label=10;break;}
 case 10: 
 var $46=$37;
 var $47=($46>>>0)<($5>>>0);
 if($47){label=20;break;}else{label=11;break;}
 case 11: 
 var $49=(($37+12)|0);
 var $50=HEAP32[(($49)>>2)];
 var $51=($50|0)==($25|0);
 if($51){label=12;break;}else{label=20;break;}
 case 12: 
 var $52=($40|0)==($37|0);
 if($52){label=13;break;}else{label=14;break;}
 case 13: 
 var $54=1<<$32;
 var $55=$54^-1;
 var $56=HEAP32[((141112)>>2)];
 var $57=$56&$55;
 HEAP32[((141112)>>2)]=$57;
 var $p_0=$25;var $psize_0=$26;label=56;break;
 case 14: 
 var $59=($40|0)==($43|0);
 if($59){label=15;break;}else{label=16;break;}
 case 15: 
 var $_pre84=(($40+8)|0);
 var $_pre_phi85=$_pre84;label=18;break;
 case 16: 
 var $61=$40;
 var $62=($61>>>0)<($5>>>0);
 if($62){label=19;break;}else{label=17;break;}
 case 17: 
 var $64=(($40+8)|0);
 var $65=HEAP32[(($64)>>2)];
 var $66=($65|0)==($25|0);
 if($66){var $_pre_phi85=$64;label=18;break;}else{label=19;break;}
 case 18: 
 var $_pre_phi85;
 var $67=(($37+12)|0);
 HEAP32[(($67)>>2)]=$40;
 HEAP32[(($_pre_phi85)>>2)]=$37;
 var $p_0=$25;var $psize_0=$26;label=56;break;
 case 19: 
 _abort();
 throw "Reached an unreachable!";
 case 20: 
 _abort();
 throw "Reached an unreachable!";
 case 21: 
 var $69=$24;
 var $_sum37=((($_sum3)+(24))|0);
 var $70=(($mem+$_sum37)|0);
 var $71=$70;
 var $72=HEAP32[(($71)>>2)];
 var $_sum38=((($_sum3)+(12))|0);
 var $73=(($mem+$_sum38)|0);
 var $74=$73;
 var $75=HEAP32[(($74)>>2)];
 var $76=($75|0)==($69|0);
 if($76){label=27;break;}else{label=22;break;}
 case 22: 
 var $_sum44=((($_sum3)+(8))|0);
 var $78=(($mem+$_sum44)|0);
 var $79=$78;
 var $80=HEAP32[(($79)>>2)];
 var $81=$80;
 var $82=($81>>>0)<($5>>>0);
 if($82){label=26;break;}else{label=23;break;}
 case 23: 
 var $84=(($80+12)|0);
 var $85=HEAP32[(($84)>>2)];
 var $86=($85|0)==($69|0);
 if($86){label=24;break;}else{label=26;break;}
 case 24: 
 var $88=(($75+8)|0);
 var $89=HEAP32[(($88)>>2)];
 var $90=($89|0)==($69|0);
 if($90){label=25;break;}else{label=26;break;}
 case 25: 
 HEAP32[(($84)>>2)]=$75;
 HEAP32[(($88)>>2)]=$80;
 var $R_1=$75;label=34;break;
 case 26: 
 _abort();
 throw "Reached an unreachable!";
 case 27: 
 var $_sum40=((($_sum3)+(20))|0);
 var $93=(($mem+$_sum40)|0);
 var $94=$93;
 var $95=HEAP32[(($94)>>2)];
 var $96=($95|0)==0;
 if($96){label=28;break;}else{var $R_0=$95;var $RP_0=$94;label=29;break;}
 case 28: 
 var $_sum39=((($_sum3)+(16))|0);
 var $98=(($mem+$_sum39)|0);
 var $99=$98;
 var $100=HEAP32[(($99)>>2)];
 var $101=($100|0)==0;
 if($101){var $R_1=0;label=34;break;}else{var $R_0=$100;var $RP_0=$99;label=29;break;}
 case 29: 
 var $RP_0;
 var $R_0;
 var $102=(($R_0+20)|0);
 var $103=HEAP32[(($102)>>2)];
 var $104=($103|0)==0;
 if($104){label=30;break;}else{var $R_0=$103;var $RP_0=$102;label=29;break;}
 case 30: 
 var $106=(($R_0+16)|0);
 var $107=HEAP32[(($106)>>2)];
 var $108=($107|0)==0;
 if($108){label=31;break;}else{var $R_0=$107;var $RP_0=$106;label=29;break;}
 case 31: 
 var $110=$RP_0;
 var $111=($110>>>0)<($5>>>0);
 if($111){label=33;break;}else{label=32;break;}
 case 32: 
 HEAP32[(($RP_0)>>2)]=0;
 var $R_1=$R_0;label=34;break;
 case 33: 
 _abort();
 throw "Reached an unreachable!";
 case 34: 
 var $R_1;
 var $115=($72|0)==0;
 if($115){var $p_0=$25;var $psize_0=$26;label=56;break;}else{label=35;break;}
 case 35: 
 var $_sum41=((($_sum3)+(28))|0);
 var $117=(($mem+$_sum41)|0);
 var $118=$117;
 var $119=HEAP32[(($118)>>2)];
 var $120=((141416+($119<<2))|0);
 var $121=HEAP32[(($120)>>2)];
 var $122=($69|0)==($121|0);
 if($122){label=36;break;}else{label=38;break;}
 case 36: 
 HEAP32[(($120)>>2)]=$R_1;
 var $cond=($R_1|0)==0;
 if($cond){label=37;break;}else{label=44;break;}
 case 37: 
 var $124=1<<$119;
 var $125=$124^-1;
 var $126=HEAP32[((141116)>>2)];
 var $127=$126&$125;
 HEAP32[((141116)>>2)]=$127;
 var $p_0=$25;var $psize_0=$26;label=56;break;
 case 38: 
 var $129=$72;
 var $130=HEAP32[((141128)>>2)];
 var $131=($129>>>0)<($130>>>0);
 if($131){label=42;break;}else{label=39;break;}
 case 39: 
 var $133=(($72+16)|0);
 var $134=HEAP32[(($133)>>2)];
 var $135=($134|0)==($69|0);
 if($135){label=40;break;}else{label=41;break;}
 case 40: 
 HEAP32[(($133)>>2)]=$R_1;
 label=43;break;
 case 41: 
 var $138=(($72+20)|0);
 HEAP32[(($138)>>2)]=$R_1;
 label=43;break;
 case 42: 
 _abort();
 throw "Reached an unreachable!";
 case 43: 
 var $141=($R_1|0)==0;
 if($141){var $p_0=$25;var $psize_0=$26;label=56;break;}else{label=44;break;}
 case 44: 
 var $143=$R_1;
 var $144=HEAP32[((141128)>>2)];
 var $145=($143>>>0)<($144>>>0);
 if($145){label=53;break;}else{label=45;break;}
 case 45: 
 var $147=(($R_1+24)|0);
 HEAP32[(($147)>>2)]=$72;
 var $_sum42=((($_sum3)+(16))|0);
 var $148=(($mem+$_sum42)|0);
 var $149=$148;
 var $150=HEAP32[(($149)>>2)];
 var $151=($150|0)==0;
 if($151){label=49;break;}else{label=46;break;}
 case 46: 
 var $153=$150;
 var $154=HEAP32[((141128)>>2)];
 var $155=($153>>>0)<($154>>>0);
 if($155){label=48;break;}else{label=47;break;}
 case 47: 
 var $157=(($R_1+16)|0);
 HEAP32[(($157)>>2)]=$150;
 var $158=(($150+24)|0);
 HEAP32[(($158)>>2)]=$R_1;
 label=49;break;
 case 48: 
 _abort();
 throw "Reached an unreachable!";
 case 49: 
 var $_sum43=((($_sum3)+(20))|0);
 var $161=(($mem+$_sum43)|0);
 var $162=$161;
 var $163=HEAP32[(($162)>>2)];
 var $164=($163|0)==0;
 if($164){var $p_0=$25;var $psize_0=$26;label=56;break;}else{label=50;break;}
 case 50: 
 var $166=$163;
 var $167=HEAP32[((141128)>>2)];
 var $168=($166>>>0)<($167>>>0);
 if($168){label=52;break;}else{label=51;break;}
 case 51: 
 var $170=(($R_1+20)|0);
 HEAP32[(($170)>>2)]=$163;
 var $171=(($163+24)|0);
 HEAP32[(($171)>>2)]=$R_1;
 var $p_0=$25;var $psize_0=$26;label=56;break;
 case 52: 
 _abort();
 throw "Reached an unreachable!";
 case 53: 
 _abort();
 throw "Reached an unreachable!";
 case 54: 
 var $_sum4=((($14)-(4))|0);
 var $175=(($mem+$_sum4)|0);
 var $176=$175;
 var $177=HEAP32[(($176)>>2)];
 var $178=$177&3;
 var $179=($178|0)==3;
 if($179){label=55;break;}else{var $p_0=$25;var $psize_0=$26;label=56;break;}
 case 55: 
 HEAP32[((141120)>>2)]=$26;
 var $181=HEAP32[(($176)>>2)];
 var $182=$181&-2;
 HEAP32[(($176)>>2)]=$182;
 var $183=$26|1;
 var $_sum35=((($_sum3)+(4))|0);
 var $184=(($mem+$_sum35)|0);
 var $185=$184;
 HEAP32[(($185)>>2)]=$183;
 var $186=$15;
 HEAP32[(($186)>>2)]=$26;
 label=141;break;
 case 56: 
 var $psize_0;
 var $p_0;
 var $188=$p_0;
 var $189=($188>>>0)<($15>>>0);
 if($189){label=57;break;}else{label=140;break;}
 case 57: 
 var $_sum34=((($14)-(4))|0);
 var $191=(($mem+$_sum34)|0);
 var $192=$191;
 var $193=HEAP32[(($192)>>2)];
 var $194=$193&1;
 var $phitmp=($194|0)==0;
 if($phitmp){label=140;break;}else{label=58;break;}
 case 58: 
 var $196=$193&2;
 var $197=($196|0)==0;
 if($197){label=59;break;}else{label=112;break;}
 case 59: 
 var $199=HEAP32[((141136)>>2)];
 var $200=($16|0)==($199|0);
 if($200){label=60;break;}else{label=62;break;}
 case 60: 
 var $202=HEAP32[((141124)>>2)];
 var $203=((($202)+($psize_0))|0);
 HEAP32[((141124)>>2)]=$203;
 HEAP32[((141136)>>2)]=$p_0;
 var $204=$203|1;
 var $205=(($p_0+4)|0);
 HEAP32[(($205)>>2)]=$204;
 var $206=HEAP32[((141132)>>2)];
 var $207=($p_0|0)==($206|0);
 if($207){label=61;break;}else{label=141;break;}
 case 61: 
 HEAP32[((141132)>>2)]=0;
 HEAP32[((141120)>>2)]=0;
 label=141;break;
 case 62: 
 var $210=HEAP32[((141132)>>2)];
 var $211=($16|0)==($210|0);
 if($211){label=63;break;}else{label=64;break;}
 case 63: 
 var $213=HEAP32[((141120)>>2)];
 var $214=((($213)+($psize_0))|0);
 HEAP32[((141120)>>2)]=$214;
 HEAP32[((141132)>>2)]=$p_0;
 var $215=$214|1;
 var $216=(($p_0+4)|0);
 HEAP32[(($216)>>2)]=$215;
 var $217=(($188+$214)|0);
 var $218=$217;
 HEAP32[(($218)>>2)]=$214;
 label=141;break;
 case 64: 
 var $220=$193&-8;
 var $221=((($220)+($psize_0))|0);
 var $222=$193>>>3;
 var $223=($193>>>0)<256;
 if($223){label=65;break;}else{label=77;break;}
 case 65: 
 var $225=(($mem+$14)|0);
 var $226=$225;
 var $227=HEAP32[(($226)>>2)];
 var $_sum2829=$14|4;
 var $228=(($mem+$_sum2829)|0);
 var $229=$228;
 var $230=HEAP32[(($229)>>2)];
 var $231=$222<<1;
 var $232=((141152+($231<<2))|0);
 var $233=$232;
 var $234=($227|0)==($233|0);
 if($234){label=68;break;}else{label=66;break;}
 case 66: 
 var $236=$227;
 var $237=HEAP32[((141128)>>2)];
 var $238=($236>>>0)<($237>>>0);
 if($238){label=76;break;}else{label=67;break;}
 case 67: 
 var $240=(($227+12)|0);
 var $241=HEAP32[(($240)>>2)];
 var $242=($241|0)==($16|0);
 if($242){label=68;break;}else{label=76;break;}
 case 68: 
 var $243=($230|0)==($227|0);
 if($243){label=69;break;}else{label=70;break;}
 case 69: 
 var $245=1<<$222;
 var $246=$245^-1;
 var $247=HEAP32[((141112)>>2)];
 var $248=$247&$246;
 HEAP32[((141112)>>2)]=$248;
 label=110;break;
 case 70: 
 var $250=($230|0)==($233|0);
 if($250){label=71;break;}else{label=72;break;}
 case 71: 
 var $_pre82=(($230+8)|0);
 var $_pre_phi83=$_pre82;label=74;break;
 case 72: 
 var $252=$230;
 var $253=HEAP32[((141128)>>2)];
 var $254=($252>>>0)<($253>>>0);
 if($254){label=75;break;}else{label=73;break;}
 case 73: 
 var $256=(($230+8)|0);
 var $257=HEAP32[(($256)>>2)];
 var $258=($257|0)==($16|0);
 if($258){var $_pre_phi83=$256;label=74;break;}else{label=75;break;}
 case 74: 
 var $_pre_phi83;
 var $259=(($227+12)|0);
 HEAP32[(($259)>>2)]=$230;
 HEAP32[(($_pre_phi83)>>2)]=$227;
 label=110;break;
 case 75: 
 _abort();
 throw "Reached an unreachable!";
 case 76: 
 _abort();
 throw "Reached an unreachable!";
 case 77: 
 var $261=$15;
 var $_sum6=((($14)+(16))|0);
 var $262=(($mem+$_sum6)|0);
 var $263=$262;
 var $264=HEAP32[(($263)>>2)];
 var $_sum78=$14|4;
 var $265=(($mem+$_sum78)|0);
 var $266=$265;
 var $267=HEAP32[(($266)>>2)];
 var $268=($267|0)==($261|0);
 if($268){label=83;break;}else{label=78;break;}
 case 78: 
 var $270=(($mem+$14)|0);
 var $271=$270;
 var $272=HEAP32[(($271)>>2)];
 var $273=$272;
 var $274=HEAP32[((141128)>>2)];
 var $275=($273>>>0)<($274>>>0);
 if($275){label=82;break;}else{label=79;break;}
 case 79: 
 var $277=(($272+12)|0);
 var $278=HEAP32[(($277)>>2)];
 var $279=($278|0)==($261|0);
 if($279){label=80;break;}else{label=82;break;}
 case 80: 
 var $281=(($267+8)|0);
 var $282=HEAP32[(($281)>>2)];
 var $283=($282|0)==($261|0);
 if($283){label=81;break;}else{label=82;break;}
 case 81: 
 HEAP32[(($277)>>2)]=$267;
 HEAP32[(($281)>>2)]=$272;
 var $R7_1=$267;label=90;break;
 case 82: 
 _abort();
 throw "Reached an unreachable!";
 case 83: 
 var $_sum10=((($14)+(12))|0);
 var $286=(($mem+$_sum10)|0);
 var $287=$286;
 var $288=HEAP32[(($287)>>2)];
 var $289=($288|0)==0;
 if($289){label=84;break;}else{var $R7_0=$288;var $RP9_0=$287;label=85;break;}
 case 84: 
 var $_sum9=((($14)+(8))|0);
 var $291=(($mem+$_sum9)|0);
 var $292=$291;
 var $293=HEAP32[(($292)>>2)];
 var $294=($293|0)==0;
 if($294){var $R7_1=0;label=90;break;}else{var $R7_0=$293;var $RP9_0=$292;label=85;break;}
 case 85: 
 var $RP9_0;
 var $R7_0;
 var $295=(($R7_0+20)|0);
 var $296=HEAP32[(($295)>>2)];
 var $297=($296|0)==0;
 if($297){label=86;break;}else{var $R7_0=$296;var $RP9_0=$295;label=85;break;}
 case 86: 
 var $299=(($R7_0+16)|0);
 var $300=HEAP32[(($299)>>2)];
 var $301=($300|0)==0;
 if($301){label=87;break;}else{var $R7_0=$300;var $RP9_0=$299;label=85;break;}
 case 87: 
 var $303=$RP9_0;
 var $304=HEAP32[((141128)>>2)];
 var $305=($303>>>0)<($304>>>0);
 if($305){label=89;break;}else{label=88;break;}
 case 88: 
 HEAP32[(($RP9_0)>>2)]=0;
 var $R7_1=$R7_0;label=90;break;
 case 89: 
 _abort();
 throw "Reached an unreachable!";
 case 90: 
 var $R7_1;
 var $309=($264|0)==0;
 if($309){label=110;break;}else{label=91;break;}
 case 91: 
 var $_sum21=((($14)+(20))|0);
 var $311=(($mem+$_sum21)|0);
 var $312=$311;
 var $313=HEAP32[(($312)>>2)];
 var $314=((141416+($313<<2))|0);
 var $315=HEAP32[(($314)>>2)];
 var $316=($261|0)==($315|0);
 if($316){label=92;break;}else{label=94;break;}
 case 92: 
 HEAP32[(($314)>>2)]=$R7_1;
 var $cond69=($R7_1|0)==0;
 if($cond69){label=93;break;}else{label=100;break;}
 case 93: 
 var $318=1<<$313;
 var $319=$318^-1;
 var $320=HEAP32[((141116)>>2)];
 var $321=$320&$319;
 HEAP32[((141116)>>2)]=$321;
 label=110;break;
 case 94: 
 var $323=$264;
 var $324=HEAP32[((141128)>>2)];
 var $325=($323>>>0)<($324>>>0);
 if($325){label=98;break;}else{label=95;break;}
 case 95: 
 var $327=(($264+16)|0);
 var $328=HEAP32[(($327)>>2)];
 var $329=($328|0)==($261|0);
 if($329){label=96;break;}else{label=97;break;}
 case 96: 
 HEAP32[(($327)>>2)]=$R7_1;
 label=99;break;
 case 97: 
 var $332=(($264+20)|0);
 HEAP32[(($332)>>2)]=$R7_1;
 label=99;break;
 case 98: 
 _abort();
 throw "Reached an unreachable!";
 case 99: 
 var $335=($R7_1|0)==0;
 if($335){label=110;break;}else{label=100;break;}
 case 100: 
 var $337=$R7_1;
 var $338=HEAP32[((141128)>>2)];
 var $339=($337>>>0)<($338>>>0);
 if($339){label=109;break;}else{label=101;break;}
 case 101: 
 var $341=(($R7_1+24)|0);
 HEAP32[(($341)>>2)]=$264;
 var $_sum22=((($14)+(8))|0);
 var $342=(($mem+$_sum22)|0);
 var $343=$342;
 var $344=HEAP32[(($343)>>2)];
 var $345=($344|0)==0;
 if($345){label=105;break;}else{label=102;break;}
 case 102: 
 var $347=$344;
 var $348=HEAP32[((141128)>>2)];
 var $349=($347>>>0)<($348>>>0);
 if($349){label=104;break;}else{label=103;break;}
 case 103: 
 var $351=(($R7_1+16)|0);
 HEAP32[(($351)>>2)]=$344;
 var $352=(($344+24)|0);
 HEAP32[(($352)>>2)]=$R7_1;
 label=105;break;
 case 104: 
 _abort();
 throw "Reached an unreachable!";
 case 105: 
 var $_sum23=((($14)+(12))|0);
 var $355=(($mem+$_sum23)|0);
 var $356=$355;
 var $357=HEAP32[(($356)>>2)];
 var $358=($357|0)==0;
 if($358){label=110;break;}else{label=106;break;}
 case 106: 
 var $360=$357;
 var $361=HEAP32[((141128)>>2)];
 var $362=($360>>>0)<($361>>>0);
 if($362){label=108;break;}else{label=107;break;}
 case 107: 
 var $364=(($R7_1+20)|0);
 HEAP32[(($364)>>2)]=$357;
 var $365=(($357+24)|0);
 HEAP32[(($365)>>2)]=$R7_1;
 label=110;break;
 case 108: 
 _abort();
 throw "Reached an unreachable!";
 case 109: 
 _abort();
 throw "Reached an unreachable!";
 case 110: 
 var $368=$221|1;
 var $369=(($p_0+4)|0);
 HEAP32[(($369)>>2)]=$368;
 var $370=(($188+$221)|0);
 var $371=$370;
 HEAP32[(($371)>>2)]=$221;
 var $372=HEAP32[((141132)>>2)];
 var $373=($p_0|0)==($372|0);
 if($373){label=111;break;}else{var $psize_1=$221;label=113;break;}
 case 111: 
 HEAP32[((141120)>>2)]=$221;
 label=141;break;
 case 112: 
 var $376=$193&-2;
 HEAP32[(($192)>>2)]=$376;
 var $377=$psize_0|1;
 var $378=(($p_0+4)|0);
 HEAP32[(($378)>>2)]=$377;
 var $379=(($188+$psize_0)|0);
 var $380=$379;
 HEAP32[(($380)>>2)]=$psize_0;
 var $psize_1=$psize_0;label=113;break;
 case 113: 
 var $psize_1;
 var $382=$psize_1>>>3;
 var $383=($psize_1>>>0)<256;
 if($383){label=114;break;}else{label=119;break;}
 case 114: 
 var $385=$382<<1;
 var $386=((141152+($385<<2))|0);
 var $387=$386;
 var $388=HEAP32[((141112)>>2)];
 var $389=1<<$382;
 var $390=$388&$389;
 var $391=($390|0)==0;
 if($391){label=115;break;}else{label=116;break;}
 case 115: 
 var $393=$388|$389;
 HEAP32[((141112)>>2)]=$393;
 var $_sum19_pre=((($385)+(2))|0);
 var $_pre=((141152+($_sum19_pre<<2))|0);
 var $F16_0=$387;var $_pre_phi=$_pre;label=118;break;
 case 116: 
 var $_sum20=((($385)+(2))|0);
 var $395=((141152+($_sum20<<2))|0);
 var $396=HEAP32[(($395)>>2)];
 var $397=$396;
 var $398=HEAP32[((141128)>>2)];
 var $399=($397>>>0)<($398>>>0);
 if($399){label=117;break;}else{var $F16_0=$396;var $_pre_phi=$395;label=118;break;}
 case 117: 
 _abort();
 throw "Reached an unreachable!";
 case 118: 
 var $_pre_phi;
 var $F16_0;
 HEAP32[(($_pre_phi)>>2)]=$p_0;
 var $402=(($F16_0+12)|0);
 HEAP32[(($402)>>2)]=$p_0;
 var $403=(($p_0+8)|0);
 HEAP32[(($403)>>2)]=$F16_0;
 var $404=(($p_0+12)|0);
 HEAP32[(($404)>>2)]=$387;
 label=141;break;
 case 119: 
 var $406=$p_0;
 var $407=$psize_1>>>8;
 var $408=($407|0)==0;
 if($408){var $I18_0=0;label=122;break;}else{label=120;break;}
 case 120: 
 var $410=($psize_1>>>0)>16777215;
 if($410){var $I18_0=31;label=122;break;}else{label=121;break;}
 case 121: 
 var $412=((($407)+(1048320))|0);
 var $413=$412>>>16;
 var $414=$413&8;
 var $415=$407<<$414;
 var $416=((($415)+(520192))|0);
 var $417=$416>>>16;
 var $418=$417&4;
 var $419=$418|$414;
 var $420=$415<<$418;
 var $421=((($420)+(245760))|0);
 var $422=$421>>>16;
 var $423=$422&2;
 var $424=$419|$423;
 var $425=(((14)-($424))|0);
 var $426=$420<<$423;
 var $427=$426>>>15;
 var $428=((($425)+($427))|0);
 var $429=$428<<1;
 var $430=((($428)+(7))|0);
 var $431=$psize_1>>>($430>>>0);
 var $432=$431&1;
 var $433=$432|$429;
 var $I18_0=$433;label=122;break;
 case 122: 
 var $I18_0;
 var $435=((141416+($I18_0<<2))|0);
 var $436=(($p_0+28)|0);
 var $I18_0_c=$I18_0;
 HEAP32[(($436)>>2)]=$I18_0_c;
 var $437=(($p_0+20)|0);
 HEAP32[(($437)>>2)]=0;
 var $438=(($p_0+16)|0);
 HEAP32[(($438)>>2)]=0;
 var $439=HEAP32[((141116)>>2)];
 var $440=1<<$I18_0;
 var $441=$439&$440;
 var $442=($441|0)==0;
 if($442){label=123;break;}else{label=124;break;}
 case 123: 
 var $444=$439|$440;
 HEAP32[((141116)>>2)]=$444;
 HEAP32[(($435)>>2)]=$406;
 var $445=(($p_0+24)|0);
 var $_c=$435;
 HEAP32[(($445)>>2)]=$_c;
 var $446=(($p_0+12)|0);
 HEAP32[(($446)>>2)]=$p_0;
 var $447=(($p_0+8)|0);
 HEAP32[(($447)>>2)]=$p_0;
 label=137;break;
 case 124: 
 var $449=HEAP32[(($435)>>2)];
 var $450=($I18_0|0)==31;
 if($450){var $455=0;label=126;break;}else{label=125;break;}
 case 125: 
 var $452=$I18_0>>>1;
 var $453=(((25)-($452))|0);
 var $455=$453;label=126;break;
 case 126: 
 var $455;
 var $456=(($449+4)|0);
 var $457=HEAP32[(($456)>>2)];
 var $458=$457&-8;
 var $459=($458|0)==($psize_1|0);
 if($459){var $T_0_lcssa=$449;label=133;break;}else{label=127;break;}
 case 127: 
 var $460=$psize_1<<$455;
 var $T_071=$449;var $K19_072=$460;label=129;break;
 case 128: 
 var $462=$K19_072<<1;
 var $463=(($470+4)|0);
 var $464=HEAP32[(($463)>>2)];
 var $465=$464&-8;
 var $466=($465|0)==($psize_1|0);
 if($466){var $T_0_lcssa=$470;label=133;break;}else{var $T_071=$470;var $K19_072=$462;label=129;break;}
 case 129: 
 var $K19_072;
 var $T_071;
 var $468=$K19_072>>>31;
 var $469=(($T_071+16+($468<<2))|0);
 var $470=HEAP32[(($469)>>2)];
 var $471=($470|0)==0;
 if($471){label=130;break;}else{label=128;break;}
 case 130: 
 var $473=$469;
 var $474=HEAP32[((141128)>>2)];
 var $475=($473>>>0)<($474>>>0);
 if($475){label=132;break;}else{label=131;break;}
 case 131: 
 HEAP32[(($469)>>2)]=$406;
 var $477=(($p_0+24)|0);
 var $T_0_c16=$T_071;
 HEAP32[(($477)>>2)]=$T_0_c16;
 var $478=(($p_0+12)|0);
 HEAP32[(($478)>>2)]=$p_0;
 var $479=(($p_0+8)|0);
 HEAP32[(($479)>>2)]=$p_0;
 label=137;break;
 case 132: 
 _abort();
 throw "Reached an unreachable!";
 case 133: 
 var $T_0_lcssa;
 var $481=(($T_0_lcssa+8)|0);
 var $482=HEAP32[(($481)>>2)];
 var $483=$T_0_lcssa;
 var $484=HEAP32[((141128)>>2)];
 var $485=($483>>>0)<($484>>>0);
 if($485){label=136;break;}else{label=134;break;}
 case 134: 
 var $487=$482;
 var $488=($487>>>0)<($484>>>0);
 if($488){label=136;break;}else{label=135;break;}
 case 135: 
 var $490=(($482+12)|0);
 HEAP32[(($490)>>2)]=$406;
 HEAP32[(($481)>>2)]=$406;
 var $491=(($p_0+8)|0);
 var $_c15=$482;
 HEAP32[(($491)>>2)]=$_c15;
 var $492=(($p_0+12)|0);
 var $T_0_c=$T_0_lcssa;
 HEAP32[(($492)>>2)]=$T_0_c;
 var $493=(($p_0+24)|0);
 HEAP32[(($493)>>2)]=0;
 label=137;break;
 case 136: 
 _abort();
 throw "Reached an unreachable!";
 case 137: 
 var $495=HEAP32[((141144)>>2)];
 var $496=((($495)-(1))|0);
 HEAP32[((141144)>>2)]=$496;
 var $497=($496|0)==0;
 if($497){var $sp_0_in_i=141568;label=138;break;}else{label=141;break;}
 case 138: 
 var $sp_0_in_i;
 var $sp_0_i=HEAP32[(($sp_0_in_i)>>2)];
 var $498=($sp_0_i|0)==0;
 var $499=(($sp_0_i+8)|0);
 if($498){label=139;break;}else{var $sp_0_in_i=$499;label=138;break;}
 case 139: 
 HEAP32[((141144)>>2)]=-1;
 label=141;break;
 case 140: 
 _abort();
 throw "Reached an unreachable!";
 case 141: 
 return;
  default: assert(0, "bad label: " + label);
 }

}
Module["_free"] = _free;

function _calloc($n_elements,$elem_size){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($n_elements|0)==0;
 if($1){var $req_0=0;label=4;break;}else{label=2;break;}
 case 2: 
 var $3=(Math_imul($elem_size,$n_elements)|0);
 var $4=$elem_size|$n_elements;
 var $5=($4>>>0)>65535;
 if($5){label=3;break;}else{var $req_0=$3;label=4;break;}
 case 3: 
 var $7=(((($3>>>0))/(($n_elements>>>0)))&-1);
 var $8=($7|0)==($elem_size|0);
 var $_=($8?$3:-1);
 var $req_0=$_;label=4;break;
 case 4: 
 var $req_0;
 var $10=_malloc($req_0);
 var $11=($10|0)==0;
 if($11){label=7;break;}else{label=5;break;}
 case 5: 
 var $13=((($10)-(4))|0);
 var $14=$13;
 var $15=HEAP32[(($14)>>2)];
 var $16=$15&3;
 var $17=($16|0)==0;
 if($17){label=7;break;}else{label=6;break;}
 case 6: 
 _memset($10, 0, $req_0)|0;
 label=7;break;
 case 7: 
 return $10;
  default: assert(0, "bad label: " + label);
 }

}
Module["_calloc"] = _calloc;

function _realloc($oldmem,$bytes){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($oldmem|0)==0;
 if($1){label=2;break;}else{label=3;break;}
 case 2: 
 var $3=_malloc($bytes);
 var $mem_0=$3;label=11;break;
 case 3: 
 var $5=($bytes>>>0)>4294967231;
 if($5){label=4;break;}else{label=5;break;}
 case 4: 
 var $7=___errno_location();
 HEAP32[(($7)>>2)]=12;
 var $mem_0=0;label=11;break;
 case 5: 
 var $9=($bytes>>>0)<11;
 if($9){var $14=16;label=7;break;}else{label=6;break;}
 case 6: 
 var $11=((($bytes)+(11))|0);
 var $12=$11&-8;
 var $14=$12;label=7;break;
 case 7: 
 var $14;
 var $15=((($oldmem)-(8))|0);
 var $16=$15;
 var $17=_try_realloc_chunk($16,$14);
 var $18=($17|0)==0;
 if($18){label=9;break;}else{label=8;break;}
 case 8: 
 var $20=(($17+8)|0);
 var $21=$20;
 var $mem_0=$21;label=11;break;
 case 9: 
 var $23=_malloc($bytes);
 var $24=($23|0)==0;
 if($24){var $mem_0=0;label=11;break;}else{label=10;break;}
 case 10: 
 var $26=((($oldmem)-(4))|0);
 var $27=$26;
 var $28=HEAP32[(($27)>>2)];
 var $29=$28&-8;
 var $30=$28&3;
 var $31=($30|0)==0;
 var $32=($31?8:4);
 var $33=((($29)-($32))|0);
 var $34=($33>>>0)<($bytes>>>0);
 var $35=($34?$33:$bytes);
 assert($35 % 1 === 0);(_memcpy($23, $oldmem, $35)|0);
 _free($oldmem);
 var $mem_0=$23;label=11;break;
 case 11: 
 var $mem_0;
 return $mem_0;
  default: assert(0, "bad label: " + label);
 }

}
Module["_realloc"] = _realloc;

function _try_realloc_chunk($p,$nb){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($p+4)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=$2&-8;
 var $4=$p;
 var $5=(($4+$3)|0);
 var $6=$5;
 var $7=HEAP32[((141128)>>2)];
 var $8=($4>>>0)<($7>>>0);
 if($8){label=72;break;}else{label=2;break;}
 case 2: 
 var $10=$2&3;
 var $11=($10|0)!=1;
 var $12=($4>>>0)<($5>>>0);
 var $or_cond=$11&$12;
 if($or_cond){label=3;break;}else{label=72;break;}
 case 3: 
 var $_sum3334=$3|4;
 var $14=(($4+$_sum3334)|0);
 var $15=$14;
 var $16=HEAP32[(($15)>>2)];
 var $17=$16&1;
 var $phitmp=($17|0)==0;
 if($phitmp){label=72;break;}else{label=4;break;}
 case 4: 
 var $19=($10|0)==0;
 if($19){label=5;break;}else{label=9;break;}
 case 5: 
 var $21=($nb>>>0)<256;
 if($21){var $newp_0=0;label=73;break;}else{label=6;break;}
 case 6: 
 var $23=((($nb)+(4))|0);
 var $24=($3>>>0)<($23>>>0);
 if($24){label=8;break;}else{label=7;break;}
 case 7: 
 var $26=((($3)-($nb))|0);
 var $27=HEAP32[((141048)>>2)];
 var $28=$27<<1;
 var $29=($26>>>0)>($28>>>0);
 if($29){label=8;break;}else{var $newp_0=$p;label=73;break;}
 case 8: 
 var $newp_0=0;label=73;break;
 case 9: 
 var $32=($3>>>0)<($nb>>>0);
 if($32){label=12;break;}else{label=10;break;}
 case 10: 
 var $34=((($3)-($nb))|0);
 var $35=($34>>>0)>15;
 if($35){label=11;break;}else{var $newp_0=$p;label=73;break;}
 case 11: 
 var $37=(($4+$nb)|0);
 var $38=$37;
 var $39=$2&1;
 var $40=$39|$nb;
 var $41=$40|2;
 HEAP32[(($1)>>2)]=$41;
 var $_sum29=((($nb)+(4))|0);
 var $42=(($4+$_sum29)|0);
 var $43=$42;
 var $44=$34|3;
 HEAP32[(($43)>>2)]=$44;
 var $45=HEAP32[(($15)>>2)];
 var $46=$45|1;
 HEAP32[(($15)>>2)]=$46;
 _dispose_chunk($38,$34);
 var $newp_0=$p;label=73;break;
 case 12: 
 var $48=HEAP32[((141136)>>2)];
 var $49=($6|0)==($48|0);
 if($49){label=13;break;}else{label=15;break;}
 case 13: 
 var $51=HEAP32[((141124)>>2)];
 var $52=((($51)+($3))|0);
 var $53=($52>>>0)>($nb>>>0);
 if($53){label=14;break;}else{var $newp_0=0;label=73;break;}
 case 14: 
 var $55=((($52)-($nb))|0);
 var $56=(($4+$nb)|0);
 var $57=$56;
 var $58=$2&1;
 var $59=$58|$nb;
 var $60=$59|2;
 HEAP32[(($1)>>2)]=$60;
 var $_sum28=((($nb)+(4))|0);
 var $61=(($4+$_sum28)|0);
 var $62=$61;
 var $63=$55|1;
 HEAP32[(($62)>>2)]=$63;
 HEAP32[((141136)>>2)]=$57;
 HEAP32[((141124)>>2)]=$55;
 var $newp_0=$p;label=73;break;
 case 15: 
 var $65=HEAP32[((141132)>>2)];
 var $66=($6|0)==($65|0);
 if($66){label=16;break;}else{label=21;break;}
 case 16: 
 var $68=HEAP32[((141120)>>2)];
 var $69=((($68)+($3))|0);
 var $70=($69>>>0)<($nb>>>0);
 if($70){var $newp_0=0;label=73;break;}else{label=17;break;}
 case 17: 
 var $72=((($69)-($nb))|0);
 var $73=($72>>>0)>15;
 if($73){label=18;break;}else{label=19;break;}
 case 18: 
 var $75=(($4+$nb)|0);
 var $76=$75;
 var $77=(($4+$69)|0);
 var $78=$2&1;
 var $79=$78|$nb;
 var $80=$79|2;
 HEAP32[(($1)>>2)]=$80;
 var $_sum25=((($nb)+(4))|0);
 var $81=(($4+$_sum25)|0);
 var $82=$81;
 var $83=$72|1;
 HEAP32[(($82)>>2)]=$83;
 var $84=$77;
 HEAP32[(($84)>>2)]=$72;
 var $_sum26=((($69)+(4))|0);
 var $85=(($4+$_sum26)|0);
 var $86=$85;
 var $87=HEAP32[(($86)>>2)];
 var $88=$87&-2;
 HEAP32[(($86)>>2)]=$88;
 var $storemerge=$76;var $storemerge27=$72;label=20;break;
 case 19: 
 var $90=$2&1;
 var $91=$90|$69;
 var $92=$91|2;
 HEAP32[(($1)>>2)]=$92;
 var $_sum23=((($69)+(4))|0);
 var $93=(($4+$_sum23)|0);
 var $94=$93;
 var $95=HEAP32[(($94)>>2)];
 var $96=$95|1;
 HEAP32[(($94)>>2)]=$96;
 var $storemerge=0;var $storemerge27=0;label=20;break;
 case 20: 
 var $storemerge27;
 var $storemerge;
 HEAP32[((141120)>>2)]=$storemerge27;
 HEAP32[((141132)>>2)]=$storemerge;
 var $newp_0=$p;label=73;break;
 case 21: 
 var $99=$16&2;
 var $100=($99|0)==0;
 if($100){label=22;break;}else{var $newp_0=0;label=73;break;}
 case 22: 
 var $102=$16&-8;
 var $103=((($102)+($3))|0);
 var $104=($103>>>0)<($nb>>>0);
 if($104){var $newp_0=0;label=73;break;}else{label=23;break;}
 case 23: 
 var $106=((($103)-($nb))|0);
 var $107=$16>>>3;
 var $108=($16>>>0)<256;
 if($108){label=24;break;}else{label=36;break;}
 case 24: 
 var $_sum17=((($3)+(8))|0);
 var $110=(($4+$_sum17)|0);
 var $111=$110;
 var $112=HEAP32[(($111)>>2)];
 var $_sum18=((($3)+(12))|0);
 var $113=(($4+$_sum18)|0);
 var $114=$113;
 var $115=HEAP32[(($114)>>2)];
 var $116=$107<<1;
 var $117=((141152+($116<<2))|0);
 var $118=$117;
 var $119=($112|0)==($118|0);
 if($119){label=27;break;}else{label=25;break;}
 case 25: 
 var $121=$112;
 var $122=($121>>>0)<($7>>>0);
 if($122){label=35;break;}else{label=26;break;}
 case 26: 
 var $124=(($112+12)|0);
 var $125=HEAP32[(($124)>>2)];
 var $126=($125|0)==($6|0);
 if($126){label=27;break;}else{label=35;break;}
 case 27: 
 var $127=($115|0)==($112|0);
 if($127){label=28;break;}else{label=29;break;}
 case 28: 
 var $129=1<<$107;
 var $130=$129^-1;
 var $131=HEAP32[((141112)>>2)];
 var $132=$131&$130;
 HEAP32[((141112)>>2)]=$132;
 label=69;break;
 case 29: 
 var $134=($115|0)==($118|0);
 if($134){label=30;break;}else{label=31;break;}
 case 30: 
 var $_pre=(($115+8)|0);
 var $_pre_phi=$_pre;label=33;break;
 case 31: 
 var $136=$115;
 var $137=($136>>>0)<($7>>>0);
 if($137){label=34;break;}else{label=32;break;}
 case 32: 
 var $139=(($115+8)|0);
 var $140=HEAP32[(($139)>>2)];
 var $141=($140|0)==($6|0);
 if($141){var $_pre_phi=$139;label=33;break;}else{label=34;break;}
 case 33: 
 var $_pre_phi;
 var $142=(($112+12)|0);
 HEAP32[(($142)>>2)]=$115;
 HEAP32[(($_pre_phi)>>2)]=$112;
 label=69;break;
 case 34: 
 _abort();
 throw "Reached an unreachable!";
 case 35: 
 _abort();
 throw "Reached an unreachable!";
 case 36: 
 var $144=$5;
 var $_sum=((($3)+(24))|0);
 var $145=(($4+$_sum)|0);
 var $146=$145;
 var $147=HEAP32[(($146)>>2)];
 var $_sum2=((($3)+(12))|0);
 var $148=(($4+$_sum2)|0);
 var $149=$148;
 var $150=HEAP32[(($149)>>2)];
 var $151=($150|0)==($144|0);
 if($151){label=42;break;}else{label=37;break;}
 case 37: 
 var $_sum14=((($3)+(8))|0);
 var $153=(($4+$_sum14)|0);
 var $154=$153;
 var $155=HEAP32[(($154)>>2)];
 var $156=$155;
 var $157=($156>>>0)<($7>>>0);
 if($157){label=41;break;}else{label=38;break;}
 case 38: 
 var $159=(($155+12)|0);
 var $160=HEAP32[(($159)>>2)];
 var $161=($160|0)==($144|0);
 if($161){label=39;break;}else{label=41;break;}
 case 39: 
 var $163=(($150+8)|0);
 var $164=HEAP32[(($163)>>2)];
 var $165=($164|0)==($144|0);
 if($165){label=40;break;}else{label=41;break;}
 case 40: 
 HEAP32[(($159)>>2)]=$150;
 HEAP32[(($163)>>2)]=$155;
 var $R_1=$150;label=49;break;
 case 41: 
 _abort();
 throw "Reached an unreachable!";
 case 42: 
 var $_sum4=((($3)+(20))|0);
 var $168=(($4+$_sum4)|0);
 var $169=$168;
 var $170=HEAP32[(($169)>>2)];
 var $171=($170|0)==0;
 if($171){label=43;break;}else{var $R_0=$170;var $RP_0=$169;label=44;break;}
 case 43: 
 var $_sum3=((($3)+(16))|0);
 var $173=(($4+$_sum3)|0);
 var $174=$173;
 var $175=HEAP32[(($174)>>2)];
 var $176=($175|0)==0;
 if($176){var $R_1=0;label=49;break;}else{var $R_0=$175;var $RP_0=$174;label=44;break;}
 case 44: 
 var $RP_0;
 var $R_0;
 var $177=(($R_0+20)|0);
 var $178=HEAP32[(($177)>>2)];
 var $179=($178|0)==0;
 if($179){label=45;break;}else{var $R_0=$178;var $RP_0=$177;label=44;break;}
 case 45: 
 var $181=(($R_0+16)|0);
 var $182=HEAP32[(($181)>>2)];
 var $183=($182|0)==0;
 if($183){label=46;break;}else{var $R_0=$182;var $RP_0=$181;label=44;break;}
 case 46: 
 var $185=$RP_0;
 var $186=($185>>>0)<($7>>>0);
 if($186){label=48;break;}else{label=47;break;}
 case 47: 
 HEAP32[(($RP_0)>>2)]=0;
 var $R_1=$R_0;label=49;break;
 case 48: 
 _abort();
 throw "Reached an unreachable!";
 case 49: 
 var $R_1;
 var $190=($147|0)==0;
 if($190){label=69;break;}else{label=50;break;}
 case 50: 
 var $_sum11=((($3)+(28))|0);
 var $192=(($4+$_sum11)|0);
 var $193=$192;
 var $194=HEAP32[(($193)>>2)];
 var $195=((141416+($194<<2))|0);
 var $196=HEAP32[(($195)>>2)];
 var $197=($144|0)==($196|0);
 if($197){label=51;break;}else{label=53;break;}
 case 51: 
 HEAP32[(($195)>>2)]=$R_1;
 var $cond=($R_1|0)==0;
 if($cond){label=52;break;}else{label=59;break;}
 case 52: 
 var $199=1<<$194;
 var $200=$199^-1;
 var $201=HEAP32[((141116)>>2)];
 var $202=$201&$200;
 HEAP32[((141116)>>2)]=$202;
 label=69;break;
 case 53: 
 var $204=$147;
 var $205=HEAP32[((141128)>>2)];
 var $206=($204>>>0)<($205>>>0);
 if($206){label=57;break;}else{label=54;break;}
 case 54: 
 var $208=(($147+16)|0);
 var $209=HEAP32[(($208)>>2)];
 var $210=($209|0)==($144|0);
 if($210){label=55;break;}else{label=56;break;}
 case 55: 
 HEAP32[(($208)>>2)]=$R_1;
 label=58;break;
 case 56: 
 var $213=(($147+20)|0);
 HEAP32[(($213)>>2)]=$R_1;
 label=58;break;
 case 57: 
 _abort();
 throw "Reached an unreachable!";
 case 58: 
 var $216=($R_1|0)==0;
 if($216){label=69;break;}else{label=59;break;}
 case 59: 
 var $218=$R_1;
 var $219=HEAP32[((141128)>>2)];
 var $220=($218>>>0)<($219>>>0);
 if($220){label=68;break;}else{label=60;break;}
 case 60: 
 var $222=(($R_1+24)|0);
 HEAP32[(($222)>>2)]=$147;
 var $_sum12=((($3)+(16))|0);
 var $223=(($4+$_sum12)|0);
 var $224=$223;
 var $225=HEAP32[(($224)>>2)];
 var $226=($225|0)==0;
 if($226){label=64;break;}else{label=61;break;}
 case 61: 
 var $228=$225;
 var $229=HEAP32[((141128)>>2)];
 var $230=($228>>>0)<($229>>>0);
 if($230){label=63;break;}else{label=62;break;}
 case 62: 
 var $232=(($R_1+16)|0);
 HEAP32[(($232)>>2)]=$225;
 var $233=(($225+24)|0);
 HEAP32[(($233)>>2)]=$R_1;
 label=64;break;
 case 63: 
 _abort();
 throw "Reached an unreachable!";
 case 64: 
 var $_sum13=((($3)+(20))|0);
 var $236=(($4+$_sum13)|0);
 var $237=$236;
 var $238=HEAP32[(($237)>>2)];
 var $239=($238|0)==0;
 if($239){label=69;break;}else{label=65;break;}
 case 65: 
 var $241=$238;
 var $242=HEAP32[((141128)>>2)];
 var $243=($241>>>0)<($242>>>0);
 if($243){label=67;break;}else{label=66;break;}
 case 66: 
 var $245=(($R_1+20)|0);
 HEAP32[(($245)>>2)]=$238;
 var $246=(($238+24)|0);
 HEAP32[(($246)>>2)]=$R_1;
 label=69;break;
 case 67: 
 _abort();
 throw "Reached an unreachable!";
 case 68: 
 _abort();
 throw "Reached an unreachable!";
 case 69: 
 var $250=($106>>>0)<16;
 if($250){label=70;break;}else{label=71;break;}
 case 70: 
 var $252=HEAP32[(($1)>>2)];
 var $253=$252&1;
 var $254=$103|$253;
 var $255=$254|2;
 HEAP32[(($1)>>2)]=$255;
 var $_sum910=$103|4;
 var $256=(($4+$_sum910)|0);
 var $257=$256;
 var $258=HEAP32[(($257)>>2)];
 var $259=$258|1;
 HEAP32[(($257)>>2)]=$259;
 var $newp_0=$p;label=73;break;
 case 71: 
 var $261=(($4+$nb)|0);
 var $262=$261;
 var $263=HEAP32[(($1)>>2)];
 var $264=$263&1;
 var $265=$264|$nb;
 var $266=$265|2;
 HEAP32[(($1)>>2)]=$266;
 var $_sum5=((($nb)+(4))|0);
 var $267=(($4+$_sum5)|0);
 var $268=$267;
 var $269=$106|3;
 HEAP32[(($268)>>2)]=$269;
 var $_sum78=$103|4;
 var $270=(($4+$_sum78)|0);
 var $271=$270;
 var $272=HEAP32[(($271)>>2)];
 var $273=$272|1;
 HEAP32[(($271)>>2)]=$273;
 _dispose_chunk($262,$106);
 var $newp_0=$p;label=73;break;
 case 72: 
 _abort();
 throw "Reached an unreachable!";
 case 73: 
 var $newp_0;
 return $newp_0;
  default: assert(0, "bad label: " + label);
 }

}


function _realloc_in_place($oldmem,$bytes){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($oldmem|0)==0;
 if($1){label=7;break;}else{label=2;break;}
 case 2: 
 var $3=($bytes>>>0)>4294967231;
 if($3){label=3;break;}else{label=4;break;}
 case 3: 
 var $5=___errno_location();
 HEAP32[(($5)>>2)]=12;
 label=7;break;
 case 4: 
 var $7=($bytes>>>0)<11;
 if($7){var $12=16;label=6;break;}else{label=5;break;}
 case 5: 
 var $9=((($bytes)+(11))|0);
 var $10=$9&-8;
 var $12=$10;label=6;break;
 case 6: 
 var $12;
 var $13=((($oldmem)-(8))|0);
 var $14=$13;
 var $15=_try_realloc_chunk($14,$12);
 var $16=($15|0)==($14|0);
 var $oldmem_=($16?$oldmem:0);
 return $oldmem_;
 case 7: 
 return 0;
  default: assert(0, "bad label: " + label);
 }

}


function _memalign($alignment,$bytes){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($alignment>>>0)<9;
 if($1){label=2;break;}else{label=3;break;}
 case 2: 
 var $3=_malloc($bytes);
 var $_0=$3;label=4;break;
 case 3: 
 var $5=_internal_memalign($alignment,$bytes);
 var $_0=$5;label=4;break;
 case 4: 
 var $_0;
 return $_0;
  default: assert(0, "bad label: " + label);
 }

}


function _internal_memalign($alignment,$bytes){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($alignment>>>0)<16;
 var $_alignment=($1?16:$alignment);
 var $2=((($_alignment)-(1))|0);
 var $3=$2&$_alignment;
 var $4=($3|0)==0;
 if($4){var $_1=$_alignment;label=3;break;}else{var $a_0=16;label=2;break;}
 case 2: 
 var $a_0;
 var $5=($a_0>>>0)<($_alignment>>>0);
 var $6=$a_0<<1;
 if($5){var $a_0=$6;label=2;break;}else{var $_1=$a_0;label=3;break;}
 case 3: 
 var $_1;
 var $7=(((-64)-($_1))|0);
 var $8=($7>>>0)>($bytes>>>0);
 if($8){label=5;break;}else{label=4;break;}
 case 4: 
 var $10=___errno_location();
 HEAP32[(($10)>>2)]=12;
 var $mem_0=0;label=18;break;
 case 5: 
 var $12=($bytes>>>0)<11;
 if($12){var $17=16;label=7;break;}else{label=6;break;}
 case 6: 
 var $14=((($bytes)+(11))|0);
 var $15=$14&-8;
 var $17=$15;label=7;break;
 case 7: 
 var $17;
 var $18=((($_1)+(12))|0);
 var $19=((($18)+($17))|0);
 var $20=_malloc($19);
 var $21=($20|0)==0;
 if($21){var $mem_0=0;label=18;break;}else{label=8;break;}
 case 8: 
 var $23=((($20)-(8))|0);
 var $24=$23;
 var $25=$20;
 var $26=((($_1)-(1))|0);
 var $27=$25&$26;
 var $28=($27|0)==0;
 if($28){var $p_0=$24;label=14;break;}else{label=9;break;}
 case 9: 
 var $30=(($20+$26)|0);
 var $31=$30;
 var $32=(((-$_1))|0);
 var $33=$31&$32;
 var $34=$33;
 var $35=((($34)-(8))|0);
 var $36=$35;
 var $37=$23;
 var $38=((($36)-($37))|0);
 var $39=($38>>>0)>15;
 if($39){var $43=$35;label=11;break;}else{label=10;break;}
 case 10: 
 var $_sum3=((($_1)-(8))|0);
 var $41=(($34+$_sum3)|0);
 var $43=$41;label=11;break;
 case 11: 
 var $43;
 var $44=$43;
 var $45=$43;
 var $46=((($45)-($37))|0);
 var $47=((($20)-(4))|0);
 var $48=$47;
 var $49=HEAP32[(($48)>>2)];
 var $50=$49&-8;
 var $51=((($50)-($46))|0);
 var $52=$49&3;
 var $53=($52|0)==0;
 if($53){label=12;break;}else{label=13;break;}
 case 12: 
 var $55=$23;
 var $56=HEAP32[(($55)>>2)];
 var $57=((($56)+($46))|0);
 var $58=$43;
 HEAP32[(($58)>>2)]=$57;
 var $59=(($43+4)|0);
 var $60=$59;
 HEAP32[(($60)>>2)]=$51;
 var $p_0=$44;label=14;break;
 case 13: 
 var $62=(($43+4)|0);
 var $63=$62;
 var $64=HEAP32[(($63)>>2)];
 var $65=$64&1;
 var $66=$51|$65;
 var $67=$66|2;
 HEAP32[(($63)>>2)]=$67;
 var $_sum4=((($51)+(4))|0);
 var $68=(($43+$_sum4)|0);
 var $69=$68;
 var $70=HEAP32[(($69)>>2)];
 var $71=$70|1;
 HEAP32[(($69)>>2)]=$71;
 var $72=HEAP32[(($48)>>2)];
 var $73=$72&1;
 var $74=$46|$73;
 var $75=$74|2;
 HEAP32[(($48)>>2)]=$75;
 var $_sum6=((($46)-(4))|0);
 var $76=(($20+$_sum6)|0);
 var $77=$76;
 var $78=HEAP32[(($77)>>2)];
 var $79=$78|1;
 HEAP32[(($77)>>2)]=$79;
 _dispose_chunk($24,$46);
 var $p_0=$44;label=14;break;
 case 14: 
 var $p_0;
 var $81=(($p_0+4)|0);
 var $82=HEAP32[(($81)>>2)];
 var $83=$82&3;
 var $84=($83|0)==0;
 if($84){label=17;break;}else{label=15;break;}
 case 15: 
 var $86=$82&-8;
 var $87=((($17)+(16))|0);
 var $88=($86>>>0)>($87>>>0);
 if($88){label=16;break;}else{label=17;break;}
 case 16: 
 var $90=((($86)-($17))|0);
 var $91=$p_0;
 var $92=(($91+$17)|0);
 var $93=$92;
 var $94=$82&1;
 var $95=$17|$94;
 var $96=$95|2;
 HEAP32[(($81)>>2)]=$96;
 var $_sum1=$17|4;
 var $97=(($91+$_sum1)|0);
 var $98=$97;
 var $99=$90|3;
 HEAP32[(($98)>>2)]=$99;
 var $_sum2=$86|4;
 var $100=(($91+$_sum2)|0);
 var $101=$100;
 var $102=HEAP32[(($101)>>2)];
 var $103=$102|1;
 HEAP32[(($101)>>2)]=$103;
 _dispose_chunk($93,$90);
 label=17;break;
 case 17: 
 var $105=(($p_0+8)|0);
 var $106=$105;
 var $mem_0=$106;label=18;break;
 case 18: 
 var $mem_0;
 return $mem_0;
  default: assert(0, "bad label: " + label);
 }

}


function _posix_memalign($pp,$alignment,$bytes){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($alignment|0)==8;
 if($1){label=2;break;}else{label=3;break;}
 case 2: 
 var $3=_malloc($bytes);
 var $mem_0=$3;label=7;break;
 case 3: 
 var $5=$alignment>>>2;
 var $6=$alignment&3;
 var $7=($6|0)!=0;
 var $8=($5|0)==0;
 var $or_cond=$7|$8;
 if($or_cond){var $_0=22;label=9;break;}else{label=4;break;}
 case 4: 
 var $10=((($5)+(1073741823))|0);
 var $11=$10&$5;
 var $12=($11|0)==0;
 if($12){label=5;break;}else{var $_0=22;label=9;break;}
 case 5: 
 var $14=(((-64)-($alignment))|0);
 var $15=($14>>>0)<($bytes>>>0);
 if($15){var $_0=12;label=9;break;}else{label=6;break;}
 case 6: 
 var $17=($alignment>>>0)<16;
 var $_alignment=($17?16:$alignment);
 var $18=_internal_memalign($_alignment,$bytes);
 var $mem_0=$18;label=7;break;
 case 7: 
 var $mem_0;
 var $20=($mem_0|0)==0;
 if($20){var $_0=12;label=9;break;}else{label=8;break;}
 case 8: 
 HEAP32[(($pp)>>2)]=$mem_0;
 var $_0=0;label=9;break;
 case 9: 
 var $_0;
 return $_0;
  default: assert(0, "bad label: " + label);
 }

}


function _valloc($bytes){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=HEAP32[((141040)>>2)];
 var $2=($1|0)==0;
 if($2){label=2;break;}else{label=5;break;}
 case 2: 
 var $4=_sysconf(30);
 var $5=((($4)-(1))|0);
 var $6=$5&$4;
 var $7=($6|0)==0;
 if($7){label=4;break;}else{label=3;break;}
 case 3: 
 _abort();
 throw "Reached an unreachable!";
 case 4: 
 HEAP32[((141048)>>2)]=$4;
 HEAP32[((141044)>>2)]=$4;
 HEAP32[((141052)>>2)]=-1;
 HEAP32[((141056)>>2)]=-1;
 HEAP32[((141060)>>2)]=0;
 HEAP32[((141556)>>2)]=0;
 var $9=_time(0);
 var $10=$9&-16;
 var $11=$10^1431655768;
 HEAP32[((141040)>>2)]=$11;
 label=5;break;
 case 5: 
 var $13=HEAP32[((141044)>>2)];
 var $14=_memalign($13,$bytes);
 return $14;
  default: assert(0, "bad label: " + label);
 }

}


function _pvalloc($bytes){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=HEAP32[((141040)>>2)];
 var $2=($1|0)==0;
 if($2){label=2;break;}else{label=5;break;}
 case 2: 
 var $4=_sysconf(30);
 var $5=((($4)-(1))|0);
 var $6=$5&$4;
 var $7=($6|0)==0;
 if($7){label=4;break;}else{label=3;break;}
 case 3: 
 _abort();
 throw "Reached an unreachable!";
 case 4: 
 HEAP32[((141048)>>2)]=$4;
 HEAP32[((141044)>>2)]=$4;
 HEAP32[((141052)>>2)]=-1;
 HEAP32[((141056)>>2)]=-1;
 HEAP32[((141060)>>2)]=0;
 HEAP32[((141556)>>2)]=0;
 var $9=_time(0);
 var $10=$9&-16;
 var $11=$10^1431655768;
 HEAP32[((141040)>>2)]=$11;
 label=5;break;
 case 5: 
 var $13=HEAP32[((141044)>>2)];
 var $14=((($bytes)-(1))|0);
 var $15=((($14)+($13))|0);
 var $16=(((-$13))|0);
 var $17=$15&$16;
 var $18=_memalign($13,$17);
 return $18;
  default: assert(0, "bad label: " + label);
 }

}


function _independent_calloc($n_elements,$elem_size,$chunks){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $sz=sp;
 HEAP32[(($sz)>>2)]=$elem_size;
 var $1=_ialloc($n_elements,$sz,3,$chunks);
 STACKTOP=sp;return $1;
}


function _ialloc($n_elements,$sizes,$opts,$chunks){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=HEAP32[((141040)>>2)];
 var $2=($1|0)==0;
 if($2){label=2;break;}else{label=5;break;}
 case 2: 
 var $4=_sysconf(30);
 var $5=((($4)-(1))|0);
 var $6=$5&$4;
 var $7=($6|0)==0;
 if($7){label=4;break;}else{label=3;break;}
 case 3: 
 _abort();
 throw "Reached an unreachable!";
 case 4: 
 HEAP32[((141048)>>2)]=$4;
 HEAP32[((141044)>>2)]=$4;
 HEAP32[((141052)>>2)]=-1;
 HEAP32[((141056)>>2)]=-1;
 HEAP32[((141060)>>2)]=0;
 HEAP32[((141556)>>2)]=0;
 var $9=_time(0);
 var $10=$9&-16;
 var $11=$10^1431655768;
 HEAP32[((141040)>>2)]=$11;
 label=5;break;
 case 5: 
 var $13=($chunks|0)==0;
 var $14=($n_elements|0)==0;
 if($13){label=7;break;}else{label=6;break;}
 case 6: 
 if($14){var $_0=$chunks;label=31;break;}else{var $marray_0=$chunks;var $array_size_0=0;label=11;break;}
 case 7: 
 if($14){label=8;break;}else{label=9;break;}
 case 8: 
 var $18=_malloc(0);
 var $19=$18;
 var $_0=$19;label=31;break;
 case 9: 
 var $21=$n_elements<<2;
 var $22=($21>>>0)<11;
 if($22){var $marray_0=0;var $array_size_0=16;label=11;break;}else{label=10;break;}
 case 10: 
 var $24=((($21)+(11))|0);
 var $25=$24&-8;
 var $marray_0=0;var $array_size_0=$25;label=11;break;
 case 11: 
 var $array_size_0;
 var $marray_0;
 var $27=$opts&1;
 var $28=($27|0)==0;
 if($28){label=12;break;}else{label=13;break;}
 case 12: 
 if($14){var $element_size_0=0;var $contents_size_1=0;label=19;break;}else{var $contents_size_07=0;var $i_08=0;label=16;break;}
 case 13: 
 var $30=HEAP32[(($sizes)>>2)];
 var $31=($30>>>0)<11;
 if($31){var $36=16;label=15;break;}else{label=14;break;}
 case 14: 
 var $33=((($30)+(11))|0);
 var $34=$33&-8;
 var $36=$34;label=15;break;
 case 15: 
 var $36;
 var $37=(Math_imul($36,$n_elements)|0);
 var $element_size_0=$36;var $contents_size_1=$37;label=19;break;
 case 16: 
 var $i_08;
 var $contents_size_07;
 var $38=(($sizes+($i_08<<2))|0);
 var $39=HEAP32[(($38)>>2)];
 var $40=($39>>>0)<11;
 if($40){var $45=16;label=18;break;}else{label=17;break;}
 case 17: 
 var $42=((($39)+(11))|0);
 var $43=$42&-8;
 var $45=$43;label=18;break;
 case 18: 
 var $45;
 var $46=((($45)+($contents_size_07))|0);
 var $47=((($i_08)+(1))|0);
 var $48=($47|0)==($n_elements|0);
 if($48){var $element_size_0=0;var $contents_size_1=$46;label=19;break;}else{var $contents_size_07=$46;var $i_08=$47;label=16;break;}
 case 19: 
 var $contents_size_1;
 var $element_size_0;
 var $49=((($array_size_0)-(4))|0);
 var $50=((($49)+($contents_size_1))|0);
 var $51=_malloc($50);
 var $52=($51|0)==0;
 if($52){var $_0=0;label=31;break;}else{label=20;break;}
 case 20: 
 var $54=((($51)-(8))|0);
 var $55=((($51)-(4))|0);
 var $56=$55;
 var $57=HEAP32[(($56)>>2)];
 var $58=$57&-8;
 var $59=$opts&2;
 var $60=($59|0)==0;
 if($60){label=22;break;}else{label=21;break;}
 case 21: 
 var $62=(((-4)-($array_size_0))|0);
 var $63=((($62)+($58))|0);
 _memset($51, 0, $63)|0;
 label=22;break;
 case 22: 
 var $65=($marray_0|0)==0;
 if($65){label=23;break;}else{var $marray_1=$marray_0;var $remainder_size_0=$58;label=24;break;}
 case 23: 
 var $67=((($58)-($contents_size_1))|0);
 var $68=(($51+$contents_size_1)|0);
 var $69=$68;
 var $70=$67|3;
 var $_sum2=((($contents_size_1)-(4))|0);
 var $71=(($51+$_sum2)|0);
 var $72=$71;
 HEAP32[(($72)>>2)]=$70;
 var $marray_1=$69;var $remainder_size_0=$contents_size_1;label=24;break;
 case 24: 
 var $remainder_size_0;
 var $marray_1;
 HEAP32[(($marray_1)>>2)]=$51;
 var $74=((($n_elements)-(1))|0);
 var $75=($74|0)==0;
 if($75){var $p_0_in_lcssa=$54;var $remainder_size_1_lcssa=$remainder_size_0;label=30;break;}else{label=25;break;}
 case 25: 
 var $76=($element_size_0|0)==0;
 if($76){var $p_0_in3_us=$54;var $remainder_size_14_us=$remainder_size_0;var $i_15_us=0;label=26;break;}else{var $p_0_in3=$54;var $remainder_size_14=$remainder_size_0;var $i_15=0;label=29;break;}
 case 26: 
 var $i_15_us;
 var $remainder_size_14_us;
 var $p_0_in3_us;
 var $77=(($sizes+($i_15_us<<2))|0);
 var $78=HEAP32[(($77)>>2)];
 var $79=($78>>>0)<11;
 if($79){var $size_0_us=16;label=28;break;}else{label=27;break;}
 case 27: 
 var $81=((($78)+(11))|0);
 var $82=$81&-8;
 var $size_0_us=$82;label=28;break;
 case 28: 
 var $size_0_us;
 var $84=((($remainder_size_14_us)-($size_0_us))|0);
 var $85=$size_0_us|3;
 var $86=(($p_0_in3_us+4)|0);
 var $87=$86;
 HEAP32[(($87)>>2)]=$85;
 var $88=(($p_0_in3_us+$size_0_us)|0);
 var $89=((($i_15_us)+(1))|0);
 var $_sum11=((($size_0_us)+(8))|0);
 var $90=(($p_0_in3_us+$_sum11)|0);
 var $91=(($marray_1+($89<<2))|0);
 HEAP32[(($91)>>2)]=$90;
 var $92=($89|0)==($74|0);
 if($92){var $p_0_in_lcssa=$88;var $remainder_size_1_lcssa=$84;label=30;break;}else{var $p_0_in3_us=$88;var $remainder_size_14_us=$84;var $i_15_us=$89;label=26;break;}
 case 29: 
 var $i_15;
 var $remainder_size_14;
 var $p_0_in3;
 var $94=((($remainder_size_14)-($element_size_0))|0);
 var $95=$element_size_0|3;
 var $96=(($p_0_in3+4)|0);
 var $97=$96;
 HEAP32[(($97)>>2)]=$95;
 var $98=(($p_0_in3+$element_size_0)|0);
 var $99=((($i_15)+(1))|0);
 var $_sum=((($element_size_0)+(8))|0);
 var $100=(($p_0_in3+$_sum)|0);
 var $101=(($marray_1+($99<<2))|0);
 HEAP32[(($101)>>2)]=$100;
 var $102=($99|0)==($74|0);
 if($102){var $p_0_in_lcssa=$98;var $remainder_size_1_lcssa=$94;label=30;break;}else{var $p_0_in3=$98;var $remainder_size_14=$94;var $i_15=$99;label=29;break;}
 case 30: 
 var $remainder_size_1_lcssa;
 var $p_0_in_lcssa;
 var $103=$remainder_size_1_lcssa|3;
 var $104=(($p_0_in_lcssa+4)|0);
 var $105=$104;
 HEAP32[(($105)>>2)]=$103;
 var $_0=$marray_1;label=31;break;
 case 31: 
 var $_0;
 return $_0;
  default: assert(0, "bad label: " + label);
 }

}


function _independent_comalloc($n_elements,$sizes,$chunks){
 var label=0;


 var $1=_ialloc($n_elements,$sizes,0,$chunks);
 return $1;
}


function _bulk_free($array,$nelem){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($array+($nelem<<2))|0);
 var $2=($nelem|0)==0;
 if($2){label=12;break;}else{var $a_07_i=$array;label=2;break;}
 case 2: 
 var $a_07_i;
 var $3=HEAP32[(($a_07_i)>>2)];
 var $4=($3|0)==0;
 if($4){label=3;break;}else{label=4;break;}
 case 3: 
 var $_pre_i=(($a_07_i+4)|0);
 var $_pre_phi_i=$_pre_i;label=11;break;
 case 4: 
 var $6=((($3)-(8))|0);
 var $7=$6;
 var $8=((($3)-(4))|0);
 var $9=$8;
 var $10=HEAP32[(($9)>>2)];
 var $11=$10&-8;
 HEAP32[(($a_07_i)>>2)]=0;
 var $12=HEAP32[((141128)>>2)];
 var $13=($6>>>0)<($12>>>0);
 if($13){label=10;break;}else{label=5;break;}
 case 5: 
 var $15=$10&3;
 var $16=($15|0)==1;
 if($16){label=10;break;}else{label=6;break;}
 case 6: 
 var $18=(($a_07_i+4)|0);
 var $19=((($10)-(8))|0);
 var $_sum_i=$19&-8;
 var $20=($18|0)==($1|0);
 if($20){label=9;break;}else{label=7;break;}
 case 7: 
 var $22=HEAP32[(($18)>>2)];
 var $_sum2_i=((($_sum_i)+(8))|0);
 var $23=(($3+$_sum2_i)|0);
 var $24=($22|0)==($23|0);
 if($24){label=8;break;}else{label=9;break;}
 case 8: 
 var $_sum34_i=$_sum_i|4;
 var $26=(($3+$_sum34_i)|0);
 var $27=$26;
 var $28=HEAP32[(($27)>>2)];
 var $29=$28&-8;
 var $30=((($29)+($11))|0);
 var $31=$10&1;
 var $32=$31|$30;
 var $33=$32|2;
 HEAP32[(($9)>>2)]=$33;
 var $_sum6_i=((($30)-(4))|0);
 var $34=(($3+$_sum6_i)|0);
 var $35=$34;
 var $36=HEAP32[(($35)>>2)];
 var $37=$36|1;
 HEAP32[(($35)>>2)]=$37;
 HEAP32[(($18)>>2)]=$3;
 var $_pre_phi_i=$18;label=11;break;
 case 9: 
 _dispose_chunk($7,$11);
 var $_pre_phi_i=$18;label=11;break;
 case 10: 
 _abort();
 throw "Reached an unreachable!";
 case 11: 
 var $_pre_phi_i;
 var $40=($_pre_phi_i|0)==($1|0);
 if($40){label=12;break;}else{var $a_07_i=$_pre_phi_i;label=2;break;}
 case 12: 
 return 0;
  default: assert(0, "bad label: " + label);
 }

}


function _malloc_trim($pad){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=HEAP32[((141040)>>2)];
 var $2=($1|0)==0;
 if($2){label=2;break;}else{label=5;break;}
 case 2: 
 var $4=_sysconf(30);
 var $5=((($4)-(1))|0);
 var $6=$5&$4;
 var $7=($6|0)==0;
 if($7){label=4;break;}else{label=3;break;}
 case 3: 
 _abort();
 throw "Reached an unreachable!";
 case 4: 
 HEAP32[((141048)>>2)]=$4;
 HEAP32[((141044)>>2)]=$4;
 HEAP32[((141052)>>2)]=-1;
 HEAP32[((141056)>>2)]=-1;
 HEAP32[((141060)>>2)]=0;
 HEAP32[((141556)>>2)]=0;
 var $9=_time(0);
 var $10=$9&-16;
 var $11=$10^1431655768;
 HEAP32[((141040)>>2)]=$11;
 label=5;break;
 case 5: 
 var $13=($pad>>>0)<4294967232;
 if($13){label=6;break;}else{var $released_2_i=0;label=21;break;}
 case 6: 
 var $15=HEAP32[((141136)>>2)];
 var $16=($15|0)==0;
 if($16){var $released_2_i=0;label=21;break;}else{label=7;break;}
 case 7: 
 var $18=((($pad)+(40))|0);
 var $19=HEAP32[((141124)>>2)];
 var $20=($19>>>0)>($18>>>0);
 if($20){label=8;break;}else{label=19;break;}
 case 8: 
 var $22=HEAP32[((141048)>>2)];
 var $23=(((-41)-($pad))|0);
 var $24=((($23)+($19))|0);
 var $25=((($24)+($22))|0);
 var $26=(((($25>>>0))/(($22>>>0)))&-1);
 var $27=$15;
 var $sp_0_i_i=141560;label=9;break;
 case 9: 
 var $sp_0_i_i;
 var $29=(($sp_0_i_i)|0);
 var $30=HEAP32[(($29)>>2)];
 var $31=($30>>>0)>($27>>>0);
 if($31){label=11;break;}else{label=10;break;}
 case 10: 
 var $33=(($sp_0_i_i+4)|0);
 var $34=HEAP32[(($33)>>2)];
 var $35=(($30+$34)|0);
 var $36=($35>>>0)>($27>>>0);
 if($36){label=12;break;}else{label=11;break;}
 case 11: 
 var $38=(($sp_0_i_i+8)|0);
 var $39=HEAP32[(($38)>>2)];
 var $sp_0_i_i=$39;label=9;break;
 case 12: 
 var $40=((($26)-(1))|0);
 var $41=(Math_imul($40,$22)|0);
 var $42=(($sp_0_i_i+12)|0);
 var $43=HEAP32[(($42)>>2)];
 var $44=$43&8;
 var $45=($44|0)==0;
 if($45){label=13;break;}else{label=19;break;}
 case 13: 
 var $47=_sbrk(0);
 var $48=HEAP32[(($29)>>2)];
 var $49=HEAP32[(($33)>>2)];
 var $50=(($48+$49)|0);
 var $51=($47|0)==($50|0);
 if($51){label=14;break;}else{label=19;break;}
 case 14: 
 var $53=(((-2147483648)-($22))|0);
 var $54=($41>>>0)>2147483646;
 var $__i=($54?$53:$41);
 var $55=(((-$__i))|0);
 var $56=_sbrk($55);
 var $57=_sbrk(0);
 var $58=($56|0)!=-1;
 var $59=($57>>>0)<($47>>>0);
 var $or_cond_i=$58&$59;
 if($or_cond_i){label=15;break;}else{label=19;break;}
 case 15: 
 var $61=$47;
 var $62=$57;
 var $63=((($61)-($62))|0);
 var $64=($47|0)==($57|0);
 if($64){label=19;break;}else{label=16;break;}
 case 16: 
 var $66=HEAP32[(($33)>>2)];
 var $67=((($66)-($63))|0);
 HEAP32[(($33)>>2)]=$67;
 var $68=HEAP32[((141544)>>2)];
 var $69=((($68)-($63))|0);
 HEAP32[((141544)>>2)]=$69;
 var $70=HEAP32[((141136)>>2)];
 var $71=HEAP32[((141124)>>2)];
 var $72=((($71)-($63))|0);
 var $73=$70;
 var $74=(($70+8)|0);
 var $75=$74;
 var $76=$75&7;
 var $77=($76|0)==0;
 if($77){var $82=0;label=18;break;}else{label=17;break;}
 case 17: 
 var $79=(((-$75))|0);
 var $80=$79&7;
 var $82=$80;label=18;break;
 case 18: 
 var $82;
 var $83=(($73+$82)|0);
 var $84=$83;
 var $85=((($72)-($82))|0);
 HEAP32[((141136)>>2)]=$84;
 HEAP32[((141124)>>2)]=$85;
 var $86=$85|1;
 var $_sum_i_i=((($82)+(4))|0);
 var $87=(($73+$_sum_i_i)|0);
 var $88=$87;
 HEAP32[(($88)>>2)]=$86;
 var $_sum2_i_i=((($72)+(4))|0);
 var $89=(($73+$_sum2_i_i)|0);
 var $90=$89;
 HEAP32[(($90)>>2)]=40;
 var $91=HEAP32[((141056)>>2)];
 HEAP32[((141140)>>2)]=$91;
 var $released_2_i=1;label=21;break;
 case 19: 
 var $92=HEAP32[((141124)>>2)];
 var $93=HEAP32[((141140)>>2)];
 var $94=($92>>>0)>($93>>>0);
 if($94){label=20;break;}else{var $released_2_i=0;label=21;break;}
 case 20: 
 HEAP32[((141140)>>2)]=-1;
 var $released_2_i=0;label=21;break;
 case 21: 
 var $released_2_i;
 return $released_2_i;
  default: assert(0, "bad label: " + label);
 }

}


function _malloc_footprint(){
 var label=0;


 var $1=HEAP32[((141544)>>2)];
 return $1;
}


function _malloc_max_footprint(){
 var label=0;


 var $1=HEAP32[((141548)>>2)];
 return $1;
}


function _malloc_footprint_limit(){
 var label=0;


 var $1=HEAP32[((141552)>>2)];
 var $2=($1|0)==0;
 var $3=($2?-1:$1);
 return $3;
}


function _malloc_set_footprint_limit($bytes){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($bytes|0)==-1;
 if($1){var $result_0=0;label=3;break;}else{label=2;break;}
 case 2: 
 var $3=HEAP32[((141048)>>2)];
 var $4=((($bytes)-(1))|0);
 var $5=((($4)+($3))|0);
 var $6=(((-$3))|0);
 var $7=$5&$6;
 var $result_0=$7;label=3;break;
 case 3: 
 var $result_0;
 HEAP32[((141552)>>2)]=$result_0;
 return $result_0;
  default: assert(0, "bad label: " + label);
 }

}


function _mallinfo($agg_result){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=HEAP32[((141040)>>2)];
 var $2=($1|0)==0;
 if($2){label=2;break;}else{label=5;break;}
 case 2: 
 var $4=_sysconf(30);
 var $5=((($4)-(1))|0);
 var $6=$5&$4;
 var $7=($6|0)==0;
 if($7){label=4;break;}else{label=3;break;}
 case 3: 
 _abort();
 throw "Reached an unreachable!";
 case 4: 
 HEAP32[((141048)>>2)]=$4;
 HEAP32[((141044)>>2)]=$4;
 HEAP32[((141052)>>2)]=-1;
 HEAP32[((141056)>>2)]=-1;
 HEAP32[((141060)>>2)]=0;
 HEAP32[((141556)>>2)]=0;
 var $9=_time(0);
 var $10=$9&-16;
 var $11=$10^1431655768;
 HEAP32[((141040)>>2)]=$11;
 label=5;break;
 case 5: 
 var $13=HEAP32[((141136)>>2)];
 var $14=($13|0)==0;
 if($14){var $nm_sroa_8_0_i=0;var $nm_sroa_7_0_i=0;var $nm_sroa_0_0_i=0;var $nm_sroa_1_0_i=0;var $nm_sroa_3_0_i=0;var $nm_sroa_4_0_i=0;var $nm_sroa_6_0_i=0;label=17;break;}else{label=6;break;}
 case 6: 
 var $16=HEAP32[((141124)>>2)];
 var $17=((($16)+(40))|0);
 var $nfree_08_i=1;var $mfree_09_i=$17;var $sum_010_i=$17;var $s_011_i=141560;label=7;break;
 case 7: 
 var $s_011_i;
 var $sum_010_i;
 var $mfree_09_i;
 var $nfree_08_i;
 var $19=(($s_011_i)|0);
 var $20=HEAP32[(($19)>>2)];
 var $21=(($20+8)|0);
 var $22=$21;
 var $23=$22&7;
 var $24=($23|0)==0;
 if($24){var $28=0;label=9;break;}else{label=8;break;}
 case 8: 
 var $26=(((-$22))|0);
 var $27=$26&7;
 var $28=$27;label=9;break;
 case 9: 
 var $28;
 var $29=(($20+$28)|0);
 var $30=(($s_011_i+4)|0);
 var $31=HEAP32[(($30)>>2)];
 var $32=(($20+$31)|0);
 var $nfree_12_i=$nfree_08_i;var $mfree_13_i=$mfree_09_i;var $sum_14_i=$sum_010_i;var $q_0_in5_i=$29;label=10;break;
 case 10: 
 var $q_0_in5_i;
 var $sum_14_i;
 var $mfree_13_i;
 var $nfree_12_i;
 var $q_0_i=$q_0_in5_i;
 var $34=($q_0_in5_i>>>0)>=($32>>>0);
 var $35=($q_0_i|0)==($13|0);
 var $or_cond_i=$34|$35;
 if($or_cond_i){var $nfree_1_lcssa_i=$nfree_12_i;var $mfree_1_lcssa_i=$mfree_13_i;var $sum_1_lcssa_i=$sum_14_i;label=15;break;}else{label=11;break;}
 case 11: 
 var $37=(($q_0_in5_i+4)|0);
 var $38=$37;
 var $39=HEAP32[(($38)>>2)];
 var $40=($39|0)==7;
 if($40){var $nfree_1_lcssa_i=$nfree_12_i;var $mfree_1_lcssa_i=$mfree_13_i;var $sum_1_lcssa_i=$sum_14_i;label=15;break;}else{label=12;break;}
 case 12: 
 var $42=$39&-8;
 var $43=((($42)+($sum_14_i))|0);
 var $44=$39&3;
 var $45=($44|0)==1;
 if($45){label=13;break;}else{var $mfree_2_i=$mfree_13_i;var $nfree_2_i=$nfree_12_i;label=14;break;}
 case 13: 
 var $47=((($42)+($mfree_13_i))|0);
 var $48=((($nfree_12_i)+(1))|0);
 var $mfree_2_i=$47;var $nfree_2_i=$48;label=14;break;
 case 14: 
 var $nfree_2_i;
 var $mfree_2_i;
 var $50=(($q_0_in5_i+$42)|0);
 var $51=($50>>>0)<($20>>>0);
 if($51){var $nfree_1_lcssa_i=$nfree_2_i;var $mfree_1_lcssa_i=$mfree_2_i;var $sum_1_lcssa_i=$43;label=15;break;}else{var $nfree_12_i=$nfree_2_i;var $mfree_13_i=$mfree_2_i;var $sum_14_i=$43;var $q_0_in5_i=$50;label=10;break;}
 case 15: 
 var $sum_1_lcssa_i;
 var $mfree_1_lcssa_i;
 var $nfree_1_lcssa_i;
 var $52=(($s_011_i+8)|0);
 var $53=HEAP32[(($52)>>2)];
 var $54=($53|0)==0;
 if($54){label=16;break;}else{var $nfree_08_i=$nfree_1_lcssa_i;var $mfree_09_i=$mfree_1_lcssa_i;var $sum_010_i=$sum_1_lcssa_i;var $s_011_i=$53;label=7;break;}
 case 16: 
 var $56=HEAP32[((141544)>>2)];
 var $57=((($56)-($sum_1_lcssa_i))|0);
 var $58=HEAP32[((141548)>>2)];
 var $59=((($56)-($mfree_1_lcssa_i))|0);
 var $nm_sroa_8_0_i=$16;var $nm_sroa_7_0_i=$mfree_1_lcssa_i;var $nm_sroa_0_0_i=$sum_1_lcssa_i;var $nm_sroa_1_0_i=$nfree_1_lcssa_i;var $nm_sroa_3_0_i=$57;var $nm_sroa_4_0_i=$58;var $nm_sroa_6_0_i=$59;label=17;break;
 case 17: 
 var $nm_sroa_6_0_i;
 var $nm_sroa_4_0_i;
 var $nm_sroa_3_0_i;
 var $nm_sroa_1_0_i;
 var $nm_sroa_0_0_i;
 var $nm_sroa_7_0_i;
 var $nm_sroa_8_0_i;
 var $60=(($agg_result)|0);
 HEAP32[(($60)>>2)]=$nm_sroa_0_0_i;
 var $61=(($agg_result+4)|0);
 HEAP32[(($61)>>2)]=$nm_sroa_1_0_i;
 var $62=(($agg_result+8)|0);
 var $63=$62;
 var $$etemp$0$0=0;
 var $$etemp$0$1=0;
 var $st$1$0=(($63)|0);
 HEAP32[(($st$1$0)>>2)]=$$etemp$0$0;
 var $st$2$1=(($63+4)|0);
 HEAP32[(($st$2$1)>>2)]=$$etemp$0$1;
 var $64=(($agg_result+16)|0);
 HEAP32[(($64)>>2)]=$nm_sroa_3_0_i;
 var $65=(($agg_result+20)|0);
 HEAP32[(($65)>>2)]=$nm_sroa_4_0_i;
 var $66=(($agg_result+24)|0);
 HEAP32[(($66)>>2)]=0;
 var $67=(($agg_result+28)|0);
 HEAP32[(($67)>>2)]=$nm_sroa_6_0_i;
 var $68=(($agg_result+32)|0);
 HEAP32[(($68)>>2)]=$nm_sroa_7_0_i;
 var $69=(($agg_result+36)|0);
 HEAP32[(($69)>>2)]=$nm_sroa_8_0_i;
 return;
  default: assert(0, "bad label: " + label);
 }

}


function _malloc_stats(){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=HEAP32[((141040)>>2)];
 var $2=($1|0)==0;
 if($2){label=2;break;}else{label=5;break;}
 case 2: 
 var $4=_sysconf(30);
 var $5=((($4)-(1))|0);
 var $6=$5&$4;
 var $7=($6|0)==0;
 if($7){label=4;break;}else{label=3;break;}
 case 3: 
 _abort();
 throw "Reached an unreachable!";
 case 4: 
 HEAP32[((141048)>>2)]=$4;
 HEAP32[((141044)>>2)]=$4;
 HEAP32[((141052)>>2)]=-1;
 HEAP32[((141056)>>2)]=-1;
 HEAP32[((141060)>>2)]=0;
 HEAP32[((141556)>>2)]=0;
 var $9=_time(0);
 var $10=$9&-16;
 var $11=$10^1431655768;
 HEAP32[((141040)>>2)]=$11;
 label=5;break;
 case 5: 
 var $13=HEAP32[((141136)>>2)];
 var $14=($13|0)==0;
 if($14){var $used_3_i=0;var $fp_0_i=0;var $maxfp_0_i=0;label=14;break;}else{label=6;break;}
 case 6: 
 var $16=HEAP32[((141548)>>2)];
 var $17=HEAP32[((141544)>>2)];
 var $18=HEAP32[((141124)>>2)];
 var $_neg2_i=((($17)-(40))|0);
 var $19=((($_neg2_i)-($18))|0);
 var $used_05_i=$19;var $s_06_i=141560;label=7;break;
 case 7: 
 var $s_06_i;
 var $used_05_i;
 var $21=(($s_06_i)|0);
 var $22=HEAP32[(($21)>>2)];
 var $23=(($22+8)|0);
 var $24=$23;
 var $25=$24&7;
 var $26=($25|0)==0;
 if($26){var $30=0;label=9;break;}else{label=8;break;}
 case 8: 
 var $28=(((-$24))|0);
 var $29=$28&7;
 var $30=$29;label=9;break;
 case 9: 
 var $30;
 var $31=(($22+$30)|0);
 var $32=(($s_06_i+4)|0);
 var $33=HEAP32[(($32)>>2)];
 var $34=(($22+$33)|0);
 var $used_13_i=$used_05_i;var $q_0_in4_i=$31;label=10;break;
 case 10: 
 var $q_0_in4_i;
 var $used_13_i;
 var $q_0_i=$q_0_in4_i;
 var $36=($q_0_in4_i>>>0)>=($34>>>0);
 var $37=($q_0_i|0)==($13|0);
 var $or_cond_i=$36|$37;
 if($or_cond_i){var $used_1_lcssa_i=$used_13_i;label=13;break;}else{label=11;break;}
 case 11: 
 var $39=(($q_0_in4_i+4)|0);
 var $40=$39;
 var $41=HEAP32[(($40)>>2)];
 var $42=($41|0)==7;
 if($42){var $used_1_lcssa_i=$used_13_i;label=13;break;}else{label=12;break;}
 case 12: 
 var $43=$41&3;
 var $44=($43|0)==1;
 var $45=$41&-8;
 var $46=($44?$45:0);
 var $used_2_i=((($used_13_i)-($46))|0);
 var $47=(($q_0_in4_i+$45)|0);
 var $48=($47>>>0)<($22>>>0);
 if($48){var $used_1_lcssa_i=$used_2_i;label=13;break;}else{var $used_13_i=$used_2_i;var $q_0_in4_i=$47;label=10;break;}
 case 13: 
 var $used_1_lcssa_i;
 var $49=(($s_06_i+8)|0);
 var $50=HEAP32[(($49)>>2)];
 var $51=($50|0)==0;
 if($51){var $used_3_i=$used_1_lcssa_i;var $fp_0_i=$17;var $maxfp_0_i=$16;label=14;break;}else{var $used_05_i=$used_1_lcssa_i;var $s_06_i=$50;label=7;break;}
 case 14: 
 var $maxfp_0_i;
 var $fp_0_i;
 var $used_3_i;
 var $52=HEAP32[((_stderr)>>2)];
 var $53=_fprintf($52,139344,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$maxfp_0_i,tempVarArgs)); STACKTOP=tempVarArgs;
 var $54=_fprintf($52,139464,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$fp_0_i,tempVarArgs)); STACKTOP=tempVarArgs;
 var $55=_fprintf($52,139056,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$used_3_i,tempVarArgs)); STACKTOP=tempVarArgs;
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function _mallopt($param_number,$value){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=HEAP32[((141040)>>2)];
 var $2=($1|0)==0;
 if($2){label=2;break;}else{label=5;break;}
 case 2: 
 var $4=_sysconf(30);
 var $5=((($4)-(1))|0);
 var $6=$5&$4;
 var $7=($6|0)==0;
 if($7){label=4;break;}else{label=3;break;}
 case 3: 
 _abort();
 throw "Reached an unreachable!";
 case 4: 
 HEAP32[((141048)>>2)]=$4;
 HEAP32[((141044)>>2)]=$4;
 HEAP32[((141052)>>2)]=-1;
 HEAP32[((141056)>>2)]=-1;
 HEAP32[((141060)>>2)]=0;
 HEAP32[((141556)>>2)]=0;
 var $9=_time(0);
 var $10=$9&-16;
 var $11=$10^1431655768;
 HEAP32[((141040)>>2)]=$11;
 label=5;break;
 case 5: 
 if(($param_number|0)==-3){ label=10;break;}else if(($param_number|0)==-1){ label=6;break;}else if(($param_number|0)==-2){ label=7;break;}else{var $_0_i=0;label=11;break;}
 case 6: 
 HEAP32[((141056)>>2)]=$value;
 var $_0_i=1;label=11;break;
 case 7: 
 var $15=HEAP32[((141044)>>2)];
 var $16=($15>>>0)>($value>>>0);
 if($16){var $_0_i=0;label=11;break;}else{label=8;break;}
 case 8: 
 var $18=((($value)-(1))|0);
 var $19=$18&$value;
 var $20=($19|0)==0;
 if($20){label=9;break;}else{var $_0_i=0;label=11;break;}
 case 9: 
 HEAP32[((141048)>>2)]=$value;
 var $_0_i=1;label=11;break;
 case 10: 
 HEAP32[((141052)>>2)]=$value;
 var $_0_i=1;label=11;break;
 case 11: 
 var $_0_i;
 return $_0_i;
  default: assert(0, "bad label: " + label);
 }

}


function _malloc_usable_size($mem){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($mem|0)==0;
 if($1){var $_0=0;label=4;break;}else{label=2;break;}
 case 2: 
 var $3=((($mem)-(4))|0);
 var $4=$3;
 var $5=HEAP32[(($4)>>2)];
 var $6=$5&3;
 var $7=($6|0)==1;
 if($7){var $_0=0;label=4;break;}else{label=3;break;}
 case 3: 
 var $9=$5&-8;
 var $10=($6|0)==0;
 var $11=($10?8:4);
 var $12=((($9)-($11))|0);
 var $_0=$12;label=4;break;
 case 4: 
 var $_0;
 return $_0;
  default: assert(0, "bad label: " + label);
 }

}


function _dispose_chunk($p,$psize){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=$p;
 var $2=(($1+$psize)|0);
 var $3=$2;
 var $4=(($p+4)|0);
 var $5=HEAP32[(($4)>>2)];
 var $6=$5&1;
 var $7=($6|0)==0;
 if($7){label=2;break;}else{var $_0=$p;var $_02=$psize;label=54;break;}
 case 2: 
 var $9=(($p)|0);
 var $10=HEAP32[(($9)>>2)];
 var $11=$5&3;
 var $12=($11|0)==0;
 if($12){label=135;break;}else{label=3;break;}
 case 3: 
 var $14=(((-$10))|0);
 var $15=(($1+$14)|0);
 var $16=$15;
 var $17=((($10)+($psize))|0);
 var $18=HEAP32[((141128)>>2)];
 var $19=($15>>>0)<($18>>>0);
 if($19){label=53;break;}else{label=4;break;}
 case 4: 
 var $21=HEAP32[((141132)>>2)];
 var $22=($16|0)==($21|0);
 if($22){label=51;break;}else{label=5;break;}
 case 5: 
 var $24=$10>>>3;
 var $25=($10>>>0)<256;
 if($25){label=6;break;}else{label=18;break;}
 case 6: 
 var $_sum35=(((8)-($10))|0);
 var $27=(($1+$_sum35)|0);
 var $28=$27;
 var $29=HEAP32[(($28)>>2)];
 var $_sum36=(((12)-($10))|0);
 var $30=(($1+$_sum36)|0);
 var $31=$30;
 var $32=HEAP32[(($31)>>2)];
 var $33=$24<<1;
 var $34=((141152+($33<<2))|0);
 var $35=$34;
 var $36=($29|0)==($35|0);
 if($36){label=9;break;}else{label=7;break;}
 case 7: 
 var $38=$29;
 var $39=($38>>>0)<($18>>>0);
 if($39){label=17;break;}else{label=8;break;}
 case 8: 
 var $41=(($29+12)|0);
 var $42=HEAP32[(($41)>>2)];
 var $43=($42|0)==($16|0);
 if($43){label=9;break;}else{label=17;break;}
 case 9: 
 var $44=($32|0)==($29|0);
 if($44){label=10;break;}else{label=11;break;}
 case 10: 
 var $46=1<<$24;
 var $47=$46^-1;
 var $48=HEAP32[((141112)>>2)];
 var $49=$48&$47;
 HEAP32[((141112)>>2)]=$49;
 var $_0=$16;var $_02=$17;label=54;break;
 case 11: 
 var $51=($32|0)==($35|0);
 if($51){label=12;break;}else{label=13;break;}
 case 12: 
 var $_pre71=(($32+8)|0);
 var $_pre_phi72=$_pre71;label=15;break;
 case 13: 
 var $53=$32;
 var $54=($53>>>0)<($18>>>0);
 if($54){label=16;break;}else{label=14;break;}
 case 14: 
 var $56=(($32+8)|0);
 var $57=HEAP32[(($56)>>2)];
 var $58=($57|0)==($16|0);
 if($58){var $_pre_phi72=$56;label=15;break;}else{label=16;break;}
 case 15: 
 var $_pre_phi72;
 var $59=(($29+12)|0);
 HEAP32[(($59)>>2)]=$32;
 HEAP32[(($_pre_phi72)>>2)]=$29;
 var $_0=$16;var $_02=$17;label=54;break;
 case 16: 
 _abort();
 throw "Reached an unreachable!";
 case 17: 
 _abort();
 throw "Reached an unreachable!";
 case 18: 
 var $61=$15;
 var $_sum26=(((24)-($10))|0);
 var $62=(($1+$_sum26)|0);
 var $63=$62;
 var $64=HEAP32[(($63)>>2)];
 var $_sum27=(((12)-($10))|0);
 var $65=(($1+$_sum27)|0);
 var $66=$65;
 var $67=HEAP32[(($66)>>2)];
 var $68=($67|0)==($61|0);
 if($68){label=24;break;}else{label=19;break;}
 case 19: 
 var $_sum33=(((8)-($10))|0);
 var $70=(($1+$_sum33)|0);
 var $71=$70;
 var $72=HEAP32[(($71)>>2)];
 var $73=$72;
 var $74=($73>>>0)<($18>>>0);
 if($74){label=23;break;}else{label=20;break;}
 case 20: 
 var $76=(($72+12)|0);
 var $77=HEAP32[(($76)>>2)];
 var $78=($77|0)==($61|0);
 if($78){label=21;break;}else{label=23;break;}
 case 21: 
 var $80=(($67+8)|0);
 var $81=HEAP32[(($80)>>2)];
 var $82=($81|0)==($61|0);
 if($82){label=22;break;}else{label=23;break;}
 case 22: 
 HEAP32[(($76)>>2)]=$67;
 HEAP32[(($80)>>2)]=$72;
 var $R_1=$67;label=31;break;
 case 23: 
 _abort();
 throw "Reached an unreachable!";
 case 24: 
 var $_sum28=(((16)-($10))|0);
 var $_sum29=((($_sum28)+(4))|0);
 var $85=(($1+$_sum29)|0);
 var $86=$85;
 var $87=HEAP32[(($86)>>2)];
 var $88=($87|0)==0;
 if($88){label=25;break;}else{var $R_0=$87;var $RP_0=$86;label=26;break;}
 case 25: 
 var $90=(($1+$_sum28)|0);
 var $91=$90;
 var $92=HEAP32[(($91)>>2)];
 var $93=($92|0)==0;
 if($93){var $R_1=0;label=31;break;}else{var $R_0=$92;var $RP_0=$91;label=26;break;}
 case 26: 
 var $RP_0;
 var $R_0;
 var $94=(($R_0+20)|0);
 var $95=HEAP32[(($94)>>2)];
 var $96=($95|0)==0;
 if($96){label=27;break;}else{var $R_0=$95;var $RP_0=$94;label=26;break;}
 case 27: 
 var $98=(($R_0+16)|0);
 var $99=HEAP32[(($98)>>2)];
 var $100=($99|0)==0;
 if($100){label=28;break;}else{var $R_0=$99;var $RP_0=$98;label=26;break;}
 case 28: 
 var $102=$RP_0;
 var $103=($102>>>0)<($18>>>0);
 if($103){label=30;break;}else{label=29;break;}
 case 29: 
 HEAP32[(($RP_0)>>2)]=0;
 var $R_1=$R_0;label=31;break;
 case 30: 
 _abort();
 throw "Reached an unreachable!";
 case 31: 
 var $R_1;
 var $107=($64|0)==0;
 if($107){var $_0=$16;var $_02=$17;label=54;break;}else{label=32;break;}
 case 32: 
 var $_sum30=(((28)-($10))|0);
 var $109=(($1+$_sum30)|0);
 var $110=$109;
 var $111=HEAP32[(($110)>>2)];
 var $112=((141416+($111<<2))|0);
 var $113=HEAP32[(($112)>>2)];
 var $114=($61|0)==($113|0);
 if($114){label=33;break;}else{label=35;break;}
 case 33: 
 HEAP32[(($112)>>2)]=$R_1;
 var $cond=($R_1|0)==0;
 if($cond){label=34;break;}else{label=41;break;}
 case 34: 
 var $116=1<<$111;
 var $117=$116^-1;
 var $118=HEAP32[((141116)>>2)];
 var $119=$118&$117;
 HEAP32[((141116)>>2)]=$119;
 var $_0=$16;var $_02=$17;label=54;break;
 case 35: 
 var $121=$64;
 var $122=HEAP32[((141128)>>2)];
 var $123=($121>>>0)<($122>>>0);
 if($123){label=39;break;}else{label=36;break;}
 case 36: 
 var $125=(($64+16)|0);
 var $126=HEAP32[(($125)>>2)];
 var $127=($126|0)==($61|0);
 if($127){label=37;break;}else{label=38;break;}
 case 37: 
 HEAP32[(($125)>>2)]=$R_1;
 label=40;break;
 case 38: 
 var $130=(($64+20)|0);
 HEAP32[(($130)>>2)]=$R_1;
 label=40;break;
 case 39: 
 _abort();
 throw "Reached an unreachable!";
 case 40: 
 var $133=($R_1|0)==0;
 if($133){var $_0=$16;var $_02=$17;label=54;break;}else{label=41;break;}
 case 41: 
 var $135=$R_1;
 var $136=HEAP32[((141128)>>2)];
 var $137=($135>>>0)<($136>>>0);
 if($137){label=50;break;}else{label=42;break;}
 case 42: 
 var $139=(($R_1+24)|0);
 HEAP32[(($139)>>2)]=$64;
 var $_sum31=(((16)-($10))|0);
 var $140=(($1+$_sum31)|0);
 var $141=$140;
 var $142=HEAP32[(($141)>>2)];
 var $143=($142|0)==0;
 if($143){label=46;break;}else{label=43;break;}
 case 43: 
 var $145=$142;
 var $146=HEAP32[((141128)>>2)];
 var $147=($145>>>0)<($146>>>0);
 if($147){label=45;break;}else{label=44;break;}
 case 44: 
 var $149=(($R_1+16)|0);
 HEAP32[(($149)>>2)]=$142;
 var $150=(($142+24)|0);
 HEAP32[(($150)>>2)]=$R_1;
 label=46;break;
 case 45: 
 _abort();
 throw "Reached an unreachable!";
 case 46: 
 var $_sum32=((($_sum31)+(4))|0);
 var $153=(($1+$_sum32)|0);
 var $154=$153;
 var $155=HEAP32[(($154)>>2)];
 var $156=($155|0)==0;
 if($156){var $_0=$16;var $_02=$17;label=54;break;}else{label=47;break;}
 case 47: 
 var $158=$155;
 var $159=HEAP32[((141128)>>2)];
 var $160=($158>>>0)<($159>>>0);
 if($160){label=49;break;}else{label=48;break;}
 case 48: 
 var $162=(($R_1+20)|0);
 HEAP32[(($162)>>2)]=$155;
 var $163=(($155+24)|0);
 HEAP32[(($163)>>2)]=$R_1;
 var $_0=$16;var $_02=$17;label=54;break;
 case 49: 
 _abort();
 throw "Reached an unreachable!";
 case 50: 
 _abort();
 throw "Reached an unreachable!";
 case 51: 
 var $_sum=((($psize)+(4))|0);
 var $167=(($1+$_sum)|0);
 var $168=$167;
 var $169=HEAP32[(($168)>>2)];
 var $170=$169&3;
 var $171=($170|0)==3;
 if($171){label=52;break;}else{var $_0=$16;var $_02=$17;label=54;break;}
 case 52: 
 HEAP32[((141120)>>2)]=$17;
 var $173=HEAP32[(($168)>>2)];
 var $174=$173&-2;
 HEAP32[(($168)>>2)]=$174;
 var $175=$17|1;
 var $_sum24=(((4)-($10))|0);
 var $176=(($1+$_sum24)|0);
 var $177=$176;
 HEAP32[(($177)>>2)]=$175;
 var $178=$2;
 HEAP32[(($178)>>2)]=$17;
 label=135;break;
 case 53: 
 _abort();
 throw "Reached an unreachable!";
 case 54: 
 var $_02;
 var $_0;
 var $180=HEAP32[((141128)>>2)];
 var $181=($2>>>0)<($180>>>0);
 if($181){label=134;break;}else{label=55;break;}
 case 55: 
 var $_sum1=((($psize)+(4))|0);
 var $183=(($1+$_sum1)|0);
 var $184=$183;
 var $185=HEAP32[(($184)>>2)];
 var $186=$185&2;
 var $187=($186|0)==0;
 if($187){label=56;break;}else{label=109;break;}
 case 56: 
 var $189=HEAP32[((141136)>>2)];
 var $190=($3|0)==($189|0);
 if($190){label=57;break;}else{label=59;break;}
 case 57: 
 var $192=HEAP32[((141124)>>2)];
 var $193=((($192)+($_02))|0);
 HEAP32[((141124)>>2)]=$193;
 HEAP32[((141136)>>2)]=$_0;
 var $194=$193|1;
 var $195=(($_0+4)|0);
 HEAP32[(($195)>>2)]=$194;
 var $196=HEAP32[((141132)>>2)];
 var $197=($_0|0)==($196|0);
 if($197){label=58;break;}else{label=135;break;}
 case 58: 
 HEAP32[((141132)>>2)]=0;
 HEAP32[((141120)>>2)]=0;
 label=135;break;
 case 59: 
 var $200=HEAP32[((141132)>>2)];
 var $201=($3|0)==($200|0);
 if($201){label=60;break;}else{label=61;break;}
 case 60: 
 var $203=HEAP32[((141120)>>2)];
 var $204=((($203)+($_02))|0);
 HEAP32[((141120)>>2)]=$204;
 HEAP32[((141132)>>2)]=$_0;
 var $205=$204|1;
 var $206=(($_0+4)|0);
 HEAP32[(($206)>>2)]=$205;
 var $207=$_0;
 var $208=(($207+$204)|0);
 var $209=$208;
 HEAP32[(($209)>>2)]=$204;
 label=135;break;
 case 61: 
 var $211=$185&-8;
 var $212=((($211)+($_02))|0);
 var $213=$185>>>3;
 var $214=($185>>>0)<256;
 if($214){label=62;break;}else{label=74;break;}
 case 62: 
 var $_sum20=((($psize)+(8))|0);
 var $216=(($1+$_sum20)|0);
 var $217=$216;
 var $218=HEAP32[(($217)>>2)];
 var $_sum21=((($psize)+(12))|0);
 var $219=(($1+$_sum21)|0);
 var $220=$219;
 var $221=HEAP32[(($220)>>2)];
 var $222=$213<<1;
 var $223=((141152+($222<<2))|0);
 var $224=$223;
 var $225=($218|0)==($224|0);
 if($225){label=65;break;}else{label=63;break;}
 case 63: 
 var $227=$218;
 var $228=($227>>>0)<($180>>>0);
 if($228){label=73;break;}else{label=64;break;}
 case 64: 
 var $230=(($218+12)|0);
 var $231=HEAP32[(($230)>>2)];
 var $232=($231|0)==($3|0);
 if($232){label=65;break;}else{label=73;break;}
 case 65: 
 var $233=($221|0)==($218|0);
 if($233){label=66;break;}else{label=67;break;}
 case 66: 
 var $235=1<<$213;
 var $236=$235^-1;
 var $237=HEAP32[((141112)>>2)];
 var $238=$237&$236;
 HEAP32[((141112)>>2)]=$238;
 label=107;break;
 case 67: 
 var $240=($221|0)==($224|0);
 if($240){label=68;break;}else{label=69;break;}
 case 68: 
 var $_pre69=(($221+8)|0);
 var $_pre_phi70=$_pre69;label=71;break;
 case 69: 
 var $242=$221;
 var $243=($242>>>0)<($180>>>0);
 if($243){label=72;break;}else{label=70;break;}
 case 70: 
 var $245=(($221+8)|0);
 var $246=HEAP32[(($245)>>2)];
 var $247=($246|0)==($3|0);
 if($247){var $_pre_phi70=$245;label=71;break;}else{label=72;break;}
 case 71: 
 var $_pre_phi70;
 var $248=(($218+12)|0);
 HEAP32[(($248)>>2)]=$221;
 HEAP32[(($_pre_phi70)>>2)]=$218;
 label=107;break;
 case 72: 
 _abort();
 throw "Reached an unreachable!";
 case 73: 
 _abort();
 throw "Reached an unreachable!";
 case 74: 
 var $250=$2;
 var $_sum2=((($psize)+(24))|0);
 var $251=(($1+$_sum2)|0);
 var $252=$251;
 var $253=HEAP32[(($252)>>2)];
 var $_sum3=((($psize)+(12))|0);
 var $254=(($1+$_sum3)|0);
 var $255=$254;
 var $256=HEAP32[(($255)>>2)];
 var $257=($256|0)==($250|0);
 if($257){label=80;break;}else{label=75;break;}
 case 75: 
 var $_sum18=((($psize)+(8))|0);
 var $259=(($1+$_sum18)|0);
 var $260=$259;
 var $261=HEAP32[(($260)>>2)];
 var $262=$261;
 var $263=($262>>>0)<($180>>>0);
 if($263){label=79;break;}else{label=76;break;}
 case 76: 
 var $265=(($261+12)|0);
 var $266=HEAP32[(($265)>>2)];
 var $267=($266|0)==($250|0);
 if($267){label=77;break;}else{label=79;break;}
 case 77: 
 var $269=(($256+8)|0);
 var $270=HEAP32[(($269)>>2)];
 var $271=($270|0)==($250|0);
 if($271){label=78;break;}else{label=79;break;}
 case 78: 
 HEAP32[(($265)>>2)]=$256;
 HEAP32[(($269)>>2)]=$261;
 var $R7_1=$256;label=87;break;
 case 79: 
 _abort();
 throw "Reached an unreachable!";
 case 80: 
 var $_sum5=((($psize)+(20))|0);
 var $274=(($1+$_sum5)|0);
 var $275=$274;
 var $276=HEAP32[(($275)>>2)];
 var $277=($276|0)==0;
 if($277){label=81;break;}else{var $R7_0=$276;var $RP9_0=$275;label=82;break;}
 case 81: 
 var $_sum4=((($psize)+(16))|0);
 var $279=(($1+$_sum4)|0);
 var $280=$279;
 var $281=HEAP32[(($280)>>2)];
 var $282=($281|0)==0;
 if($282){var $R7_1=0;label=87;break;}else{var $R7_0=$281;var $RP9_0=$280;label=82;break;}
 case 82: 
 var $RP9_0;
 var $R7_0;
 var $283=(($R7_0+20)|0);
 var $284=HEAP32[(($283)>>2)];
 var $285=($284|0)==0;
 if($285){label=83;break;}else{var $R7_0=$284;var $RP9_0=$283;label=82;break;}
 case 83: 
 var $287=(($R7_0+16)|0);
 var $288=HEAP32[(($287)>>2)];
 var $289=($288|0)==0;
 if($289){label=84;break;}else{var $R7_0=$288;var $RP9_0=$287;label=82;break;}
 case 84: 
 var $291=$RP9_0;
 var $292=($291>>>0)<($180>>>0);
 if($292){label=86;break;}else{label=85;break;}
 case 85: 
 HEAP32[(($RP9_0)>>2)]=0;
 var $R7_1=$R7_0;label=87;break;
 case 86: 
 _abort();
 throw "Reached an unreachable!";
 case 87: 
 var $R7_1;
 var $296=($253|0)==0;
 if($296){label=107;break;}else{label=88;break;}
 case 88: 
 var $_sum15=((($psize)+(28))|0);
 var $298=(($1+$_sum15)|0);
 var $299=$298;
 var $300=HEAP32[(($299)>>2)];
 var $301=((141416+($300<<2))|0);
 var $302=HEAP32[(($301)>>2)];
 var $303=($250|0)==($302|0);
 if($303){label=89;break;}else{label=91;break;}
 case 89: 
 HEAP32[(($301)>>2)]=$R7_1;
 var $cond53=($R7_1|0)==0;
 if($cond53){label=90;break;}else{label=97;break;}
 case 90: 
 var $305=1<<$300;
 var $306=$305^-1;
 var $307=HEAP32[((141116)>>2)];
 var $308=$307&$306;
 HEAP32[((141116)>>2)]=$308;
 label=107;break;
 case 91: 
 var $310=$253;
 var $311=HEAP32[((141128)>>2)];
 var $312=($310>>>0)<($311>>>0);
 if($312){label=95;break;}else{label=92;break;}
 case 92: 
 var $314=(($253+16)|0);
 var $315=HEAP32[(($314)>>2)];
 var $316=($315|0)==($250|0);
 if($316){label=93;break;}else{label=94;break;}
 case 93: 
 HEAP32[(($314)>>2)]=$R7_1;
 label=96;break;
 case 94: 
 var $319=(($253+20)|0);
 HEAP32[(($319)>>2)]=$R7_1;
 label=96;break;
 case 95: 
 _abort();
 throw "Reached an unreachable!";
 case 96: 
 var $322=($R7_1|0)==0;
 if($322){label=107;break;}else{label=97;break;}
 case 97: 
 var $324=$R7_1;
 var $325=HEAP32[((141128)>>2)];
 var $326=($324>>>0)<($325>>>0);
 if($326){label=106;break;}else{label=98;break;}
 case 98: 
 var $328=(($R7_1+24)|0);
 HEAP32[(($328)>>2)]=$253;
 var $_sum16=((($psize)+(16))|0);
 var $329=(($1+$_sum16)|0);
 var $330=$329;
 var $331=HEAP32[(($330)>>2)];
 var $332=($331|0)==0;
 if($332){label=102;break;}else{label=99;break;}
 case 99: 
 var $334=$331;
 var $335=HEAP32[((141128)>>2)];
 var $336=($334>>>0)<($335>>>0);
 if($336){label=101;break;}else{label=100;break;}
 case 100: 
 var $338=(($R7_1+16)|0);
 HEAP32[(($338)>>2)]=$331;
 var $339=(($331+24)|0);
 HEAP32[(($339)>>2)]=$R7_1;
 label=102;break;
 case 101: 
 _abort();
 throw "Reached an unreachable!";
 case 102: 
 var $_sum17=((($psize)+(20))|0);
 var $342=(($1+$_sum17)|0);
 var $343=$342;
 var $344=HEAP32[(($343)>>2)];
 var $345=($344|0)==0;
 if($345){label=107;break;}else{label=103;break;}
 case 103: 
 var $347=$344;
 var $348=HEAP32[((141128)>>2)];
 var $349=($347>>>0)<($348>>>0);
 if($349){label=105;break;}else{label=104;break;}
 case 104: 
 var $351=(($R7_1+20)|0);
 HEAP32[(($351)>>2)]=$344;
 var $352=(($344+24)|0);
 HEAP32[(($352)>>2)]=$R7_1;
 label=107;break;
 case 105: 
 _abort();
 throw "Reached an unreachable!";
 case 106: 
 _abort();
 throw "Reached an unreachable!";
 case 107: 
 var $355=$212|1;
 var $356=(($_0+4)|0);
 HEAP32[(($356)>>2)]=$355;
 var $357=$_0;
 var $358=(($357+$212)|0);
 var $359=$358;
 HEAP32[(($359)>>2)]=$212;
 var $360=HEAP32[((141132)>>2)];
 var $361=($_0|0)==($360|0);
 if($361){label=108;break;}else{var $_1=$212;label=110;break;}
 case 108: 
 HEAP32[((141120)>>2)]=$212;
 label=135;break;
 case 109: 
 var $364=$185&-2;
 HEAP32[(($184)>>2)]=$364;
 var $365=$_02|1;
 var $366=(($_0+4)|0);
 HEAP32[(($366)>>2)]=$365;
 var $367=$_0;
 var $368=(($367+$_02)|0);
 var $369=$368;
 HEAP32[(($369)>>2)]=$_02;
 var $_1=$_02;label=110;break;
 case 110: 
 var $_1;
 var $371=$_1>>>3;
 var $372=($_1>>>0)<256;
 if($372){label=111;break;}else{label=116;break;}
 case 111: 
 var $374=$371<<1;
 var $375=((141152+($374<<2))|0);
 var $376=$375;
 var $377=HEAP32[((141112)>>2)];
 var $378=1<<$371;
 var $379=$377&$378;
 var $380=($379|0)==0;
 if($380){label=112;break;}else{label=113;break;}
 case 112: 
 var $382=$377|$378;
 HEAP32[((141112)>>2)]=$382;
 var $_sum13_pre=((($374)+(2))|0);
 var $_pre=((141152+($_sum13_pre<<2))|0);
 var $F16_0=$376;var $_pre_phi=$_pre;label=115;break;
 case 113: 
 var $_sum14=((($374)+(2))|0);
 var $384=((141152+($_sum14<<2))|0);
 var $385=HEAP32[(($384)>>2)];
 var $386=$385;
 var $387=HEAP32[((141128)>>2)];
 var $388=($386>>>0)<($387>>>0);
 if($388){label=114;break;}else{var $F16_0=$385;var $_pre_phi=$384;label=115;break;}
 case 114: 
 _abort();
 throw "Reached an unreachable!";
 case 115: 
 var $_pre_phi;
 var $F16_0;
 HEAP32[(($_pre_phi)>>2)]=$_0;
 var $391=(($F16_0+12)|0);
 HEAP32[(($391)>>2)]=$_0;
 var $392=(($_0+8)|0);
 HEAP32[(($392)>>2)]=$F16_0;
 var $393=(($_0+12)|0);
 HEAP32[(($393)>>2)]=$376;
 label=135;break;
 case 116: 
 var $395=$_0;
 var $396=$_1>>>8;
 var $397=($396|0)==0;
 if($397){var $I19_0=0;label=119;break;}else{label=117;break;}
 case 117: 
 var $399=($_1>>>0)>16777215;
 if($399){var $I19_0=31;label=119;break;}else{label=118;break;}
 case 118: 
 var $401=((($396)+(1048320))|0);
 var $402=$401>>>16;
 var $403=$402&8;
 var $404=$396<<$403;
 var $405=((($404)+(520192))|0);
 var $406=$405>>>16;
 var $407=$406&4;
 var $408=$407|$403;
 var $409=$404<<$407;
 var $410=((($409)+(245760))|0);
 var $411=$410>>>16;
 var $412=$411&2;
 var $413=$408|$412;
 var $414=(((14)-($413))|0);
 var $415=$409<<$412;
 var $416=$415>>>15;
 var $417=((($414)+($416))|0);
 var $418=$417<<1;
 var $419=((($417)+(7))|0);
 var $420=$_1>>>($419>>>0);
 var $421=$420&1;
 var $422=$421|$418;
 var $I19_0=$422;label=119;break;
 case 119: 
 var $I19_0;
 var $424=((141416+($I19_0<<2))|0);
 var $425=(($_0+28)|0);
 var $I19_0_c=$I19_0;
 HEAP32[(($425)>>2)]=$I19_0_c;
 var $426=(($_0+20)|0);
 HEAP32[(($426)>>2)]=0;
 var $427=(($_0+16)|0);
 HEAP32[(($427)>>2)]=0;
 var $428=HEAP32[((141116)>>2)];
 var $429=1<<$I19_0;
 var $430=$428&$429;
 var $431=($430|0)==0;
 if($431){label=120;break;}else{label=121;break;}
 case 120: 
 var $433=$428|$429;
 HEAP32[((141116)>>2)]=$433;
 HEAP32[(($424)>>2)]=$395;
 var $434=(($_0+24)|0);
 var $_c=$424;
 HEAP32[(($434)>>2)]=$_c;
 var $435=(($_0+12)|0);
 HEAP32[(($435)>>2)]=$_0;
 var $436=(($_0+8)|0);
 HEAP32[(($436)>>2)]=$_0;
 label=135;break;
 case 121: 
 var $438=HEAP32[(($424)>>2)];
 var $439=($I19_0|0)==31;
 if($439){var $444=0;label=123;break;}else{label=122;break;}
 case 122: 
 var $441=$I19_0>>>1;
 var $442=(((25)-($441))|0);
 var $444=$442;label=123;break;
 case 123: 
 var $444;
 var $445=(($438+4)|0);
 var $446=HEAP32[(($445)>>2)];
 var $447=$446&-8;
 var $448=($447|0)==($_1|0);
 if($448){var $T_0_lcssa=$438;label=130;break;}else{label=124;break;}
 case 124: 
 var $449=$_1<<$444;
 var $T_055=$438;var $K20_056=$449;label=126;break;
 case 125: 
 var $451=$K20_056<<1;
 var $452=(($459+4)|0);
 var $453=HEAP32[(($452)>>2)];
 var $454=$453&-8;
 var $455=($454|0)==($_1|0);
 if($455){var $T_0_lcssa=$459;label=130;break;}else{var $T_055=$459;var $K20_056=$451;label=126;break;}
 case 126: 
 var $K20_056;
 var $T_055;
 var $457=$K20_056>>>31;
 var $458=(($T_055+16+($457<<2))|0);
 var $459=HEAP32[(($458)>>2)];
 var $460=($459|0)==0;
 if($460){label=127;break;}else{label=125;break;}
 case 127: 
 var $462=$458;
 var $463=HEAP32[((141128)>>2)];
 var $464=($462>>>0)<($463>>>0);
 if($464){label=129;break;}else{label=128;break;}
 case 128: 
 HEAP32[(($458)>>2)]=$395;
 var $466=(($_0+24)|0);
 var $T_0_c10=$T_055;
 HEAP32[(($466)>>2)]=$T_0_c10;
 var $467=(($_0+12)|0);
 HEAP32[(($467)>>2)]=$_0;
 var $468=(($_0+8)|0);
 HEAP32[(($468)>>2)]=$_0;
 label=135;break;
 case 129: 
 _abort();
 throw "Reached an unreachable!";
 case 130: 
 var $T_0_lcssa;
 var $470=(($T_0_lcssa+8)|0);
 var $471=HEAP32[(($470)>>2)];
 var $472=$T_0_lcssa;
 var $473=HEAP32[((141128)>>2)];
 var $474=($472>>>0)<($473>>>0);
 if($474){label=133;break;}else{label=131;break;}
 case 131: 
 var $476=$471;
 var $477=($476>>>0)<($473>>>0);
 if($477){label=133;break;}else{label=132;break;}
 case 132: 
 var $479=(($471+12)|0);
 HEAP32[(($479)>>2)]=$395;
 HEAP32[(($470)>>2)]=$395;
 var $480=(($_0+8)|0);
 var $_c9=$471;
 HEAP32[(($480)>>2)]=$_c9;
 var $481=(($_0+12)|0);
 var $T_0_c=$T_0_lcssa;
 HEAP32[(($481)>>2)]=$T_0_c;
 var $482=(($_0+24)|0);
 HEAP32[(($482)>>2)]=0;
 label=135;break;
 case 133: 
 _abort();
 throw "Reached an unreachable!";
 case 134: 
 _abort();
 throw "Reached an unreachable!";
 case 135: 
 return;
  default: assert(0, "bad label: " + label);
 }

}


function __Znwj($size){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($size|0)==0;
 var $_size=($1?1:$size);
 label=2;break;
 case 2: 
 var $3=_malloc($_size);
 var $4=($3|0)==0;
 if($4){label=3;break;}else{label=10;break;}
 case 3: 
 var $6=(tempValue=HEAP32[((141608)>>2)],HEAP32[((141608)>>2)]=tempValue+0,tempValue);
 var $7=($6|0)==0;
 if($7){label=9;break;}else{label=4;break;}
 case 4: 
 var $9=$6;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$9]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=2;break; } else { label=5;break; }
 case 5: 
 var $lpad_loopexit$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit$1;var $lpad_phi$0=$lpad_loopexit$0;label=7;break;
 case 6: 
 var $lpad_nonloopexit$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_nonloopexit$1;var $lpad_phi$0=$lpad_nonloopexit$0;label=7;break;
 case 7: 
 var $lpad_phi$0;
 var $lpad_phi$1;
 var $11=$lpad_phi$1;
 var $12=($11|0)<0;
 if($12){label=8;break;}else{label=11;break;}
 case 8: 
 var $14=$lpad_phi$0;
 ___cxa_call_unexpected($14);
 throw "Reached an unreachable!";
 case 9: 
 var $16=___cxa_allocate_exception(4);
 var $17=$16;
 HEAP32[(($17)>>2)]=140448;
 (function() { try { __THREW__ = 0; return ___cxa_throw($16,140608,(40)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=12;break; } else { label=6;break; }
 case 10: 
 return $3;
 case 11: 
 ___resumeException($lpad_phi$0)
 case 12: 
 throw "Reached an unreachable!";
  default: assert(0, "bad label: " + label);
 }

}


function __ZSt15get_new_handlerv(){
 var label=0;


 var $1=(tempValue=HEAP32[((141608)>>2)],HEAP32[((141608)>>2)]=tempValue+0,tempValue);
 var $2=$1;
 return $2;
}


function __ZnwjRKSt9nothrow_t($size,$0){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $2=(function() { try { __THREW__ = 0; return __Znwj($size) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $p_0=$2;label=3;break; } else { label=2;break; }
 case 2: 
 var $4$0 = ___cxa_find_matching_catch(-1, -1,0); var $4$1 = tempRet0;
 var $5=$4$0;
 var $6=___cxa_begin_catch($5);
 (function() { try { __THREW__ = 0; return ___cxa_end_catch() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $p_0=0;label=3;break; } else { label=4;break; }
 case 3: 
 var $p_0;
 return $p_0;
 case 4: 
 var $9$0 = ___cxa_find_matching_catch(-1, -1); var $9$1 = tempRet0;
 var $10=$9$0;
 ___cxa_call_unexpected($10);
 throw "Reached an unreachable!";
  default: assert(0, "bad label: " + label);
 }

}


function __Znaj($size){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(function() { try { __THREW__ = 0; return __Znwj($size) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=2;break; } else { label=3;break; }
 case 2: 
 return $1;
 case 3: 
 var $4$0 = ___cxa_find_matching_catch(-1, -1); var $4$1 = tempRet0;
 var $5=$4$1;
 var $6=($5|0)<0;
 if($6){label=4;break;}else{label=5;break;}
 case 4: 
 var $8=$4$0;
 ___cxa_call_unexpected($8);
 throw "Reached an unreachable!";
 case 5: 
 ___resumeException($4$0)
  default: assert(0, "bad label: " + label);
 }

}


function __ZnajRKSt9nothrow_t($size,$0){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $2=(function() { try { __THREW__ = 0; return __Znaj($size) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $p_0=$2;label=3;break; } else { label=2;break; }
 case 2: 
 var $4$0 = ___cxa_find_matching_catch(-1, -1,0); var $4$1 = tempRet0;
 var $5=$4$0;
 var $6=___cxa_begin_catch($5);
 (function() { try { __THREW__ = 0; return ___cxa_end_catch() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $p_0=0;label=3;break; } else { label=4;break; }
 case 3: 
 var $p_0;
 return $p_0;
 case 4: 
 var $9$0 = ___cxa_find_matching_catch(-1, -1); var $9$1 = tempRet0;
 var $10=$9$0;
 ___cxa_call_unexpected($10);
 throw "Reached an unreachable!";
  default: assert(0, "bad label: " + label);
 }

}


function __ZdlPv($ptr){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($ptr|0)==0;
 if($1){label=3;break;}else{label=2;break;}
 case 2: 
 _free($ptr);
 label=3;break;
 case 3: 
 return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZdlPvRKSt9nothrow_t($ptr,$0){
 var label=0;


 __ZdlPv($ptr);
 return;
}


function __ZdaPv($ptr){
 var label=0;


 __ZdlPv($ptr);
 return;
}


function __ZdaPvRKSt9nothrow_t($ptr,$0){
 var label=0;


 __ZdaPv($ptr);
 return;
}


function __ZSt15set_new_handlerPFvvE($handler){
 var label=0;


 var $1=$handler;
 var $2=(tempValue=HEAP32[((141608)>>2)],HEAP32[((141608)>>2)]=$1,tempValue);
 var $3=$2;
 return $3;
}


function __ZNSt9bad_allocC2Ev($this){
 var label=0;


 var $1=(($this)|0);
 HEAP32[(($1)>>2)]=140448;
 return;
}


function __ZNSt9bad_allocD0Ev($this){
 var label=0;


 var $1=(($this)|0);

 var $2=$this;
 __ZdlPv($2);
 return;
}


function __ZNSt9bad_allocD2Ev($this){
 var label=0;


 var $1=(($this)|0);

 return;
}


function __ZNKSt9bad_alloc4whatEv($this){
 var label=0;


 return 138752;
}


function __ZNSt20bad_array_new_lengthC2Ev($this){
 var label=0;


 var $1=(($this)|0);
 HEAP32[(($1)>>2)]=140480;
 return;
}


function __ZNSt20bad_array_new_lengthD0Ev($this){
 var label=0;


 var $1=(($this)|0);

 var $2=$this;
 __ZdlPv($2);
 return;
}


function __ZNKSt16bad_array_length4whatEv($this){
 var label=0;


 return 139320;
}


function __ZNSt16bad_array_lengthC2Ev($this){
 var label=0;


 var $1=(($this)|0);
 HEAP32[(($1)>>2)]=140512;
 return;
}


function __ZNSt16bad_array_lengthD0Ev($this){
 var label=0;


 var $1=(($this)|0);

 var $2=$this;
 __ZdlPv($2);
 return;
}


function __ZNKSt20bad_array_new_length4whatEv($this){
 var label=0;


 return 138968;
}


function __ZSt17__throw_bad_allocv(){
 var label=0;


 var $1=___cxa_allocate_exception(4);
 var $2=$1;
 HEAP32[(($2)>>2)]=140448;
 ___cxa_throw($1,140608,(40));
 throw "Reached an unreachable!";
}


function ___floatscan($f,$prec,$pok){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+512)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $x_i=sp;
 if(($prec|0)==1){ label=2;break;}else if(($prec|0)==2){ label=3;break;}else if(($prec|0)==0){ var $emin_0_ph=-149;var $bits_0_ph=24;label=4;break;}else{var $_0=0;label=273;break;}
 case 2: 
 var $emin_0_ph=-1074;var $bits_0_ph=53;label=4;break;
 case 3: 
 var $emin_0_ph=-1074;var $bits_0_ph=53;label=4;break;
 case 4: 
 var $bits_0_ph;
 var $emin_0_ph;
 var $3=(($f+4)|0);
 var $4=(($f+100)|0);
 label=5;break;
 case 5: 
 var $6=HEAP32[(($3)>>2)];
 var $7=HEAP32[(($4)>>2)];
 var $8=($6>>>0)<($7>>>0);
 if($8){label=6;break;}else{label=7;break;}
 case 6: 
 var $10=(($6+1)|0);
 HEAP32[(($3)>>2)]=$10;
 var $11=HEAP8[($6)];
 var $12=($11&255);
 var $16=$12;label=8;break;
 case 7: 
 var $14=___shgetc($f);
 var $16=$14;label=8;break;
 case 8: 
 var $16;
 var $17=_isspace($16);
 var $18=($17|0)==0;
 if($18){label=9;break;}else{label=5;break;}
 case 9: 
 var $20=($16|0)==45;
 if(($16|0)==45|($16|0)==43){ label=10;break;}else{var $c_0=$16;var $sign_0=1;label=13;break;}
 case 10: 
 var $22=($20&1);
 var $23=$22<<1;
 var $24=(((1)-($23))|0);
 var $25=HEAP32[(($3)>>2)];
 var $26=HEAP32[(($4)>>2)];
 var $27=($25>>>0)<($26>>>0);
 if($27){label=11;break;}else{label=12;break;}
 case 11: 
 var $29=(($25+1)|0);
 HEAP32[(($3)>>2)]=$29;
 var $30=HEAP8[($25)];
 var $31=($30&255);
 var $c_0=$31;var $sign_0=$24;label=13;break;
 case 12: 
 var $33=___shgetc($f);
 var $c_0=$33;var $sign_0=$24;label=13;break;
 case 13: 
 var $sign_0;
 var $c_0;
 var $i_068=0;var $c_169=$c_0;label=14;break;
 case 14: 
 var $c_169;
 var $i_068;
 var $36=$c_169|32;
 var $37=((138024+$i_068)|0);
 var $38=HEAP8[($37)];
 var $39=(($38<<24)>>24);
 var $40=($36|0)==($39|0);
 if($40){label=15;break;}else{var $i_0_lcssa=$i_068;var $c_1_lcssa=$c_169;label=20;break;}
 case 15: 
 var $42=($i_068>>>0)<7;
 if($42){label=16;break;}else{var $c_2=$c_169;label=19;break;}
 case 16: 
 var $44=HEAP32[(($3)>>2)];
 var $45=HEAP32[(($4)>>2)];
 var $46=($44>>>0)<($45>>>0);
 if($46){label=17;break;}else{label=18;break;}
 case 17: 
 var $48=(($44+1)|0);
 HEAP32[(($3)>>2)]=$48;
 var $49=HEAP8[($44)];
 var $50=($49&255);
 var $c_2=$50;label=19;break;
 case 18: 
 var $52=___shgetc($f);
 var $c_2=$52;label=19;break;
 case 19: 
 var $c_2;
 var $54=((($i_068)+(1))|0);
 var $55=($54>>>0)<8;
 if($55){var $i_068=$54;var $c_169=$c_2;label=14;break;}else{var $i_0_lcssa=$54;var $c_1_lcssa=$c_2;label=20;break;}
 case 20: 
 var $c_1_lcssa;
 var $i_0_lcssa;
 if(($i_0_lcssa|0)==3){ label=23;break;}else if(($i_0_lcssa|0)==8){ label=27;break;}else{label=21;break;}
 case 21: 
 var $57=($i_0_lcssa>>>0)<4;
 var $58=($pok|0)==0;
 var $or_cond=$57|$58;
 if($or_cond){label=28;break;}else{label=22;break;}
 case 22: 
 var $60=($i_0_lcssa|0)==8;
 if($60){label=27;break;}else{label=23;break;}
 case 23: 
 var $61=HEAP32[(($4)>>2)];
 var $62=($61|0)==0;
 if($62){label=25;break;}else{label=24;break;}
 case 24: 
 var $64=HEAP32[(($3)>>2)];
 var $65=((($64)-(1))|0);
 HEAP32[(($3)>>2)]=$65;
 label=25;break;
 case 25: 
 var $notlhs=($pok|0)==0;
 var $notrhs=($i_0_lcssa>>>0)<4;
 var $or_cond106_not=$notrhs|$notlhs;
 var $brmerge=$or_cond106_not|$62;
 if($brmerge){label=27;break;}else{var $i_166=$i_0_lcssa;label=26;break;}
 case 26: 
 var $i_166;
 var $68=HEAP32[(($3)>>2)];
 var $69=((($68)-(1))|0);
 HEAP32[(($3)>>2)]=$69;
 var $70=((($i_166)-(1))|0);
 var $71=($70>>>0)>3;
 if($71){var $i_166=$70;label=26;break;}else{label=27;break;}
 case 27: 
 var $72=($sign_0|0);
 var $73=($72)*(Infinity);
 var $74=$73;
 var $_0=$74;label=273;break;
 case 28: 
 var $76=($i_0_lcssa|0)==0;
 if($76){var $i_263=0;var $c_364=$c_1_lcssa;label=29;break;}else{var $c_5=$c_1_lcssa;var $i_3=$i_0_lcssa;label=35;break;}
 case 29: 
 var $c_364;
 var $i_263;
 var $77=$c_364|32;
 var $78=((139224+$i_263)|0);
 var $79=HEAP8[($78)];
 var $80=(($79<<24)>>24);
 var $81=($77|0)==($80|0);
 if($81){label=30;break;}else{var $c_5=$c_364;var $i_3=$i_263;label=35;break;}
 case 30: 
 var $83=($i_263>>>0)<2;
 if($83){label=31;break;}else{var $c_4=$c_364;label=34;break;}
 case 31: 
 var $85=HEAP32[(($3)>>2)];
 var $86=HEAP32[(($4)>>2)];
 var $87=($85>>>0)<($86>>>0);
 if($87){label=32;break;}else{label=33;break;}
 case 32: 
 var $89=(($85+1)|0);
 HEAP32[(($3)>>2)]=$89;
 var $90=HEAP8[($85)];
 var $91=($90&255);
 var $c_4=$91;label=34;break;
 case 33: 
 var $93=___shgetc($f);
 var $c_4=$93;label=34;break;
 case 34: 
 var $c_4;
 var $95=((($i_263)+(1))|0);
 var $96=($95>>>0)<3;
 if($96){var $i_263=$95;var $c_364=$c_4;label=29;break;}else{var $c_5=$c_4;var $i_3=$95;label=35;break;}
 case 35: 
 var $i_3;
 var $c_5;
 if(($i_3|0)==3){ label=36;break;}else if(($i_3|0)==0){ label=58;break;}else{label=55;break;}
 case 36: 
 var $98=HEAP32[(($3)>>2)];
 var $99=HEAP32[(($4)>>2)];
 var $100=($98>>>0)<($99>>>0);
 if($100){label=37;break;}else{label=38;break;}
 case 37: 
 var $102=(($98+1)|0);
 HEAP32[(($3)>>2)]=$102;
 var $103=HEAP8[($98)];
 var $104=($103&255);
 var $108=$104;label=39;break;
 case 38: 
 var $106=___shgetc($f);
 var $108=$106;label=39;break;
 case 39: 
 var $108;
 var $109=($108|0)==40;
 if($109){var $i_4=1;label=42;break;}else{label=40;break;}
 case 40: 
 var $111=HEAP32[(($4)>>2)];
 var $112=($111|0)==0;
 if($112){var $_0=NaN;label=273;break;}else{label=41;break;}
 case 41: 
 var $114=HEAP32[(($3)>>2)];
 var $115=((($114)-(1))|0);
 HEAP32[(($3)>>2)]=$115;
 var $_0=NaN;label=273;break;
 case 42: 
 var $i_4;
 var $116=HEAP32[(($3)>>2)];
 var $117=HEAP32[(($4)>>2)];
 var $118=($116>>>0)<($117>>>0);
 if($118){label=43;break;}else{label=44;break;}
 case 43: 
 var $120=(($116+1)|0);
 HEAP32[(($3)>>2)]=$120;
 var $121=HEAP8[($116)];
 var $122=($121&255);
 var $126=$122;label=45;break;
 case 44: 
 var $124=___shgetc($f);
 var $126=$124;label=45;break;
 case 45: 
 var $126;
 var $127=((($126)-(48))|0);
 var $128=($127>>>0)<10;
 var $129=((($126)-(65))|0);
 var $130=($129>>>0)<26;
 var $or_cond8=$128|$130;
 if($or_cond8){label=54;break;}else{label=46;break;}
 case 46: 
 var $132=((($126)-(97))|0);
 var $133=($132>>>0)<26;
 var $134=($126|0)==95;
 var $or_cond5=$133|$134;
 if($or_cond5){label=54;break;}else{label=47;break;}
 case 47: 
 var $136=($126|0)==41;
 if($136){var $_0=NaN;label=273;break;}else{label=48;break;}
 case 48: 
 var $138=HEAP32[(($4)>>2)];
 var $139=($138|0)==0;
 if($139){label=50;break;}else{label=49;break;}
 case 49: 
 var $141=HEAP32[(($3)>>2)];
 var $142=((($141)-(1))|0);
 HEAP32[(($3)>>2)]=$142;
 label=50;break;
 case 50: 
 if($58){label=52;break;}else{label=51;break;}
 case 51: 
 var $144=($i_4|0)==0;
 var $brmerge107=$144|$139;
 if($brmerge107){var $_0=NaN;label=273;break;}else{var $_in=$i_4;label=53;break;}
 case 52: 
 var $146=___errno_location();
 HEAP32[(($146)>>2)]=22;
 ___shlim($f,0);
 var $_0=0;label=273;break;
 case 53: 
 var $_in;
 var $147=((($_in)-(1))|0);
 var $148=HEAP32[(($3)>>2)];
 var $149=((($148)-(1))|0);
 HEAP32[(($3)>>2)]=$149;
 var $150=($147|0)==0;
 if($150){var $_0=NaN;label=273;break;}else{var $_in=$147;label=53;break;}
 case 54: 
 var $152=((($i_4)+(1))|0);
 var $i_4=$152;label=42;break;
 case 55: 
 var $154=HEAP32[(($4)>>2)];
 var $155=($154|0)==0;
 if($155){label=57;break;}else{label=56;break;}
 case 56: 
 var $157=HEAP32[(($3)>>2)];
 var $158=((($157)-(1))|0);
 HEAP32[(($3)>>2)]=$158;
 label=57;break;
 case 57: 
 var $160=___errno_location();
 HEAP32[(($160)>>2)]=22;
 ___shlim($f,0);
 var $_0=0;label=273;break;
 case 58: 
 var $162=($c_5|0)==48;
 if($162){label=59;break;}else{var $c_6=$c_5;label=134;break;}
 case 59: 
 var $164=HEAP32[(($3)>>2)];
 var $165=HEAP32[(($4)>>2)];
 var $166=($164>>>0)<($165>>>0);
 if($166){label=60;break;}else{label=61;break;}
 case 60: 
 var $168=(($164+1)|0);
 HEAP32[(($3)>>2)]=$168;
 var $169=HEAP8[($164)];
 var $170=($169&255);
 var $174=$170;label=62;break;
 case 61: 
 var $172=___shgetc($f);
 var $174=$172;label=62;break;
 case 62: 
 var $174;
 var $175=$174|32;
 var $176=($175|0)==120;
 if($176){label=63;break;}else{label=132;break;}
 case 63: 
 var $178=HEAP32[(($3)>>2)];
 var $179=HEAP32[(($4)>>2)];
 var $180=($178>>>0)<($179>>>0);
 if($180){label=64;break;}else{label=65;break;}
 case 64: 
 var $182=(($178+1)|0);
 HEAP32[(($3)>>2)]=$182;
 var $183=HEAP8[($178)];
 var $184=($183&255);
 var $c_0_i=$184;var $gotdig_0_i=0;label=66;break;
 case 65: 
 var $186=___shgetc($f);
 var $c_0_i=$186;var $gotdig_0_i=0;label=66;break;
 case 66: 
 var $gotdig_0_i;
 var $c_0_i;
 if(($c_0_i|0)==48){ label=67;break;}else if(($c_0_i|0)==46){ label=70;break;}else{var $c_2_i=$c_0_i;var $dc_0_i$1=0;var $dc_0_i$0=0;var $rp_1_i$1=0;var $rp_1_i$0=0;var $gotdig_2_i=$gotdig_0_i;var $gotrad_0_i=0;var $gottail_0_i=0;var $scale_0_i=1;var $y_0_i=0;var $x_0_i=0;label=79;break;}
 case 67: 
 var $188=HEAP32[(($3)>>2)];
 var $189=HEAP32[(($4)>>2)];
 var $190=($188>>>0)<($189>>>0);
 if($190){label=68;break;}else{label=69;break;}
 case 68: 
 var $192=(($188+1)|0);
 HEAP32[(($3)>>2)]=$192;
 var $193=HEAP8[($188)];
 var $194=($193&255);
 var $c_0_i=$194;var $gotdig_0_i=1;label=66;break;
 case 69: 
 var $196=___shgetc($f);
 var $c_0_i=$196;var $gotdig_0_i=1;label=66;break;
 case 70: 
 var $198=HEAP32[(($3)>>2)];
 var $199=HEAP32[(($4)>>2)];
 var $200=($198>>>0)<($199>>>0);
 if($200){label=71;break;}else{label=72;break;}
 case 71: 
 var $202=(($198+1)|0);
 HEAP32[(($3)>>2)]=$202;
 var $203=HEAP8[($198)];
 var $204=($203&255);
 var $c_1_ph_i=$204;label=73;break;
 case 72: 
 var $206=___shgetc($f);
 var $c_1_ph_i=$206;label=73;break;
 case 73: 
 var $c_1_ph_i;
 var $207=($c_1_ph_i|0)==48;
 if($207){var $rp_021_i$1=-1;var $rp_021_i$0=-1;label=74;break;}else{var $c_2_i=$c_1_ph_i;var $dc_0_i$1=0;var $dc_0_i$0=0;var $rp_1_i$1=0;var $rp_1_i$0=0;var $gotdig_2_i=$gotdig_0_i;var $gotrad_0_i=1;var $gottail_0_i=0;var $scale_0_i=1;var $y_0_i=0;var $x_0_i=0;label=79;break;}
 case 74: 
 var $rp_021_i$0;
 var $rp_021_i$1;
 var $208=HEAP32[(($3)>>2)];
 var $209=HEAP32[(($4)>>2)];
 var $210=($208>>>0)<($209>>>0);
 if($210){label=75;break;}else{label=76;break;}
 case 75: 
 var $212=(($208+1)|0);
 HEAP32[(($3)>>2)]=$212;
 var $213=HEAP8[($208)];
 var $214=($213&255);
 var $218=$214;label=77;break;
 case 76: 
 var $216=___shgetc($f);
 var $218=$216;label=77;break;
 case 77: 
 var $218;
 var $219=($218|0)==48;
 if($219){label=78;break;}else{var $c_2_i=$218;var $dc_0_i$1=0;var $dc_0_i$0=0;var $rp_1_i$1=$rp_021_i$1;var $rp_1_i$0=$rp_021_i$0;var $gotdig_2_i=1;var $gotrad_0_i=1;var $gottail_0_i=0;var $scale_0_i=1;var $y_0_i=0;var $x_0_i=0;label=79;break;}
 case 78: 
 var $$etemp$0$0=-1;
 var $$etemp$0$1=-1;
 var $phitmp_i$0=_i64Add($rp_021_i$0,$rp_021_i$1,$$etemp$0$0,$$etemp$0$1);var $phitmp_i$1=tempRet0;
 var $rp_021_i$1=$phitmp_i$1;var $rp_021_i$0=$phitmp_i$0;label=74;break;
 case 79: 
 var $x_0_i;
 var $y_0_i;
 var $scale_0_i;
 var $gottail_0_i;
 var $gotrad_0_i;
 var $gotdig_2_i;
 var $rp_1_i$0;
 var $rp_1_i$1;
 var $dc_0_i$0;
 var $dc_0_i$1;
 var $c_2_i;
 var $220=((($c_2_i)-(48))|0);
 var $221=($220>>>0)<10;
 if($221){var $d_0_i=$220;label=84;break;}else{label=80;break;}
 case 80: 
 var $223=$c_2_i|32;
 var $224=((($223)-(97))|0);
 var $225=($224>>>0)<6;
 var $226=($c_2_i|0)==46;
 var $or_cond_i=$225|$226;
 if($or_cond_i){label=81;break;}else{var $c_2_lcssa_i=$c_2_i;label=94;break;}
 case 81: 
 if($226){label=82;break;}else{label=83;break;}
 case 82: 
 var $228=($gotrad_0_i|0)==0;
 if($228){var $dc_1_i$1=$dc_0_i$1;var $dc_1_i$0=$dc_0_i$0;var $rp_2_i$1=$dc_0_i$1;var $rp_2_i$0=$dc_0_i$0;var $gotdig_3_i=$gotdig_2_i;var $gotrad_1_i=1;var $gottail_2_i=$gottail_0_i;var $scale_2_i=$scale_0_i;var $y_2_i=$y_0_i;var $x_2_i=$x_0_i;label=91;break;}else{var $c_2_lcssa_i=46;label=94;break;}
 case 83: 
 var $230=($c_2_i|0)>57;
 var $231=((($223)-(87))|0);
 var $_38_i=($230?$231:$220);
 var $d_0_i=$_38_i;label=84;break;
 case 84: 
 var $d_0_i;
 var $$etemp$1$0=8;
 var $$etemp$1$1=0;
 var $232=(($dc_0_i$1|0) < ($$etemp$1$1|0)) | (((($dc_0_i$1|0) == ($$etemp$1$1|0) & ($dc_0_i$0>>>0) <  ($$etemp$1$0>>>0))));
 if($232){label=85;break;}else{label=86;break;}
 case 85: 
 var $234=$x_0_i<<4;
 var $235=((($d_0_i)+($234))|0);
 var $gottail_1_i=$gottail_0_i;var $scale_1_i=$scale_0_i;var $y_1_i=$y_0_i;var $x_1_i=$235;label=90;break;
 case 86: 
 var $$etemp$2$0=14;
 var $$etemp$2$1=0;
 var $237=(($dc_0_i$1|0) < ($$etemp$2$1|0)) | (((($dc_0_i$1|0) == ($$etemp$2$1|0) & ($dc_0_i$0>>>0) <  ($$etemp$2$0>>>0))));
 if($237){label=87;break;}else{label=88;break;}
 case 87: 
 var $239=($d_0_i|0);
 var $240=($scale_0_i)*((0.0625));
 var $241=($240)*($239);
 var $242=($y_0_i)+($241);
 var $gottail_1_i=$gottail_0_i;var $scale_1_i=$240;var $y_1_i=$242;var $x_1_i=$x_0_i;label=90;break;
 case 88: 
 var $244=($d_0_i|0)!=0;
 var $245=($gottail_0_i|0)==0;
 var $or_cond3_i=$244&$245;
 if($or_cond3_i){label=89;break;}else{var $gottail_1_i=$gottail_0_i;var $scale_1_i=$scale_0_i;var $y_1_i=$y_0_i;var $x_1_i=$x_0_i;label=90;break;}
 case 89: 
 var $247=($scale_0_i)*((0.5));
 var $248=($y_0_i)+($247);
 var $gottail_1_i=1;var $scale_1_i=$scale_0_i;var $y_1_i=$248;var $x_1_i=$x_0_i;label=90;break;
 case 90: 
 var $x_1_i;
 var $y_1_i;
 var $scale_1_i;
 var $gottail_1_i;
 var $$etemp$3$0=1;
 var $$etemp$3$1=0;
 var $250$0=_i64Add($dc_0_i$0,$dc_0_i$1,$$etemp$3$0,$$etemp$3$1);var $250$1=tempRet0;
 var $dc_1_i$1=$250$1;var $dc_1_i$0=$250$0;var $rp_2_i$1=$rp_1_i$1;var $rp_2_i$0=$rp_1_i$0;var $gotdig_3_i=1;var $gotrad_1_i=$gotrad_0_i;var $gottail_2_i=$gottail_1_i;var $scale_2_i=$scale_1_i;var $y_2_i=$y_1_i;var $x_2_i=$x_1_i;label=91;break;
 case 91: 
 var $x_2_i;
 var $y_2_i;
 var $scale_2_i;
 var $gottail_2_i;
 var $gotrad_1_i;
 var $gotdig_3_i;
 var $rp_2_i$0;
 var $rp_2_i$1;
 var $dc_1_i$0;
 var $dc_1_i$1;
 var $251=HEAP32[(($3)>>2)];
 var $252=HEAP32[(($4)>>2)];
 var $253=($251>>>0)<($252>>>0);
 if($253){label=92;break;}else{label=93;break;}
 case 92: 
 var $255=(($251+1)|0);
 HEAP32[(($3)>>2)]=$255;
 var $256=HEAP8[($251)];
 var $257=($256&255);
 var $c_2_i=$257;var $dc_0_i$1=$dc_1_i$1;var $dc_0_i$0=$dc_1_i$0;var $rp_1_i$1=$rp_2_i$1;var $rp_1_i$0=$rp_2_i$0;var $gotdig_2_i=$gotdig_3_i;var $gotrad_0_i=$gotrad_1_i;var $gottail_0_i=$gottail_2_i;var $scale_0_i=$scale_2_i;var $y_0_i=$y_2_i;var $x_0_i=$x_2_i;label=79;break;
 case 93: 
 var $259=___shgetc($f);
 var $c_2_i=$259;var $dc_0_i$1=$dc_1_i$1;var $dc_0_i$0=$dc_1_i$0;var $rp_1_i$1=$rp_2_i$1;var $rp_1_i$0=$rp_2_i$0;var $gotdig_2_i=$gotdig_3_i;var $gotrad_0_i=$gotrad_1_i;var $gottail_0_i=$gottail_2_i;var $scale_0_i=$scale_2_i;var $y_0_i=$y_2_i;var $x_0_i=$x_2_i;label=79;break;
 case 94: 
 var $c_2_lcssa_i;
 var $261=($gotdig_2_i|0)==0;
 if($261){label=95;break;}else{label=103;break;}
 case 95: 
 var $263=HEAP32[(($4)>>2)];
 var $264=($263|0)==0;
 if($264){label=97;break;}else{label=96;break;}
 case 96: 
 var $266=HEAP32[(($3)>>2)];
 var $267=((($266)-(1))|0);
 HEAP32[(($3)>>2)]=$267;
 label=97;break;
 case 97: 
 if($58){label=101;break;}else{label=98;break;}
 case 98: 
 if($264){label=102;break;}else{label=99;break;}
 case 99: 
 var $271=HEAP32[(($3)>>2)];
 var $272=((($271)-(1))|0);
 HEAP32[(($3)>>2)]=$272;
 var $273=($gotrad_0_i|0)==0;
 if($273){label=102;break;}else{label=100;break;}
 case 100: 
 var $275=((($271)-(2))|0);
 HEAP32[(($3)>>2)]=$275;
 label=102;break;
 case 101: 
 ___shlim($f,0);
 label=102;break;
 case 102: 
 var $277=($sign_0|0);
 var $278=($277)*(0);
 var $_0=$278;label=273;break;
 case 103: 
 var $280=($gotrad_0_i|0)==0;
 var $dc_0_rp_1_i$0=($280?$dc_0_i$0:$rp_1_i$0);
 var $dc_0_rp_1_i$1=($280?$dc_0_i$1:$rp_1_i$1);
 var $$etemp$4$0=8;
 var $$etemp$4$1=0;
 var $281=(($dc_0_i$1|0) < ($$etemp$4$1|0)) | (((($dc_0_i$1|0) == ($$etemp$4$1|0) & ($dc_0_i$0>>>0) <  ($$etemp$4$0>>>0))));
 if($281){var $x_313_i=$x_0_i;var $dc_214_i$1=$dc_0_i$1;var $dc_214_i$0=$dc_0_i$0;label=104;break;}else{var $x_3_lcssa_i=$x_0_i;label=105;break;}
 case 104: 
 var $dc_214_i$0;
 var $dc_214_i$1;
 var $x_313_i;
 var $282=$x_313_i<<4;
 var $$etemp$5$0=1;
 var $$etemp$5$1=0;
 var $283$0=_i64Add($dc_214_i$0,$dc_214_i$1,$$etemp$5$0,$$etemp$5$1);var $283$1=tempRet0;
 var $$etemp$6$0=8;
 var $$etemp$6$1=0;
 var $284=(($283$1|0) < ($$etemp$6$1|0)) | (((($283$1|0) == ($$etemp$6$1|0) & ($283$0>>>0) <  ($$etemp$6$0>>>0))));
 if($284){var $x_313_i=$282;var $dc_214_i$1=$283$1;var $dc_214_i$0=$283$0;label=104;break;}else{var $x_3_lcssa_i=$282;label=105;break;}
 case 105: 
 var $x_3_lcssa_i;
 var $285=$c_2_lcssa_i|32;
 var $286=($285|0)==112;
 if($286){label=106;break;}else{label=111;break;}
 case 106: 
 var $288$0=_scanexp($f,$pok);
 var $288$1=tempRet0;
 var $$etemp$7$0=0;
 var $$etemp$7$1=-2147483648;
 var $289=(($288$0|0) == ($$etemp$7$0|0)) & (($288$1|0) == ($$etemp$7$1|0));
 if($289){label=107;break;}else{var $e2_0_i$1=$288$1;var $e2_0_i$0=$288$0;label=113;break;}
 case 107: 
 if($58){label=110;break;}else{label=108;break;}
 case 108: 
 var $292=HEAP32[(($4)>>2)];
 var $293=($292|0)==0;
 if($293){var $e2_0_i$1=0;var $e2_0_i$0=0;label=113;break;}else{label=109;break;}
 case 109: 
 var $295=HEAP32[(($3)>>2)];
 var $296=((($295)-(1))|0);
 HEAP32[(($3)>>2)]=$296;
 var $e2_0_i$1=0;var $e2_0_i$0=0;label=113;break;
 case 110: 
 ___shlim($f,0);
 var $_0=0;label=273;break;
 case 111: 
 var $299=HEAP32[(($4)>>2)];
 var $300=($299|0)==0;
 if($300){var $e2_0_i$1=0;var $e2_0_i$0=0;label=113;break;}else{label=112;break;}
 case 112: 
 var $302=HEAP32[(($3)>>2)];
 var $303=((($302)-(1))|0);
 HEAP32[(($3)>>2)]=$303;
 var $e2_0_i$1=0;var $e2_0_i$0=0;label=113;break;
 case 113: 
 var $e2_0_i$0;
 var $e2_0_i$1;
 var $305$0=($dc_0_rp_1_i$0<<2)|(0>>>30);
 var $305$1=($dc_0_rp_1_i$1<<2)|($dc_0_rp_1_i$0>>>30);
 var $$etemp$8$0=-32;
 var $$etemp$8$1=-1;
 var $306$0=_i64Add($305$0,$305$1,$$etemp$8$0,$$etemp$8$1);var $306$1=tempRet0;
 var $307$0=_i64Add($306$0,$306$1,$e2_0_i$0,$e2_0_i$1);var $307$1=tempRet0;
 var $308=($x_3_lcssa_i|0)==0;
 if($308){label=114;break;}else{label=115;break;}
 case 114: 
 var $310=($sign_0|0);
 var $311=($310)*(0);
 var $_0=$311;label=273;break;
 case 115: 
 var $313=(((-$emin_0_ph))|0);
 var $314$0=$313;
 var $314$1=0;
 var $315=(($307$1|0) > ($314$1|0)) | (((($307$1|0) == ($314$1|0) & ($307$0>>>0) >  ($314$0>>>0))));
 if($315){label=116;break;}else{label=117;break;}
 case 116: 
 var $317=___errno_location();
 HEAP32[(($317)>>2)]=34;
 var $318=($sign_0|0);
 var $319=($318)*((1.7976931348623157e+308));
 var $320=($319)*((1.7976931348623157e+308));
 var $_0=$320;label=273;break;
 case 117: 
 var $322=((($emin_0_ph)-(106))|0);
 var $323$0=$322;
 var $323$1=((((($322|0)<0))|0)?-1:0);
 var $324=(($307$1|0) < ($323$1|0)) | (((($307$1|0) == ($323$1|0) & ($307$0>>>0) <  ($323$0>>>0))));
 if($324){label=119;break;}else{label=118;break;}
 case 118: 
 var $325=($x_3_lcssa_i|0)>-1;
 if($325){var $x_48_i=$x_3_lcssa_i;var $y_39_i=$y_0_i;var $e2_110_i$1=$307$1;var $e2_110_i$0=$307$0;label=120;break;}else{var $x_4_lcssa_i=$x_3_lcssa_i;var $y_3_lcssa_i=$y_0_i;var $e2_1_lcssa_i$1=$307$1;var $e2_1_lcssa_i$0=$307$0;label=123;break;}
 case 119: 
 var $327=___errno_location();
 HEAP32[(($327)>>2)]=34;
 var $328=($sign_0|0);
 var $329=($328)*((2.2250738585072014e-308));
 var $330=($329)*((2.2250738585072014e-308));
 var $_0=$330;label=273;break;
 case 120: 
 var $e2_110_i$0;
 var $e2_110_i$1;
 var $y_39_i;
 var $x_48_i;
 var $331=$y_39_i<(0.5);
 var $332=$x_48_i<<1;
 if($331){var $_pn_i=$y_39_i;var $x_5_i=$332;label=122;break;}else{label=121;break;}
 case 121: 
 var $334=$332|1;
 var $335=($y_39_i)-(1);
 var $_pn_i=$335;var $x_5_i=$334;label=122;break;
 case 122: 
 var $x_5_i;
 var $_pn_i;
 var $y_4_i=($y_39_i)+($_pn_i);
 var $$etemp$9$0=-1;
 var $$etemp$9$1=-1;
 var $337$0=_i64Add($e2_110_i$0,$e2_110_i$1,$$etemp$9$0,$$etemp$9$1);var $337$1=tempRet0;
 var $338=($x_5_i|0)>-1;
 if($338){var $x_48_i=$x_5_i;var $y_39_i=$y_4_i;var $e2_110_i$1=$337$1;var $e2_110_i$0=$337$0;label=120;break;}else{var $x_4_lcssa_i=$x_5_i;var $y_3_lcssa_i=$y_4_i;var $e2_1_lcssa_i$1=$337$1;var $e2_1_lcssa_i$0=$337$0;label=123;break;}
 case 123: 
 var $e2_1_lcssa_i$0;
 var $e2_1_lcssa_i$1;
 var $y_3_lcssa_i;
 var $x_4_lcssa_i;
 var $339$0=$bits_0_ph;
 var $339$1=0;
 var $340$0=$emin_0_ph;
 var $340$1=((((($emin_0_ph|0)<0))|0)?-1:0);
 var $$etemp$10$0=32;
 var $$etemp$10$1=0;
 var $341$0=_i64Subtract($$etemp$10$0,$$etemp$10$1,$340$0,$340$1);var $341$1=tempRet0;
 var $342$0=_i64Add($e2_1_lcssa_i$0,$e2_1_lcssa_i$1,$341$0,$341$1);var $342$1=tempRet0;
 var $343=(($339$1|0) > ($342$1|0)) | (((($339$1|0) == ($342$1|0) & ($339$0>>>0) >  ($342$0>>>0))));
 if($343){label=124;break;}else{var $_02_i=$bits_0_ph;label=125;break;}
 case 124: 
 var $345$0=$342$0;
 var $345=$345$0;
 var $346=($345|0)<0;
 var $__i=($346?0:$345);
 var $_02_i=$__i;label=125;break;
 case 125: 
 var $_02_i;
 var $348=($_02_i|0)<53;
 if($348){label=127;break;}else{label=126;break;}
 case 126: 
 var $_pre_i=($sign_0|0);
 var $y_5_i=$y_3_lcssa_i;var $x_6_i=$x_4_lcssa_i;var $bias_07_i=0;var $_pre_phi_i=$_pre_i;label=129;break;
 case 127: 
 var $350=(((84)-($_02_i))|0);
 var $351=_scalbn(1,$350);
 var $352=($sign_0|0);
 var $353=_copysign($351,$352);
 var $354=($_02_i|0)<32;
 var $355=$y_3_lcssa_i!=0;
 var $or_cond4_i=$354&$355;
 if($or_cond4_i){label=128;break;}else{var $y_5_i=$y_3_lcssa_i;var $x_6_i=$x_4_lcssa_i;var $bias_07_i=$353;var $_pre_phi_i=$352;label=129;break;}
 case 128: 
 var $357=$x_4_lcssa_i&1;
 var $358=($357|0)==0;
 var $359=$357^1;
 var $_x_4_i=((($359)+($x_4_lcssa_i))|0);
 var $_y_3_i=($358?0:$y_3_lcssa_i);
 var $y_5_i=$_y_3_i;var $x_6_i=$_x_4_i;var $bias_07_i=$353;var $_pre_phi_i=$352;label=129;break;
 case 129: 
 var $_pre_phi_i;
 var $bias_07_i;
 var $x_6_i;
 var $y_5_i;
 var $360=($x_6_i>>>0);
 var $361=($_pre_phi_i)*($360);
 var $362=($bias_07_i)+($361);
 var $363=($_pre_phi_i)*($y_5_i);
 var $364=($363)+($362);
 var $365=($364)-($bias_07_i);
 var $366=$365!=0;
 if($366){label=131;break;}else{label=130;break;}
 case 130: 
 var $368=___errno_location();
 HEAP32[(($368)>>2)]=34;
 label=131;break;
 case 131: 
 var $370$0=$e2_1_lcssa_i$0;
 var $370=$370$0;
 var $371=_scalbnl($365,$370);
 var $_0=$371;label=273;break;
 case 132: 
 var $373=HEAP32[(($4)>>2)];
 var $374=($373|0)==0;
 if($374){var $c_6=48;label=134;break;}else{label=133;break;}
 case 133: 
 var $376=HEAP32[(($3)>>2)];
 var $377=((($376)-(1))|0);
 HEAP32[(($3)>>2)]=$377;
 var $c_6=48;label=134;break;
 case 134: 
 var $c_6;
 var $379=$x_i;
 var $$etemp$11$0=512;
 var $$etemp$11$1=0;

 var $sum_i=((($emin_0_ph)+($bits_0_ph))|0);
 var $380=(((-$sum_i))|0);
 var $_08_i=$c_6;var $gotdig_0_i9=0;label=135;break;
 case 135: 
 var $gotdig_0_i9;
 var $_08_i;
 if(($_08_i|0)==48){ label=136;break;}else if(($_08_i|0)==46){ label=139;break;}else{var $_2_i=$_08_i;var $gotrad_0_i12=0;var $gotdig_2_i11=$gotdig_0_i9;var $lrp_1_i$1=0;var $lrp_1_i$0=0;label=148;break;}
 case 136: 
 var $382=HEAP32[(($3)>>2)];
 var $383=HEAP32[(($4)>>2)];
 var $384=($382>>>0)<($383>>>0);
 if($384){label=137;break;}else{label=138;break;}
 case 137: 
 var $386=(($382+1)|0);
 HEAP32[(($3)>>2)]=$386;
 var $387=HEAP8[($382)];
 var $388=($387&255);
 var $_08_i=$388;var $gotdig_0_i9=1;label=135;break;
 case 138: 
 var $390=___shgetc($f);
 var $_08_i=$390;var $gotdig_0_i9=1;label=135;break;
 case 139: 
 var $392=HEAP32[(($3)>>2)];
 var $393=HEAP32[(($4)>>2)];
 var $394=($392>>>0)<($393>>>0);
 if($394){label=140;break;}else{label=141;break;}
 case 140: 
 var $396=(($392+1)|0);
 HEAP32[(($3)>>2)]=$396;
 var $397=HEAP8[($392)];
 var $398=($397&255);
 var $_1_ph_i=$398;label=142;break;
 case 141: 
 var $400=___shgetc($f);
 var $_1_ph_i=$400;label=142;break;
 case 142: 
 var $_1_ph_i;
 var $401=($_1_ph_i|0)==48;
 if($401){var $lrp_0110_i$1=-1;var $lrp_0110_i$0=-1;label=143;break;}else{var $_2_i=$_1_ph_i;var $gotrad_0_i12=1;var $gotdig_2_i11=$gotdig_0_i9;var $lrp_1_i$1=0;var $lrp_1_i$0=0;label=148;break;}
 case 143: 
 var $lrp_0110_i$0;
 var $lrp_0110_i$1;
 var $402=HEAP32[(($3)>>2)];
 var $403=HEAP32[(($4)>>2)];
 var $404=($402>>>0)<($403>>>0);
 if($404){label=144;break;}else{label=145;break;}
 case 144: 
 var $406=(($402+1)|0);
 HEAP32[(($3)>>2)]=$406;
 var $407=HEAP8[($402)];
 var $408=($407&255);
 var $_1_be_i=$408;label=146;break;
 case 145: 
 var $410=___shgetc($f);
 var $_1_be_i=$410;label=146;break;
 case 146: 
 var $_1_be_i;
 var $411=($_1_be_i|0)==48;
 if($411){label=147;break;}else{var $_2_i=$_1_be_i;var $gotrad_0_i12=1;var $gotdig_2_i11=1;var $lrp_1_i$1=$lrp_0110_i$1;var $lrp_1_i$0=$lrp_0110_i$0;label=148;break;}
 case 147: 
 var $$etemp$12$0=-1;
 var $$etemp$12$1=-1;
 var $phitmp_i10$0=_i64Add($lrp_0110_i$0,$lrp_0110_i$1,$$etemp$12$0,$$etemp$12$1);var $phitmp_i10$1=tempRet0;
 var $lrp_0110_i$1=$phitmp_i10$1;var $lrp_0110_i$0=$phitmp_i10$0;label=143;break;
 case 148: 
 var $lrp_1_i$0;
 var $lrp_1_i$1;
 var $gotdig_2_i11;
 var $gotrad_0_i12;
 var $_2_i;
 var $412=(($x_i)|0);
 HEAP32[(($412)>>2)]=0;
 var $413=((($_2_i)-(48))|0);
 var $414=($413>>>0)<10;
 var $415=($_2_i|0)==46;
 var $or_cond789_i=$414|$415;
 if($or_cond789_i){label=149;break;}else{var $lrp_2_lcssa_i$1=$lrp_1_i$1;var $lrp_2_lcssa_i$0=$lrp_1_i$0;var $dc_0_lcssa_i$1=0;var $dc_0_lcssa_i$0=0;var $lnz_0_lcssa_i=0;var $gotdig_3_lcssa_i=$gotdig_2_i11;var $gotrad_1_lcssa_i=$gotrad_0_i12;var $k_0_lcssa_i=0;var $j_0_lcssa_i=0;var $_3_lcssa_i=$_2_i;label=162;break;}
 case 149: 
 var $416=(($x_i+496)|0);
 var $lrp_290_i$1=$lrp_1_i$1;var $lrp_290_i$0=$lrp_1_i$0;var $dc_091_i$1=0;var $dc_091_i$0=0;var $lnz_092_i=0;var $gotdig_393_i=$gotdig_2_i11;var $gotrad_194_i=$gotrad_0_i12;var $k_095_i=0;var $j_096_i=0;var $_397_i=$_2_i;var $418=$413;var $417=$415;label=150;break;
 case 150: 
 var $417;
 var $418;
 var $_397_i;
 var $j_096_i;
 var $k_095_i;
 var $gotrad_194_i;
 var $gotdig_393_i;
 var $lnz_092_i;
 var $dc_091_i$0;
 var $dc_091_i$1;
 var $lrp_290_i$0;
 var $lrp_290_i$1;
 if($417){label=151;break;}else{label=152;break;}
 case 151: 
 var $cond_i=($gotrad_194_i|0)==0;
 if($cond_i){var $j_2_i=$j_096_i;var $k_2_i=$k_095_i;var $gotrad_2_i=1;var $gotdig_4_i=$gotdig_393_i;var $lnz_2_i=$lnz_092_i;var $dc_1_i14$1=$dc_091_i$1;var $dc_1_i14$0=$dc_091_i$0;var $lrp_3_i$1=$dc_091_i$1;var $lrp_3_i$0=$dc_091_i$0;label=158;break;}else{var $lrp_4_i$1=$lrp_290_i$1;var $lrp_4_i$0=$lrp_290_i$0;var $dc_077_i$1=$dc_091_i$1;var $dc_077_i$0=$dc_091_i$0;var $lnz_079_i=$lnz_092_i;var $gotdig_381_i=$gotdig_393_i;var $k_084_i=$k_095_i;var $j_086_i=$j_096_i;var $_388_i=$_397_i;label=163;break;}
 case 152: 
 var $421=($k_095_i|0)<125;
 var $$etemp$13$0=1;
 var $$etemp$13$1=0;
 var $422$0=_i64Add($dc_091_i$0,$dc_091_i$1,$$etemp$13$0,$$etemp$13$1);var $422$1=tempRet0;
 var $423=($_397_i|0)!=48;
 if($421){label=153;break;}else{label=156;break;}
 case 153: 
 var $425$0=$422$0;
 var $425=$425$0;
 var $_lnz_0_i=($423?$425:$lnz_092_i);
 var $426=($j_096_i|0)==0;
 var $427=(($x_i+($k_095_i<<2))|0);
 if($426){var $storemerge_i=$418;label=155;break;}else{label=154;break;}
 case 154: 
 var $429=HEAP32[(($427)>>2)];
 var $430=((($429)*(10))&-1);
 var $431=((($_397_i)-(48))|0);
 var $432=((($431)+($430))|0);
 var $storemerge_i=$432;label=155;break;
 case 155: 
 var $storemerge_i;
 HEAP32[(($427)>>2)]=$storemerge_i;
 var $434=((($j_096_i)+(1))|0);
 var $435=($434|0)==9;
 var $436=($435&1);
 var $_k_0_i=((($436)+($k_095_i))|0);
 var $_10_i=($435?0:$434);
 var $j_2_i=$_10_i;var $k_2_i=$_k_0_i;var $gotrad_2_i=$gotrad_194_i;var $gotdig_4_i=1;var $lnz_2_i=$_lnz_0_i;var $dc_1_i14$1=$422$1;var $dc_1_i14$0=$422$0;var $lrp_3_i$1=$lrp_290_i$1;var $lrp_3_i$0=$lrp_290_i$0;label=158;break;
 case 156: 
 if($423){label=157;break;}else{var $j_2_i=$j_096_i;var $k_2_i=$k_095_i;var $gotrad_2_i=$gotrad_194_i;var $gotdig_4_i=$gotdig_393_i;var $lnz_2_i=$lnz_092_i;var $dc_1_i14$1=$422$1;var $dc_1_i14$0=$422$0;var $lrp_3_i$1=$lrp_290_i$1;var $lrp_3_i$0=$lrp_290_i$0;label=158;break;}
 case 157: 
 var $439=HEAP32[(($416)>>2)];
 var $440=$439|1;
 HEAP32[(($416)>>2)]=$440;
 var $j_2_i=$j_096_i;var $k_2_i=$k_095_i;var $gotrad_2_i=$gotrad_194_i;var $gotdig_4_i=$gotdig_393_i;var $lnz_2_i=$lnz_092_i;var $dc_1_i14$1=$422$1;var $dc_1_i14$0=$422$0;var $lrp_3_i$1=$lrp_290_i$1;var $lrp_3_i$0=$lrp_290_i$0;label=158;break;
 case 158: 
 var $lrp_3_i$0;
 var $lrp_3_i$1;
 var $dc_1_i14$0;
 var $dc_1_i14$1;
 var $lnz_2_i;
 var $gotdig_4_i;
 var $gotrad_2_i;
 var $k_2_i;
 var $j_2_i;
 var $441=HEAP32[(($3)>>2)];
 var $442=HEAP32[(($4)>>2)];
 var $443=($441>>>0)<($442>>>0);
 if($443){label=159;break;}else{label=160;break;}
 case 159: 
 var $445=(($441+1)|0);
 HEAP32[(($3)>>2)]=$445;
 var $446=HEAP8[($441)];
 var $447=($446&255);
 var $_3_be_i=$447;label=161;break;
 case 160: 
 var $449=___shgetc($f);
 var $_3_be_i=$449;label=161;break;
 case 161: 
 var $_3_be_i;
 var $450=((($_3_be_i)-(48))|0);
 var $451=($450>>>0)<10;
 var $452=($_3_be_i|0)==46;
 var $or_cond7_i=$451|$452;
 if($or_cond7_i){var $lrp_290_i$1=$lrp_3_i$1;var $lrp_290_i$0=$lrp_3_i$0;var $dc_091_i$1=$dc_1_i14$1;var $dc_091_i$0=$dc_1_i14$0;var $lnz_092_i=$lnz_2_i;var $gotdig_393_i=$gotdig_4_i;var $gotrad_194_i=$gotrad_2_i;var $k_095_i=$k_2_i;var $j_096_i=$j_2_i;var $_397_i=$_3_be_i;var $418=$450;var $417=$452;label=150;break;}else{var $lrp_2_lcssa_i$1=$lrp_3_i$1;var $lrp_2_lcssa_i$0=$lrp_3_i$0;var $dc_0_lcssa_i$1=$dc_1_i14$1;var $dc_0_lcssa_i$0=$dc_1_i14$0;var $lnz_0_lcssa_i=$lnz_2_i;var $gotdig_3_lcssa_i=$gotdig_4_i;var $gotrad_1_lcssa_i=$gotrad_2_i;var $k_0_lcssa_i=$k_2_i;var $j_0_lcssa_i=$j_2_i;var $_3_lcssa_i=$_3_be_i;label=162;break;}
 case 162: 
 var $_3_lcssa_i;
 var $j_0_lcssa_i;
 var $k_0_lcssa_i;
 var $gotrad_1_lcssa_i;
 var $gotdig_3_lcssa_i;
 var $lnz_0_lcssa_i;
 var $dc_0_lcssa_i$0;
 var $dc_0_lcssa_i$1;
 var $lrp_2_lcssa_i$0;
 var $lrp_2_lcssa_i$1;
 var $453=($gotrad_1_lcssa_i|0)==0;
 var $dc_0_lrp_2_i$0=($453?$dc_0_lcssa_i$0:$lrp_2_lcssa_i$0);
 var $dc_0_lrp_2_i$1=($453?$dc_0_lcssa_i$1:$lrp_2_lcssa_i$1);
 var $lrp_4_i$1=$dc_0_lrp_2_i$1;var $lrp_4_i$0=$dc_0_lrp_2_i$0;var $dc_077_i$1=$dc_0_lcssa_i$1;var $dc_077_i$0=$dc_0_lcssa_i$0;var $lnz_079_i=$lnz_0_lcssa_i;var $gotdig_381_i=$gotdig_3_lcssa_i;var $k_084_i=$k_0_lcssa_i;var $j_086_i=$j_0_lcssa_i;var $_388_i=$_3_lcssa_i;label=163;break;
 case 163: 
 var $_388_i;
 var $j_086_i;
 var $k_084_i;
 var $gotdig_381_i;
 var $lnz_079_i;
 var $dc_077_i$0;
 var $dc_077_i$1;
 var $lrp_4_i$0;
 var $lrp_4_i$1;
 var $454=($gotdig_381_i|0)!=0;
 if($454){label=164;break;}else{label=171;break;}
 case 164: 
 var $456=$_388_i|32;
 var $457=($456|0)==101;
 if($457){label=165;break;}else{label=171;break;}
 case 165: 
 var $459$0=_scanexp($f,$pok);
 var $459$1=tempRet0;
 var $$etemp$14$0=0;
 var $$etemp$14$1=-2147483648;
 var $460=(($459$0|0) == ($$etemp$14$0|0)) & (($459$1|0) == ($$etemp$14$1|0));
 if($460){label=166;break;}else{var $e10_0_i$1=$459$1;var $e10_0_i$0=$459$0;label=170;break;}
 case 166: 
 if($58){label=169;break;}else{label=167;break;}
 case 167: 
 var $463=HEAP32[(($4)>>2)];
 var $464=($463|0)==0;
 if($464){var $e10_0_i$1=0;var $e10_0_i$0=0;label=170;break;}else{label=168;break;}
 case 168: 
 var $466=HEAP32[(($3)>>2)];
 var $467=((($466)-(1))|0);
 HEAP32[(($3)>>2)]=$467;
 var $e10_0_i$1=0;var $e10_0_i$0=0;label=170;break;
 case 169: 
 ___shlim($f,0);
 var $_0=0;label=273;break;
 case 170: 
 var $e10_0_i$0;
 var $e10_0_i$1;
 var $470$0=_i64Add($e10_0_i$0,$e10_0_i$1,$lrp_4_i$0,$lrp_4_i$1);var $470$1=tempRet0;
 var $lrp_5_i$1=$470$1;var $lrp_5_i$0=$470$0;label=174;break;
 case 171: 
 var $472=($_388_i|0)>-1;
 if($472){label=172;break;}else{var $lrp_5_i$1=$lrp_4_i$1;var $lrp_5_i$0=$lrp_4_i$0;label=174;break;}
 case 172: 
 var $474=HEAP32[(($4)>>2)];
 var $475=($474|0)==0;
 if($475){var $lrp_5_i$1=$lrp_4_i$1;var $lrp_5_i$0=$lrp_4_i$0;label=174;break;}else{label=173;break;}
 case 173: 
 var $477=HEAP32[(($3)>>2)];
 var $478=((($477)-(1))|0);
 HEAP32[(($3)>>2)]=$478;
 var $lrp_5_i$1=$lrp_4_i$1;var $lrp_5_i$0=$lrp_4_i$0;label=174;break;
 case 174: 
 var $lrp_5_i$0;
 var $lrp_5_i$1;
 if($454){label=176;break;}else{label=175;break;}
 case 175: 
 var $481=___errno_location();
 HEAP32[(($481)>>2)]=22;
 ___shlim($f,0);
 var $_0=0;label=273;break;
 case 176: 
 var $483=HEAP32[(($412)>>2)];
 var $484=($483|0)==0;
 if($484){label=177;break;}else{label=178;break;}
 case 177: 
 var $486=($sign_0|0);
 var $487=($486)*(0);
 var $_0=$487;label=273;break;
 case 178: 
 var $489=(($lrp_5_i$0|0) == ($dc_077_i$0|0)) & (($lrp_5_i$1|0) == ($dc_077_i$1|0));
 var $$etemp$15$0=10;
 var $$etemp$15$1=0;
 var $490=(($dc_077_i$1|0) < ($$etemp$15$1|0)) | (((($dc_077_i$1|0) == ($$etemp$15$1|0) & ($dc_077_i$0>>>0) <  ($$etemp$15$0>>>0))));
 var $or_cond_i15=$489&$490;
 if($or_cond_i15){label=179;break;}else{label=182;break;}
 case 179: 
 var $492=($bits_0_ph>>>0)>30;
 if($492){label=181;break;}else{label=180;break;}
 case 180: 
 var $494=$483>>>($bits_0_ph>>>0);
 var $495=($494|0)==0;
 if($495){label=181;break;}else{label=182;break;}
 case 181: 
 var $497=($sign_0|0);
 var $498=($483>>>0);
 var $499=($497)*($498);
 var $_0=$499;label=273;break;
 case 182: 
 var $501=(((($emin_0_ph|0))/(-2))&-1);
 var $502$0=$501;
 var $502$1=((((($501|0)<0))|0)?-1:0);
 var $503=(($lrp_5_i$1|0) > ($502$1|0)) | (((($lrp_5_i$1|0) == ($502$1|0) & ($lrp_5_i$0>>>0) >  ($502$0>>>0))));
 if($503){label=183;break;}else{label=184;break;}
 case 183: 
 var $505=___errno_location();
 HEAP32[(($505)>>2)]=34;
 var $506=($sign_0|0);
 var $507=($506)*((1.7976931348623157e+308));
 var $508=($507)*((1.7976931348623157e+308));
 var $_0=$508;label=273;break;
 case 184: 
 var $510=((($emin_0_ph)-(106))|0);
 var $511$0=$510;
 var $511$1=((((($510|0)<0))|0)?-1:0);
 var $512=(($lrp_5_i$1|0) < ($511$1|0)) | (((($lrp_5_i$1|0) == ($511$1|0) & ($lrp_5_i$0>>>0) <  ($511$0>>>0))));
 if($512){label=185;break;}else{label=186;break;}
 case 185: 
 var $514=___errno_location();
 HEAP32[(($514)>>2)]=34;
 var $515=($sign_0|0);
 var $516=($515)*((2.2250738585072014e-308));
 var $517=($516)*((2.2250738585072014e-308));
 var $_0=$517;label=273;break;
 case 186: 
 var $519=($j_086_i|0)==0;
 if($519){var $k_3_i=$k_084_i;label=192;break;}else{label=187;break;}
 case 187: 
 var $520=($j_086_i|0)<9;
 if($520){label=188;break;}else{label=191;break;}
 case 188: 
 var $521=(($x_i+($k_084_i<<2))|0);
 var $_promoted_i=HEAP32[(($521)>>2)];
 var $j_371_i=$j_086_i;var $523=$_promoted_i;label=189;break;
 case 189: 
 var $523;
 var $j_371_i;
 var $524=((($523)*(10))&-1);
 var $525=((($j_371_i)+(1))|0);
 var $526=($525|0)<9;
 if($526){var $j_371_i=$525;var $523=$524;label=189;break;}else{label=190;break;}
 case 190: 
 HEAP32[(($521)>>2)]=$524;
 label=191;break;
 case 191: 
 var $528=((($k_084_i)+(1))|0);
 var $k_3_i=$528;label=192;break;
 case 192: 
 var $k_3_i;
 var $530$0=$lrp_5_i$0;
 var $530=$530$0;
 var $531=($lnz_079_i|0)<9;
 if($531){label=193;break;}else{label=201;break;}
 case 193: 
 var $533=($lnz_079_i|0)<=($530|0);
 var $534=($530|0)<18;
 var $or_cond3_i16=$533&$534;
 if($or_cond3_i16){label=194;break;}else{label=201;break;}
 case 194: 
 var $536=($530|0)==9;
 if($536){label=195;break;}else{label=196;break;}
 case 195: 
 var $538=($sign_0|0);
 var $539=HEAP32[(($412)>>2)];
 var $540=($539>>>0);
 var $541=($538)*($540);
 var $_0=$541;label=273;break;
 case 196: 
 var $543=($530|0)<9;
 if($543){label=197;break;}else{label=198;break;}
 case 197: 
 var $545=($sign_0|0);
 var $546=HEAP32[(($412)>>2)];
 var $547=($546>>>0);
 var $548=($545)*($547);
 var $549=(((8)-($530))|0);
 var $550=((104888+($549<<2))|0);
 var $551=HEAP32[(($550)>>2)];
 var $552=($551|0);
 var $553=($548)/($552);
 var $_0=$553;label=273;break;
 case 198: 
 var $555=((($530)*(-3))&-1);
 var $_neg20_i=((($bits_0_ph)+(27))|0);
 var $556=((($_neg20_i)+($555))|0);
 var $557=($556|0)>30;
 var $_pre_i17=HEAP32[(($412)>>2)];
 if($557){label=200;break;}else{label=199;break;}
 case 199: 
 var $559=$_pre_i17>>>($556>>>0);
 var $560=($559|0)==0;
 if($560){label=200;break;}else{label=201;break;}
 case 200: 
 var $561=($sign_0|0);
 var $562=($_pre_i17>>>0);
 var $563=($561)*($562);
 var $564=((($530)-(10))|0);
 var $565=((104888+($564<<2))|0);
 var $566=HEAP32[(($565)>>2)];
 var $567=($566|0);
 var $568=($563)*($567);
 var $_0=$568;label=273;break;
 case 201: 
 var $570=(((($530|0))%(9))&-1);
 var $571=($570|0)==0;
 if($571){var $a_2_ph40_i=0;var $z_1_ph39_i=$k_3_i;var $e2_0_ph_i=0;var $rp_2_ph38_i=$530;label=210;break;}else{label=202;break;}
 case 202: 
 var $573=($530|0)>-1;
 var $574=((($570)+(9))|0);
 var $575=($573?$570:$574);
 var $576=(((8)-($575))|0);
 var $577=((104888+($576<<2))|0);
 var $578=HEAP32[(($577)>>2)];
 var $579=($k_3_i|0)==0;
 if($579){var $z_0_i=0;var $a_0_lcssa161_i=0;var $rp_0_lcssa162_i=$530;label=209;break;}else{label=203;break;}
 case 203: 
 var $580=(((1000000000)/(($578|0)))&-1);
 var $rp_060_i=$530;var $a_061_i=0;var $k_462_i=0;var $carry_063_i=0;label=204;break;
 case 204: 
 var $carry_063_i;
 var $k_462_i;
 var $a_061_i;
 var $rp_060_i;
 var $581=(($x_i+($k_462_i<<2))|0);
 var $582=HEAP32[(($581)>>2)];
 var $583=(((($582>>>0))%(($578>>>0)))&-1);
 var $584=(((($582>>>0))/(($578>>>0)))&-1);
 var $585=((($584)+($carry_063_i))|0);
 HEAP32[(($581)>>2)]=$585;
 var $586=(Math_imul($583,$580)|0);
 var $587=($k_462_i|0)==($a_061_i|0);
 var $588=($585|0)==0;
 var $or_cond11_i=$587&$588;
 var $589=((($k_462_i)+(1))|0);
 if($or_cond11_i){label=205;break;}else{var $a_1_i=$a_061_i;var $rp_1_i18=$rp_060_i;label=206;break;}
 case 205: 
 var $591=$589&127;
 var $592=((($rp_060_i)-(9))|0);
 var $a_1_i=$591;var $rp_1_i18=$592;label=206;break;
 case 206: 
 var $rp_1_i18;
 var $a_1_i;
 var $593=($589|0)==($k_3_i|0);
 if($593){label=207;break;}else{var $rp_060_i=$rp_1_i18;var $a_061_i=$a_1_i;var $k_462_i=$589;var $carry_063_i=$586;label=204;break;}
 case 207: 
 var $594=($586|0)==0;
 if($594){var $z_0_i=$k_3_i;var $a_0_lcssa161_i=$a_1_i;var $rp_0_lcssa162_i=$rp_1_i18;label=209;break;}else{label=208;break;}
 case 208: 
 var $596=((($k_3_i)+(1))|0);
 var $597=(($x_i+($k_3_i<<2))|0);
 HEAP32[(($597)>>2)]=$586;
 var $z_0_i=$596;var $a_0_lcssa161_i=$a_1_i;var $rp_0_lcssa162_i=$rp_1_i18;label=209;break;
 case 209: 
 var $rp_0_lcssa162_i;
 var $a_0_lcssa161_i;
 var $z_0_i;
 var $598=(((9)-($575))|0);
 var $599=((($598)+($rp_0_lcssa162_i))|0);
 var $a_2_ph40_i=$a_0_lcssa161_i;var $z_1_ph39_i=$z_0_i;var $e2_0_ph_i=0;var $rp_2_ph38_i=$599;label=210;break;
 case 210: 
 var $rp_2_ph38_i;
 var $e2_0_ph_i;
 var $z_1_ph39_i;
 var $a_2_ph40_i;
 var $600=($rp_2_ph38_i|0)<18;
 var $601=(($x_i+($a_2_ph40_i<<2))|0);
 if($600){var $z_1_us_i=$z_1_ph39_i;var $e2_0_us_i=$e2_0_ph_i;label=212;break;}else{label=211;break;}
 case 211: 
 var $602=($rp_2_ph38_i|0)==18;
 if($602){var $z_1_us45_i=$z_1_ph39_i;var $e2_0_us44_i=$e2_0_ph_i;label=219;break;}else{var $a_3_ph_i=$a_2_ph40_i;var $z_5_ph_i=$z_1_ph39_i;var $e2_1_ph_i=$e2_0_ph_i;var $rp_3_ph33_i=$rp_2_ph38_i;label=243;break;}
 case 212: 
 var $e2_0_us_i;
 var $z_1_us_i;
 var $603=((($z_1_us_i)+(127))|0);
 var $carry1_0_us_i=0;var $k_5_in_us_i=$603;var $z_2_us_i=$z_1_us_i;label=213;break;
 case 213: 
 var $z_2_us_i;
 var $k_5_in_us_i;
 var $carry1_0_us_i;
 var $k_5_us_i=$k_5_in_us_i&127;
 var $605=(($x_i+($k_5_us_i<<2))|0);
 var $606=HEAP32[(($605)>>2)];
 var $607$0=$606;
 var $607$1=0;
 var $608$0=($607$0<<29)|(0>>>3);
 var $608$1=($607$1<<29)|($607$0>>>3);
 var $609$0=$carry1_0_us_i;
 var $609$1=0;
 var $610$0=_i64Add($608$0,$608$1,$609$0,$609$1);var $610$1=tempRet0;
 var $$etemp$16$0=1000000000;
 var $$etemp$16$1=0;
 var $611=(($610$1>>>0) > ($$etemp$16$1>>>0)) | (((($610$1>>>0) == ($$etemp$16$1>>>0) & ($610$0>>>0) >  ($$etemp$16$0>>>0))));
 var $extract_t19_us_i$0=$610$0;
 var $extract_t19_us_i=$extract_t19_us_i$0;
 if($611){label=214;break;}else{var $carry1_1_us_i=0;var $_sink_off0_us_i=$extract_t19_us_i;label=215;break;}
 case 214: 
 var $$etemp$17$0=1000000000;
 var $$etemp$17$1=0;
 var $613$0=___udivdi3($610$0,$610$1,$$etemp$17$0,$$etemp$17$1);var $613$1=tempRet0;
 var $614$0=$613$0;
 var $614=$614$0;
 var $$etemp$18$0=1000000000;
 var $$etemp$18$1=0;
 var $615$0=___uremdi3($610$0,$610$1,$$etemp$18$0,$$etemp$18$1);var $615$1=tempRet0;
 var $extract_t_us_i$0=$615$0;
 var $extract_t_us_i=$extract_t_us_i$0;
 var $carry1_1_us_i=$614;var $_sink_off0_us_i=$extract_t_us_i;label=215;break;
 case 215: 
 var $_sink_off0_us_i;
 var $carry1_1_us_i;
 HEAP32[(($605)>>2)]=$_sink_off0_us_i;
 var $617=((($z_2_us_i)+(127))|0);
 var $618=$617&127;
 var $619=($k_5_us_i|0)!=($618|0);
 var $620=($k_5_us_i|0)==($a_2_ph40_i|0);
 var $or_cond12_us_i=$619|$620;
 if($or_cond12_us_i){var $z_3_us_i=$z_2_us_i;label=217;break;}else{label=216;break;}
 case 216: 
 var $622=($_sink_off0_us_i|0)==0;
 var $k_5_z_2_us_i=($622?$k_5_us_i:$z_2_us_i);
 var $z_3_us_i=$k_5_z_2_us_i;label=217;break;
 case 217: 
 var $z_3_us_i;
 var $624=((($k_5_us_i)-(1))|0);
 if($620){label=218;break;}else{var $carry1_0_us_i=$carry1_1_us_i;var $k_5_in_us_i=$624;var $z_2_us_i=$z_3_us_i;label=213;break;}
 case 218: 
 var $626=((($e2_0_us_i)-(29))|0);
 var $627=($carry1_1_us_i|0)==0;
 if($627){var $z_1_us_i=$z_3_us_i;var $e2_0_us_i=$626;label=212;break;}else{var $_lcssa43_i=$626;var $z_3_lcssa_lcssa_i=$z_3_us_i;var $carry1_1_lcssa_lcssa_i=$carry1_1_us_i;label=227;break;}
 case 219: 
 var $e2_0_us44_i;
 var $z_1_us45_i;
 var $628=HEAP32[(($601)>>2)];
 var $629=($628>>>0)<9007199;
 if($629){label=220;break;}else{var $a_3_ph_i=$a_2_ph40_i;var $z_5_ph_i=$z_1_us45_i;var $e2_1_ph_i=$e2_0_us44_i;var $rp_3_ph33_i=18;label=243;break;}
 case 220: 
 var $630=((($z_1_us45_i)+(127))|0);
 var $carry1_0_us49_i=0;var $k_5_in_us48_i=$630;var $z_2_us47_i=$z_1_us45_i;label=221;break;
 case 221: 
 var $z_2_us47_i;
 var $k_5_in_us48_i;
 var $carry1_0_us49_i;
 var $k_5_us50_i=$k_5_in_us48_i&127;
 var $632=(($x_i+($k_5_us50_i<<2))|0);
 var $633=HEAP32[(($632)>>2)];
 var $634$0=$633;
 var $634$1=0;
 var $635$0=($634$0<<29)|(0>>>3);
 var $635$1=($634$1<<29)|($634$0>>>3);
 var $636$0=$carry1_0_us49_i;
 var $636$1=0;
 var $637$0=_i64Add($635$0,$635$1,$636$0,$636$1);var $637$1=tempRet0;
 var $$etemp$19$0=1000000000;
 var $$etemp$19$1=0;
 var $638=(($637$1>>>0) > ($$etemp$19$1>>>0)) | (((($637$1>>>0) == ($$etemp$19$1>>>0) & ($637$0>>>0) >  ($$etemp$19$0>>>0))));
 var $extract_t19_us51_i$0=$637$0;
 var $extract_t19_us51_i=$extract_t19_us51_i$0;
 if($638){label=222;break;}else{var $carry1_1_us54_i=0;var $_sink_off0_us53_i=$extract_t19_us51_i;label=223;break;}
 case 222: 
 var $$etemp$20$0=1000000000;
 var $$etemp$20$1=0;
 var $640$0=___udivdi3($637$0,$637$1,$$etemp$20$0,$$etemp$20$1);var $640$1=tempRet0;
 var $641$0=$640$0;
 var $641=$641$0;
 var $$etemp$21$0=1000000000;
 var $$etemp$21$1=0;
 var $642$0=___uremdi3($637$0,$637$1,$$etemp$21$0,$$etemp$21$1);var $642$1=tempRet0;
 var $extract_t_us52_i$0=$642$0;
 var $extract_t_us52_i=$extract_t_us52_i$0;
 var $carry1_1_us54_i=$641;var $_sink_off0_us53_i=$extract_t_us52_i;label=223;break;
 case 223: 
 var $_sink_off0_us53_i;
 var $carry1_1_us54_i;
 HEAP32[(($632)>>2)]=$_sink_off0_us53_i;
 var $644=((($z_2_us47_i)+(127))|0);
 var $645=$644&127;
 var $646=($k_5_us50_i|0)!=($645|0);
 var $647=($k_5_us50_i|0)==($a_2_ph40_i|0);
 var $or_cond12_us55_i=$646|$647;
 if($or_cond12_us55_i){var $z_3_us57_i=$z_2_us47_i;label=225;break;}else{label=224;break;}
 case 224: 
 var $649=($_sink_off0_us53_i|0)==0;
 var $k_5_z_2_us56_i=($649?$k_5_us50_i:$z_2_us47_i);
 var $z_3_us57_i=$k_5_z_2_us56_i;label=225;break;
 case 225: 
 var $z_3_us57_i;
 var $651=((($k_5_us50_i)-(1))|0);
 if($647){label=226;break;}else{var $carry1_0_us49_i=$carry1_1_us54_i;var $k_5_in_us48_i=$651;var $z_2_us47_i=$z_3_us57_i;label=221;break;}
 case 226: 
 var $653=((($e2_0_us44_i)-(29))|0);
 var $654=($carry1_1_us54_i|0)==0;
 if($654){var $z_1_us45_i=$z_3_us57_i;var $e2_0_us44_i=$653;label=219;break;}else{var $_lcssa43_i=$653;var $z_3_lcssa_lcssa_i=$z_3_us57_i;var $carry1_1_lcssa_lcssa_i=$carry1_1_us54_i;label=227;break;}
 case 227: 
 var $carry1_1_lcssa_lcssa_i;
 var $z_3_lcssa_lcssa_i;
 var $_lcssa43_i;
 var $655=((($rp_2_ph38_i)+(9))|0);
 var $656=((($a_2_ph40_i)+(127))|0);
 var $657=$656&127;
 var $658=($657|0)==($z_3_lcssa_lcssa_i|0);
 if($658){label=228;break;}else{var $z_4_i=$z_3_lcssa_lcssa_i;label=229;break;}
 case 228: 
 var $660=((($z_3_lcssa_lcssa_i)+(127))|0);
 var $661=$660&127;
 var $662=(($x_i+($661<<2))|0);
 var $663=HEAP32[(($662)>>2)];
 var $664=((($z_3_lcssa_lcssa_i)+(126))|0);
 var $665=$664&127;
 var $666=(($x_i+($665<<2))|0);
 var $667=HEAP32[(($666)>>2)];
 var $668=$667|$663;
 HEAP32[(($666)>>2)]=$668;
 var $z_4_i=$661;label=229;break;
 case 229: 
 var $z_4_i;
 var $670=(($x_i+($657<<2))|0);
 HEAP32[(($670)>>2)]=$carry1_1_lcssa_lcssa_i;
 var $a_2_ph40_i=$657;var $z_1_ph39_i=$z_4_i;var $e2_0_ph_i=$_lcssa43_i;var $rp_2_ph38_i=$655;label=210;break;
 case 230: 
 var $e2_1_i;
 var $a_3_i;
 var $i_025_i=0;label=232;break;
 case 231: 
 var $672=($685|0)<2;
 if($672){var $i_025_i=$685;label=232;break;}else{var $i_1_i=$685;label=235;break;}
 case 232: 
 var $i_025_i;
 var $674=((($i_025_i)+($a_3_i))|0);
 var $675=$674&127;
 var $676=($675|0)==($z_5_ph_i|0);
 if($676){var $i_1_i=2;label=235;break;}else{label=233;break;}
 case 233: 
 var $678=(($x_i+($675<<2))|0);
 var $679=HEAP32[(($678)>>2)];
 var $680=((104880+($i_025_i<<2))|0);
 var $681=HEAP32[(($680)>>2)];
 var $682=($679>>>0)<($681>>>0);
 if($682){var $i_1_i=2;label=235;break;}else{label=234;break;}
 case 234: 
 var $684=($679>>>0)>($681>>>0);
 var $685=((($i_025_i)+(1))|0);
 if($684){var $i_1_i=$i_025_i;label=235;break;}else{label=231;break;}
 case 235: 
 var $i_1_i;
 var $687=($i_1_i|0)==2;
 var $or_cond13_i=$687&$718;
 if($or_cond13_i){label=236;break;}else{label=237;break;}
 case 236: 
 var $688=$a_3_i&127;
 var $689=($688|0)==($z_5_ph_i|0);
 if($689){label=246;break;}else{var $z_7_i=$z_5_ph_i;label=247;break;}
 case 237: 
 var $691=((($_14_i)+($e2_1_i))|0);
 var $692=($a_3_i|0)==($z_5_ph_i|0);
 if($692){var $a_3_i=$z_5_ph_i;var $e2_1_i=$691;label=230;break;}else{label=238;break;}
 case 238: 
 var $693=1<<$_14_i;
 var $694=((($693)-(1))|0);
 var $695=1000000000>>>($_14_i>>>0);
 var $rp_426_i=$rp_3_i_ph;var $a_427_i=$a_3_i;var $k_628_i=$a_3_i;var $carry3_030_i=0;label=239;break;
 case 239: 
 var $carry3_030_i;
 var $k_628_i;
 var $a_427_i;
 var $rp_426_i;
 var $696=(($x_i+($k_628_i<<2))|0);
 var $697=HEAP32[(($696)>>2)];
 var $698=$697&$694;
 var $699=$697>>>($_14_i>>>0);
 var $700=((($699)+($carry3_030_i))|0);
 HEAP32[(($696)>>2)]=$700;
 var $701=(Math_imul($698,$695)|0);
 var $702=($k_628_i|0)==($a_427_i|0);
 var $703=($700|0)==0;
 var $or_cond15_i=$702&$703;
 var $704=((($k_628_i)+(1))|0);
 var $705=$704&127;
 var $706=((($rp_426_i)-(9))|0);
 var $rp_5_i=($or_cond15_i?$706:$rp_426_i);
 var $a_5_i=($or_cond15_i?$705:$a_427_i);
 var $707=($705|0)==($z_5_ph_i|0);
 if($707){label=240;break;}else{var $rp_426_i=$rp_5_i;var $a_427_i=$a_5_i;var $k_628_i=$705;var $carry3_030_i=$701;label=239;break;}
 case 240: 
 var $708=($701|0)==0;
 if($708){var $a_3_i_ph=$a_5_i;var $e2_1_i_ph=$691;var $rp_3_i_ph=$rp_5_i;label=244;break;}else{label=241;break;}
 case 241: 
 var $710=($714|0)==($a_5_i|0);
 if($710){label=245;break;}else{label=242;break;}
 case 242: 
 var $712=(($x_i+($z_5_ph_i<<2))|0);
 HEAP32[(($712)>>2)]=$701;
 var $a_3_ph_i=$a_5_i;var $z_5_ph_i=$714;var $e2_1_ph_i=$691;var $rp_3_ph33_i=$rp_5_i;label=243;break;
 case 243: 
 var $rp_3_ph33_i;
 var $e2_1_ph_i;
 var $z_5_ph_i;
 var $a_3_ph_i;
 var $713=((($z_5_ph_i)+(1))|0);
 var $714=$713&127;
 var $715=((($z_5_ph_i)+(127))|0);
 var $716=$715&127;
 var $717=(($x_i+($716<<2))|0);
 var $a_3_i_ph=$a_3_ph_i;var $e2_1_i_ph=$e2_1_ph_i;var $rp_3_i_ph=$rp_3_ph33_i;label=244;break;
 case 244: 
 var $rp_3_i_ph;
 var $e2_1_i_ph;
 var $a_3_i_ph;
 var $718=($rp_3_i_ph|0)==18;
 var $719=($rp_3_i_ph|0)>27;
 var $_14_i=($719?9:1);
 var $a_3_i=$a_3_i_ph;var $e2_1_i=$e2_1_i_ph;label=230;break;
 case 245: 
 var $721=HEAP32[(($717)>>2)];
 var $722=$721|1;
 HEAP32[(($717)>>2)]=$722;
 var $a_3_i_ph=$a_5_i;var $e2_1_i_ph=$691;var $rp_3_i_ph=$rp_5_i;label=244;break;
 case 246: 
 var $724=((($714)-(1))|0);
 var $725=(($x_i+($724<<2))|0);
 HEAP32[(($725)>>2)]=0;
 var $z_7_i=$714;label=247;break;
 case 247: 
 var $z_7_i;
 var $727=(($x_i+($688<<2))|0);
 var $728=HEAP32[(($727)>>2)];
 var $729=($728>>>0);
 var $730=((($a_3_i)+(1))|0);
 var $731=$730&127;
 var $732=($731|0)==($z_7_i|0);
 if($732){label=271;break;}else{var $z_7_1_i=$z_7_i;label=272;break;}
 case 248: 
 var $734=($824|0)<0;
 var $__i22=($734?0:$824);
 var $_09_i=$__i22;var $denormal_0_i=1;label=249;break;
 case 249: 
 var $denormal_0_i;
 var $_09_i;
 var $736=($_09_i|0)<53;
 if($736){label=250;break;}else{var $bias_0_i=0;var $frac_0_i=0;var $y_1_i23=$822;label=251;break;}
 case 250: 
 var $738=(((105)-($_09_i))|0);
 var $739=_scalbn(1,$738);
 var $740=_copysign($739,$822);
 var $741=(((53)-($_09_i))|0);
 var $742=_scalbn(1,$741);
 var $743=_fmod($822,$742);
 var $744=($822)-($743);
 var $745=($740)+($744);
 var $bias_0_i=$740;var $frac_0_i=$743;var $y_1_i23=$745;label=251;break;
 case 251: 
 var $y_1_i23;
 var $frac_0_i;
 var $bias_0_i;
 var $747=((($a_3_i)+(2))|0);
 var $748=$747&127;
 var $749=($748|0)==($z_7_1_i|0);
 if($749){var $frac_2_i=$frac_0_i;label=264;break;}else{label=252;break;}
 case 252: 
 var $751=(($x_i+($748<<2))|0);
 var $752=HEAP32[(($751)>>2)];
 var $753=($752>>>0)<500000000;
 if($753){label=253;break;}else{label=256;break;}
 case 253: 
 var $755=($752|0)==0;
 if($755){label=254;break;}else{label=255;break;}
 case 254: 
 var $757=((($a_3_i)+(3))|0);
 var $758=$757&127;
 var $759=($758|0)==($z_7_1_i|0);
 if($759){var $frac_1_i=$frac_0_i;label=261;break;}else{label=255;break;}
 case 255: 
 var $761=($821)*((0.25));
 var $762=($761)+($frac_0_i);
 var $frac_1_i=$762;label=261;break;
 case 256: 
 var $764=($752>>>0)>500000000;
 if($764){label=257;break;}else{label=258;break;}
 case 257: 
 var $766=($821)*((0.75));
 var $767=($766)+($frac_0_i);
 var $frac_1_i=$767;label=261;break;
 case 258: 
 var $769=((($a_3_i)+(3))|0);
 var $770=$769&127;
 var $771=($770|0)==($z_7_1_i|0);
 if($771){label=259;break;}else{label=260;break;}
 case 259: 
 var $773=($821)*((0.5));
 var $774=($773)+($frac_0_i);
 var $frac_1_i=$774;label=261;break;
 case 260: 
 var $776=($821)*((0.75));
 var $777=($776)+($frac_0_i);
 var $frac_1_i=$777;label=261;break;
 case 261: 
 var $frac_1_i;
 var $779=(((53)-($_09_i))|0);
 var $780=($779|0)>1;
 if($780){label=262;break;}else{var $frac_2_i=$frac_1_i;label=264;break;}
 case 262: 
 var $782=_fmod($frac_1_i,1);
 var $783=$782!=0;
 if($783){var $frac_2_i=$frac_1_i;label=264;break;}else{label=263;break;}
 case 263: 
 var $785=($frac_1_i)+(1);
 var $frac_2_i=$785;label=264;break;
 case 264: 
 var $frac_2_i;
 var $787=($y_1_i23)+($frac_2_i);
 var $788=($787)-($bias_0_i);
 var $789=$823&2147483647;
 var $790=(((-2)-($sum_i))|0);
 var $791=($789|0)>($790|0);
 if($791){label=265;break;}else{var $y_3_i=$788;var $e2_3_i=$e2_1_i;label=270;break;}
 case 265: 
 var $793=Math_abs($788);
 var $794=$793<9007199254740992;
 if($794){var $y_2_i24=$788;var $denormal_2_i=$denormal_0_i;var $e2_2_i=$e2_1_i;label=267;break;}else{label=266;break;}
 case 266: 
 var $796=($denormal_0_i|0)!=0;
 var $797=($_09_i|0)==($824|0);
 var $or_cond16_i=$796&$797;
 var $denormal_1_i=($or_cond16_i?0:$denormal_0_i);
 var $798=($788)*((0.5));
 var $799=((($e2_1_i)+(1))|0);
 var $y_2_i24=$798;var $denormal_2_i=$denormal_1_i;var $e2_2_i=$799;label=267;break;
 case 267: 
 var $e2_2_i;
 var $denormal_2_i;
 var $y_2_i24;
 var $801=((($e2_2_i)+(50))|0);
 var $802=($801|0)>($380|0);
 if($802){label=269;break;}else{label=268;break;}
 case 268: 
 var $804=($denormal_2_i|0)!=0;
 var $805=$frac_2_i!=0;
 var $or_cond17_i=$804&$805;
 if($or_cond17_i){label=269;break;}else{var $y_3_i=$y_2_i24;var $e2_3_i=$e2_2_i;label=270;break;}
 case 269: 
 var $807=___errno_location();
 HEAP32[(($807)>>2)]=34;
 var $y_3_i=$y_2_i24;var $e2_3_i=$e2_2_i;label=270;break;
 case 270: 
 var $e2_3_i;
 var $y_3_i;
 var $809=_scalbnl($y_3_i,$e2_3_i);
 var $_0=$809;label=273;break;
 case 271: 
 var $811=((($z_7_i)+(1))|0);
 var $812=$811&127;
 var $813=((($812)-(1))|0);
 var $814=(($x_i+($813<<2))|0);
 HEAP32[(($814)>>2)]=0;
 var $z_7_1_i=$812;label=272;break;
 case 272: 
 var $z_7_1_i;
 var $816=($729)*(1000000000);
 var $817=(($x_i+($731<<2))|0);
 var $818=HEAP32[(($817)>>2)];
 var $819=($818>>>0);
 var $820=($816)+($819);
 var $821=($sign_0|0);
 var $822=($821)*($820);
 var $823=((($e2_1_i)+(53))|0);
 var $824=((($823)-($emin_0_ph))|0);
 var $825=($824|0)<($bits_0_ph|0);
 if($825){label=248;break;}else{var $_09_i=$bits_0_ph;var $denormal_0_i=0;label=249;break;}
 case 273: 
 var $_0;
 STACKTOP=sp;return $_0;
  default: assert(0, "bad label: " + label);
 }

}


function _scanexp($f,$pok){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($f+4)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($f+100)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=($2>>>0)<($4>>>0);
 if($5){label=2;break;}else{label=3;break;}
 case 2: 
 var $7=(($2+1)|0);
 HEAP32[(($1)>>2)]=$7;
 var $8=HEAP8[($2)];
 var $9=($8&255);
 var $13=$9;label=4;break;
 case 3: 
 var $11=___shgetc($f);
 var $13=$11;label=4;break;
 case 4: 
 var $13;
 var $14=($13|0)==45;
 if(($13|0)==45|($13|0)==43){ label=5;break;}else{var $neg_0=0;var $c_0=$13;label=11;break;}
 case 5: 
 var $15=($14&1);
 var $16=HEAP32[(($1)>>2)];
 var $17=HEAP32[(($3)>>2)];
 var $18=($16>>>0)<($17>>>0);
 if($18){label=6;break;}else{label=7;break;}
 case 6: 
 var $20=(($16+1)|0);
 HEAP32[(($1)>>2)]=$20;
 var $21=HEAP8[($16)];
 var $22=($21&255);
 var $26=$22;label=8;break;
 case 7: 
 var $24=___shgetc($f);
 var $26=$24;label=8;break;
 case 8: 
 var $26;
 var $27=((($26)-(48))|0);
 var $28=($27>>>0)<10;
 var $29=($pok|0)==0;
 var $or_cond=$28|$29;
 if($or_cond){var $neg_0=$15;var $c_0=$26;label=11;break;}else{label=9;break;}
 case 9: 
 var $31=HEAP32[(($3)>>2)];
 var $32=($31|0)==0;
 if($32){var $neg_0=$15;var $c_0=$26;label=11;break;}else{label=10;break;}
 case 10: 
 var $34=HEAP32[(($1)>>2)];
 var $35=((($34)-(1))|0);
 HEAP32[(($1)>>2)]=$35;
 var $neg_0=$15;var $c_0=$26;label=11;break;
 case 11: 
 var $c_0;
 var $neg_0;
 var $37=((($c_0)-(48))|0);
 var $38=($37>>>0)>9;
 if($38){label=12;break;}else{var $c_18=$c_0;var $x_09=0;label=14;break;}
 case 12: 
 var $40=HEAP32[(($3)>>2)];
 var $41=($40|0)==0;
 if($41){var $_0$1=-2147483648;var $_0$0=0;label=32;break;}else{label=13;break;}
 case 13: 
 var $43=HEAP32[(($1)>>2)];
 var $44=((($43)-(1))|0);
 HEAP32[(($1)>>2)]=$44;
 var $_0$1=-2147483648;var $_0$0=0;label=32;break;
 case 14: 
 var $x_09;
 var $c_18;
 var $45=((($c_18)-(48))|0);
 var $46=((($45)+($x_09))|0);
 var $47=HEAP32[(($1)>>2)];
 var $48=HEAP32[(($3)>>2)];
 var $49=($47>>>0)<($48>>>0);
 if($49){label=15;break;}else{label=16;break;}
 case 15: 
 var $51=(($47+1)|0);
 HEAP32[(($1)>>2)]=$51;
 var $52=HEAP8[($47)];
 var $53=($52&255);
 var $c_1_be=$53;label=17;break;
 case 16: 
 var $55=___shgetc($f);
 var $c_1_be=$55;label=17;break;
 case 17: 
 var $c_1_be;
 var $56=((($c_1_be)-(48))|0);
 var $57=($56>>>0)<10;
 var $58=($46|0)<214748364;
 var $_=$57&$58;
 if($_){label=18;break;}else{label=19;break;}
 case 18: 
 var $phitmp16=((($46)*(10))&-1);
 var $c_18=$c_1_be;var $x_09=$phitmp16;label=14;break;
 case 19: 
 var $phitmp$0=$46;
 var $phitmp$1=((((($46|0)<0))|0)?-1:0);
 var $60=((($c_1_be)-(48))|0);
 var $61=($60>>>0)<10;
 if($61){var $c_23=$c_1_be;var $y_04$1=$phitmp$1;var $y_04$0=$phitmp$0;label=21;break;}else{var $c_2_lcssa=$c_1_be;var $y_0_lcssa$1=$phitmp$1;var $y_0_lcssa$0=$phitmp$0;label=20;break;}
 case 20: 
 var $y_0_lcssa$0;
 var $y_0_lcssa$1;
 var $c_2_lcssa;
 var $62=((($c_2_lcssa)-(48))|0);
 var $63=($62>>>0)<10;
 if($63){label=25;break;}else{label=29;break;}
 case 21: 
 var $y_04$0;
 var $y_04$1;
 var $c_23;
 var $$etemp$0$0=10;
 var $$etemp$0$1=0;
 var $64$0=___muldi3($y_04$0,$y_04$1,$$etemp$0$0,$$etemp$0$1);var $64$1=tempRet0;
 var $65$0=$c_23;
 var $65$1=((((($c_23|0)<0))|0)?-1:0);
 var $$etemp$1$0=-48;
 var $$etemp$1$1=-1;
 var $66$0=_i64Add($65$0,$65$1,$$etemp$1$0,$$etemp$1$1);var $66$1=tempRet0;
 var $67$0=_i64Add($66$0,$66$1,$64$0,$64$1);var $67$1=tempRet0;
 var $68=HEAP32[(($1)>>2)];
 var $69=HEAP32[(($3)>>2)];
 var $70=($68>>>0)<($69>>>0);
 if($70){label=22;break;}else{label=23;break;}
 case 22: 
 var $72=(($68+1)|0);
 HEAP32[(($1)>>2)]=$72;
 var $73=HEAP8[($68)];
 var $74=($73&255);
 var $c_2_be=$74;label=24;break;
 case 23: 
 var $76=___shgetc($f);
 var $c_2_be=$76;label=24;break;
 case 24: 
 var $c_2_be;
 var $77=((($c_2_be)-(48))|0);
 var $78=($77>>>0)<10;
 var $$etemp$2$0=2061584302;
 var $$etemp$2$1=21474836;
 var $79=(($67$1|0) < ($$etemp$2$1|0)) | (((($67$1|0) == ($$etemp$2$1|0) & ($67$0>>>0) <  ($$etemp$2$0>>>0))));
 var $or_cond2=$78&$79;
 if($or_cond2){var $c_23=$c_2_be;var $y_04$1=$67$1;var $y_04$0=$67$0;label=21;break;}else{var $c_2_lcssa=$c_2_be;var $y_0_lcssa$1=$67$1;var $y_0_lcssa$0=$67$0;label=20;break;}
 case 25: 
 var $80=HEAP32[(($1)>>2)];
 var $81=HEAP32[(($3)>>2)];
 var $82=($80>>>0)<($81>>>0);
 if($82){label=26;break;}else{label=27;break;}
 case 26: 
 var $84=(($80+1)|0);
 HEAP32[(($1)>>2)]=$84;
 var $85=HEAP8[($80)];
 var $86=($85&255);
 var $c_3_be=$86;label=28;break;
 case 27: 
 var $88=___shgetc($f);
 var $c_3_be=$88;label=28;break;
 case 28: 
 var $c_3_be;
 var $89=((($c_3_be)-(48))|0);
 var $90=($89>>>0)<10;
 if($90){label=25;break;}else{label=29;break;}
 case 29: 
 var $91=HEAP32[(($3)>>2)];
 var $92=($91|0)==0;
 if($92){label=31;break;}else{label=30;break;}
 case 30: 
 var $94=HEAP32[(($1)>>2)];
 var $95=((($94)-(1))|0);
 HEAP32[(($1)>>2)]=$95;
 label=31;break;
 case 31: 
 var $97=($neg_0|0)!=0;
 var $$etemp$3$0=0;
 var $$etemp$3$1=0;
 var $98$0=_i64Subtract($$etemp$3$0,$$etemp$3$1,$y_0_lcssa$0,$y_0_lcssa$1);var $98$1=tempRet0;
 var $99$0=($97?$98$0:$y_0_lcssa$0);
 var $99$1=($97?$98$1:$y_0_lcssa$1);
 var $_0$1=$99$1;var $_0$0=$99$0;label=32;break;
 case 32: 
 var $_0$0;
 var $_0$1;
 return (tempRet0=$_0$1,$_0$0);
  default: assert(0, "bad label: " + label);
 }

}


function ___shlim($f,$lim){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($f+104)|0);
 HEAP32[(($1)>>2)]=$lim;
 var $2=(($f+8)|0);
 var $3=HEAP32[(($2)>>2)];
 var $4=(($f+4)|0);
 var $5=HEAP32[(($4)>>2)];
 var $6=$3;
 var $7=$5;
 var $8=((($6)-($7))|0);
 var $9=(($f+108)|0);
 HEAP32[(($9)>>2)]=$8;
 var $10=($lim|0)!=0;
 var $11=($8|0)>($lim|0);
 var $or_cond=$10&$11;
 if($or_cond){label=2;break;}else{label=3;break;}
 case 2: 
 var $13=(($5+$lim)|0);
 var $14=(($f+100)|0);
 HEAP32[(($14)>>2)]=$13;
 label=4;break;
 case 3: 
 var $16=(($f+100)|0);
 HEAP32[(($16)>>2)]=$3;
 label=4;break;
 case 4: 
 return;
  default: assert(0, "bad label: " + label);
 }

}


function ___shgetc($f){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($f+104)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=($2|0)==0;
 if($3){label=3;break;}else{label=2;break;}
 case 2: 
 var $5=(($f+108)|0);
 var $6=HEAP32[(($5)>>2)];
 var $7=($6|0)<($2|0);
 if($7){label=3;break;}else{label=4;break;}
 case 3: 
 var $9=___uflow($f);
 var $10=($9|0)<0;
 if($10){label=4;break;}else{label=5;break;}
 case 4: 
 var $12=(($f+100)|0);
 HEAP32[(($12)>>2)]=0;
 var $_0=-1;label=13;break;
 case 5: 
 var $14=HEAP32[(($1)>>2)];
 var $15=($14|0)==0;
 var $_phi_trans_insert=(($f+8)|0);
 var $_pre=HEAP32[(($_phi_trans_insert)>>2)];
 if($15){label=8;break;}else{label=6;break;}
 case 6: 
 var $17=(($f+4)|0);
 var $18=HEAP32[(($17)>>2)];
 var $19=$_pre;
 var $20=$18;
 var $21=((($19)-($20))|0);
 var $22=(($f+108)|0);
 var $23=HEAP32[(($22)>>2)];
 var $24=((($14)-($23))|0);
 var $25=((($24)-(1))|0);
 var $26=($21|0)>($25|0);
 if($26){label=7;break;}else{label=8;break;}
 case 7: 
 var $28=(($18+$25)|0);
 var $29=(($f+100)|0);
 HEAP32[(($29)>>2)]=$28;
 label=9;break;
 case 8: 
 var $30=(($f+100)|0);
 HEAP32[(($30)>>2)]=$_pre;
 label=9;break;
 case 9: 
 var $32=($_pre|0)==0;
 var $_phi_trans_insert2=(($f+4)|0);
 var $_pre3=HEAP32[(($_phi_trans_insert2)>>2)];
 if($32){label=11;break;}else{label=10;break;}
 case 10: 
 var $34=$_pre;
 var $35=$_pre3;
 var $36=(($f+108)|0);
 var $37=HEAP32[(($36)>>2)];
 var $38=((($34)+(1))|0);
 var $39=((($38)-($35))|0);
 var $40=((($39)+($37))|0);
 HEAP32[(($36)>>2)]=$40;
 label=11;break;
 case 11: 
 var $41=((($_pre3)-(1))|0);
 var $42=HEAP8[($41)];
 var $43=($42&255);
 var $44=($43|0)==($9|0);
 if($44){var $_0=$9;label=13;break;}else{label=12;break;}
 case 12: 
 var $46=(($9)&255);
 HEAP8[($41)]=$46;
 var $_0=$9;label=13;break;
 case 13: 
 var $_0;
 return $_0;
  default: assert(0, "bad label: " + label);
 }

}


function _scalbn($x,$n){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($n|0)>1023;
 if($1){label=2;break;}else{label=4;break;}
 case 2: 
 var $3=($x)*((8.98846567431158e+307));
 var $4=((($n)-(1023))|0);
 var $5=($4|0)>1023;
 if($5){label=3;break;}else{var $y_0=$3;var $_0=$4;label=7;break;}
 case 3: 
 var $7=($3)*((8.98846567431158e+307));
 var $8=((($n)-(2046))|0);
 var $9=($8|0)>1023;
 var $_=($9?1023:$8);
 var $y_0=$7;var $_0=$_;label=7;break;
 case 4: 
 var $11=($n|0)<-1022;
 if($11){label=5;break;}else{var $y_0=$x;var $_0=$n;label=7;break;}
 case 5: 
 var $13=($x)*((2.2250738585072014e-308));
 var $14=((($n)+(1022))|0);
 var $15=($14|0)<-1022;
 if($15){label=6;break;}else{var $y_0=$13;var $_0=$14;label=7;break;}
 case 6: 
 var $17=($13)*((2.2250738585072014e-308));
 var $18=((($n)+(2044))|0);
 var $19=($18|0)<-1022;
 var $_1=($19?-1022:$18);
 var $y_0=$17;var $_0=$_1;label=7;break;
 case 7: 
 var $_0;
 var $y_0;
 var $21=((($_0)+(1023))|0);
 var $22$0=$21;
 var $22$1=0;
 var $23$0=(0<<20)|(0>>>12);
 var $23$1=($22$0<<20)|(0>>>12);
 var $24=(HEAP32[((tempDoublePtr)>>2)]=$23$0, HEAP32[(((tempDoublePtr)+(4))>>2)]=$23$1, HEAPF64[(tempDoublePtr)>>3]);
 var $25=($y_0)*($24);
 return $25;
  default: assert(0, "bad label: " + label);
 }

}


function _scalbnl($x,$n){
 var label=0;


 var $1=_scalbn($x,$n);
 return $1;
}


function ___overflow($f,$_c){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $c=sp;
 var $1=(($_c)&255);
 HEAP8[($c)]=$1;
 var $2=(($f+16)|0);
 var $3=HEAP32[(($2)>>2)];
 var $4=($3|0)==0;
 if($4){label=2;break;}else{var $9=$3;label=4;break;}
 case 2: 
 var $6=___towrite($f);
 var $7=($6|0)==0;
 if($7){label=3;break;}else{var $_0=-1;label=9;break;}
 case 3: 
 var $_pre=HEAP32[(($2)>>2)];
 var $9=$_pre;label=4;break;
 case 4: 
 var $9;
 var $10=(($f+20)|0);
 var $11=HEAP32[(($10)>>2)];
 var $12=($11>>>0)<($9>>>0);
 if($12){label=5;break;}else{label=7;break;}
 case 5: 
 var $14=HEAP8[($c)];
 var $15=($14&255);
 var $16=(($f+75)|0);
 var $17=HEAP8[($16)];
 var $18=(($17<<24)>>24);
 var $19=($15|0)==($18|0);
 if($19){label=7;break;}else{label=6;break;}
 case 6: 
 var $21=(($11+1)|0);
 HEAP32[(($10)>>2)]=$21;
 HEAP8[($11)]=$14;
 var $_0=$15;label=9;break;
 case 7: 
 var $23=(($f+36)|0);
 var $24=HEAP32[(($23)>>2)];
 var $25=FUNCTION_TABLE[$24]($f,$c,1);
 var $26=($25|0)==1;
 if($26){label=8;break;}else{var $_0=-1;label=9;break;}
 case 8: 
 var $28=HEAP8[($c)];
 var $29=($28&255);
 var $_0=$29;label=9;break;
 case 9: 
 var $_0;
 STACKTOP=sp;return $_0;
  default: assert(0, "bad label: " + label);
 }

}


function ___toread($f){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($f+74)|0);
 var $2=HEAP8[($1)];
 var $3=((($2)-(1))&255);
 var $4=$3|$2;
 HEAP8[($1)]=$4;
 var $5=(($f+20)|0);
 var $6=HEAP32[(($5)>>2)];
 var $7=(($f+44)|0);
 var $8=HEAP32[(($7)>>2)];
 var $9=($6>>>0)>($8>>>0);
 if($9){label=2;break;}else{label=3;break;}
 case 2: 
 var $11=(($f+36)|0);
 var $12=HEAP32[(($11)>>2)];
 var $13=FUNCTION_TABLE[$12]($f,0,0);
 label=3;break;
 case 3: 
 var $15=(($f+16)|0);
 HEAP32[(($15)>>2)]=0;
 var $16=(($f+28)|0);
 HEAP32[(($16)>>2)]=0;
 HEAP32[(($5)>>2)]=0;
 var $17=(($f)|0);
 var $18=HEAP32[(($17)>>2)];
 var $19=$18&20;
 var $20=($19|0)==0;
 if($20){label=6;break;}else{label=4;break;}
 case 4: 
 var $22=$18&4;
 var $23=($22|0)==0;
 if($23){var $_0=-1;label=7;break;}else{label=5;break;}
 case 5: 
 var $25=$18|32;
 HEAP32[(($17)>>2)]=$25;
 var $_0=-1;label=7;break;
 case 6: 
 var $27=HEAP32[(($7)>>2)];
 var $28=(($f+8)|0);
 HEAP32[(($28)>>2)]=$27;
 var $29=(($f+4)|0);
 HEAP32[(($29)>>2)]=$27;
 var $_0=0;label=7;break;
 case 7: 
 var $_0;
 return $_0;
  default: assert(0, "bad label: " + label);
 }

}


function ___towrite($f){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($f+74)|0);
 var $2=HEAP8[($1)];
 var $3=((($2)-(1))&255);
 var $4=$3|$2;
 HEAP8[($1)]=$4;
 var $5=(($f)|0);
 var $6=HEAP32[(($5)>>2)];
 var $7=$6&8;
 var $8=($7|0)==0;
 if($8){label=3;break;}else{label=2;break;}
 case 2: 
 var $10=$6|32;
 HEAP32[(($5)>>2)]=$10;
 var $_0=-1;label=4;break;
 case 3: 
 var $12=(($f+8)|0);
 HEAP32[(($12)>>2)]=0;
 var $13=(($f+4)|0);
 HEAP32[(($13)>>2)]=0;
 var $14=(($f+44)|0);
 var $15=HEAP32[(($14)>>2)];
 var $16=(($f+28)|0);
 HEAP32[(($16)>>2)]=$15;
 var $17=(($f+20)|0);
 HEAP32[(($17)>>2)]=$15;
 var $18=(($f+48)|0);
 var $19=HEAP32[(($18)>>2)];
 var $20=(($15+$19)|0);
 var $21=(($f+16)|0);
 HEAP32[(($21)>>2)]=$20;
 var $_0=0;label=4;break;
 case 4: 
 var $_0;
 return $_0;
  default: assert(0, "bad label: " + label);
 }

}


function ___uflow($f){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $c=sp;
 var $1=(($f+8)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=($2|0)==0;
 if($3){label=2;break;}else{label=3;break;}
 case 2: 
 var $5=___toread($f);
 var $6=($5|0)==0;
 if($6){label=3;break;}else{var $_0=-1;label=5;break;}
 case 3: 
 var $8=(($f+32)|0);
 var $9=HEAP32[(($8)>>2)];
 var $10=FUNCTION_TABLE[$9]($f,$c,1);
 var $11=($10|0)==1;
 if($11){label=4;break;}else{var $_0=-1;label=5;break;}
 case 4: 
 var $13=HEAP8[($c)];
 var $14=($13&255);
 var $_0=$14;label=5;break;
 case 5: 
 var $_0;
 STACKTOP=sp;return $_0;
  default: assert(0, "bad label: " + label);
 }

}


function _atof($s){
 var label=0;


 var $1=_strtod($s,0);
 return $1;
}


function _atoi($s){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $_0=$s;label=2;break;
 case 2: 
 var $_0;
 var $2=HEAP8[($_0)];
 var $3=(($2<<24)>>24);
 var $4=_isspace($3);
 var $5=($4|0)==0;
 var $6=(($_0+1)|0);
 if($5){label=3;break;}else{var $_0=$6;label=2;break;}
 case 3: 
 var $8=HEAP8[($_0)];
 var $9=(($8<<24)>>24);
 if(($9|0)==45){ label=4;break;}else if(($9|0)==43){ var $neg_0=0;label=5;break;}else{var $neg_1_ph=0;var $_1_ph=$_0;var $12=$8;label=6;break;}
 case 4: 
 var $neg_0=1;label=5;break;
 case 5: 
 var $neg_0;
 var $_pre=HEAP8[($6)];
 var $neg_1_ph=$neg_0;var $_1_ph=$6;var $12=$_pre;label=6;break;
 case 6: 
 var $12;
 var $_1_ph;
 var $neg_1_ph;
 var $13=(($12<<24)>>24);
 var $isdigittmp2=((($13)-(48))|0);
 var $isdigit3=($isdigittmp2>>>0)<10;
 if($isdigit3){var $_14=$_1_ph;var $n_05=0;var $14=$13;label=7;break;}else{var $n_0_lcssa=0;label=8;break;}
 case 7: 
 var $14;
 var $n_05;
 var $_14;
 var $15=((($n_05)*(10))&-1);
 var $16=(($_14+1)|0);
 var $_neg1=((($15)+(48))|0);
 var $17=((($_neg1)-($14))|0);
 var $18=HEAP8[($16)];
 var $19=(($18<<24)>>24);
 var $isdigittmp=((($19)-(48))|0);
 var $isdigit=($isdigittmp>>>0)<10;
 if($isdigit){var $_14=$16;var $n_05=$17;var $14=$19;label=7;break;}else{var $n_0_lcssa=$17;label=8;break;}
 case 8: 
 var $n_0_lcssa;
 var $20=($neg_1_ph|0)!=0;
 var $21=(((-$n_0_lcssa))|0);
 var $22=($20?$n_0_lcssa:$21);
 return $22;
  default: assert(0, "bad label: " + label);
 }

}


function _atol($s){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $_0=$s;label=2;break;
 case 2: 
 var $_0;
 var $2=HEAP8[($_0)];
 var $3=(($2<<24)>>24);
 var $4=_isspace($3);
 var $5=($4|0)==0;
 var $6=(($_0+1)|0);
 if($5){label=3;break;}else{var $_0=$6;label=2;break;}
 case 3: 
 var $8=HEAP8[($_0)];
 var $9=(($8<<24)>>24);
 if(($9|0)==45){ label=4;break;}else if(($9|0)==43){ var $neg_0=0;label=5;break;}else{var $neg_1_ph=0;var $_1_ph=$_0;var $12=$8;label=6;break;}
 case 4: 
 var $neg_0=1;label=5;break;
 case 5: 
 var $neg_0;
 var $_pre=HEAP8[($6)];
 var $neg_1_ph=$neg_0;var $_1_ph=$6;var $12=$_pre;label=6;break;
 case 6: 
 var $12;
 var $_1_ph;
 var $neg_1_ph;
 var $13=(($12<<24)>>24);
 var $isdigittmp2=((($13)-(48))|0);
 var $isdigit3=($isdigittmp2>>>0)<10;
 if($isdigit3){var $_14=$_1_ph;var $n_05=0;var $14=$13;label=7;break;}else{var $n_0_lcssa=0;label=8;break;}
 case 7: 
 var $14;
 var $n_05;
 var $_14;
 var $15=((($n_05)*(10))&-1);
 var $16=(($_14+1)|0);
 var $_neg1=((($15)+(48))|0);
 var $17=((($_neg1)-($14))|0);
 var $18=HEAP8[($16)];
 var $19=(($18<<24)>>24);
 var $isdigittmp=((($19)-(48))|0);
 var $isdigit=($isdigittmp>>>0)<10;
 if($isdigit){var $_14=$16;var $n_05=$17;var $14=$19;label=7;break;}else{var $n_0_lcssa=$17;label=8;break;}
 case 8: 
 var $n_0_lcssa;
 var $20=($neg_1_ph|0)!=0;
 var $21=(((-$n_0_lcssa))|0);
 var $22=($20?$n_0_lcssa:$21);
 return $22;
  default: assert(0, "bad label: " + label);
 }

}


function _strtof($s,$p){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+112)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $f_i=sp;
 var $1=$f_i;
 var $$etemp$0$0=112;
 var $$etemp$0$1=0;

 _memset($1, 0, 112)|0;
 var $2=(($f_i+4)|0);
 HEAP32[(($2)>>2)]=$s;
 var $3=(($f_i+8)|0);
 HEAP32[(($3)>>2)]=-1;
 var $4=(($f_i+44)|0);
 HEAP32[(($4)>>2)]=$s;
 var $5=(($f_i+76)|0);
 HEAP32[(($5)>>2)]=-1;
 ___shlim($f_i,0);
 var $6=___floatscan($f_i,0,1);
 var $7=(($f_i+108)|0);
 var $8=HEAP32[(($7)>>2)];
 var $9=HEAP32[(($2)>>2)];
 var $10=HEAP32[(($3)>>2)];
 var $11=$9;
 var $12=$10;
 var $13=((($11)-($12))|0);
 var $14=((($13)+($8))|0);
 var $15=($p|0)==0;
 if($15){label=5;break;}else{label=2;break;}
 case 2: 
 var $17=($14|0)==0;
 if($17){var $21=$s;label=4;break;}else{label=3;break;}
 case 3: 
 var $19=(($s+$14)|0);
 var $21=$19;label=4;break;
 case 4: 
 var $21;
 HEAP32[(($p)>>2)]=$21;
 label=5;break;
 case 5: 
 var $$etemp$1$0=112;
 var $$etemp$1$1=0;

 var $22=$6;
 STACKTOP=sp;return $22;
  default: assert(0, "bad label: " + label);
 }

}


function _strtod($s,$p){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+112)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $f_i=sp;
 var $1=$f_i;
 var $$etemp$0$0=112;
 var $$etemp$0$1=0;

 _memset($1, 0, 112)|0;
 var $2=(($f_i+4)|0);
 HEAP32[(($2)>>2)]=$s;
 var $3=(($f_i+8)|0);
 HEAP32[(($3)>>2)]=-1;
 var $4=(($f_i+44)|0);
 HEAP32[(($4)>>2)]=$s;
 var $5=(($f_i+76)|0);
 HEAP32[(($5)>>2)]=-1;
 ___shlim($f_i,0);
 var $6=___floatscan($f_i,1,1);
 var $7=(($f_i+108)|0);
 var $8=HEAP32[(($7)>>2)];
 var $9=HEAP32[(($2)>>2)];
 var $10=HEAP32[(($3)>>2)];
 var $11=$9;
 var $12=$10;
 var $13=((($11)-($12))|0);
 var $14=((($13)+($8))|0);
 var $15=($p|0)==0;
 if($15){label=5;break;}else{label=2;break;}
 case 2: 
 var $17=($14|0)==0;
 if($17){var $21=$s;label=4;break;}else{label=3;break;}
 case 3: 
 var $19=(($s+$14)|0);
 var $21=$19;label=4;break;
 case 4: 
 var $21;
 HEAP32[(($p)>>2)]=$21;
 label=5;break;
 case 5: 
 var $$etemp$1$0=112;
 var $$etemp$1$1=0;

 STACKTOP=sp;return $6;
  default: assert(0, "bad label: " + label);
 }

}


function _strtold($s,$p){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+112)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $f_i=sp;
 var $1=$f_i;
 var $$etemp$0$0=112;
 var $$etemp$0$1=0;

 _memset($1, 0, 112)|0;
 var $2=(($f_i+4)|0);
 HEAP32[(($2)>>2)]=$s;
 var $3=(($f_i+8)|0);
 HEAP32[(($3)>>2)]=-1;
 var $4=(($f_i+44)|0);
 HEAP32[(($4)>>2)]=$s;
 var $5=(($f_i+76)|0);
 HEAP32[(($5)>>2)]=-1;
 ___shlim($f_i,0);
 var $6=___floatscan($f_i,2,1);
 var $7=(($f_i+108)|0);
 var $8=HEAP32[(($7)>>2)];
 var $9=HEAP32[(($2)>>2)];
 var $10=HEAP32[(($3)>>2)];
 var $11=$9;
 var $12=$10;
 var $13=((($11)-($12))|0);
 var $14=((($13)+($8))|0);
 var $15=($p|0)==0;
 if($15){label=5;break;}else{label=2;break;}
 case 2: 
 var $17=($14|0)==0;
 if($17){var $21=$s;label=4;break;}else{label=3;break;}
 case 3: 
 var $19=(($s+$14)|0);
 var $21=$19;label=4;break;
 case 4: 
 var $21;
 HEAP32[(($p)>>2)]=$21;
 label=5;break;
 case 5: 
 var $$etemp$1$0=112;
 var $$etemp$1$1=0;

 STACKTOP=sp;return $6;
  default: assert(0, "bad label: " + label);
 }

}


function _strtof_l($s,$p,$loc){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+112)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $f_i_i=sp;
 var $1=$f_i_i;
 var $$etemp$0$0=112;
 var $$etemp$0$1=0;

 _memset($1, 0, 112)|0;
 var $2=(($f_i_i+4)|0);
 HEAP32[(($2)>>2)]=$s;
 var $3=(($f_i_i+8)|0);
 HEAP32[(($3)>>2)]=-1;
 var $4=(($f_i_i+44)|0);
 HEAP32[(($4)>>2)]=$s;
 var $5=(($f_i_i+76)|0);
 HEAP32[(($5)>>2)]=-1;
 ___shlim($f_i_i,0);
 var $6=___floatscan($f_i_i,0,1);
 var $7=(($f_i_i+108)|0);
 var $8=HEAP32[(($7)>>2)];
 var $9=HEAP32[(($2)>>2)];
 var $10=HEAP32[(($3)>>2)];
 var $11=$9;
 var $12=$10;
 var $13=((($11)-($12))|0);
 var $14=((($13)+($8))|0);
 var $15=($p|0)==0;
 if($15){label=5;break;}else{label=2;break;}
 case 2: 
 var $17=($14|0)==0;
 if($17){var $21=$s;label=4;break;}else{label=3;break;}
 case 3: 
 var $19=(($s+$14)|0);
 var $21=$19;label=4;break;
 case 4: 
 var $21;
 HEAP32[(($p)>>2)]=$21;
 label=5;break;
 case 5: 
 var $$etemp$1$0=112;
 var $$etemp$1$1=0;

 var $22=$6;
 STACKTOP=sp;return $22;
  default: assert(0, "bad label: " + label);
 }

}


function _strtod_l($s,$p,$loc){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+112)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $f_i_i=sp;
 var $1=$f_i_i;
 var $$etemp$0$0=112;
 var $$etemp$0$1=0;

 _memset($1, 0, 112)|0;
 var $2=(($f_i_i+4)|0);
 HEAP32[(($2)>>2)]=$s;
 var $3=(($f_i_i+8)|0);
 HEAP32[(($3)>>2)]=-1;
 var $4=(($f_i_i+44)|0);
 HEAP32[(($4)>>2)]=$s;
 var $5=(($f_i_i+76)|0);
 HEAP32[(($5)>>2)]=-1;
 ___shlim($f_i_i,0);
 var $6=___floatscan($f_i_i,1,1);
 var $7=(($f_i_i+108)|0);
 var $8=HEAP32[(($7)>>2)];
 var $9=HEAP32[(($2)>>2)];
 var $10=HEAP32[(($3)>>2)];
 var $11=$9;
 var $12=$10;
 var $13=((($11)-($12))|0);
 var $14=((($13)+($8))|0);
 var $15=($p|0)==0;
 if($15){label=5;break;}else{label=2;break;}
 case 2: 
 var $17=($14|0)==0;
 if($17){var $21=$s;label=4;break;}else{label=3;break;}
 case 3: 
 var $19=(($s+$14)|0);
 var $21=$19;label=4;break;
 case 4: 
 var $21;
 HEAP32[(($p)>>2)]=$21;
 label=5;break;
 case 5: 
 var $$etemp$1$0=112;
 var $$etemp$1$1=0;

 STACKTOP=sp;return $6;
  default: assert(0, "bad label: " + label);
 }

}


function _strtold_l($s,$p,$loc){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+112)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $f_i_i=sp;
 var $1=$f_i_i;
 var $$etemp$0$0=112;
 var $$etemp$0$1=0;

 _memset($1, 0, 112)|0;
 var $2=(($f_i_i+4)|0);
 HEAP32[(($2)>>2)]=$s;
 var $3=(($f_i_i+8)|0);
 HEAP32[(($3)>>2)]=-1;
 var $4=(($f_i_i+44)|0);
 HEAP32[(($4)>>2)]=$s;
 var $5=(($f_i_i+76)|0);
 HEAP32[(($5)>>2)]=-1;
 ___shlim($f_i_i,0);
 var $6=___floatscan($f_i_i,2,1);
 var $7=(($f_i_i+108)|0);
 var $8=HEAP32[(($7)>>2)];
 var $9=HEAP32[(($2)>>2)];
 var $10=HEAP32[(($3)>>2)];
 var $11=$9;
 var $12=$10;
 var $13=((($11)-($12))|0);
 var $14=((($13)+($8))|0);
 var $15=($p|0)==0;
 if($15){label=5;break;}else{label=2;break;}
 case 2: 
 var $17=($14|0)==0;
 if($17){var $21=$s;label=4;break;}else{label=3;break;}
 case 3: 
 var $19=(($s+$14)|0);
 var $21=$19;label=4;break;
 case 4: 
 var $21;
 HEAP32[(($p)>>2)]=$21;
 label=5;break;
 case 5: 
 var $$etemp$1$0=112;
 var $$etemp$1$1=0;

 STACKTOP=sp;return $6;
  default: assert(0, "bad label: " + label);
 }

}


function _memcmp($vl,$vr,$n){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($n|0)==0;
 if($1){var $14=0;label=5;break;}else{var $_03=$n;var $l_04=$vl;var $r_05=$vr;label=2;break;}
 case 2: 
 var $r_05;
 var $l_04;
 var $_03;
 var $2=HEAP8[($l_04)];
 var $3=HEAP8[($r_05)];
 var $4=(($2<<24)>>24)==(($3<<24)>>24);
 if($4){label=3;break;}else{label=4;break;}
 case 3: 
 var $6=((($_03)-(1))|0);
 var $7=(($l_04+1)|0);
 var $8=(($r_05+1)|0);
 var $9=($6|0)==0;
 if($9){var $14=0;label=5;break;}else{var $_03=$6;var $l_04=$7;var $r_05=$8;label=2;break;}
 case 4: 
 var $11=($2&255);
 var $12=($3&255);
 var $13=((($11)-($12))|0);
 var $14=$13;label=5;break;
 case 5: 
 var $14;
 return $14;
  default: assert(0, "bad label: " + label);
 }

}


function _strcasecmp($_l,$_r){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=HEAP8[($_l)];
 var $2=(($1<<24)>>24)==0;
 if($2){var $r_0_lcssa=$_r;var $18=0;label=7;break;}else{var $l_03=$_l;var $r_04=$_r;var $_in=$1;label=2;break;}
 case 2: 
 var $_in;
 var $r_04;
 var $l_03;
 var $3=($_in&255);
 var $4=HEAP8[($r_04)];
 var $5=(($4<<24)>>24)==0;
 if($5){var $r_0_lcssa=$r_04;var $18=$_in;label=7;break;}else{label=3;break;}
 case 3: 
 var $7=(($_in<<24)>>24)==(($4<<24)>>24);
 if($7){label=6;break;}else{label=4;break;}
 case 4: 
 var $9=_tolower($3);
 var $10=HEAP8[($r_04)];
 var $11=($10&255);
 var $12=_tolower($11);
 var $13=($9|0)==($12|0);
 if($13){label=6;break;}else{label=5;break;}
 case 5: 
 var $_pre_pre=HEAP8[($l_03)];
 var $r_0_lcssa=$r_04;var $18=$_pre_pre;label=7;break;
 case 6: 
 var $14=(($l_03+1)|0);
 var $15=(($r_04+1)|0);
 var $16=HEAP8[($14)];
 var $17=(($16<<24)>>24)==0;
 if($17){var $r_0_lcssa=$15;var $18=0;label=7;break;}else{var $l_03=$14;var $r_04=$15;var $_in=$16;label=2;break;}
 case 7: 
 var $18;
 var $r_0_lcssa;
 var $19=($18&255);
 var $20=_tolower($19);
 var $21=HEAP8[($r_0_lcssa)];
 var $22=($21&255);
 var $23=_tolower($22);
 var $24=((($20)-($23))|0);
 return $24;
  default: assert(0, "bad label: " + label);
 }

}


function _strcmp($l,$r){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=HEAP8[($l)];
 var $2=HEAP8[($r)];
 var $3=(($1<<24)>>24)!=(($2<<24)>>24);
 var $4=(($1<<24)>>24)==0;
 var $or_cond5=$3|$4;
 var $5=(($2<<24)>>24)==0;
 var $or_cond36=$or_cond5|$5;
 if($or_cond36){var $_lcssa=$1;var $_lcssa4=$2;label=3;break;}else{var $_027=$l;var $_08=$r;label=2;break;}
 case 2: 
 var $_08;
 var $_027;
 var $6=(($_027+1)|0);
 var $7=(($_08+1)|0);
 var $8=HEAP8[($6)];
 var $9=HEAP8[($7)];
 var $10=(($8<<24)>>24)!=(($9<<24)>>24);
 var $11=(($8<<24)>>24)==0;
 var $or_cond=$10|$11;
 var $12=(($9<<24)>>24)==0;
 var $or_cond3=$or_cond|$12;
 if($or_cond3){var $_lcssa=$8;var $_lcssa4=$9;label=3;break;}else{var $_027=$6;var $_08=$7;label=2;break;}
 case 3: 
 var $_lcssa4;
 var $_lcssa;
 var $13=($_lcssa&255);
 var $14=($_lcssa4&255);
 var $15=((($13)-($14))|0);
 return $15;
  default: assert(0, "bad label: " + label);
 }

}


function _strncasecmp($_l,$_r,$n){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($n|0)==0;
 if($1){var $_04=0;label=9;break;}else{label=2;break;}
 case 2: 
 var $2=HEAP8[($_l)];
 var $3=(($2<<24)>>24)==0;
 if($3){var $r_0_lcssa=$_r;var $20=0;label=8;break;}else{var $l_06=$_l;var $r_07=$_r;var $_08_in=$n;var $_in=$2;label=3;break;}
 case 3: 
 var $_in;
 var $_08_in;
 var $r_07;
 var $l_06;
 var $_08=((($_08_in)-(1))|0);
 var $4=($_in&255);
 var $5=HEAP8[($r_07)];
 var $6=(($5<<24)>>24)==0;
 var $7=($_08|0)==0;
 var $or_cond=$6|$7;
 if($or_cond){var $r_0_lcssa=$r_07;var $20=$_in;label=8;break;}else{label=4;break;}
 case 4: 
 var $9=(($_in<<24)>>24)==(($5<<24)>>24);
 if($9){label=7;break;}else{label=5;break;}
 case 5: 
 var $11=_tolower($4);
 var $12=HEAP8[($r_07)];
 var $13=($12&255);
 var $14=_tolower($13);
 var $15=($11|0)==($14|0);
 if($15){label=7;break;}else{label=6;break;}
 case 6: 
 var $_pre_pre=HEAP8[($l_06)];
 var $r_0_lcssa=$r_07;var $20=$_pre_pre;label=8;break;
 case 7: 
 var $16=(($l_06+1)|0);
 var $17=(($r_07+1)|0);
 var $18=HEAP8[($16)];
 var $19=(($18<<24)>>24)==0;
 if($19){var $r_0_lcssa=$17;var $20=0;label=8;break;}else{var $l_06=$16;var $r_07=$17;var $_08_in=$_08;var $_in=$18;label=3;break;}
 case 8: 
 var $20;
 var $r_0_lcssa;
 var $21=($20&255);
 var $22=_tolower($21);
 var $23=HEAP8[($r_0_lcssa)];
 var $24=($23&255);
 var $25=_tolower($24);
 var $26=((($22)-($25))|0);
 var $_04=$26;label=9;break;
 case 9: 
 var $_04;
 return $_04;
  default: assert(0, "bad label: " + label);
 }

}


function _strncmp($_l,$_r,$n){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($n|0)==0;
 if($1){var $_03=0;label=6;break;}else{label=2;break;}
 case 2: 
 var $2=HEAP8[($_l)];
 var $3=(($2<<24)>>24)==0;
 if($3){var $r_0_lcssa=$_r;var $12=0;label=5;break;}else{var $l_06=$_l;var $r_07=$_r;var $_08_in=$n;var $4=$2;label=3;break;}
 case 3: 
 var $4;
 var $_08_in;
 var $r_07;
 var $l_06;
 var $_08=((($_08_in)-(1))|0);
 var $5=HEAP8[($r_07)];
 var $notlhs=(($5<<24)>>24)!=0;
 var $notrhs=($_08|0)!=0;
 var $or_cond_not=$notrhs&$notlhs;
 var $6=(($4<<24)>>24)==(($5<<24)>>24);
 var $or_cond4=$or_cond_not&$6;
 if($or_cond4){label=4;break;}else{var $r_0_lcssa=$r_07;var $12=$4;label=5;break;}
 case 4: 
 var $8=(($l_06+1)|0);
 var $9=(($r_07+1)|0);
 var $10=HEAP8[($8)];
 var $11=(($10<<24)>>24)==0;
 if($11){var $r_0_lcssa=$9;var $12=0;label=5;break;}else{var $l_06=$8;var $r_07=$9;var $_08_in=$_08;var $4=$10;label=3;break;}
 case 5: 
 var $12;
 var $r_0_lcssa;
 var $13=($12&255);
 var $14=HEAP8[($r_0_lcssa)];
 var $15=($14&255);
 var $16=((($13)-($15))|0);
 var $_03=$16;label=6;break;
 case 6: 
 var $_03;
 return $_03;
  default: assert(0, "bad label: " + label);
 }

}



// EMSCRIPTEN_END_FUNCS
function _i64Add(a, b, c, d) {
    /*
      x = a + b*2^32
      y = c + d*2^32
      result = l + h*2^32
    */
    a = a|0; b = b|0; c = c|0; d = d|0;
    var l = 0, h = 0;
    l = (a + c)>>>0;
    h = (b + d + (((l>>>0) < (a>>>0))|0))>>>0; // Add carry from low word to high word on overflow.
    return tempRet0 = h,l|0;
  }
function _i64Subtract(a, b, c, d) {
    a = a|0; b = b|0; c = c|0; d = d|0;
    var l = 0, h = 0;
    l = (a - c)>>>0;
    h = (b - d)>>>0;
    h = (b - d - (((c>>>0) > (a>>>0))|0))>>>0; // Borrow one from high word to low word on underflow.
    return tempRet0 = h,l|0;
  }
function _bitshift64Shl(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = (high << bits) | ((low&(ander << (32 - bits))) >>> (32 - bits));
      return low << bits;
    }
    tempRet0 = low << (bits - 32);
    return 0;
  }
function _bitshift64Lshr(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = high >>> bits;
      return (low >>> bits) | ((high&ander) << (32 - bits));
    }
    tempRet0 = 0;
    return (high >>> (bits - 32))|0;
  }
function _bitshift64Ashr(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = high >> bits;
      return (low >>> bits) | ((high&ander) << (32 - bits));
    }
    tempRet0 = (high|0) < 0 ? -1 : 0;
    return (high >> (bits - 32))|0;
  }
function _llvm_ctlz_i32(x) {
    x = x|0;
    var ret = 0;
    ret = HEAP8[(((ctlz_i8)+(x >>> 24))|0)];
    if ((ret|0) < 8) return ret|0;
    ret = HEAP8[(((ctlz_i8)+((x >> 16)&0xff))|0)];
    if ((ret|0) < 8) return (ret + 8)|0;
    ret = HEAP8[(((ctlz_i8)+((x >> 8)&0xff))|0)];
    if ((ret|0) < 8) return (ret + 16)|0;
    return (HEAP8[(((ctlz_i8)+(x&0xff))|0)] + 24)|0;
  }
/* PRE_ASM */ var ctlz_i8 = allocate([8,7,6,6,5,5,5,5,4,4,4,4,4,4,4,4,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_DYNAMIC);

function _llvm_cttz_i32(x) {
    x = x|0;
    var ret = 0;
    ret = HEAP8[(((cttz_i8)+(x & 0xff))|0)];
    if ((ret|0) < 8) return ret|0;
    ret = HEAP8[(((cttz_i8)+((x >> 8)&0xff))|0)];
    if ((ret|0) < 8) return (ret + 8)|0;
    ret = HEAP8[(((cttz_i8)+((x >> 16)&0xff))|0)];
    if ((ret|0) < 8) return (ret + 16)|0;
    return (HEAP8[(((cttz_i8)+(x >>> 24))|0)] + 24)|0;
  }
/* PRE_ASM */ var cttz_i8 = allocate([8,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,7,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0], "i8", ALLOC_DYNAMIC);

// ======== compiled code from system/lib/compiler-rt , see readme therein
function ___muldsi3($a, $b) {
  $a = $a | 0;
  $b = $b | 0;
  var $1 = 0, $2 = 0, $3 = 0, $6 = 0, $8 = 0, $11 = 0, $12 = 0;
  $1 = $a & 65535;
  $2 = $b & 65535;
  $3 = Math_imul($2, $1) | 0;
  $6 = $a >>> 16;
  $8 = ($3 >>> 16) + (Math_imul($2, $6) | 0) | 0;
  $11 = $b >>> 16;
  $12 = Math_imul($11, $1) | 0;
  return (tempRet0 = (($8 >>> 16) + (Math_imul($11, $6) | 0) | 0) + ((($8 & 65535) + $12 | 0) >>> 16) | 0, 0 | ($8 + $12 << 16 | $3 & 65535)) | 0;
}
function ___divdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $1$0 = 0, $1$1 = 0, $2$0 = 0, $2$1 = 0, $4$0 = 0, $4$1 = 0, $6$0 = 0, $7$0 = 0, $7$1 = 0, $8$0 = 0, $10$0 = 0;
  $1$0 = $a$1 >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $1$1 = (($a$1 | 0) < 0 ? -1 : 0) >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $2$0 = $b$1 >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $2$1 = (($b$1 | 0) < 0 ? -1 : 0) >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $4$0 = _i64Subtract($1$0 ^ $a$0, $1$1 ^ $a$1, $1$0, $1$1) | 0;
  $4$1 = tempRet0;
  $6$0 = _i64Subtract($2$0 ^ $b$0, $2$1 ^ $b$1, $2$0, $2$1) | 0;
  $7$0 = $2$0 ^ $1$0;
  $7$1 = $2$1 ^ $1$1;
  $8$0 = ___udivmoddi4($4$0, $4$1, $6$0, tempRet0, 0) | 0;
  $10$0 = _i64Subtract($8$0 ^ $7$0, tempRet0 ^ $7$1, $7$0, $7$1) | 0;
  return (tempRet0 = tempRet0, $10$0) | 0;
}
function ___remdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $rem = 0, $1$0 = 0, $1$1 = 0, $2$0 = 0, $2$1 = 0, $4$0 = 0, $4$1 = 0, $6$0 = 0, $10$0 = 0, $10$1 = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  $rem = __stackBase__ | 0;
  $1$0 = $a$1 >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $1$1 = (($a$1 | 0) < 0 ? -1 : 0) >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $2$0 = $b$1 >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $2$1 = (($b$1 | 0) < 0 ? -1 : 0) >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $4$0 = _i64Subtract($1$0 ^ $a$0, $1$1 ^ $a$1, $1$0, $1$1) | 0;
  $4$1 = tempRet0;
  $6$0 = _i64Subtract($2$0 ^ $b$0, $2$1 ^ $b$1, $2$0, $2$1) | 0;
  ___udivmoddi4($4$0, $4$1, $6$0, tempRet0, $rem) | 0;
  $10$0 = _i64Subtract(HEAP32[$rem >> 2] ^ $1$0, HEAP32[$rem + 4 >> 2] ^ $1$1, $1$0, $1$1) | 0;
  $10$1 = tempRet0;
  STACKTOP = __stackBase__;
  return (tempRet0 = $10$1, $10$0) | 0;
}
function ___muldi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $x_sroa_0_0_extract_trunc = 0, $y_sroa_0_0_extract_trunc = 0, $1$0 = 0, $1$1 = 0, $2 = 0;
  $x_sroa_0_0_extract_trunc = $a$0;
  $y_sroa_0_0_extract_trunc = $b$0;
  $1$0 = ___muldsi3($x_sroa_0_0_extract_trunc, $y_sroa_0_0_extract_trunc) | 0;
  $1$1 = tempRet0;
  $2 = Math_imul($a$1, $y_sroa_0_0_extract_trunc) | 0;
  return (tempRet0 = ((Math_imul($b$1, $x_sroa_0_0_extract_trunc) | 0) + $2 | 0) + $1$1 | $1$1 & 0, 0 | $1$0 & -1) | 0;
}
function ___udivdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $1$0 = 0;
  $1$0 = ___udivmoddi4($a$0, $a$1, $b$0, $b$1, 0) | 0;
  return (tempRet0 = tempRet0, $1$0) | 0;
}
function ___uremdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $rem = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  $rem = __stackBase__ | 0;
  ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) | 0;
  STACKTOP = __stackBase__;
  return (tempRet0 = HEAP32[$rem + 4 >> 2] | 0, HEAP32[$rem >> 2] | 0) | 0;
}
function ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  $rem = $rem | 0;
  var $n_sroa_0_0_extract_trunc = 0, $n_sroa_1_4_extract_shift$0 = 0, $n_sroa_1_4_extract_trunc = 0, $d_sroa_0_0_extract_trunc = 0, $d_sroa_1_4_extract_shift$0 = 0, $d_sroa_1_4_extract_trunc = 0, $4 = 0, $17 = 0, $37 = 0, $49 = 0, $51 = 0, $57 = 0, $58 = 0, $66 = 0, $78 = 0, $86 = 0, $88 = 0, $89 = 0, $91 = 0, $92 = 0, $95 = 0, $105 = 0, $117 = 0, $119 = 0, $125 = 0, $126 = 0, $130 = 0, $q_sroa_1_1_ph = 0, $q_sroa_0_1_ph = 0, $r_sroa_1_1_ph = 0, $r_sroa_0_1_ph = 0, $sr_1_ph = 0, $d_sroa_0_0_insert_insert99$0 = 0, $d_sroa_0_0_insert_insert99$1 = 0, $137$0 = 0, $137$1 = 0, $carry_0203 = 0, $sr_1202 = 0, $r_sroa_0_1201 = 0, $r_sroa_1_1200 = 0, $q_sroa_0_1199 = 0, $q_sroa_1_1198 = 0, $147 = 0, $149 = 0, $r_sroa_0_0_insert_insert42$0 = 0, $r_sroa_0_0_insert_insert42$1 = 0, $150$1 = 0, $151$0 = 0, $152 = 0, $154$0 = 0, $r_sroa_0_0_extract_trunc = 0, $r_sroa_1_4_extract_trunc = 0, $155 = 0, $carry_0_lcssa$0 = 0, $carry_0_lcssa$1 = 0, $r_sroa_0_1_lcssa = 0, $r_sroa_1_1_lcssa = 0, $q_sroa_0_1_lcssa = 0, $q_sroa_1_1_lcssa = 0, $q_sroa_0_0_insert_ext75$0 = 0, $q_sroa_0_0_insert_ext75$1 = 0, $q_sroa_0_0_insert_insert77$1 = 0, $_0$0 = 0, $_0$1 = 0;
  $n_sroa_0_0_extract_trunc = $a$0;
  $n_sroa_1_4_extract_shift$0 = $a$1;
  $n_sroa_1_4_extract_trunc = $n_sroa_1_4_extract_shift$0;
  $d_sroa_0_0_extract_trunc = $b$0;
  $d_sroa_1_4_extract_shift$0 = $b$1;
  $d_sroa_1_4_extract_trunc = $d_sroa_1_4_extract_shift$0;
  if (($n_sroa_1_4_extract_trunc | 0) == 0) {
    $4 = ($rem | 0) != 0;
    if (($d_sroa_1_4_extract_trunc | 0) == 0) {
      if ($4) {
        HEAP32[$rem >> 2] = ($n_sroa_0_0_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
        HEAP32[$rem + 4 >> 2] = 0;
      }
      $_0$1 = 0;
      $_0$0 = ($n_sroa_0_0_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
      return (tempRet0 = $_0$1, $_0$0) | 0;
    } else {
      if (!$4) {
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      HEAP32[$rem >> 2] = $a$0 & -1;
      HEAP32[$rem + 4 >> 2] = $a$1 & 0;
      $_0$1 = 0;
      $_0$0 = 0;
      return (tempRet0 = $_0$1, $_0$0) | 0;
    }
  }
  $17 = ($d_sroa_1_4_extract_trunc | 0) == 0;
  do {
    if (($d_sroa_0_0_extract_trunc | 0) == 0) {
      if ($17) {
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
          HEAP32[$rem + 4 >> 2] = 0;
        }
        $_0$1 = 0;
        $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      if (($n_sroa_0_0_extract_trunc | 0) == 0) {
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = 0;
          HEAP32[$rem + 4 >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_1_4_extract_trunc >>> 0);
        }
        $_0$1 = 0;
        $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_1_4_extract_trunc >>> 0) >>> 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      $37 = $d_sroa_1_4_extract_trunc - 1 | 0;
      if (($37 & $d_sroa_1_4_extract_trunc | 0) == 0) {
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = 0 | $a$0 & -1;
          HEAP32[$rem + 4 >> 2] = $37 & $n_sroa_1_4_extract_trunc | $a$1 & 0;
        }
        $_0$1 = 0;
        $_0$0 = $n_sroa_1_4_extract_trunc >>> ((_llvm_cttz_i32($d_sroa_1_4_extract_trunc | 0) | 0) >>> 0);
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      $49 = _llvm_ctlz_i32($d_sroa_1_4_extract_trunc | 0) | 0;
      $51 = $49 - (_llvm_ctlz_i32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
      if ($51 >>> 0 <= 30) {
        $57 = $51 + 1 | 0;
        $58 = 31 - $51 | 0;
        $sr_1_ph = $57;
        $r_sroa_0_1_ph = $n_sroa_1_4_extract_trunc << $58 | $n_sroa_0_0_extract_trunc >>> ($57 >>> 0);
        $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($57 >>> 0);
        $q_sroa_0_1_ph = 0;
        $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $58;
        break;
      }
      if (($rem | 0) == 0) {
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      HEAP32[$rem >> 2] = 0 | $a$0 & -1;
      HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
      $_0$1 = 0;
      $_0$0 = 0;
      return (tempRet0 = $_0$1, $_0$0) | 0;
    } else {
      if (!$17) {
        $117 = _llvm_ctlz_i32($d_sroa_1_4_extract_trunc | 0) | 0;
        $119 = $117 - (_llvm_ctlz_i32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
        if ($119 >>> 0 <= 31) {
          $125 = $119 + 1 | 0;
          $126 = 31 - $119 | 0;
          $130 = $119 - 31 >> 31;
          $sr_1_ph = $125;
          $r_sroa_0_1_ph = $n_sroa_0_0_extract_trunc >>> ($125 >>> 0) & $130 | $n_sroa_1_4_extract_trunc << $126;
          $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($125 >>> 0) & $130;
          $q_sroa_0_1_ph = 0;
          $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $126;
          break;
        }
        if (($rem | 0) == 0) {
          $_0$1 = 0;
          $_0$0 = 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        HEAP32[$rem >> 2] = 0 | $a$0 & -1;
        HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      $66 = $d_sroa_0_0_extract_trunc - 1 | 0;
      if (($66 & $d_sroa_0_0_extract_trunc | 0) != 0) {
        $86 = (_llvm_ctlz_i32($d_sroa_0_0_extract_trunc | 0) | 0) + 33 | 0;
        $88 = $86 - (_llvm_ctlz_i32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
        $89 = 64 - $88 | 0;
        $91 = 32 - $88 | 0;
        $92 = $91 >> 31;
        $95 = $88 - 32 | 0;
        $105 = $95 >> 31;
        $sr_1_ph = $88;
        $r_sroa_0_1_ph = $91 - 1 >> 31 & $n_sroa_1_4_extract_trunc >>> ($95 >>> 0) | ($n_sroa_1_4_extract_trunc << $91 | $n_sroa_0_0_extract_trunc >>> ($88 >>> 0)) & $105;
        $r_sroa_1_1_ph = $105 & $n_sroa_1_4_extract_trunc >>> ($88 >>> 0);
        $q_sroa_0_1_ph = $n_sroa_0_0_extract_trunc << $89 & $92;
        $q_sroa_1_1_ph = ($n_sroa_1_4_extract_trunc << $89 | $n_sroa_0_0_extract_trunc >>> ($95 >>> 0)) & $92 | $n_sroa_0_0_extract_trunc << $91 & $88 - 33 >> 31;
        break;
      }
      if (($rem | 0) != 0) {
        HEAP32[$rem >> 2] = $66 & $n_sroa_0_0_extract_trunc;
        HEAP32[$rem + 4 >> 2] = 0;
      }
      if (($d_sroa_0_0_extract_trunc | 0) == 1) {
        $_0$1 = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
        $_0$0 = 0 | $a$0 & -1;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      } else {
        $78 = _llvm_cttz_i32($d_sroa_0_0_extract_trunc | 0) | 0;
        $_0$1 = 0 | $n_sroa_1_4_extract_trunc >>> ($78 >>> 0);
        $_0$0 = $n_sroa_1_4_extract_trunc << 32 - $78 | $n_sroa_0_0_extract_trunc >>> ($78 >>> 0) | 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
    }
  } while (0);
  if (($sr_1_ph | 0) == 0) {
    $q_sroa_1_1_lcssa = $q_sroa_1_1_ph;
    $q_sroa_0_1_lcssa = $q_sroa_0_1_ph;
    $r_sroa_1_1_lcssa = $r_sroa_1_1_ph;
    $r_sroa_0_1_lcssa = $r_sroa_0_1_ph;
    $carry_0_lcssa$1 = 0;
    $carry_0_lcssa$0 = 0;
  } else {
    $d_sroa_0_0_insert_insert99$0 = 0 | $b$0 & -1;
    $d_sroa_0_0_insert_insert99$1 = $d_sroa_1_4_extract_shift$0 | $b$1 & 0;
    $137$0 = _i64Add($d_sroa_0_0_insert_insert99$0, $d_sroa_0_0_insert_insert99$1, -1, -1) | 0;
    $137$1 = tempRet0;
    $q_sroa_1_1198 = $q_sroa_1_1_ph;
    $q_sroa_0_1199 = $q_sroa_0_1_ph;
    $r_sroa_1_1200 = $r_sroa_1_1_ph;
    $r_sroa_0_1201 = $r_sroa_0_1_ph;
    $sr_1202 = $sr_1_ph;
    $carry_0203 = 0;
    while (1) {
      $147 = $q_sroa_0_1199 >>> 31 | $q_sroa_1_1198 << 1;
      $149 = $carry_0203 | $q_sroa_0_1199 << 1;
      $r_sroa_0_0_insert_insert42$0 = 0 | ($r_sroa_0_1201 << 1 | $q_sroa_1_1198 >>> 31);
      $r_sroa_0_0_insert_insert42$1 = $r_sroa_0_1201 >>> 31 | $r_sroa_1_1200 << 1 | 0;
      _i64Subtract($137$0, $137$1, $r_sroa_0_0_insert_insert42$0, $r_sroa_0_0_insert_insert42$1) | 0;
      $150$1 = tempRet0;
      $151$0 = $150$1 >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1;
      $152 = $151$0 & 1;
      $154$0 = _i64Subtract($r_sroa_0_0_insert_insert42$0, $r_sroa_0_0_insert_insert42$1, $151$0 & $d_sroa_0_0_insert_insert99$0, ((($150$1 | 0) < 0 ? -1 : 0) >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1) & $d_sroa_0_0_insert_insert99$1) | 0;
      $r_sroa_0_0_extract_trunc = $154$0;
      $r_sroa_1_4_extract_trunc = tempRet0;
      $155 = $sr_1202 - 1 | 0;
      if (($155 | 0) == 0) {
        break;
      } else {
        $q_sroa_1_1198 = $147;
        $q_sroa_0_1199 = $149;
        $r_sroa_1_1200 = $r_sroa_1_4_extract_trunc;
        $r_sroa_0_1201 = $r_sroa_0_0_extract_trunc;
        $sr_1202 = $155;
        $carry_0203 = $152;
      }
    }
    $q_sroa_1_1_lcssa = $147;
    $q_sroa_0_1_lcssa = $149;
    $r_sroa_1_1_lcssa = $r_sroa_1_4_extract_trunc;
    $r_sroa_0_1_lcssa = $r_sroa_0_0_extract_trunc;
    $carry_0_lcssa$1 = 0;
    $carry_0_lcssa$0 = $152;
  }
  $q_sroa_0_0_insert_ext75$0 = $q_sroa_0_1_lcssa;
  $q_sroa_0_0_insert_ext75$1 = 0;
  $q_sroa_0_0_insert_insert77$1 = $q_sroa_1_1_lcssa | $q_sroa_0_0_insert_ext75$1;
  if (($rem | 0) != 0) {
    HEAP32[$rem >> 2] = 0 | $r_sroa_0_1_lcssa;
    HEAP32[$rem + 4 >> 2] = $r_sroa_1_1_lcssa | 0;
  }
  $_0$1 = (0 | $q_sroa_0_0_insert_ext75$0) >>> 31 | $q_sroa_0_0_insert_insert77$1 << 1 | ($q_sroa_0_0_insert_ext75$1 << 1 | $q_sroa_0_0_insert_ext75$0 >>> 31) & 0 | $carry_0_lcssa$1;
  $_0$0 = ($q_sroa_0_0_insert_ext75$0 << 1 | 0 >>> 31) & -2 | $carry_0_lcssa$0;
  return (tempRet0 = $_0$1, $_0$0) | 0;
}
// =======================================================================


// EMSCRIPTEN_END_FUNCS

// TODO: strip out parts of this we do not need

//======= begin closure i64 code =======

// Copyright 2009 The Closure Library Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/**
 * @fileoverview Defines a Long class for representing a 64-bit two's-complement
 * integer value, which faithfully simulates the behavior of a Java "long". This
 * implementation is derived from LongLib in GWT.
 *
 */

var i64Math = (function() { // Emscripten wrapper
  var goog = { math: {} };


  /**
   * Constructs a 64-bit two's-complement integer, given its low and high 32-bit
   * values as *signed* integers.  See the from* functions below for more
   * convenient ways of constructing Longs.
   *
   * The internal representation of a long is the two given signed, 32-bit values.
   * We use 32-bit pieces because these are the size of integers on which
   * Javascript performs bit-operations.  For operations like addition and
   * multiplication, we split each number into 16-bit pieces, which can easily be
   * multiplied within Javascript's floating-point representation without overflow
   * or change in sign.
   *
   * In the algorithms below, we frequently reduce the negative case to the
   * positive case by negating the input(s) and then post-processing the result.
   * Note that we must ALWAYS check specially whether those values are MIN_VALUE
   * (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as
   * a positive number, it overflows back into a negative).  Not handling this
   * case would often result in infinite recursion.
   *
   * @param {number} low  The low (signed) 32 bits of the long.
   * @param {number} high  The high (signed) 32 bits of the long.
   * @constructor
   */
  goog.math.Long = function(low, high) {
    /**
     * @type {number}
     * @private
     */
    this.low_ = low | 0;  // force into 32 signed bits.

    /**
     * @type {number}
     * @private
     */
    this.high_ = high | 0;  // force into 32 signed bits.
  };


  // NOTE: Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the
  // from* methods on which they depend.


  /**
   * A cache of the Long representations of small integer values.
   * @type {!Object}
   * @private
   */
  goog.math.Long.IntCache_ = {};


  /**
   * Returns a Long representing the given (32-bit) integer value.
   * @param {number} value The 32-bit integer in question.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromInt = function(value) {
    if (-128 <= value && value < 128) {
      var cachedObj = goog.math.Long.IntCache_[value];
      if (cachedObj) {
        return cachedObj;
      }
    }

    var obj = new goog.math.Long(value | 0, value < 0 ? -1 : 0);
    if (-128 <= value && value < 128) {
      goog.math.Long.IntCache_[value] = obj;
    }
    return obj;
  };


  /**
   * Returns a Long representing the given value, provided that it is a finite
   * number.  Otherwise, zero is returned.
   * @param {number} value The number in question.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromNumber = function(value) {
    if (isNaN(value) || !isFinite(value)) {
      return goog.math.Long.ZERO;
    } else if (value <= -goog.math.Long.TWO_PWR_63_DBL_) {
      return goog.math.Long.MIN_VALUE;
    } else if (value + 1 >= goog.math.Long.TWO_PWR_63_DBL_) {
      return goog.math.Long.MAX_VALUE;
    } else if (value < 0) {
      return goog.math.Long.fromNumber(-value).negate();
    } else {
      return new goog.math.Long(
          (value % goog.math.Long.TWO_PWR_32_DBL_) | 0,
          (value / goog.math.Long.TWO_PWR_32_DBL_) | 0);
    }
  };


  /**
   * Returns a Long representing the 64-bit integer that comes by concatenating
   * the given high and low bits.  Each is assumed to use 32 bits.
   * @param {number} lowBits The low 32-bits.
   * @param {number} highBits The high 32-bits.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromBits = function(lowBits, highBits) {
    return new goog.math.Long(lowBits, highBits);
  };


  /**
   * Returns a Long representation of the given string, written using the given
   * radix.
   * @param {string} str The textual representation of the Long.
   * @param {number=} opt_radix The radix in which the text is written.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromString = function(str, opt_radix) {
    if (str.length == 0) {
      throw Error('number format error: empty string');
    }

    var radix = opt_radix || 10;
    if (radix < 2 || 36 < radix) {
      throw Error('radix out of range: ' + radix);
    }

    if (str.charAt(0) == '-') {
      return goog.math.Long.fromString(str.substring(1), radix).negate();
    } else if (str.indexOf('-') >= 0) {
      throw Error('number format error: interior "-" character: ' + str);
    }

    // Do several (8) digits each time through the loop, so as to
    // minimize the calls to the very expensive emulated div.
    var radixToPower = goog.math.Long.fromNumber(Math.pow(radix, 8));

    var result = goog.math.Long.ZERO;
    for (var i = 0; i < str.length; i += 8) {
      var size = Math.min(8, str.length - i);
      var value = parseInt(str.substring(i, i + size), radix);
      if (size < 8) {
        var power = goog.math.Long.fromNumber(Math.pow(radix, size));
        result = result.multiply(power).add(goog.math.Long.fromNumber(value));
      } else {
        result = result.multiply(radixToPower);
        result = result.add(goog.math.Long.fromNumber(value));
      }
    }
    return result;
  };


  // NOTE: the compiler should inline these constant values below and then remove
  // these variables, so there should be no runtime penalty for these.


  /**
   * Number used repeated below in calculations.  This must appear before the
   * first call to any from* function below.
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_16_DBL_ = 1 << 16;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_24_DBL_ = 1 << 24;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_32_DBL_ =
      goog.math.Long.TWO_PWR_16_DBL_ * goog.math.Long.TWO_PWR_16_DBL_;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_31_DBL_ =
      goog.math.Long.TWO_PWR_32_DBL_ / 2;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_48_DBL_ =
      goog.math.Long.TWO_PWR_32_DBL_ * goog.math.Long.TWO_PWR_16_DBL_;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_64_DBL_ =
      goog.math.Long.TWO_PWR_32_DBL_ * goog.math.Long.TWO_PWR_32_DBL_;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_63_DBL_ =
      goog.math.Long.TWO_PWR_64_DBL_ / 2;


  /** @type {!goog.math.Long} */
  goog.math.Long.ZERO = goog.math.Long.fromInt(0);


  /** @type {!goog.math.Long} */
  goog.math.Long.ONE = goog.math.Long.fromInt(1);


  /** @type {!goog.math.Long} */
  goog.math.Long.NEG_ONE = goog.math.Long.fromInt(-1);


  /** @type {!goog.math.Long} */
  goog.math.Long.MAX_VALUE =
      goog.math.Long.fromBits(0xFFFFFFFF | 0, 0x7FFFFFFF | 0);


  /** @type {!goog.math.Long} */
  goog.math.Long.MIN_VALUE = goog.math.Long.fromBits(0, 0x80000000 | 0);


  /**
   * @type {!goog.math.Long}
   * @private
   */
  goog.math.Long.TWO_PWR_24_ = goog.math.Long.fromInt(1 << 24);


  /** @return {number} The value, assuming it is a 32-bit integer. */
  goog.math.Long.prototype.toInt = function() {
    return this.low_;
  };


  /** @return {number} The closest floating-point representation to this value. */
  goog.math.Long.prototype.toNumber = function() {
    return this.high_ * goog.math.Long.TWO_PWR_32_DBL_ +
           this.getLowBitsUnsigned();
  };


  /**
   * @param {number=} opt_radix The radix in which the text should be written.
   * @return {string} The textual representation of this value.
   */
  goog.math.Long.prototype.toString = function(opt_radix) {
    var radix = opt_radix || 10;
    if (radix < 2 || 36 < radix) {
      throw Error('radix out of range: ' + radix);
    }

    if (this.isZero()) {
      return '0';
    }

    if (this.isNegative()) {
      if (this.equals(goog.math.Long.MIN_VALUE)) {
        // We need to change the Long value before it can be negated, so we remove
        // the bottom-most digit in this base and then recurse to do the rest.
        var radixLong = goog.math.Long.fromNumber(radix);
        var div = this.div(radixLong);
        var rem = div.multiply(radixLong).subtract(this);
        return div.toString(radix) + rem.toInt().toString(radix);
      } else {
        return '-' + this.negate().toString(radix);
      }
    }

    // Do several (6) digits each time through the loop, so as to
    // minimize the calls to the very expensive emulated div.
    var radixToPower = goog.math.Long.fromNumber(Math.pow(radix, 6));

    var rem = this;
    var result = '';
    while (true) {
      var remDiv = rem.div(radixToPower);
      var intval = rem.subtract(remDiv.multiply(radixToPower)).toInt();
      var digits = intval.toString(radix);

      rem = remDiv;
      if (rem.isZero()) {
        return digits + result;
      } else {
        while (digits.length < 6) {
          digits = '0' + digits;
        }
        result = '' + digits + result;
      }
    }
  };


  /** @return {number} The high 32-bits as a signed value. */
  goog.math.Long.prototype.getHighBits = function() {
    return this.high_;
  };


  /** @return {number} The low 32-bits as a signed value. */
  goog.math.Long.prototype.getLowBits = function() {
    return this.low_;
  };


  /** @return {number} The low 32-bits as an unsigned value. */
  goog.math.Long.prototype.getLowBitsUnsigned = function() {
    return (this.low_ >= 0) ?
        this.low_ : goog.math.Long.TWO_PWR_32_DBL_ + this.low_;
  };


  /**
   * @return {number} Returns the number of bits needed to represent the absolute
   *     value of this Long.
   */
  goog.math.Long.prototype.getNumBitsAbs = function() {
    if (this.isNegative()) {
      if (this.equals(goog.math.Long.MIN_VALUE)) {
        return 64;
      } else {
        return this.negate().getNumBitsAbs();
      }
    } else {
      var val = this.high_ != 0 ? this.high_ : this.low_;
      for (var bit = 31; bit > 0; bit--) {
        if ((val & (1 << bit)) != 0) {
          break;
        }
      }
      return this.high_ != 0 ? bit + 33 : bit + 1;
    }
  };


  /** @return {boolean} Whether this value is zero. */
  goog.math.Long.prototype.isZero = function() {
    return this.high_ == 0 && this.low_ == 0;
  };


  /** @return {boolean} Whether this value is negative. */
  goog.math.Long.prototype.isNegative = function() {
    return this.high_ < 0;
  };


  /** @return {boolean} Whether this value is odd. */
  goog.math.Long.prototype.isOdd = function() {
    return (this.low_ & 1) == 1;
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long equals the other.
   */
  goog.math.Long.prototype.equals = function(other) {
    return (this.high_ == other.high_) && (this.low_ == other.low_);
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long does not equal the other.
   */
  goog.math.Long.prototype.notEquals = function(other) {
    return (this.high_ != other.high_) || (this.low_ != other.low_);
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is less than the other.
   */
  goog.math.Long.prototype.lessThan = function(other) {
    return this.compare(other) < 0;
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is less than or equal to the other.
   */
  goog.math.Long.prototype.lessThanOrEqual = function(other) {
    return this.compare(other) <= 0;
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is greater than the other.
   */
  goog.math.Long.prototype.greaterThan = function(other) {
    return this.compare(other) > 0;
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is greater than or equal to the other.
   */
  goog.math.Long.prototype.greaterThanOrEqual = function(other) {
    return this.compare(other) >= 0;
  };


  /**
   * Compares this Long with the given one.
   * @param {goog.math.Long} other Long to compare against.
   * @return {number} 0 if they are the same, 1 if the this is greater, and -1
   *     if the given one is greater.
   */
  goog.math.Long.prototype.compare = function(other) {
    if (this.equals(other)) {
      return 0;
    }

    var thisNeg = this.isNegative();
    var otherNeg = other.isNegative();
    if (thisNeg && !otherNeg) {
      return -1;
    }
    if (!thisNeg && otherNeg) {
      return 1;
    }

    // at this point, the signs are the same, so subtraction will not overflow
    if (this.subtract(other).isNegative()) {
      return -1;
    } else {
      return 1;
    }
  };


  /** @return {!goog.math.Long} The negation of this value. */
  goog.math.Long.prototype.negate = function() {
    if (this.equals(goog.math.Long.MIN_VALUE)) {
      return goog.math.Long.MIN_VALUE;
    } else {
      return this.not().add(goog.math.Long.ONE);
    }
  };


  /**
   * Returns the sum of this and the given Long.
   * @param {goog.math.Long} other Long to add to this one.
   * @return {!goog.math.Long} The sum of this and the given Long.
   */
  goog.math.Long.prototype.add = function(other) {
    // Divide each number into 4 chunks of 16 bits, and then sum the chunks.

    var a48 = this.high_ >>> 16;
    var a32 = this.high_ & 0xFFFF;
    var a16 = this.low_ >>> 16;
    var a00 = this.low_ & 0xFFFF;

    var b48 = other.high_ >>> 16;
    var b32 = other.high_ & 0xFFFF;
    var b16 = other.low_ >>> 16;
    var b00 = other.low_ & 0xFFFF;

    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;
    c00 += a00 + b00;
    c16 += c00 >>> 16;
    c00 &= 0xFFFF;
    c16 += a16 + b16;
    c32 += c16 >>> 16;
    c16 &= 0xFFFF;
    c32 += a32 + b32;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c48 += a48 + b48;
    c48 &= 0xFFFF;
    return goog.math.Long.fromBits((c16 << 16) | c00, (c48 << 16) | c32);
  };


  /**
   * Returns the difference of this and the given Long.
   * @param {goog.math.Long} other Long to subtract from this.
   * @return {!goog.math.Long} The difference of this and the given Long.
   */
  goog.math.Long.prototype.subtract = function(other) {
    return this.add(other.negate());
  };


  /**
   * Returns the product of this and the given long.
   * @param {goog.math.Long} other Long to multiply with this.
   * @return {!goog.math.Long} The product of this and the other.
   */
  goog.math.Long.prototype.multiply = function(other) {
    if (this.isZero()) {
      return goog.math.Long.ZERO;
    } else if (other.isZero()) {
      return goog.math.Long.ZERO;
    }

    if (this.equals(goog.math.Long.MIN_VALUE)) {
      return other.isOdd() ? goog.math.Long.MIN_VALUE : goog.math.Long.ZERO;
    } else if (other.equals(goog.math.Long.MIN_VALUE)) {
      return this.isOdd() ? goog.math.Long.MIN_VALUE : goog.math.Long.ZERO;
    }

    if (this.isNegative()) {
      if (other.isNegative()) {
        return this.negate().multiply(other.negate());
      } else {
        return this.negate().multiply(other).negate();
      }
    } else if (other.isNegative()) {
      return this.multiply(other.negate()).negate();
    }

    // If both longs are small, use float multiplication
    if (this.lessThan(goog.math.Long.TWO_PWR_24_) &&
        other.lessThan(goog.math.Long.TWO_PWR_24_)) {
      return goog.math.Long.fromNumber(this.toNumber() * other.toNumber());
    }

    // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.
    // We can skip products that would overflow.

    var a48 = this.high_ >>> 16;
    var a32 = this.high_ & 0xFFFF;
    var a16 = this.low_ >>> 16;
    var a00 = this.low_ & 0xFFFF;

    var b48 = other.high_ >>> 16;
    var b32 = other.high_ & 0xFFFF;
    var b16 = other.low_ >>> 16;
    var b00 = other.low_ & 0xFFFF;

    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;
    c00 += a00 * b00;
    c16 += c00 >>> 16;
    c00 &= 0xFFFF;
    c16 += a16 * b00;
    c32 += c16 >>> 16;
    c16 &= 0xFFFF;
    c16 += a00 * b16;
    c32 += c16 >>> 16;
    c16 &= 0xFFFF;
    c32 += a32 * b00;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c32 += a16 * b16;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c32 += a00 * b32;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;
    c48 &= 0xFFFF;
    return goog.math.Long.fromBits((c16 << 16) | c00, (c48 << 16) | c32);
  };


  /**
   * Returns this Long divided by the given one.
   * @param {goog.math.Long} other Long by which to divide.
   * @return {!goog.math.Long} This Long divided by the given one.
   */
  goog.math.Long.prototype.div = function(other) {
    if (other.isZero()) {
      throw Error('division by zero');
    } else if (this.isZero()) {
      return goog.math.Long.ZERO;
    }

    if (this.equals(goog.math.Long.MIN_VALUE)) {
      if (other.equals(goog.math.Long.ONE) ||
          other.equals(goog.math.Long.NEG_ONE)) {
        return goog.math.Long.MIN_VALUE;  // recall that -MIN_VALUE == MIN_VALUE
      } else if (other.equals(goog.math.Long.MIN_VALUE)) {
        return goog.math.Long.ONE;
      } else {
        // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.
        var halfThis = this.shiftRight(1);
        var approx = halfThis.div(other).shiftLeft(1);
        if (approx.equals(goog.math.Long.ZERO)) {
          return other.isNegative() ? goog.math.Long.ONE : goog.math.Long.NEG_ONE;
        } else {
          var rem = this.subtract(other.multiply(approx));
          var result = approx.add(rem.div(other));
          return result;
        }
      }
    } else if (other.equals(goog.math.Long.MIN_VALUE)) {
      return goog.math.Long.ZERO;
    }

    if (this.isNegative()) {
      if (other.isNegative()) {
        return this.negate().div(other.negate());
      } else {
        return this.negate().div(other).negate();
      }
    } else if (other.isNegative()) {
      return this.div(other.negate()).negate();
    }

    // Repeat the following until the remainder is less than other:  find a
    // floating-point that approximates remainder / other *from below*, add this
    // into the result, and subtract it from the remainder.  It is critical that
    // the approximate value is less than or equal to the real value so that the
    // remainder never becomes negative.
    var res = goog.math.Long.ZERO;
    var rem = this;
    while (rem.greaterThanOrEqual(other)) {
      // Approximate the result of division. This may be a little greater or
      // smaller than the actual value.
      var approx = Math.max(1, Math.floor(rem.toNumber() / other.toNumber()));

      // We will tweak the approximate result by changing it in the 48-th digit or
      // the smallest non-fractional digit, whichever is larger.
      var log2 = Math.ceil(Math.log(approx) / Math.LN2);
      var delta = (log2 <= 48) ? 1 : Math.pow(2, log2 - 48);

      // Decrease the approximation until it is smaller than the remainder.  Note
      // that if it is too large, the product overflows and is negative.
      var approxRes = goog.math.Long.fromNumber(approx);
      var approxRem = approxRes.multiply(other);
      while (approxRem.isNegative() || approxRem.greaterThan(rem)) {
        approx -= delta;
        approxRes = goog.math.Long.fromNumber(approx);
        approxRem = approxRes.multiply(other);
      }

      // We know the answer can't be zero... and actually, zero would cause
      // infinite recursion since we would make no progress.
      if (approxRes.isZero()) {
        approxRes = goog.math.Long.ONE;
      }

      res = res.add(approxRes);
      rem = rem.subtract(approxRem);
    }
    return res;
  };


  /**
   * Returns this Long modulo the given one.
   * @param {goog.math.Long} other Long by which to mod.
   * @return {!goog.math.Long} This Long modulo the given one.
   */
  goog.math.Long.prototype.modulo = function(other) {
    return this.subtract(this.div(other).multiply(other));
  };


  /** @return {!goog.math.Long} The bitwise-NOT of this value. */
  goog.math.Long.prototype.not = function() {
    return goog.math.Long.fromBits(~this.low_, ~this.high_);
  };


  /**
   * Returns the bitwise-AND of this Long and the given one.
   * @param {goog.math.Long} other The Long with which to AND.
   * @return {!goog.math.Long} The bitwise-AND of this and the other.
   */
  goog.math.Long.prototype.and = function(other) {
    return goog.math.Long.fromBits(this.low_ & other.low_,
                                   this.high_ & other.high_);
  };


  /**
   * Returns the bitwise-OR of this Long and the given one.
   * @param {goog.math.Long} other The Long with which to OR.
   * @return {!goog.math.Long} The bitwise-OR of this and the other.
   */
  goog.math.Long.prototype.or = function(other) {
    return goog.math.Long.fromBits(this.low_ | other.low_,
                                   this.high_ | other.high_);
  };


  /**
   * Returns the bitwise-XOR of this Long and the given one.
   * @param {goog.math.Long} other The Long with which to XOR.
   * @return {!goog.math.Long} The bitwise-XOR of this and the other.
   */
  goog.math.Long.prototype.xor = function(other) {
    return goog.math.Long.fromBits(this.low_ ^ other.low_,
                                   this.high_ ^ other.high_);
  };


  /**
   * Returns this Long with bits shifted to the left by the given amount.
   * @param {number} numBits The number of bits by which to shift.
   * @return {!goog.math.Long} This shifted to the left by the given amount.
   */
  goog.math.Long.prototype.shiftLeft = function(numBits) {
    numBits &= 63;
    if (numBits == 0) {
      return this;
    } else {
      var low = this.low_;
      if (numBits < 32) {
        var high = this.high_;
        return goog.math.Long.fromBits(
            low << numBits,
            (high << numBits) | (low >>> (32 - numBits)));
      } else {
        return goog.math.Long.fromBits(0, low << (numBits - 32));
      }
    }
  };


  /**
   * Returns this Long with bits shifted to the right by the given amount.
   * @param {number} numBits The number of bits by which to shift.
   * @return {!goog.math.Long} This shifted to the right by the given amount.
   */
  goog.math.Long.prototype.shiftRight = function(numBits) {
    numBits &= 63;
    if (numBits == 0) {
      return this;
    } else {
      var high = this.high_;
      if (numBits < 32) {
        var low = this.low_;
        return goog.math.Long.fromBits(
            (low >>> numBits) | (high << (32 - numBits)),
            high >> numBits);
      } else {
        return goog.math.Long.fromBits(
            high >> (numBits - 32),
            high >= 0 ? 0 : -1);
      }
    }
  };


  /**
   * Returns this Long with bits shifted to the right by the given amount, with
   * the new top bits matching the current sign bit.
   * @param {number} numBits The number of bits by which to shift.
   * @return {!goog.math.Long} This shifted to the right by the given amount, with
   *     zeros placed into the new leading bits.
   */
  goog.math.Long.prototype.shiftRightUnsigned = function(numBits) {
    numBits &= 63;
    if (numBits == 0) {
      return this;
    } else {
      var high = this.high_;
      if (numBits < 32) {
        var low = this.low_;
        return goog.math.Long.fromBits(
            (low >>> numBits) | (high << (32 - numBits)),
            high >>> numBits);
      } else if (numBits == 32) {
        return goog.math.Long.fromBits(high, 0);
      } else {
        return goog.math.Long.fromBits(high >>> (numBits - 32), 0);
      }
    }
  };

  //======= begin jsbn =======

  var navigator = { appName: 'Modern Browser' }; // polyfill a little

  // Copyright (c) 2005  Tom Wu
  // All Rights Reserved.
  // http://www-cs-students.stanford.edu/~tjw/jsbn/

  /*
   * Copyright (c) 2003-2005  Tom Wu
   * All Rights Reserved.
   *
   * Permission is hereby granted, free of charge, to any person obtaining
   * a copy of this software and associated documentation files (the
   * "Software"), to deal in the Software without restriction, including
   * without limitation the rights to use, copy, modify, merge, publish,
   * distribute, sublicense, and/or sell copies of the Software, and to
   * permit persons to whom the Software is furnished to do so, subject to
   * the following conditions:
   *
   * The above copyright notice and this permission notice shall be
   * included in all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS-IS" AND WITHOUT WARRANTY OF ANY KIND, 
   * EXPRESS, IMPLIED OR OTHERWISE, INCLUDING WITHOUT LIMITATION, ANY 
   * WARRANTY OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.  
   *
   * IN NO EVENT SHALL TOM WU BE LIABLE FOR ANY SPECIAL, INCIDENTAL,
   * INDIRECT OR CONSEQUENTIAL DAMAGES OF ANY KIND, OR ANY DAMAGES WHATSOEVER
   * RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER OR NOT ADVISED OF
   * THE POSSIBILITY OF DAMAGE, AND ON ANY THEORY OF LIABILITY, ARISING OUT
   * OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
   *
   * In addition, the following condition applies:
   *
   * All redistributions must retain an intact copy of this copyright notice
   * and disclaimer.
   */

  // Basic JavaScript BN library - subset useful for RSA encryption.

  // Bits per digit
  var dbits;

  // JavaScript engine analysis
  var canary = 0xdeadbeefcafe;
  var j_lm = ((canary&0xffffff)==0xefcafe);

  // (public) Constructor
  function BigInteger(a,b,c) {
    if(a != null)
      if("number" == typeof a) this.fromNumber(a,b,c);
      else if(b == null && "string" != typeof a) this.fromString(a,256);
      else this.fromString(a,b);
  }

  // return new, unset BigInteger
  function nbi() { return new BigInteger(null); }

  // am: Compute w_j += (x*this_i), propagate carries,
  // c is initial carry, returns final carry.
  // c < 3*dvalue, x < 2*dvalue, this_i < dvalue
  // We need to select the fastest one that works in this environment.

  // am1: use a single mult and divide to get the high bits,
  // max digit bits should be 26 because
  // max internal value = 2*dvalue^2-2*dvalue (< 2^53)
  function am1(i,x,w,j,c,n) {
    while(--n >= 0) {
      var v = x*this[i++]+w[j]+c;
      c = Math.floor(v/0x4000000);
      w[j++] = v&0x3ffffff;
    }
    return c;
  }
  // am2 avoids a big mult-and-extract completely.
  // Max digit bits should be <= 30 because we do bitwise ops
  // on values up to 2*hdvalue^2-hdvalue-1 (< 2^31)
  function am2(i,x,w,j,c,n) {
    var xl = x&0x7fff, xh = x>>15;
    while(--n >= 0) {
      var l = this[i]&0x7fff;
      var h = this[i++]>>15;
      var m = xh*l+h*xl;
      l = xl*l+((m&0x7fff)<<15)+w[j]+(c&0x3fffffff);
      c = (l>>>30)+(m>>>15)+xh*h+(c>>>30);
      w[j++] = l&0x3fffffff;
    }
    return c;
  }
  // Alternately, set max digit bits to 28 since some
  // browsers slow down when dealing with 32-bit numbers.
  function am3(i,x,w,j,c,n) {
    var xl = x&0x3fff, xh = x>>14;
    while(--n >= 0) {
      var l = this[i]&0x3fff;
      var h = this[i++]>>14;
      var m = xh*l+h*xl;
      l = xl*l+((m&0x3fff)<<14)+w[j]+c;
      c = (l>>28)+(m>>14)+xh*h;
      w[j++] = l&0xfffffff;
    }
    return c;
  }
  if(j_lm && (navigator.appName == "Microsoft Internet Explorer")) {
    BigInteger.prototype.am = am2;
    dbits = 30;
  }
  else if(j_lm && (navigator.appName != "Netscape")) {
    BigInteger.prototype.am = am1;
    dbits = 26;
  }
  else { // Mozilla/Netscape seems to prefer am3
    BigInteger.prototype.am = am3;
    dbits = 28;
  }

  BigInteger.prototype.DB = dbits;
  BigInteger.prototype.DM = ((1<<dbits)-1);
  BigInteger.prototype.DV = (1<<dbits);

  var BI_FP = 52;
  BigInteger.prototype.FV = Math.pow(2,BI_FP);
  BigInteger.prototype.F1 = BI_FP-dbits;
  BigInteger.prototype.F2 = 2*dbits-BI_FP;

  // Digit conversions
  var BI_RM = "0123456789abcdefghijklmnopqrstuvwxyz";
  var BI_RC = new Array();
  var rr,vv;
  rr = "0".charCodeAt(0);
  for(vv = 0; vv <= 9; ++vv) BI_RC[rr++] = vv;
  rr = "a".charCodeAt(0);
  for(vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv;
  rr = "A".charCodeAt(0);
  for(vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv;

  function int2char(n) { return BI_RM.charAt(n); }
  function intAt(s,i) {
    var c = BI_RC[s.charCodeAt(i)];
    return (c==null)?-1:c;
  }

  // (protected) copy this to r
  function bnpCopyTo(r) {
    for(var i = this.t-1; i >= 0; --i) r[i] = this[i];
    r.t = this.t;
    r.s = this.s;
  }

  // (protected) set from integer value x, -DV <= x < DV
  function bnpFromInt(x) {
    this.t = 1;
    this.s = (x<0)?-1:0;
    if(x > 0) this[0] = x;
    else if(x < -1) this[0] = x+DV;
    else this.t = 0;
  }

  // return bigint initialized to value
  function nbv(i) { var r = nbi(); r.fromInt(i); return r; }

  // (protected) set from string and radix
  function bnpFromString(s,b) {
    var k;
    if(b == 16) k = 4;
    else if(b == 8) k = 3;
    else if(b == 256) k = 8; // byte array
    else if(b == 2) k = 1;
    else if(b == 32) k = 5;
    else if(b == 4) k = 2;
    else { this.fromRadix(s,b); return; }
    this.t = 0;
    this.s = 0;
    var i = s.length, mi = false, sh = 0;
    while(--i >= 0) {
      var x = (k==8)?s[i]&0xff:intAt(s,i);
      if(x < 0) {
        if(s.charAt(i) == "-") mi = true;
        continue;
      }
      mi = false;
      if(sh == 0)
        this[this.t++] = x;
      else if(sh+k > this.DB) {
        this[this.t-1] |= (x&((1<<(this.DB-sh))-1))<<sh;
        this[this.t++] = (x>>(this.DB-sh));
      }
      else
        this[this.t-1] |= x<<sh;
      sh += k;
      if(sh >= this.DB) sh -= this.DB;
    }
    if(k == 8 && (s[0]&0x80) != 0) {
      this.s = -1;
      if(sh > 0) this[this.t-1] |= ((1<<(this.DB-sh))-1)<<sh;
    }
    this.clamp();
    if(mi) BigInteger.ZERO.subTo(this,this);
  }

  // (protected) clamp off excess high words
  function bnpClamp() {
    var c = this.s&this.DM;
    while(this.t > 0 && this[this.t-1] == c) --this.t;
  }

  // (public) return string representation in given radix
  function bnToString(b) {
    if(this.s < 0) return "-"+this.negate().toString(b);
    var k;
    if(b == 16) k = 4;
    else if(b == 8) k = 3;
    else if(b == 2) k = 1;
    else if(b == 32) k = 5;
    else if(b == 4) k = 2;
    else return this.toRadix(b);
    var km = (1<<k)-1, d, m = false, r = "", i = this.t;
    var p = this.DB-(i*this.DB)%k;
    if(i-- > 0) {
      if(p < this.DB && (d = this[i]>>p) > 0) { m = true; r = int2char(d); }
      while(i >= 0) {
        if(p < k) {
          d = (this[i]&((1<<p)-1))<<(k-p);
          d |= this[--i]>>(p+=this.DB-k);
        }
        else {
          d = (this[i]>>(p-=k))&km;
          if(p <= 0) { p += this.DB; --i; }
        }
        if(d > 0) m = true;
        if(m) r += int2char(d);
      }
    }
    return m?r:"0";
  }

  // (public) -this
  function bnNegate() { var r = nbi(); BigInteger.ZERO.subTo(this,r); return r; }

  // (public) |this|
  function bnAbs() { return (this.s<0)?this.negate():this; }

  // (public) return + if this > a, - if this < a, 0 if equal
  function bnCompareTo(a) {
    var r = this.s-a.s;
    if(r != 0) return r;
    var i = this.t;
    r = i-a.t;
    if(r != 0) return (this.s<0)?-r:r;
    while(--i >= 0) if((r=this[i]-a[i]) != 0) return r;
    return 0;
  }

  // returns bit length of the integer x
  function nbits(x) {
    var r = 1, t;
    if((t=x>>>16) != 0) { x = t; r += 16; }
    if((t=x>>8) != 0) { x = t; r += 8; }
    if((t=x>>4) != 0) { x = t; r += 4; }
    if((t=x>>2) != 0) { x = t; r += 2; }
    if((t=x>>1) != 0) { x = t; r += 1; }
    return r;
  }

  // (public) return the number of bits in "this"
  function bnBitLength() {
    if(this.t <= 0) return 0;
    return this.DB*(this.t-1)+nbits(this[this.t-1]^(this.s&this.DM));
  }

  // (protected) r = this << n*DB
  function bnpDLShiftTo(n,r) {
    var i;
    for(i = this.t-1; i >= 0; --i) r[i+n] = this[i];
    for(i = n-1; i >= 0; --i) r[i] = 0;
    r.t = this.t+n;
    r.s = this.s;
  }

  // (protected) r = this >> n*DB
  function bnpDRShiftTo(n,r) {
    for(var i = n; i < this.t; ++i) r[i-n] = this[i];
    r.t = Math.max(this.t-n,0);
    r.s = this.s;
  }

  // (protected) r = this << n
  function bnpLShiftTo(n,r) {
    var bs = n%this.DB;
    var cbs = this.DB-bs;
    var bm = (1<<cbs)-1;
    var ds = Math.floor(n/this.DB), c = (this.s<<bs)&this.DM, i;
    for(i = this.t-1; i >= 0; --i) {
      r[i+ds+1] = (this[i]>>cbs)|c;
      c = (this[i]&bm)<<bs;
    }
    for(i = ds-1; i >= 0; --i) r[i] = 0;
    r[ds] = c;
    r.t = this.t+ds+1;
    r.s = this.s;
    r.clamp();
  }

  // (protected) r = this >> n
  function bnpRShiftTo(n,r) {
    r.s = this.s;
    var ds = Math.floor(n/this.DB);
    if(ds >= this.t) { r.t = 0; return; }
    var bs = n%this.DB;
    var cbs = this.DB-bs;
    var bm = (1<<bs)-1;
    r[0] = this[ds]>>bs;
    for(var i = ds+1; i < this.t; ++i) {
      r[i-ds-1] |= (this[i]&bm)<<cbs;
      r[i-ds] = this[i]>>bs;
    }
    if(bs > 0) r[this.t-ds-1] |= (this.s&bm)<<cbs;
    r.t = this.t-ds;
    r.clamp();
  }

  // (protected) r = this - a
  function bnpSubTo(a,r) {
    var i = 0, c = 0, m = Math.min(a.t,this.t);
    while(i < m) {
      c += this[i]-a[i];
      r[i++] = c&this.DM;
      c >>= this.DB;
    }
    if(a.t < this.t) {
      c -= a.s;
      while(i < this.t) {
        c += this[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c += this.s;
    }
    else {
      c += this.s;
      while(i < a.t) {
        c -= a[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c -= a.s;
    }
    r.s = (c<0)?-1:0;
    if(c < -1) r[i++] = this.DV+c;
    else if(c > 0) r[i++] = c;
    r.t = i;
    r.clamp();
  }

  // (protected) r = this * a, r != this,a (HAC 14.12)
  // "this" should be the larger one if appropriate.
  function bnpMultiplyTo(a,r) {
    var x = this.abs(), y = a.abs();
    var i = x.t;
    r.t = i+y.t;
    while(--i >= 0) r[i] = 0;
    for(i = 0; i < y.t; ++i) r[i+x.t] = x.am(0,y[i],r,i,0,x.t);
    r.s = 0;
    r.clamp();
    if(this.s != a.s) BigInteger.ZERO.subTo(r,r);
  }

  // (protected) r = this^2, r != this (HAC 14.16)
  function bnpSquareTo(r) {
    var x = this.abs();
    var i = r.t = 2*x.t;
    while(--i >= 0) r[i] = 0;
    for(i = 0; i < x.t-1; ++i) {
      var c = x.am(i,x[i],r,2*i,0,1);
      if((r[i+x.t]+=x.am(i+1,2*x[i],r,2*i+1,c,x.t-i-1)) >= x.DV) {
        r[i+x.t] -= x.DV;
        r[i+x.t+1] = 1;
      }
    }
    if(r.t > 0) r[r.t-1] += x.am(i,x[i],r,2*i,0,1);
    r.s = 0;
    r.clamp();
  }

  // (protected) divide this by m, quotient and remainder to q, r (HAC 14.20)
  // r != q, this != m.  q or r may be null.
  function bnpDivRemTo(m,q,r) {
    var pm = m.abs();
    if(pm.t <= 0) return;
    var pt = this.abs();
    if(pt.t < pm.t) {
      if(q != null) q.fromInt(0);
      if(r != null) this.copyTo(r);
      return;
    }
    if(r == null) r = nbi();
    var y = nbi(), ts = this.s, ms = m.s;
    var nsh = this.DB-nbits(pm[pm.t-1]);	// normalize modulus
    if(nsh > 0) { pm.lShiftTo(nsh,y); pt.lShiftTo(nsh,r); }
    else { pm.copyTo(y); pt.copyTo(r); }
    var ys = y.t;
    var y0 = y[ys-1];
    if(y0 == 0) return;
    var yt = y0*(1<<this.F1)+((ys>1)?y[ys-2]>>this.F2:0);
    var d1 = this.FV/yt, d2 = (1<<this.F1)/yt, e = 1<<this.F2;
    var i = r.t, j = i-ys, t = (q==null)?nbi():q;
    y.dlShiftTo(j,t);
    if(r.compareTo(t) >= 0) {
      r[r.t++] = 1;
      r.subTo(t,r);
    }
    BigInteger.ONE.dlShiftTo(ys,t);
    t.subTo(y,y);	// "negative" y so we can replace sub with am later
    while(y.t < ys) y[y.t++] = 0;
    while(--j >= 0) {
      // Estimate quotient digit
      var qd = (r[--i]==y0)?this.DM:Math.floor(r[i]*d1+(r[i-1]+e)*d2);
      if((r[i]+=y.am(0,qd,r,j,0,ys)) < qd) {	// Try it out
        y.dlShiftTo(j,t);
        r.subTo(t,r);
        while(r[i] < --qd) r.subTo(t,r);
      }
    }
    if(q != null) {
      r.drShiftTo(ys,q);
      if(ts != ms) BigInteger.ZERO.subTo(q,q);
    }
    r.t = ys;
    r.clamp();
    if(nsh > 0) r.rShiftTo(nsh,r);	// Denormalize remainder
    if(ts < 0) BigInteger.ZERO.subTo(r,r);
  }

  // (public) this mod a
  function bnMod(a) {
    var r = nbi();
    this.abs().divRemTo(a,null,r);
    if(this.s < 0 && r.compareTo(BigInteger.ZERO) > 0) a.subTo(r,r);
    return r;
  }

  // Modular reduction using "classic" algorithm
  function Classic(m) { this.m = m; }
  function cConvert(x) {
    if(x.s < 0 || x.compareTo(this.m) >= 0) return x.mod(this.m);
    else return x;
  }
  function cRevert(x) { return x; }
  function cReduce(x) { x.divRemTo(this.m,null,x); }
  function cMulTo(x,y,r) { x.multiplyTo(y,r); this.reduce(r); }
  function cSqrTo(x,r) { x.squareTo(r); this.reduce(r); }

  Classic.prototype.convert = cConvert;
  Classic.prototype.revert = cRevert;
  Classic.prototype.reduce = cReduce;
  Classic.prototype.mulTo = cMulTo;
  Classic.prototype.sqrTo = cSqrTo;

  // (protected) return "-1/this % 2^DB"; useful for Mont. reduction
  // justification:
  //         xy == 1 (mod m)
  //         xy =  1+km
  //   xy(2-xy) = (1+km)(1-km)
  // x[y(2-xy)] = 1-k^2m^2
  // x[y(2-xy)] == 1 (mod m^2)
  // if y is 1/x mod m, then y(2-xy) is 1/x mod m^2
  // should reduce x and y(2-xy) by m^2 at each step to keep size bounded.
  // JS multiply "overflows" differently from C/C++, so care is needed here.
  function bnpInvDigit() {
    if(this.t < 1) return 0;
    var x = this[0];
    if((x&1) == 0) return 0;
    var y = x&3;		// y == 1/x mod 2^2
    y = (y*(2-(x&0xf)*y))&0xf;	// y == 1/x mod 2^4
    y = (y*(2-(x&0xff)*y))&0xff;	// y == 1/x mod 2^8
    y = (y*(2-(((x&0xffff)*y)&0xffff)))&0xffff;	// y == 1/x mod 2^16
    // last step - calculate inverse mod DV directly;
    // assumes 16 < DB <= 32 and assumes ability to handle 48-bit ints
    y = (y*(2-x*y%this.DV))%this.DV;		// y == 1/x mod 2^dbits
    // we really want the negative inverse, and -DV < y < DV
    return (y>0)?this.DV-y:-y;
  }

  // Montgomery reduction
  function Montgomery(m) {
    this.m = m;
    this.mp = m.invDigit();
    this.mpl = this.mp&0x7fff;
    this.mph = this.mp>>15;
    this.um = (1<<(m.DB-15))-1;
    this.mt2 = 2*m.t;
  }

  // xR mod m
  function montConvert(x) {
    var r = nbi();
    x.abs().dlShiftTo(this.m.t,r);
    r.divRemTo(this.m,null,r);
    if(x.s < 0 && r.compareTo(BigInteger.ZERO) > 0) this.m.subTo(r,r);
    return r;
  }

  // x/R mod m
  function montRevert(x) {
    var r = nbi();
    x.copyTo(r);
    this.reduce(r);
    return r;
  }

  // x = x/R mod m (HAC 14.32)
  function montReduce(x) {
    while(x.t <= this.mt2)	// pad x so am has enough room later
      x[x.t++] = 0;
    for(var i = 0; i < this.m.t; ++i) {
      // faster way of calculating u0 = x[i]*mp mod DV
      var j = x[i]&0x7fff;
      var u0 = (j*this.mpl+(((j*this.mph+(x[i]>>15)*this.mpl)&this.um)<<15))&x.DM;
      // use am to combine the multiply-shift-add into one call
      j = i+this.m.t;
      x[j] += this.m.am(0,u0,x,i,0,this.m.t);
      // propagate carry
      while(x[j] >= x.DV) { x[j] -= x.DV; x[++j]++; }
    }
    x.clamp();
    x.drShiftTo(this.m.t,x);
    if(x.compareTo(this.m) >= 0) x.subTo(this.m,x);
  }

  // r = "x^2/R mod m"; x != r
  function montSqrTo(x,r) { x.squareTo(r); this.reduce(r); }

  // r = "xy/R mod m"; x,y != r
  function montMulTo(x,y,r) { x.multiplyTo(y,r); this.reduce(r); }

  Montgomery.prototype.convert = montConvert;
  Montgomery.prototype.revert = montRevert;
  Montgomery.prototype.reduce = montReduce;
  Montgomery.prototype.mulTo = montMulTo;
  Montgomery.prototype.sqrTo = montSqrTo;

  // (protected) true iff this is even
  function bnpIsEven() { return ((this.t>0)?(this[0]&1):this.s) == 0; }

  // (protected) this^e, e < 2^32, doing sqr and mul with "r" (HAC 14.79)
  function bnpExp(e,z) {
    if(e > 0xffffffff || e < 1) return BigInteger.ONE;
    var r = nbi(), r2 = nbi(), g = z.convert(this), i = nbits(e)-1;
    g.copyTo(r);
    while(--i >= 0) {
      z.sqrTo(r,r2);
      if((e&(1<<i)) > 0) z.mulTo(r2,g,r);
      else { var t = r; r = r2; r2 = t; }
    }
    return z.revert(r);
  }

  // (public) this^e % m, 0 <= e < 2^32
  function bnModPowInt(e,m) {
    var z;
    if(e < 256 || m.isEven()) z = new Classic(m); else z = new Montgomery(m);
    return this.exp(e,z);
  }

  // protected
  BigInteger.prototype.copyTo = bnpCopyTo;
  BigInteger.prototype.fromInt = bnpFromInt;
  BigInteger.prototype.fromString = bnpFromString;
  BigInteger.prototype.clamp = bnpClamp;
  BigInteger.prototype.dlShiftTo = bnpDLShiftTo;
  BigInteger.prototype.drShiftTo = bnpDRShiftTo;
  BigInteger.prototype.lShiftTo = bnpLShiftTo;
  BigInteger.prototype.rShiftTo = bnpRShiftTo;
  BigInteger.prototype.subTo = bnpSubTo;
  BigInteger.prototype.multiplyTo = bnpMultiplyTo;
  BigInteger.prototype.squareTo = bnpSquareTo;
  BigInteger.prototype.divRemTo = bnpDivRemTo;
  BigInteger.prototype.invDigit = bnpInvDigit;
  BigInteger.prototype.isEven = bnpIsEven;
  BigInteger.prototype.exp = bnpExp;

  // public
  BigInteger.prototype.toString = bnToString;
  BigInteger.prototype.negate = bnNegate;
  BigInteger.prototype.abs = bnAbs;
  BigInteger.prototype.compareTo = bnCompareTo;
  BigInteger.prototype.bitLength = bnBitLength;
  BigInteger.prototype.mod = bnMod;
  BigInteger.prototype.modPowInt = bnModPowInt;

  // "constants"
  BigInteger.ZERO = nbv(0);
  BigInteger.ONE = nbv(1);

  // jsbn2 stuff

  // (protected) convert from radix string
  function bnpFromRadix(s,b) {
    this.fromInt(0);
    if(b == null) b = 10;
    var cs = this.chunkSize(b);
    var d = Math.pow(b,cs), mi = false, j = 0, w = 0;
    for(var i = 0; i < s.length; ++i) {
      var x = intAt(s,i);
      if(x < 0) {
        if(s.charAt(i) == "-" && this.signum() == 0) mi = true;
        continue;
      }
      w = b*w+x;
      if(++j >= cs) {
        this.dMultiply(d);
        this.dAddOffset(w,0);
        j = 0;
        w = 0;
      }
    }
    if(j > 0) {
      this.dMultiply(Math.pow(b,j));
      this.dAddOffset(w,0);
    }
    if(mi) BigInteger.ZERO.subTo(this,this);
  }

  // (protected) return x s.t. r^x < DV
  function bnpChunkSize(r) { return Math.floor(Math.LN2*this.DB/Math.log(r)); }

  // (public) 0 if this == 0, 1 if this > 0
  function bnSigNum() {
    if(this.s < 0) return -1;
    else if(this.t <= 0 || (this.t == 1 && this[0] <= 0)) return 0;
    else return 1;
  }

  // (protected) this *= n, this >= 0, 1 < n < DV
  function bnpDMultiply(n) {
    this[this.t] = this.am(0,n-1,this,0,0,this.t);
    ++this.t;
    this.clamp();
  }

  // (protected) this += n << w words, this >= 0
  function bnpDAddOffset(n,w) {
    if(n == 0) return;
    while(this.t <= w) this[this.t++] = 0;
    this[w] += n;
    while(this[w] >= this.DV) {
      this[w] -= this.DV;
      if(++w >= this.t) this[this.t++] = 0;
      ++this[w];
    }
  }

  // (protected) convert to radix string
  function bnpToRadix(b) {
    if(b == null) b = 10;
    if(this.signum() == 0 || b < 2 || b > 36) return "0";
    var cs = this.chunkSize(b);
    var a = Math.pow(b,cs);
    var d = nbv(a), y = nbi(), z = nbi(), r = "";
    this.divRemTo(d,y,z);
    while(y.signum() > 0) {
      r = (a+z.intValue()).toString(b).substr(1) + r;
      y.divRemTo(d,y,z);
    }
    return z.intValue().toString(b) + r;
  }

  // (public) return value as integer
  function bnIntValue() {
    if(this.s < 0) {
      if(this.t == 1) return this[0]-this.DV;
      else if(this.t == 0) return -1;
    }
    else if(this.t == 1) return this[0];
    else if(this.t == 0) return 0;
    // assumes 16 < DB < 32
    return ((this[1]&((1<<(32-this.DB))-1))<<this.DB)|this[0];
  }

  // (protected) r = this + a
  function bnpAddTo(a,r) {
    var i = 0, c = 0, m = Math.min(a.t,this.t);
    while(i < m) {
      c += this[i]+a[i];
      r[i++] = c&this.DM;
      c >>= this.DB;
    }
    if(a.t < this.t) {
      c += a.s;
      while(i < this.t) {
        c += this[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c += this.s;
    }
    else {
      c += this.s;
      while(i < a.t) {
        c += a[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c += a.s;
    }
    r.s = (c<0)?-1:0;
    if(c > 0) r[i++] = c;
    else if(c < -1) r[i++] = this.DV+c;
    r.t = i;
    r.clamp();
  }

  BigInteger.prototype.fromRadix = bnpFromRadix;
  BigInteger.prototype.chunkSize = bnpChunkSize;
  BigInteger.prototype.signum = bnSigNum;
  BigInteger.prototype.dMultiply = bnpDMultiply;
  BigInteger.prototype.dAddOffset = bnpDAddOffset;
  BigInteger.prototype.toRadix = bnpToRadix;
  BigInteger.prototype.intValue = bnIntValue;
  BigInteger.prototype.addTo = bnpAddTo;

  //======= end jsbn =======

  // Emscripten wrapper
  var Wrapper = {
    abs: function(l, h) {
      var x = new goog.math.Long(l, h);
      var ret;
      if (x.isNegative()) {
        ret = x.negate();
      } else {
        ret = x;
      }
      HEAP32[tempDoublePtr>>2] = ret.low_;
      HEAP32[tempDoublePtr+4>>2] = ret.high_;
    },
    ensureTemps: function() {
      if (Wrapper.ensuredTemps) return;
      Wrapper.ensuredTemps = true;
      Wrapper.two32 = new BigInteger();
      Wrapper.two32.fromString('4294967296', 10);
      Wrapper.two64 = new BigInteger();
      Wrapper.two64.fromString('18446744073709551616', 10);
      Wrapper.temp1 = new BigInteger();
      Wrapper.temp2 = new BigInteger();
    },
    lh2bignum: function(l, h) {
      var a = new BigInteger();
      a.fromString(h.toString(), 10);
      var b = new BigInteger();
      a.multiplyTo(Wrapper.two32, b);
      var c = new BigInteger();
      c.fromString(l.toString(), 10);
      var d = new BigInteger();
      c.addTo(b, d);
      return d;
    },
    stringify: function(l, h, unsigned) {
      var ret = new goog.math.Long(l, h).toString();
      if (unsigned && ret[0] == '-') {
        // unsign slowly using jsbn bignums
        Wrapper.ensureTemps();
        var bignum = new BigInteger();
        bignum.fromString(ret, 10);
        ret = new BigInteger();
        Wrapper.two64.addTo(bignum, ret);
        ret = ret.toString(10);
      }
      return ret;
    },
    fromString: function(str, base, min, max, unsigned) {
      Wrapper.ensureTemps();
      var bignum = new BigInteger();
      bignum.fromString(str, base);
      var bigmin = new BigInteger();
      bigmin.fromString(min, 10);
      var bigmax = new BigInteger();
      bigmax.fromString(max, 10);
      if (unsigned && bignum.compareTo(BigInteger.ZERO) < 0) {
        var temp = new BigInteger();
        bignum.addTo(Wrapper.two64, temp);
        bignum = temp;
      }
      var error = false;
      if (bignum.compareTo(bigmin) < 0) {
        bignum = bigmin;
        error = true;
      } else if (bignum.compareTo(bigmax) > 0) {
        bignum = bigmax;
        error = true;
      }
      var ret = goog.math.Long.fromString(bignum.toString()); // min-max checks should have clamped this to a range goog.math.Long can handle well
      HEAP32[tempDoublePtr>>2] = ret.low_;
      HEAP32[tempDoublePtr+4>>2] = ret.high_;
      if (error) throw 'range error';
    }
  };
  return Wrapper;
})();

//======= end closure i64 code =======



// === Auto-generated postamble setup entry stuff ===

if (memoryInitializer) {
  if (ENVIRONMENT_IS_NODE || ENVIRONMENT_IS_SHELL) {
    var data = Module['readBinary'](memoryInitializer);
    HEAPU8.set(data, STATIC_BASE);
  } else {
    addRunDependency('memory initializer');
    Browser.asyncLoad(memoryInitializer, function(data) {
      HEAPU8.set(data, STATIC_BASE);
      removeRunDependency('memory initializer');
    }, function(data) {
      throw 'could not load memory initializer ' + memoryInitializer;
    });
  }
}

function ExitStatus(status) {
  this.name = "ExitStatus";
  this.message = "Program terminated with exit(" + status + ")";
  this.status = status;
};
ExitStatus.prototype = new Error();
ExitStatus.prototype.constructor = ExitStatus;

var initialStackTop;
var preloadStartTime = null;
var calledMain = false;

dependenciesFulfilled = function runCaller() {
  // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)
  if (!Module['calledRun'] && shouldRunNow) run();
  if (!Module['calledRun']) dependenciesFulfilled = runCaller; // try this again later, after new deps are fulfilled
}

Module['callMain'] = Module.callMain = function callMain(args) {
  assert(runDependencies == 0, 'cannot call main when async dependencies remain! (listen on __ATMAIN__)');
  assert(__ATPRERUN__.length == 0, 'cannot call main when preRun functions remain to be called');

  args = args || [];

  ensureInitRuntime();

  var argc = args.length+1;
  function pad() {
    for (var i = 0; i < 4-1; i++) {
      argv.push(0);
    }
  }
  var argv = [allocate(intArrayFromString("/bin/this.program"), 'i8', ALLOC_NORMAL) ];
  pad();
  for (var i = 0; i < argc-1; i = i + 1) {
    argv.push(allocate(intArrayFromString(args[i]), 'i8', ALLOC_NORMAL));
    pad();
  }
  argv.push(0);
  argv = allocate(argv, 'i32', ALLOC_NORMAL);

  initialStackTop = STACKTOP;

  try {

    var ret = Module['_main'](argc, argv, 0);


    // if we're not running an evented main loop, it's time to exit
    if (!Module['noExitRuntime']) {
      exit(ret);
    }
  }
  catch(e) {
    if (e instanceof ExitStatus) {
      // exit() throws this once it's done to make sure execution
      // has been stopped completely
      return;
    } else if (e == 'SimulateInfiniteLoop') {
      // running an evented main loop, don't immediately exit
      Module['noExitRuntime'] = true;
      return;
    } else {
      if (e && typeof e === 'object' && e.stack) Module.printErr('exception thrown: ' + [e, e.stack]);
      throw e;
    }
  } finally {
    calledMain = true;
  }
}




function run(args) {
  args = args || Module['arguments'];

  if (preloadStartTime === null) preloadStartTime = Date.now();

  if (runDependencies > 0) {
    Module.printErr('run() called, but dependencies remain, so not running');
    return;
  }

  preRun();

  if (runDependencies > 0) return; // a preRun added a dependency, run will be called later
  if (Module['calledRun']) return; // run may have just been called through dependencies being fulfilled just in this very frame

  function doRun() {
    if (Module['calledRun']) return; // run may have just been called while the async setStatus time below was happening
    Module['calledRun'] = true;

    ensureInitRuntime();

    preMain();

    if (ENVIRONMENT_IS_WEB && preloadStartTime !== null) {
      Module.printErr('pre-main prep time: ' + (Date.now() - preloadStartTime) + ' ms');
    }

    if (Module['_main'] && shouldRunNow) {
      Module['callMain'](args);
    }

    postRun();
  }

  if (Module['setStatus']) {
    Module['setStatus']('Running...');
    setTimeout(function() {
      setTimeout(function() {
        Module['setStatus']('');
      }, 1);
      if (!ABORT) doRun();
    }, 1);
  } else {
    doRun();
  }
}
Module['run'] = Module.run = run;

function exit(status) {
  ABORT = true;
  EXITSTATUS = status;
  STACKTOP = initialStackTop;

  // exit the runtime
  exitRuntime();

  // TODO We should handle this differently based on environment.
  // In the browser, the best we can do is throw an exception
  // to halt execution, but in node we could process.exit and
  // I'd imagine SM shell would have something equivalent.
  // This would let us set a proper exit status (which
  // would be great for checking test exit statuses).
  // https://github.com/kripken/emscripten/issues/1371

  // throw an exception to halt the current execution
  throw new ExitStatus(status);
}
Module['exit'] = Module.exit = exit;

function abort(text) {
  if (text) {
    Module.print(text);
    Module.printErr(text);
  }

  ABORT = true;
  EXITSTATUS = 1;

  var extra = '';

  throw 'abort() at ' + stackTrace() + extra;
}
Module['abort'] = Module.abort = abort;

// {{PRE_RUN_ADDITIONS}}

if (Module['preInit']) {
  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
  while (Module['preInit'].length > 0) {
    Module['preInit'].pop()();
  }
}

// shouldRunNow refers to calling main(), not run().
var shouldRunNow = true;
if (Module['noInitialRun']) {
  shouldRunNow = false;
}

Module["noExitRuntime"] = true;

run();

// {{POST_RUN_ADDITIONS}}






// {{MODULE_ADDITIONS}}



