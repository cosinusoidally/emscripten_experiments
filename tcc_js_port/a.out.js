// Note: Some Emscripten settings will significantly limit the speed of the generated code.
// Note: Some Emscripten settings may limit the speed of the generated code.
// The Module object: Our interface to the outside world. We import
// and export values on it, and do the work to get that through
// closure compiler if necessary. There are various ways Module can be used:
// 1. Not defined. We create it here
// 2. A function parameter, function(Module) { ..generated code.. }
// 3. pre-run appended it, var Module = {}; ..generated code..
// 4. External script tag defines var Module.
// We need to do an eval in order to handle the closure compiler
// case, where this code here is minified but Module was defined
// elsewhere (e.g. case 4 above). We also need to check if Module
// already exists (e.g. case 3 above).
// Note that if you want to run closure, and also to use Module
// after the generated code, you will need to define   var Module = {};
// before the code. Then that object will be used in the code, and you
// can continue to use Module afterwards as well.
var Module;
if (!Module) Module = (typeof Module !== 'undefined' ? Module : null) || {};

// Sometimes an existing Module object exists with properties
// meant to overwrite the default module functionality. Here
// we collect those properties and reapply _after_ we configure
// the current environment's defaults to avoid having to be so
// defensive during initialization.
var moduleOverrides = {};
for (var key in Module) {
  if (Module.hasOwnProperty(key)) {
    moduleOverrides[key] = Module[key];
  }
}

// The environment setup code below is customized to use Module.
// *** Environment setup code ***
var ENVIRONMENT_IS_NODE = typeof process === 'object' && typeof require === 'function';
var ENVIRONMENT_IS_WEB = typeof window === 'object';
var ENVIRONMENT_IS_WORKER = typeof importScripts === 'function';
var ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;

if (ENVIRONMENT_IS_NODE) {
  // Expose functionality in the same simple way that the shells work
  // Note that we pollute the global namespace here, otherwise we break in node
  if (!Module['print']) Module['print'] = function print(x) {
    process['stdout'].write(x + '\n');
  };
  if (!Module['printErr']) Module['printErr'] = function printErr(x) {
    process['stderr'].write(x + '\n');
  };

  var nodeFS = require('fs');
  var nodePath = require('path');

  Module['read'] = function read(filename, binary) {
    filename = nodePath['normalize'](filename);
    var ret = nodeFS['readFileSync'](filename);
    // The path is absolute if the normalized version is the same as the resolved.
    if (!ret && filename != nodePath['resolve'](filename)) {
      filename = path.join(__dirname, '..', 'src', filename);
      ret = nodeFS['readFileSync'](filename);
    }
    if (ret && !binary) ret = ret.toString();
    return ret;
  };

  Module['readBinary'] = function readBinary(filename) { return Module['read'](filename, true) };

  Module['load'] = function load(f) {
    globalEval(read(f));
  };

  if (process['argv'].length > 1) {
    Module['thisProgram'] = process['argv'][1].replace(/\\/g, '/');
  } else {
    Module['thisProgram'] = 'unknown-program';
  }

  Module['arguments'] = process['argv'].slice(2);

  if (typeof module !== 'undefined') {
    module['exports'] = Module;
  }

  process['on']('uncaughtException', function(ex) {
    // suppress ExitStatus exceptions from showing an error
    if (!(ex instanceof ExitStatus)) {
      throw ex;
    }
  });
}
else if (ENVIRONMENT_IS_SHELL) {
  if (!Module['print']) Module['print'] = print;
  if (typeof printErr != 'undefined') Module['printErr'] = printErr; // not present in v8 or older sm

  if (typeof read != 'undefined') {
    Module['read'] = read;
  } else {
    Module['read'] = function read() { throw 'no read() available (jsc?)' };
  }

  Module['readBinary'] = function readBinary(f) {
    if (typeof readbuffer === 'function') {
      return new Uint8Array(readbuffer(f));
    }
    var data = read(f, 'binary');
    assert(typeof data === 'object');
    return data;
  };

  if (typeof scriptArgs != 'undefined') {
    Module['arguments'] = scriptArgs;
  } else if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  this['Module'] = Module;

}
else if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
  Module['read'] = function read(url) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, false);
    xhr.send(null);
    return xhr.responseText;
  };

  if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  if (typeof console !== 'undefined') {
    if (!Module['print']) Module['print'] = function print(x) {
      console.log(x);
    };
    if (!Module['printErr']) Module['printErr'] = function printErr(x) {
      console.log(x);
    };
  } else {
    // Probably a worker, and without console.log. We can do very little here...
    var TRY_USE_DUMP = false;
    if (!Module['print']) Module['print'] = (TRY_USE_DUMP && (typeof(dump) !== "undefined") ? (function(x) {
      dump(x);
    }) : (function(x) {
      // self.postMessage(x); // enable this if you want stdout to be sent as messages
    }));
  }

  if (ENVIRONMENT_IS_WEB) {
    window['Module'] = Module;
  } else {
    Module['load'] = importScripts;
  }
}
else {
  // Unreachable because SHELL is dependant on the others
  throw 'Unknown runtime environment. Where are we?';
}

function globalEval(x) {
  eval.call(null, x);
}
if (!Module['load'] && Module['read']) {
  Module['load'] = function load(f) {
    globalEval(Module['read'](f));
  };
}
if (!Module['print']) {
  Module['print'] = function(){};
}
if (!Module['printErr']) {
  Module['printErr'] = Module['print'];
}
if (!Module['arguments']) {
  Module['arguments'] = [];
}
if (!Module['thisProgram']) {
  Module['thisProgram'] = './this.program';
}

// *** Environment setup code ***

// Closure helpers
Module.print = Module['print'];
Module.printErr = Module['printErr'];

// Callbacks
Module['preRun'] = [];
Module['postRun'] = [];

// Merge back in the overrides
for (var key in moduleOverrides) {
  if (moduleOverrides.hasOwnProperty(key)) {
    Module[key] = moduleOverrides[key];
  }
}



// === Preamble library stuff ===

// Documentation for the public APIs defined in this file must be updated in: 
//    site/source/docs/api_reference/preamble.js.rst
// A prebuilt local version of the documentation is available at: 
//    site/build/text/docs/api_reference/preamble.js.txt
// You can also build docs locally as HTML or other formats in site/
// An online HTML version (which may be of a different version of Emscripten)
//    is up at http://kripken.github.io/emscripten-site/docs/api_reference/preamble.js.html

//========================================
// Runtime code shared with compiler
//========================================

var Runtime = {
  setTempRet0: function(value) {
    tempRet0 = value;
  },
  getTempRet0: function() {
    return tempRet0;
  },
  stackSave: function() {
    return STACKTOP;
  },
  stackRestore: function(stackTop) {
    STACKTOP = stackTop;
  },
  or64: function(x, y) {
    var l = (x | 0) | (y | 0);
    var h = (Math.round(x / 4294967296) | Math.round(y / 4294967296)) * 4294967296;
    return l + h;
  },
  and64: function(x, y) {
    var l = (x | 0) & (y | 0);
    var h = (Math.round(x / 4294967296) & Math.round(y / 4294967296)) * 4294967296;
    return l + h;
  },
  xor64: function(x, y) {
    var l = (x | 0) ^ (y | 0);
    var h = (Math.round(x / 4294967296) ^ Math.round(y / 4294967296)) * 4294967296;
    return l + h;
  },
  getNativeTypeSize: function(type) {
    switch (type) {
      case 'i1': case 'i8': return 1;
      case 'i16': return 2;
      case 'i32': return 4;
      case 'i64': return 8;
      case 'float': return 4;
      case 'double': return 8;
      default: {
        if (type[type.length-1] === '*') {
          return Runtime.QUANTUM_SIZE; // A pointer
        } else if (type[0] === 'i') {
          var bits = parseInt(type.substr(1));
          assert(bits % 8 === 0);
          return bits/8;
        } else {
          return 0;
        }
      }
    }
  },
  getNativeFieldSize: function(type) {
    return Math.max(Runtime.getNativeTypeSize(type), Runtime.QUANTUM_SIZE);
  },
  dedup: function dedup(items, ident) {
  var seen = {};
  if (ident) {
    return items.filter(function(item) {
      if (seen[item[ident]]) return false;
      seen[item[ident]] = true;
      return true;
    });
  } else {
    return items.filter(function(item) {
      if (seen[item]) return false;
      seen[item] = true;
      return true;
    });
  }
},
  STACK_ALIGN: 8,
  getAlignSize: function(type, size, vararg) {
    // we align i64s and doubles on 64-bit boundaries, unlike x86
    if (vararg) return 8;
    if (!vararg && (type == 'i64' || type == 'double')) return 8;
    if (!type) return Math.min(size, 8); // align structures internally to 64 bits
    return Math.min(size || (type ? Runtime.getNativeFieldSize(type) : 0), Runtime.QUANTUM_SIZE);
  },
  calculateStructAlignment: function calculateStructAlignment(type) {
    type.flatSize = 0;
    type.alignSize = 0;
    var diffs = [];
    var prev = -1;
    var index = 0;
    type.flatIndexes = type.fields.map(function(field) {
      index++;
      var size, alignSize;
      if (Compiletime.isNumberType(field) || Compiletime.isPointerType(field)) {
        size = Runtime.getNativeTypeSize(field); // pack char; char; in structs, also char[X]s.
        alignSize = Runtime.getAlignSize(field, size);
      } else if (Compiletime.isStructType(field)) {
        if (field[1] === '0') {
          // this is [0 x something]. When inside another structure like here, it must be at the end,
          // and it adds no size
          // XXX this happens in java-nbody for example... assert(index === type.fields.length, 'zero-length in the middle!');
          size = 0;
          if (Types.types[field]) {
            alignSize = Runtime.getAlignSize(null, Types.types[field].alignSize);
          } else {
            alignSize = type.alignSize || QUANTUM_SIZE;
          }
        } else {
          size = Types.types[field].flatSize;
          alignSize = Runtime.getAlignSize(null, Types.types[field].alignSize);
        }
      } else if (field[0] == 'b') {
        // bN, large number field, like a [N x i8]
        size = field.substr(1)|0;
        alignSize = 1;
      } else if (field[0] === '<') {
        // vector type
        size = alignSize = Types.types[field].flatSize; // fully aligned
      } else if (field[0] === 'i') {
        // illegal integer field, that could not be legalized because it is an internal structure field
        // it is ok to have such fields, if we just use them as markers of field size and nothing more complex
        size = alignSize = parseInt(field.substr(1))/8;
        assert(size % 1 === 0, 'cannot handle non-byte-size field ' + field);
      } else {
        assert(false, 'invalid type for calculateStructAlignment');
      }
      if (type.packed) alignSize = 1;
      type.alignSize = Math.max(type.alignSize, alignSize);
      var curr = Runtime.alignMemory(type.flatSize, alignSize); // if necessary, place this on aligned memory
      type.flatSize = curr + size;
      if (prev >= 0) {
        diffs.push(curr-prev);
      }
      prev = curr;
      return curr;
    });
    if (type.name_ && type.name_[0] === '[') {
      // arrays have 2 elements, so we get the proper difference. then we scale here. that way we avoid
      // allocating a potentially huge array for [999999 x i8] etc.
      type.flatSize = parseInt(type.name_.substr(1))*type.flatSize/2;
    }
    type.flatSize = Runtime.alignMemory(type.flatSize, type.alignSize);
    if (diffs.length == 0) {
      type.flatFactor = type.flatSize;
    } else if (Runtime.dedup(diffs).length == 1) {
      type.flatFactor = diffs[0];
    }
    type.needsFlattening = (type.flatFactor != 1);
    return type.flatIndexes;
  },
  generateStructInfo: function(struct, typeName, offset) {
    var type, alignment;
    if (typeName) {
      offset = offset || 0;
      type = (typeof Types === 'undefined' ? Runtime.typeInfo : Types.types)[typeName];
      if (!type) return null;
      if (type.fields.length != struct.length) {
        printErr('Number of named fields must match the type for ' + typeName + ': possibly duplicate struct names. Cannot return structInfo');
        return null;
      }
      alignment = type.flatIndexes;
    } else {
      var type = { fields: struct.map(function(item) { return item[0] }) };
      alignment = Runtime.calculateStructAlignment(type);
    }
    var ret = {
      __size__: type.flatSize
    };
    if (typeName) {
      struct.forEach(function(item, i) {
        if (typeof item === 'string') {
          ret[item] = alignment[i] + offset;
        } else {
          // embedded struct
          var key;
          for (var k in item) key = k;
          ret[key] = Runtime.generateStructInfo(item[key], type.fields[i], alignment[i]);
        }
      });
    } else {
      struct.forEach(function(item, i) {
        ret[item[1]] = alignment[i];
      });
    }
    return ret;
  },
  dynCall: function(sig, ptr, args) {
    if (args && args.length) {
      assert(args.length == sig.length-1);
      return FUNCTION_TABLE[ptr].apply(null, args);
    } else {
      assert(sig.length == 1);
      return FUNCTION_TABLE[ptr]();
    }
  },
  addFunction: function(func) {
    var table = FUNCTION_TABLE;
    var ret = table.length;
    assert(ret % 2 === 0);
    table.push(func);
    for (var i = 0; i < 2-1; i++) table.push(0);
    return ret;
  },
  removeFunction: function(index) {
    var table = FUNCTION_TABLE;
    table[index] = null;
  },
  getAsmConst: function(code, numArgs) {
    // code is a constant string on the heap, so we can cache these
    if (!Runtime.asmConstCache) Runtime.asmConstCache = {};
    var func = Runtime.asmConstCache[code];
    if (func) return func;
    var args = [];
    for (var i = 0; i < numArgs; i++) {
      args.push(String.fromCharCode(36) + i); // $0, $1 etc
    }
    var source = Pointer_stringify(code);
    if (source[0] === '"') {
      // tolerate EM_ASM("..code..") even though EM_ASM(..code..) is correct
      if (source.indexOf('"', 1) === source.length-1) {
        source = source.substr(1, source.length-2);
      } else {
        // something invalid happened, e.g. EM_ASM("..code($0)..", input)
        abort('invalid EM_ASM input |' + source + '|. Please use EM_ASM(..code..) (no quotes) or EM_ASM({ ..code($0).. }, input) (to input values)');
      }
    }
    try {
      // Module is the only 'upvar', which we provide directly. We also provide FS for legacy support.
      var evalled = eval('(function(Module, FS) { return function(' + args.join(',') + '){ ' + source + ' } })')(Module, typeof FS !== 'undefined' ? FS : null);
    } catch(e) {
      Module.printErr('error in executing inline EM_ASM code: ' + e + ' on: \n\n' + source + '\n\nwith args |' + args + '| (make sure to use the right one out of EM_ASM, EM_ASM_ARGS, etc.)');
      throw e;
    }
    return Runtime.asmConstCache[code] = evalled;
  },
  warnOnce: function(text) {
    if (!Runtime.warnOnce.shown) Runtime.warnOnce.shown = {};
    if (!Runtime.warnOnce.shown[text]) {
      Runtime.warnOnce.shown[text] = 1;
      Module.printErr(text);
    }
  },
  funcWrappers: {},
  getFuncWrapper: function(func, sig) {
    assert(sig);
    if (!Runtime.funcWrappers[sig]) {
      Runtime.funcWrappers[sig] = {};
    }
    var sigCache = Runtime.funcWrappers[sig];
    if (!sigCache[func]) {
      sigCache[func] = function dynCall_wrapper() {
        return Runtime.dynCall(sig, func, arguments);
      };
    }
    return sigCache[func];
  },
  UTF8Processor: function() {
    var buffer = [];
    var needed = 0;
    this.processCChar = function (code) {
      code = code & 0xFF;

      if (buffer.length == 0) {
        if ((code & 0x80) == 0x00) {        // 0xxxxxxx
          return String.fromCharCode(code);
        }
        buffer.push(code);
        if ((code & 0xE0) == 0xC0) {        // 110xxxxx
          needed = 1;
        } else if ((code & 0xF0) == 0xE0) { // 1110xxxx
          needed = 2;
        } else {                            // 11110xxx
          needed = 3;
        }
        return '';
      }

      if (needed) {
        buffer.push(code);
        needed--;
        if (needed > 0) return '';
      }

      var c1 = buffer[0];
      var c2 = buffer[1];
      var c3 = buffer[2];
      var c4 = buffer[3];
      var ret;
      if (buffer.length == 2) {
        ret = String.fromCharCode(((c1 & 0x1F) << 6)  | (c2 & 0x3F));
      } else if (buffer.length == 3) {
        ret = String.fromCharCode(((c1 & 0x0F) << 12) | ((c2 & 0x3F) << 6)  | (c3 & 0x3F));
      } else {
        // http://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae
        var codePoint = ((c1 & 0x07) << 18) | ((c2 & 0x3F) << 12) |
                        ((c3 & 0x3F) << 6)  | (c4 & 0x3F);
        ret = String.fromCharCode(
          (((codePoint - 0x10000) / 0x400)|0) + 0xD800,
          (codePoint - 0x10000) % 0x400 + 0xDC00);
      }
      buffer.length = 0;
      return ret;
    }
    this.processJSString = function processJSString(string) {
      /* TODO: use TextEncoder when present,
        var encoder = new TextEncoder();
        encoder['encoding'] = "utf-8";
        var utf8Array = encoder['encode'](aMsg.data);
      */
      string = unescape(encodeURIComponent(string));
      var ret = [];
      for (var i = 0; i < string.length; i++) {
        ret.push(string.charCodeAt(i));
      }
      return ret;
    }
  },
  getCompilerSetting: function(name) {
    throw 'You must build with -s RETAIN_COMPILER_SETTINGS=1 for Runtime.getCompilerSetting or emscripten_get_compiler_setting to work';
  },
  stackAlloc: function(size) { var ret = STACKTOP;STACKTOP = (STACKTOP + size)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0); return ret; },
  staticAlloc: function(size) { var ret = STATICTOP;STATICTOP = (STATICTOP + (assert(!staticSealed),size))|0;STATICTOP = (((STATICTOP)+7)&-8); return ret; },
  dynamicAlloc: function(size) { var ret = DYNAMICTOP;DYNAMICTOP = (DYNAMICTOP + (assert(DYNAMICTOP > 0),size))|0;DYNAMICTOP = (((DYNAMICTOP)+7)&-8); if (DYNAMICTOP >= TOTAL_MEMORY) enlargeMemory();; return ret; },
  alignMemory: function(size,quantum) { var ret = size = Math.ceil((size)/(quantum ? quantum : 8))*(quantum ? quantum : 8); return ret; },
  makeBigInt: function(low,high,unsigned) { var ret = (unsigned ? ((low>>>0)+((high>>>0)*4294967296)) : ((low>>>0)+((high|0)*4294967296))); return ret; },
  GLOBAL_BASE: 8,
  QUANTUM_SIZE: 4,
  __dummy__: 0
}


Module['Runtime'] = Runtime;









//========================================
// Runtime essentials
//========================================

var __THREW__ = 0; // Used in checking for thrown exceptions.
var setjmpId = 1; // Used in setjmp/longjmp
var setjmpLabels = {};

var ABORT = false; // whether we are quitting the application. no code should run after this. set in exit() and abort()
var EXITSTATUS = 0;

var undef = 0;
// tempInt is used for 32-bit signed values or smaller. tempBigInt is used
// for 32-bit unsigned values or more than 32 bits. TODO: audit all uses of tempInt
var tempValue, tempInt, tempBigInt, tempInt2, tempBigInt2, tempPair, tempBigIntI, tempBigIntR, tempBigIntS, tempBigIntP, tempBigIntD, tempDouble, tempFloat;
var tempI64, tempI64b;
var tempRet0, tempRet1, tempRet2, tempRet3, tempRet4, tempRet5, tempRet6, tempRet7, tempRet8, tempRet9;

function assert(condition, text) {
  if (!condition) {
    abort('Assertion failed: ' + text);
  }
}

var globalScope = this;

// Returns the C function with a specified identifier (for C++, you need to do manual name mangling)
function getCFunc(ident) {
  var func = Module['_' + ident]; // closure exported function
  if (!func) {
    try {
      func = eval('_' + ident); // explicit lookup
    } catch(e) {}
  }
  assert(func, 'Cannot call unknown function ' + ident + ' (perhaps LLVM optimizations or closure removed it?)');
  return func;
}

var cwrap, ccall;
(function(){
  var stack = 0;
  var JSfuncs = {
    'stackSave' : function() {
      stack = Runtime.stackSave();
    },
    'stackRestore' : function() {
      Runtime.stackRestore(stack);
    },
    // type conversion from js to c
    'arrayToC' : function(arr) {
      var ret = Runtime.stackAlloc(arr.length);
      writeArrayToMemory(arr, ret);
      return ret;
    },
    'stringToC' : function(str) {
      var ret = 0;
      if (str !== null && str !== undefined && str !== 0) { // null string
        // at most 4 bytes per UTF-8 code point, +1 for the trailing '\0'
        ret = Runtime.stackAlloc((str.length << 2) + 1);
        writeStringToMemory(str, ret);
      }
      return ret;
    }
  };
  // For fast lookup of conversion functions
  var toC = {'string' : JSfuncs['stringToC'], 'array' : JSfuncs['arrayToC']};

  // C calling interface. 
  ccall = function ccallFunc(ident, returnType, argTypes, args) {
    var func = getCFunc(ident);
    var cArgs = [];
    assert(returnType !== 'array', 'Return type should not be "array".');
    if (args) {
      for (var i = 0; i < args.length; i++) {
        var converter = toC[argTypes[i]];
        if (converter) {
          if (stack === 0) stack = Runtime.stackSave();
          cArgs[i] = converter(args[i]);
        } else {
          cArgs[i] = args[i];
        }
      }
    }
    var ret = func.apply(null, cArgs);
    if (returnType === 'string') ret = Pointer_stringify(ret);
    if (stack !== 0) JSfuncs['stackRestore']();
    return ret;
  }

  var sourceRegex = /^function\s*\(([^)]*)\)\s*{\s*([^*]*?)[\s;]*(?:return\s*(.*?)[;\s]*)?}$/;
  function parseJSFunc(jsfunc) {
    // Match the body and the return value of a javascript function source
    var parsed = jsfunc.toString().match(sourceRegex).slice(1);
    return {arguments : parsed[0], body : parsed[1], returnValue: parsed[2]}
  }
  var JSsource = {};
  for (var fun in JSfuncs) {
    if (JSfuncs.hasOwnProperty(fun)) {
      // Elements of toCsource are arrays of three items:
      // the code, and the return value
      JSsource[fun] = parseJSFunc(JSfuncs[fun]);
    }
  }

  
  cwrap = function cwrap(ident, returnType, argTypes) {
    argTypes = argTypes || [];
    var cfunc = getCFunc(ident);
    // When the function takes numbers and returns a number, we can just return
    // the original function
    var numericArgs = argTypes.every(function(type){ return type === 'number'});
    var numericRet = (returnType !== 'string');
    if ( numericRet && numericArgs) {
      return cfunc;
    }
    // Creation of the arguments list (["$1","$2",...,"$nargs"])
    var argNames = argTypes.map(function(x,i){return '$'+i});
    var funcstr = "(function(" + argNames.join(',') + ") {";
    var nargs = argTypes.length;
    if (!numericArgs) {
      // Generate the code needed to convert the arguments from javascript
      // values to pointers
      funcstr += JSsource['stackSave'].body + ';';
      for (var i = 0; i < nargs; i++) {
        var arg = argNames[i], type = argTypes[i];
        if (type === 'number') continue;
        var convertCode = JSsource[type + 'ToC']; // [code, return]
        funcstr += 'var ' + convertCode.arguments + ' = ' + arg + ';';
        funcstr += convertCode.body + ';';
        funcstr += arg + '=' + convertCode.returnValue + ';';
      }
    }

    // When the code is compressed, the name of cfunc is not literally 'cfunc' anymore
    var cfuncname = parseJSFunc(function(){return cfunc}).returnValue;
    // Call the function
    funcstr += 'var ret = ' + cfuncname + '(' + argNames.join(',') + ');';
    if (!numericRet) { // Return type can only by 'string' or 'number'
      // Convert the result to a string
      var strgfy = parseJSFunc(function(){return Pointer_stringify}).returnValue;
      funcstr += 'ret = ' + strgfy + '(ret);';
    }
    if (!numericArgs) {
      // If we had a stack, restore it
      funcstr += JSsource['stackRestore'].body + ';';
    }
    funcstr += 'return ret})';
    return eval(funcstr);
  };
})();
Module["cwrap"] = cwrap;
Module["ccall"] = ccall;


function setValue(ptr, value, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': HEAP8[((ptr)>>0)]=value; break;
      case 'i8': HEAP8[((ptr)>>0)]=value; break;
      case 'i16': HEAP16[((ptr)>>1)]=value; break;
      case 'i32': HEAP32[((ptr)>>2)]=value; break;
      case 'i64': (tempI64 = [value>>>0,(tempDouble=value,Math_abs(tempDouble) >= 1 ? (tempDouble > 0 ? Math_min(Math_floor((tempDouble)/4294967296), 4294967295)>>>0 : (~~(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296)))>>>0) : 0)],HEAP32[((ptr)>>2)]=tempI64[0],HEAP32[(((ptr)+(4))>>2)]=tempI64[1]); break;
      case 'float': HEAPF32[((ptr)>>2)]=value; break;
      case 'double': HEAPF64[((ptr)>>3)]=value; break;
      default: abort('invalid type for setValue: ' + type);
    }
}
Module['setValue'] = setValue;


function getValue(ptr, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': return HEAP8[((ptr)>>0)];
      case 'i8': return HEAP8[((ptr)>>0)];
      case 'i16': return HEAP16[((ptr)>>1)];
      case 'i32': return HEAP32[((ptr)>>2)];
      case 'i64': return HEAP32[((ptr)>>2)];
      case 'float': return HEAPF32[((ptr)>>2)];
      case 'double': return HEAPF64[((ptr)>>3)];
      default: abort('invalid type for setValue: ' + type);
    }
  return null;
}
Module['getValue'] = getValue;

var ALLOC_NORMAL = 0; // Tries to use _malloc()
var ALLOC_STACK = 1; // Lives for the duration of the current function call
var ALLOC_STATIC = 2; // Cannot be freed
var ALLOC_DYNAMIC = 3; // Cannot be freed except through sbrk
var ALLOC_NONE = 4; // Do not allocate
Module['ALLOC_NORMAL'] = ALLOC_NORMAL;
Module['ALLOC_STACK'] = ALLOC_STACK;
Module['ALLOC_STATIC'] = ALLOC_STATIC;
Module['ALLOC_DYNAMIC'] = ALLOC_DYNAMIC;
Module['ALLOC_NONE'] = ALLOC_NONE;

// allocate(): This is for internal use. You can use it yourself as well, but the interface
//             is a little tricky (see docs right below). The reason is that it is optimized
//             for multiple syntaxes to save space in generated code. So you should
//             normally not use allocate(), and instead allocate memory using _malloc(),
//             initialize it with setValue(), and so forth.
// @slab: An array of data, or a number. If a number, then the size of the block to allocate,
//        in *bytes* (note that this is sometimes confusing: the next parameter does not
//        affect this!)
// @types: Either an array of types, one for each byte (or 0 if no type at that position),
//         or a single type which is used for the entire block. This only matters if there
//         is initial data - if @slab is a number, then this does not matter at all and is
//         ignored.
// @allocator: How to allocate memory, see ALLOC_*
function allocate(slab, types, allocator, ptr) {
  var zeroinit, size;
  if (typeof slab === 'number') {
    zeroinit = true;
    size = slab;
  } else {
    zeroinit = false;
    size = slab.length;
  }

  var singleType = typeof types === 'string' ? types : null;

  var ret;
  if (allocator == ALLOC_NONE) {
    ret = ptr;
  } else {
    ret = [_malloc, Runtime.stackAlloc, Runtime.staticAlloc, Runtime.dynamicAlloc][allocator === undefined ? ALLOC_STATIC : allocator](Math.max(size, singleType ? 1 : types.length));
  }

  if (zeroinit) {
    var ptr = ret, stop;
    assert((ret & 3) == 0);
    stop = ret + (size & ~3);
    for (; ptr < stop; ptr += 4) {
      HEAP32[((ptr)>>2)]=0;
    }
    stop = ret + size;
    while (ptr < stop) {
      HEAP8[((ptr++)>>0)]=0;
    }
    return ret;
  }

  if (singleType === 'i8') {
    if (slab.subarray || slab.slice) {
      HEAPU8.set(slab, ret);
    } else {
      HEAPU8.set(new Uint8Array(slab), ret);
    }
    return ret;
  }

  var i = 0, type, typeSize, previousType;
  while (i < size) {
    var curr = slab[i];

    if (typeof curr === 'function') {
      curr = Runtime.getFunctionIndex(curr);
    }

    type = singleType || types[i];
    if (type === 0) {
      i++;
      continue;
    }
    assert(type, 'Must know what type to store in allocate!');

    if (type == 'i64') type = 'i32'; // special case: we have one i32 here, and one i32 later

    setValue(ret+i, curr, type);

    // no need to look up size unless type changes, so cache it
    if (previousType !== type) {
      typeSize = Runtime.getNativeTypeSize(type);
      previousType = type;
    }
    i += typeSize;
  }

  return ret;
}
Module['allocate'] = allocate;

function Pointer_stringify(ptr, /* optional */ length) {
  if (length === 0 || !ptr) return '';
  // TODO: use TextDecoder
  // Find the length, and check for UTF while doing so
  var hasUtf = false;
  var t;
  var i = 0;
  while (1) {
    assert(ptr + i < TOTAL_MEMORY);
    t = HEAPU8[(((ptr)+(i))>>0)];
    if (t >= 128) hasUtf = true;
    else if (t == 0 && !length) break;
    i++;
    if (length && i == length) break;
  }
  if (!length) length = i;

  var ret = '';

  if (!hasUtf) {
    var MAX_CHUNK = 1024; // split up into chunks, because .apply on a huge string can overflow the stack
    var curr;
    while (length > 0) {
      curr = String.fromCharCode.apply(String, HEAPU8.subarray(ptr, ptr + Math.min(length, MAX_CHUNK)));
      ret = ret ? ret + curr : curr;
      ptr += MAX_CHUNK;
      length -= MAX_CHUNK;
    }
    return ret;
  }

  var utf8 = new Runtime.UTF8Processor();
  for (i = 0; i < length; i++) {
    assert(ptr + i < TOTAL_MEMORY);
    t = HEAPU8[(((ptr)+(i))>>0)];
    ret += utf8.processCChar(t);
  }
  return ret;
}
Module['Pointer_stringify'] = Pointer_stringify;

function UTF16ToString(ptr) {
  var i = 0;

  var str = '';
  while (1) {
    var codeUnit = HEAP16[(((ptr)+(i*2))>>1)];
    if (codeUnit == 0)
      return str;
    ++i;
    // fromCharCode constructs a character from a UTF-16 code unit, so we can pass the UTF16 string right through.
    str += String.fromCharCode(codeUnit);
  }
}
Module['UTF16ToString'] = UTF16ToString;


function stringToUTF16(str, outPtr) {
  for(var i = 0; i < str.length; ++i) {
    // charCodeAt returns a UTF-16 encoded code unit, so it can be directly written to the HEAP.
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    HEAP16[(((outPtr)+(i*2))>>1)]=codeUnit;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP16[(((outPtr)+(str.length*2))>>1)]=0;
}
Module['stringToUTF16'] = stringToUTF16;


function UTF32ToString(ptr) {
  var i = 0;

  var str = '';
  while (1) {
    var utf32 = HEAP32[(((ptr)+(i*4))>>2)];
    if (utf32 == 0)
      return str;
    ++i;
    // Gotcha: fromCharCode constructs a character from a UTF-16 encoded code (pair), not from a Unicode code point! So encode the code point to UTF-16 for constructing.
    if (utf32 >= 0x10000) {
      var ch = utf32 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    } else {
      str += String.fromCharCode(utf32);
    }
  }
}
Module['UTF32ToString'] = UTF32ToString;


function stringToUTF32(str, outPtr) {
  var iChar = 0;
  for(var iCodeUnit = 0; iCodeUnit < str.length; ++iCodeUnit) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    var codeUnit = str.charCodeAt(iCodeUnit); // possibly a lead surrogate
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) {
      var trailSurrogate = str.charCodeAt(++iCodeUnit);
      codeUnit = 0x10000 + ((codeUnit & 0x3FF) << 10) | (trailSurrogate & 0x3FF);
    }
    HEAP32[(((outPtr)+(iChar*4))>>2)]=codeUnit;
    ++iChar;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP32[(((outPtr)+(iChar*4))>>2)]=0;
}
Module['stringToUTF32'] = stringToUTF32;

function demangle(func) {
  var hasLibcxxabi = !!Module['___cxa_demangle'];
  if (hasLibcxxabi) {
    try {
      var buf = _malloc(func.length);
      writeStringToMemory(func.substr(1), buf);
      var status = _malloc(4);
      var ret = Module['___cxa_demangle'](buf, 0, 0, status);
      if (getValue(status, 'i32') === 0 && ret) {
        return Pointer_stringify(ret);
      }
      // otherwise, libcxxabi failed, we can try ours which may return a partial result
    } catch(e) {
      // failure when using libcxxabi, we can try ours which may return a partial result
    } finally {
      if (buf) _free(buf);
      if (status) _free(status);
      if (ret) _free(ret);
    }
  }
  var i = 3;
  // params, etc.
  var basicTypes = {
    'v': 'void',
    'b': 'bool',
    'c': 'char',
    's': 'short',
    'i': 'int',
    'l': 'long',
    'f': 'float',
    'd': 'double',
    'w': 'wchar_t',
    'a': 'signed char',
    'h': 'unsigned char',
    't': 'unsigned short',
    'j': 'unsigned int',
    'm': 'unsigned long',
    'x': 'long long',
    'y': 'unsigned long long',
    'z': '...'
  };
  var subs = [];
  var first = true;
  function dump(x) {
    //return;
    if (x) Module.print(x);
    Module.print(func);
    var pre = '';
    for (var a = 0; a < i; a++) pre += ' ';
    Module.print (pre + '^');
  }
  function parseNested() {
    i++;
    if (func[i] === 'K') i++; // ignore const
    var parts = [];
    while (func[i] !== 'E') {
      if (func[i] === 'S') { // substitution
        i++;
        var next = func.indexOf('_', i);
        var num = func.substring(i, next) || 0;
        parts.push(subs[num] || '?');
        i = next+1;
        continue;
      }
      if (func[i] === 'C') { // constructor
        parts.push(parts[parts.length-1]);
        i += 2;
        continue;
      }
      var size = parseInt(func.substr(i));
      var pre = size.toString().length;
      if (!size || !pre) { i--; break; } // counter i++ below us
      var curr = func.substr(i + pre, size);
      parts.push(curr);
      subs.push(curr);
      i += pre + size;
    }
    i++; // skip E
    return parts;
  }
  function parse(rawList, limit, allowVoid) { // main parser
    limit = limit || Infinity;
    var ret = '', list = [];
    function flushList() {
      return '(' + list.join(', ') + ')';
    }
    var name;
    if (func[i] === 'N') {
      // namespaced N-E
      name = parseNested().join('::');
      limit--;
      if (limit === 0) return rawList ? [name] : name;
    } else {
      // not namespaced
      if (func[i] === 'K' || (first && func[i] === 'L')) i++; // ignore const and first 'L'
      var size = parseInt(func.substr(i));
      if (size) {
        var pre = size.toString().length;
        name = func.substr(i + pre, size);
        i += pre + size;
      }
    }
    first = false;
    if (func[i] === 'I') {
      i++;
      var iList = parse(true);
      var iRet = parse(true, 1, true);
      ret += iRet[0] + ' ' + name + '<' + iList.join(', ') + '>';
    } else {
      ret = name;
    }
    paramLoop: while (i < func.length && limit-- > 0) {
      //dump('paramLoop');
      var c = func[i++];
      if (c in basicTypes) {
        list.push(basicTypes[c]);
      } else {
        switch (c) {
          case 'P': list.push(parse(true, 1, true)[0] + '*'); break; // pointer
          case 'R': list.push(parse(true, 1, true)[0] + '&'); break; // reference
          case 'L': { // literal
            i++; // skip basic type
            var end = func.indexOf('E', i);
            var size = end - i;
            list.push(func.substr(i, size));
            i += size + 2; // size + 'EE'
            break;
          }
          case 'A': { // array
            var size = parseInt(func.substr(i));
            i += size.toString().length;
            if (func[i] !== '_') throw '?';
            i++; // skip _
            list.push(parse(true, 1, true)[0] + ' [' + size + ']');
            break;
          }
          case 'E': break paramLoop;
          default: ret += '?' + c; break paramLoop;
        }
      }
    }
    if (!allowVoid && list.length === 1 && list[0] === 'void') list = []; // avoid (void)
    if (rawList) {
      if (ret) {
        list.push(ret + '?');
      }
      return list;
    } else {
      return ret + flushList();
    }
  }
  var final = func;
  try {
    // Special-case the entry point, since its name differs from other name mangling.
    if (func == 'Object._main' || func == '_main') {
      return 'main()';
    }
    if (typeof func === 'number') func = Pointer_stringify(func);
    if (func[0] !== '_') return func;
    if (func[1] !== '_') return func; // C function
    if (func[2] !== 'Z') return func;
    switch (func[3]) {
      case 'n': return 'operator new()';
      case 'd': return 'operator delete()';
    }
    final = parse();
  } catch(e) {
    final += '?';
  }
  if (final.indexOf('?') >= 0 && !hasLibcxxabi) {
    Runtime.warnOnce('warning: a problem occurred in builtin C++ name demangling; build with  -s DEMANGLE_SUPPORT=1  to link in libcxxabi demangling');
  }
  return final;
}

function demangleAll(text) {
  return text.replace(/__Z[\w\d_]+/g, function(x) { var y = demangle(x); return x === y ? x : (x + ' [' + y + ']') });
}

function jsStackTrace() {
  var err = new Error();
  if (!err.stack) {
    // IE10+ special cases: It does have callstack info, but it is only populated if an Error object is thrown,
    // so try that as a special-case.
    try {
      throw new Error(0);
    } catch(e) {
      err = e;
    }
    if (!err.stack) {
      return '(no stack trace available)';
    }
  }
  return err.stack.toString();
}

function stackTrace() {
  return demangleAll(jsStackTrace());
}
Module['stackTrace'] = stackTrace;

// Memory management

var PAGE_SIZE = 4096;
function alignMemoryPage(x) {
  return (x+4095)&-4096;
}

var HEAP;
var HEAP8, HEAPU8, HEAP16, HEAPU16, HEAP32, HEAPU32, HEAPF32, HEAPF64;

var STATIC_BASE = 0, STATICTOP = 0, staticSealed = false; // static area
var STACK_BASE = 0, STACKTOP = 0, STACK_MAX = 0; // stack area
var DYNAMIC_BASE = 0, DYNAMICTOP = 0; // dynamic area handled by sbrk

function enlargeMemory() {
  abort('Cannot enlarge memory arrays. Either (1) compile with -s TOTAL_MEMORY=X with X higher than the current value ' + TOTAL_MEMORY + ', (2) compile with ALLOW_MEMORY_GROWTH which adjusts the size at runtime but prevents some optimizations, or (3) set Module.TOTAL_MEMORY before the program runs.');
}


var TOTAL_STACK = Module['TOTAL_STACK'] || 5242880;
var TOTAL_MEMORY = Module['TOTAL_MEMORY'] || 134217728;
var FAST_MEMORY = Module['FAST_MEMORY'] || 2097152;


// Initialize the runtime's memory
// check for full engine support (use string 'subarray' to avoid closure compiler confusion)
assert(typeof Int32Array !== 'undefined' && typeof Float64Array !== 'undefined' && !!(new Int32Array(1)['subarray']) && !!(new Int32Array(1)['set']),
       'JS engine does not provide full typed array support');

var buffer = new ArrayBuffer(TOTAL_MEMORY);
HEAP8 = new Int8Array(buffer);
HEAP16 = new Int16Array(buffer);
HEAP32 = new Int32Array(buffer);
HEAPU8 = new Uint8Array(buffer);
HEAPU16 = new Uint16Array(buffer);
HEAPU32 = new Uint32Array(buffer);
HEAPF32 = new Float32Array(buffer);
HEAPF64 = new Float64Array(buffer);

// Endianness check (note: assumes compiler arch was little-endian)
HEAP32[0] = 255;
assert(HEAPU8[0] === 255 && HEAPU8[3] === 0, 'Typed arrays 2 must be run on a little-endian system');

Module['HEAP'] = HEAP;
Module['buffer'] = buffer;
Module['HEAP8'] = HEAP8;
Module['HEAP16'] = HEAP16;
Module['HEAP32'] = HEAP32;
Module['HEAPU8'] = HEAPU8;
Module['HEAPU16'] = HEAPU16;
Module['HEAPU32'] = HEAPU32;
Module['HEAPF32'] = HEAPF32;
Module['HEAPF64'] = HEAPF64;

function callRuntimeCallbacks(callbacks) {
  while(callbacks.length > 0) {
    var callback = callbacks.shift();
    if (typeof callback == 'function') {
      callback();
      continue;
    }
    var func = callback.func;
    if (typeof func === 'number') {
      if (callback.arg === undefined) {
        Runtime.dynCall('v', func);
      } else {
        Runtime.dynCall('vi', func, [callback.arg]);
      }
    } else {
      func(callback.arg === undefined ? null : callback.arg);
    }
  }
}

var __ATPRERUN__  = []; // functions called before the runtime is initialized
var __ATINIT__    = []; // functions called during startup
var __ATMAIN__    = []; // functions called when main() is to be run
var __ATEXIT__    = []; // functions called during shutdown
var __ATPOSTRUN__ = []; // functions called after the runtime has exited

var runtimeInitialized = false;
var runtimeExited = false;

function preRun() {
  // compatibility - merge in anything from Module['preRun'] at this time
  if (Module['preRun']) {
    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
    while (Module['preRun'].length) {
      addOnPreRun(Module['preRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPRERUN__);
}

function ensureInitRuntime() {
  if (runtimeInitialized) return;
  runtimeInitialized = true;
  callRuntimeCallbacks(__ATINIT__);
}

function preMain() {
  callRuntimeCallbacks(__ATMAIN__);
}

function exitRuntime() {
  callRuntimeCallbacks(__ATEXIT__);
  runtimeExited = true;
}

function postRun() {
  // compatibility - merge in anything from Module['postRun'] at this time
  if (Module['postRun']) {
    if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
    while (Module['postRun'].length) {
      addOnPostRun(Module['postRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPOSTRUN__);
}

function addOnPreRun(cb) {
  __ATPRERUN__.unshift(cb);
}
Module['addOnPreRun'] = Module.addOnPreRun = addOnPreRun;

function addOnInit(cb) {
  __ATINIT__.unshift(cb);
}
Module['addOnInit'] = Module.addOnInit = addOnInit;

function addOnPreMain(cb) {
  __ATMAIN__.unshift(cb);
}
Module['addOnPreMain'] = Module.addOnPreMain = addOnPreMain;

function addOnExit(cb) {
  __ATEXIT__.unshift(cb);
}
Module['addOnExit'] = Module.addOnExit = addOnExit;

function addOnPostRun(cb) {
  __ATPOSTRUN__.unshift(cb);
}
Module['addOnPostRun'] = Module.addOnPostRun = addOnPostRun;

// Tools


function intArrayFromString(stringy, dontAddNull, length /* optional */) {
  var ret = (new Runtime.UTF8Processor()).processJSString(stringy);
  if (length) {
    ret.length = length;
  }
  if (!dontAddNull) {
    ret.push(0);
  }
  return ret;
}
Module['intArrayFromString'] = intArrayFromString;

function intArrayToString(array) {
  var ret = [];
  for (var i = 0; i < array.length; i++) {
    var chr = array[i];
    if (chr > 0xFF) {
        assert(false, 'Character code ' + chr + ' (' + String.fromCharCode(chr) + ')  at offset ' + i + ' not in 0x00-0xFF.');
      chr &= 0xFF;
    }
    ret.push(String.fromCharCode(chr));
  }
  return ret.join('');
}
Module['intArrayToString'] = intArrayToString;

function writeStringToMemory(string, buffer, dontAddNull) {
  var array = intArrayFromString(string, dontAddNull);
  var i = 0;
  while (i < array.length) {
    var chr = array[i];
    HEAP8[(((buffer)+(i))>>0)]=chr;
    i = i + 1;
  }
}
Module['writeStringToMemory'] = writeStringToMemory;

function writeArrayToMemory(array, buffer) {
  for (var i = 0; i < array.length; i++) {
    HEAP8[(((buffer)+(i))>>0)]=array[i];
  }
}
Module['writeArrayToMemory'] = writeArrayToMemory;

function writeAsciiToMemory(str, buffer, dontAddNull) {
  for (var i = 0; i < str.length; i++) {
    assert(str.charCodeAt(i) === str.charCodeAt(i)&0xff);
    HEAP8[(((buffer)+(i))>>0)]=str.charCodeAt(i);
  }
  if (!dontAddNull) HEAP8[(((buffer)+(str.length))>>0)]=0;
}
Module['writeAsciiToMemory'] = writeAsciiToMemory;

function unSign(value, bits, ignore) {
  if (value >= 0) {
    return value;
  }
  return bits <= 32 ? 2*Math.abs(1 << (bits-1)) + value // Need some trickery, since if bits == 32, we are right at the limit of the bits JS uses in bitshifts
                    : Math.pow(2, bits)         + value;
}
function reSign(value, bits, ignore) {
  if (value <= 0) {
    return value;
  }
  var half = bits <= 32 ? Math.abs(1 << (bits-1)) // abs is needed if bits == 32
                        : Math.pow(2, bits-1);
  if (value >= half && (bits <= 32 || value > half)) { // for huge values, we can hit the precision limit and always get true here. so don't do that
                                                       // but, in general there is no perfect solution here. With 64-bit ints, we get rounding and errors
                                                       // TODO: In i64 mode 1, resign the two parts separately and safely
    value = -2*half + value; // Cannot bitshift half, as it may be at the limit of the bits JS uses in bitshifts
  }
  return value;
}

// check for imul support, and also for correctness ( https://bugs.webkit.org/show_bug.cgi?id=126345 )
if (!Math['imul'] || Math['imul'](0xffffffff, 5) !== -5) Math['imul'] = function imul(a, b) {
  var ah  = a >>> 16;
  var al = a & 0xffff;
  var bh  = b >>> 16;
  var bl = b & 0xffff;
  return (al*bl + ((ah*bl + al*bh) << 16))|0;
};
Math.imul = Math['imul'];


var Math_abs = Math.abs;
var Math_cos = Math.cos;
var Math_sin = Math.sin;
var Math_tan = Math.tan;
var Math_acos = Math.acos;
var Math_asin = Math.asin;
var Math_atan = Math.atan;
var Math_atan2 = Math.atan2;
var Math_exp = Math.exp;
var Math_log = Math.log;
var Math_sqrt = Math.sqrt;
var Math_ceil = Math.ceil;
var Math_floor = Math.floor;
var Math_pow = Math.pow;
var Math_imul = Math.imul;
var Math_fround = Math.fround;
var Math_min = Math.min;

// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// PRE_RUN_ADDITIONS (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
var runDependencies = 0;
var runDependencyWatcher = null;
var dependenciesFulfilled = null; // overridden to take different actions when all run dependencies are fulfilled
var runDependencyTracking = {};

function addRunDependency(id) {
  runDependencies++;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(!runDependencyTracking[id]);
    runDependencyTracking[id] = 1;
    if (runDependencyWatcher === null && typeof setInterval !== 'undefined') {
      // Check for missing dependencies every few seconds
      runDependencyWatcher = setInterval(function() {
        if (ABORT) {
          clearInterval(runDependencyWatcher);
          runDependencyWatcher = null;
          return;
        }
        var shown = false;
        for (var dep in runDependencyTracking) {
          if (!shown) {
            shown = true;
            Module.printErr('still waiting on run dependencies:');
          }
          Module.printErr('dependency: ' + dep);
        }
        if (shown) {
          Module.printErr('(end of list)');
        }
      }, 10000);
    }
  } else {
    Module.printErr('warning: run dependency added without ID');
  }
}
Module['addRunDependency'] = addRunDependency;
function removeRunDependency(id) {
  runDependencies--;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(runDependencyTracking[id]);
    delete runDependencyTracking[id];
  } else {
    Module.printErr('warning: run dependency removed without ID');
  }
  if (runDependencies == 0) {
    if (runDependencyWatcher !== null) {
      clearInterval(runDependencyWatcher);
      runDependencyWatcher = null;
    }
    if (dependenciesFulfilled) {
      var callback = dependenciesFulfilled;
      dependenciesFulfilled = null;
      callback(); // can add another dependenciesFulfilled
    }
  }
}
Module['removeRunDependency'] = removeRunDependency;

Module["preloadedImages"] = {}; // maps url to image data
Module["preloadedAudios"] = {}; // maps url to audio data


var memoryInitializer = null;

// === Body ===



STATIC_BASE = 8;

STATICTOP = STATIC_BASE + 87512;


/* global initializers */ __ATINIT__.push({ func: function() { runPostSets() } });















var _stdout;
var _stdout=_stdout=allocate(1, "i32*", ALLOC_STATIC);
var _stderr;
var _stderr=_stderr=allocate(1, "i32*", ALLOC_STATIC);


































































































































































































































































































































































































































































































































































































































































/* memory initializer */ allocate([48,49,50,51,52,53,54,55,56,57,65,66,67,68,69,70,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,61,158,62,61,157,33,61,149,38,38,160,124,124,161,43,43,164,45,45,162,61,61,148,60,60,1,62,62,2,43,61,171,45,61,173,42,61,170,47,61,175,37,61,165,38,61,166,94,61,222,124,61,252,45,62,199,46,46,168,35,35,202,0,96,16,0,0,0,0,1,0,88,16,0,0,1,0,1,0,80,16,0,0,3,0,0,0,72,16,0,0,4,0,1,0,40,16,0,0,5,0,0,0,24,16,0,0,6,0,0,0,0,0,0,0,0,0,0,0,105,110,116,0,118,111,105,100,0,99,104,97,114,0,105,102,0,101,108,115,101,0,119,104,105,108,101,0,98,114,101,97,107,0,114,101,116,117,114,110,0,102,111,114,0,101,120,116,101,114,110,0,115,116,97,116,105,99,0,117,110,115,105,103,110,101,100,0,103,111,116,111,0,100,111,0,99,111,110,116,105,110,117,101,0,115,119,105,116,99,104,0,99,97,115,101,0,99,111,110,115,116,0,95,95,99,111,110,115,116,0,95,95,99,111,110,115,116,95,95,0,118,111,108,97,116,105,108,101,0,95,95,118,111,108,97,116,105,108,101,0,95,95,118,111,108,97,116,105,108,101,95,95,0,108,111,110,103,0,114,101,103,105,115,116,101,114,0,115,105,103,110,101,100,0,95,95,115,105,103,110,101,100,0,95,95,115,105,103,110,101,100,95,95,0,97,117,116,111,0,105,110,108,105,110,101,0,95,95,105,110,108,105,110,101,0,95,95,105,110,108,105,110,101,95,95,0,114,101,115,116,114,105,99,116,0,95,95,114,101,115,116,114,105,99,116,0,95,95,114,101,115,116,114,105,99,116,95,95,0,95,95,101,120,116,101,110,115,105,111,110,95,95,0,95,71,101,110,101,114,105,99,0,102,108,111,97,116,0,100,111,117,98,108,101,0,95,66,111,111,108,0,115,104,111,114,116,0,115,116,114,117,99,116,0,117,110,105,111,110,0,116,121,112,101,100,101,102,0,100,101,102,97,117,108,116,0,101,110,117,109,0,115,105,122,101,111,102,0,95,95,97,116,116,114,105,98,117,116,101,0,95,95,97,116,116,114,105,98,117,116,101,95,95,0,95,95,97,108,105,103,110,111,102,0,95,95,97,108,105,103,110,111,102,95,95,0,116,121,112,101,111,102,0,95,95,116,121,112,101,111,102,0,95,95,116,121,112,101,111,102,95,95,0,95,95,108,97,98,101,108,95,95,0,97,115,109,0,95,95,97,115,109,0,95,95,97,115,109,95,95,0,100,101,102,105,110,101,0,105,110,99,108,117,100,101,0,105,110,99,108,117,100,101,95,110,101,120,116,0,105,102,100,101,102,0,105,102,110,100,101,102,0,101,108,105,102,0,101,110,100,105,102,0,100,101,102,105,110,101,100,0,117,110,100,101,102,0,101,114,114,111,114,0,119,97,114,110,105,110,103,0,108,105,110,101,0,112,114,97,103,109,97,0,95,95,76,73,78,69,95,95,0,95,95,70,73,76,69,95,95,0,95,95,68,65,84,69,95,95,0,95,95,84,73,77,69,95,95,0,95,95,70,85,78,67,84,73,79,78,95,95,0,95,95,86,65,95,65,82,71,83,95,95,0,95,95,67,79,85,78,84,69,82,95,95,0,95,95,102,117,110,99,95,95,0,95,95,110,97,110,95,95,0,95,95,115,110,97,110,95,95,0,95,95,105,110,102,95,95,0,115,101,99,116,105,111,110,0,95,95,115,101,99,116,105,111,110,95,95,0,97,108,105,103,110,101,100,0,95,95,97,108,105,103,110,101,100,95,95,0,112,97,99,107,101,100,0,95,95,112,97,99,107,101,100,95,95,0,119,101,97,107,0,95,95,119,101,97,107,95,95,0,97,108,105,97,115,0,95,95,97,108,105,97,115,95,95,0,117,110,117,115,101,100,0,95,95,117,110,117,115,101,100,95,95,0,99,100,101,99,108,0,95,95,99,100,101,99,108,0,95,95,99,100,101,99,108,95,95,0,115,116,100,99,97,108,108,0,95,95,115,116,100,99,97,108,108,0,95,95,115,116,100,99,97,108,108,95,95,0,102,97,115,116,99,97,108,108,0,95,95,102,97,115,116,99,97,108,108,0,95,95,102,97,115,116,99,97,108,108,95,95,0,114,101,103,112,97,114,109,0,95,95,114,101,103,112,97,114,109,95,95,0,95,95,109,111,100,101,95,95,0,95,95,81,73,95,95,0,95,95,68,73,95,95,0,95,95,72,73,95,95,0,95,95,83,73,95,95,0,95,95,119,111,114,100,95,95,0,100,108,108,101,120,112,111,114,116,0,100,108,108,105,109,112,111,114,116,0,110,111,114,101,116,117,114,110,0,95,95,110,111,114,101,116,117,114,110,95,95,0,118,105,115,105,98,105,108,105,116,121,0,95,95,118,105,115,105,98,105,108,105,116,121,95,95,0,95,95,98,117,105,108,116,105,110,95,116,121,112,101,115,95,99,111,109,112,97,116,105,98,108,101,95,112,0,95,95,98,117,105,108,116,105,110,95,99,104,111,111,115,101,95,101,120,112,114,0,95,95,98,117,105,108,116,105,110,95,99,111,110,115,116,97,110,116,95,112,0,95,95,98,117,105,108,116,105,110,95,102,114,97,109,101,95,97,100,100,114,101,115,115,0,95,95,98,117,105,108,116,105,110,95,114,101,116,117,114,110,95,97,100,100,114,101,115,115,0,95,95,98,117,105,108,116,105,110,95,101,120,112,101,99,116,0,112,97,99,107,0,99,111,109,109,101,110,116,0,108,105,98,0,112,117,115,104,95,109,97,99,114,111,0,112,111,112,95,109,97,99,114,111,0,111,110,99,101,0,111,112,116,105,111,110,0,109,101,109,99,112,121,0,109,101,109,109,111,118,101,0,109,101,109,115,101,116,0,95,95,100,105,118,100,105,51,0,95,95,109,111,100,100,105,51,0,95,95,117,100,105,118,100,105,51,0,95,95,117,109,111,100,100,105,51,0,95,95,97,115,104,114,100,105,51,0,95,95,108,115,104,114,100,105,51,0,95,95,97,115,104,108,100,105,51,0,95,95,102,108,111,97,116,117,110,100,105,115,102,0,95,95,102,108,111,97,116,117,110,100,105,100,102,0,95,95,102,108,111,97,116,117,110,100,105,120,102,0,95,95,102,105,120,117,110,115,120,102,100,105,0,95,95,102,105,120,117,110,115,115,102,100,105,0,95,95,102,105,120,117,110,115,100,102,100,105,0,95,95,102,105,120,115,102,100,105,0,95,95,102,105,120,100,102,100,105,0,95,95,102,105,120,120,102,100,105,0,97,108,108,111,99,97,0,95,95,98,111,117,110,100,95,112,116,114,95,97,100,100,0,95,95,98,111,117,110,100,95,112,116,114,95,105,110,100,105,114,49,0,95,95,98,111,117,110,100,95,112,116,114,95,105,110,100,105,114,50,0,95,95,98,111,117,110,100,95,112,116,114,95,105,110,100,105,114,52,0,95,95,98,111,117,110,100,95,112,116,114,95,105,110,100,105,114,56,0,95,95,98,111,117,110,100,95,112,116,114,95,105,110,100,105,114,49,50,0,95,95,98,111,117,110,100,95,112,116,114,95,105,110,100,105,114,49,54,0,95,95,98,111,117,110,100,95,109,97,105,110,95,97,114,103,0,95,95,98,111,117,110,100,95,108,111,99,97,108,95,110,101,119,0,95,95,98,111,117,110,100,95,108,111,99,97,108,95,100,101,108,101,116,101,0,115,116,114,108,101,110,0,115,116,114,99,112,121,0,46,98,121,116,101,0,46,119,111,114,100,0,46,97,108,105,103,110,0,46,98,97,108,105,103,110,0,46,112,50,97,108,105,103,110,0,46,115,101,116,0,46,115,107,105,112,0,46,115,112,97,99,101,0,46,115,116,114,105,110,103,0,46,97,115,99,105,122,0,46,97,115,99,105,105,0,46,102,105,108,101,0,46,103,108,111,98,108,0,46,103,108,111,98,97,108,0,46,119,101,97,107,0,46,104,105,100,100,101,110,0,46,105,100,101,110,116,0,46,115,105,122,101,0,46,116,121,112,101,0,46,116,101,120,116,0,46,100,97,116,97,0,46,98,115,115,0,46,112,114,101,118,105,111,117,115,0,46,112,117,115,104,115,101,99,116,105,111,110,0,46,112,111,112,115,101,99,116,105,111,110,0,46,102,105,108,108,0,46,114,101,112,116,0,46,101,110,100,114,0,46,111,114,103,0,46,113,117,97,100,0,46,99,111,100,101,49,54,0,46,99,111,100,101,51,50,0,46,115,104,111,114,116,0,46,108,111,110,103,0,46,105,110,116,0,46,115,101,99,116,105,111,110,0,0,0,1,0,0,0,0,0,0,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,0,1,2,3,4,5,6,7,8,9,255,255,255,255,255,255,255,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,255,255,255,255,255,255,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,0,0,0,0,0,0,0,17,0,10,0,17,17,17,0,0,0,0,5,0,0,0,0,0,0,9,0,0,0,0,11,0,0,0,0,0,0,0,0,17,0,15,10,17,17,17,3,10,7,0,1,19,9,11,11,0,0,9,6,11,0,0,11,0,6,17,0,0,0,17,17,17,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,0,17,0,10,10,17,17,17,0,10,0,0,2,0,9,11,0,0,0,9,0,11,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,12,0,0,0,0,9,12,0,0,0,0,0,12,0,0,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,14,0,0,0,0,0,0,0,0,0,0,0,13,0,0,0,4,13,0,0,0,0,9,14,0,0,0,0,0,14,0,0,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,0,0,0,0,0,0,0,0,0,0,0,15,0,0,0,0,15,0,0,0,0,9,16,0,0,0,0,0,16,0,0,16,0,0,18,0,0,0,18,18,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,18,0,0,0,18,18,18,0,0,0,0,0,0,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,0,0,0,0,10,0,0,0,0,10,0,0,0,0,9,11,0,0,0,0,0,11,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,12,0,0,0,0,9,12,0,0,0,0,0,12,0,0,12,0,0,5,0,0,0,17,0,0,0,33,0,0,0,0,0,0,0,10,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,95,112,137,0,255,9,47,15,10,0,0,0,100,0,0,0,232,3,0,0,16,39,0,0,160,134,1,0,64,66,15,0,128,150,152,0,0,225,245,5,110,111,110,45,122,101,114,111,32,97,100,100,101,110,100,32,111,110,32,82,69,76,32,97,114,99,104,105,116,101,99,116,117,114,101,0,0,0,0,0,46,114,101,108,37,115,0,0,112,111,105,110,116,101,114,0,99,111,110,115,116,97,110,116,32,101,120,112,114,101,115,115,105,111,110,0,0,0,0,0,99,111,110,115,116,97,110,116,32,101,120,99,101,101,100,115,32,51,50,32,98,105,116,0,39,41,39,0,0,0,0,0,105,100,101,110,116,105,102,105,101,114,0,0,0,0,0,0,35,101,110,100,105,102,0,0,73,103,110,111,114,105,110,103,32,117,110,107,110,111,119,110,32,112,114,101,112,114,111,99,101,115,115,105,110,103,32,100,105,114,101,99,116,105,118,101,32,35,37,115,0,0,0,0,35,119,97,114,110,105,110,103,32,37,115,0,0,0,0,0,49,57,57,57,48,49,76,0,35,101,114,114,111,114,32,37,115,0,0,0,0,0,0,0,119,114,111,110,103,32,35,108,105,110,101,32,102,111,114,109,97,116,0,0,0,0,0,0,35,101,110,100,105,102,32,119,105,116,104,111,117,116,32,109,97,116,99,104,105,110,103,32,35,105,102,0,0,0,0,0,35,101,108,105,102,32,97,102,116,101,114,32,35,101,108,115,101,0,0,0,0,0,0,0,35,101,108,105,102,32,119,105,116,104,111,117,116,32,109,97,116,99,104,105,110,103,32,35,105,102,0,0,0,0,0,0,35,101,108,115,101,32,97,102,116,101,114,32,35,101,108,115,101,0,0,0,0,0,0,0,35,101,108,115,101,32,119,105,116,104,111,117,116,32,109,97,116,99,104,105,110,103,32,35,105,102,0,0,0,0,0,0,109,101,109,111,114,121,32,102,117,108,108,32,40,105,102,100,101,102,41,0,0,0,0,0,110,0,0,0,0,0,0,0,105,110,118,97,108,105,100,32,97,114,103,117,109,101,110,116,32,102,111,114,32,39,35,105,102,37,115,100,101,102,39,0,95,95,83,84,68,67,95,86,69,82,83,73,79,78,95,95,0,0,0,0,0,0,0,0,105,110,99,108,117,100,101,32,102,105,108,101,32,39,37,115,39,32,110,111,116,32,102,111,117,110,100,0,0,0,0,0,47,0,0,0,0,0,0,0,35,105,110,99,108,117,100,101,32,114,101,99,117,114,115,105,111,110,32,116,111,111,32,100,101,101,112,0,0,0,0,0,39,35,105,110,99,108,117,100,101,39,32,101,120,112,101,99,116,115,32,34,70,73,76,69,78,65,77,69,34,32,111,114,32,60,70,73,76,69,78,65,77,69,62,0,0,0,0,0,37,115,32,101,120,112,101,99,116,101,100,0,0,0,0,0,39,10,39,32,97,102,116,101,114,32,39,13,39,0,0,0,46,0,0,0,0,0,0,0,109,105,115,115,105,110,103,32,116,101,114,109,105,110,97,116,105,110,103,32,37,99,32,99,104,97,114,97,99,116,101,114,0,0,0,0,0,0,0,0,117,110,101,120,112,101,99,116,101,100,32,101,110,100,32,111,102,32,102,105,108,101,32,105,110,32,99,111,109,109,101,110,116,0,0,0,0,0,0,0,117,110,114,101,99,111,103,110,105,122,101,100,32,99,104,97,114,97,99,116,101,114,32,92,120,37,48,50,120,0,0,0,109,105,115,115,105,110,103,32,35,101,110,100,105,102,0,0,95,95,83,84,68,67,95,95,0,0,0,0,0,0,0,0,39,35,35,39,32,99,97,110,110,111,116,32,97,112,112,101,97,114,32,97,116,32,101,105,116,104,101,114,32,101,110,100,32,111,102,32,109,97,99,114,111,0,0,0,0,0,0,0,98,97,100,32,109,97,99,114,111,32,112,97,114,97,109,101,116,101,114,32,108,105,115,116,0,0,0,0,0,0,0,0,105,110,118,97,108,105,100,32,109,97,99,114,111,32,110,97,109,101,32,39,37,115,39,0,46,100,121,110,104,97,115,104,116,97,98,0,0,0,0,0,46,100,121,110,115,116,114,116,97,98,0,0,0,0,0,0,78,65,78,0,0,0,0,0,46,100,121,110,115,121,109,116,97,98,0,0,0,0,0,0,46,104,97,115,104,116,97,98,0,0,0,0,0,0,0,0,46,115,116,114,116,97,98,0,46,115,121,109,116,97,98,0,95,95,84,73,78,89,67,95,95,0,0,0,0,0,0,0,46,99,111,109,109,111,110,0,46,98,115,115,0,0,0,0,46,100,97,116,97,0,0,0,46,116,101,120,116,0,0,0,109,101,109,111,114,121,32,102,117,108,108,32,40,115,121,109,98,111,108,115,41,0,0,0,76,46,37,117,0,0,0,0,110,97,110,0,0,0,0,0,60,37,48,50,120,62,0,0,60,101,111,102,62,0,0,0,62,62,61,0,0,0,0,0,60,60,61,0,0,0,0,0,48,46,57,46,50,55,0,0,46,46,46,0,0,0,0,0,60,108,105,110,101,110,117,109,98,101,114,62,0,0,0,0,60,108,111,110,103,32,100,111,117,98,108,101,62,0,0,0,60,100,111,117,98,108,101,62,0,0,0,0,0,0,0,0,60,102,108,111,97,116,62,0,37,108,108,117,0,0,0,0,105,110,102,105,110,105,116,121,0,0,0,0,0,0,0,0,37,115,32,114,101,100,101,102,105,110,101,100,0,0,0,0,73,78,70,0,0,0,0,0,58,0,0,0,0,0,0,0,110,111,115,116,100,108,105,98,0,0,0,0,0,0,0,0,110,111,115,116,100,105,110,99,0,0,0,0,0,0,0,0,60,100,101,102,105,110,101,62,0,0,0,0,0,0,0,0,111,0,0,0,0,0,0,0,99,0,0,0,0,0,0,0,68,0,0,0,0,0,0,0,73,0,0,0,0,0,0,0,117,110,115,117,112,112,111,114,116,101,100,32,111,112,116,105,111,110,32,39,37,115,39,0,109,117,108,116,105,112,108,101,32,45,111,32,111,112,116,105,111,110,0,0,0,0,0,0,0,1,2,4,7,3,6,5,0,0,0,0,0,0,0,0,97,114,103,117,109,101,110,116,32,116,111,32,39,37,115,39,32,105,115,32,109,105,115,115,105,110,103,0,0,0,0,0,105,110,102,0,0,0,0,0,105,110,118,97,108,105,100,32,111,112,116,105,111,110,32,45,45,32,39,37,115,39,0,0,120,0,0,0,0,0,0,0,95,95,98,117,105,108,116,105,110,95,101,120,116,114,97,99,116,95,114,101,116,117,114,110,95,97,100,100,114,40,120,41,0,0,0,0,0,0,0,0,49,0,0,0,0,0,0,0,110,97,109,101,32,112,114,111,116,111,32,95,95,97,115,109,95,95,32,40,35,97,108,105,97,115,41,32,95,95,84,72,82,79,87,0,0,0,0,0,95,95,82,69,68,73,82,69,67,84,95,78,84,72,40,110,97,109,101,44,32,112,114,111,116,111,44,32,97,108,105,97,115,41,0,0,0,0,0,0,110,97,109,101,32,112,114,111,116,111,32,95,95,97,115,109,95,95,32,40,35,97,108,105,97,115,41,0,0,0,0,0,95,95,115,116,111,112,95,37,115,0,0,0,0,0,0,0,95,95,115,116,97,114,116,95,37,115,0,0,0,0,0,0,119,98,0,0,0,0,0,0,46,115,104,115,116,114,116,97,98,0,0,0,0,0,0,0,37,115,10,0,0,0,0,0,101,114,114,111,114,58,32,0,119,97,114,110,105,110,103,58,32,0,0,0,0,0,0,0,116,99,99,58,32,0,0,0,37,115,58,37,100,58,32,0,95,95,82,69,68,73,82,69,67,84,40,110,97,109,101,44,32,112,114,111,116,111,44,32,97,108,105,97,115,41,0,0,73,110,32,102,105,108,101,32,105,110,99,108,117,100,101,100,32,102,114,111,109,32,37,115,58,37,100,58,10,0,0,0,95,95,65,83,83,69,77,66,76,69,82,95,95,0,0,0,60,99,111,109,109,97,110,100,32,108,105,110,101,62,0,0,34,10,0,0,0,0,0,0,35,105,110,99,108,117,100,101,32,34,0,0,0,0,0,0,95,95,66,65,83,69,95,70,73,76,69,95,95,0,0,0,34,0,0,0,0,0,0,0,39,37,115,39,32,100,101,102,105,110,101,100,32,116,119,105,99,101,0,0,0,0,0,0,109,97,99,114,111,32,112,97,114,97,109,101,116,101,114,32,97,102,116,101,114,32,39,35,39,0,0,0,0,0,0,0,112,97,115,116,105,110,103,32,34,37,46,42,115,34,32,97,110,100,32,34,37,115,34,32,100,111,101,115,32,110,111,116,32,103,105,118,101,32,97,32,118,97,108,105,100,32,112,114,101,112,114,111,99,101,115,115,105,110,103,32,116,111,107,101,110,0,0,0,0,0,0,0,95,95,87,73,78,84,95,84,89,80,69,95,95,0,0,0,58,112,97,115,116,101,58,0,115,116,114,97,121,32,39,92,39,32,105,110,32,112,114,111,103,114,97,109,0,0,0,0,109,97,99,114,111,32,39,37,115,39,32,117,115,101,100,32,119,105,116,104,32,116,111,111,32,102,101,119,32,97,114,103,115,0,0,0,0,0,0,0,109,97,99,114,111,32,39,37,115,39,32,117,115,101,100,32,119,105,116,104,32,116,111,111,32,109,97,110,121,32,97,114,103,115,0,0,0,0,0,0,37,100,0,0,0,0,0,0,105,110,118,97,108,105,100,32,110,117,109,98,101,114,10,0,105,110,116,101,103,101,114,32,99,111,110,115,116,97,110,116,32,111,118,101,114,102,108,111,119,0,0,0,0,0,0,0,116,119,111,32,39,117,39,115,32,105,110,32,105,110,116,101,103,101,114,32,99,111,110,115,116,97,110,116,0,0,0,0,105,110,99,111,114,114,101,99,116,32,105,110,116,101,103,101,114,32,115,117,102,102,105,120,58,32,37,115,0,0,0,0,116,104,114,101,101,32,39,108,39,115,32,105,110,32,105,110,116,101,103,101,114,32,99,111,110,115,116,97,110,116,0,0,95,95,87,67,72,65,82,95,84,89,80,69,95,95,0,0,101,120,112,111,110,101,110,116,32,100,105,103,105,116,115,0,101,120,112,111,110,101,110,116,0,0,0,0,0,0,0,0,105,110,118,97,108,105,100,32,100,105,103,105,116,0,0,0,110,117,109,98,101,114,32,116,111,111,32,108,111,110,103,0,105,108,108,45,102,111,114,109,101,100,32,85,84,70,45,56,32,115,117,98,115,101,113,117,101,110,99,101,32,115,116,97,114,116,105,110,103,32,119,105,116,104,58,32,39,92,120,37,120,39,0,0,0,0,0,0,117,110,107,110,111,119,110,32,101,115,99,97,112,101,32,115,101,113,117,101,110,99,101,58,32,39,92,120,37,120,39,0,117,110,107,110,111,119,110,32,101,115,99,97,112,101,32,115,101,113,117,101,110,99,101,58,32,39,92,37,99,39,0,0,109,117,108,116,105,45,99,104,97,114,97,99,116,101,114,32,99,104,97,114,97,99,116,101,114,32,99,111,110,115,116,97,110,116,0,0,0,0,0,0,101,109,112,116,121,32,99,104,97,114,97,99,116,101,114,32,99,111,110,115,116,97,110,116,0,0,0,0,0,0,0,0,105,110,105,116,105,97,108,105,122,101,114,32,101,108,101,109,101,110,116,32,105,115,32,110,111,116,32,99,111,110,115,116,97,110,116,0,0,0,0,0,95,95,73,76,80,51,50,95,95,0,0,0,0,0,0,0,116,111,111,32,109,97,110,121,32,102,105,101,108,100,32,105,110,105,116,0,0,0,0,0,105,110,100,101,120,32,116,111,111,32,108,97,114,103,101,0,61,0,0,0,0,0,0,0,102,105,101,108,100,0,0,0,115,116,114,117,99,116,47,117,110,105,111,110,32,116,121,112,101,0,0,0,0,0,0,0,105,110,118,97,108,105,100,32,105,110,100,101,120,0,0,0,97,114,114,97,121,32,116,121,112,101,0,0,0,0,0,0,45,48,88,43,48,88,32,48,88,45,48,120,43,48,120,32,48,120,0,0,0,0,0,0,115,116,114,105,110,103,32,99,111,110,115,116,97,110,116,0,105,110,105,116,105,97,108,105,122,101,114,45,115,116,114,105,110,103,32,102,111,114,32,97,114,114,97,121,32,105,115,32,116,111,111,32,108,111,110,103,0,0,0,0,0,0,0,0,99,104,97,114,97,99,116,101,114,32,97,114,114,97,121,32,105,110,105,116,105,97,108,105,122,101,114,32,109,117,115,116,32,98,101,32,97,32,108,105,116,101,114,97,108,44,32,111,112,116,105,111,110,97,108,108,121,32,101,110,99,108,111,115,101,100,32,105,110,32,98,114,97,99,101,115,0,0,0,0,105,110,116,0,0,0,0,0,117,110,107,110,111,119,110,32,116,121,112,101,32,115,105,122,101,0,0,0,0,0,0,0,102,105,101,108,100,32,119,105,100,116,104,32,54,52,32,110,111,116,32,105,109,112,108,101,109,101,110,116,101,100,0,0,119,105,100,116,104,32,111,102,32,39,37,115,39,32,101,120,99,101,101,100,115,32,105,116,115,32,116,121,112,101,0,0,98,105,116,102,105,101,108,100,115,32,109,117,115,116,32,104,97,118,101,32,115,99,97,108,97,114,32,116,121,112,101,0,122,101,114,111,32,119,105,100,116,104,32,102,111,114,32,98,105,116,45,102,105,101,108,100,32,39,37,115,39,0,0,0,110,101,103,97,116,105,118,101,32,119,105,100,116,104,32,105,110,32,98,105,116,45,102,105,101,108,100,32,39,37,115,39,0,0,0,0,0,0,0,0,105,110,118,97,108,105,100,32,116,121,112,101,32,102,111,114,32,39,37,115,39,0,0,0,102,105,101,108,100,32,39,37,115,39,32,104,97,115,32,105,110,99,111,109,112,108,101,116,101,32,116,121,112,101,0,0,102,108,101,120,105,98,108,101,32,97,114,114,97,121,32,109,101,109,98,101,114,32,39,37,115,39,32,110,111,116,32,97,116,32,116,104,101,32,101,110,100,32,111,102,32,115,116,114,117,99,116,0,0,0,0,0,114,101,100,101,102,105,110,105,116,105,111,110,32,111,102,32,101,110,117,109,101,114,97,116,111,114,32,39,37,115,39,0,95,95,80,84,82,68,73,70,70,95,84,89,80,69,95,95,0,0,0,0,0,0,0,0,115,116,114,117,99,116,47,117,110,105,111,110,47,101,110,117,109,32,97,108,114,101,97,100,121,32,100,101,102,105,110,101,100,0,0,0,0,0,0,0,115,116,114,117,99,116,47,117,110,105,111,110,47,101,110,117,109,32,110,97,109,101,0,0,109,117,108,116,105,112,108,101,32,115,116,111,114,97,103,101,32,99,108,97,115,115,101,115,0,0,0,0,0,0,0,0,115,105,103,110,101,100,32,97,110,100,32,117,110,115,105,103,110,101,100,32,109,111,100,105,102,105,101,114,0,0,0,0,116,111,111,32,109,97,110,121,32,98,97,115,105,99,32,116,121,112,101,115,0,0,0,0,100,101,99,108,97,114,97,116,105,111,110,32,111,102,32,97,110,32,97,114,114,97,121,32,111,102,32,102,117,110,99,116,105,111,110,115,0,0,0,0,45,43,32,32,32,48,88,48,120,0,0,0,0,0,0,0,115,105,122,101,32,111,102,32,118,97,114,105,97,98,108,101,32,108,101,110,103,116,104,32,97,114,114,97,121,32,115,104,111,117,108,100,32,98,101,32,97,110,32,105,110,116,101,103,101,114,0,0,0,0,0,0,105,110,118,97,108,105,100,32,97,114,114,97,121,32,115,105,122,101,0,0,0,0,0,0,105,110,118,97,108,105,100,32,116,121,112,101,0,0,0,0,112,97,114,97,109,101,116,101,114,32,100,101,99,108,97,114,101,100,32,97,115,32,118,111,105,100,0,0,0,0,0,0,117,110,115,105,103,110,101,100,32,105,110,116,0,0,0,0,108,97,98,101,108,32,39,37,115,39,32,117,115,101,100,32,98,117,116,32,110,111,116,32,100,101,102,105,110,101,100,0,108,97,98,101,108,32,39,37,115,39,32,100,101,99,108,97,114,101,100,32,98,117,116,32,110,111,116,32,117,115,101,100,0,0,0,0,0,0,0,0,115,116,111,114,97,103,101,32,109,105,115,109,97,116,99,104,32,102,111,114,32,114,101,100,101,102,105,110,105,116,105,111,110,32,111,102,32,39,37,115,39,0,0,0,0,0,0,0,99,111,110,102,108,105,99,116,105,110,103,32,116,121,112,101,32,102,111,114,32,39,37,115,39,0,0,0,0,0,0,0,115,116,97,116,105,99,32,115,116,111,114,97,103,101,32,105,103,110,111,114,101,100,32,102,111,114,32,114,101,100,101,102,105,110,105,116,105,111,110,32,111,102,32,39,37,115,39,0,105,110,99,111,109,112,97,116,105,98,108,101,32,116,121,112,101,115,32,102,111,114,32,114,101,100,101,102,105,110,105,116,105,111,110,32,111,102,32,39,37,115,39,0,0,0,0,0,114,101,100,101,102,105,110,105,116,105,111,110,32,111,102,32,39,37,115,39,0,0,0,0,105,110,116,101,114,110,97,108,32,99,111,109,112,105,108,101,114,32,101,114,114,111,114,58,32,118,115,116,97,99,107,32,108,101,97,107,32,40,37,100,41,0,0,0,0,0,0,0,117,110,115,117,112,112,111,114,116,101,100,32,102,111,114,119,97,114,100,32,95,95,97,108,105,97,115,95,95,32,97,116,116,114,105,98,117,116,101,0,118,97,114,105,97,98,108,101,32,108,101,110,103,116,104,32,97,114,114,97,121,32,99,97,110,110,111,116,32,98,101,32,105,110,105,116,105,97,108,105,122,101,100,0,0,0,0,0,95,95,83,73,90,69,95,84,89,80,69,95,95,0,0,0,105,110,99,111,109,112,97,116,105,98,108,101,32,114,101,100,101,102,105,110,105,116,105,111,110,32,111,102,32,39,37,115,39,0,0,0,0,0,0,0,114,101,100,101,102,105,110,105,116,105,111,110,32,111,102,32,112,97,114,97,109,101,116,101,114,32,39,37,115,39,0,0,115,116,111,114,97,103,101,32,99,108,97,115,115,32,115,112,101,99,105,102,105,101,100,32,102,111,114,32,39,37,115,39,0,0,0,0,0,0,0,0,100,101,99,108,97,114,97,116,105,111,110,32,102,111,114,32,112,97,114,97,109,101,116,101,114,32,39,37,115,39,32,98,117,116,32,110,111,32,115,117,99,104,32,112,97,114,97,109,101,116,101,114,0,0,0,0,102,117,110,99,116,105,111,110,32,100,101,102,105,110,105,116,105,111,110,0,0,0,0,0,99,97,110,110,111,116,32,117,115,101,32,108,111,99,97,108,32,102,117,110,99,116,105,111,110,115,0,0,0,0,0,0,102,117,110,99,116,105,111,110,32,119,105,116,104,111,117,116,32,102,105,108,101,32,115,99,111,112,101,32,99,97,110,110,111,116,32,98,101,32,115,116,97,116,105,99,0,0,0,0,117,110,110,97,109,101,100,32,115,116,114,117,99,116,47,117,110,105,111,110,32,116,104,97,116,32,100,101,102,105,110,101,115,32,110,111,32,105,110,115,116,97,110,99,101,115,0,0,100,101,99,108,97,114,97,116,105,111,110,0,0,0,0,0,100,101,112,114,101,99,97,116,101,100,32,117,115,101,32,111,102,32,108,97,98,101,108,32,97,116,32,101,110,100,32,111,102,32,99,111,109,112,111,117,110,100,32,115,116,97,116,101,109,101,110,116,0,0,0,0,95,95,108,105,110,117,120,0,100,117,112,108,105,99,97,116,101,32,108,97,98,101,108,32,39,37,115,39,0,0,0,0,101,109,112,116,121,32,99,97,115,101,32,114,97,110,103,101,0,0,0,0,0,0,0,0,115,119,105,116,99,104,0,0,100,117,112,108,105,99,97,116,101,32,99,97,115,101,32,118,97,108,117,101,0,0,0,0,99,97,110,110,111,116,32,99,111,110,116,105,110,117,101,0,99,97,110,110,111,116,32,98,114,101,97,107,0,0,0,0,116,121,112,101,0,0,0,0,105,110,116,101,114,110,97,108,32,101,114,114,111,114,0,0,117,110,101,120,112,101,99,116,101,100,32,101,110,100,32,111,102,32,102,105,108,101,0,0,116,111,111,32,109,97,110,121,32,97,114,103,117,109,101,110,116,115,32,116,111,32,102,117,110,99,116,105,111,110,0,0,95,95,108,105,110,117,120,95,95,0,0,0,0,0,0,0,116,111,111,32,102,101,119,32,97,114,103,117,109,101,110,116,115,32,116,111,32,102,117,110,99,116,105,111,110,0,0,0,102,117,110,99,116,105,111,110,32,112,111,105,110,116,101,114,0,0,0,0,0,0,0,0,102,105,101,108,100,32,110,111,116,32,102,111,117,110,100,58,32,37,115,0,0,0,0,0,102,105,101,108,100,32,110,97,109,101,0,0,0,0,0,0,115,116,114,117,99,116,32,111,114,32,117,110,105,111,110,0,105,109,112,108,105,99,105,116,32,100,101,99,108,97,114,97,116,105,111,110,32,111,102,32,102,117,110,99,116,105,111,110,32,39,37,115,39,0,0,0,39,37,115,39,32,117,110,100,101,99,108,97,114,101,100,0,44,0,0,0,0,0,0,0,116,121,112,101,32,39,37,115,39,32,100,111,101,115,32,110,111,116,32,109,97,116,99,104,32,97,110,121,32,97,115,115,111,99,105,97,116,105,111,110,0,0,0,0,0,0,0,0,116,121,112,101,32,109,97,116,99,104,32,116,119,105,99,101,0,0,0,0,0,0,0,0,117,110,105,120,0,0,0,0,116,111,111,32,109,97,110,121,32,39,100,101,102,97,117,108,116,39,0,0,0,0,0,0,108,97,98,101,108,32,105,100,101,110,116,105,102,105,101,114,0,0,0,0,0,0,0,0,95,95,98,117,105,108,116,105,110,95,102,114,97,109,101,95,97,100,100,114,101,115,115,0,95,95,98,117,105,108,116,105,110,95,114,101,116,117,114,110,95,97,100,100,114,101,115,115,0,0,0,0,0,0,0,0,37,115,32,111,110,108,121,32,116,97,107,101,115,32,112,111,115,105,116,105,118,101,32,105,110,116,101,103,101,114,115,0,101,0,0,0,0,0,0,0,110,97,110,0,0,0,0,0,116,116,0,0,0,0,0,0,101,101,0,0,0,0,0,0,115,105,122,101,111,102,32,97,112,112,108,105,101,100,32,116,111,32,97,110,32,105,110,99,111,109,112,108,101,116,101,32,116,121,112,101,0,0,0,0,112,111,105,110,116,101,114,32,110,111,116,32,97,99,99,101,112,116,101,100,32,102,111,114,32,117,110,97,114,121,32,112,108,117,115,0,0,0,0,0,95,95,117,110,105,120,0,0,101,120,112,101,99,116,101,100,32,99,111,110,115,116,97,110,116,0,0,0,0,0,0,0,99,97,110,39,116,32,99,114,111,115,115,32,99,111,109,112,105,108,101,32,108,111,110,103,32,100,111,117,98,108,101,32,99,111,110,115,116,97,110,116,115,0,0,0,0,0,0,0,105,110,105,116,105,97,108,105,122,101,114,32,101,108,101,109,101,110,116,32,105,115,32,110,111,116,32,99,111,109,112,117,116,97,98,108,101,32,97,116,32,108,111,97,100,32,116,105,109,101,0,0,0,0,0,0,108,118,97,108,117,101,0,0,39,37,99,39,32,101,120,112,101,99,116,101,100,32,40,103,111,116,32,34,37,115,34,41,0,0,0,0,0,0,0,0,99,111,109,112,97,114,105,115,111,110,32,111,102,32,100,105,115,116,105,110,99,116,32,112,111,105,110,116,101,114,32,116,121,112,101,115,32,108,97,99,107,115,32,97,32,99,97,115,116,0,0,0,0,0,0,0,105,110,118,97,108,105,100,32,111,112,101,114,97,110,100,115,32,116,111,32,98,105,110,97,114,121,32,37,115,0,0,0,99,111,109,112,97,114,105,115,111,110,32,98,101,116,119,101,101,110,32,112,111,105,110,116,101,114,32,97,110,100,32,105,110,116,101,103,101,114,0,0,100,105,118,105,115,105,111,110,32,98,121,32,122,101,114,111,32,105,110,32,99,111,110,115,116,97,110,116,0,0,0,0,105,110,118,97,108,105,100,32,111,112,101,114,97,110,100,115,32,102,111,114,32,98,105,110,97,114,121,32,111,112,101,114,97,116,105,111,110,0,0,0,95,95,117,110,105,120,95,95,0,0,0,0,0,0,0,0,117,110,107,110,111,119,110,32,97,114,114,97,121,32,101,108,101,109,101,110,116,32,115,105,122,101,0,0,0,0,0,0,99,97,110,110,111,116,32,117,115,101,32,112,111,105,110,116,101,114,115,32,104,101,114,101,0,0,0,0,0,0,0,0,111,112,101,114,97,116,105,111,110,32,111,110,32,97,32,115,116,114,117,99,116,0,0,0,32,0,0,0,0,0,0,0,42,0,0,0,0,0,0,0,37,115,91,37,100,93,0,0,41,0,0,0,0,0,0,0,44,32,0,0,0,0,0,0,40,0,0,0,0,0,0,0,60,97,110,111,110,121,109,111,117,115,62,0,0,0,0,0,105,51,56,54,0,0,0,0,117,110,105,111,110,32,0,0,115,116,114,117,99,116,32,0,108,111,110,103,32,100,111,117,98,108,101,0,0,0,0,0,100,111,117,98,108,101,0,0,102,108,111,97,116,0,0,0,101,110,117,109,32,0,0,0,108,111,110,103,0,0,0,0,108,111,110,103,32,108,111,110,103,0,0,0,0,0,0,0,40,110,117,108,108,41,0,0,115,104,111,114,116,0,0,0,99,104,97,114,0,0,0,0,95,95,105,51,56,54,0,0,95,66,111,111,108,0,0,0,118,111,105,100,0,0,0,0,115,105,103,110,101,100,32,0,117,110,115,105,103,110,101,100,32,0,0,0,0,0,0,0,99,111,110,115,116,32,0,0,118,111,108,97,116,105,108,101,32,0,0,0,0,0,0,0,105,110,108,105,110,101,32,0,116,121,112,101,100,101,102,32,0,0,0,0,0,0,0,0,115,116,97,116,105,99,32,0,101,120,116,101,114,110,32,0,95,95,105,51,56,54,95,95,0,0,0,0,0,0,0,0,99,97,110,110,111,116,32,99,97,115,116,32,39,37,115,39,32,116,111,32,39,37,115,39,0,0,0,0,0,0,0,0,97,115,115,105,103,110,109,101,110,116,32,109,97,107,101,115,32,105,110,116,101,103,101,114,32,102,114,111,109,32,112,111,105,110,116,101,114,32,119,105,116,104,111,117,116,32,97,32,99,97,115,116,0,0,0,0,97,115,115,105,103,110,109,101,110,116,32,100,105,115,99,97,114,100,115,32,113,117,97,108,105,102,105,101,114,115,32,102,114,111,109,32,112,111,105,110,116,101,114,32,116,97,114,103,101,116,32,116,121,112,101,0,97,115,115,105,103,110,109,101,110,116,32,102,114,111,109,32,105,110,99,111,109,112,97,116,105,98,108,101,32,112,111,105,110,116,101,114,32,116,121,112,101,0,0,0,0,0,0,0,97,115,115,105,103,110,109,101,110,116,32,109,97,107,101,115,32,112,111,105,110,116,101,114,32,102,114,111,109,32,105,110,116,101,103,101,114,32,119,105,116,104,111,117,116,32,97,32,99,97,115,116,0,0,0,0,99,97,110,110,111,116,32,99,97,115,116,32,102,114,111,109,47,116,111,32,118,111,105,100,0,0,0,0,0,0,0,0,97,115,115,105,103,110,109,101,110,116,32,111,102,32,114,101,97,100,45,111,110,108,121,32,108,111,99,97,116,105,111,110,0,0,0,0,0,0,0,0,109,101,109,111,114,121,32,102,117,108,108,32,40,118,115,116,97,99,107,41,0,0,0,0,110,111,110,112,111,114,116,97,98,108,101,32,99,111,110,118,101,114,115,105,111,110,32,102,114,111,109,32,112,111,105,110,116,101,114,32,116,111,32,99,104,97,114,47,115,104,111,114,116,0,0,0,0,0,0,0,114,101,100,101,99,108,97,114,97,116,105,111,110,32,111,102,32,39,37,115,39,0,0,0,95,95,83,84,68,67,95,72,79,83,84,69,68,95,95,0,109,101,109,111,114,121,32,102,117,108,108,32,40,114,101,97,108,108,111,99,41,0,0,0,109,101,109,111,114,121,32,102,117,108,108,32,40,109,97,108,108,111,99,41,0,0,0,0], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE);
function runPostSets() {


}

var tempDoublePtr = Runtime.alignMemory(allocate(12, "i8", ALLOC_STATIC), 8);

assert(tempDoublePtr % 8 == 0);

function copyTempFloat(ptr) { // functions, because inlining this code increases code size too much

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

}

function copyTempDouble(ptr) {

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

  HEAP8[tempDoublePtr+4] = HEAP8[ptr+4];

  HEAP8[tempDoublePtr+5] = HEAP8[ptr+5];

  HEAP8[tempDoublePtr+6] = HEAP8[ptr+6];

  HEAP8[tempDoublePtr+7] = HEAP8[ptr+7];

}


  var _llvm_dbg_declare=undefined;

  
  function _memset(ptr, value, num) {
      ptr = ptr|0; value = value|0; num = num|0;
      var stop = 0, value4 = 0, stop4 = 0, unaligned = 0;
      stop = (ptr + num)|0;
      if ((num|0) >= 20) {
        // This is unaligned, but quite large, so work hard to get to aligned settings
        value = value & 0xff;
        unaligned = ptr & 3;
        value4 = value | (value << 8) | (value << 16) | (value << 24);
        stop4 = stop & ~3;
        if (unaligned) {
          unaligned = (ptr + 4 - unaligned)|0;
          while ((ptr|0) < (unaligned|0)) { // no need to check for stop, since we have large num
            HEAP8[((ptr)>>0)]=value;
            ptr = (ptr+1)|0;
          }
        }
        while ((ptr|0) < (stop4|0)) {
          HEAP32[((ptr)>>2)]=value4;
          ptr = (ptr+4)|0;
        }
      }
      while ((ptr|0) < (stop|0)) {
        HEAP8[((ptr)>>0)]=value;
        ptr = (ptr+1)|0;
      }
      return (ptr-num)|0;
    }var _llvm_memset_p0i8_i32=_memset;

  function _strlen(ptr) {
      ptr = ptr|0;
      var curr = 0;
      curr = ptr;
      while (HEAP8[((curr)>>0)]) {
        curr = (curr + 1)|0;
      }
      return (curr - ptr)|0;
    }

  function _strcpy(pdest, psrc) {
      pdest = pdest|0; psrc = psrc|0;
      var i = 0;
      do {
        HEAP8[(((pdest+i)|0)>>0)]=HEAP8[(((psrc+i)|0)>>0)];
        i = (i+1)|0;
      } while (HEAP8[(((psrc)+(i-1))>>0)]);
      return pdest|0;
    }

  
  function __exit(status) {
      // void _exit(int status);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/exit.html
      Module['exit'](status);
    }function _exit(status) {
      __exit(status);
    }

  
  
  function _emscripten_memcpy_big(dest, src, num) {
      HEAPU8.set(HEAPU8.subarray(src, src+num), dest);
      return dest;
    }function _memcpy(dest, src, num) {
  
      dest = dest|0; src = src|0; num = num|0;
      var ret = 0;
      if ((num|0) >= 4096) return _emscripten_memcpy_big(dest|0, src|0, num|0)|0;
      ret = dest|0;
      if ((dest&3) == (src&3)) {
        while (dest & 3) {
          if ((num|0) == 0) return ret|0;
          HEAP8[((dest)>>0)]=HEAP8[((src)>>0)];
          dest = (dest+1)|0;
          src = (src+1)|0;
          num = (num-1)|0;
        }
        while ((num|0) >= 4) {
          HEAP32[((dest)>>2)]=HEAP32[((src)>>2)];
          dest = (dest+4)|0;
          src = (src+4)|0;
          num = (num-4)|0;
        }
      }
      while ((num|0) > 0) {
        HEAP8[((dest)>>0)]=HEAP8[((src)>>0)];
        dest = (dest+1)|0;
        src = (src+1)|0;
        num = (num-1)|0;
      }
      return ret|0;
    }var _llvm_memcpy_p0i8_p0i8_i32=_memcpy;

  
  
  
  var ERRNO_CODES={EPERM:1,ENOENT:2,ESRCH:3,EINTR:4,EIO:5,ENXIO:6,E2BIG:7,ENOEXEC:8,EBADF:9,ECHILD:10,EAGAIN:11,EWOULDBLOCK:11,ENOMEM:12,EACCES:13,EFAULT:14,ENOTBLK:15,EBUSY:16,EEXIST:17,EXDEV:18,ENODEV:19,ENOTDIR:20,EISDIR:21,EINVAL:22,ENFILE:23,EMFILE:24,ENOTTY:25,ETXTBSY:26,EFBIG:27,ENOSPC:28,ESPIPE:29,EROFS:30,EMLINK:31,EPIPE:32,EDOM:33,ERANGE:34,ENOMSG:42,EIDRM:43,ECHRNG:44,EL2NSYNC:45,EL3HLT:46,EL3RST:47,ELNRNG:48,EUNATCH:49,ENOCSI:50,EL2HLT:51,EDEADLK:35,ENOLCK:37,EBADE:52,EBADR:53,EXFULL:54,ENOANO:55,EBADRQC:56,EBADSLT:57,EDEADLOCK:35,EBFONT:59,ENOSTR:60,ENODATA:61,ETIME:62,ENOSR:63,ENONET:64,ENOPKG:65,EREMOTE:66,ENOLINK:67,EADV:68,ESRMNT:69,ECOMM:70,EPROTO:71,EMULTIHOP:72,EDOTDOT:73,EBADMSG:74,ENOTUNIQ:76,EBADFD:77,EREMCHG:78,ELIBACC:79,ELIBBAD:80,ELIBSCN:81,ELIBMAX:82,ELIBEXEC:83,ENOSYS:38,ENOTEMPTY:39,ENAMETOOLONG:36,ELOOP:40,EOPNOTSUPP:95,EPFNOSUPPORT:96,ECONNRESET:104,ENOBUFS:105,EAFNOSUPPORT:97,EPROTOTYPE:91,ENOTSOCK:88,ENOPROTOOPT:92,ESHUTDOWN:108,ECONNREFUSED:111,EADDRINUSE:98,ECONNABORTED:103,ENETUNREACH:101,ENETDOWN:100,ETIMEDOUT:110,EHOSTDOWN:112,EHOSTUNREACH:113,EINPROGRESS:115,EALREADY:114,EDESTADDRREQ:89,EMSGSIZE:90,EPROTONOSUPPORT:93,ESOCKTNOSUPPORT:94,EADDRNOTAVAIL:99,ENETRESET:102,EISCONN:106,ENOTCONN:107,ETOOMANYREFS:109,EUSERS:87,EDQUOT:122,ESTALE:116,ENOTSUP:95,ENOMEDIUM:123,EILSEQ:84,EOVERFLOW:75,ECANCELED:125,ENOTRECOVERABLE:131,EOWNERDEAD:130,ESTRPIPE:86};
  
  var ERRNO_MESSAGES={0:"Success",1:"Not super-user",2:"No such file or directory",3:"No such process",4:"Interrupted system call",5:"I/O error",6:"No such device or address",7:"Arg list too long",8:"Exec format error",9:"Bad file number",10:"No children",11:"No more processes",12:"Not enough core",13:"Permission denied",14:"Bad address",15:"Block device required",16:"Mount device busy",17:"File exists",18:"Cross-device link",19:"No such device",20:"Not a directory",21:"Is a directory",22:"Invalid argument",23:"Too many open files in system",24:"Too many open files",25:"Not a typewriter",26:"Text file busy",27:"File too large",28:"No space left on device",29:"Illegal seek",30:"Read only file system",31:"Too many links",32:"Broken pipe",33:"Math arg out of domain of func",34:"Math result not representable",35:"File locking deadlock error",36:"File or path name too long",37:"No record locks available",38:"Function not implemented",39:"Directory not empty",40:"Too many symbolic links",42:"No message of desired type",43:"Identifier removed",44:"Channel number out of range",45:"Level 2 not synchronized",46:"Level 3 halted",47:"Level 3 reset",48:"Link number out of range",49:"Protocol driver not attached",50:"No CSI structure available",51:"Level 2 halted",52:"Invalid exchange",53:"Invalid request descriptor",54:"Exchange full",55:"No anode",56:"Invalid request code",57:"Invalid slot",59:"Bad font file fmt",60:"Device not a stream",61:"No data (for no delay io)",62:"Timer expired",63:"Out of streams resources",64:"Machine is not on the network",65:"Package not installed",66:"The object is remote",67:"The link has been severed",68:"Advertise error",69:"Srmount error",70:"Communication error on send",71:"Protocol error",72:"Multihop attempted",73:"Cross mount point (not really error)",74:"Trying to read unreadable message",75:"Value too large for defined data type",76:"Given log. name not unique",77:"f.d. invalid for this operation",78:"Remote address changed",79:"Can   access a needed shared lib",80:"Accessing a corrupted shared lib",81:".lib section in a.out corrupted",82:"Attempting to link in too many libs",83:"Attempting to exec a shared library",84:"Illegal byte sequence",86:"Streams pipe error",87:"Too many users",88:"Socket operation on non-socket",89:"Destination address required",90:"Message too long",91:"Protocol wrong type for socket",92:"Protocol not available",93:"Unknown protocol",94:"Socket type not supported",95:"Not supported",96:"Protocol family not supported",97:"Address family not supported by protocol family",98:"Address already in use",99:"Address not available",100:"Network interface is not configured",101:"Network is unreachable",102:"Connection reset by network",103:"Connection aborted",104:"Connection reset by peer",105:"No buffer space available",106:"Socket is already connected",107:"Socket is not connected",108:"Can't send after socket shutdown",109:"Too many references",110:"Connection timed out",111:"Connection refused",112:"Host is down",113:"Host is unreachable",114:"Socket already connected",115:"Connection already in progress",116:"Stale file handle",122:"Quota exceeded",123:"No medium (in tape drive)",125:"Operation canceled",130:"Previous owner died",131:"State not recoverable"};
  
  
  var ___errno_state=0;function ___setErrNo(value) {
      // For convenient setting and returning of errno.
      HEAP32[((___errno_state)>>2)]=value;
      return value;
    }
  
  var PATH={splitPath:function(filename) {
        var splitPathRe = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
        return splitPathRe.exec(filename).slice(1);
      },normalizeArray:function(parts, allowAboveRoot) {
        // if the path tries to go above the root, `up` ends up > 0
        var up = 0;
        for (var i = parts.length - 1; i >= 0; i--) {
          var last = parts[i];
          if (last === '.') {
            parts.splice(i, 1);
          } else if (last === '..') {
            parts.splice(i, 1);
            up++;
          } else if (up) {
            parts.splice(i, 1);
            up--;
          }
        }
        // if the path is allowed to go above the root, restore leading ..s
        if (allowAboveRoot) {
          for (; up--; up) {
            parts.unshift('..');
          }
        }
        return parts;
      },normalize:function(path) {
        var isAbsolute = path.charAt(0) === '/',
            trailingSlash = path.substr(-1) === '/';
        // Normalize the path
        path = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), !isAbsolute).join('/');
        if (!path && !isAbsolute) {
          path = '.';
        }
        if (path && trailingSlash) {
          path += '/';
        }
        return (isAbsolute ? '/' : '') + path;
      },dirname:function(path) {
        var result = PATH.splitPath(path),
            root = result[0],
            dir = result[1];
        if (!root && !dir) {
          // No dirname whatsoever
          return '.';
        }
        if (dir) {
          // It has a dirname, strip trailing slash
          dir = dir.substr(0, dir.length - 1);
        }
        return root + dir;
      },basename:function(path) {
        // EMSCRIPTEN return '/'' for '/', not an empty string
        if (path === '/') return '/';
        var lastSlash = path.lastIndexOf('/');
        if (lastSlash === -1) return path;
        return path.substr(lastSlash+1);
      },extname:function(path) {
        return PATH.splitPath(path)[3];
      },join:function() {
        var paths = Array.prototype.slice.call(arguments, 0);
        return PATH.normalize(paths.join('/'));
      },join2:function(l, r) {
        return PATH.normalize(l + '/' + r);
      },resolve:function() {
        var resolvedPath = '',
          resolvedAbsolute = false;
        for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
          var path = (i >= 0) ? arguments[i] : FS.cwd();
          // Skip empty and invalid entries
          if (typeof path !== 'string') {
            throw new TypeError('Arguments to path.resolve must be strings');
          } else if (!path) {
            return ''; // an invalid portion invalidates the whole thing
          }
          resolvedPath = path + '/' + resolvedPath;
          resolvedAbsolute = path.charAt(0) === '/';
        }
        // At this point the path should be resolved to a full absolute path, but
        // handle relative paths to be safe (might happen when process.cwd() fails)
        resolvedPath = PATH.normalizeArray(resolvedPath.split('/').filter(function(p) {
          return !!p;
        }), !resolvedAbsolute).join('/');
        return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
      },relative:function(from, to) {
        from = PATH.resolve(from).substr(1);
        to = PATH.resolve(to).substr(1);
        function trim(arr) {
          var start = 0;
          for (; start < arr.length; start++) {
            if (arr[start] !== '') break;
          }
          var end = arr.length - 1;
          for (; end >= 0; end--) {
            if (arr[end] !== '') break;
          }
          if (start > end) return [];
          return arr.slice(start, end - start + 1);
        }
        var fromParts = trim(from.split('/'));
        var toParts = trim(to.split('/'));
        var length = Math.min(fromParts.length, toParts.length);
        var samePartsLength = length;
        for (var i = 0; i < length; i++) {
          if (fromParts[i] !== toParts[i]) {
            samePartsLength = i;
            break;
          }
        }
        var outputParts = [];
        for (var i = samePartsLength; i < fromParts.length; i++) {
          outputParts.push('..');
        }
        outputParts = outputParts.concat(toParts.slice(samePartsLength));
        return outputParts.join('/');
      }};
  
  var TTY={ttys:[],init:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // currently, FS.init does not distinguish if process.stdin is a file or TTY
        //   // device, it always assumes it's a TTY device. because of this, we're forcing
        //   // process.stdin to UTF8 encoding to at least make stdin reading compatible
        //   // with text files until FS.init can be refactored.
        //   process['stdin']['setEncoding']('utf8');
        // }
      },shutdown:function() {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // inolen: any idea as to why node -e 'process.stdin.read()' wouldn't exit immediately (with process.stdin being a tty)?
        //   // isaacs: because now it's reading from the stream, you've expressed interest in it, so that read() kicks off a _read() which creates a ReadReq operation
        //   // inolen: I thought read() in that case was a synchronous operation that just grabbed some amount of buffered data if it exists?
        //   // isaacs: it is. but it also triggers a _read() call, which calls readStart() on the handle
        //   // isaacs: do process.stdin.pause() and i'd think it'd probably close the pending call
        //   process['stdin']['pause']();
        // }
      },register:function(dev, ops) {
        TTY.ttys[dev] = { input: [], output: [], ops: ops };
        FS.registerDevice(dev, TTY.stream_ops);
      },stream_ops:{open:function(stream) {
          var tty = TTY.ttys[stream.node.rdev];
          if (!tty) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          stream.tty = tty;
          stream.seekable = false;
        },close:function(stream) {
          // flush any pending line data
          if (stream.tty.output.length) {
            stream.tty.ops.put_char(stream.tty, 10);
          }
        },read:function(stream, buffer, offset, length, pos /* ignored */) {
          if (!stream.tty || !stream.tty.ops.get_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          var bytesRead = 0;
          for (var i = 0; i < length; i++) {
            var result;
            try {
              result = stream.tty.ops.get_char(stream.tty);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            if (result === undefined && bytesRead === 0) {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
            if (result === null || result === undefined) break;
            bytesRead++;
            buffer[offset+i] = result;
          }
          if (bytesRead) {
            stream.node.timestamp = Date.now();
          }
          return bytesRead;
        },write:function(stream, buffer, offset, length, pos) {
          if (!stream.tty || !stream.tty.ops.put_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          for (var i = 0; i < length; i++) {
            try {
              stream.tty.ops.put_char(stream.tty, buffer[offset+i]);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
          }
          if (length) {
            stream.node.timestamp = Date.now();
          }
          return i;
        }},default_tty_ops:{get_char:function(tty) {
          if (!tty.input.length) {
            var result = null;
            if (ENVIRONMENT_IS_NODE) {
              result = process['stdin']['read']();
              if (!result) {
                if (process['stdin']['_readableState'] && process['stdin']['_readableState']['ended']) {
                  return null;  // EOF
                }
                return undefined;  // no data available
              }
            } else if (typeof window != 'undefined' &&
              typeof window.prompt == 'function') {
              // Browser.
              result = window.prompt('Input: ');  // returns null on cancel
              if (result !== null) {
                result += '\n';
              }
            } else if (typeof readline == 'function') {
              // Command line.
              result = readline();
              if (result !== null) {
                result += '\n';
              }
            }
            if (!result) {
              return null;
            }
            tty.input = intArrayFromString(result, true);
          }
          return tty.input.shift();
        },put_char:function(tty, val) {
          if (val === null || val === 10) {
            Module['print'](tty.output.join(''));
            tty.output = [];
          } else {
            tty.output.push(TTY.utf8.processCChar(val));
          }
        }},default_tty1_ops:{put_char:function(tty, val) {
          if (val === null || val === 10) {
            Module['printErr'](tty.output.join(''));
            tty.output = [];
          } else {
            tty.output.push(TTY.utf8.processCChar(val));
          }
        }}};
  
  var MEMFS={ops_table:null,mount:function(mount) {
        return MEMFS.createNode(null, '/', 16384 | 511 /* 0777 */, 0);
      },createNode:function(parent, name, mode, dev) {
        if (FS.isBlkdev(mode) || FS.isFIFO(mode)) {
          // no supported
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (!MEMFS.ops_table) {
          MEMFS.ops_table = {
            dir: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                lookup: MEMFS.node_ops.lookup,
                mknod: MEMFS.node_ops.mknod,
                rename: MEMFS.node_ops.rename,
                unlink: MEMFS.node_ops.unlink,
                rmdir: MEMFS.node_ops.rmdir,
                readdir: MEMFS.node_ops.readdir,
                symlink: MEMFS.node_ops.symlink
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek
              }
            },
            file: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek,
                read: MEMFS.stream_ops.read,
                write: MEMFS.stream_ops.write,
                allocate: MEMFS.stream_ops.allocate,
                mmap: MEMFS.stream_ops.mmap
              }
            },
            link: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                readlink: MEMFS.node_ops.readlink
              },
              stream: {}
            },
            chrdev: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: FS.chrdev_stream_ops
            },
          };
        }
        var node = FS.createNode(parent, name, mode, dev);
        if (FS.isDir(node.mode)) {
          node.node_ops = MEMFS.ops_table.dir.node;
          node.stream_ops = MEMFS.ops_table.dir.stream;
          node.contents = {};
        } else if (FS.isFile(node.mode)) {
          node.node_ops = MEMFS.ops_table.file.node;
          node.stream_ops = MEMFS.ops_table.file.stream;
          node.usedBytes = 0; // The actual number of bytes used in the typed array, as opposed to contents.buffer.byteLength which gives the whole capacity.
          // When the byte data of the file is populated, this will point to either a typed array, or a normal JS array. Typed arrays are preferred
          // for performance, and used by default. However, typed arrays are not resizable like normal JS arrays are, so there is a small disk size
          // penalty involved for appending file writes that continuously grow a file similar to std::vector capacity vs used -scheme.
          node.contents = null; 
        } else if (FS.isLink(node.mode)) {
          node.node_ops = MEMFS.ops_table.link.node;
          node.stream_ops = MEMFS.ops_table.link.stream;
        } else if (FS.isChrdev(node.mode)) {
          node.node_ops = MEMFS.ops_table.chrdev.node;
          node.stream_ops = MEMFS.ops_table.chrdev.stream;
        }
        node.timestamp = Date.now();
        // add the new node to the parent
        if (parent) {
          parent.contents[name] = node;
        }
        return node;
      },getFileDataAsRegularArray:function(node) {
        if (node.contents && node.contents.subarray) {
          var arr = [];
          for (var i = 0; i < node.usedBytes; ++i) arr.push(node.contents[i]);
          return arr; // Returns a copy of the original data.
        }
        return node.contents; // No-op, the file contents are already in a JS array. Return as-is.
      },getFileDataAsTypedArray:function(node) {
        if (!node.contents) return new Uint8Array;
        if (node.contents.subarray) return node.contents.subarray(0, node.usedBytes); // Make sure to not return excess unused bytes.
        return new Uint8Array(node.contents);
      },expandFileStorage:function(node, newCapacity) {
  
        // If we are asked to expand the size of a file that already exists, revert to using a standard JS array to store the file
        // instead of a typed array. This makes resizing the array more flexible because we can just .push() elements at the back to
        // increase the size.
        if (node.contents && node.contents.subarray && newCapacity > node.contents.length) {
          node.contents = MEMFS.getFileDataAsRegularArray(node);
          node.usedBytes = node.contents.length; // We might be writing to a lazy-loaded file which had overridden this property, so force-reset it.
        }
  
        if (!node.contents || node.contents.subarray) { // Keep using a typed array if creating a new storage, or if old one was a typed array as well.
          var prevCapacity = node.contents ? node.contents.buffer.byteLength : 0;
          if (prevCapacity >= newCapacity) return; // No need to expand, the storage was already large enough.
          // Don't expand strictly to the given requested limit if it's only a very small increase, but instead geometrically grow capacity.
          // For small filesizes (<1MB), perform size*2 geometric increase, but for large sizes, do a much more conservative size*1.125 increase to
          // avoid overshooting the allocation cap by a very large margin.
          var CAPACITY_DOUBLING_MAX = 1024 * 1024;
          newCapacity = Math.max(newCapacity, (prevCapacity * (prevCapacity < CAPACITY_DOUBLING_MAX ? 2.0 : 1.125)) | 0);
          if (prevCapacity != 0) newCapacity = Math.max(newCapacity, 256); // At minimum allocate 256b for each file when expanding.
          var oldContents = node.contents;
          node.contents = new Uint8Array(newCapacity); // Allocate new storage.
          if (node.usedBytes > 0) node.contents.set(oldContents.subarray(0, node.usedBytes), 0); // Copy old data over to the new storage.
          return;
        }
        // Not using a typed array to back the file storage. Use a standard JS array instead.
        if (!node.contents && newCapacity > 0) node.contents = [];
        while (node.contents.length < newCapacity) node.contents.push(0);
      },resizeFileStorage:function(node, newSize) {
        if (node.usedBytes == newSize) return;
        if (newSize == 0) {
          node.contents = null; // Fully decommit when requesting a resize to zero.
          node.usedBytes = 0;
          return;
        }
  
        if (!node.contents || node.contents.subarray) { // Resize a typed array if that is being used as the backing store.
          var oldContents = node.contents;
          node.contents = new Uint8Array(new ArrayBuffer(newSize)); // Allocate new storage.
          if (oldContents) {
            node.contents.set(oldContents.subarray(0, Math.min(newSize, node.usedBytes))); // Copy old data over to the new storage.
          }
          node.usedBytes = newSize;
          return;
        }
        // Backing with a JS array.
        if (!node.contents) node.contents = [];
        if (node.contents.length > newSize) node.contents.length = newSize;
        else while (node.contents.length < newSize) node.contents.push(0);
        node.usedBytes = newSize;
      },node_ops:{getattr:function(node) {
          var attr = {};
          // device numbers reuse inode numbers.
          attr.dev = FS.isChrdev(node.mode) ? node.id : 1;
          attr.ino = node.id;
          attr.mode = node.mode;
          attr.nlink = 1;
          attr.uid = 0;
          attr.gid = 0;
          attr.rdev = node.rdev;
          if (FS.isDir(node.mode)) {
            attr.size = 4096;
          } else if (FS.isFile(node.mode)) {
            attr.size = node.usedBytes;
          } else if (FS.isLink(node.mode)) {
            attr.size = node.link.length;
          } else {
            attr.size = 0;
          }
          attr.atime = new Date(node.timestamp);
          attr.mtime = new Date(node.timestamp);
          attr.ctime = new Date(node.timestamp);
          // NOTE: In our implementation, st_blocks = Math.ceil(st_size/st_blksize),
          //       but this is not required by the standard.
          attr.blksize = 4096;
          attr.blocks = Math.ceil(attr.size / attr.blksize);
          return attr;
        },setattr:function(node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
          if (attr.size !== undefined) {
            MEMFS.resizeFileStorage(node, attr.size);
          }
        },lookup:function(parent, name) {
          throw FS.genericErrors[ERRNO_CODES.ENOENT];
        },mknod:function(parent, name, mode, dev) {
          return MEMFS.createNode(parent, name, mode, dev);
        },rename:function(old_node, new_dir, new_name) {
          // if we're overwriting a directory at new_name, make sure it's empty.
          if (FS.isDir(old_node.mode)) {
            var new_node;
            try {
              new_node = FS.lookupNode(new_dir, new_name);
            } catch (e) {
            }
            if (new_node) {
              for (var i in new_node.contents) {
                throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
              }
            }
          }
          // do the internal rewiring
          delete old_node.parent.contents[old_node.name];
          old_node.name = new_name;
          new_dir.contents[new_name] = old_node;
          old_node.parent = new_dir;
        },unlink:function(parent, name) {
          delete parent.contents[name];
        },rmdir:function(parent, name) {
          var node = FS.lookupNode(parent, name);
          for (var i in node.contents) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
          }
          delete parent.contents[name];
        },readdir:function(node) {
          var entries = ['.', '..']
          for (var key in node.contents) {
            if (!node.contents.hasOwnProperty(key)) {
              continue;
            }
            entries.push(key);
          }
          return entries;
        },symlink:function(parent, newname, oldpath) {
          var node = MEMFS.createNode(parent, newname, 511 /* 0777 */ | 40960, 0);
          node.link = oldpath;
          return node;
        },readlink:function(node) {
          if (!FS.isLink(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return node.link;
        }},stream_ops:{read:function(stream, buffer, offset, length, position) {
          var contents = stream.node.contents;
          if (position >= stream.node.usedBytes) return 0;
          var size = Math.min(stream.node.usedBytes - position, length);
          assert(size >= 0);
          if (size > 8 && contents.subarray) { // non-trivial, and typed array
            buffer.set(contents.subarray(position, position + size), offset);
          } else
          {
            for (var i = 0; i < size; i++) buffer[offset + i] = contents[position + i];
          }
          return size;
        },write:function(stream, buffer, offset, length, position, canOwn) {
          if (!length) return 0;
          var node = stream.node;
          node.timestamp = Date.now();
  
          if (buffer.subarray && (!node.contents || node.contents.subarray)) { // This write is from a typed array to a typed array?
            if (canOwn) { // Can we just reuse the buffer we are given?
              assert(position === 0, 'canOwn must imply no weird position inside the file');
              node.contents = buffer.subarray(offset, offset + length);
              node.usedBytes = length;
              return length;
            } else if (node.usedBytes === 0 && position === 0) { // If this is a simple first write to an empty file, do a fast set since we don't need to care about old data.
              node.contents = new Uint8Array(buffer.subarray(offset, offset + length));
              node.usedBytes = length;
              return length;
            } else if (position + length <= node.usedBytes) { // Writing to an already allocated and used subrange of the file?
              node.contents.set(buffer.subarray(offset, offset + length), position);
              return length;
            }
          }
          // Appending to an existing file and we need to reallocate, or source data did not come as a typed array.
          MEMFS.expandFileStorage(node, position+length);
          if (node.contents.subarray && buffer.subarray) node.contents.set(buffer.subarray(offset, offset + length), position); // Use typed array write if available.
          else
            for (var i = 0; i < length; i++) {
             node.contents[position + i] = buffer[offset + i]; // Or fall back to manual write if not.
            }
          node.usedBytes = Math.max(node.usedBytes, position+length);
          return length;
        },llseek:function(stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.usedBytes;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return position;
        },allocate:function(stream, offset, length) {
          MEMFS.expandFileStorage(stream.node, offset + length);
          stream.node.usedBytes = Math.max(stream.node.usedBytes, offset + length);
        },mmap:function(stream, buffer, offset, length, position, prot, flags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          var ptr;
          var allocated;
          var contents = stream.node.contents;
          // Only make a new copy when MAP_PRIVATE is specified.
          if ( !(flags & 2) &&
                (contents.buffer === buffer || contents.buffer === buffer.buffer) ) {
            // We can't emulate MAP_SHARED when the file is not backed by the buffer
            // we're mapping to (e.g. the HEAP buffer).
            allocated = false;
            ptr = contents.byteOffset;
          } else {
            // Try to avoid unnecessary slices.
            if (position > 0 || position + length < stream.node.usedBytes) {
              if (contents.subarray) {
                contents = contents.subarray(position, position + length);
              } else {
                contents = Array.prototype.slice.call(contents, position, position + length);
              }
            }
            allocated = true;
            ptr = _malloc(length);
            if (!ptr) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOMEM);
            }
            buffer.set(contents, ptr);
          }
          return { ptr: ptr, allocated: allocated };
        }}};
  
  var IDBFS={dbs:{},indexedDB:function() {
        if (typeof indexedDB !== 'undefined') return indexedDB;
        var ret = null;
        if (typeof window === 'object') ret = window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
        assert(ret, 'IDBFS used, but indexedDB not supported');
        return ret;
      },DB_VERSION:21,DB_STORE_NAME:"FILE_DATA",mount:function(mount) {
        // reuse all of the core MEMFS functionality
        return MEMFS.mount.apply(null, arguments);
      },syncfs:function(mount, populate, callback) {
        IDBFS.getLocalSet(mount, function(err, local) {
          if (err) return callback(err);
  
          IDBFS.getRemoteSet(mount, function(err, remote) {
            if (err) return callback(err);
  
            var src = populate ? remote : local;
            var dst = populate ? local : remote;
  
            IDBFS.reconcile(src, dst, callback);
          });
        });
      },getDB:function(name, callback) {
        // check the cache first
        var db = IDBFS.dbs[name];
        if (db) {
          return callback(null, db);
        }
  
        var req;
        try {
          req = IDBFS.indexedDB().open(name, IDBFS.DB_VERSION);
        } catch (e) {
          return callback(e);
        }
        req.onupgradeneeded = function(e) {
          var db = e.target.result;
          var transaction = e.target.transaction;
  
          var fileStore;
  
          if (db.objectStoreNames.contains(IDBFS.DB_STORE_NAME)) {
            fileStore = transaction.objectStore(IDBFS.DB_STORE_NAME);
          } else {
            fileStore = db.createObjectStore(IDBFS.DB_STORE_NAME);
          }
  
          fileStore.createIndex('timestamp', 'timestamp', { unique: false });
        };
        req.onsuccess = function() {
          db = req.result;
  
          // add to the cache
          IDBFS.dbs[name] = db;
          callback(null, db);
        };
        req.onerror = function() {
          callback(this.error);
        };
      },getLocalSet:function(mount, callback) {
        var entries = {};
  
        function isRealDir(p) {
          return p !== '.' && p !== '..';
        };
        function toAbsolute(root) {
          return function(p) {
            return PATH.join2(root, p);
          }
        };
  
        var check = FS.readdir(mount.mountpoint).filter(isRealDir).map(toAbsolute(mount.mountpoint));
  
        while (check.length) {
          var path = check.pop();
          var stat;
  
          try {
            stat = FS.stat(path);
          } catch (e) {
            return callback(e);
          }
  
          if (FS.isDir(stat.mode)) {
            check.push.apply(check, FS.readdir(path).filter(isRealDir).map(toAbsolute(path)));
          }
  
          entries[path] = { timestamp: stat.mtime };
        }
  
        return callback(null, { type: 'local', entries: entries });
      },getRemoteSet:function(mount, callback) {
        var entries = {};
  
        IDBFS.getDB(mount.mountpoint, function(err, db) {
          if (err) return callback(err);
  
          var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readonly');
          transaction.onerror = function() { callback(this.error); };
  
          var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
          var index = store.index('timestamp');
  
          index.openKeyCursor().onsuccess = function(event) {
            var cursor = event.target.result;
  
            if (!cursor) {
              return callback(null, { type: 'remote', db: db, entries: entries });
            }
  
            entries[cursor.primaryKey] = { timestamp: cursor.key };
  
            cursor.continue();
          };
        });
      },loadLocalEntry:function(path, callback) {
        var stat, node;
  
        try {
          var lookup = FS.lookupPath(path);
          node = lookup.node;
          stat = FS.stat(path);
        } catch (e) {
          return callback(e);
        }
  
        if (FS.isDir(stat.mode)) {
          return callback(null, { timestamp: stat.mtime, mode: stat.mode });
        } else if (FS.isFile(stat.mode)) {
          // Performance consideration: storing a normal JavaScript array to a IndexedDB is much slower than storing a typed array.
          // Therefore always convert the file contents to a typed array first before writing the data to IndexedDB.
          node.contents = MEMFS.getFileDataAsTypedArray(node);
          return callback(null, { timestamp: stat.mtime, mode: stat.mode, contents: node.contents });
        } else {
          return callback(new Error('node type not supported'));
        }
      },storeLocalEntry:function(path, entry, callback) {
        try {
          if (FS.isDir(entry.mode)) {
            FS.mkdir(path, entry.mode);
          } else if (FS.isFile(entry.mode)) {
            FS.writeFile(path, entry.contents, { encoding: 'binary', canOwn: true });
          } else {
            return callback(new Error('node type not supported'));
          }
  
          FS.chmod(path, entry.mode);
          FS.utime(path, entry.timestamp, entry.timestamp);
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },removeLocalEntry:function(path, callback) {
        try {
          var lookup = FS.lookupPath(path);
          var stat = FS.stat(path);
  
          if (FS.isDir(stat.mode)) {
            FS.rmdir(path);
          } else if (FS.isFile(stat.mode)) {
            FS.unlink(path);
          }
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },loadRemoteEntry:function(store, path, callback) {
        var req = store.get(path);
        req.onsuccess = function(event) { callback(null, event.target.result); };
        req.onerror = function() { callback(this.error); };
      },storeRemoteEntry:function(store, path, entry, callback) {
        var req = store.put(entry, path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function() { callback(this.error); };
      },removeRemoteEntry:function(store, path, callback) {
        var req = store.delete(path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function() { callback(this.error); };
      },reconcile:function(src, dst, callback) {
        var total = 0;
  
        var create = [];
        Object.keys(src.entries).forEach(function (key) {
          var e = src.entries[key];
          var e2 = dst.entries[key];
          if (!e2 || e.timestamp > e2.timestamp) {
            create.push(key);
            total++;
          }
        });
  
        var remove = [];
        Object.keys(dst.entries).forEach(function (key) {
          var e = dst.entries[key];
          var e2 = src.entries[key];
          if (!e2) {
            remove.push(key);
            total++;
          }
        });
  
        if (!total) {
          return callback(null);
        }
  
        var errored = false;
        var completed = 0;
        var db = src.type === 'remote' ? src.db : dst.db;
        var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readwrite');
        var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return callback(err);
            }
            return;
          }
          if (++completed >= total) {
            return callback(null);
          }
        };
  
        transaction.onerror = function() { done(this.error); };
  
        // sort paths in ascending order so directory entries are created
        // before the files inside them
        create.sort().forEach(function (path) {
          if (dst.type === 'local') {
            IDBFS.loadRemoteEntry(store, path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeLocalEntry(path, entry, done);
            });
          } else {
            IDBFS.loadLocalEntry(path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeRemoteEntry(store, path, entry, done);
            });
          }
        });
  
        // sort paths in descending order so files are deleted before their
        // parent directories
        remove.sort().reverse().forEach(function(path) {
          if (dst.type === 'local') {
            IDBFS.removeLocalEntry(path, done);
          } else {
            IDBFS.removeRemoteEntry(store, path, done);
          }
        });
      }};
  
  var NODEFS={isWindows:false,staticInit:function() {
        NODEFS.isWindows = !!process.platform.match(/^win/);
      },mount:function (mount) {
        assert(ENVIRONMENT_IS_NODE);
        return NODEFS.createNode(null, '/', NODEFS.getMode(mount.opts.root), 0);
      },createNode:function (parent, name, mode, dev) {
        if (!FS.isDir(mode) && !FS.isFile(mode) && !FS.isLink(mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node = FS.createNode(parent, name, mode);
        node.node_ops = NODEFS.node_ops;
        node.stream_ops = NODEFS.stream_ops;
        return node;
      },getMode:function (path) {
        var stat;
        try {
          stat = fs.lstatSync(path);
          if (NODEFS.isWindows) {
            // On Windows, directories return permission bits 'rw-rw-rw-', even though they have 'rwxrwxrwx', so 
            // propagate write bits to execute bits.
            stat.mode = stat.mode | ((stat.mode & 146) >> 1);
          }
        } catch (e) {
          if (!e.code) throw e;
          throw new FS.ErrnoError(ERRNO_CODES[e.code]);
        }
        return stat.mode;
      },realPath:function (node) {
        var parts = [];
        while (node.parent !== node) {
          parts.push(node.name);
          node = node.parent;
        }
        parts.push(node.mount.opts.root);
        parts.reverse();
        return PATH.join.apply(null, parts);
      },flagsToPermissionStringMap:{0:"r",1:"r+",2:"r+",64:"r",65:"r+",66:"r+",129:"rx+",193:"rx+",514:"w+",577:"w",578:"w+",705:"wx",706:"wx+",1024:"a",1025:"a",1026:"a+",1089:"a",1090:"a+",1153:"ax",1154:"ax+",1217:"ax",1218:"ax+",4096:"rs",4098:"rs+"},flagsToPermissionString:function(flags) {
        if (flags in NODEFS.flagsToPermissionStringMap) {
          return NODEFS.flagsToPermissionStringMap[flags];
        } else {
          return flags;
        }
      },node_ops:{getattr:function(node) {
          var path = NODEFS.realPath(node);
          var stat;
          try {
            stat = fs.lstatSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          // node.js v0.10.20 doesn't report blksize and blocks on Windows. Fake them with default blksize of 4096.
          // See http://support.microsoft.com/kb/140365
          if (NODEFS.isWindows && !stat.blksize) {
            stat.blksize = 4096;
          }
          if (NODEFS.isWindows && !stat.blocks) {
            stat.blocks = (stat.size+stat.blksize-1)/stat.blksize|0;
          }
          return {
            dev: stat.dev,
            ino: stat.ino,
            mode: stat.mode,
            nlink: stat.nlink,
            uid: stat.uid,
            gid: stat.gid,
            rdev: stat.rdev,
            size: stat.size,
            atime: stat.atime,
            mtime: stat.mtime,
            ctime: stat.ctime,
            blksize: stat.blksize,
            blocks: stat.blocks
          };
        },setattr:function(node, attr) {
          var path = NODEFS.realPath(node);
          try {
            if (attr.mode !== undefined) {
              fs.chmodSync(path, attr.mode);
              // update the common node structure mode as well
              node.mode = attr.mode;
            }
            if (attr.timestamp !== undefined) {
              var date = new Date(attr.timestamp);
              fs.utimesSync(path, date, date);
            }
            if (attr.size !== undefined) {
              fs.truncateSync(path, attr.size);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },lookup:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          var mode = NODEFS.getMode(path);
          return NODEFS.createNode(parent, name, mode);
        },mknod:function (parent, name, mode, dev) {
          var node = NODEFS.createNode(parent, name, mode, dev);
          // create the backing node for this in the fs root as well
          var path = NODEFS.realPath(node);
          try {
            if (FS.isDir(node.mode)) {
              fs.mkdirSync(path, node.mode);
            } else {
              fs.writeFileSync(path, '', { mode: node.mode });
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return node;
        },rename:function (oldNode, newDir, newName) {
          var oldPath = NODEFS.realPath(oldNode);
          var newPath = PATH.join2(NODEFS.realPath(newDir), newName);
          try {
            fs.renameSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },unlink:function(parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.unlinkSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },rmdir:function(parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.rmdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readdir:function(node) {
          var path = NODEFS.realPath(node);
          try {
            return fs.readdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },symlink:function(parent, newName, oldPath) {
          var newPath = PATH.join2(NODEFS.realPath(parent), newName);
          try {
            fs.symlinkSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readlink:function(node) {
          var path = NODEFS.realPath(node);
          try {
            return fs.readlinkSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        }},stream_ops:{open:function (stream) {
          var path = NODEFS.realPath(stream.node);
          try {
            if (FS.isFile(stream.node.mode)) {
              stream.nfd = fs.openSync(path, NODEFS.flagsToPermissionString(stream.flags));
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },close:function (stream) {
          try {
            if (FS.isFile(stream.node.mode) && stream.nfd) {
              fs.closeSync(stream.nfd);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },read:function (stream, buffer, offset, length, position) {
          if (length === 0) return 0; // node errors on 0 length reads
          // FIXME this is terrible.
          var nbuffer = new Buffer(length);
          var res;
          try {
            res = fs.readSync(stream.nfd, nbuffer, 0, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          if (res > 0) {
            for (var i = 0; i < res; i++) {
              buffer[offset + i] = nbuffer[i];
            }
          }
          return res;
        },write:function (stream, buffer, offset, length, position) {
          // FIXME this is terrible.
          var nbuffer = new Buffer(buffer.subarray(offset, offset + length));
          var res;
          try {
            res = fs.writeSync(stream.nfd, nbuffer, 0, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return res;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              try {
                var stat = fs.fstatSync(stream.nfd);
                position += stat.size;
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES[e.code]);
              }
            }
          }
  
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
  
          return position;
        }}};
  
  var _stdin=allocate(1, "i32*", ALLOC_STATIC);
  
  var _stdout=allocate(1, "i32*", ALLOC_STATIC);
  
  var _stderr=allocate(1, "i32*", ALLOC_STATIC);
  
  function _fflush(stream) {
      // int fflush(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fflush.html
      // we don't currently perform any user-space buffering of data
    }var FS={root:null,mounts:[],devices:[null],streams:[],nextInode:1,nameTable:null,currentPath:"/",initialized:false,ignorePermissions:true,trackingDelegate:{},tracking:{openFlags:{READ:1,WRITE:2}},ErrnoError:null,genericErrors:{},handleFSError:function(e) {
        if (!(e instanceof FS.ErrnoError)) throw e + ' : ' + stackTrace();
        return ___setErrNo(e.errno);
      },lookupPath:function(path, opts) {
        path = PATH.resolve(FS.cwd(), path);
        opts = opts || {};
  
        if (!path) return { path: '', node: null };
  
        var defaults = {
          follow_mount: true,
          recurse_count: 0
        };
        for (var key in defaults) {
          if (opts[key] === undefined) {
            opts[key] = defaults[key];
          }
        }
  
        if (opts.recurse_count > 8) {  // max recursive lookup of 8
          throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
        }
  
        // split the path
        var parts = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), false);
  
        // start at the root
        var current = FS.root;
        var current_path = '/';
  
        for (var i = 0; i < parts.length; i++) {
          var islast = (i === parts.length-1);
          if (islast && opts.parent) {
            // stop resolving
            break;
          }
  
          current = FS.lookupNode(current, parts[i]);
          current_path = PATH.join2(current_path, parts[i]);
  
          // jump to the mount's root node if this is a mountpoint
          if (FS.isMountpoint(current)) {
            if (!islast || (islast && opts.follow_mount)) {
              current = current.mounted.root;
            }
          }
  
          // by default, lookupPath will not follow a symlink if it is the final path component.
          // setting opts.follow = true will override this behavior.
          if (!islast || opts.follow) {
            var count = 0;
            while (FS.isLink(current.mode)) {
              var link = FS.readlink(current_path);
              current_path = PATH.resolve(PATH.dirname(current_path), link);
              
              var lookup = FS.lookupPath(current_path, { recurse_count: opts.recurse_count });
              current = lookup.node;
  
              if (count++ > 40) {  // limit max consecutive symlinks to 40 (SYMLOOP_MAX).
                throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
              }
            }
          }
        }
  
        return { path: current_path, node: current };
      },getPath:function(node) {
        var path;
        while (true) {
          if (FS.isRoot(node)) {
            var mount = node.mount.mountpoint;
            if (!path) return mount;
            return mount[mount.length-1] !== '/' ? mount + '/' + path : mount + path;
          }
          path = path ? node.name + '/' + path : node.name;
          node = node.parent;
        }
      },hashName:function(parentid, name) {
        var hash = 0;
  
  
        for (var i = 0; i < name.length; i++) {
          hash = ((hash << 5) - hash + name.charCodeAt(i)) | 0;
        }
        return ((parentid + hash) >>> 0) % FS.nameTable.length;
      },hashAddNode:function(node) {
        var hash = FS.hashName(node.parent.id, node.name);
        node.name_next = FS.nameTable[hash];
        FS.nameTable[hash] = node;
      },hashRemoveNode:function(node) {
        var hash = FS.hashName(node.parent.id, node.name);
        if (FS.nameTable[hash] === node) {
          FS.nameTable[hash] = node.name_next;
        } else {
          var current = FS.nameTable[hash];
          while (current) {
            if (current.name_next === node) {
              current.name_next = node.name_next;
              break;
            }
            current = current.name_next;
          }
        }
      },lookupNode:function(parent, name) {
        var err = FS.mayLookup(parent);
        if (err) {
          throw new FS.ErrnoError(err, parent);
        }
        var hash = FS.hashName(parent.id, name);
        for (var node = FS.nameTable[hash]; node; node = node.name_next) {
          var nodeName = node.name;
          if (node.parent.id === parent.id && nodeName === name) {
            return node;
          }
        }
        // if we failed to find it in the cache, call into the VFS
        return FS.lookup(parent, name);
      },createNode:function(parent, name, mode, rdev) {
        if (!FS.FSNode) {
          FS.FSNode = function(parent, name, mode, rdev) {
            if (!parent) {
              parent = this;  // root node sets parent to itself
            }
            this.parent = parent;
            this.mount = parent.mount;
            this.mounted = null;
            this.id = FS.nextInode++;
            this.name = name;
            this.mode = mode;
            this.node_ops = {};
            this.stream_ops = {};
            this.rdev = rdev;
          };
  
          FS.FSNode.prototype = {};
  
          // compatibility
          var readMode = 292 | 73;
          var writeMode = 146;
  
          // NOTE we must use Object.defineProperties instead of individual calls to
          // Object.defineProperty in order to make closure compiler happy
          Object.defineProperties(FS.FSNode.prototype, {
            read: {
              get: function() { return (this.mode & readMode) === readMode; },
              set: function(val) { val ? this.mode |= readMode : this.mode &= ~readMode; }
            },
            write: {
              get: function() { return (this.mode & writeMode) === writeMode; },
              set: function(val) { val ? this.mode |= writeMode : this.mode &= ~writeMode; }
            },
            isFolder: {
              get: function() { return FS.isDir(this.mode); },
            },
            isDevice: {
              get: function() { return FS.isChrdev(this.mode); },
            },
          });
        }
  
        var node = new FS.FSNode(parent, name, mode, rdev);
  
        FS.hashAddNode(node);
  
        return node;
      },destroyNode:function(node) {
        FS.hashRemoveNode(node);
      },isRoot:function(node) {
        return node === node.parent;
      },isMountpoint:function(node) {
        return !!node.mounted;
      },isFile:function(mode) {
        return (mode & 61440) === 32768;
      },isDir:function(mode) {
        return (mode & 61440) === 16384;
      },isLink:function(mode) {
        return (mode & 61440) === 40960;
      },isChrdev:function(mode) {
        return (mode & 61440) === 8192;
      },isBlkdev:function(mode) {
        return (mode & 61440) === 24576;
      },isFIFO:function(mode) {
        return (mode & 61440) === 4096;
      },isSocket:function(mode) {
        return (mode & 49152) === 49152;
      },flagModes:{"r":0,"rs":1052672,"r+":2,"w":577,"wx":705,"xw":705,"w+":578,"wx+":706,"xw+":706,"a":1089,"ax":1217,"xa":1217,"a+":1090,"ax+":1218,"xa+":1218},modeStringToFlags:function(str) {
        var flags = FS.flagModes[str];
        if (typeof flags === 'undefined') {
          throw new Error('Unknown file open mode: ' + str);
        }
        return flags;
      },flagsToPermissionString:function(flag) {
        var accmode = flag & 2097155;
        var perms = ['r', 'w', 'rw'][accmode];
        if ((flag & 512)) {
          perms += 'w';
        }
        return perms;
      },nodePermissions:function(node, perms) {
        if (FS.ignorePermissions) {
          return 0;
        }
        // return 0 if any user, group or owner bits are set.
        if (perms.indexOf('r') !== -1 && !(node.mode & 292)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('w') !== -1 && !(node.mode & 146)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('x') !== -1 && !(node.mode & 73)) {
          return ERRNO_CODES.EACCES;
        }
        return 0;
      },mayLookup:function(dir) {
        var err = FS.nodePermissions(dir, 'x');
        if (err) return err;
        if (!dir.node_ops.lookup) return ERRNO_CODES.EACCES;
        return 0;
      },mayCreate:function(dir, name) {
        try {
          var node = FS.lookupNode(dir, name);
          return ERRNO_CODES.EEXIST;
        } catch (e) {
        }
        return FS.nodePermissions(dir, 'wx');
      },mayDelete:function(dir, name, isdir) {
        var node;
        try {
          node = FS.lookupNode(dir, name);
        } catch (e) {
          return e.errno;
        }
        var err = FS.nodePermissions(dir, 'wx');
        if (err) {
          return err;
        }
        if (isdir) {
          if (!FS.isDir(node.mode)) {
            return ERRNO_CODES.ENOTDIR;
          }
          if (FS.isRoot(node) || FS.getPath(node) === FS.cwd()) {
            return ERRNO_CODES.EBUSY;
          }
        } else {
          if (FS.isDir(node.mode)) {
            return ERRNO_CODES.EISDIR;
          }
        }
        return 0;
      },mayOpen:function(node, flags) {
        if (!node) {
          return ERRNO_CODES.ENOENT;
        }
        if (FS.isLink(node.mode)) {
          return ERRNO_CODES.ELOOP;
        } else if (FS.isDir(node.mode)) {
          if ((flags & 2097155) !== 0 ||  // opening for write
              (flags & 512)) {
            return ERRNO_CODES.EISDIR;
          }
        }
        return FS.nodePermissions(node, FS.flagsToPermissionString(flags));
      },MAX_OPEN_FDS:4096,nextfd:function(fd_start, fd_end) {
        fd_start = fd_start || 0;
        fd_end = fd_end || FS.MAX_OPEN_FDS;
        for (var fd = fd_start; fd <= fd_end; fd++) {
          if (!FS.streams[fd]) {
            return fd;
          }
        }
        throw new FS.ErrnoError(ERRNO_CODES.EMFILE);
      },getStream:function(fd) {
        return FS.streams[fd];
      },createStream:function(stream, fd_start, fd_end) {
        if (!FS.FSStream) {
          FS.FSStream = function(){};
          FS.FSStream.prototype = {};
          // compatibility
          Object.defineProperties(FS.FSStream.prototype, {
            object: {
              get: function() { return this.node; },
              set: function(val) { this.node = val; }
            },
            isRead: {
              get: function() { return (this.flags & 2097155) !== 1; }
            },
            isWrite: {
              get: function() { return (this.flags & 2097155) !== 0; }
            },
            isAppend: {
              get: function() { return (this.flags & 1024); }
            }
          });
        }
        // clone it, so we can return an instance of FSStream
        var newStream = new FS.FSStream();
        for (var p in stream) {
          newStream[p] = stream[p];
        }
        stream = newStream;
        var fd = FS.nextfd(fd_start, fd_end);
        stream.fd = fd;
        FS.streams[fd] = stream;
        return stream;
      },closeStream:function(fd) {
        FS.streams[fd] = null;
      },getStreamFromPtr:function(ptr) {
        return FS.streams[ptr - 1];
      },getPtrForStream:function(stream) {
        return stream ? stream.fd + 1 : 0;
      },chrdev_stream_ops:{open:function(stream) {
          var device = FS.getDevice(stream.node.rdev);
          // override node's stream ops with the device's
          stream.stream_ops = device.stream_ops;
          // forward the open call
          if (stream.stream_ops.open) {
            stream.stream_ops.open(stream);
          }
        },llseek:function() {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }},major:function(dev) {
        return ((dev) >> 8);
      },minor:function(dev) {
        return ((dev) & 0xff);
      },makedev:function(ma, mi) {
        return ((ma) << 8 | (mi));
      },registerDevice:function(dev, ops) {
        FS.devices[dev] = { stream_ops: ops };
      },getDevice:function(dev) {
        return FS.devices[dev];
      },getMounts:function(mount) {
        var mounts = [];
        var check = [mount];
  
        while (check.length) {
          var m = check.pop();
  
          mounts.push(m);
  
          check.push.apply(check, m.mounts);
        }
  
        return mounts;
      },syncfs:function(populate, callback) {
        if (typeof(populate) === 'function') {
          callback = populate;
          populate = false;
        }
  
        var mounts = FS.getMounts(FS.root.mount);
        var completed = 0;
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return callback(err);
            }
            return;
          }
          if (++completed >= mounts.length) {
            callback(null);
          }
        };
  
        // sync all mounts
        mounts.forEach(function (mount) {
          if (!mount.type.syncfs) {
            return done(null);
          }
          mount.type.syncfs(mount, populate, done);
        });
      },mount:function(type, opts, mountpoint) {
        var root = mountpoint === '/';
        var pseudo = !mountpoint;
        var node;
  
        if (root && FS.root) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        } else if (!root && !pseudo) {
          var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
          mountpoint = lookup.path;  // use the absolute path
          node = lookup.node;
  
          if (FS.isMountpoint(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
          }
  
          if (!FS.isDir(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
          }
        }
  
        var mount = {
          type: type,
          opts: opts,
          mountpoint: mountpoint,
          mounts: []
        };
  
        // create a root node for the fs
        var mountRoot = type.mount(mount);
        mountRoot.mount = mount;
        mount.root = mountRoot;
  
        if (root) {
          FS.root = mountRoot;
        } else if (node) {
          // set as a mountpoint
          node.mounted = mount;
  
          // add the new mount to the current mount's children
          if (node.mount) {
            node.mount.mounts.push(mount);
          }
        }
  
        return mountRoot;
      },unmount:function (mountpoint) {
        var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
        if (!FS.isMountpoint(lookup.node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
  
        // destroy the nodes for this mount, and all its child mounts
        var node = lookup.node;
        var mount = node.mounted;
        var mounts = FS.getMounts(mount);
  
        Object.keys(FS.nameTable).forEach(function (hash) {
          var current = FS.nameTable[hash];
  
          while (current) {
            var next = current.name_next;
  
            if (mounts.indexOf(current.mount) !== -1) {
              FS.destroyNode(current);
            }
  
            current = next;
          }
        });
  
        // no longer a mountpoint
        node.mounted = null;
  
        // remove this mount from the child mounts
        var idx = node.mount.mounts.indexOf(mount);
        assert(idx !== -1);
        node.mount.mounts.splice(idx, 1);
      },lookup:function(parent, name) {
        return parent.node_ops.lookup(parent, name);
      },mknod:function(path, mode, dev) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        if (!name || name === '.' || name === '..') {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var err = FS.mayCreate(parent, name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.mknod) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.mknod(parent, name, mode, dev);
      },create:function(path, mode) {
        mode = mode !== undefined ? mode : 438 /* 0666 */;
        mode &= 4095;
        mode |= 32768;
        return FS.mknod(path, mode, 0);
      },mkdir:function(path, mode) {
        mode = mode !== undefined ? mode : 511 /* 0777 */;
        mode &= 511 | 512;
        mode |= 16384;
        return FS.mknod(path, mode, 0);
      },mkdev:function(path, mode, dev) {
        if (typeof(dev) === 'undefined') {
          dev = mode;
          mode = 438 /* 0666 */;
        }
        mode |= 8192;
        return FS.mknod(path, mode, dev);
      },symlink:function(oldpath, newpath) {
        if (!PATH.resolve(oldpath)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        var lookup = FS.lookupPath(newpath, { parent: true });
        var parent = lookup.node;
        if (!parent) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        var newname = PATH.basename(newpath);
        var err = FS.mayCreate(parent, newname);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.symlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.symlink(parent, newname, oldpath);
      },rename:function(old_path, new_path) {
        var old_dirname = PATH.dirname(old_path);
        var new_dirname = PATH.dirname(new_path);
        var old_name = PATH.basename(old_path);
        var new_name = PATH.basename(new_path);
        // parents must exist
        var lookup, old_dir, new_dir;
        try {
          lookup = FS.lookupPath(old_path, { parent: true });
          old_dir = lookup.node;
          lookup = FS.lookupPath(new_path, { parent: true });
          new_dir = lookup.node;
        } catch (e) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        if (!old_dir || !new_dir) throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        // need to be part of the same mount
        if (old_dir.mount !== new_dir.mount) {
          throw new FS.ErrnoError(ERRNO_CODES.EXDEV);
        }
        // source must exist
        var old_node = FS.lookupNode(old_dir, old_name);
        // old path should not be an ancestor of the new path
        var relative = PATH.relative(old_path, new_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        // new path should not be an ancestor of the old path
        relative = PATH.relative(new_path, old_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
        }
        // see if the new path already exists
        var new_node;
        try {
          new_node = FS.lookupNode(new_dir, new_name);
        } catch (e) {
          // not fatal
        }
        // early out if nothing needs to change
        if (old_node === new_node) {
          return;
        }
        // we'll need to delete the old entry
        var isdir = FS.isDir(old_node.mode);
        var err = FS.mayDelete(old_dir, old_name, isdir);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        // need delete permissions if we'll be overwriting.
        // need create permissions if new doesn't already exist.
        err = new_node ?
          FS.mayDelete(new_dir, new_name, isdir) :
          FS.mayCreate(new_dir, new_name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!old_dir.node_ops.rename) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(old_node) || (new_node && FS.isMountpoint(new_node))) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        // if we are going to change the parent, check write permissions
        if (new_dir !== old_dir) {
          err = FS.nodePermissions(old_dir, 'w');
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        try {
          if (FS.trackingDelegate['willMovePath']) {
            FS.trackingDelegate['willMovePath'](old_path, new_path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
        // remove the node from the lookup hash
        FS.hashRemoveNode(old_node);
        // do the underlying fs rename
        try {
          old_dir.node_ops.rename(old_node, new_dir, new_name);
        } catch (e) {
          throw e;
        } finally {
          // add the node back to the hash (in case node_ops.rename
          // changed its name)
          FS.hashAddNode(old_node);
        }
        try {
          if (FS.trackingDelegate['onMovePath']) FS.trackingDelegate['onMovePath'](old_path, new_path);
        } catch(e) {
          console.log("FS.trackingDelegate['onMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
      },rmdir:function(path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, true);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.rmdir) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.rmdir(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readdir:function(path) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        if (!node.node_ops.readdir) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        return node.node_ops.readdir(node);
      },unlink:function(path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, false);
        if (err) {
          // POSIX says unlink should set EPERM, not EISDIR
          if (err === ERRNO_CODES.EISDIR) err = ERRNO_CODES.EPERM;
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.unlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.unlink(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readlink:function(path) {
        var lookup = FS.lookupPath(path);
        var link = lookup.node;
        if (!link) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!link.node_ops.readlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        return link.node_ops.readlink(link);
      },stat:function(path, dontFollow) {
        var lookup = FS.lookupPath(path, { follow: !dontFollow });
        var node = lookup.node;
        if (!node) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!node.node_ops.getattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return node.node_ops.getattr(node);
      },lstat:function(path) {
        return FS.stat(path, true);
      },chmod:function(path, mode, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          mode: (mode & 4095) | (node.mode & ~4095),
          timestamp: Date.now()
        });
      },lchmod:function(path, mode) {
        FS.chmod(path, mode, true);
      },fchmod:function(fd, mode) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chmod(stream.node, mode);
      },chown:function(path, uid, gid, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          timestamp: Date.now()
          // we ignore the uid / gid for now
        });
      },lchown:function(path, uid, gid) {
        FS.chown(path, uid, gid, true);
      },fchown:function(fd, uid, gid) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chown(stream.node, uid, gid);
      },truncate:function(path, len) {
        if (len < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: true });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!FS.isFile(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var err = FS.nodePermissions(node, 'w');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        node.node_ops.setattr(node, {
          size: len,
          timestamp: Date.now()
        });
      },ftruncate:function(fd, len) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        FS.truncate(stream.node, len);
      },utime:function(path, atime, mtime) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        node.node_ops.setattr(node, {
          timestamp: Math.max(atime, mtime)
        });
      },open:function(path, flags, mode, fd_start, fd_end) {
        if (path === "") {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        flags = typeof flags === 'string' ? FS.modeStringToFlags(flags) : flags;
        mode = typeof mode === 'undefined' ? 438 /* 0666 */ : mode;
        if ((flags & 64)) {
          mode = (mode & 4095) | 32768;
        } else {
          mode = 0;
        }
        var node;
        if (typeof path === 'object') {
          node = path;
        } else {
          path = PATH.normalize(path);
          try {
            var lookup = FS.lookupPath(path, {
              follow: !(flags & 131072)
            });
            node = lookup.node;
          } catch (e) {
            // ignore
          }
        }
        // perhaps we need to create the node
        var created = false;
        if ((flags & 64)) {
          if (node) {
            // if O_CREAT and O_EXCL are set, error out if the node already exists
            if ((flags & 128)) {
              throw new FS.ErrnoError(ERRNO_CODES.EEXIST);
            }
          } else {
            // node doesn't exist, try to create it
            node = FS.mknod(path, mode, 0);
            created = true;
          }
        }
        if (!node) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        // can't truncate a device
        if (FS.isChrdev(node.mode)) {
          flags &= ~512;
        }
        // check permissions, if this is not a file we just created now (it is ok to
        // create and write to a file with read-only permissions; it is read-only
        // for later use)
        if (!created) {
          var err = FS.mayOpen(node, flags);
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        // do truncation if necessary
        if ((flags & 512)) {
          FS.truncate(node, 0);
        }
        // we've already handled these, don't pass down to the underlying vfs
        flags &= ~(128 | 512);
  
        // register the stream with the filesystem
        var stream = FS.createStream({
          node: node,
          path: FS.getPath(node),  // we want the absolute path to the node
          flags: flags,
          seekable: true,
          position: 0,
          stream_ops: node.stream_ops,
          // used by the file family libc calls (fopen, fwrite, ferror, etc.)
          ungotten: [],
          error: false
        }, fd_start, fd_end);
        // call the new stream's open function
        if (stream.stream_ops.open) {
          stream.stream_ops.open(stream);
        }
        if (Module['logReadFiles'] && !(flags & 1)) {
          if (!FS.readFiles) FS.readFiles = {};
          if (!(path in FS.readFiles)) {
            FS.readFiles[path] = 1;
            Module['printErr']('read file: ' + path);
          }
        }
        try {
          if (FS.trackingDelegate['onOpenFile']) {
            var trackingFlags = 0;
            if ((flags & 2097155) !== 1) {
              trackingFlags |= FS.tracking.openFlags.READ;
            }
            if ((flags & 2097155) !== 0) {
              trackingFlags |= FS.tracking.openFlags.WRITE;
            }
            FS.trackingDelegate['onOpenFile'](path, trackingFlags);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['onOpenFile']('"+path+"', flags) threw an exception: " + e.message);
        }
        return stream;
      },close:function(stream) {
        try {
          if (stream.stream_ops.close) {
            stream.stream_ops.close(stream);
          }
        } catch (e) {
          throw e;
        } finally {
          FS.closeStream(stream.fd);
        }
      },llseek:function(stream, offset, whence) {
        if (!stream.seekable || !stream.stream_ops.llseek) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        stream.position = stream.stream_ops.llseek(stream, offset, whence);
        stream.ungotten = [];
        return stream.position;
      },read:function(stream, buffer, offset, length, position) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.read) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var seeking = true;
        if (typeof position === 'undefined') {
          position = stream.position;
          seeking = false;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        var bytesRead = stream.stream_ops.read(stream, buffer, offset, length, position);
        if (!seeking) stream.position += bytesRead;
        return bytesRead;
      },write:function(stream, buffer, offset, length, position, canOwn) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.write) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if (stream.flags & 1024) {
          // seek to the end before writing in append mode
          FS.llseek(stream, 0, 2);
        }
        var seeking = true;
        if (typeof position === 'undefined') {
          position = stream.position;
          seeking = false;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        var bytesWritten = stream.stream_ops.write(stream, buffer, offset, length, position, canOwn);
        if (!seeking) stream.position += bytesWritten;
        try {
          if (stream.path && FS.trackingDelegate['onWriteToFile']) FS.trackingDelegate['onWriteToFile'](stream.path);
        } catch(e) {
          console.log("FS.trackingDelegate['onWriteToFile']('"+path+"') threw an exception: " + e.message);
        }
        return bytesWritten;
      },allocate:function(stream, offset, length) {
        if (offset < 0 || length <= 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (!FS.isFile(stream.node.mode) && !FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        if (!stream.stream_ops.allocate) {
          throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
        }
        stream.stream_ops.allocate(stream, offset, length);
      },mmap:function(stream, buffer, offset, length, position, prot, flags) {
        // TODO if PROT is PROT_WRITE, make sure we have write access
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EACCES);
        }
        if (!stream.stream_ops.mmap) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        return stream.stream_ops.mmap(stream, buffer, offset, length, position, prot, flags);
      },ioctl:function(stream, cmd, arg) {
        if (!stream.stream_ops.ioctl) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTTY);
        }
        return stream.stream_ops.ioctl(stream, cmd, arg);
      },readFile:function(path, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'r';
        opts.encoding = opts.encoding || 'binary';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var ret;
        var stream = FS.open(path, opts.flags);
        var stat = FS.stat(path);
        var length = stat.size;
        var buf = new Uint8Array(length);
        FS.read(stream, buf, 0, length, 0);
        if (opts.encoding === 'utf8') {
          ret = '';
          var utf8 = new Runtime.UTF8Processor();
          for (var i = 0; i < length; i++) {
            ret += utf8.processCChar(buf[i]);
          }
        } else if (opts.encoding === 'binary') {
          ret = buf;
        }
        FS.close(stream);
        return ret;
      },writeFile:function(path, data, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'w';
        opts.encoding = opts.encoding || 'utf8';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var stream = FS.open(path, opts.flags, opts.mode);
        if (opts.encoding === 'utf8') {
          var utf8 = new Runtime.UTF8Processor();
          var buf = new Uint8Array(utf8.processJSString(data));
          FS.write(stream, buf, 0, buf.length, 0, opts.canOwn);
        } else if (opts.encoding === 'binary') {
          FS.write(stream, data, 0, data.length, 0, opts.canOwn);
        }
        FS.close(stream);
      },cwd:function() {
        return FS.currentPath;
      },chdir:function(path) {
        var lookup = FS.lookupPath(path, { follow: true });
        if (!FS.isDir(lookup.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        var err = FS.nodePermissions(lookup.node, 'x');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        FS.currentPath = lookup.path;
      },createDefaultDirectories:function() {
        FS.mkdir('/tmp');
        FS.mkdir('/home');
        FS.mkdir('/home/web_user');
      },createDefaultDevices:function() {
        // create /dev
        FS.mkdir('/dev');
        // setup /dev/null
        FS.registerDevice(FS.makedev(1, 3), {
          read: function() { return 0; },
          write: function() { return 0; }
        });
        FS.mkdev('/dev/null', FS.makedev(1, 3));
        // setup /dev/tty and /dev/tty1
        // stderr needs to print output using Module['printErr']
        // so we register a second tty just for it.
        TTY.register(FS.makedev(5, 0), TTY.default_tty_ops);
        TTY.register(FS.makedev(6, 0), TTY.default_tty1_ops);
        FS.mkdev('/dev/tty', FS.makedev(5, 0));
        FS.mkdev('/dev/tty1', FS.makedev(6, 0));
        // setup /dev/[u]random
        var random_device;
        if (typeof crypto !== 'undefined') {
          // for modern web browsers
          var randomBuffer = new Uint8Array(1);
          random_device = function() { crypto.getRandomValues(randomBuffer); return randomBuffer[0]; };
        } else if (ENVIRONMENT_IS_NODE) {
          // for nodejs
          random_device = function() { return require('crypto').randomBytes(1)[0]; };
        } else {
          // default for ES5 platforms
          random_device = function() { return (Math.random()*256)|0; };
        }
        FS.createDevice('/dev', 'random', random_device);
        FS.createDevice('/dev', 'urandom', random_device);
        // we're not going to emulate the actual shm device,
        // just create the tmp dirs that reside in it commonly
        FS.mkdir('/dev/shm');
        FS.mkdir('/dev/shm/tmp');
      },createStandardStreams:function() {
        // TODO deprecate the old functionality of a single
        // input / output callback and that utilizes FS.createDevice
        // and instead require a unique set of stream ops
  
        // by default, we symlink the standard streams to the
        // default tty devices. however, if the standard streams
        // have been overwritten we create a unique device for
        // them instead.
        if (Module['stdin']) {
          FS.createDevice('/dev', 'stdin', Module['stdin']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdin');
        }
        if (Module['stdout']) {
          FS.createDevice('/dev', 'stdout', null, Module['stdout']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdout');
        }
        if (Module['stderr']) {
          FS.createDevice('/dev', 'stderr', null, Module['stderr']);
        } else {
          FS.symlink('/dev/tty1', '/dev/stderr');
        }
  
        // open default streams for the stdin, stdout and stderr devices
        var stdin = FS.open('/dev/stdin', 'r');
        HEAP32[((_stdin)>>2)]=FS.getPtrForStream(stdin);
        assert(stdin.fd === 0, 'invalid handle for stdin (' + stdin.fd + ')');
  
        var stdout = FS.open('/dev/stdout', 'w');
        HEAP32[((_stdout)>>2)]=FS.getPtrForStream(stdout);
        assert(stdout.fd === 1, 'invalid handle for stdout (' + stdout.fd + ')');
  
        var stderr = FS.open('/dev/stderr', 'w');
        HEAP32[((_stderr)>>2)]=FS.getPtrForStream(stderr);
        assert(stderr.fd === 2, 'invalid handle for stderr (' + stderr.fd + ')');
      },ensureErrnoError:function() {
        if (FS.ErrnoError) return;
        FS.ErrnoError = function ErrnoError(errno, node) {
          this.node = node;
          this.setErrno = function(errno) {
            this.errno = errno;
            for (var key in ERRNO_CODES) {
              if (ERRNO_CODES[key] === errno) {
                this.code = key;
                break;
              }
            }
          };
          this.setErrno(errno);
          this.message = ERRNO_MESSAGES[errno];
          if (this.stack) this.stack = demangleAll(this.stack);
        };
        FS.ErrnoError.prototype = new Error();
        FS.ErrnoError.prototype.constructor = FS.ErrnoError;
        // Some errors may happen quite a bit, to avoid overhead we reuse them (and suffer a lack of stack info)
        [ERRNO_CODES.ENOENT].forEach(function(code) {
          FS.genericErrors[code] = new FS.ErrnoError(code);
          FS.genericErrors[code].stack = '<generic error, no stack>';
        });
      },staticInit:function() {
        FS.ensureErrnoError();
  
        FS.nameTable = new Array(4096);
  
        FS.mount(MEMFS, {}, '/');
  
        FS.createDefaultDirectories();
        FS.createDefaultDevices();
      },init:function(input, output, error) {
        assert(!FS.init.initialized, 'FS.init was previously called. If you want to initialize later with custom parameters, remove any earlier calls (note that one is automatically added to the generated code)');
        FS.init.initialized = true;
  
        FS.ensureErrnoError();
  
        // Allow Module.stdin etc. to provide defaults, if none explicitly passed to us here
        Module['stdin'] = input || Module['stdin'];
        Module['stdout'] = output || Module['stdout'];
        Module['stderr'] = error || Module['stderr'];
  
        FS.createStandardStreams();
      },quit:function() {
        FS.init.initialized = false;
        for (var i = 0; i < FS.streams.length; i++) {
          var stream = FS.streams[i];
          if (!stream) {
            continue;
          }
          FS.close(stream);
        }
      },getMode:function(canRead, canWrite) {
        var mode = 0;
        if (canRead) mode |= 292 | 73;
        if (canWrite) mode |= 146;
        return mode;
      },joinPath:function(parts, forceRelative) {
        var path = PATH.join.apply(null, parts);
        if (forceRelative && path[0] == '/') path = path.substr(1);
        return path;
      },absolutePath:function(relative, base) {
        return PATH.resolve(base, relative);
      },standardizePath:function(path) {
        return PATH.normalize(path);
      },findObject:function(path, dontResolveLastLink) {
        var ret = FS.analyzePath(path, dontResolveLastLink);
        if (ret.exists) {
          return ret.object;
        } else {
          ___setErrNo(ret.error);
          return null;
        }
      },analyzePath:function(path, dontResolveLastLink) {
        // operate from within the context of the symlink's target
        try {
          var lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          path = lookup.path;
        } catch (e) {
        }
        var ret = {
          isRoot: false, exists: false, error: 0, name: null, path: null, object: null,
          parentExists: false, parentPath: null, parentObject: null
        };
        try {
          var lookup = FS.lookupPath(path, { parent: true });
          ret.parentExists = true;
          ret.parentPath = lookup.path;
          ret.parentObject = lookup.node;
          ret.name = PATH.basename(path);
          lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          ret.exists = true;
          ret.path = lookup.path;
          ret.object = lookup.node;
          ret.name = lookup.node.name;
          ret.isRoot = lookup.path === '/';
        } catch (e) {
          ret.error = e.errno;
        };
        return ret;
      },createFolder:function(parent, name, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.mkdir(path, mode);
      },createPath:function(parent, path, canRead, canWrite) {
        parent = typeof parent === 'string' ? parent : FS.getPath(parent);
        var parts = path.split('/').reverse();
        while (parts.length) {
          var part = parts.pop();
          if (!part) continue;
          var current = PATH.join2(parent, part);
          try {
            FS.mkdir(current);
          } catch (e) {
            // ignore EEXIST
          }
          parent = current;
        }
        return current;
      },createFile:function(parent, name, properties, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.create(path, mode);
      },createDataFile:function(parent, name, data, canRead, canWrite, canOwn) {
        var path = name ? PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name) : parent;
        var mode = FS.getMode(canRead, canWrite);
        var node = FS.create(path, mode);
        if (data) {
          if (typeof data === 'string') {
            var arr = new Array(data.length);
            for (var i = 0, len = data.length; i < len; ++i) arr[i] = data.charCodeAt(i);
            data = arr;
          }
          // make sure we can write to the file
          FS.chmod(node, mode | 146);
          var stream = FS.open(node, 'w');
          FS.write(stream, data, 0, data.length, 0, canOwn);
          FS.close(stream);
          FS.chmod(node, mode);
        }
        return node;
      },createDevice:function(parent, name, input, output) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(!!input, !!output);
        if (!FS.createDevice.major) FS.createDevice.major = 64;
        var dev = FS.makedev(FS.createDevice.major++, 0);
        // Create a fake device that a set of stream ops to emulate
        // the old behavior.
        FS.registerDevice(dev, {
          open: function(stream) {
            stream.seekable = false;
          },
          close: function(stream) {
            // flush any pending line data
            if (output && output.buffer && output.buffer.length) {
              output(10);
            }
          },
          read: function(stream, buffer, offset, length, pos /* ignored */) {
            var bytesRead = 0;
            for (var i = 0; i < length; i++) {
              var result;
              try {
                result = input();
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
              if (result === undefined && bytesRead === 0) {
                throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
              }
              if (result === null || result === undefined) break;
              bytesRead++;
              buffer[offset+i] = result;
            }
            if (bytesRead) {
              stream.node.timestamp = Date.now();
            }
            return bytesRead;
          },
          write: function(stream, buffer, offset, length, pos) {
            for (var i = 0; i < length; i++) {
              try {
                output(buffer[offset+i]);
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
            }
            if (length) {
              stream.node.timestamp = Date.now();
            }
            return i;
          }
        });
        return FS.mkdev(path, mode, dev);
      },createLink:function(parent, name, target, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        return FS.symlink(target, path);
      },forceLoadFile:function(obj) {
        if (obj.isDevice || obj.isFolder || obj.link || obj.contents) return true;
        var success = true;
        if (typeof XMLHttpRequest !== 'undefined') {
          throw new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.");
        } else if (Module['read']) {
          // Command-line.
          try {
            // WARNING: Can't read binary files in V8's d8 or tracemonkey's js, as
            //          read() will try to parse UTF8.
            obj.contents = intArrayFromString(Module['read'](obj.url), true);
            obj.usedBytes = obj.contents.length;
          } catch (e) {
            success = false;
          }
        } else {
          throw new Error('Cannot load without read() or XMLHttpRequest.');
        }
        if (!success) ___setErrNo(ERRNO_CODES.EIO);
        return success;
      },createLazyFile:function(parent, name, url, canRead, canWrite) {
        // Lazy chunked Uint8Array (implements get and length from Uint8Array). Actual getting is abstracted away for eventual reuse.
        function LazyUint8Array() {
          this.lengthKnown = false;
          this.chunks = []; // Loaded chunks. Index is the chunk number
        }
        LazyUint8Array.prototype.get = function LazyUint8Array_get(idx) {
          if (idx > this.length-1 || idx < 0) {
            return undefined;
          }
          var chunkOffset = idx % this.chunkSize;
          var chunkNum = (idx / this.chunkSize)|0;
          return this.getter(chunkNum)[chunkOffset];
        }
        LazyUint8Array.prototype.setDataGetter = function LazyUint8Array_setDataGetter(getter) {
          this.getter = getter;
        }
        LazyUint8Array.prototype.cacheLength = function LazyUint8Array_cacheLength() {
          // Find length
          var xhr = new XMLHttpRequest();
          xhr.open('HEAD', url, false);
          xhr.send(null);
          if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
          var datalength = Number(xhr.getResponseHeader("Content-length"));
          var header;
          var hasByteServing = (header = xhr.getResponseHeader("Accept-Ranges")) && header === "bytes";
          var chunkSize = 1024*1024; // Chunk size in bytes
  
          if (!hasByteServing) chunkSize = datalength;
  
          // Function to get a range from the remote URL.
          var doXHR = (function(from, to) {
            if (from > to) throw new Error("invalid range (" + from + ", " + to + ") or no bytes requested!");
            if (to > datalength-1) throw new Error("only " + datalength + " bytes available! programmer error!");
  
            // TODO: Use mozResponseArrayBuffer, responseStream, etc. if available.
            var xhr = new XMLHttpRequest();
            xhr.open('GET', url, false);
            if (datalength !== chunkSize) xhr.setRequestHeader("Range", "bytes=" + from + "-" + to);
  
            // Some hints to the browser that we want binary data.
            if (typeof Uint8Array != 'undefined') xhr.responseType = 'arraybuffer';
            if (xhr.overrideMimeType) {
              xhr.overrideMimeType('text/plain; charset=x-user-defined');
            }
  
            xhr.send(null);
            if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
            if (xhr.response !== undefined) {
              return new Uint8Array(xhr.response || []);
            } else {
              return intArrayFromString(xhr.responseText || '', true);
            }
          });
          var lazyArray = this;
          lazyArray.setDataGetter(function(chunkNum) {
            var start = chunkNum * chunkSize;
            var end = (chunkNum+1) * chunkSize - 1; // including this byte
            end = Math.min(end, datalength-1); // if datalength-1 is selected, this is the last block
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") {
              lazyArray.chunks[chunkNum] = doXHR(start, end);
            }
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") throw new Error("doXHR failed!");
            return lazyArray.chunks[chunkNum];
          });
  
          this._length = datalength;
          this._chunkSize = chunkSize;
          this.lengthKnown = true;
        }
        if (typeof XMLHttpRequest !== 'undefined') {
          if (!ENVIRONMENT_IS_WORKER) throw 'Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc';
          var lazyArray = new LazyUint8Array();
          Object.defineProperty(lazyArray, "length", {
              get: function() {
                  if(!this.lengthKnown) {
                      this.cacheLength();
                  }
                  return this._length;
              }
          });
          Object.defineProperty(lazyArray, "chunkSize", {
              get: function() {
                  if(!this.lengthKnown) {
                      this.cacheLength();
                  }
                  return this._chunkSize;
              }
          });
  
          var properties = { isDevice: false, contents: lazyArray };
        } else {
          var properties = { isDevice: false, url: url };
        }
  
        var node = FS.createFile(parent, name, properties, canRead, canWrite);
        // This is a total hack, but I want to get this lazy file code out of the
        // core of MEMFS. If we want to keep this lazy file concept I feel it should
        // be its own thin LAZYFS proxying calls to MEMFS.
        if (properties.contents) {
          node.contents = properties.contents;
        } else if (properties.url) {
          node.contents = null;
          node.url = properties.url;
        }
        // Add a function that defers querying the file size until it is asked the first time.
        Object.defineProperty(node, "usedBytes", {
            get: function() { return this.contents.length; }
        });
        // override each stream op with one that tries to force load the lazy file first
        var stream_ops = {};
        var keys = Object.keys(node.stream_ops);
        keys.forEach(function(key) {
          var fn = node.stream_ops[key];
          stream_ops[key] = function forceLoadLazyFile() {
            if (!FS.forceLoadFile(node)) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            return fn.apply(null, arguments);
          };
        });
        // use a custom read function
        stream_ops.read = function stream_ops_read(stream, buffer, offset, length, position) {
          if (!FS.forceLoadFile(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EIO);
          }
          var contents = stream.node.contents;
          if (position >= contents.length)
            return 0;
          var size = Math.min(contents.length - position, length);
          assert(size >= 0);
          if (contents.slice) { // normal array
            for (var i = 0; i < size; i++) {
              buffer[offset + i] = contents[position + i];
            }
          } else {
            for (var i = 0; i < size; i++) { // LazyUint8Array from sync binary XHR
              buffer[offset + i] = contents.get(position + i);
            }
          }
          return size;
        };
        node.stream_ops = stream_ops;
        return node;
      },createPreloadedFile:function(parent, name, url, canRead, canWrite, onload, onerror, dontCreateFile, canOwn) {
        Browser.init();
        // TODO we should allow people to just pass in a complete filename instead
        // of parent and name being that we just join them anyways
        var fullname = name ? PATH.resolve(PATH.join2(parent, name)) : parent;
        function processData(byteArray) {
          function finish(byteArray) {
            if (!dontCreateFile) {
              FS.createDataFile(parent, name, byteArray, canRead, canWrite, canOwn);
            }
            if (onload) onload();
            removeRunDependency('cp ' + fullname);
          }
          var handled = false;
          Module['preloadPlugins'].forEach(function(plugin) {
            if (handled) return;
            if (plugin['canHandle'](fullname)) {
              plugin['handle'](byteArray, fullname, finish, function() {
                if (onerror) onerror();
                removeRunDependency('cp ' + fullname);
              });
              handled = true;
            }
          });
          if (!handled) finish(byteArray);
        }
        addRunDependency('cp ' + fullname);
        if (typeof url == 'string') {
          Browser.asyncLoad(url, function(byteArray) {
            processData(byteArray);
          }, onerror);
        } else {
          processData(url);
        }
      },indexedDB:function() {
        return window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
      },DB_NAME:function() {
        return 'EM_FS_' + window.location.pathname;
      },DB_VERSION:20,DB_STORE_NAME:"FILE_DATA",saveFilesToDB:function(paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = function openRequest_onupgradeneeded() {
          console.log('creating db');
          var db = openRequest.result;
          db.createObjectStore(FS.DB_STORE_NAME);
        };
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          var transaction = db.transaction([FS.DB_STORE_NAME], 'readwrite');
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var putRequest = files.put(FS.analyzePath(path).object.contents, path);
            putRequest.onsuccess = function putRequest_onsuccess() { ok++; if (ok + fail == total) finish() };
            putRequest.onerror = function putRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      },loadFilesFromDB:function(paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = onerror; // no database to load from
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          try {
            var transaction = db.transaction([FS.DB_STORE_NAME], 'readonly');
          } catch(e) {
            onerror(e);
            return;
          }
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var getRequest = files.get(path);
            getRequest.onsuccess = function getRequest_onsuccess() {
              if (FS.analyzePath(path).exists) {
                FS.unlink(path);
              }
              FS.createDataFile(PATH.dirname(path), PATH.basename(path), getRequest.result, true, true, true);
              ok++;
              if (ok + fail == total) finish();
            };
            getRequest.onerror = function getRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      }};function _close(fildes) {
      // int close(int fildes);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/close.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      try {
        FS.close(stream);
        return 0;
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }
  
  function _fsync(fildes) {
      // int fsync(int fildes);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fsync.html
      var stream = FS.getStream(fildes);
      if (stream) {
        // We write directly to the file system, so there's nothing to do here.
        return 0;
      } else {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
    }
  
  function _fileno(stream) {
      // int fileno(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fileno.html
      stream = FS.getStreamFromPtr(stream);
      if (!stream) return -1;
      return stream.fd;
    }function _fclose(stream) {
      // int fclose(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fclose.html
      var fd = _fileno(stream);
      _fsync(fd);
      return _close(fd);
    }

  function _open(path, oflag, varargs) {
      // int open(const char *path, int oflag, ...);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/open.html
      var mode = HEAP32[((varargs)>>2)];
      path = Pointer_stringify(path);
      try {
        var stream = FS.open(path, oflag, mode);
        return stream.fd;
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }

  
  function _memmove(dest, src, num) {
      dest = dest|0; src = src|0; num = num|0;
      var ret = 0;
      if (((src|0) < (dest|0)) & ((dest|0) < ((src + num)|0))) {
        // Unlikely case: Copy backwards in a safe manner
        ret = dest;
        src = (src + num)|0;
        dest = (dest + num)|0;
        while ((num|0) > 0) {
          dest = (dest - 1)|0;
          src = (src - 1)|0;
          num = (num - 1)|0;
          HEAP8[((dest)>>0)]=HEAP8[((src)>>0)];
        }
        dest = ret;
      } else {
        _memcpy(dest, src, num) | 0;
      }
      return dest | 0;
    }var _llvm_memmove_p0i8_p0i8_i32=_memmove;



  
  
  
  
  
  function _mkport() { throw 'TODO' }var SOCKFS={mount:function(mount) {
        // If Module['websocket'] has already been defined (e.g. for configuring
        // the subprotocol/url) use that, if not initialise it to a new object.
        Module['websocket'] = (Module['websocket'] && 
                               ('object' === typeof Module['websocket'])) ? Module['websocket'] : {};
  
        // Add the Event registration mechanism to the exported websocket configuration
        // object so we can register network callbacks from native JavaScript too.
        // For more documentation see system/include/emscripten/emscripten.h
        Module['websocket']._callbacks = {};
        Module['websocket']['on'] = function(event, callback) {
  	    if ('function' === typeof callback) {
  		  this._callbacks[event] = callback;
          }
  	    return this;
        };
  
        Module['websocket'].emit = function(event, param) {
  	    if ('function' === typeof this._callbacks[event]) {
  		  this._callbacks[event].call(this, param);
          }
        };
  
        // If debug is enabled register simple default logging callbacks for each Event.
  
        return FS.createNode(null, '/', 16384 | 511 /* 0777 */, 0);
      },createSocket:function(family, type, protocol) {
        var streaming = type == 1;
        if (protocol) {
          assert(streaming == (protocol == 6)); // if SOCK_STREAM, must be tcp
        }
  
        // create our internal socket structure
        var sock = {
          family: family,
          type: type,
          protocol: protocol,
          server: null,
          error: null, // Used in getsockopt for SOL_SOCKET/SO_ERROR test
          peers: {},
          pending: [],
          recv_queue: [],
          sock_ops: SOCKFS.websocket_sock_ops
        };
  
        // create the filesystem node to store the socket structure
        var name = SOCKFS.nextname();
        var node = FS.createNode(SOCKFS.root, name, 49152, 0);
        node.sock = sock;
  
        // and the wrapping stream that enables library functions such
        // as read and write to indirectly interact with the socket
        var stream = FS.createStream({
          path: name,
          node: node,
          flags: FS.modeStringToFlags('r+'),
          seekable: false,
          stream_ops: SOCKFS.stream_ops
        });
  
        // map the new stream to the socket structure (sockets have a 1:1
        // relationship with a stream)
        sock.stream = stream;
  
        return sock;
      },getSocket:function(fd) {
        var stream = FS.getStream(fd);
        if (!stream || !FS.isSocket(stream.node.mode)) {
          return null;
        }
        return stream.node.sock;
      },stream_ops:{poll:function(stream) {
          var sock = stream.node.sock;
          return sock.sock_ops.poll(sock);
        },ioctl:function(stream, request, varargs) {
          var sock = stream.node.sock;
          return sock.sock_ops.ioctl(sock, request, varargs);
        },read:function(stream, buffer, offset, length, position /* ignored */) {
          var sock = stream.node.sock;
          var msg = sock.sock_ops.recvmsg(sock, length);
          if (!msg) {
            // socket is closed
            return 0;
          }
          buffer.set(msg.buffer, offset);
          return msg.buffer.length;
        },write:function(stream, buffer, offset, length, position /* ignored */) {
          var sock = stream.node.sock;
          return sock.sock_ops.sendmsg(sock, buffer, offset, length);
        },close:function(stream) {
          var sock = stream.node.sock;
          sock.sock_ops.close(sock);
        }},nextname:function() {
        if (!SOCKFS.nextname.current) {
          SOCKFS.nextname.current = 0;
        }
        return 'socket[' + (SOCKFS.nextname.current++) + ']';
      },websocket_sock_ops:{createPeer:function(sock, addr, port) {
          var ws;
  
          if (typeof addr === 'object') {
            ws = addr;
            addr = null;
            port = null;
          }
  
          if (ws) {
            // for sockets that've already connected (e.g. we're the server)
            // we can inspect the _socket property for the address
            if (ws._socket) {
              addr = ws._socket.remoteAddress;
              port = ws._socket.remotePort;
            }
            // if we're just now initializing a connection to the remote,
            // inspect the url property
            else {
              var result = /ws[s]?:\/\/([^:]+):(\d+)/.exec(ws.url);
              if (!result) {
                throw new Error('WebSocket URL must be in the format ws(s)://address:port');
              }
              addr = result[1];
              port = parseInt(result[2], 10);
            }
          } else {
            // create the actual websocket object and connect
            try {
              // runtimeConfig gets set to true if WebSocket runtime configuration is available.
              var runtimeConfig = (Module['websocket'] && ('object' === typeof Module['websocket']));
  
              // The default value is 'ws://' the replace is needed because the compiler replaces '//' comments with '#'
              // comments without checking context, so we'd end up with ws:#, the replace swaps the '#' for '//' again.
              var url = 'ws:#'.replace('#', '//');
  
              if (runtimeConfig) {
                if ('string' === typeof Module['websocket']['url']) {
                  url = Module['websocket']['url']; // Fetch runtime WebSocket URL config.
                }
              }
  
              if (url === 'ws://' || url === 'wss://') { // Is the supplied URL config just a prefix, if so complete it.
                var parts = addr.split('/');
                url = url + parts[0] + ":" + port + "/" + parts.slice(1).join('/');
              }
  
              // Make the WebSocket subprotocol (Sec-WebSocket-Protocol) default to binary if no configuration is set.
              var subProtocols = 'binary'; // The default value is 'binary'
  
              if (runtimeConfig) {
                if ('string' === typeof Module['websocket']['subprotocol']) {
                  subProtocols = Module['websocket']['subprotocol']; // Fetch runtime WebSocket subprotocol config.
                }
              }
  
              // The regex trims the string (removes spaces at the beginning and end, then splits the string by
              // <any space>,<any space> into an Array. Whitespace removal is important for Websockify and ws.
              subProtocols = subProtocols.replace(/^ +| +$/g,"").split(/ *, */);
  
              // The node ws library API for specifying optional subprotocol is slightly different than the browser's.
              var opts = ENVIRONMENT_IS_NODE ? {'protocol': subProtocols.toString()} : subProtocols;
  
              // If node we use the ws library.
              var WebSocket = ENVIRONMENT_IS_NODE ? require('ws') : window['WebSocket'];
              ws = new WebSocket(url, opts);
              ws.binaryType = 'arraybuffer';
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EHOSTUNREACH);
            }
          }
  
  
          var peer = {
            addr: addr,
            port: port,
            socket: ws,
            dgram_send_queue: []
          };
  
          SOCKFS.websocket_sock_ops.addPeer(sock, peer);
          SOCKFS.websocket_sock_ops.handlePeerEvents(sock, peer);
  
          // if this is a bound dgram socket, send the port number first to allow
          // us to override the ephemeral port reported to us by remotePort on the
          // remote end.
          if (sock.type === 2 && typeof sock.sport !== 'undefined') {
            peer.dgram_send_queue.push(new Uint8Array([
                255, 255, 255, 255,
                'p'.charCodeAt(0), 'o'.charCodeAt(0), 'r'.charCodeAt(0), 't'.charCodeAt(0),
                ((sock.sport & 0xff00) >> 8) , (sock.sport & 0xff)
            ]));
          }
  
          return peer;
        },getPeer:function(sock, addr, port) {
          return sock.peers[addr + ':' + port];
        },addPeer:function(sock, peer) {
          sock.peers[peer.addr + ':' + peer.port] = peer;
        },removePeer:function(sock, peer) {
          delete sock.peers[peer.addr + ':' + peer.port];
        },handlePeerEvents:function(sock, peer) {
          var first = true;
  
          var handleOpen = function () {
  
            Module['websocket'].emit('open', sock.stream.fd);
  
            try {
              var queued = peer.dgram_send_queue.shift();
              while (queued) {
                peer.socket.send(queued);
                queued = peer.dgram_send_queue.shift();
              }
            } catch (e) {
              // not much we can do here in the way of proper error handling as we've already
              // lied and said this data was sent. shut it down.
              peer.socket.close();
            }
          };
  
          function handleMessage(data) {
            assert(typeof data !== 'string' && data.byteLength !== undefined);  // must receive an ArrayBuffer
            data = new Uint8Array(data);  // make a typed array view on the array buffer
  
  
            // if this is the port message, override the peer's port with it
            var wasfirst = first;
            first = false;
            if (wasfirst &&
                data.length === 10 &&
                data[0] === 255 && data[1] === 255 && data[2] === 255 && data[3] === 255 &&
                data[4] === 'p'.charCodeAt(0) && data[5] === 'o'.charCodeAt(0) && data[6] === 'r'.charCodeAt(0) && data[7] === 't'.charCodeAt(0)) {
              // update the peer's port and it's key in the peer map
              var newport = ((data[8] << 8) | data[9]);
              SOCKFS.websocket_sock_ops.removePeer(sock, peer);
              peer.port = newport;
              SOCKFS.websocket_sock_ops.addPeer(sock, peer);
              return;
            }
  
            sock.recv_queue.push({ addr: peer.addr, port: peer.port, data: data });
            Module['websocket'].emit('message', sock.stream.fd);
          };
  
          if (ENVIRONMENT_IS_NODE) {
            peer.socket.on('open', handleOpen);
            peer.socket.on('message', function(data, flags) {
              if (!flags.binary) {
                return;
              }
              handleMessage((new Uint8Array(data)).buffer);  // copy from node Buffer -> ArrayBuffer
            });
            peer.socket.on('close', function() {
              Module['websocket'].emit('close', sock.stream.fd);
            });
            peer.socket.on('error', function(error) {
              // Although the ws library may pass errors that may be more descriptive than
              // ECONNREFUSED they are not necessarily the expected error code e.g. 
              // ENOTFOUND on getaddrinfo seems to be node.js specific, so using ECONNREFUSED
              // is still probably the most useful thing to do.
              sock.error = ERRNO_CODES.ECONNREFUSED; // Used in getsockopt for SOL_SOCKET/SO_ERROR test.
              Module['websocket'].emit('error', [sock.stream.fd, sock.error, 'ECONNREFUSED: Connection refused']);
              // don't throw
            });
          } else {
            peer.socket.onopen = handleOpen;
            peer.socket.onclose = function() {
              Module['websocket'].emit('close', sock.stream.fd);
            };
            peer.socket.onmessage = function peer_socket_onmessage(event) {
              handleMessage(event.data);
            };
            peer.socket.onerror = function(error) {
              // The WebSocket spec only allows a 'simple event' to be thrown on error,
              // so we only really know as much as ECONNREFUSED.
              sock.error = ERRNO_CODES.ECONNREFUSED; // Used in getsockopt for SOL_SOCKET/SO_ERROR test.
              Module['websocket'].emit('error', [sock.stream.fd, sock.error, 'ECONNREFUSED: Connection refused']);
            };
          }
        },poll:function(sock) {
          if (sock.type === 1 && sock.server) {
            // listen sockets should only say they're available for reading
            // if there are pending clients.
            return sock.pending.length ? (64 | 1) : 0;
          }
  
          var mask = 0;
          var dest = sock.type === 1 ?  // we only care about the socket state for connection-based sockets
            SOCKFS.websocket_sock_ops.getPeer(sock, sock.daddr, sock.dport) :
            null;
  
          if (sock.recv_queue.length ||
              !dest ||  // connection-less sockets are always ready to read
              (dest && dest.socket.readyState === dest.socket.CLOSING) ||
              (dest && dest.socket.readyState === dest.socket.CLOSED)) {  // let recv return 0 once closed
            mask |= (64 | 1);
          }
  
          if (!dest ||  // connection-less sockets are always ready to write
              (dest && dest.socket.readyState === dest.socket.OPEN)) {
            mask |= 4;
          }
  
          if ((dest && dest.socket.readyState === dest.socket.CLOSING) ||
              (dest && dest.socket.readyState === dest.socket.CLOSED)) {
            mask |= 16;
          }
  
          return mask;
        },ioctl:function(sock, request, arg) {
          switch (request) {
            case 21531:
              var bytes = 0;
              if (sock.recv_queue.length) {
                bytes = sock.recv_queue[0].data.length;
              }
              HEAP32[((arg)>>2)]=bytes;
              return 0;
            default:
              return ERRNO_CODES.EINVAL;
          }
        },close:function(sock) {
          // if we've spawned a listen server, close it
          if (sock.server) {
            try {
              sock.server.close();
            } catch (e) {
            }
            sock.server = null;
          }
          // close any peer connections
          var peers = Object.keys(sock.peers);
          for (var i = 0; i < peers.length; i++) {
            var peer = sock.peers[peers[i]];
            try {
              peer.socket.close();
            } catch (e) {
            }
            SOCKFS.websocket_sock_ops.removePeer(sock, peer);
          }
          return 0;
        },bind:function(sock, addr, port) {
          if (typeof sock.saddr !== 'undefined' || typeof sock.sport !== 'undefined') {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);  // already bound
          }
          sock.saddr = addr;
          sock.sport = port || _mkport();
          // in order to emulate dgram sockets, we need to launch a listen server when
          // binding on a connection-less socket
          // note: this is only required on the server side
          if (sock.type === 2) {
            // close the existing server if it exists
            if (sock.server) {
              sock.server.close();
              sock.server = null;
            }
            // swallow error operation not supported error that occurs when binding in the
            // browser where this isn't supported
            try {
              sock.sock_ops.listen(sock, 0);
            } catch (e) {
              if (!(e instanceof FS.ErrnoError)) throw e;
              if (e.errno !== ERRNO_CODES.EOPNOTSUPP) throw e;
            }
          }
        },connect:function(sock, addr, port) {
          if (sock.server) {
            throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
          }
  
          // TODO autobind
          // if (!sock.addr && sock.type == 2) {
          // }
  
          // early out if we're already connected / in the middle of connecting
          if (typeof sock.daddr !== 'undefined' && typeof sock.dport !== 'undefined') {
            var dest = SOCKFS.websocket_sock_ops.getPeer(sock, sock.daddr, sock.dport);
            if (dest) {
              if (dest.socket.readyState === dest.socket.CONNECTING) {
                throw new FS.ErrnoError(ERRNO_CODES.EALREADY);
              } else {
                throw new FS.ErrnoError(ERRNO_CODES.EISCONN);
              }
            }
          }
  
          // add the socket to our peer list and set our
          // destination address / port to match
          var peer = SOCKFS.websocket_sock_ops.createPeer(sock, addr, port);
          sock.daddr = peer.addr;
          sock.dport = peer.port;
  
          // always "fail" in non-blocking mode
          throw new FS.ErrnoError(ERRNO_CODES.EINPROGRESS);
        },listen:function(sock, backlog) {
          if (!ENVIRONMENT_IS_NODE) {
            throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
          }
          if (sock.server) {
             throw new FS.ErrnoError(ERRNO_CODES.EINVAL);  // already listening
          }
          var WebSocketServer = require('ws').Server;
          var host = sock.saddr;
          sock.server = new WebSocketServer({
            host: host,
            port: sock.sport
            // TODO support backlog
          });
          Module['websocket'].emit('listen', sock.stream.fd); // Send Event with listen fd.
  
          sock.server.on('connection', function(ws) {
            if (sock.type === 1) {
              var newsock = SOCKFS.createSocket(sock.family, sock.type, sock.protocol);
  
              // create a peer on the new socket
              var peer = SOCKFS.websocket_sock_ops.createPeer(newsock, ws);
              newsock.daddr = peer.addr;
              newsock.dport = peer.port;
  
              // push to queue for accept to pick up
              sock.pending.push(newsock);
              Module['websocket'].emit('connection', newsock.stream.fd);
            } else {
              // create a peer on the listen socket so calling sendto
              // with the listen socket and an address will resolve
              // to the correct client
              SOCKFS.websocket_sock_ops.createPeer(sock, ws);
              Module['websocket'].emit('connection', sock.stream.fd);
            }
          });
          sock.server.on('closed', function() {
            Module['websocket'].emit('close', sock.stream.fd);
            sock.server = null;
          });
          sock.server.on('error', function(error) {
            // Although the ws library may pass errors that may be more descriptive than
            // ECONNREFUSED they are not necessarily the expected error code e.g. 
            // ENOTFOUND on getaddrinfo seems to be node.js specific, so using EHOSTUNREACH
            // is still probably the most useful thing to do. This error shouldn't
            // occur in a well written app as errors should get trapped in the compiled
            // app's own getaddrinfo call.
            sock.error = ERRNO_CODES.EHOSTUNREACH; // Used in getsockopt for SOL_SOCKET/SO_ERROR test.
            Module['websocket'].emit('error', [sock.stream.fd, sock.error, 'EHOSTUNREACH: Host is unreachable']);
            // don't throw
          });
        },accept:function(listensock) {
          if (!listensock.server) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          var newsock = listensock.pending.shift();
          newsock.stream.flags = listensock.stream.flags;
          return newsock;
        },getname:function(sock, peer) {
          var addr, port;
          if (peer) {
            if (sock.daddr === undefined || sock.dport === undefined) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
            }
            addr = sock.daddr;
            port = sock.dport;
          } else {
            // TODO saddr and sport will be set for bind()'d UDP sockets, but what
            // should we be returning for TCP sockets that've been connect()'d?
            addr = sock.saddr || 0;
            port = sock.sport || 0;
          }
          return { addr: addr, port: port };
        },sendmsg:function(sock, buffer, offset, length, addr, port) {
          if (sock.type === 2) {
            // connection-less sockets will honor the message address,
            // and otherwise fall back to the bound destination address
            if (addr === undefined || port === undefined) {
              addr = sock.daddr;
              port = sock.dport;
            }
            // if there was no address to fall back to, error out
            if (addr === undefined || port === undefined) {
              throw new FS.ErrnoError(ERRNO_CODES.EDESTADDRREQ);
            }
          } else {
            // connection-based sockets will only use the bound
            addr = sock.daddr;
            port = sock.dport;
          }
  
          // find the peer for the destination address
          var dest = SOCKFS.websocket_sock_ops.getPeer(sock, addr, port);
  
          // early out if not connected with a connection-based socket
          if (sock.type === 1) {
            if (!dest || dest.socket.readyState === dest.socket.CLOSING || dest.socket.readyState === dest.socket.CLOSED) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
            } else if (dest.socket.readyState === dest.socket.CONNECTING) {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
          }
  
          // create a copy of the incoming data to send, as the WebSocket API
          // doesn't work entirely with an ArrayBufferView, it'll just send
          // the entire underlying buffer
          var data;
          if (buffer instanceof Array || buffer instanceof ArrayBuffer) {
            data = buffer.slice(offset, offset + length);
          } else {  // ArrayBufferView
            data = buffer.buffer.slice(buffer.byteOffset + offset, buffer.byteOffset + offset + length);
          }
  
          // if we're emulating a connection-less dgram socket and don't have
          // a cached connection, queue the buffer to send upon connect and
          // lie, saying the data was sent now.
          if (sock.type === 2) {
            if (!dest || dest.socket.readyState !== dest.socket.OPEN) {
              // if we're not connected, open a new connection
              if (!dest || dest.socket.readyState === dest.socket.CLOSING || dest.socket.readyState === dest.socket.CLOSED) {
                dest = SOCKFS.websocket_sock_ops.createPeer(sock, addr, port);
              }
              dest.dgram_send_queue.push(data);
              return length;
            }
          }
  
          try {
            // send the actual data
            dest.socket.send(data);
            return length;
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
        },recvmsg:function(sock, length) {
          // http://pubs.opengroup.org/onlinepubs/7908799/xns/recvmsg.html
          if (sock.type === 1 && sock.server) {
            // tcp servers should not be recv()'ing on the listen socket
            throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
          }
  
          var queued = sock.recv_queue.shift();
          if (!queued) {
            if (sock.type === 1) {
              var dest = SOCKFS.websocket_sock_ops.getPeer(sock, sock.daddr, sock.dport);
  
              if (!dest) {
                // if we have a destination address but are not connected, error out
                throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
              }
              else if (dest.socket.readyState === dest.socket.CLOSING || dest.socket.readyState === dest.socket.CLOSED) {
                // return null if the socket has closed
                return null;
              }
              else {
                // else, our socket is in a valid state but truly has nothing available
                throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
              }
            } else {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
          }
  
          // queued.data will be an ArrayBuffer if it's unadulterated, but if it's
          // requeued TCP data it'll be an ArrayBufferView
          var queuedLength = queued.data.byteLength || queued.data.length;
          var queuedOffset = queued.data.byteOffset || 0;
          var queuedBuffer = queued.data.buffer || queued.data;
          var bytesRead = Math.min(length, queuedLength);
          var res = {
            buffer: new Uint8Array(queuedBuffer, queuedOffset, bytesRead),
            addr: queued.addr,
            port: queued.port
          };
  
  
          // push back any unread data for TCP connections
          if (sock.type === 1 && bytesRead < queuedLength) {
            var bytesRemaining = queuedLength - bytesRead;
            queued.data = new Uint8Array(queuedBuffer, queuedOffset + bytesRead, bytesRemaining);
            sock.recv_queue.unshift(queued);
          }
  
          return res;
        }}};function _send(fd, buf, len, flags) {
      var sock = SOCKFS.getSocket(fd);
      if (!sock) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      // TODO honor flags
      return _write(fd, buf, len);
    }
  
  function _pwrite(fildes, buf, nbyte, offset) {
      // ssize_t pwrite(int fildes, const void *buf, size_t nbyte, off_t offset);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/write.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      try {
        var slab = HEAP8;
        return FS.write(stream, slab, buf, nbyte, offset);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _write(fildes, buf, nbyte) {
      // ssize_t write(int fildes, const void *buf, size_t nbyte);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/write.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
  
  
      try {
        var slab = HEAP8;
        return FS.write(stream, slab, buf, nbyte);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _fwrite(ptr, size, nitems, stream) {
      // size_t fwrite(const void *restrict ptr, size_t size, size_t nitems, FILE *restrict stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fwrite.html
      var bytesToWrite = nitems * size;
      if (bytesToWrite == 0) return 0;
      var fd = _fileno(stream);
      var bytesWritten = _write(fd, ptr, bytesToWrite);
      if (bytesWritten == -1) {
        var streamObj = FS.getStreamFromPtr(stream);
        if (streamObj) streamObj.error = true;
        return 0;
      } else {
        return (bytesWritten / size)|0;
      }
    }
  
  
  function __reallyNegative(x) {
      return x < 0 || (x === 0 && (1/x) === -Infinity);
    }function __formatString(format, varargs) {
      var textIndex = format;
      var argIndex = 0;
      function getNextArg(type) {
        // NOTE: Explicitly ignoring type safety. Otherwise this fails:
        //       int x = 4; printf("%c\n", (char)x);
        var ret;
        if (type === 'double') {
          ret = HEAPF64[(((varargs)+(argIndex))>>3)];
        } else if (type == 'i64') {
          ret = [HEAP32[(((varargs)+(argIndex))>>2)],
                 HEAP32[(((varargs)+(argIndex+8))>>2)]];
          argIndex += 8; // each 32-bit chunk is in a 64-bit block
  
        } else {
          type = 'i32'; // varargs are always i32, i64, or double
          ret = HEAP32[(((varargs)+(argIndex))>>2)];
        }
        argIndex += Math.max(Runtime.getNativeFieldSize(type), Runtime.getAlignSize(type, null, true));
        return ret;
      }
  
      var ret = [];
      var curr, next, currArg;
      while(1) {
        var startTextIndex = textIndex;
        curr = HEAP8[((textIndex)>>0)];
        if (curr === 0) break;
        next = HEAP8[((textIndex+1)>>0)];
        if (curr == 37) {
          // Handle flags.
          var flagAlwaysSigned = false;
          var flagLeftAlign = false;
          var flagAlternative = false;
          var flagZeroPad = false;
          var flagPadSign = false;
          flagsLoop: while (1) {
            switch (next) {
              case 43:
                flagAlwaysSigned = true;
                break;
              case 45:
                flagLeftAlign = true;
                break;
              case 35:
                flagAlternative = true;
                break;
              case 48:
                if (flagZeroPad) {
                  break flagsLoop;
                } else {
                  flagZeroPad = true;
                  break;
                }
              case 32:
                flagPadSign = true;
                break;
              default:
                break flagsLoop;
            }
            textIndex++;
            next = HEAP8[((textIndex+1)>>0)];
          }
  
          // Handle width.
          var width = 0;
          if (next == 42) {
            width = getNextArg('i32');
            textIndex++;
            next = HEAP8[((textIndex+1)>>0)];
          } else {
            while (next >= 48 && next <= 57) {
              width = width * 10 + (next - 48);
              textIndex++;
              next = HEAP8[((textIndex+1)>>0)];
            }
          }
  
          // Handle precision.
          var precisionSet = false, precision = -1;
          if (next == 46) {
            precision = 0;
            precisionSet = true;
            textIndex++;
            next = HEAP8[((textIndex+1)>>0)];
            if (next == 42) {
              precision = getNextArg('i32');
              textIndex++;
            } else {
              while(1) {
                var precisionChr = HEAP8[((textIndex+1)>>0)];
                if (precisionChr < 48 ||
                    precisionChr > 57) break;
                precision = precision * 10 + (precisionChr - 48);
                textIndex++;
              }
            }
            next = HEAP8[((textIndex+1)>>0)];
          }
          if (precision < 0) {
            precision = 6; // Standard default.
            precisionSet = false;
          }
  
          // Handle integer sizes. WARNING: These assume a 32-bit architecture!
          var argSize;
          switch (String.fromCharCode(next)) {
            case 'h':
              var nextNext = HEAP8[((textIndex+2)>>0)];
              if (nextNext == 104) {
                textIndex++;
                argSize = 1; // char (actually i32 in varargs)
              } else {
                argSize = 2; // short (actually i32 in varargs)
              }
              break;
            case 'l':
              var nextNext = HEAP8[((textIndex+2)>>0)];
              if (nextNext == 108) {
                textIndex++;
                argSize = 8; // long long
              } else {
                argSize = 4; // long
              }
              break;
            case 'L': // long long
            case 'q': // int64_t
            case 'j': // intmax_t
              argSize = 8;
              break;
            case 'z': // size_t
            case 't': // ptrdiff_t
            case 'I': // signed ptrdiff_t or unsigned size_t
              argSize = 4;
              break;
            default:
              argSize = null;
          }
          if (argSize) textIndex++;
          next = HEAP8[((textIndex+1)>>0)];
  
          // Handle type specifier.
          switch (String.fromCharCode(next)) {
            case 'd': case 'i': case 'u': case 'o': case 'x': case 'X': case 'p': {
              // Integer.
              var signed = next == 100 || next == 105;
              argSize = argSize || 4;
              var currArg = getNextArg('i' + (argSize * 8));
              var origArg = currArg;
              var argText;
              // Flatten i64-1 [low, high] into a (slightly rounded) double
              if (argSize == 8) {
                currArg = Runtime.makeBigInt(currArg[0], currArg[1], next == 117);
              }
              // Truncate to requested size.
              if (argSize <= 4) {
                var limit = Math.pow(256, argSize) - 1;
                currArg = (signed ? reSign : unSign)(currArg & limit, argSize * 8);
              }
              // Format the number.
              var currAbsArg = Math.abs(currArg);
              var prefix = '';
              if (next == 100 || next == 105) {
                if (argSize == 8 && i64Math) argText = i64Math.stringify(origArg[0], origArg[1], null); else
                argText = reSign(currArg, 8 * argSize, 1).toString(10);
              } else if (next == 117) {
                if (argSize == 8 && i64Math) argText = i64Math.stringify(origArg[0], origArg[1], true); else
                argText = unSign(currArg, 8 * argSize, 1).toString(10);
                currArg = Math.abs(currArg);
              } else if (next == 111) {
                argText = (flagAlternative ? '0' : '') + currAbsArg.toString(8);
              } else if (next == 120 || next == 88) {
                prefix = (flagAlternative && currArg != 0) ? '0x' : '';
                if (argSize == 8 && i64Math) {
                  if (origArg[1]) {
                    argText = (origArg[1]>>>0).toString(16);
                    var lower = (origArg[0]>>>0).toString(16);
                    while (lower.length < 8) lower = '0' + lower;
                    argText += lower;
                  } else {
                    argText = (origArg[0]>>>0).toString(16);
                  }
                } else
                if (currArg < 0) {
                  // Represent negative numbers in hex as 2's complement.
                  currArg = -currArg;
                  argText = (currAbsArg - 1).toString(16);
                  var buffer = [];
                  for (var i = 0; i < argText.length; i++) {
                    buffer.push((0xF - parseInt(argText[i], 16)).toString(16));
                  }
                  argText = buffer.join('');
                  while (argText.length < argSize * 2) argText = 'f' + argText;
                } else {
                  argText = currAbsArg.toString(16);
                }
                if (next == 88) {
                  prefix = prefix.toUpperCase();
                  argText = argText.toUpperCase();
                }
              } else if (next == 112) {
                if (currAbsArg === 0) {
                  argText = '(nil)';
                } else {
                  prefix = '0x';
                  argText = currAbsArg.toString(16);
                }
              }
              if (precisionSet) {
                while (argText.length < precision) {
                  argText = '0' + argText;
                }
              }
  
              // Add sign if needed
              if (currArg >= 0) {
                if (flagAlwaysSigned) {
                  prefix = '+' + prefix;
                } else if (flagPadSign) {
                  prefix = ' ' + prefix;
                }
              }
  
              // Move sign to prefix so we zero-pad after the sign
              if (argText.charAt(0) == '-') {
                prefix = '-' + prefix;
                argText = argText.substr(1);
              }
  
              // Add padding.
              while (prefix.length + argText.length < width) {
                if (flagLeftAlign) {
                  argText += ' ';
                } else {
                  if (flagZeroPad) {
                    argText = '0' + argText;
                  } else {
                    prefix = ' ' + prefix;
                  }
                }
              }
  
              // Insert the result into the buffer.
              argText = prefix + argText;
              argText.split('').forEach(function(chr) {
                ret.push(chr.charCodeAt(0));
              });
              break;
            }
            case 'f': case 'F': case 'e': case 'E': case 'g': case 'G': {
              // Float.
              var currArg = getNextArg('double');
              var argText;
              if (isNaN(currArg)) {
                argText = 'nan';
                flagZeroPad = false;
              } else if (!isFinite(currArg)) {
                argText = (currArg < 0 ? '-' : '') + 'inf';
                flagZeroPad = false;
              } else {
                var isGeneral = false;
                var effectivePrecision = Math.min(precision, 20);
  
                // Convert g/G to f/F or e/E, as per:
                // http://pubs.opengroup.org/onlinepubs/9699919799/functions/printf.html
                if (next == 103 || next == 71) {
                  isGeneral = true;
                  precision = precision || 1;
                  var exponent = parseInt(currArg.toExponential(effectivePrecision).split('e')[1], 10);
                  if (precision > exponent && exponent >= -4) {
                    next = ((next == 103) ? 'f' : 'F').charCodeAt(0);
                    precision -= exponent + 1;
                  } else {
                    next = ((next == 103) ? 'e' : 'E').charCodeAt(0);
                    precision--;
                  }
                  effectivePrecision = Math.min(precision, 20);
                }
  
                if (next == 101 || next == 69) {
                  argText = currArg.toExponential(effectivePrecision);
                  // Make sure the exponent has at least 2 digits.
                  if (/[eE][-+]\d$/.test(argText)) {
                    argText = argText.slice(0, -1) + '0' + argText.slice(-1);
                  }
                } else if (next == 102 || next == 70) {
                  argText = currArg.toFixed(effectivePrecision);
                  if (currArg === 0 && __reallyNegative(currArg)) {
                    argText = '-' + argText;
                  }
                }
  
                var parts = argText.split('e');
                if (isGeneral && !flagAlternative) {
                  // Discard trailing zeros and periods.
                  while (parts[0].length > 1 && parts[0].indexOf('.') != -1 &&
                         (parts[0].slice(-1) == '0' || parts[0].slice(-1) == '.')) {
                    parts[0] = parts[0].slice(0, -1);
                  }
                } else {
                  // Make sure we have a period in alternative mode.
                  if (flagAlternative && argText.indexOf('.') == -1) parts[0] += '.';
                  // Zero pad until required precision.
                  while (precision > effectivePrecision++) parts[0] += '0';
                }
                argText = parts[0] + (parts.length > 1 ? 'e' + parts[1] : '');
  
                // Capitalize 'E' if needed.
                if (next == 69) argText = argText.toUpperCase();
  
                // Add sign.
                if (currArg >= 0) {
                  if (flagAlwaysSigned) {
                    argText = '+' + argText;
                  } else if (flagPadSign) {
                    argText = ' ' + argText;
                  }
                }
              }
  
              // Add padding.
              while (argText.length < width) {
                if (flagLeftAlign) {
                  argText += ' ';
                } else {
                  if (flagZeroPad && (argText[0] == '-' || argText[0] == '+')) {
                    argText = argText[0] + '0' + argText.slice(1);
                  } else {
                    argText = (flagZeroPad ? '0' : ' ') + argText;
                  }
                }
              }
  
              // Adjust case.
              if (next < 97) argText = argText.toUpperCase();
  
              // Insert the result into the buffer.
              argText.split('').forEach(function(chr) {
                ret.push(chr.charCodeAt(0));
              });
              break;
            }
            case 's': {
              // String.
              var arg = getNextArg('i8*');
              var argLength = arg ? _strlen(arg) : '(null)'.length;
              if (precisionSet) argLength = Math.min(argLength, precision);
              if (!flagLeftAlign) {
                while (argLength < width--) {
                  ret.push(32);
                }
              }
              if (arg) {
                for (var i = 0; i < argLength; i++) {
                  ret.push(HEAPU8[((arg++)>>0)]);
                }
              } else {
                ret = ret.concat(intArrayFromString('(null)'.substr(0, argLength), true));
              }
              if (flagLeftAlign) {
                while (argLength < width--) {
                  ret.push(32);
                }
              }
              break;
            }
            case 'c': {
              // Character.
              if (flagLeftAlign) ret.push(getNextArg('i8'));
              while (--width > 0) {
                ret.push(32);
              }
              if (!flagLeftAlign) ret.push(getNextArg('i8'));
              break;
            }
            case 'n': {
              // Write the length written so far to the next parameter.
              var ptr = getNextArg('i32*');
              HEAP32[((ptr)>>2)]=ret.length;
              break;
            }
            case '%': {
              // Literal percent sign.
              ret.push(curr);
              break;
            }
            default: {
              // Unknown specifiers remain untouched.
              for (var i = startTextIndex; i < textIndex + 2; i++) {
                ret.push(HEAP8[((i)>>0)]);
              }
            }
          }
          textIndex += 2;
          // TODO: Support a/A (hex float) and m (last error) specifiers.
          // TODO: Support %1${specifier} for arg selection.
        } else {
          ret.push(curr);
          textIndex += 1;
        }
      }
      return ret;
    }function _fprintf(stream, format, varargs) {
      // int fprintf(FILE *restrict stream, const char *restrict format, ...);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/printf.html
      var result = __formatString(format, varargs);
      var stack = Runtime.stackSave();
      var ret = _fwrite(allocate(result, 'i8', ALLOC_STACK), 1, result.length, stream);
      Runtime.stackRestore(stack);
      return ret;
    }

  function _unlink(path) {
      // int unlink(const char *path);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/unlink.html
      path = Pointer_stringify(path);
      try {
        FS.unlink(path);
        return 0;
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }

  function _fopen(filename, mode) {
      // FILE *fopen(const char *restrict filename, const char *restrict mode);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fopen.html
      var flags;
      mode = Pointer_stringify(mode);
      if (mode[0] == 'r') {
        if (mode.indexOf('+') != -1) {
          flags = 2;
        } else {
          flags = 0;
        }
      } else if (mode[0] == 'w') {
        if (mode.indexOf('+') != -1) {
          flags = 2;
        } else {
          flags = 1;
        }
        flags |= 64;
        flags |= 512;
      } else if (mode[0] == 'a') {
        if (mode.indexOf('+') != -1) {
          flags = 2;
        } else {
          flags = 1;
        }
        flags |= 64;
        flags |= 1024;
      } else {
        ___setErrNo(ERRNO_CODES.EINVAL);
        return 0;
      }
      var fd = _open(filename, flags, allocate([0x1FF, 0, 0, 0], 'i32', ALLOC_STACK));  // All creation permissions.
      return fd === -1 ? 0 : FS.getPtrForStream(FS.getStream(fd));
    }


  function _fputc(c, stream) {
      // int fputc(int c, FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fputc.html
      var chr = unSign(c & 0xFF);
      HEAP8[((_fputc.ret)>>0)]=chr;
      var fd = _fileno(stream);
      var ret = _write(fd, _fputc.ret, 1);
      if (ret == -1) {
        var streamObj = FS.getStreamFromPtr(stream);
        if (streamObj) streamObj.error = true;
        return -1;
      } else {
        return chr;
      }
    }

  
  function _recv(fd, buf, len, flags) {
      var sock = SOCKFS.getSocket(fd);
      if (!sock) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      // TODO honor flags
      return _read(fd, buf, len);
    }
  
  function _pread(fildes, buf, nbyte, offset) {
      // ssize_t pread(int fildes, void *buf, size_t nbyte, off_t offset);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/read.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      try {
        var slab = HEAP8;
        return FS.read(stream, slab, buf, nbyte, offset);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _read(fildes, buf, nbyte) {
      // ssize_t read(int fildes, void *buf, size_t nbyte);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/read.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
  
  
      try {
        var slab = HEAP8;
        return FS.read(stream, slab, buf, nbyte);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }

  var _llvm_va_start=undefined;

  function _llvm_va_end() {}

  function ___errno_location() {
      return ___errno_state;
    }

  var _fabs=Math_abs;

  function _llvm_lifetime_start() {}

  function _llvm_lifetime_end() {}

  var _llvm_memset_p0i8_i64=_memset;

  function _llvm_va_copy(ppdest, ppsrc) {
      // copy the list start
      HEAP8[((ppdest)>>0)]=HEAP8[((ppsrc)>>0)];HEAP8[(((ppdest)+(1))>>0)]=HEAP8[(((ppsrc)+(1))>>0)];HEAP8[(((ppdest)+(2))>>0)]=HEAP8[(((ppsrc)+(2))>>0)];HEAP8[(((ppdest)+(3))>>0)]=HEAP8[(((ppsrc)+(3))>>0)];
      
      // copy the list's current offset (will be advanced with each call to va_arg)
      HEAP8[(((ppdest+4))>>0)]=HEAP8[(((ppsrc+4))>>0)];HEAP8[((((ppdest+4))+(1))>>0)]=HEAP8[((((ppsrc+4))+(1))>>0)];HEAP8[((((ppdest+4))+(2))>>0)]=HEAP8[((((ppsrc+4))+(2))>>0)];HEAP8[((((ppdest+4))+(3))>>0)]=HEAP8[((((ppsrc+4))+(3))>>0)];
    }

  function _abort() {
      Module['abort']();
    }

  function _sbrk(bytes) {
      // Implement a Linux-like 'memory area' for our 'process'.
      // Changes the size of the memory area by |bytes|; returns the
      // address of the previous top ('break') of the memory area
      // We control the "dynamic" memory - DYNAMIC_BASE to DYNAMICTOP
      var self = _sbrk;
      if (!self.called) {
        DYNAMICTOP = alignMemoryPage(DYNAMICTOP); // make sure we start out aligned
        self.called = true;
        assert(Runtime.dynamicAlloc);
        self.alloc = Runtime.dynamicAlloc;
        Runtime.dynamicAlloc = function() { abort('cannot dynamically allocate, sbrk now has control') };
      }
      var ret = DYNAMICTOP;
      if (bytes != 0) self.alloc(bytes);
      return ret;  // Previous break location.
    }

  function _sysconf(name) {
      // long sysconf(int name);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/sysconf.html
      switch(name) {
        case 30: return PAGE_SIZE;
        case 132:
        case 133:
        case 12:
        case 137:
        case 138:
        case 15:
        case 235:
        case 16:
        case 17:
        case 18:
        case 19:
        case 20:
        case 149:
        case 13:
        case 10:
        case 236:
        case 153:
        case 9:
        case 21:
        case 22:
        case 159:
        case 154:
        case 14:
        case 77:
        case 78:
        case 139:
        case 80:
        case 81:
        case 79:
        case 82:
        case 68:
        case 67:
        case 164:
        case 11:
        case 29:
        case 47:
        case 48:
        case 95:
        case 52:
        case 51:
        case 46:
          return 200809;
        case 27:
        case 246:
        case 127:
        case 128:
        case 23:
        case 24:
        case 160:
        case 161:
        case 181:
        case 182:
        case 242:
        case 183:
        case 184:
        case 243:
        case 244:
        case 245:
        case 165:
        case 178:
        case 179:
        case 49:
        case 50:
        case 168:
        case 169:
        case 175:
        case 170:
        case 171:
        case 172:
        case 97:
        case 76:
        case 32:
        case 173:
        case 35:
          return -1;
        case 176:
        case 177:
        case 7:
        case 155:
        case 8:
        case 157:
        case 125:
        case 126:
        case 92:
        case 93:
        case 129:
        case 130:
        case 131:
        case 94:
        case 91:
          return 1;
        case 74:
        case 60:
        case 69:
        case 70:
        case 4:
          return 1024;
        case 31:
        case 42:
        case 72:
          return 32;
        case 87:
        case 26:
        case 33:
          return 2147483647;
        case 34:
        case 1:
          return 47839;
        case 38:
        case 36:
          return 99;
        case 43:
        case 37:
          return 2048;
        case 0: return 2097152;
        case 3: return 65536;
        case 28: return 32768;
        case 44: return 32767;
        case 75: return 16384;
        case 39: return 1000;
        case 89: return 700;
        case 71: return 256;
        case 40: return 255;
        case 2: return 100;
        case 180: return 64;
        case 25: return 20;
        case 5: return 16;
        case 6: return 6;
        case 73: return 4;
        case 84: {
          if (typeof navigator === 'object') return navigator['hardwareConcurrency'] || 1;
          return 1;
        }
      }
      ___setErrNo(ERRNO_CODES.EINVAL);
      return -1;
    }

  function _time(ptr) {
      var ret = (Date.now()/1000)|0;
      if (ptr) {
        HEAP32[((ptr)>>2)]=ret;
      }
      return ret;
    }

  
  function _copysign(a, b) {
      return __reallyNegative(a) === __reallyNegative(b) ? a : -a;
    }function _copysignl(
  ) {
  return _copysign.apply(null, arguments)
  }

  
  function _fmod(x, y) {
      return x % y;
    }function _fmodl(
  ) {
  return _fmod.apply(null, arguments)
  }

  
  function _strerror_r(errnum, strerrbuf, buflen) {
      if (errnum in ERRNO_MESSAGES) {
        if (ERRNO_MESSAGES[errnum].length > buflen - 1) {
          return ___setErrNo(ERRNO_CODES.ERANGE);
        } else {
          var msg = ERRNO_MESSAGES[errnum];
          writeAsciiToMemory(msg, strerrbuf);
          return 0;
        }
      } else {
        return ___setErrNo(ERRNO_CODES.EINVAL);
      }
    }function _strerror(errnum) {
      if (!_strerror.buffer) _strerror.buffer = _malloc(256);
      _strerror_r(errnum, _strerror.buffer, 256);
      return _strerror.buffer;
    }






  
  
  function _emscripten_set_main_loop_timing(mode, value) {
      Browser.mainLoop.timingMode = mode;
      Browser.mainLoop.timingValue = value;
  
      if (!Browser.mainLoop.func) {
        console.error('emscripten_set_main_loop_timing: Cannot set timing mode for main loop since a main loop does not exist! Call emscripten_set_main_loop first to set one up.');
        return 1; // Return non-zero on failure, can't set timing mode when there is no main loop.
      }
  
      if (mode == 0 /*EM_TIMING_SETTIMEOUT*/) {
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler() {
          setTimeout(Browser.mainLoop.runner, value); // doing this each time means that on exception, we stop
        };
        Browser.mainLoop.method = 'timeout';
      } else if (mode == 1 /*EM_TIMING_RAF*/) {
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler() {
          Browser.requestAnimationFrame(Browser.mainLoop.runner);
        };
        Browser.mainLoop.method = 'rAF';
      }
      return 0;
    }function _emscripten_set_main_loop(func, fps, simulateInfiniteLoop, arg) {
      Module['noExitRuntime'] = true;
  
      assert(!Browser.mainLoop.func, 'emscripten_set_main_loop: there can only be one main loop function at once: call emscripten_cancel_main_loop to cancel the previous one before setting a new one with different parameters.');
  
      Browser.mainLoop.func = func;
      Browser.mainLoop.arg = arg;
  
      var thisMainLoopId = Browser.mainLoop.currentlyRunningMainloop;
  
      Browser.mainLoop.runner = function Browser_mainLoop_runner() {
        if (ABORT) return;
        if (Browser.mainLoop.queue.length > 0) {
          var start = Date.now();
          var blocker = Browser.mainLoop.queue.shift();
          blocker.func(blocker.arg);
          if (Browser.mainLoop.remainingBlockers) {
            var remaining = Browser.mainLoop.remainingBlockers;
            var next = remaining%1 == 0 ? remaining-1 : Math.floor(remaining);
            if (blocker.counted) {
              Browser.mainLoop.remainingBlockers = next;
            } else {
              // not counted, but move the progress along a tiny bit
              next = next + 0.5; // do not steal all the next one's progress
              Browser.mainLoop.remainingBlockers = (8*remaining + next)/9;
            }
          }
          console.log('main loop blocker "' + blocker.name + '" took ' + (Date.now() - start) + ' ms'); //, left: ' + Browser.mainLoop.remainingBlockers);
          Browser.mainLoop.updateStatus();
          setTimeout(Browser.mainLoop.runner, 0);
          return;
        }
  
        // catch pauses from non-main loop sources
        if (thisMainLoopId < Browser.mainLoop.currentlyRunningMainloop) return;
  
        // Implement very basic swap interval control
        Browser.mainLoop.currentFrameNumber = Browser.mainLoop.currentFrameNumber + 1 | 0;
        if (Browser.mainLoop.timingMode == 1/*EM_TIMING_RAF*/ && Browser.mainLoop.timingValue > 1 && Browser.mainLoop.currentFrameNumber % Browser.mainLoop.timingValue != 0) {
          // Not the scheduled time to render this frame - skip.
          Browser.mainLoop.scheduler();
          return;
        }
  
        // Signal GL rendering layer that processing of a new frame is about to start. This helps it optimize
        // VBO double-buffering and reduce GPU stalls.
  
        if (Browser.mainLoop.method === 'timeout' && Module.ctx) {
          Module.printErr('Looks like you are rendering without using requestAnimationFrame for the main loop. You should use 0 for the frame rate in emscripten_set_main_loop in order to use requestAnimationFrame, as that can greatly improve your frame rates!');
          Browser.mainLoop.method = ''; // just warn once per call to set main loop
        }
  
        Browser.mainLoop.runIter(function() {
          if (typeof arg !== 'undefined') {
            Runtime.dynCall('vi', func, [arg]);
          } else {
            Runtime.dynCall('v', func);
          }
        });
  
        // catch pauses from the main loop itself
        if (thisMainLoopId < Browser.mainLoop.currentlyRunningMainloop) return;
  
        // Queue new audio data. This is important to be right after the main loop invocation, so that we will immediately be able
        // to queue the newest produced audio samples.
        // TODO: Consider adding pre- and post- rAF callbacks so that GL.newRenderingFrameStarted() and SDL.audio.queueNewAudioData()
        //       do not need to be hardcoded into this function, but can be more generic.
        if (typeof SDL === 'object' && SDL.audio && SDL.audio.queueNewAudioData) SDL.audio.queueNewAudioData();
  
        Browser.mainLoop.scheduler();
      }
  
      if (fps && fps > 0) _emscripten_set_main_loop_timing(0/*EM_TIMING_SETTIMEOUT*/, 1000.0 / fps);
      else _emscripten_set_main_loop_timing(1/*EM_TIMING_RAF*/, 1); // Do rAF by rendering each frame (no decimating)
  
      Browser.mainLoop.scheduler();
  
      if (simulateInfiniteLoop) {
        throw 'SimulateInfiniteLoop';
      }
    }var Browser={mainLoop:{scheduler:null,method:"",currentlyRunningMainloop:0,func:null,arg:0,timingMode:0,timingValue:0,currentFrameNumber:0,queue:[],pause:function() {
          Browser.mainLoop.scheduler = null;
          Browser.mainLoop.currentlyRunningMainloop++; // Incrementing this signals the previous main loop that it's now become old, and it must return.
        },resume:function() {
          Browser.mainLoop.currentlyRunningMainloop++;
          var timingMode = Browser.mainLoop.timingMode;
          var timingValue = Browser.mainLoop.timingValue;
          var func = Browser.mainLoop.func;
          Browser.mainLoop.func = null;
          _emscripten_set_main_loop(func, 0, false, Browser.mainLoop.arg);
          _emscripten_set_main_loop_timing(timingMode, timingValue);
        },updateStatus:function() {
          if (Module['setStatus']) {
            var message = Module['statusMessage'] || 'Please wait...';
            var remaining = Browser.mainLoop.remainingBlockers;
            var expected = Browser.mainLoop.expectedBlockers;
            if (remaining) {
              if (remaining < expected) {
                Module['setStatus'](message + ' (' + (expected - remaining) + '/' + expected + ')');
              } else {
                Module['setStatus'](message);
              }
            } else {
              Module['setStatus']('');
            }
          }
        },runIter:function(func) {
          if (ABORT) return;
          if (Module['preMainLoop']) {
            var preRet = Module['preMainLoop']();
            if (preRet === false) {
              return; // |return false| skips a frame
            }
          }
          try {
            func();
          } catch (e) {
            if (e instanceof ExitStatus) {
              return;
            } else {
              if (e && typeof e === 'object' && e.stack) Module.printErr('exception thrown: ' + [e, e.stack]);
              throw e;
            }
          }
          if (Module['postMainLoop']) Module['postMainLoop']();
        }},isFullScreen:false,pointerLock:false,moduleContextCreatedCallbacks:[],workers:[],init:function() {
        if (!Module["preloadPlugins"]) Module["preloadPlugins"] = []; // needs to exist even in workers
  
        if (Browser.initted) return;
        Browser.initted = true;
  
        try {
          new Blob();
          Browser.hasBlobConstructor = true;
        } catch(e) {
          Browser.hasBlobConstructor = false;
          console.log("warning: no blob constructor, cannot create blobs with mimetypes");
        }
        Browser.BlobBuilder = typeof MozBlobBuilder != "undefined" ? MozBlobBuilder : (typeof WebKitBlobBuilder != "undefined" ? WebKitBlobBuilder : (!Browser.hasBlobConstructor ? console.log("warning: no BlobBuilder") : null));
        Browser.URLObject = typeof window != "undefined" ? (window.URL ? window.URL : window.webkitURL) : undefined;
        if (!Module.noImageDecoding && typeof Browser.URLObject === 'undefined') {
          console.log("warning: Browser does not support creating object URLs. Built-in browser image decoding will not be available.");
          Module.noImageDecoding = true;
        }
  
        // Support for plugins that can process preloaded files. You can add more of these to
        // your app by creating and appending to Module.preloadPlugins.
        //
        // Each plugin is asked if it can handle a file based on the file's name. If it can,
        // it is given the file's raw data. When it is done, it calls a callback with the file's
        // (possibly modified) data. For example, a plugin might decompress a file, or it
        // might create some side data structure for use later (like an Image element, etc.).
  
        var imagePlugin = {};
        imagePlugin['canHandle'] = function imagePlugin_canHandle(name) {
          return !Module.noImageDecoding && /\.(jpg|jpeg|png|bmp)$/i.test(name);
        };
        imagePlugin['handle'] = function imagePlugin_handle(byteArray, name, onload, onerror) {
          var b = null;
          if (Browser.hasBlobConstructor) {
            try {
              b = new Blob([byteArray], { type: Browser.getMimetype(name) });
              if (b.size !== byteArray.length) { // Safari bug #118630
                // Safari's Blob can only take an ArrayBuffer
                b = new Blob([(new Uint8Array(byteArray)).buffer], { type: Browser.getMimetype(name) });
              }
            } catch(e) {
              Runtime.warnOnce('Blob constructor present but fails: ' + e + '; falling back to blob builder');
            }
          }
          if (!b) {
            var bb = new Browser.BlobBuilder();
            bb.append((new Uint8Array(byteArray)).buffer); // we need to pass a buffer, and must copy the array to get the right data range
            b = bb.getBlob();
          }
          var url = Browser.URLObject.createObjectURL(b);
          assert(typeof url == 'string', 'createObjectURL must return a url as a string');
          var img = new Image();
          img.onload = function img_onload() {
            assert(img.complete, 'Image ' + name + ' could not be decoded');
            var canvas = document.createElement('canvas');
            canvas.width = img.width;
            canvas.height = img.height;
            var ctx = canvas.getContext('2d');
            ctx.drawImage(img, 0, 0);
            Module["preloadedImages"][name] = canvas;
            Browser.URLObject.revokeObjectURL(url);
            if (onload) onload(byteArray);
          };
          img.onerror = function img_onerror(event) {
            console.log('Image ' + url + ' could not be decoded');
            if (onerror) onerror();
          };
          img.src = url;
        };
        Module['preloadPlugins'].push(imagePlugin);
  
        var audioPlugin = {};
        audioPlugin['canHandle'] = function audioPlugin_canHandle(name) {
          return !Module.noAudioDecoding && name.substr(-4) in { '.ogg': 1, '.wav': 1, '.mp3': 1 };
        };
        audioPlugin['handle'] = function audioPlugin_handle(byteArray, name, onload, onerror) {
          var done = false;
          function finish(audio) {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = audio;
            if (onload) onload(byteArray);
          }
          function fail() {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = new Audio(); // empty shim
            if (onerror) onerror();
          }
          if (Browser.hasBlobConstructor) {
            try {
              var b = new Blob([byteArray], { type: Browser.getMimetype(name) });
            } catch(e) {
              return fail();
            }
            var url = Browser.URLObject.createObjectURL(b); // XXX we never revoke this!
            assert(typeof url == 'string', 'createObjectURL must return a url as a string');
            var audio = new Audio();
            audio.addEventListener('canplaythrough', function() { finish(audio) }, false); // use addEventListener due to chromium bug 124926
            audio.onerror = function audio_onerror(event) {
              if (done) return;
              console.log('warning: browser could not fully decode audio ' + name + ', trying slower base64 approach');
              function encode64(data) {
                var BASE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
                var PAD = '=';
                var ret = '';
                var leftchar = 0;
                var leftbits = 0;
                for (var i = 0; i < data.length; i++) {
                  leftchar = (leftchar << 8) | data[i];
                  leftbits += 8;
                  while (leftbits >= 6) {
                    var curr = (leftchar >> (leftbits-6)) & 0x3f;
                    leftbits -= 6;
                    ret += BASE[curr];
                  }
                }
                if (leftbits == 2) {
                  ret += BASE[(leftchar&3) << 4];
                  ret += PAD + PAD;
                } else if (leftbits == 4) {
                  ret += BASE[(leftchar&0xf) << 2];
                  ret += PAD;
                }
                return ret;
              }
              audio.src = 'data:audio/x-' + name.substr(-3) + ';base64,' + encode64(byteArray);
              finish(audio); // we don't wait for confirmation this worked - but it's worth trying
            };
            audio.src = url;
            // workaround for chrome bug 124926 - we do not always get oncanplaythrough or onerror
            Browser.safeSetTimeout(function() {
              finish(audio); // try to use it even though it is not necessarily ready to play
            }, 10000);
          } else {
            return fail();
          }
        };
        Module['preloadPlugins'].push(audioPlugin);
  
        // Canvas event setup
  
        var canvas = Module['canvas'];
        function pointerLockChange() {
          Browser.pointerLock = document['pointerLockElement'] === canvas ||
                                document['mozPointerLockElement'] === canvas ||
                                document['webkitPointerLockElement'] === canvas ||
                                document['msPointerLockElement'] === canvas;
        }
        if (canvas) {
          // forced aspect ratio can be enabled by defining 'forcedAspectRatio' on Module
          // Module['forcedAspectRatio'] = 4 / 3;
          
          canvas.requestPointerLock = canvas['requestPointerLock'] ||
                                      canvas['mozRequestPointerLock'] ||
                                      canvas['webkitRequestPointerLock'] ||
                                      canvas['msRequestPointerLock'] ||
                                      function(){};
          canvas.exitPointerLock = document['exitPointerLock'] ||
                                   document['mozExitPointerLock'] ||
                                   document['webkitExitPointerLock'] ||
                                   document['msExitPointerLock'] ||
                                   function(){}; // no-op if function does not exist
          canvas.exitPointerLock = canvas.exitPointerLock.bind(document);
  
  
          document.addEventListener('pointerlockchange', pointerLockChange, false);
          document.addEventListener('mozpointerlockchange', pointerLockChange, false);
          document.addEventListener('webkitpointerlockchange', pointerLockChange, false);
          document.addEventListener('mspointerlockchange', pointerLockChange, false);
  
          if (Module['elementPointerLock']) {
            canvas.addEventListener("click", function(ev) {
              if (!Browser.pointerLock && canvas.requestPointerLock) {
                canvas.requestPointerLock();
                ev.preventDefault();
              }
            }, false);
          }
        }
      },createContext:function(canvas, useWebGL, setInModule, webGLContextAttributes) {
        if (useWebGL && Module.ctx && canvas == Module.canvas) return Module.ctx; // no need to recreate GL context if it's already been created for this canvas.
  
        var ctx;
        var contextHandle;
        if (useWebGL) {
          // For GLES2/desktop GL compatibility, adjust a few defaults to be different to WebGL defaults, so that they align better with the desktop defaults.
          var contextAttributes = {
            antialias: false,
            alpha: false
          };
  
          if (webGLContextAttributes) {
            for (var attribute in webGLContextAttributes) {
              contextAttributes[attribute] = webGLContextAttributes[attribute];
            }
          }
  
          contextHandle = GL.createContext(canvas, contextAttributes);
          if (contextHandle) {
            ctx = GL.getContext(contextHandle).GLctx;
          }
          // Set the background of the WebGL canvas to black
          canvas.style.backgroundColor = "black";
        } else {
          ctx = canvas.getContext('2d');
        }
  
        if (!ctx) return null;
  
        if (setInModule) {
          if (!useWebGL) assert(typeof GLctx === 'undefined', 'cannot set in module if GLctx is used, but we are a non-GL context that would replace it');
  
          Module.ctx = ctx;
          if (useWebGL) GL.makeContextCurrent(contextHandle);
          Module.useWebGL = useWebGL;
          Browser.moduleContextCreatedCallbacks.forEach(function(callback) { callback() });
          Browser.init();
        }
        return ctx;
      },destroyContext:function(canvas, useWebGL, setInModule) {},fullScreenHandlersInstalled:false,lockPointer:undefined,resizeCanvas:undefined,requestFullScreen:function(lockPointer, resizeCanvas) {
        Browser.lockPointer = lockPointer;
        Browser.resizeCanvas = resizeCanvas;
        if (typeof Browser.lockPointer === 'undefined') Browser.lockPointer = true;
        if (typeof Browser.resizeCanvas === 'undefined') Browser.resizeCanvas = false;
  
        var canvas = Module['canvas'];
        function fullScreenChange() {
          Browser.isFullScreen = false;
          var canvasContainer = canvas.parentNode;
          if ((document['webkitFullScreenElement'] || document['webkitFullscreenElement'] ||
               document['mozFullScreenElement'] || document['mozFullscreenElement'] ||
               document['fullScreenElement'] || document['fullscreenElement'] ||
               document['msFullScreenElement'] || document['msFullscreenElement'] ||
               document['webkitCurrentFullScreenElement']) === canvasContainer) {
            canvas.cancelFullScreen = document['cancelFullScreen'] ||
                                      document['mozCancelFullScreen'] ||
                                      document['webkitCancelFullScreen'] ||
                                      document['msExitFullscreen'] ||
                                      document['exitFullscreen'] ||
                                      function() {};
            canvas.cancelFullScreen = canvas.cancelFullScreen.bind(document);
            if (Browser.lockPointer) canvas.requestPointerLock();
            Browser.isFullScreen = true;
            if (Browser.resizeCanvas) Browser.setFullScreenCanvasSize();
          } else {
            
            // remove the full screen specific parent of the canvas again to restore the HTML structure from before going full screen
            canvasContainer.parentNode.insertBefore(canvas, canvasContainer);
            canvasContainer.parentNode.removeChild(canvasContainer);
            
            if (Browser.resizeCanvas) Browser.setWindowedCanvasSize();
          }
          if (Module['onFullScreen']) Module['onFullScreen'](Browser.isFullScreen);
          Browser.updateCanvasDimensions(canvas);
        }
  
        if (!Browser.fullScreenHandlersInstalled) {
          Browser.fullScreenHandlersInstalled = true;
          document.addEventListener('fullscreenchange', fullScreenChange, false);
          document.addEventListener('mozfullscreenchange', fullScreenChange, false);
          document.addEventListener('webkitfullscreenchange', fullScreenChange, false);
          document.addEventListener('MSFullscreenChange', fullScreenChange, false);
        }
  
        // create a new parent to ensure the canvas has no siblings. this allows browsers to optimize full screen performance when its parent is the full screen root
        var canvasContainer = document.createElement("div");
        canvas.parentNode.insertBefore(canvasContainer, canvas);
        canvasContainer.appendChild(canvas);
        
        // use parent of canvas as full screen root to allow aspect ratio correction (Firefox stretches the root to screen size)
        canvasContainer.requestFullScreen = canvasContainer['requestFullScreen'] ||
                                            canvasContainer['mozRequestFullScreen'] ||
                                            canvasContainer['msRequestFullscreen'] ||
                                           (canvasContainer['webkitRequestFullScreen'] ? function() { canvasContainer['webkitRequestFullScreen'](Element['ALLOW_KEYBOARD_INPUT']) } : null);
        canvasContainer.requestFullScreen();
      },nextRAF:0,fakeRequestAnimationFrame:function(func) {
        // try to keep 60fps between calls to here
        var now = Date.now();
        if (Browser.nextRAF === 0) {
          Browser.nextRAF = now + 1000/60;
        } else {
          while (now + 2 >= Browser.nextRAF) { // fudge a little, to avoid timer jitter causing us to do lots of delay:0
            Browser.nextRAF += 1000/60;
          }
        }
        var delay = Math.max(Browser.nextRAF - now, 0);
        setTimeout(func, delay);
      },requestAnimationFrame:function requestAnimationFrame(func) {
        if (typeof window === 'undefined') { // Provide fallback to setTimeout if window is undefined (e.g. in Node.js)
          Browser.fakeRequestAnimationFrame(func);
        } else {
          if (!window.requestAnimationFrame) {
            window.requestAnimationFrame = window['requestAnimationFrame'] ||
                                           window['mozRequestAnimationFrame'] ||
                                           window['webkitRequestAnimationFrame'] ||
                                           window['msRequestAnimationFrame'] ||
                                           window['oRequestAnimationFrame'] ||
                                           Browser.fakeRequestAnimationFrame;
          }
          window.requestAnimationFrame(func);
        }
      },safeCallback:function(func) {
        return function() {
          if (!ABORT) return func.apply(null, arguments);
        };
      },safeRequestAnimationFrame:function(func) {
        return Browser.requestAnimationFrame(function() {
          if (!ABORT) func();
        });
      },safeSetTimeout:function(func, timeout) {
        Module['noExitRuntime'] = true;
        return setTimeout(function() {
          if (!ABORT) func();
        }, timeout);
      },safeSetInterval:function(func, timeout) {
        Module['noExitRuntime'] = true;
        return setInterval(function() {
          if (!ABORT) func();
        }, timeout);
      },getMimetype:function(name) {
        return {
          'jpg': 'image/jpeg',
          'jpeg': 'image/jpeg',
          'png': 'image/png',
          'bmp': 'image/bmp',
          'ogg': 'audio/ogg',
          'wav': 'audio/wav',
          'mp3': 'audio/mpeg'
        }[name.substr(name.lastIndexOf('.')+1)];
      },getUserMedia:function(func) {
        if(!window.getUserMedia) {
          window.getUserMedia = navigator['getUserMedia'] ||
                                navigator['mozGetUserMedia'];
        }
        window.getUserMedia(func);
      },getMovementX:function(event) {
        return event['movementX'] ||
               event['mozMovementX'] ||
               event['webkitMovementX'] ||
               0;
      },getMovementY:function(event) {
        return event['movementY'] ||
               event['mozMovementY'] ||
               event['webkitMovementY'] ||
               0;
      },getMouseWheelDelta:function(event) {
        var delta = 0;
        switch (event.type) {
          case 'DOMMouseScroll': 
            delta = event.detail;
            break;
          case 'mousewheel': 
            delta = event.wheelDelta;
            break;
          case 'wheel': 
            delta = event['deltaY'];
            break;
          default:
            throw 'unrecognized mouse wheel event: ' + event.type;
        }
        return delta;
      },mouseX:0,mouseY:0,mouseMovementX:0,mouseMovementY:0,touches:{},lastTouches:{},calculateMouseEvent:function(event) { // event should be mousemove, mousedown or mouseup
        if (Browser.pointerLock) {
          // When the pointer is locked, calculate the coordinates
          // based on the movement of the mouse.
          // Workaround for Firefox bug 764498
          if (event.type != 'mousemove' &&
              ('mozMovementX' in event)) {
            Browser.mouseMovementX = Browser.mouseMovementY = 0;
          } else {
            Browser.mouseMovementX = Browser.getMovementX(event);
            Browser.mouseMovementY = Browser.getMovementY(event);
          }
          
          // check if SDL is available
          if (typeof SDL != "undefined") {
          	Browser.mouseX = SDL.mouseX + Browser.mouseMovementX;
          	Browser.mouseY = SDL.mouseY + Browser.mouseMovementY;
          } else {
          	// just add the mouse delta to the current absolut mouse position
          	// FIXME: ideally this should be clamped against the canvas size and zero
          	Browser.mouseX += Browser.mouseMovementX;
          	Browser.mouseY += Browser.mouseMovementY;
          }        
        } else {
          // Otherwise, calculate the movement based on the changes
          // in the coordinates.
          var rect = Module["canvas"].getBoundingClientRect();
          var cw = Module["canvas"].width;
          var ch = Module["canvas"].height;
  
          // Neither .scrollX or .pageXOffset are defined in a spec, but
          // we prefer .scrollX because it is currently in a spec draft.
          // (see: http://www.w3.org/TR/2013/WD-cssom-view-20131217/)
          var scrollX = ((typeof window.scrollX !== 'undefined') ? window.scrollX : window.pageXOffset);
          var scrollY = ((typeof window.scrollY !== 'undefined') ? window.scrollY : window.pageYOffset);
          // If this assert lands, it's likely because the browser doesn't support scrollX or pageXOffset
          // and we have no viable fallback.
          assert((typeof scrollX !== 'undefined') && (typeof scrollY !== 'undefined'), 'Unable to retrieve scroll position, mouse positions likely broken.');
  
          if (event.type === 'touchstart' || event.type === 'touchend' || event.type === 'touchmove') {
            var touch = event.touch;
            if (touch === undefined) {
              return; // the "touch" property is only defined in SDL
  
            }
            var adjustedX = touch.pageX - (scrollX + rect.left);
            var adjustedY = touch.pageY - (scrollY + rect.top);
  
            adjustedX = adjustedX * (cw / rect.width);
            adjustedY = adjustedY * (ch / rect.height);
  
            var coords = { x: adjustedX, y: adjustedY };
            
            if (event.type === 'touchstart') {
              Browser.lastTouches[touch.identifier] = coords;
              Browser.touches[touch.identifier] = coords;
            } else if (event.type === 'touchend' || event.type === 'touchmove') {
              Browser.lastTouches[touch.identifier] = Browser.touches[touch.identifier];
              Browser.touches[touch.identifier] = { x: adjustedX, y: adjustedY };
            } 
            return;
          }
  
          var x = event.pageX - (scrollX + rect.left);
          var y = event.pageY - (scrollY + rect.top);
  
          // the canvas might be CSS-scaled compared to its backbuffer;
          // SDL-using content will want mouse coordinates in terms
          // of backbuffer units.
          x = x * (cw / rect.width);
          y = y * (ch / rect.height);
  
          Browser.mouseMovementX = x - Browser.mouseX;
          Browser.mouseMovementY = y - Browser.mouseY;
          Browser.mouseX = x;
          Browser.mouseY = y;
        }
      },xhrLoad:function(url, onload, onerror) {
        var xhr = new XMLHttpRequest();
        xhr.open('GET', url, true);
        xhr.responseType = 'arraybuffer';
        xhr.onload = function xhr_onload() {
          if (xhr.status == 200 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0
            onload(xhr.response);
          } else {
            onerror();
          }
        };
        xhr.onerror = onerror;
        xhr.send(null);
      },asyncLoad:function(url, onload, onerror, noRunDep) {
        Browser.xhrLoad(url, function(arrayBuffer) {
          assert(arrayBuffer, 'Loading data file "' + url + '" failed (no arrayBuffer).');
          onload(new Uint8Array(arrayBuffer));
          if (!noRunDep) removeRunDependency('al ' + url);
        }, function(event) {
          if (onerror) {
            onerror();
          } else {
            throw 'Loading data file "' + url + '" failed.';
          }
        });
        if (!noRunDep) addRunDependency('al ' + url);
      },resizeListeners:[],updateResizeListeners:function() {
        var canvas = Module['canvas'];
        Browser.resizeListeners.forEach(function(listener) {
          listener(canvas.width, canvas.height);
        });
      },setCanvasSize:function(width, height, noUpdates) {
        var canvas = Module['canvas'];
        Browser.updateCanvasDimensions(canvas, width, height);
        if (!noUpdates) Browser.updateResizeListeners();
      },windowedWidth:0,windowedHeight:0,setFullScreenCanvasSize:function() {
        // check if SDL is available   
        if (typeof SDL != "undefined") {
        	var flags = HEAPU32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)];
        	flags = flags | 0x00800000; // set SDL_FULLSCREEN flag
        	HEAP32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)]=flags
        }
        Browser.updateResizeListeners();
      },setWindowedCanvasSize:function() {
        // check if SDL is available       
        if (typeof SDL != "undefined") {
        	var flags = HEAPU32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)];
        	flags = flags & ~0x00800000; // clear SDL_FULLSCREEN flag
        	HEAP32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)]=flags
        }
        Browser.updateResizeListeners();
      },updateCanvasDimensions:function(canvas, wNative, hNative) {
        if (wNative && hNative) {
          canvas.widthNative = wNative;
          canvas.heightNative = hNative;
        } else {
          wNative = canvas.widthNative;
          hNative = canvas.heightNative;
        }
        var w = wNative;
        var h = hNative;
        if (Module['forcedAspectRatio'] && Module['forcedAspectRatio'] > 0) {
          if (w/h < Module['forcedAspectRatio']) {
            w = Math.round(h * Module['forcedAspectRatio']);
          } else {
            h = Math.round(w / Module['forcedAspectRatio']);
          }
        }
        if (((document['webkitFullScreenElement'] || document['webkitFullscreenElement'] ||
             document['mozFullScreenElement'] || document['mozFullscreenElement'] ||
             document['fullScreenElement'] || document['fullscreenElement'] ||
             document['msFullScreenElement'] || document['msFullscreenElement'] ||
             document['webkitCurrentFullScreenElement']) === canvas.parentNode) && (typeof screen != 'undefined')) {
           var factor = Math.min(screen.width / w, screen.height / h);
           w = Math.round(w * factor);
           h = Math.round(h * factor);
        }
        if (Browser.resizeCanvas) {
          if (canvas.width  != w) canvas.width  = w;
          if (canvas.height != h) canvas.height = h;
          if (typeof canvas.style != 'undefined') {
            canvas.style.removeProperty( "width");
            canvas.style.removeProperty("height");
          }
        } else {
          if (canvas.width  != wNative) canvas.width  = wNative;
          if (canvas.height != hNative) canvas.height = hNative;
          if (typeof canvas.style != 'undefined') {
            if (w != wNative || h != hNative) {
              canvas.style.setProperty( "width", w + "px", "important");
              canvas.style.setProperty("height", h + "px", "important");
            } else {
              canvas.style.removeProperty( "width");
              canvas.style.removeProperty("height");
            }
          }
        }
      },wgetRequests:{},nextWgetRequestHandle:0,getNextWgetRequestHandle:function() {
        var handle = Browser.nextWgetRequestHandle;
        Browser.nextWgetRequestHandle++;
        return handle;
      }};
FS.staticInit();__ATINIT__.unshift({ func: function() { if (!Module["noFSInit"] && !FS.init.initialized) FS.init() } });__ATMAIN__.push({ func: function() { FS.ignorePermissions = false } });__ATEXIT__.push({ func: function() { FS.quit() } });Module["FS_createFolder"] = FS.createFolder;Module["FS_createPath"] = FS.createPath;Module["FS_createDataFile"] = FS.createDataFile;Module["FS_createPreloadedFile"] = FS.createPreloadedFile;Module["FS_createLazyFile"] = FS.createLazyFile;Module["FS_createLink"] = FS.createLink;Module["FS_createDevice"] = FS.createDevice;
___errno_state = Runtime.staticAlloc(4); HEAP32[((___errno_state)>>2)]=0;
__ATINIT__.unshift({ func: function() { TTY.init() } });__ATEXIT__.push({ func: function() { TTY.shutdown() } });TTY.utf8 = new Runtime.UTF8Processor();
if (ENVIRONMENT_IS_NODE) { var fs = require("fs"); NODEFS.staticInit(); }
__ATINIT__.push({ func: function() { SOCKFS.root = FS.mount(SOCKFS, {}, null); } });
_fputc.ret = allocate([0], "i8", ALLOC_STATIC);
Module["requestFullScreen"] = function Module_requestFullScreen(lockPointer, resizeCanvas) { Browser.requestFullScreen(lockPointer, resizeCanvas) };
  Module["requestAnimationFrame"] = function Module_requestAnimationFrame(func) { Browser.requestAnimationFrame(func) };
  Module["setCanvasSize"] = function Module_setCanvasSize(width, height, noUpdates) { Browser.setCanvasSize(width, height, noUpdates) };
  Module["pauseMainLoop"] = function Module_pauseMainLoop() { Browser.mainLoop.pause() };
  Module["resumeMainLoop"] = function Module_resumeMainLoop() { Browser.mainLoop.resume() };
  Module["getUserMedia"] = function Module_getUserMedia() { Browser.getUserMedia() }
STACK_BASE = STACKTOP = Runtime.alignMemory(STATICTOP);

staticSealed = true; // seal the static portion of memory

STACK_MAX = STACK_BASE + TOTAL_STACK;

DYNAMIC_BASE = DYNAMICTOP = Runtime.alignMemory(STACK_MAX);

assert(DYNAMIC_BASE < TOTAL_MEMORY, "TOTAL_MEMORY not big enough for stack");



var FUNCTION_TABLE = [0,0,_sn_write,0,_expr_eq,0,_case_cmp,0,_gexpr,0,_unary,0];

// EMSCRIPTEN_START_FUNCS

function _TOK_HASH_FUNC($h,$c){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 var $2;
 $1=$h;
 $2=$c;
 var $3=$1; //@line 575 "tcc_bootstrap.c"
 var $4=$1; //@line 575 "tcc_bootstrap.c"
 var $5=$4<<5; //@line 575 "tcc_bootstrap.c"
 var $6=((($3)+($5))|0); //@line 575 "tcc_bootstrap.c"
 var $7=$1; //@line 575 "tcc_bootstrap.c"
 var $8=$7>>>27; //@line 575 "tcc_bootstrap.c"
 var $9=((($6)+($8))|0); //@line 575 "tcc_bootstrap.c"
 var $10=$2; //@line 575 "tcc_bootstrap.c"
 var $11=((($9)+($10))|0); //@line 575 "tcc_bootstrap.c"
 STACKTOP=sp;return $11; //@line 575 "tcc_bootstrap.c"
}


function _IS_ENUM($t){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 $1=$t;
 var $2=$1; //@line 1026 "tcc_bootstrap.c"
 var $3=$2&-1048448; //@line 1026 "tcc_bootstrap.c"
 var $4=($3|0)==2097152; //@line 1026 "tcc_bootstrap.c"
 var $5=($4&1); //@line 1026 "tcc_bootstrap.c"
 STACKTOP=sp;return $5; //@line 1026 "tcc_bootstrap.c"
}


function _BIT_POS($t){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 $1=$t;
 var $2=$1; //@line 1052 "tcc_bootstrap.c"
 var $3=$2>>>20; //@line 1052 "tcc_bootstrap.c"
 var $4=$3&63; //@line 1052 "tcc_bootstrap.c"
 STACKTOP=sp;return $4; //@line 1052 "tcc_bootstrap.c"
}


function _BIT_SIZE($t){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 $1=$t;
 var $2=$1; //@line 1055 "tcc_bootstrap.c"
 var $3=$2>>>26; //@line 1055 "tcc_bootstrap.c"
 var $4=$3&63; //@line 1055 "tcc_bootstrap.c"
 STACKTOP=sp;return $4; //@line 1055 "tcc_bootstrap.c"
}


function _PEEKC_EOB($p){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $c;
 $1=$p;
 var $2=$1; //@line 1628 "tcc_bootstrap.c"
 var $3=HEAP8[(($2)>>0)]; //@line 1628 "tcc_bootstrap.c"
 var $4=($3&255); //@line 1628 "tcc_bootstrap.c"
 $c=$4; //@line 1628 "tcc_bootstrap.c"
 var $5=$c; //@line 1629 "tcc_bootstrap.c"
 var $6=($5|0)==92; //@line 1629 "tcc_bootstrap.c"
 if($6){label=2;break;}else{label=3;break;} //@line 1629 "tcc_bootstrap.c"
 case 2: 
 var $8=$1; //@line 1630 "tcc_bootstrap.c"
 var $9=HEAP32[((76648)>>2)]; //@line 1630 "tcc_bootstrap.c"
 var $10=(($9)|0); //@line 1630 "tcc_bootstrap.c"
 HEAP32[(($10)>>2)]=$8; //@line 1630 "tcc_bootstrap.c"
 var $11=_handle_eob(); //@line 1631 "tcc_bootstrap.c"
 $c=$11; //@line 1631 "tcc_bootstrap.c"
 var $12=HEAP32[((76648)>>2)]; //@line 1632 "tcc_bootstrap.c"
 var $13=(($12)|0); //@line 1632 "tcc_bootstrap.c"
 var $14=HEAP32[(($13)>>2)]; //@line 1632 "tcc_bootstrap.c"
 $1=$14; //@line 1632 "tcc_bootstrap.c"
 label=3;break; //@line 1633 "tcc_bootstrap.c"
 case 3: 
 var $16=$c; //@line 1634 "tcc_bootstrap.c"
 STACKTOP=sp;return $16; //@line 1634 "tcc_bootstrap.c"
  default: assert(0, "bad label: " + label);
 }

}


function _handle_eob(){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $bf;
 var $len;
 var $2=HEAP32[((76648)>>2)]; //@line 1543 "tcc_bootstrap.c"
 $bf=$2; //@line 1543 "tcc_bootstrap.c"
 var $3=$bf; //@line 1545 "tcc_bootstrap.c"
 var $4=(($3)|0); //@line 1545 "tcc_bootstrap.c"
 var $5=HEAP32[(($4)>>2)]; //@line 1545 "tcc_bootstrap.c"
 var $6=$bf; //@line 1545 "tcc_bootstrap.c"
 var $7=(($6+4)|0); //@line 1545 "tcc_bootstrap.c"
 var $8=HEAP32[(($7)>>2)]; //@line 1545 "tcc_bootstrap.c"
 var $9=($5>>>0)>=($8>>>0); //@line 1545 "tcc_bootstrap.c"
 if($9){label=2;break;}else{label=8;break;} //@line 1545 "tcc_bootstrap.c"
 case 2: 
 var $11=$bf; //@line 1546 "tcc_bootstrap.c"
 var $12=(($11+8)|0); //@line 1546 "tcc_bootstrap.c"
 var $13=HEAP32[(($12)>>2)]; //@line 1546 "tcc_bootstrap.c"
 var $14=($13|0)>=0; //@line 1546 "tcc_bootstrap.c"
 if($14){label=3;break;}else{label=6;break;} //@line 1546 "tcc_bootstrap.c"
 case 3: 
 $len=8192; //@line 1547 "tcc_bootstrap.c"
 var $16=$bf; //@line 1548 "tcc_bootstrap.c"
 var $17=(($16+8)|0); //@line 1548 "tcc_bootstrap.c"
 var $18=HEAP32[(($17)>>2)]; //@line 1548 "tcc_bootstrap.c"
 var $19=$bf; //@line 1548 "tcc_bootstrap.c"
 var $20=(($19+1072)|0); //@line 1548 "tcc_bootstrap.c"
 var $21=(($20)|0); //@line 1548 "tcc_bootstrap.c"
 var $22=$len; //@line 1548 "tcc_bootstrap.c"
 var $23=_read($18,$21,$22); //@line 1548 "tcc_bootstrap.c"
 $len=$23; //@line 1548 "tcc_bootstrap.c"
 var $24=$len; //@line 1549 "tcc_bootstrap.c"
 var $25=($24|0)<0; //@line 1549 "tcc_bootstrap.c"
 if($25){label=4;break;}else{label=5;break;} //@line 1549 "tcc_bootstrap.c"
 case 4: 
 $len=0; //@line 1550 "tcc_bootstrap.c"
 label=5;break; //@line 1550 "tcc_bootstrap.c"
 case 5: 
 label=7;break; //@line 1551 "tcc_bootstrap.c"
 case 6: 
 $len=0; //@line 1552 "tcc_bootstrap.c"
 label=7;break;
 case 7: 
 var $30=$len; //@line 1554 "tcc_bootstrap.c"
 var $31=HEAP32[((9328)>>2)]; //@line 1554 "tcc_bootstrap.c"
 var $32=((($31)+($30))|0); //@line 1554 "tcc_bootstrap.c"
 HEAP32[((9328)>>2)]=$32; //@line 1554 "tcc_bootstrap.c"
 var $33=$bf; //@line 1555 "tcc_bootstrap.c"
 var $34=(($33+1072)|0); //@line 1555 "tcc_bootstrap.c"
 var $35=(($34)|0); //@line 1555 "tcc_bootstrap.c"
 var $36=$bf; //@line 1555 "tcc_bootstrap.c"
 var $37=(($36)|0); //@line 1555 "tcc_bootstrap.c"
 HEAP32[(($37)>>2)]=$35; //@line 1555 "tcc_bootstrap.c"
 var $38=$bf; //@line 1556 "tcc_bootstrap.c"
 var $39=(($38+1072)|0); //@line 1556 "tcc_bootstrap.c"
 var $40=(($39)|0); //@line 1556 "tcc_bootstrap.c"
 var $41=$len; //@line 1556 "tcc_bootstrap.c"
 var $42=(($40+$41)|0); //@line 1556 "tcc_bootstrap.c"
 var $43=$bf; //@line 1556 "tcc_bootstrap.c"
 var $44=(($43+4)|0); //@line 1556 "tcc_bootstrap.c"
 HEAP32[(($44)>>2)]=$42; //@line 1556 "tcc_bootstrap.c"
 var $45=$bf; //@line 1557 "tcc_bootstrap.c"
 var $46=(($45+4)|0); //@line 1557 "tcc_bootstrap.c"
 var $47=HEAP32[(($46)>>2)]; //@line 1557 "tcc_bootstrap.c"
 HEAP8[(($47)>>0)]=92; //@line 1557 "tcc_bootstrap.c"
 label=8;break; //@line 1558 "tcc_bootstrap.c"
 case 8: 
 var $49=$bf; //@line 1559 "tcc_bootstrap.c"
 var $50=(($49)|0); //@line 1559 "tcc_bootstrap.c"
 var $51=HEAP32[(($50)>>2)]; //@line 1559 "tcc_bootstrap.c"
 var $52=$bf; //@line 1559 "tcc_bootstrap.c"
 var $53=(($52+4)|0); //@line 1559 "tcc_bootstrap.c"
 var $54=HEAP32[(($53)>>2)]; //@line 1559 "tcc_bootstrap.c"
 var $55=($51>>>0)<($54>>>0); //@line 1559 "tcc_bootstrap.c"
 if($55){label=9;break;}else{label=10;break;} //@line 1559 "tcc_bootstrap.c"
 case 9: 
 var $57=$bf; //@line 1560 "tcc_bootstrap.c"
 var $58=(($57)|0); //@line 1560 "tcc_bootstrap.c"
 var $59=HEAP32[(($58)>>2)]; //@line 1560 "tcc_bootstrap.c"
 var $60=(($59)|0); //@line 1560 "tcc_bootstrap.c"
 var $61=HEAP8[(($60)>>0)]; //@line 1560 "tcc_bootstrap.c"
 var $62=($61&255); //@line 1560 "tcc_bootstrap.c"
 $1=$62; //@line 1560 "tcc_bootstrap.c"
 label=11;break; //@line 1560 "tcc_bootstrap.c"
 case 10: 
 var $64=$bf; //@line 1562 "tcc_bootstrap.c"
 var $65=(($64+4)|0); //@line 1562 "tcc_bootstrap.c"
 var $66=HEAP32[(($65)>>2)]; //@line 1562 "tcc_bootstrap.c"
 var $67=$bf; //@line 1562 "tcc_bootstrap.c"
 var $68=(($67)|0); //@line 1562 "tcc_bootstrap.c"
 HEAP32[(($68)>>2)]=$66; //@line 1562 "tcc_bootstrap.c"
 $1=-1; //@line 1563 "tcc_bootstrap.c"
 label=11;break; //@line 1563 "tcc_bootstrap.c"
 case 11: 
 var $70=$1; //@line 1565 "tcc_bootstrap.c"
 STACKTOP=sp;return $70; //@line 1565 "tcc_bootstrap.c"
  default: assert(0, "bad label: " + label);
 }

}


function _PEEKC($c,$pp){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $p;
 $1=$c;
 $2=$pp;
 var $3=$2; //@line 1641 "tcc_bootstrap.c"
 var $4=HEAP32[(($3)>>2)]; //@line 1641 "tcc_bootstrap.c"
 $p=$4; //@line 1641 "tcc_bootstrap.c"
 var $5=$p; //@line 1642 "tcc_bootstrap.c"
 var $6=(($5+1)|0); //@line 1642 "tcc_bootstrap.c"
 $p=$6; //@line 1642 "tcc_bootstrap.c"
 var $7=$p; //@line 1643 "tcc_bootstrap.c"
 var $8=HEAP8[(($7)>>0)]; //@line 1643 "tcc_bootstrap.c"
 var $9=($8&255); //@line 1643 "tcc_bootstrap.c"
 var $10=$1; //@line 1643 "tcc_bootstrap.c"
 HEAP32[(($10)>>2)]=$9; //@line 1643 "tcc_bootstrap.c"
 var $11=$1; //@line 1644 "tcc_bootstrap.c"
 var $12=HEAP32[(($11)>>2)]; //@line 1644 "tcc_bootstrap.c"
 var $13=($12|0)==92; //@line 1644 "tcc_bootstrap.c"
 if($13){label=2;break;}else{label=3;break;} //@line 1644 "tcc_bootstrap.c"
 case 2: 
 var $15=$p; //@line 1645 "tcc_bootstrap.c"
 var $16=_handle_stray1($15); //@line 1645 "tcc_bootstrap.c"
 var $17=$1; //@line 1645 "tcc_bootstrap.c"
 HEAP32[(($17)>>2)]=$16; //@line 1645 "tcc_bootstrap.c"
 var $18=HEAP32[((76648)>>2)]; //@line 1646 "tcc_bootstrap.c"
 var $19=(($18)|0); //@line 1646 "tcc_bootstrap.c"
 var $20=HEAP32[(($19)>>2)]; //@line 1646 "tcc_bootstrap.c"
 $p=$20; //@line 1646 "tcc_bootstrap.c"
 label=3;break; //@line 1647 "tcc_bootstrap.c"
 case 3: 
 var $22=$p; //@line 1648 "tcc_bootstrap.c"
 STACKTOP=sp;return $22; //@line 1648 "tcc_bootstrap.c"
  default: assert(0, "bad label: " + label);
 }

}


function _handle_stray1($p){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $c;
 $2=$p;
 var $3=$2; //@line 1600 "tcc_bootstrap.c"
 var $4=HEAP32[((76648)>>2)]; //@line 1600 "tcc_bootstrap.c"
 var $5=(($4)|0); //@line 1600 "tcc_bootstrap.c"
 HEAP32[(($5)>>2)]=$3; //@line 1600 "tcc_bootstrap.c"
 var $6=$2; //@line 1601 "tcc_bootstrap.c"
 var $7=HEAP32[((76648)>>2)]; //@line 1601 "tcc_bootstrap.c"
 var $8=(($7+4)|0); //@line 1601 "tcc_bootstrap.c"
 var $9=HEAP32[(($8)>>2)]; //@line 1601 "tcc_bootstrap.c"
 var $10=($6>>>0)>=($9>>>0); //@line 1601 "tcc_bootstrap.c"
 if($10){label=2;break;}else{label=5;break;} //@line 1601 "tcc_bootstrap.c"
 case 2: 
 var $12=_handle_eob(); //@line 1602 "tcc_bootstrap.c"
 $c=$12; //@line 1602 "tcc_bootstrap.c"
 var $13=$c; //@line 1603 "tcc_bootstrap.c"
 var $14=($13|0)!=92; //@line 1603 "tcc_bootstrap.c"
 if($14){label=3;break;}else{label=4;break;} //@line 1603 "tcc_bootstrap.c"
 case 3: 
 var $16=$c; //@line 1604 "tcc_bootstrap.c"
 $1=$16; //@line 1604 "tcc_bootstrap.c"
 label=10;break; //@line 1604 "tcc_bootstrap.c"
 case 4: 
 var $18=HEAP32[((76648)>>2)]; //@line 1605 "tcc_bootstrap.c"
 var $19=(($18)|0); //@line 1605 "tcc_bootstrap.c"
 var $20=HEAP32[(($19)>>2)]; //@line 1605 "tcc_bootstrap.c"
 $2=$20; //@line 1605 "tcc_bootstrap.c"
 label=5;break; //@line 1606 "tcc_bootstrap.c"
 case 5: 
 var $22=$2; //@line 1607 "tcc_bootstrap.c"
 var $23=HEAP8[(($22)>>0)]; //@line 1607 "tcc_bootstrap.c"
 var $24=($23&255); //@line 1607 "tcc_bootstrap.c"
 HEAP32[((76736)>>2)]=$24; //@line 1607 "tcc_bootstrap.c"
 var $25=_handle_stray_noerror(); //@line 1608 "tcc_bootstrap.c"
 var $26=($25|0)!=0; //@line 1608 "tcc_bootstrap.c"
 if($26){label=6;break;}else{label=9;break;} //@line 1608 "tcc_bootstrap.c"
 case 6: 
 var $28=HEAP32[((10608)>>2)]; //@line 1609 "tcc_bootstrap.c"
 var $29=$28&32; //@line 1609 "tcc_bootstrap.c"
 var $30=($29|0)!=0; //@line 1609 "tcc_bootstrap.c"
 if($30){label=8;break;}else{label=7;break;} //@line 1609 "tcc_bootstrap.c"
 case 7: 
 _tcc_error(4896,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs; //@line 1610 "tcc_bootstrap.c"
 label=8;break; //@line 1610 "tcc_bootstrap.c"
 case 8: 
 var $33=HEAP32[((76648)>>2)]; //@line 1611 "tcc_bootstrap.c"
 var $34=(($33)|0); //@line 1611 "tcc_bootstrap.c"
 var $35=HEAP32[(($34)>>2)]; //@line 1611 "tcc_bootstrap.c"
 var $36=((($35)-(1))|0); //@line 1611 "tcc_bootstrap.c"
 HEAP32[(($34)>>2)]=$36; //@line 1611 "tcc_bootstrap.c"
 HEAP8[(($36)>>0)]=92; //@line 1611 "tcc_bootstrap.c"
 label=9;break; //@line 1612 "tcc_bootstrap.c"
 case 9: 
 var $38=HEAP32[((76648)>>2)]; //@line 1613 "tcc_bootstrap.c"
 var $39=(($38)|0); //@line 1613 "tcc_bootstrap.c"
 var $40=HEAP32[(($39)>>2)]; //@line 1613 "tcc_bootstrap.c"
 $2=$40; //@line 1613 "tcc_bootstrap.c"
 var $41=$2; //@line 1614 "tcc_bootstrap.c"
 var $42=HEAP8[(($41)>>0)]; //@line 1614 "tcc_bootstrap.c"
 var $43=($42&255); //@line 1614 "tcc_bootstrap.c"
 $c=$43; //@line 1614 "tcc_bootstrap.c"
 var $44=$c; //@line 1615 "tcc_bootstrap.c"
 $1=$44; //@line 1615 "tcc_bootstrap.c"
 label=10;break; //@line 1615 "tcc_bootstrap.c"
 case 10: 
 var $46=$1; //@line 1616 "tcc_bootstrap.c"
 STACKTOP=sp;return $46; //@line 1616 "tcc_bootstrap.c"
  default: assert(0, "bad label: " + label);
 }

}


function _PARSE2($c,$pp,$tok1,$c2,$tok2){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $p;
 $1=$c;
 $2=$pp;
 $3=$tok1;
 $4=$c2;
 $5=$tok2;
 var $6=$2; //@line 1653 "tcc_bootstrap.c"
 var $7=HEAP32[(($6)>>2)]; //@line 1653 "tcc_bootstrap.c"
 $p=$7; //@line 1653 "tcc_bootstrap.c"
 var $8=$p; //@line 1654 "tcc_bootstrap.c"
 var $9=(($8+1)|0); //@line 1654 "tcc_bootstrap.c"
 $p=$9; //@line 1654 "tcc_bootstrap.c"
 var $10=$p; //@line 1655 "tcc_bootstrap.c"
 var $11=HEAP8[(($10)>>0)]; //@line 1655 "tcc_bootstrap.c"
 var $12=($11&255); //@line 1655 "tcc_bootstrap.c"
 var $13=$1; //@line 1655 "tcc_bootstrap.c"
 HEAP32[(($13)>>2)]=$12; //@line 1655 "tcc_bootstrap.c"
 var $14=$1; //@line 1656 "tcc_bootstrap.c"
 var $15=HEAP32[(($14)>>2)]; //@line 1656 "tcc_bootstrap.c"
 var $16=($15|0)==92; //@line 1656 "tcc_bootstrap.c"
 if($16){label=2;break;}else{label=3;break;} //@line 1656 "tcc_bootstrap.c"
 case 2: 
 var $18=$p; //@line 1657 "tcc_bootstrap.c"
 var $19=_handle_stray1($18); //@line 1657 "tcc_bootstrap.c"
 var $20=$1; //@line 1657 "tcc_bootstrap.c"
 HEAP32[(($20)>>2)]=$19; //@line 1657 "tcc_bootstrap.c"
 var $21=HEAP32[((76648)>>2)]; //@line 1658 "tcc_bootstrap.c"
 var $22=(($21)|0); //@line 1658 "tcc_bootstrap.c"
 var $23=HEAP32[(($22)>>2)]; //@line 1658 "tcc_bootstrap.c"
 $p=$23; //@line 1658 "tcc_bootstrap.c"
 label=3;break; //@line 1659 "tcc_bootstrap.c"
 case 3: 
 var $25=$1; //@line 1660 "tcc_bootstrap.c"
 var $26=HEAP32[(($25)>>2)]; //@line 1660 "tcc_bootstrap.c"
 var $27=$4; //@line 1660 "tcc_bootstrap.c"
 var $28=(($27<<24)>>24); //@line 1660 "tcc_bootstrap.c"
 var $29=($26|0)==($28|0); //@line 1660 "tcc_bootstrap.c"
 if($29){label=4;break;}else{label=5;break;} //@line 1660 "tcc_bootstrap.c"
 case 4: 
 var $31=$p; //@line 1661 "tcc_bootstrap.c"
 var $32=(($31+1)|0); //@line 1661 "tcc_bootstrap.c"
 $p=$32; //@line 1661 "tcc_bootstrap.c"
 var $33=$5; //@line 1662 "tcc_bootstrap.c"
 HEAP32[((10472)>>2)]=$33; //@line 1662 "tcc_bootstrap.c"
 label=6;break; //@line 1663 "tcc_bootstrap.c"
 case 5: 
 var $35=$3; //@line 1664 "tcc_bootstrap.c"
 HEAP32[((10472)>>2)]=$35; //@line 1664 "tcc_bootstrap.c"
 label=6;break;
 case 6: 
 var $37=$p; //@line 1666 "tcc_bootstrap.c"
 STACKTOP=sp;return $37; //@line 1666 "tcc_bootstrap.c"
  default: assert(0, "bad label: " + label);
 }

}


function _IS_ENUM_VAL($t){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 $1=$t;
 var $2=$1; //@line 7119 "tcc_bootstrap.c"
 var $3=$2&-1048448; //@line 7119 "tcc_bootstrap.c"
 var $4=($3|0)==3145728; //@line 7119 "tcc_bootstrap.c"
 var $5=($4&1); //@line 7119 "tcc_bootstrap.c"
 STACKTOP=sp;return $5; //@line 7119 "tcc_bootstrap.c"
}


function _tcc_output_file($s,$filename){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 var $2;
 var $ret;
 $1=$s;
 $2=$filename;
 var $3=$1; //@line 9985 "tcc_bootstrap.c"
 var $4=$2; //@line 9985 "tcc_bootstrap.c"
 var $5=_elf_output_file($3,$4); //@line 9985 "tcc_bootstrap.c"
 $ret=$5; //@line 9985 "tcc_bootstrap.c"
 var $6=$ret; //@line 9986 "tcc_bootstrap.c"
 STACKTOP=sp;return $6; //@line 9986 "tcc_bootstrap.c"
}


function _elf_output_file($s1,$filename){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+24)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $i;
 var $ret;
 var $phnum;
 var $shnum;
 var $file_type;
 var $file_offset;
 var $sec_order;
 var $dyninf=sp;
 var $phdr;
 var $sym;
 var $strsec;
 var $interp;
 var $dynamic;
 var $dynstr;
 var $textrel;
 $1=$s1;
 $2=$filename;
 var $3=$dyninf; //@line 9948 "tcc_bootstrap.c"
 HEAP32[(($3)>>2)]=0; HEAP32[((($3)+(4))>>2)]=0; HEAP32[((($3)+(8))>>2)]=0; HEAP32[((($3)+(12))>>2)]=0; HEAP32[((($3)+(16))>>2)]=0; //@line 9948 "tcc_bootstrap.c"
 var $4=$1; //@line 9953 "tcc_bootstrap.c"
 var $5=(($4+4)|0); //@line 9953 "tcc_bootstrap.c"
 var $6=HEAP32[(($5)>>2)]; //@line 9953 "tcc_bootstrap.c"
 $file_type=$6; //@line 9953 "tcc_bootstrap.c"
 var $7=$1; //@line 9954 "tcc_bootstrap.c"
 var $8=(($7+84)|0); //@line 9954 "tcc_bootstrap.c"
 HEAP32[(($8)>>2)]=0; //@line 9954 "tcc_bootstrap.c"
 $ret=-1; //@line 9955 "tcc_bootstrap.c"
 $phdr=0; //@line 9956 "tcc_bootstrap.c"
 $sec_order=0; //@line 9957 "tcc_bootstrap.c"
 $dynstr=0; //@line 9958 "tcc_bootstrap.c"
 $dynamic=0; //@line 9958 "tcc_bootstrap.c"
 $interp=0; //@line 9958 "tcc_bootstrap.c"
 $textrel=0; //@line 9959 "tcc_bootstrap.c"
 var $9=$1; //@line 9963 "tcc_bootstrap.c"
 _resolve_common_syms($9); //@line 9963 "tcc_bootstrap.c"
 var $10=$1; //@line 9965 "tcc_bootstrap.c"
 var $11=_new_section($10,4536,3,0); //@line 9965 "tcc_bootstrap.c"
 $strsec=$11; //@line 9965 "tcc_bootstrap.c"
 var $12=$strsec; //@line 9966 "tcc_bootstrap.c"
 var $13=_put_elf_str($12,76760); //@line 9966 "tcc_bootstrap.c"
 var $14=$1; //@line 9967 "tcc_bootstrap.c"
 var $15=$file_type; //@line 9967 "tcc_bootstrap.c"
 var $16=$strsec; //@line 9967 "tcc_bootstrap.c"
 var $17=_alloc_sec_names($14,$15,$16); //@line 9967 "tcc_bootstrap.c"
 $textrel=$17; //@line 9967 "tcc_bootstrap.c"
 $phnum=0; //@line 9968 "tcc_bootstrap.c"
 var $18=$phnum; //@line 9969 "tcc_bootstrap.c"
 var $19=($18<<5); //@line 9969 "tcc_bootstrap.c"
 var $20=_tcc_mallocz($19); //@line 9969 "tcc_bootstrap.c"
 var $21=$20; //@line 9969 "tcc_bootstrap.c"
 $phdr=$21; //@line 9969 "tcc_bootstrap.c"
 var $22=$1; //@line 9970 "tcc_bootstrap.c"
 var $23=(($22+684)|0); //@line 9970 "tcc_bootstrap.c"
 var $24=HEAP32[(($23)>>2)]; //@line 9970 "tcc_bootstrap.c"
 $shnum=$24; //@line 9970 "tcc_bootstrap.c"
 var $25=$shnum; //@line 9971 "tcc_bootstrap.c"
 var $26=($25<<2); //@line 9971 "tcc_bootstrap.c"
 var $27=_tcc_malloc($26); //@line 9971 "tcc_bootstrap.c"
 var $28=$27; //@line 9971 "tcc_bootstrap.c"
 $sec_order=$28; //@line 9971 "tcc_bootstrap.c"
 var $29=$sec_order; //@line 9972 "tcc_bootstrap.c"
 var $30=(($29)|0); //@line 9972 "tcc_bootstrap.c"
 HEAP32[(($30)>>2)]=0; //@line 9972 "tcc_bootstrap.c"
 var $31=$1; //@line 9973 "tcc_bootstrap.c"
 var $32=$phdr; //@line 9973 "tcc_bootstrap.c"
 var $33=$phnum; //@line 9973 "tcc_bootstrap.c"
 var $34=$interp; //@line 9973 "tcc_bootstrap.c"
 var $35=$strsec; //@line 9973 "tcc_bootstrap.c"
 var $36=$sec_order; //@line 9973 "tcc_bootstrap.c"
 var $37=_layout_sections($31,$32,$33,$34,$35,$dyninf,$36); //@line 9973 "tcc_bootstrap.c"
 $file_offset=$37; //@line 9973 "tcc_bootstrap.c"
 var $38=$1; //@line 9975 "tcc_bootstrap.c"
 var $39=$2; //@line 9975 "tcc_bootstrap.c"
 var $40=$phnum; //@line 9975 "tcc_bootstrap.c"
 var $41=$phdr; //@line 9975 "tcc_bootstrap.c"
 var $42=$file_offset; //@line 9975 "tcc_bootstrap.c"
 var $43=$sec_order; //@line 9975 "tcc_bootstrap.c"
 var $44=_tcc_write_elf_file($38,$39,$40,$41,$42,$43); //@line 9975 "tcc_bootstrap.c"
 $ret=$44; //@line 9975 "tcc_bootstrap.c"
 var $45=$shnum; //@line 9976 "tcc_bootstrap.c"
 var $46=$1; //@line 9976 "tcc_bootstrap.c"
 var $47=(($46+684)|0); //@line 9976 "tcc_bootstrap.c"
 HEAP32[(($47)>>2)]=$45; //@line 9976 "tcc_bootstrap.c"
 label=2;break; //@line 9976 "tcc_bootstrap.c"
 case 2: 
 var $49=$sec_order; //@line 9978 "tcc_bootstrap.c"
 var $50=$49; //@line 9978 "tcc_bootstrap.c"
 _tcc_free($50); //@line 9978 "tcc_bootstrap.c"
 var $51=$phdr; //@line 9979 "tcc_bootstrap.c"
 var $52=$51; //@line 9979 "tcc_bootstrap.c"
 _tcc_free($52); //@line 9979 "tcc_bootstrap.c"
 var $53=$ret; //@line 9980 "tcc_bootstrap.c"
 STACKTOP=sp;return $53; //@line 9980 "tcc_bootstrap.c"
  default: assert(0, "bad label: " + label);
 }

}


function _tcc_basename($name){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $p;
 $1=$name;
 var $2=$1; //@line 10700 "tcc_bootstrap.c"
 var $3=_strchr($2,0); //@line 10700 "tcc_bootstrap.c"
 $p=$3; //@line 10700 "tcc_bootstrap.c"
 label=2;break; //@line 10701 "tcc_bootstrap.c"
 case 2: 
 var $5=$p; //@line 10701 "tcc_bootstrap.c"
 var $6=$1; //@line 10701 "tcc_bootstrap.c"
 var $7=($5>>>0)>($6>>>0); //@line 10701 "tcc_bootstrap.c"
 if($7){label=3;break;}else{var $16=0;label=4;break;} //@line 10701 "tcc_bootstrap.c"
 case 3: 
 var $9=$p; //@line 10701 "tcc_bootstrap.c"
 var $10=((($9)-(1))|0); //@line 10701 "tcc_bootstrap.c"
 var $11=HEAP8[(($10)>>0)]; //@line 10701 "tcc_bootstrap.c"
 var $12=(($11<<24)>>24); //@line 10701 "tcc_bootstrap.c"
 var $13=($12|0)==47; //@line 10701 "tcc_bootstrap.c"
 var $14=$13^1; //@line 10701 "tcc_bootstrap.c"
 var $16=$14;label=4;break;
 case 4: 
 var $16;
 if($16){label=5;break;}else{label=6;break;}
 case 5: 
 var $18=$p; //@line 10702 "tcc_bootstrap.c"
 var $19=((($18)-(1))|0); //@line 10702 "tcc_bootstrap.c"
 $p=$19; //@line 10702 "tcc_bootstrap.c"
 label=2;break; //@line 10702 "tcc_bootstrap.c"
 case 6: 
 var $21=$p; //@line 10703 "tcc_bootstrap.c"
 STACKTOP=sp;return $21; //@line 10703 "tcc_bootstrap.c"
  default: assert(0, "bad label: " + label);
 }

}


function _tcc_free($ptr){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 $1=$ptr;
 var $2=$1; //@line 10707 "tcc_bootstrap.c"
 _free($2); //@line 10707 "tcc_bootstrap.c"
 STACKTOP=sp;return; //@line 10708 "tcc_bootstrap.c"
}


function _tcc_malloc($size){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $ptr;
 $1=$size;
 var $2=$1; //@line 10712 "tcc_bootstrap.c"
 var $3=_malloc($2); //@line 10712 "tcc_bootstrap.c"
 $ptr=$3; //@line 10712 "tcc_bootstrap.c"
 var $4=$ptr; //@line 10713 "tcc_bootstrap.c"
 var $5=($4|0)!=0; //@line 10713 "tcc_bootstrap.c"
 if($5){label=4;break;}else{label=2;break;} //@line 10713 "tcc_bootstrap.c"
 case 2: 
 var $7=$1; //@line 10713 "tcc_bootstrap.c"
 var $8=($7|0)!=0; //@line 10713 "tcc_bootstrap.c"
 if($8){label=3;break;}else{label=4;break;} //@line 10713 "tcc_bootstrap.c"
 case 3: 
 _tcc_error(9264,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs; //@line 10714 "tcc_bootstrap.c"
 label=4;break; //@line 10714 "tcc_bootstrap.c"
 case 4: 
 var $11=$ptr; //@line 10715 "tcc_bootstrap.c"
 STACKTOP=sp;return $11; //@line 10715 "tcc_bootstrap.c"
  default: assert(0, "bad label: " + label);
 }

}


function _tcc_error($fmt,varrp){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1=sp;
 var $s1;
 var $ap;
 HEAP32[(($1)>>2)]=$fmt;
 var $2=HEAP32[((10488)>>2)]; //@line 10840 "tcc_bootstrap.c"
 $s1=$2; //@line 10840 "tcc_bootstrap.c"
 var $3=$1; //@line 10842 "tcc_bootstrap.c"
 var $4=(($3+4)|0); //@line 10842 "tcc_bootstrap.c"
 $ap=$4; //@line 10842 "tcc_bootstrap.c"
 var $5=$s1; //@line 10843 "tcc_bootstrap.c"
 var $6=HEAP32[(($1)>>2)]; //@line 10843 "tcc_bootstrap.c"
 var $7=$ap; //@line 10843 "tcc_bootstrap.c"
 _error1($5,0,$6,$7); //@line 10843 "tcc_bootstrap.c"
 _exit(1); //@line 10844 "tcc_bootstrap.c"
 throw "Reached an unreachable!"; //@line 10844 "tcc_bootstrap.c"
 STACKTOP=sp;return; //@line 10845 "tcc_bootstrap.c"
}


function _tcc_mallocz($size){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 var $ptr;
 $1=$size;
 var $2=$1; //@line 10720 "tcc_bootstrap.c"
 var $3=_tcc_malloc($2); //@line 10720 "tcc_bootstrap.c"
 $ptr=$3; //@line 10720 "tcc_bootstrap.c"
 var $4=$ptr; //@line 10721 "tcc_bootstrap.c"
 var $5=$1; //@line 10721 "tcc_bootstrap.c"
 _memset($4, 0, $5)|0; //@line 10721 "tcc_bootstrap.c"
 var $6=$ptr; //@line 10722 "tcc_bootstrap.c"
 STACKTOP=sp;return $6; //@line 10722 "tcc_bootstrap.c"
}


function _tcc_realloc($ptr,$size){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $ptr1;
 $1=$ptr;
 $2=$size;
 var $3=$1; //@line 10727 "tcc_bootstrap.c"
 var $4=$2; //@line 10727 "tcc_bootstrap.c"
 var $5=_realloc($3,$4); //@line 10727 "tcc_bootstrap.c"
 $ptr1=$5; //@line 10727 "tcc_bootstrap.c"
 var $6=$ptr1; //@line 10728 "tcc_bootstrap.c"
 var $7=($6|0)!=0; //@line 10728 "tcc_bootstrap.c"
 if($7){label=4;break;}else{label=2;break;} //@line 10728 "tcc_bootstrap.c"
 case 2: 
 var $9=$2; //@line 10728 "tcc_bootstrap.c"
 var $10=($9|0)!=0; //@line 10728 "tcc_bootstrap.c"
 if($10){label=3;break;}else{label=4;break;} //@line 10728 "tcc_bootstrap.c"
 case 3: 
 _tcc_error(9240,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs; //@line 10729 "tcc_bootstrap.c"
 label=4;break; //@line 10729 "tcc_bootstrap.c"
 case 4: 
 var $13=$ptr1; //@line 10730 "tcc_bootstrap.c"
 STACKTOP=sp;return $13; //@line 10730 "tcc_bootstrap.c"
  default: assert(0, "bad label: " + label);
 }

}


function _tcc_strdup($str){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 var $ptr;
 $1=$str;
 var $2=$1; //@line 10735 "tcc_bootstrap.c"
 var $3=_strlen($2); //@line 10735 "tcc_bootstrap.c"
 var $4=((($3)+(1))|0); //@line 10735 "tcc_bootstrap.c"
 var $5=_tcc_malloc($4); //@line 10735 "tcc_bootstrap.c"
 $ptr=$5; //@line 10735 "tcc_bootstrap.c"
 var $6=$ptr; //@line 10736 "tcc_bootstrap.c"
 var $7=$1; //@line 10736 "tcc_bootstrap.c"
 var $8=_strcpy($6,$7); //@line 10736 "tcc_bootstrap.c"
 var $9=$ptr; //@line 10737 "tcc_bootstrap.c"
 STACKTOP=sp;return $9; //@line 10737 "tcc_bootstrap.c"
}


function _tcc_error_noabort($fmt,varrp){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1=sp;
 var $s1;
 var $ap;
 HEAP32[(($1)>>2)]=$fmt;
 var $2=HEAP32[((10488)>>2)]; //@line 10833 "tcc_bootstrap.c"
 $s1=$2; //@line 10833 "tcc_bootstrap.c"
 var $3=$1; //@line 10835 "tcc_bootstrap.c"
 var $4=(($3+4)|0); //@line 10835 "tcc_bootstrap.c"
 $ap=$4; //@line 10835 "tcc_bootstrap.c"
 var $5=$s1; //@line 10836 "tcc_bootstrap.c"
 var $6=HEAP32[(($1)>>2)]; //@line 10836 "tcc_bootstrap.c"
 var $7=$ap; //@line 10836 "tcc_bootstrap.c"
 _error1($5,0,$6,$7); //@line 10836 "tcc_bootstrap.c"
 STACKTOP=sp;return; //@line 10837 "tcc_bootstrap.c"
}


function _error1($s1,$is_warning,$fmt,$ap){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+2048)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $buf=sp;
 var $pf;
 var $f;
 $1=$s1;
 $2=$is_warning;
 $3=$fmt;
 $4=$ap;
 var $5=(($buf)|0); //@line 10799 "tcc_bootstrap.c"
 HEAP8[(($5)>>0)]=0; //@line 10799 "tcc_bootstrap.c"
 var $6=HEAP32[((76648)>>2)]; //@line 10800 "tcc_bootstrap.c"
 $f=$6; //@line 10800 "tcc_bootstrap.c"
 label=2;break; //@line 10800 "tcc_bootstrap.c"
 case 2: 
 var $8=$f; //@line 10800 "tcc_bootstrap.c"
 var $9=($8|0)!=0; //@line 10800 "tcc_bootstrap.c"
 if($9){label=3;break;}else{var $18=0;label=4;break;} //@line 10800 "tcc_bootstrap.c"
 case 3: 
 var $11=$f; //@line 10800 "tcc_bootstrap.c"
 var $12=(($11+40)|0); //@line 10800 "tcc_bootstrap.c"
 var $13=(($12)|0); //@line 10800 "tcc_bootstrap.c"
 var $14=HEAP8[(($13)>>0)]; //@line 10800 "tcc_bootstrap.c"
 var $15=(($14<<24)>>24); //@line 10800 "tcc_bootstrap.c"
 var $16=($15|0)==58; //@line 10800 "tcc_bootstrap.c"
 var $18=$16;label=4;break;
 case 4: 
 var $18;
 if($18){label=5;break;}else{label=7;break;}
 case 5: 
 label=6;break;
 case 6: 
 var $21=$f; //@line 10800 "tcc_bootstrap.c"
 var $22=(($21+12)|0); //@line 10800 "tcc_bootstrap.c"
 var $23=HEAP32[(($22)>>2)]; //@line 10800 "tcc_bootstrap.c"
 $f=$23; //@line 10800 "tcc_bootstrap.c"
 label=2;break; //@line 10800 "tcc_bootstrap.c"
 case 7: 
 var $25=$f; //@line 10801 "tcc_bootstrap.c"
 var $26=($25|0)!=0; //@line 10801 "tcc_bootstrap.c"
 if($26){label=8;break;}else{label=13;break;} //@line 10801 "tcc_bootstrap.c"
 case 8: 
 var $28=$1; //@line 10802 "tcc_bootstrap.c"
 var $29=(($28+108)|0); //@line 10802 "tcc_bootstrap.c"
 var $30=(($29)|0); //@line 10802 "tcc_bootstrap.c"
 $pf=$30; //@line 10802 "tcc_bootstrap.c"
 label=9;break; //@line 10802 "tcc_bootstrap.c"
 case 9: 
 var $32=$pf; //@line 10802 "tcc_bootstrap.c"
 var $33=$1; //@line 10802 "tcc_bootstrap.c"
 var $34=(($33+236)|0); //@line 10802 "tcc_bootstrap.c"
 var $35=HEAP32[(($34)>>2)]; //@line 10802 "tcc_bootstrap.c"
 var $36=($32>>>0)<($35>>>0); //@line 10802 "tcc_bootstrap.c"
 if($36){label=10;break;}else{label=12;break;} //@line 10802 "tcc_bootstrap.c"
 case 10: 
 var $38=(($buf)|0); //@line 10803 "tcc_bootstrap.c"
 var $39=$pf; //@line 10803 "tcc_bootstrap.c"
 var $40=HEAP32[(($39)>>2)]; //@line 10803 "tcc_bootstrap.c"
 var $41=(($40+40)|0); //@line 10803 "tcc_bootstrap.c"
 var $42=(($41)|0); //@line 10803 "tcc_bootstrap.c"
 var $43=$pf; //@line 10803 "tcc_bootstrap.c"
 var $44=HEAP32[(($43)>>2)]; //@line 10803 "tcc_bootstrap.c"
 var $45=(($44+16)|0); //@line 10803 "tcc_bootstrap.c"
 var $46=HEAP32[(($45)>>2)]; //@line 10803 "tcc_bootstrap.c"
 _strcat_printf($38,2048,4632,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$42,HEAP32[(((tempVarArgs)+(8))>>2)]=$46,tempVarArgs)); STACKTOP=tempVarArgs; //@line 10803 "tcc_bootstrap.c"
 label=11;break; //@line 10803 "tcc_bootstrap.c"
 case 11: 
 var $48=$pf; //@line 10802 "tcc_bootstrap.c"
 var $49=(($48+4)|0); //@line 10802 "tcc_bootstrap.c"
 $pf=$49; //@line 10802 "tcc_bootstrap.c"
 label=9;break; //@line 10802 "tcc_bootstrap.c"
 case 12: 
 var $51=(($buf)|0); //@line 10805 "tcc_bootstrap.c"
 var $52=$f; //@line 10805 "tcc_bootstrap.c"
 var $53=(($52+40)|0); //@line 10805 "tcc_bootstrap.c"
 var $54=(($53)|0); //@line 10805 "tcc_bootstrap.c"
 var $55=$f; //@line 10805 "tcc_bootstrap.c"
 var $56=(($55+16)|0); //@line 10805 "tcc_bootstrap.c"
 var $57=HEAP32[(($56)>>2)]; //@line 10805 "tcc_bootstrap.c"
 var $58=HEAP32[((10464)>>2)]; //@line 10805 "tcc_bootstrap.c"
 var $59=$58&1; //@line 10805 "tcc_bootstrap.c"
 var $60=($59|0)!=0; //@line 10805 "tcc_bootstrap.c"
 var $61=$60^1; //@line 10805 "tcc_bootstrap.c"
 var $62=$61^1; //@line 10805 "tcc_bootstrap.c"
 var $63=($62&1); //@line 10805 "tcc_bootstrap.c"
 var $64=((($57)-($63))|0); //@line 10805 "tcc_bootstrap.c"
 _strcat_printf($51,2048,4592,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$54,HEAP32[(((tempVarArgs)+(8))>>2)]=$64,tempVarArgs)); STACKTOP=tempVarArgs; //@line 10805 "tcc_bootstrap.c"
 label=14;break; //@line 10807 "tcc_bootstrap.c"
 case 13: 
 var $66=(($buf)|0); //@line 10808 "tcc_bootstrap.c"
 _strcat_printf($66,2048,4584,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs; //@line 10808 "tcc_bootstrap.c"
 label=14;break;
 case 14: 
 var $68=$2; //@line 10810 "tcc_bootstrap.c"
 var $69=($68|0)!=0; //@line 10810 "tcc_bootstrap.c"
 if($69){label=15;break;}else{label=16;break;} //@line 10810 "tcc_bootstrap.c"
 case 15: 
 var $71=(($buf)|0); //@line 10811 "tcc_bootstrap.c"
 _strcat_printf($71,2048,4568,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs; //@line 10811 "tcc_bootstrap.c"
 label=17;break; //@line 10811 "tcc_bootstrap.c"
 case 16: 
 var $73=(($buf)|0); //@line 10813 "tcc_bootstrap.c"
 _strcat_printf($73,2048,4560,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs; //@line 10813 "tcc_bootstrap.c"
 label=17;break;
 case 17: 
 var $75=(($buf)|0); //@line 10814 "tcc_bootstrap.c"
 var $76=$3; //@line 10814 "tcc_bootstrap.c"
 var $77=$4; //@line 10814 "tcc_bootstrap.c"
 _strcat_vprintf($75,2048,$76,$77); //@line 10814 "tcc_bootstrap.c"
 var $78=$1; //@line 10815 "tcc_bootstrap.c"
 var $79=(($78+80)|0); //@line 10815 "tcc_bootstrap.c"
 var $80=HEAP32[(($79)>>2)]; //@line 10815 "tcc_bootstrap.c"
 var $81=($80|0)!=0; //@line 10815 "tcc_bootstrap.c"
 if($81){label=19;break;}else{label=18;break;} //@line 10815 "tcc_bootstrap.c"
 case 18: 
 var $83=HEAP32[((_stdout)>>2)]; //@line 10816 "tcc_bootstrap.c"
 var $84=_fflush($83); //@line 10816 "tcc_bootstrap.c"
 var $85=HEAP32[((_stderr)>>2)]; //@line 10817 "tcc_bootstrap.c"
 var $86=(($buf)|0); //@line 10817 "tcc_bootstrap.c"
 var $87=_fprintf($85,4552,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$86,tempVarArgs)); STACKTOP=tempVarArgs; //@line 10817 "tcc_bootstrap.c"
 var $88=HEAP32[((_stderr)>>2)]; //@line 10818 "tcc_bootstrap.c"
 var $89=_fflush($88); //@line 10818 "tcc_bootstrap.c"
 label=20;break; //@line 10819 "tcc_bootstrap.c"
 case 19: 
 var $91=$1; //@line 10820 "tcc_bootstrap.c"
 var $92=(($91+80)|0); //@line 10820 "tcc_bootstrap.c"
 var $93=HEAP32[(($92)>>2)]; //@line 10820 "tcc_bootstrap.c"
 var $94=$1; //@line 10820 "tcc_bootstrap.c"
 var $95=(($94+76)|0); //@line 10820 "tcc_bootstrap.c"
 var $96=HEAP32[(($95)>>2)]; //@line 10820 "tcc_bootstrap.c"
 var $97=(($buf)|0); //@line 10820 "tcc_bootstrap.c"
 FUNCTION_TABLE[$93]($96,$97); //@line 10820 "tcc_bootstrap.c"
 label=20;break;
 case 20: 
 var $99=$2; //@line 10822 "tcc_bootstrap.c"
 var $100=($99|0)!=0; //@line 10822 "tcc_bootstrap.c"
 if($100){label=21;break;}else{label=22;break;} //@line 10822 "tcc_bootstrap.c"
 case 21: 
 var $102=$1; //@line 10822 "tcc_bootstrap.c"
 var $103=(($102+28)|0); //@line 10822 "tcc_bootstrap.c"
 var $104=HEAP32[(($103)>>2)]; //@line 10822 "tcc_bootstrap.c"
 var $105=($104|0)!=0; //@line 10822 "tcc_bootstrap.c"
 if($105){label=22;break;}else{label=23;break;} //@line 10822 "tcc_bootstrap.c"
 case 22: 
 var $107=$1; //@line 10823 "tcc_bootstrap.c"
 var $108=(($107+84)|0); //@line 10823 "tcc_bootstrap.c"
 var $109=HEAP32[(($108)>>2)]; //@line 10823 "tcc_bootstrap.c"
 var $110=((($109)+(1))|0); //@line 10823 "tcc_bootstrap.c"
 HEAP32[(($108)>>2)]=$110; //@line 10823 "tcc_bootstrap.c"
 label=23;break; //@line 10823 "tcc_bootstrap.c"
 case 23: 
 STACKTOP=sp;return; //@line 10824 "tcc_bootstrap.c"
  default: assert(0, "bad label: " + label);
 }

}


function _tcc_warning($fmt,varrp){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=sp;
 var $s1;
 var $ap;
 HEAP32[(($1)>>2)]=$fmt;
 var $2=HEAP32[((10488)>>2)]; //@line 10848 "tcc_bootstrap.c"
 $s1=$2; //@line 10848 "tcc_bootstrap.c"
 var $3=$s1; //@line 10850 "tcc_bootstrap.c"
 var $4=(($3+32)|0); //@line 10850 "tcc_bootstrap.c"
 var $5=HEAP32[(($4)>>2)]; //@line 10850 "tcc_bootstrap.c"
 var $6=($5|0)!=0; //@line 10850 "tcc_bootstrap.c"
 if($6){label=2;break;}else{label=3;break;} //@line 10850 "tcc_bootstrap.c"
 case 2: 
 label=4;break; //@line 10851 "tcc_bootstrap.c"
 case 3: 
 var $9=$1; //@line 10852 "tcc_bootstrap.c"
 var $10=(($9+4)|0); //@line 10852 "tcc_bootstrap.c"
 $ap=$10; //@line 10852 "tcc_bootstrap.c"
 var $11=$s1; //@line 10853 "tcc_bootstrap.c"
 var $12=HEAP32[(($1)>>2)]; //@line 10853 "tcc_bootstrap.c"
 var $13=$ap; //@line 10853 "tcc_bootstrap.c"
 _error1($11,1,$12,$13); //@line 10853 "tcc_bootstrap.c"
 label=4;break; //@line 10853 "tcc_bootstrap.c"
 case 4: 
 STACKTOP=sp;return; //@line 10853 "tcc_bootstrap.c"
  default: assert(0, "bad label: " + label);
 }

}


function _tcc_open_bf($s1,$filename,$initlen){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $bf;
 var $buflen;
 $1=$s1;
 $2=$filename;
 $3=$initlen;
 var $4=$3; //@line 10858 "tcc_bootstrap.c"
 var $5=($4|0)!=0; //@line 10858 "tcc_bootstrap.c"
 if($5){label=2;break;}else{label=3;break;} //@line 10858 "tcc_bootstrap.c"
 case 2: 
 var $7=$3; //@line 10858 "tcc_bootstrap.c"
 var $10=$7;label=4;break; //@line 10858 "tcc_bootstrap.c"
 case 3: 
 var $10=8192;label=4;break; //@line 10858 "tcc_bootstrap.c"
 case 4: 
 var $10; //@line 10858 "tcc_bootstrap.c"
 $buflen=$10; //@line 10858 "tcc_bootstrap.c"
 var $11=$buflen; //@line 10859 "tcc_bootstrap.c"
 var $12=((($11)+(1076))|0); //@line 10859 "tcc_bootstrap.c"
 var $13=_tcc_mallocz($12); //@line 10859 "tcc_bootstrap.c"
 var $14=$13; //@line 10859 "tcc_bootstrap.c"
 $bf=$14; //@line 10859 "tcc_bootstrap.c"
 var $15=$bf; //@line 10860 "tcc_bootstrap.c"
 var $16=(($15+1072)|0); //@line 10860 "tcc_bootstrap.c"
 var $17=(($16)|0); //@line 10860 "tcc_bootstrap.c"
 var $18=$bf; //@line 10860 "tcc_bootstrap.c"
 var $19=(($18)|0); //@line 10860 "tcc_bootstrap.c"
 HEAP32[(($19)>>2)]=$17; //@line 10860 "tcc_bootstrap.c"
 var $20=$bf; //@line 10861 "tcc_bootstrap.c"
 var $21=(($20+1072)|0); //@line 10861 "tcc_bootstrap.c"
 var $22=(($21)|0); //@line 10861 "tcc_bootstrap.c"
 var $23=$3; //@line 10861 "tcc_bootstrap.c"
 var $24=(($22+$23)|0); //@line 10861 "tcc_bootstrap.c"
 var $25=$bf; //@line 10861 "tcc_bootstrap.c"
 var $26=(($25+4)|0); //@line 10861 "tcc_bootstrap.c"
 HEAP32[(($26)>>2)]=$24; //@line 10861 "tcc_bootstrap.c"
 var $27=$bf; //@line 10862 "tcc_bootstrap.c"
 var $28=(($27+4)|0); //@line 10862 "tcc_bootstrap.c"
 var $29=HEAP32[(($28)>>2)]; //@line 10862 "tcc_bootstrap.c"
 var $30=(($29)|0); //@line 10862 "tcc_bootstrap.c"
 HEAP8[(($30)>>0)]=92; //@line 10862 "tcc_bootstrap.c"
 var $31=$bf; //@line 10863 "tcc_bootstrap.c"
 var $32=(($31+40)|0); //@line 10863 "tcc_bootstrap.c"
 var $33=(($32)|0); //@line 10863 "tcc_bootstrap.c"
 var $34=$2; //@line 10863 "tcc_bootstrap.c"
 var $35=_pstrcpy($33,1024,$34); //@line 10863 "tcc_bootstrap.c"
 var $36=$bf; //@line 10864 "tcc_bootstrap.c"
 var $37=(($36+40)|0); //@line 10864 "tcc_bootstrap.c"
 var $38=(($37)|0); //@line 10864 "tcc_bootstrap.c"
 var $39=$bf; //@line 10864 "tcc_bootstrap.c"
 var $40=(($39+1064)|0); //@line 10864 "tcc_bootstrap.c"
 HEAP32[(($40)>>2)]=$38; //@line 10864 "tcc_bootstrap.c"
 var $41=$bf; //@line 10865 "tcc_bootstrap.c"
 var $42=(($41+16)|0); //@line 10865 "tcc_bootstrap.c"
 HEAP32[(($42)>>2)]=1; //@line 10865 "tcc_bootstrap.c"
 var $43=$1; //@line 10866 "tcc_bootstrap.c"
 var $44=(($43+496)|0); //@line 10866 "tcc_bootstrap.c"
 var $45=HEAP32[(($44)>>2)]; //@line 10866 "tcc_bootstrap.c"
 var $46=$bf; //@line 10866 "tcc_bootstrap.c"
 var $47=(($46+32)|0); //@line 10866 "tcc_bootstrap.c"
 HEAP32[(($47)>>2)]=$45; //@line 10866 "tcc_bootstrap.c"
 var $48=$bf; //@line 10867 "tcc_bootstrap.c"
 var $49=(($48+8)|0); //@line 10867 "tcc_bootstrap.c"
 HEAP32[(($49)>>2)]=-1; //@line 10867 "tcc_bootstrap.c"
 var $50=HEAP32[((76648)>>2)]; //@line 10868 "tcc_bootstrap.c"
 var $51=$bf; //@line 10868 "tcc_bootstrap.c"
 var $52=(($51+12)|0); //@line 10868 "tcc_bootstrap.c"
 HEAP32[(($52)>>2)]=$50; //@line 10868 "tcc_bootstrap.c"
 var $53=$bf; //@line 10869 "tcc_bootstrap.c"
 HEAP32[((76648)>>2)]=$53; //@line 10869 "tcc_bootstrap.c"
 HEAP32[((10464)>>2)]=3; //@line 10870 "tcc_bootstrap.c"
 STACKTOP=sp;return; //@line 10871 "tcc_bootstrap.c"
  default: assert(0, "bad label: " + label);
 }

}


function _tcc_compile($s1){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 var $define_start;
 var $filetype;
 $1=$s1;
 var $2=HEAP32[((76656)>>2)]; //@line 10898 "tcc_bootstrap.c"
 $define_start=$2; //@line 10898 "tcc_bootstrap.c"
 var $3=$1; //@line 10899 "tcc_bootstrap.c"
 var $4=(($3+724)|0); //@line 10899 "tcc_bootstrap.c"
 var $5=HEAP32[(($4)>>2)]; //@line 10899 "tcc_bootstrap.c"
 $filetype=$5; //@line 10899 "tcc_bootstrap.c"
 var $6=$1; //@line 10900 "tcc_bootstrap.c"
 _tccelf_begin_file($6); //@line 10900 "tcc_bootstrap.c"
 var $7=$1; //@line 10901 "tcc_bootstrap.c"
 var $8=(($7+84)|0); //@line 10901 "tcc_bootstrap.c"
 HEAP32[(($8)>>2)]=0; //@line 10901 "tcc_bootstrap.c"
 var $9=$1; //@line 10902 "tcc_bootstrap.c"
 _preprocess_start($9,0); //@line 10902 "tcc_bootstrap.c"
 var $10=$1; //@line 10903 "tcc_bootstrap.c"
 var $11=_tccgen_compile($10); //@line 10903 "tcc_bootstrap.c"
 var $12=$1; //@line 10904 "tcc_bootstrap.c"
 _preprocess_end($12); //@line 10904 "tcc_bootstrap.c"
 var $13=$1; //@line 10905 "tcc_bootstrap.c"
 _free_inline_functions($13); //@line 10905 "tcc_bootstrap.c"
 var $14=$define_start; //@line 10906 "tcc_bootstrap.c"
 _free_defines($14); //@line 10906 "tcc_bootstrap.c"
 _sym_pop(76560,0,0); //@line 10907 "tcc_bootstrap.c"
 _sym_pop(10704,0,0); //@line 10908 "tcc_bootstrap.c"
 var $15=$1; //@line 10909 "tcc_bootstrap.c"
 _tccelf_end_file($15); //@line 10909 "tcc_bootstrap.c"
 var $16=$1; //@line 10910 "tcc_bootstrap.c"
 var $17=(($16+84)|0); //@line 10910 "tcc_bootstrap.c"
 var $18=HEAP32[(($17)>>2)]; //@line 10910 "tcc_bootstrap.c"
 var $19=($18|0)!=0; //@line 10910 "tcc_bootstrap.c"
 var $20=($19?-1:0); //@line 10910 "tcc_bootstrap.c"
 STACKTOP=sp;return $20; //@line 10910 "tcc_bootstrap.c"
}


function _tcc_close(){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $bf;
 var $1=HEAP32[((76648)>>2)]; //@line 10874 "tcc_bootstrap.c"
 $bf=$1; //@line 10874 "tcc_bootstrap.c"
 var $2=$bf; //@line 10875 "tcc_bootstrap.c"
 var $3=(($2+8)|0); //@line 10875 "tcc_bootstrap.c"
 var $4=HEAP32[(($3)>>2)]; //@line 10875 "tcc_bootstrap.c"
 var $5=($4|0)>0; //@line 10875 "tcc_bootstrap.c"
 if($5){label=2;break;}else{label=3;break;} //@line 10875 "tcc_bootstrap.c"
 case 2: 
 var $7=$bf; //@line 10876 "tcc_bootstrap.c"
 var $8=(($7+8)|0); //@line 10876 "tcc_bootstrap.c"
 var $9=HEAP32[(($8)>>2)]; //@line 10876 "tcc_bootstrap.c"
 var $10=_close($9); //@line 10876 "tcc_bootstrap.c"
 var $11=$bf; //@line 10877 "tcc_bootstrap.c"
 var $12=(($11+16)|0); //@line 10877 "tcc_bootstrap.c"
 var $13=HEAP32[(($12)>>2)]; //@line 10877 "tcc_bootstrap.c"
 var $14=HEAP32[((9320)>>2)]; //@line 10877 "tcc_bootstrap.c"
 var $15=((($14)+($13))|0); //@line 10877 "tcc_bootstrap.c"
 HEAP32[((9320)>>2)]=$15; //@line 10877 "tcc_bootstrap.c"
 label=3;break; //@line 10878 "tcc_bootstrap.c"
 case 3: 
 var $17=$bf; //@line 10879 "tcc_bootstrap.c"
 var $18=(($17+1064)|0); //@line 10879 "tcc_bootstrap.c"
 var $19=HEAP32[(($18)>>2)]; //@line 10879 "tcc_bootstrap.c"
 var $20=$bf; //@line 10879 "tcc_bootstrap.c"
 var $21=(($20+40)|0); //@line 10879 "tcc_bootstrap.c"
 var $22=(($21)|0); //@line 10879 "tcc_bootstrap.c"
 var $23=($19|0)!=($22|0); //@line 10879 "tcc_bootstrap.c"
 if($23){label=4;break;}else{label=5;break;} //@line 10879 "tcc_bootstrap.c"
 case 4: 
 var $25=$bf; //@line 10880 "tcc_bootstrap.c"
 var $26=(($25+1064)|0); //@line 10880 "tcc_bootstrap.c"
 var $27=HEAP32[(($26)>>2)]; //@line 10880 "tcc_bootstrap.c"
 _tcc_free($27); //@line 10880 "tcc_bootstrap.c"
 label=5;break; //@line 10880 "tcc_bootstrap.c"
 case 5: 
 var $29=$bf; //@line 10881 "tcc_bootstrap.c"
 var $30=(($29+12)|0); //@line 10881 "tcc_bootstrap.c"
 var $31=HEAP32[(($30)>>2)]; //@line 10881 "tcc_bootstrap.c"
 HEAP32[((76648)>>2)]=$31; //@line 10881 "tcc_bootstrap.c"
 var $32=$bf; //@line 10882 "tcc_bootstrap.c"
 var $33=$32; //@line 10882 "tcc_bootstrap.c"
 _tcc_free($33); //@line 10882 "tcc_bootstrap.c"
 STACKTOP=sp;return; //@line 10883 "tcc_bootstrap.c"
  default: assert(0, "bad label: " + label);
 }

}


function _tcc_define_symbol($s1,$sym,$value){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $len1;
 var $len2;
 $1=$s1;
 $2=$sym;
 $3=$value;
 var $4=$3; //@line 10925 "tcc_bootstrap.c"
 var $5=($4|0)!=0; //@line 10925 "tcc_bootstrap.c"
 if($5){label=3;break;}else{label=2;break;} //@line 10925 "tcc_bootstrap.c"
 case 2: 
 $3=4376; //@line 10926 "tcc_bootstrap.c"
 label=3;break; //@line 10926 "tcc_bootstrap.c"
 case 3: 
 var $8=$2; //@line 10927 "tcc_bootstrap.c"
 var $9=_strlen($8); //@line 10927 "tcc_bootstrap.c"
 $len1=$9; //@line 10927 "tcc_bootstrap.c"
 var $10=$3; //@line 10928 "tcc_bootstrap.c"
 var $11=_strlen($10); //@line 10928 "tcc_bootstrap.c"
 $len2=$11; //@line 10928 "tcc_bootstrap.c"
 var $12=$1; //@line 10929 "tcc_bootstrap.c"
 var $13=$len1; //@line 10929 "tcc_bootstrap.c"
 var $14=$len2; //@line 10929 "tcc_bootstrap.c"
 var $15=((($13)+($14))|0); //@line 10929 "tcc_bootstrap.c"
 var $16=((($15)+(1))|0); //@line 10929 "tcc_bootstrap.c"
 _tcc_open_bf($12,4152,$16); //@line 10929 "tcc_bootstrap.c"
 var $17=HEAP32[((76648)>>2)]; //@line 10930 "tcc_bootstrap.c"
 var $18=(($17+1072)|0); //@line 10930 "tcc_bootstrap.c"
 var $19=$18; //@line 10930 "tcc_bootstrap.c"
 var $20=$2; //@line 10930 "tcc_bootstrap.c"
 var $21=$len1; //@line 10930 "tcc_bootstrap.c"
 assert($21 % 1 === 0);(_memcpy($19, $20, $21)|0); //@line 10930 "tcc_bootstrap.c"
 var $22=$len1; //@line 10931 "tcc_bootstrap.c"
 var $23=HEAP32[((76648)>>2)]; //@line 10931 "tcc_bootstrap.c"
 var $24=(($23+1072)|0); //@line 10931 "tcc_bootstrap.c"
 var $25=(($24+$22)|0); //@line 10931 "tcc_bootstrap.c"
 HEAP8[(($25)>>0)]=32; //@line 10931 "tcc_bootstrap.c"
 var $26=HEAP32[((76648)>>2)]; //@line 10932 "tcc_bootstrap.c"
 var $27=(($26+1072)|0); //@line 10932 "tcc_bootstrap.c"
 var $28=(($27)|0); //@line 10932 "tcc_bootstrap.c"
 var $29=$len1; //@line 10932 "tcc_bootstrap.c"
 var $30=(($28+$29)|0); //@line 10932 "tcc_bootstrap.c"
 var $31=(($30+1)|0); //@line 10932 "tcc_bootstrap.c"
 var $32=$3; //@line 10932 "tcc_bootstrap.c"
 var $33=$len2; //@line 10932 "tcc_bootstrap.c"
 assert($33 % 1 === 0);(_memcpy($31, $32, $33)|0); //@line 10932 "tcc_bootstrap.c"
 _next_nomacro(); //@line 10933 "tcc_bootstrap.c"
 _parse_define(); //@line 10934 "tcc_bootstrap.c"
 _tcc_close(); //@line 10935 "tcc_bootstrap.c"
 STACKTOP=sp;return; //@line 10936 "tcc_bootstrap.c"
  default: assert(0, "bad label: " + label);
 }

}


function _next_nomacro(){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 label=2;break; //@line 3437 "tcc_bootstrap.c"
 case 2: 
 _next_nomacro_spc(); //@line 3438 "tcc_bootstrap.c"
 label=3;break; //@line 3439 "tcc_bootstrap.c"
 case 3: 
 var $3=HEAP32[((10472)>>2)]; //@line 3439 "tcc_bootstrap.c"
 var $4=($3|0)<256; //@line 3439 "tcc_bootstrap.c"
 if($4){label=4;break;}else{var $14=0;label=5;break;} //@line 3439 "tcc_bootstrap.c"
 case 4: 
 var $6=HEAP32[((10472)>>2)]; //@line 3439 "tcc_bootstrap.c"
 var $7=((($6)+(1))|0); //@line 3439 "tcc_bootstrap.c"
 var $8=((10736+$7)|0); //@line 3439 "tcc_bootstrap.c"
 var $9=HEAP8[(($8)>>0)]; //@line 3439 "tcc_bootstrap.c"
 var $10=($9&255); //@line 3439 "tcc_bootstrap.c"
 var $11=$10&1; //@line 3439 "tcc_bootstrap.c"
 var $12=($11|0)!=0; //@line 3439 "tcc_bootstrap.c"
 var $14=$12;label=5;break;
 case 5: 
 var $14;
 if($14){label=2;break;}else{label=6;break;}
 case 6: 
 return; //@line 3440 "tcc_bootstrap.c"
  default: assert(0, "bad label: " + label);
 }

}


function _parse_define(){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $s;
 var $first=sp;
 var $ps;
 var $v;
 var $t;
 var $varg;
 var $is_vaargs;
 var $spc=(sp)+(8);
 var $saved_parse_flags;
 var $dotid;
 var $1=HEAP32[((10608)>>2)]; //@line 2258 "tcc_bootstrap.c"
 $saved_parse_flags=$1; //@line 2258 "tcc_bootstrap.c"
 var $2=HEAP32[((10472)>>2)]; //@line 2259 "tcc_bootstrap.c"
 $v=$2; //@line 2259 "tcc_bootstrap.c"
 var $3=$v; //@line 2260 "tcc_bootstrap.c"
 var $4=($3|0)<256; //@line 2260 "tcc_bootstrap.c"
 if($4){label=3;break;}else{label=2;break;} //@line 2260 "tcc_bootstrap.c"
 case 2: 
 var $6=$v; //@line 2260 "tcc_bootstrap.c"
 var $7=($6|0)==321; //@line 2260 "tcc_bootstrap.c"
 if($7){label=3;break;}else{label=4;break;} //@line 2260 "tcc_bootstrap.c"
 case 3: 
 var $9=HEAP32[((10472)>>2)]; //@line 2261 "tcc_bootstrap.c"
 var $10=_get_tok_str($9,10440); //@line 2261 "tcc_bootstrap.c"
 _tcc_error(3760,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$10,tempVarArgs)); STACKTOP=tempVarArgs; //@line 2261 "tcc_bootstrap.c"
 label=4;break; //@line 2261 "tcc_bootstrap.c"
 case 4: 
 HEAP32[(($first)>>2)]=0; //@line 2262 "tcc_bootstrap.c"
 $t=0; //@line 2263 "tcc_bootstrap.c"
 var $12=HEAP32[((10608)>>2)]; //@line 2264 "tcc_bootstrap.c"
 var $13=$12&-9; //@line 2264 "tcc_bootstrap.c"
 var $14=$13|16; //@line 2264 "tcc_bootstrap.c"
 HEAP32[((10608)>>2)]=$14; //@line 2264 "tcc_bootstrap.c"
 _next_nomacro_spc(); //@line 2265 "tcc_bootstrap.c"
 var $15=HEAP32[((10472)>>2)]; //@line 2266 "tcc_bootstrap.c"
 var $16=($15|0)==40; //@line 2266 "tcc_bootstrap.c"
 if($16){label=5;break;}else{label=24;break;} //@line 2266 "tcc_bootstrap.c"
 case 5: 
 var $18=_set_idnum(46,0); //@line 2267 "tcc_bootstrap.c"
 $dotid=$18; //@line 2267 "tcc_bootstrap.c"
 _next_nomacro(); //@line 2268 "tcc_bootstrap.c"
 $ps=$first; //@line 2269 "tcc_bootstrap.c"
 var $19=HEAP32[((10472)>>2)]; //@line 2270 "tcc_bootstrap.c"
 var $20=($19|0)!=41; //@line 2270 "tcc_bootstrap.c"
 if($20){label=6;break;}else{label=23;break;} //@line 2270 "tcc_bootstrap.c"
 case 6: 
 label=7;break; //@line 2270 "tcc_bootstrap.c"
 case 7: 
 var $23=HEAP32[((10472)>>2)]; //@line 2271 "tcc_bootstrap.c"
 $varg=$23; //@line 2271 "tcc_bootstrap.c"
 _next_nomacro(); //@line 2272 "tcc_bootstrap.c"
 $is_vaargs=0; //@line 2273 "tcc_bootstrap.c"
 var $24=$varg; //@line 2274 "tcc_bootstrap.c"
 var $25=($24|0)==200; //@line 2274 "tcc_bootstrap.c"
 if($25){label=8;break;}else{label=9;break;} //@line 2274 "tcc_bootstrap.c"
 case 8: 
 $varg=332; //@line 2275 "tcc_bootstrap.c"
 $is_vaargs=1; //@line 2276 "tcc_bootstrap.c"
 label=13;break; //@line 2277 "tcc_bootstrap.c"
 case 9: 
 var $28=HEAP32[((10472)>>2)]; //@line 2277 "tcc_bootstrap.c"
 var $29=($28|0)==200; //@line 2277 "tcc_bootstrap.c"
 if($29){label=10;break;}else{label=12;break;} //@line 2277 "tcc_bootstrap.c"
 case 10: 
 var $31=HEAP32[((2848)>>2)]; //@line 2277 "tcc_bootstrap.c"
 var $32=($31|0)!=0; //@line 2277 "tcc_bootstrap.c"
 if($32){label=11;break;}else{label=12;break;} //@line 2277 "tcc_bootstrap.c"
 case 11: 
 $is_vaargs=1; //@line 2278 "tcc_bootstrap.c"
 _next_nomacro(); //@line 2279 "tcc_bootstrap.c"
 label=12;break; //@line 2280 "tcc_bootstrap.c"
 case 12: 
 label=13;break;
 case 13: 
 var $36=$varg; //@line 2281 "tcc_bootstrap.c"
 var $37=($36|0)<256; //@line 2281 "tcc_bootstrap.c"
 if($37){label=14;break;}else{label=16;break;} //@line 2281 "tcc_bootstrap.c"
 case 14: 
 label=15;break; //@line 2281 "tcc_bootstrap.c"
 case 15: 
 _tcc_error(3728,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs; //@line 2283 "tcc_bootstrap.c"
 label=16;break; //@line 2283 "tcc_bootstrap.c"
 case 16: 
 var $41=$varg; //@line 2284 "tcc_bootstrap.c"
 var $42=$41|536870912; //@line 2284 "tcc_bootstrap.c"
 var $43=$is_vaargs; //@line 2284 "tcc_bootstrap.c"
 var $44=_sym_push2(76656,$42,$43,0); //@line 2284 "tcc_bootstrap.c"
 $s=$44; //@line 2284 "tcc_bootstrap.c"
 var $45=$s; //@line 2285 "tcc_bootstrap.c"
 var $46=$ps; //@line 2285 "tcc_bootstrap.c"
 HEAP32[(($46)>>2)]=$45; //@line 2285 "tcc_bootstrap.c"
 var $47=$s; //@line 2286 "tcc_bootstrap.c"
 var $48=(($47+24)|0); //@line 2286 "tcc_bootstrap.c"
 var $49=$48; //@line 2286 "tcc_bootstrap.c"
 $ps=$49; //@line 2286 "tcc_bootstrap.c"
 var $50=HEAP32[((10472)>>2)]; //@line 2287 "tcc_bootstrap.c"
 var $51=($50|0)==41; //@line 2287 "tcc_bootstrap.c"
 if($51){label=17;break;}else{label=18;break;} //@line 2287 "tcc_bootstrap.c"
 case 17: 
 label=22;break; //@line 2288 "tcc_bootstrap.c"
 case 18: 
 var $54=HEAP32[((10472)>>2)]; //@line 2289 "tcc_bootstrap.c"
 var $55=($54|0)!=44; //@line 2289 "tcc_bootstrap.c"
 if($55){label=20;break;}else{label=19;break;} //@line 2289 "tcc_bootstrap.c"
 case 19: 
 var $57=$is_vaargs; //@line 2289 "tcc_bootstrap.c"
 var $58=($57|0)!=0; //@line 2289 "tcc_bootstrap.c"
 if($58){label=20;break;}else{label=21;break;} //@line 2289 "tcc_bootstrap.c"
 case 20: 
 label=15;break; //@line 2290 "tcc_bootstrap.c"
 case 21: 
 _next_nomacro(); //@line 2291 "tcc_bootstrap.c"
 label=7;break; //@line 2292 "tcc_bootstrap.c"
 case 22: 
 label=23;break; //@line 2292 "tcc_bootstrap.c"
 case 23: 
 _next_nomacro_spc(); //@line 2293 "tcc_bootstrap.c"
 $t=1; //@line 2294 "tcc_bootstrap.c"
 var $63=$dotid; //@line 2295 "tcc_bootstrap.c"
 var $64=_set_idnum(46,$63); //@line 2295 "tcc_bootstrap.c"
 label=24;break; //@line 2296 "tcc_bootstrap.c"
 case 24: 
 HEAP32[((9348)>>2)]=0; //@line 2297 "tcc_bootstrap.c"
 HEAP32[(($spc)>>2)]=2; //@line 2298 "tcc_bootstrap.c"
 var $66=HEAP32[((10608)>>2)]; //@line 2299 "tcc_bootstrap.c"
 var $67=$66|52; //@line 2299 "tcc_bootstrap.c"
 HEAP32[((10608)>>2)]=$67; //@line 2299 "tcc_bootstrap.c"
 label=25;break; //@line 2300 "tcc_bootstrap.c"
 case 25: 
 var $69=HEAP32[((10472)>>2)]; //@line 2300 "tcc_bootstrap.c"
 var $70=($69|0)!=10; //@line 2300 "tcc_bootstrap.c"
 if($70){label=26;break;}else{var $75=0;label=27;break;} //@line 2300 "tcc_bootstrap.c"
 case 26: 
 var $72=HEAP32[((10472)>>2)]; //@line 2300 "tcc_bootstrap.c"
 var $73=($72|0)!=-1; //@line 2300 "tcc_bootstrap.c"
 var $75=$73;label=27;break;
 case 27: 
 var $75;
 if($75){label=28;break;}else{label=42;break;}
 case 28: 
 var $77=HEAP32[((10472)>>2)]; //@line 2301 "tcc_bootstrap.c"
 var $78=202==($77|0); //@line 2301 "tcc_bootstrap.c"
 if($78){label=29;break;}else{label=34;break;} //@line 2301 "tcc_bootstrap.c"
 case 29: 
 var $80=HEAP32[(($spc)>>2)]; //@line 2302 "tcc_bootstrap.c"
 var $81=2==($80|0); //@line 2302 "tcc_bootstrap.c"
 if($81){label=30;break;}else{label=31;break;} //@line 2302 "tcc_bootstrap.c"
 case 30: 
 label=46;break; //@line 2303 "tcc_bootstrap.c"
 case 31: 
 var $84=HEAP32[(($spc)>>2)]; //@line 2304 "tcc_bootstrap.c"
 var $85=1==($84|0); //@line 2304 "tcc_bootstrap.c"
 if($85){label=32;break;}else{label=33;break;} //@line 2304 "tcc_bootstrap.c"
 case 32: 
 var $87=HEAP32[((9348)>>2)]; //@line 2305 "tcc_bootstrap.c"
 var $88=((($87)-(1))|0); //@line 2305 "tcc_bootstrap.c"
 HEAP32[((9348)>>2)]=$88; //@line 2305 "tcc_bootstrap.c"
 label=33;break; //@line 2305 "tcc_bootstrap.c"
 case 33: 
 HEAP32[(($spc)>>2)]=3; //@line 2306 "tcc_bootstrap.c"
 HEAP32[((10472)>>2)]=205; //@line 2307 "tcc_bootstrap.c"
 label=40;break; //@line 2308 "tcc_bootstrap.c"
 case 34: 
 var $91=HEAP32[((10472)>>2)]; //@line 2308 "tcc_bootstrap.c"
 var $92=35==($91|0); //@line 2308 "tcc_bootstrap.c"
 if($92){label=35;break;}else{label=36;break;} //@line 2308 "tcc_bootstrap.c"
 case 35: 
 HEAP32[(($spc)>>2)]=4; //@line 2309 "tcc_bootstrap.c"
 label=39;break; //@line 2310 "tcc_bootstrap.c"
 case 36: 
 var $95=HEAP32[((10472)>>2)]; //@line 2310 "tcc_bootstrap.c"
 var $96=_check_space($95,$spc); //@line 2310 "tcc_bootstrap.c"
 var $97=($96|0)!=0; //@line 2310 "tcc_bootstrap.c"
 if($97){label=37;break;}else{label=38;break;} //@line 2310 "tcc_bootstrap.c"
 case 37: 
 label=41;break; //@line 2311 "tcc_bootstrap.c"
 case 38: 
 label=39;break;
 case 39: 
 label=40;break;
 case 40: 
 var $102=HEAP32[((10472)>>2)]; //@line 2313 "tcc_bootstrap.c"
 _tok_str_add2(9344,$102,10440); //@line 2313 "tcc_bootstrap.c"
 label=41;break; //@line 2313 "tcc_bootstrap.c"
 case 41: 
 _next_nomacro_spc(); //@line 2315 "tcc_bootstrap.c"
 label=25;break; //@line 2316 "tcc_bootstrap.c"
 case 42: 
 var $105=$saved_parse_flags; //@line 2317 "tcc_bootstrap.c"
 HEAP32[((10608)>>2)]=$105; //@line 2317 "tcc_bootstrap.c"
 var $106=HEAP32[(($spc)>>2)]; //@line 2318 "tcc_bootstrap.c"
 var $107=($106|0)==1; //@line 2318 "tcc_bootstrap.c"
 if($107){label=43;break;}else{label=44;break;} //@line 2318 "tcc_bootstrap.c"
 case 43: 
 var $109=HEAP32[((9348)>>2)]; //@line 2319 "tcc_bootstrap.c"
 var $110=((($109)-(1))|0); //@line 2319 "tcc_bootstrap.c"
 HEAP32[((9348)>>2)]=$110; //@line 2319 "tcc_bootstrap.c"
 label=44;break; //@line 2319 "tcc_bootstrap.c"
 case 44: 
 _tok_str_add(9344,0); //@line 2320 "tcc_bootstrap.c"
 var $112=HEAP32[(($spc)>>2)]; //@line 2321 "tcc_bootstrap.c"
 var $113=3==($112|0); //@line 2321 "tcc_bootstrap.c"
 if($113){label=45;break;}else{label=47;break;} //@line 2321 "tcc_bootstrap.c"
 case 45: 
 label=46;break; //@line 2321 "tcc_bootstrap.c"
 case 46: 
 _tcc_error(3680,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs; //@line 2323 "tcc_bootstrap.c"
 label=47;break; //@line 2323 "tcc_bootstrap.c"
 case 47: 
 var $117=$v; //@line 2324 "tcc_bootstrap.c"
 var $118=$t; //@line 2324 "tcc_bootstrap.c"
 var $119=_tok_str_dup(9344); //@line 2324 "tcc_bootstrap.c"
 var $120=HEAP32[(($first)>>2)]; //@line 2324 "tcc_bootstrap.c"
 _define_push($117,$118,$119,$120); //@line 2324 "tcc_bootstrap.c"
 STACKTOP=sp;return; //@line 2325 "tcc_bootstrap.c"
  default: assert(0, "bad label: " + label);
 }

}


function _tcc_new(){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+32)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $s;
 var $buffer=sp;
 _tcc_cleanup(); //@line 10951 "tcc_bootstrap.c"
 var $2=_tcc_mallocz(740); //@line 10952 "tcc_bootstrap.c"
 var $3=$2; //@line 10952 "tcc_bootstrap.c"
 $s=$3; //@line 10952 "tcc_bootstrap.c"
 var $4=$s; //@line 10953 "tcc_bootstrap.c"
 var $5=($4|0)!=0; //@line 10953 "tcc_bootstrap.c"
 if($5){label=3;break;}else{label=2;break;} //@line 10953 "tcc_bootstrap.c"
 case 2: 
 $1=0; //@line 10954 "tcc_bootstrap.c"
 label=4;break; //@line 10954 "tcc_bootstrap.c"
 case 3: 
 var $8=$s; //@line 10955 "tcc_bootstrap.c"
 HEAP32[((10488)>>2)]=$8; //@line 10955 "tcc_bootstrap.c"
 var $9=HEAP32[((10640)>>2)]; //@line 10956 "tcc_bootstrap.c"
 var $10=((($9)+(1))|0); //@line 10956 "tcc_bootstrap.c"
 HEAP32[((10640)>>2)]=$10; //@line 10956 "tcc_bootstrap.c"
 var $11=$s; //@line 10957 "tcc_bootstrap.c"
 var $12=(($11)|0); //@line 10957 "tcc_bootstrap.c"
 HEAP32[(($12)>>2)]=1; //@line 10957 "tcc_bootstrap.c"
 var $13=$s; //@line 10958 "tcc_bootstrap.c"
 var $14=(($13+36)|0); //@line 10958 "tcc_bootstrap.c"
 HEAP32[(($14)>>2)]=1; //@line 10958 "tcc_bootstrap.c"
 var $15=$s; //@line 10959 "tcc_bootstrap.c"
 var $16=(($15+56)|0); //@line 10959 "tcc_bootstrap.c"
 HEAP32[(($16)>>2)]=32; //@line 10959 "tcc_bootstrap.c"
 var $17=$s; //@line 10960 "tcc_bootstrap.c"
 _tccelf_new($17); //@line 10960 "tcc_bootstrap.c"
 var $18=$s; //@line 10961 "tcc_bootstrap.c"
 _tccpp_new($18); //@line 10961 "tcc_bootstrap.c"
 _define_push(327,0,0,0); //@line 10962 "tcc_bootstrap.c"
 _define_push(328,0,0,0); //@line 10963 "tcc_bootstrap.c"
 _define_push(329,0,0,0); //@line 10964 "tcc_bootstrap.c"
 _define_push(330,0,0,0); //@line 10965 "tcc_bootstrap.c"
 _define_push(333,0,0,0); //@line 10966 "tcc_bootstrap.c"
 var $19=(($buffer)|0); //@line 10968 "tcc_bootstrap.c"
 var $20=_sprintf($19,3992,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs; //@line 10968 "tcc_bootstrap.c"
 var $21=$s; //@line 10969 "tcc_bootstrap.c"
 var $22=(($buffer)|0); //@line 10969 "tcc_bootstrap.c"
 _tcc_define_symbol($21,3872,$22); //@line 10969 "tcc_bootstrap.c"
 var $23=$s; //@line 10970 "tcc_bootstrap.c"
 _tcc_define_symbol($23,3664,0); //@line 10970 "tcc_bootstrap.c"
 var $24=$s; //@line 10971 "tcc_bootstrap.c"
 _tcc_define_symbol($24,3352,3096); //@line 10971 "tcc_bootstrap.c"
 var $25=$s; //@line 10972 "tcc_bootstrap.c"
 _tcc_define_symbol($25,9224,0); //@line 10972 "tcc_bootstrap.c"
 var $26=$s; //@line 10973 "tcc_bootstrap.c"
 _tcc_define_symbol($26,8784,0); //@line 10973 "tcc_bootstrap.c"
 var $27=$s; //@line 10974 "tcc_bootstrap.c"
 _tcc_define_symbol($27,8672,0); //@line 10974 "tcc_bootstrap.c"
 var $28=$s; //@line 10975 "tcc_bootstrap.c"
 _tcc_define_symbol($28,8560,0); //@line 10975 "tcc_bootstrap.c"
 var $29=$s; //@line 10976 "tcc_bootstrap.c"
 _tcc_define_symbol($29,8392,0); //@line 10976 "tcc_bootstrap.c"
 var $30=$s; //@line 10977 "tcc_bootstrap.c"
 _tcc_define_symbol($30,8016,0); //@line 10977 "tcc_bootstrap.c"
 var $31=$s; //@line 10978 "tcc_bootstrap.c"
 _tcc_define_symbol($31,7760,0); //@line 10978 "tcc_bootstrap.c"
 var $32=$s; //@line 10979 "tcc_bootstrap.c"
 _tcc_define_symbol($32,7496,0); //@line 10979 "tcc_bootstrap.c"
 var $33=$s; //@line 10980 "tcc_bootstrap.c"
 _tcc_define_symbol($33,7296,0); //@line 10980 "tcc_bootstrap.c"
 var $34=$s; //@line 10981 "tcc_bootstrap.c"
 _tcc_define_symbol($34,6888,6464); //@line 10981 "tcc_bootstrap.c"
 var $35=$s; //@line 10982 "tcc_bootstrap.c"
 _tcc_define_symbol($35,6104,5760); //@line 10982 "tcc_bootstrap.c"
 var $36=$s; //@line 10983 "tcc_bootstrap.c"
 _tcc_define_symbol($36,5464,0); //@line 10983 "tcc_bootstrap.c"
 var $37=$s; //@line 10984 "tcc_bootstrap.c"
 _tcc_define_symbol($37,5152,5760); //@line 10984 "tcc_bootstrap.c"
 var $38=$s; //@line 10985 "tcc_bootstrap.c"
 _tcc_define_symbol($38,4872,6464); //@line 10985 "tcc_bootstrap.c"
 var $39=$s; //@line 10986 "tcc_bootstrap.c"
 _tcc_define_symbol($39,4600,4464); //@line 10986 "tcc_bootstrap.c"
 var $40=$s; //@line 10988 "tcc_bootstrap.c"
 _tcc_define_symbol($40,4424,4384); //@line 10988 "tcc_bootstrap.c"
 var $41=$s; //@line 10990 "tcc_bootstrap.c"
 _tcc_define_symbol($41,4336,4328); //@line 10990 "tcc_bootstrap.c"
 var $42=$s; //@line 10991 "tcc_bootstrap.c"
 $1=$42; //@line 10991 "tcc_bootstrap.c"
 label=4;break; //@line 10991 "tcc_bootstrap.c"
 case 4: 
 var $44=$1; //@line 10992 "tcc_bootstrap.c"
 STACKTOP=sp;return $44; //@line 10992 "tcc_bootstrap.c"
  default: assert(0, "bad label: " + label);
 }

}


function _tcc_cleanup(){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=HEAP32[((10488)>>2)]; //@line 10939 "tcc_bootstrap.c"
 var $2=0==($1|0); //@line 10939 "tcc_bootstrap.c"
 if($2){label=2;break;}else{label=3;break;} //@line 10939 "tcc_bootstrap.c"
 case 2: 
 label=7;break; //@line 10940 "tcc_bootstrap.c"
 case 3: 
 label=4;break; //@line 10941 "tcc_bootstrap.c"
 case 4: 
 var $6=HEAP32[((76648)>>2)]; //@line 10941 "tcc_bootstrap.c"
 var $7=($6|0)!=0; //@line 10941 "tcc_bootstrap.c"
 if($7){label=5;break;}else{label=6;break;} //@line 10941 "tcc_bootstrap.c"
 case 5: 
 _tcc_close(); //@line 10942 "tcc_bootstrap.c"
 label=4;break; //@line 10942 "tcc_bootstrap.c"
 case 6: 
 var $10=HEAP32[((10488)>>2)]; //@line 10943 "tcc_bootstrap.c"
 _tccpp_delete($10); //@line 10943 "tcc_bootstrap.c"
 HEAP32[((10488)>>2)]=0; //@line 10944 "tcc_bootstrap.c"
 _dynarray_reset(10512,10632); //@line 10945 "tcc_bootstrap.c"
 HEAP32[((10520)>>2)]=0; //@line 10946 "tcc_bootstrap.c"
 label=7;break; //@line 10946 "tcc_bootstrap.c"
 case 7: 
 return; //@line 10946 "tcc_bootstrap.c"
  default: assert(0, "bad label: " + label);
 }

}


function _tccelf_new($s){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 $1=$s;
 var $2=$1; //@line 9229 "tcc_bootstrap.c"
 var $3=(($2+680)|0); //@line 9229 "tcc_bootstrap.c"
 var $4=$3; //@line 9229 "tcc_bootstrap.c"
 var $5=$1; //@line 9229 "tcc_bootstrap.c"
 var $6=(($5+684)|0); //@line 9229 "tcc_bootstrap.c"
 _dynarray_add($4,$6,0); //@line 9229 "tcc_bootstrap.c"
 var $7=$1; //@line 9230 "tcc_bootstrap.c"
 var $8=_new_section($7,3912,1,6); //@line 9230 "tcc_bootstrap.c"
 HEAP32[((10480)>>2)]=$8; //@line 9230 "tcc_bootstrap.c"
 var $9=$1; //@line 9231 "tcc_bootstrap.c"
 var $10=_new_section($9,3904,1,3); //@line 9231 "tcc_bootstrap.c"
 HEAP32[((76664)>>2)]=$10; //@line 9231 "tcc_bootstrap.c"
 var $11=$1; //@line 9232 "tcc_bootstrap.c"
 var $12=_new_section($11,3896,8,3); //@line 9232 "tcc_bootstrap.c"
 HEAP32[((76744)>>2)]=$12; //@line 9232 "tcc_bootstrap.c"
 var $13=$1; //@line 9233 "tcc_bootstrap.c"
 var $14=_new_section($13,3888,8,-2147483648); //@line 9233 "tcc_bootstrap.c"
 HEAP32[((76720)>>2)]=$14; //@line 9233 "tcc_bootstrap.c"
 var $15=HEAP32[((76720)>>2)]; //@line 9234 "tcc_bootstrap.c"
 var $16=(($15+16)|0); //@line 9234 "tcc_bootstrap.c"
 HEAP32[(($16)>>2)]=65522; //@line 9234 "tcc_bootstrap.c"
 var $17=$1; //@line 9235 "tcc_bootstrap.c"
 var $18=_new_symtab($17,3864,2,0,3856,3840,-2147483648); //@line 9235 "tcc_bootstrap.c"
 HEAP32[((10504)>>2)]=$18; //@line 9235 "tcc_bootstrap.c"
 var $19=HEAP32[((10504)>>2)]; //@line 9238 "tcc_bootstrap.c"
 var $20=$1; //@line 9238 "tcc_bootstrap.c"
 var $21=(($20+700)|0); //@line 9238 "tcc_bootstrap.c"
 HEAP32[(($21)>>2)]=$19; //@line 9238 "tcc_bootstrap.c"
 var $22=$1; //@line 9239 "tcc_bootstrap.c"
 var $23=_new_symtab($22,3824,2,-1073741824,3800,3784,-2147483648); //@line 9239 "tcc_bootstrap.c"
 var $24=$1; //@line 9239 "tcc_bootstrap.c"
 var $25=(($24+696)|0); //@line 9239 "tcc_bootstrap.c"
 HEAP32[(($25)>>2)]=$23; //@line 9239 "tcc_bootstrap.c"
 STACKTOP=sp;return; //@line 9242 "tcc_bootstrap.c"
}


function _tccpp_new($s){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $i;
 var $c;
 var $p;
 var $r;
 $1=$s;
 var $2=$1; //@line 3946 "tcc_bootstrap.c"
 var $3=(($2+108)|0); //@line 3946 "tcc_bootstrap.c"
 var $4=(($3)|0); //@line 3946 "tcc_bootstrap.c"
 var $5=$1; //@line 3946 "tcc_bootstrap.c"
 var $6=(($5+236)|0); //@line 3946 "tcc_bootstrap.c"
 HEAP32[(($6)>>2)]=$4; //@line 3946 "tcc_bootstrap.c"
 var $7=HEAP32[((_stdout)>>2)]; //@line 3947 "tcc_bootstrap.c"
 var $8=$1; //@line 3947 "tcc_bootstrap.c"
 var $9=(($8+88)|0); //@line 3947 "tcc_bootstrap.c"
 HEAP32[(($9)>>2)]=$7; //@line 3947 "tcc_bootstrap.c"
 $i=-1; //@line 3948 "tcc_bootstrap.c"
 label=2;break; //@line 3948 "tcc_bootstrap.c"
 case 2: 
 var $11=$i; //@line 3948 "tcc_bootstrap.c"
 var $12=($11|0)<128; //@line 3948 "tcc_bootstrap.c"
 if($12){label=3;break;}else{label=11;break;} //@line 3948 "tcc_bootstrap.c"
 case 3: 
 var $14=$i; //@line 3949 "tcc_bootstrap.c"
 var $15=$i; //@line 3950 "tcc_bootstrap.c"
 var $16=_is_space($15); //@line 3950 "tcc_bootstrap.c"
 var $17=($16|0)!=0; //@line 3950 "tcc_bootstrap.c"
 if($17){label=4;break;}else{label=5;break;} //@line 3950 "tcc_bootstrap.c"
 case 4: 
 var $32=1;label=9;break; //@line 3950 "tcc_bootstrap.c"
 case 5: 
 var $20=$i; //@line 3951 "tcc_bootstrap.c"
 var $21=_isid($20); //@line 3951 "tcc_bootstrap.c"
 var $22=($21|0)!=0; //@line 3951 "tcc_bootstrap.c"
 if($22){label=6;break;}else{label=7;break;} //@line 3951 "tcc_bootstrap.c"
 case 6: 
 var $30=2;label=8;break; //@line 3951 "tcc_bootstrap.c"
 case 7: 
 var $25=$i; //@line 3952 "tcc_bootstrap.c"
 var $26=_isnum($25); //@line 3952 "tcc_bootstrap.c"
 var $27=($26|0)!=0; //@line 3952 "tcc_bootstrap.c"
 var $28=($27?4:0); //@line 3952 "tcc_bootstrap.c"
 var $30=$28;label=8;break; //@line 3952 "tcc_bootstrap.c"
 case 8: 
 var $30; //@line 3952 "tcc_bootstrap.c"
 var $32=$30;label=9;break; //@line 3952 "tcc_bootstrap.c"
 case 9: 
 var $32; //@line 3952 "tcc_bootstrap.c"
 var $33=_set_idnum($14,$32); //@line 3952 "tcc_bootstrap.c"
 label=10;break; //@line 3952 "tcc_bootstrap.c"
 case 10: 
 var $35=$i; //@line 3948 "tcc_bootstrap.c"
 var $36=((($35)+(1))|0); //@line 3948 "tcc_bootstrap.c"
 $i=$36; //@line 3948 "tcc_bootstrap.c"
 label=2;break; //@line 3948 "tcc_bootstrap.c"
 case 11: 
 $i=128; //@line 3954 "tcc_bootstrap.c"
 label=12;break; //@line 3954 "tcc_bootstrap.c"
 case 12: 
 var $39=$i; //@line 3954 "tcc_bootstrap.c"
 var $40=($39|0)<256; //@line 3954 "tcc_bootstrap.c"
 if($40){label=13;break;}else{label=15;break;} //@line 3954 "tcc_bootstrap.c"
 case 13: 
 var $42=$i; //@line 3955 "tcc_bootstrap.c"
 var $43=_set_idnum($42,2); //@line 3955 "tcc_bootstrap.c"
 label=14;break; //@line 3955 "tcc_bootstrap.c"
 case 14: 
 var $45=$i; //@line 3954 "tcc_bootstrap.c"
 var $46=((($45)+(1))|0); //@line 3954 "tcc_bootstrap.c"
 $i=$46; //@line 3954 "tcc_bootstrap.c"
 label=12;break; //@line 3954 "tcc_bootstrap.c"
 case 15: 
 var $48=_tal_new(9336,256,786432); //@line 3956 "tcc_bootstrap.c"
 var $49=_tal_new(9384,128,786432); //@line 3957 "tcc_bootstrap.c"
 var $50=_tal_new(76704,1024,262144); //@line 3958 "tcc_bootstrap.c"
 _memset(11024, 0, 65536)|0; //@line 3959 "tcc_bootstrap.c"
 _cstr_new(76688); //@line 3960 "tcc_bootstrap.c"
 _cstr_realloc(76688,1024); //@line 3961 "tcc_bootstrap.c"
 _tok_str_new(9344); //@line 3962 "tcc_bootstrap.c"
 var $51=_tok_str_realloc(9344,256); //@line 3963 "tcc_bootstrap.c"
 HEAP32[((10456)>>2)]=256; //@line 3964 "tcc_bootstrap.c"
 $p=256; //@line 3965 "tcc_bootstrap.c"
 label=16;break; //@line 3966 "tcc_bootstrap.c"
 case 16: 
 var $53=$p; //@line 3966 "tcc_bootstrap.c"
 var $54=HEAP8[(($53)>>0)]; //@line 3966 "tcc_bootstrap.c"
 var $55=(($54<<24)>>24)!=0; //@line 3966 "tcc_bootstrap.c"
 if($55){label=17;break;}else{label=22;break;} //@line 3966 "tcc_bootstrap.c"
 case 17: 
 var $57=$p; //@line 3967 "tcc_bootstrap.c"
 $r=$57; //@line 3967 "tcc_bootstrap.c"
 label=18;break; //@line 3968 "tcc_bootstrap.c"
 case 18: 
 var $59=$r; //@line 3969 "tcc_bootstrap.c"
 var $60=(($59+1)|0); //@line 3969 "tcc_bootstrap.c"
 $r=$60; //@line 3969 "tcc_bootstrap.c"
 var $61=HEAP8[(($59)>>0)]; //@line 3969 "tcc_bootstrap.c"
 var $62=(($61<<24)>>24); //@line 3969 "tcc_bootstrap.c"
 $c=$62; //@line 3969 "tcc_bootstrap.c"
 var $63=$c; //@line 3970 "tcc_bootstrap.c"
 var $64=($63|0)==0; //@line 3970 "tcc_bootstrap.c"
 if($64){label=19;break;}else{label=20;break;} //@line 3970 "tcc_bootstrap.c"
 case 19: 
 label=21;break; //@line 3971 "tcc_bootstrap.c"
 case 20: 
 label=18;break; //@line 3972 "tcc_bootstrap.c"
 case 21: 
 var $68=$p; //@line 3973 "tcc_bootstrap.c"
 var $69=$r; //@line 3973 "tcc_bootstrap.c"
 var $70=$p; //@line 3973 "tcc_bootstrap.c"
 var $71=$69; //@line 3973 "tcc_bootstrap.c"
 var $72=$70; //@line 3973 "tcc_bootstrap.c"
 var $73=((($71)-($72))|0); //@line 3973 "tcc_bootstrap.c"
 var $74=((($73)-(1))|0); //@line 3973 "tcc_bootstrap.c"
 var $75=_tok_alloc($68,$74); //@line 3973 "tcc_bootstrap.c"
 var $76=$r; //@line 3974 "tcc_bootstrap.c"
 $p=$76; //@line 3974 "tcc_bootstrap.c"
 label=16;break; //@line 3975 "tcc_bootstrap.c"
 case 22: 
 STACKTOP=sp;return; //@line 3976 "tcc_bootstrap.c"
  default: assert(0, "bad label: " + label);
 }

}


function _define_push($v,$macro_type,$str,$first_arg){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $s;
 var $o;
 $1=$v;
 $2=$macro_type;
 $3=$str;
 $4=$first_arg;
 var $5=$1; //@line 2133 "tcc_bootstrap.c"
 var $6=_define_find($5); //@line 2133 "tcc_bootstrap.c"
 $o=$6; //@line 2133 "tcc_bootstrap.c"
 var $7=$1; //@line 2134 "tcc_bootstrap.c"
 var $8=$2; //@line 2134 "tcc_bootstrap.c"
 var $9=_sym_push2(76656,$7,$8,0); //@line 2134 "tcc_bootstrap.c"
 $s=$9; //@line 2134 "tcc_bootstrap.c"
 var $10=$3; //@line 2135 "tcc_bootstrap.c"
 var $11=$s; //@line 2135 "tcc_bootstrap.c"
 var $12=(($11+8)|0); //@line 2135 "tcc_bootstrap.c"
 var $13=$12; //@line 2135 "tcc_bootstrap.c"
 HEAP32[(($13)>>2)]=$10; //@line 2135 "tcc_bootstrap.c"
 var $14=$4; //@line 2136 "tcc_bootstrap.c"
 var $15=$s; //@line 2136 "tcc_bootstrap.c"
 var $16=(($15+24)|0); //@line 2136 "tcc_bootstrap.c"
 var $17=$16; //@line 2136 "tcc_bootstrap.c"
 HEAP32[(($17)>>2)]=$14; //@line 2136 "tcc_bootstrap.c"
 var $18=$s; //@line 2137 "tcc_bootstrap.c"
 var $19=$1; //@line 2137 "tcc_bootstrap.c"
 var $20=((($19)-(256))|0); //@line 2137 "tcc_bootstrap.c"
 var $21=HEAP32[((10496)>>2)]; //@line 2137 "tcc_bootstrap.c"
 var $22=(($21+($20<<2))|0); //@line 2137 "tcc_bootstrap.c"
 var $23=HEAP32[(($22)>>2)]; //@line 2137 "tcc_bootstrap.c"
 var $24=(($23+4)|0); //@line 2137 "tcc_bootstrap.c"
 HEAP32[(($24)>>2)]=$18; //@line 2137 "tcc_bootstrap.c"
 var $25=$o; //@line 2138 "tcc_bootstrap.c"
 var $26=($25|0)!=0; //@line 2138 "tcc_bootstrap.c"
 if($26){label=2;break;}else{label=4;break;} //@line 2138 "tcc_bootstrap.c"
 case 2: 
 var $28=$o; //@line 2138 "tcc_bootstrap.c"
 var $29=(($28+8)|0); //@line 2138 "tcc_bootstrap.c"
 var $30=$29; //@line 2138 "tcc_bootstrap.c"
 var $31=HEAP32[(($30)>>2)]; //@line 2138 "tcc_bootstrap.c"
 var $32=$s; //@line 2138 "tcc_bootstrap.c"
 var $33=(($32+8)|0); //@line 2138 "tcc_bootstrap.c"
 var $34=$33; //@line 2138 "tcc_bootstrap.c"
 var $35=HEAP32[(($34)>>2)]; //@line 2138 "tcc_bootstrap.c"
 var $36=_macro_is_equal($31,$35); //@line 2138 "tcc_bootstrap.c"
 var $37=($36|0)!=0; //@line 2138 "tcc_bootstrap.c"
 if($37){label=4;break;}else{label=3;break;} //@line 2138 "tcc_bootstrap.c"
 case 3: 
 var $39=$1; //@line 2139 "tcc_bootstrap.c"
 var $40=_get_tok_str($39,0); //@line 2139 "tcc_bootstrap.c"
 _tcc_warning(4088,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$40,tempVarArgs)); STACKTOP=tempVarArgs; //@line 2139 "tcc_bootstrap.c"
 label=4;break; //@line 2139 "tcc_bootstrap.c"
 case 4: 
 STACKTOP=sp;return; //@line 2140 "tcc_bootstrap.c"
  default: assert(0, "bad label: " + label);
 }

}


function _tcc_delete($s1){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 $1=$s1;
 _tcc_cleanup(); //@line 10995 "tcc_bootstrap.c"
 var $2=$1; //@line 10996 "tcc_bootstrap.c"
 _tccelf_delete($2); //@line 10996 "tcc_bootstrap.c"
 var $3=$1; //@line 10997 "tcc_bootstrap.c"
 var $4=(($3+628)|0); //@line 10997 "tcc_bootstrap.c"
 var $5=$4; //@line 10997 "tcc_bootstrap.c"
 var $6=$1; //@line 10997 "tcc_bootstrap.c"
 var $7=(($6+632)|0); //@line 10997 "tcc_bootstrap.c"
 _dynarray_reset($5,$7); //@line 10997 "tcc_bootstrap.c"
 var $8=$1; //@line 10998 "tcc_bootstrap.c"
 var $9=(($8+60)|0); //@line 10998 "tcc_bootstrap.c"
 var $10=$9; //@line 10998 "tcc_bootstrap.c"
 var $11=$1; //@line 10998 "tcc_bootstrap.c"
 var $12=(($11+64)|0); //@line 10998 "tcc_bootstrap.c"
 _dynarray_reset($10,$12); //@line 10998 "tcc_bootstrap.c"
 var $13=$1; //@line 10999 "tcc_bootstrap.c"
 var $14=(($13+68)|0); //@line 10999 "tcc_bootstrap.c"
 var $15=$14; //@line 10999 "tcc_bootstrap.c"
 var $16=$1; //@line 10999 "tcc_bootstrap.c"
 var $17=(($16+72)|0); //@line 10999 "tcc_bootstrap.c"
 _dynarray_reset($15,$17); //@line 10999 "tcc_bootstrap.c"
 var $18=$1; //@line 11000 "tcc_bootstrap.c"
 var $19=(($18+728)|0); //@line 11000 "tcc_bootstrap.c"
 var $20=HEAP32[(($19)>>2)]; //@line 11000 "tcc_bootstrap.c"
 _tcc_free($20); //@line 11000 "tcc_bootstrap.c"
 var $21=$1; //@line 11001 "tcc_bootstrap.c"
 var $22=(($21+712)|0); //@line 11001 "tcc_bootstrap.c"
 var $23=$22; //@line 11001 "tcc_bootstrap.c"
 var $24=$1; //@line 11001 "tcc_bootstrap.c"
 var $25=(($24+716)|0); //@line 11001 "tcc_bootstrap.c"
 _dynarray_reset($23,$25); //@line 11001 "tcc_bootstrap.c"
 var $26=$1; //@line 11002 "tcc_bootstrap.c"
 var $27=(($26+100)|0); //@line 11002 "tcc_bootstrap.c"
 var $28=$27; //@line 11002 "tcc_bootstrap.c"
 var $29=$1; //@line 11002 "tcc_bootstrap.c"
 var $30=(($29+104)|0); //@line 11002 "tcc_bootstrap.c"
 _dynarray_reset($28,$30); //@line 11002 "tcc_bootstrap.c"
 var $31=$1; //@line 11003 "tcc_bootstrap.c"
 var $32=(($31+736)|0); //@line 11003 "tcc_bootstrap.c"
 var $33=$32; //@line 11003 "tcc_bootstrap.c"
 var $34=$1; //@line 11003 "tcc_bootstrap.c"
 var $35=(($34+732)|0); //@line 11003 "tcc_bootstrap.c"
 _dynarray_reset($33,$35); //@line 11003 "tcc_bootstrap.c"
 var $36=$1; //@line 11004 "tcc_bootstrap.c"
 var $37=$36; //@line 11004 "tcc_bootstrap.c"
 _tcc_free($37); //@line 11004 "tcc_bootstrap.c"
 STACKTOP=sp;return; //@line 11005 "tcc_bootstrap.c"
}


function _tccelf_delete($s1){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $i;
 $1=$s1;
 $i=1; //@line 9250 "tcc_bootstrap.c"
 label=2;break; //@line 9250 "tcc_bootstrap.c"
 case 2: 
 var $3=$i; //@line 9250 "tcc_bootstrap.c"
 var $4=$1; //@line 9250 "tcc_bootstrap.c"
 var $5=(($4+684)|0); //@line 9250 "tcc_bootstrap.c"
 var $6=HEAP32[(($5)>>2)]; //@line 9250 "tcc_bootstrap.c"
 var $7=($3|0)<($6|0); //@line 9250 "tcc_bootstrap.c"
 if($7){label=3;break;}else{label=5;break;} //@line 9250 "tcc_bootstrap.c"
 case 3: 
 var $9=$i; //@line 9251 "tcc_bootstrap.c"
 var $10=$1; //@line 9251 "tcc_bootstrap.c"
 var $11=(($10+680)|0); //@line 9251 "tcc_bootstrap.c"
 var $12=HEAP32[(($11)>>2)]; //@line 9251 "tcc_bootstrap.c"
 var $13=(($12+($9<<2))|0); //@line 9251 "tcc_bootstrap.c"
 var $14=HEAP32[(($13)>>2)]; //@line 9251 "tcc_bootstrap.c"
 _free_section($14); //@line 9251 "tcc_bootstrap.c"
 label=4;break; //@line 9251 "tcc_bootstrap.c"
 case 4: 
 var $16=$i; //@line 9250 "tcc_bootstrap.c"
 var $17=((($16)+(1))|0); //@line 9250 "tcc_bootstrap.c"
 $i=$17; //@line 9250 "tcc_bootstrap.c"
 label=2;break; //@line 9250 "tcc_bootstrap.c"
 case 5: 
 var $19=$1; //@line 9252 "tcc_bootstrap.c"
 var $20=(($19+680)|0); //@line 9252 "tcc_bootstrap.c"
 var $21=$20; //@line 9252 "tcc_bootstrap.c"
 var $22=$1; //@line 9252 "tcc_bootstrap.c"
 var $23=(($22+684)|0); //@line 9252 "tcc_bootstrap.c"
 _dynarray_reset($21,$23); //@line 9252 "tcc_bootstrap.c"
 $i=0; //@line 9253 "tcc_bootstrap.c"
 label=6;break; //@line 9253 "tcc_bootstrap.c"
 case 6: 
 var $25=$i; //@line 9253 "tcc_bootstrap.c"
 var $26=$1; //@line 9253 "tcc_bootstrap.c"
 var $27=(($26+692)|0); //@line 9253 "tcc_bootstrap.c"
 var $28=HEAP32[(($27)>>2)]; //@line 9253 "tcc_bootstrap.c"
 var $29=($25|0)<($28|0); //@line 9253 "tcc_bootstrap.c"
 if($29){label=7;break;}else{label=9;break;} //@line 9253 "tcc_bootstrap.c"
 case 7: 
 var $31=$i; //@line 9254 "tcc_bootstrap.c"
 var $32=$1; //@line 9254 "tcc_bootstrap.c"
 var $33=(($32+688)|0); //@line 9254 "tcc_bootstrap.c"
 var $34=HEAP32[(($33)>>2)]; //@line 9254 "tcc_bootstrap.c"
 var $35=(($34+($31<<2))|0); //@line 9254 "tcc_bootstrap.c"
 var $36=HEAP32[(($35)>>2)]; //@line 9254 "tcc_bootstrap.c"
 _free_section($36); //@line 9254 "tcc_bootstrap.c"
 label=8;break; //@line 9254 "tcc_bootstrap.c"
 case 8: 
 var $38=$i; //@line 9253 "tcc_bootstrap.c"
 var $39=((($38)+(1))|0); //@line 9253 "tcc_bootstrap.c"
 $i=$39; //@line 9253 "tcc_bootstrap.c"
 label=6;break; //@line 9253 "tcc_bootstrap.c"
 case 9: 
 var $41=$1; //@line 9255 "tcc_bootstrap.c"
 var $42=(($41+688)|0); //@line 9255 "tcc_bootstrap.c"
 var $43=$42; //@line 9255 "tcc_bootstrap.c"
 var $44=$1; //@line 9255 "tcc_bootstrap.c"
 var $45=(($44+692)|0); //@line 9255 "tcc_bootstrap.c"
 _dynarray_reset($43,$45); //@line 9255 "tcc_bootstrap.c"
 var $46=$1; //@line 9256 "tcc_bootstrap.c"
 var $47=(($46+704)|0); //@line 9256 "tcc_bootstrap.c"
 var $48=HEAP32[(($47)>>2)]; //@line 9256 "tcc_bootstrap.c"
 var $49=$48; //@line 9256 "tcc_bootstrap.c"
 _tcc_free($49); //@line 9256 "tcc_bootstrap.c"
 HEAP32[((10504)>>2)]=0; //@line 9257 "tcc_bootstrap.c"
 STACKTOP=sp;return; //@line 9258 "tcc_bootstrap.c"
  default: assert(0, "bad label: " + label);
 }

}


function _dynarray_reset($pp,$n){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $p;
 $1=$pp;
 $2=$n;
 var $3=$1; //@line 10759 "tcc_bootstrap.c"
 var $4=$3; //@line 10759 "tcc_bootstrap.c"
 var $5=HEAP32[(($4)>>2)]; //@line 10759 "tcc_bootstrap.c"
 $p=$5; //@line 10759 "tcc_bootstrap.c"
 label=2;break; //@line 10759 "tcc_bootstrap.c"
 case 2: 
 var $7=$2; //@line 10759 "tcc_bootstrap.c"
 var $8=HEAP32[(($7)>>2)]; //@line 10759 "tcc_bootstrap.c"
 var $9=($8|0)!=0; //@line 10759 "tcc_bootstrap.c"
 if($9){label=3;break;}else{label=7;break;} //@line 10759 "tcc_bootstrap.c"
 case 3: 
 var $11=$p; //@line 10760 "tcc_bootstrap.c"
 var $12=HEAP32[(($11)>>2)]; //@line 10760 "tcc_bootstrap.c"
 var $13=($12|0)!=0; //@line 10760 "tcc_bootstrap.c"
 if($13){label=4;break;}else{label=5;break;} //@line 10760 "tcc_bootstrap.c"
 case 4: 
 var $15=$p; //@line 10761 "tcc_bootstrap.c"
 var $16=HEAP32[(($15)>>2)]; //@line 10761 "tcc_bootstrap.c"
 _tcc_free($16); //@line 10761 "tcc_bootstrap.c"
 label=5;break; //@line 10761 "tcc_bootstrap.c"
 case 5: 
 label=6;break; //@line 10761 "tcc_bootstrap.c"
 case 6: 
 var $19=$p; //@line 10759 "tcc_bootstrap.c"
 var $20=(($19+4)|0); //@line 10759 "tcc_bootstrap.c"
 $p=$20; //@line 10759 "tcc_bootstrap.c"
 var $21=$2; //@line 10759 "tcc_bootstrap.c"
 var $22=HEAP32[(($21)>>2)]; //@line 10759 "tcc_bootstrap.c"
 var $23=((($22)-(1))|0); //@line 10759 "tcc_bootstrap.c"
 HEAP32[(($21)>>2)]=$23; //@line 10759 "tcc_bootstrap.c"
 label=2;break; //@line 10759 "tcc_bootstrap.c"
 case 7: 
 var $25=$1; //@line 10762 "tcc_bootstrap.c"
 var $26=$25; //@line 10762 "tcc_bootstrap.c"
 var $27=HEAP32[(($26)>>2)]; //@line 10762 "tcc_bootstrap.c"
 _tcc_free($27); //@line 10762 "tcc_bootstrap.c"
 var $28=$1; //@line 10763 "tcc_bootstrap.c"
 var $29=$28; //@line 10763 "tcc_bootstrap.c"
 HEAP32[(($29)>>2)]=0; //@line 10763 "tcc_bootstrap.c"
 STACKTOP=sp;return; //@line 10764 "tcc_bootstrap.c"
  default: assert(0, "bad label: " + label);
 }

}


function _tcc_set_output_type($s,$output_type){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 var $2;
 $1=$s;
 $2=$output_type;
 var $3=$2; //@line 11008 "tcc_bootstrap.c"
 var $4=$1; //@line 11008 "tcc_bootstrap.c"
 var $5=(($4+4)|0); //@line 11008 "tcc_bootstrap.c"
 HEAP32[(($5)>>2)]=$3; //@line 11008 "tcc_bootstrap.c"
 var $6=$1; //@line 11009 "tcc_bootstrap.c"
 var $7=(($6+8)|0); //@line 11009 "tcc_bootstrap.c"
 HEAP32[(($7)>>2)]=0; //@line 11009 "tcc_bootstrap.c"
 STACKTOP=sp;return 0; //@line 11010 "tcc_bootstrap.c"
}


function _tcc_add_include_path($s,$pathname){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 var $2;
 $1=$s;
 $2=$pathname;
 var $3=$1; //@line 11014 "tcc_bootstrap.c"
 var $4=$1; //@line 11014 "tcc_bootstrap.c"
 var $5=(($4+60)|0); //@line 11014 "tcc_bootstrap.c"
 var $6=$5; //@line 11014 "tcc_bootstrap.c"
 var $7=$1; //@line 11014 "tcc_bootstrap.c"
 var $8=(($7+64)|0); //@line 11014 "tcc_bootstrap.c"
 var $9=$2; //@line 11014 "tcc_bootstrap.c"
 _tcc_split_path($3,$6,$8,$9); //@line 11014 "tcc_bootstrap.c"
 STACKTOP=sp;return 0; //@line 11015 "tcc_bootstrap.c"
}


function _tcc_split_path($s,$p_ary,$p_nb_ary,$in){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $p;
 var $c;
 var $str=sp;
 $1=$s;
 $2=$p_ary;
 $3=$p_nb_ary;
 $4=$in;
 label=2;break; //@line 10768 "tcc_bootstrap.c"
 case 2: 
 _cstr_new($str); //@line 10771 "tcc_bootstrap.c"
 var $6=$4; //@line 10772 "tcc_bootstrap.c"
 $p=$6; //@line 10772 "tcc_bootstrap.c"
 label=3;break; //@line 10772 "tcc_bootstrap.c"
 case 3: 
 var $8=$p; //@line 10772 "tcc_bootstrap.c"
 var $9=HEAP8[(($8)>>0)]; //@line 10772 "tcc_bootstrap.c"
 var $10=(($9<<24)>>24); //@line 10772 "tcc_bootstrap.c"
 $c=$10; //@line 10772 "tcc_bootstrap.c"
 var $11=$c; //@line 10772 "tcc_bootstrap.c"
 var $12=($11|0)!=0; //@line 10772 "tcc_bootstrap.c"
 if($12){label=4;break;}else{var $19=0;label=5;break;} //@line 10772 "tcc_bootstrap.c"
 case 4: 
 var $14=$c; //@line 10772 "tcc_bootstrap.c"
 var $15=HEAP8[((4112)>>0)]; //@line 10772 "tcc_bootstrap.c"
 var $16=(($15<<24)>>24); //@line 10772 "tcc_bootstrap.c"
 var $17=($14|0)!=($16|0); //@line 10772 "tcc_bootstrap.c"
 var $19=$17;label=5;break;
 case 5: 
 var $19;
 if($19){label=6;break;}else{label=8;break;}
 case 6: 
 var $21=$c; //@line 10773 "tcc_bootstrap.c"
 _cstr_ccat($str,$21); //@line 10773 "tcc_bootstrap.c"
 label=7;break; //@line 10774 "tcc_bootstrap.c"
 case 7: 
 var $23=$p; //@line 10772 "tcc_bootstrap.c"
 var $24=(($23+1)|0); //@line 10772 "tcc_bootstrap.c"
 $p=$24; //@line 10772 "tcc_bootstrap.c"
 label=3;break; //@line 10772 "tcc_bootstrap.c"
 case 8: 
 var $26=(($str)|0); //@line 10775 "tcc_bootstrap.c"
 var $27=HEAP32[(($26)>>2)]; //@line 10775 "tcc_bootstrap.c"
 var $28=($27|0)!=0; //@line 10775 "tcc_bootstrap.c"
 if($28){label=9;break;}else{label=10;break;} //@line 10775 "tcc_bootstrap.c"
 case 9: 
 _cstr_ccat($str,0); //@line 10776 "tcc_bootstrap.c"
 var $30=$2; //@line 10777 "tcc_bootstrap.c"
 var $31=$3; //@line 10777 "tcc_bootstrap.c"
 var $32=(($str+4)|0); //@line 10777 "tcc_bootstrap.c"
 var $33=HEAP32[(($32)>>2)]; //@line 10777 "tcc_bootstrap.c"
 var $34=_tcc_strdup($33); //@line 10777 "tcc_bootstrap.c"
 _dynarray_add($30,$31,$34); //@line 10777 "tcc_bootstrap.c"
 label=10;break; //@line 10778 "tcc_bootstrap.c"
 case 10: 
 _cstr_free($str); //@line 10779 "tcc_bootstrap.c"
 var $36=$p; //@line 10780 "tcc_bootstrap.c"
 var $37=(($36+1)|0); //@line 10780 "tcc_bootstrap.c"
 $4=$37; //@line 10780 "tcc_bootstrap.c"
 label=11;break; //@line 10781 "tcc_bootstrap.c"
 case 11: 
 var $39=$p; //@line 10781 "tcc_bootstrap.c"
 var $40=HEAP8[(($39)>>0)]; //@line 10781 "tcc_bootstrap.c"
 var $41=(($40<<24)>>24)!=0; //@line 10781 "tcc_bootstrap.c"
 if($41){label=2;break;}else{label=12;break;} //@line 10781 "tcc_bootstrap.c"
 case 12: 
 STACKTOP=sp;return; //@line 10782 "tcc_bootstrap.c"
  default: assert(0, "bad label: " + label);
 }

}


function _tcc_add_file($s,$filename){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $filetype;
 var $flags;
 $1=$s;
 $2=$filename;
 var $3=$1; //@line 11029 "tcc_bootstrap.c"
 var $4=(($3+724)|0); //@line 11029 "tcc_bootstrap.c"
 var $5=HEAP32[(($4)>>2)]; //@line 11029 "tcc_bootstrap.c"
 $filetype=$5; //@line 11029 "tcc_bootstrap.c"
 $flags=16; //@line 11030 "tcc_bootstrap.c"
 var $6=$filetype; //@line 11031 "tcc_bootstrap.c"
 var $7=($6|0)==0; //@line 11031 "tcc_bootstrap.c"
 if($7){label=2;break;}else{label=3;break;} //@line 11031 "tcc_bootstrap.c"
 case 2: 
 var $9=$1; //@line 11032 "tcc_bootstrap.c"
 var $10=(($9+724)|0); //@line 11032 "tcc_bootstrap.c"
 HEAP32[(($10)>>2)]=1; //@line 11032 "tcc_bootstrap.c"
 label=3;break; //@line 11033 "tcc_bootstrap.c"
 case 3: 
 var $12=$1; //@line 11034 "tcc_bootstrap.c"
 var $13=$2; //@line 11034 "tcc_bootstrap.c"
 var $14=$flags; //@line 11034 "tcc_bootstrap.c"
 var $15=_tcc_add_file_internal($12,$13,$14); //@line 11034 "tcc_bootstrap.c"
 STACKTOP=sp;return $15; //@line 11034 "tcc_bootstrap.c"
  default: assert(0, "bad label: " + label);
 }

}


function _tcc_add_file_internal($s1,$filename,$flags){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 var $2;
 var $3;
 var $ret;
 $1=$s1;
 $2=$filename;
 $3=$flags;
 var $4=$1; //@line 11020 "tcc_bootstrap.c"
 var $5=$2; //@line 11020 "tcc_bootstrap.c"
 var $6=_tcc_open($4,$5); //@line 11020 "tcc_bootstrap.c"
 $ret=$6; //@line 11020 "tcc_bootstrap.c"
 var $7=$1; //@line 11021 "tcc_bootstrap.c"
 var $8=(($7+100)|0); //@line 11021 "tcc_bootstrap.c"
 var $9=$8; //@line 11021 "tcc_bootstrap.c"
 var $10=$1; //@line 11021 "tcc_bootstrap.c"
 var $11=(($10+104)|0); //@line 11021 "tcc_bootstrap.c"
 var $12=$2; //@line 11022 "tcc_bootstrap.c"
 var $13=_tcc_strdup($12); //@line 11022 "tcc_bootstrap.c"
 _dynarray_add($9,$11,$13); //@line 11022 "tcc_bootstrap.c"
 var $14=$1; //@line 11023 "tcc_bootstrap.c"
 var $15=_tcc_compile($14); //@line 11023 "tcc_bootstrap.c"
 $ret=$15; //@line 11023 "tcc_bootstrap.c"
 _tcc_close(); //@line 11024 "tcc_bootstrap.c"
 var $16=$ret; //@line 11025 "tcc_bootstrap.c"
 STACKTOP=sp;return $16; //@line 11025 "tcc_bootstrap.c"
}


function _tcc_parse_args($s,$pargc,$pargv,$optind){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+24)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $popt;
 var $optarg;
 var $r;
 var $last_o;
 var $linker_arg=sp;
 var $tool;
 var $arg_start;
 var $noaction;
 var $argv;
 var $argc;
 var $p1;
 var $r1=(sp)+(16);
 $2=$s;
 $3=$pargc;
 $4=$pargv;
 $5=$optind;
 $last_o=-1; //@line 11156 "tcc_bootstrap.c"
 $tool=0; //@line 11158 "tcc_bootstrap.c"
 $arg_start=0; //@line 11158 "tcc_bootstrap.c"
 var $6=$5; //@line 11158 "tcc_bootstrap.c"
 $noaction=$6; //@line 11158 "tcc_bootstrap.c"
 var $7=$4; //@line 11159 "tcc_bootstrap.c"
 var $8=HEAP32[(($7)>>2)]; //@line 11159 "tcc_bootstrap.c"
 $argv=$8; //@line 11159 "tcc_bootstrap.c"
 var $9=$3; //@line 11160 "tcc_bootstrap.c"
 var $10=HEAP32[(($9)>>2)]; //@line 11160 "tcc_bootstrap.c"
 $argc=$10; //@line 11160 "tcc_bootstrap.c"
 _cstr_new($linker_arg); //@line 11161 "tcc_bootstrap.c"
 label=2;break; //@line 11162 "tcc_bootstrap.c"
 case 2: 
 var $12=$5; //@line 11162 "tcc_bootstrap.c"
 var $13=$argc; //@line 11162 "tcc_bootstrap.c"
 var $14=($12|0)<($13|0); //@line 11162 "tcc_bootstrap.c"
 if($14){label=3;break;}else{label=40;break;} //@line 11162 "tcc_bootstrap.c"
 case 3: 
 var $16=$5; //@line 11163 "tcc_bootstrap.c"
 var $17=$argv; //@line 11163 "tcc_bootstrap.c"
 var $18=(($17+($16<<2))|0); //@line 11163 "tcc_bootstrap.c"
 var $19=HEAP32[(($18)>>2)]; //@line 11163 "tcc_bootstrap.c"
 $r=$19; //@line 11163 "tcc_bootstrap.c"
 var $20=$5; //@line 11164 "tcc_bootstrap.c"
 var $21=((($20)+(1))|0); //@line 11164 "tcc_bootstrap.c"
 $5=$21; //@line 11164 "tcc_bootstrap.c"
 label=4;break; //@line 11164 "tcc_bootstrap.c"
 case 4: 
 var $23=$r; //@line 11166 "tcc_bootstrap.c"
 var $24=(($23)|0); //@line 11166 "tcc_bootstrap.c"
 var $25=HEAP8[(($24)>>0)]; //@line 11166 "tcc_bootstrap.c"
 var $26=(($25<<24)>>24); //@line 11166 "tcc_bootstrap.c"
 var $27=($26|0)!=45; //@line 11166 "tcc_bootstrap.c"
 if($27){label=6;break;}else{label=5;break;} //@line 11166 "tcc_bootstrap.c"
 case 5: 
 var $29=$r; //@line 11166 "tcc_bootstrap.c"
 var $30=(($29+1)|0); //@line 11166 "tcc_bootstrap.c"
 var $31=HEAP8[(($30)>>0)]; //@line 11166 "tcc_bootstrap.c"
 var $32=(($31<<24)>>24); //@line 11166 "tcc_bootstrap.c"
 var $33=($32|0)==0; //@line 11166 "tcc_bootstrap.c"
 if($33){label=6;break;}else{label=11;break;} //@line 11166 "tcc_bootstrap.c"
 case 6: 
 var $35=$r; //@line 11167 "tcc_bootstrap.c"
 var $36=(($35)|0); //@line 11167 "tcc_bootstrap.c"
 var $37=HEAP8[(($36)>>0)]; //@line 11167 "tcc_bootstrap.c"
 var $38=(($37<<24)>>24); //@line 11167 "tcc_bootstrap.c"
 var $39=($38|0)!=64; //@line 11167 "tcc_bootstrap.c"
 if($39){label=7;break;}else{label=10;break;} //@line 11167 "tcc_bootstrap.c"
 case 7: 
 var $41=$r; //@line 11168 "tcc_bootstrap.c"
 var $42=_strlen($41); //@line 11168 "tcc_bootstrap.c"
 var $43=($42>>>0)>0; //@line 11168 "tcc_bootstrap.c"
 if($43){label=8;break;}else{label=9;break;} //@line 11168 "tcc_bootstrap.c"
 case 8: 
 var $45=$2; //@line 11169 "tcc_bootstrap.c"
 var $46=$r; //@line 11169 "tcc_bootstrap.c"
 var $47=$2; //@line 11169 "tcc_bootstrap.c"
 var $48=(($47+724)|0); //@line 11169 "tcc_bootstrap.c"
 var $49=HEAP32[(($48)>>2)]; //@line 11169 "tcc_bootstrap.c"
 _args_parser_add_file($45,$46,$49); //@line 11169 "tcc_bootstrap.c"
 label=9;break; //@line 11170 "tcc_bootstrap.c"
 case 9: 
 label=10;break; //@line 11171 "tcc_bootstrap.c"
 case 10: 
 label=2;break; //@line 11172 "tcc_bootstrap.c"
 case 11: 
 $popt=200; //@line 11174 "tcc_bootstrap.c"
 label=12;break; //@line 11174 "tcc_bootstrap.c"
 case 12: 
 var $54=$popt; //@line 11175 "tcc_bootstrap.c"
 var $55=(($54)|0); //@line 11175 "tcc_bootstrap.c"
 var $56=HEAP32[(($55)>>2)]; //@line 11175 "tcc_bootstrap.c"
 $p1=$56; //@line 11175 "tcc_bootstrap.c"
 var $57=$r; //@line 11176 "tcc_bootstrap.c"
 var $58=(($57+1)|0); //@line 11176 "tcc_bootstrap.c"
 HEAP32[(($r1)>>2)]=$58; //@line 11176 "tcc_bootstrap.c"
 var $59=$p1; //@line 11177 "tcc_bootstrap.c"
 var $60=($59|0)==0; //@line 11177 "tcc_bootstrap.c"
 if($60){label=13;break;}else{label=14;break;} //@line 11177 "tcc_bootstrap.c"
 case 13: 
 var $62=$r; //@line 11178 "tcc_bootstrap.c"
 _tcc_error(4304,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$62,tempVarArgs)); STACKTOP=tempVarArgs; //@line 11178 "tcc_bootstrap.c"
 label=14;break; //@line 11178 "tcc_bootstrap.c"
 case 14: 
 var $64=$p1; //@line 11179 "tcc_bootstrap.c"
 var $65=_strstart($64,$r1); //@line 11179 "tcc_bootstrap.c"
 var $66=($65|0)!=0; //@line 11179 "tcc_bootstrap.c"
 if($66){label=16;break;}else{label=15;break;} //@line 11179 "tcc_bootstrap.c"
 case 15: 
 label=25;break; //@line 11180 "tcc_bootstrap.c"
 case 16: 
 var $69=HEAP32[(($r1)>>2)]; //@line 11181 "tcc_bootstrap.c"
 $optarg=$69; //@line 11181 "tcc_bootstrap.c"
 var $70=$popt; //@line 11182 "tcc_bootstrap.c"
 var $71=(($70+6)|0); //@line 11182 "tcc_bootstrap.c"
 var $72=HEAP16[(($71)>>1)]; //@line 11182 "tcc_bootstrap.c"
 var $73=($72&65535); //@line 11182 "tcc_bootstrap.c"
 var $74=$73&1; //@line 11182 "tcc_bootstrap.c"
 var $75=($74|0)!=0; //@line 11182 "tcc_bootstrap.c"
 if($75){label=17;break;}else{label=24;break;} //@line 11182 "tcc_bootstrap.c"
 case 17: 
 var $77=HEAP32[(($r1)>>2)]; //@line 11183 "tcc_bootstrap.c"
 var $78=HEAP8[(($77)>>0)]; //@line 11183 "tcc_bootstrap.c"
 var $79=(($78<<24)>>24); //@line 11183 "tcc_bootstrap.c"
 var $80=($79|0)==0; //@line 11183 "tcc_bootstrap.c"
 if($80){label=18;break;}else{label=23;break;} //@line 11183 "tcc_bootstrap.c"
 case 18: 
 var $82=$popt; //@line 11183 "tcc_bootstrap.c"
 var $83=(($82+6)|0); //@line 11183 "tcc_bootstrap.c"
 var $84=HEAP16[(($83)>>1)]; //@line 11183 "tcc_bootstrap.c"
 var $85=($84&65535); //@line 11183 "tcc_bootstrap.c"
 var $86=$85&2; //@line 11183 "tcc_bootstrap.c"
 var $87=($86|0)!=0; //@line 11183 "tcc_bootstrap.c"
 if($87){label=23;break;}else{label=19;break;} //@line 11183 "tcc_bootstrap.c"
 case 19: 
 var $89=$5; //@line 11184 "tcc_bootstrap.c"
 var $90=$argc; //@line 11184 "tcc_bootstrap.c"
 var $91=($89|0)>=($90|0); //@line 11184 "tcc_bootstrap.c"
 if($91){label=20;break;}else{label=22;break;} //@line 11184 "tcc_bootstrap.c"
 case 20: 
 label=21;break; //@line 11184 "tcc_bootstrap.c"
 case 21: 
 var $94=$r; //@line 11186 "tcc_bootstrap.c"
 _tcc_error(4264,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$94,tempVarArgs)); STACKTOP=tempVarArgs; //@line 11186 "tcc_bootstrap.c"
 label=22;break; //@line 11186 "tcc_bootstrap.c"
 case 22: 
 var $96=$5; //@line 11187 "tcc_bootstrap.c"
 var $97=((($96)+(1))|0); //@line 11187 "tcc_bootstrap.c"
 $5=$97; //@line 11187 "tcc_bootstrap.c"
 var $98=$argv; //@line 11187 "tcc_bootstrap.c"
 var $99=(($98+($96<<2))|0); //@line 11187 "tcc_bootstrap.c"
 var $100=HEAP32[(($99)>>2)]; //@line 11187 "tcc_bootstrap.c"
 $optarg=$100; //@line 11187 "tcc_bootstrap.c"
 label=23;break; //@line 11188 "tcc_bootstrap.c"
 case 23: 
 label=24;break; //@line 11189 "tcc_bootstrap.c"
 case 24: 
 label=26;break; //@line 11190 "tcc_bootstrap.c"
 case 25: 
 var $104=$popt; //@line 11174 "tcc_bootstrap.c"
 var $105=(($104+8)|0); //@line 11174 "tcc_bootstrap.c"
 $popt=$105; //@line 11174 "tcc_bootstrap.c"
 label=12;break; //@line 11174 "tcc_bootstrap.c"
 case 26: 
 var $107=$popt; //@line 11192 "tcc_bootstrap.c"
 var $108=(($107+4)|0); //@line 11192 "tcc_bootstrap.c"
 var $109=HEAP16[(($108)>>1)]; //@line 11192 "tcc_bootstrap.c"
 var $110=($109&65535); //@line 11192 "tcc_bootstrap.c"
 switch(($110|0)){case 0:{ label=27;break;}case 1:{ label=28;break;}case 3:{ label=29;break;}case 4:{ label=30;break;}case 5:{ label=33;break;}case 6:{ label=34;break;}default:{label=35;break;}}break;
 case 27: 
 var $112=$2; //@line 11194 "tcc_bootstrap.c"
 var $113=$optarg; //@line 11194 "tcc_bootstrap.c"
 var $114=_tcc_add_include_path($112,$113); //@line 11194 "tcc_bootstrap.c"
 label=39;break; //@line 11195 "tcc_bootstrap.c"
 case 28: 
 var $116=$2; //@line 11197 "tcc_bootstrap.c"
 var $117=$optarg; //@line 11197 "tcc_bootstrap.c"
 _parse_option_D($116,$117); //@line 11197 "tcc_bootstrap.c"
 label=39;break; //@line 11198 "tcc_bootstrap.c"
 case 29: 
 var $119=$2; //@line 11200 "tcc_bootstrap.c"
 var $120=(($119+4)|0); //@line 11200 "tcc_bootstrap.c"
 HEAP32[(($120)>>2)]=4; //@line 11200 "tcc_bootstrap.c"
 label=39;break; //@line 11201 "tcc_bootstrap.c"
 case 30: 
 var $122=$2; //@line 11203 "tcc_bootstrap.c"
 var $123=(($122+728)|0); //@line 11203 "tcc_bootstrap.c"
 var $124=HEAP32[(($123)>>2)]; //@line 11203 "tcc_bootstrap.c"
 var $125=($124|0)!=0; //@line 11203 "tcc_bootstrap.c"
 if($125){label=31;break;}else{label=32;break;} //@line 11203 "tcc_bootstrap.c"
 case 31: 
 _tcc_warning(4224,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs; //@line 11204 "tcc_bootstrap.c"
 var $127=$2; //@line 11205 "tcc_bootstrap.c"
 var $128=(($127+728)|0); //@line 11205 "tcc_bootstrap.c"
 var $129=HEAP32[(($128)>>2)]; //@line 11205 "tcc_bootstrap.c"
 _tcc_free($129); //@line 11205 "tcc_bootstrap.c"
 label=32;break; //@line 11206 "tcc_bootstrap.c"
 case 32: 
 var $131=$optarg; //@line 11207 "tcc_bootstrap.c"
 var $132=_tcc_strdup($131); //@line 11207 "tcc_bootstrap.c"
 var $133=$2; //@line 11207 "tcc_bootstrap.c"
 var $134=(($133+728)|0); //@line 11207 "tcc_bootstrap.c"
 HEAP32[(($134)>>2)]=$132; //@line 11207 "tcc_bootstrap.c"
 label=39;break; //@line 11208 "tcc_bootstrap.c"
 case 33: 
 label=39;break; //@line 11210 "tcc_bootstrap.c"
 case 34: 
 label=39;break; //@line 11212 "tcc_bootstrap.c"
 case 35: 
 label=36;break; //@line 11212 "tcc_bootstrap.c"
 case 36: 
 var $139=$2; //@line 11215 "tcc_bootstrap.c"
 var $140=(($139+24)|0); //@line 11215 "tcc_bootstrap.c"
 var $141=HEAP32[(($140)>>2)]; //@line 11215 "tcc_bootstrap.c"
 var $142=($141|0)!=0; //@line 11215 "tcc_bootstrap.c"
 if($142){label=37;break;}else{label=38;break;} //@line 11215 "tcc_bootstrap.c"
 case 37: 
 var $144=$r; //@line 11216 "tcc_bootstrap.c"
 _tcc_warning(4200,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$144,tempVarArgs)); STACKTOP=tempVarArgs; //@line 11216 "tcc_bootstrap.c"
 label=38;break; //@line 11216 "tcc_bootstrap.c"
 case 38: 
 label=39;break; //@line 11217 "tcc_bootstrap.c"
 case 39: 
 label=2;break; //@line 11219 "tcc_bootstrap.c"
 case 40: 
 var $148=$argc; //@line 11220 "tcc_bootstrap.c"
 var $149=$arg_start; //@line 11220 "tcc_bootstrap.c"
 var $150=((($148)-($149))|0); //@line 11220 "tcc_bootstrap.c"
 var $151=$3; //@line 11220 "tcc_bootstrap.c"
 HEAP32[(($151)>>2)]=$150; //@line 11220 "tcc_bootstrap.c"
 var $152=$argv; //@line 11221 "tcc_bootstrap.c"
 var $153=$arg_start; //@line 11221 "tcc_bootstrap.c"
 var $154=(($152+($153<<2))|0); //@line 11221 "tcc_bootstrap.c"
 var $155=$4; //@line 11221 "tcc_bootstrap.c"
 HEAP32[(($155)>>2)]=$154; //@line 11221 "tcc_bootstrap.c"
 var $156=$5; //@line 11222 "tcc_bootstrap.c"
 var $157=$noaction; //@line 11222 "tcc_bootstrap.c"
 var $158=($156|0)!=($157|0); //@line 11222 "tcc_bootstrap.c"
 if($158){label=41;break;}else{label=42;break;} //@line 11222 "tcc_bootstrap.c"
 case 41: 
 $1=0; //@line 11223 "tcc_bootstrap.c"
 label=43;break; //@line 11223 "tcc_bootstrap.c"
 case 42: 
 $1=1; //@line 11224 "tcc_bootstrap.c"
 label=43;break; //@line 11224 "tcc_bootstrap.c"
 case 43: 
 var $162=$1; //@line 11224 "tcc_bootstrap.c"
 STACKTOP=sp;return $162; //@line 11224 "tcc_bootstrap.c"
  default: assert(0, "bad label: " + label);
 }

}


function _cstr_new($cstr){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 $1=$cstr;
 var $2=$1; //@line 1366 "tcc_bootstrap.c"
 var $3=$2; //@line 1366 "tcc_bootstrap.c"
 HEAP32[(($3)>>2)]=0; HEAP32[((($3)+(4))>>2)]=0; HEAP32[((($3)+(8))>>2)]=0; //@line 1366 "tcc_bootstrap.c"
 STACKTOP=sp;return; //@line 1367 "tcc_bootstrap.c"
}


function _args_parser_add_file($s,$filename,$filetype){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 var $2;
 var $3;
 var $f;
 $1=$s;
 $2=$filename;
 $3=$filetype;
 var $4=$2; //@line 11093 "tcc_bootstrap.c"
 var $5=_strlen($4); //@line 11093 "tcc_bootstrap.c"
 var $6=((($5)+(3))|0); //@line 11093 "tcc_bootstrap.c"
 var $7=_tcc_malloc($6); //@line 11093 "tcc_bootstrap.c"
 var $8=$7; //@line 11093 "tcc_bootstrap.c"
 $f=$8; //@line 11093 "tcc_bootstrap.c"
 var $9=$3; //@line 11094 "tcc_bootstrap.c"
 var $10=(($9)&255); //@line 11094 "tcc_bootstrap.c"
 var $11=$f; //@line 11094 "tcc_bootstrap.c"
 var $12=(($11)|0); //@line 11094 "tcc_bootstrap.c"
 HEAP8[(($12)>>0)]=$10; //@line 11094 "tcc_bootstrap.c"
 var $13=$1; //@line 11095 "tcc_bootstrap.c"
 var $14=(($13)|0); //@line 11095 "tcc_bootstrap.c"
 var $15=HEAP32[(($14)>>2)]; //@line 11095 "tcc_bootstrap.c"
 var $16=(($15)&255); //@line 11095 "tcc_bootstrap.c"
 var $17=$f; //@line 11095 "tcc_bootstrap.c"
 var $18=(($17+1)|0); //@line 11095 "tcc_bootstrap.c"
 HEAP8[(($18)>>0)]=$16; //@line 11095 "tcc_bootstrap.c"
 var $19=$f; //@line 11096 "tcc_bootstrap.c"
 var $20=(($19+2)|0); //@line 11096 "tcc_bootstrap.c"
 var $21=(($20)|0); //@line 11096 "tcc_bootstrap.c"
 var $22=$2; //@line 11096 "tcc_bootstrap.c"
 var $23=_strcpy($21,$22); //@line 11096 "tcc_bootstrap.c"
 var $24=$1; //@line 11097 "tcc_bootstrap.c"
 var $25=(($24+712)|0); //@line 11097 "tcc_bootstrap.c"
 var $26=$25; //@line 11097 "tcc_bootstrap.c"
 var $27=$1; //@line 11097 "tcc_bootstrap.c"
 var $28=(($27+716)|0); //@line 11097 "tcc_bootstrap.c"
 var $29=$f; //@line 11097 "tcc_bootstrap.c"
 var $30=$29; //@line 11097 "tcc_bootstrap.c"
 _dynarray_add($26,$28,$30); //@line 11097 "tcc_bootstrap.c"
 STACKTOP=sp;return; //@line 11098 "tcc_bootstrap.c"
}


function _strstart($val,$str){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $p;
 var $q;
 $2=$val;
 $3=$str;
 var $4=$3; //@line 11039 "tcc_bootstrap.c"
 var $5=HEAP32[(($4)>>2)]; //@line 11039 "tcc_bootstrap.c"
 $p=$5; //@line 11039 "tcc_bootstrap.c"
 var $6=$2; //@line 11040 "tcc_bootstrap.c"
 $q=$6; //@line 11040 "tcc_bootstrap.c"
 label=2;break; //@line 11041 "tcc_bootstrap.c"
 case 2: 
 var $8=$q; //@line 11041 "tcc_bootstrap.c"
 var $9=HEAP8[(($8)>>0)]; //@line 11041 "tcc_bootstrap.c"
 var $10=(($9<<24)>>24)!=0; //@line 11041 "tcc_bootstrap.c"
 if($10){label=3;break;}else{label=6;break;} //@line 11041 "tcc_bootstrap.c"
 case 3: 
 var $12=$p; //@line 11042 "tcc_bootstrap.c"
 var $13=HEAP8[(($12)>>0)]; //@line 11042 "tcc_bootstrap.c"
 var $14=(($13<<24)>>24); //@line 11042 "tcc_bootstrap.c"
 var $15=$q; //@line 11042 "tcc_bootstrap.c"
 var $16=HEAP8[(($15)>>0)]; //@line 11042 "tcc_bootstrap.c"
 var $17=(($16<<24)>>24); //@line 11042 "tcc_bootstrap.c"
 var $18=($14|0)!=($17|0); //@line 11042 "tcc_bootstrap.c"
 if($18){label=4;break;}else{label=5;break;} //@line 11042 "tcc_bootstrap.c"
 case 4: 
 $1=0; //@line 11043 "tcc_bootstrap.c"
 label=7;break; //@line 11043 "tcc_bootstrap.c"
 case 5: 
 var $21=$p; //@line 11044 "tcc_bootstrap.c"
 var $22=(($21+1)|0); //@line 11044 "tcc_bootstrap.c"
 $p=$22; //@line 11044 "tcc_bootstrap.c"
 var $23=$q; //@line 11045 "tcc_bootstrap.c"
 var $24=(($23+1)|0); //@line 11045 "tcc_bootstrap.c"
 $q=$24; //@line 11045 "tcc_bootstrap.c"
 label=2;break; //@line 11046 "tcc_bootstrap.c"
 case 6: 
 var $26=$p; //@line 11047 "tcc_bootstrap.c"
 var $27=$3; //@line 11047 "tcc_bootstrap.c"
 HEAP32[(($27)>>2)]=$26; //@line 11047 "tcc_bootstrap.c"
 $1=1; //@line 11048 "tcc_bootstrap.c"
 label=7;break; //@line 11048 "tcc_bootstrap.c"
 case 7: 
 var $29=$1; //@line 11048 "tcc_bootstrap.c"
 STACKTOP=sp;return $29; //@line 11048 "tcc_bootstrap.c"
  default: assert(0, "bad label: " + label);
 }

}


function _parse_option_D($s1,$optarg){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $sym;
 var $value;
 $1=$s1;
 $2=$optarg;
 var $3=$2; //@line 11084 "tcc_bootstrap.c"
 var $4=_tcc_strdup($3); //@line 11084 "tcc_bootstrap.c"
 $sym=$4; //@line 11084 "tcc_bootstrap.c"
 var $5=$sym; //@line 11085 "tcc_bootstrap.c"
 var $6=_strchr($5,61); //@line 11085 "tcc_bootstrap.c"
 $value=$6; //@line 11085 "tcc_bootstrap.c"
 var $7=$value; //@line 11086 "tcc_bootstrap.c"
 var $8=($7|0)!=0; //@line 11086 "tcc_bootstrap.c"
 if($8){label=2;break;}else{label=3;break;} //@line 11086 "tcc_bootstrap.c"
 case 2: 
 var $10=$value; //@line 11087 "tcc_bootstrap.c"
 var $11=(($10+1)|0); //@line 11087 "tcc_bootstrap.c"
 $value=$11; //@line 11087 "tcc_bootstrap.c"
 HEAP8[(($10)>>0)]=0; //@line 11087 "tcc_bootstrap.c"
 label=3;break; //@line 11087 "tcc_bootstrap.c"
 case 3: 
 var $13=$1; //@line 11088 "tcc_bootstrap.c"
 var $14=$sym; //@line 11088 "tcc_bootstrap.c"
 var $15=$value; //@line 11088 "tcc_bootstrap.c"
 _tcc_define_symbol($13,$14,$15); //@line 11088 "tcc_bootstrap.c"
 var $16=$sym; //@line 11089 "tcc_bootstrap.c"
 _tcc_free($16); //@line 11089 "tcc_bootstrap.c"
 STACKTOP=sp;return; //@line 11090 "tcc_bootstrap.c"
  default: assert(0, "bad label: " + label);
 }

}


function _main($argc0,$argv0){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $s;
 var $ret;
 var $opt;
 var $n;
 var $t;
 var $start_time;
 var $first_file;
 var $argc=sp;
 var $argv=(sp)+(8);
 var $ppfp;
 var $f;
 $1=0;
 $2=$argc0;
 $3=$argv0;
 $n=0; //@line 11252 "tcc_bootstrap.c"
 $t=0; //@line 11252 "tcc_bootstrap.c"
 $start_time=0; //@line 11253 "tcc_bootstrap.c"
 var $4=HEAP32[((_stdout)>>2)]; //@line 11256 "tcc_bootstrap.c"
 $ppfp=$4; //@line 11256 "tcc_bootstrap.c"
 label=2;break; //@line 11256 "tcc_bootstrap.c"
 case 2: 
 var $6=$2; //@line 11258 "tcc_bootstrap.c"
 HEAP32[(($argc)>>2)]=$6; //@line 11258 "tcc_bootstrap.c"
 var $7=$3; //@line 11258 "tcc_bootstrap.c"
 HEAP32[(($argv)>>2)]=$7; //@line 11258 "tcc_bootstrap.c"
 var $8=_tcc_new(); //@line 11259 "tcc_bootstrap.c"
 $s=$8; //@line 11259 "tcc_bootstrap.c"
 var $9=$s; //@line 11260 "tcc_bootstrap.c"
 var $10=_tcc_parse_args($9,$argc,$argv,1); //@line 11260 "tcc_bootstrap.c"
 $opt=$10; //@line 11260 "tcc_bootstrap.c"
 var $11=$s; //@line 11261 "tcc_bootstrap.c"
 var $12=(($11+716)|0); //@line 11261 "tcc_bootstrap.c"
 var $13=HEAP32[(($12)>>2)]; //@line 11261 "tcc_bootstrap.c"
 $n=$13; //@line 11261 "tcc_bootstrap.c"
 var $14=$s; //@line 11262 "tcc_bootstrap.c"
 var $15=$s; //@line 11262 "tcc_bootstrap.c"
 var $16=(($15+4)|0); //@line 11262 "tcc_bootstrap.c"
 var $17=HEAP32[(($16)>>2)]; //@line 11262 "tcc_bootstrap.c"
 var $18=_tcc_set_output_type($14,$17); //@line 11262 "tcc_bootstrap.c"
 var $19=$ppfp; //@line 11263 "tcc_bootstrap.c"
 var $20=$s; //@line 11263 "tcc_bootstrap.c"
 var $21=(($20+88)|0); //@line 11263 "tcc_bootstrap.c"
 HEAP32[(($21)>>2)]=$19; //@line 11263 "tcc_bootstrap.c"
 $first_file=0; //@line 11264 "tcc_bootstrap.c"
 $ret=0; //@line 11264 "tcc_bootstrap.c"
 label=3;break; //@line 11264 "tcc_bootstrap.c"
 case 3: 
 var $23=$s; //@line 11265 "tcc_bootstrap.c"
 var $24=(($23+716)|0); //@line 11265 "tcc_bootstrap.c"
 var $25=HEAP32[(($24)>>2)]; //@line 11265 "tcc_bootstrap.c"
 var $26=$n; //@line 11265 "tcc_bootstrap.c"
 var $27=((($25)-($26))|0); //@line 11265 "tcc_bootstrap.c"
 var $28=$s; //@line 11265 "tcc_bootstrap.c"
 var $29=(($28+712)|0); //@line 11265 "tcc_bootstrap.c"
 var $30=HEAP32[(($29)>>2)]; //@line 11265 "tcc_bootstrap.c"
 var $31=(($30+($27<<2))|0); //@line 11265 "tcc_bootstrap.c"
 var $32=HEAP32[(($31)>>2)]; //@line 11265 "tcc_bootstrap.c"
 $f=$32; //@line 11265 "tcc_bootstrap.c"
 var $33=$f; //@line 11266 "tcc_bootstrap.c"
 var $34=(($33)|0); //@line 11266 "tcc_bootstrap.c"
 var $35=HEAP8[(($34)>>0)]; //@line 11266 "tcc_bootstrap.c"
 var $36=(($35<<24)>>24); //@line 11266 "tcc_bootstrap.c"
 var $37=$s; //@line 11266 "tcc_bootstrap.c"
 var $38=(($37+724)|0); //@line 11266 "tcc_bootstrap.c"
 HEAP32[(($38)>>2)]=$36; //@line 11266 "tcc_bootstrap.c"
 var $39=$f; //@line 11267 "tcc_bootstrap.c"
 var $40=(($39+1)|0); //@line 11267 "tcc_bootstrap.c"
 var $41=HEAP8[(($40)>>0)]; //@line 11267 "tcc_bootstrap.c"
 var $42=(($41<<24)>>24); //@line 11267 "tcc_bootstrap.c"
 var $43=$s; //@line 11267 "tcc_bootstrap.c"
 var $44=(($43)|0); //@line 11267 "tcc_bootstrap.c"
 HEAP32[(($44)>>2)]=$42; //@line 11267 "tcc_bootstrap.c"
 var $45=$first_file; //@line 11268 "tcc_bootstrap.c"
 var $46=($45|0)!=0; //@line 11268 "tcc_bootstrap.c"
 if($46){label=5;break;}else{label=4;break;} //@line 11268 "tcc_bootstrap.c"
 case 4: 
 var $48=$f; //@line 11269 "tcc_bootstrap.c"
 var $49=(($48+2)|0); //@line 11269 "tcc_bootstrap.c"
 var $50=(($49)|0); //@line 11269 "tcc_bootstrap.c"
 $first_file=$50; //@line 11269 "tcc_bootstrap.c"
 label=5;break; //@line 11270 "tcc_bootstrap.c"
 case 5: 
 var $52=$s; //@line 11271 "tcc_bootstrap.c"
 var $53=$f; //@line 11271 "tcc_bootstrap.c"
 var $54=(($53+2)|0); //@line 11271 "tcc_bootstrap.c"
 var $55=(($54)|0); //@line 11271 "tcc_bootstrap.c"
 var $56=_tcc_add_file($52,$55); //@line 11271 "tcc_bootstrap.c"
 var $57=($56|0)<0; //@line 11271 "tcc_bootstrap.c"
 if($57){label=6;break;}else{label=7;break;} //@line 11271 "tcc_bootstrap.c"
 case 6: 
 $ret=1; //@line 11272 "tcc_bootstrap.c"
 label=7;break; //@line 11273 "tcc_bootstrap.c"
 case 7: 
 var $60=$s; //@line 11274 "tcc_bootstrap.c"
 var $61=(($60+724)|0); //@line 11274 "tcc_bootstrap.c"
 HEAP32[(($61)>>2)]=0; //@line 11274 "tcc_bootstrap.c"
 var $62=$s; //@line 11275 "tcc_bootstrap.c"
 var $63=(($62)|0); //@line 11275 "tcc_bootstrap.c"
 HEAP32[(($63)>>2)]=1; //@line 11275 "tcc_bootstrap.c"
 var $64=$n; //@line 11276 "tcc_bootstrap.c"
 var $65=((($64)-(1))|0); //@line 11276 "tcc_bootstrap.c"
 $n=$65; //@line 11276 "tcc_bootstrap.c"
 var $66=($65|0)==0; //@line 11276 "tcc_bootstrap.c"
 if($66){label=10;break;}else{label=8;break;} //@line 11276 "tcc_bootstrap.c"
 case 8: 
 var $68=$ret; //@line 11276 "tcc_bootstrap.c"
 var $69=($68|0)!=0; //@line 11276 "tcc_bootstrap.c"
 if($69){label=10;break;}else{label=9;break;} //@line 11276 "tcc_bootstrap.c"
 case 9: 
 var $71=$s; //@line 11276 "tcc_bootstrap.c"
 var $72=(($71+4)|0); //@line 11276 "tcc_bootstrap.c"
 var $73=HEAP32[(($72)>>2)]; //@line 11276 "tcc_bootstrap.c"
 var $74=($73|0)==4; //@line 11276 "tcc_bootstrap.c"
 if($74){label=10;break;}else{label=11;break;} //@line 11276 "tcc_bootstrap.c"
 case 10: 
 label=12;break; //@line 11277 "tcc_bootstrap.c"
 case 11: 
 label=3;break; //@line 11279 "tcc_bootstrap.c"
 case 12: 
 var $78=$ret; //@line 11280 "tcc_bootstrap.c"
 var $79=0==($78|0); //@line 11280 "tcc_bootstrap.c"
 if($79){label=13;break;}else{label=16;break;} //@line 11280 "tcc_bootstrap.c"
 case 13: 
 var $81=$s; //@line 11281 "tcc_bootstrap.c"
 var $82=$s; //@line 11281 "tcc_bootstrap.c"
 var $83=(($82+728)|0); //@line 11281 "tcc_bootstrap.c"
 var $84=HEAP32[(($83)>>2)]; //@line 11281 "tcc_bootstrap.c"
 var $85=_tcc_output_file($81,$84); //@line 11281 "tcc_bootstrap.c"
 var $86=($85|0)!=0; //@line 11281 "tcc_bootstrap.c"
 if($86){label=14;break;}else{label=15;break;} //@line 11281 "tcc_bootstrap.c"
 case 14: 
 $ret=1; //@line 11282 "tcc_bootstrap.c"
 label=15;break; //@line 11283 "tcc_bootstrap.c"
 case 15: 
 label=16;break; //@line 11284 "tcc_bootstrap.c"
 case 16: 
 var $90=$s; //@line 11285 "tcc_bootstrap.c"
 _tcc_delete($90); //@line 11285 "tcc_bootstrap.c"
 var $91=$ret; //@line 11286 "tcc_bootstrap.c"
 var $92=($91|0)==0; //@line 11286 "tcc_bootstrap.c"
 if($92){label=17;break;}else{label=19;break;} //@line 11286 "tcc_bootstrap.c"
 case 17: 
 var $94=$n; //@line 11286 "tcc_bootstrap.c"
 var $95=($94|0)!=0; //@line 11286 "tcc_bootstrap.c"
 if($95){label=18;break;}else{label=19;break;} //@line 11286 "tcc_bootstrap.c"
 case 18: 
 label=2;break; //@line 11287 "tcc_bootstrap.c"
 case 19: 
 var $98=$t; //@line 11288 "tcc_bootstrap.c"
 var $99=($98|0)!=0; //@line 11288 "tcc_bootstrap.c"
 if($99){label=20;break;}else{label=21;break;} //@line 11288 "tcc_bootstrap.c"
 case 20: 
 label=2;break; //@line 11289 "tcc_bootstrap.c"
 case 21: 
 var $102=$ppfp; //@line 11290 "tcc_bootstrap.c"
 var $103=($102|0)!=0; //@line 11290 "tcc_bootstrap.c"
 if($103){label=22;break;}else{label=24;break;} //@line 11290 "tcc_bootstrap.c"
 case 22: 
 var $105=$ppfp; //@line 11290 "tcc_bootstrap.c"
 var $106=HEAP32[((_stdout)>>2)]; //@line 11290 "tcc_bootstrap.c"
 var $107=($105|0)!=($106|0); //@line 11290 "tcc_bootstrap.c"
 if($107){label=23;break;}else{label=24;break;} //@line 11290 "tcc_bootstrap.c"
 case 23: 
 var $109=$ppfp; //@line 11291 "tcc_bootstrap.c"
 var $110=_fclose($109); //@line 11291 "tcc_bootstrap.c"
 label=24;break; //@line 11291 "tcc_bootstrap.c"
 case 24: 
 var $112=$ret; //@line 11292 "tcc_bootstrap.c"
 STACKTOP=sp;return $112; //@line 11292 "tcc_bootstrap.c"
  default: assert(0, "bad label: " + label);
 }

}
Module["_main"] = _main;

function _dynarray_add($ptab,$nb_ptr,$data){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $nb;
 var $nb_alloc;
 var $pp;
 $1=$ptab;
 $2=$nb_ptr;
 $3=$data;
 var $4=$2; //@line 10743 "tcc_bootstrap.c"
 var $5=HEAP32[(($4)>>2)]; //@line 10743 "tcc_bootstrap.c"
 $nb=$5; //@line 10743 "tcc_bootstrap.c"
 var $6=$1; //@line 10744 "tcc_bootstrap.c"
 var $7=$6; //@line 10744 "tcc_bootstrap.c"
 var $8=HEAP32[(($7)>>2)]; //@line 10744 "tcc_bootstrap.c"
 $pp=$8; //@line 10744 "tcc_bootstrap.c"
 var $9=$nb; //@line 10745 "tcc_bootstrap.c"
 var $10=$nb; //@line 10745 "tcc_bootstrap.c"
 var $11=((($10)-(1))|0); //@line 10745 "tcc_bootstrap.c"
 var $12=$9&$11; //@line 10745 "tcc_bootstrap.c"
 var $13=($12|0)==0; //@line 10745 "tcc_bootstrap.c"
 if($13){label=2;break;}else{label=6;break;} //@line 10745 "tcc_bootstrap.c"
 case 2: 
 var $15=$nb; //@line 10746 "tcc_bootstrap.c"
 var $16=($15|0)!=0; //@line 10746 "tcc_bootstrap.c"
 if($16){label=4;break;}else{label=3;break;} //@line 10746 "tcc_bootstrap.c"
 case 3: 
 $nb_alloc=1; //@line 10747 "tcc_bootstrap.c"
 label=5;break; //@line 10747 "tcc_bootstrap.c"
 case 4: 
 var $19=$nb; //@line 10749 "tcc_bootstrap.c"
 var $20=($19<<1); //@line 10749 "tcc_bootstrap.c"
 $nb_alloc=$20; //@line 10749 "tcc_bootstrap.c"
 label=5;break;
 case 5: 
 var $22=$pp; //@line 10750 "tcc_bootstrap.c"
 var $23=$22; //@line 10750 "tcc_bootstrap.c"
 var $24=$nb_alloc; //@line 10750 "tcc_bootstrap.c"
 var $25=($24<<2); //@line 10750 "tcc_bootstrap.c"
 var $26=_tcc_realloc($23,$25); //@line 10750 "tcc_bootstrap.c"
 var $27=$26; //@line 10750 "tcc_bootstrap.c"
 $pp=$27; //@line 10750 "tcc_bootstrap.c"
 var $28=$pp; //@line 10751 "tcc_bootstrap.c"
 var $29=$1; //@line 10751 "tcc_bootstrap.c"
 var $30=$29; //@line 10751 "tcc_bootstrap.c"
 HEAP32[(($30)>>2)]=$28; //@line 10751 "tcc_bootstrap.c"
 label=6;break; //@line 10752 "tcc_bootstrap.c"
 case 6: 
 var $32=$3; //@line 10753 "tcc_bootstrap.c"
 var $33=$nb; //@line 10753 "tcc_bootstrap.c"
 var $34=((($33)+(1))|0); //@line 10753 "tcc_bootstrap.c"
 $nb=$34; //@line 10753 "tcc_bootstrap.c"
 var $35=$pp; //@line 10753 "tcc_bootstrap.c"
 var $36=(($35+($33<<2))|0); //@line 10753 "tcc_bootstrap.c"
 HEAP32[(($36)>>2)]=$32; //@line 10753 "tcc_bootstrap.c"
 var $37=$nb; //@line 10754 "tcc_bootstrap.c"
 var $38=$2; //@line 10754 "tcc_bootstrap.c"
 HEAP32[(($38)>>2)]=$37; //@line 10754 "tcc_bootstrap.c"
 STACKTOP=sp;return; //@line 10755 "tcc_bootstrap.c"
  default: assert(0, "bad label: " + label);
 }

}


function _tcc_open($s1,$filename){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $fd;
 $2=$s1;
 $3=$filename;
 var $4=$3; //@line 10887 "tcc_bootstrap.c"
 var $5=_open($4,0,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs; //@line 10887 "tcc_bootstrap.c"
 $fd=$5; //@line 10887 "tcc_bootstrap.c"
 var $6=$fd; //@line 10888 "tcc_bootstrap.c"
 var $7=($6|0)<0; //@line 10888 "tcc_bootstrap.c"
 if($7){label=2;break;}else{label=3;break;} //@line 10888 "tcc_bootstrap.c"
 case 2: 
 $1=-1; //@line 10889 "tcc_bootstrap.c"
 label=4;break; //@line 10889 "tcc_bootstrap.c"
 case 3: 
 var $10=$2; //@line 10890 "tcc_bootstrap.c"
 var $11=$3; //@line 10890 "tcc_bootstrap.c"
 _tcc_open_bf($10,$11,0); //@line 10890 "tcc_bootstrap.c"
 var $12=$fd; //@line 10891 "tcc_bootstrap.c"
 var $13=HEAP32[((76648)>>2)]; //@line 10891 "tcc_bootstrap.c"
 var $14=(($13+8)|0); //@line 10891 "tcc_bootstrap.c"
 HEAP32[(($14)>>2)]=$12; //@line 10891 "tcc_bootstrap.c"
 var $15=$fd; //@line 10892 "tcc_bootstrap.c"
 $1=$15; //@line 10892 "tcc_bootstrap.c"
 label=4;break; //@line 10892 "tcc_bootstrap.c"
 case 4: 
 var $17=$1; //@line 10893 "tcc_bootstrap.c"
 STACKTOP=sp;return $17; //@line 10893 "tcc_bootstrap.c"
  default: assert(0, "bad label: " + label);
 }

}


function _cstr_ccat($cstr,$ch){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $size;
 $1=$cstr;
 $2=$ch;
 var $3=$1; //@line 1338 "tcc_bootstrap.c"
 var $4=(($3)|0); //@line 1338 "tcc_bootstrap.c"
 var $5=HEAP32[(($4)>>2)]; //@line 1338 "tcc_bootstrap.c"
 var $6=((($5)+(1))|0); //@line 1338 "tcc_bootstrap.c"
 $size=$6; //@line 1338 "tcc_bootstrap.c"
 var $7=$size; //@line 1339 "tcc_bootstrap.c"
 var $8=$1; //@line 1339 "tcc_bootstrap.c"
 var $9=(($8+8)|0); //@line 1339 "tcc_bootstrap.c"
 var $10=HEAP32[(($9)>>2)]; //@line 1339 "tcc_bootstrap.c"
 var $11=($7|0)>($10|0); //@line 1339 "tcc_bootstrap.c"
 if($11){label=2;break;}else{label=3;break;} //@line 1339 "tcc_bootstrap.c"
 case 2: 
 var $13=$1; //@line 1340 "tcc_bootstrap.c"
 var $14=$size; //@line 1340 "tcc_bootstrap.c"
 _cstr_realloc($13,$14); //@line 1340 "tcc_bootstrap.c"
 label=3;break; //@line 1340 "tcc_bootstrap.c"
 case 3: 
 var $16=$2; //@line 1341 "tcc_bootstrap.c"
 var $17=(($16)&255); //@line 1341 "tcc_bootstrap.c"
 var $18=$size; //@line 1341 "tcc_bootstrap.c"
 var $19=((($18)-(1))|0); //@line 1341 "tcc_bootstrap.c"
 var $20=$1; //@line 1341 "tcc_bootstrap.c"
 var $21=(($20+4)|0); //@line 1341 "tcc_bootstrap.c"
 var $22=HEAP32[(($21)>>2)]; //@line 1341 "tcc_bootstrap.c"
 var $23=(($22+$19)|0); //@line 1341 "tcc_bootstrap.c"
 HEAP8[(($23)>>0)]=$17; //@line 1341 "tcc_bootstrap.c"
 var $24=$size; //@line 1342 "tcc_bootstrap.c"
 var $25=$1; //@line 1342 "tcc_bootstrap.c"
 var $26=(($25)|0); //@line 1342 "tcc_bootstrap.c"
 HEAP32[(($26)>>2)]=$24; //@line 1342 "tcc_bootstrap.c"
 STACKTOP=sp;return; //@line 1343 "tcc_bootstrap.c"
  default: assert(0, "bad label: " + label);
 }

}


function _cstr_free($cstr){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 $1=$cstr;
 var $2=HEAP32[((76704)>>2)]; //@line 1371 "tcc_bootstrap.c"
 var $3=$1; //@line 1371 "tcc_bootstrap.c"
 var $4=(($3+4)|0); //@line 1371 "tcc_bootstrap.c"
 var $5=HEAP32[(($4)>>2)]; //@line 1371 "tcc_bootstrap.c"
 _tal_free_impl($2,$5); //@line 1371 "tcc_bootstrap.c"
 var $6=$1; //@line 1372 "tcc_bootstrap.c"
 _cstr_new($6); //@line 1372 "tcc_bootstrap.c"
 STACKTOP=sp;return; //@line 1373 "tcc_bootstrap.c"
}


function _tal_free_impl($al,$p){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 $1=$al;
 $2=$p;
 var $3=$2; //@line 1256 "tcc_bootstrap.c"
 var $4=($3|0)!=0; //@line 1256 "tcc_bootstrap.c"
 if($4){label=3;break;}else{label=2;break;} //@line 1256 "tcc_bootstrap.c"
 case 2: 
 label=13;break; //@line 1257 "tcc_bootstrap.c"
 case 3: 
 label=4;break; //@line 1257 "tcc_bootstrap.c"
 case 4: 
 var $8=$1; //@line 1259 "tcc_bootstrap.c"
 var $9=(($8+8)|0); //@line 1259 "tcc_bootstrap.c"
 var $10=HEAP32[(($9)>>2)]; //@line 1259 "tcc_bootstrap.c"
 var $11=$2; //@line 1259 "tcc_bootstrap.c"
 var $12=($10>>>0)<=($11>>>0); //@line 1259 "tcc_bootstrap.c"
 if($12){label=5;break;}else{label=9;break;} //@line 1259 "tcc_bootstrap.c"
 case 5: 
 var $14=$2; //@line 1259 "tcc_bootstrap.c"
 var $15=$1; //@line 1259 "tcc_bootstrap.c"
 var $16=(($15+8)|0); //@line 1259 "tcc_bootstrap.c"
 var $17=HEAP32[(($16)>>2)]; //@line 1259 "tcc_bootstrap.c"
 var $18=$1; //@line 1259 "tcc_bootstrap.c"
 var $19=(($18+4)|0); //@line 1259 "tcc_bootstrap.c"
 var $20=HEAP32[(($19)>>2)]; //@line 1259 "tcc_bootstrap.c"
 var $21=(($17+$20)|0); //@line 1259 "tcc_bootstrap.c"
 var $22=($14>>>0)<($21>>>0); //@line 1259 "tcc_bootstrap.c"
 if($22){label=6;break;}else{label=9;break;} //@line 1259 "tcc_bootstrap.c"
 case 6: 
 var $24=$1; //@line 1260 "tcc_bootstrap.c"
 var $25=(($24+16)|0); //@line 1260 "tcc_bootstrap.c"
 var $26=HEAP32[(($25)>>2)]; //@line 1260 "tcc_bootstrap.c"
 var $27=((($26)-(1))|0); //@line 1260 "tcc_bootstrap.c"
 HEAP32[(($25)>>2)]=$27; //@line 1260 "tcc_bootstrap.c"
 var $28=$1; //@line 1261 "tcc_bootstrap.c"
 var $29=(($28+16)|0); //@line 1261 "tcc_bootstrap.c"
 var $30=HEAP32[(($29)>>2)]; //@line 1261 "tcc_bootstrap.c"
 var $31=($30|0)!=0; //@line 1261 "tcc_bootstrap.c"
 if($31){label=8;break;}else{label=7;break;} //@line 1261 "tcc_bootstrap.c"
 case 7: 
 var $33=$1; //@line 1262 "tcc_bootstrap.c"
 var $34=(($33+8)|0); //@line 1262 "tcc_bootstrap.c"
 var $35=HEAP32[(($34)>>2)]; //@line 1262 "tcc_bootstrap.c"
 var $36=$1; //@line 1262 "tcc_bootstrap.c"
 var $37=(($36+12)|0); //@line 1262 "tcc_bootstrap.c"
 HEAP32[(($37)>>2)]=$35; //@line 1262 "tcc_bootstrap.c"
 label=8;break; //@line 1262 "tcc_bootstrap.c"
 case 8: 
 label=13;break; //@line 1263 "tcc_bootstrap.c"
 case 9: 
 var $40=$1; //@line 1263 "tcc_bootstrap.c"
 var $41=(($40+20)|0); //@line 1263 "tcc_bootstrap.c"
 var $42=HEAP32[(($41)>>2)]; //@line 1263 "tcc_bootstrap.c"
 var $43=($42|0)!=0; //@line 1263 "tcc_bootstrap.c"
 if($43){label=10;break;}else{label=11;break;} //@line 1263 "tcc_bootstrap.c"
 case 10: 
 var $45=$1; //@line 1264 "tcc_bootstrap.c"
 var $46=(($45+20)|0); //@line 1264 "tcc_bootstrap.c"
 var $47=HEAP32[(($46)>>2)]; //@line 1264 "tcc_bootstrap.c"
 $1=$47; //@line 1264 "tcc_bootstrap.c"
 label=4;break; //@line 1265 "tcc_bootstrap.c"
 case 11: 
 var $49=$2; //@line 1268 "tcc_bootstrap.c"
 _tcc_free($49); //@line 1268 "tcc_bootstrap.c"
 label=12;break;
 case 12: 
 label=13;break;
 case 13: 
 STACKTOP=sp;return; //@line 1268 "tcc_bootstrap.c"
  default: assert(0, "bad label: " + label);
 }

}


function _cstr_realloc($cstr,$new_size){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $size;
 $1=$cstr;
 $2=$new_size;
 var $3=$1; //@line 1327 "tcc_bootstrap.c"
 var $4=(($3+8)|0); //@line 1327 "tcc_bootstrap.c"
 var $5=HEAP32[(($4)>>2)]; //@line 1327 "tcc_bootstrap.c"
 $size=$5; //@line 1327 "tcc_bootstrap.c"
 var $6=$size; //@line 1328 "tcc_bootstrap.c"
 var $7=($6|0)<8; //@line 1328 "tcc_bootstrap.c"
 if($7){label=2;break;}else{label=3;break;} //@line 1328 "tcc_bootstrap.c"
 case 2: 
 $size=8; //@line 1329 "tcc_bootstrap.c"
 label=3;break; //@line 1329 "tcc_bootstrap.c"
 case 3: 
 label=4;break; //@line 1330 "tcc_bootstrap.c"
 case 4: 
 var $11=$size; //@line 1330 "tcc_bootstrap.c"
 var $12=$2; //@line 1330 "tcc_bootstrap.c"
 var $13=($11|0)<($12|0); //@line 1330 "tcc_bootstrap.c"
 if($13){label=5;break;}else{label=6;break;} //@line 1330 "tcc_bootstrap.c"
 case 5: 
 var $15=$size; //@line 1331 "tcc_bootstrap.c"
 var $16=($15<<1); //@line 1331 "tcc_bootstrap.c"
 $size=$16; //@line 1331 "tcc_bootstrap.c"
 label=4;break; //@line 1331 "tcc_bootstrap.c"
 case 6: 
 var $18=$1; //@line 1332 "tcc_bootstrap.c"
 var $19=(($18+4)|0); //@line 1332 "tcc_bootstrap.c"
 var $20=HEAP32[(($19)>>2)]; //@line 1332 "tcc_bootstrap.c"
 var $21=$size; //@line 1332 "tcc_bootstrap.c"
 var $22=_tal_realloc_impl(76704,$20,$21); //@line 1332 "tcc_bootstrap.c"
 var $23=$1; //@line 1332 "tcc_bootstrap.c"
 var $24=(($23+4)|0); //@line 1332 "tcc_bootstrap.c"
 HEAP32[(($24)>>2)]=$22; //@line 1332 "tcc_bootstrap.c"
 var $25=$size; //@line 1333 "tcc_bootstrap.c"
 var $26=$1; //@line 1333 "tcc_bootstrap.c"
 var $27=(($26+8)|0); //@line 1333 "tcc_bootstrap.c"
 HEAP32[(($27)>>2)]=$25; //@line 1333 "tcc_bootstrap.c"
 STACKTOP=sp;return; //@line 1334 "tcc_bootstrap.c"
  default: assert(0, "bad label: " + label);
 }

}


function _tal_realloc_impl($pal,$p,$size){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $header;
 var $ret;
 var $is_own;
 var $adj_size;
 var $al;
 var $bottom;
 var $next;
 $2=$pal;
 $3=$p;
 $4=$size;
 var $5=$4; //@line 1276 "tcc_bootstrap.c"
 var $6=((($5)+(3))|0); //@line 1276 "tcc_bootstrap.c"
 var $7=$6&-4; //@line 1276 "tcc_bootstrap.c"
 $adj_size=$7; //@line 1276 "tcc_bootstrap.c"
 var $8=$2; //@line 1277 "tcc_bootstrap.c"
 var $9=HEAP32[(($8)>>2)]; //@line 1277 "tcc_bootstrap.c"
 $al=$9; //@line 1277 "tcc_bootstrap.c"
 label=2;break; //@line 1277 "tcc_bootstrap.c"
 case 2: 
 var $11=$al; //@line 1279 "tcc_bootstrap.c"
 var $12=(($11+8)|0); //@line 1279 "tcc_bootstrap.c"
 var $13=HEAP32[(($12)>>2)]; //@line 1279 "tcc_bootstrap.c"
 var $14=$3; //@line 1279 "tcc_bootstrap.c"
 var $15=($13>>>0)<=($14>>>0); //@line 1279 "tcc_bootstrap.c"
 if($15){label=3;break;}else{var $27=0;label=4;break;} //@line 1279 "tcc_bootstrap.c"
 case 3: 
 var $17=$3; //@line 1279 "tcc_bootstrap.c"
 var $18=$al; //@line 1279 "tcc_bootstrap.c"
 var $19=(($18+8)|0); //@line 1279 "tcc_bootstrap.c"
 var $20=HEAP32[(($19)>>2)]; //@line 1279 "tcc_bootstrap.c"
 var $21=$al; //@line 1279 "tcc_bootstrap.c"
 var $22=(($21+4)|0); //@line 1279 "tcc_bootstrap.c"
 var $23=HEAP32[(($22)>>2)]; //@line 1279 "tcc_bootstrap.c"
 var $24=(($20+$23)|0); //@line 1279 "tcc_bootstrap.c"
 var $25=($17>>>0)<($24>>>0); //@line 1279 "tcc_bootstrap.c"
 var $27=$25;label=4;break;
 case 4: 
 var $27;
 var $28=($27&1);
 $is_own=$28;
 var $29=$3; //@line 1280 "tcc_bootstrap.c"
 var $30=($29|0)!=0; //@line 1280 "tcc_bootstrap.c"
 if($30){label=5;break;}else{label=6;break;} //@line 1280 "tcc_bootstrap.c"
 case 5: 
 var $32=$is_own; //@line 1280 "tcc_bootstrap.c"
 var $33=($32|0)!=0; //@line 1280 "tcc_bootstrap.c"
 if($33){label=6;break;}else{label=22;break;} //@line 1280 "tcc_bootstrap.c"
 case 6: 
 var $35=$4; //@line 1280 "tcc_bootstrap.c"
 var $36=$al; //@line 1280 "tcc_bootstrap.c"
 var $37=(($36)|0); //@line 1280 "tcc_bootstrap.c"
 var $38=HEAP32[(($37)>>2)]; //@line 1280 "tcc_bootstrap.c"
 var $39=($35>>>0)<=($38>>>0); //@line 1280 "tcc_bootstrap.c"
 if($39){label=7;break;}else{label=22;break;} //@line 1280 "tcc_bootstrap.c"
 case 7: 
 var $41=$al; //@line 1281 "tcc_bootstrap.c"
 var $42=(($41+12)|0); //@line 1281 "tcc_bootstrap.c"
 var $43=HEAP32[(($42)>>2)]; //@line 1281 "tcc_bootstrap.c"
 var $44=$adj_size; //@line 1281 "tcc_bootstrap.c"
 var $45=(($43+$44)|0); //@line 1281 "tcc_bootstrap.c"
 var $46=(($45+4)|0); //@line 1281 "tcc_bootstrap.c"
 var $47=$al; //@line 1281 "tcc_bootstrap.c"
 var $48=(($47+8)|0); //@line 1281 "tcc_bootstrap.c"
 var $49=HEAP32[(($48)>>2)]; //@line 1281 "tcc_bootstrap.c"
 var $50=$al; //@line 1281 "tcc_bootstrap.c"
 var $51=(($50+4)|0); //@line 1281 "tcc_bootstrap.c"
 var $52=HEAP32[(($51)>>2)]; //@line 1281 "tcc_bootstrap.c"
 var $53=(($49+$52)|0); //@line 1281 "tcc_bootstrap.c"
 var $54=($46>>>0)<($53>>>0); //@line 1281 "tcc_bootstrap.c"
 if($54){label=8;break;}else{label=12;break;} //@line 1281 "tcc_bootstrap.c"
 case 8: 
 var $56=$al; //@line 1282 "tcc_bootstrap.c"
 var $57=(($56+12)|0); //@line 1282 "tcc_bootstrap.c"
 var $58=HEAP32[(($57)>>2)]; //@line 1282 "tcc_bootstrap.c"
 var $59=$58; //@line 1282 "tcc_bootstrap.c"
 $header=$59; //@line 1282 "tcc_bootstrap.c"
 var $60=$adj_size; //@line 1283 "tcc_bootstrap.c"
 var $61=$header; //@line 1283 "tcc_bootstrap.c"
 var $62=(($61)|0); //@line 1283 "tcc_bootstrap.c"
 HEAP32[(($62)>>2)]=$60; //@line 1283 "tcc_bootstrap.c"
 var $63=$al; //@line 1284 "tcc_bootstrap.c"
 var $64=(($63+12)|0); //@line 1284 "tcc_bootstrap.c"
 var $65=HEAP32[(($64)>>2)]; //@line 1284 "tcc_bootstrap.c"
 var $66=(($65+4)|0); //@line 1284 "tcc_bootstrap.c"
 $ret=$66; //@line 1284 "tcc_bootstrap.c"
 var $67=$adj_size; //@line 1285 "tcc_bootstrap.c"
 var $68=((($67)+(4))|0); //@line 1285 "tcc_bootstrap.c"
 var $69=$al; //@line 1285 "tcc_bootstrap.c"
 var $70=(($69+12)|0); //@line 1285 "tcc_bootstrap.c"
 var $71=HEAP32[(($70)>>2)]; //@line 1285 "tcc_bootstrap.c"
 var $72=(($71+$68)|0); //@line 1285 "tcc_bootstrap.c"
 HEAP32[(($70)>>2)]=$72; //@line 1285 "tcc_bootstrap.c"
 var $73=$is_own; //@line 1286 "tcc_bootstrap.c"
 var $74=($73|0)!=0; //@line 1286 "tcc_bootstrap.c"
 if($74){label=9;break;}else{label=10;break;} //@line 1286 "tcc_bootstrap.c"
 case 9: 
 var $76=$3; //@line 1287 "tcc_bootstrap.c"
 var $77=$76; //@line 1287 "tcc_bootstrap.c"
 var $78=((($77)-(4))|0); //@line 1287 "tcc_bootstrap.c"
 $header=$78; //@line 1287 "tcc_bootstrap.c"
 var $79=$ret; //@line 1288 "tcc_bootstrap.c"
 var $80=$3; //@line 1288 "tcc_bootstrap.c"
 var $81=$header; //@line 1288 "tcc_bootstrap.c"
 var $82=(($81)|0); //@line 1288 "tcc_bootstrap.c"
 var $83=HEAP32[(($82)>>2)]; //@line 1288 "tcc_bootstrap.c"
 assert($83 % 1 === 0);(_memcpy($79, $80, $83)|0); //@line 1288 "tcc_bootstrap.c"
 label=11;break; //@line 1289 "tcc_bootstrap.c"
 case 10: 
 var $85=$al; //@line 1290 "tcc_bootstrap.c"
 var $86=(($85+16)|0); //@line 1290 "tcc_bootstrap.c"
 var $87=HEAP32[(($86)>>2)]; //@line 1290 "tcc_bootstrap.c"
 var $88=((($87)+(1))|0); //@line 1290 "tcc_bootstrap.c"
 HEAP32[(($86)>>2)]=$88; //@line 1290 "tcc_bootstrap.c"
 label=11;break;
 case 11: 
 var $90=$ret; //@line 1292 "tcc_bootstrap.c"
 $1=$90; //@line 1292 "tcc_bootstrap.c"
 label=29;break; //@line 1292 "tcc_bootstrap.c"
 case 12: 
 var $92=$is_own; //@line 1293 "tcc_bootstrap.c"
 var $93=($92|0)!=0; //@line 1293 "tcc_bootstrap.c"
 if($93){label=13;break;}else{label=14;break;} //@line 1293 "tcc_bootstrap.c"
 case 13: 
 var $95=$al; //@line 1294 "tcc_bootstrap.c"
 var $96=(($95+16)|0); //@line 1294 "tcc_bootstrap.c"
 var $97=HEAP32[(($96)>>2)]; //@line 1294 "tcc_bootstrap.c"
 var $98=((($97)-(1))|0); //@line 1294 "tcc_bootstrap.c"
 HEAP32[(($96)>>2)]=$98; //@line 1294 "tcc_bootstrap.c"
 var $99=$2; //@line 1295 "tcc_bootstrap.c"
 var $100=$4; //@line 1295 "tcc_bootstrap.c"
 var $101=_tal_realloc_impl($99,0,$100); //@line 1295 "tcc_bootstrap.c"
 $ret=$101; //@line 1295 "tcc_bootstrap.c"
 var $102=$3; //@line 1296 "tcc_bootstrap.c"
 var $103=$102; //@line 1296 "tcc_bootstrap.c"
 var $104=((($103)-(4))|0); //@line 1296 "tcc_bootstrap.c"
 $header=$104; //@line 1296 "tcc_bootstrap.c"
 var $105=$ret; //@line 1297 "tcc_bootstrap.c"
 var $106=$3; //@line 1297 "tcc_bootstrap.c"
 var $107=$header; //@line 1297 "tcc_bootstrap.c"
 var $108=(($107)|0); //@line 1297 "tcc_bootstrap.c"
 var $109=HEAP32[(($108)>>2)]; //@line 1297 "tcc_bootstrap.c"
 assert($109 % 1 === 0);(_memcpy($105, $106, $109)|0); //@line 1297 "tcc_bootstrap.c"
 var $110=$ret; //@line 1298 "tcc_bootstrap.c"
 $1=$110; //@line 1298 "tcc_bootstrap.c"
 label=29;break; //@line 1298 "tcc_bootstrap.c"
 case 14: 
 label=15;break;
 case 15: 
 var $113=$al; //@line 1300 "tcc_bootstrap.c"
 var $114=(($113+20)|0); //@line 1300 "tcc_bootstrap.c"
 var $115=HEAP32[(($114)>>2)]; //@line 1300 "tcc_bootstrap.c"
 var $116=($115|0)!=0; //@line 1300 "tcc_bootstrap.c"
 if($116){label=16;break;}else{label=17;break;} //@line 1300 "tcc_bootstrap.c"
 case 16: 
 var $118=$al; //@line 1301 "tcc_bootstrap.c"
 var $119=(($118+20)|0); //@line 1301 "tcc_bootstrap.c"
 var $120=HEAP32[(($119)>>2)]; //@line 1301 "tcc_bootstrap.c"
 $al=$120; //@line 1301 "tcc_bootstrap.c"
 label=21;break; //@line 1302 "tcc_bootstrap.c"
 case 17: 
 var $122=$al; //@line 1303 "tcc_bootstrap.c"
 $bottom=$122; //@line 1303 "tcc_bootstrap.c"
 var $123=$al; //@line 1303 "tcc_bootstrap.c"
 var $124=(($123+24)|0); //@line 1303 "tcc_bootstrap.c"
 var $125=HEAP32[(($124)>>2)]; //@line 1303 "tcc_bootstrap.c"
 var $126=($125|0)!=0; //@line 1303 "tcc_bootstrap.c"
 if($126){label=18;break;}else{label=19;break;} //@line 1303 "tcc_bootstrap.c"
 case 18: 
 var $128=$al; //@line 1303 "tcc_bootstrap.c"
 var $129=(($128+24)|0); //@line 1303 "tcc_bootstrap.c"
 var $130=HEAP32[(($129)>>2)]; //@line 1303 "tcc_bootstrap.c"
 var $134=$130;label=20;break; //@line 1303 "tcc_bootstrap.c"
 case 19: 
 var $132=$al; //@line 1303 "tcc_bootstrap.c"
 var $134=$132;label=20;break; //@line 1303 "tcc_bootstrap.c"
 case 20: 
 var $134; //@line 1303 "tcc_bootstrap.c"
 $next=$134; //@line 1303 "tcc_bootstrap.c"
 var $135=$2; //@line 1305 "tcc_bootstrap.c"
 var $136=$next; //@line 1305 "tcc_bootstrap.c"
 var $137=(($136)|0); //@line 1305 "tcc_bootstrap.c"
 var $138=HEAP32[(($137)>>2)]; //@line 1305 "tcc_bootstrap.c"
 var $139=$next; //@line 1305 "tcc_bootstrap.c"
 var $140=(($139+4)|0); //@line 1305 "tcc_bootstrap.c"
 var $141=HEAP32[(($140)>>2)]; //@line 1305 "tcc_bootstrap.c"
 var $142=($141<<1); //@line 1305 "tcc_bootstrap.c"
 var $143=_tal_new($135,$138,$142); //@line 1305 "tcc_bootstrap.c"
 $al=$143; //@line 1305 "tcc_bootstrap.c"
 var $144=$next; //@line 1306 "tcc_bootstrap.c"
 var $145=$al; //@line 1306 "tcc_bootstrap.c"
 var $146=(($145+20)|0); //@line 1306 "tcc_bootstrap.c"
 HEAP32[(($146)>>2)]=$144; //@line 1306 "tcc_bootstrap.c"
 var $147=$al; //@line 1307 "tcc_bootstrap.c"
 var $148=$bottom; //@line 1307 "tcc_bootstrap.c"
 var $149=(($148+24)|0); //@line 1307 "tcc_bootstrap.c"
 HEAP32[(($149)>>2)]=$147; //@line 1307 "tcc_bootstrap.c"
 label=21;break;
 case 21: 
 label=2;break; //@line 1309 "tcc_bootstrap.c"
 case 22: 
 var $152=$is_own; //@line 1311 "tcc_bootstrap.c"
 var $153=($152|0)!=0; //@line 1311 "tcc_bootstrap.c"
 if($153){label=23;break;}else{label=24;break;} //@line 1311 "tcc_bootstrap.c"
 case 23: 
 var $155=$al; //@line 1312 "tcc_bootstrap.c"
 var $156=(($155+16)|0); //@line 1312 "tcc_bootstrap.c"
 var $157=HEAP32[(($156)>>2)]; //@line 1312 "tcc_bootstrap.c"
 var $158=((($157)-(1))|0); //@line 1312 "tcc_bootstrap.c"
 HEAP32[(($156)>>2)]=$158; //@line 1312 "tcc_bootstrap.c"
 var $159=$4; //@line 1313 "tcc_bootstrap.c"
 var $160=_tcc_malloc($159); //@line 1313 "tcc_bootstrap.c"
 $ret=$160; //@line 1313 "tcc_bootstrap.c"
 var $161=$3; //@line 1314 "tcc_bootstrap.c"
 var $162=$161; //@line 1314 "tcc_bootstrap.c"
 var $163=((($162)-(4))|0); //@line 1314 "tcc_bootstrap.c"
 $header=$163; //@line 1314 "tcc_bootstrap.c"
 var $164=$ret; //@line 1315 "tcc_bootstrap.c"
 var $165=$3; //@line 1315 "tcc_bootstrap.c"
 var $166=$header; //@line 1315 "tcc_bootstrap.c"
 var $167=(($166)|0); //@line 1315 "tcc_bootstrap.c"
 var $168=HEAP32[(($167)>>2)]; //@line 1315 "tcc_bootstrap.c"
 assert($168 % 1 === 0);(_memcpy($164, $165, $168)|0); //@line 1315 "tcc_bootstrap.c"
 label=28;break; //@line 1316 "tcc_bootstrap.c"
 case 24: 
 var $170=$al; //@line 1316 "tcc_bootstrap.c"
 var $171=(($170+20)|0); //@line 1316 "tcc_bootstrap.c"
 var $172=HEAP32[(($171)>>2)]; //@line 1316 "tcc_bootstrap.c"
 var $173=($172|0)!=0; //@line 1316 "tcc_bootstrap.c"
 if($173){label=25;break;}else{label=26;break;} //@line 1316 "tcc_bootstrap.c"
 case 25: 
 var $175=$al; //@line 1317 "tcc_bootstrap.c"
 var $176=(($175+20)|0); //@line 1317 "tcc_bootstrap.c"
 var $177=HEAP32[(($176)>>2)]; //@line 1317 "tcc_bootstrap.c"
 $al=$177; //@line 1317 "tcc_bootstrap.c"
 label=2;break; //@line 1318 "tcc_bootstrap.c"
 case 26: 
 var $179=$3; //@line 1320 "tcc_bootstrap.c"
 var $180=$4; //@line 1320 "tcc_bootstrap.c"
 var $181=_tcc_realloc($179,$180); //@line 1320 "tcc_bootstrap.c"
 $ret=$181; //@line 1320 "tcc_bootstrap.c"
 label=27;break;
 case 27: 
 label=28;break;
 case 28: 
 var $184=$ret; //@line 1321 "tcc_bootstrap.c"
 $1=$184; //@line 1321 "tcc_bootstrap.c"
 label=29;break; //@line 1321 "tcc_bootstrap.c"
 case 29: 
 var $186=$1; //@line 1322 "tcc_bootstrap.c"
 STACKTOP=sp;return $186; //@line 1322 "tcc_bootstrap.c"
  default: assert(0, "bad label: " + label);
 }

}


function _tal_new($pal,$limit,$size){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $al;
 $1=$pal;
 $2=$limit;
 $3=$size;
 var $4=_tcc_mallocz(28); //@line 1233 "tcc_bootstrap.c"
 var $5=$4; //@line 1233 "tcc_bootstrap.c"
 $al=$5; //@line 1233 "tcc_bootstrap.c"
 var $6=$3; //@line 1234 "tcc_bootstrap.c"
 var $7=_tcc_malloc($6); //@line 1234 "tcc_bootstrap.c"
 var $8=$al; //@line 1234 "tcc_bootstrap.c"
 var $9=(($8+8)|0); //@line 1234 "tcc_bootstrap.c"
 HEAP32[(($9)>>2)]=$7; //@line 1234 "tcc_bootstrap.c"
 var $10=$al; //@line 1234 "tcc_bootstrap.c"
 var $11=(($10+12)|0); //@line 1234 "tcc_bootstrap.c"
 HEAP32[(($11)>>2)]=$7; //@line 1234 "tcc_bootstrap.c"
 var $12=$2; //@line 1235 "tcc_bootstrap.c"
 var $13=$al; //@line 1235 "tcc_bootstrap.c"
 var $14=(($13)|0); //@line 1235 "tcc_bootstrap.c"
 HEAP32[(($14)>>2)]=$12; //@line 1235 "tcc_bootstrap.c"
 var $15=$3; //@line 1236 "tcc_bootstrap.c"
 var $16=$al; //@line 1236 "tcc_bootstrap.c"
 var $17=(($16+4)|0); //@line 1236 "tcc_bootstrap.c"
 HEAP32[(($17)>>2)]=$15; //@line 1236 "tcc_bootstrap.c"
 var $18=$1; //@line 1237 "tcc_bootstrap.c"
 var $19=($18|0)!=0; //@line 1237 "tcc_bootstrap.c"
 if($19){label=2;break;}else{label=3;break;} //@line 1237 "tcc_bootstrap.c"
 case 2: 
 var $21=$al; //@line 1237 "tcc_bootstrap.c"
 var $22=$1; //@line 1237 "tcc_bootstrap.c"
 HEAP32[(($22)>>2)]=$21; //@line 1237 "tcc_bootstrap.c"
 label=3;break; //@line 1237 "tcc_bootstrap.c"
 case 3: 
 var $24=$al; //@line 1238 "tcc_bootstrap.c"
 STACKTOP=sp;return $24; //@line 1238 "tcc_bootstrap.c"
  default: assert(0, "bad label: " + label);
 }

}


function _free_section($s){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 $1=$s;
 var $2=$1; //@line 9245 "tcc_bootstrap.c"
 var $3=(($2+4)|0); //@line 9245 "tcc_bootstrap.c"
 var $4=HEAP32[(($3)>>2)]; //@line 9245 "tcc_bootstrap.c"
 _tcc_free($4); //@line 9245 "tcc_bootstrap.c"
 STACKTOP=sp;return; //@line 9246 "tcc_bootstrap.c"
}


function _define_find($v){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 $2=$v;
 var $3=$2; //@line 2149 "tcc_bootstrap.c"
 var $4=((($3)-(256))|0); //@line 2149 "tcc_bootstrap.c"
 $2=$4; //@line 2149 "tcc_bootstrap.c"
 var $5=$2; //@line 2150 "tcc_bootstrap.c"
 var $6=HEAP32[((10456)>>2)]; //@line 2150 "tcc_bootstrap.c"
 var $7=((($6)-(256))|0); //@line 2150 "tcc_bootstrap.c"
 var $8=($5>>>0)>=($7>>>0); //@line 2150 "tcc_bootstrap.c"
 if($8){label=2;break;}else{label=3;break;} //@line 2150 "tcc_bootstrap.c"
 case 2: 
 $1=0; //@line 2151 "tcc_bootstrap.c"
 label=4;break; //@line 2151 "tcc_bootstrap.c"
 case 3: 
 var $11=$2; //@line 2152 "tcc_bootstrap.c"
 var $12=HEAP32[((10496)>>2)]; //@line 2152 "tcc_bootstrap.c"
 var $13=(($12+($11<<2))|0); //@line 2152 "tcc_bootstrap.c"
 var $14=HEAP32[(($13)>>2)]; //@line 2152 "tcc_bootstrap.c"
 var $15=(($14+4)|0); //@line 2152 "tcc_bootstrap.c"
 var $16=HEAP32[(($15)>>2)]; //@line 2152 "tcc_bootstrap.c"
 $1=$16; //@line 2152 "tcc_bootstrap.c"
 label=4;break; //@line 2152 "tcc_bootstrap.c"
 case 4: 
 var $18=$1; //@line 2153 "tcc_bootstrap.c"
 STACKTOP=sp;return $18; //@line 2153 "tcc_bootstrap.c"
  default: assert(0, "bad label: " + label);
 }

}


function _sym_push2($ps,$v,$t,$c){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 var $2;
 var $3;
 var $4;
 var $s;
 $1=$ps;
 $2=$v;
 $3=$t;
 $4=$c;
 var $5=_sym_malloc(); //@line 4284 "tcc_bootstrap.c"
 $s=$5; //@line 4284 "tcc_bootstrap.c"
 var $6=$s; //@line 4285 "tcc_bootstrap.c"
 var $7=$6; //@line 4285 "tcc_bootstrap.c"
 HEAP32[(($7)>>2)]=0; HEAP32[((($7)+(4))>>2)]=0; HEAP32[((($7)+(8))>>2)]=0; HEAP32[((($7)+(12))>>2)]=0; HEAP32[((($7)+(16))>>2)]=0; HEAP32[((($7)+(20))>>2)]=0; HEAP32[((($7)+(24))>>2)]=0; HEAP32[((($7)+(28))>>2)]=0; HEAP32[((($7)+(32))>>2)]=0; HEAP32[((($7)+(36))>>2)]=0; //@line 4285 "tcc_bootstrap.c"
 var $8=$2; //@line 4286 "tcc_bootstrap.c"
 var $9=$s; //@line 4286 "tcc_bootstrap.c"
 var $10=(($9)|0); //@line 4286 "tcc_bootstrap.c"
 HEAP32[(($10)>>2)]=$8; //@line 4286 "tcc_bootstrap.c"
 var $11=$3; //@line 4287 "tcc_bootstrap.c"
 var $12=$s; //@line 4287 "tcc_bootstrap.c"
 var $13=(($12+16)|0); //@line 4287 "tcc_bootstrap.c"
 var $14=(($13)|0); //@line 4287 "tcc_bootstrap.c"
 HEAP32[(($14)>>2)]=$11; //@line 4287 "tcc_bootstrap.c"
 var $15=$4; //@line 4288 "tcc_bootstrap.c"
 var $16=$s; //@line 4288 "tcc_bootstrap.c"
 var $17=(($16+8)|0); //@line 4288 "tcc_bootstrap.c"
 var $18=$17; //@line 4288 "tcc_bootstrap.c"
 var $19=(($18)|0); //@line 4288 "tcc_bootstrap.c"
 HEAP32[(($19)>>2)]=$15; //@line 4288 "tcc_bootstrap.c"
 var $20=$1; //@line 4289 "tcc_bootstrap.c"
 var $21=HEAP32[(($20)>>2)]; //@line 4289 "tcc_bootstrap.c"
 var $22=$s; //@line 4289 "tcc_bootstrap.c"
 var $23=(($22+28)|0); //@line 4289 "tcc_bootstrap.c"
 HEAP32[(($23)>>2)]=$21; //@line 4289 "tcc_bootstrap.c"
 var $24=$s; //@line 4290 "tcc_bootstrap.c"
 var $25=$1; //@line 4290 "tcc_bootstrap.c"
 HEAP32[(($25)>>2)]=$24; //@line 4290 "tcc_bootstrap.c"
 var $26=$s; //@line 4291 "tcc_bootstrap.c"
 STACKTOP=sp;return $26; //@line 4291 "tcc_bootstrap.c"
}


function _macro_is_equal($a,$b){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+40)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2=sp;
 var $3=(sp)+(8);
 var $cv=(sp)+(16);
 var $t=(sp)+(32);
 HEAP32[(($2)>>2)]=$a;
 HEAP32[(($3)>>2)]=$b;
 var $4=HEAP32[(($2)>>2)]; //@line 2118 "tcc_bootstrap.c"
 var $5=($4|0)!=0; //@line 2118 "tcc_bootstrap.c"
 if($5){label=2;break;}else{label=3;break;} //@line 2118 "tcc_bootstrap.c"
 case 2: 
 var $7=HEAP32[(($3)>>2)]; //@line 2118 "tcc_bootstrap.c"
 var $8=($7|0)!=0; //@line 2118 "tcc_bootstrap.c"
 if($8){label=4;break;}else{label=3;break;} //@line 2118 "tcc_bootstrap.c"
 case 3: 
 $1=1; //@line 2119 "tcc_bootstrap.c"
 label=14;break; //@line 2119 "tcc_bootstrap.c"
 case 4: 
 label=5;break; //@line 2120 "tcc_bootstrap.c"
 case 5: 
 var $12=HEAP32[(($2)>>2)]; //@line 2120 "tcc_bootstrap.c"
 var $13=HEAP32[(($12)>>2)]; //@line 2120 "tcc_bootstrap.c"
 var $14=($13|0)!=0; //@line 2120 "tcc_bootstrap.c"
 if($14){label=6;break;}else{var $20=0;label=7;break;} //@line 2120 "tcc_bootstrap.c"
 case 6: 
 var $16=HEAP32[(($3)>>2)]; //@line 2120 "tcc_bootstrap.c"
 var $17=HEAP32[(($16)>>2)]; //@line 2120 "tcc_bootstrap.c"
 var $18=($17|0)!=0; //@line 2120 "tcc_bootstrap.c"
 var $20=$18;label=7;break;
 case 7: 
 var $20;
 if($20){label=8;break;}else{label=11;break;}
 case 8: 
 _cstr_reset(10688); //@line 2121 "tcc_bootstrap.c"
 _TOK_GET($t,$2,$cv); //@line 2122 "tcc_bootstrap.c"
 var $22=HEAP32[(($t)>>2)]; //@line 2123 "tcc_bootstrap.c"
 var $23=_get_tok_str($22,$cv); //@line 2123 "tcc_bootstrap.c"
 _cstr_cat(10688,$23,0); //@line 2123 "tcc_bootstrap.c"
 _TOK_GET($t,$3,$cv); //@line 2124 "tcc_bootstrap.c"
 var $24=HEAP32[((10692)>>2)]; //@line 2125 "tcc_bootstrap.c"
 var $25=HEAP32[(($t)>>2)]; //@line 2125 "tcc_bootstrap.c"
 var $26=_get_tok_str($25,$cv); //@line 2125 "tcc_bootstrap.c"
 var $27=_strcmp($24,$26); //@line 2125 "tcc_bootstrap.c"
 var $28=($27|0)!=0; //@line 2125 "tcc_bootstrap.c"
 if($28){label=9;break;}else{label=10;break;} //@line 2125 "tcc_bootstrap.c"
 case 9: 
 $1=0; //@line 2126 "tcc_bootstrap.c"
 label=14;break; //@line 2126 "tcc_bootstrap.c"
 case 10: 
 label=5;break; //@line 2127 "tcc_bootstrap.c"
 case 11: 
 var $32=HEAP32[(($2)>>2)]; //@line 2128 "tcc_bootstrap.c"
 var $33=HEAP32[(($32)>>2)]; //@line 2128 "tcc_bootstrap.c"
 var $34=($33|0)!=0; //@line 2128 "tcc_bootstrap.c"
 if($34){var $40=1;label=13;break;}else{label=12;break;} //@line 2128 "tcc_bootstrap.c"
 case 12: 
 var $36=HEAP32[(($3)>>2)]; //@line 2128 "tcc_bootstrap.c"
 var $37=HEAP32[(($36)>>2)]; //@line 2128 "tcc_bootstrap.c"
 var $38=($37|0)!=0; //@line 2128 "tcc_bootstrap.c"
 var $40=$38;label=13;break; //@line 2128 "tcc_bootstrap.c"
 case 13: 
 var $40;
 var $41=$40^1; //@line 2128 "tcc_bootstrap.c"
 var $42=($41&1); //@line 2128 "tcc_bootstrap.c"
 $1=$42; //@line 2128 "tcc_bootstrap.c"
 label=14;break; //@line 2128 "tcc_bootstrap.c"
 case 14: 
 var $44=$1; //@line 2129 "tcc_bootstrap.c"
 STACKTOP=sp;return $44; //@line 2129 "tcc_bootstrap.c"
  default: assert(0, "bad label: " + label);
 }

}


function _get_tok_str($v,$cv){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $p;
 var $i;
 var $len;
 var $q;
 $2=$v;
 $3=$cv;
 _cstr_reset(76688); //@line 1445 "tcc_bootstrap.c"
 var $4=HEAP32[((76692)>>2)]; //@line 1446 "tcc_bootstrap.c"
 $p=$4; //@line 1446 "tcc_bootstrap.c"
 var $5=$2; //@line 1447 "tcc_bootstrap.c"
 switch(($5|0)){case 187:{ label=19;break;}case 181:case 182:case 206:case 207:case 183:case 184:{ label=2;break;}case 188:{ label=20;break;}case 189:{ label=21;break;}case 192:{ label=22;break;}case 156:{ label=23;break;}case 159:{ label=24;break;}case 200:{ label=25;break;}case 129:{ label=26;break;}case 130:{ label=27;break;}case -1:{ label=28;break;}case 180:{ label=3;break;}case 179:{ label=4;break;}case 190:case 191:{ label=5;break;}case 186:{ label=6;break;}case 185:{ label=7;break;}default:{label=29;break;}}break;
 case 2: 
 var $7=$p; //@line 1454 "tcc_bootstrap.c"
 var $8=$3; //@line 1454 "tcc_bootstrap.c"
 var $9=$8; //@line 1454 "tcc_bootstrap.c"
 var $ld$0$0=(($9)|0);
 var $10$0=HEAP32[(($ld$0$0)>>2)];
 var $ld$1$1=(($9+4)|0);
 var $10$1=HEAP32[(($ld$1$1)>>2)];
 var $$etemp$2=4064;
 var $11=_sprintf($7,$$etemp$2,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$10$0,HEAP32[(((tempVarArgs)+(8))>>2)]=$10$1,tempVarArgs)); STACKTOP=tempVarArgs;
 label=47;break; //@line 1455 "tcc_bootstrap.c"
 case 3: 
 _cstr_ccat(76688,76); //@line 1457 "tcc_bootstrap.c"
 label=4;break; //@line 1457 "tcc_bootstrap.c"
 case 4: 
 _cstr_ccat(76688,39); //@line 1459 "tcc_bootstrap.c"
 var $14=$3; //@line 1460 "tcc_bootstrap.c"
 var $15=$14; //@line 1460 "tcc_bootstrap.c"
 var $ld$3$0=(($15)|0);
 var $16$0=HEAP32[(($ld$3$0)>>2)];
 var $ld$4$1=(($15+4)|0);
 var $16$1=HEAP32[(($ld$4$1)>>2)];
 var $17$0=$16$0;
 var $17=$17$0;
 _add_char(76688,$17); //@line 1460 "tcc_bootstrap.c"
 _cstr_ccat(76688,39); //@line 1461 "tcc_bootstrap.c"
 _cstr_ccat(76688,0); //@line 1462 "tcc_bootstrap.c"
 label=47;break; //@line 1463 "tcc_bootstrap.c"
 case 5: 
 var $19=$3; //@line 1466 "tcc_bootstrap.c"
 var $20=$19; //@line 1466 "tcc_bootstrap.c"
 var $21=(($20+4)|0); //@line 1466 "tcc_bootstrap.c"
 var $22=HEAP32[(($21)>>2)]; //@line 1466 "tcc_bootstrap.c"
 $1=$22; //@line 1466 "tcc_bootstrap.c"
 label=48;break; //@line 1466 "tcc_bootstrap.c"
 case 6: 
 _cstr_ccat(76688,76); //@line 1468 "tcc_bootstrap.c"
 label=7;break; //@line 1468 "tcc_bootstrap.c"
 case 7: 
 _cstr_ccat(76688,34); //@line 1470 "tcc_bootstrap.c"
 var $25=$2; //@line 1471 "tcc_bootstrap.c"
 var $26=($25|0)==185; //@line 1471 "tcc_bootstrap.c"
 if($26){label=8;break;}else{label=13;break;} //@line 1471 "tcc_bootstrap.c"
 case 8: 
 var $28=$3; //@line 1472 "tcc_bootstrap.c"
 var $29=$28; //@line 1472 "tcc_bootstrap.c"
 var $30=(($29)|0); //@line 1472 "tcc_bootstrap.c"
 var $31=HEAP32[(($30)>>2)]; //@line 1472 "tcc_bootstrap.c"
 var $32=((($31)-(1))|0); //@line 1472 "tcc_bootstrap.c"
 $len=$32; //@line 1472 "tcc_bootstrap.c"
 $i=0; //@line 1473 "tcc_bootstrap.c"
 label=9;break; //@line 1473 "tcc_bootstrap.c"
 case 9: 
 var $34=$i; //@line 1473 "tcc_bootstrap.c"
 var $35=$len; //@line 1473 "tcc_bootstrap.c"
 var $36=($34|0)<($35|0); //@line 1473 "tcc_bootstrap.c"
 if($36){label=10;break;}else{label=12;break;} //@line 1473 "tcc_bootstrap.c"
 case 10: 
 var $38=$i; //@line 1474 "tcc_bootstrap.c"
 var $39=$3; //@line 1474 "tcc_bootstrap.c"
 var $40=$39; //@line 1474 "tcc_bootstrap.c"
 var $41=(($40+4)|0); //@line 1474 "tcc_bootstrap.c"
 var $42=HEAP32[(($41)>>2)]; //@line 1474 "tcc_bootstrap.c"
 var $43=(($42+$38)|0); //@line 1474 "tcc_bootstrap.c"
 var $44=HEAP8[(($43)>>0)]; //@line 1474 "tcc_bootstrap.c"
 var $45=($44&255); //@line 1474 "tcc_bootstrap.c"
 _add_char(76688,$45); //@line 1474 "tcc_bootstrap.c"
 label=11;break; //@line 1474 "tcc_bootstrap.c"
 case 11: 
 var $47=$i; //@line 1473 "tcc_bootstrap.c"
 var $48=((($47)+(1))|0); //@line 1473 "tcc_bootstrap.c"
 $i=$48; //@line 1473 "tcc_bootstrap.c"
 label=9;break; //@line 1473 "tcc_bootstrap.c"
 case 12: 
 label=18;break; //@line 1475 "tcc_bootstrap.c"
 case 13: 
 var $51=$3; //@line 1476 "tcc_bootstrap.c"
 var $52=$51; //@line 1476 "tcc_bootstrap.c"
 var $53=(($52)|0); //@line 1476 "tcc_bootstrap.c"
 var $54=HEAP32[(($53)>>2)]; //@line 1476 "tcc_bootstrap.c"
 var $55=(((($54>>>0))/(4))&-1); //@line 1476 "tcc_bootstrap.c"
 var $56=((($55)-(1))|0); //@line 1476 "tcc_bootstrap.c"
 $len=$56; //@line 1476 "tcc_bootstrap.c"
 $i=0; //@line 1477 "tcc_bootstrap.c"
 label=14;break; //@line 1477 "tcc_bootstrap.c"
 case 14: 
 var $58=$i; //@line 1477 "tcc_bootstrap.c"
 var $59=$len; //@line 1477 "tcc_bootstrap.c"
 var $60=($58|0)<($59|0); //@line 1477 "tcc_bootstrap.c"
 if($60){label=15;break;}else{label=17;break;} //@line 1477 "tcc_bootstrap.c"
 case 15: 
 var $62=$i; //@line 1478 "tcc_bootstrap.c"
 var $63=$3; //@line 1478 "tcc_bootstrap.c"
 var $64=$63; //@line 1478 "tcc_bootstrap.c"
 var $65=(($64+4)|0); //@line 1478 "tcc_bootstrap.c"
 var $66=HEAP32[(($65)>>2)]; //@line 1478 "tcc_bootstrap.c"
 var $67=$66; //@line 1478 "tcc_bootstrap.c"
 var $68=(($67+($62<<2))|0); //@line 1478 "tcc_bootstrap.c"
 var $69=HEAP32[(($68)>>2)]; //@line 1478 "tcc_bootstrap.c"
 _add_char(76688,$69); //@line 1478 "tcc_bootstrap.c"
 label=16;break; //@line 1478 "tcc_bootstrap.c"
 case 16: 
 var $71=$i; //@line 1477 "tcc_bootstrap.c"
 var $72=((($71)+(1))|0); //@line 1477 "tcc_bootstrap.c"
 $i=$72; //@line 1477 "tcc_bootstrap.c"
 label=14;break; //@line 1477 "tcc_bootstrap.c"
 case 17: 
 label=18;break;
 case 18: 
 _cstr_ccat(76688,34); //@line 1480 "tcc_bootstrap.c"
 _cstr_ccat(76688,0); //@line 1481 "tcc_bootstrap.c"
 label=47;break; //@line 1482 "tcc_bootstrap.c"
 case 19: 
 _cstr_cat(76688,4056,0); //@line 1485 "tcc_bootstrap.c"
 label=47;break; //@line 1486 "tcc_bootstrap.c"
 case 20: 
 _cstr_cat(76688,4040,0); //@line 1488 "tcc_bootstrap.c"
 label=47;break; //@line 1489 "tcc_bootstrap.c"
 case 21: 
 _cstr_cat(76688,4024,0); //@line 1491 "tcc_bootstrap.c"
 label=47;break; //@line 1492 "tcc_bootstrap.c"
 case 22: 
 _cstr_cat(76688,4008,0); //@line 1494 "tcc_bootstrap.c"
 label=47;break; //@line 1495 "tcc_bootstrap.c"
 case 23: 
 $2=60; //@line 1497 "tcc_bootstrap.c"
 label=38;break; //@line 1498 "tcc_bootstrap.c"
 case 24: 
 $2=62; //@line 1500 "tcc_bootstrap.c"
 label=38;break; //@line 1501 "tcc_bootstrap.c"
 case 25: 
 var $82=$p; //@line 1503 "tcc_bootstrap.c"
 var $83=_strcpy($82,4000); //@line 1503 "tcc_bootstrap.c"
 $1=$83; //@line 1503 "tcc_bootstrap.c"
 label=48;break; //@line 1503 "tcc_bootstrap.c"
 case 26: 
 var $85=$p; //@line 1505 "tcc_bootstrap.c"
 var $86=_strcpy($85,3984); //@line 1505 "tcc_bootstrap.c"
 $1=$86; //@line 1505 "tcc_bootstrap.c"
 label=48;break; //@line 1505 "tcc_bootstrap.c"
 case 27: 
 var $88=$p; //@line 1507 "tcc_bootstrap.c"
 var $89=_strcpy($88,3976); //@line 1507 "tcc_bootstrap.c"
 $1=$89; //@line 1507 "tcc_bootstrap.c"
 label=48;break; //@line 1507 "tcc_bootstrap.c"
 case 28: 
 var $91=$p; //@line 1509 "tcc_bootstrap.c"
 var $92=_strcpy($91,3968); //@line 1509 "tcc_bootstrap.c"
 $1=$92; //@line 1509 "tcc_bootstrap.c"
 label=48;break; //@line 1509 "tcc_bootstrap.c"
 case 29: 
 var $94=$2; //@line 1511 "tcc_bootstrap.c"
 var $95=($94|0)<256; //@line 1511 "tcc_bootstrap.c"
 if($95){label=30;break;}else{label=39;break;} //@line 1511 "tcc_bootstrap.c"
 case 30: 
 $q=136; //@line 1512 "tcc_bootstrap.c"
 label=31;break; //@line 1513 "tcc_bootstrap.c"
 case 31: 
 var $98=$q; //@line 1513 "tcc_bootstrap.c"
 var $99=HEAP8[(($98)>>0)]; //@line 1513 "tcc_bootstrap.c"
 var $100=(($99<<24)>>24)!=0; //@line 1513 "tcc_bootstrap.c"
 if($100){label=32;break;}else{label=35;break;} //@line 1513 "tcc_bootstrap.c"
 case 32: 
 var $102=$q; //@line 1514 "tcc_bootstrap.c"
 var $103=(($102+2)|0); //@line 1514 "tcc_bootstrap.c"
 var $104=HEAP8[(($103)>>0)]; //@line 1514 "tcc_bootstrap.c"
 var $105=($104&255); //@line 1514 "tcc_bootstrap.c"
 var $106=$2; //@line 1514 "tcc_bootstrap.c"
 var $107=($105|0)==($106|0); //@line 1514 "tcc_bootstrap.c"
 if($107){label=33;break;}else{label=34;break;} //@line 1514 "tcc_bootstrap.c"
 case 33: 
 var $109=$q; //@line 1515 "tcc_bootstrap.c"
 var $110=(($109)|0); //@line 1515 "tcc_bootstrap.c"
 var $111=HEAP8[(($110)>>0)]; //@line 1515 "tcc_bootstrap.c"
 var $112=$p; //@line 1515 "tcc_bootstrap.c"
 var $113=(($112+1)|0); //@line 1515 "tcc_bootstrap.c"
 $p=$113; //@line 1515 "tcc_bootstrap.c"
 HEAP8[(($112)>>0)]=$111; //@line 1515 "tcc_bootstrap.c"
 var $114=$q; //@line 1516 "tcc_bootstrap.c"
 var $115=(($114+1)|0); //@line 1516 "tcc_bootstrap.c"
 var $116=HEAP8[(($115)>>0)]; //@line 1516 "tcc_bootstrap.c"
 var $117=$p; //@line 1516 "tcc_bootstrap.c"
 var $118=(($117+1)|0); //@line 1516 "tcc_bootstrap.c"
 $p=$118; //@line 1516 "tcc_bootstrap.c"
 HEAP8[(($117)>>0)]=$116; //@line 1516 "tcc_bootstrap.c"
 var $119=$p; //@line 1517 "tcc_bootstrap.c"
 HEAP8[(($119)>>0)]=0; //@line 1517 "tcc_bootstrap.c"
 var $120=HEAP32[((76692)>>2)]; //@line 1518 "tcc_bootstrap.c"
 $1=$120; //@line 1518 "tcc_bootstrap.c"
 label=48;break; //@line 1518 "tcc_bootstrap.c"
 case 34: 
 var $122=$q; //@line 1520 "tcc_bootstrap.c"
 var $123=(($122+3)|0); //@line 1520 "tcc_bootstrap.c"
 $q=$123; //@line 1520 "tcc_bootstrap.c"
 label=31;break; //@line 1521 "tcc_bootstrap.c"
 case 35: 
 var $125=$2; //@line 1522 "tcc_bootstrap.c"
 var $126=($125|0)>=127; //@line 1522 "tcc_bootstrap.c"
 if($126){label=36;break;}else{label=37;break;} //@line 1522 "tcc_bootstrap.c"
 case 36: 
 var $128=HEAP32[((76692)>>2)]; //@line 1523 "tcc_bootstrap.c"
 var $129=$2; //@line 1523 "tcc_bootstrap.c"
 var $130=_sprintf($128,3960,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$129,tempVarArgs)); STACKTOP=tempVarArgs; //@line 1523 "tcc_bootstrap.c"
 var $131=HEAP32[((76692)>>2)]; //@line 1524 "tcc_bootstrap.c"
 $1=$131; //@line 1524 "tcc_bootstrap.c"
 label=48;break; //@line 1524 "tcc_bootstrap.c"
 case 37: 
 label=38;break; //@line 1525 "tcc_bootstrap.c"
 case 38: 
 var $134=$2; //@line 1527 "tcc_bootstrap.c"
 var $135=(($134)&255); //@line 1527 "tcc_bootstrap.c"
 var $136=$p; //@line 1527 "tcc_bootstrap.c"
 var $137=(($136+1)|0); //@line 1527 "tcc_bootstrap.c"
 $p=$137; //@line 1527 "tcc_bootstrap.c"
 HEAP8[(($136)>>0)]=$135; //@line 1527 "tcc_bootstrap.c"
 var $138=$p; //@line 1528 "tcc_bootstrap.c"
 HEAP8[(($138)>>0)]=0; //@line 1528 "tcc_bootstrap.c"
 label=46;break; //@line 1529 "tcc_bootstrap.c"
 case 39: 
 var $140=$2; //@line 1529 "tcc_bootstrap.c"
 var $141=HEAP32[((10456)>>2)]; //@line 1529 "tcc_bootstrap.c"
 var $142=($140|0)<($141|0); //@line 1529 "tcc_bootstrap.c"
 if($142){label=40;break;}else{label=41;break;} //@line 1529 "tcc_bootstrap.c"
 case 40: 
 var $144=$2; //@line 1530 "tcc_bootstrap.c"
 var $145=((($144)-(256))|0); //@line 1530 "tcc_bootstrap.c"
 var $146=HEAP32[((10496)>>2)]; //@line 1530 "tcc_bootstrap.c"
 var $147=(($146+($145<<2))|0); //@line 1530 "tcc_bootstrap.c"
 var $148=HEAP32[(($147)>>2)]; //@line 1530 "tcc_bootstrap.c"
 var $149=(($148+28)|0); //@line 1530 "tcc_bootstrap.c"
 var $150=(($149)|0); //@line 1530 "tcc_bootstrap.c"
 $1=$150; //@line 1530 "tcc_bootstrap.c"
 label=48;break; //@line 1530 "tcc_bootstrap.c"
 case 41: 
 var $152=$2; //@line 1531 "tcc_bootstrap.c"
 var $153=($152|0)>=268435456; //@line 1531 "tcc_bootstrap.c"
 if($153){label=42;break;}else{label=43;break;} //@line 1531 "tcc_bootstrap.c"
 case 42: 
 var $155=$p; //@line 1533 "tcc_bootstrap.c"
 var $156=$2; //@line 1533 "tcc_bootstrap.c"
 var $157=((($156)-(268435456))|0); //@line 1533 "tcc_bootstrap.c"
 var $158=_sprintf($155,3944,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$157,tempVarArgs)); STACKTOP=tempVarArgs; //@line 1533 "tcc_bootstrap.c"
 label=44;break; //@line 1534 "tcc_bootstrap.c"
 case 43: 
 $1=0; //@line 1535 "tcc_bootstrap.c"
 label=48;break; //@line 1535 "tcc_bootstrap.c"
 case 44: 
 label=45;break;
 case 45: 
 label=46;break;
 case 46: 
 label=47;break; //@line 1537 "tcc_bootstrap.c"
 case 47: 
 var $164=HEAP32[((76692)>>2)]; //@line 1539 "tcc_bootstrap.c"
 $1=$164; //@line 1539 "tcc_bootstrap.c"
 label=48;break; //@line 1539 "tcc_bootstrap.c"
 case 48: 
 var $166=$1; //@line 1540 "tcc_bootstrap.c"
 STACKTOP=sp;return $166; //@line 1540 "tcc_bootstrap.c"
  default: assert(0, "bad label: " + label);
 }

}


function _cstr_reset($cstr){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 $1=$cstr;
 var $2=$1; //@line 1376 "tcc_bootstrap.c"
 var $3=(($2)|0); //@line 1376 "tcc_bootstrap.c"
 HEAP32[(($3)>>2)]=0; //@line 1376 "tcc_bootstrap.c"
 STACKTOP=sp;return; //@line 1377 "tcc_bootstrap.c"
}


function _add_char($cstr,$c){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 $1=$cstr;
 $2=$c;
 var $3=$2; //@line 1380 "tcc_bootstrap.c"
 var $4=($3|0)==39; //@line 1380 "tcc_bootstrap.c"
 if($4){label=4;break;}else{label=2;break;} //@line 1380 "tcc_bootstrap.c"
 case 2: 
 var $6=$2; //@line 1380 "tcc_bootstrap.c"
 var $7=($6|0)==34; //@line 1380 "tcc_bootstrap.c"
 if($7){label=4;break;}else{label=3;break;} //@line 1380 "tcc_bootstrap.c"
 case 3: 
 var $9=$2; //@line 1380 "tcc_bootstrap.c"
 var $10=($9|0)==92; //@line 1380 "tcc_bootstrap.c"
 if($10){label=4;break;}else{label=5;break;} //@line 1380 "tcc_bootstrap.c"
 case 4: 
 var $12=$1; //@line 1381 "tcc_bootstrap.c"
 _cstr_ccat($12,92); //@line 1381 "tcc_bootstrap.c"
 label=5;break; //@line 1382 "tcc_bootstrap.c"
 case 5: 
 var $14=$2; //@line 1383 "tcc_bootstrap.c"
 var $15=($14|0)>=32; //@line 1383 "tcc_bootstrap.c"
 if($15){label=6;break;}else{label=8;break;} //@line 1383 "tcc_bootstrap.c"
 case 6: 
 var $17=$2; //@line 1383 "tcc_bootstrap.c"
 var $18=($17|0)<=126; //@line 1383 "tcc_bootstrap.c"
 if($18){label=7;break;}else{label=8;break;} //@line 1383 "tcc_bootstrap.c"
 case 7: 
 var $20=$1; //@line 1384 "tcc_bootstrap.c"
 var $21=$2; //@line 1384 "tcc_bootstrap.c"
 _cstr_ccat($20,$21); //@line 1384 "tcc_bootstrap.c"
 label=12;break; //@line 1385 "tcc_bootstrap.c"
 case 8: 
 var $23=$1; //@line 1386 "tcc_bootstrap.c"
 _cstr_ccat($23,92); //@line 1386 "tcc_bootstrap.c"
 var $24=$2; //@line 1387 "tcc_bootstrap.c"
 var $25=($24|0)==10; //@line 1387 "tcc_bootstrap.c"
 if($25){label=9;break;}else{label=10;break;} //@line 1387 "tcc_bootstrap.c"
 case 9: 
 var $27=$1; //@line 1388 "tcc_bootstrap.c"
 _cstr_ccat($27,110); //@line 1388 "tcc_bootstrap.c"
 label=11;break; //@line 1389 "tcc_bootstrap.c"
 case 10: 
 var $29=$1; //@line 1390 "tcc_bootstrap.c"
 var $30=$2; //@line 1390 "tcc_bootstrap.c"
 var $31=$30>>6; //@line 1390 "tcc_bootstrap.c"
 var $32=$31&7; //@line 1390 "tcc_bootstrap.c"
 var $33=((($32)+(48))|0); //@line 1390 "tcc_bootstrap.c"
 _cstr_ccat($29,$33); //@line 1390 "tcc_bootstrap.c"
 var $34=$1; //@line 1391 "tcc_bootstrap.c"
 var $35=$2; //@line 1391 "tcc_bootstrap.c"
 var $36=$35>>3; //@line 1391 "tcc_bootstrap.c"
 var $37=$36&7; //@line 1391 "tcc_bootstrap.c"
 var $38=((($37)+(48))|0); //@line 1391 "tcc_bootstrap.c"
 _cstr_ccat($34,$38); //@line 1391 "tcc_bootstrap.c"
 var $39=$1; //@line 1392 "tcc_bootstrap.c"
 var $40=$2; //@line 1392 "tcc_bootstrap.c"
 var $41=$40&7; //@line 1392 "tcc_bootstrap.c"
 var $42=((($41)+(48))|0); //@line 1392 "tcc_bootstrap.c"
 _cstr_ccat($39,$42); //@line 1392 "tcc_bootstrap.c"
 label=11;break;
 case 11: 
 label=12;break;
 case 12: 
 STACKTOP=sp;return; //@line 1395 "tcc_bootstrap.c"
  default: assert(0, "bad label: " + label);
 }

}


function _cstr_cat($cstr,$str,$len){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $size;
 $1=$cstr;
 $2=$str;
 $3=$len;
 var $4=$3; //@line 1347 "tcc_bootstrap.c"
 var $5=($4|0)<=0; //@line 1347 "tcc_bootstrap.c"
 if($5){label=2;break;}else{label=3;break;} //@line 1347 "tcc_bootstrap.c"
 case 2: 
 var $7=$2; //@line 1348 "tcc_bootstrap.c"
 var $8=_strlen($7); //@line 1348 "tcc_bootstrap.c"
 var $9=((($8)+(1))|0); //@line 1348 "tcc_bootstrap.c"
 var $10=$3; //@line 1348 "tcc_bootstrap.c"
 var $11=((($9)+($10))|0); //@line 1348 "tcc_bootstrap.c"
 $3=$11; //@line 1348 "tcc_bootstrap.c"
 label=3;break; //@line 1348 "tcc_bootstrap.c"
 case 3: 
 var $13=$1; //@line 1349 "tcc_bootstrap.c"
 var $14=(($13)|0); //@line 1349 "tcc_bootstrap.c"
 var $15=HEAP32[(($14)>>2)]; //@line 1349 "tcc_bootstrap.c"
 var $16=$3; //@line 1349 "tcc_bootstrap.c"
 var $17=((($15)+($16))|0); //@line 1349 "tcc_bootstrap.c"
 $size=$17; //@line 1349 "tcc_bootstrap.c"
 var $18=$size; //@line 1350 "tcc_bootstrap.c"
 var $19=$1; //@line 1350 "tcc_bootstrap.c"
 var $20=(($19+8)|0); //@line 1350 "tcc_bootstrap.c"
 var $21=HEAP32[(($20)>>2)]; //@line 1350 "tcc_bootstrap.c"
 var $22=($18|0)>($21|0); //@line 1350 "tcc_bootstrap.c"
 if($22){label=4;break;}else{label=5;break;} //@line 1350 "tcc_bootstrap.c"
 case 4: 
 var $24=$1; //@line 1351 "tcc_bootstrap.c"
 var $25=$size; //@line 1351 "tcc_bootstrap.c"
 _cstr_realloc($24,$25); //@line 1351 "tcc_bootstrap.c"
 label=5;break; //@line 1351 "tcc_bootstrap.c"
 case 5: 
 var $27=$1; //@line 1352 "tcc_bootstrap.c"
 var $28=(($27+4)|0); //@line 1352 "tcc_bootstrap.c"
 var $29=HEAP32[(($28)>>2)]; //@line 1352 "tcc_bootstrap.c"
 var $30=$1; //@line 1352 "tcc_bootstrap.c"
 var $31=(($30)|0); //@line 1352 "tcc_bootstrap.c"
 var $32=HEAP32[(($31)>>2)]; //@line 1352 "tcc_bootstrap.c"
 var $33=(($29+$32)|0); //@line 1352 "tcc_bootstrap.c"
 var $34=$2; //@line 1352 "tcc_bootstrap.c"
 var $35=$3; //@line 1352 "tcc_bootstrap.c"
 _memmove($33,$34,$35,1,0); //@line 1352 "tcc_bootstrap.c"
 var $36=$size; //@line 1353 "tcc_bootstrap.c"
 var $37=$1; //@line 1353 "tcc_bootstrap.c"
 var $38=(($37)|0); //@line 1353 "tcc_bootstrap.c"
 HEAP32[(($38)>>2)]=$36; //@line 1353 "tcc_bootstrap.c"
 STACKTOP=sp;return; //@line 1354 "tcc_bootstrap.c"
  default: assert(0, "bad label: " + label);
 }

}


function _TOK_GET($t,$pp,$cv){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $p;
 var $n;
 var $tab;
 $1=$t;
 $2=$pp;
 $3=$cv;
 var $4=$2; //@line 2070 "tcc_bootstrap.c"
 var $5=HEAP32[(($4)>>2)]; //@line 2070 "tcc_bootstrap.c"
 $p=$5; //@line 2070 "tcc_bootstrap.c"
 var $6=$3; //@line 2073 "tcc_bootstrap.c"
 var $7=$6; //@line 2073 "tcc_bootstrap.c"
 var $8=(($7)|0); //@line 2073 "tcc_bootstrap.c"
 $tab=$8; //@line 2073 "tcc_bootstrap.c"
 var $9=$p; //@line 2074 "tcc_bootstrap.c"
 var $10=(($9+4)|0); //@line 2074 "tcc_bootstrap.c"
 $p=$10; //@line 2074 "tcc_bootstrap.c"
 var $11=HEAP32[(($9)>>2)]; //@line 2074 "tcc_bootstrap.c"
 var $12=$1; //@line 2074 "tcc_bootstrap.c"
 HEAP32[(($12)>>2)]=$11; //@line 2074 "tcc_bootstrap.c"
 switch(($11|0)){case 206:case 181:case 179:case 180:case 192:{ label=2;break;}case 207:case 182:{ label=3;break;}case 187:{ label=4;break;}case 185:case 186:case 190:case 191:{ label=5;break;}case 188:case 183:case 184:{ label=6;break;}case 189:{ label=7;break;}default:{label=12;break;}}break;
 case 2: 
 var $14=$p; //@line 2080 "tcc_bootstrap.c"
 var $15=(($14+4)|0); //@line 2080 "tcc_bootstrap.c"
 $p=$15; //@line 2080 "tcc_bootstrap.c"
 var $16=HEAP32[(($14)>>2)]; //@line 2080 "tcc_bootstrap.c"
 var $17$0=$16;
 var $17$1=((((($16|0)<0))|0)?-1:0);
 var $18=$3; //@line 2080 "tcc_bootstrap.c"
 var $19=$18; //@line 2080 "tcc_bootstrap.c"
 var $st$0$0=(($19)|0);
 HEAP32[(($st$0$0)>>2)]=$17$0;
 var $st$1$1=(($19+4)|0);
 HEAP32[(($st$1$1)>>2)]=$17$1;
 label=13;break; //@line 2081 "tcc_bootstrap.c"
 case 3: 
 var $21=$p; //@line 2084 "tcc_bootstrap.c"
 var $22=(($21+4)|0); //@line 2084 "tcc_bootstrap.c"
 $p=$22; //@line 2084 "tcc_bootstrap.c"
 var $23=HEAP32[(($21)>>2)]; //@line 2084 "tcc_bootstrap.c"
 var $24$0=$23;
 var $24$1=0;
 var $25=$3; //@line 2084 "tcc_bootstrap.c"
 var $26=$25; //@line 2084 "tcc_bootstrap.c"
 var $st$2$0=(($26)|0);
 HEAP32[(($st$2$0)>>2)]=$24$0;
 var $st$3$1=(($26+4)|0);
 HEAP32[(($st$3$1)>>2)]=$24$1;
 label=13;break; //@line 2085 "tcc_bootstrap.c"
 case 4: 
 var $28=$p; //@line 2087 "tcc_bootstrap.c"
 var $29=(($28+4)|0); //@line 2087 "tcc_bootstrap.c"
 $p=$29; //@line 2087 "tcc_bootstrap.c"
 var $30=HEAP32[(($28)>>2)]; //@line 2087 "tcc_bootstrap.c"
 var $31=$tab; //@line 2087 "tcc_bootstrap.c"
 var $32=(($31)|0); //@line 2087 "tcc_bootstrap.c"
 HEAP32[(($32)>>2)]=$30; //@line 2087 "tcc_bootstrap.c"
 label=13;break; //@line 2088 "tcc_bootstrap.c"
 case 5: 
 var $34=$p; //@line 2093 "tcc_bootstrap.c"
 var $35=(($34+4)|0); //@line 2093 "tcc_bootstrap.c"
 $p=$35; //@line 2093 "tcc_bootstrap.c"
 var $36=HEAP32[(($34)>>2)]; //@line 2093 "tcc_bootstrap.c"
 var $37=$3; //@line 2093 "tcc_bootstrap.c"
 var $38=$37; //@line 2093 "tcc_bootstrap.c"
 var $39=(($38)|0); //@line 2093 "tcc_bootstrap.c"
 HEAP32[(($39)>>2)]=$36; //@line 2093 "tcc_bootstrap.c"
 var $40=$p; //@line 2094 "tcc_bootstrap.c"
 var $41=$40; //@line 2094 "tcc_bootstrap.c"
 var $42=$3; //@line 2094 "tcc_bootstrap.c"
 var $43=$42; //@line 2094 "tcc_bootstrap.c"
 var $44=(($43+4)|0); //@line 2094 "tcc_bootstrap.c"
 HEAP32[(($44)>>2)]=$41; //@line 2094 "tcc_bootstrap.c"
 var $45=$3; //@line 2095 "tcc_bootstrap.c"
 var $46=$45; //@line 2095 "tcc_bootstrap.c"
 var $47=(($46)|0); //@line 2095 "tcc_bootstrap.c"
 var $48=HEAP32[(($47)>>2)]; //@line 2095 "tcc_bootstrap.c"
 var $49=((($48)+(4))|0); //@line 2095 "tcc_bootstrap.c"
 var $50=((($49)-(1))|0); //@line 2095 "tcc_bootstrap.c"
 var $51=(((($50>>>0))/(4))&-1); //@line 2095 "tcc_bootstrap.c"
 var $52=$p; //@line 2095 "tcc_bootstrap.c"
 var $53=(($52+($51<<2))|0); //@line 2095 "tcc_bootstrap.c"
 $p=$53; //@line 2095 "tcc_bootstrap.c"
 label=13;break; //@line 2096 "tcc_bootstrap.c"
 case 6: 
 $n=2; //@line 2100 "tcc_bootstrap.c"
 label=8;break; //@line 2101 "tcc_bootstrap.c"
 case 7: 
 $n=3; //@line 2103 "tcc_bootstrap.c"
 label=8;break; //@line 2103 "tcc_bootstrap.c"
 case 8: 
 label=9;break; //@line 2105 "tcc_bootstrap.c"
 case 9: 
 var $58=$p; //@line 2106 "tcc_bootstrap.c"
 var $59=(($58+4)|0); //@line 2106 "tcc_bootstrap.c"
 $p=$59; //@line 2106 "tcc_bootstrap.c"
 var $60=HEAP32[(($58)>>2)]; //@line 2106 "tcc_bootstrap.c"
 var $61=$tab; //@line 2106 "tcc_bootstrap.c"
 var $62=(($61+4)|0); //@line 2106 "tcc_bootstrap.c"
 $tab=$62; //@line 2106 "tcc_bootstrap.c"
 HEAP32[(($61)>>2)]=$60; //@line 2106 "tcc_bootstrap.c"
 label=10;break; //@line 2106 "tcc_bootstrap.c"
 case 10: 
 var $64=$n; //@line 2106 "tcc_bootstrap.c"
 var $65=((($64)-(1))|0); //@line 2106 "tcc_bootstrap.c"
 $n=$65; //@line 2106 "tcc_bootstrap.c"
 var $66=($65|0)!=0; //@line 2106 "tcc_bootstrap.c"
 if($66){label=9;break;}else{label=11;break;} //@line 2106 "tcc_bootstrap.c"
 case 11: 
 label=13;break; //@line 2108 "tcc_bootstrap.c"
 case 12: 
 label=13;break; //@line 2110 "tcc_bootstrap.c"
 case 13: 
 var $70=$p; //@line 2112 "tcc_bootstrap.c"
 var $71=$2; //@line 2112 "tcc_bootstrap.c"
 HEAP32[(($71)>>2)]=$70; //@line 2112 "tcc_bootstrap.c"
 STACKTOP=sp;return; //@line 2113 "tcc_bootstrap.c"
  default: assert(0, "bad label: " + label);
 }

}


function _sym_malloc(){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $sym;
 var $1=HEAP32[((10520)>>2)]; //@line 4270 "tcc_bootstrap.c"
 $sym=$1; //@line 4270 "tcc_bootstrap.c"
 var $2=$sym; //@line 4271 "tcc_bootstrap.c"
 var $3=($2|0)!=0; //@line 4271 "tcc_bootstrap.c"
 if($3){label=3;break;}else{label=2;break;} //@line 4271 "tcc_bootstrap.c"
 case 2: 
 var $5=___sym_malloc(); //@line 4272 "tcc_bootstrap.c"
 $sym=$5; //@line 4272 "tcc_bootstrap.c"
 label=3;break; //@line 4272 "tcc_bootstrap.c"
 case 3: 
 var $7=$sym; //@line 4273 "tcc_bootstrap.c"
 var $8=(($7+24)|0); //@line 4273 "tcc_bootstrap.c"
 var $9=$8; //@line 4273 "tcc_bootstrap.c"
 var $10=HEAP32[(($9)>>2)]; //@line 4273 "tcc_bootstrap.c"
 HEAP32[((10520)>>2)]=$10; //@line 4273 "tcc_bootstrap.c"
 var $11=$sym; //@line 4274 "tcc_bootstrap.c"
 STACKTOP=sp;return $11; //@line 4274 "tcc_bootstrap.c"
  default: assert(0, "bad label: " + label);
 }

}


function ___sym_malloc(){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $sym_pool;
 var $sym;
 var $last_sym;
 var $i;
 var $1=_tcc_malloc(8160); //@line 4255 "tcc_bootstrap.c"
 var $2=$1; //@line 4255 "tcc_bootstrap.c"
 $sym_pool=$2; //@line 4255 "tcc_bootstrap.c"
 var $3=$sym_pool; //@line 4256 "tcc_bootstrap.c"
 var $4=$3; //@line 4256 "tcc_bootstrap.c"
 _dynarray_add(10512,10632,$4); //@line 4256 "tcc_bootstrap.c"
 var $5=HEAP32[((10520)>>2)]; //@line 4257 "tcc_bootstrap.c"
 $last_sym=$5; //@line 4257 "tcc_bootstrap.c"
 var $6=$sym_pool; //@line 4258 "tcc_bootstrap.c"
 $sym=$6; //@line 4258 "tcc_bootstrap.c"
 $i=0; //@line 4259 "tcc_bootstrap.c"
 label=2;break; //@line 4259 "tcc_bootstrap.c"
 case 2: 
 var $8=$i; //@line 4259 "tcc_bootstrap.c"
 var $9=($8|0)<204; //@line 4259 "tcc_bootstrap.c"
 if($9){label=3;break;}else{label=5;break;} //@line 4259 "tcc_bootstrap.c"
 case 3: 
 var $11=$last_sym; //@line 4260 "tcc_bootstrap.c"
 var $12=$sym; //@line 4260 "tcc_bootstrap.c"
 var $13=(($12+24)|0); //@line 4260 "tcc_bootstrap.c"
 var $14=$13; //@line 4260 "tcc_bootstrap.c"
 HEAP32[(($14)>>2)]=$11; //@line 4260 "tcc_bootstrap.c"
 var $15=$sym; //@line 4261 "tcc_bootstrap.c"
 $last_sym=$15; //@line 4261 "tcc_bootstrap.c"
 var $16=$sym; //@line 4262 "tcc_bootstrap.c"
 var $17=(($16+40)|0); //@line 4262 "tcc_bootstrap.c"
 $sym=$17; //@line 4262 "tcc_bootstrap.c"
 label=4;break; //@line 4263 "tcc_bootstrap.c"
 case 4: 
 var $19=$i; //@line 4259 "tcc_bootstrap.c"
 var $20=((($19)+(1))|0); //@line 4259 "tcc_bootstrap.c"
 $i=$20; //@line 4259 "tcc_bootstrap.c"
 label=2;break; //@line 4259 "tcc_bootstrap.c"
 case 5: 
 var $22=$last_sym; //@line 4264 "tcc_bootstrap.c"
 HEAP32[((10520)>>2)]=$22; //@line 4264 "tcc_bootstrap.c"
 var $23=$last_sym; //@line 4265 "tcc_bootstrap.c"
 STACKTOP=sp;return $23; //@line 4265 "tcc_bootstrap.c"
  default: assert(0, "bad label: " + label);
 }

}


function _set_idnum($c,$val){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 var $2;
 var $prev;
 $1=$c;
 $2=$val;
 var $3=$1; //@line 1773 "tcc_bootstrap.c"
 var $4=((($3)+(1))|0); //@line 1773 "tcc_bootstrap.c"
 var $5=((10736+$4)|0); //@line 1773 "tcc_bootstrap.c"
 var $6=HEAP8[(($5)>>0)]; //@line 1773 "tcc_bootstrap.c"
 var $7=($6&255); //@line 1773 "tcc_bootstrap.c"
 $prev=$7; //@line 1773 "tcc_bootstrap.c"
 var $8=$2; //@line 1774 "tcc_bootstrap.c"
 var $9=(($8)&255); //@line 1774 "tcc_bootstrap.c"
 var $10=$1; //@line 1774 "tcc_bootstrap.c"
 var $11=((($10)+(1))|0); //@line 1774 "tcc_bootstrap.c"
 var $12=((10736+$11)|0); //@line 1774 "tcc_bootstrap.c"
 HEAP8[(($12)>>0)]=$9; //@line 1774 "tcc_bootstrap.c"
 var $13=$prev; //@line 1775 "tcc_bootstrap.c"
 STACKTOP=sp;return $13; //@line 1775 "tcc_bootstrap.c"
}


function _is_space($ch){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 $1=$ch;
 var $2=$1; //@line 1011 "tcc_bootstrap.c"
 var $3=($2|0)==32; //@line 1011 "tcc_bootstrap.c"
 if($3){var $17=1;label=6;break;}else{label=2;break;} //@line 1011 "tcc_bootstrap.c"
 case 2: 
 var $5=$1; //@line 1011 "tcc_bootstrap.c"
 var $6=($5|0)==9; //@line 1011 "tcc_bootstrap.c"
 if($6){var $17=1;label=6;break;}else{label=3;break;} //@line 1011 "tcc_bootstrap.c"
 case 3: 
 var $8=$1; //@line 1011 "tcc_bootstrap.c"
 var $9=($8|0)==11; //@line 1011 "tcc_bootstrap.c"
 if($9){var $17=1;label=6;break;}else{label=4;break;} //@line 1011 "tcc_bootstrap.c"
 case 4: 
 var $11=$1; //@line 1011 "tcc_bootstrap.c"
 var $12=($11|0)==12; //@line 1011 "tcc_bootstrap.c"
 if($12){var $17=1;label=6;break;}else{label=5;break;} //@line 1011 "tcc_bootstrap.c"
 case 5: 
 var $14=$1; //@line 1011 "tcc_bootstrap.c"
 var $15=($14|0)==13; //@line 1011 "tcc_bootstrap.c"
 var $17=$15;label=6;break; //@line 1011 "tcc_bootstrap.c"
 case 6: 
 var $17;
 var $18=($17&1); //@line 1011 "tcc_bootstrap.c"
 STACKTOP=sp;return $18; //@line 1011 "tcc_bootstrap.c"
  default: assert(0, "bad label: " + label);
 }

}


function _isid($c){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 $1=$c;
 var $2=$1; //@line 1014 "tcc_bootstrap.c"
 var $3=($2|0)>=97; //@line 1014 "tcc_bootstrap.c"
 if($3){label=2;break;}else{label=3;break;} //@line 1014 "tcc_bootstrap.c"
 case 2: 
 var $5=$1; //@line 1014 "tcc_bootstrap.c"
 var $6=($5|0)<=122; //@line 1014 "tcc_bootstrap.c"
 if($6){var $17=1;label=6;break;}else{label=3;break;} //@line 1014 "tcc_bootstrap.c"
 case 3: 
 var $8=$1; //@line 1014 "tcc_bootstrap.c"
 var $9=($8|0)>=65; //@line 1014 "tcc_bootstrap.c"
 if($9){label=4;break;}else{label=5;break;} //@line 1014 "tcc_bootstrap.c"
 case 4: 
 var $11=$1; //@line 1014 "tcc_bootstrap.c"
 var $12=($11|0)<=90; //@line 1014 "tcc_bootstrap.c"
 if($12){var $17=1;label=6;break;}else{label=5;break;} //@line 1014 "tcc_bootstrap.c"
 case 5: 
 var $14=$1; //@line 1014 "tcc_bootstrap.c"
 var $15=($14|0)==95; //@line 1014 "tcc_bootstrap.c"
 var $17=$15;label=6;break; //@line 1014 "tcc_bootstrap.c"
 case 6: 
 var $17;
 var $18=($17&1); //@line 1014 "tcc_bootstrap.c"
 STACKTOP=sp;return $18; //@line 1014 "tcc_bootstrap.c"
  default: assert(0, "bad label: " + label);
 }

}


function _isnum($c){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 $1=$c;
 var $2=$1; //@line 1017 "tcc_bootstrap.c"
 var $3=($2|0)>=48; //@line 1017 "tcc_bootstrap.c"
 if($3){label=2;break;}else{var $8=0;label=3;break;} //@line 1017 "tcc_bootstrap.c"
 case 2: 
 var $5=$1; //@line 1017 "tcc_bootstrap.c"
 var $6=($5|0)<=57; //@line 1017 "tcc_bootstrap.c"
 var $8=$6;label=3;break;
 case 3: 
 var $8;
 var $9=($8&1);
 STACKTOP=sp;return $9; //@line 1018 "tcc_bootstrap.c"
  default: assert(0, "bad label: " + label);
 }

}


function _tok_str_new($s){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 $1=$s;
 var $2=$1; //@line 1935 "tcc_bootstrap.c"
 var $3=(($2)|0); //@line 1935 "tcc_bootstrap.c"
 HEAP32[(($3)>>2)]=0; //@line 1935 "tcc_bootstrap.c"
 var $4=$1; //@line 1936 "tcc_bootstrap.c"
 var $5=(($4+8)|0); //@line 1936 "tcc_bootstrap.c"
 HEAP32[(($5)>>2)]=0; //@line 1936 "tcc_bootstrap.c"
 var $6=$1; //@line 1936 "tcc_bootstrap.c"
 var $7=(($6+4)|0); //@line 1936 "tcc_bootstrap.c"
 HEAP32[(($7)>>2)]=0; //@line 1936 "tcc_bootstrap.c"
 var $8=$1; //@line 1937 "tcc_bootstrap.c"
 var $9=(($8+12)|0); //@line 1937 "tcc_bootstrap.c"
 HEAP32[(($9)>>2)]=0; //@line 1937 "tcc_bootstrap.c"
 var $10=$1; //@line 1938 "tcc_bootstrap.c"
 var $11=(($10+16)|0); //@line 1938 "tcc_bootstrap.c"
 HEAP32[(($11)>>2)]=-1; //@line 1938 "tcc_bootstrap.c"
 STACKTOP=sp;return; //@line 1939 "tcc_bootstrap.c"
}


function _tok_str_realloc($s,$new_size){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $str;
 var $size;
 $1=$s;
 $2=$new_size;
 var $3=$1; //@line 1966 "tcc_bootstrap.c"
 var $4=(($3+12)|0); //@line 1966 "tcc_bootstrap.c"
 var $5=HEAP32[(($4)>>2)]; //@line 1966 "tcc_bootstrap.c"
 $size=$5; //@line 1966 "tcc_bootstrap.c"
 var $6=$size; //@line 1967 "tcc_bootstrap.c"
 var $7=($6|0)<16; //@line 1967 "tcc_bootstrap.c"
 if($7){label=2;break;}else{label=3;break;} //@line 1967 "tcc_bootstrap.c"
 case 2: 
 $size=16; //@line 1968 "tcc_bootstrap.c"
 label=3;break; //@line 1968 "tcc_bootstrap.c"
 case 3: 
 label=4;break; //@line 1969 "tcc_bootstrap.c"
 case 4: 
 var $11=$size; //@line 1969 "tcc_bootstrap.c"
 var $12=$2; //@line 1969 "tcc_bootstrap.c"
 var $13=($11|0)<($12|0); //@line 1969 "tcc_bootstrap.c"
 if($13){label=5;break;}else{label=6;break;} //@line 1969 "tcc_bootstrap.c"
 case 5: 
 var $15=$size; //@line 1970 "tcc_bootstrap.c"
 var $16=($15<<1); //@line 1970 "tcc_bootstrap.c"
 $size=$16; //@line 1970 "tcc_bootstrap.c"
 label=4;break; //@line 1970 "tcc_bootstrap.c"
 case 6: 
 var $18=$size; //@line 1971 "tcc_bootstrap.c"
 var $19=$1; //@line 1971 "tcc_bootstrap.c"
 var $20=(($19+12)|0); //@line 1971 "tcc_bootstrap.c"
 var $21=HEAP32[(($20)>>2)]; //@line 1971 "tcc_bootstrap.c"
 var $22=($18|0)>($21|0); //@line 1971 "tcc_bootstrap.c"
 if($22){label=7;break;}else{label=8;break;} //@line 1971 "tcc_bootstrap.c"
 case 7: 
 var $24=$1; //@line 1972 "tcc_bootstrap.c"
 var $25=(($24)|0); //@line 1972 "tcc_bootstrap.c"
 var $26=HEAP32[(($25)>>2)]; //@line 1972 "tcc_bootstrap.c"
 var $27=$26; //@line 1972 "tcc_bootstrap.c"
 var $28=$size; //@line 1972 "tcc_bootstrap.c"
 var $29=($28<<2); //@line 1972 "tcc_bootstrap.c"
 var $30=_tal_realloc_impl(9384,$27,$29); //@line 1972 "tcc_bootstrap.c"
 var $31=$30; //@line 1972 "tcc_bootstrap.c"
 $str=$31; //@line 1972 "tcc_bootstrap.c"
 var $32=$size; //@line 1973 "tcc_bootstrap.c"
 var $33=$1; //@line 1973 "tcc_bootstrap.c"
 var $34=(($33+12)|0); //@line 1973 "tcc_bootstrap.c"
 HEAP32[(($34)>>2)]=$32; //@line 1973 "tcc_bootstrap.c"
 var $35=$str; //@line 1974 "tcc_bootstrap.c"
 var $36=$1; //@line 1974 "tcc_bootstrap.c"
 var $37=(($36)|0); //@line 1974 "tcc_bootstrap.c"
 HEAP32[(($37)>>2)]=$35; //@line 1974 "tcc_bootstrap.c"
 label=8;break; //@line 1975 "tcc_bootstrap.c"
 case 8: 
 var $39=$1; //@line 1976 "tcc_bootstrap.c"
 var $40=(($39)|0); //@line 1976 "tcc_bootstrap.c"
 var $41=HEAP32[(($40)>>2)]; //@line 1976 "tcc_bootstrap.c"
 STACKTOP=sp;return $41; //@line 1976 "tcc_bootstrap.c"
  default: assert(0, "bad label: " + label);
 }

}


function _tok_alloc($str,$len){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $ts;
 var $pts;
 var $i;
 var $h;
 $2=$str;
 $3=$len;
 $h=1; //@line 1426 "tcc_bootstrap.c"
 $i=0; //@line 1427 "tcc_bootstrap.c"
 label=2;break; //@line 1427 "tcc_bootstrap.c"
 case 2: 
 var $5=$i; //@line 1427 "tcc_bootstrap.c"
 var $6=$3; //@line 1427 "tcc_bootstrap.c"
 var $7=($5|0)<($6|0); //@line 1427 "tcc_bootstrap.c"
 if($7){label=3;break;}else{label=5;break;} //@line 1427 "tcc_bootstrap.c"
 case 3: 
 var $9=$h; //@line 1428 "tcc_bootstrap.c"
 var $10=$i; //@line 1428 "tcc_bootstrap.c"
 var $11=$2; //@line 1428 "tcc_bootstrap.c"
 var $12=(($11+$10)|0); //@line 1428 "tcc_bootstrap.c"
 var $13=HEAP8[(($12)>>0)]; //@line 1428 "tcc_bootstrap.c"
 var $14=($13&255); //@line 1428 "tcc_bootstrap.c"
 var $15=_TOK_HASH_FUNC($9,$14); //@line 1428 "tcc_bootstrap.c"
 $h=$15; //@line 1428 "tcc_bootstrap.c"
 label=4;break; //@line 1428 "tcc_bootstrap.c"
 case 4: 
 var $17=$i; //@line 1427 "tcc_bootstrap.c"
 var $18=((($17)+(1))|0); //@line 1427 "tcc_bootstrap.c"
 $i=$18; //@line 1427 "tcc_bootstrap.c"
 label=2;break; //@line 1427 "tcc_bootstrap.c"
 case 5: 
 var $20=$h; //@line 1429 "tcc_bootstrap.c"
 var $21=$20&16383; //@line 1429 "tcc_bootstrap.c"
 $h=$21; //@line 1429 "tcc_bootstrap.c"
 var $22=$h; //@line 1430 "tcc_bootstrap.c"
 var $23=((11024+($22<<2))|0); //@line 1430 "tcc_bootstrap.c"
 $pts=$23; //@line 1430 "tcc_bootstrap.c"
 label=6;break; //@line 1431 "tcc_bootstrap.c"
 case 6: 
 var $25=$pts; //@line 1432 "tcc_bootstrap.c"
 var $26=HEAP32[(($25)>>2)]; //@line 1432 "tcc_bootstrap.c"
 $ts=$26; //@line 1432 "tcc_bootstrap.c"
 var $27=$ts; //@line 1433 "tcc_bootstrap.c"
 var $28=($27|0)!=0; //@line 1433 "tcc_bootstrap.c"
 if($28){label=8;break;}else{label=7;break;} //@line 1433 "tcc_bootstrap.c"
 case 7: 
 label=12;break; //@line 1434 "tcc_bootstrap.c"
 case 8: 
 var $31=$ts; //@line 1435 "tcc_bootstrap.c"
 var $32=(($31+24)|0); //@line 1435 "tcc_bootstrap.c"
 var $33=HEAP32[(($32)>>2)]; //@line 1435 "tcc_bootstrap.c"
 var $34=$3; //@line 1435 "tcc_bootstrap.c"
 var $35=($33|0)==($34|0); //@line 1435 "tcc_bootstrap.c"
 if($35){label=9;break;}else{label=11;break;} //@line 1435 "tcc_bootstrap.c"
 case 9: 
 var $37=$ts; //@line 1435 "tcc_bootstrap.c"
 var $38=(($37+28)|0); //@line 1435 "tcc_bootstrap.c"
 var $39=(($38)|0); //@line 1435 "tcc_bootstrap.c"
 var $40=$2; //@line 1435 "tcc_bootstrap.c"
 var $41=$3; //@line 1435 "tcc_bootstrap.c"
 var $42=_memcmp($39,$40,$41); //@line 1435 "tcc_bootstrap.c"
 var $43=($42|0)!=0; //@line 1435 "tcc_bootstrap.c"
 if($43){label=11;break;}else{label=10;break;} //@line 1435 "tcc_bootstrap.c"
 case 10: 
 var $45=$ts; //@line 1436 "tcc_bootstrap.c"
 $1=$45; //@line 1436 "tcc_bootstrap.c"
 label=13;break; //@line 1436 "tcc_bootstrap.c"
 case 11: 
 var $47=$ts; //@line 1437 "tcc_bootstrap.c"
 var $48=(($47)|0); //@line 1437 "tcc_bootstrap.c"
 $pts=$48; //@line 1437 "tcc_bootstrap.c"
 label=6;break; //@line 1438 "tcc_bootstrap.c"
 case 12: 
 var $50=$pts; //@line 1439 "tcc_bootstrap.c"
 var $51=$2; //@line 1439 "tcc_bootstrap.c"
 var $52=$3; //@line 1439 "tcc_bootstrap.c"
 var $53=_tok_alloc_new($50,$51,$52); //@line 1439 "tcc_bootstrap.c"
 $1=$53; //@line 1439 "tcc_bootstrap.c"
 label=13;break; //@line 1439 "tcc_bootstrap.c"
 case 13: 
 var $55=$1; //@line 1440 "tcc_bootstrap.c"
 STACKTOP=sp;return $55; //@line 1440 "tcc_bootstrap.c"
  default: assert(0, "bad label: " + label);
 }

}


function _tok_alloc_new($pts,$str,$len){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $ts;
 var $ptable;
 var $i;
 $1=$pts;
 $2=$str;
 $3=$len;
 var $4=HEAP32[((10456)>>2)]; //@line 1400 "tcc_bootstrap.c"
 var $5=($4|0)>=268435456; //@line 1400 "tcc_bootstrap.c"
 if($5){label=2;break;}else{label=3;break;} //@line 1400 "tcc_bootstrap.c"
 case 2: 
 _tcc_error(3920,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs; //@line 1401 "tcc_bootstrap.c"
 label=3;break; //@line 1401 "tcc_bootstrap.c"
 case 3: 
 var $8=HEAP32[((10456)>>2)]; //@line 1402 "tcc_bootstrap.c"
 var $9=((($8)-(256))|0); //@line 1402 "tcc_bootstrap.c"
 $i=$9; //@line 1402 "tcc_bootstrap.c"
 var $10=$i; //@line 1403 "tcc_bootstrap.c"
 var $11=(((($10|0))%(512))&-1); //@line 1403 "tcc_bootstrap.c"
 var $12=($11|0)==0; //@line 1403 "tcc_bootstrap.c"
 if($12){label=4;break;}else{label=5;break;} //@line 1403 "tcc_bootstrap.c"
 case 4: 
 var $14=HEAP32[((10496)>>2)]; //@line 1404 "tcc_bootstrap.c"
 var $15=$14; //@line 1404 "tcc_bootstrap.c"
 var $16=$i; //@line 1404 "tcc_bootstrap.c"
 var $17=((($16)+(512))|0); //@line 1404 "tcc_bootstrap.c"
 var $18=($17<<2); //@line 1404 "tcc_bootstrap.c"
 var $19=_tcc_realloc($15,$18); //@line 1404 "tcc_bootstrap.c"
 var $20=$19; //@line 1404 "tcc_bootstrap.c"
 $ptable=$20; //@line 1404 "tcc_bootstrap.c"
 var $21=$ptable; //@line 1405 "tcc_bootstrap.c"
 HEAP32[((10496)>>2)]=$21; //@line 1405 "tcc_bootstrap.c"
 label=5;break; //@line 1406 "tcc_bootstrap.c"
 case 5: 
 var $23=$3; //@line 1407 "tcc_bootstrap.c"
 var $24=((($23)+(32))|0); //@line 1407 "tcc_bootstrap.c"
 var $25=_tal_realloc_impl(9336,0,$24); //@line 1407 "tcc_bootstrap.c"
 var $26=$25; //@line 1407 "tcc_bootstrap.c"
 $ts=$26; //@line 1407 "tcc_bootstrap.c"
 var $27=$ts; //@line 1408 "tcc_bootstrap.c"
 var $28=$i; //@line 1408 "tcc_bootstrap.c"
 var $29=HEAP32[((10496)>>2)]; //@line 1408 "tcc_bootstrap.c"
 var $30=(($29+($28<<2))|0); //@line 1408 "tcc_bootstrap.c"
 HEAP32[(($30)>>2)]=$27; //@line 1408 "tcc_bootstrap.c"
 var $31=HEAP32[((10456)>>2)]; //@line 1409 "tcc_bootstrap.c"
 var $32=((($31)+(1))|0); //@line 1409 "tcc_bootstrap.c"
 HEAP32[((10456)>>2)]=$32; //@line 1409 "tcc_bootstrap.c"
 var $33=$ts; //@line 1409 "tcc_bootstrap.c"
 var $34=(($33+20)|0); //@line 1409 "tcc_bootstrap.c"
 HEAP32[(($34)>>2)]=$31; //@line 1409 "tcc_bootstrap.c"
 var $35=$ts; //@line 1410 "tcc_bootstrap.c"
 var $36=(($35+4)|0); //@line 1410 "tcc_bootstrap.c"
 HEAP32[(($36)>>2)]=0; //@line 1410 "tcc_bootstrap.c"
 var $37=$ts; //@line 1411 "tcc_bootstrap.c"
 var $38=(($37+8)|0); //@line 1411 "tcc_bootstrap.c"
 HEAP32[(($38)>>2)]=0; //@line 1411 "tcc_bootstrap.c"
 var $39=$ts; //@line 1412 "tcc_bootstrap.c"
 var $40=(($39+12)|0); //@line 1412 "tcc_bootstrap.c"
 HEAP32[(($40)>>2)]=0; //@line 1412 "tcc_bootstrap.c"
 var $41=$ts; //@line 1413 "tcc_bootstrap.c"
 var $42=(($41+16)|0); //@line 1413 "tcc_bootstrap.c"
 HEAP32[(($42)>>2)]=0; //@line 1413 "tcc_bootstrap.c"
 var $43=$3; //@line 1414 "tcc_bootstrap.c"
 var $44=$ts; //@line 1414 "tcc_bootstrap.c"
 var $45=(($44+24)|0); //@line 1414 "tcc_bootstrap.c"
 HEAP32[(($45)>>2)]=$43; //@line 1414 "tcc_bootstrap.c"
 var $46=$ts; //@line 1415 "tcc_bootstrap.c"
 var $47=(($46)|0); //@line 1415 "tcc_bootstrap.c"
 HEAP32[(($47)>>2)]=0; //@line 1415 "tcc_bootstrap.c"
 var $48=$ts; //@line 1416 "tcc_bootstrap.c"
 var $49=(($48+28)|0); //@line 1416 "tcc_bootstrap.c"
 var $50=$49; //@line 1416 "tcc_bootstrap.c"
 var $51=$2; //@line 1416 "tcc_bootstrap.c"
 var $52=$3; //@line 1416 "tcc_bootstrap.c"
 assert($52 % 1 === 0);(_memcpy($50, $51, $52)|0); //@line 1416 "tcc_bootstrap.c"
 var $53=$3; //@line 1417 "tcc_bootstrap.c"
 var $54=$ts; //@line 1417 "tcc_bootstrap.c"
 var $55=(($54+28)|0); //@line 1417 "tcc_bootstrap.c"
 var $56=(($55+$53)|0); //@line 1417 "tcc_bootstrap.c"
 HEAP8[(($56)>>0)]=0; //@line 1417 "tcc_bootstrap.c"
 var $57=$ts; //@line 1418 "tcc_bootstrap.c"
 var $58=$1; //@line 1418 "tcc_bootstrap.c"
 HEAP32[(($58)>>2)]=$57; //@line 1418 "tcc_bootstrap.c"
 var $59=$ts; //@line 1419 "tcc_bootstrap.c"
 STACKTOP=sp;return $59; //@line 1419 "tcc_bootstrap.c"
  default: assert(0, "bad label: " + label);
 }

}


function _new_section($s1,$name,$sh_type,$sh_flags){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $sec;
 $1=$s1;
 $2=$name;
 $3=$sh_type;
 $4=$sh_flags;
 var $5=$2; //@line 9302 "tcc_bootstrap.c"
 var $6=_strlen($5); //@line 9302 "tcc_bootstrap.c"
 var $7=((($6)+(76))|0); //@line 9302 "tcc_bootstrap.c"
 var $8=_tcc_mallocz($7); //@line 9302 "tcc_bootstrap.c"
 var $9=$8; //@line 9302 "tcc_bootstrap.c"
 $sec=$9; //@line 9302 "tcc_bootstrap.c"
 var $10=$sec; //@line 9303 "tcc_bootstrap.c"
 var $11=(($10+72)|0); //@line 9303 "tcc_bootstrap.c"
 var $12=(($11)|0); //@line 9303 "tcc_bootstrap.c"
 var $13=$2; //@line 9303 "tcc_bootstrap.c"
 var $14=_strcpy($12,$13); //@line 9303 "tcc_bootstrap.c"
 var $15=$3; //@line 9304 "tcc_bootstrap.c"
 var $16=$sec; //@line 9304 "tcc_bootstrap.c"
 var $17=(($16+20)|0); //@line 9304 "tcc_bootstrap.c"
 HEAP32[(($17)>>2)]=$15; //@line 9304 "tcc_bootstrap.c"
 var $18=$4; //@line 9305 "tcc_bootstrap.c"
 var $19=$sec; //@line 9305 "tcc_bootstrap.c"
 var $20=(($19+24)|0); //@line 9305 "tcc_bootstrap.c"
 HEAP32[(($20)>>2)]=$18; //@line 9305 "tcc_bootstrap.c"
 var $21=$3; //@line 9306 "tcc_bootstrap.c"
 switch(($21|0)){case 5:case 9:case 4:case 11:case 2:case 6:{ label=2;break;}case 3:{ label=3;break;}default:{label=4;break;}}break;
 case 2: 
 var $23=$sec; //@line 9313 "tcc_bootstrap.c"
 var $24=(($23+32)|0); //@line 9313 "tcc_bootstrap.c"
 HEAP32[(($24)>>2)]=4; //@line 9313 "tcc_bootstrap.c"
 label=5;break; //@line 9314 "tcc_bootstrap.c"
 case 3: 
 var $26=$sec; //@line 9316 "tcc_bootstrap.c"
 var $27=(($26+32)|0); //@line 9316 "tcc_bootstrap.c"
 HEAP32[(($27)>>2)]=1; //@line 9316 "tcc_bootstrap.c"
 label=5;break; //@line 9317 "tcc_bootstrap.c"
 case 4: 
 var $29=$sec; //@line 9319 "tcc_bootstrap.c"
 var $30=(($29+32)|0); //@line 9319 "tcc_bootstrap.c"
 HEAP32[(($30)>>2)]=4; //@line 9319 "tcc_bootstrap.c"
 label=5;break; //@line 9320 "tcc_bootstrap.c"
 case 5: 
 var $32=$4; //@line 9322 "tcc_bootstrap.c"
 var $33=$32&-2147483648; //@line 9322 "tcc_bootstrap.c"
 var $34=($33|0)!=0; //@line 9322 "tcc_bootstrap.c"
 if($34){label=6;break;}else{label=7;break;} //@line 9322 "tcc_bootstrap.c"
 case 6: 
 var $36=$1; //@line 9323 "tcc_bootstrap.c"
 var $37=(($36+688)|0); //@line 9323 "tcc_bootstrap.c"
 var $38=$37; //@line 9323 "tcc_bootstrap.c"
 var $39=$1; //@line 9323 "tcc_bootstrap.c"
 var $40=(($39+692)|0); //@line 9323 "tcc_bootstrap.c"
 var $41=$sec; //@line 9323 "tcc_bootstrap.c"
 var $42=$41; //@line 9323 "tcc_bootstrap.c"
 _dynarray_add($38,$40,$42); //@line 9323 "tcc_bootstrap.c"
 label=8;break; //@line 9324 "tcc_bootstrap.c"
 case 7: 
 var $44=$1; //@line 9325 "tcc_bootstrap.c"
 var $45=(($44+684)|0); //@line 9325 "tcc_bootstrap.c"
 var $46=HEAP32[(($45)>>2)]; //@line 9325 "tcc_bootstrap.c"
 var $47=$sec; //@line 9325 "tcc_bootstrap.c"
 var $48=(($47+16)|0); //@line 9325 "tcc_bootstrap.c"
 HEAP32[(($48)>>2)]=$46; //@line 9325 "tcc_bootstrap.c"
 var $49=$1; //@line 9326 "tcc_bootstrap.c"
 var $50=(($49+680)|0); //@line 9326 "tcc_bootstrap.c"
 var $51=$50; //@line 9326 "tcc_bootstrap.c"
 var $52=$1; //@line 9326 "tcc_bootstrap.c"
 var $53=(($52+684)|0); //@line 9326 "tcc_bootstrap.c"
 var $54=$sec; //@line 9326 "tcc_bootstrap.c"
 var $55=$54; //@line 9326 "tcc_bootstrap.c"
 _dynarray_add($51,$53,$55); //@line 9326 "tcc_bootstrap.c"
 label=8;break;
 case 8: 
 var $57=$sec; //@line 9328 "tcc_bootstrap.c"
 STACKTOP=sp;return $57; //@line 9328 "tcc_bootstrap.c"
  default: assert(0, "bad label: " + label);
 }

}


function _new_symtab($s1,$symtab_name,$sh_type,$sh_flags,$strtab_name,$hash_name,$hash_sh_flags){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 var $7;
 var $symtab;
 var $strtab;
 var $hash;
 var $ptr;
 var $nb_buckets;
 $1=$s1;
 $2=$symtab_name;
 $3=$sh_type;
 $4=$sh_flags;
 $5=$strtab_name;
 $6=$hash_name;
 $7=$hash_sh_flags;
 var $8=$1; //@line 9337 "tcc_bootstrap.c"
 var $9=$2; //@line 9337 "tcc_bootstrap.c"
 var $10=$3; //@line 9337 "tcc_bootstrap.c"
 var $11=$4; //@line 9337 "tcc_bootstrap.c"
 var $12=_new_section($8,$9,$10,$11); //@line 9337 "tcc_bootstrap.c"
 $symtab=$12; //@line 9337 "tcc_bootstrap.c"
 var $13=$symtab; //@line 9338 "tcc_bootstrap.c"
 var $14=(($13+36)|0); //@line 9338 "tcc_bootstrap.c"
 HEAP32[(($14)>>2)]=16; //@line 9338 "tcc_bootstrap.c"
 var $15=$1; //@line 9339 "tcc_bootstrap.c"
 var $16=$5; //@line 9339 "tcc_bootstrap.c"
 var $17=$4; //@line 9339 "tcc_bootstrap.c"
 var $18=_new_section($15,$16,3,$17); //@line 9339 "tcc_bootstrap.c"
 $strtab=$18; //@line 9339 "tcc_bootstrap.c"
 var $19=$strtab; //@line 9340 "tcc_bootstrap.c"
 var $20=_put_elf_str($19,76760); //@line 9340 "tcc_bootstrap.c"
 var $21=$strtab; //@line 9341 "tcc_bootstrap.c"
 var $22=$symtab; //@line 9341 "tcc_bootstrap.c"
 var $23=(($22+56)|0); //@line 9341 "tcc_bootstrap.c"
 HEAP32[(($23)>>2)]=$21; //@line 9341 "tcc_bootstrap.c"
 var $24=$symtab; //@line 9342 "tcc_bootstrap.c"
 var $25=_put_elf_sym($24,0,0,0,0,0,0); //@line 9342 "tcc_bootstrap.c"
 $nb_buckets=1; //@line 9343 "tcc_bootstrap.c"
 var $26=$1; //@line 9344 "tcc_bootstrap.c"
 var $27=$6; //@line 9344 "tcc_bootstrap.c"
 var $28=$7; //@line 9344 "tcc_bootstrap.c"
 var $29=_new_section($26,$27,5,$28); //@line 9344 "tcc_bootstrap.c"
 $hash=$29; //@line 9344 "tcc_bootstrap.c"
 var $30=$hash; //@line 9345 "tcc_bootstrap.c"
 var $31=(($30+36)|0); //@line 9345 "tcc_bootstrap.c"
 HEAP32[(($31)>>2)]=4; //@line 9345 "tcc_bootstrap.c"
 var $32=$hash; //@line 9346 "tcc_bootstrap.c"
 var $33=$symtab; //@line 9346 "tcc_bootstrap.c"
 var $34=(($33+64)|0); //@line 9346 "tcc_bootstrap.c"
 HEAP32[(($34)>>2)]=$32; //@line 9346 "tcc_bootstrap.c"
 var $35=$symtab; //@line 9347 "tcc_bootstrap.c"
 var $36=$hash; //@line 9347 "tcc_bootstrap.c"
 var $37=(($36+56)|0); //@line 9347 "tcc_bootstrap.c"
 HEAP32[(($37)>>2)]=$35; //@line 9347 "tcc_bootstrap.c"
 var $38=$hash; //@line 9348 "tcc_bootstrap.c"
 var $39=$nb_buckets; //@line 9348 "tcc_bootstrap.c"
 var $40=((($39)+(2))|0); //@line 9348 "tcc_bootstrap.c"
 var $41=((($40)+(1))|0); //@line 9348 "tcc_bootstrap.c"
 var $42=($41<<2); //@line 9348 "tcc_bootstrap.c"
 var $43=_section_ptr_add($38,$42); //@line 9348 "tcc_bootstrap.c"
 var $44=$43; //@line 9348 "tcc_bootstrap.c"
 $ptr=$44; //@line 9348 "tcc_bootstrap.c"
 var $45=$nb_buckets; //@line 9349 "tcc_bootstrap.c"
 var $46=$ptr; //@line 9349 "tcc_bootstrap.c"
 var $47=(($46)|0); //@line 9349 "tcc_bootstrap.c"
 HEAP32[(($47)>>2)]=$45; //@line 9349 "tcc_bootstrap.c"
 var $48=$ptr; //@line 9350 "tcc_bootstrap.c"
 var $49=(($48+4)|0); //@line 9350 "tcc_bootstrap.c"
 HEAP32[(($49)>>2)]=1; //@line 9350 "tcc_bootstrap.c"
 var $50=$ptr; //@line 9351 "tcc_bootstrap.c"
 var $51=(($50+8)|0); //@line 9351 "tcc_bootstrap.c"
 var $52=$51; //@line 9351 "tcc_bootstrap.c"
 var $53=$nb_buckets; //@line 9351 "tcc_bootstrap.c"
 var $54=((($53)+(1))|0); //@line 9351 "tcc_bootstrap.c"
 var $55=($54<<2); //@line 9351 "tcc_bootstrap.c"
 _memset($52, 0, $55)|0; //@line 9351 "tcc_bootstrap.c"
 var $56=$symtab; //@line 9352 "tcc_bootstrap.c"
 STACKTOP=sp;return $56; //@line 9352 "tcc_bootstrap.c"
}


function _put_elf_str($s,$sym){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 var $2;
 var $offset;
 var $len;
 var $ptr;
 $1=$s;
 $2=$sym;
 var $3=$2; //@line 9396 "tcc_bootstrap.c"
 var $4=_strlen($3); //@line 9396 "tcc_bootstrap.c"
 var $5=((($4)+(1))|0); //@line 9396 "tcc_bootstrap.c"
 $len=$5; //@line 9396 "tcc_bootstrap.c"
 var $6=$1; //@line 9397 "tcc_bootstrap.c"
 var $7=(($6)|0); //@line 9397 "tcc_bootstrap.c"
 var $8=HEAP32[(($7)>>2)]; //@line 9397 "tcc_bootstrap.c"
 $offset=$8; //@line 9397 "tcc_bootstrap.c"
 var $9=$1; //@line 9398 "tcc_bootstrap.c"
 var $10=$len; //@line 9398 "tcc_bootstrap.c"
 var $11=_section_ptr_add($9,$10); //@line 9398 "tcc_bootstrap.c"
 $ptr=$11; //@line 9398 "tcc_bootstrap.c"
 var $12=$ptr; //@line 9399 "tcc_bootstrap.c"
 var $13=$2; //@line 9399 "tcc_bootstrap.c"
 var $14=$len; //@line 9399 "tcc_bootstrap.c"
 _memmove($12,$13,$14,1,0); //@line 9399 "tcc_bootstrap.c"
 var $15=$offset; //@line 9400 "tcc_bootstrap.c"
 STACKTOP=sp;return $15; //@line 9400 "tcc_bootstrap.c"
}


function _put_elf_sym($s,$value,$size,$info,$other,$shndx,$name){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 var $7;
 var $name_offset;
 var $sym_index;
 var $nbuckets;
 var $h;
 var $sym;
 var $hs;
 var $ptr;
 var $base;
 $1=$s;
 $2=$value;
 $3=$size;
 $4=$info;
 $5=$other;
 $6=$shndx;
 $7=$name;
 var $8=$1; //@line 9451 "tcc_bootstrap.c"
 var $9=_section_ptr_add($8,16); //@line 9451 "tcc_bootstrap.c"
 var $10=$9; //@line 9451 "tcc_bootstrap.c"
 $sym=$10; //@line 9451 "tcc_bootstrap.c"
 var $11=$7; //@line 9452 "tcc_bootstrap.c"
 var $12=($11|0)!=0; //@line 9452 "tcc_bootstrap.c"
 if($12){label=2;break;}else{label=4;break;} //@line 9452 "tcc_bootstrap.c"
 case 2: 
 var $14=$7; //@line 9452 "tcc_bootstrap.c"
 var $15=(($14)|0); //@line 9452 "tcc_bootstrap.c"
 var $16=HEAP8[(($15)>>0)]; //@line 9452 "tcc_bootstrap.c"
 var $17=(($16<<24)>>24); //@line 9452 "tcc_bootstrap.c"
 var $18=($17|0)!=0; //@line 9452 "tcc_bootstrap.c"
 if($18){label=3;break;}else{label=4;break;} //@line 9452 "tcc_bootstrap.c"
 case 3: 
 var $20=$1; //@line 9453 "tcc_bootstrap.c"
 var $21=(($20+56)|0); //@line 9453 "tcc_bootstrap.c"
 var $22=HEAP32[(($21)>>2)]; //@line 9453 "tcc_bootstrap.c"
 var $23=$7; //@line 9453 "tcc_bootstrap.c"
 var $24=_put_elf_str($22,$23); //@line 9453 "tcc_bootstrap.c"
 $name_offset=$24; //@line 9453 "tcc_bootstrap.c"
 label=5;break; //@line 9453 "tcc_bootstrap.c"
 case 4: 
 $name_offset=0; //@line 9455 "tcc_bootstrap.c"
 label=5;break;
 case 5: 
 var $27=$name_offset; //@line 9456 "tcc_bootstrap.c"
 var $28=$sym; //@line 9456 "tcc_bootstrap.c"
 var $29=(($28)|0); //@line 9456 "tcc_bootstrap.c"
 HEAP32[(($29)>>2)]=$27; //@line 9456 "tcc_bootstrap.c"
 var $30=$2; //@line 9457 "tcc_bootstrap.c"
 var $31=$sym; //@line 9457 "tcc_bootstrap.c"
 var $32=(($31+4)|0); //@line 9457 "tcc_bootstrap.c"
 HEAP32[(($32)>>2)]=$30; //@line 9457 "tcc_bootstrap.c"
 var $33=$3; //@line 9458 "tcc_bootstrap.c"
 var $34=$sym; //@line 9458 "tcc_bootstrap.c"
 var $35=(($34+8)|0); //@line 9458 "tcc_bootstrap.c"
 HEAP32[(($35)>>2)]=$33; //@line 9458 "tcc_bootstrap.c"
 var $36=$4; //@line 9459 "tcc_bootstrap.c"
 var $37=(($36)&255); //@line 9459 "tcc_bootstrap.c"
 var $38=$sym; //@line 9459 "tcc_bootstrap.c"
 var $39=(($38+12)|0); //@line 9459 "tcc_bootstrap.c"
 HEAP8[(($39)>>0)]=$37; //@line 9459 "tcc_bootstrap.c"
 var $40=$5; //@line 9460 "tcc_bootstrap.c"
 var $41=(($40)&255); //@line 9460 "tcc_bootstrap.c"
 var $42=$sym; //@line 9460 "tcc_bootstrap.c"
 var $43=(($42+13)|0); //@line 9460 "tcc_bootstrap.c"
 HEAP8[(($43)>>0)]=$41; //@line 9460 "tcc_bootstrap.c"
 var $44=$6; //@line 9461 "tcc_bootstrap.c"
 var $45=(($44)&65535); //@line 9461 "tcc_bootstrap.c"
 var $46=$sym; //@line 9461 "tcc_bootstrap.c"
 var $47=(($46+14)|0); //@line 9461 "tcc_bootstrap.c"
 HEAP16[(($47)>>1)]=$45; //@line 9461 "tcc_bootstrap.c"
 var $48=$sym; //@line 9462 "tcc_bootstrap.c"
 var $49=$1; //@line 9462 "tcc_bootstrap.c"
 var $50=(($49+4)|0); //@line 9462 "tcc_bootstrap.c"
 var $51=HEAP32[(($50)>>2)]; //@line 9462 "tcc_bootstrap.c"
 var $52=$51; //@line 9462 "tcc_bootstrap.c"
 var $53=$48; //@line 9462 "tcc_bootstrap.c"
 var $54=$52; //@line 9462 "tcc_bootstrap.c"
 var $55=((($53)-($54))|0); //@line 9462 "tcc_bootstrap.c"
 var $56=(((($55|0))/(16))&-1); //@line 9462 "tcc_bootstrap.c"
 $sym_index=$56; //@line 9462 "tcc_bootstrap.c"
 var $57=$1; //@line 9463 "tcc_bootstrap.c"
 var $58=(($57+64)|0); //@line 9463 "tcc_bootstrap.c"
 var $59=HEAP32[(($58)>>2)]; //@line 9463 "tcc_bootstrap.c"
 $hs=$59; //@line 9463 "tcc_bootstrap.c"
 var $60=$hs; //@line 9464 "tcc_bootstrap.c"
 var $61=($60|0)!=0; //@line 9464 "tcc_bootstrap.c"
 if($61){label=6;break;}else{label=12;break;} //@line 9464 "tcc_bootstrap.c"
 case 6: 
 var $63=$hs; //@line 9466 "tcc_bootstrap.c"
 var $64=_section_ptr_add($63,4); //@line 9466 "tcc_bootstrap.c"
 var $65=$64; //@line 9466 "tcc_bootstrap.c"
 $ptr=$65; //@line 9466 "tcc_bootstrap.c"
 var $66=$hs; //@line 9467 "tcc_bootstrap.c"
 var $67=(($66+4)|0); //@line 9467 "tcc_bootstrap.c"
 var $68=HEAP32[(($67)>>2)]; //@line 9467 "tcc_bootstrap.c"
 var $69=$68; //@line 9467 "tcc_bootstrap.c"
 $base=$69; //@line 9467 "tcc_bootstrap.c"
 var $70=$4; //@line 9468 "tcc_bootstrap.c"
 var $71=(($70)&255); //@line 9468 "tcc_bootstrap.c"
 var $72=($71&255); //@line 9468 "tcc_bootstrap.c"
 var $73=$72>>4; //@line 9468 "tcc_bootstrap.c"
 var $74=($73|0)!=0; //@line 9468 "tcc_bootstrap.c"
 if($74){label=7;break;}else{label=10;break;} //@line 9468 "tcc_bootstrap.c"
 case 7: 
 var $76=$base; //@line 9469 "tcc_bootstrap.c"
 var $77=(($76)|0); //@line 9469 "tcc_bootstrap.c"
 var $78=HEAP32[(($77)>>2)]; //@line 9469 "tcc_bootstrap.c"
 $nbuckets=$78; //@line 9469 "tcc_bootstrap.c"
 var $79=$1; //@line 9470 "tcc_bootstrap.c"
 var $80=(($79+56)|0); //@line 9470 "tcc_bootstrap.c"
 var $81=HEAP32[(($80)>>2)]; //@line 9470 "tcc_bootstrap.c"
 var $82=(($81+4)|0); //@line 9470 "tcc_bootstrap.c"
 var $83=HEAP32[(($82)>>2)]; //@line 9470 "tcc_bootstrap.c"
 var $84=$name_offset; //@line 9470 "tcc_bootstrap.c"
 var $85=(($83+$84)|0); //@line 9470 "tcc_bootstrap.c"
 var $86=_elf_hash($85); //@line 9470 "tcc_bootstrap.c"
 var $87=$nbuckets; //@line 9470 "tcc_bootstrap.c"
 var $88=(((($86>>>0))%(($87>>>0)))&-1); //@line 9470 "tcc_bootstrap.c"
 $h=$88; //@line 9470 "tcc_bootstrap.c"
 var $89=$h; //@line 9471 "tcc_bootstrap.c"
 var $90=((($89)+(2))|0); //@line 9471 "tcc_bootstrap.c"
 var $91=$base; //@line 9471 "tcc_bootstrap.c"
 var $92=(($91+($90<<2))|0); //@line 9471 "tcc_bootstrap.c"
 var $93=HEAP32[(($92)>>2)]; //@line 9471 "tcc_bootstrap.c"
 var $94=$ptr; //@line 9471 "tcc_bootstrap.c"
 HEAP32[(($94)>>2)]=$93; //@line 9471 "tcc_bootstrap.c"
 var $95=$sym_index; //@line 9472 "tcc_bootstrap.c"
 var $96=$h; //@line 9472 "tcc_bootstrap.c"
 var $97=((($96)+(2))|0); //@line 9472 "tcc_bootstrap.c"
 var $98=$base; //@line 9472 "tcc_bootstrap.c"
 var $99=(($98+($97<<2))|0); //@line 9472 "tcc_bootstrap.c"
 HEAP32[(($99)>>2)]=$95; //@line 9472 "tcc_bootstrap.c"
 var $100=$base; //@line 9473 "tcc_bootstrap.c"
 var $101=(($100+4)|0); //@line 9473 "tcc_bootstrap.c"
 var $102=HEAP32[(($101)>>2)]; //@line 9473 "tcc_bootstrap.c"
 var $103=((($102)+(1))|0); //@line 9473 "tcc_bootstrap.c"
 HEAP32[(($101)>>2)]=$103; //@line 9473 "tcc_bootstrap.c"
 var $104=$hs; //@line 9474 "tcc_bootstrap.c"
 var $105=(($104+52)|0); //@line 9474 "tcc_bootstrap.c"
 var $106=HEAP32[(($105)>>2)]; //@line 9474 "tcc_bootstrap.c"
 var $107=((($106)+(1))|0); //@line 9474 "tcc_bootstrap.c"
 HEAP32[(($105)>>2)]=$107; //@line 9474 "tcc_bootstrap.c"
 var $108=$hs; //@line 9475 "tcc_bootstrap.c"
 var $109=(($108+52)|0); //@line 9475 "tcc_bootstrap.c"
 var $110=HEAP32[(($109)>>2)]; //@line 9475 "tcc_bootstrap.c"
 var $111=$nbuckets; //@line 9475 "tcc_bootstrap.c"
 var $112=($111<<1); //@line 9475 "tcc_bootstrap.c"
 var $113=($110|0)>($112|0); //@line 9475 "tcc_bootstrap.c"
 if($113){label=8;break;}else{label=9;break;} //@line 9475 "tcc_bootstrap.c"
 case 8: 
 var $115=$1; //@line 9476 "tcc_bootstrap.c"
 var $116=$nbuckets; //@line 9476 "tcc_bootstrap.c"
 var $117=($116<<1); //@line 9476 "tcc_bootstrap.c"
 _rebuild_hash($115,$117); //@line 9476 "tcc_bootstrap.c"
 label=9;break; //@line 9477 "tcc_bootstrap.c"
 case 9: 
 label=11;break; //@line 9478 "tcc_bootstrap.c"
 case 10: 
 var $120=$ptr; //@line 9479 "tcc_bootstrap.c"
 HEAP32[(($120)>>2)]=0; //@line 9479 "tcc_bootstrap.c"
 var $121=$base; //@line 9480 "tcc_bootstrap.c"
 var $122=(($121+4)|0); //@line 9480 "tcc_bootstrap.c"
 var $123=HEAP32[(($122)>>2)]; //@line 9480 "tcc_bootstrap.c"
 var $124=((($123)+(1))|0); //@line 9480 "tcc_bootstrap.c"
 HEAP32[(($122)>>2)]=$124; //@line 9480 "tcc_bootstrap.c"
 label=11;break;
 case 11: 
 label=12;break; //@line 9482 "tcc_bootstrap.c"
 case 12: 
 var $127=$sym_index; //@line 9483 "tcc_bootstrap.c"
 STACKTOP=sp;return $127; //@line 9483 "tcc_bootstrap.c"
  default: assert(0, "bad label: " + label);
 }

}


function _section_ptr_add($sec,$size){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 var $2;
 var $offset;
 $1=$sec;
 $2=$size;
 var $3=$1; //@line 9382 "tcc_bootstrap.c"
 var $4=$2; //@line 9382 "tcc_bootstrap.c"
 var $5=_section_add($3,$4,1); //@line 9382 "tcc_bootstrap.c"
 $offset=$5; //@line 9382 "tcc_bootstrap.c"
 var $6=$1; //@line 9383 "tcc_bootstrap.c"
 var $7=(($6+4)|0); //@line 9383 "tcc_bootstrap.c"
 var $8=HEAP32[(($7)>>2)]; //@line 9383 "tcc_bootstrap.c"
 var $9=$offset; //@line 9383 "tcc_bootstrap.c"
 var $10=(($8+$9)|0); //@line 9383 "tcc_bootstrap.c"
 STACKTOP=sp;return $10; //@line 9383 "tcc_bootstrap.c"
}


function _section_add($sec,$size,$align){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $offset;
 var $offset1;
 $1=$sec;
 $2=$size;
 $3=$align;
 var $4=$1; //@line 9371 "tcc_bootstrap.c"
 var $5=(($4)|0); //@line 9371 "tcc_bootstrap.c"
 var $6=HEAP32[(($5)>>2)]; //@line 9371 "tcc_bootstrap.c"
 var $7=$3; //@line 9371 "tcc_bootstrap.c"
 var $8=((($6)+($7))|0); //@line 9371 "tcc_bootstrap.c"
 var $9=((($8)-(1))|0); //@line 9371 "tcc_bootstrap.c"
 var $10=$3; //@line 9371 "tcc_bootstrap.c"
 var $11=(((-$10))|0); //@line 9371 "tcc_bootstrap.c"
 var $12=$9&$11; //@line 9371 "tcc_bootstrap.c"
 $offset=$12; //@line 9371 "tcc_bootstrap.c"
 var $13=$offset; //@line 9372 "tcc_bootstrap.c"
 var $14=$2; //@line 9372 "tcc_bootstrap.c"
 var $15=((($13)+($14))|0); //@line 9372 "tcc_bootstrap.c"
 $offset1=$15; //@line 9372 "tcc_bootstrap.c"
 var $16=$1; //@line 9373 "tcc_bootstrap.c"
 var $17=(($16+20)|0); //@line 9373 "tcc_bootstrap.c"
 var $18=HEAP32[(($17)>>2)]; //@line 9373 "tcc_bootstrap.c"
 var $19=($18|0)!=8; //@line 9373 "tcc_bootstrap.c"
 if($19){label=2;break;}else{label=4;break;} //@line 9373 "tcc_bootstrap.c"
 case 2: 
 var $21=$offset1; //@line 9373 "tcc_bootstrap.c"
 var $22=$1; //@line 9373 "tcc_bootstrap.c"
 var $23=(($22+8)|0); //@line 9373 "tcc_bootstrap.c"
 var $24=HEAP32[(($23)>>2)]; //@line 9373 "tcc_bootstrap.c"
 var $25=($21>>>0)>($24>>>0); //@line 9373 "tcc_bootstrap.c"
 if($25){label=3;break;}else{label=4;break;} //@line 9373 "tcc_bootstrap.c"
 case 3: 
 var $27=$1; //@line 9374 "tcc_bootstrap.c"
 var $28=$offset1; //@line 9374 "tcc_bootstrap.c"
 _section_realloc($27,$28); //@line 9374 "tcc_bootstrap.c"
 label=4;break; //@line 9374 "tcc_bootstrap.c"
 case 4: 
 var $30=$offset1; //@line 9375 "tcc_bootstrap.c"
 var $31=$1; //@line 9375 "tcc_bootstrap.c"
 var $32=(($31)|0); //@line 9375 "tcc_bootstrap.c"
 HEAP32[(($32)>>2)]=$30; //@line 9375 "tcc_bootstrap.c"
 var $33=$3; //@line 9376 "tcc_bootstrap.c"
 var $34=$1; //@line 9376 "tcc_bootstrap.c"
 var $35=(($34+32)|0); //@line 9376 "tcc_bootstrap.c"
 var $36=HEAP32[(($35)>>2)]; //@line 9376 "tcc_bootstrap.c"
 var $37=($33|0)>($36|0); //@line 9376 "tcc_bootstrap.c"
 if($37){label=5;break;}else{label=6;break;} //@line 9376 "tcc_bootstrap.c"
 case 5: 
 var $39=$3; //@line 9377 "tcc_bootstrap.c"
 var $40=$1; //@line 9377 "tcc_bootstrap.c"
 var $41=(($40+32)|0); //@line 9377 "tcc_bootstrap.c"
 HEAP32[(($41)>>2)]=$39; //@line 9377 "tcc_bootstrap.c"
 label=6;break; //@line 9377 "tcc_bootstrap.c"
 case 6: 
 var $43=$offset; //@line 9378 "tcc_bootstrap.c"
 STACKTOP=sp;return $43; //@line 9378 "tcc_bootstrap.c"
  default: assert(0, "bad label: " + label);
 }

}


function _section_realloc($sec,$new_size){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $size;
 var $data;
 $1=$sec;
 $2=$new_size;
 var $3=$1; //@line 9358 "tcc_bootstrap.c"
 var $4=(($3+8)|0); //@line 9358 "tcc_bootstrap.c"
 var $5=HEAP32[(($4)>>2)]; //@line 9358 "tcc_bootstrap.c"
 $size=$5; //@line 9358 "tcc_bootstrap.c"
 var $6=$size; //@line 9359 "tcc_bootstrap.c"
 var $7=($6|0)==0; //@line 9359 "tcc_bootstrap.c"
 if($7){label=2;break;}else{label=3;break;} //@line 9359 "tcc_bootstrap.c"
 case 2: 
 $size=1; //@line 9360 "tcc_bootstrap.c"
 label=3;break; //@line 9360 "tcc_bootstrap.c"
 case 3: 
 label=4;break; //@line 9361 "tcc_bootstrap.c"
 case 4: 
 var $11=$size; //@line 9361 "tcc_bootstrap.c"
 var $12=$2; //@line 9361 "tcc_bootstrap.c"
 var $13=($11>>>0)<($12>>>0); //@line 9361 "tcc_bootstrap.c"
 if($13){label=5;break;}else{label=6;break;} //@line 9361 "tcc_bootstrap.c"
 case 5: 
 var $15=$size; //@line 9362 "tcc_bootstrap.c"
 var $16=($15<<1); //@line 9362 "tcc_bootstrap.c"
 $size=$16; //@line 9362 "tcc_bootstrap.c"
 label=4;break; //@line 9362 "tcc_bootstrap.c"
 case 6: 
 var $18=$1; //@line 9363 "tcc_bootstrap.c"
 var $19=(($18+4)|0); //@line 9363 "tcc_bootstrap.c"
 var $20=HEAP32[(($19)>>2)]; //@line 9363 "tcc_bootstrap.c"
 var $21=$size; //@line 9363 "tcc_bootstrap.c"
 var $22=_tcc_realloc($20,$21); //@line 9363 "tcc_bootstrap.c"
 $data=$22; //@line 9363 "tcc_bootstrap.c"
 var $23=$data; //@line 9364 "tcc_bootstrap.c"
 var $24=$1; //@line 9364 "tcc_bootstrap.c"
 var $25=(($24+8)|0); //@line 9364 "tcc_bootstrap.c"
 var $26=HEAP32[(($25)>>2)]; //@line 9364 "tcc_bootstrap.c"
 var $27=(($23+$26)|0); //@line 9364 "tcc_bootstrap.c"
 var $28=$size; //@line 9364 "tcc_bootstrap.c"
 var $29=$1; //@line 9364 "tcc_bootstrap.c"
 var $30=(($29+8)|0); //@line 9364 "tcc_bootstrap.c"
 var $31=HEAP32[(($30)>>2)]; //@line 9364 "tcc_bootstrap.c"
 var $32=((($28)-($31))|0); //@line 9364 "tcc_bootstrap.c"
 _memset($27, 0, $32)|0; //@line 9364 "tcc_bootstrap.c"
 var $33=$data; //@line 9365 "tcc_bootstrap.c"
 var $34=$1; //@line 9365 "tcc_bootstrap.c"
 var $35=(($34+4)|0); //@line 9365 "tcc_bootstrap.c"
 HEAP32[(($35)>>2)]=$33; //@line 9365 "tcc_bootstrap.c"
 var $36=$size; //@line 9366 "tcc_bootstrap.c"
 var $37=$1; //@line 9366 "tcc_bootstrap.c"
 var $38=(($37+8)|0); //@line 9366 "tcc_bootstrap.c"
 HEAP32[(($38)>>2)]=$36; //@line 9366 "tcc_bootstrap.c"
 STACKTOP=sp;return; //@line 9367 "tcc_bootstrap.c"
  default: assert(0, "bad label: " + label);
 }

}


function _elf_hash($name){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $h;
 var $g;
 $1=$name;
 $h=0; //@line 9404 "tcc_bootstrap.c"
 label=2;break; //@line 9405 "tcc_bootstrap.c"
 case 2: 
 var $3=$1; //@line 9405 "tcc_bootstrap.c"
 var $4=HEAP8[(($3)>>0)]; //@line 9405 "tcc_bootstrap.c"
 var $5=(($4<<24)>>24)!=0; //@line 9405 "tcc_bootstrap.c"
 if($5){label=3;break;}else{label=6;break;} //@line 9405 "tcc_bootstrap.c"
 case 3: 
 var $7=$h; //@line 9406 "tcc_bootstrap.c"
 var $8=$7<<4; //@line 9406 "tcc_bootstrap.c"
 var $9=$1; //@line 9406 "tcc_bootstrap.c"
 var $10=(($9+1)|0); //@line 9406 "tcc_bootstrap.c"
 $1=$10; //@line 9406 "tcc_bootstrap.c"
 var $11=HEAP8[(($9)>>0)]; //@line 9406 "tcc_bootstrap.c"
 var $12=($11&255); //@line 9406 "tcc_bootstrap.c"
 var $13=((($8)+($12))|0); //@line 9406 "tcc_bootstrap.c"
 $h=$13; //@line 9406 "tcc_bootstrap.c"
 var $14=$h; //@line 9407 "tcc_bootstrap.c"
 var $15=$14&-268435456; //@line 9407 "tcc_bootstrap.c"
 $g=$15; //@line 9407 "tcc_bootstrap.c"
 var $16=$g; //@line 9408 "tcc_bootstrap.c"
 var $17=($16|0)!=0; //@line 9408 "tcc_bootstrap.c"
 if($17){label=4;break;}else{label=5;break;} //@line 9408 "tcc_bootstrap.c"
 case 4: 
 var $19=$g; //@line 9409 "tcc_bootstrap.c"
 var $20=$19>>>24; //@line 9409 "tcc_bootstrap.c"
 var $21=$h; //@line 9409 "tcc_bootstrap.c"
 var $22=$21^$20; //@line 9409 "tcc_bootstrap.c"
 $h=$22; //@line 9409 "tcc_bootstrap.c"
 label=5;break; //@line 9409 "tcc_bootstrap.c"
 case 5: 
 var $24=$g; //@line 9410 "tcc_bootstrap.c"
 var $25=$24^-1; //@line 9410 "tcc_bootstrap.c"
 var $26=$h; //@line 9410 "tcc_bootstrap.c"
 var $27=$26&$25; //@line 9410 "tcc_bootstrap.c"
 $h=$27; //@line 9410 "tcc_bootstrap.c"
 label=2;break; //@line 9411 "tcc_bootstrap.c"
 case 6: 
 var $29=$h; //@line 9412 "tcc_bootstrap.c"
 STACKTOP=sp;return $29; //@line 9412 "tcc_bootstrap.c"
  default: assert(0, "bad label: " + label);
 }

}


function _rebuild_hash($s,$nb_buckets){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $sym;
 var $ptr;
 var $hash;
 var $nb_syms;
 var $sym_index;
 var $h;
 var $strtab;
 $1=$s;
 $2=$nb_buckets;
 var $3=$1; //@line 9419 "tcc_bootstrap.c"
 var $4=(($3+56)|0); //@line 9419 "tcc_bootstrap.c"
 var $5=HEAP32[(($4)>>2)]; //@line 9419 "tcc_bootstrap.c"
 var $6=(($5+4)|0); //@line 9419 "tcc_bootstrap.c"
 var $7=HEAP32[(($6)>>2)]; //@line 9419 "tcc_bootstrap.c"
 $strtab=$7; //@line 9419 "tcc_bootstrap.c"
 var $8=$1; //@line 9420 "tcc_bootstrap.c"
 var $9=(($8)|0); //@line 9420 "tcc_bootstrap.c"
 var $10=HEAP32[(($9)>>2)]; //@line 9420 "tcc_bootstrap.c"
 var $11=(((($10>>>0))/(16))&-1); //@line 9420 "tcc_bootstrap.c"
 $nb_syms=$11; //@line 9420 "tcc_bootstrap.c"
 var $12=$2; //@line 9421 "tcc_bootstrap.c"
 var $13=($12|0)!=0; //@line 9421 "tcc_bootstrap.c"
 if($13){label=3;break;}else{label=2;break;} //@line 9421 "tcc_bootstrap.c"
 case 2: 
 var $15=$1; //@line 9422 "tcc_bootstrap.c"
 var $16=(($15+64)|0); //@line 9422 "tcc_bootstrap.c"
 var $17=HEAP32[(($16)>>2)]; //@line 9422 "tcc_bootstrap.c"
 var $18=(($17+4)|0); //@line 9422 "tcc_bootstrap.c"
 var $19=HEAP32[(($18)>>2)]; //@line 9422 "tcc_bootstrap.c"
 var $20=$19; //@line 9422 "tcc_bootstrap.c"
 var $21=(($20)|0); //@line 9422 "tcc_bootstrap.c"
 var $22=HEAP32[(($21)>>2)]; //@line 9422 "tcc_bootstrap.c"
 $2=$22; //@line 9422 "tcc_bootstrap.c"
 label=3;break; //@line 9422 "tcc_bootstrap.c"
 case 3: 
 var $24=$1; //@line 9423 "tcc_bootstrap.c"
 var $25=(($24+64)|0); //@line 9423 "tcc_bootstrap.c"
 var $26=HEAP32[(($25)>>2)]; //@line 9423 "tcc_bootstrap.c"
 var $27=(($26)|0); //@line 9423 "tcc_bootstrap.c"
 HEAP32[(($27)>>2)]=0; //@line 9423 "tcc_bootstrap.c"
 var $28=$1; //@line 9424 "tcc_bootstrap.c"
 var $29=(($28+64)|0); //@line 9424 "tcc_bootstrap.c"
 var $30=HEAP32[(($29)>>2)]; //@line 9424 "tcc_bootstrap.c"
 var $31=$2; //@line 9424 "tcc_bootstrap.c"
 var $32=((($31)+(2))|0); //@line 9424 "tcc_bootstrap.c"
 var $33=$nb_syms; //@line 9424 "tcc_bootstrap.c"
 var $34=((($32)+($33))|0); //@line 9424 "tcc_bootstrap.c"
 var $35=($34<<2); //@line 9424 "tcc_bootstrap.c"
 var $36=_section_ptr_add($30,$35); //@line 9424 "tcc_bootstrap.c"
 var $37=$36; //@line 9424 "tcc_bootstrap.c"
 $ptr=$37; //@line 9424 "tcc_bootstrap.c"
 var $38=$2; //@line 9425 "tcc_bootstrap.c"
 var $39=$ptr; //@line 9425 "tcc_bootstrap.c"
 var $40=(($39)|0); //@line 9425 "tcc_bootstrap.c"
 HEAP32[(($40)>>2)]=$38; //@line 9425 "tcc_bootstrap.c"
 var $41=$nb_syms; //@line 9426 "tcc_bootstrap.c"
 var $42=$ptr; //@line 9426 "tcc_bootstrap.c"
 var $43=(($42+4)|0); //@line 9426 "tcc_bootstrap.c"
 HEAP32[(($43)>>2)]=$41; //@line 9426 "tcc_bootstrap.c"
 var $44=$ptr; //@line 9427 "tcc_bootstrap.c"
 var $45=(($44+8)|0); //@line 9427 "tcc_bootstrap.c"
 $ptr=$45; //@line 9427 "tcc_bootstrap.c"
 var $46=$ptr; //@line 9428 "tcc_bootstrap.c"
 $hash=$46; //@line 9428 "tcc_bootstrap.c"
 var $47=$hash; //@line 9429 "tcc_bootstrap.c"
 var $48=$47; //@line 9429 "tcc_bootstrap.c"
 var $49=$2; //@line 9429 "tcc_bootstrap.c"
 var $50=((($49)+(1))|0); //@line 9429 "tcc_bootstrap.c"
 var $51=($50<<2); //@line 9429 "tcc_bootstrap.c"
 _memset($48, 0, $51)|0; //@line 9429 "tcc_bootstrap.c"
 var $52=$2; //@line 9430 "tcc_bootstrap.c"
 var $53=((($52)+(1))|0); //@line 9430 "tcc_bootstrap.c"
 var $54=$ptr; //@line 9430 "tcc_bootstrap.c"
 var $55=(($54+($53<<2))|0); //@line 9430 "tcc_bootstrap.c"
 $ptr=$55; //@line 9430 "tcc_bootstrap.c"
 var $56=$1; //@line 9431 "tcc_bootstrap.c"
 var $57=(($56+4)|0); //@line 9431 "tcc_bootstrap.c"
 var $58=HEAP32[(($57)>>2)]; //@line 9431 "tcc_bootstrap.c"
 var $59=$58; //@line 9431 "tcc_bootstrap.c"
 var $60=(($59+16)|0); //@line 9431 "tcc_bootstrap.c"
 $sym=$60; //@line 9431 "tcc_bootstrap.c"
 $sym_index=1; //@line 9432 "tcc_bootstrap.c"
 label=4;break; //@line 9432 "tcc_bootstrap.c"
 case 4: 
 var $62=$sym_index; //@line 9432 "tcc_bootstrap.c"
 var $63=$nb_syms; //@line 9432 "tcc_bootstrap.c"
 var $64=($62|0)<($63|0); //@line 9432 "tcc_bootstrap.c"
 if($64){label=5;break;}else{label=10;break;} //@line 9432 "tcc_bootstrap.c"
 case 5: 
 var $66=$sym; //@line 9433 "tcc_bootstrap.c"
 var $67=(($66+12)|0); //@line 9433 "tcc_bootstrap.c"
 var $68=HEAP8[(($67)>>0)]; //@line 9433 "tcc_bootstrap.c"
 var $69=($68&255); //@line 9433 "tcc_bootstrap.c"
 var $70=$69>>4; //@line 9433 "tcc_bootstrap.c"
 var $71=($70|0)!=0; //@line 9433 "tcc_bootstrap.c"
 if($71){label=6;break;}else{label=7;break;} //@line 9433 "tcc_bootstrap.c"
 case 6: 
 var $73=$strtab; //@line 9434 "tcc_bootstrap.c"
 var $74=$sym; //@line 9434 "tcc_bootstrap.c"
 var $75=(($74)|0); //@line 9434 "tcc_bootstrap.c"
 var $76=HEAP32[(($75)>>2)]; //@line 9434 "tcc_bootstrap.c"
 var $77=(($73+$76)|0); //@line 9434 "tcc_bootstrap.c"
 var $78=_elf_hash($77); //@line 9434 "tcc_bootstrap.c"
 var $79=$2; //@line 9434 "tcc_bootstrap.c"
 var $80=(((($78>>>0))%(($79>>>0)))&-1); //@line 9434 "tcc_bootstrap.c"
 $h=$80; //@line 9434 "tcc_bootstrap.c"
 var $81=$h; //@line 9435 "tcc_bootstrap.c"
 var $82=$hash; //@line 9435 "tcc_bootstrap.c"
 var $83=(($82+($81<<2))|0); //@line 9435 "tcc_bootstrap.c"
 var $84=HEAP32[(($83)>>2)]; //@line 9435 "tcc_bootstrap.c"
 var $85=$ptr; //@line 9435 "tcc_bootstrap.c"
 HEAP32[(($85)>>2)]=$84; //@line 9435 "tcc_bootstrap.c"
 var $86=$sym_index; //@line 9436 "tcc_bootstrap.c"
 var $87=$h; //@line 9436 "tcc_bootstrap.c"
 var $88=$hash; //@line 9436 "tcc_bootstrap.c"
 var $89=(($88+($87<<2))|0); //@line 9436 "tcc_bootstrap.c"
 HEAP32[(($89)>>2)]=$86; //@line 9436 "tcc_bootstrap.c"
 label=8;break; //@line 9437 "tcc_bootstrap.c"
 case 7: 
 var $91=$ptr; //@line 9438 "tcc_bootstrap.c"
 HEAP32[(($91)>>2)]=0; //@line 9438 "tcc_bootstrap.c"
 label=8;break;
 case 8: 
 var $93=$ptr; //@line 9440 "tcc_bootstrap.c"
 var $94=(($93+4)|0); //@line 9440 "tcc_bootstrap.c"
 $ptr=$94; //@line 9440 "tcc_bootstrap.c"
 var $95=$sym; //@line 9441 "tcc_bootstrap.c"
 var $96=(($95+16)|0); //@line 9441 "tcc_bootstrap.c"
 $sym=$96; //@line 9441 "tcc_bootstrap.c"
 label=9;break; //@line 9442 "tcc_bootstrap.c"
 case 9: 
 var $98=$sym_index; //@line 9432 "tcc_bootstrap.c"
 var $99=((($98)+(1))|0); //@line 9432 "tcc_bootstrap.c"
 $sym_index=$99; //@line 9432 "tcc_bootstrap.c"
 label=4;break; //@line 9432 "tcc_bootstrap.c"
 case 10: 
 STACKTOP=sp;return; //@line 9443 "tcc_bootstrap.c"
  default: assert(0, "bad label: " + label);
 }

}


function _tccpp_delete($s){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $i;
 var $n;
 $1=$s;
 _free_defines(0); //@line 3980 "tcc_bootstrap.c"
 var $2=HEAP32[((10456)>>2)]; //@line 3981 "tcc_bootstrap.c"
 var $3=((($2)-(256))|0); //@line 3981 "tcc_bootstrap.c"
 $n=$3; //@line 3981 "tcc_bootstrap.c"
 $i=0; //@line 3982 "tcc_bootstrap.c"
 label=2;break; //@line 3982 "tcc_bootstrap.c"
 case 2: 
 var $5=$i; //@line 3982 "tcc_bootstrap.c"
 var $6=$n; //@line 3982 "tcc_bootstrap.c"
 var $7=($5|0)<($6|0); //@line 3982 "tcc_bootstrap.c"
 if($7){label=3;break;}else{label=5;break;} //@line 3982 "tcc_bootstrap.c"
 case 3: 
 var $9=HEAP32[((9336)>>2)]; //@line 3983 "tcc_bootstrap.c"
 var $10=$i; //@line 3983 "tcc_bootstrap.c"
 var $11=HEAP32[((10496)>>2)]; //@line 3983 "tcc_bootstrap.c"
 var $12=(($11+($10<<2))|0); //@line 3983 "tcc_bootstrap.c"
 var $13=HEAP32[(($12)>>2)]; //@line 3983 "tcc_bootstrap.c"
 var $14=$13; //@line 3983 "tcc_bootstrap.c"
 _tal_free_impl($9,$14); //@line 3983 "tcc_bootstrap.c"
 label=4;break; //@line 3983 "tcc_bootstrap.c"
 case 4: 
 var $16=$i; //@line 3982 "tcc_bootstrap.c"
 var $17=((($16)+(1))|0); //@line 3982 "tcc_bootstrap.c"
 $i=$17; //@line 3982 "tcc_bootstrap.c"
 label=2;break; //@line 3982 "tcc_bootstrap.c"
 case 5: 
 var $19=HEAP32[((10496)>>2)]; //@line 3984 "tcc_bootstrap.c"
 var $20=$19; //@line 3984 "tcc_bootstrap.c"
 _tcc_free($20); //@line 3984 "tcc_bootstrap.c"
 HEAP32[((10496)>>2)]=0; //@line 3985 "tcc_bootstrap.c"
 _cstr_free(10424); //@line 3986 "tcc_bootstrap.c"
 _cstr_free(76688); //@line 3987 "tcc_bootstrap.c"
 _cstr_free(10688); //@line 3988 "tcc_bootstrap.c"
 var $21=HEAP32[((9344)>>2)]; //@line 3989 "tcc_bootstrap.c"
 _tok_str_free_str($21); //@line 3989 "tcc_bootstrap.c"
 var $22=HEAP32[((9336)>>2)]; //@line 3990 "tcc_bootstrap.c"
 _tal_delete($22); //@line 3990 "tcc_bootstrap.c"
 HEAP32[((9336)>>2)]=0; //@line 3991 "tcc_bootstrap.c"
 var $23=HEAP32[((9384)>>2)]; //@line 3992 "tcc_bootstrap.c"
 _tal_delete($23); //@line 3992 "tcc_bootstrap.c"
 HEAP32[((9384)>>2)]=0; //@line 3993 "tcc_bootstrap.c"
 var $24=HEAP32[((76704)>>2)]; //@line 3994 "tcc_bootstrap.c"
 _tal_delete($24); //@line 3994 "tcc_bootstrap.c"
 HEAP32[((76704)>>2)]=0; //@line 3995 "tcc_bootstrap.c"
 STACKTOP=sp;return; //@line 3996 "tcc_bootstrap.c"
  default: assert(0, "bad label: " + label);
 }

}


function _free_defines($b){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $top;
 var $v;
 var $d;
 $1=$b;
 label=2;break; //@line 2156 "tcc_bootstrap.c"
 case 2: 
 var $3=HEAP32[((76656)>>2)]; //@line 2156 "tcc_bootstrap.c"
 var $4=$1; //@line 2156 "tcc_bootstrap.c"
 var $5=($3|0)!=($4|0); //@line 2156 "tcc_bootstrap.c"
 if($5){label=3;break;}else{label=4;break;} //@line 2156 "tcc_bootstrap.c"
 case 3: 
 var $7=HEAP32[((76656)>>2)]; //@line 2157 "tcc_bootstrap.c"
 $top=$7; //@line 2157 "tcc_bootstrap.c"
 var $8=$top; //@line 2158 "tcc_bootstrap.c"
 var $9=(($8+28)|0); //@line 2158 "tcc_bootstrap.c"
 var $10=HEAP32[(($9)>>2)]; //@line 2158 "tcc_bootstrap.c"
 HEAP32[((76656)>>2)]=$10; //@line 2158 "tcc_bootstrap.c"
 var $11=$top; //@line 2159 "tcc_bootstrap.c"
 var $12=(($11+8)|0); //@line 2159 "tcc_bootstrap.c"
 var $13=$12; //@line 2159 "tcc_bootstrap.c"
 var $14=HEAP32[(($13)>>2)]; //@line 2159 "tcc_bootstrap.c"
 _tok_str_free_str($14); //@line 2159 "tcc_bootstrap.c"
 var $15=$top; //@line 2160 "tcc_bootstrap.c"
 _define_undef($15); //@line 2160 "tcc_bootstrap.c"
 var $16=$top; //@line 2161 "tcc_bootstrap.c"
 _sym_free($16); //@line 2161 "tcc_bootstrap.c"
 label=2;break; //@line 2162 "tcc_bootstrap.c"
 case 4: 
 label=5;break; //@line 2163 "tcc_bootstrap.c"
 case 5: 
 var $19=$1; //@line 2163 "tcc_bootstrap.c"
 var $20=($19|0)!=0; //@line 2163 "tcc_bootstrap.c"
 if($20){label=6;break;}else{label=12;break;} //@line 2163 "tcc_bootstrap.c"
 case 6: 
 var $22=$1; //@line 2164 "tcc_bootstrap.c"
 var $23=(($22)|0); //@line 2164 "tcc_bootstrap.c"
 var $24=HEAP32[(($23)>>2)]; //@line 2164 "tcc_bootstrap.c"
 $v=$24; //@line 2164 "tcc_bootstrap.c"
 var $25=$v; //@line 2165 "tcc_bootstrap.c"
 var $26=($25|0)>=256; //@line 2165 "tcc_bootstrap.c"
 if($26){label=7;break;}else{label=11;break;} //@line 2165 "tcc_bootstrap.c"
 case 7: 
 var $28=$v; //@line 2165 "tcc_bootstrap.c"
 var $29=HEAP32[((10456)>>2)]; //@line 2165 "tcc_bootstrap.c"
 var $30=($28|0)<($29|0); //@line 2165 "tcc_bootstrap.c"
 if($30){label=8;break;}else{label=11;break;} //@line 2165 "tcc_bootstrap.c"
 case 8: 
 var $32=$v; //@line 2166 "tcc_bootstrap.c"
 var $33=((($32)-(256))|0); //@line 2166 "tcc_bootstrap.c"
 var $34=HEAP32[((10496)>>2)]; //@line 2166 "tcc_bootstrap.c"
 var $35=(($34+($33<<2))|0); //@line 2166 "tcc_bootstrap.c"
 var $36=HEAP32[(($35)>>2)]; //@line 2166 "tcc_bootstrap.c"
 var $37=(($36+4)|0); //@line 2166 "tcc_bootstrap.c"
 $d=$37; //@line 2166 "tcc_bootstrap.c"
 var $38=$d; //@line 2167 "tcc_bootstrap.c"
 var $39=HEAP32[(($38)>>2)]; //@line 2167 "tcc_bootstrap.c"
 var $40=($39|0)!=0; //@line 2167 "tcc_bootstrap.c"
 if($40){label=10;break;}else{label=9;break;} //@line 2167 "tcc_bootstrap.c"
 case 9: 
 var $42=$1; //@line 2168 "tcc_bootstrap.c"
 var $43=$d; //@line 2168 "tcc_bootstrap.c"
 HEAP32[(($43)>>2)]=$42; //@line 2168 "tcc_bootstrap.c"
 label=10;break; //@line 2168 "tcc_bootstrap.c"
 case 10: 
 label=11;break; //@line 2169 "tcc_bootstrap.c"
 case 11: 
 var $46=$1; //@line 2170 "tcc_bootstrap.c"
 var $47=(($46+28)|0); //@line 2170 "tcc_bootstrap.c"
 var $48=HEAP32[(($47)>>2)]; //@line 2170 "tcc_bootstrap.c"
 $1=$48; //@line 2170 "tcc_bootstrap.c"
 label=5;break; //@line 2171 "tcc_bootstrap.c"
 case 12: 
 STACKTOP=sp;return; //@line 2172 "tcc_bootstrap.c"
  default: assert(0, "bad label: " + label);
 }

}


function _tok_str_free_str($str){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 $1=$str;
 var $2=HEAP32[((9384)>>2)]; //@line 1955 "tcc_bootstrap.c"
 var $3=$1; //@line 1955 "tcc_bootstrap.c"
 var $4=$3; //@line 1955 "tcc_bootstrap.c"
 _tal_free_impl($2,$4); //@line 1955 "tcc_bootstrap.c"
 STACKTOP=sp;return; //@line 1956 "tcc_bootstrap.c"
}


function _tal_delete($al){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $next;
 $1=$al;
 label=2;break; //@line 1243 "tcc_bootstrap.c"
 case 2: 
 var $3=$1; //@line 1245 "tcc_bootstrap.c"
 var $4=($3|0)!=0; //@line 1245 "tcc_bootstrap.c"
 if($4){label=4;break;}else{label=3;break;} //@line 1245 "tcc_bootstrap.c"
 case 3: 
 STACKTOP=sp;return; //@line 1246 "tcc_bootstrap.c"
 case 4: 
 var $7=$1; //@line 1247 "tcc_bootstrap.c"
 var $8=(($7+20)|0); //@line 1247 "tcc_bootstrap.c"
 var $9=HEAP32[(($8)>>2)]; //@line 1247 "tcc_bootstrap.c"
 $next=$9; //@line 1247 "tcc_bootstrap.c"
 var $10=$1; //@line 1248 "tcc_bootstrap.c"
 var $11=(($10+8)|0); //@line 1248 "tcc_bootstrap.c"
 var $12=HEAP32[(($11)>>2)]; //@line 1248 "tcc_bootstrap.c"
 _tcc_free($12); //@line 1248 "tcc_bootstrap.c"
 var $13=$1; //@line 1249 "tcc_bootstrap.c"
 var $14=$13; //@line 1249 "tcc_bootstrap.c"
 _tcc_free($14); //@line 1249 "tcc_bootstrap.c"
 var $15=$next; //@line 1250 "tcc_bootstrap.c"
 $1=$15; //@line 1250 "tcc_bootstrap.c"
 label=2;break; //@line 1251 "tcc_bootstrap.c"
  default: assert(0, "bad label: " + label);
 }

}


function _define_undef($s){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $v;
 $1=$s;
 var $2=$1; //@line 2143 "tcc_bootstrap.c"
 var $3=(($2)|0); //@line 2143 "tcc_bootstrap.c"
 var $4=HEAP32[(($3)>>2)]; //@line 2143 "tcc_bootstrap.c"
 $v=$4; //@line 2143 "tcc_bootstrap.c"
 var $5=$v; //@line 2144 "tcc_bootstrap.c"
 var $6=($5|0)>=256; //@line 2144 "tcc_bootstrap.c"
 if($6){label=2;break;}else{label=4;break;} //@line 2144 "tcc_bootstrap.c"
 case 2: 
 var $8=$v; //@line 2144 "tcc_bootstrap.c"
 var $9=HEAP32[((10456)>>2)]; //@line 2144 "tcc_bootstrap.c"
 var $10=($8|0)<($9|0); //@line 2144 "tcc_bootstrap.c"
 if($10){label=3;break;}else{label=4;break;} //@line 2144 "tcc_bootstrap.c"
 case 3: 
 var $12=$v; //@line 2145 "tcc_bootstrap.c"
 var $13=((($12)-(256))|0); //@line 2145 "tcc_bootstrap.c"
 var $14=HEAP32[((10496)>>2)]; //@line 2145 "tcc_bootstrap.c"
 var $15=(($14+($13<<2))|0); //@line 2145 "tcc_bootstrap.c"
 var $16=HEAP32[(($15)>>2)]; //@line 2145 "tcc_bootstrap.c"
 var $17=(($16+4)|0); //@line 2145 "tcc_bootstrap.c"
 HEAP32[(($17)>>2)]=0; //@line 2145 "tcc_bootstrap.c"
 label=4;break; //@line 2145 "tcc_bootstrap.c"
 case 4: 
 STACKTOP=sp;return; //@line 2146 "tcc_bootstrap.c"
  default: assert(0, "bad label: " + label);
 }

}


function _sym_free($sym){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 $1=$sym;
 var $2=HEAP32[((10520)>>2)]; //@line 4278 "tcc_bootstrap.c"
 var $3=$1; //@line 4278 "tcc_bootstrap.c"
 var $4=(($3+24)|0); //@line 4278 "tcc_bootstrap.c"
 var $5=$4; //@line 4278 "tcc_bootstrap.c"
 HEAP32[(($5)>>2)]=$2; //@line 4278 "tcc_bootstrap.c"
 var $6=$1; //@line 4279 "tcc_bootstrap.c"
 HEAP32[((10520)>>2)]=$6; //@line 4279 "tcc_bootstrap.c"
 STACKTOP=sp;return; //@line 4280 "tcc_bootstrap.c"
}


function _next_nomacro_spc(){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=HEAP32[((10680)>>2)]; //@line 3421 "tcc_bootstrap.c"
 var $2=($1|0)!=0; //@line 3421 "tcc_bootstrap.c"
 if($2){label=2;break;}else{label=8;break;} //@line 3421 "tcc_bootstrap.c"
 case 2: 
 label=3;break; //@line 3421 "tcc_bootstrap.c"
 case 3: 
 var $5=HEAP32[((10680)>>2)]; //@line 3423 "tcc_bootstrap.c"
 var $6=HEAP32[(($5)>>2)]; //@line 3423 "tcc_bootstrap.c"
 HEAP32[((10472)>>2)]=$6; //@line 3423 "tcc_bootstrap.c"
 var $7=HEAP32[((10472)>>2)]; //@line 3424 "tcc_bootstrap.c"
 var $8=($7|0)!=0; //@line 3424 "tcc_bootstrap.c"
 if($8){label=4;break;}else{label=7;break;} //@line 3424 "tcc_bootstrap.c"
 case 4: 
 _TOK_GET(10472,10680,10440); //@line 3425 "tcc_bootstrap.c"
 var $10=HEAP32[((10472)>>2)]; //@line 3426 "tcc_bootstrap.c"
 var $11=($10|0)==192; //@line 3426 "tcc_bootstrap.c"
 if($11){label=5;break;}else{label=6;break;} //@line 3426 "tcc_bootstrap.c"
 case 5: 
 var $$etemp$0=10440;
 var $ld$1$0=(($$etemp$0)|0);
 var $13$0=HEAP32[(($ld$1$0)>>2)];
 var $ld$2$1=(($$etemp$0+4)|0);
 var $13$1=HEAP32[(($ld$2$1)>>2)];
 var $14$0=$13$0;
 var $14=$14$0;
 var $15=HEAP32[((76648)>>2)]; //@line 3427 "tcc_bootstrap.c"
 var $16=(($15+16)|0); //@line 3427 "tcc_bootstrap.c"
 HEAP32[(($16)>>2)]=$14; //@line 3427 "tcc_bootstrap.c"
 label=3;break; //@line 3428 "tcc_bootstrap.c"
 case 6: 
 label=7;break; //@line 3430 "tcc_bootstrap.c"
 case 7: 
 label=9;break; //@line 3431 "tcc_bootstrap.c"
 case 8: 
 _next_nomacro1(); //@line 3432 "tcc_bootstrap.c"
 label=9;break;
 case 9: 
 return; //@line 3434 "tcc_bootstrap.c"
  default: assert(0, "bad label: " + label);
 }

}


function _check_space($t,$spc){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 $2=$t;
 $3=$spc;
 var $4=$2; //@line 1784 "tcc_bootstrap.c"
 var $5=($4|0)<256; //@line 1784 "tcc_bootstrap.c"
 if($5){label=2;break;}else{label=6;break;} //@line 1784 "tcc_bootstrap.c"
 case 2: 
 var $7=$2; //@line 1784 "tcc_bootstrap.c"
 var $8=((($7)+(1))|0); //@line 1784 "tcc_bootstrap.c"
 var $9=((10736+$8)|0); //@line 1784 "tcc_bootstrap.c"
 var $10=HEAP8[(($9)>>0)]; //@line 1784 "tcc_bootstrap.c"
 var $11=($10&255); //@line 1784 "tcc_bootstrap.c"
 var $12=$11&1; //@line 1784 "tcc_bootstrap.c"
 var $13=($12|0)!=0; //@line 1784 "tcc_bootstrap.c"
 if($13){label=3;break;}else{label=6;break;} //@line 1784 "tcc_bootstrap.c"
 case 3: 
 var $15=$3; //@line 1785 "tcc_bootstrap.c"
 var $16=HEAP32[(($15)>>2)]; //@line 1785 "tcc_bootstrap.c"
 var $17=($16|0)!=0; //@line 1785 "tcc_bootstrap.c"
 if($17){label=4;break;}else{label=5;break;} //@line 1785 "tcc_bootstrap.c"
 case 4: 
 $1=1; //@line 1786 "tcc_bootstrap.c"
 label=8;break; //@line 1786 "tcc_bootstrap.c"
 case 5: 
 var $20=$3; //@line 1787 "tcc_bootstrap.c"
 HEAP32[(($20)>>2)]=1; //@line 1787 "tcc_bootstrap.c"
 label=7;break; //@line 1788 "tcc_bootstrap.c"
 case 6: 
 var $22=$3; //@line 1789 "tcc_bootstrap.c"
 HEAP32[(($22)>>2)]=0; //@line 1789 "tcc_bootstrap.c"
 label=7;break;
 case 7: 
 $1=0; //@line 1790 "tcc_bootstrap.c"
 label=8;break; //@line 1790 "tcc_bootstrap.c"
 case 8: 
 var $25=$1; //@line 1790 "tcc_bootstrap.c"
 STACKTOP=sp;return $25; //@line 1790 "tcc_bootstrap.c"
  default: assert(0, "bad label: " + label);
 }

}


function _tok_str_add2($s,$t,$cv){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $len;
 var $str;
 var $nb_words;
 $1=$s;
 $2=$t;
 $3=$cv;
 var $4=$1; //@line 2012 "tcc_bootstrap.c"
 var $5=(($4+4)|0); //@line 2012 "tcc_bootstrap.c"
 var $6=HEAP32[(($5)>>2)]; //@line 2012 "tcc_bootstrap.c"
 var $7=$1; //@line 2012 "tcc_bootstrap.c"
 var $8=(($7+8)|0); //@line 2012 "tcc_bootstrap.c"
 HEAP32[(($8)>>2)]=$6; //@line 2012 "tcc_bootstrap.c"
 $len=$6; //@line 2012 "tcc_bootstrap.c"
 var $9=$1; //@line 2013 "tcc_bootstrap.c"
 var $10=(($9)|0); //@line 2013 "tcc_bootstrap.c"
 var $11=HEAP32[(($10)>>2)]; //@line 2013 "tcc_bootstrap.c"
 $str=$11; //@line 2013 "tcc_bootstrap.c"
 var $12=$len; //@line 2014 "tcc_bootstrap.c"
 var $13=((($12)+(4))|0); //@line 2014 "tcc_bootstrap.c"
 var $14=$1; //@line 2014 "tcc_bootstrap.c"
 var $15=(($14+12)|0); //@line 2014 "tcc_bootstrap.c"
 var $16=HEAP32[(($15)>>2)]; //@line 2014 "tcc_bootstrap.c"
 var $17=($13|0)>=($16|0); //@line 2014 "tcc_bootstrap.c"
 if($17){label=2;break;}else{label=3;break;} //@line 2014 "tcc_bootstrap.c"
 case 2: 
 var $19=$1; //@line 2015 "tcc_bootstrap.c"
 var $20=$len; //@line 2015 "tcc_bootstrap.c"
 var $21=((($20)+(4))|0); //@line 2015 "tcc_bootstrap.c"
 var $22=((($21)+(1))|0); //@line 2015 "tcc_bootstrap.c"
 var $23=_tok_str_realloc($19,$22); //@line 2015 "tcc_bootstrap.c"
 $str=$23; //@line 2015 "tcc_bootstrap.c"
 label=3;break; //@line 2015 "tcc_bootstrap.c"
 case 3: 
 var $25=$2; //@line 2016 "tcc_bootstrap.c"
 var $26=$len; //@line 2016 "tcc_bootstrap.c"
 var $27=((($26)+(1))|0); //@line 2016 "tcc_bootstrap.c"
 $len=$27; //@line 2016 "tcc_bootstrap.c"
 var $28=$str; //@line 2016 "tcc_bootstrap.c"
 var $29=(($28+($26<<2))|0); //@line 2016 "tcc_bootstrap.c"
 HEAP32[(($29)>>2)]=$25; //@line 2016 "tcc_bootstrap.c"
 var $30=$2; //@line 2017 "tcc_bootstrap.c"
 switch(($30|0)){case 181:case 182:case 179:case 180:case 187:case 192:case 206:case 207:{ label=4;break;}case 190:case 191:case 185:case 186:{ label=5;break;}case 188:case 183:case 184:{ label=8;break;}case 189:{ label=9;break;}default:{label=10;break;}}break;
 case 4: 
 var $32=$3; //@line 2026 "tcc_bootstrap.c"
 var $33=$32; //@line 2026 "tcc_bootstrap.c"
 var $34=(($33)|0); //@line 2026 "tcc_bootstrap.c"
 var $35=HEAP32[(($34)>>2)]; //@line 2026 "tcc_bootstrap.c"
 var $36=$len; //@line 2026 "tcc_bootstrap.c"
 var $37=((($36)+(1))|0); //@line 2026 "tcc_bootstrap.c"
 $len=$37; //@line 2026 "tcc_bootstrap.c"
 var $38=$str; //@line 2026 "tcc_bootstrap.c"
 var $39=(($38+($36<<2))|0); //@line 2026 "tcc_bootstrap.c"
 HEAP32[(($39)>>2)]=$35; //@line 2026 "tcc_bootstrap.c"
 label=11;break; //@line 2027 "tcc_bootstrap.c"
 case 5: 
 var $41=$3; //@line 2034 "tcc_bootstrap.c"
 var $42=$41; //@line 2034 "tcc_bootstrap.c"
 var $43=(($42)|0); //@line 2034 "tcc_bootstrap.c"
 var $44=HEAP32[(($43)>>2)]; //@line 2034 "tcc_bootstrap.c"
 var $45=((($44)+(4))|0); //@line 2034 "tcc_bootstrap.c"
 var $46=((($45)-(1))|0); //@line 2034 "tcc_bootstrap.c"
 var $47=(((($46>>>0))/(4))&-1); //@line 2034 "tcc_bootstrap.c"
 var $48=((($47)+(1))|0); //@line 2034 "tcc_bootstrap.c"
 $nb_words=$48; //@line 2034 "tcc_bootstrap.c"
 var $49=$len; //@line 2035 "tcc_bootstrap.c"
 var $50=$nb_words; //@line 2035 "tcc_bootstrap.c"
 var $51=((($49)+($50))|0); //@line 2035 "tcc_bootstrap.c"
 var $52=$1; //@line 2035 "tcc_bootstrap.c"
 var $53=(($52+12)|0); //@line 2035 "tcc_bootstrap.c"
 var $54=HEAP32[(($53)>>2)]; //@line 2035 "tcc_bootstrap.c"
 var $55=($51>>>0)>=($54>>>0); //@line 2035 "tcc_bootstrap.c"
 if($55){label=6;break;}else{label=7;break;} //@line 2035 "tcc_bootstrap.c"
 case 6: 
 var $57=$1; //@line 2036 "tcc_bootstrap.c"
 var $58=$len; //@line 2036 "tcc_bootstrap.c"
 var $59=$nb_words; //@line 2036 "tcc_bootstrap.c"
 var $60=((($58)+($59))|0); //@line 2036 "tcc_bootstrap.c"
 var $61=((($60)+(1))|0); //@line 2036 "tcc_bootstrap.c"
 var $62=_tok_str_realloc($57,$61); //@line 2036 "tcc_bootstrap.c"
 $str=$62; //@line 2036 "tcc_bootstrap.c"
 label=7;break; //@line 2036 "tcc_bootstrap.c"
 case 7: 
 var $64=$3; //@line 2037 "tcc_bootstrap.c"
 var $65=$64; //@line 2037 "tcc_bootstrap.c"
 var $66=(($65)|0); //@line 2037 "tcc_bootstrap.c"
 var $67=HEAP32[(($66)>>2)]; //@line 2037 "tcc_bootstrap.c"
 var $68=$len; //@line 2037 "tcc_bootstrap.c"
 var $69=$str; //@line 2037 "tcc_bootstrap.c"
 var $70=(($69+($68<<2))|0); //@line 2037 "tcc_bootstrap.c"
 HEAP32[(($70)>>2)]=$67; //@line 2037 "tcc_bootstrap.c"
 var $71=$len; //@line 2038 "tcc_bootstrap.c"
 var $72=((($71)+(1))|0); //@line 2038 "tcc_bootstrap.c"
 var $73=$str; //@line 2038 "tcc_bootstrap.c"
 var $74=(($73+($72<<2))|0); //@line 2038 "tcc_bootstrap.c"
 var $75=$74; //@line 2038 "tcc_bootstrap.c"
 var $76=$3; //@line 2038 "tcc_bootstrap.c"
 var $77=$76; //@line 2038 "tcc_bootstrap.c"
 var $78=(($77+4)|0); //@line 2038 "tcc_bootstrap.c"
 var $79=HEAP32[(($78)>>2)]; //@line 2038 "tcc_bootstrap.c"
 var $80=$3; //@line 2038 "tcc_bootstrap.c"
 var $81=$80; //@line 2038 "tcc_bootstrap.c"
 var $82=(($81)|0); //@line 2038 "tcc_bootstrap.c"
 var $83=HEAP32[(($82)>>2)]; //@line 2038 "tcc_bootstrap.c"
 assert($83 % 1 === 0);(_memcpy($75, $79, $83)|0); //@line 2038 "tcc_bootstrap.c"
 var $84=$nb_words; //@line 2039 "tcc_bootstrap.c"
 var $85=$len; //@line 2039 "tcc_bootstrap.c"
 var $86=((($85)+($84))|0); //@line 2039 "tcc_bootstrap.c"
 $len=$86; //@line 2039 "tcc_bootstrap.c"
 label=11;break; //@line 2041 "tcc_bootstrap.c"
 case 8: 
 var $88=$3; //@line 2045 "tcc_bootstrap.c"
 var $89=$88; //@line 2045 "tcc_bootstrap.c"
 var $90=(($89)|0); //@line 2045 "tcc_bootstrap.c"
 var $91=HEAP32[(($90)>>2)]; //@line 2045 "tcc_bootstrap.c"
 var $92=$len; //@line 2045 "tcc_bootstrap.c"
 var $93=((($92)+(1))|0); //@line 2045 "tcc_bootstrap.c"
 $len=$93; //@line 2045 "tcc_bootstrap.c"
 var $94=$str; //@line 2045 "tcc_bootstrap.c"
 var $95=(($94+($92<<2))|0); //@line 2045 "tcc_bootstrap.c"
 HEAP32[(($95)>>2)]=$91; //@line 2045 "tcc_bootstrap.c"
 var $96=$3; //@line 2046 "tcc_bootstrap.c"
 var $97=$96; //@line 2046 "tcc_bootstrap.c"
 var $98=(($97+4)|0); //@line 2046 "tcc_bootstrap.c"
 var $99=HEAP32[(($98)>>2)]; //@line 2046 "tcc_bootstrap.c"
 var $100=$len; //@line 2046 "tcc_bootstrap.c"
 var $101=((($100)+(1))|0); //@line 2046 "tcc_bootstrap.c"
 $len=$101; //@line 2046 "tcc_bootstrap.c"
 var $102=$str; //@line 2046 "tcc_bootstrap.c"
 var $103=(($102+($100<<2))|0); //@line 2046 "tcc_bootstrap.c"
 HEAP32[(($103)>>2)]=$99; //@line 2046 "tcc_bootstrap.c"
 label=11;break; //@line 2047 "tcc_bootstrap.c"
 case 9: 
 var $105=$3; //@line 2049 "tcc_bootstrap.c"
 var $106=$105; //@line 2049 "tcc_bootstrap.c"
 var $107=(($106)|0); //@line 2049 "tcc_bootstrap.c"
 var $108=HEAP32[(($107)>>2)]; //@line 2049 "tcc_bootstrap.c"
 var $109=$len; //@line 2049 "tcc_bootstrap.c"
 var $110=((($109)+(1))|0); //@line 2049 "tcc_bootstrap.c"
 $len=$110; //@line 2049 "tcc_bootstrap.c"
 var $111=$str; //@line 2049 "tcc_bootstrap.c"
 var $112=(($111+($109<<2))|0); //@line 2049 "tcc_bootstrap.c"
 HEAP32[(($112)>>2)]=$108; //@line 2049 "tcc_bootstrap.c"
 var $113=$3; //@line 2050 "tcc_bootstrap.c"
 var $114=$113; //@line 2050 "tcc_bootstrap.c"
 var $115=(($114+4)|0); //@line 2050 "tcc_bootstrap.c"
 var $116=HEAP32[(($115)>>2)]; //@line 2050 "tcc_bootstrap.c"
 var $117=$len; //@line 2050 "tcc_bootstrap.c"
 var $118=((($117)+(1))|0); //@line 2050 "tcc_bootstrap.c"
 $len=$118; //@line 2050 "tcc_bootstrap.c"
 var $119=$str; //@line 2050 "tcc_bootstrap.c"
 var $120=(($119+($117<<2))|0); //@line 2050 "tcc_bootstrap.c"
 HEAP32[(($120)>>2)]=$116; //@line 2050 "tcc_bootstrap.c"
 var $121=$3; //@line 2051 "tcc_bootstrap.c"
 var $122=$121; //@line 2051 "tcc_bootstrap.c"
 var $123=(($122+8)|0); //@line 2051 "tcc_bootstrap.c"
 var $124=HEAP32[(($123)>>2)]; //@line 2051 "tcc_bootstrap.c"
 var $125=$len; //@line 2051 "tcc_bootstrap.c"
 var $126=((($125)+(1))|0); //@line 2051 "tcc_bootstrap.c"
 $len=$126; //@line 2051 "tcc_bootstrap.c"
 var $127=$str; //@line 2051 "tcc_bootstrap.c"
 var $128=(($127+($125<<2))|0); //@line 2051 "tcc_bootstrap.c"
 HEAP32[(($128)>>2)]=$124; //@line 2051 "tcc_bootstrap.c"
 label=11;break; //@line 2052 "tcc_bootstrap.c"
 case 10: 
 label=11;break; //@line 2054 "tcc_bootstrap.c"
 case 11: 
 var $131=$len; //@line 2056 "tcc_bootstrap.c"
 var $132=$1; //@line 2056 "tcc_bootstrap.c"
 var $133=(($132+4)|0); //@line 2056 "tcc_bootstrap.c"
 HEAP32[(($133)>>2)]=$131; //@line 2056 "tcc_bootstrap.c"
 STACKTOP=sp;return; //@line 2057 "tcc_bootstrap.c"
  default: assert(0, "bad label: " + label);
 }

}


function _tok_str_add($s,$t){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $len;
 var $str;
 $1=$s;
 $2=$t;
 var $3=$1; //@line 1981 "tcc_bootstrap.c"
 var $4=(($3+4)|0); //@line 1981 "tcc_bootstrap.c"
 var $5=HEAP32[(($4)>>2)]; //@line 1981 "tcc_bootstrap.c"
 $len=$5; //@line 1981 "tcc_bootstrap.c"
 var $6=$1; //@line 1982 "tcc_bootstrap.c"
 var $7=(($6)|0); //@line 1982 "tcc_bootstrap.c"
 var $8=HEAP32[(($7)>>2)]; //@line 1982 "tcc_bootstrap.c"
 $str=$8; //@line 1982 "tcc_bootstrap.c"
 var $9=$len; //@line 1983 "tcc_bootstrap.c"
 var $10=$1; //@line 1983 "tcc_bootstrap.c"
 var $11=(($10+12)|0); //@line 1983 "tcc_bootstrap.c"
 var $12=HEAP32[(($11)>>2)]; //@line 1983 "tcc_bootstrap.c"
 var $13=($9|0)>=($12|0); //@line 1983 "tcc_bootstrap.c"
 if($13){label=2;break;}else{label=3;break;} //@line 1983 "tcc_bootstrap.c"
 case 2: 
 var $15=$1; //@line 1984 "tcc_bootstrap.c"
 var $16=$len; //@line 1984 "tcc_bootstrap.c"
 var $17=((($16)+(1))|0); //@line 1984 "tcc_bootstrap.c"
 var $18=_tok_str_realloc($15,$17); //@line 1984 "tcc_bootstrap.c"
 $str=$18; //@line 1984 "tcc_bootstrap.c"
 label=3;break; //@line 1984 "tcc_bootstrap.c"
 case 3: 
 var $20=$2; //@line 1985 "tcc_bootstrap.c"
 var $21=$len; //@line 1985 "tcc_bootstrap.c"
 var $22=((($21)+(1))|0); //@line 1985 "tcc_bootstrap.c"
 $len=$22; //@line 1985 "tcc_bootstrap.c"
 var $23=$str; //@line 1985 "tcc_bootstrap.c"
 var $24=(($23+($21<<2))|0); //@line 1985 "tcc_bootstrap.c"
 HEAP32[(($24)>>2)]=$20; //@line 1985 "tcc_bootstrap.c"
 var $25=$len; //@line 1986 "tcc_bootstrap.c"
 var $26=$1; //@line 1986 "tcc_bootstrap.c"
 var $27=(($26+4)|0); //@line 1986 "tcc_bootstrap.c"
 HEAP32[(($27)>>2)]=$25; //@line 1986 "tcc_bootstrap.c"
 STACKTOP=sp;return; //@line 1987 "tcc_bootstrap.c"
  default: assert(0, "bad label: " + label);
 }

}


function _tok_str_dup($s){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 var $str;
 $1=$s;
 var $2=$1; //@line 1949 "tcc_bootstrap.c"
 var $3=(($2+4)|0); //@line 1949 "tcc_bootstrap.c"
 var $4=HEAP32[(($3)>>2)]; //@line 1949 "tcc_bootstrap.c"
 var $5=($4<<2); //@line 1949 "tcc_bootstrap.c"
 var $6=_tal_realloc_impl(9384,0,$5); //@line 1949 "tcc_bootstrap.c"
 var $7=$6; //@line 1949 "tcc_bootstrap.c"
 $str=$7; //@line 1949 "tcc_bootstrap.c"
 var $8=$str; //@line 1950 "tcc_bootstrap.c"
 var $9=$8; //@line 1950 "tcc_bootstrap.c"
 var $10=$1; //@line 1950 "tcc_bootstrap.c"
 var $11=(($10)|0); //@line 1950 "tcc_bootstrap.c"
 var $12=HEAP32[(($11)>>2)]; //@line 1950 "tcc_bootstrap.c"
 var $13=$12; //@line 1950 "tcc_bootstrap.c"
 var $14=$1; //@line 1950 "tcc_bootstrap.c"
 var $15=(($14+4)|0); //@line 1950 "tcc_bootstrap.c"
 var $16=HEAP32[(($15)>>2)]; //@line 1950 "tcc_bootstrap.c"
 var $17=($16<<2); //@line 1950 "tcc_bootstrap.c"
 assert($17 % 1 === 0);(_memcpy($9, $13, $17)|0); //@line 1950 "tcc_bootstrap.c"
 var $18=$str; //@line 1951 "tcc_bootstrap.c"
 STACKTOP=sp;return $18; //@line 1951 "tcc_bootstrap.c"
}


function _next_nomacro1(){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $t;
 var $c=sp;
 var $is_long;
 var $len;
 var $ts;
 var $p=(sp)+(8);
 var $p1;
 var $h;
 var $s1;
 var $pts;
 var $1=HEAP32[((76648)>>2)]; //@line 3064 "tcc_bootstrap.c"
 var $2=(($1)|0); //@line 3064 "tcc_bootstrap.c"
 var $3=HEAP32[(($2)>>2)]; //@line 3064 "tcc_bootstrap.c"
 HEAP32[(($p)>>2)]=$3; //@line 3064 "tcc_bootstrap.c"
 label=2;break; //@line 3064 "tcc_bootstrap.c"
 case 2: 
 var $5=HEAP32[(($p)>>2)]; //@line 3066 "tcc_bootstrap.c"
 var $6=HEAP8[(($5)>>0)]; //@line 3066 "tcc_bootstrap.c"
 var $7=($6&255); //@line 3066 "tcc_bootstrap.c"
 HEAP32[(($c)>>2)]=$7; //@line 3066 "tcc_bootstrap.c"
 var $8=HEAP32[(($c)>>2)]; //@line 3067 "tcc_bootstrap.c"
 switch(($8|0)){case 92:{ label=10;break;}case 39:case 34:{ label=105;break;}case 60:{ label=109;break;}case 62:{ label=119;break;}case 38:{ label=129;break;}case 124:{ label=136;break;}case 43:{ label=143;break;}case 45:{ label=150;break;}case 33:{ label=160;break;}case 61:{ label=161;break;}case 42:{ label=162;break;}case 37:{ label=163;break;}case 94:{ label=164;break;}case 47:{ label=165;break;}case 40:case 41:case 91:case 93:case 123:case 125:case 44:case 59:case 58:case 63:case 126:case 64:{ label=175;break;}case 32:case 9:{ label=3;break;}case 10:{ label=32;break;}case 35:{ label=36;break;}case 97:case 98:case 99:case 100:case 101:case 102:case 103:case 104:case 105:case 106:case 107:case 108:case 109:case 110:case 111:case 112:case 113:case 114:case 115:case 116:case 117:case 118:case 119:case 120:case 121:case 122:case 65:case 66:case 67:case 68:case 69:case 70:case 71:case 72:case 73:case 74:case 75:case 77:case 78:case 79:case 80:case 81:case 82:case 83:case 84:case 85:case 86:case 87:case 88:case 89:case 90:case 95:{ label=47;break;}case 76:{ label=67;break;}case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:{ label=75;break;}case 12:case 11:case 13:{ label=9;break;}case 46:{ label=91;break;}default:{label=177;break;}}break;
 case 3: 
 var $10=HEAP32[(($c)>>2)]; //@line 3070 "tcc_bootstrap.c"
 HEAP32[((10472)>>2)]=$10; //@line 3070 "tcc_bootstrap.c"
 var $11=HEAP32[(($p)>>2)]; //@line 3071 "tcc_bootstrap.c"
 var $12=(($11+1)|0); //@line 3071 "tcc_bootstrap.c"
 HEAP32[(($p)>>2)]=$12; //@line 3071 "tcc_bootstrap.c"
 var $13=HEAP32[((10608)>>2)]; //@line 3072 "tcc_bootstrap.c"
 var $14=$13&16; //@line 3072 "tcc_bootstrap.c"
 var $15=($14|0)!=0; //@line 3072 "tcc_bootstrap.c"
 if($15){label=4;break;}else{label=5;break;} //@line 3072 "tcc_bootstrap.c"
 case 4: 
 label=184;break; //@line 3073 "tcc_bootstrap.c"
 case 5: 
 label=6;break; //@line 3074 "tcc_bootstrap.c"
 case 6: 
 var $19=HEAP32[(($p)>>2)]; //@line 3074 "tcc_bootstrap.c"
 var $20=HEAP8[(($19)>>0)]; //@line 3074 "tcc_bootstrap.c"
 var $21=($20&255); //@line 3074 "tcc_bootstrap.c"
 var $22=((($21)+(1))|0); //@line 3074 "tcc_bootstrap.c"
 var $23=((10736+$22)|0); //@line 3074 "tcc_bootstrap.c"
 var $24=HEAP8[(($23)>>0)]; //@line 3074 "tcc_bootstrap.c"
 var $25=($24&255); //@line 3074 "tcc_bootstrap.c"
 var $26=$25&1; //@line 3074 "tcc_bootstrap.c"
 var $27=($26|0)!=0; //@line 3074 "tcc_bootstrap.c"
 if($27){label=7;break;}else{label=8;break;} //@line 3074 "tcc_bootstrap.c"
 case 7: 
 var $29=HEAP32[(($p)>>2)]; //@line 3075 "tcc_bootstrap.c"
 var $30=(($29+1)|0); //@line 3075 "tcc_bootstrap.c"
 HEAP32[(($p)>>2)]=$30; //@line 3075 "tcc_bootstrap.c"
 label=6;break; //@line 3075 "tcc_bootstrap.c"
 case 8: 
 label=2;break; //@line 3076 "tcc_bootstrap.c"
 case 9: 
 var $33=HEAP32[(($p)>>2)]; //@line 3080 "tcc_bootstrap.c"
 var $34=(($33+1)|0); //@line 3080 "tcc_bootstrap.c"
 HEAP32[(($p)>>2)]=$34; //@line 3080 "tcc_bootstrap.c"
 label=2;break; //@line 3081 "tcc_bootstrap.c"
 case 10: 
 var $36=HEAP32[(($p)>>2)]; //@line 3083 "tcc_bootstrap.c"
 var $37=_handle_stray1($36); //@line 3083 "tcc_bootstrap.c"
 HEAP32[(($c)>>2)]=$37; //@line 3083 "tcc_bootstrap.c"
 var $38=HEAP32[((76648)>>2)]; //@line 3084 "tcc_bootstrap.c"
 var $39=(($38)|0); //@line 3084 "tcc_bootstrap.c"
 var $40=HEAP32[(($39)>>2)]; //@line 3084 "tcc_bootstrap.c"
 HEAP32[(($p)>>2)]=$40; //@line 3084 "tcc_bootstrap.c"
 var $41=HEAP32[(($c)>>2)]; //@line 3085 "tcc_bootstrap.c"
 var $42=($41|0)==92; //@line 3085 "tcc_bootstrap.c"
 if($42){label=11;break;}else{label=12;break;} //@line 3085 "tcc_bootstrap.c"
 case 11: 
 label=176;break; //@line 3086 "tcc_bootstrap.c"
 case 12: 
 var $45=HEAP32[(($c)>>2)]; //@line 3087 "tcc_bootstrap.c"
 var $46=($45|0)!=-1; //@line 3087 "tcc_bootstrap.c"
 if($46){label=13;break;}else{label=14;break;} //@line 3087 "tcc_bootstrap.c"
 case 13: 
 label=2;break; //@line 3088 "tcc_bootstrap.c"
 case 14: 
 var $49=HEAP32[((10488)>>2)]; //@line 3090 "tcc_bootstrap.c"
 $s1=$49; //@line 3090 "tcc_bootstrap.c"
 var $50=HEAP32[((10608)>>2)]; //@line 3091 "tcc_bootstrap.c"
 var $51=$50&4; //@line 3091 "tcc_bootstrap.c"
 var $52=($51|0)!=0; //@line 3091 "tcc_bootstrap.c"
 if($52){label=15;break;}else{label=17;break;} //@line 3091 "tcc_bootstrap.c"
 case 15: 
 var $54=HEAP32[((10464)>>2)]; //@line 3091 "tcc_bootstrap.c"
 var $55=$54&8; //@line 3091 "tcc_bootstrap.c"
 var $56=($55|0)!=0; //@line 3091 "tcc_bootstrap.c"
 if($56){label=17;break;}else{label=16;break;} //@line 3091 "tcc_bootstrap.c"
 case 16: 
 var $58=HEAP32[((10464)>>2)]; //@line 3093 "tcc_bootstrap.c"
 var $59=$58|8; //@line 3093 "tcc_bootstrap.c"
 HEAP32[((10464)>>2)]=$59; //@line 3093 "tcc_bootstrap.c"
 HEAP32[((10472)>>2)]=10; //@line 3094 "tcc_bootstrap.c"
 label=184;break; //@line 3095 "tcc_bootstrap.c"
 case 17: 
 var $61=HEAP32[((10608)>>2)]; //@line 3096 "tcc_bootstrap.c"
 var $62=$61&1; //@line 3096 "tcc_bootstrap.c"
 var $63=($62|0)!=0; //@line 3096 "tcc_bootstrap.c"
 if($63){label=19;break;}else{label=18;break;} //@line 3096 "tcc_bootstrap.c"
 case 18: 
 HEAP32[((10472)>>2)]=-1; //@line 3097 "tcc_bootstrap.c"
 label=30;break; //@line 3098 "tcc_bootstrap.c"
 case 19: 
 var $66=$s1; //@line 3098 "tcc_bootstrap.c"
 var $67=(($66+496)|0); //@line 3098 "tcc_bootstrap.c"
 var $68=HEAP32[(($67)>>2)]; //@line 3098 "tcc_bootstrap.c"
 var $69=HEAP32[((76648)>>2)]; //@line 3098 "tcc_bootstrap.c"
 var $70=(($69+32)|0); //@line 3098 "tcc_bootstrap.c"
 var $71=HEAP32[(($70)>>2)]; //@line 3098 "tcc_bootstrap.c"
 var $72=($68|0)!=($71|0); //@line 3098 "tcc_bootstrap.c"
 if($72){label=20;break;}else{label=21;break;} //@line 3098 "tcc_bootstrap.c"
 case 20: 
 _tcc_error(3648,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs; //@line 3099 "tcc_bootstrap.c"
 label=29;break; //@line 3100 "tcc_bootstrap.c"
 case 21: 
 var $75=$s1; //@line 3100 "tcc_bootstrap.c"
 var $76=(($75+236)|0); //@line 3100 "tcc_bootstrap.c"
 var $77=HEAP32[(($76)>>2)]; //@line 3100 "tcc_bootstrap.c"
 var $78=$s1; //@line 3100 "tcc_bootstrap.c"
 var $79=(($78+108)|0); //@line 3100 "tcc_bootstrap.c"
 var $80=(($79)|0); //@line 3100 "tcc_bootstrap.c"
 var $81=($77|0)==($80|0); //@line 3100 "tcc_bootstrap.c"
 if($81){label=22;break;}else{label=23;break;} //@line 3100 "tcc_bootstrap.c"
 case 22: 
 HEAP32[((10472)>>2)]=-1; //@line 3101 "tcc_bootstrap.c"
 label=28;break; //@line 3102 "tcc_bootstrap.c"
 case 23: 
 var $84=HEAP32[((10464)>>2)]; //@line 3103 "tcc_bootstrap.c"
 var $85=$84&-9; //@line 3103 "tcc_bootstrap.c"
 HEAP32[((10464)>>2)]=$85; //@line 3103 "tcc_bootstrap.c"
 var $86=HEAP32[((10464)>>2)]; //@line 3104 "tcc_bootstrap.c"
 var $87=$86&4; //@line 3104 "tcc_bootstrap.c"
 var $88=($87|0)!=0; //@line 3104 "tcc_bootstrap.c"
 if($88){label=24;break;}else{label=25;break;} //@line 3104 "tcc_bootstrap.c"
 case 24: 
 var $90=HEAP32[((76648)>>2)]; //@line 3105 "tcc_bootstrap.c"
 var $91=(($90+28)|0); //@line 3105 "tcc_bootstrap.c"
 var $92=HEAP32[(($91)>>2)]; //@line 3105 "tcc_bootstrap.c"
 var $93=$s1; //@line 3105 "tcc_bootstrap.c"
 var $94=HEAP32[((76648)>>2)]; //@line 3105 "tcc_bootstrap.c"
 var $95=(($94+40)|0); //@line 3105 "tcc_bootstrap.c"
 var $96=(($95)|0); //@line 3105 "tcc_bootstrap.c"
 var $97=_search_cached_include($93,$96,1); //@line 3105 "tcc_bootstrap.c"
 var $98=(($97)|0); //@line 3105 "tcc_bootstrap.c"
 HEAP32[(($98)>>2)]=$92; //@line 3105 "tcc_bootstrap.c"
 var $99=HEAP32[((10464)>>2)]; //@line 3107 "tcc_bootstrap.c"
 var $100=$99&-5; //@line 3107 "tcc_bootstrap.c"
 HEAP32[((10464)>>2)]=$100; //@line 3107 "tcc_bootstrap.c"
 label=25;break; //@line 3108 "tcc_bootstrap.c"
 case 25: 
 _tcc_close(); //@line 3109 "tcc_bootstrap.c"
 var $102=$s1; //@line 3110 "tcc_bootstrap.c"
 var $103=(($102+236)|0); //@line 3110 "tcc_bootstrap.c"
 var $104=HEAP32[(($103)>>2)]; //@line 3110 "tcc_bootstrap.c"
 var $105=((($104)-(4))|0); //@line 3110 "tcc_bootstrap.c"
 HEAP32[(($103)>>2)]=$105; //@line 3110 "tcc_bootstrap.c"
 var $106=HEAP32[((76648)>>2)]; //@line 3111 "tcc_bootstrap.c"
 var $107=(($106)|0); //@line 3111 "tcc_bootstrap.c"
 var $108=HEAP32[(($107)>>2)]; //@line 3111 "tcc_bootstrap.c"
 HEAP32[(($p)>>2)]=$108; //@line 3111 "tcc_bootstrap.c"
 var $109=HEAP32[(($p)>>2)]; //@line 3112 "tcc_bootstrap.c"
 var $110=HEAP32[((76648)>>2)]; //@line 3112 "tcc_bootstrap.c"
 var $111=(($110+1072)|0); //@line 3112 "tcc_bootstrap.c"
 var $112=(($111)|0); //@line 3112 "tcc_bootstrap.c"
 var $113=($109|0)==($112|0); //@line 3112 "tcc_bootstrap.c"
 if($113){label=26;break;}else{label=27;break;} //@line 3112 "tcc_bootstrap.c"
 case 26: 
 HEAP32[((10464)>>2)]=3; //@line 3113 "tcc_bootstrap.c"
 label=27;break; //@line 3113 "tcc_bootstrap.c"
 case 27: 
 label=2;break; //@line 3114 "tcc_bootstrap.c"
 case 28: 
 label=29;break;
 case 29: 
 label=30;break;
 case 30: 
 label=31;break;
 case 31: 
 label=183;break; //@line 3117 "tcc_bootstrap.c"
 case 32: 
 var $121=HEAP32[((76648)>>2)]; //@line 3119 "tcc_bootstrap.c"
 var $122=(($121+16)|0); //@line 3119 "tcc_bootstrap.c"
 var $123=HEAP32[(($122)>>2)]; //@line 3119 "tcc_bootstrap.c"
 var $124=((($123)+(1))|0); //@line 3119 "tcc_bootstrap.c"
 HEAP32[(($122)>>2)]=$124; //@line 3119 "tcc_bootstrap.c"
 var $125=HEAP32[((10464)>>2)]; //@line 3120 "tcc_bootstrap.c"
 var $126=$125|1; //@line 3120 "tcc_bootstrap.c"
 HEAP32[((10464)>>2)]=$126; //@line 3120 "tcc_bootstrap.c"
 var $127=HEAP32[(($p)>>2)]; //@line 3121 "tcc_bootstrap.c"
 var $128=(($127+1)|0); //@line 3121 "tcc_bootstrap.c"
 HEAP32[(($p)>>2)]=$128; //@line 3121 "tcc_bootstrap.c"
 label=33;break; //@line 3121 "tcc_bootstrap.c"
 case 33: 
 var $130=HEAP32[((10608)>>2)]; //@line 3123 "tcc_bootstrap.c"
 var $131=$130&4; //@line 3123 "tcc_bootstrap.c"
 var $132=0==($131|0); //@line 3123 "tcc_bootstrap.c"
 if($132){label=34;break;}else{label=35;break;} //@line 3123 "tcc_bootstrap.c"
 case 34: 
 label=2;break; //@line 3124 "tcc_bootstrap.c"
 case 35: 
 HEAP32[((10472)>>2)]=10; //@line 3125 "tcc_bootstrap.c"
 label=184;break; //@line 3126 "tcc_bootstrap.c"
 case 36: 
 var $136=_PEEKC($c,$p); //@line 3128 "tcc_bootstrap.c"
 HEAP32[(($p)>>2)]=$136; //@line 3128 "tcc_bootstrap.c"
 var $137=HEAP32[((10464)>>2)]; //@line 3129 "tcc_bootstrap.c"
 var $138=$137&1; //@line 3129 "tcc_bootstrap.c"
 var $139=($138|0)!=0; //@line 3129 "tcc_bootstrap.c"
 if($139){label=37;break;}else{label=39;break;} //@line 3129 "tcc_bootstrap.c"
 case 37: 
 var $141=HEAP32[((10608)>>2)]; //@line 3129 "tcc_bootstrap.c"
 var $142=$141&1; //@line 3129 "tcc_bootstrap.c"
 var $143=($142|0)!=0; //@line 3129 "tcc_bootstrap.c"
 if($143){label=38;break;}else{label=39;break;} //@line 3129 "tcc_bootstrap.c"
 case 38: 
 var $145=HEAP32[(($p)>>2)]; //@line 3131 "tcc_bootstrap.c"
 var $146=HEAP32[((76648)>>2)]; //@line 3131 "tcc_bootstrap.c"
 var $147=(($146)|0); //@line 3131 "tcc_bootstrap.c"
 HEAP32[(($147)>>2)]=$145; //@line 3131 "tcc_bootstrap.c"
 var $148=HEAP32[((10464)>>2)]; //@line 3132 "tcc_bootstrap.c"
 var $149=$148&2; //@line 3132 "tcc_bootstrap.c"
 _preprocess($149); //@line 3132 "tcc_bootstrap.c"
 var $150=HEAP32[((76648)>>2)]; //@line 3133 "tcc_bootstrap.c"
 var $151=(($150)|0); //@line 3133 "tcc_bootstrap.c"
 var $152=HEAP32[(($151)>>2)]; //@line 3133 "tcc_bootstrap.c"
 HEAP32[(($p)>>2)]=$152; //@line 3133 "tcc_bootstrap.c"
 label=33;break; //@line 3134 "tcc_bootstrap.c"
 case 39: 
 var $154=HEAP32[(($c)>>2)]; //@line 3136 "tcc_bootstrap.c"
 var $155=($154|0)==35; //@line 3136 "tcc_bootstrap.c"
 if($155){label=40;break;}else{label=41;break;} //@line 3136 "tcc_bootstrap.c"
 case 40: 
 var $157=HEAP32[(($p)>>2)]; //@line 3137 "tcc_bootstrap.c"
 var $158=(($157+1)|0); //@line 3137 "tcc_bootstrap.c"
 HEAP32[(($p)>>2)]=$158; //@line 3137 "tcc_bootstrap.c"
 HEAP32[((10472)>>2)]=202; //@line 3138 "tcc_bootstrap.c"
 label=45;break; //@line 3139 "tcc_bootstrap.c"
 case 41: 
 var $160=HEAP32[((10608)>>2)]; //@line 3140 "tcc_bootstrap.c"
 var $161=$160&8; //@line 3140 "tcc_bootstrap.c"
 var $162=($161|0)!=0; //@line 3140 "tcc_bootstrap.c"
 if($162){label=42;break;}else{label=43;break;} //@line 3140 "tcc_bootstrap.c"
 case 42: 
 var $164=HEAP32[(($p)>>2)]; //@line 3141 "tcc_bootstrap.c"
 var $165=((($164)-(1))|0); //@line 3141 "tcc_bootstrap.c"
 var $166=_parse_line_comment($165); //@line 3141 "tcc_bootstrap.c"
 HEAP32[(($p)>>2)]=$166; //@line 3141 "tcc_bootstrap.c"
 label=2;break; //@line 3142 "tcc_bootstrap.c"
 case 43: 
 HEAP32[((10472)>>2)]=35; //@line 3144 "tcc_bootstrap.c"
 label=44;break;
 case 44: 
 label=45;break;
 case 45: 
 label=46;break;
 case 46: 
 label=183;break; //@line 3148 "tcc_bootstrap.c"
 case 47: 
 label=48;break; //@line 3148 "tcc_bootstrap.c"
 case 48: 
 var $173=HEAP32[(($p)>>2)]; //@line 3165 "tcc_bootstrap.c"
 $p1=$173; //@line 3165 "tcc_bootstrap.c"
 $h=1; //@line 3166 "tcc_bootstrap.c"
 var $174=$h; //@line 3167 "tcc_bootstrap.c"
 var $175=HEAP32[(($c)>>2)]; //@line 3167 "tcc_bootstrap.c"
 var $176=_TOK_HASH_FUNC($174,$175); //@line 3167 "tcc_bootstrap.c"
 $h=$176; //@line 3167 "tcc_bootstrap.c"
 label=49;break; //@line 3168 "tcc_bootstrap.c"
 case 49: 
 var $178=HEAP32[(($p)>>2)]; //@line 3168 "tcc_bootstrap.c"
 var $179=(($178+1)|0); //@line 3168 "tcc_bootstrap.c"
 HEAP32[(($p)>>2)]=$179; //@line 3168 "tcc_bootstrap.c"
 var $180=HEAP8[(($179)>>0)]; //@line 3168 "tcc_bootstrap.c"
 var $181=($180&255); //@line 3168 "tcc_bootstrap.c"
 HEAP32[(($c)>>2)]=$181; //@line 3168 "tcc_bootstrap.c"
 var $182=HEAP32[(($c)>>2)]; //@line 3168 "tcc_bootstrap.c"
 var $183=((($182)+(1))|0); //@line 3168 "tcc_bootstrap.c"
 var $184=((10736+$183)|0); //@line 3168 "tcc_bootstrap.c"
 var $185=HEAP8[(($184)>>0)]; //@line 3168 "tcc_bootstrap.c"
 var $186=($185&255); //@line 3168 "tcc_bootstrap.c"
 var $187=$186&6; //@line 3168 "tcc_bootstrap.c"
 var $188=($187|0)!=0; //@line 3168 "tcc_bootstrap.c"
 if($188){label=50;break;}else{label=51;break;} //@line 3168 "tcc_bootstrap.c"
 case 50: 
 var $190=$h; //@line 3169 "tcc_bootstrap.c"
 var $191=HEAP32[(($c)>>2)]; //@line 3169 "tcc_bootstrap.c"
 var $192=_TOK_HASH_FUNC($190,$191); //@line 3169 "tcc_bootstrap.c"
 $h=$192; //@line 3169 "tcc_bootstrap.c"
 label=49;break; //@line 3169 "tcc_bootstrap.c"
 case 51: 
 var $194=HEAP32[(($p)>>2)]; //@line 3170 "tcc_bootstrap.c"
 var $195=$p1; //@line 3170 "tcc_bootstrap.c"
 var $196=$194; //@line 3170 "tcc_bootstrap.c"
 var $197=$195; //@line 3170 "tcc_bootstrap.c"
 var $198=((($196)-($197))|0); //@line 3170 "tcc_bootstrap.c"
 $len=$198; //@line 3170 "tcc_bootstrap.c"
 var $199=HEAP32[(($c)>>2)]; //@line 3171 "tcc_bootstrap.c"
 var $200=($199|0)!=92; //@line 3171 "tcc_bootstrap.c"
 if($200){label=52;break;}else{label=61;break;} //@line 3171 "tcc_bootstrap.c"
 case 52: 
 var $202=$h; //@line 3173 "tcc_bootstrap.c"
 var $203=$202&16383; //@line 3173 "tcc_bootstrap.c"
 $h=$203; //@line 3173 "tcc_bootstrap.c"
 var $204=$h; //@line 3174 "tcc_bootstrap.c"
 var $205=((11024+($204<<2))|0); //@line 3174 "tcc_bootstrap.c"
 $pts=$205; //@line 3174 "tcc_bootstrap.c"
 label=53;break; //@line 3175 "tcc_bootstrap.c"
 case 53: 
 var $207=$pts; //@line 3176 "tcc_bootstrap.c"
 var $208=HEAP32[(($207)>>2)]; //@line 3176 "tcc_bootstrap.c"
 $ts=$208; //@line 3176 "tcc_bootstrap.c"
 var $209=$ts; //@line 3177 "tcc_bootstrap.c"
 var $210=($209|0)!=0; //@line 3177 "tcc_bootstrap.c"
 if($210){label=55;break;}else{label=54;break;} //@line 3177 "tcc_bootstrap.c"
 case 54: 
 label=59;break; //@line 3178 "tcc_bootstrap.c"
 case 55: 
 var $213=$ts; //@line 3179 "tcc_bootstrap.c"
 var $214=(($213+24)|0); //@line 3179 "tcc_bootstrap.c"
 var $215=HEAP32[(($214)>>2)]; //@line 3179 "tcc_bootstrap.c"
 var $216=$len; //@line 3179 "tcc_bootstrap.c"
 var $217=($215|0)==($216|0); //@line 3179 "tcc_bootstrap.c"
 if($217){label=56;break;}else{label=58;break;} //@line 3179 "tcc_bootstrap.c"
 case 56: 
 var $219=$ts; //@line 3179 "tcc_bootstrap.c"
 var $220=(($219+28)|0); //@line 3179 "tcc_bootstrap.c"
 var $221=(($220)|0); //@line 3179 "tcc_bootstrap.c"
 var $222=$p1; //@line 3179 "tcc_bootstrap.c"
 var $223=$len; //@line 3179 "tcc_bootstrap.c"
 var $224=_memcmp($221,$222,$223); //@line 3179 "tcc_bootstrap.c"
 var $225=($224|0)!=0; //@line 3179 "tcc_bootstrap.c"
 if($225){label=58;break;}else{label=57;break;} //@line 3179 "tcc_bootstrap.c"
 case 57: 
 label=60;break; //@line 3180 "tcc_bootstrap.c"
 case 58: 
 var $228=$ts; //@line 3181 "tcc_bootstrap.c"
 var $229=(($228)|0); //@line 3181 "tcc_bootstrap.c"
 $pts=$229; //@line 3181 "tcc_bootstrap.c"
 label=53;break; //@line 3182 "tcc_bootstrap.c"
 case 59: 
 var $231=$pts; //@line 3183 "tcc_bootstrap.c"
 var $232=$p1; //@line 3183 "tcc_bootstrap.c"
 var $233=$len; //@line 3183 "tcc_bootstrap.c"
 var $234=_tok_alloc_new($231,$232,$233); //@line 3183 "tcc_bootstrap.c"
 $ts=$234; //@line 3183 "tcc_bootstrap.c"
 label=60;break; //@line 3183 "tcc_bootstrap.c"
 case 60: 
 label=66;break; //@line 3185 "tcc_bootstrap.c"
 case 61: 
 _cstr_reset(10424); //@line 3186 "tcc_bootstrap.c"
 var $237=$p1; //@line 3187 "tcc_bootstrap.c"
 var $238=$len; //@line 3187 "tcc_bootstrap.c"
 _cstr_cat(10424,$237,$238); //@line 3187 "tcc_bootstrap.c"
 var $239=HEAP32[(($p)>>2)]; //@line 3188 "tcc_bootstrap.c"
 var $240=((($239)-(1))|0); //@line 3188 "tcc_bootstrap.c"
 HEAP32[(($p)>>2)]=$240; //@line 3188 "tcc_bootstrap.c"
 var $241=_PEEKC($c,$p); //@line 3189 "tcc_bootstrap.c"
 HEAP32[(($p)>>2)]=$241; //@line 3189 "tcc_bootstrap.c"
 label=62;break; //@line 3189 "tcc_bootstrap.c"
 case 62: 
 label=63;break; //@line 3191 "tcc_bootstrap.c"
 case 63: 
 var $244=HEAP32[(($c)>>2)]; //@line 3191 "tcc_bootstrap.c"
 var $245=((($244)+(1))|0); //@line 3191 "tcc_bootstrap.c"
 var $246=((10736+$245)|0); //@line 3191 "tcc_bootstrap.c"
 var $247=HEAP8[(($246)>>0)]; //@line 3191 "tcc_bootstrap.c"
 var $248=($247&255); //@line 3191 "tcc_bootstrap.c"
 var $249=$248&6; //@line 3191 "tcc_bootstrap.c"
 var $250=($249|0)!=0; //@line 3191 "tcc_bootstrap.c"
 if($250){label=64;break;}else{label=65;break;} //@line 3191 "tcc_bootstrap.c"
 case 64: 
 var $252=HEAP32[(($c)>>2)]; //@line 3193 "tcc_bootstrap.c"
 _cstr_ccat(10424,$252); //@line 3193 "tcc_bootstrap.c"
 var $253=_PEEKC($c,$p); //@line 3194 "tcc_bootstrap.c"
 HEAP32[(($p)>>2)]=$253; //@line 3194 "tcc_bootstrap.c"
 label=63;break; //@line 3195 "tcc_bootstrap.c"
 case 65: 
 var $255=HEAP32[((10428)>>2)]; //@line 3196 "tcc_bootstrap.c"
 var $256=HEAP32[((10424)>>2)]; //@line 3196 "tcc_bootstrap.c"
 var $257=_tok_alloc($255,$256); //@line 3196 "tcc_bootstrap.c"
 $ts=$257; //@line 3196 "tcc_bootstrap.c"
 label=66;break;
 case 66: 
 var $259=$ts; //@line 3198 "tcc_bootstrap.c"
 var $260=(($259+20)|0); //@line 3198 "tcc_bootstrap.c"
 var $261=HEAP32[(($260)>>2)]; //@line 3198 "tcc_bootstrap.c"
 HEAP32[((10472)>>2)]=$261; //@line 3198 "tcc_bootstrap.c"
 label=183;break; //@line 3199 "tcc_bootstrap.c"
 case 67: 
 var $263=HEAP32[(($p)>>2)]; //@line 3201 "tcc_bootstrap.c"
 var $264=(($263+1)|0); //@line 3201 "tcc_bootstrap.c"
 var $265=HEAP8[(($264)>>0)]; //@line 3201 "tcc_bootstrap.c"
 var $266=($265&255); //@line 3201 "tcc_bootstrap.c"
 $t=$266; //@line 3201 "tcc_bootstrap.c"
 var $267=$t; //@line 3202 "tcc_bootstrap.c"
 var $268=($267|0)!=92; //@line 3202 "tcc_bootstrap.c"
 if($268){label=68;break;}else{label=71;break;} //@line 3202 "tcc_bootstrap.c"
 case 68: 
 var $270=$t; //@line 3202 "tcc_bootstrap.c"
 var $271=($270|0)!=39; //@line 3202 "tcc_bootstrap.c"
 if($271){label=69;break;}else{label=71;break;} //@line 3202 "tcc_bootstrap.c"
 case 69: 
 var $273=$t; //@line 3202 "tcc_bootstrap.c"
 var $274=($273|0)!=34; //@line 3202 "tcc_bootstrap.c"
 if($274){label=70;break;}else{label=71;break;} //@line 3202 "tcc_bootstrap.c"
 case 70: 
 label=48;break; //@line 3203 "tcc_bootstrap.c"
 case 71: 
 var $277=_PEEKC($c,$p); //@line 3205 "tcc_bootstrap.c"
 HEAP32[(($p)>>2)]=$277; //@line 3205 "tcc_bootstrap.c"
 var $278=HEAP32[(($c)>>2)]; //@line 3206 "tcc_bootstrap.c"
 var $279=($278|0)==39; //@line 3206 "tcc_bootstrap.c"
 if($279){label=73;break;}else{label=72;break;} //@line 3206 "tcc_bootstrap.c"
 case 72: 
 var $281=HEAP32[(($c)>>2)]; //@line 3206 "tcc_bootstrap.c"
 var $282=($281|0)==34; //@line 3206 "tcc_bootstrap.c"
 if($282){label=73;break;}else{label=74;break;} //@line 3206 "tcc_bootstrap.c"
 case 73: 
 $is_long=1; //@line 3207 "tcc_bootstrap.c"
 label=106;break; //@line 3208 "tcc_bootstrap.c"
 case 74: 
 _cstr_reset(10424); //@line 3210 "tcc_bootstrap.c"
 _cstr_ccat(10424,76); //@line 3211 "tcc_bootstrap.c"
 label=62;break; //@line 3212 "tcc_bootstrap.c"
 case 75: 
 var $286=HEAP32[(($c)>>2)]; //@line 3219 "tcc_bootstrap.c"
 $t=$286; //@line 3219 "tcc_bootstrap.c"
 var $287=_PEEKC($c,$p); //@line 3220 "tcc_bootstrap.c"
 HEAP32[(($p)>>2)]=$287; //@line 3220 "tcc_bootstrap.c"
 label=76;break; //@line 3220 "tcc_bootstrap.c"
 case 76: 
 _cstr_reset(10424); //@line 3222 "tcc_bootstrap.c"
 label=77;break; //@line 3223 "tcc_bootstrap.c"
 case 77: 
 var $290=$t; //@line 3224 "tcc_bootstrap.c"
 _cstr_ccat(10424,$290); //@line 3224 "tcc_bootstrap.c"
 var $291=HEAP32[(($c)>>2)]; //@line 3225 "tcc_bootstrap.c"
 var $292=((($291)+(1))|0); //@line 3225 "tcc_bootstrap.c"
 var $293=((10736+$292)|0); //@line 3225 "tcc_bootstrap.c"
 var $294=HEAP8[(($293)>>0)]; //@line 3225 "tcc_bootstrap.c"
 var $295=($294&255); //@line 3225 "tcc_bootstrap.c"
 var $296=$295&6; //@line 3225 "tcc_bootstrap.c"
 var $297=($296|0)!=0; //@line 3225 "tcc_bootstrap.c"
 if($297){label=89;break;}else{label=78;break;} //@line 3225 "tcc_bootstrap.c"
 case 78: 
 var $299=HEAP32[(($c)>>2)]; //@line 3225 "tcc_bootstrap.c"
 var $300=($299|0)==46; //@line 3225 "tcc_bootstrap.c"
 if($300){label=89;break;}else{label=79;break;} //@line 3225 "tcc_bootstrap.c"
 case 79: 
 var $302=HEAP32[(($c)>>2)]; //@line 3225 "tcc_bootstrap.c"
 var $303=($302|0)==43; //@line 3225 "tcc_bootstrap.c"
 if($303){label=81;break;}else{label=80;break;} //@line 3225 "tcc_bootstrap.c"
 case 80: 
 var $305=HEAP32[(($c)>>2)]; //@line 3225 "tcc_bootstrap.c"
 var $306=($305|0)==45; //@line 3225 "tcc_bootstrap.c"
 if($306){label=81;break;}else{label=88;break;} //@line 3225 "tcc_bootstrap.c"
 case 81: 
 var $308=$t; //@line 3225 "tcc_bootstrap.c"
 var $309=($308|0)==101; //@line 3225 "tcc_bootstrap.c"
 if($309){label=83;break;}else{label=82;break;} //@line 3225 "tcc_bootstrap.c"
 case 82: 
 var $311=$t; //@line 3225 "tcc_bootstrap.c"
 var $312=($311|0)==69; //@line 3225 "tcc_bootstrap.c"
 if($312){label=83;break;}else{label=86;break;} //@line 3225 "tcc_bootstrap.c"
 case 83: 
 var $314=HEAP32[((10608)>>2)]; //@line 3225 "tcc_bootstrap.c"
 var $315=$314&8; //@line 3225 "tcc_bootstrap.c"
 var $316=($315|0)!=0; //@line 3225 "tcc_bootstrap.c"
 if($316){label=84;break;}else{label=89;break;} //@line 3225 "tcc_bootstrap.c"
 case 84: 
 var $318=HEAP32[((10428)>>2)]; //@line 3225 "tcc_bootstrap.c"
 var $319=(($318)|0); //@line 3225 "tcc_bootstrap.c"
 var $320=HEAP8[(($319)>>0)]; //@line 3225 "tcc_bootstrap.c"
 var $321=(($320<<24)>>24); //@line 3225 "tcc_bootstrap.c"
 var $322=($321|0)==48; //@line 3225 "tcc_bootstrap.c"
 if($322){label=85;break;}else{label=89;break;} //@line 3225 "tcc_bootstrap.c"
 case 85: 
 var $324=HEAP32[((10428)>>2)]; //@line 3231 "tcc_bootstrap.c"
 var $325=(($324+1)|0); //@line 3231 "tcc_bootstrap.c"
 var $326=HEAP8[(($325)>>0)]; //@line 3231 "tcc_bootstrap.c"
 var $327=(($326<<24)>>24); //@line 3231 "tcc_bootstrap.c"
 var $328=_toup($327); //@line 3231 "tcc_bootstrap.c"
 var $329=($328|0)==88; //@line 3231 "tcc_bootstrap.c"
 if($329){label=86;break;}else{label=89;break;} //@line 3231 "tcc_bootstrap.c"
 case 86: 
 var $331=$t; //@line 3231 "tcc_bootstrap.c"
 var $332=($331|0)==112; //@line 3231 "tcc_bootstrap.c"
 if($332){label=89;break;}else{label=87;break;} //@line 3231 "tcc_bootstrap.c"
 case 87: 
 var $334=$t; //@line 3231 "tcc_bootstrap.c"
 var $335=($334|0)==80; //@line 3231 "tcc_bootstrap.c"
 if($335){label=89;break;}else{label=88;break;} //@line 3231 "tcc_bootstrap.c"
 case 88: 
 label=90;break; //@line 3233 "tcc_bootstrap.c"
 case 89: 
 var $338=HEAP32[(($c)>>2)]; //@line 3234 "tcc_bootstrap.c"
 $t=$338; //@line 3234 "tcc_bootstrap.c"
 var $339=_PEEKC($c,$p); //@line 3235 "tcc_bootstrap.c"
 HEAP32[(($p)>>2)]=$339; //@line 3235 "tcc_bootstrap.c"
 label=77;break; //@line 3236 "tcc_bootstrap.c"
 case 90: 
 _cstr_ccat(10424,0); //@line 3237 "tcc_bootstrap.c"
 var $341=HEAP32[((10424)>>2)]; //@line 3238 "tcc_bootstrap.c"
 HEAP32[((10440)>>2)]=$341; //@line 3238 "tcc_bootstrap.c"
 var $342=HEAP32[((10428)>>2)]; //@line 3239 "tcc_bootstrap.c"
 HEAP32[((10444)>>2)]=$342; //@line 3239 "tcc_bootstrap.c"
 HEAP32[((10472)>>2)]=190; //@line 3240 "tcc_bootstrap.c"
 label=183;break; //@line 3241 "tcc_bootstrap.c"
 case 91: 
 var $344=_PEEKC($c,$p); //@line 3243 "tcc_bootstrap.c"
 HEAP32[(($p)>>2)]=$344; //@line 3243 "tcc_bootstrap.c"
 var $345=HEAP32[(($c)>>2)]; //@line 3244 "tcc_bootstrap.c"
 var $346=_isnum($345); //@line 3244 "tcc_bootstrap.c"
 var $347=($346|0)!=0; //@line 3244 "tcc_bootstrap.c"
 if($347){label=92;break;}else{label=93;break;} //@line 3244 "tcc_bootstrap.c"
 case 92: 
 $t=46; //@line 3245 "tcc_bootstrap.c"
 label=76;break; //@line 3246 "tcc_bootstrap.c"
 case 93: 
 var $350=HEAP8[((10783)>>0)]; //@line 3247 "tcc_bootstrap.c"
 var $351=($350&255); //@line 3247 "tcc_bootstrap.c"
 var $352=$351&2; //@line 3247 "tcc_bootstrap.c"
 var $353=($352|0)!=0; //@line 3247 "tcc_bootstrap.c"
 if($353){label=94;break;}else{label=96;break;} //@line 3247 "tcc_bootstrap.c"
 case 94: 
 var $355=HEAP32[(($c)>>2)]; //@line 3247 "tcc_bootstrap.c"
 var $356=((($355)+(1))|0); //@line 3247 "tcc_bootstrap.c"
 var $357=((10736+$356)|0); //@line 3247 "tcc_bootstrap.c"
 var $358=HEAP8[(($357)>>0)]; //@line 3247 "tcc_bootstrap.c"
 var $359=($358&255); //@line 3247 "tcc_bootstrap.c"
 var $360=$359&6; //@line 3247 "tcc_bootstrap.c"
 var $361=($360|0)!=0; //@line 3247 "tcc_bootstrap.c"
 if($361){label=95;break;}else{label=96;break;} //@line 3247 "tcc_bootstrap.c"
 case 95: 
 HEAP32[(($c)>>2)]=46; //@line 3249 "tcc_bootstrap.c"
 var $363=HEAP32[(($p)>>2)]; //@line 3249 "tcc_bootstrap.c"
 var $364=((($363)-(1))|0); //@line 3249 "tcc_bootstrap.c"
 HEAP32[(($p)>>2)]=$364; //@line 3249 "tcc_bootstrap.c"
 HEAP8[(($364)>>0)]=46; //@line 3249 "tcc_bootstrap.c"
 label=48;break; //@line 3250 "tcc_bootstrap.c"
 case 96: 
 var $366=HEAP32[(($c)>>2)]; //@line 3251 "tcc_bootstrap.c"
 var $367=($366|0)==46; //@line 3251 "tcc_bootstrap.c"
 if($367){label=97;break;}else{label=101;break;} //@line 3251 "tcc_bootstrap.c"
 case 97: 
 var $369=_PEEKC($c,$p); //@line 3252 "tcc_bootstrap.c"
 HEAP32[(($p)>>2)]=$369; //@line 3252 "tcc_bootstrap.c"
 var $370=HEAP32[(($c)>>2)]; //@line 3253 "tcc_bootstrap.c"
 var $371=($370|0)==46; //@line 3253 "tcc_bootstrap.c"
 if($371){label=98;break;}else{label=99;break;} //@line 3253 "tcc_bootstrap.c"
 case 98: 
 var $373=HEAP32[(($p)>>2)]; //@line 3254 "tcc_bootstrap.c"
 var $374=(($373+1)|0); //@line 3254 "tcc_bootstrap.c"
 HEAP32[(($p)>>2)]=$374; //@line 3254 "tcc_bootstrap.c"
 HEAP32[((10472)>>2)]=200; //@line 3255 "tcc_bootstrap.c"
 label=100;break; //@line 3256 "tcc_bootstrap.c"
 case 99: 
 var $376=HEAP32[(($p)>>2)]; //@line 3257 "tcc_bootstrap.c"
 var $377=((($376)-(1))|0); //@line 3257 "tcc_bootstrap.c"
 HEAP32[(($p)>>2)]=$377; //@line 3257 "tcc_bootstrap.c"
 HEAP8[(($377)>>0)]=46; //@line 3257 "tcc_bootstrap.c"
 HEAP32[((10472)>>2)]=46; //@line 3258 "tcc_bootstrap.c"
 label=100;break;
 case 100: 
 label=102;break; //@line 3260 "tcc_bootstrap.c"
 case 101: 
 HEAP32[((10472)>>2)]=46; //@line 3261 "tcc_bootstrap.c"
 label=102;break;
 case 102: 
 label=103;break;
 case 103: 
 label=104;break;
 case 104: 
 label=183;break; //@line 3263 "tcc_bootstrap.c"
 case 105: 
 $is_long=0; //@line 3266 "tcc_bootstrap.c"
 label=106;break; //@line 3266 "tcc_bootstrap.c"
 case 106: 
 _cstr_reset(10424); //@line 3268 "tcc_bootstrap.c"
 var $385=$is_long; //@line 3269 "tcc_bootstrap.c"
 var $386=($385|0)!=0; //@line 3269 "tcc_bootstrap.c"
 if($386){label=107;break;}else{label=108;break;} //@line 3269 "tcc_bootstrap.c"
 case 107: 
 _cstr_ccat(10424,76); //@line 3270 "tcc_bootstrap.c"
 label=108;break; //@line 3270 "tcc_bootstrap.c"
 case 108: 
 var $389=HEAP32[(($c)>>2)]; //@line 3271 "tcc_bootstrap.c"
 _cstr_ccat(10424,$389); //@line 3271 "tcc_bootstrap.c"
 var $390=HEAP32[(($p)>>2)]; //@line 3272 "tcc_bootstrap.c"
 var $391=HEAP32[(($c)>>2)]; //@line 3272 "tcc_bootstrap.c"
 var $392=_parse_pp_string($390,$391,10424); //@line 3272 "tcc_bootstrap.c"
 HEAP32[(($p)>>2)]=$392; //@line 3272 "tcc_bootstrap.c"
 var $393=HEAP32[(($c)>>2)]; //@line 3273 "tcc_bootstrap.c"
 _cstr_ccat(10424,$393); //@line 3273 "tcc_bootstrap.c"
 _cstr_ccat(10424,0); //@line 3274 "tcc_bootstrap.c"
 var $394=HEAP32[((10424)>>2)]; //@line 3275 "tcc_bootstrap.c"
 HEAP32[((10440)>>2)]=$394; //@line 3275 "tcc_bootstrap.c"
 var $395=HEAP32[((10428)>>2)]; //@line 3276 "tcc_bootstrap.c"
 HEAP32[((10444)>>2)]=$395; //@line 3276 "tcc_bootstrap.c"
 HEAP32[((10472)>>2)]=191; //@line 3277 "tcc_bootstrap.c"
 label=183;break; //@line 3278 "tcc_bootstrap.c"
 case 109: 
 var $397=_PEEKC($c,$p); //@line 3280 "tcc_bootstrap.c"
 HEAP32[(($p)>>2)]=$397; //@line 3280 "tcc_bootstrap.c"
 var $398=HEAP32[(($c)>>2)]; //@line 3281 "tcc_bootstrap.c"
 var $399=($398|0)==61; //@line 3281 "tcc_bootstrap.c"
 if($399){label=110;break;}else{label=111;break;} //@line 3281 "tcc_bootstrap.c"
 case 110: 
 var $401=HEAP32[(($p)>>2)]; //@line 3282 "tcc_bootstrap.c"
 var $402=(($401+1)|0); //@line 3282 "tcc_bootstrap.c"
 HEAP32[(($p)>>2)]=$402; //@line 3282 "tcc_bootstrap.c"
 HEAP32[((10472)>>2)]=158; //@line 3283 "tcc_bootstrap.c"
 label=118;break; //@line 3284 "tcc_bootstrap.c"
 case 111: 
 var $404=HEAP32[(($c)>>2)]; //@line 3284 "tcc_bootstrap.c"
 var $405=($404|0)==60; //@line 3284 "tcc_bootstrap.c"
 if($405){label=112;break;}else{label=116;break;} //@line 3284 "tcc_bootstrap.c"
 case 112: 
 var $407=_PEEKC($c,$p); //@line 3285 "tcc_bootstrap.c"
 HEAP32[(($p)>>2)]=$407; //@line 3285 "tcc_bootstrap.c"
 var $408=HEAP32[(($c)>>2)]; //@line 3286 "tcc_bootstrap.c"
 var $409=($408|0)==61; //@line 3286 "tcc_bootstrap.c"
 if($409){label=113;break;}else{label=114;break;} //@line 3286 "tcc_bootstrap.c"
 case 113: 
 var $411=HEAP32[(($p)>>2)]; //@line 3287 "tcc_bootstrap.c"
 var $412=(($411+1)|0); //@line 3287 "tcc_bootstrap.c"
 HEAP32[(($p)>>2)]=$412; //@line 3287 "tcc_bootstrap.c"
 HEAP32[((10472)>>2)]=129; //@line 3288 "tcc_bootstrap.c"
 label=115;break; //@line 3289 "tcc_bootstrap.c"
 case 114: 
 HEAP32[((10472)>>2)]=1; //@line 3290 "tcc_bootstrap.c"
 label=115;break;
 case 115: 
 label=117;break; //@line 3292 "tcc_bootstrap.c"
 case 116: 
 HEAP32[((10472)>>2)]=156; //@line 3293 "tcc_bootstrap.c"
 label=117;break;
 case 117: 
 label=118;break;
 case 118: 
 label=183;break; //@line 3295 "tcc_bootstrap.c"
 case 119: 
 var $419=_PEEKC($c,$p); //@line 3297 "tcc_bootstrap.c"
 HEAP32[(($p)>>2)]=$419; //@line 3297 "tcc_bootstrap.c"
 var $420=HEAP32[(($c)>>2)]; //@line 3298 "tcc_bootstrap.c"
 var $421=($420|0)==61; //@line 3298 "tcc_bootstrap.c"
 if($421){label=120;break;}else{label=121;break;} //@line 3298 "tcc_bootstrap.c"
 case 120: 
 var $423=HEAP32[(($p)>>2)]; //@line 3299 "tcc_bootstrap.c"
 var $424=(($423+1)|0); //@line 3299 "tcc_bootstrap.c"
 HEAP32[(($p)>>2)]=$424; //@line 3299 "tcc_bootstrap.c"
 HEAP32[((10472)>>2)]=157; //@line 3300 "tcc_bootstrap.c"
 label=128;break; //@line 3301 "tcc_bootstrap.c"
 case 121: 
 var $426=HEAP32[(($c)>>2)]; //@line 3301 "tcc_bootstrap.c"
 var $427=($426|0)==62; //@line 3301 "tcc_bootstrap.c"
 if($427){label=122;break;}else{label=126;break;} //@line 3301 "tcc_bootstrap.c"
 case 122: 
 var $429=_PEEKC($c,$p); //@line 3302 "tcc_bootstrap.c"
 HEAP32[(($p)>>2)]=$429; //@line 3302 "tcc_bootstrap.c"
 var $430=HEAP32[(($c)>>2)]; //@line 3303 "tcc_bootstrap.c"
 var $431=($430|0)==61; //@line 3303 "tcc_bootstrap.c"
 if($431){label=123;break;}else{label=124;break;} //@line 3303 "tcc_bootstrap.c"
 case 123: 
 var $433=HEAP32[(($p)>>2)]; //@line 3304 "tcc_bootstrap.c"
 var $434=(($433+1)|0); //@line 3304 "tcc_bootstrap.c"
 HEAP32[(($p)>>2)]=$434; //@line 3304 "tcc_bootstrap.c"
 HEAP32[((10472)>>2)]=130; //@line 3305 "tcc_bootstrap.c"
 label=125;break; //@line 3306 "tcc_bootstrap.c"
 case 124: 
 HEAP32[((10472)>>2)]=2; //@line 3307 "tcc_bootstrap.c"
 label=125;break;
 case 125: 
 label=127;break; //@line 3309 "tcc_bootstrap.c"
 case 126: 
 HEAP32[((10472)>>2)]=159; //@line 3310 "tcc_bootstrap.c"
 label=127;break;
 case 127: 
 label=128;break;
 case 128: 
 label=183;break; //@line 3312 "tcc_bootstrap.c"
 case 129: 
 var $441=_PEEKC($c,$p); //@line 3314 "tcc_bootstrap.c"
 HEAP32[(($p)>>2)]=$441; //@line 3314 "tcc_bootstrap.c"
 var $442=HEAP32[(($c)>>2)]; //@line 3315 "tcc_bootstrap.c"
 var $443=($442|0)==38; //@line 3315 "tcc_bootstrap.c"
 if($443){label=130;break;}else{label=131;break;} //@line 3315 "tcc_bootstrap.c"
 case 130: 
 var $445=HEAP32[(($p)>>2)]; //@line 3316 "tcc_bootstrap.c"
 var $446=(($445+1)|0); //@line 3316 "tcc_bootstrap.c"
 HEAP32[(($p)>>2)]=$446; //@line 3316 "tcc_bootstrap.c"
 HEAP32[((10472)>>2)]=160; //@line 3317 "tcc_bootstrap.c"
 label=135;break; //@line 3318 "tcc_bootstrap.c"
 case 131: 
 var $448=HEAP32[(($c)>>2)]; //@line 3318 "tcc_bootstrap.c"
 var $449=($448|0)==61; //@line 3318 "tcc_bootstrap.c"
 if($449){label=132;break;}else{label=133;break;} //@line 3318 "tcc_bootstrap.c"
 case 132: 
 var $451=HEAP32[(($p)>>2)]; //@line 3319 "tcc_bootstrap.c"
 var $452=(($451+1)|0); //@line 3319 "tcc_bootstrap.c"
 HEAP32[(($p)>>2)]=$452; //@line 3319 "tcc_bootstrap.c"
 HEAP32[((10472)>>2)]=166; //@line 3320 "tcc_bootstrap.c"
 label=134;break; //@line 3321 "tcc_bootstrap.c"
 case 133: 
 HEAP32[((10472)>>2)]=38; //@line 3322 "tcc_bootstrap.c"
 label=134;break;
 case 134: 
 label=135;break;
 case 135: 
 label=183;break; //@line 3324 "tcc_bootstrap.c"
 case 136: 
 var $457=_PEEKC($c,$p); //@line 3326 "tcc_bootstrap.c"
 HEAP32[(($p)>>2)]=$457; //@line 3326 "tcc_bootstrap.c"
 var $458=HEAP32[(($c)>>2)]; //@line 3327 "tcc_bootstrap.c"
 var $459=($458|0)==124; //@line 3327 "tcc_bootstrap.c"
 if($459){label=137;break;}else{label=138;break;} //@line 3327 "tcc_bootstrap.c"
 case 137: 
 var $461=HEAP32[(($p)>>2)]; //@line 3328 "tcc_bootstrap.c"
 var $462=(($461+1)|0); //@line 3328 "tcc_bootstrap.c"
 HEAP32[(($p)>>2)]=$462; //@line 3328 "tcc_bootstrap.c"
 HEAP32[((10472)>>2)]=161; //@line 3329 "tcc_bootstrap.c"
 label=142;break; //@line 3330 "tcc_bootstrap.c"
 case 138: 
 var $464=HEAP32[(($c)>>2)]; //@line 3330 "tcc_bootstrap.c"
 var $465=($464|0)==61; //@line 3330 "tcc_bootstrap.c"
 if($465){label=139;break;}else{label=140;break;} //@line 3330 "tcc_bootstrap.c"
 case 139: 
 var $467=HEAP32[(($p)>>2)]; //@line 3331 "tcc_bootstrap.c"
 var $468=(($467+1)|0); //@line 3331 "tcc_bootstrap.c"
 HEAP32[(($p)>>2)]=$468; //@line 3331 "tcc_bootstrap.c"
 HEAP32[((10472)>>2)]=252; //@line 3332 "tcc_bootstrap.c"
 label=141;break; //@line 3333 "tcc_bootstrap.c"
 case 140: 
 HEAP32[((10472)>>2)]=124; //@line 3334 "tcc_bootstrap.c"
 label=141;break;
 case 141: 
 label=142;break;
 case 142: 
 label=183;break; //@line 3336 "tcc_bootstrap.c"
 case 143: 
 var $473=_PEEKC($c,$p); //@line 3338 "tcc_bootstrap.c"
 HEAP32[(($p)>>2)]=$473; //@line 3338 "tcc_bootstrap.c"
 var $474=HEAP32[(($c)>>2)]; //@line 3339 "tcc_bootstrap.c"
 var $475=($474|0)==43; //@line 3339 "tcc_bootstrap.c"
 if($475){label=144;break;}else{label=145;break;} //@line 3339 "tcc_bootstrap.c"
 case 144: 
 var $477=HEAP32[(($p)>>2)]; //@line 3340 "tcc_bootstrap.c"
 var $478=(($477+1)|0); //@line 3340 "tcc_bootstrap.c"
 HEAP32[(($p)>>2)]=$478; //@line 3340 "tcc_bootstrap.c"
 HEAP32[((10472)>>2)]=164; //@line 3341 "tcc_bootstrap.c"
 label=149;break; //@line 3342 "tcc_bootstrap.c"
 case 145: 
 var $480=HEAP32[(($c)>>2)]; //@line 3342 "tcc_bootstrap.c"
 var $481=($480|0)==61; //@line 3342 "tcc_bootstrap.c"
 if($481){label=146;break;}else{label=147;break;} //@line 3342 "tcc_bootstrap.c"
 case 146: 
 var $483=HEAP32[(($p)>>2)]; //@line 3343 "tcc_bootstrap.c"
 var $484=(($483+1)|0); //@line 3343 "tcc_bootstrap.c"
 HEAP32[(($p)>>2)]=$484; //@line 3343 "tcc_bootstrap.c"
 HEAP32[((10472)>>2)]=171; //@line 3344 "tcc_bootstrap.c"
 label=148;break; //@line 3345 "tcc_bootstrap.c"
 case 147: 
 HEAP32[((10472)>>2)]=43; //@line 3346 "tcc_bootstrap.c"
 label=148;break;
 case 148: 
 label=149;break;
 case 149: 
 label=183;break; //@line 3348 "tcc_bootstrap.c"
 case 150: 
 var $489=_PEEKC($c,$p); //@line 3350 "tcc_bootstrap.c"
 HEAP32[(($p)>>2)]=$489; //@line 3350 "tcc_bootstrap.c"
 var $490=HEAP32[(($c)>>2)]; //@line 3351 "tcc_bootstrap.c"
 var $491=($490|0)==45; //@line 3351 "tcc_bootstrap.c"
 if($491){label=151;break;}else{label=152;break;} //@line 3351 "tcc_bootstrap.c"
 case 151: 
 var $493=HEAP32[(($p)>>2)]; //@line 3352 "tcc_bootstrap.c"
 var $494=(($493+1)|0); //@line 3352 "tcc_bootstrap.c"
 HEAP32[(($p)>>2)]=$494; //@line 3352 "tcc_bootstrap.c"
 HEAP32[((10472)>>2)]=162; //@line 3353 "tcc_bootstrap.c"
 label=159;break; //@line 3354 "tcc_bootstrap.c"
 case 152: 
 var $496=HEAP32[(($c)>>2)]; //@line 3354 "tcc_bootstrap.c"
 var $497=($496|0)==61; //@line 3354 "tcc_bootstrap.c"
 if($497){label=153;break;}else{label=154;break;} //@line 3354 "tcc_bootstrap.c"
 case 153: 
 var $499=HEAP32[(($p)>>2)]; //@line 3355 "tcc_bootstrap.c"
 var $500=(($499+1)|0); //@line 3355 "tcc_bootstrap.c"
 HEAP32[(($p)>>2)]=$500; //@line 3355 "tcc_bootstrap.c"
 HEAP32[((10472)>>2)]=173; //@line 3356 "tcc_bootstrap.c"
 label=158;break; //@line 3357 "tcc_bootstrap.c"
 case 154: 
 var $502=HEAP32[(($c)>>2)]; //@line 3357 "tcc_bootstrap.c"
 var $503=($502|0)==62; //@line 3357 "tcc_bootstrap.c"
 if($503){label=155;break;}else{label=156;break;} //@line 3357 "tcc_bootstrap.c"
 case 155: 
 var $505=HEAP32[(($p)>>2)]; //@line 3358 "tcc_bootstrap.c"
 var $506=(($505+1)|0); //@line 3358 "tcc_bootstrap.c"
 HEAP32[(($p)>>2)]=$506; //@line 3358 "tcc_bootstrap.c"
 HEAP32[((10472)>>2)]=199; //@line 3359 "tcc_bootstrap.c"
 label=157;break; //@line 3360 "tcc_bootstrap.c"
 case 156: 
 HEAP32[((10472)>>2)]=45; //@line 3361 "tcc_bootstrap.c"
 label=157;break;
 case 157: 
 label=158;break;
 case 158: 
 label=159;break;
 case 159: 
 label=183;break; //@line 3363 "tcc_bootstrap.c"
 case 160: 
 var $512=_PARSE2($c,$p,33,61,149); //@line 3365 "tcc_bootstrap.c"
 HEAP32[(($p)>>2)]=$512; //@line 3365 "tcc_bootstrap.c"
 label=183;break; //@line 3365 "tcc_bootstrap.c"
 case 161: 
 var $514=_PARSE2($c,$p,61,61,148); //@line 3367 "tcc_bootstrap.c"
 HEAP32[(($p)>>2)]=$514; //@line 3367 "tcc_bootstrap.c"
 label=183;break; //@line 3367 "tcc_bootstrap.c"
 case 162: 
 var $516=_PARSE2($c,$p,42,61,170); //@line 3369 "tcc_bootstrap.c"
 HEAP32[(($p)>>2)]=$516; //@line 3369 "tcc_bootstrap.c"
 label=183;break; //@line 3369 "tcc_bootstrap.c"
 case 163: 
 var $518=_PARSE2($c,$p,37,61,165); //@line 3371 "tcc_bootstrap.c"
 HEAP32[(($p)>>2)]=$518; //@line 3371 "tcc_bootstrap.c"
 label=183;break; //@line 3371 "tcc_bootstrap.c"
 case 164: 
 var $520=_PARSE2($c,$p,94,61,222); //@line 3373 "tcc_bootstrap.c"
 HEAP32[(($p)>>2)]=$520; //@line 3373 "tcc_bootstrap.c"
 label=183;break; //@line 3373 "tcc_bootstrap.c"
 case 165: 
 var $522=_PEEKC($c,$p); //@line 3375 "tcc_bootstrap.c"
 HEAP32[(($p)>>2)]=$522; //@line 3375 "tcc_bootstrap.c"
 var $523=HEAP32[(($c)>>2)]; //@line 3376 "tcc_bootstrap.c"
 var $524=($523|0)==42; //@line 3376 "tcc_bootstrap.c"
 if($524){label=166;break;}else{label=167;break;} //@line 3376 "tcc_bootstrap.c"
 case 166: 
 var $526=HEAP32[(($p)>>2)]; //@line 3377 "tcc_bootstrap.c"
 var $527=_parse_comment($526); //@line 3377 "tcc_bootstrap.c"
 HEAP32[(($p)>>2)]=$527; //@line 3377 "tcc_bootstrap.c"
 HEAP32[((10472)>>2)]=32; //@line 3378 "tcc_bootstrap.c"
 label=184;break; //@line 3379 "tcc_bootstrap.c"
 case 167: 
 var $529=HEAP32[(($c)>>2)]; //@line 3380 "tcc_bootstrap.c"
 var $530=($529|0)==47; //@line 3380 "tcc_bootstrap.c"
 if($530){label=168;break;}else{label=169;break;} //@line 3380 "tcc_bootstrap.c"
 case 168: 
 var $532=HEAP32[(($p)>>2)]; //@line 3381 "tcc_bootstrap.c"
 var $533=_parse_line_comment($532); //@line 3381 "tcc_bootstrap.c"
 HEAP32[(($p)>>2)]=$533; //@line 3381 "tcc_bootstrap.c"
 HEAP32[((10472)>>2)]=32; //@line 3382 "tcc_bootstrap.c"
 label=184;break; //@line 3383 "tcc_bootstrap.c"
 case 169: 
 var $535=HEAP32[(($c)>>2)]; //@line 3384 "tcc_bootstrap.c"
 var $536=($535|0)==61; //@line 3384 "tcc_bootstrap.c"
 if($536){label=170;break;}else{label=171;break;} //@line 3384 "tcc_bootstrap.c"
 case 170: 
 var $538=HEAP32[(($p)>>2)]; //@line 3385 "tcc_bootstrap.c"
 var $539=(($538+1)|0); //@line 3385 "tcc_bootstrap.c"
 HEAP32[(($p)>>2)]=$539; //@line 3385 "tcc_bootstrap.c"
 HEAP32[((10472)>>2)]=175; //@line 3386 "tcc_bootstrap.c"
 label=172;break; //@line 3387 "tcc_bootstrap.c"
 case 171: 
 HEAP32[((10472)>>2)]=47; //@line 3388 "tcc_bootstrap.c"
 label=172;break;
 case 172: 
 label=173;break;
 case 173: 
 label=174;break;
 case 174: 
 label=183;break; //@line 3390 "tcc_bootstrap.c"
 case 175: 
 label=176;break; //@line 3390 "tcc_bootstrap.c"
 case 176: 
 var $546=HEAP32[(($c)>>2)]; //@line 3404 "tcc_bootstrap.c"
 HEAP32[((10472)>>2)]=$546; //@line 3404 "tcc_bootstrap.c"
 var $547=HEAP32[(($p)>>2)]; //@line 3405 "tcc_bootstrap.c"
 var $548=(($547+1)|0); //@line 3405 "tcc_bootstrap.c"
 HEAP32[(($p)>>2)]=$548; //@line 3405 "tcc_bootstrap.c"
 label=183;break; //@line 3406 "tcc_bootstrap.c"
 case 177: 
 var $550=HEAP32[(($c)>>2)]; //@line 3408 "tcc_bootstrap.c"
 var $551=($550|0)>=128; //@line 3408 "tcc_bootstrap.c"
 if($551){label=178;break;}else{label=180;break;} //@line 3408 "tcc_bootstrap.c"
 case 178: 
 var $553=HEAP32[(($c)>>2)]; //@line 3408 "tcc_bootstrap.c"
 var $554=($553|0)<=255; //@line 3408 "tcc_bootstrap.c"
 if($554){label=179;break;}else{label=180;break;} //@line 3408 "tcc_bootstrap.c"
 case 179: 
 label=48;break; //@line 3409 "tcc_bootstrap.c"
 case 180: 
 var $557=HEAP32[((10608)>>2)]; //@line 3410 "tcc_bootstrap.c"
 var $558=($557|0)!=0; //@line 3410 "tcc_bootstrap.c"
 if($558){label=181;break;}else{label=182;break;} //@line 3410 "tcc_bootstrap.c"
 case 181: 
 label=176;break; //@line 3411 "tcc_bootstrap.c"
 case 182: 
 var $561=HEAP32[(($c)>>2)]; //@line 3412 "tcc_bootstrap.c"
 _tcc_error(3616,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$561,tempVarArgs)); STACKTOP=tempVarArgs; //@line 3412 "tcc_bootstrap.c"
 label=183;break; //@line 3413 "tcc_bootstrap.c"
 case 183: 
 HEAP32[((10464)>>2)]=0; //@line 3415 "tcc_bootstrap.c"
 label=184;break; //@line 3415 "tcc_bootstrap.c"
 case 184: 
 var $564=HEAP32[(($p)>>2)]; //@line 3417 "tcc_bootstrap.c"
 var $565=HEAP32[((76648)>>2)]; //@line 3417 "tcc_bootstrap.c"
 var $566=(($565)|0); //@line 3417 "tcc_bootstrap.c"
 HEAP32[(($566)>>2)]=$564; //@line 3417 "tcc_bootstrap.c"
 STACKTOP=sp;return; //@line 3418 "tcc_bootstrap.c"
  default: assert(0, "bad label: " + label);
 }

}


function _search_cached_include($s1,$filename,$add){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $s;
 var $h;
 var $e;
 var $i;
 $2=$s1;
 $3=$filename;
 $4=$add;
 $h=1; //@line 2332 "tcc_bootstrap.c"
 var $5=$3; //@line 2333 "tcc_bootstrap.c"
 $s=$5; //@line 2333 "tcc_bootstrap.c"
 label=2;break; //@line 2334 "tcc_bootstrap.c"
 case 2: 
 var $7=$s; //@line 2334 "tcc_bootstrap.c"
 var $8=HEAP8[(($7)>>0)]; //@line 2334 "tcc_bootstrap.c"
 var $9=(($8<<24)>>24)!=0; //@line 2334 "tcc_bootstrap.c"
 if($9){label=3;break;}else{label=4;break;} //@line 2334 "tcc_bootstrap.c"
 case 3: 
 var $11=$h; //@line 2335 "tcc_bootstrap.c"
 var $12=$s; //@line 2335 "tcc_bootstrap.c"
 var $13=HEAP8[(($12)>>0)]; //@line 2335 "tcc_bootstrap.c"
 var $14=($13&255); //@line 2335 "tcc_bootstrap.c"
 var $15=_TOK_HASH_FUNC($11,$14); //@line 2335 "tcc_bootstrap.c"
 $h=$15; //@line 2335 "tcc_bootstrap.c"
 var $16=$s; //@line 2336 "tcc_bootstrap.c"
 var $17=(($16+1)|0); //@line 2336 "tcc_bootstrap.c"
 $s=$17; //@line 2336 "tcc_bootstrap.c"
 label=2;break; //@line 2337 "tcc_bootstrap.c"
 case 4: 
 var $19=$h; //@line 2338 "tcc_bootstrap.c"
 var $20=$19&31; //@line 2338 "tcc_bootstrap.c"
 $h=$20; //@line 2338 "tcc_bootstrap.c"
 var $21=$h; //@line 2339 "tcc_bootstrap.c"
 var $22=$2; //@line 2339 "tcc_bootstrap.c"
 var $23=(($22+500)|0); //@line 2339 "tcc_bootstrap.c"
 var $24=(($23+($21<<2))|0); //@line 2339 "tcc_bootstrap.c"
 var $25=HEAP32[(($24)>>2)]; //@line 2339 "tcc_bootstrap.c"
 $i=$25; //@line 2339 "tcc_bootstrap.c"
 label=5;break; //@line 2340 "tcc_bootstrap.c"
 case 5: 
 var $27=$i; //@line 2341 "tcc_bootstrap.c"
 var $28=($27|0)==0; //@line 2341 "tcc_bootstrap.c"
 if($28){label=6;break;}else{label=7;break;} //@line 2341 "tcc_bootstrap.c"
 case 6: 
 label=10;break; //@line 2342 "tcc_bootstrap.c"
 case 7: 
 var $31=$i; //@line 2343 "tcc_bootstrap.c"
 var $32=((($31)-(1))|0); //@line 2343 "tcc_bootstrap.c"
 var $33=$2; //@line 2343 "tcc_bootstrap.c"
 var $34=(($33+628)|0); //@line 2343 "tcc_bootstrap.c"
 var $35=HEAP32[(($34)>>2)]; //@line 2343 "tcc_bootstrap.c"
 var $36=(($35+($32<<2))|0); //@line 2343 "tcc_bootstrap.c"
 var $37=HEAP32[(($36)>>2)]; //@line 2343 "tcc_bootstrap.c"
 $e=$37; //@line 2343 "tcc_bootstrap.c"
 var $38=$e; //@line 2344 "tcc_bootstrap.c"
 var $39=(($38+12)|0); //@line 2344 "tcc_bootstrap.c"
 var $40=(($39)|0); //@line 2344 "tcc_bootstrap.c"
 var $41=$3; //@line 2344 "tcc_bootstrap.c"
 var $42=_strcmp($40,$41); //@line 2344 "tcc_bootstrap.c"
 var $43=0==($42|0); //@line 2344 "tcc_bootstrap.c"
 if($43){label=8;break;}else{label=9;break;} //@line 2344 "tcc_bootstrap.c"
 case 8: 
 var $45=$e; //@line 2345 "tcc_bootstrap.c"
 $1=$45; //@line 2345 "tcc_bootstrap.c"
 label=13;break; //@line 2345 "tcc_bootstrap.c"
 case 9: 
 var $47=$e; //@line 2346 "tcc_bootstrap.c"
 var $48=(($47+8)|0); //@line 2346 "tcc_bootstrap.c"
 var $49=HEAP32[(($48)>>2)]; //@line 2346 "tcc_bootstrap.c"
 $i=$49; //@line 2346 "tcc_bootstrap.c"
 label=5;break; //@line 2347 "tcc_bootstrap.c"
 case 10: 
 var $51=$4; //@line 2348 "tcc_bootstrap.c"
 var $52=($51|0)!=0; //@line 2348 "tcc_bootstrap.c"
 if($52){label=12;break;}else{label=11;break;} //@line 2348 "tcc_bootstrap.c"
 case 11: 
 $1=0; //@line 2349 "tcc_bootstrap.c"
 label=13;break; //@line 2349 "tcc_bootstrap.c"
 case 12: 
 var $55=$3; //@line 2350 "tcc_bootstrap.c"
 var $56=_strlen($55); //@line 2350 "tcc_bootstrap.c"
 var $57=((($56)+(16))|0); //@line 2350 "tcc_bootstrap.c"
 var $58=_tcc_malloc($57); //@line 2350 "tcc_bootstrap.c"
 var $59=$58; //@line 2350 "tcc_bootstrap.c"
 $e=$59; //@line 2350 "tcc_bootstrap.c"
 var $60=$e; //@line 2351 "tcc_bootstrap.c"
 var $61=(($60+12)|0); //@line 2351 "tcc_bootstrap.c"
 var $62=(($61)|0); //@line 2351 "tcc_bootstrap.c"
 var $63=$3; //@line 2351 "tcc_bootstrap.c"
 var $64=_strcpy($62,$63); //@line 2351 "tcc_bootstrap.c"
 var $65=$e; //@line 2352 "tcc_bootstrap.c"
 var $66=(($65+4)|0); //@line 2352 "tcc_bootstrap.c"
 HEAP32[(($66)>>2)]=0; //@line 2352 "tcc_bootstrap.c"
 var $67=$e; //@line 2352 "tcc_bootstrap.c"
 var $68=(($67)|0); //@line 2352 "tcc_bootstrap.c"
 HEAP32[(($68)>>2)]=0; //@line 2352 "tcc_bootstrap.c"
 var $69=$2; //@line 2353 "tcc_bootstrap.c"
 var $70=(($69+628)|0); //@line 2353 "tcc_bootstrap.c"
 var $71=$70; //@line 2353 "tcc_bootstrap.c"
 var $72=$2; //@line 2353 "tcc_bootstrap.c"
 var $73=(($72+632)|0); //@line 2353 "tcc_bootstrap.c"
 var $74=$e; //@line 2353 "tcc_bootstrap.c"
 var $75=$74; //@line 2353 "tcc_bootstrap.c"
 _dynarray_add($71,$73,$75); //@line 2353 "tcc_bootstrap.c"
 var $76=$h; //@line 2354 "tcc_bootstrap.c"
 var $77=$2; //@line 2354 "tcc_bootstrap.c"
 var $78=(($77+500)|0); //@line 2354 "tcc_bootstrap.c"
 var $79=(($78+($76<<2))|0); //@line 2354 "tcc_bootstrap.c"
 var $80=HEAP32[(($79)>>2)]; //@line 2354 "tcc_bootstrap.c"
 var $81=$e; //@line 2354 "tcc_bootstrap.c"
 var $82=(($81+8)|0); //@line 2354 "tcc_bootstrap.c"
 HEAP32[(($82)>>2)]=$80; //@line 2354 "tcc_bootstrap.c"
 var $83=$2; //@line 2355 "tcc_bootstrap.c"
 var $84=(($83+632)|0); //@line 2355 "tcc_bootstrap.c"
 var $85=HEAP32[(($84)>>2)]; //@line 2355 "tcc_bootstrap.c"
 var $86=$h; //@line 2355 "tcc_bootstrap.c"
 var $87=$2; //@line 2355 "tcc_bootstrap.c"
 var $88=(($87+500)|0); //@line 2355 "tcc_bootstrap.c"
 var $89=(($88+($86<<2))|0); //@line 2355 "tcc_bootstrap.c"
 HEAP32[(($89)>>2)]=$85; //@line 2355 "tcc_bootstrap.c"
 var $90=$e; //@line 2356 "tcc_bootstrap.c"
 $1=$90; //@line 2356 "tcc_bootstrap.c"
 label=13;break; //@line 2356 "tcc_bootstrap.c"
 case 13: 
 var $92=$1; //@line 2357 "tcc_bootstrap.c"
 STACKTOP=sp;return $92; //@line 2357 "tcc_bootstrap.c"
  default: assert(0, "bad label: " + label);
 }

}


function _preprocess($is_bof){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+2056)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $s1;
 var $i;
 var $c;
 var $n;
 var $saved_parse_flags;
 var $buf=sp;
 var $q=(sp)+(1024);
 var $s;
 var $len;
 var $buf1=(sp)+(1032);
 var $e;
 var $path;
 var $j;
 var $k;
 $1=$is_bof;
 var $2=HEAP32[((10488)>>2)]; //@line 2360 "tcc_bootstrap.c"
 $s1=$2; //@line 2360 "tcc_bootstrap.c"
 var $3=HEAP32[((10608)>>2)]; //@line 2364 "tcc_bootstrap.c"
 $saved_parse_flags=$3; //@line 2364 "tcc_bootstrap.c"
 var $4=HEAP32[((10608)>>2)]; //@line 2365 "tcc_bootstrap.c"
 var $5=$4&8; //@line 2365 "tcc_bootstrap.c"
 var $6=71|$5; //@line 2365 "tcc_bootstrap.c"
 HEAP32[((10608)>>2)]=$6; //@line 2365 "tcc_bootstrap.c"
 _next_nomacro(); //@line 2371 "tcc_bootstrap.c"
 label=2;break; //@line 2371 "tcc_bootstrap.c"
 case 2: 
 var $8=HEAP32[((10472)>>2)]; //@line 2373 "tcc_bootstrap.c"
 switch(($8|0)){case 190:{ label=104;break;}case 325:{ label=105;break;}case 323:case 324:{ label=121;break;}case 10:{ label=137;break;}case 314:{ label=3;break;}case 322:{ label=4;break;}case 318:{ label=63;break;}case 259:{ label=64;break;}case 317:{ label=65;break;}case 315:case 316:{ label=7;break;}case 260:{ label=76;break;}case 319:{ label=81;break;}case 320:{ label=95;break;}default:{label=138;break;}}break;
 case 3: 
 var $10=HEAP32[((10472)>>2)]; //@line 2375 "tcc_bootstrap.c"
 HEAP32[((10584)>>2)]=$10; //@line 2375 "tcc_bootstrap.c"
 _next_nomacro(); //@line 2376 "tcc_bootstrap.c"
 var $11=HEAP32[((10472)>>2)]; //@line 2377 "tcc_bootstrap.c"
 HEAP32[((10592)>>2)]=$11; //@line 2377 "tcc_bootstrap.c"
 _parse_define(); //@line 2378 "tcc_bootstrap.c"
 label=145;break; //@line 2379 "tcc_bootstrap.c"
 case 4: 
 var $13=HEAP32[((10472)>>2)]; //@line 2381 "tcc_bootstrap.c"
 HEAP32[((10584)>>2)]=$13; //@line 2381 "tcc_bootstrap.c"
 _next_nomacro(); //@line 2382 "tcc_bootstrap.c"
 var $14=HEAP32[((10472)>>2)]; //@line 2383 "tcc_bootstrap.c"
 HEAP32[((10592)>>2)]=$14; //@line 2383 "tcc_bootstrap.c"
 var $15=HEAP32[((10472)>>2)]; //@line 2384 "tcc_bootstrap.c"
 var $16=_define_find($15); //@line 2384 "tcc_bootstrap.c"
 $s=$16; //@line 2384 "tcc_bootstrap.c"
 var $17=$s; //@line 2385 "tcc_bootstrap.c"
 var $18=($17|0)!=0; //@line 2385 "tcc_bootstrap.c"
 if($18){label=5;break;}else{label=6;break;} //@line 2385 "tcc_bootstrap.c"
 case 5: 
 var $20=$s; //@line 2386 "tcc_bootstrap.c"
 _define_undef($20); //@line 2386 "tcc_bootstrap.c"
 label=6;break; //@line 2386 "tcc_bootstrap.c"
 case 6: 
 label=145;break; //@line 2387 "tcc_bootstrap.c"
 case 7: 
 var $23=HEAP32[((76648)>>2)]; //@line 2390 "tcc_bootstrap.c"
 var $24=(($23)|0); //@line 2390 "tcc_bootstrap.c"
 var $25=HEAP32[(($24)>>2)]; //@line 2390 "tcc_bootstrap.c"
 var $26=(($25)|0); //@line 2390 "tcc_bootstrap.c"
 var $27=HEAP8[(($26)>>0)]; //@line 2390 "tcc_bootstrap.c"
 var $28=($27&255); //@line 2390 "tcc_bootstrap.c"
 HEAP32[((76736)>>2)]=$28; //@line 2390 "tcc_bootstrap.c"
 _skip_spaces(); //@line 2391 "tcc_bootstrap.c"
 var $29=HEAP32[((76736)>>2)]; //@line 2392 "tcc_bootstrap.c"
 var $30=($29|0)==60; //@line 2392 "tcc_bootstrap.c"
 if($30){label=8;break;}else{label=9;break;} //@line 2392 "tcc_bootstrap.c"
 case 8: 
 $c=62; //@line 2393 "tcc_bootstrap.c"
 label=11;break; //@line 2394 "tcc_bootstrap.c"
 case 9: 
 var $33=HEAP32[((76736)>>2)]; //@line 2395 "tcc_bootstrap.c"
 var $34=($33|0)==34; //@line 2395 "tcc_bootstrap.c"
 if($34){label=10;break;}else{label=25;break;} //@line 2395 "tcc_bootstrap.c"
 case 10: 
 var $36=HEAP32[((76736)>>2)]; //@line 2396 "tcc_bootstrap.c"
 $c=$36; //@line 2396 "tcc_bootstrap.c"
 label=11;break; //@line 2396 "tcc_bootstrap.c"
 case 11: 
 _inp(); //@line 2398 "tcc_bootstrap.c"
 var $38=(($buf)|0); //@line 2399 "tcc_bootstrap.c"
 HEAP32[(($q)>>2)]=$38; //@line 2399 "tcc_bootstrap.c"
 label=12;break; //@line 2400 "tcc_bootstrap.c"
 case 12: 
 var $40=HEAP32[((76736)>>2)]; //@line 2400 "tcc_bootstrap.c"
 var $41=$c; //@line 2400 "tcc_bootstrap.c"
 var $42=($40|0)!=($41|0); //@line 2400 "tcc_bootstrap.c"
 if($42){label=13;break;}else{var $50=0;label=15;break;} //@line 2400 "tcc_bootstrap.c"
 case 13: 
 var $44=HEAP32[((76736)>>2)]; //@line 2400 "tcc_bootstrap.c"
 var $45=($44|0)!=10; //@line 2400 "tcc_bootstrap.c"
 if($45){label=14;break;}else{var $50=0;label=15;break;} //@line 2400 "tcc_bootstrap.c"
 case 14: 
 var $47=HEAP32[((76736)>>2)]; //@line 2400 "tcc_bootstrap.c"
 var $48=($47|0)!=-1; //@line 2400 "tcc_bootstrap.c"
 var $50=$48;label=15;break;
 case 15: 
 var $50;
 if($50){label=16;break;}else{label=24;break;}
 case 16: 
 var $52=HEAP32[(($q)>>2)]; //@line 2401 "tcc_bootstrap.c"
 var $53=(($buf)|0); //@line 2401 "tcc_bootstrap.c"
 var $54=$52; //@line 2401 "tcc_bootstrap.c"
 var $55=$53; //@line 2401 "tcc_bootstrap.c"
 var $56=((($54)-($55))|0); //@line 2401 "tcc_bootstrap.c"
 var $57=($56>>>0)<1023; //@line 2401 "tcc_bootstrap.c"
 if($57){label=17;break;}else{label=18;break;} //@line 2401 "tcc_bootstrap.c"
 case 17: 
 var $59=HEAP32[((76736)>>2)]; //@line 2402 "tcc_bootstrap.c"
 var $60=(($59)&255); //@line 2402 "tcc_bootstrap.c"
 var $61=HEAP32[(($q)>>2)]; //@line 2402 "tcc_bootstrap.c"
 var $62=(($61+1)|0); //@line 2402 "tcc_bootstrap.c"
 HEAP32[(($q)>>2)]=$62; //@line 2402 "tcc_bootstrap.c"
 HEAP8[(($61)>>0)]=$60; //@line 2402 "tcc_bootstrap.c"
 label=18;break; //@line 2402 "tcc_bootstrap.c"
 case 18: 
 var $64=HEAP32[((76736)>>2)]; //@line 2403 "tcc_bootstrap.c"
 var $65=($64|0)==92; //@line 2403 "tcc_bootstrap.c"
 if($65){label=19;break;}else{label=22;break;} //@line 2403 "tcc_bootstrap.c"
 case 19: 
 var $67=_handle_stray_noerror(); //@line 2404 "tcc_bootstrap.c"
 var $68=($67|0)==0; //@line 2404 "tcc_bootstrap.c"
 if($68){label=20;break;}else{label=21;break;} //@line 2404 "tcc_bootstrap.c"
 case 20: 
 var $70=HEAP32[(($q)>>2)]; //@line 2405 "tcc_bootstrap.c"
 var $71=((($70)-(1))|0); //@line 2405 "tcc_bootstrap.c"
 HEAP32[(($q)>>2)]=$71; //@line 2405 "tcc_bootstrap.c"
 label=21;break; //@line 2405 "tcc_bootstrap.c"
 case 21: 
 label=23;break; //@line 2406 "tcc_bootstrap.c"
 case 22: 
 _inp(); //@line 2407 "tcc_bootstrap.c"
 label=23;break;
 case 23: 
 label=12;break; //@line 2408 "tcc_bootstrap.c"
 case 24: 
 var $76=HEAP32[(($q)>>2)]; //@line 2409 "tcc_bootstrap.c"
 HEAP8[(($76)>>0)]=0; //@line 2409 "tcc_bootstrap.c"
 _minp(); //@line 2410 "tcc_bootstrap.c"
 label=35;break; //@line 2411 "tcc_bootstrap.c"
 case 25: 
 var $78=HEAP32[((10608)>>2)]; //@line 2413 "tcc_bootstrap.c"
 var $79=$78&8; //@line 2413 "tcc_bootstrap.c"
 var $80=5|$79; //@line 2413 "tcc_bootstrap.c"
 HEAP32[((10608)>>2)]=$80; //@line 2413 "tcc_bootstrap.c"
 _next(); //@line 2416 "tcc_bootstrap.c"
 var $81=(($buf)|0); //@line 2417 "tcc_bootstrap.c"
 HEAP8[(($81)>>0)]=0; //@line 2417 "tcc_bootstrap.c"
 label=26;break; //@line 2418 "tcc_bootstrap.c"
 case 26: 
 var $83=HEAP32[((10472)>>2)]; //@line 2418 "tcc_bootstrap.c"
 var $84=($83|0)!=10; //@line 2418 "tcc_bootstrap.c"
 if($84){label=27;break;}else{label=28;break;} //@line 2418 "tcc_bootstrap.c"
 case 27: 
 var $86=(($buf)|0); //@line 2419 "tcc_bootstrap.c"
 var $87=HEAP32[((10472)>>2)]; //@line 2419 "tcc_bootstrap.c"
 var $88=_get_tok_str($87,10440); //@line 2419 "tcc_bootstrap.c"
 var $89=_pstrcat($86,1024,$88); //@line 2419 "tcc_bootstrap.c"
 _next(); //@line 2420 "tcc_bootstrap.c"
 label=26;break; //@line 2421 "tcc_bootstrap.c"
 case 28: 
 var $91=(($buf)|0); //@line 2422 "tcc_bootstrap.c"
 var $92=_strlen($91); //@line 2422 "tcc_bootstrap.c"
 $len=$92; //@line 2422 "tcc_bootstrap.c"
 var $93=$len; //@line 2423 "tcc_bootstrap.c"
 var $94=($93|0)<2; //@line 2423 "tcc_bootstrap.c"
 if($94){label=33;break;}else{label=29;break;} //@line 2423 "tcc_bootstrap.c"
 case 29: 
 var $96=(($buf)|0); //@line 2423 "tcc_bootstrap.c"
 var $97=HEAP8[(($96)>>0)]; //@line 2423 "tcc_bootstrap.c"
 var $98=(($97<<24)>>24); //@line 2423 "tcc_bootstrap.c"
 var $99=($98|0)!=34; //@line 2423 "tcc_bootstrap.c"
 if($99){label=31;break;}else{label=30;break;} //@line 2423 "tcc_bootstrap.c"
 case 30: 
 var $101=$len; //@line 2423 "tcc_bootstrap.c"
 var $102=((($101)-(1))|0); //@line 2423 "tcc_bootstrap.c"
 var $103=(($buf+$102)|0); //@line 2423 "tcc_bootstrap.c"
 var $104=HEAP8[(($103)>>0)]; //@line 2423 "tcc_bootstrap.c"
 var $105=(($104<<24)>>24); //@line 2423 "tcc_bootstrap.c"
 var $106=($105|0)!=34; //@line 2423 "tcc_bootstrap.c"
 if($106){label=31;break;}else{label=34;break;} //@line 2423 "tcc_bootstrap.c"
 case 31: 
 var $108=(($buf)|0); //@line 2423 "tcc_bootstrap.c"
 var $109=HEAP8[(($108)>>0)]; //@line 2423 "tcc_bootstrap.c"
 var $110=(($109<<24)>>24); //@line 2423 "tcc_bootstrap.c"
 var $111=($110|0)!=60; //@line 2423 "tcc_bootstrap.c"
 if($111){label=33;break;}else{label=32;break;} //@line 2423 "tcc_bootstrap.c"
 case 32: 
 var $113=$len; //@line 2423 "tcc_bootstrap.c"
 var $114=((($113)-(1))|0); //@line 2423 "tcc_bootstrap.c"
 var $115=(($buf+$114)|0); //@line 2423 "tcc_bootstrap.c"
 var $116=HEAP8[(($115)>>0)]; //@line 2423 "tcc_bootstrap.c"
 var $117=(($116<<24)>>24); //@line 2423 "tcc_bootstrap.c"
 var $118=($117|0)!=62; //@line 2423 "tcc_bootstrap.c"
 if($118){label=33;break;}else{label=34;break;} //@line 2423 "tcc_bootstrap.c"
 case 33: 
 _tcc_error(3448,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs; //@line 2425 "tcc_bootstrap.c"
 label=34;break; //@line 2425 "tcc_bootstrap.c"
 case 34: 
 var $121=$len; //@line 2426 "tcc_bootstrap.c"
 var $122=((($121)-(1))|0); //@line 2426 "tcc_bootstrap.c"
 var $123=(($buf+$122)|0); //@line 2426 "tcc_bootstrap.c"
 var $124=HEAP8[(($123)>>0)]; //@line 2426 "tcc_bootstrap.c"
 var $125=(($124<<24)>>24); //@line 2426 "tcc_bootstrap.c"
 $c=$125; //@line 2426 "tcc_bootstrap.c"
 var $126=$buf; //@line 2427 "tcc_bootstrap.c"
 var $127=(($buf)|0); //@line 2427 "tcc_bootstrap.c"
 var $128=(($127+1)|0); //@line 2427 "tcc_bootstrap.c"
 var $129=$len; //@line 2427 "tcc_bootstrap.c"
 var $130=((($129)-(2))|0); //@line 2427 "tcc_bootstrap.c"
 _memmove($126,$128,$130,1,0); //@line 2427 "tcc_bootstrap.c"
 var $131=$len; //@line 2428 "tcc_bootstrap.c"
 var $132=((($131)-(2))|0); //@line 2428 "tcc_bootstrap.c"
 var $133=(($buf+$132)|0); //@line 2428 "tcc_bootstrap.c"
 HEAP8[(($133)>>0)]=0; //@line 2428 "tcc_bootstrap.c"
 label=35;break;
 case 35: 
 label=36;break;
 case 36: 
 var $136=$s1; //@line 2430 "tcc_bootstrap.c"
 var $137=(($136+236)|0); //@line 2430 "tcc_bootstrap.c"
 var $138=HEAP32[(($137)>>2)]; //@line 2430 "tcc_bootstrap.c"
 var $139=$s1; //@line 2430 "tcc_bootstrap.c"
 var $140=(($139+108)|0); //@line 2430 "tcc_bootstrap.c"
 var $141=(($140)|0); //@line 2430 "tcc_bootstrap.c"
 var $142=(($141+128)|0); //@line 2430 "tcc_bootstrap.c"
 var $143=($138>>>0)>=($142>>>0); //@line 2430 "tcc_bootstrap.c"
 if($143){label=37;break;}else{label=38;break;} //@line 2430 "tcc_bootstrap.c"
 case 37: 
 _tcc_error(3416,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs; //@line 2431 "tcc_bootstrap.c"
 label=38;break; //@line 2431 "tcc_bootstrap.c"
 case 38: 
 var $146=HEAP32[((76648)>>2)]; //@line 2432 "tcc_bootstrap.c"
 var $147=$s1; //@line 2432 "tcc_bootstrap.c"
 var $148=(($147+236)|0); //@line 2432 "tcc_bootstrap.c"
 var $149=HEAP32[(($148)>>2)]; //@line 2432 "tcc_bootstrap.c"
 HEAP32[(($149)>>2)]=$146; //@line 2432 "tcc_bootstrap.c"
 var $150=HEAP32[((10472)>>2)]; //@line 2433 "tcc_bootstrap.c"
 var $151=($150|0)==316; //@line 2433 "tcc_bootstrap.c"
 if($151){label=39;break;}else{label=40;break;} //@line 2433 "tcc_bootstrap.c"
 case 39: 
 var $153=HEAP32[((76648)>>2)]; //@line 2433 "tcc_bootstrap.c"
 var $154=(($153+36)|0); //@line 2433 "tcc_bootstrap.c"
 var $155=HEAP32[(($154)>>2)]; //@line 2433 "tcc_bootstrap.c"
 var $158=$155;label=41;break; //@line 2433 "tcc_bootstrap.c"
 case 40: 
 var $158=0;label=41;break; //@line 2433 "tcc_bootstrap.c"
 case 41: 
 var $158; //@line 2433 "tcc_bootstrap.c"
 $i=$158; //@line 2433 "tcc_bootstrap.c"
 var $159=$s1; //@line 2434 "tcc_bootstrap.c"
 var $160=(($159+64)|0); //@line 2434 "tcc_bootstrap.c"
 var $161=HEAP32[(($160)>>2)]; //@line 2434 "tcc_bootstrap.c"
 var $162=((($161)+(2))|0); //@line 2434 "tcc_bootstrap.c"
 $n=$162; //@line 2434 "tcc_bootstrap.c"
 label=42;break; //@line 2435 "tcc_bootstrap.c"
 case 42: 
 var $164=$i; //@line 2435 "tcc_bootstrap.c"
 var $165=$n; //@line 2435 "tcc_bootstrap.c"
 var $166=($164|0)<($165|0); //@line 2435 "tcc_bootstrap.c"
 if($166){label=43;break;}else{label=61;break;} //@line 2435 "tcc_bootstrap.c"
 case 43: 
 var $168=$i; //@line 2439 "tcc_bootstrap.c"
 var $169=($168|0)==0; //@line 2439 "tcc_bootstrap.c"
 if($169){label=44;break;}else{label=47;break;} //@line 2439 "tcc_bootstrap.c"
 case 44: 
 var $171=(($buf)|0); //@line 2440 "tcc_bootstrap.c"
 var $172=HEAP8[(($171)>>0)]; //@line 2440 "tcc_bootstrap.c"
 var $173=(($172<<24)>>24); //@line 2440 "tcc_bootstrap.c"
 var $174=($173|0)==47; //@line 2440 "tcc_bootstrap.c"
 if($174){label=46;break;}else{label=45;break;} //@line 2440 "tcc_bootstrap.c"
 case 45: 
 label=60;break; //@line 2441 "tcc_bootstrap.c"
 case 46: 
 var $177=(($buf1)|0); //@line 2442 "tcc_bootstrap.c"
 HEAP8[(($177)>>0)]=0; //@line 2442 "tcc_bootstrap.c"
 label=53;break; //@line 2444 "tcc_bootstrap.c"
 case 47: 
 var $179=$i; //@line 2444 "tcc_bootstrap.c"
 var $180=($179|0)==1; //@line 2444 "tcc_bootstrap.c"
 if($180){label=48;break;}else{label=51;break;} //@line 2444 "tcc_bootstrap.c"
 case 48: 
 var $182=$c; //@line 2445 "tcc_bootstrap.c"
 var $183=($182|0)!=34; //@line 2445 "tcc_bootstrap.c"
 if($183){label=49;break;}else{label=50;break;} //@line 2445 "tcc_bootstrap.c"
 case 49: 
 label=60;break; //@line 2446 "tcc_bootstrap.c"
 case 50: 
 var $186=HEAP32[((76648)>>2)]; //@line 2447 "tcc_bootstrap.c"
 var $187=(($186+1064)|0); //@line 2447 "tcc_bootstrap.c"
 var $188=HEAP32[(($187)>>2)]; //@line 2447 "tcc_bootstrap.c"
 $path=$188; //@line 2447 "tcc_bootstrap.c"
 var $189=(($buf1)|0); //@line 2448 "tcc_bootstrap.c"
 var $190=$path; //@line 2448 "tcc_bootstrap.c"
 var $191=$path; //@line 2448 "tcc_bootstrap.c"
 var $192=_tcc_basename($191); //@line 2448 "tcc_bootstrap.c"
 var $193=$path; //@line 2448 "tcc_bootstrap.c"
 var $194=$192; //@line 2448 "tcc_bootstrap.c"
 var $195=$193; //@line 2448 "tcc_bootstrap.c"
 var $196=((($194)-($195))|0); //@line 2448 "tcc_bootstrap.c"
 var $197=_pstrncpy($189,$190,$196); //@line 2448 "tcc_bootstrap.c"
 label=52;break; //@line 2449 "tcc_bootstrap.c"
 case 51: 
 var $199=$i; //@line 2450 "tcc_bootstrap.c"
 var $200=((($199)-(2))|0); //@line 2450 "tcc_bootstrap.c"
 $j=$200; //@line 2450 "tcc_bootstrap.c"
 var $201=$j; //@line 2450 "tcc_bootstrap.c"
 var $202=$s1; //@line 2450 "tcc_bootstrap.c"
 var $203=(($202+64)|0); //@line 2450 "tcc_bootstrap.c"
 var $204=HEAP32[(($203)>>2)]; //@line 2450 "tcc_bootstrap.c"
 var $205=((($201)-($204))|0); //@line 2450 "tcc_bootstrap.c"
 $k=$205; //@line 2450 "tcc_bootstrap.c"
 var $206=$j; //@line 2451 "tcc_bootstrap.c"
 var $207=$s1; //@line 2451 "tcc_bootstrap.c"
 var $208=(($207+60)|0); //@line 2451 "tcc_bootstrap.c"
 var $209=HEAP32[(($208)>>2)]; //@line 2451 "tcc_bootstrap.c"
 var $210=(($209+($206<<2))|0); //@line 2451 "tcc_bootstrap.c"
 var $211=HEAP32[(($210)>>2)]; //@line 2451 "tcc_bootstrap.c"
 $path=$211; //@line 2451 "tcc_bootstrap.c"
 var $212=(($buf1)|0); //@line 2452 "tcc_bootstrap.c"
 var $213=$path; //@line 2452 "tcc_bootstrap.c"
 var $214=_pstrcpy($212,1024,$213); //@line 2452 "tcc_bootstrap.c"
 var $215=(($buf1)|0); //@line 2453 "tcc_bootstrap.c"
 var $216=_pstrcat($215,1024,3408); //@line 2453 "tcc_bootstrap.c"
 label=52;break;
 case 52: 
 label=53;break;
 case 53: 
 var $219=(($buf1)|0); //@line 2455 "tcc_bootstrap.c"
 var $220=(($buf)|0); //@line 2455 "tcc_bootstrap.c"
 var $221=_pstrcat($219,1024,$220); //@line 2455 "tcc_bootstrap.c"
 var $222=$s1; //@line 2456 "tcc_bootstrap.c"
 var $223=(($buf1)|0); //@line 2456 "tcc_bootstrap.c"
 var $224=_search_cached_include($222,$223,0); //@line 2456 "tcc_bootstrap.c"
 $e=$224; //@line 2456 "tcc_bootstrap.c"
 var $225=$e; //@line 2457 "tcc_bootstrap.c"
 var $226=($225|0)!=0; //@line 2457 "tcc_bootstrap.c"
 if($226){label=54;break;}else{label=57;break;} //@line 2457 "tcc_bootstrap.c"
 case 54: 
 var $228=$e; //@line 2457 "tcc_bootstrap.c"
 var $229=(($228)|0); //@line 2457 "tcc_bootstrap.c"
 var $230=HEAP32[(($229)>>2)]; //@line 2457 "tcc_bootstrap.c"
 var $231=_define_find($230); //@line 2457 "tcc_bootstrap.c"
 var $232=($231|0)!=0; //@line 2457 "tcc_bootstrap.c"
 if($232){label=56;break;}else{label=55;break;} //@line 2457 "tcc_bootstrap.c"
 case 55: 
 var $234=$e; //@line 2457 "tcc_bootstrap.c"
 var $235=(($234+4)|0); //@line 2457 "tcc_bootstrap.c"
 var $236=HEAP32[(($235)>>2)]; //@line 2457 "tcc_bootstrap.c"
 var $237=HEAP32[((10568)>>2)]; //@line 2457 "tcc_bootstrap.c"
 var $238=($236|0)==($237|0); //@line 2457 "tcc_bootstrap.c"
 if($238){label=56;break;}else{label=57;break;} //@line 2457 "tcc_bootstrap.c"
 case 56: 
 label=62;break; //@line 2458 "tcc_bootstrap.c"
 case 57: 
 var $241=$s1; //@line 2460 "tcc_bootstrap.c"
 var $242=(($buf1)|0); //@line 2460 "tcc_bootstrap.c"
 var $243=_tcc_open($241,$242); //@line 2460 "tcc_bootstrap.c"
 var $244=($243|0)<0; //@line 2460 "tcc_bootstrap.c"
 if($244){label=58;break;}else{label=59;break;} //@line 2460 "tcc_bootstrap.c"
 case 58: 
 label=60;break; //@line 2461 "tcc_bootstrap.c"
 case 59: 
 var $247=$i; //@line 2462 "tcc_bootstrap.c"
 var $248=((($247)+(1))|0); //@line 2462 "tcc_bootstrap.c"
 var $249=HEAP32[((76648)>>2)]; //@line 2462 "tcc_bootstrap.c"
 var $250=(($249+36)|0); //@line 2462 "tcc_bootstrap.c"
 HEAP32[(($250)>>2)]=$248; //@line 2462 "tcc_bootstrap.c"
 var $251=$s1; //@line 2463 "tcc_bootstrap.c"
 var $252=(($251+100)|0); //@line 2463 "tcc_bootstrap.c"
 var $253=$252; //@line 2463 "tcc_bootstrap.c"
 var $254=$s1; //@line 2463 "tcc_bootstrap.c"
 var $255=(($254+104)|0); //@line 2463 "tcc_bootstrap.c"
 var $256=(($buf1)|0); //@line 2464 "tcc_bootstrap.c"
 var $257=_tcc_strdup($256); //@line 2464 "tcc_bootstrap.c"
 _dynarray_add($253,$255,$257); //@line 2464 "tcc_bootstrap.c"
 var $258=$s1; //@line 2465 "tcc_bootstrap.c"
 var $259=(($258+236)|0); //@line 2465 "tcc_bootstrap.c"
 var $260=HEAP32[(($259)>>2)]; //@line 2465 "tcc_bootstrap.c"
 var $261=(($260+4)|0); //@line 2465 "tcc_bootstrap.c"
 HEAP32[(($259)>>2)]=$261; //@line 2465 "tcc_bootstrap.c"
 var $262=HEAP32[((10464)>>2)]; //@line 2466 "tcc_bootstrap.c"
 var $263=$262|3; //@line 2466 "tcc_bootstrap.c"
 HEAP32[((10464)>>2)]=$263; //@line 2466 "tcc_bootstrap.c"
 var $264=HEAP32[((76648)>>2)]; //@line 2467 "tcc_bootstrap.c"
 var $265=(($264)|0); //@line 2467 "tcc_bootstrap.c"
 var $266=HEAP32[(($265)>>2)]; //@line 2467 "tcc_bootstrap.c"
 var $267=(($266)|0); //@line 2467 "tcc_bootstrap.c"
 var $268=HEAP8[(($267)>>0)]; //@line 2467 "tcc_bootstrap.c"
 var $269=($268&255); //@line 2467 "tcc_bootstrap.c"
 HEAP32[((76736)>>2)]=$269; //@line 2467 "tcc_bootstrap.c"
 label=149;break; //@line 2468 "tcc_bootstrap.c"
 case 60: 
 var $271=$i; //@line 2435 "tcc_bootstrap.c"
 var $272=((($271)+(1))|0); //@line 2435 "tcc_bootstrap.c"
 $i=$272; //@line 2435 "tcc_bootstrap.c"
 label=42;break; //@line 2435 "tcc_bootstrap.c"
 case 61: 
 var $274=(($buf)|0); //@line 2470 "tcc_bootstrap.c"
 _tcc_error(3376,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$274,tempVarArgs)); STACKTOP=tempVarArgs; //@line 2470 "tcc_bootstrap.c"
 label=62;break; //@line 2470 "tcc_bootstrap.c"
 case 62: 
 label=145;break; //@line 2472 "tcc_bootstrap.c"
 case 63: 
 $c=1; //@line 2474 "tcc_bootstrap.c"
 label=66;break; //@line 2475 "tcc_bootstrap.c"
 case 64: 
 var $278=_expr_preprocess(); //@line 2477 "tcc_bootstrap.c"
 $c=$278; //@line 2477 "tcc_bootstrap.c"
 label=73;break; //@line 2478 "tcc_bootstrap.c"
 case 65: 
 $c=0; //@line 2480 "tcc_bootstrap.c"
 label=66;break; //@line 2480 "tcc_bootstrap.c"
 case 66: 
 _next_nomacro(); //@line 2482 "tcc_bootstrap.c"
 var $281=HEAP32[((10472)>>2)]; //@line 2483 "tcc_bootstrap.c"
 var $282=($281|0)<256; //@line 2483 "tcc_bootstrap.c"
 if($282){label=67;break;}else{label=68;break;} //@line 2483 "tcc_bootstrap.c"
 case 67: 
 var $284=$c; //@line 2484 "tcc_bootstrap.c"
 var $285=($284|0)!=0; //@line 2484 "tcc_bootstrap.c"
 var $286=($285?3312:76760); //@line 2484 "tcc_bootstrap.c"
 _tcc_error(3320,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$286,tempVarArgs)); STACKTOP=tempVarArgs; //@line 2484 "tcc_bootstrap.c"
 label=68;break; //@line 2484 "tcc_bootstrap.c"
 case 68: 
 var $288=$1; //@line 2485 "tcc_bootstrap.c"
 var $289=($288|0)!=0; //@line 2485 "tcc_bootstrap.c"
 if($289){label=69;break;}else{label=72;break;} //@line 2485 "tcc_bootstrap.c"
 case 69: 
 var $291=$c; //@line 2486 "tcc_bootstrap.c"
 var $292=($291|0)!=0; //@line 2486 "tcc_bootstrap.c"
 if($292){label=70;break;}else{label=71;break;} //@line 2486 "tcc_bootstrap.c"
 case 70: 
 var $294=HEAP32[((10472)>>2)]; //@line 2487 "tcc_bootstrap.c"
 var $295=HEAP32[((76648)>>2)]; //@line 2487 "tcc_bootstrap.c"
 var $296=(($295+24)|0); //@line 2487 "tcc_bootstrap.c"
 HEAP32[(($296)>>2)]=$294; //@line 2487 "tcc_bootstrap.c"
 label=71;break; //@line 2488 "tcc_bootstrap.c"
 case 71: 
 label=72;break; //@line 2489 "tcc_bootstrap.c"
 case 72: 
 var $299=HEAP32[((10472)>>2)]; //@line 2490 "tcc_bootstrap.c"
 var $300=_define_find($299); //@line 2490 "tcc_bootstrap.c"
 var $301=($300|0)!=0; //@line 2490 "tcc_bootstrap.c"
 var $302=($301&1); //@line 2490 "tcc_bootstrap.c"
 var $303=$c; //@line 2490 "tcc_bootstrap.c"
 var $304=$302^$303; //@line 2490 "tcc_bootstrap.c"
 $c=$304; //@line 2490 "tcc_bootstrap.c"
 label=73;break; //@line 2490 "tcc_bootstrap.c"
 case 73: 
 var $306=$s1; //@line 2492 "tcc_bootstrap.c"
 var $307=(($306+496)|0); //@line 2492 "tcc_bootstrap.c"
 var $308=HEAP32[(($307)>>2)]; //@line 2492 "tcc_bootstrap.c"
 var $309=$s1; //@line 2492 "tcc_bootstrap.c"
 var $310=(($309+240)|0); //@line 2492 "tcc_bootstrap.c"
 var $311=(($310)|0); //@line 2492 "tcc_bootstrap.c"
 var $312=(($311+256)|0); //@line 2492 "tcc_bootstrap.c"
 var $313=($308>>>0)>=($312>>>0); //@line 2492 "tcc_bootstrap.c"
 if($313){label=74;break;}else{label=75;break;} //@line 2492 "tcc_bootstrap.c"
 case 74: 
 _tcc_error(3288,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs; //@line 2493 "tcc_bootstrap.c"
 label=75;break; //@line 2493 "tcc_bootstrap.c"
 case 75: 
 var $316=$c; //@line 2494 "tcc_bootstrap.c"
 var $317=$s1; //@line 2494 "tcc_bootstrap.c"
 var $318=(($317+496)|0); //@line 2494 "tcc_bootstrap.c"
 var $319=HEAP32[(($318)>>2)]; //@line 2494 "tcc_bootstrap.c"
 var $320=(($319+4)|0); //@line 2494 "tcc_bootstrap.c"
 HEAP32[(($318)>>2)]=$320; //@line 2494 "tcc_bootstrap.c"
 HEAP32[(($319)>>2)]=$316; //@line 2494 "tcc_bootstrap.c"
 label=92;break; //@line 2495 "tcc_bootstrap.c"
 case 76: 
 var $322=$s1; //@line 2497 "tcc_bootstrap.c"
 var $323=(($322+496)|0); //@line 2497 "tcc_bootstrap.c"
 var $324=HEAP32[(($323)>>2)]; //@line 2497 "tcc_bootstrap.c"
 var $325=$s1; //@line 2497 "tcc_bootstrap.c"
 var $326=(($325+240)|0); //@line 2497 "tcc_bootstrap.c"
 var $327=(($326)|0); //@line 2497 "tcc_bootstrap.c"
 var $328=($324|0)==($327|0); //@line 2497 "tcc_bootstrap.c"
 if($328){label=77;break;}else{label=78;break;} //@line 2497 "tcc_bootstrap.c"
 case 77: 
 _tcc_error(3256,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs; //@line 2498 "tcc_bootstrap.c"
 label=78;break; //@line 2498 "tcc_bootstrap.c"
 case 78: 
 var $331=$s1; //@line 2499 "tcc_bootstrap.c"
 var $332=(($331+496)|0); //@line 2499 "tcc_bootstrap.c"
 var $333=HEAP32[(($332)>>2)]; //@line 2499 "tcc_bootstrap.c"
 var $334=((($333)-(4))|0); //@line 2499 "tcc_bootstrap.c"
 var $335=HEAP32[(($334)>>2)]; //@line 2499 "tcc_bootstrap.c"
 var $336=$335&2; //@line 2499 "tcc_bootstrap.c"
 var $337=($336|0)!=0; //@line 2499 "tcc_bootstrap.c"
 if($337){label=79;break;}else{label=80;break;} //@line 2499 "tcc_bootstrap.c"
 case 79: 
 _tcc_error(3232,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs; //@line 2500 "tcc_bootstrap.c"
 label=80;break; //@line 2500 "tcc_bootstrap.c"
 case 80: 
 var $340=$s1; //@line 2501 "tcc_bootstrap.c"
 var $341=(($340+496)|0); //@line 2501 "tcc_bootstrap.c"
 var $342=HEAP32[(($341)>>2)]; //@line 2501 "tcc_bootstrap.c"
 var $343=((($342)-(4))|0); //@line 2501 "tcc_bootstrap.c"
 var $344=HEAP32[(($343)>>2)]; //@line 2501 "tcc_bootstrap.c"
 var $345=$344^3; //@line 2501 "tcc_bootstrap.c"
 HEAP32[(($343)>>2)]=$345; //@line 2501 "tcc_bootstrap.c"
 $c=$345; //@line 2501 "tcc_bootstrap.c"
 label=89;break; //@line 2502 "tcc_bootstrap.c"
 case 81: 
 var $347=$s1; //@line 2504 "tcc_bootstrap.c"
 var $348=(($347+496)|0); //@line 2504 "tcc_bootstrap.c"
 var $349=HEAP32[(($348)>>2)]; //@line 2504 "tcc_bootstrap.c"
 var $350=$s1; //@line 2504 "tcc_bootstrap.c"
 var $351=(($350+240)|0); //@line 2504 "tcc_bootstrap.c"
 var $352=(($351)|0); //@line 2504 "tcc_bootstrap.c"
 var $353=($349|0)==($352|0); //@line 2504 "tcc_bootstrap.c"
 if($353){label=82;break;}else{label=83;break;} //@line 2504 "tcc_bootstrap.c"
 case 82: 
 _tcc_error(3200,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs; //@line 2505 "tcc_bootstrap.c"
 label=83;break; //@line 2505 "tcc_bootstrap.c"
 case 83: 
 var $356=$s1; //@line 2506 "tcc_bootstrap.c"
 var $357=(($356+496)|0); //@line 2506 "tcc_bootstrap.c"
 var $358=HEAP32[(($357)>>2)]; //@line 2506 "tcc_bootstrap.c"
 var $359=((($358)-(4))|0); //@line 2506 "tcc_bootstrap.c"
 var $360=HEAP32[(($359)>>2)]; //@line 2506 "tcc_bootstrap.c"
 $c=$360; //@line 2506 "tcc_bootstrap.c"
 var $361=$c; //@line 2507 "tcc_bootstrap.c"
 var $362=($361|0)>1; //@line 2507 "tcc_bootstrap.c"
 if($362){label=84;break;}else{label=85;break;} //@line 2507 "tcc_bootstrap.c"
 case 84: 
 _tcc_error(3176,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs; //@line 2508 "tcc_bootstrap.c"
 label=85;break; //@line 2508 "tcc_bootstrap.c"
 case 85: 
 var $365=$c; //@line 2509 "tcc_bootstrap.c"
 var $366=($365|0)==1; //@line 2509 "tcc_bootstrap.c"
 if($366){label=86;break;}else{label=87;break;} //@line 2509 "tcc_bootstrap.c"
 case 86: 
 $c=0; //@line 2510 "tcc_bootstrap.c"
 label=88;break; //@line 2511 "tcc_bootstrap.c"
 case 87: 
 var $369=_expr_preprocess(); //@line 2512 "tcc_bootstrap.c"
 $c=$369; //@line 2512 "tcc_bootstrap.c"
 var $370=$c; //@line 2513 "tcc_bootstrap.c"
 var $371=$s1; //@line 2513 "tcc_bootstrap.c"
 var $372=(($371+496)|0); //@line 2513 "tcc_bootstrap.c"
 var $373=HEAP32[(($372)>>2)]; //@line 2513 "tcc_bootstrap.c"
 var $374=((($373)-(4))|0); //@line 2513 "tcc_bootstrap.c"
 HEAP32[(($374)>>2)]=$370; //@line 2513 "tcc_bootstrap.c"
 label=88;break;
 case 88: 
 label=89;break;
 case 89: 
 var $377=$s1; //@line 2516 "tcc_bootstrap.c"
 var $378=(($377+496)|0); //@line 2516 "tcc_bootstrap.c"
 var $379=HEAP32[(($378)>>2)]; //@line 2516 "tcc_bootstrap.c"
 var $380=HEAP32[((76648)>>2)]; //@line 2516 "tcc_bootstrap.c"
 var $381=(($380+32)|0); //@line 2516 "tcc_bootstrap.c"
 var $382=HEAP32[(($381)>>2)]; //@line 2516 "tcc_bootstrap.c"
 var $383=(($382+4)|0); //@line 2516 "tcc_bootstrap.c"
 var $384=($379|0)==($383|0); //@line 2516 "tcc_bootstrap.c"
 if($384){label=90;break;}else{label=91;break;} //@line 2516 "tcc_bootstrap.c"
 case 90: 
 var $386=HEAP32[((76648)>>2)]; //@line 2517 "tcc_bootstrap.c"
 var $387=(($386+24)|0); //@line 2517 "tcc_bootstrap.c"
 HEAP32[(($387)>>2)]=0; //@line 2517 "tcc_bootstrap.c"
 label=91;break; //@line 2517 "tcc_bootstrap.c"
 case 91: 
 label=92;break; //@line 2517 "tcc_bootstrap.c"
 case 92: 
 var $390=$c; //@line 2519 "tcc_bootstrap.c"
 var $391=$390&1; //@line 2519 "tcc_bootstrap.c"
 var $392=($391|0)!=0; //@line 2519 "tcc_bootstrap.c"
 if($392){label=94;break;}else{label=93;break;} //@line 2519 "tcc_bootstrap.c"
 case 93: 
 _preprocess_skip(); //@line 2520 "tcc_bootstrap.c"
 $1=0; //@line 2521 "tcc_bootstrap.c"
 label=2;break; //@line 2522 "tcc_bootstrap.c"
 case 94: 
 label=145;break; //@line 2524 "tcc_bootstrap.c"
 case 95: 
 var $396=$s1; //@line 2526 "tcc_bootstrap.c"
 var $397=(($396+496)|0); //@line 2526 "tcc_bootstrap.c"
 var $398=HEAP32[(($397)>>2)]; //@line 2526 "tcc_bootstrap.c"
 var $399=HEAP32[((76648)>>2)]; //@line 2526 "tcc_bootstrap.c"
 var $400=(($399+32)|0); //@line 2526 "tcc_bootstrap.c"
 var $401=HEAP32[(($400)>>2)]; //@line 2526 "tcc_bootstrap.c"
 var $402=($398>>>0)<=($401>>>0); //@line 2526 "tcc_bootstrap.c"
 if($402){label=96;break;}else{label=97;break;} //@line 2526 "tcc_bootstrap.c"
 case 96: 
 _tcc_error(3144,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs; //@line 2527 "tcc_bootstrap.c"
 label=97;break; //@line 2527 "tcc_bootstrap.c"
 case 97: 
 var $405=$s1; //@line 2528 "tcc_bootstrap.c"
 var $406=(($405+496)|0); //@line 2528 "tcc_bootstrap.c"
 var $407=HEAP32[(($406)>>2)]; //@line 2528 "tcc_bootstrap.c"
 var $408=((($407)-(4))|0); //@line 2528 "tcc_bootstrap.c"
 HEAP32[(($406)>>2)]=$408; //@line 2528 "tcc_bootstrap.c"
 var $409=HEAP32[((76648)>>2)]; //@line 2529 "tcc_bootstrap.c"
 var $410=(($409+24)|0); //@line 2529 "tcc_bootstrap.c"
 var $411=HEAP32[(($410)>>2)]; //@line 2529 "tcc_bootstrap.c"
 var $412=($411|0)!=0; //@line 2529 "tcc_bootstrap.c"
 if($412){label=98;break;}else{label=103;break;} //@line 2529 "tcc_bootstrap.c"
 case 98: 
 var $414=$s1; //@line 2529 "tcc_bootstrap.c"
 var $415=(($414+496)|0); //@line 2529 "tcc_bootstrap.c"
 var $416=HEAP32[(($415)>>2)]; //@line 2529 "tcc_bootstrap.c"
 var $417=HEAP32[((76648)>>2)]; //@line 2529 "tcc_bootstrap.c"
 var $418=(($417+32)|0); //@line 2529 "tcc_bootstrap.c"
 var $419=HEAP32[(($418)>>2)]; //@line 2529 "tcc_bootstrap.c"
 var $420=($416|0)==($419|0); //@line 2529 "tcc_bootstrap.c"
 if($420){label=99;break;}else{label=103;break;} //@line 2529 "tcc_bootstrap.c"
 case 99: 
 var $422=HEAP32[((76648)>>2)]; //@line 2531 "tcc_bootstrap.c"
 var $423=(($422+24)|0); //@line 2531 "tcc_bootstrap.c"
 var $424=HEAP32[(($423)>>2)]; //@line 2531 "tcc_bootstrap.c"
 var $425=HEAP32[((76648)>>2)]; //@line 2531 "tcc_bootstrap.c"
 var $426=(($425+28)|0); //@line 2531 "tcc_bootstrap.c"
 HEAP32[(($426)>>2)]=$424; //@line 2531 "tcc_bootstrap.c"
 var $427=HEAP32[((76648)>>2)]; //@line 2532 "tcc_bootstrap.c"
 var $428=(($427+24)|0); //@line 2532 "tcc_bootstrap.c"
 HEAP32[(($428)>>2)]=0; //@line 2532 "tcc_bootstrap.c"
 label=100;break; //@line 2533 "tcc_bootstrap.c"
 case 100: 
 var $430=HEAP32[((10472)>>2)]; //@line 2533 "tcc_bootstrap.c"
 var $431=($430|0)!=10; //@line 2533 "tcc_bootstrap.c"
 if($431){label=101;break;}else{label=102;break;} //@line 2533 "tcc_bootstrap.c"
 case 101: 
 _next_nomacro(); //@line 2534 "tcc_bootstrap.c"
 label=100;break; //@line 2534 "tcc_bootstrap.c"
 case 102: 
 var $434=HEAP32[((10464)>>2)]; //@line 2535 "tcc_bootstrap.c"
 var $435=$434|4; //@line 2535 "tcc_bootstrap.c"
 HEAP32[((10464)>>2)]=$435; //@line 2535 "tcc_bootstrap.c"
 label=149;break; //@line 2536 "tcc_bootstrap.c"
 case 103: 
 label=145;break; //@line 2538 "tcc_bootstrap.c"
 case 104: 
 var $438=HEAP32[((10444)>>2)]; //@line 2540 "tcc_bootstrap.c"
 var $439=_strtoul($438,$q,10); //@line 2540 "tcc_bootstrap.c"
 $n=$439; //@line 2540 "tcc_bootstrap.c"
 label=109;break; //@line 2541 "tcc_bootstrap.c"
 case 105: 
 _next(); //@line 2543 "tcc_bootstrap.c"
 var $441=HEAP32[((10472)>>2)]; //@line 2544 "tcc_bootstrap.c"
 var $442=($441|0)!=181; //@line 2544 "tcc_bootstrap.c"
 if($442){label=106;break;}else{label=108;break;} //@line 2544 "tcc_bootstrap.c"
 case 106: 
 label=107;break; //@line 2544 "tcc_bootstrap.c"
 case 107: 
 _tcc_error(3120,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs; //@line 2546 "tcc_bootstrap.c"
 label=108;break; //@line 2546 "tcc_bootstrap.c"
 case 108: 
 var $$etemp$0=10440;
 var $ld$1$0=(($$etemp$0)|0);
 var $446$0=HEAP32[(($ld$1$0)>>2)];
 var $ld$2$1=(($$etemp$0+4)|0);
 var $446$1=HEAP32[(($ld$2$1)>>2)];
 var $447$0=$446$0;
 var $447=$447$0;
 $n=$447; //@line 2547 "tcc_bootstrap.c"
 label=109;break; //@line 2547 "tcc_bootstrap.c"
 case 109: 
 _next(); //@line 2549 "tcc_bootstrap.c"
 var $449=HEAP32[((10472)>>2)]; //@line 2550 "tcc_bootstrap.c"
 var $450=($449|0)!=10; //@line 2550 "tcc_bootstrap.c"
 if($450){label=110;break;}else{label=118;break;} //@line 2550 "tcc_bootstrap.c"
 case 110: 
 var $452=HEAP32[((10472)>>2)]; //@line 2551 "tcc_bootstrap.c"
 var $453=($452|0)==185; //@line 2551 "tcc_bootstrap.c"
 if($453){label=111;break;}else{label=114;break;} //@line 2551 "tcc_bootstrap.c"
 case 111: 
 var $455=HEAP32[((76648)>>2)]; //@line 2552 "tcc_bootstrap.c"
 var $456=(($455+1064)|0); //@line 2552 "tcc_bootstrap.c"
 var $457=HEAP32[(($456)>>2)]; //@line 2552 "tcc_bootstrap.c"
 var $458=HEAP32[((76648)>>2)]; //@line 2552 "tcc_bootstrap.c"
 var $459=(($458+40)|0); //@line 2552 "tcc_bootstrap.c"
 var $460=(($459)|0); //@line 2552 "tcc_bootstrap.c"
 var $461=($457|0)==($460|0); //@line 2552 "tcc_bootstrap.c"
 if($461){label=112;break;}else{label=113;break;} //@line 2552 "tcc_bootstrap.c"
 case 112: 
 var $463=HEAP32[((76648)>>2)]; //@line 2553 "tcc_bootstrap.c"
 var $464=(($463+40)|0); //@line 2553 "tcc_bootstrap.c"
 var $465=(($464)|0); //@line 2553 "tcc_bootstrap.c"
 var $466=_tcc_strdup($465); //@line 2553 "tcc_bootstrap.c"
 var $467=HEAP32[((76648)>>2)]; //@line 2553 "tcc_bootstrap.c"
 var $468=(($467+1064)|0); //@line 2553 "tcc_bootstrap.c"
 HEAP32[(($468)>>2)]=$466; //@line 2553 "tcc_bootstrap.c"
 label=113;break; //@line 2553 "tcc_bootstrap.c"
 case 113: 
 var $470=HEAP32[((76648)>>2)]; //@line 2554 "tcc_bootstrap.c"
 var $471=(($470+40)|0); //@line 2554 "tcc_bootstrap.c"
 var $472=(($471)|0); //@line 2554 "tcc_bootstrap.c"
 var $473=HEAP32[((10444)>>2)]; //@line 2554 "tcc_bootstrap.c"
 var $474=_pstrcpy($472,1024,$473); //@line 2554 "tcc_bootstrap.c"
 label=117;break; //@line 2555 "tcc_bootstrap.c"
 case 114: 
 var $476=HEAP32[((10608)>>2)]; //@line 2555 "tcc_bootstrap.c"
 var $477=$476&8; //@line 2555 "tcc_bootstrap.c"
 var $478=($477|0)!=0; //@line 2555 "tcc_bootstrap.c"
 if($478){label=115;break;}else{label=116;break;} //@line 2555 "tcc_bootstrap.c"
 case 115: 
 label=145;break; //@line 2556 "tcc_bootstrap.c"
 case 116: 
 label=107;break; //@line 2558 "tcc_bootstrap.c"
 case 117: 
 var $482=$n; //@line 2559 "tcc_bootstrap.c"
 var $483=((($482)-(1))|0); //@line 2559 "tcc_bootstrap.c"
 $n=$483; //@line 2559 "tcc_bootstrap.c"
 label=118;break; //@line 2560 "tcc_bootstrap.c"
 case 118: 
 var $485=HEAP32[((76648)>>2)]; //@line 2561 "tcc_bootstrap.c"
 var $486=(($485+8)|0); //@line 2561 "tcc_bootstrap.c"
 var $487=HEAP32[(($486)>>2)]; //@line 2561 "tcc_bootstrap.c"
 var $488=($487|0)>0; //@line 2561 "tcc_bootstrap.c"
 if($488){label=119;break;}else{label=120;break;} //@line 2561 "tcc_bootstrap.c"
 case 119: 
 var $490=HEAP32[((76648)>>2)]; //@line 2562 "tcc_bootstrap.c"
 var $491=(($490+16)|0); //@line 2562 "tcc_bootstrap.c"
 var $492=HEAP32[(($491)>>2)]; //@line 2562 "tcc_bootstrap.c"
 var $493=$n; //@line 2562 "tcc_bootstrap.c"
 var $494=((($492)-($493))|0); //@line 2562 "tcc_bootstrap.c"
 var $495=HEAP32[((9320)>>2)]; //@line 2562 "tcc_bootstrap.c"
 var $496=((($495)+($494))|0); //@line 2562 "tcc_bootstrap.c"
 HEAP32[((9320)>>2)]=$496; //@line 2562 "tcc_bootstrap.c"
 label=120;break; //@line 2562 "tcc_bootstrap.c"
 case 120: 
 var $498=$n; //@line 2563 "tcc_bootstrap.c"
 var $499=HEAP32[((76648)>>2)]; //@line 2563 "tcc_bootstrap.c"
 var $500=(($499+16)|0); //@line 2563 "tcc_bootstrap.c"
 HEAP32[(($500)>>2)]=$498; //@line 2563 "tcc_bootstrap.c"
 label=145;break; //@line 2564 "tcc_bootstrap.c"
 case 121: 
 var $502=HEAP32[((10472)>>2)]; //@line 2567 "tcc_bootstrap.c"
 $c=$502; //@line 2567 "tcc_bootstrap.c"
 var $503=HEAP32[((76648)>>2)]; //@line 2568 "tcc_bootstrap.c"
 var $504=(($503)|0); //@line 2568 "tcc_bootstrap.c"
 var $505=HEAP32[(($504)>>2)]; //@line 2568 "tcc_bootstrap.c"
 var $506=(($505)|0); //@line 2568 "tcc_bootstrap.c"
 var $507=HEAP8[(($506)>>0)]; //@line 2568 "tcc_bootstrap.c"
 var $508=($507&255); //@line 2568 "tcc_bootstrap.c"
 HEAP32[((76736)>>2)]=$508; //@line 2568 "tcc_bootstrap.c"
 _skip_spaces(); //@line 2569 "tcc_bootstrap.c"
 var $509=(($buf)|0); //@line 2570 "tcc_bootstrap.c"
 HEAP32[(($q)>>2)]=$509; //@line 2570 "tcc_bootstrap.c"
 label=122;break; //@line 2571 "tcc_bootstrap.c"
 case 122: 
 var $511=HEAP32[((76736)>>2)]; //@line 2571 "tcc_bootstrap.c"
 var $512=($511|0)!=10; //@line 2571 "tcc_bootstrap.c"
 if($512){label=123;break;}else{var $517=0;label=124;break;} //@line 2571 "tcc_bootstrap.c"
 case 123: 
 var $514=HEAP32[((76736)>>2)]; //@line 2571 "tcc_bootstrap.c"
 var $515=($514|0)!=-1; //@line 2571 "tcc_bootstrap.c"
 var $517=$515;label=124;break;
 case 124: 
 var $517;
 if($517){label=125;break;}else{label=133;break;}
 case 125: 
 var $519=HEAP32[(($q)>>2)]; //@line 2572 "tcc_bootstrap.c"
 var $520=(($buf)|0); //@line 2572 "tcc_bootstrap.c"
 var $521=$519; //@line 2572 "tcc_bootstrap.c"
 var $522=$520; //@line 2572 "tcc_bootstrap.c"
 var $523=((($521)-($522))|0); //@line 2572 "tcc_bootstrap.c"
 var $524=($523>>>0)<1023; //@line 2572 "tcc_bootstrap.c"
 if($524){label=126;break;}else{label=127;break;} //@line 2572 "tcc_bootstrap.c"
 case 126: 
 var $526=HEAP32[((76736)>>2)]; //@line 2573 "tcc_bootstrap.c"
 var $527=(($526)&255); //@line 2573 "tcc_bootstrap.c"
 var $528=HEAP32[(($q)>>2)]; //@line 2573 "tcc_bootstrap.c"
 var $529=(($528+1)|0); //@line 2573 "tcc_bootstrap.c"
 HEAP32[(($q)>>2)]=$529; //@line 2573 "tcc_bootstrap.c"
 HEAP8[(($528)>>0)]=$527; //@line 2573 "tcc_bootstrap.c"
 label=127;break; //@line 2573 "tcc_bootstrap.c"
 case 127: 
 var $531=HEAP32[((76736)>>2)]; //@line 2574 "tcc_bootstrap.c"
 var $532=($531|0)==92; //@line 2574 "tcc_bootstrap.c"
 if($532){label=128;break;}else{label=131;break;} //@line 2574 "tcc_bootstrap.c"
 case 128: 
 var $534=_handle_stray_noerror(); //@line 2575 "tcc_bootstrap.c"
 var $535=($534|0)==0; //@line 2575 "tcc_bootstrap.c"
 if($535){label=129;break;}else{label=130;break;} //@line 2575 "tcc_bootstrap.c"
 case 129: 
 var $537=HEAP32[(($q)>>2)]; //@line 2576 "tcc_bootstrap.c"
 var $538=((($537)-(1))|0); //@line 2576 "tcc_bootstrap.c"
 HEAP32[(($q)>>2)]=$538; //@line 2576 "tcc_bootstrap.c"
 label=130;break; //@line 2576 "tcc_bootstrap.c"
 case 130: 
 label=132;break; //@line 2577 "tcc_bootstrap.c"
 case 131: 
 _inp(); //@line 2578 "tcc_bootstrap.c"
 label=132;break;
 case 132: 
 label=122;break; //@line 2579 "tcc_bootstrap.c"
 case 133: 
 var $543=HEAP32[(($q)>>2)]; //@line 2580 "tcc_bootstrap.c"
 HEAP8[(($543)>>0)]=0; //@line 2580 "tcc_bootstrap.c"
 var $544=$c; //@line 2581 "tcc_bootstrap.c"
 var $545=($544|0)==323; //@line 2581 "tcc_bootstrap.c"
 if($545){label=134;break;}else{label=135;break;} //@line 2581 "tcc_bootstrap.c"
 case 134: 
 var $547=(($buf)|0); //@line 2582 "tcc_bootstrap.c"
 _tcc_error(3104,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$547,tempVarArgs)); STACKTOP=tempVarArgs; //@line 2582 "tcc_bootstrap.c"
 label=136;break; //@line 2582 "tcc_bootstrap.c"
 case 135: 
 var $549=(($buf)|0); //@line 2584 "tcc_bootstrap.c"
 _tcc_warning(3080,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$549,tempVarArgs)); STACKTOP=tempVarArgs; //@line 2584 "tcc_bootstrap.c"
 label=136;break;
 case 136: 
 label=145;break; //@line 2585 "tcc_bootstrap.c"
 case 137: 
 label=149;break; //@line 2587 "tcc_bootstrap.c"
 case 138: 
 var $553=$saved_parse_flags; //@line 2589 "tcc_bootstrap.c"
 var $554=$553&8; //@line 2589 "tcc_bootstrap.c"
 var $555=($554|0)!=0; //@line 2589 "tcc_bootstrap.c"
 if($555){label=139;break;}else{label=140;break;} //@line 2589 "tcc_bootstrap.c"
 case 139: 
 label=144;break; //@line 2590 "tcc_bootstrap.c"
 case 140: 
 var $558=HEAP32[((10472)>>2)]; //@line 2591 "tcc_bootstrap.c"
 var $559=($558|0)==33; //@line 2591 "tcc_bootstrap.c"
 if($559){label=141;break;}else{label=143;break;} //@line 2591 "tcc_bootstrap.c"
 case 141: 
 var $561=$1; //@line 2591 "tcc_bootstrap.c"
 var $562=($561|0)!=0; //@line 2591 "tcc_bootstrap.c"
 if($562){label=142;break;}else{label=143;break;} //@line 2591 "tcc_bootstrap.c"
 case 142: 
 label=144;break; //@line 2592 "tcc_bootstrap.c"
 case 143: 
 var $565=HEAP32[((10472)>>2)]; //@line 2593 "tcc_bootstrap.c"
 var $566=_get_tok_str($565,10440); //@line 2593 "tcc_bootstrap.c"
 _tcc_warning(3032,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$566,tempVarArgs)); STACKTOP=tempVarArgs; //@line 2593 "tcc_bootstrap.c"
 label=144;break; //@line 2593 "tcc_bootstrap.c"
 case 144: 
 var $568=HEAP32[((76648)>>2)]; //@line 2595 "tcc_bootstrap.c"
 var $569=(($568)|0); //@line 2595 "tcc_bootstrap.c"
 var $570=HEAP32[(($569)>>2)]; //@line 2595 "tcc_bootstrap.c"
 var $571=((($570)-(1))|0); //@line 2595 "tcc_bootstrap.c"
 var $572=_parse_line_comment($571); //@line 2595 "tcc_bootstrap.c"
 var $573=HEAP32[((76648)>>2)]; //@line 2595 "tcc_bootstrap.c"
 var $574=(($573)|0); //@line 2595 "tcc_bootstrap.c"
 HEAP32[(($574)>>2)]=$572; //@line 2595 "tcc_bootstrap.c"
 label=149;break; //@line 2596 "tcc_bootstrap.c"
 case 145: 
 label=146;break; //@line 2598 "tcc_bootstrap.c"
 case 146: 
 var $577=HEAP32[((10472)>>2)]; //@line 2598 "tcc_bootstrap.c"
 var $578=($577|0)!=10; //@line 2598 "tcc_bootstrap.c"
 if($578){label=147;break;}else{label=148;break;} //@line 2598 "tcc_bootstrap.c"
 case 147: 
 _next_nomacro(); //@line 2599 "tcc_bootstrap.c"
 label=146;break; //@line 2599 "tcc_bootstrap.c"
 case 148: 
 label=149;break; //@line 2599 "tcc_bootstrap.c"
 case 149: 
 var $582=$saved_parse_flags; //@line 2601 "tcc_bootstrap.c"
 HEAP32[((10608)>>2)]=$582; //@line 2601 "tcc_bootstrap.c"
 STACKTOP=sp;return; //@line 2602 "tcc_bootstrap.c"
  default: assert(0, "bad label: " + label);
 }

}


function _parse_line_comment($p){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $c;
 $1=$p;
 var $2=$1; //@line 1671 "tcc_bootstrap.c"
 var $3=(($2+1)|0); //@line 1671 "tcc_bootstrap.c"
 $1=$3; //@line 1671 "tcc_bootstrap.c"
 label=2;break; //@line 1672 "tcc_bootstrap.c"
 case 2: 
 var $5=$1; //@line 1673 "tcc_bootstrap.c"
 var $6=HEAP8[(($5)>>0)]; //@line 1673 "tcc_bootstrap.c"
 var $7=($6&255); //@line 1673 "tcc_bootstrap.c"
 $c=$7; //@line 1673 "tcc_bootstrap.c"
 label=3;break; //@line 1673 "tcc_bootstrap.c"
 case 3: 
 var $9=$c; //@line 1675 "tcc_bootstrap.c"
 var $10=($9|0)==10; //@line 1675 "tcc_bootstrap.c"
 if($10){label=5;break;}else{label=4;break;} //@line 1675 "tcc_bootstrap.c"
 case 4: 
 var $12=$c; //@line 1675 "tcc_bootstrap.c"
 var $13=($12|0)==-1; //@line 1675 "tcc_bootstrap.c"
 if($13){label=5;break;}else{label=6;break;} //@line 1675 "tcc_bootstrap.c"
 case 5: 
 label=21;break; //@line 1676 "tcc_bootstrap.c"
 case 6: 
 var $16=$c; //@line 1677 "tcc_bootstrap.c"
 var $17=($16|0)==92; //@line 1677 "tcc_bootstrap.c"
 if($17){label=7;break;}else{label=18;break;} //@line 1677 "tcc_bootstrap.c"
 case 7: 
 var $19=$1; //@line 1678 "tcc_bootstrap.c"
 var $20=HEAP32[((76648)>>2)]; //@line 1678 "tcc_bootstrap.c"
 var $21=(($20)|0); //@line 1678 "tcc_bootstrap.c"
 HEAP32[(($21)>>2)]=$19; //@line 1678 "tcc_bootstrap.c"
 var $22=_handle_eob(); //@line 1679 "tcc_bootstrap.c"
 $c=$22; //@line 1679 "tcc_bootstrap.c"
 var $23=HEAP32[((76648)>>2)]; //@line 1680 "tcc_bootstrap.c"
 var $24=(($23)|0); //@line 1680 "tcc_bootstrap.c"
 var $25=HEAP32[(($24)>>2)]; //@line 1680 "tcc_bootstrap.c"
 $1=$25; //@line 1680 "tcc_bootstrap.c"
 var $26=$c; //@line 1681 "tcc_bootstrap.c"
 var $27=($26|0)==92; //@line 1681 "tcc_bootstrap.c"
 if($27){label=8;break;}else{label=16;break;} //@line 1681 "tcc_bootstrap.c"
 case 8: 
 var $29=$1; //@line 1682 "tcc_bootstrap.c"
 var $30=(($29+1)|0); //@line 1682 "tcc_bootstrap.c"
 $1=$30; //@line 1682 "tcc_bootstrap.c"
 var $31=$1; //@line 1682 "tcc_bootstrap.c"
 var $32=_PEEKC_EOB($31); //@line 1682 "tcc_bootstrap.c"
 $c=$32; //@line 1682 "tcc_bootstrap.c"
 var $33=$c; //@line 1683 "tcc_bootstrap.c"
 var $34=($33|0)==10; //@line 1683 "tcc_bootstrap.c"
 if($34){label=9;break;}else{label=10;break;} //@line 1683 "tcc_bootstrap.c"
 case 9: 
 var $36=HEAP32[((76648)>>2)]; //@line 1684 "tcc_bootstrap.c"
 var $37=(($36+16)|0); //@line 1684 "tcc_bootstrap.c"
 var $38=HEAP32[(($37)>>2)]; //@line 1684 "tcc_bootstrap.c"
 var $39=((($38)+(1))|0); //@line 1684 "tcc_bootstrap.c"
 HEAP32[(($37)>>2)]=$39; //@line 1684 "tcc_bootstrap.c"
 var $40=$1; //@line 1685 "tcc_bootstrap.c"
 var $41=(($40+1)|0); //@line 1685 "tcc_bootstrap.c"
 $1=$41; //@line 1685 "tcc_bootstrap.c"
 var $42=$1; //@line 1685 "tcc_bootstrap.c"
 var $43=_PEEKC_EOB($42); //@line 1685 "tcc_bootstrap.c"
 $c=$43; //@line 1685 "tcc_bootstrap.c"
 label=15;break; //@line 1686 "tcc_bootstrap.c"
 case 10: 
 var $45=$c; //@line 1686 "tcc_bootstrap.c"
 var $46=($45|0)==13; //@line 1686 "tcc_bootstrap.c"
 if($46){label=11;break;}else{label=14;break;} //@line 1686 "tcc_bootstrap.c"
 case 11: 
 var $48=$1; //@line 1687 "tcc_bootstrap.c"
 var $49=(($48+1)|0); //@line 1687 "tcc_bootstrap.c"
 $1=$49; //@line 1687 "tcc_bootstrap.c"
 var $50=$1; //@line 1687 "tcc_bootstrap.c"
 var $51=_PEEKC_EOB($50); //@line 1687 "tcc_bootstrap.c"
 $c=$51; //@line 1687 "tcc_bootstrap.c"
 var $52=$c; //@line 1688 "tcc_bootstrap.c"
 var $53=($52|0)==10; //@line 1688 "tcc_bootstrap.c"
 if($53){label=12;break;}else{label=13;break;} //@line 1688 "tcc_bootstrap.c"
 case 12: 
 var $55=HEAP32[((76648)>>2)]; //@line 1689 "tcc_bootstrap.c"
 var $56=(($55+16)|0); //@line 1689 "tcc_bootstrap.c"
 var $57=HEAP32[(($56)>>2)]; //@line 1689 "tcc_bootstrap.c"
 var $58=((($57)+(1))|0); //@line 1689 "tcc_bootstrap.c"
 HEAP32[(($56)>>2)]=$58; //@line 1689 "tcc_bootstrap.c"
 var $59=$1; //@line 1690 "tcc_bootstrap.c"
 var $60=(($59+1)|0); //@line 1690 "tcc_bootstrap.c"
 $1=$60; //@line 1690 "tcc_bootstrap.c"
 var $61=$1; //@line 1690 "tcc_bootstrap.c"
 var $62=_PEEKC_EOB($61); //@line 1690 "tcc_bootstrap.c"
 $c=$62; //@line 1690 "tcc_bootstrap.c"
 label=13;break; //@line 1691 "tcc_bootstrap.c"
 case 13: 
 label=14;break; //@line 1692 "tcc_bootstrap.c"
 case 14: 
 label=15;break;
 case 15: 
 label=17;break; //@line 1693 "tcc_bootstrap.c"
 case 16: 
 label=3;break; //@line 1694 "tcc_bootstrap.c"
 case 17: 
 label=19;break; //@line 1696 "tcc_bootstrap.c"
 case 18: 
 var $69=$1; //@line 1697 "tcc_bootstrap.c"
 var $70=(($69+1)|0); //@line 1697 "tcc_bootstrap.c"
 $1=$70; //@line 1697 "tcc_bootstrap.c"
 label=19;break;
 case 19: 
 label=20;break;
 case 20: 
 label=2;break; //@line 1699 "tcc_bootstrap.c"
 case 21: 
 var $74=$1; //@line 1700 "tcc_bootstrap.c"
 STACKTOP=sp;return $74; //@line 1700 "tcc_bootstrap.c"
  default: assert(0, "bad label: " + label);
 }

}


function _toup($c){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 $1=$c;
 var $2=$1; //@line 1023 "tcc_bootstrap.c"
 var $3=($2|0)>=97; //@line 1023 "tcc_bootstrap.c"
 if($3){label=2;break;}else{label=4;break;} //@line 1023 "tcc_bootstrap.c"
 case 2: 
 var $5=$1; //@line 1023 "tcc_bootstrap.c"
 var $6=($5|0)<=122; //@line 1023 "tcc_bootstrap.c"
 if($6){label=3;break;}else{label=4;break;} //@line 1023 "tcc_bootstrap.c"
 case 3: 
 var $8=$1; //@line 1023 "tcc_bootstrap.c"
 var $9=((($8)-(97))|0); //@line 1023 "tcc_bootstrap.c"
 var $10=((($9)+(65))|0); //@line 1023 "tcc_bootstrap.c"
 var $14=$10;label=5;break; //@line 1023 "tcc_bootstrap.c"
 case 4: 
 var $12=$1; //@line 1023 "tcc_bootstrap.c"
 var $14=$12;label=5;break; //@line 1023 "tcc_bootstrap.c"
 case 5: 
 var $14; //@line 1023 "tcc_bootstrap.c"
 STACKTOP=sp;return $14; //@line 1023 "tcc_bootstrap.c"
  default: assert(0, "bad label: " + label);
 }

}


function _parse_pp_string($p,$sep,$str){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $c;
 $1=$p;
 $2=$sep;
 $3=$str;
 var $4=$1; //@line 1796 "tcc_bootstrap.c"
 var $5=(($4+1)|0); //@line 1796 "tcc_bootstrap.c"
 $1=$5; //@line 1796 "tcc_bootstrap.c"
 label=2;break; //@line 1797 "tcc_bootstrap.c"
 case 2: 
 var $7=$1; //@line 1798 "tcc_bootstrap.c"
 var $8=HEAP8[(($7)>>0)]; //@line 1798 "tcc_bootstrap.c"
 var $9=($8&255); //@line 1798 "tcc_bootstrap.c"
 $c=$9; //@line 1798 "tcc_bootstrap.c"
 var $10=$c; //@line 1799 "tcc_bootstrap.c"
 var $11=$2; //@line 1799 "tcc_bootstrap.c"
 var $12=($10|0)==($11|0); //@line 1799 "tcc_bootstrap.c"
 if($12){label=3;break;}else{label=4;break;} //@line 1799 "tcc_bootstrap.c"
 case 3: 
 label=42;break; //@line 1800 "tcc_bootstrap.c"
 case 4: 
 var $15=$c; //@line 1801 "tcc_bootstrap.c"
 var $16=($15|0)==92; //@line 1801 "tcc_bootstrap.c"
 if($16){label=5;break;}else{label=25;break;} //@line 1801 "tcc_bootstrap.c"
 case 5: 
 var $18=$1; //@line 1802 "tcc_bootstrap.c"
 var $19=HEAP32[((76648)>>2)]; //@line 1802 "tcc_bootstrap.c"
 var $20=(($19)|0); //@line 1802 "tcc_bootstrap.c"
 HEAP32[(($20)>>2)]=$18; //@line 1802 "tcc_bootstrap.c"
 var $21=_handle_eob(); //@line 1803 "tcc_bootstrap.c"
 $c=$21; //@line 1803 "tcc_bootstrap.c"
 var $22=HEAP32[((76648)>>2)]; //@line 1804 "tcc_bootstrap.c"
 var $23=(($22)|0); //@line 1804 "tcc_bootstrap.c"
 var $24=HEAP32[(($23)>>2)]; //@line 1804 "tcc_bootstrap.c"
 $1=$24; //@line 1804 "tcc_bootstrap.c"
 var $25=$c; //@line 1805 "tcc_bootstrap.c"
 var $26=($25|0)==-1; //@line 1805 "tcc_bootstrap.c"
 if($26){label=6;break;}else{label=8;break;} //@line 1805 "tcc_bootstrap.c"
 case 6: 
 label=7;break; //@line 1805 "tcc_bootstrap.c"
 case 7: 
 var $29=$2; //@line 1807 "tcc_bootstrap.c"
 _tcc_error(3536,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$29,tempVarArgs)); STACKTOP=tempVarArgs; //@line 1807 "tcc_bootstrap.c"
 label=24;break; //@line 1808 "tcc_bootstrap.c"
 case 8: 
 var $31=$c; //@line 1808 "tcc_bootstrap.c"
 var $32=($31|0)==92; //@line 1808 "tcc_bootstrap.c"
 if($32){label=9;break;}else{label=23;break;} //@line 1808 "tcc_bootstrap.c"
 case 9: 
 var $34=$1; //@line 1809 "tcc_bootstrap.c"
 var $35=(($34+1)|0); //@line 1809 "tcc_bootstrap.c"
 $1=$35; //@line 1809 "tcc_bootstrap.c"
 var $36=$1; //@line 1809 "tcc_bootstrap.c"
 var $37=_PEEKC_EOB($36); //@line 1809 "tcc_bootstrap.c"
 $c=$37; //@line 1809 "tcc_bootstrap.c"
 var $38=$c; //@line 1810 "tcc_bootstrap.c"
 var $39=($38|0)==10; //@line 1810 "tcc_bootstrap.c"
 if($39){label=10;break;}else{label=11;break;} //@line 1810 "tcc_bootstrap.c"
 case 10: 
 var $41=HEAP32[((76648)>>2)]; //@line 1811 "tcc_bootstrap.c"
 var $42=(($41+16)|0); //@line 1811 "tcc_bootstrap.c"
 var $43=HEAP32[(($42)>>2)]; //@line 1811 "tcc_bootstrap.c"
 var $44=((($43)+(1))|0); //@line 1811 "tcc_bootstrap.c"
 HEAP32[(($42)>>2)]=$44; //@line 1811 "tcc_bootstrap.c"
 var $45=$1; //@line 1812 "tcc_bootstrap.c"
 var $46=(($45+1)|0); //@line 1812 "tcc_bootstrap.c"
 $1=$46; //@line 1812 "tcc_bootstrap.c"
 label=22;break; //@line 1813 "tcc_bootstrap.c"
 case 11: 
 var $48=$c; //@line 1813 "tcc_bootstrap.c"
 var $49=($48|0)==13; //@line 1813 "tcc_bootstrap.c"
 if($49){label=12;break;}else{label=15;break;} //@line 1813 "tcc_bootstrap.c"
 case 12: 
 var $51=$1; //@line 1814 "tcc_bootstrap.c"
 var $52=(($51+1)|0); //@line 1814 "tcc_bootstrap.c"
 $1=$52; //@line 1814 "tcc_bootstrap.c"
 var $53=$1; //@line 1814 "tcc_bootstrap.c"
 var $54=_PEEKC_EOB($53); //@line 1814 "tcc_bootstrap.c"
 $c=$54; //@line 1814 "tcc_bootstrap.c"
 var $55=$c; //@line 1815 "tcc_bootstrap.c"
 var $56=($55|0)!=10; //@line 1815 "tcc_bootstrap.c"
 if($56){label=13;break;}else{label=14;break;} //@line 1815 "tcc_bootstrap.c"
 case 13: 
 _expect(3512); //@line 1816 "tcc_bootstrap.c"
 label=14;break; //@line 1816 "tcc_bootstrap.c"
 case 14: 
 var $59=HEAP32[((76648)>>2)]; //@line 1817 "tcc_bootstrap.c"
 var $60=(($59+16)|0); //@line 1817 "tcc_bootstrap.c"
 var $61=HEAP32[(($60)>>2)]; //@line 1817 "tcc_bootstrap.c"
 var $62=((($61)+(1))|0); //@line 1817 "tcc_bootstrap.c"
 HEAP32[(($60)>>2)]=$62; //@line 1817 "tcc_bootstrap.c"
 var $63=$1; //@line 1818 "tcc_bootstrap.c"
 var $64=(($63+1)|0); //@line 1818 "tcc_bootstrap.c"
 $1=$64; //@line 1818 "tcc_bootstrap.c"
 label=21;break; //@line 1819 "tcc_bootstrap.c"
 case 15: 
 var $66=$c; //@line 1819 "tcc_bootstrap.c"
 var $67=($66|0)==-1; //@line 1819 "tcc_bootstrap.c"
 if($67){label=16;break;}else{label=17;break;} //@line 1819 "tcc_bootstrap.c"
 case 16: 
 label=7;break; //@line 1820 "tcc_bootstrap.c"
 case 17: 
 var $70=$3; //@line 1822 "tcc_bootstrap.c"
 var $71=($70|0)!=0; //@line 1822 "tcc_bootstrap.c"
 if($71){label=18;break;}else{label=19;break;} //@line 1822 "tcc_bootstrap.c"
 case 18: 
 var $73=$3; //@line 1823 "tcc_bootstrap.c"
 _cstr_ccat($73,92); //@line 1823 "tcc_bootstrap.c"
 var $74=$3; //@line 1824 "tcc_bootstrap.c"
 var $75=$c; //@line 1824 "tcc_bootstrap.c"
 _cstr_ccat($74,$75); //@line 1824 "tcc_bootstrap.c"
 label=19;break; //@line 1825 "tcc_bootstrap.c"
 case 19: 
 var $77=$1; //@line 1826 "tcc_bootstrap.c"
 var $78=(($77+1)|0); //@line 1826 "tcc_bootstrap.c"
 $1=$78; //@line 1826 "tcc_bootstrap.c"
 label=20;break;
 case 20: 
 label=21;break;
 case 21: 
 label=22;break;
 case 22: 
 label=23;break; //@line 1828 "tcc_bootstrap.c"
 case 23: 
 label=24;break;
 case 24: 
 label=40;break; //@line 1829 "tcc_bootstrap.c"
 case 25: 
 var $85=$c; //@line 1829 "tcc_bootstrap.c"
 var $86=($85|0)==10; //@line 1829 "tcc_bootstrap.c"
 if($86){label=26;break;}else{label=27;break;} //@line 1829 "tcc_bootstrap.c"
 case 26: 
 var $88=HEAP32[((76648)>>2)]; //@line 1830 "tcc_bootstrap.c"
 var $89=(($88+16)|0); //@line 1830 "tcc_bootstrap.c"
 var $90=HEAP32[(($89)>>2)]; //@line 1830 "tcc_bootstrap.c"
 var $91=((($90)+(1))|0); //@line 1830 "tcc_bootstrap.c"
 HEAP32[(($89)>>2)]=$91; //@line 1830 "tcc_bootstrap.c"
 label=35;break; //@line 1831 "tcc_bootstrap.c"
 case 27: 
 var $93=$c; //@line 1832 "tcc_bootstrap.c"
 var $94=($93|0)==13; //@line 1832 "tcc_bootstrap.c"
 if($94){label=28;break;}else{label=34;break;} //@line 1832 "tcc_bootstrap.c"
 case 28: 
 var $96=$1; //@line 1833 "tcc_bootstrap.c"
 var $97=(($96+1)|0); //@line 1833 "tcc_bootstrap.c"
 $1=$97; //@line 1833 "tcc_bootstrap.c"
 var $98=$1; //@line 1833 "tcc_bootstrap.c"
 var $99=_PEEKC_EOB($98); //@line 1833 "tcc_bootstrap.c"
 $c=$99; //@line 1833 "tcc_bootstrap.c"
 var $100=$c; //@line 1834 "tcc_bootstrap.c"
 var $101=($100|0)!=10; //@line 1834 "tcc_bootstrap.c"
 if($101){label=29;break;}else{label=32;break;} //@line 1834 "tcc_bootstrap.c"
 case 29: 
 var $103=$3; //@line 1835 "tcc_bootstrap.c"
 var $104=($103|0)!=0; //@line 1835 "tcc_bootstrap.c"
 if($104){label=30;break;}else{label=31;break;} //@line 1835 "tcc_bootstrap.c"
 case 30: 
 var $106=$3; //@line 1836 "tcc_bootstrap.c"
 _cstr_ccat($106,13); //@line 1836 "tcc_bootstrap.c"
 label=31;break; //@line 1836 "tcc_bootstrap.c"
 case 31: 
 label=33;break; //@line 1837 "tcc_bootstrap.c"
 case 32: 
 var $109=HEAP32[((76648)>>2)]; //@line 1838 "tcc_bootstrap.c"
 var $110=(($109+16)|0); //@line 1838 "tcc_bootstrap.c"
 var $111=HEAP32[(($110)>>2)]; //@line 1838 "tcc_bootstrap.c"
 var $112=((($111)+(1))|0); //@line 1838 "tcc_bootstrap.c"
 HEAP32[(($110)>>2)]=$112; //@line 1838 "tcc_bootstrap.c"
 label=35;break; //@line 1839 "tcc_bootstrap.c"
 case 33: 
 label=38;break; //@line 1841 "tcc_bootstrap.c"
 case 34: 
 label=35;break; //@line 1841 "tcc_bootstrap.c"
 case 35: 
 var $116=$3; //@line 1843 "tcc_bootstrap.c"
 var $117=($116|0)!=0; //@line 1843 "tcc_bootstrap.c"
 if($117){label=36;break;}else{label=37;break;} //@line 1843 "tcc_bootstrap.c"
 case 36: 
 var $119=$3; //@line 1844 "tcc_bootstrap.c"
 var $120=$c; //@line 1844 "tcc_bootstrap.c"
 _cstr_ccat($119,$120); //@line 1844 "tcc_bootstrap.c"
 label=37;break; //@line 1844 "tcc_bootstrap.c"
 case 37: 
 var $122=$1; //@line 1845 "tcc_bootstrap.c"
 var $123=(($122+1)|0); //@line 1845 "tcc_bootstrap.c"
 $1=$123; //@line 1845 "tcc_bootstrap.c"
 label=38;break;
 case 38: 
 label=39;break;
 case 39: 
 label=40;break;
 case 40: 
 label=41;break;
 case 41: 
 label=2;break; //@line 1847 "tcc_bootstrap.c"
 case 42: 
 var $129=$1; //@line 1848 "tcc_bootstrap.c"
 var $130=(($129+1)|0); //@line 1848 "tcc_bootstrap.c"
 $1=$130; //@line 1848 "tcc_bootstrap.c"
 var $131=$1; //@line 1849 "tcc_bootstrap.c"
 STACKTOP=sp;return $131; //@line 1849 "tcc_bootstrap.c"
  default: assert(0, "bad label: " + label);
 }

}


function _parse_comment($p){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $c;
 $1=$p;
 var $2=$1; //@line 1705 "tcc_bootstrap.c"
 var $3=(($2+1)|0); //@line 1705 "tcc_bootstrap.c"
 $1=$3; //@line 1705 "tcc_bootstrap.c"
 label=2;break; //@line 1706 "tcc_bootstrap.c"
 case 2: 
 label=3;break; //@line 1707 "tcc_bootstrap.c"
 case 3: 
 var $6=$1; //@line 1708 "tcc_bootstrap.c"
 var $7=HEAP8[(($6)>>0)]; //@line 1708 "tcc_bootstrap.c"
 var $8=($7&255); //@line 1708 "tcc_bootstrap.c"
 $c=$8; //@line 1708 "tcc_bootstrap.c"
 var $9=$c; //@line 1709 "tcc_bootstrap.c"
 var $10=($9|0)==10; //@line 1709 "tcc_bootstrap.c"
 if($10){label=6;break;}else{label=4;break;} //@line 1709 "tcc_bootstrap.c"
 case 4: 
 var $12=$c; //@line 1709 "tcc_bootstrap.c"
 var $13=($12|0)==42; //@line 1709 "tcc_bootstrap.c"
 if($13){label=6;break;}else{label=5;break;} //@line 1709 "tcc_bootstrap.c"
 case 5: 
 var $15=$c; //@line 1709 "tcc_bootstrap.c"
 var $16=($15|0)==92; //@line 1709 "tcc_bootstrap.c"
 if($16){label=6;break;}else{label=7;break;} //@line 1709 "tcc_bootstrap.c"
 case 6: 
 label=12;break; //@line 1710 "tcc_bootstrap.c"
 case 7: 
 var $19=$1; //@line 1711 "tcc_bootstrap.c"
 var $20=(($19+1)|0); //@line 1711 "tcc_bootstrap.c"
 $1=$20; //@line 1711 "tcc_bootstrap.c"
 var $21=$1; //@line 1712 "tcc_bootstrap.c"
 var $22=HEAP8[(($21)>>0)]; //@line 1712 "tcc_bootstrap.c"
 var $23=($22&255); //@line 1712 "tcc_bootstrap.c"
 $c=$23; //@line 1712 "tcc_bootstrap.c"
 var $24=$c; //@line 1713 "tcc_bootstrap.c"
 var $25=($24|0)==10; //@line 1713 "tcc_bootstrap.c"
 if($25){label=10;break;}else{label=8;break;} //@line 1713 "tcc_bootstrap.c"
 case 8: 
 var $27=$c; //@line 1713 "tcc_bootstrap.c"
 var $28=($27|0)==42; //@line 1713 "tcc_bootstrap.c"
 if($28){label=10;break;}else{label=9;break;} //@line 1713 "tcc_bootstrap.c"
 case 9: 
 var $30=$c; //@line 1713 "tcc_bootstrap.c"
 var $31=($30|0)==92; //@line 1713 "tcc_bootstrap.c"
 if($31){label=10;break;}else{label=11;break;} //@line 1713 "tcc_bootstrap.c"
 case 10: 
 label=12;break; //@line 1714 "tcc_bootstrap.c"
 case 11: 
 var $34=$1; //@line 1715 "tcc_bootstrap.c"
 var $35=(($34+1)|0); //@line 1715 "tcc_bootstrap.c"
 $1=$35; //@line 1715 "tcc_bootstrap.c"
 label=3;break; //@line 1716 "tcc_bootstrap.c"
 case 12: 
 var $37=$c; //@line 1717 "tcc_bootstrap.c"
 var $38=($37|0)==10; //@line 1717 "tcc_bootstrap.c"
 if($38){label=13;break;}else{label=14;break;} //@line 1717 "tcc_bootstrap.c"
 case 13: 
 var $40=HEAP32[((76648)>>2)]; //@line 1718 "tcc_bootstrap.c"
 var $41=(($40+16)|0); //@line 1718 "tcc_bootstrap.c"
 var $42=HEAP32[(($41)>>2)]; //@line 1718 "tcc_bootstrap.c"
 var $43=((($42)+(1))|0); //@line 1718 "tcc_bootstrap.c"
 HEAP32[(($41)>>2)]=$43; //@line 1718 "tcc_bootstrap.c"
 var $44=$1; //@line 1719 "tcc_bootstrap.c"
 var $45=(($44+1)|0); //@line 1719 "tcc_bootstrap.c"
 $1=$45; //@line 1719 "tcc_bootstrap.c"
 label=50;break; //@line 1720 "tcc_bootstrap.c"
 case 14: 
 var $47=$c; //@line 1720 "tcc_bootstrap.c"
 var $48=($47|0)==42; //@line 1720 "tcc_bootstrap.c"
 if($48){label=15;break;}else{label=43;break;} //@line 1720 "tcc_bootstrap.c"
 case 15: 
 var $50=$1; //@line 1721 "tcc_bootstrap.c"
 var $51=(($50+1)|0); //@line 1721 "tcc_bootstrap.c"
 $1=$51; //@line 1721 "tcc_bootstrap.c"
 label=16;break; //@line 1722 "tcc_bootstrap.c"
 case 16: 
 var $53=$1; //@line 1723 "tcc_bootstrap.c"
 var $54=HEAP8[(($53)>>0)]; //@line 1723 "tcc_bootstrap.c"
 var $55=($54&255); //@line 1723 "tcc_bootstrap.c"
 $c=$55; //@line 1723 "tcc_bootstrap.c"
 var $56=$c; //@line 1724 "tcc_bootstrap.c"
 var $57=($56|0)==42; //@line 1724 "tcc_bootstrap.c"
 if($57){label=17;break;}else{label=18;break;} //@line 1724 "tcc_bootstrap.c"
 case 17: 
 var $59=$1; //@line 1725 "tcc_bootstrap.c"
 var $60=(($59+1)|0); //@line 1725 "tcc_bootstrap.c"
 $1=$60; //@line 1725 "tcc_bootstrap.c"
 label=40;break; //@line 1726 "tcc_bootstrap.c"
 case 18: 
 var $62=$c; //@line 1726 "tcc_bootstrap.c"
 var $63=($62|0)==47; //@line 1726 "tcc_bootstrap.c"
 if($63){label=19;break;}else{label=20;break;} //@line 1726 "tcc_bootstrap.c"
 case 19: 
 label=51;break; //@line 1727 "tcc_bootstrap.c"
 case 20: 
 var $66=$c; //@line 1728 "tcc_bootstrap.c"
 var $67=($66|0)==92; //@line 1728 "tcc_bootstrap.c"
 if($67){label=21;break;}else{label=37;break;} //@line 1728 "tcc_bootstrap.c"
 case 21: 
 var $69=$1; //@line 1729 "tcc_bootstrap.c"
 var $70=HEAP32[((76648)>>2)]; //@line 1729 "tcc_bootstrap.c"
 var $71=(($70)|0); //@line 1729 "tcc_bootstrap.c"
 HEAP32[(($71)>>2)]=$69; //@line 1729 "tcc_bootstrap.c"
 var $72=_handle_eob(); //@line 1730 "tcc_bootstrap.c"
 $c=$72; //@line 1730 "tcc_bootstrap.c"
 var $73=HEAP32[((76648)>>2)]; //@line 1731 "tcc_bootstrap.c"
 var $74=(($73)|0); //@line 1731 "tcc_bootstrap.c"
 var $75=HEAP32[(($74)>>2)]; //@line 1731 "tcc_bootstrap.c"
 $1=$75; //@line 1731 "tcc_bootstrap.c"
 var $76=$c; //@line 1732 "tcc_bootstrap.c"
 var $77=($76|0)==-1; //@line 1732 "tcc_bootstrap.c"
 if($77){label=22;break;}else{label=23;break;} //@line 1732 "tcc_bootstrap.c"
 case 22: 
 _tcc_error(3576,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs; //@line 1733 "tcc_bootstrap.c"
 label=23;break; //@line 1733 "tcc_bootstrap.c"
 case 23: 
 var $80=$c; //@line 1734 "tcc_bootstrap.c"
 var $81=($80|0)==92; //@line 1734 "tcc_bootstrap.c"
 if($81){label=24;break;}else{label=36;break;} //@line 1734 "tcc_bootstrap.c"
 case 24: 
 label=25;break; //@line 1735 "tcc_bootstrap.c"
 case 25: 
 var $84=$c; //@line 1735 "tcc_bootstrap.c"
 var $85=($84|0)==92; //@line 1735 "tcc_bootstrap.c"
 if($85){label=26;break;}else{label=35;break;} //@line 1735 "tcc_bootstrap.c"
 case 26: 
 var $87=$1; //@line 1736 "tcc_bootstrap.c"
 var $88=(($87+1)|0); //@line 1736 "tcc_bootstrap.c"
 $1=$88; //@line 1736 "tcc_bootstrap.c"
 var $89=$1; //@line 1736 "tcc_bootstrap.c"
 var $90=_PEEKC_EOB($89); //@line 1736 "tcc_bootstrap.c"
 $c=$90; //@line 1736 "tcc_bootstrap.c"
 var $91=$c; //@line 1737 "tcc_bootstrap.c"
 var $92=($91|0)==10; //@line 1737 "tcc_bootstrap.c"
 if($92){label=27;break;}else{label=28;break;} //@line 1737 "tcc_bootstrap.c"
 case 27: 
 var $94=HEAP32[((76648)>>2)]; //@line 1738 "tcc_bootstrap.c"
 var $95=(($94+16)|0); //@line 1738 "tcc_bootstrap.c"
 var $96=HEAP32[(($95)>>2)]; //@line 1738 "tcc_bootstrap.c"
 var $97=((($96)+(1))|0); //@line 1738 "tcc_bootstrap.c"
 HEAP32[(($95)>>2)]=$97; //@line 1738 "tcc_bootstrap.c"
 var $98=$1; //@line 1739 "tcc_bootstrap.c"
 var $99=(($98+1)|0); //@line 1739 "tcc_bootstrap.c"
 $1=$99; //@line 1739 "tcc_bootstrap.c"
 var $100=$1; //@line 1739 "tcc_bootstrap.c"
 var $101=_PEEKC_EOB($100); //@line 1739 "tcc_bootstrap.c"
 $c=$101; //@line 1739 "tcc_bootstrap.c"
 label=34;break; //@line 1740 "tcc_bootstrap.c"
 case 28: 
 var $103=$c; //@line 1740 "tcc_bootstrap.c"
 var $104=($103|0)==13; //@line 1740 "tcc_bootstrap.c"
 if($104){label=29;break;}else{label=32;break;} //@line 1740 "tcc_bootstrap.c"
 case 29: 
 var $106=$1; //@line 1741 "tcc_bootstrap.c"
 var $107=(($106+1)|0); //@line 1741 "tcc_bootstrap.c"
 $1=$107; //@line 1741 "tcc_bootstrap.c"
 var $108=$1; //@line 1741 "tcc_bootstrap.c"
 var $109=_PEEKC_EOB($108); //@line 1741 "tcc_bootstrap.c"
 $c=$109; //@line 1741 "tcc_bootstrap.c"
 var $110=$c; //@line 1742 "tcc_bootstrap.c"
 var $111=($110|0)==10; //@line 1742 "tcc_bootstrap.c"
 if($111){label=30;break;}else{label=31;break;} //@line 1742 "tcc_bootstrap.c"
 case 30: 
 var $113=HEAP32[((76648)>>2)]; //@line 1743 "tcc_bootstrap.c"
 var $114=(($113+16)|0); //@line 1743 "tcc_bootstrap.c"
 var $115=HEAP32[(($114)>>2)]; //@line 1743 "tcc_bootstrap.c"
 var $116=((($115)+(1))|0); //@line 1743 "tcc_bootstrap.c"
 HEAP32[(($114)>>2)]=$116; //@line 1743 "tcc_bootstrap.c"
 var $117=$1; //@line 1744 "tcc_bootstrap.c"
 var $118=(($117+1)|0); //@line 1744 "tcc_bootstrap.c"
 $1=$118; //@line 1744 "tcc_bootstrap.c"
 var $119=$1; //@line 1744 "tcc_bootstrap.c"
 var $120=_PEEKC_EOB($119); //@line 1744 "tcc_bootstrap.c"
 $c=$120; //@line 1744 "tcc_bootstrap.c"
 label=31;break; //@line 1745 "tcc_bootstrap.c"
 case 31: 
 label=33;break; //@line 1746 "tcc_bootstrap.c"
 case 32: 
 label=42;break; //@line 1747 "tcc_bootstrap.c"
 case 33: 
 label=34;break;
 case 34: 
 label=25;break; //@line 1749 "tcc_bootstrap.c"
 case 35: 
 label=36;break; //@line 1750 "tcc_bootstrap.c"
 case 36: 
 label=38;break; //@line 1751 "tcc_bootstrap.c"
 case 37: 
 label=41;break; //@line 1752 "tcc_bootstrap.c"
 case 38: 
 label=39;break;
 case 39: 
 label=40;break;
 case 40: 
 label=16;break; //@line 1754 "tcc_bootstrap.c"
 case 41: 
 label=42;break; //@line 1754 "tcc_bootstrap.c"
 case 42: 
 label=49;break; //@line 1756 "tcc_bootstrap.c"
 case 43: 
 var $134=$1; //@line 1757 "tcc_bootstrap.c"
 var $135=HEAP32[((76648)>>2)]; //@line 1757 "tcc_bootstrap.c"
 var $136=(($135)|0); //@line 1757 "tcc_bootstrap.c"
 HEAP32[(($136)>>2)]=$134; //@line 1757 "tcc_bootstrap.c"
 var $137=_handle_eob(); //@line 1758 "tcc_bootstrap.c"
 $c=$137; //@line 1758 "tcc_bootstrap.c"
 var $138=HEAP32[((76648)>>2)]; //@line 1759 "tcc_bootstrap.c"
 var $139=(($138)|0); //@line 1759 "tcc_bootstrap.c"
 var $140=HEAP32[(($139)>>2)]; //@line 1759 "tcc_bootstrap.c"
 $1=$140; //@line 1759 "tcc_bootstrap.c"
 var $141=$c; //@line 1760 "tcc_bootstrap.c"
 var $142=($141|0)==-1; //@line 1760 "tcc_bootstrap.c"
 if($142){label=44;break;}else{label=45;break;} //@line 1760 "tcc_bootstrap.c"
 case 44: 
 _tcc_error(3576,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs; //@line 1761 "tcc_bootstrap.c"
 label=48;break; //@line 1762 "tcc_bootstrap.c"
 case 45: 
 var $145=$c; //@line 1762 "tcc_bootstrap.c"
 var $146=($145|0)==92; //@line 1762 "tcc_bootstrap.c"
 if($146){label=46;break;}else{label=47;break;} //@line 1762 "tcc_bootstrap.c"
 case 46: 
 var $148=$1; //@line 1763 "tcc_bootstrap.c"
 var $149=(($148+1)|0); //@line 1763 "tcc_bootstrap.c"
 $1=$149; //@line 1763 "tcc_bootstrap.c"
 label=47;break; //@line 1764 "tcc_bootstrap.c"
 case 47: 
 label=48;break;
 case 48: 
 label=49;break;
 case 49: 
 label=50;break;
 case 50: 
 label=2;break; //@line 1766 "tcc_bootstrap.c"
 case 51: 
 var $155=$1; //@line 1768 "tcc_bootstrap.c"
 var $156=(($155+1)|0); //@line 1768 "tcc_bootstrap.c"
 $1=$156; //@line 1768 "tcc_bootstrap.c"
 var $157=$1; //@line 1769 "tcc_bootstrap.c"
 STACKTOP=sp;return $157; //@line 1769 "tcc_bootstrap.c"
  default: assert(0, "bad label: " + label);
 }

}


function _expect($msg){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 $1=$msg;
 var $2=$1; //@line 1215 "tcc_bootstrap.c"
 _tcc_error(3496,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$2,tempVarArgs)); STACKTOP=tempVarArgs; //@line 1215 "tcc_bootstrap.c"
 STACKTOP=sp;return; //@line 1216 "tcc_bootstrap.c"
}


function _skip_spaces(){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 label=2;break; //@line 1779 "tcc_bootstrap.c"
 case 2: 
 var $2=HEAP32[((76736)>>2)]; //@line 1779 "tcc_bootstrap.c"
 var $3=((($2)+(1))|0); //@line 1779 "tcc_bootstrap.c"
 var $4=((10736+$3)|0); //@line 1779 "tcc_bootstrap.c"
 var $5=HEAP8[(($4)>>0)]; //@line 1779 "tcc_bootstrap.c"
 var $6=($5&255); //@line 1779 "tcc_bootstrap.c"
 var $7=$6&1; //@line 1779 "tcc_bootstrap.c"
 var $8=($7|0)!=0; //@line 1779 "tcc_bootstrap.c"
 if($8){label=3;break;}else{label=4;break;} //@line 1779 "tcc_bootstrap.c"
 case 3: 
 _minp(); //@line 1780 "tcc_bootstrap.c"
 label=2;break; //@line 1780 "tcc_bootstrap.c"
 case 4: 
 return; //@line 1781 "tcc_bootstrap.c"
  default: assert(0, "bad label: " + label);
 }

}


function _inp(){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=HEAP32[((76648)>>2)]; //@line 1568 "tcc_bootstrap.c"
 var $2=(($1)|0); //@line 1568 "tcc_bootstrap.c"
 var $3=HEAP32[(($2)>>2)]; //@line 1568 "tcc_bootstrap.c"
 var $4=(($3+1)|0); //@line 1568 "tcc_bootstrap.c"
 HEAP32[(($2)>>2)]=$4; //@line 1568 "tcc_bootstrap.c"
 var $5=HEAP8[(($4)>>0)]; //@line 1568 "tcc_bootstrap.c"
 var $6=($5&255); //@line 1568 "tcc_bootstrap.c"
 HEAP32[((76736)>>2)]=$6; //@line 1568 "tcc_bootstrap.c"
 var $7=HEAP32[((76736)>>2)]; //@line 1569 "tcc_bootstrap.c"
 var $8=($7|0)==92; //@line 1569 "tcc_bootstrap.c"
 if($8){label=2;break;}else{label=3;break;} //@line 1569 "tcc_bootstrap.c"
 case 2: 
 var $10=_handle_eob(); //@line 1570 "tcc_bootstrap.c"
 HEAP32[((76736)>>2)]=$10; //@line 1570 "tcc_bootstrap.c"
 label=3;break; //@line 1570 "tcc_bootstrap.c"
 case 3: 
 return; //@line 1571 "tcc_bootstrap.c"
  default: assert(0, "bad label: " + label);
 }

}


function _handle_stray_noerror(){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 label=2;break; //@line 1574 "tcc_bootstrap.c"
 case 2: 
 var $3=HEAP32[((76736)>>2)]; //@line 1574 "tcc_bootstrap.c"
 var $4=($3|0)==92; //@line 1574 "tcc_bootstrap.c"
 if($4){label=3;break;}else{label=13;break;} //@line 1574 "tcc_bootstrap.c"
 case 3: 
 _inp(); //@line 1575 "tcc_bootstrap.c"
 var $6=HEAP32[((76736)>>2)]; //@line 1576 "tcc_bootstrap.c"
 var $7=($6|0)==10; //@line 1576 "tcc_bootstrap.c"
 if($7){label=4;break;}else{label=5;break;} //@line 1576 "tcc_bootstrap.c"
 case 4: 
 var $9=HEAP32[((76648)>>2)]; //@line 1577 "tcc_bootstrap.c"
 var $10=(($9+16)|0); //@line 1577 "tcc_bootstrap.c"
 var $11=HEAP32[(($10)>>2)]; //@line 1577 "tcc_bootstrap.c"
 var $12=((($11)+(1))|0); //@line 1577 "tcc_bootstrap.c"
 HEAP32[(($10)>>2)]=$12; //@line 1577 "tcc_bootstrap.c"
 _inp(); //@line 1578 "tcc_bootstrap.c"
 label=12;break; //@line 1579 "tcc_bootstrap.c"
 case 5: 
 var $14=HEAP32[((76736)>>2)]; //@line 1579 "tcc_bootstrap.c"
 var $15=($14|0)==13; //@line 1579 "tcc_bootstrap.c"
 if($15){label=6;break;}else{label=9;break;} //@line 1579 "tcc_bootstrap.c"
 case 6: 
 _inp(); //@line 1580 "tcc_bootstrap.c"
 var $17=HEAP32[((76736)>>2)]; //@line 1581 "tcc_bootstrap.c"
 var $18=($17|0)!=10; //@line 1581 "tcc_bootstrap.c"
 if($18){label=7;break;}else{label=8;break;} //@line 1581 "tcc_bootstrap.c"
 case 7: 
 label=10;break; //@line 1582 "tcc_bootstrap.c"
 case 8: 
 var $21=HEAP32[((76648)>>2)]; //@line 1583 "tcc_bootstrap.c"
 var $22=(($21+16)|0); //@line 1583 "tcc_bootstrap.c"
 var $23=HEAP32[(($22)>>2)]; //@line 1583 "tcc_bootstrap.c"
 var $24=((($23)+(1))|0); //@line 1583 "tcc_bootstrap.c"
 HEAP32[(($22)>>2)]=$24; //@line 1583 "tcc_bootstrap.c"
 _inp(); //@line 1584 "tcc_bootstrap.c"
 label=11;break; //@line 1585 "tcc_bootstrap.c"
 case 9: 
 label=10;break; //@line 1585 "tcc_bootstrap.c"
 case 10: 
 $1=1; //@line 1587 "tcc_bootstrap.c"
 label=14;break; //@line 1587 "tcc_bootstrap.c"
 case 11: 
 label=12;break;
 case 12: 
 label=2;break; //@line 1589 "tcc_bootstrap.c"
 case 13: 
 $1=0; //@line 1590 "tcc_bootstrap.c"
 label=14;break; //@line 1590 "tcc_bootstrap.c"
 case 14: 
 var $31=$1; //@line 1590 "tcc_bootstrap.c"
 STACKTOP=sp;return $31; //@line 1590 "tcc_bootstrap.c"
  default: assert(0, "bad label: " + label);
 }

}


function _minp(){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 _inp(); //@line 1619 "tcc_bootstrap.c"
 var $1=HEAP32[((76736)>>2)]; //@line 1620 "tcc_bootstrap.c"
 var $2=($1|0)==92; //@line 1620 "tcc_bootstrap.c"
 if($2){label=2;break;}else{label=3;break;} //@line 1620 "tcc_bootstrap.c"
 case 2: 
 _handle_stray(); //@line 1621 "tcc_bootstrap.c"
 label=3;break; //@line 1621 "tcc_bootstrap.c"
 case 3: 
 return; //@line 1622 "tcc_bootstrap.c"
  default: assert(0, "bad label: " + label);
 }

}


function _next(){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $s;
 var $nested_list=sp;
 label=2;break; //@line 3856 "tcc_bootstrap.c"
 case 2: 
 var $2=HEAP32[((10608)>>2)]; //@line 3858 "tcc_bootstrap.c"
 var $3=$2&16; //@line 3858 "tcc_bootstrap.c"
 var $4=($3|0)!=0; //@line 3858 "tcc_bootstrap.c"
 if($4){label=3;break;}else{label=4;break;} //@line 3858 "tcc_bootstrap.c"
 case 3: 
 _next_nomacro_spc(); //@line 3859 "tcc_bootstrap.c"
 label=5;break; //@line 3859 "tcc_bootstrap.c"
 case 4: 
 _next_nomacro(); //@line 3861 "tcc_bootstrap.c"
 label=5;break;
 case 5: 
 var $8=HEAP32[((10680)>>2)]; //@line 3862 "tcc_bootstrap.c"
 var $9=($8|0)!=0; //@line 3862 "tcc_bootstrap.c"
 if($9){label=6;break;}else{label=13;break;} //@line 3862 "tcc_bootstrap.c"
 case 6: 
 var $11=HEAP32[((10472)>>2)]; //@line 3863 "tcc_bootstrap.c"
 var $12=($11|0)==204; //@line 3863 "tcc_bootstrap.c"
 if($12){label=8;break;}else{label=7;break;} //@line 3863 "tcc_bootstrap.c"
 case 7: 
 var $14=HEAP32[((10472)>>2)]; //@line 3863 "tcc_bootstrap.c"
 var $15=($14|0)==203; //@line 3863 "tcc_bootstrap.c"
 if($15){label=8;break;}else{label=9;break;} //@line 3863 "tcc_bootstrap.c"
 case 8: 
 label=2;break; //@line 3864 "tcc_bootstrap.c"
 case 9: 
 var $18=HEAP32[((10472)>>2)]; //@line 3865 "tcc_bootstrap.c"
 var $19=($18|0)==0; //@line 3865 "tcc_bootstrap.c"
 if($19){label=10;break;}else{label=11;break;} //@line 3865 "tcc_bootstrap.c"
 case 10: 
 _end_macro(); //@line 3866 "tcc_bootstrap.c"
 label=2;break; //@line 3867 "tcc_bootstrap.c"
 case 11: 
 label=12;break;
 case 12: 
 label=19;break; //@line 3869 "tcc_bootstrap.c"
 case 13: 
 var $24=HEAP32[((10472)>>2)]; //@line 3869 "tcc_bootstrap.c"
 var $25=($24|0)>=256; //@line 3869 "tcc_bootstrap.c"
 if($25){label=14;break;}else{label=18;break;} //@line 3869 "tcc_bootstrap.c"
 case 14: 
 var $27=HEAP32[((10608)>>2)]; //@line 3869 "tcc_bootstrap.c"
 var $28=$27&1; //@line 3869 "tcc_bootstrap.c"
 var $29=($28|0)!=0; //@line 3869 "tcc_bootstrap.c"
 if($29){label=15;break;}else{label=18;break;} //@line 3869 "tcc_bootstrap.c"
 case 15: 
 var $31=HEAP32[((10472)>>2)]; //@line 3871 "tcc_bootstrap.c"
 var $32=_define_find($31); //@line 3871 "tcc_bootstrap.c"
 $s=$32; //@line 3871 "tcc_bootstrap.c"
 var $33=$s; //@line 3872 "tcc_bootstrap.c"
 var $34=($33|0)!=0; //@line 3872 "tcc_bootstrap.c"
 if($34){label=16;break;}else{label=17;break;} //@line 3872 "tcc_bootstrap.c"
 case 16: 
 HEAP32[(($nested_list)>>2)]=0; //@line 3873 "tcc_bootstrap.c"
 HEAP32[((9348)>>2)]=0; //@line 3874 "tcc_bootstrap.c"
 var $36=$s; //@line 3875 "tcc_bootstrap.c"
 var $37=_macro_subst_tok(9344,$nested_list,$36); //@line 3875 "tcc_bootstrap.c"
 _tok_str_add(9344,0); //@line 3876 "tcc_bootstrap.c"
 _begin_macro(9344,2); //@line 3877 "tcc_bootstrap.c"
 label=2;break; //@line 3878 "tcc_bootstrap.c"
 case 17: 
 label=18;break; //@line 3880 "tcc_bootstrap.c"
 case 18: 
 label=19;break;
 case 19: 
 var $41=HEAP32[((10472)>>2)]; //@line 3881 "tcc_bootstrap.c"
 var $42=($41|0)==190; //@line 3881 "tcc_bootstrap.c"
 if($42){label=20;break;}else{label=23;break;} //@line 3881 "tcc_bootstrap.c"
 case 20: 
 var $44=HEAP32[((10608)>>2)]; //@line 3882 "tcc_bootstrap.c"
 var $45=$44&2; //@line 3882 "tcc_bootstrap.c"
 var $46=($45|0)!=0; //@line 3882 "tcc_bootstrap.c"
 if($46){label=21;break;}else{label=22;break;} //@line 3882 "tcc_bootstrap.c"
 case 21: 
 var $48=HEAP32[((10444)>>2)]; //@line 3883 "tcc_bootstrap.c"
 _parse_number($48); //@line 3883 "tcc_bootstrap.c"
 label=22;break; //@line 3883 "tcc_bootstrap.c"
 case 22: 
 label=28;break; //@line 3884 "tcc_bootstrap.c"
 case 23: 
 var $51=HEAP32[((10472)>>2)]; //@line 3884 "tcc_bootstrap.c"
 var $52=($51|0)==191; //@line 3884 "tcc_bootstrap.c"
 if($52){label=24;break;}else{label=27;break;} //@line 3884 "tcc_bootstrap.c"
 case 24: 
 var $54=HEAP32[((10608)>>2)]; //@line 3885 "tcc_bootstrap.c"
 var $55=$54&64; //@line 3885 "tcc_bootstrap.c"
 var $56=($55|0)!=0; //@line 3885 "tcc_bootstrap.c"
 if($56){label=25;break;}else{label=26;break;} //@line 3885 "tcc_bootstrap.c"
 case 25: 
 var $58=HEAP32[((10444)>>2)]; //@line 3886 "tcc_bootstrap.c"
 var $59=HEAP32[((10440)>>2)]; //@line 3886 "tcc_bootstrap.c"
 var $60=((($59)-(1))|0); //@line 3886 "tcc_bootstrap.c"
 _parse_string($58,$60); //@line 3886 "tcc_bootstrap.c"
 label=26;break; //@line 3886 "tcc_bootstrap.c"
 case 26: 
 label=27;break; //@line 3887 "tcc_bootstrap.c"
 case 27: 
 label=28;break;
 case 28: 
 STACKTOP=sp;return; //@line 3888 "tcc_bootstrap.c"
  default: assert(0, "bad label: " + label);
 }

}


function _pstrcat($buf,$buf_size,$s){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $len;
 $1=$buf;
 $2=$buf_size;
 $3=$s;
 var $4=$1; //@line 10687 "tcc_bootstrap.c"
 var $5=_strlen($4); //@line 10687 "tcc_bootstrap.c"
 $len=$5; //@line 10687 "tcc_bootstrap.c"
 var $6=$len; //@line 10688 "tcc_bootstrap.c"
 var $7=$2; //@line 10688 "tcc_bootstrap.c"
 var $8=($6|0)<($7|0); //@line 10688 "tcc_bootstrap.c"
 if($8){label=2;break;}else{label=3;break;} //@line 10688 "tcc_bootstrap.c"
 case 2: 
 var $10=$1; //@line 10689 "tcc_bootstrap.c"
 var $11=$len; //@line 10689 "tcc_bootstrap.c"
 var $12=(($10+$11)|0); //@line 10689 "tcc_bootstrap.c"
 var $13=$2; //@line 10689 "tcc_bootstrap.c"
 var $14=$len; //@line 10689 "tcc_bootstrap.c"
 var $15=((($13)-($14))|0); //@line 10689 "tcc_bootstrap.c"
 var $16=$3; //@line 10689 "tcc_bootstrap.c"
 var $17=_pstrcpy($12,$15,$16); //@line 10689 "tcc_bootstrap.c"
 label=3;break; //@line 10689 "tcc_bootstrap.c"
 case 3: 
 var $19=$1; //@line 10690 "tcc_bootstrap.c"
 STACKTOP=sp;return $19; //@line 10690 "tcc_bootstrap.c"
  default: assert(0, "bad label: " + label);
 }

}


function _pstrncpy($out,$in,$num){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 var $2;
 var $3;
 $1=$out;
 $2=$in;
 $3=$num;
 var $4=$1; //@line 10694 "tcc_bootstrap.c"
 var $5=$2; //@line 10694 "tcc_bootstrap.c"
 var $6=$3; //@line 10694 "tcc_bootstrap.c"
 assert($6 % 1 === 0);(_memcpy($4, $5, $6)|0); //@line 10694 "tcc_bootstrap.c"
 var $7=$3; //@line 10695 "tcc_bootstrap.c"
 var $8=$1; //@line 10695 "tcc_bootstrap.c"
 var $9=(($8+$7)|0); //@line 10695 "tcc_bootstrap.c"
 HEAP8[(($9)>>0)]=0; //@line 10695 "tcc_bootstrap.c"
 var $10=$1; //@line 10696 "tcc_bootstrap.c"
 STACKTOP=sp;return $10; //@line 10696 "tcc_bootstrap.c"
}


function _pstrcpy($buf,$buf_size,$s){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $q;
 var $q_end;
 var $c;
 $1=$buf;
 $2=$buf_size;
 $3=$s;
 var $4=$2; //@line 10671 "tcc_bootstrap.c"
 var $5=($4|0)>0; //@line 10671 "tcc_bootstrap.c"
 if($5){label=2;break;}else{label=8;break;} //@line 10671 "tcc_bootstrap.c"
 case 2: 
 var $7=$1; //@line 10672 "tcc_bootstrap.c"
 $q=$7; //@line 10672 "tcc_bootstrap.c"
 var $8=$1; //@line 10673 "tcc_bootstrap.c"
 var $9=$2; //@line 10673 "tcc_bootstrap.c"
 var $10=(($8+$9)|0); //@line 10673 "tcc_bootstrap.c"
 var $11=((($10)-(1))|0); //@line 10673 "tcc_bootstrap.c"
 $q_end=$11; //@line 10673 "tcc_bootstrap.c"
 label=3;break; //@line 10674 "tcc_bootstrap.c"
 case 3: 
 var $13=$q; //@line 10674 "tcc_bootstrap.c"
 var $14=$q_end; //@line 10674 "tcc_bootstrap.c"
 var $15=($13>>>0)<($14>>>0); //@line 10674 "tcc_bootstrap.c"
 if($15){label=4;break;}else{label=7;break;} //@line 10674 "tcc_bootstrap.c"
 case 4: 
 var $17=$3; //@line 10675 "tcc_bootstrap.c"
 var $18=(($17+1)|0); //@line 10675 "tcc_bootstrap.c"
 $3=$18; //@line 10675 "tcc_bootstrap.c"
 var $19=HEAP8[(($17)>>0)]; //@line 10675 "tcc_bootstrap.c"
 var $20=(($19<<24)>>24); //@line 10675 "tcc_bootstrap.c"
 $c=$20; //@line 10675 "tcc_bootstrap.c"
 var $21=$c; //@line 10676 "tcc_bootstrap.c"
 var $22=($21|0)==0; //@line 10676 "tcc_bootstrap.c"
 if($22){label=5;break;}else{label=6;break;} //@line 10676 "tcc_bootstrap.c"
 case 5: 
 label=7;break; //@line 10677 "tcc_bootstrap.c"
 case 6: 
 var $25=$c; //@line 10678 "tcc_bootstrap.c"
 var $26=(($25)&255); //@line 10678 "tcc_bootstrap.c"
 var $27=$q; //@line 10678 "tcc_bootstrap.c"
 var $28=(($27+1)|0); //@line 10678 "tcc_bootstrap.c"
 $q=$28; //@line 10678 "tcc_bootstrap.c"
 HEAP8[(($27)>>0)]=$26; //@line 10678 "tcc_bootstrap.c"
 label=3;break; //@line 10679 "tcc_bootstrap.c"
 case 7: 
 var $30=$q; //@line 10680 "tcc_bootstrap.c"
 HEAP8[(($30)>>0)]=0; //@line 10680 "tcc_bootstrap.c"
 label=8;break; //@line 10681 "tcc_bootstrap.c"
 case 8: 
 var $32=$1; //@line 10682 "tcc_bootstrap.c"
 STACKTOP=sp;return $32; //@line 10682 "tcc_bootstrap.c"
  default: assert(0, "bad label: " + label);
 }

}


function _expr_preprocess(){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $c;
 var $t;
 var $str;
 var $1=_tok_str_alloc(); //@line 2220 "tcc_bootstrap.c"
 $str=$1; //@line 2220 "tcc_bootstrap.c"
 HEAP32[((10576)>>2)]=1; //@line 2221 "tcc_bootstrap.c"
 label=2;break; //@line 2222 "tcc_bootstrap.c"
 case 2: 
 var $3=HEAP32[((10472)>>2)]; //@line 2222 "tcc_bootstrap.c"
 var $4=($3|0)!=10; //@line 2222 "tcc_bootstrap.c"
 if($4){label=3;break;}else{var $9=0;label=4;break;} //@line 2222 "tcc_bootstrap.c"
 case 3: 
 var $6=HEAP32[((10472)>>2)]; //@line 2222 "tcc_bootstrap.c"
 var $7=($6|0)!=-1; //@line 2222 "tcc_bootstrap.c"
 var $9=$7;label=4;break;
 case 4: 
 var $9;
 if($9){label=5;break;}else{label=19;break;}
 case 5: 
 _next(); //@line 2223 "tcc_bootstrap.c"
 var $11=HEAP32[((10472)>>2)]; //@line 2224 "tcc_bootstrap.c"
 var $12=($11|0)==321; //@line 2224 "tcc_bootstrap.c"
 if($12){label=6;break;}else{label=15;break;} //@line 2224 "tcc_bootstrap.c"
 case 6: 
 _next_nomacro(); //@line 2225 "tcc_bootstrap.c"
 var $14=HEAP32[((10472)>>2)]; //@line 2226 "tcc_bootstrap.c"
 $t=$14; //@line 2226 "tcc_bootstrap.c"
 var $15=$t; //@line 2227 "tcc_bootstrap.c"
 var $16=($15|0)==40; //@line 2227 "tcc_bootstrap.c"
 if($16){label=7;break;}else{label=8;break;} //@line 2227 "tcc_bootstrap.c"
 case 7: 
 _next_nomacro(); //@line 2228 "tcc_bootstrap.c"
 label=8;break; //@line 2228 "tcc_bootstrap.c"
 case 8: 
 var $19=HEAP32[((10472)>>2)]; //@line 2229 "tcc_bootstrap.c"
 var $20=($19|0)<256; //@line 2229 "tcc_bootstrap.c"
 if($20){label=9;break;}else{label=10;break;} //@line 2229 "tcc_bootstrap.c"
 case 9: 
 _expect(3008); //@line 2230 "tcc_bootstrap.c"
 label=10;break; //@line 2230 "tcc_bootstrap.c"
 case 10: 
 var $23=HEAP32[((10472)>>2)]; //@line 2231 "tcc_bootstrap.c"
 var $24=_define_find($23); //@line 2231 "tcc_bootstrap.c"
 var $25=($24|0)!=0; //@line 2231 "tcc_bootstrap.c"
 var $26=($25&1); //@line 2231 "tcc_bootstrap.c"
 $c=$26; //@line 2231 "tcc_bootstrap.c"
 var $27=$t; //@line 2232 "tcc_bootstrap.c"
 var $28=($27|0)==40; //@line 2232 "tcc_bootstrap.c"
 if($28){label=11;break;}else{label=14;break;} //@line 2232 "tcc_bootstrap.c"
 case 11: 
 _next_nomacro(); //@line 2233 "tcc_bootstrap.c"
 var $30=HEAP32[((10472)>>2)]; //@line 2234 "tcc_bootstrap.c"
 var $31=($30|0)!=41; //@line 2234 "tcc_bootstrap.c"
 if($31){label=12;break;}else{label=13;break;} //@line 2234 "tcc_bootstrap.c"
 case 12: 
 _expect(3000); //@line 2235 "tcc_bootstrap.c"
 label=13;break; //@line 2235 "tcc_bootstrap.c"
 case 13: 
 label=14;break; //@line 2236 "tcc_bootstrap.c"
 case 14: 
 HEAP32[((10472)>>2)]=181; //@line 2237 "tcc_bootstrap.c"
 var $35=$c; //@line 2238 "tcc_bootstrap.c"
 var $36$0=$35;
 var $36$1=((((($35|0)<0))|0)?-1:0);
 var $$etemp$0=10440;
 var $st$1$0=(($$etemp$0)|0);
 HEAP32[(($st$1$0)>>2)]=$36$0;
 var $st$2$1=(($$etemp$0+4)|0);
 HEAP32[(($st$2$1)>>2)]=$36$1;
 label=18;break; //@line 2239 "tcc_bootstrap.c"
 case 15: 
 var $38=HEAP32[((10472)>>2)]; //@line 2239 "tcc_bootstrap.c"
 var $39=($38|0)>=256; //@line 2239 "tcc_bootstrap.c"
 if($39){label=16;break;}else{label=17;break;} //@line 2239 "tcc_bootstrap.c"
 case 16: 
 HEAP32[((10472)>>2)]=181; //@line 2240 "tcc_bootstrap.c"
 var $$etemp$4=10440;
 var $$etemp$3$0=0;
 var $$etemp$3$1=0;
 var $st$5$0=(($$etemp$4)|0);
 HEAP32[(($st$5$0)>>2)]=$$etemp$3$0;
 var $st$6$1=(($$etemp$4+4)|0);
 HEAP32[(($st$6$1)>>2)]=$$etemp$3$1;
 label=17;break; //@line 2242 "tcc_bootstrap.c"
 case 17: 
 label=18;break;
 case 18: 
 var $43=$str; //@line 2243 "tcc_bootstrap.c"
 _tok_str_add_tok($43); //@line 2243 "tcc_bootstrap.c"
 label=2;break; //@line 2244 "tcc_bootstrap.c"
 case 19: 
 HEAP32[((10576)>>2)]=0; //@line 2245 "tcc_bootstrap.c"
 var $45=$str; //@line 2246 "tcc_bootstrap.c"
 _tok_str_add($45,-1); //@line 2246 "tcc_bootstrap.c"
 var $46=$str; //@line 2247 "tcc_bootstrap.c"
 _tok_str_add($46,0); //@line 2247 "tcc_bootstrap.c"
 var $47=$str; //@line 2248 "tcc_bootstrap.c"
 _begin_macro($47,1); //@line 2248 "tcc_bootstrap.c"
 _next(); //@line 2249 "tcc_bootstrap.c"
 var $48=_expr_const(); //@line 2250 "tcc_bootstrap.c"
 $c=$48; //@line 2250 "tcc_bootstrap.c"
 _end_macro(); //@line 2251 "tcc_bootstrap.c"
 var $49=$c; //@line 2252 "tcc_bootstrap.c"
 var $50=($49|0)!=0; //@line 2252 "tcc_bootstrap.c"
 var $51=($50&1); //@line 2252 "tcc_bootstrap.c"
 STACKTOP=sp;return $51; //@line 2252 "tcc_bootstrap.c"
  default: assert(0, "bad label: " + label);
 }

}


function _preprocess_skip(){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $a;
 var $start_of_line;
 var $c;
 var $in_warn_or_error;
 var $p;
 var $1=HEAP32[((76648)>>2)]; //@line 1855 "tcc_bootstrap.c"
 var $2=(($1)|0); //@line 1855 "tcc_bootstrap.c"
 var $3=HEAP32[(($2)>>2)]; //@line 1855 "tcc_bootstrap.c"
 $p=$3; //@line 1855 "tcc_bootstrap.c"
 $a=0; //@line 1856 "tcc_bootstrap.c"
 label=2;break; //@line 1856 "tcc_bootstrap.c"
 case 2: 
 $start_of_line=1; //@line 1858 "tcc_bootstrap.c"
 $in_warn_or_error=0; //@line 1859 "tcc_bootstrap.c"
 label=3;break; //@line 1860 "tcc_bootstrap.c"
 case 3: 
 label=4;break; //@line 1860 "tcc_bootstrap.c"
 case 4: 
 var $7=$p; //@line 1862 "tcc_bootstrap.c"
 var $8=HEAP8[(($7)>>0)]; //@line 1862 "tcc_bootstrap.c"
 var $9=($8&255); //@line 1862 "tcc_bootstrap.c"
 $c=$9; //@line 1862 "tcc_bootstrap.c"
 var $10=$c; //@line 1863 "tcc_bootstrap.c"
 switch(($10|0)){case 34:case 39:{ label=13;break;}case 47:{ label=16;break;}case 35:{ label=24;break;}case 32:case 9:case 12:case 11:case 13:{ label=5;break;}case 10:{ label=6;break;}case 92:{ label=7;break;}default:{label=47;break;}}break;
 case 5: 
 var $12=$p; //@line 1869 "tcc_bootstrap.c"
 var $13=(($12+1)|0); //@line 1869 "tcc_bootstrap.c"
 $p=$13; //@line 1869 "tcc_bootstrap.c"
 label=4;break; //@line 1870 "tcc_bootstrap.c"
 case 6: 
 var $15=HEAP32[((76648)>>2)]; //@line 1872 "tcc_bootstrap.c"
 var $16=(($15+16)|0); //@line 1872 "tcc_bootstrap.c"
 var $17=HEAP32[(($16)>>2)]; //@line 1872 "tcc_bootstrap.c"
 var $18=((($17)+(1))|0); //@line 1872 "tcc_bootstrap.c"
 HEAP32[(($16)>>2)]=$18; //@line 1872 "tcc_bootstrap.c"
 var $19=$p; //@line 1873 "tcc_bootstrap.c"
 var $20=(($19+1)|0); //@line 1873 "tcc_bootstrap.c"
 $p=$20; //@line 1873 "tcc_bootstrap.c"
 label=2;break; //@line 1874 "tcc_bootstrap.c"
 case 7: 
 var $22=$p; //@line 1876 "tcc_bootstrap.c"
 var $23=HEAP32[((76648)>>2)]; //@line 1876 "tcc_bootstrap.c"
 var $24=(($23)|0); //@line 1876 "tcc_bootstrap.c"
 HEAP32[(($24)>>2)]=$22; //@line 1876 "tcc_bootstrap.c"
 var $25=_handle_eob(); //@line 1877 "tcc_bootstrap.c"
 $c=$25; //@line 1877 "tcc_bootstrap.c"
 var $26=$c; //@line 1878 "tcc_bootstrap.c"
 var $27=($26|0)==-1; //@line 1878 "tcc_bootstrap.c"
 if($27){label=8;break;}else{label=9;break;} //@line 1878 "tcc_bootstrap.c"
 case 8: 
 _expect(3024); //@line 1879 "tcc_bootstrap.c"
 label=12;break; //@line 1880 "tcc_bootstrap.c"
 case 9: 
 var $30=$c; //@line 1880 "tcc_bootstrap.c"
 var $31=($30|0)==92; //@line 1880 "tcc_bootstrap.c"
 if($31){label=10;break;}else{label=11;break;} //@line 1880 "tcc_bootstrap.c"
 case 10: 
 var $33=HEAP32[((76648)>>2)]; //@line 1881 "tcc_bootstrap.c"
 var $34=(($33)|0); //@line 1881 "tcc_bootstrap.c"
 var $35=HEAP32[(($34)>>2)]; //@line 1881 "tcc_bootstrap.c"
 var $36=(($35)|0); //@line 1881 "tcc_bootstrap.c"
 var $37=HEAP8[(($36)>>0)]; //@line 1881 "tcc_bootstrap.c"
 var $38=($37&255); //@line 1881 "tcc_bootstrap.c"
 HEAP32[((76736)>>2)]=$38; //@line 1881 "tcc_bootstrap.c"
 var $39=_handle_stray_noerror(); //@line 1882 "tcc_bootstrap.c"
 label=11;break; //@line 1883 "tcc_bootstrap.c"
 case 11: 
 label=12;break;
 case 12: 
 var $42=HEAP32[((76648)>>2)]; //@line 1884 "tcc_bootstrap.c"
 var $43=(($42)|0); //@line 1884 "tcc_bootstrap.c"
 var $44=HEAP32[(($43)>>2)]; //@line 1884 "tcc_bootstrap.c"
 $p=$44; //@line 1884 "tcc_bootstrap.c"
 label=4;break; //@line 1885 "tcc_bootstrap.c"
 case 13: 
 var $46=$in_warn_or_error; //@line 1888 "tcc_bootstrap.c"
 var $47=($46|0)!=0; //@line 1888 "tcc_bootstrap.c"
 if($47){label=14;break;}else{label=15;break;} //@line 1888 "tcc_bootstrap.c"
 case 14: 
 label=46;break; //@line 1889 "tcc_bootstrap.c"
 case 15: 
 var $50=$p; //@line 1890 "tcc_bootstrap.c"
 var $51=$c; //@line 1890 "tcc_bootstrap.c"
 var $52=_parse_pp_string($50,$51,0); //@line 1890 "tcc_bootstrap.c"
 $p=$52; //@line 1890 "tcc_bootstrap.c"
 label=48;break; //@line 1891 "tcc_bootstrap.c"
 case 16: 
 var $54=$in_warn_or_error; //@line 1893 "tcc_bootstrap.c"
 var $55=($54|0)!=0; //@line 1893 "tcc_bootstrap.c"
 if($55){label=17;break;}else{label=18;break;} //@line 1893 "tcc_bootstrap.c"
 case 17: 
 label=46;break; //@line 1894 "tcc_bootstrap.c"
 case 18: 
 var $58=$p; //@line 1895 "tcc_bootstrap.c"
 var $59=HEAP32[((76648)>>2)]; //@line 1895 "tcc_bootstrap.c"
 var $60=(($59)|0); //@line 1895 "tcc_bootstrap.c"
 HEAP32[(($60)>>2)]=$58; //@line 1895 "tcc_bootstrap.c"
 var $61=$p; //@line 1896 "tcc_bootstrap.c"
 var $62=HEAP8[(($61)>>0)]; //@line 1896 "tcc_bootstrap.c"
 var $63=($62&255); //@line 1896 "tcc_bootstrap.c"
 HEAP32[((76736)>>2)]=$63; //@line 1896 "tcc_bootstrap.c"
 _minp(); //@line 1897 "tcc_bootstrap.c"
 var $64=HEAP32[((76648)>>2)]; //@line 1898 "tcc_bootstrap.c"
 var $65=(($64)|0); //@line 1898 "tcc_bootstrap.c"
 var $66=HEAP32[(($65)>>2)]; //@line 1898 "tcc_bootstrap.c"
 $p=$66; //@line 1898 "tcc_bootstrap.c"
 var $67=HEAP32[((76736)>>2)]; //@line 1899 "tcc_bootstrap.c"
 var $68=($67|0)==42; //@line 1899 "tcc_bootstrap.c"
 if($68){label=19;break;}else{label=20;break;} //@line 1899 "tcc_bootstrap.c"
 case 19: 
 var $70=$p; //@line 1900 "tcc_bootstrap.c"
 var $71=_parse_comment($70); //@line 1900 "tcc_bootstrap.c"
 $p=$71; //@line 1900 "tcc_bootstrap.c"
 label=23;break; //@line 1901 "tcc_bootstrap.c"
 case 20: 
 var $73=HEAP32[((76736)>>2)]; //@line 1901 "tcc_bootstrap.c"
 var $74=($73|0)==47; //@line 1901 "tcc_bootstrap.c"
 if($74){label=21;break;}else{label=22;break;} //@line 1901 "tcc_bootstrap.c"
 case 21: 
 var $76=$p; //@line 1902 "tcc_bootstrap.c"
 var $77=_parse_line_comment($76); //@line 1902 "tcc_bootstrap.c"
 $p=$77; //@line 1902 "tcc_bootstrap.c"
 label=22;break; //@line 1903 "tcc_bootstrap.c"
 case 22: 
 label=23;break;
 case 23: 
 label=48;break; //@line 1904 "tcc_bootstrap.c"
 case 24: 
 var $81=$p; //@line 1906 "tcc_bootstrap.c"
 var $82=(($81+1)|0); //@line 1906 "tcc_bootstrap.c"
 $p=$82; //@line 1906 "tcc_bootstrap.c"
 var $83=$start_of_line; //@line 1907 "tcc_bootstrap.c"
 var $84=($83|0)!=0; //@line 1907 "tcc_bootstrap.c"
 if($84){label=25;break;}else{label=45;break;} //@line 1907 "tcc_bootstrap.c"
 case 25: 
 var $86=$p; //@line 1908 "tcc_bootstrap.c"
 var $87=HEAP32[((76648)>>2)]; //@line 1908 "tcc_bootstrap.c"
 var $88=(($87)|0); //@line 1908 "tcc_bootstrap.c"
 HEAP32[(($88)>>2)]=$86; //@line 1908 "tcc_bootstrap.c"
 _next_nomacro(); //@line 1909 "tcc_bootstrap.c"
 var $89=HEAP32[((76648)>>2)]; //@line 1910 "tcc_bootstrap.c"
 var $90=(($89)|0); //@line 1910 "tcc_bootstrap.c"
 var $91=HEAP32[(($90)>>2)]; //@line 1910 "tcc_bootstrap.c"
 $p=$91; //@line 1910 "tcc_bootstrap.c"
 var $92=$a; //@line 1911 "tcc_bootstrap.c"
 var $93=($92|0)==0; //@line 1911 "tcc_bootstrap.c"
 if($93){label=26;break;}else{label=30;break;} //@line 1911 "tcc_bootstrap.c"
 case 26: 
 var $95=HEAP32[((10472)>>2)]; //@line 1911 "tcc_bootstrap.c"
 var $96=($95|0)==260; //@line 1911 "tcc_bootstrap.c"
 if($96){label=29;break;}else{label=27;break;} //@line 1911 "tcc_bootstrap.c"
 case 27: 
 var $98=HEAP32[((10472)>>2)]; //@line 1911 "tcc_bootstrap.c"
 var $99=($98|0)==319; //@line 1911 "tcc_bootstrap.c"
 if($99){label=29;break;}else{label=28;break;} //@line 1911 "tcc_bootstrap.c"
 case 28: 
 var $101=HEAP32[((10472)>>2)]; //@line 1911 "tcc_bootstrap.c"
 var $102=($101|0)==320; //@line 1911 "tcc_bootstrap.c"
 if($102){label=29;break;}else{label=30;break;} //@line 1911 "tcc_bootstrap.c"
 case 29: 
 label=49;break; //@line 1913 "tcc_bootstrap.c"
 case 30: 
 var $105=HEAP32[((10472)>>2)]; //@line 1914 "tcc_bootstrap.c"
 var $106=($105|0)==259; //@line 1914 "tcc_bootstrap.c"
 if($106){label=33;break;}else{label=31;break;} //@line 1914 "tcc_bootstrap.c"
 case 31: 
 var $108=HEAP32[((10472)>>2)]; //@line 1914 "tcc_bootstrap.c"
 var $109=($108|0)==317; //@line 1914 "tcc_bootstrap.c"
 if($109){label=33;break;}else{label=32;break;} //@line 1914 "tcc_bootstrap.c"
 case 32: 
 var $111=HEAP32[((10472)>>2)]; //@line 1914 "tcc_bootstrap.c"
 var $112=($111|0)==318; //@line 1914 "tcc_bootstrap.c"
 if($112){label=33;break;}else{label=34;break;} //@line 1914 "tcc_bootstrap.c"
 case 33: 
 var $114=$a; //@line 1915 "tcc_bootstrap.c"
 var $115=((($114)+(1))|0); //@line 1915 "tcc_bootstrap.c"
 $a=$115; //@line 1915 "tcc_bootstrap.c"
 label=44;break; //@line 1915 "tcc_bootstrap.c"
 case 34: 
 var $117=HEAP32[((10472)>>2)]; //@line 1916 "tcc_bootstrap.c"
 var $118=($117|0)==320; //@line 1916 "tcc_bootstrap.c"
 if($118){label=35;break;}else{label=36;break;} //@line 1916 "tcc_bootstrap.c"
 case 35: 
 var $120=$a; //@line 1917 "tcc_bootstrap.c"
 var $121=((($120)-(1))|0); //@line 1917 "tcc_bootstrap.c"
 $a=$121; //@line 1917 "tcc_bootstrap.c"
 label=43;break; //@line 1917 "tcc_bootstrap.c"
 case 36: 
 var $123=HEAP32[((10472)>>2)]; //@line 1918 "tcc_bootstrap.c"
 var $124=($123|0)==323; //@line 1918 "tcc_bootstrap.c"
 if($124){label=38;break;}else{label=37;break;} //@line 1918 "tcc_bootstrap.c"
 case 37: 
 var $126=HEAP32[((10472)>>2)]; //@line 1918 "tcc_bootstrap.c"
 var $127=($126|0)==324; //@line 1918 "tcc_bootstrap.c"
 if($127){label=38;break;}else{label=39;break;} //@line 1918 "tcc_bootstrap.c"
 case 38: 
 $in_warn_or_error=1; //@line 1919 "tcc_bootstrap.c"
 label=42;break; //@line 1919 "tcc_bootstrap.c"
 case 39: 
 var $130=HEAP32[((10472)>>2)]; //@line 1920 "tcc_bootstrap.c"
 var $131=($130|0)==10; //@line 1920 "tcc_bootstrap.c"
 if($131){label=40;break;}else{label=41;break;} //@line 1920 "tcc_bootstrap.c"
 case 40: 
 label=2;break; //@line 1921 "tcc_bootstrap.c"
 case 41: 
 label=42;break;
 case 42: 
 label=43;break;
 case 43: 
 label=44;break;
 case 44: 
 label=45;break; //@line 1922 "tcc_bootstrap.c"
 case 45: 
 label=48;break; //@line 1922 "tcc_bootstrap.c"
 case 46: 
 label=47;break; //@line 1922 "tcc_bootstrap.c"
 case 47: 
 var $140=$p; //@line 1925 "tcc_bootstrap.c"
 var $141=(($140+1)|0); //@line 1925 "tcc_bootstrap.c"
 $p=$141; //@line 1925 "tcc_bootstrap.c"
 label=48;break; //@line 1926 "tcc_bootstrap.c"
 case 48: 
 $start_of_line=0; //@line 1928 "tcc_bootstrap.c"
 label=3;break; //@line 1929 "tcc_bootstrap.c"
 case 49: 
 var $144=$p; //@line 1931 "tcc_bootstrap.c"
 var $145=HEAP32[((76648)>>2)]; //@line 1931 "tcc_bootstrap.c"
 var $146=(($145)|0); //@line 1931 "tcc_bootstrap.c"
 HEAP32[(($146)>>2)]=$144; //@line 1931 "tcc_bootstrap.c"
 STACKTOP=sp;return; //@line 1932 "tcc_bootstrap.c"
  default: assert(0, "bad label: " + label);
 }

}


function _tok_str_alloc(){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $str;
 var $1=_tal_realloc_impl(9384,0,36); //@line 1942 "tcc_bootstrap.c"
 var $2=$1; //@line 1942 "tcc_bootstrap.c"
 $str=$2; //@line 1942 "tcc_bootstrap.c"
 var $3=$str; //@line 1943 "tcc_bootstrap.c"
 _tok_str_new($3); //@line 1943 "tcc_bootstrap.c"
 var $4=$str; //@line 1944 "tcc_bootstrap.c"
 STACKTOP=sp;return $4; //@line 1944 "tcc_bootstrap.c"
}


function _tok_str_add_tok($s){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $cval=sp;
 $1=$s;
 var $2=HEAP32[((76648)>>2)]; //@line 2061 "tcc_bootstrap.c"
 var $3=(($2+16)|0); //@line 2061 "tcc_bootstrap.c"
 var $4=HEAP32[(($3)>>2)]; //@line 2061 "tcc_bootstrap.c"
 var $5=$1; //@line 2061 "tcc_bootstrap.c"
 var $6=(($5+16)|0); //@line 2061 "tcc_bootstrap.c"
 var $7=HEAP32[(($6)>>2)]; //@line 2061 "tcc_bootstrap.c"
 var $8=($4|0)!=($7|0); //@line 2061 "tcc_bootstrap.c"
 if($8){label=2;break;}else{label=3;break;} //@line 2061 "tcc_bootstrap.c"
 case 2: 
 var $10=HEAP32[((76648)>>2)]; //@line 2062 "tcc_bootstrap.c"
 var $11=(($10+16)|0); //@line 2062 "tcc_bootstrap.c"
 var $12=HEAP32[(($11)>>2)]; //@line 2062 "tcc_bootstrap.c"
 var $13=$1; //@line 2062 "tcc_bootstrap.c"
 var $14=(($13+16)|0); //@line 2062 "tcc_bootstrap.c"
 HEAP32[(($14)>>2)]=$12; //@line 2062 "tcc_bootstrap.c"
 var $15=$1; //@line 2063 "tcc_bootstrap.c"
 var $16=(($15+16)|0); //@line 2063 "tcc_bootstrap.c"
 var $17=HEAP32[(($16)>>2)]; //@line 2063 "tcc_bootstrap.c"
 var $18$0=$17;
 var $18$1=((((($17|0)<0))|0)?-1:0);
 var $19=$cval; //@line 2063 "tcc_bootstrap.c"
 var $st$0$0=(($19)|0);
 HEAP32[(($st$0$0)>>2)]=$18$0;
 var $st$1$1=(($19+4)|0);
 HEAP32[(($st$1$1)>>2)]=$18$1;
 var $20=$1; //@line 2064 "tcc_bootstrap.c"
 _tok_str_add2($20,192,$cval); //@line 2064 "tcc_bootstrap.c"
 label=3;break; //@line 2065 "tcc_bootstrap.c"
 case 3: 
 var $22=$1; //@line 2066 "tcc_bootstrap.c"
 var $23=HEAP32[((10472)>>2)]; //@line 2066 "tcc_bootstrap.c"
 _tok_str_add2($22,$23,10440); //@line 2066 "tcc_bootstrap.c"
 STACKTOP=sp;return; //@line 2067 "tcc_bootstrap.c"
  default: assert(0, "bad label: " + label);
 }

}


function _begin_macro($str,$alloc){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 var $2;
 $1=$str;
 $2=$alloc;
 var $3=$2; //@line 1990 "tcc_bootstrap.c"
 var $4=(($3)&255); //@line 1990 "tcc_bootstrap.c"
 var $5=$1; //@line 1990 "tcc_bootstrap.c"
 var $6=(($5+32)|0); //@line 1990 "tcc_bootstrap.c"
 HEAP8[(($6)>>0)]=$4; //@line 1990 "tcc_bootstrap.c"
 var $7=HEAP32[((10672)>>2)]; //@line 1991 "tcc_bootstrap.c"
 var $8=$1; //@line 1991 "tcc_bootstrap.c"
 var $9=(($8+24)|0); //@line 1991 "tcc_bootstrap.c"
 HEAP32[(($9)>>2)]=$7; //@line 1991 "tcc_bootstrap.c"
 var $10=HEAP32[((10680)>>2)]; //@line 1992 "tcc_bootstrap.c"
 var $11=$1; //@line 1992 "tcc_bootstrap.c"
 var $12=(($11+28)|0); //@line 1992 "tcc_bootstrap.c"
 HEAP32[(($12)>>2)]=$10; //@line 1992 "tcc_bootstrap.c"
 var $13=HEAP32[((76648)>>2)]; //@line 1993 "tcc_bootstrap.c"
 var $14=(($13+16)|0); //@line 1993 "tcc_bootstrap.c"
 var $15=HEAP32[(($14)>>2)]; //@line 1993 "tcc_bootstrap.c"
 var $16=$1; //@line 1993 "tcc_bootstrap.c"
 var $17=(($16+20)|0); //@line 1993 "tcc_bootstrap.c"
 HEAP32[(($17)>>2)]=$15; //@line 1993 "tcc_bootstrap.c"
 var $18=$1; //@line 1994 "tcc_bootstrap.c"
 var $19=(($18)|0); //@line 1994 "tcc_bootstrap.c"
 var $20=HEAP32[(($19)>>2)]; //@line 1994 "tcc_bootstrap.c"
 HEAP32[((10680)>>2)]=$20; //@line 1994 "tcc_bootstrap.c"
 var $21=$1; //@line 1995 "tcc_bootstrap.c"
 HEAP32[((10672)>>2)]=$21; //@line 1995 "tcc_bootstrap.c"
 STACKTOP=sp;return; //@line 1996 "tcc_bootstrap.c"
}


function _expr_const(){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $c;
 var $wc=sp;
 var $1$0=_expr_const64();
 var $1$1=tempRet0;
 var $st$0$0=(($wc)|0);
 HEAP32[(($st$0$0)>>2)]=$1$0;
 var $st$1$1=(($wc+4)|0);
 HEAP32[(($st$1$1)>>2)]=$1$1;
 var $ld$2$0=(($wc)|0);
 var $2$0=HEAP32[(($ld$2$0)>>2)];
 var $ld$3$1=(($wc+4)|0);
 var $2$1=HEAP32[(($ld$3$1)>>2)];
 var $3$0=$2$0;
 var $3=$3$0;
 $c=$3; //@line 8017 "tcc_bootstrap.c"
 var $4=$c; //@line 8018 "tcc_bootstrap.c"
 var $5$0=$4;
 var $5$1=((((($4|0)<0))|0)?-1:0);
 var $ld$4$0=(($wc)|0);
 var $6$0=HEAP32[(($ld$4$0)>>2)];
 var $ld$5$1=(($wc+4)|0);
 var $6$1=HEAP32[(($ld$5$1)>>2)];
 var $7=(($5$0|0) != ($6$0|0)) | (($5$1|0) != ($6$1|0)); //@line 8018 "tcc_bootstrap.c"
 if($7){label=2;break;}else{label=4;break;} //@line 8018 "tcc_bootstrap.c"
 case 2: 
 var $9=$c; //@line 8018 "tcc_bootstrap.c"
 var $10$0=$9;
 var $10$1=0;
 var $ld$6$0=(($wc)|0);
 var $11$0=HEAP32[(($ld$6$0)>>2)];
 var $ld$7$1=(($wc+4)|0);
 var $11$1=HEAP32[(($ld$7$1)>>2)];
 var $12=(($10$0|0) != ($11$0|0)) | (($10$1|0) != ($11$1|0)); //@line 8018 "tcc_bootstrap.c"
 if($12){label=3;break;}else{label=4;break;} //@line 8018 "tcc_bootstrap.c"
 case 3: 
 _tcc_error(2976,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs; //@line 8019 "tcc_bootstrap.c"
 label=4;break; //@line 8019 "tcc_bootstrap.c"
 case 4: 
 var $15=$c; //@line 8020 "tcc_bootstrap.c"
 STACKTOP=sp;return $15; //@line 8020 "tcc_bootstrap.c"
  default: assert(0, "bad label: " + label);
 }

}


function _end_macro(){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $str;
 var $1=HEAP32[((10672)>>2)]; //@line 1999 "tcc_bootstrap.c"
 $str=$1; //@line 1999 "tcc_bootstrap.c"
 var $2=$str; //@line 2000 "tcc_bootstrap.c"
 var $3=(($2+24)|0); //@line 2000 "tcc_bootstrap.c"
 var $4=HEAP32[(($3)>>2)]; //@line 2000 "tcc_bootstrap.c"
 HEAP32[((10672)>>2)]=$4; //@line 2000 "tcc_bootstrap.c"
 var $5=$str; //@line 2001 "tcc_bootstrap.c"
 var $6=(($5+28)|0); //@line 2001 "tcc_bootstrap.c"
 var $7=HEAP32[(($6)>>2)]; //@line 2001 "tcc_bootstrap.c"
 HEAP32[((10680)>>2)]=$7; //@line 2001 "tcc_bootstrap.c"
 var $8=$str; //@line 2002 "tcc_bootstrap.c"
 var $9=(($8+20)|0); //@line 2002 "tcc_bootstrap.c"
 var $10=HEAP32[(($9)>>2)]; //@line 2002 "tcc_bootstrap.c"
 var $11=HEAP32[((76648)>>2)]; //@line 2002 "tcc_bootstrap.c"
 var $12=(($11+16)|0); //@line 2002 "tcc_bootstrap.c"
 HEAP32[(($12)>>2)]=$10; //@line 2002 "tcc_bootstrap.c"
 var $13=$str; //@line 2003 "tcc_bootstrap.c"
 var $14=(($13+32)|0); //@line 2003 "tcc_bootstrap.c"
 var $15=HEAP8[(($14)>>0)]; //@line 2003 "tcc_bootstrap.c"
 var $16=(($15<<24)>>24); //@line 2003 "tcc_bootstrap.c"
 var $17=($16|0)==2; //@line 2003 "tcc_bootstrap.c"
 if($17){label=2;break;}else{label=3;break;} //@line 2003 "tcc_bootstrap.c"
 case 2: 
 var $19=$str; //@line 2004 "tcc_bootstrap.c"
 var $20=(($19+32)|0); //@line 2004 "tcc_bootstrap.c"
 HEAP8[(($20)>>0)]=3; //@line 2004 "tcc_bootstrap.c"
 label=4;break; //@line 2005 "tcc_bootstrap.c"
 case 3: 
 var $22=$str; //@line 2006 "tcc_bootstrap.c"
 _tok_str_free($22); //@line 2006 "tcc_bootstrap.c"
 label=4;break;
 case 4: 
 STACKTOP=sp;return; //@line 2008 "tcc_bootstrap.c"
  default: assert(0, "bad label: " + label);
 }

}


function _tok_str_free($str){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 $1=$str;
 var $2=$1; //@line 1959 "tcc_bootstrap.c"
 var $3=(($2)|0); //@line 1959 "tcc_bootstrap.c"
 var $4=HEAP32[(($3)>>2)]; //@line 1959 "tcc_bootstrap.c"
 _tok_str_free_str($4); //@line 1959 "tcc_bootstrap.c"
 var $5=HEAP32[((9384)>>2)]; //@line 1960 "tcc_bootstrap.c"
 var $6=$1; //@line 1960 "tcc_bootstrap.c"
 var $7=$6; //@line 1960 "tcc_bootstrap.c"
 _tal_free_impl($5,$7); //@line 1960 "tcc_bootstrap.c"
 STACKTOP=sp;return; //@line 1961 "tcc_bootstrap.c"
}


function _expr_const64(){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $c=sp;
 _expr_const1(); //@line 8006 "tcc_bootstrap.c"
 var $1=HEAP32[((9288)>>2)]; //@line 8007 "tcc_bootstrap.c"
 var $2=(($1+8)|0); //@line 8007 "tcc_bootstrap.c"
 var $3=HEAP16[(($2)>>1)]; //@line 8007 "tcc_bootstrap.c"
 var $4=($3&65535); //@line 8007 "tcc_bootstrap.c"
 var $5=$4&831; //@line 8007 "tcc_bootstrap.c"
 var $6=($5|0)!=48; //@line 8007 "tcc_bootstrap.c"
 if($6){label=2;break;}else{label=3;break;} //@line 8007 "tcc_bootstrap.c"
 case 2: 
 _expect(2952); //@line 8008 "tcc_bootstrap.c"
 label=3;break; //@line 8008 "tcc_bootstrap.c"
 case 3: 
 var $9=HEAP32[((9288)>>2)]; //@line 8009 "tcc_bootstrap.c"
 var $10=(($9+16)|0); //@line 8009 "tcc_bootstrap.c"
 var $11=$10; //@line 8009 "tcc_bootstrap.c"
 var $ld$0$0=(($11)|0);
 var $12$0=HEAP32[(($ld$0$0)>>2)];
 var $ld$1$1=(($11+4)|0);
 var $12$1=HEAP32[(($ld$1$1)>>2)];
 var $st$2$0=(($c)|0);
 HEAP32[(($st$2$0)>>2)]=$12$0;
 var $st$3$1=(($c+4)|0);
 HEAP32[(($st$3$1)>>2)]=$12$1;
 _vpop(); //@line 8010 "tcc_bootstrap.c"
 var $ld$4$0=(($c)|0);
 var $13$0=HEAP32[(($ld$4$0)>>2)];
 var $ld$5$1=(($c+4)|0);
 var $13$1=HEAP32[(($ld$5$1)>>2)];
 STACKTOP=sp;return (tempRet0=$13$1,$13$0); //@line 8011 "tcc_bootstrap.c"
  default: assert(0, "bad label: " + label);
 }

}


function _expr_const1(){
 var label=0;


 var $1=HEAP32[((76712)>>2)]; //@line 7997 "tcc_bootstrap.c"
 var $2=((($1)+(1))|0); //@line 7997 "tcc_bootstrap.c"
 HEAP32[((76712)>>2)]=$2; //@line 7997 "tcc_bootstrap.c"
 var $3=HEAP32[((10616)>>2)]; //@line 7998 "tcc_bootstrap.c"
 var $4=((($3)+(1))|0); //@line 7998 "tcc_bootstrap.c"
 HEAP32[((10616)>>2)]=$4; //@line 7998 "tcc_bootstrap.c"
 _expr_cond(); //@line 7999 "tcc_bootstrap.c"
 var $5=HEAP32[((10616)>>2)]; //@line 8000 "tcc_bootstrap.c"
 var $6=((($5)-(1))|0); //@line 8000 "tcc_bootstrap.c"
 HEAP32[((10616)>>2)]=$6; //@line 8000 "tcc_bootstrap.c"
 var $7=HEAP32[((76712)>>2)]; //@line 8001 "tcc_bootstrap.c"
 var $8=((($7)-(1))|0); //@line 8001 "tcc_bootstrap.c"
 HEAP32[((76712)>>2)]=$8; //@line 8001 "tcc_bootstrap.c"
 return; //@line 8002 "tcc_bootstrap.c"
}


function _vpop(){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $v;
 var $1=HEAP32[((9288)>>2)]; //@line 4415 "tcc_bootstrap.c"
 var $2=(($1+8)|0); //@line 4415 "tcc_bootstrap.c"
 var $3=HEAP16[(($2)>>1)]; //@line 4415 "tcc_bootstrap.c"
 var $4=($3&65535); //@line 4415 "tcc_bootstrap.c"
 var $5=$4&63; //@line 4415 "tcc_bootstrap.c"
 $v=$5; //@line 4415 "tcc_bootstrap.c"
 var $6=$v; //@line 4416 "tcc_bootstrap.c"
 var $7=($6|0)==4; //@line 4416 "tcc_bootstrap.c"
 if($7){label=2;break;}else{label=3;break;} //@line 4416 "tcc_bootstrap.c"
 case 2: 
 _o(55517); //@line 4417 "tcc_bootstrap.c"
 label=7;break; //@line 4418 "tcc_bootstrap.c"
 case 3: 
 var $10=$v; //@line 4419 "tcc_bootstrap.c"
 var $11=($10|0)==52; //@line 4419 "tcc_bootstrap.c"
 if($11){label=5;break;}else{label=4;break;} //@line 4419 "tcc_bootstrap.c"
 case 4: 
 var $13=$v; //@line 4419 "tcc_bootstrap.c"
 var $14=($13|0)==53; //@line 4419 "tcc_bootstrap.c"
 if($14){label=5;break;}else{label=6;break;} //@line 4419 "tcc_bootstrap.c"
 case 5: 
 var $16=HEAP32[((9288)>>2)]; //@line 4421 "tcc_bootstrap.c"
 var $17=(($16+16)|0); //@line 4421 "tcc_bootstrap.c"
 var $18=$17; //@line 4421 "tcc_bootstrap.c"
 var $ld$0$0=(($18)|0);
 var $19$0=HEAP32[(($ld$0$0)>>2)];
 var $ld$1$1=(($18+4)|0);
 var $19$1=HEAP32[(($ld$1$1)>>2)];
 var $20$0=$19$0;
 var $20=$20$0;
 _gsym($20); //@line 4421 "tcc_bootstrap.c"
 label=6;break; //@line 4422 "tcc_bootstrap.c"
 case 6: 
 label=7;break;
 case 7: 
 var $23=HEAP32[((9288)>>2)]; //@line 4423 "tcc_bootstrap.c"
 var $24=((($23)-(40))|0); //@line 4423 "tcc_bootstrap.c"
 HEAP32[((9288)>>2)]=$24; //@line 4423 "tcc_bootstrap.c"
 STACKTOP=sp;return; //@line 4424 "tcc_bootstrap.c"
  default: assert(0, "bad label: " + label);
 }

}


function _o($c){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 $1=$c;
 label=2;break; //@line 10017 "tcc_bootstrap.c"
 case 2: 
 var $3=$1; //@line 10017 "tcc_bootstrap.c"
 var $4=($3|0)!=0; //@line 10017 "tcc_bootstrap.c"
 if($4){label=3;break;}else{label=4;break;} //@line 10017 "tcc_bootstrap.c"
 case 3: 
 var $6=$1; //@line 10018 "tcc_bootstrap.c"
 _g($6); //@line 10018 "tcc_bootstrap.c"
 var $7=$1; //@line 10019 "tcc_bootstrap.c"
 var $8=$7>>>8; //@line 10019 "tcc_bootstrap.c"
 $1=$8; //@line 10019 "tcc_bootstrap.c"
 label=2;break; //@line 10020 "tcc_bootstrap.c"
 case 4: 
 STACKTOP=sp;return; //@line 10021 "tcc_bootstrap.c"
  default: assert(0, "bad label: " + label);
 }

}


function _gsym($t){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 $1=$t;
 var $2=$1; //@line 10040 "tcc_bootstrap.c"
 var $3=HEAP32[((11008)>>2)]; //@line 10040 "tcc_bootstrap.c"
 _gsym_addr($2,$3); //@line 10040 "tcc_bootstrap.c"
 STACKTOP=sp;return; //@line 10041 "tcc_bootstrap.c"
}


function _gsym_addr($t,$a){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $ptr;
 var $n;
 $1=$t;
 $2=$a;
 label=2;break; //@line 10031 "tcc_bootstrap.c"
 case 2: 
 var $4=$1; //@line 10031 "tcc_bootstrap.c"
 var $5=($4|0)!=0; //@line 10031 "tcc_bootstrap.c"
 if($5){label=3;break;}else{label=4;break;} //@line 10031 "tcc_bootstrap.c"
 case 3: 
 var $7=HEAP32[((76672)>>2)]; //@line 10032 "tcc_bootstrap.c"
 var $8=(($7+4)|0); //@line 10032 "tcc_bootstrap.c"
 var $9=HEAP32[(($8)>>2)]; //@line 10032 "tcc_bootstrap.c"
 var $10=$1; //@line 10032 "tcc_bootstrap.c"
 var $11=(($9+$10)|0); //@line 10032 "tcc_bootstrap.c"
 $ptr=$11; //@line 10032 "tcc_bootstrap.c"
 var $12=$ptr; //@line 10033 "tcc_bootstrap.c"
 var $13=_read32le($12); //@line 10033 "tcc_bootstrap.c"
 $n=$13; //@line 10033 "tcc_bootstrap.c"
 var $14=$ptr; //@line 10034 "tcc_bootstrap.c"
 var $15=$2; //@line 10034 "tcc_bootstrap.c"
 var $16=$1; //@line 10034 "tcc_bootstrap.c"
 var $17=((($15)-($16))|0); //@line 10034 "tcc_bootstrap.c"
 var $18=((($17)-(4))|0); //@line 10034 "tcc_bootstrap.c"
 _write32le($14,$18); //@line 10034 "tcc_bootstrap.c"
 var $19=$n; //@line 10035 "tcc_bootstrap.c"
 $1=$19; //@line 10035 "tcc_bootstrap.c"
 label=2;break; //@line 10036 "tcc_bootstrap.c"
 case 4: 
 STACKTOP=sp;return; //@line 10037 "tcc_bootstrap.c"
  default: assert(0, "bad label: " + label);
 }

}


function _read32le($p){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 $1=$p;
 var $2=$1; //@line 1121 "tcc_bootstrap.c"
 var $3=_read16le($2); //@line 1121 "tcc_bootstrap.c"
 var $4=($3&65535); //@line 1121 "tcc_bootstrap.c"
 var $5=$1; //@line 1121 "tcc_bootstrap.c"
 var $6=(($5+2)|0); //@line 1121 "tcc_bootstrap.c"
 var $7=_read16le($6); //@line 1121 "tcc_bootstrap.c"
 var $8=($7&65535); //@line 1121 "tcc_bootstrap.c"
 var $9=$8<<16; //@line 1121 "tcc_bootstrap.c"
 var $10=$4|$9; //@line 1121 "tcc_bootstrap.c"
 STACKTOP=sp;return $10; //@line 1121 "tcc_bootstrap.c"
}


function _write32le($p,$x){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 var $2;
 $1=$p;
 $2=$x;
 var $3=$1; //@line 1124 "tcc_bootstrap.c"
 var $4=$2; //@line 1124 "tcc_bootstrap.c"
 var $5=(($4)&65535); //@line 1124 "tcc_bootstrap.c"
 _write16le($3,$5); //@line 1124 "tcc_bootstrap.c"
 var $6=$1; //@line 1124 "tcc_bootstrap.c"
 var $7=(($6+2)|0); //@line 1124 "tcc_bootstrap.c"
 var $8=$2; //@line 1124 "tcc_bootstrap.c"
 var $9=$8>>>16; //@line 1124 "tcc_bootstrap.c"
 var $10=(($9)&65535); //@line 1124 "tcc_bootstrap.c"
 _write16le($7,$10); //@line 1124 "tcc_bootstrap.c"
 STACKTOP=sp;return; //@line 1125 "tcc_bootstrap.c"
}


function _write16le($p,$x){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 var $2;
 $1=$p;
 $2=$x;
 var $3=$2; //@line 1118 "tcc_bootstrap.c"
 var $4=($3&65535); //@line 1118 "tcc_bootstrap.c"
 var $5=$4&255; //@line 1118 "tcc_bootstrap.c"
 var $6=(($5)&255); //@line 1118 "tcc_bootstrap.c"
 var $7=$1; //@line 1118 "tcc_bootstrap.c"
 var $8=(($7)|0); //@line 1118 "tcc_bootstrap.c"
 HEAP8[(($8)>>0)]=$6; //@line 1118 "tcc_bootstrap.c"
 var $9=$2; //@line 1118 "tcc_bootstrap.c"
 var $10=($9&65535); //@line 1118 "tcc_bootstrap.c"
 var $11=$10>>8; //@line 1118 "tcc_bootstrap.c"
 var $12=$11&255; //@line 1118 "tcc_bootstrap.c"
 var $13=(($12)&255); //@line 1118 "tcc_bootstrap.c"
 var $14=$1; //@line 1118 "tcc_bootstrap.c"
 var $15=(($14+1)|0); //@line 1118 "tcc_bootstrap.c"
 HEAP8[(($15)>>0)]=$13; //@line 1118 "tcc_bootstrap.c"
 STACKTOP=sp;return; //@line 1119 "tcc_bootstrap.c"
}


function _read16le($p){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 $1=$p;
 var $2=$1; //@line 1115 "tcc_bootstrap.c"
 var $3=(($2)|0); //@line 1115 "tcc_bootstrap.c"
 var $4=HEAP8[(($3)>>0)]; //@line 1115 "tcc_bootstrap.c"
 var $5=($4&255); //@line 1115 "tcc_bootstrap.c"
 var $6=$1; //@line 1115 "tcc_bootstrap.c"
 var $7=(($6+1)|0); //@line 1115 "tcc_bootstrap.c"
 var $8=HEAP8[(($7)>>0)]; //@line 1115 "tcc_bootstrap.c"
 var $9=($8&255); //@line 1115 "tcc_bootstrap.c"
 var $10=($9&65535); //@line 1115 "tcc_bootstrap.c"
 var $11=$10<<8; //@line 1115 "tcc_bootstrap.c"
 var $12=$5|$11; //@line 1115 "tcc_bootstrap.c"
 var $13=(($12)&65535); //@line 1115 "tcc_bootstrap.c"
 STACKTOP=sp;return $13; //@line 1115 "tcc_bootstrap.c"
}


function _g($c){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $ind1;
 $1=$c;
 var $2=HEAP32[((10616)>>2)]; //@line 10007 "tcc_bootstrap.c"
 var $3=($2|0)!=0; //@line 10007 "tcc_bootstrap.c"
 if($3){label=2;break;}else{label=3;break;} //@line 10007 "tcc_bootstrap.c"
 case 2: 
 label=6;break; //@line 10008 "tcc_bootstrap.c"
 case 3: 
 var $6=HEAP32[((11008)>>2)]; //@line 10009 "tcc_bootstrap.c"
 var $7=((($6)+(1))|0); //@line 10009 "tcc_bootstrap.c"
 $ind1=$7; //@line 10009 "tcc_bootstrap.c"
 var $8=$ind1; //@line 10010 "tcc_bootstrap.c"
 var $9=HEAP32[((76672)>>2)]; //@line 10010 "tcc_bootstrap.c"
 var $10=(($9+8)|0); //@line 10010 "tcc_bootstrap.c"
 var $11=HEAP32[(($10)>>2)]; //@line 10010 "tcc_bootstrap.c"
 var $12=($8>>>0)>($11>>>0); //@line 10010 "tcc_bootstrap.c"
 if($12){label=4;break;}else{label=5;break;} //@line 10010 "tcc_bootstrap.c"
 case 4: 
 var $14=HEAP32[((76672)>>2)]; //@line 10011 "tcc_bootstrap.c"
 var $15=$ind1; //@line 10011 "tcc_bootstrap.c"
 _section_realloc($14,$15); //@line 10011 "tcc_bootstrap.c"
 label=5;break; //@line 10011 "tcc_bootstrap.c"
 case 5: 
 var $17=$1; //@line 10012 "tcc_bootstrap.c"
 var $18=(($17)&255); //@line 10012 "tcc_bootstrap.c"
 var $19=HEAP32[((11008)>>2)]; //@line 10012 "tcc_bootstrap.c"
 var $20=HEAP32[((76672)>>2)]; //@line 10012 "tcc_bootstrap.c"
 var $21=(($20+4)|0); //@line 10012 "tcc_bootstrap.c"
 var $22=HEAP32[(($21)>>2)]; //@line 10012 "tcc_bootstrap.c"
 var $23=(($22+$19)|0); //@line 10012 "tcc_bootstrap.c"
 HEAP8[(($23)>>0)]=$18; //@line 10012 "tcc_bootstrap.c"
 var $24=$ind1; //@line 10013 "tcc_bootstrap.c"
 HEAP32[((11008)>>2)]=$24; //@line 10013 "tcc_bootstrap.c"
 label=6;break; //@line 10013 "tcc_bootstrap.c"
 case 6: 
 STACKTOP=sp;return; //@line 10013 "tcc_bootstrap.c"
  default: assert(0, "bad label: " + label);
 }

}


function _expr_cond(){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+64)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $tt;
 var $u;
 var $r1;
 var $r2;
 var $rc;
 var $t1;
 var $t2;
 var $bt1;
 var $bt2;
 var $islv;
 var $c;
 var $g;
 var $sv=sp;
 var $type=(sp)+(40);
 var $type1=(sp)+(48);
 var $type2=(sp)+(56);
 _expr_lor(); //@line 7841 "tcc_bootstrap.c"
 var $1=HEAP32[((10472)>>2)]; //@line 7842 "tcc_bootstrap.c"
 var $2=($1|0)==63; //@line 7842 "tcc_bootstrap.c"
 if($2){label=2;break;}else{label=109;break;} //@line 7842 "tcc_bootstrap.c"
 case 2: 
 _next(); //@line 7843 "tcc_bootstrap.c"
 var $4=_condition_3way(); //@line 7844 "tcc_bootstrap.c"
 $c=$4; //@line 7844 "tcc_bootstrap.c"
 var $5=HEAP32[((10472)>>2)]; //@line 7845 "tcc_bootstrap.c"
 var $6=($5|0)==58; //@line 7845 "tcc_bootstrap.c"
 if($6){label=3;break;}else{var $11=0;label=4;break;} //@line 7845 "tcc_bootstrap.c"
 case 3: 
 var $8=HEAP32[((2848)>>2)]; //@line 7845 "tcc_bootstrap.c"
 var $9=($8|0)!=0; //@line 7845 "tcc_bootstrap.c"
 var $11=$9;label=4;break;
 case 4: 
 var $11;
 var $12=($11&1);
 $g=$12;
 var $13=$c; //@line 7846 "tcc_bootstrap.c"
 var $14=($13|0)<0; //@line 7846 "tcc_bootstrap.c"
 if($14){label=5;break;}else{label=11;break;} //@line 7846 "tcc_bootstrap.c"
 case 5: 
 var $16=HEAP32[((9288)>>2)]; //@line 7847 "tcc_bootstrap.c"
 var $17=(($16)|0); //@line 7847 "tcc_bootstrap.c"
 var $18=(($17)|0); //@line 7847 "tcc_bootstrap.c"
 var $19=HEAP32[(($18)>>2)]; //@line 7847 "tcc_bootstrap.c"
 var $20=_is_float($19); //@line 7847 "tcc_bootstrap.c"
 var $21=($20|0)!=0; //@line 7847 "tcc_bootstrap.c"
 if($21){label=6;break;}else{label=7;break;} //@line 7847 "tcc_bootstrap.c"
 case 6: 
 $rc=2; //@line 7848 "tcc_bootstrap.c"
 label=8;break; //@line 7849 "tcc_bootstrap.c"
 case 7: 
 $rc=1; //@line 7850 "tcc_bootstrap.c"
 label=8;break;
 case 8: 
 var $25=$rc; //@line 7851 "tcc_bootstrap.c"
 var $26=_gv($25); //@line 7851 "tcc_bootstrap.c"
 _save_regs(1); //@line 7852 "tcc_bootstrap.c"
 var $27=$g; //@line 7853 "tcc_bootstrap.c"
 var $28=($27|0)!=0; //@line 7853 "tcc_bootstrap.c"
 if($28){label=9;break;}else{label=10;break;} //@line 7853 "tcc_bootstrap.c"
 case 9: 
 _gv_dup(); //@line 7854 "tcc_bootstrap.c"
 label=10;break; //@line 7854 "tcc_bootstrap.c"
 case 10: 
 var $31=_gvtst(1,0); //@line 7855 "tcc_bootstrap.c"
 $tt=$31; //@line 7855 "tcc_bootstrap.c"
 label=14;break; //@line 7856 "tcc_bootstrap.c"
 case 11: 
 var $33=$g; //@line 7857 "tcc_bootstrap.c"
 var $34=($33|0)!=0; //@line 7857 "tcc_bootstrap.c"
 if($34){label=13;break;}else{label=12;break;} //@line 7857 "tcc_bootstrap.c"
 case 12: 
 _vpop(); //@line 7858 "tcc_bootstrap.c"
 label=13;break; //@line 7858 "tcc_bootstrap.c"
 case 13: 
 $tt=0; //@line 7859 "tcc_bootstrap.c"
 label=14;break;
 case 14: 
 var $38=$c; //@line 7862 "tcc_bootstrap.c"
 var $39=($38|0)==0; //@line 7862 "tcc_bootstrap.c"
 if($39){label=15;break;}else{label=16;break;} //@line 7862 "tcc_bootstrap.c"
 case 15: 
 var $41=HEAP32[((10616)>>2)]; //@line 7863 "tcc_bootstrap.c"
 var $42=((($41)+(1))|0); //@line 7863 "tcc_bootstrap.c"
 HEAP32[((10616)>>2)]=$42; //@line 7863 "tcc_bootstrap.c"
 label=16;break; //@line 7863 "tcc_bootstrap.c"
 case 16: 
 var $44=$g; //@line 7864 "tcc_bootstrap.c"
 var $45=($44|0)!=0; //@line 7864 "tcc_bootstrap.c"
 if($45){label=18;break;}else{label=17;break;} //@line 7864 "tcc_bootstrap.c"
 case 17: 
 _gexpr(); //@line 7865 "tcc_bootstrap.c"
 label=18;break; //@line 7865 "tcc_bootstrap.c"
 case 18: 
 var $48=HEAP32[((9288)>>2)]; //@line 7866 "tcc_bootstrap.c"
 var $49=(($48)|0); //@line 7866 "tcc_bootstrap.c"
 var $50=$type1; //@line 7866 "tcc_bootstrap.c"
 var $51=$49; //@line 7866 "tcc_bootstrap.c"
 assert(8 % 1 === 0);HEAP32[(($50)>>2)]=HEAP32[(($51)>>2)];HEAP32[((($50)+(4))>>2)]=HEAP32[((($51)+(4))>>2)]; //@line 7866 "tcc_bootstrap.c"
 var $52=HEAP32[((9288)>>2)]; //@line 7867 "tcc_bootstrap.c"
 var $53=$sv; //@line 7867 "tcc_bootstrap.c"
 var $54=$52; //@line 7867 "tcc_bootstrap.c"
 assert(40 % 1 === 0);HEAP32[(($53)>>2)]=HEAP32[(($54)>>2)];HEAP32[((($53)+(4))>>2)]=HEAP32[((($54)+(4))>>2)];HEAP32[((($53)+(8))>>2)]=HEAP32[((($54)+(8))>>2)];HEAP32[((($53)+(12))>>2)]=HEAP32[((($54)+(12))>>2)];HEAP32[((($53)+(16))>>2)]=HEAP32[((($54)+(16))>>2)];HEAP32[((($53)+(20))>>2)]=HEAP32[((($54)+(20))>>2)];HEAP32[((($53)+(24))>>2)]=HEAP32[((($54)+(24))>>2)];HEAP32[((($53)+(28))>>2)]=HEAP32[((($54)+(28))>>2)];HEAP32[((($53)+(32))>>2)]=HEAP32[((($54)+(32))>>2)];HEAP32[((($53)+(36))>>2)]=HEAP32[((($54)+(36))>>2)]; //@line 7867 "tcc_bootstrap.c"
 var $55=HEAP32[((9288)>>2)]; //@line 7868 "tcc_bootstrap.c"
 var $56=((($55)-(40))|0); //@line 7868 "tcc_bootstrap.c"
 HEAP32[((9288)>>2)]=$56; //@line 7868 "tcc_bootstrap.c"
 _skip(58); //@line 7869 "tcc_bootstrap.c"
 $u=0; //@line 7870 "tcc_bootstrap.c"
 var $57=$c; //@line 7871 "tcc_bootstrap.c"
 var $58=($57|0)<0; //@line 7871 "tcc_bootstrap.c"
 if($58){label=19;break;}else{label=20;break;} //@line 7871 "tcc_bootstrap.c"
 case 19: 
 var $60=_gjmp(0); //@line 7872 "tcc_bootstrap.c"
 $u=$60; //@line 7872 "tcc_bootstrap.c"
 label=20;break; //@line 7872 "tcc_bootstrap.c"
 case 20: 
 var $62=$tt; //@line 7873 "tcc_bootstrap.c"
 _gsym($62); //@line 7873 "tcc_bootstrap.c"
 var $63=$c; //@line 7874 "tcc_bootstrap.c"
 var $64=($63|0)==0; //@line 7874 "tcc_bootstrap.c"
 if($64){label=21;break;}else{label=22;break;} //@line 7874 "tcc_bootstrap.c"
 case 21: 
 var $66=HEAP32[((10616)>>2)]; //@line 7875 "tcc_bootstrap.c"
 var $67=((($66)-(1))|0); //@line 7875 "tcc_bootstrap.c"
 HEAP32[((10616)>>2)]=$67; //@line 7875 "tcc_bootstrap.c"
 label=22;break; //@line 7875 "tcc_bootstrap.c"
 case 22: 
 var $69=$c; //@line 7876 "tcc_bootstrap.c"
 var $70=($69|0)==1; //@line 7876 "tcc_bootstrap.c"
 if($70){label=23;break;}else{label=24;break;} //@line 7876 "tcc_bootstrap.c"
 case 23: 
 var $72=HEAP32[((10616)>>2)]; //@line 7877 "tcc_bootstrap.c"
 var $73=((($72)+(1))|0); //@line 7877 "tcc_bootstrap.c"
 HEAP32[((10616)>>2)]=$73; //@line 7877 "tcc_bootstrap.c"
 label=24;break; //@line 7877 "tcc_bootstrap.c"
 case 24: 
 _expr_cond(); //@line 7878 "tcc_bootstrap.c"
 var $75=$c; //@line 7879 "tcc_bootstrap.c"
 var $76=($75|0)==1; //@line 7879 "tcc_bootstrap.c"
 if($76){label=25;break;}else{label=26;break;} //@line 7879 "tcc_bootstrap.c"
 case 25: 
 var $78=HEAP32[((10616)>>2)]; //@line 7880 "tcc_bootstrap.c"
 var $79=((($78)-(1))|0); //@line 7880 "tcc_bootstrap.c"
 HEAP32[((10616)>>2)]=$79; //@line 7880 "tcc_bootstrap.c"
 label=26;break; //@line 7880 "tcc_bootstrap.c"
 case 26: 
 var $81=HEAP32[((9288)>>2)]; //@line 7881 "tcc_bootstrap.c"
 var $82=(($81)|0); //@line 7881 "tcc_bootstrap.c"
 var $83=$type2; //@line 7881 "tcc_bootstrap.c"
 var $84=$82; //@line 7881 "tcc_bootstrap.c"
 assert(8 % 1 === 0);HEAP32[(($83)>>2)]=HEAP32[(($84)>>2)];HEAP32[((($83)+(4))>>2)]=HEAP32[((($84)+(4))>>2)]; //@line 7881 "tcc_bootstrap.c"
 var $85=(($type1)|0); //@line 7882 "tcc_bootstrap.c"
 var $86=HEAP32[(($85)>>2)]; //@line 7882 "tcc_bootstrap.c"
 $t1=$86; //@line 7882 "tcc_bootstrap.c"
 var $87=$t1; //@line 7883 "tcc_bootstrap.c"
 var $88=$87&15; //@line 7883 "tcc_bootstrap.c"
 $bt1=$88; //@line 7883 "tcc_bootstrap.c"
 var $89=(($type2)|0); //@line 7884 "tcc_bootstrap.c"
 var $90=HEAP32[(($89)>>2)]; //@line 7884 "tcc_bootstrap.c"
 $t2=$90; //@line 7884 "tcc_bootstrap.c"
 var $91=$t2; //@line 7885 "tcc_bootstrap.c"
 var $92=$91&15; //@line 7885 "tcc_bootstrap.c"
 $bt2=$92; //@line 7885 "tcc_bootstrap.c"
 var $93=(($type+4)|0); //@line 7886 "tcc_bootstrap.c"
 HEAP32[(($93)>>2)]=0; //@line 7886 "tcc_bootstrap.c"
 var $94=$bt1; //@line 7887 "tcc_bootstrap.c"
 var $95=_is_float($94); //@line 7887 "tcc_bootstrap.c"
 var $96=($95|0)!=0; //@line 7887 "tcc_bootstrap.c"
 if($96){label=28;break;}else{label=27;break;} //@line 7887 "tcc_bootstrap.c"
 case 27: 
 var $98=$bt2; //@line 7887 "tcc_bootstrap.c"
 var $99=_is_float($98); //@line 7887 "tcc_bootstrap.c"
 var $100=($99|0)!=0; //@line 7887 "tcc_bootstrap.c"
 if($100){label=28;break;}else{label=37;break;} //@line 7887 "tcc_bootstrap.c"
 case 28: 
 var $102=$bt1; //@line 7888 "tcc_bootstrap.c"
 var $103=($102|0)==10; //@line 7888 "tcc_bootstrap.c"
 if($103){label=30;break;}else{label=29;break;} //@line 7888 "tcc_bootstrap.c"
 case 29: 
 var $105=$bt2; //@line 7888 "tcc_bootstrap.c"
 var $106=($105|0)==10; //@line 7888 "tcc_bootstrap.c"
 if($106){label=30;break;}else{label=31;break;} //@line 7888 "tcc_bootstrap.c"
 case 30: 
 var $108=(($type)|0); //@line 7889 "tcc_bootstrap.c"
 HEAP32[(($108)>>2)]=10; //@line 7889 "tcc_bootstrap.c"
 label=36;break; //@line 7890 "tcc_bootstrap.c"
 case 31: 
 var $110=$bt1; //@line 7890 "tcc_bootstrap.c"
 var $111=($110|0)==9; //@line 7890 "tcc_bootstrap.c"
 if($111){label=33;break;}else{label=32;break;} //@line 7890 "tcc_bootstrap.c"
 case 32: 
 var $113=$bt2; //@line 7890 "tcc_bootstrap.c"
 var $114=($113|0)==9; //@line 7890 "tcc_bootstrap.c"
 if($114){label=33;break;}else{label=34;break;} //@line 7890 "tcc_bootstrap.c"
 case 33: 
 var $116=(($type)|0); //@line 7891 "tcc_bootstrap.c"
 HEAP32[(($116)>>2)]=9; //@line 7891 "tcc_bootstrap.c"
 label=35;break; //@line 7892 "tcc_bootstrap.c"
 case 34: 
 var $118=(($type)|0); //@line 7893 "tcc_bootstrap.c"
 HEAP32[(($118)>>2)]=8; //@line 7893 "tcc_bootstrap.c"
 label=35;break;
 case 35: 
 label=36;break;
 case 36: 
 label=80;break; //@line 7895 "tcc_bootstrap.c"
 case 37: 
 var $122=$bt1; //@line 7895 "tcc_bootstrap.c"
 var $123=($122|0)==4; //@line 7895 "tcc_bootstrap.c"
 if($123){label=39;break;}else{label=38;break;} //@line 7895 "tcc_bootstrap.c"
 case 38: 
 var $125=$bt2; //@line 7895 "tcc_bootstrap.c"
 var $126=($125|0)==4; //@line 7895 "tcc_bootstrap.c"
 if($126){label=39;break;}else{label=47;break;} //@line 7895 "tcc_bootstrap.c"
 case 39: 
 var $128=(($type)|0); //@line 7896 "tcc_bootstrap.c"
 HEAP32[(($128)>>2)]=2052; //@line 7896 "tcc_bootstrap.c"
 var $129=$bt1; //@line 7897 "tcc_bootstrap.c"
 var $130=($129|0)==4; //@line 7897 "tcc_bootstrap.c"
 if($130){label=40;break;}else{label=41;break;} //@line 7897 "tcc_bootstrap.c"
 case 40: 
 var $132=$t1; //@line 7898 "tcc_bootstrap.c"
 var $133=(($type)|0); //@line 7898 "tcc_bootstrap.c"
 var $134=HEAP32[(($133)>>2)]; //@line 7898 "tcc_bootstrap.c"
 var $135=$134&$132; //@line 7898 "tcc_bootstrap.c"
 HEAP32[(($133)>>2)]=$135; //@line 7898 "tcc_bootstrap.c"
 label=41;break; //@line 7898 "tcc_bootstrap.c"
 case 41: 
 var $137=$bt2; //@line 7899 "tcc_bootstrap.c"
 var $138=($137|0)==4; //@line 7899 "tcc_bootstrap.c"
 if($138){label=42;break;}else{label=43;break;} //@line 7899 "tcc_bootstrap.c"
 case 42: 
 var $140=$t2; //@line 7900 "tcc_bootstrap.c"
 var $141=(($type)|0); //@line 7900 "tcc_bootstrap.c"
 var $142=HEAP32[(($141)>>2)]; //@line 7900 "tcc_bootstrap.c"
 var $143=$142&$140; //@line 7900 "tcc_bootstrap.c"
 HEAP32[(($141)>>2)]=$143; //@line 7900 "tcc_bootstrap.c"
 label=43;break; //@line 7900 "tcc_bootstrap.c"
 case 43: 
 var $145=$t1; //@line 7901 "tcc_bootstrap.c"
 var $146=$145&159; //@line 7901 "tcc_bootstrap.c"
 var $147=($146|0)==20; //@line 7901 "tcc_bootstrap.c"
 if($147){label=45;break;}else{label=44;break;} //@line 7901 "tcc_bootstrap.c"
 case 44: 
 var $149=$t2; //@line 7901 "tcc_bootstrap.c"
 var $150=$149&159; //@line 7901 "tcc_bootstrap.c"
 var $151=($150|0)==20; //@line 7901 "tcc_bootstrap.c"
 if($151){label=45;break;}else{label=46;break;} //@line 7901 "tcc_bootstrap.c"
 case 45: 
 var $153=(($type)|0); //@line 7903 "tcc_bootstrap.c"
 var $154=HEAP32[(($153)>>2)]; //@line 7903 "tcc_bootstrap.c"
 var $155=$154|16; //@line 7903 "tcc_bootstrap.c"
 HEAP32[(($153)>>2)]=$155; //@line 7903 "tcc_bootstrap.c"
 label=46;break; //@line 7903 "tcc_bootstrap.c"
 case 46: 
 label=79;break; //@line 7904 "tcc_bootstrap.c"
 case 47: 
 var $158=$bt1; //@line 7904 "tcc_bootstrap.c"
 var $159=($158|0)==5; //@line 7904 "tcc_bootstrap.c"
 if($159){label=49;break;}else{label=48;break;} //@line 7904 "tcc_bootstrap.c"
 case 48: 
 var $161=$bt2; //@line 7904 "tcc_bootstrap.c"
 var $162=($161|0)==5; //@line 7904 "tcc_bootstrap.c"
 if($162){label=49;break;}else{label=56;break;} //@line 7904 "tcc_bootstrap.c"
 case 49: 
 var $164=HEAP32[((9288)>>2)]; //@line 7905 "tcc_bootstrap.c"
 var $165=_is_null_pointer($164); //@line 7905 "tcc_bootstrap.c"
 var $166=($165|0)!=0; //@line 7905 "tcc_bootstrap.c"
 if($166){label=50;break;}else{label=51;break;} //@line 7905 "tcc_bootstrap.c"
 case 50: 
 var $168=$type; //@line 7906 "tcc_bootstrap.c"
 var $169=$type1; //@line 7906 "tcc_bootstrap.c"
 assert(8 % 1 === 0);HEAP32[(($168)>>2)]=HEAP32[(($169)>>2)];HEAP32[((($168)+(4))>>2)]=HEAP32[((($169)+(4))>>2)]; //@line 7906 "tcc_bootstrap.c"
 label=55;break; //@line 7906 "tcc_bootstrap.c"
 case 51: 
 var $171=_is_null_pointer($sv); //@line 7907 "tcc_bootstrap.c"
 var $172=($171|0)!=0; //@line 7907 "tcc_bootstrap.c"
 if($172){label=52;break;}else{label=53;break;} //@line 7907 "tcc_bootstrap.c"
 case 52: 
 var $174=$type; //@line 7908 "tcc_bootstrap.c"
 var $175=$type2; //@line 7908 "tcc_bootstrap.c"
 assert(8 % 1 === 0);HEAP32[(($174)>>2)]=HEAP32[(($175)>>2)];HEAP32[((($174)+(4))>>2)]=HEAP32[((($175)+(4))>>2)]; //@line 7908 "tcc_bootstrap.c"
 label=54;break; //@line 7908 "tcc_bootstrap.c"
 case 53: 
 var $177=$type; //@line 7910 "tcc_bootstrap.c"
 var $178=$type1; //@line 7910 "tcc_bootstrap.c"
 assert(8 % 1 === 0);HEAP32[(($177)>>2)]=HEAP32[(($178)>>2)];HEAP32[((($177)+(4))>>2)]=HEAP32[((($178)+(4))>>2)]; //@line 7910 "tcc_bootstrap.c"
 label=54;break;
 case 54: 
 label=55;break;
 case 55: 
 label=78;break; //@line 7911 "tcc_bootstrap.c"
 case 56: 
 var $182=$bt1; //@line 7911 "tcc_bootstrap.c"
 var $183=($182|0)==6; //@line 7911 "tcc_bootstrap.c"
 if($183){label=58;break;}else{label=57;break;} //@line 7911 "tcc_bootstrap.c"
 case 57: 
 var $185=$bt2; //@line 7911 "tcc_bootstrap.c"
 var $186=($185|0)==6; //@line 7911 "tcc_bootstrap.c"
 if($186){label=58;break;}else{label=62;break;} //@line 7911 "tcc_bootstrap.c"
 case 58: 
 var $188=$bt1; //@line 7912 "tcc_bootstrap.c"
 var $189=($188|0)==6; //@line 7912 "tcc_bootstrap.c"
 if($189){label=59;break;}else{label=60;break;} //@line 7912 "tcc_bootstrap.c"
 case 59: 
 var $191=$type; //@line 7912 "tcc_bootstrap.c"
 var $192=$type1; //@line 7912 "tcc_bootstrap.c"
 assert(8 % 1 === 0);HEAP32[(($191)>>2)]=HEAP32[(($192)>>2)];HEAP32[((($191)+(4))>>2)]=HEAP32[((($192)+(4))>>2)]; //@line 7912 "tcc_bootstrap.c"
 label=61;break; //@line 7912 "tcc_bootstrap.c"
 case 60: 
 var $194=$type; //@line 7912 "tcc_bootstrap.c"
 var $195=$type2; //@line 7912 "tcc_bootstrap.c"
 assert(8 % 1 === 0);HEAP32[(($194)>>2)]=HEAP32[(($195)>>2)];HEAP32[((($194)+(4))>>2)]=HEAP32[((($195)+(4))>>2)]; //@line 7912 "tcc_bootstrap.c"
 label=61;break; //@line 7912 "tcc_bootstrap.c"
 case 61: 
 label=77;break; //@line 7913 "tcc_bootstrap.c"
 case 62: 
 var $198=$bt1; //@line 7913 "tcc_bootstrap.c"
 var $199=($198|0)==7; //@line 7913 "tcc_bootstrap.c"
 if($199){label=64;break;}else{label=63;break;} //@line 7913 "tcc_bootstrap.c"
 case 63: 
 var $201=$bt2; //@line 7913 "tcc_bootstrap.c"
 var $202=($201|0)==7; //@line 7913 "tcc_bootstrap.c"
 if($202){label=64;break;}else{label=68;break;} //@line 7913 "tcc_bootstrap.c"
 case 64: 
 var $204=$bt1; //@line 7914 "tcc_bootstrap.c"
 var $205=($204|0)==7; //@line 7914 "tcc_bootstrap.c"
 if($205){label=65;break;}else{label=66;break;} //@line 7914 "tcc_bootstrap.c"
 case 65: 
 var $207=$type; //@line 7914 "tcc_bootstrap.c"
 var $208=$type1; //@line 7914 "tcc_bootstrap.c"
 assert(8 % 1 === 0);HEAP32[(($207)>>2)]=HEAP32[(($208)>>2)];HEAP32[((($207)+(4))>>2)]=HEAP32[((($208)+(4))>>2)]; //@line 7914 "tcc_bootstrap.c"
 label=67;break; //@line 7914 "tcc_bootstrap.c"
 case 66: 
 var $210=$type; //@line 7914 "tcc_bootstrap.c"
 var $211=$type2; //@line 7914 "tcc_bootstrap.c"
 assert(8 % 1 === 0);HEAP32[(($210)>>2)]=HEAP32[(($211)>>2)];HEAP32[((($210)+(4))>>2)]=HEAP32[((($211)+(4))>>2)]; //@line 7914 "tcc_bootstrap.c"
 label=67;break; //@line 7914 "tcc_bootstrap.c"
 case 67: 
 label=76;break; //@line 7915 "tcc_bootstrap.c"
 case 68: 
 var $214=$bt1; //@line 7915 "tcc_bootstrap.c"
 var $215=($214|0)==0; //@line 7915 "tcc_bootstrap.c"
 if($215){label=70;break;}else{label=69;break;} //@line 7915 "tcc_bootstrap.c"
 case 69: 
 var $217=$bt2; //@line 7915 "tcc_bootstrap.c"
 var $218=($217|0)==0; //@line 7915 "tcc_bootstrap.c"
 if($218){label=70;break;}else{label=71;break;} //@line 7915 "tcc_bootstrap.c"
 case 70: 
 var $220=(($type)|0); //@line 7916 "tcc_bootstrap.c"
 HEAP32[(($220)>>2)]=0; //@line 7916 "tcc_bootstrap.c"
 label=75;break; //@line 7917 "tcc_bootstrap.c"
 case 71: 
 var $222=$t1; //@line 7918 "tcc_bootstrap.c"
 var $223=$t2; //@line 7918 "tcc_bootstrap.c"
 var $224=$222|$223; //@line 7918 "tcc_bootstrap.c"
 var $225=2048&$224; //@line 7918 "tcc_bootstrap.c"
 var $226=3|$225; //@line 7918 "tcc_bootstrap.c"
 var $227=(($type)|0); //@line 7918 "tcc_bootstrap.c"
 HEAP32[(($227)>>2)]=$226; //@line 7918 "tcc_bootstrap.c"
 var $228=$t1; //@line 7919 "tcc_bootstrap.c"
 var $229=$228&159; //@line 7919 "tcc_bootstrap.c"
 var $230=($229|0)==19; //@line 7919 "tcc_bootstrap.c"
 if($230){label=73;break;}else{label=72;break;} //@line 7919 "tcc_bootstrap.c"
 case 72: 
 var $232=$t2; //@line 7919 "tcc_bootstrap.c"
 var $233=$232&159; //@line 7919 "tcc_bootstrap.c"
 var $234=($233|0)==19; //@line 7919 "tcc_bootstrap.c"
 if($234){label=73;break;}else{label=74;break;} //@line 7919 "tcc_bootstrap.c"
 case 73: 
 var $236=(($type)|0); //@line 7921 "tcc_bootstrap.c"
 var $237=HEAP32[(($236)>>2)]; //@line 7921 "tcc_bootstrap.c"
 var $238=$237|16; //@line 7921 "tcc_bootstrap.c"
 HEAP32[(($236)>>2)]=$238; //@line 7921 "tcc_bootstrap.c"
 label=74;break; //@line 7921 "tcc_bootstrap.c"
 case 74: 
 label=75;break;
 case 75: 
 label=76;break;
 case 76: 
 label=77;break;
 case 77: 
 label=78;break;
 case 78: 
 label=79;break;
 case 79: 
 label=80;break;
 case 80: 
 var $246=HEAP32[((9288)>>2)]; //@line 7923 "tcc_bootstrap.c"
 var $247=(($246+8)|0); //@line 7923 "tcc_bootstrap.c"
 var $248=HEAP16[(($247)>>1)]; //@line 7923 "tcc_bootstrap.c"
 var $249=($248&65535); //@line 7923 "tcc_bootstrap.c"
 var $250=$249&256; //@line 7923 "tcc_bootstrap.c"
 var $251=($250|0)!=0; //@line 7923 "tcc_bootstrap.c"
 if($251){label=81;break;}else{var $264=0;label=83;break;} //@line 7923 "tcc_bootstrap.c"
 case 81: 
 var $253=(($sv+8)|0); //@line 7923 "tcc_bootstrap.c"
 var $254=HEAP16[(($253)>>1)]; //@line 7923 "tcc_bootstrap.c"
 var $255=($254&65535); //@line 7923 "tcc_bootstrap.c"
 var $256=$255&256; //@line 7923 "tcc_bootstrap.c"
 var $257=($256|0)!=0; //@line 7923 "tcc_bootstrap.c"
 if($257){label=82;break;}else{var $264=0;label=83;break;} //@line 7923 "tcc_bootstrap.c"
 case 82: 
 var $259=(($type)|0); //@line 7923 "tcc_bootstrap.c"
 var $260=HEAP32[(($259)>>2)]; //@line 7923 "tcc_bootstrap.c"
 var $261=$260&15; //@line 7923 "tcc_bootstrap.c"
 var $262=7==($261|0); //@line 7923 "tcc_bootstrap.c"
 var $264=$262;label=83;break;
 case 83: 
 var $264;
 var $265=($264&1);
 $islv=$265;
 var $266=$c; //@line 7924 "tcc_bootstrap.c"
 var $267=($266|0)<0; //@line 7924 "tcc_bootstrap.c"
 var $268=($267&1); //@line 7924 "tcc_bootstrap.c"
 var $269=$islv; //@line 7924 "tcc_bootstrap.c"
 var $270=$269&$268; //@line 7924 "tcc_bootstrap.c"
 $islv=$270; //@line 7924 "tcc_bootstrap.c"
 var $271=$c; //@line 7925 "tcc_bootstrap.c"
 var $272=($271|0)!=1; //@line 7925 "tcc_bootstrap.c"
 if($272){label=84;break;}else{label=90;break;} //@line 7925 "tcc_bootstrap.c"
 case 84: 
 _gen_cast($type); //@line 7926 "tcc_bootstrap.c"
 var $274=$islv; //@line 7927 "tcc_bootstrap.c"
 var $275=($274|0)!=0; //@line 7927 "tcc_bootstrap.c"
 if($275){label=85;break;}else{label=86;break;} //@line 7927 "tcc_bootstrap.c"
 case 85: 
 var $277=HEAP32[((9288)>>2)]; //@line 7928 "tcc_bootstrap.c"
 var $278=(($277)|0); //@line 7928 "tcc_bootstrap.c"
 _mk_pointer($278); //@line 7928 "tcc_bootstrap.c"
 _gaddrof(); //@line 7929 "tcc_bootstrap.c"
 label=89;break; //@line 7930 "tcc_bootstrap.c"
 case 86: 
 var $280=HEAP32[((9288)>>2)]; //@line 7930 "tcc_bootstrap.c"
 var $281=(($280)|0); //@line 7930 "tcc_bootstrap.c"
 var $282=(($281)|0); //@line 7930 "tcc_bootstrap.c"
 var $283=HEAP32[(($282)>>2)]; //@line 7930 "tcc_bootstrap.c"
 var $284=$283&15; //@line 7930 "tcc_bootstrap.c"
 var $285=7==($284|0); //@line 7930 "tcc_bootstrap.c"
 if($285){label=87;break;}else{label=88;break;} //@line 7930 "tcc_bootstrap.c"
 case 87: 
 _gaddrof(); //@line 7931 "tcc_bootstrap.c"
 label=88;break; //@line 7931 "tcc_bootstrap.c"
 case 88: 
 label=89;break;
 case 89: 
 label=90;break; //@line 7932 "tcc_bootstrap.c"
 case 90: 
 var $290=(($type)|0); //@line 7933 "tcc_bootstrap.c"
 var $291=HEAP32[(($290)>>2)]; //@line 7933 "tcc_bootstrap.c"
 var $292=_is_float($291); //@line 7933 "tcc_bootstrap.c"
 var $293=($292|0)!=0; //@line 7933 "tcc_bootstrap.c"
 if($293){label=91;break;}else{label=92;break;} //@line 7933 "tcc_bootstrap.c"
 case 91: 
 $rc=2; //@line 7934 "tcc_bootstrap.c"
 label=95;break; //@line 7935 "tcc_bootstrap.c"
 case 92: 
 var $296=(($type)|0); //@line 7935 "tcc_bootstrap.c"
 var $297=HEAP32[(($296)>>2)]; //@line 7935 "tcc_bootstrap.c"
 var $298=$297&15; //@line 7935 "tcc_bootstrap.c"
 var $299=($298|0)==4; //@line 7935 "tcc_bootstrap.c"
 if($299){label=93;break;}else{label=94;break;} //@line 7935 "tcc_bootstrap.c"
 case 93: 
 $rc=4; //@line 7936 "tcc_bootstrap.c"
 label=94;break; //@line 7937 "tcc_bootstrap.c"
 case 94: 
 label=95;break;
 case 95: 
 $r2=0; //@line 7938 "tcc_bootstrap.c"
 $tt=0; //@line 7938 "tcc_bootstrap.c"
 var $303=$c; //@line 7939 "tcc_bootstrap.c"
 var $304=($303|0)<0; //@line 7939 "tcc_bootstrap.c"
 if($304){label=96;break;}else{label=97;break;} //@line 7939 "tcc_bootstrap.c"
 case 96: 
 var $306=$rc; //@line 7940 "tcc_bootstrap.c"
 var $307=_gv($306); //@line 7940 "tcc_bootstrap.c"
 $r2=$307; //@line 7940 "tcc_bootstrap.c"
 var $308=_gjmp(0); //@line 7941 "tcc_bootstrap.c"
 $tt=$308; //@line 7941 "tcc_bootstrap.c"
 label=97;break; //@line 7942 "tcc_bootstrap.c"
 case 97: 
 var $310=$u; //@line 7943 "tcc_bootstrap.c"
 _gsym($310); //@line 7943 "tcc_bootstrap.c"
 var $311=$c; //@line 7944 "tcc_bootstrap.c"
 var $312=($311|0)!=0; //@line 7944 "tcc_bootstrap.c"
 if($312){label=98;break;}else{label=104;break;} //@line 7944 "tcc_bootstrap.c"
 case 98: 
 var $314=HEAP32[((9288)>>2)]; //@line 7945 "tcc_bootstrap.c"
 var $315=$314; //@line 7945 "tcc_bootstrap.c"
 var $316=$sv; //@line 7945 "tcc_bootstrap.c"
 assert(40 % 1 === 0);HEAP32[(($315)>>2)]=HEAP32[(($316)>>2)];HEAP32[((($315)+(4))>>2)]=HEAP32[((($316)+(4))>>2)];HEAP32[((($315)+(8))>>2)]=HEAP32[((($316)+(8))>>2)];HEAP32[((($315)+(12))>>2)]=HEAP32[((($316)+(12))>>2)];HEAP32[((($315)+(16))>>2)]=HEAP32[((($316)+(16))>>2)];HEAP32[((($315)+(20))>>2)]=HEAP32[((($316)+(20))>>2)];HEAP32[((($315)+(24))>>2)]=HEAP32[((($316)+(24))>>2)];HEAP32[((($315)+(28))>>2)]=HEAP32[((($316)+(28))>>2)];HEAP32[((($315)+(32))>>2)]=HEAP32[((($316)+(32))>>2)];HEAP32[((($315)+(36))>>2)]=HEAP32[((($316)+(36))>>2)]; //@line 7945 "tcc_bootstrap.c"
 _gen_cast($type); //@line 7946 "tcc_bootstrap.c"
 var $317=$islv; //@line 7947 "tcc_bootstrap.c"
 var $318=($317|0)!=0; //@line 7947 "tcc_bootstrap.c"
 if($318){label=99;break;}else{label=100;break;} //@line 7947 "tcc_bootstrap.c"
 case 99: 
 var $320=HEAP32[((9288)>>2)]; //@line 7948 "tcc_bootstrap.c"
 var $321=(($320)|0); //@line 7948 "tcc_bootstrap.c"
 _mk_pointer($321); //@line 7948 "tcc_bootstrap.c"
 _gaddrof(); //@line 7949 "tcc_bootstrap.c"
 label=103;break; //@line 7950 "tcc_bootstrap.c"
 case 100: 
 var $323=HEAP32[((9288)>>2)]; //@line 7950 "tcc_bootstrap.c"
 var $324=(($323)|0); //@line 7950 "tcc_bootstrap.c"
 var $325=(($324)|0); //@line 7950 "tcc_bootstrap.c"
 var $326=HEAP32[(($325)>>2)]; //@line 7950 "tcc_bootstrap.c"
 var $327=$326&15; //@line 7950 "tcc_bootstrap.c"
 var $328=7==($327|0); //@line 7950 "tcc_bootstrap.c"
 if($328){label=101;break;}else{label=102;break;} //@line 7950 "tcc_bootstrap.c"
 case 101: 
 _gaddrof(); //@line 7951 "tcc_bootstrap.c"
 label=102;break; //@line 7951 "tcc_bootstrap.c"
 case 102: 
 label=103;break;
 case 103: 
 label=104;break; //@line 7952 "tcc_bootstrap.c"
 case 104: 
 var $333=$c; //@line 7953 "tcc_bootstrap.c"
 var $334=($333|0)<0; //@line 7953 "tcc_bootstrap.c"
 if($334){label=105;break;}else{label=108;break;} //@line 7953 "tcc_bootstrap.c"
 case 105: 
 var $336=$rc; //@line 7954 "tcc_bootstrap.c"
 var $337=_gv($336); //@line 7954 "tcc_bootstrap.c"
 $r1=$337; //@line 7954 "tcc_bootstrap.c"
 var $338=$r2; //@line 7955 "tcc_bootstrap.c"
 var $339=$r1; //@line 7955 "tcc_bootstrap.c"
 var $340=(($type)|0); //@line 7955 "tcc_bootstrap.c"
 var $341=HEAP32[(($340)>>2)]; //@line 7955 "tcc_bootstrap.c"
 _move_reg($338,$339,$341); //@line 7955 "tcc_bootstrap.c"
 var $342=$r2; //@line 7956 "tcc_bootstrap.c"
 var $343=(($342)&65535); //@line 7956 "tcc_bootstrap.c"
 var $344=HEAP32[((9288)>>2)]; //@line 7956 "tcc_bootstrap.c"
 var $345=(($344+8)|0); //@line 7956 "tcc_bootstrap.c"
 HEAP16[(($345)>>1)]=$343; //@line 7956 "tcc_bootstrap.c"
 var $346=$tt; //@line 7957 "tcc_bootstrap.c"
 _gsym($346); //@line 7957 "tcc_bootstrap.c"
 var $347=$islv; //@line 7958 "tcc_bootstrap.c"
 var $348=($347|0)!=0; //@line 7958 "tcc_bootstrap.c"
 if($348){label=106;break;}else{label=107;break;} //@line 7958 "tcc_bootstrap.c"
 case 106: 
 _indir(); //@line 7959 "tcc_bootstrap.c"
 label=107;break; //@line 7959 "tcc_bootstrap.c"
 case 107: 
 label=108;break; //@line 7960 "tcc_bootstrap.c"
 case 108: 
 label=109;break; //@line 7962 "tcc_bootstrap.c"
 case 109: 
 STACKTOP=sp;return; //@line 7963 "tcc_bootstrap.c"
  default: assert(0, "bad label: " + label);
 }

}


function _expr_lor(){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $t;
 _expr_land(); //@line 7786 "tcc_bootstrap.c"
 var $1=HEAP32[((10472)>>2)]; //@line 7787 "tcc_bootstrap.c"
 var $2=($1|0)==161; //@line 7787 "tcc_bootstrap.c"
 if($2){label=2;break;}else{label=23;break;} //@line 7787 "tcc_bootstrap.c"
 case 2: 
 $t=0; //@line 7788 "tcc_bootstrap.c"
 label=3;break; //@line 7789 "tcc_bootstrap.c"
 case 3: 
 var $5=HEAP32[((9288)>>2)]; //@line 7790 "tcc_bootstrap.c"
 var $6=(($5+8)|0); //@line 7790 "tcc_bootstrap.c"
 var $7=HEAP16[(($6)>>1)]; //@line 7790 "tcc_bootstrap.c"
 var $8=($7&65535); //@line 7790 "tcc_bootstrap.c"
 var $9=$8&831; //@line 7790 "tcc_bootstrap.c"
 var $10=($9|0)==48; //@line 7790 "tcc_bootstrap.c"
 if($10){label=4;break;}else{label=13;break;} //@line 7790 "tcc_bootstrap.c"
 case 4: 
 _gen_cast_s(11); //@line 7791 "tcc_bootstrap.c"
 var $12=HEAP32[((9288)>>2)]; //@line 7792 "tcc_bootstrap.c"
 var $13=(($12+16)|0); //@line 7792 "tcc_bootstrap.c"
 var $14=$13; //@line 7792 "tcc_bootstrap.c"
 var $ld$0$0=(($14)|0);
 var $15$0=HEAP32[(($ld$0$0)>>2)];
 var $ld$1$1=(($14+4)|0);
 var $15$1=HEAP32[(($ld$1$1)>>2)];
 var $$etemp$2$0=0;
 var $$etemp$2$1=0;
 var $16=(($15$0|0) != ($$etemp$2$0|0)) | (($15$1|0) != ($$etemp$2$1|0)); //@line 7792 "tcc_bootstrap.c"
 if($16){label=6;break;}else{label=5;break;} //@line 7792 "tcc_bootstrap.c"
 case 5: 
 _vpop(); //@line 7793 "tcc_bootstrap.c"
 label=12;break; //@line 7794 "tcc_bootstrap.c"
 case 6: 
 var $19=HEAP32[((10616)>>2)]; //@line 7795 "tcc_bootstrap.c"
 var $20=((($19)+(1))|0); //@line 7795 "tcc_bootstrap.c"
 HEAP32[((10616)>>2)]=$20; //@line 7795 "tcc_bootstrap.c"
 label=7;break; //@line 7796 "tcc_bootstrap.c"
 case 7: 
 var $22=HEAP32[((10472)>>2)]; //@line 7796 "tcc_bootstrap.c"
 var $23=($22|0)==161; //@line 7796 "tcc_bootstrap.c"
 if($23){label=8;break;}else{label=9;break;} //@line 7796 "tcc_bootstrap.c"
 case 8: 
 _next(); //@line 7797 "tcc_bootstrap.c"
 _expr_land(); //@line 7798 "tcc_bootstrap.c"
 _vpop(); //@line 7799 "tcc_bootstrap.c"
 label=7;break; //@line 7800 "tcc_bootstrap.c"
 case 9: 
 var $26=HEAP32[((10616)>>2)]; //@line 7801 "tcc_bootstrap.c"
 var $27=((($26)-(1))|0); //@line 7801 "tcc_bootstrap.c"
 HEAP32[((10616)>>2)]=$27; //@line 7801 "tcc_bootstrap.c"
 var $28=$t; //@line 7802 "tcc_bootstrap.c"
 var $29=($28|0)!=0; //@line 7802 "tcc_bootstrap.c"
 if($29){label=10;break;}else{label=11;break;} //@line 7802 "tcc_bootstrap.c"
 case 10: 
 var $31=$t; //@line 7803 "tcc_bootstrap.c"
 _gsym($31); //@line 7803 "tcc_bootstrap.c"
 label=11;break; //@line 7803 "tcc_bootstrap.c"
 case 11: 
 _gen_cast_s(3); //@line 7804 "tcc_bootstrap.c"
 label=22;break; //@line 7805 "tcc_bootstrap.c"
 case 12: 
 label=16;break; //@line 7807 "tcc_bootstrap.c"
 case 13: 
 var $35=$t; //@line 7808 "tcc_bootstrap.c"
 var $36=($35|0)!=0; //@line 7808 "tcc_bootstrap.c"
 if($36){label=15;break;}else{label=14;break;} //@line 7808 "tcc_bootstrap.c"
 case 14: 
 _save_regs(1); //@line 7809 "tcc_bootstrap.c"
 label=15;break; //@line 7809 "tcc_bootstrap.c"
 case 15: 
 var $39=$t; //@line 7810 "tcc_bootstrap.c"
 var $40=_gvtst(0,$39); //@line 7810 "tcc_bootstrap.c"
 $t=$40; //@line 7810 "tcc_bootstrap.c"
 label=16;break;
 case 16: 
 var $42=HEAP32[((10472)>>2)]; //@line 7812 "tcc_bootstrap.c"
 var $43=($42|0)!=161; //@line 7812 "tcc_bootstrap.c"
 if($43){label=17;break;}else{label=21;break;} //@line 7812 "tcc_bootstrap.c"
 case 17: 
 var $45=$t; //@line 7813 "tcc_bootstrap.c"
 var $46=($45|0)!=0; //@line 7813 "tcc_bootstrap.c"
 if($46){label=18;break;}else{label=19;break;} //@line 7813 "tcc_bootstrap.c"
 case 18: 
 var $48=$t; //@line 7814 "tcc_bootstrap.c"
 _vseti(52,$48); //@line 7814 "tcc_bootstrap.c"
 label=20;break; //@line 7814 "tcc_bootstrap.c"
 case 19: 
 _vpushi(0); //@line 7816 "tcc_bootstrap.c"
 label=20;break;
 case 20: 
 label=22;break; //@line 7817 "tcc_bootstrap.c"
 case 21: 
 _next(); //@line 7819 "tcc_bootstrap.c"
 _expr_land(); //@line 7820 "tcc_bootstrap.c"
 label=3;break; //@line 7821 "tcc_bootstrap.c"
 case 22: 
 label=23;break; //@line 7822 "tcc_bootstrap.c"
 case 23: 
 STACKTOP=sp;return; //@line 7823 "tcc_bootstrap.c"
  default: assert(0, "bad label: " + label);
 }

}


function _condition_3way(){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $c;
 $c=-1; //@line 7826 "tcc_bootstrap.c"
 var $1=HEAP32[((9288)>>2)]; //@line 7827 "tcc_bootstrap.c"
 var $2=(($1+8)|0); //@line 7827 "tcc_bootstrap.c"
 var $3=HEAP16[(($2)>>1)]; //@line 7827 "tcc_bootstrap.c"
 var $4=($3&65535); //@line 7827 "tcc_bootstrap.c"
 var $5=$4&319; //@line 7827 "tcc_bootstrap.c"
 var $6=($5|0)==48; //@line 7827 "tcc_bootstrap.c"
 if($6){label=2;break;}else{label=5;break;} //@line 7827 "tcc_bootstrap.c"
 case 2: 
 var $8=HEAP32[((9288)>>2)]; //@line 7827 "tcc_bootstrap.c"
 var $9=(($8+8)|0); //@line 7827 "tcc_bootstrap.c"
 var $10=HEAP16[(($9)>>1)]; //@line 7827 "tcc_bootstrap.c"
 var $11=($10&65535); //@line 7827 "tcc_bootstrap.c"
 var $12=$11&512; //@line 7827 "tcc_bootstrap.c"
 var $13=($12|0)!=0; //@line 7827 "tcc_bootstrap.c"
 if($13){label=3;break;}else{label=4;break;} //@line 7827 "tcc_bootstrap.c"
 case 3: 
 var $15=HEAP32[((9288)>>2)]; //@line 7827 "tcc_bootstrap.c"
 var $16=(($15+32)|0); //@line 7827 "tcc_bootstrap.c"
 var $17=HEAP32[(($16)>>2)]; //@line 7827 "tcc_bootstrap.c"
 var $18=(($17+6)|0); //@line 7827 "tcc_bootstrap.c"
 var $19=$18; //@line 7827 "tcc_bootstrap.c"
 var $20=HEAP16[(($19)>>1)]; //@line 7827 "tcc_bootstrap.c"
 var $21=($20&65535)>>>6; //@line 7827 "tcc_bootstrap.c"
 var $22=$21&1; //@line 7827 "tcc_bootstrap.c"
 var $23=(($22<<16)>>16)!=0; //@line 7827 "tcc_bootstrap.c"
 if($23){label=5;break;}else{label=4;break;} //@line 7827 "tcc_bootstrap.c"
 case 4: 
 _vdup(); //@line 7829 "tcc_bootstrap.c"
 _gen_cast_s(11); //@line 7830 "tcc_bootstrap.c"
 var $25=HEAP32[((9288)>>2)]; //@line 7831 "tcc_bootstrap.c"
 var $26=(($25+16)|0); //@line 7831 "tcc_bootstrap.c"
 var $27=$26; //@line 7831 "tcc_bootstrap.c"
 var $ld$0$0=(($27)|0);
 var $28$0=HEAP32[(($ld$0$0)>>2)];
 var $ld$1$1=(($27+4)|0);
 var $28$1=HEAP32[(($ld$1$1)>>2)];
 var $29$0=$28$0;
 var $29=$29$0;
 $c=$29; //@line 7831 "tcc_bootstrap.c"
 _vpop(); //@line 7832 "tcc_bootstrap.c"
 label=5;break; //@line 7833 "tcc_bootstrap.c"
 case 5: 
 var $31=$c; //@line 7834 "tcc_bootstrap.c"
 STACKTOP=sp;return $31; //@line 7834 "tcc_bootstrap.c"
  default: assert(0, "bad label: " + label);
 }

}


function _is_float($t){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $bt;
 $1=$t;
 var $2=$1; //@line 4114 "tcc_bootstrap.c"
 var $3=$2&15; //@line 4114 "tcc_bootstrap.c"
 $bt=$3; //@line 4114 "tcc_bootstrap.c"
 var $4=$bt; //@line 4115 "tcc_bootstrap.c"
 var $5=($4|0)==10; //@line 4115 "tcc_bootstrap.c"
 if($5){var $16=1;label=5;break;}else{label=2;break;} //@line 4115 "tcc_bootstrap.c"
 case 2: 
 var $7=$bt; //@line 4115 "tcc_bootstrap.c"
 var $8=($7|0)==9; //@line 4115 "tcc_bootstrap.c"
 if($8){var $16=1;label=5;break;}else{label=3;break;} //@line 4115 "tcc_bootstrap.c"
 case 3: 
 var $10=$bt; //@line 4115 "tcc_bootstrap.c"
 var $11=($10|0)==8; //@line 4115 "tcc_bootstrap.c"
 if($11){var $16=1;label=5;break;}else{label=4;break;} //@line 4115 "tcc_bootstrap.c"
 case 4: 
 var $13=$bt; //@line 4115 "tcc_bootstrap.c"
 var $14=($13|0)==14; //@line 4115 "tcc_bootstrap.c"
 var $16=$14;label=5;break; //@line 4115 "tcc_bootstrap.c"
 case 5: 
 var $16;
 var $17=($16&1); //@line 4115 "tcc_bootstrap.c"
 STACKTOP=sp;return $17; //@line 4115 "tcc_bootstrap.c"
  default: assert(0, "bad label: " + label);
 }

}


function _gv($rc){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+24)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $r;
 var $bit_pos;
 var $bit_size;
 var $size;
 var $align=sp;
 var $rc2;
 var $type=(sp)+(8);
 var $bits;
 var $offset;
 var $addr_type;
 var $load_size;
 var $load_type;
 var $ll=(sp)+(16);
 var $r2;
 var $original_type;
 var $t1;
 var $t;
 $1=$rc;
 var $2=HEAP32[((9288)>>2)]; //@line 4793 "tcc_bootstrap.c"
 var $3=(($2)|0); //@line 4793 "tcc_bootstrap.c"
 var $4=(($3)|0); //@line 4793 "tcc_bootstrap.c"
 var $5=HEAP32[(($4)>>2)]; //@line 4793 "tcc_bootstrap.c"
 var $6=$5&128; //@line 4793 "tcc_bootstrap.c"
 var $7=($6|0)!=0; //@line 4793 "tcc_bootstrap.c"
 if($7){label=2;break;}else{label=11;break;} //@line 4793 "tcc_bootstrap.c"
 case 2: 
 var $9=HEAP32[((9288)>>2)]; //@line 4795 "tcc_bootstrap.c"
 var $10=(($9)|0); //@line 4795 "tcc_bootstrap.c"
 var $11=(($10)|0); //@line 4795 "tcc_bootstrap.c"
 var $12=HEAP32[(($11)>>2)]; //@line 4795 "tcc_bootstrap.c"
 var $13=_BIT_POS($12); //@line 4795 "tcc_bootstrap.c"
 $bit_pos=$13; //@line 4795 "tcc_bootstrap.c"
 var $14=HEAP32[((9288)>>2)]; //@line 4796 "tcc_bootstrap.c"
 var $15=(($14)|0); //@line 4796 "tcc_bootstrap.c"
 var $16=(($15)|0); //@line 4796 "tcc_bootstrap.c"
 var $17=HEAP32[(($16)>>2)]; //@line 4796 "tcc_bootstrap.c"
 var $18=_BIT_SIZE($17); //@line 4796 "tcc_bootstrap.c"
 $bit_size=$18; //@line 4796 "tcc_bootstrap.c"
 var $19=HEAP32[((9288)>>2)]; //@line 4797 "tcc_bootstrap.c"
 var $20=(($19)|0); //@line 4797 "tcc_bootstrap.c"
 var $21=(($20)|0); //@line 4797 "tcc_bootstrap.c"
 var $22=HEAP32[(($21)>>2)]; //@line 4797 "tcc_bootstrap.c"
 var $23=$22&1048447; //@line 4797 "tcc_bootstrap.c"
 HEAP32[(($21)>>2)]=$23; //@line 4797 "tcc_bootstrap.c"
 var $24=(($type+4)|0); //@line 4798 "tcc_bootstrap.c"
 HEAP32[(($24)>>2)]=0; //@line 4798 "tcc_bootstrap.c"
 var $25=HEAP32[((9288)>>2)]; //@line 4799 "tcc_bootstrap.c"
 var $26=(($25)|0); //@line 4799 "tcc_bootstrap.c"
 var $27=(($26)|0); //@line 4799 "tcc_bootstrap.c"
 var $28=HEAP32[(($27)>>2)]; //@line 4799 "tcc_bootstrap.c"
 var $29=$28&16; //@line 4799 "tcc_bootstrap.c"
 var $30=(($type)|0); //@line 4799 "tcc_bootstrap.c"
 HEAP32[(($30)>>2)]=$29; //@line 4799 "tcc_bootstrap.c"
 var $31=HEAP32[((9288)>>2)]; //@line 4800 "tcc_bootstrap.c"
 var $32=(($31)|0); //@line 4800 "tcc_bootstrap.c"
 var $33=(($32)|0); //@line 4800 "tcc_bootstrap.c"
 var $34=HEAP32[(($33)>>2)]; //@line 4800 "tcc_bootstrap.c"
 var $35=$34&15; //@line 4800 "tcc_bootstrap.c"
 var $36=($35|0)==11; //@line 4800 "tcc_bootstrap.c"
 if($36){label=3;break;}else{label=4;break;} //@line 4800 "tcc_bootstrap.c"
 case 3: 
 var $38=(($type)|0); //@line 4801 "tcc_bootstrap.c"
 var $39=HEAP32[(($38)>>2)]; //@line 4801 "tcc_bootstrap.c"
 var $40=$39|16; //@line 4801 "tcc_bootstrap.c"
 HEAP32[(($38)>>2)]=$40; //@line 4801 "tcc_bootstrap.c"
 label=4;break; //@line 4801 "tcc_bootstrap.c"
 case 4: 
 var $42=HEAP32[((9288)>>2)]; //@line 4802 "tcc_bootstrap.c"
 var $43=$bit_pos; //@line 4802 "tcc_bootstrap.c"
 var $44=$bit_size; //@line 4802 "tcc_bootstrap.c"
 var $45=_adjust_bf($42,$43,$44); //@line 4802 "tcc_bootstrap.c"
 $r=$45; //@line 4802 "tcc_bootstrap.c"
 var $46=HEAP32[((9288)>>2)]; //@line 4803 "tcc_bootstrap.c"
 var $47=(($46)|0); //@line 4803 "tcc_bootstrap.c"
 var $48=(($47)|0); //@line 4803 "tcc_bootstrap.c"
 var $49=HEAP32[(($48)>>2)]; //@line 4803 "tcc_bootstrap.c"
 var $50=$49&15; //@line 4803 "tcc_bootstrap.c"
 var $51=($50|0)==4; //@line 4803 "tcc_bootstrap.c"
 if($51){label=5;break;}else{label=6;break;} //@line 4803 "tcc_bootstrap.c"
 case 5: 
 var $53=(($type)|0); //@line 4804 "tcc_bootstrap.c"
 var $54=HEAP32[(($53)>>2)]; //@line 4804 "tcc_bootstrap.c"
 var $55=$54|4; //@line 4804 "tcc_bootstrap.c"
 HEAP32[(($53)>>2)]=$55; //@line 4804 "tcc_bootstrap.c"
 label=7;break; //@line 4804 "tcc_bootstrap.c"
 case 6: 
 var $57=(($type)|0); //@line 4806 "tcc_bootstrap.c"
 var $58=HEAP32[(($57)>>2)]; //@line 4806 "tcc_bootstrap.c"
 var $59=$58|3; //@line 4806 "tcc_bootstrap.c"
 HEAP32[(($57)>>2)]=$59; //@line 4806 "tcc_bootstrap.c"
 label=7;break;
 case 7: 
 var $61=$r; //@line 4807 "tcc_bootstrap.c"
 var $62=($61|0)==7; //@line 4807 "tcc_bootstrap.c"
 if($62){label=8;break;}else{label=9;break;} //@line 4807 "tcc_bootstrap.c"
 case 8: 
 var $64=$bit_pos; //@line 4808 "tcc_bootstrap.c"
 var $65=$bit_size; //@line 4808 "tcc_bootstrap.c"
 _load_packed_bf($type,$64,$65); //@line 4808 "tcc_bootstrap.c"
 label=10;break; //@line 4809 "tcc_bootstrap.c"
 case 9: 
 var $67=(($type)|0); //@line 4810 "tcc_bootstrap.c"
 var $68=HEAP32[(($67)>>2)]; //@line 4810 "tcc_bootstrap.c"
 var $69=$68&15; //@line 4810 "tcc_bootstrap.c"
 var $70=($69|0)==4; //@line 4810 "tcc_bootstrap.c"
 var $71=($70?64:32); //@line 4810 "tcc_bootstrap.c"
 $bits=$71; //@line 4810 "tcc_bootstrap.c"
 _gen_cast($type); //@line 4811 "tcc_bootstrap.c"
 var $72=$bits; //@line 4812 "tcc_bootstrap.c"
 var $73=$bit_pos; //@line 4812 "tcc_bootstrap.c"
 var $74=$bit_size; //@line 4812 "tcc_bootstrap.c"
 var $75=((($73)+($74))|0); //@line 4812 "tcc_bootstrap.c"
 var $76=((($72)-($75))|0); //@line 4812 "tcc_bootstrap.c"
 _vpushi($76); //@line 4812 "tcc_bootstrap.c"
 _gen_op(1); //@line 4813 "tcc_bootstrap.c"
 var $77=$bits; //@line 4814 "tcc_bootstrap.c"
 var $78=$bit_size; //@line 4814 "tcc_bootstrap.c"
 var $79=((($77)-($78))|0); //@line 4814 "tcc_bootstrap.c"
 _vpushi($79); //@line 4814 "tcc_bootstrap.c"
 _gen_op(2); //@line 4815 "tcc_bootstrap.c"
 label=10;break;
 case 10: 
 var $81=$1; //@line 4817 "tcc_bootstrap.c"
 var $82=_gv($81); //@line 4817 "tcc_bootstrap.c"
 $r=$82; //@line 4817 "tcc_bootstrap.c"
 label=45;break; //@line 4818 "tcc_bootstrap.c"
 case 11: 
 var $84=HEAP32[((9288)>>2)]; //@line 4819 "tcc_bootstrap.c"
 var $85=(($84)|0); //@line 4819 "tcc_bootstrap.c"
 var $86=(($85)|0); //@line 4819 "tcc_bootstrap.c"
 var $87=HEAP32[(($86)>>2)]; //@line 4819 "tcc_bootstrap.c"
 var $88=_is_float($87); //@line 4819 "tcc_bootstrap.c"
 var $89=($88|0)!=0; //@line 4819 "tcc_bootstrap.c"
 if($89){label=12;break;}else{label=16;break;} //@line 4819 "tcc_bootstrap.c"
 case 12: 
 var $91=HEAP32[((9288)>>2)]; //@line 4819 "tcc_bootstrap.c"
 var $92=(($91+8)|0); //@line 4819 "tcc_bootstrap.c"
 var $93=HEAP16[(($92)>>1)]; //@line 4819 "tcc_bootstrap.c"
 var $94=($93&65535); //@line 4819 "tcc_bootstrap.c"
 var $95=$94&319; //@line 4819 "tcc_bootstrap.c"
 var $96=($95|0)==48; //@line 4819 "tcc_bootstrap.c"
 if($96){label=13;break;}else{label=16;break;} //@line 4819 "tcc_bootstrap.c"
 case 13: 
 var $98=HEAP32[((9288)>>2)]; //@line 4822 "tcc_bootstrap.c"
 var $99=(($98)|0); //@line 4822 "tcc_bootstrap.c"
 var $100=_type_size($99,$align); //@line 4822 "tcc_bootstrap.c"
 $size=$100; //@line 4822 "tcc_bootstrap.c"
 var $101=HEAP32[((10616)>>2)]; //@line 4823 "tcc_bootstrap.c"
 var $102=($101|0)>0; //@line 4823 "tcc_bootstrap.c"
 if($102){label=14;break;}else{label=15;break;} //@line 4823 "tcc_bootstrap.c"
 case 14: 
 $size=0; //@line 4824 "tcc_bootstrap.c"
 HEAP32[(($align)>>2)]=1; //@line 4824 "tcc_bootstrap.c"
 label=15;break; //@line 4824 "tcc_bootstrap.c"
 case 15: 
 var $105=HEAP32[((76664)>>2)]; //@line 4825 "tcc_bootstrap.c"
 var $106=$size; //@line 4825 "tcc_bootstrap.c"
 var $107=HEAP32[(($align)>>2)]; //@line 4825 "tcc_bootstrap.c"
 var $108=_section_add($105,$106,$107); //@line 4825 "tcc_bootstrap.c"
 $offset=$108; //@line 4825 "tcc_bootstrap.c"
 var $109=HEAP32[((9288)>>2)]; //@line 4826 "tcc_bootstrap.c"
 var $110=(($109)|0); //@line 4826 "tcc_bootstrap.c"
 var $111=HEAP32[((76664)>>2)]; //@line 4826 "tcc_bootstrap.c"
 var $112=$offset; //@line 4826 "tcc_bootstrap.c"
 var $113=$size; //@line 4826 "tcc_bootstrap.c"
 _vpush_ref($110,$111,$112,$113); //@line 4826 "tcc_bootstrap.c"
 _vswap(); //@line 4827 "tcc_bootstrap.c"
 var $114=HEAP32[((9288)>>2)]; //@line 4828 "tcc_bootstrap.c"
 var $115=(($114)|0); //@line 4828 "tcc_bootstrap.c"
 var $116=HEAP32[((76664)>>2)]; //@line 4828 "tcc_bootstrap.c"
 var $117=$offset; //@line 4828 "tcc_bootstrap.c"
 _init_putv($115,$116,$117); //@line 4828 "tcc_bootstrap.c"
 var $118=HEAP32[((9288)>>2)]; //@line 4829 "tcc_bootstrap.c"
 var $119=(($118+8)|0); //@line 4829 "tcc_bootstrap.c"
 var $120=HEAP16[(($119)>>1)]; //@line 4829 "tcc_bootstrap.c"
 var $121=($120&65535); //@line 4829 "tcc_bootstrap.c"
 var $122=$121|256; //@line 4829 "tcc_bootstrap.c"
 var $123=(($122)&65535); //@line 4829 "tcc_bootstrap.c"
 HEAP16[(($119)>>1)]=$123; //@line 4829 "tcc_bootstrap.c"
 label=16;break; //@line 4830 "tcc_bootstrap.c"
 case 16: 
 var $125=HEAP32[((9288)>>2)]; //@line 4831 "tcc_bootstrap.c"
 var $126=(($125+8)|0); //@line 4831 "tcc_bootstrap.c"
 var $127=HEAP16[(($126)>>1)]; //@line 4831 "tcc_bootstrap.c"
 var $128=($127&65535); //@line 4831 "tcc_bootstrap.c"
 var $129=$128&63; //@line 4831 "tcc_bootstrap.c"
 $r=$129; //@line 4831 "tcc_bootstrap.c"
 var $130=$1; //@line 4832 "tcc_bootstrap.c"
 var $131=$130&2; //@line 4832 "tcc_bootstrap.c"
 var $132=($131|0)!=0; //@line 4832 "tcc_bootstrap.c"
 var $133=($132?2:1); //@line 4832 "tcc_bootstrap.c"
 $rc2=$133; //@line 4832 "tcc_bootstrap.c"
 var $134=$1; //@line 4833 "tcc_bootstrap.c"
 var $135=($134|0)==4; //@line 4833 "tcc_bootstrap.c"
 if($135){label=17;break;}else{label=18;break;} //@line 4833 "tcc_bootstrap.c"
 case 17: 
 $rc2=32; //@line 4834 "tcc_bootstrap.c"
 label=18;break; //@line 4834 "tcc_bootstrap.c"
 case 18: 
 var $138=$r; //@line 4835 "tcc_bootstrap.c"
 var $139=($138|0)>=48; //@line 4835 "tcc_bootstrap.c"
 if($139){label=23;break;}else{label=19;break;} //@line 4835 "tcc_bootstrap.c"
 case 19: 
 var $141=HEAP32[((9288)>>2)]; //@line 4835 "tcc_bootstrap.c"
 var $142=(($141+8)|0); //@line 4835 "tcc_bootstrap.c"
 var $143=HEAP16[(($142)>>1)]; //@line 4835 "tcc_bootstrap.c"
 var $144=($143&65535); //@line 4835 "tcc_bootstrap.c"
 var $145=$144&256; //@line 4835 "tcc_bootstrap.c"
 var $146=($145|0)!=0; //@line 4835 "tcc_bootstrap.c"
 if($146){label=23;break;}else{label=20;break;} //@line 4835 "tcc_bootstrap.c"
 case 20: 
 var $148=$r; //@line 4835 "tcc_bootstrap.c"
 var $149=((2824+($148<<2))|0); //@line 4835 "tcc_bootstrap.c"
 var $150=HEAP32[(($149)>>2)]; //@line 4835 "tcc_bootstrap.c"
 var $151=$1; //@line 4835 "tcc_bootstrap.c"
 var $152=$150&$151; //@line 4835 "tcc_bootstrap.c"
 var $153=($152|0)!=0; //@line 4835 "tcc_bootstrap.c"
 if($153){label=21;break;}else{label=23;break;} //@line 4835 "tcc_bootstrap.c"
 case 21: 
 var $155=HEAP32[((9288)>>2)]; //@line 4835 "tcc_bootstrap.c"
 var $156=(($155)|0); //@line 4835 "tcc_bootstrap.c"
 var $157=(($156)|0); //@line 4835 "tcc_bootstrap.c"
 var $158=HEAP32[(($157)>>2)]; //@line 4835 "tcc_bootstrap.c"
 var $159=$158&15; //@line 4835 "tcc_bootstrap.c"
 var $160=($159|0)==4; //@line 4835 "tcc_bootstrap.c"
 if($160){label=22;break;}else{label=44;break;} //@line 4835 "tcc_bootstrap.c"
 case 22: 
 var $162=HEAP32[((9288)>>2)]; //@line 4835 "tcc_bootstrap.c"
 var $163=(($162+10)|0); //@line 4835 "tcc_bootstrap.c"
 var $164=HEAP16[(($163)>>1)]; //@line 4835 "tcc_bootstrap.c"
 var $165=($164&65535); //@line 4835 "tcc_bootstrap.c"
 var $166=((2824+($165<<2))|0); //@line 4835 "tcc_bootstrap.c"
 var $167=HEAP32[(($166)>>2)]; //@line 4835 "tcc_bootstrap.c"
 var $168=$rc2; //@line 4835 "tcc_bootstrap.c"
 var $169=$167&$168; //@line 4835 "tcc_bootstrap.c"
 var $170=($169|0)!=0; //@line 4835 "tcc_bootstrap.c"
 if($170){label=44;break;}else{label=23;break;} //@line 4835 "tcc_bootstrap.c"
 case 23: 
 var $172=$1; //@line 4841 "tcc_bootstrap.c"
 var $173=_get_reg($172); //@line 4841 "tcc_bootstrap.c"
 $r=$173; //@line 4841 "tcc_bootstrap.c"
 var $174=HEAP32[((9288)>>2)]; //@line 4842 "tcc_bootstrap.c"
 var $175=(($174)|0); //@line 4842 "tcc_bootstrap.c"
 var $176=(($175)|0); //@line 4842 "tcc_bootstrap.c"
 var $177=HEAP32[(($176)>>2)]; //@line 4842 "tcc_bootstrap.c"
 var $178=$177&15; //@line 4842 "tcc_bootstrap.c"
 var $179=($178|0)==4; //@line 4842 "tcc_bootstrap.c"
 if($179){label=24;break;}else{label=31;break;} //@line 4842 "tcc_bootstrap.c"
 case 24: 
 $addr_type=3; //@line 4843 "tcc_bootstrap.c"
 $load_size=4; //@line 4843 "tcc_bootstrap.c"
 $load_type=3; //@line 4843 "tcc_bootstrap.c"
 var $181=HEAP32[((9288)>>2)]; //@line 4846 "tcc_bootstrap.c"
 var $182=(($181)|0); //@line 4846 "tcc_bootstrap.c"
 var $183=(($182)|0); //@line 4846 "tcc_bootstrap.c"
 var $184=HEAP32[(($183)>>2)]; //@line 4846 "tcc_bootstrap.c"
 $original_type=$184; //@line 4846 "tcc_bootstrap.c"
 var $185=HEAP32[((9288)>>2)]; //@line 4847 "tcc_bootstrap.c"
 var $186=(($185+8)|0); //@line 4847 "tcc_bootstrap.c"
 var $187=HEAP16[(($186)>>1)]; //@line 4847 "tcc_bootstrap.c"
 var $188=($187&65535); //@line 4847 "tcc_bootstrap.c"
 var $189=$188&319; //@line 4847 "tcc_bootstrap.c"
 var $190=($189|0)==48; //@line 4847 "tcc_bootstrap.c"
 if($190){label=25;break;}else{label=26;break;} //@line 4847 "tcc_bootstrap.c"
 case 25: 
 var $192=HEAP32[((9288)>>2)]; //@line 4849 "tcc_bootstrap.c"
 var $193=(($192+16)|0); //@line 4849 "tcc_bootstrap.c"
 var $194=$193; //@line 4849 "tcc_bootstrap.c"
 var $ld$0$0=(($194)|0);
 var $195$0=HEAP32[(($ld$0$0)>>2)];
 var $ld$1$1=(($194+4)|0);
 var $195$1=HEAP32[(($ld$1$1)>>2)];
 var $st$2$0=(($ll)|0);
 HEAP32[(($st$2$0)>>2)]=$195$0;
 var $st$3$1=(($ll+4)|0);
 HEAP32[(($st$3$1)>>2)]=$195$1;
 var $ld$4$0=(($ll)|0);
 var $196$0=HEAP32[(($ld$4$0)>>2)];
 var $ld$5$1=(($ll+4)|0);
 var $196$1=HEAP32[(($ld$5$1)>>2)];
 var $197=HEAP32[((9288)>>2)]; //@line 4850 "tcc_bootstrap.c"
 var $198=(($197+16)|0); //@line 4850 "tcc_bootstrap.c"
 var $199=$198; //@line 4850 "tcc_bootstrap.c"
 var $st$6$0=(($199)|0);
 HEAP32[(($st$6$0)>>2)]=$196$0;
 var $st$7$1=(($199+4)|0);
 HEAP32[(($st$7$1)>>2)]=$196$1;
 var $200=$r; //@line 4851 "tcc_bootstrap.c"
 var $201=HEAP32[((9288)>>2)]; //@line 4851 "tcc_bootstrap.c"
 _load($200,$201); //@line 4851 "tcc_bootstrap.c"
 var $202=$r; //@line 4852 "tcc_bootstrap.c"
 var $203=(($202)&65535); //@line 4852 "tcc_bootstrap.c"
 var $204=HEAP32[((9288)>>2)]; //@line 4852 "tcc_bootstrap.c"
 var $205=(($204+8)|0); //@line 4852 "tcc_bootstrap.c"
 HEAP16[(($205)>>1)]=$203; //@line 4852 "tcc_bootstrap.c"
 var $ld$8$0=(($ll)|0);
 var $206$0=HEAP32[(($ld$8$0)>>2)];
 var $ld$9$1=(($ll+4)|0);
 var $206$1=HEAP32[(($ld$9$1)>>2)];
 var $207$0=$206$1;
 var $207$1=0;
 var $208$0=$207$0;
 var $208=$208$0;
 _vpushi($208); //@line 4853 "tcc_bootstrap.c"
 label=30;break; //@line 4854 "tcc_bootstrap.c"
 case 26: 
 var $210=HEAP32[((9288)>>2)]; //@line 4855 "tcc_bootstrap.c"
 var $211=(($210+8)|0); //@line 4855 "tcc_bootstrap.c"
 var $212=HEAP16[(($211)>>1)]; //@line 4855 "tcc_bootstrap.c"
 var $213=($212&65535); //@line 4855 "tcc_bootstrap.c"
 var $214=$213&256; //@line 4855 "tcc_bootstrap.c"
 var $215=($214|0)!=0; //@line 4855 "tcc_bootstrap.c"
 if($215){label=27;break;}else{label=28;break;} //@line 4855 "tcc_bootstrap.c"
 case 27: 
 var $217=HEAP32[((9288)>>2)]; //@line 4856 "tcc_bootstrap.c"
 var $218=(($217+8)|0); //@line 4856 "tcc_bootstrap.c"
 var $219=HEAP16[(($218)>>1)]; //@line 4856 "tcc_bootstrap.c"
 var $220=($219&65535); //@line 4856 "tcc_bootstrap.c"
 _save_reg_upstack($220,1); //@line 4856 "tcc_bootstrap.c"
 var $221=$load_type; //@line 4857 "tcc_bootstrap.c"
 var $222=HEAP32[((9288)>>2)]; //@line 4857 "tcc_bootstrap.c"
 var $223=(($222)|0); //@line 4857 "tcc_bootstrap.c"
 var $224=(($223)|0); //@line 4857 "tcc_bootstrap.c"
 HEAP32[(($224)>>2)]=$221; //@line 4857 "tcc_bootstrap.c"
 var $225=$r; //@line 4858 "tcc_bootstrap.c"
 var $226=HEAP32[((9288)>>2)]; //@line 4858 "tcc_bootstrap.c"
 _load($225,$226); //@line 4858 "tcc_bootstrap.c"
 _vdup(); //@line 4859 "tcc_bootstrap.c"
 var $227=$r; //@line 4860 "tcc_bootstrap.c"
 var $228=(($227)&65535); //@line 4860 "tcc_bootstrap.c"
 var $229=HEAP32[((9288)>>2)]; //@line 4860 "tcc_bootstrap.c"
 var $230=((($229)-(40))|0); //@line 4860 "tcc_bootstrap.c"
 var $231=(($230+8)|0); //@line 4860 "tcc_bootstrap.c"
 HEAP16[(($231)>>1)]=$228; //@line 4860 "tcc_bootstrap.c"
 var $232=$addr_type; //@line 4861 "tcc_bootstrap.c"
 var $233=HEAP32[((9288)>>2)]; //@line 4861 "tcc_bootstrap.c"
 var $234=(($233)|0); //@line 4861 "tcc_bootstrap.c"
 var $235=(($234)|0); //@line 4861 "tcc_bootstrap.c"
 HEAP32[(($235)>>2)]=$232; //@line 4861 "tcc_bootstrap.c"
 _gaddrof(); //@line 4862 "tcc_bootstrap.c"
 var $236=$load_size; //@line 4863 "tcc_bootstrap.c"
 _vpushi($236); //@line 4863 "tcc_bootstrap.c"
 _gen_op(43); //@line 4864 "tcc_bootstrap.c"
 var $237=HEAP32[((9288)>>2)]; //@line 4865 "tcc_bootstrap.c"
 var $238=(($237+8)|0); //@line 4865 "tcc_bootstrap.c"
 var $239=HEAP16[(($238)>>1)]; //@line 4865 "tcc_bootstrap.c"
 var $240=($239&65535); //@line 4865 "tcc_bootstrap.c"
 var $241=$240|256; //@line 4865 "tcc_bootstrap.c"
 var $242=(($241)&65535); //@line 4865 "tcc_bootstrap.c"
 HEAP16[(($238)>>1)]=$242; //@line 4865 "tcc_bootstrap.c"
 var $243=$load_type; //@line 4866 "tcc_bootstrap.c"
 var $244=HEAP32[((9288)>>2)]; //@line 4866 "tcc_bootstrap.c"
 var $245=(($244)|0); //@line 4866 "tcc_bootstrap.c"
 var $246=(($245)|0); //@line 4866 "tcc_bootstrap.c"
 HEAP32[(($246)>>2)]=$243; //@line 4866 "tcc_bootstrap.c"
 label=29;break; //@line 4867 "tcc_bootstrap.c"
 case 28: 
 var $248=$r; //@line 4868 "tcc_bootstrap.c"
 var $249=HEAP32[((9288)>>2)]; //@line 4868 "tcc_bootstrap.c"
 _load($248,$249); //@line 4868 "tcc_bootstrap.c"
 _vdup(); //@line 4869 "tcc_bootstrap.c"
 var $250=$r; //@line 4870 "tcc_bootstrap.c"
 var $251=(($250)&65535); //@line 4870 "tcc_bootstrap.c"
 var $252=HEAP32[((9288)>>2)]; //@line 4870 "tcc_bootstrap.c"
 var $253=((($252)-(40))|0); //@line 4870 "tcc_bootstrap.c"
 var $254=(($253+8)|0); //@line 4870 "tcc_bootstrap.c"
 HEAP16[(($254)>>1)]=$251; //@line 4870 "tcc_bootstrap.c"
 var $255=HEAP32[((9288)>>2)]; //@line 4871 "tcc_bootstrap.c"
 var $256=((($255)-(40))|0); //@line 4871 "tcc_bootstrap.c"
 var $257=(($256+10)|0); //@line 4871 "tcc_bootstrap.c"
 var $258=HEAP16[(($257)>>1)]; //@line 4871 "tcc_bootstrap.c"
 var $259=HEAP32[((9288)>>2)]; //@line 4871 "tcc_bootstrap.c"
 var $260=(($259+8)|0); //@line 4871 "tcc_bootstrap.c"
 HEAP16[(($260)>>1)]=$258; //@line 4871 "tcc_bootstrap.c"
 label=29;break;
 case 29: 
 label=30;break;
 case 30: 
 var $263=$rc2; //@line 4873 "tcc_bootstrap.c"
 var $264=_get_reg($263); //@line 4873 "tcc_bootstrap.c"
 $r2=$264; //@line 4873 "tcc_bootstrap.c"
 var $265=$r2; //@line 4874 "tcc_bootstrap.c"
 var $266=HEAP32[((9288)>>2)]; //@line 4874 "tcc_bootstrap.c"
 _load($265,$266); //@line 4874 "tcc_bootstrap.c"
 _vpop(); //@line 4875 "tcc_bootstrap.c"
 var $267=$r2; //@line 4876 "tcc_bootstrap.c"
 var $268=(($267)&65535); //@line 4876 "tcc_bootstrap.c"
 var $269=HEAP32[((9288)>>2)]; //@line 4876 "tcc_bootstrap.c"
 var $270=(($269+10)|0); //@line 4876 "tcc_bootstrap.c"
 HEAP16[(($270)>>1)]=$268; //@line 4876 "tcc_bootstrap.c"
 var $271=$original_type; //@line 4877 "tcc_bootstrap.c"
 var $272=HEAP32[((9288)>>2)]; //@line 4877 "tcc_bootstrap.c"
 var $273=(($272)|0); //@line 4877 "tcc_bootstrap.c"
 var $274=(($273)|0); //@line 4877 "tcc_bootstrap.c"
 HEAP32[(($274)>>2)]=$271; //@line 4877 "tcc_bootstrap.c"
 label=43;break; //@line 4878 "tcc_bootstrap.c"
 case 31: 
 var $276=HEAP32[((9288)>>2)]; //@line 4878 "tcc_bootstrap.c"
 var $277=(($276+8)|0); //@line 4878 "tcc_bootstrap.c"
 var $278=HEAP16[(($277)>>1)]; //@line 4878 "tcc_bootstrap.c"
 var $279=($278&65535); //@line 4878 "tcc_bootstrap.c"
 var $280=$279&256; //@line 4878 "tcc_bootstrap.c"
 var $281=($280|0)!=0; //@line 4878 "tcc_bootstrap.c"
 if($281){label=32;break;}else{label=41;break;} //@line 4878 "tcc_bootstrap.c"
 case 32: 
 var $283=HEAP32[((9288)>>2)]; //@line 4878 "tcc_bootstrap.c"
 var $284=(($283)|0); //@line 4878 "tcc_bootstrap.c"
 var $285=(($284)|0); //@line 4878 "tcc_bootstrap.c"
 var $286=HEAP32[(($285)>>2)]; //@line 4878 "tcc_bootstrap.c"
 var $287=_is_float($286); //@line 4878 "tcc_bootstrap.c"
 var $288=($287|0)!=0; //@line 4878 "tcc_bootstrap.c"
 if($288){label=41;break;}else{label=33;break;} //@line 4878 "tcc_bootstrap.c"
 case 33: 
 var $290=HEAP32[((9288)>>2)]; //@line 4880 "tcc_bootstrap.c"
 var $291=(($290)|0); //@line 4880 "tcc_bootstrap.c"
 var $292=(($291)|0); //@line 4880 "tcc_bootstrap.c"
 var $293=HEAP32[(($292)>>2)]; //@line 4880 "tcc_bootstrap.c"
 $t=$293; //@line 4880 "tcc_bootstrap.c"
 var $294=$t; //@line 4881 "tcc_bootstrap.c"
 $t1=$294; //@line 4881 "tcc_bootstrap.c"
 var $295=HEAP32[((9288)>>2)]; //@line 4882 "tcc_bootstrap.c"
 var $296=(($295+8)|0); //@line 4882 "tcc_bootstrap.c"
 var $297=HEAP16[(($296)>>1)]; //@line 4882 "tcc_bootstrap.c"
 var $298=($297&65535); //@line 4882 "tcc_bootstrap.c"
 var $299=$298&4096; //@line 4882 "tcc_bootstrap.c"
 var $300=($299|0)!=0; //@line 4882 "tcc_bootstrap.c"
 if($300){label=34;break;}else{label=35;break;} //@line 4882 "tcc_bootstrap.c"
 case 34: 
 $t=1; //@line 4883 "tcc_bootstrap.c"
 label=38;break; //@line 4883 "tcc_bootstrap.c"
 case 35: 
 var $303=HEAP32[((9288)>>2)]; //@line 4884 "tcc_bootstrap.c"
 var $304=(($303+8)|0); //@line 4884 "tcc_bootstrap.c"
 var $305=HEAP16[(($304)>>1)]; //@line 4884 "tcc_bootstrap.c"
 var $306=($305&65535); //@line 4884 "tcc_bootstrap.c"
 var $307=$306&8192; //@line 4884 "tcc_bootstrap.c"
 var $308=($307|0)!=0; //@line 4884 "tcc_bootstrap.c"
 if($308){label=36;break;}else{label=37;break;} //@line 4884 "tcc_bootstrap.c"
 case 36: 
 $t=2; //@line 4885 "tcc_bootstrap.c"
 label=37;break; //@line 4885 "tcc_bootstrap.c"
 case 37: 
 label=38;break;
 case 38: 
 var $312=HEAP32[((9288)>>2)]; //@line 4886 "tcc_bootstrap.c"
 var $313=(($312+8)|0); //@line 4886 "tcc_bootstrap.c"
 var $314=HEAP16[(($313)>>1)]; //@line 4886 "tcc_bootstrap.c"
 var $315=($314&65535); //@line 4886 "tcc_bootstrap.c"
 var $316=$315&16384; //@line 4886 "tcc_bootstrap.c"
 var $317=($316|0)!=0; //@line 4886 "tcc_bootstrap.c"
 if($317){label=39;break;}else{label=40;break;} //@line 4886 "tcc_bootstrap.c"
 case 39: 
 var $319=$t; //@line 4887 "tcc_bootstrap.c"
 var $320=$319|16; //@line 4887 "tcc_bootstrap.c"
 $t=$320; //@line 4887 "tcc_bootstrap.c"
 label=40;break; //@line 4887 "tcc_bootstrap.c"
 case 40: 
 var $322=$t; //@line 4888 "tcc_bootstrap.c"
 var $323=HEAP32[((9288)>>2)]; //@line 4888 "tcc_bootstrap.c"
 var $324=(($323)|0); //@line 4888 "tcc_bootstrap.c"
 var $325=(($324)|0); //@line 4888 "tcc_bootstrap.c"
 HEAP32[(($325)>>2)]=$322; //@line 4888 "tcc_bootstrap.c"
 var $326=$r; //@line 4889 "tcc_bootstrap.c"
 var $327=HEAP32[((9288)>>2)]; //@line 4889 "tcc_bootstrap.c"
 _load($326,$327); //@line 4889 "tcc_bootstrap.c"
 var $328=$t1; //@line 4890 "tcc_bootstrap.c"
 var $329=HEAP32[((9288)>>2)]; //@line 4890 "tcc_bootstrap.c"
 var $330=(($329)|0); //@line 4890 "tcc_bootstrap.c"
 var $331=(($330)|0); //@line 4890 "tcc_bootstrap.c"
 HEAP32[(($331)>>2)]=$328; //@line 4890 "tcc_bootstrap.c"
 label=42;break; //@line 4891 "tcc_bootstrap.c"
 case 41: 
 var $333=$r; //@line 4892 "tcc_bootstrap.c"
 var $334=HEAP32[((9288)>>2)]; //@line 4892 "tcc_bootstrap.c"
 _load($333,$334); //@line 4892 "tcc_bootstrap.c"
 label=42;break;
 case 42: 
 label=43;break;
 case 43: 
 label=44;break; //@line 4894 "tcc_bootstrap.c"
 case 44: 
 var $338=$r; //@line 4895 "tcc_bootstrap.c"
 var $339=(($338)&65535); //@line 4895 "tcc_bootstrap.c"
 var $340=HEAP32[((9288)>>2)]; //@line 4895 "tcc_bootstrap.c"
 var $341=(($340+8)|0); //@line 4895 "tcc_bootstrap.c"
 HEAP16[(($341)>>1)]=$339; //@line 4895 "tcc_bootstrap.c"
 label=45;break;
 case 45: 
 var $343=$r; //@line 4897 "tcc_bootstrap.c"
 STACKTOP=sp;return $343; //@line 4897 "tcc_bootstrap.c"
  default: assert(0, "bad label: " + label);
 }

}


function _save_regs($n){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $p;
 var $p1;
 $1=$n;
 $p=77280; //@line 4600 "tcc_bootstrap.c"
 var $2=HEAP32[((9288)>>2)]; //@line 4600 "tcc_bootstrap.c"
 var $3=$1; //@line 4600 "tcc_bootstrap.c"
 var $4=(((-$3))|0); //@line 4600 "tcc_bootstrap.c"
 var $5=(($2+((($4)*(40))&-1))|0); //@line 4600 "tcc_bootstrap.c"
 $p1=$5; //@line 4600 "tcc_bootstrap.c"
 label=2;break; //@line 4600 "tcc_bootstrap.c"
 case 2: 
 var $7=$p; //@line 4600 "tcc_bootstrap.c"
 var $8=$p1; //@line 4600 "tcc_bootstrap.c"
 var $9=($7>>>0)<=($8>>>0); //@line 4600 "tcc_bootstrap.c"
 if($9){label=3;break;}else{label=5;break;} //@line 4600 "tcc_bootstrap.c"
 case 3: 
 var $11=$p; //@line 4601 "tcc_bootstrap.c"
 var $12=(($11+8)|0); //@line 4601 "tcc_bootstrap.c"
 var $13=HEAP16[(($12)>>1)]; //@line 4601 "tcc_bootstrap.c"
 var $14=($13&65535); //@line 4601 "tcc_bootstrap.c"
 _save_reg($14); //@line 4601 "tcc_bootstrap.c"
 label=4;break; //@line 4601 "tcc_bootstrap.c"
 case 4: 
 var $16=$p; //@line 4600 "tcc_bootstrap.c"
 var $17=(($16+40)|0); //@line 4600 "tcc_bootstrap.c"
 $p=$17; //@line 4600 "tcc_bootstrap.c"
 label=2;break; //@line 4600 "tcc_bootstrap.c"
 case 5: 
 STACKTOP=sp;return; //@line 4602 "tcc_bootstrap.c"
  default: assert(0, "bad label: " + label);
 }

}


function _gv_dup(){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+40)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $rc;
 var $t;
 var $r;
 var $r1;
 var $sv=sp;
 var $1=HEAP32[((9288)>>2)]; //@line 4962 "tcc_bootstrap.c"
 var $2=(($1)|0); //@line 4962 "tcc_bootstrap.c"
 var $3=(($2)|0); //@line 4962 "tcc_bootstrap.c"
 var $4=HEAP32[(($3)>>2)]; //@line 4962 "tcc_bootstrap.c"
 $t=$4; //@line 4962 "tcc_bootstrap.c"
 var $5=$t; //@line 4963 "tcc_bootstrap.c"
 var $6=$5&15; //@line 4963 "tcc_bootstrap.c"
 var $7=($6|0)==4; //@line 4963 "tcc_bootstrap.c"
 if($7){label=2;break;}else{label=5;break;} //@line 4963 "tcc_bootstrap.c"
 case 2: 
 var $9=$t; //@line 4964 "tcc_bootstrap.c"
 var $10=$9&128; //@line 4964 "tcc_bootstrap.c"
 var $11=($10|0)!=0; //@line 4964 "tcc_bootstrap.c"
 if($11){label=3;break;}else{label=4;break;} //@line 4964 "tcc_bootstrap.c"
 case 3: 
 var $13=_gv(1); //@line 4965 "tcc_bootstrap.c"
 var $14=HEAP32[((9288)>>2)]; //@line 4966 "tcc_bootstrap.c"
 var $15=(($14)|0); //@line 4966 "tcc_bootstrap.c"
 var $16=(($15)|0); //@line 4966 "tcc_bootstrap.c"
 var $17=HEAP32[(($16)>>2)]; //@line 4966 "tcc_bootstrap.c"
 $t=$17; //@line 4966 "tcc_bootstrap.c"
 label=4;break; //@line 4967 "tcc_bootstrap.c"
 case 4: 
 _lexpand(); //@line 4968 "tcc_bootstrap.c"
 _gv_dup(); //@line 4969 "tcc_bootstrap.c"
 _vswap(); //@line 4970 "tcc_bootstrap.c"
 _vrotb(3); //@line 4971 "tcc_bootstrap.c"
 _gv_dup(); //@line 4972 "tcc_bootstrap.c"
 _vrotb(4); //@line 4973 "tcc_bootstrap.c"
 var $19=$t; //@line 4974 "tcc_bootstrap.c"
 _lbuild($19); //@line 4974 "tcc_bootstrap.c"
 _vrotb(3); //@line 4975 "tcc_bootstrap.c"
 _vrotb(3); //@line 4976 "tcc_bootstrap.c"
 _vswap(); //@line 4977 "tcc_bootstrap.c"
 var $20=$t; //@line 4978 "tcc_bootstrap.c"
 _lbuild($20); //@line 4978 "tcc_bootstrap.c"
 _vswap(); //@line 4979 "tcc_bootstrap.c"
 label=10;break; //@line 4980 "tcc_bootstrap.c"
 case 5: 
 $rc=1; //@line 4981 "tcc_bootstrap.c"
 var $22=(($sv)|0); //@line 4982 "tcc_bootstrap.c"
 var $23=(($22)|0); //@line 4982 "tcc_bootstrap.c"
 HEAP32[(($23)>>2)]=3; //@line 4982 "tcc_bootstrap.c"
 var $24=$t; //@line 4983 "tcc_bootstrap.c"
 var $25=_is_float($24); //@line 4983 "tcc_bootstrap.c"
 var $26=($25|0)!=0; //@line 4983 "tcc_bootstrap.c"
 if($26){label=6;break;}else{label=7;break;} //@line 4983 "tcc_bootstrap.c"
 case 6: 
 $rc=2; //@line 4984 "tcc_bootstrap.c"
 var $28=$t; //@line 4985 "tcc_bootstrap.c"
 var $29=(($sv)|0); //@line 4985 "tcc_bootstrap.c"
 var $30=(($29)|0); //@line 4985 "tcc_bootstrap.c"
 HEAP32[(($30)>>2)]=$28; //@line 4985 "tcc_bootstrap.c"
 label=7;break; //@line 4986 "tcc_bootstrap.c"
 case 7: 
 var $32=$rc; //@line 4987 "tcc_bootstrap.c"
 var $33=_gv($32); //@line 4987 "tcc_bootstrap.c"
 $r=$33; //@line 4987 "tcc_bootstrap.c"
 var $34=$rc; //@line 4988 "tcc_bootstrap.c"
 var $35=_get_reg($34); //@line 4988 "tcc_bootstrap.c"
 $r1=$35; //@line 4988 "tcc_bootstrap.c"
 var $36=$r; //@line 4989 "tcc_bootstrap.c"
 var $37=(($36)&65535); //@line 4989 "tcc_bootstrap.c"
 var $38=(($sv+8)|0); //@line 4989 "tcc_bootstrap.c"
 HEAP16[(($38)>>1)]=$37; //@line 4989 "tcc_bootstrap.c"
 var $39=(($sv+16)|0); //@line 4990 "tcc_bootstrap.c"
 var $40=$39; //@line 4990 "tcc_bootstrap.c"
 var $$etemp$0$0=0;
 var $$etemp$0$1=0;
 var $st$1$0=(($40)|0);
 HEAP32[(($st$1$0)>>2)]=$$etemp$0$0;
 var $st$2$1=(($40+4)|0);
 HEAP32[(($st$2$1)>>2)]=$$etemp$0$1;
 var $41=$r1; //@line 4991 "tcc_bootstrap.c"
 _load($41,$sv); //@line 4991 "tcc_bootstrap.c"
 _vdup(); //@line 4992 "tcc_bootstrap.c"
 var $42=$r; //@line 4993 "tcc_bootstrap.c"
 var $43=$r1; //@line 4993 "tcc_bootstrap.c"
 var $44=($42|0)!=($43|0); //@line 4993 "tcc_bootstrap.c"
 if($44){label=8;break;}else{label=9;break;} //@line 4993 "tcc_bootstrap.c"
 case 8: 
 var $46=$r1; //@line 4994 "tcc_bootstrap.c"
 var $47=(($46)&65535); //@line 4994 "tcc_bootstrap.c"
 var $48=HEAP32[((9288)>>2)]; //@line 4994 "tcc_bootstrap.c"
 var $49=(($48+8)|0); //@line 4994 "tcc_bootstrap.c"
 HEAP16[(($49)>>1)]=$47; //@line 4994 "tcc_bootstrap.c"
 label=9;break; //@line 4994 "tcc_bootstrap.c"
 case 9: 
 label=10;break;
 case 10: 
 STACKTOP=sp;return; //@line 4996 "tcc_bootstrap.c"
  default: assert(0, "bad label: " + label);
 }

}


function _gvtst($inv,$t){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $v;
 $2=$inv;
 $3=$t;
 var $4=HEAP32[((9288)>>2)]; //@line 4999 "tcc_bootstrap.c"
 var $5=(($4+8)|0); //@line 4999 "tcc_bootstrap.c"
 var $6=HEAP16[(($5)>>1)]; //@line 4999 "tcc_bootstrap.c"
 var $7=($6&65535); //@line 4999 "tcc_bootstrap.c"
 var $8=$7&63; //@line 4999 "tcc_bootstrap.c"
 $v=$8; //@line 4999 "tcc_bootstrap.c"
 var $9=$v; //@line 5000 "tcc_bootstrap.c"
 var $10=($9|0)!=51; //@line 5000 "tcc_bootstrap.c"
 if($10){label=2;break;}else{label=5;break;} //@line 5000 "tcc_bootstrap.c"
 case 2: 
 var $12=$v; //@line 5000 "tcc_bootstrap.c"
 var $13=($12|0)!=52; //@line 5000 "tcc_bootstrap.c"
 if($13){label=3;break;}else{label=5;break;} //@line 5000 "tcc_bootstrap.c"
 case 3: 
 var $15=$v; //@line 5000 "tcc_bootstrap.c"
 var $16=($15|0)!=53; //@line 5000 "tcc_bootstrap.c"
 if($16){label=4;break;}else{label=5;break;} //@line 5000 "tcc_bootstrap.c"
 case 4: 
 _vpushi(0); //@line 5001 "tcc_bootstrap.c"
 _gen_op(149); //@line 5002 "tcc_bootstrap.c"
 label=5;break; //@line 5003 "tcc_bootstrap.c"
 case 5: 
 var $19=HEAP32[((9288)>>2)]; //@line 5004 "tcc_bootstrap.c"
 var $20=(($19+8)|0); //@line 5004 "tcc_bootstrap.c"
 var $21=HEAP16[(($20)>>1)]; //@line 5004 "tcc_bootstrap.c"
 var $22=($21&65535); //@line 5004 "tcc_bootstrap.c"
 var $23=$22&831; //@line 5004 "tcc_bootstrap.c"
 var $24=($23|0)==48; //@line 5004 "tcc_bootstrap.c"
 if($24){label=6;break;}else{label=9;break;} //@line 5004 "tcc_bootstrap.c"
 case 6: 
 var $26=HEAP32[((9288)>>2)]; //@line 5005 "tcc_bootstrap.c"
 var $27=(($26+16)|0); //@line 5005 "tcc_bootstrap.c"
 var $28=$27; //@line 5005 "tcc_bootstrap.c"
 var $ld$0$0=(($28)|0);
 var $29$0=HEAP32[(($ld$0$0)>>2)];
 var $ld$1$1=(($28+4)|0);
 var $29$1=HEAP32[(($ld$1$1)>>2)];
 var $$etemp$2$0=0;
 var $$etemp$2$1=0;
 var $30=(($29$0|0) != ($$etemp$2$0|0)) | (($29$1|0) != ($$etemp$2$1|0)); //@line 5005 "tcc_bootstrap.c"
 var $31=($30&1); //@line 5005 "tcc_bootstrap.c"
 var $32=$2; //@line 5005 "tcc_bootstrap.c"
 var $33=($31|0)!=($32|0); //@line 5005 "tcc_bootstrap.c"
 if($33){label=7;break;}else{label=8;break;} //@line 5005 "tcc_bootstrap.c"
 case 7: 
 var $35=$3; //@line 5006 "tcc_bootstrap.c"
 var $36=_gjmp($35); //@line 5006 "tcc_bootstrap.c"
 $3=$36; //@line 5006 "tcc_bootstrap.c"
 label=8;break; //@line 5006 "tcc_bootstrap.c"
 case 8: 
 var $38=HEAP32[((9288)>>2)]; //@line 5007 "tcc_bootstrap.c"
 var $39=((($38)-(40))|0); //@line 5007 "tcc_bootstrap.c"
 HEAP32[((9288)>>2)]=$39; //@line 5007 "tcc_bootstrap.c"
 var $40=$3; //@line 5008 "tcc_bootstrap.c"
 $1=$40; //@line 5008 "tcc_bootstrap.c"
 label=10;break; //@line 5008 "tcc_bootstrap.c"
 case 9: 
 var $42=$2; //@line 5010 "tcc_bootstrap.c"
 var $43=$3; //@line 5010 "tcc_bootstrap.c"
 var $44=_gtst($42,$43); //@line 5010 "tcc_bootstrap.c"
 $1=$44; //@line 5010 "tcc_bootstrap.c"
 label=10;break; //@line 5010 "tcc_bootstrap.c"
 case 10: 
 var $46=$1; //@line 5011 "tcc_bootstrap.c"
 STACKTOP=sp;return $46; //@line 5011 "tcc_bootstrap.c"
  default: assert(0, "bad label: " + label);
 }

}


function _gexpr(){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 label=2;break; //@line 7987 "tcc_bootstrap.c"
 case 2: 
 _expr_eq(); //@line 7988 "tcc_bootstrap.c"
 var $2=HEAP32[((10472)>>2)]; //@line 7989 "tcc_bootstrap.c"
 var $3=($2|0)!=44; //@line 7989 "tcc_bootstrap.c"
 if($3){label=3;break;}else{label=4;break;} //@line 7989 "tcc_bootstrap.c"
 case 3: 
 label=5;break; //@line 7990 "tcc_bootstrap.c"
 case 4: 
 _vpop(); //@line 7991 "tcc_bootstrap.c"
 _next(); //@line 7992 "tcc_bootstrap.c"
 label=2;break; //@line 7993 "tcc_bootstrap.c"
 case 5: 
 return; //@line 7994 "tcc_bootstrap.c"
  default: assert(0, "bad label: " + label);
 }

}


function _skip($c){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 $1=$c;
 var $2=HEAP32[((10472)>>2)]; //@line 1209 "tcc_bootstrap.c"
 var $3=$1; //@line 1209 "tcc_bootstrap.c"
 var $4=($2|0)!=($3|0); //@line 1209 "tcc_bootstrap.c"
 if($4){label=2;break;}else{label=3;break;} //@line 1209 "tcc_bootstrap.c"
 case 2: 
 var $6=$1; //@line 1210 "tcc_bootstrap.c"
 var $7=HEAP32[((10472)>>2)]; //@line 1210 "tcc_bootstrap.c"
 var $8=_get_tok_str($7,10440); //@line 1210 "tcc_bootstrap.c"
 _tcc_error(8160,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$6,HEAP32[(((tempVarArgs)+(8))>>2)]=$8,tempVarArgs)); STACKTOP=tempVarArgs; //@line 1210 "tcc_bootstrap.c"
 label=3;break; //@line 1210 "tcc_bootstrap.c"
 case 3: 
 _next(); //@line 1211 "tcc_bootstrap.c"
 STACKTOP=sp;return; //@line 1212 "tcc_bootstrap.c"
  default: assert(0, "bad label: " + label);
 }

}


function _gjmp($t){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 $1=$t;
 var $2=$1; //@line 10346 "tcc_bootstrap.c"
 var $3=_oad(233,$2); //@line 10346 "tcc_bootstrap.c"
 STACKTOP=sp;return $3; //@line 10346 "tcc_bootstrap.c"
}


function _is_null_pointer($p){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 $2=$p;
 var $3=$2; //@line 5406 "tcc_bootstrap.c"
 var $4=(($3+8)|0); //@line 5406 "tcc_bootstrap.c"
 var $5=HEAP16[(($4)>>1)]; //@line 5406 "tcc_bootstrap.c"
 var $6=($5&65535); //@line 5406 "tcc_bootstrap.c"
 var $7=$6&831; //@line 5406 "tcc_bootstrap.c"
 var $8=($7|0)!=48; //@line 5406 "tcc_bootstrap.c"
 if($8){label=2;break;}else{label=3;break;} //@line 5406 "tcc_bootstrap.c"
 case 2: 
 $1=0; //@line 5407 "tcc_bootstrap.c"
 label=11;break; //@line 5407 "tcc_bootstrap.c"
 case 3: 
 var $11=$2; //@line 5408 "tcc_bootstrap.c"
 var $12=(($11)|0); //@line 5408 "tcc_bootstrap.c"
 var $13=(($12)|0); //@line 5408 "tcc_bootstrap.c"
 var $14=HEAP32[(($13)>>2)]; //@line 5408 "tcc_bootstrap.c"
 var $15=$14&15; //@line 5408 "tcc_bootstrap.c"
 var $16=($15|0)==3; //@line 5408 "tcc_bootstrap.c"
 if($16){label=4;break;}else{label=5;break;} //@line 5408 "tcc_bootstrap.c"
 case 4: 
 var $18=$2; //@line 5408 "tcc_bootstrap.c"
 var $19=(($18+16)|0); //@line 5408 "tcc_bootstrap.c"
 var $20=$19; //@line 5408 "tcc_bootstrap.c"
 var $ld$0$0=(($20)|0);
 var $21$0=HEAP32[(($ld$0$0)>>2)];
 var $ld$1$1=(($20+4)|0);
 var $21$1=HEAP32[(($ld$1$1)>>2)];
 var $22$0=$21$0;
 var $22=$22$0;
 var $23=($22|0)==0; //@line 5408 "tcc_bootstrap.c"
 if($23){var $54=1;label=10;break;}else{label=5;break;} //@line 5408 "tcc_bootstrap.c"
 case 5: 
 var $25=$2; //@line 5408 "tcc_bootstrap.c"
 var $26=(($25)|0); //@line 5408 "tcc_bootstrap.c"
 var $27=(($26)|0); //@line 5408 "tcc_bootstrap.c"
 var $28=HEAP32[(($27)>>2)]; //@line 5408 "tcc_bootstrap.c"
 var $29=$28&15; //@line 5408 "tcc_bootstrap.c"
 var $30=($29|0)==4; //@line 5408 "tcc_bootstrap.c"
 if($30){label=6;break;}else{label=7;break;} //@line 5408 "tcc_bootstrap.c"
 case 6: 
 var $32=$2; //@line 5408 "tcc_bootstrap.c"
 var $33=(($32+16)|0); //@line 5408 "tcc_bootstrap.c"
 var $34=$33; //@line 5408 "tcc_bootstrap.c"
 var $ld$2$0=(($34)|0);
 var $35$0=HEAP32[(($ld$2$0)>>2)];
 var $ld$3$1=(($34+4)|0);
 var $35$1=HEAP32[(($ld$3$1)>>2)];
 var $$etemp$4$0=0;
 var $$etemp$4$1=0;
 var $36=(($35$0|0) == ($$etemp$4$0|0)) & (($35$1|0) == ($$etemp$4$1|0)); //@line 5408 "tcc_bootstrap.c"
 if($36){var $54=1;label=10;break;}else{label=7;break;} //@line 5408 "tcc_bootstrap.c"
 case 7: 
 var $38=$2; //@line 5408 "tcc_bootstrap.c"
 var $39=(($38)|0); //@line 5408 "tcc_bootstrap.c"
 var $40=(($39)|0); //@line 5408 "tcc_bootstrap.c"
 var $41=HEAP32[(($40)>>2)]; //@line 5408 "tcc_bootstrap.c"
 var $42=$41&15; //@line 5408 "tcc_bootstrap.c"
 var $43=($42|0)==5; //@line 5408 "tcc_bootstrap.c"
 if($43){label=8;break;}else{var $52=0;label=9;break;} //@line 5408 "tcc_bootstrap.c"
 case 8: 
 var $45=$2; //@line 5408 "tcc_bootstrap.c"
 var $46=(($45+16)|0); //@line 5408 "tcc_bootstrap.c"
 var $47=$46; //@line 5408 "tcc_bootstrap.c"
 var $ld$5$0=(($47)|0);
 var $48$0=HEAP32[(($ld$5$0)>>2)];
 var $ld$6$1=(($47+4)|0);
 var $48$1=HEAP32[(($ld$6$1)>>2)];
 var $49$0=$48$0;
 var $49=$49$0;
 var $50=($49|0)==0; //@line 5408 "tcc_bootstrap.c"
 var $52=$50;label=9;break;
 case 9: 
 var $52;
 var $54=$52;label=10;break;
 case 10: 
 var $54;
 var $55=($54&1);
 $1=$55;
 label=11;break;
 case 11: 
 var $57=$1; //@line 5412 "tcc_bootstrap.c"
 STACKTOP=sp;return $57; //@line 5412 "tcc_bootstrap.c"
  default: assert(0, "bad label: " + label);
 }

}


function _gen_cast($type){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $sbt;
 var $dbt;
 var $sf;
 var $df;
 var $c;
 var $p;
 var $m;
 $1=$type;
 var $2=HEAP32[((9288)>>2)]; //@line 5670 "tcc_bootstrap.c"
 var $3=(($2+8)|0); //@line 5670 "tcc_bootstrap.c"
 var $4=HEAP16[(($3)>>1)]; //@line 5670 "tcc_bootstrap.c"
 var $5=($4&65535); //@line 5670 "tcc_bootstrap.c"
 var $6=$5&1024; //@line 5670 "tcc_bootstrap.c"
 var $7=($6|0)!=0; //@line 5670 "tcc_bootstrap.c"
 if($7){label=2;break;}else{label=3;break;} //@line 5670 "tcc_bootstrap.c"
 case 2: 
 var $9=HEAP32[((9288)>>2)]; //@line 5671 "tcc_bootstrap.c"
 var $10=(($9+8)|0); //@line 5671 "tcc_bootstrap.c"
 var $11=HEAP16[(($10)>>1)]; //@line 5671 "tcc_bootstrap.c"
 var $12=($11&65535); //@line 5671 "tcc_bootstrap.c"
 var $13=$12&-1025; //@line 5671 "tcc_bootstrap.c"
 var $14=(($13)&65535); //@line 5671 "tcc_bootstrap.c"
 HEAP16[(($10)>>1)]=$14; //@line 5671 "tcc_bootstrap.c"
 var $15=HEAP32[((9288)>>2)]; //@line 5672 "tcc_bootstrap.c"
 var $16=(($15)|0); //@line 5672 "tcc_bootstrap.c"
 var $17=(($16)|0); //@line 5672 "tcc_bootstrap.c"
 var $18=HEAP32[(($17)>>2)]; //@line 5672 "tcc_bootstrap.c"
 _force_charshort_cast($18); //@line 5672 "tcc_bootstrap.c"
 label=3;break; //@line 5673 "tcc_bootstrap.c"
 case 3: 
 var $20=HEAP32[((9288)>>2)]; //@line 5674 "tcc_bootstrap.c"
 var $21=(($20)|0); //@line 5674 "tcc_bootstrap.c"
 var $22=(($21)|0); //@line 5674 "tcc_bootstrap.c"
 var $23=HEAP32[(($22)>>2)]; //@line 5674 "tcc_bootstrap.c"
 var $24=$23&128; //@line 5674 "tcc_bootstrap.c"
 var $25=($24|0)!=0; //@line 5674 "tcc_bootstrap.c"
 if($25){label=4;break;}else{label=5;break;} //@line 5674 "tcc_bootstrap.c"
 case 4: 
 var $27=_gv(1); //@line 5675 "tcc_bootstrap.c"
 label=5;break; //@line 5676 "tcc_bootstrap.c"
 case 5: 
 var $29=$1; //@line 5677 "tcc_bootstrap.c"
 var $30=(($29)|0); //@line 5677 "tcc_bootstrap.c"
 var $31=HEAP32[(($30)>>2)]; //@line 5677 "tcc_bootstrap.c"
 var $32=$31&31; //@line 5677 "tcc_bootstrap.c"
 $dbt=$32; //@line 5677 "tcc_bootstrap.c"
 var $33=HEAP32[((9288)>>2)]; //@line 5678 "tcc_bootstrap.c"
 var $34=(($33)|0); //@line 5678 "tcc_bootstrap.c"
 var $35=(($34)|0); //@line 5678 "tcc_bootstrap.c"
 var $36=HEAP32[(($35)>>2)]; //@line 5678 "tcc_bootstrap.c"
 var $37=$36&31; //@line 5678 "tcc_bootstrap.c"
 $sbt=$37; //@line 5678 "tcc_bootstrap.c"
 var $38=$sbt; //@line 5679 "tcc_bootstrap.c"
 var $39=$dbt; //@line 5679 "tcc_bootstrap.c"
 var $40=($38|0)!=($39|0); //@line 5679 "tcc_bootstrap.c"
 if($40){label=6;break;}else{label=115;break;} //@line 5679 "tcc_bootstrap.c"
 case 6: 
 var $42=$sbt; //@line 5680 "tcc_bootstrap.c"
 var $43=_is_float($42); //@line 5680 "tcc_bootstrap.c"
 $sf=$43; //@line 5680 "tcc_bootstrap.c"
 var $44=$dbt; //@line 5681 "tcc_bootstrap.c"
 var $45=_is_float($44); //@line 5681 "tcc_bootstrap.c"
 $df=$45; //@line 5681 "tcc_bootstrap.c"
 var $46=HEAP32[((9288)>>2)]; //@line 5682 "tcc_bootstrap.c"
 var $47=(($46+8)|0); //@line 5682 "tcc_bootstrap.c"
 var $48=HEAP16[(($47)>>1)]; //@line 5682 "tcc_bootstrap.c"
 var $49=($48&65535); //@line 5682 "tcc_bootstrap.c"
 var $50=$49&831; //@line 5682 "tcc_bootstrap.c"
 var $51=($50|0)==48; //@line 5682 "tcc_bootstrap.c"
 var $52=($51&1); //@line 5682 "tcc_bootstrap.c"
 $c=$52; //@line 5682 "tcc_bootstrap.c"
 var $53=HEAP32[((9288)>>2)]; //@line 5683 "tcc_bootstrap.c"
 var $54=(($53+8)|0); //@line 5683 "tcc_bootstrap.c"
 var $55=HEAP16[(($54)>>1)]; //@line 5683 "tcc_bootstrap.c"
 var $56=($55&65535); //@line 5683 "tcc_bootstrap.c"
 var $57=$56&831; //@line 5683 "tcc_bootstrap.c"
 var $58=($57|0)==560; //@line 5683 "tcc_bootstrap.c"
 var $59=($58&1); //@line 5683 "tcc_bootstrap.c"
 $p=$59; //@line 5683 "tcc_bootstrap.c"
 var $60=$c; //@line 5684 "tcc_bootstrap.c"
 var $61=($60|0)!=0; //@line 5684 "tcc_bootstrap.c"
 if($61){label=7;break;}else{label=66;break;} //@line 5684 "tcc_bootstrap.c"
 case 7: 
 var $63=$sbt; //@line 5685 "tcc_bootstrap.c"
 var $64=($63|0)==8; //@line 5685 "tcc_bootstrap.c"
 if($64){label=8;break;}else{label=9;break;} //@line 5685 "tcc_bootstrap.c"
 case 8: 
 var $66=HEAP32[((9288)>>2)]; //@line 5686 "tcc_bootstrap.c"
 var $67=(($66+16)|0); //@line 5686 "tcc_bootstrap.c"
 var $68=$67; //@line 5686 "tcc_bootstrap.c"
 var $69=HEAPF32[(($68)>>2)]; //@line 5686 "tcc_bootstrap.c"
 var $70=$69; //@line 5686 "tcc_bootstrap.c"
 var $71=HEAP32[((9288)>>2)]; //@line 5686 "tcc_bootstrap.c"
 var $72=(($71+16)|0); //@line 5686 "tcc_bootstrap.c"
 var $73=$72; //@line 5686 "tcc_bootstrap.c"
 HEAPF64[(($73)>>3)]=$70; //@line 5686 "tcc_bootstrap.c"
 label=12;break; //@line 5686 "tcc_bootstrap.c"
 case 9: 
 var $75=$sbt; //@line 5687 "tcc_bootstrap.c"
 var $76=($75|0)==9; //@line 5687 "tcc_bootstrap.c"
 if($76){label=10;break;}else{label=11;break;} //@line 5687 "tcc_bootstrap.c"
 case 10: 
 var $78=HEAP32[((9288)>>2)]; //@line 5688 "tcc_bootstrap.c"
 var $79=(($78+16)|0); //@line 5688 "tcc_bootstrap.c"
 var $80=$79; //@line 5688 "tcc_bootstrap.c"
 var $81=HEAPF64[(($80)>>3)]; //@line 5688 "tcc_bootstrap.c"
 var $82=HEAP32[((9288)>>2)]; //@line 5688 "tcc_bootstrap.c"
 var $83=(($82+16)|0); //@line 5688 "tcc_bootstrap.c"
 var $84=$83; //@line 5688 "tcc_bootstrap.c"
 HEAPF64[(($84)>>3)]=$81; //@line 5688 "tcc_bootstrap.c"
 label=11;break; //@line 5688 "tcc_bootstrap.c"
 case 11: 
 label=12;break;
 case 12: 
 var $87=$df; //@line 5689 "tcc_bootstrap.c"
 var $88=($87|0)!=0; //@line 5689 "tcc_bootstrap.c"
 if($88){label=13;break;}else{label=32;break;} //@line 5689 "tcc_bootstrap.c"
 case 13: 
 var $90=$sbt; //@line 5690 "tcc_bootstrap.c"
 var $91=$90&15; //@line 5690 "tcc_bootstrap.c"
 var $92=($91|0)==4; //@line 5690 "tcc_bootstrap.c"
 if($92){label=14;break;}else{label=19;break;} //@line 5690 "tcc_bootstrap.c"
 case 14: 
 var $94=$sbt; //@line 5691 "tcc_bootstrap.c"
 var $95=$94&16; //@line 5691 "tcc_bootstrap.c"
 var $96=($95|0)!=0; //@line 5691 "tcc_bootstrap.c"
 if($96){label=16;break;}else{label=15;break;} //@line 5691 "tcc_bootstrap.c"
 case 15: 
 var $98=HEAP32[((9288)>>2)]; //@line 5691 "tcc_bootstrap.c"
 var $99=(($98+16)|0); //@line 5691 "tcc_bootstrap.c"
 var $100=$99; //@line 5691 "tcc_bootstrap.c"
 var $ld$0$0=(($100)|0);
 var $101$0=HEAP32[(($ld$0$0)>>2)];
 var $ld$1$1=(($100+4)|0);
 var $101$1=HEAP32[(($ld$1$1)>>2)];
 var $102$0=($101$1>>>31)|(0<<1);
 var $102$1=(0>>>31)|(0<<1);
 var $$etemp$2$0=0;
 var $$etemp$2$1=0;
 var $103=(($102$0|0) != ($$etemp$2$0|0)) | (($102$1|0) != ($$etemp$2$1|0)); //@line 5691 "tcc_bootstrap.c"
 if($103){label=17;break;}else{label=16;break;} //@line 5691 "tcc_bootstrap.c"
 case 16: 
 var $105=HEAP32[((9288)>>2)]; //@line 5692 "tcc_bootstrap.c"
 var $106=(($105+16)|0); //@line 5692 "tcc_bootstrap.c"
 var $107=$106; //@line 5692 "tcc_bootstrap.c"
 var $ld$3$0=(($107)|0);
 var $108$0=HEAP32[(($ld$3$0)>>2)];
 var $ld$4$1=(($107+4)|0);
 var $108$1=HEAP32[(($ld$4$1)>>2)];
 var $109=(($108$0>>>0)+(($108$1>>>0)*4294967296)); //@line 5692 "tcc_bootstrap.c"
 var $110=HEAP32[((9288)>>2)]; //@line 5692 "tcc_bootstrap.c"
 var $111=(($110+16)|0); //@line 5692 "tcc_bootstrap.c"
 var $112=$111; //@line 5692 "tcc_bootstrap.c"
 HEAPF64[(($112)>>3)]=$109; //@line 5692 "tcc_bootstrap.c"
 label=18;break; //@line 5692 "tcc_bootstrap.c"
 case 17: 
 var $114=HEAP32[((9288)>>2)]; //@line 5694 "tcc_bootstrap.c"
 var $115=(($114+16)|0); //@line 5694 "tcc_bootstrap.c"
 var $116=$115; //@line 5694 "tcc_bootstrap.c"
 var $ld$5$0=(($116)|0);
 var $117$0=HEAP32[(($ld$5$0)>>2)];
 var $ld$6$1=(($116+4)|0);
 var $117$1=HEAP32[(($ld$6$1)>>2)];
 var $$etemp$7$0=0;
 var $$etemp$7$1=0;
 var $118$0=_i64Subtract($$etemp$7$0,$$etemp$7$1,$117$0,$117$1);var $118$1=tempRet0; //@line 5694 "tcc_bootstrap.c"
 var $119=(($118$0>>>0)+(($118$1>>>0)*4294967296)); //@line 5694 "tcc_bootstrap.c"
 var $120=((-.0))-($119); //@line 5694 "tcc_bootstrap.c"
 var $121=HEAP32[((9288)>>2)]; //@line 5694 "tcc_bootstrap.c"
 var $122=(($121+16)|0); //@line 5694 "tcc_bootstrap.c"
 var $123=$122; //@line 5694 "tcc_bootstrap.c"
 HEAPF64[(($123)>>3)]=$120; //@line 5694 "tcc_bootstrap.c"
 label=18;break;
 case 18: 
 label=26;break; //@line 5695 "tcc_bootstrap.c"
 case 19: 
 var $126=$sf; //@line 5695 "tcc_bootstrap.c"
 var $127=($126|0)!=0; //@line 5695 "tcc_bootstrap.c"
 if($127){label=25;break;}else{label=20;break;} //@line 5695 "tcc_bootstrap.c"
 case 20: 
 var $129=$sbt; //@line 5696 "tcc_bootstrap.c"
 var $130=$129&16; //@line 5696 "tcc_bootstrap.c"
 var $131=($130|0)!=0; //@line 5696 "tcc_bootstrap.c"
 if($131){label=22;break;}else{label=21;break;} //@line 5696 "tcc_bootstrap.c"
 case 21: 
 var $133=HEAP32[((9288)>>2)]; //@line 5696 "tcc_bootstrap.c"
 var $134=(($133+16)|0); //@line 5696 "tcc_bootstrap.c"
 var $135=$134; //@line 5696 "tcc_bootstrap.c"
 var $ld$8$0=(($135)|0);
 var $136$0=HEAP32[(($ld$8$0)>>2)];
 var $ld$9$1=(($135+4)|0);
 var $136$1=HEAP32[(($ld$9$1)>>2)];
 var $137$0=($136$0>>>31)|($136$1<<1);
 var $137$1=($136$1>>>31)|(0<<1);
 var $$etemp$10$0=0;
 var $$etemp$10$1=0;
 var $138=(($137$0|0) != ($$etemp$10$0|0)) | (($137$1|0) != ($$etemp$10$1|0)); //@line 5696 "tcc_bootstrap.c"
 if($138){label=23;break;}else{label=22;break;} //@line 5696 "tcc_bootstrap.c"
 case 22: 
 var $140=HEAP32[((9288)>>2)]; //@line 5697 "tcc_bootstrap.c"
 var $141=(($140+16)|0); //@line 5697 "tcc_bootstrap.c"
 var $142=$141; //@line 5697 "tcc_bootstrap.c"
 var $ld$11$0=(($142)|0);
 var $143$0=HEAP32[(($ld$11$0)>>2)];
 var $ld$12$1=(($142+4)|0);
 var $143$1=HEAP32[(($ld$12$1)>>2)];
 var $144$0=$143$0;
 var $144=$144$0;
 var $145=($144>>>0); //@line 5697 "tcc_bootstrap.c"
 var $146=HEAP32[((9288)>>2)]; //@line 5697 "tcc_bootstrap.c"
 var $147=(($146+16)|0); //@line 5697 "tcc_bootstrap.c"
 var $148=$147; //@line 5697 "tcc_bootstrap.c"
 HEAPF64[(($148)>>3)]=$145; //@line 5697 "tcc_bootstrap.c"
 label=24;break; //@line 5697 "tcc_bootstrap.c"
 case 23: 
 var $150=HEAP32[((9288)>>2)]; //@line 5699 "tcc_bootstrap.c"
 var $151=(($150+16)|0); //@line 5699 "tcc_bootstrap.c"
 var $152=$151; //@line 5699 "tcc_bootstrap.c"
 var $ld$13$0=(($152)|0);
 var $153$0=HEAP32[(($ld$13$0)>>2)];
 var $ld$14$1=(($152+4)|0);
 var $153$1=HEAP32[(($ld$14$1)>>2)];
 var $154$0=$153$0;
 var $154=$154$0;
 var $155=(((-$154))|0); //@line 5699 "tcc_bootstrap.c"
 var $156=($155>>>0); //@line 5699 "tcc_bootstrap.c"
 var $157=((-.0))-($156); //@line 5699 "tcc_bootstrap.c"
 var $158=HEAP32[((9288)>>2)]; //@line 5699 "tcc_bootstrap.c"
 var $159=(($158+16)|0); //@line 5699 "tcc_bootstrap.c"
 var $160=$159; //@line 5699 "tcc_bootstrap.c"
 HEAPF64[(($160)>>3)]=$157; //@line 5699 "tcc_bootstrap.c"
 label=24;break;
 case 24: 
 label=25;break; //@line 5700 "tcc_bootstrap.c"
 case 25: 
 label=26;break;
 case 26: 
 var $164=$dbt; //@line 5701 "tcc_bootstrap.c"
 var $165=($164|0)==8; //@line 5701 "tcc_bootstrap.c"
 if($165){label=27;break;}else{label=28;break;} //@line 5701 "tcc_bootstrap.c"
 case 27: 
 var $167=HEAP32[((9288)>>2)]; //@line 5702 "tcc_bootstrap.c"
 var $168=(($167+16)|0); //@line 5702 "tcc_bootstrap.c"
 var $169=$168; //@line 5702 "tcc_bootstrap.c"
 var $170=HEAPF64[(($169)>>3)]; //@line 5702 "tcc_bootstrap.c"
 var $171=$170; //@line 5702 "tcc_bootstrap.c"
 var $172=HEAP32[((9288)>>2)]; //@line 5702 "tcc_bootstrap.c"
 var $173=(($172+16)|0); //@line 5702 "tcc_bootstrap.c"
 var $174=$173; //@line 5702 "tcc_bootstrap.c"
 HEAPF32[(($174)>>2)]=$171; //@line 5702 "tcc_bootstrap.c"
 label=31;break; //@line 5702 "tcc_bootstrap.c"
 case 28: 
 var $176=$dbt; //@line 5703 "tcc_bootstrap.c"
 var $177=($176|0)==9; //@line 5703 "tcc_bootstrap.c"
 if($177){label=29;break;}else{label=30;break;} //@line 5703 "tcc_bootstrap.c"
 case 29: 
 var $179=HEAP32[((9288)>>2)]; //@line 5704 "tcc_bootstrap.c"
 var $180=(($179+16)|0); //@line 5704 "tcc_bootstrap.c"
 var $181=$180; //@line 5704 "tcc_bootstrap.c"
 var $182=HEAPF64[(($181)>>3)]; //@line 5704 "tcc_bootstrap.c"
 var $183=HEAP32[((9288)>>2)]; //@line 5704 "tcc_bootstrap.c"
 var $184=(($183+16)|0); //@line 5704 "tcc_bootstrap.c"
 var $185=$184; //@line 5704 "tcc_bootstrap.c"
 HEAPF64[(($185)>>3)]=$182; //@line 5704 "tcc_bootstrap.c"
 label=30;break; //@line 5704 "tcc_bootstrap.c"
 case 30: 
 label=31;break;
 case 31: 
 label=65;break; //@line 5705 "tcc_bootstrap.c"
 case 32: 
 var $189=$sf; //@line 5705 "tcc_bootstrap.c"
 var $190=($189|0)!=0; //@line 5705 "tcc_bootstrap.c"
 if($190){label=33;break;}else{label=35;break;} //@line 5705 "tcc_bootstrap.c"
 case 33: 
 var $192=$dbt; //@line 5705 "tcc_bootstrap.c"
 var $193=($192|0)==20; //@line 5705 "tcc_bootstrap.c"
 if($193){label=34;break;}else{label=35;break;} //@line 5705 "tcc_bootstrap.c"
 case 34: 
 var $195=HEAP32[((9288)>>2)]; //@line 5706 "tcc_bootstrap.c"
 var $196=(($195+16)|0); //@line 5706 "tcc_bootstrap.c"
 var $197=$196; //@line 5706 "tcc_bootstrap.c"
 var $198=HEAPF64[(($197)>>3)]; //@line 5706 "tcc_bootstrap.c"
 var $199$0=$198>>>0;var $199$1=(Math_abs($198) >= 1 ? ($198 > 0 ? Math_min(Math_floor(($198)/4294967296), 4294967295)>>>0 : (~~(Math_ceil(($198 - +(((~~($198)))>>>0))/4294967296)))>>>0) : 0); //@line 5706 "tcc_bootstrap.c"
 var $200=HEAP32[((9288)>>2)]; //@line 5706 "tcc_bootstrap.c"
 var $201=(($200+16)|0); //@line 5706 "tcc_bootstrap.c"
 var $202=$201; //@line 5706 "tcc_bootstrap.c"
 var $st$15$0=(($202)|0);
 HEAP32[(($st$15$0)>>2)]=$199$0;
 var $st$16$1=(($202+4)|0);
 HEAP32[(($st$16$1)>>2)]=$199$1;
 label=64;break; //@line 5707 "tcc_bootstrap.c"
 case 35: 
 var $204=$sf; //@line 5707 "tcc_bootstrap.c"
 var $205=($204|0)!=0; //@line 5707 "tcc_bootstrap.c"
 if($205){label=36;break;}else{label=38;break;} //@line 5707 "tcc_bootstrap.c"
 case 36: 
 var $207=$dbt; //@line 5707 "tcc_bootstrap.c"
 var $208=($207|0)==11; //@line 5707 "tcc_bootstrap.c"
 if($208){label=37;break;}else{label=38;break;} //@line 5707 "tcc_bootstrap.c"
 case 37: 
 var $210=HEAP32[((9288)>>2)]; //@line 5708 "tcc_bootstrap.c"
 var $211=(($210+16)|0); //@line 5708 "tcc_bootstrap.c"
 var $212=$211; //@line 5708 "tcc_bootstrap.c"
 var $213=HEAPF64[(($212)>>3)]; //@line 5708 "tcc_bootstrap.c"
 var $214=$213!=0; //@line 5708 "tcc_bootstrap.c"
 var $215=($214&1); //@line 5708 "tcc_bootstrap.c"
 var $216$0=$215;
 var $216$1=((((($215|0)<0))|0)?-1:0);
 var $217=HEAP32[((9288)>>2)]; //@line 5708 "tcc_bootstrap.c"
 var $218=(($217+16)|0); //@line 5708 "tcc_bootstrap.c"
 var $219=$218; //@line 5708 "tcc_bootstrap.c"
 var $st$17$0=(($219)|0);
 HEAP32[(($st$17$0)>>2)]=$216$0;
 var $st$18$1=(($219+4)|0);
 HEAP32[(($st$18$1)>>2)]=$216$1;
 label=63;break; //@line 5709 "tcc_bootstrap.c"
 case 38: 
 var $221=$sf; //@line 5710 "tcc_bootstrap.c"
 var $222=($221|0)!=0; //@line 5710 "tcc_bootstrap.c"
 if($222){label=39;break;}else{label=40;break;} //@line 5710 "tcc_bootstrap.c"
 case 39: 
 var $224=HEAP32[((9288)>>2)]; //@line 5711 "tcc_bootstrap.c"
 var $225=(($224+16)|0); //@line 5711 "tcc_bootstrap.c"
 var $226=$225; //@line 5711 "tcc_bootstrap.c"
 var $227=HEAPF64[(($226)>>3)]; //@line 5711 "tcc_bootstrap.c"
 var $228$0=$227>>>0;var $228$1=(Math_abs($227) >= 1 ? ($227 > 0 ? Math_min(Math_floor(($227)/4294967296), 4294967295)>>>0 : (~~(Math_ceil(($227 - +(((~~($227)))>>>0))/4294967296)))>>>0) : 0); //@line 5711 "tcc_bootstrap.c"
 var $229=HEAP32[((9288)>>2)]; //@line 5711 "tcc_bootstrap.c"
 var $230=(($229+16)|0); //@line 5711 "tcc_bootstrap.c"
 var $231=$230; //@line 5711 "tcc_bootstrap.c"
 var $st$19$0=(($231)|0);
 HEAP32[(($st$19$0)>>2)]=$228$0;
 var $st$20$1=(($231+4)|0);
 HEAP32[(($st$20$1)>>2)]=$228$1;
 label=49;break; //@line 5711 "tcc_bootstrap.c"
 case 40: 
 var $233=$sbt; //@line 5712 "tcc_bootstrap.c"
 var $234=($233|0)==20; //@line 5712 "tcc_bootstrap.c"
 if($234){label=41;break;}else{label=42;break;} //@line 5712 "tcc_bootstrap.c"
 case 41: 
 label=48;break; //@line 5712 "tcc_bootstrap.c"
 case 42: 
 var $237=$sbt; //@line 5714 "tcc_bootstrap.c"
 var $238=$237&16; //@line 5714 "tcc_bootstrap.c"
 var $239=($238|0)!=0; //@line 5714 "tcc_bootstrap.c"
 if($239){label=43;break;}else{label=44;break;} //@line 5714 "tcc_bootstrap.c"
 case 43: 
 var $241=HEAP32[((9288)>>2)]; //@line 5715 "tcc_bootstrap.c"
 var $242=(($241+16)|0); //@line 5715 "tcc_bootstrap.c"
 var $243=$242; //@line 5715 "tcc_bootstrap.c"
 var $ld$21$0=(($243)|0);
 var $244$0=HEAP32[(($ld$21$0)>>2)];
 var $ld$22$1=(($243+4)|0);
 var $244$1=HEAP32[(($ld$22$1)>>2)];
 var $245$0=$244$0;
 var $245=$245$0;
 var $246$0=$245;
 var $246$1=0;
 var $247=HEAP32[((9288)>>2)]; //@line 5715 "tcc_bootstrap.c"
 var $248=(($247+16)|0); //@line 5715 "tcc_bootstrap.c"
 var $249=$248; //@line 5715 "tcc_bootstrap.c"
 var $st$23$0=(($249)|0);
 HEAP32[(($st$23$0)>>2)]=$246$0;
 var $st$24$1=(($249+4)|0);
 HEAP32[(($st$24$1)>>2)]=$246$1;
 label=47;break; //@line 5715 "tcc_bootstrap.c"
 case 44: 
 var $251=$sbt; //@line 5716 "tcc_bootstrap.c"
 var $252=($251|0)!=4; //@line 5716 "tcc_bootstrap.c"
 if($252){label=45;break;}else{label=46;break;} //@line 5716 "tcc_bootstrap.c"
 case 45: 
 var $254=HEAP32[((9288)>>2)]; //@line 5717 "tcc_bootstrap.c"
 var $255=(($254+16)|0); //@line 5717 "tcc_bootstrap.c"
 var $256=$255; //@line 5717 "tcc_bootstrap.c"
 var $ld$25$0=(($256)|0);
 var $257$0=HEAP32[(($ld$25$0)>>2)];
 var $ld$26$1=(($256+4)|0);
 var $257$1=HEAP32[(($ld$26$1)>>2)];
 var $258$0=$257$0;
 var $258=$258$0;
 var $259$0=$258;
 var $259$1=0;
 var $260=HEAP32[((9288)>>2)]; //@line 5717 "tcc_bootstrap.c"
 var $261=(($260+16)|0); //@line 5717 "tcc_bootstrap.c"
 var $262=$261; //@line 5717 "tcc_bootstrap.c"
 var $ld$27$0=(($262)|0);
 var $263$0=HEAP32[(($ld$27$0)>>2)];
 var $ld$28$1=(($262+4)|0);
 var $263$1=HEAP32[(($ld$28$1)>>2)];
 var $$etemp$29$0=-2147483648;
 var $$etemp$29$1=0;
 var $264$0=$263$0&$$etemp$29$0;
 var $264$1=$263$1&$$etemp$29$1;
 var $$etemp$30$0=0;
 var $$etemp$30$1=0;
 var $265$0=_i64Subtract($$etemp$30$0,$$etemp$30$1,$264$0,$264$1);var $265$1=tempRet0; //@line 5717 "tcc_bootstrap.c"
 var $266$0=$259$0|$265$0;
 var $266$1=$259$1|$265$1;
 var $267=HEAP32[((9288)>>2)]; //@line 5717 "tcc_bootstrap.c"
 var $268=(($267+16)|0); //@line 5717 "tcc_bootstrap.c"
 var $269=$268; //@line 5717 "tcc_bootstrap.c"
 var $st$31$0=(($269)|0);
 HEAP32[(($st$31$0)>>2)]=$266$0;
 var $st$32$1=(($269+4)|0);
 HEAP32[(($st$32$1)>>2)]=$266$1;
 label=46;break; //@line 5717 "tcc_bootstrap.c"
 case 46: 
 label=47;break;
 case 47: 
 label=48;break;
 case 48: 
 label=49;break;
 case 49: 
 var $274=$dbt; //@line 5719 "tcc_bootstrap.c"
 var $275=($274|0)==20; //@line 5719 "tcc_bootstrap.c"
 if($275){label=50;break;}else{label=51;break;} //@line 5719 "tcc_bootstrap.c"
 case 50: 
 label=62;break; //@line 5719 "tcc_bootstrap.c"
 case 51: 
 var $278=$dbt; //@line 5721 "tcc_bootstrap.c"
 var $279=($278|0)==11; //@line 5721 "tcc_bootstrap.c"
 if($279){label=52;break;}else{label=53;break;} //@line 5721 "tcc_bootstrap.c"
 case 52: 
 var $281=HEAP32[((9288)>>2)]; //@line 5722 "tcc_bootstrap.c"
 var $282=(($281+16)|0); //@line 5722 "tcc_bootstrap.c"
 var $283=$282; //@line 5722 "tcc_bootstrap.c"
 var $ld$33$0=(($283)|0);
 var $284$0=HEAP32[(($ld$33$0)>>2)];
 var $ld$34$1=(($283+4)|0);
 var $284$1=HEAP32[(($ld$34$1)>>2)];
 var $$etemp$35$0=0;
 var $$etemp$35$1=0;
 var $285=(($284$0|0) != ($$etemp$35$0|0)) | (($284$1|0) != ($$etemp$35$1|0)); //@line 5722 "tcc_bootstrap.c"
 var $286=($285&1); //@line 5722 "tcc_bootstrap.c"
 var $287$0=$286;
 var $287$1=((((($286|0)<0))|0)?-1:0);
 var $288=HEAP32[((9288)>>2)]; //@line 5722 "tcc_bootstrap.c"
 var $289=(($288+16)|0); //@line 5722 "tcc_bootstrap.c"
 var $290=$289; //@line 5722 "tcc_bootstrap.c"
 var $st$36$0=(($290)|0);
 HEAP32[(($st$36$0)>>2)]=$287$0;
 var $st$37$1=(($290+4)|0);
 HEAP32[(($st$37$1)>>2)]=$287$1;
 label=61;break; //@line 5722 "tcc_bootstrap.c"
 case 53: 
 var $292=$dbt; //@line 5723 "tcc_bootstrap.c"
 var $293=($292|0)!=4; //@line 5723 "tcc_bootstrap.c"
 if($293){label=54;break;}else{label=60;break;} //@line 5723 "tcc_bootstrap.c"
 case 54: 
 var $295=$dbt; //@line 5726 "tcc_bootstrap.c"
 var $296=$295&15; //@line 5726 "tcc_bootstrap.c"
 var $297=($296|0)==1; //@line 5726 "tcc_bootstrap.c"
 if($297){label=55;break;}else{label=56;break;} //@line 5726 "tcc_bootstrap.c"
 case 55: 
 var $305=255;label=57;break; //@line 5726 "tcc_bootstrap.c"
 case 56: 
 var $300=$dbt; //@line 5726 "tcc_bootstrap.c"
 var $301=$300&15; //@line 5726 "tcc_bootstrap.c"
 var $302=($301|0)==2; //@line 5726 "tcc_bootstrap.c"
 var $303=($302?65535:-1); //@line 5726 "tcc_bootstrap.c"
 var $305=$303;label=57;break; //@line 5726 "tcc_bootstrap.c"
 case 57: 
 var $305; //@line 5726 "tcc_bootstrap.c"
 $m=$305; //@line 5726 "tcc_bootstrap.c"
 var $306=$m; //@line 5727 "tcc_bootstrap.c"
 var $307$0=$306;
 var $307$1=0;
 var $308=HEAP32[((9288)>>2)]; //@line 5727 "tcc_bootstrap.c"
 var $309=(($308+16)|0); //@line 5727 "tcc_bootstrap.c"
 var $310=$309; //@line 5727 "tcc_bootstrap.c"
 var $ld$38$0=(($310)|0);
 var $311$0=HEAP32[(($ld$38$0)>>2)];
 var $ld$39$1=(($310+4)|0);
 var $311$1=HEAP32[(($ld$39$1)>>2)];
 var $312$0=$311$0&$307$0;
 var $312$1=$311$1&$307$1;
 var $st$40$0=(($310)|0);
 HEAP32[(($st$40$0)>>2)]=$312$0;
 var $st$41$1=(($310+4)|0);
 HEAP32[(($st$41$1)>>2)]=$312$1;
 var $313=$dbt; //@line 5728 "tcc_bootstrap.c"
 var $314=$313&16; //@line 5728 "tcc_bootstrap.c"
 var $315=($314|0)!=0; //@line 5728 "tcc_bootstrap.c"
 if($315){label=59;break;}else{label=58;break;} //@line 5728 "tcc_bootstrap.c"
 case 58: 
 var $317=HEAP32[((9288)>>2)]; //@line 5729 "tcc_bootstrap.c"
 var $318=(($317+16)|0); //@line 5729 "tcc_bootstrap.c"
 var $319=$318; //@line 5729 "tcc_bootstrap.c"
 var $ld$42$0=(($319)|0);
 var $320$0=HEAP32[(($ld$42$0)>>2)];
 var $ld$43$1=(($319+4)|0);
 var $320$1=HEAP32[(($ld$43$1)>>2)];
 var $321=$m; //@line 5729 "tcc_bootstrap.c"
 var $322=$321>>>1; //@line 5729 "tcc_bootstrap.c"
 var $323=((($322)+(1))|0); //@line 5729 "tcc_bootstrap.c"
 var $324$0=$323;
 var $324$1=0;
 var $325$0=$320$0&$324$0;
 var $325$1=$320$1&$324$1;
 var $$etemp$44$0=0;
 var $$etemp$44$1=0;
 var $326$0=_i64Subtract($$etemp$44$0,$$etemp$44$1,$325$0,$325$1);var $326$1=tempRet0; //@line 5729 "tcc_bootstrap.c"
 var $327=HEAP32[((9288)>>2)]; //@line 5729 "tcc_bootstrap.c"
 var $328=(($327+16)|0); //@line 5729 "tcc_bootstrap.c"
 var $329=$328; //@line 5729 "tcc_bootstrap.c"
 var $ld$45$0=(($329)|0);
 var $330$0=HEAP32[(($ld$45$0)>>2)];
 var $ld$46$1=(($329+4)|0);
 var $330$1=HEAP32[(($ld$46$1)>>2)];
 var $331$0=$330$0|$326$0;
 var $331$1=$330$1|$326$1;
 var $st$47$0=(($329)|0);
 HEAP32[(($st$47$0)>>2)]=$331$0;
 var $st$48$1=(($329+4)|0);
 HEAP32[(($st$48$1)>>2)]=$331$1;
 label=59;break; //@line 5729 "tcc_bootstrap.c"
 case 59: 
 label=60;break; //@line 5730 "tcc_bootstrap.c"
 case 60: 
 label=61;break;
 case 61: 
 label=62;break;
 case 62: 
 label=63;break;
 case 63: 
 label=64;break;
 case 64: 
 label=65;break;
 case 65: 
 label=114;break; //@line 5732 "tcc_bootstrap.c"
 case 66: 
 var $340=$p; //@line 5732 "tcc_bootstrap.c"
 var $341=($340|0)!=0; //@line 5732 "tcc_bootstrap.c"
 if($341){label=67;break;}else{label=69;break;} //@line 5732 "tcc_bootstrap.c"
 case 67: 
 var $343=$dbt; //@line 5732 "tcc_bootstrap.c"
 var $344=($343|0)==11; //@line 5732 "tcc_bootstrap.c"
 if($344){label=68;break;}else{label=69;break;} //@line 5732 "tcc_bootstrap.c"
 case 68: 
 var $346=HEAP32[((9288)>>2)]; //@line 5733 "tcc_bootstrap.c"
 var $347=(($346+8)|0); //@line 5733 "tcc_bootstrap.c"
 HEAP16[(($347)>>1)]=48; //@line 5733 "tcc_bootstrap.c"
 var $348=HEAP32[((9288)>>2)]; //@line 5734 "tcc_bootstrap.c"
 var $349=(($348+16)|0); //@line 5734 "tcc_bootstrap.c"
 var $350=$349; //@line 5734 "tcc_bootstrap.c"
 var $$etemp$49$0=1;
 var $$etemp$49$1=0;
 var $st$50$0=(($350)|0);
 HEAP32[(($st$50$0)>>2)]=$$etemp$49$0;
 var $st$51$1=(($350+4)|0);
 HEAP32[(($st$51$1)>>2)]=$$etemp$49$1;
 label=113;break; //@line 5735 "tcc_bootstrap.c"
 case 69: 
 var $352=$sf; //@line 5736 "tcc_bootstrap.c"
 var $353=($352|0)!=0; //@line 5736 "tcc_bootstrap.c"
 if($353){label=70;break;}else{label=72;break;} //@line 5736 "tcc_bootstrap.c"
 case 70: 
 var $355=$df; //@line 5736 "tcc_bootstrap.c"
 var $356=($355|0)!=0; //@line 5736 "tcc_bootstrap.c"
 if($356){label=71;break;}else{label=72;break;} //@line 5736 "tcc_bootstrap.c"
 case 71: 
 var $358=$dbt; //@line 5737 "tcc_bootstrap.c"
 _gen_cvt_ftof($358); //@line 5737 "tcc_bootstrap.c"
 label=112;break; //@line 5738 "tcc_bootstrap.c"
 case 72: 
 var $360=$df; //@line 5738 "tcc_bootstrap.c"
 var $361=($360|0)!=0; //@line 5738 "tcc_bootstrap.c"
 if($361){label=73;break;}else{label=74;break;} //@line 5738 "tcc_bootstrap.c"
 case 73: 
 var $363=$dbt; //@line 5739 "tcc_bootstrap.c"
 _gen_cvt_itof1($363); //@line 5739 "tcc_bootstrap.c"
 label=111;break; //@line 5740 "tcc_bootstrap.c"
 case 74: 
 var $365=$sf; //@line 5740 "tcc_bootstrap.c"
 var $366=($365|0)!=0; //@line 5740 "tcc_bootstrap.c"
 if($366){label=75;break;}else{label=86;break;} //@line 5740 "tcc_bootstrap.c"
 case 75: 
 var $368=$dbt; //@line 5741 "tcc_bootstrap.c"
 var $369=($368|0)==11; //@line 5741 "tcc_bootstrap.c"
 if($369){label=76;break;}else{label=77;break;} //@line 5741 "tcc_bootstrap.c"
 case 76: 
 _vpushi(0); //@line 5742 "tcc_bootstrap.c"
 _gen_op(149); //@line 5743 "tcc_bootstrap.c"
 label=85;break; //@line 5744 "tcc_bootstrap.c"
 case 77: 
 var $372=$dbt; //@line 5745 "tcc_bootstrap.c"
 var $373=($372|0)!=19; //@line 5745 "tcc_bootstrap.c"
 if($373){label=78;break;}else{label=81;break;} //@line 5745 "tcc_bootstrap.c"
 case 78: 
 var $375=$dbt; //@line 5745 "tcc_bootstrap.c"
 var $376=($375|0)!=20; //@line 5745 "tcc_bootstrap.c"
 if($376){label=79;break;}else{label=81;break;} //@line 5745 "tcc_bootstrap.c"
 case 79: 
 var $378=$dbt; //@line 5745 "tcc_bootstrap.c"
 var $379=($378|0)!=4; //@line 5745 "tcc_bootstrap.c"
 if($379){label=80;break;}else{label=81;break;} //@line 5745 "tcc_bootstrap.c"
 case 80: 
 $dbt=3; //@line 5748 "tcc_bootstrap.c"
 label=81;break; //@line 5748 "tcc_bootstrap.c"
 case 81: 
 var $382=$dbt; //@line 5749 "tcc_bootstrap.c"
 _gen_cvt_ftoi1($382); //@line 5749 "tcc_bootstrap.c"
 var $383=$dbt; //@line 5750 "tcc_bootstrap.c"
 var $384=($383|0)==3; //@line 5750 "tcc_bootstrap.c"
 if($384){label=82;break;}else{label=84;break;} //@line 5750 "tcc_bootstrap.c"
 case 82: 
 var $386=$1; //@line 5750 "tcc_bootstrap.c"
 var $387=(($386)|0); //@line 5750 "tcc_bootstrap.c"
 var $388=HEAP32[(($387)>>2)]; //@line 5750 "tcc_bootstrap.c"
 var $389=$388&31; //@line 5750 "tcc_bootstrap.c"
 var $390=$dbt; //@line 5750 "tcc_bootstrap.c"
 var $391=($389|0)!=($390|0); //@line 5750 "tcc_bootstrap.c"
 if($391){label=83;break;}else{label=84;break;} //@line 5750 "tcc_bootstrap.c"
 case 83: 
 var $393=$dbt; //@line 5751 "tcc_bootstrap.c"
 var $394=HEAP32[((9288)>>2)]; //@line 5751 "tcc_bootstrap.c"
 var $395=(($394)|0); //@line 5751 "tcc_bootstrap.c"
 var $396=(($395)|0); //@line 5751 "tcc_bootstrap.c"
 HEAP32[(($396)>>2)]=$393; //@line 5751 "tcc_bootstrap.c"
 var $397=$1; //@line 5752 "tcc_bootstrap.c"
 _gen_cast($397); //@line 5752 "tcc_bootstrap.c"
 label=84;break; //@line 5753 "tcc_bootstrap.c"
 case 84: 
 label=85;break;
 case 85: 
 label=110;break; //@line 5755 "tcc_bootstrap.c"
 case 86: 
 var $401=$dbt; //@line 5755 "tcc_bootstrap.c"
 var $402=$401&15; //@line 5755 "tcc_bootstrap.c"
 var $403=($402|0)==4; //@line 5755 "tcc_bootstrap.c"
 if($403){label=87;break;}else{label=95;break;} //@line 5755 "tcc_bootstrap.c"
 case 87: 
 var $405=$sbt; //@line 5756 "tcc_bootstrap.c"
 var $406=$405&15; //@line 5756 "tcc_bootstrap.c"
 var $407=($406|0)!=4; //@line 5756 "tcc_bootstrap.c"
 if($407){label=88;break;}else{label=94;break;} //@line 5756 "tcc_bootstrap.c"
 case 88: 
 var $409=_gv(1); //@line 5757 "tcc_bootstrap.c"
 var $410=$sbt; //@line 5758 "tcc_bootstrap.c"
 var $411=($410|0)==19; //@line 5758 "tcc_bootstrap.c"
 if($411){label=89;break;}else{label=90;break;} //@line 5758 "tcc_bootstrap.c"
 case 89: 
 _vpushi(0); //@line 5759 "tcc_bootstrap.c"
 var $413=_gv(1); //@line 5760 "tcc_bootstrap.c"
 label=93;break; //@line 5761 "tcc_bootstrap.c"
 case 90: 
 var $415=$sbt; //@line 5762 "tcc_bootstrap.c"
 var $416=($415|0)==5; //@line 5762 "tcc_bootstrap.c"
 if($416){label=91;break;}else{label=92;break;} //@line 5762 "tcc_bootstrap.c"
 case 91: 
 _gen_cast_s(3); //@line 5763 "tcc_bootstrap.c"
 label=92;break; //@line 5764 "tcc_bootstrap.c"
 case 92: 
 _gv_dup(); //@line 5765 "tcc_bootstrap.c"
 _vpushi(31); //@line 5766 "tcc_bootstrap.c"
 _gen_op(2); //@line 5767 "tcc_bootstrap.c"
 label=93;break;
 case 93: 
 var $420=HEAP32[((9288)>>2)]; //@line 5769 "tcc_bootstrap.c"
 var $421=(($420+8)|0); //@line 5769 "tcc_bootstrap.c"
 var $422=HEAP16[(($421)>>1)]; //@line 5769 "tcc_bootstrap.c"
 var $423=HEAP32[((9288)>>2)]; //@line 5769 "tcc_bootstrap.c"
 var $424=((($423)-(40))|0); //@line 5769 "tcc_bootstrap.c"
 var $425=(($424+10)|0); //@line 5769 "tcc_bootstrap.c"
 HEAP16[(($425)>>1)]=$422; //@line 5769 "tcc_bootstrap.c"
 _vpop(); //@line 5770 "tcc_bootstrap.c"
 label=94;break; //@line 5771 "tcc_bootstrap.c"
 case 94: 
 label=109;break; //@line 5772 "tcc_bootstrap.c"
 case 95: 
 var $428=$dbt; //@line 5772 "tcc_bootstrap.c"
 var $429=($428|0)==11; //@line 5772 "tcc_bootstrap.c"
 if($429){label=96;break;}else{label=97;break;} //@line 5772 "tcc_bootstrap.c"
 case 96: 
 _vpushi(0); //@line 5773 "tcc_bootstrap.c"
 _gen_op(149); //@line 5774 "tcc_bootstrap.c"
 label=108;break; //@line 5775 "tcc_bootstrap.c"
 case 97: 
 var $432=$dbt; //@line 5775 "tcc_bootstrap.c"
 var $433=$432&15; //@line 5775 "tcc_bootstrap.c"
 var $434=($433|0)==1; //@line 5775 "tcc_bootstrap.c"
 if($434){label=99;break;}else{label=98;break;} //@line 5775 "tcc_bootstrap.c"
 case 98: 
 var $436=$dbt; //@line 5775 "tcc_bootstrap.c"
 var $437=$436&15; //@line 5775 "tcc_bootstrap.c"
 var $438=($437|0)==2; //@line 5775 "tcc_bootstrap.c"
 if($438){label=99;break;}else{label=102;break;} //@line 5775 "tcc_bootstrap.c"
 case 99: 
 var $440=$sbt; //@line 5777 "tcc_bootstrap.c"
 var $441=($440|0)==5; //@line 5777 "tcc_bootstrap.c"
 if($441){label=100;break;}else{label=101;break;} //@line 5777 "tcc_bootstrap.c"
 case 100: 
 var $443=HEAP32[((9288)>>2)]; //@line 5778 "tcc_bootstrap.c"
 var $444=(($443)|0); //@line 5778 "tcc_bootstrap.c"
 var $445=(($444)|0); //@line 5778 "tcc_bootstrap.c"
 HEAP32[(($445)>>2)]=3; //@line 5778 "tcc_bootstrap.c"
 _tcc_warning(9144,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs; //@line 5779 "tcc_bootstrap.c"
 label=101;break; //@line 5780 "tcc_bootstrap.c"
 case 101: 
 var $447=$dbt; //@line 5781 "tcc_bootstrap.c"
 _force_charshort_cast($447); //@line 5781 "tcc_bootstrap.c"
 label=107;break; //@line 5782 "tcc_bootstrap.c"
 case 102: 
 var $449=$dbt; //@line 5782 "tcc_bootstrap.c"
 var $450=$449&15; //@line 5782 "tcc_bootstrap.c"
 var $451=($450|0)==3; //@line 5782 "tcc_bootstrap.c"
 if($451){label=103;break;}else{label=106;break;} //@line 5782 "tcc_bootstrap.c"
 case 103: 
 var $453=$sbt; //@line 5783 "tcc_bootstrap.c"
 var $454=$453&15; //@line 5783 "tcc_bootstrap.c"
 var $455=($454|0)==4; //@line 5783 "tcc_bootstrap.c"
 if($455){label=104;break;}else{label=105;break;} //@line 5783 "tcc_bootstrap.c"
 case 104: 
 _lexpand(); //@line 5784 "tcc_bootstrap.c"
 _vpop(); //@line 5785 "tcc_bootstrap.c"
 label=105;break; //@line 5786 "tcc_bootstrap.c"
 case 105: 
 label=106;break; //@line 5787 "tcc_bootstrap.c"
 case 106: 
 label=107;break;
 case 107: 
 label=108;break;
 case 108: 
 label=109;break;
 case 109: 
 label=110;break;
 case 110: 
 label=111;break;
 case 111: 
 label=112;break;
 case 112: 
 label=113;break;
 case 113: 
 label=114;break;
 case 114: 
 label=119;break; //@line 5789 "tcc_bootstrap.c"
 case 115: 
 var $468=$dbt; //@line 5789 "tcc_bootstrap.c"
 var $469=$468&15; //@line 5789 "tcc_bootstrap.c"
 var $470=($469|0)==5; //@line 5789 "tcc_bootstrap.c"
 if($470){label=116;break;}else{label=118;break;} //@line 5789 "tcc_bootstrap.c"
 case 116: 
 var $472=HEAP32[((9288)>>2)]; //@line 5789 "tcc_bootstrap.c"
 var $473=(($472+8)|0); //@line 5789 "tcc_bootstrap.c"
 var $474=HEAP16[(($473)>>1)]; //@line 5789 "tcc_bootstrap.c"
 var $475=($474&65535); //@line 5789 "tcc_bootstrap.c"
 var $476=$475&256; //@line 5789 "tcc_bootstrap.c"
 var $477=($476|0)!=0; //@line 5789 "tcc_bootstrap.c"
 if($477){label=118;break;}else{label=117;break;} //@line 5789 "tcc_bootstrap.c"
 case 117: 
 var $479=HEAP32[((9288)>>2)]; //@line 5790 "tcc_bootstrap.c"
 var $480=(($479+8)|0); //@line 5790 "tcc_bootstrap.c"
 var $481=HEAP16[(($480)>>1)]; //@line 5790 "tcc_bootstrap.c"
 var $482=($481&65535); //@line 5790 "tcc_bootstrap.c"
 var $483=$482&-28673; //@line 5790 "tcc_bootstrap.c"
 var $484=$1; //@line 5791 "tcc_bootstrap.c"
 var $485=(($484+4)|0); //@line 5791 "tcc_bootstrap.c"
 var $486=HEAP32[(($485)>>2)]; //@line 5791 "tcc_bootstrap.c"
 var $487=(($486+16)|0); //@line 5791 "tcc_bootstrap.c"
 var $488=(($487)|0); //@line 5791 "tcc_bootstrap.c"
 var $489=HEAP32[(($488)>>2)]; //@line 5791 "tcc_bootstrap.c"
 var $490=_lvalue_type($489); //@line 5791 "tcc_bootstrap.c"
 var $491=$490&28672; //@line 5791 "tcc_bootstrap.c"
 var $492=$483|$491; //@line 5791 "tcc_bootstrap.c"
 var $493=(($492)&65535); //@line 5791 "tcc_bootstrap.c"
 var $494=HEAP32[((9288)>>2)]; //@line 5791 "tcc_bootstrap.c"
 var $495=(($494+8)|0); //@line 5791 "tcc_bootstrap.c"
 HEAP16[(($495)>>1)]=$493; //@line 5791 "tcc_bootstrap.c"
 label=118;break; //@line 5792 "tcc_bootstrap.c"
 case 118: 
 label=119;break;
 case 119: 
 var $498=HEAP32[((9288)>>2)]; //@line 5793 "tcc_bootstrap.c"
 var $499=(($498)|0); //@line 5793 "tcc_bootstrap.c"
 var $500=$1; //@line 5793 "tcc_bootstrap.c"
 var $501=$499; //@line 5793 "tcc_bootstrap.c"
 var $502=$500; //@line 5793 "tcc_bootstrap.c"
 assert(8 % 1 === 0);HEAP32[(($501)>>2)]=HEAP32[(($502)>>2)];HEAP32[((($501)+(4))>>2)]=HEAP32[((($502)+(4))>>2)]; //@line 5793 "tcc_bootstrap.c"
 STACKTOP=sp;return; //@line 5794 "tcc_bootstrap.c"
  default: assert(0, "bad label: " + label);
 }

}


function _mk_pointer($type){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 var $s;
 $1=$type;
 var $2=$1; //@line 5847 "tcc_bootstrap.c"
 var $3=_sym_push(536870912,$2,0,-1); //@line 5847 "tcc_bootstrap.c"
 $s=$3; //@line 5847 "tcc_bootstrap.c"
 var $4=$1; //@line 5848 "tcc_bootstrap.c"
 var $5=(($4)|0); //@line 5848 "tcc_bootstrap.c"
 var $6=HEAP32[(($5)>>2)]; //@line 5848 "tcc_bootstrap.c"
 var $7=$6&61440; //@line 5848 "tcc_bootstrap.c"
 var $8=5|$7; //@line 5848 "tcc_bootstrap.c"
 var $9=$1; //@line 5848 "tcc_bootstrap.c"
 var $10=(($9)|0); //@line 5848 "tcc_bootstrap.c"
 HEAP32[(($10)>>2)]=$8; //@line 5848 "tcc_bootstrap.c"
 var $11=$s; //@line 5849 "tcc_bootstrap.c"
 var $12=$1; //@line 5849 "tcc_bootstrap.c"
 var $13=(($12+4)|0); //@line 5849 "tcc_bootstrap.c"
 HEAP32[(($13)>>2)]=$11; //@line 5849 "tcc_bootstrap.c"
 STACKTOP=sp;return; //@line 5850 "tcc_bootstrap.c"
}


function _gaddrof(){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=HEAP32[((9288)>>2)]; //@line 4699 "tcc_bootstrap.c"
 var $2=(($1+8)|0); //@line 4699 "tcc_bootstrap.c"
 var $3=HEAP16[(($2)>>1)]; //@line 4699 "tcc_bootstrap.c"
 var $4=($3&65535); //@line 4699 "tcc_bootstrap.c"
 var $5=$4&-257; //@line 4699 "tcc_bootstrap.c"
 var $6=(($5)&65535); //@line 4699 "tcc_bootstrap.c"
 HEAP16[(($2)>>1)]=$6; //@line 4699 "tcc_bootstrap.c"
 var $7=HEAP32[((9288)>>2)]; //@line 4700 "tcc_bootstrap.c"
 var $8=(($7+8)|0); //@line 4700 "tcc_bootstrap.c"
 var $9=HEAP16[(($8)>>1)]; //@line 4700 "tcc_bootstrap.c"
 var $10=($9&65535); //@line 4700 "tcc_bootstrap.c"
 var $11=$10&63; //@line 4700 "tcc_bootstrap.c"
 var $12=($11|0)==49; //@line 4700 "tcc_bootstrap.c"
 if($12){label=2;break;}else{label=3;break;} //@line 4700 "tcc_bootstrap.c"
 case 2: 
 var $14=HEAP32[((9288)>>2)]; //@line 4701 "tcc_bootstrap.c"
 var $15=(($14+8)|0); //@line 4701 "tcc_bootstrap.c"
 var $16=HEAP16[(($15)>>1)]; //@line 4701 "tcc_bootstrap.c"
 var $17=($16&65535); //@line 4701 "tcc_bootstrap.c"
 var $18=$17&-28736; //@line 4701 "tcc_bootstrap.c"
 var $19=$18|50; //@line 4701 "tcc_bootstrap.c"
 var $20=$19|256; //@line 4701 "tcc_bootstrap.c"
 var $21=(($20)&65535); //@line 4701 "tcc_bootstrap.c"
 var $22=HEAP32[((9288)>>2)]; //@line 4701 "tcc_bootstrap.c"
 var $23=(($22+8)|0); //@line 4701 "tcc_bootstrap.c"
 HEAP16[(($23)>>1)]=$21; //@line 4701 "tcc_bootstrap.c"
 label=3;break; //@line 4701 "tcc_bootstrap.c"
 case 3: 
 return; //@line 4702 "tcc_bootstrap.c"
  default: assert(0, "bad label: " + label);
 }

}


function _move_reg($r,$s,$t){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+40)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $sv=sp;
 $1=$r;
 $2=$s;
 $3=$t;
 var $4=$1; //@line 4688 "tcc_bootstrap.c"
 var $5=$2; //@line 4688 "tcc_bootstrap.c"
 var $6=($4|0)!=($5|0); //@line 4688 "tcc_bootstrap.c"
 if($6){label=2;break;}else{label=3;break;} //@line 4688 "tcc_bootstrap.c"
 case 2: 
 var $8=$1; //@line 4689 "tcc_bootstrap.c"
 _save_reg($8); //@line 4689 "tcc_bootstrap.c"
 var $9=$3; //@line 4690 "tcc_bootstrap.c"
 var $10=(($sv)|0); //@line 4690 "tcc_bootstrap.c"
 var $11=(($10)|0); //@line 4690 "tcc_bootstrap.c"
 HEAP32[(($11)>>2)]=$9; //@line 4690 "tcc_bootstrap.c"
 var $12=(($sv)|0); //@line 4691 "tcc_bootstrap.c"
 var $13=(($12+4)|0); //@line 4691 "tcc_bootstrap.c"
 HEAP32[(($13)>>2)]=0; //@line 4691 "tcc_bootstrap.c"
 var $14=$2; //@line 4692 "tcc_bootstrap.c"
 var $15=(($14)&65535); //@line 4692 "tcc_bootstrap.c"
 var $16=(($sv+8)|0); //@line 4692 "tcc_bootstrap.c"
 HEAP16[(($16)>>1)]=$15; //@line 4692 "tcc_bootstrap.c"
 var $17=(($sv+16)|0); //@line 4693 "tcc_bootstrap.c"
 var $18=$17; //@line 4693 "tcc_bootstrap.c"
 var $$etemp$0$0=0;
 var $$etemp$0$1=0;
 var $st$1$0=(($18)|0);
 HEAP32[(($st$1$0)>>2)]=$$etemp$0$0;
 var $st$2$1=(($18+4)|0);
 HEAP32[(($st$2$1)>>2)]=$$etemp$0$1;
 var $19=$1; //@line 4694 "tcc_bootstrap.c"
 _load($19,$sv); //@line 4694 "tcc_bootstrap.c"
 label=3;break; //@line 4695 "tcc_bootstrap.c"
 case 3: 
 STACKTOP=sp;return; //@line 4696 "tcc_bootstrap.c"
  default: assert(0, "bad label: " + label);
 }

}


function _indir(){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=HEAP32[((9288)>>2)]; //@line 7033 "tcc_bootstrap.c"
 var $2=(($1)|0); //@line 7033 "tcc_bootstrap.c"
 var $3=(($2)|0); //@line 7033 "tcc_bootstrap.c"
 var $4=HEAP32[(($3)>>2)]; //@line 7033 "tcc_bootstrap.c"
 var $5=$4&15; //@line 7033 "tcc_bootstrap.c"
 var $6=($5|0)!=5; //@line 7033 "tcc_bootstrap.c"
 if($6){label=2;break;}else{label=5;break;} //@line 7033 "tcc_bootstrap.c"
 case 2: 
 var $8=HEAP32[((9288)>>2)]; //@line 7034 "tcc_bootstrap.c"
 var $9=(($8)|0); //@line 7034 "tcc_bootstrap.c"
 var $10=(($9)|0); //@line 7034 "tcc_bootstrap.c"
 var $11=HEAP32[(($10)>>2)]; //@line 7034 "tcc_bootstrap.c"
 var $12=$11&15; //@line 7034 "tcc_bootstrap.c"
 var $13=($12|0)==6; //@line 7034 "tcc_bootstrap.c"
 if($13){label=3;break;}else{label=4;break;} //@line 7034 "tcc_bootstrap.c"
 case 3: 
 label=11;break; //@line 7035 "tcc_bootstrap.c"
 case 4: 
 _expect(2944); //@line 7036 "tcc_bootstrap.c"
 label=5;break; //@line 7037 "tcc_bootstrap.c"
 case 5: 
 var $17=HEAP32[((9288)>>2)]; //@line 7038 "tcc_bootstrap.c"
 var $18=(($17+8)|0); //@line 7038 "tcc_bootstrap.c"
 var $19=HEAP16[(($18)>>1)]; //@line 7038 "tcc_bootstrap.c"
 var $20=($19&65535); //@line 7038 "tcc_bootstrap.c"
 var $21=$20&256; //@line 7038 "tcc_bootstrap.c"
 var $22=($21|0)!=0; //@line 7038 "tcc_bootstrap.c"
 if($22){label=6;break;}else{label=7;break;} //@line 7038 "tcc_bootstrap.c"
 case 6: 
 var $24=_gv(1); //@line 7039 "tcc_bootstrap.c"
 label=7;break; //@line 7039 "tcc_bootstrap.c"
 case 7: 
 var $26=HEAP32[((9288)>>2)]; //@line 7040 "tcc_bootstrap.c"
 var $27=(($26)|0); //@line 7040 "tcc_bootstrap.c"
 var $28=HEAP32[((9288)>>2)]; //@line 7040 "tcc_bootstrap.c"
 var $29=(($28)|0); //@line 7040 "tcc_bootstrap.c"
 var $30=_pointed_type($29); //@line 7040 "tcc_bootstrap.c"
 var $31=$27; //@line 7040 "tcc_bootstrap.c"
 var $32=$30; //@line 7040 "tcc_bootstrap.c"
 assert(8 % 1 === 0);HEAP32[(($31)>>2)]=HEAP32[(($32)>>2)];HEAP32[((($31)+(4))>>2)]=HEAP32[((($32)+(4))>>2)]; //@line 7040 "tcc_bootstrap.c"
 var $33=HEAP32[((9288)>>2)]; //@line 7041 "tcc_bootstrap.c"
 var $34=(($33)|0); //@line 7041 "tcc_bootstrap.c"
 var $35=(($34)|0); //@line 7041 "tcc_bootstrap.c"
 var $36=HEAP32[(($35)>>2)]; //@line 7041 "tcc_bootstrap.c"
 var $37=$36&64; //@line 7041 "tcc_bootstrap.c"
 var $38=($37|0)!=0; //@line 7041 "tcc_bootstrap.c"
 if($38){label=11;break;}else{label=8;break;} //@line 7041 "tcc_bootstrap.c"
 case 8: 
 var $40=HEAP32[((9288)>>2)]; //@line 7041 "tcc_bootstrap.c"
 var $41=(($40)|0); //@line 7041 "tcc_bootstrap.c"
 var $42=(($41)|0); //@line 7041 "tcc_bootstrap.c"
 var $43=HEAP32[(($42)>>2)]; //@line 7041 "tcc_bootstrap.c"
 var $44=$43&1024; //@line 7041 "tcc_bootstrap.c"
 var $45=($44|0)!=0; //@line 7041 "tcc_bootstrap.c"
 if($45){label=11;break;}else{label=9;break;} //@line 7041 "tcc_bootstrap.c"
 case 9: 
 var $47=HEAP32[((9288)>>2)]; //@line 7041 "tcc_bootstrap.c"
 var $48=(($47)|0); //@line 7041 "tcc_bootstrap.c"
 var $49=(($48)|0); //@line 7041 "tcc_bootstrap.c"
 var $50=HEAP32[(($49)>>2)]; //@line 7041 "tcc_bootstrap.c"
 var $51=$50&15; //@line 7041 "tcc_bootstrap.c"
 var $52=($51|0)!=6; //@line 7041 "tcc_bootstrap.c"
 if($52){label=10;break;}else{label=11;break;} //@line 7041 "tcc_bootstrap.c"
 case 10: 
 var $54=HEAP32[((9288)>>2)]; //@line 7043 "tcc_bootstrap.c"
 var $55=(($54)|0); //@line 7043 "tcc_bootstrap.c"
 var $56=(($55)|0); //@line 7043 "tcc_bootstrap.c"
 var $57=HEAP32[(($56)>>2)]; //@line 7043 "tcc_bootstrap.c"
 var $58=_lvalue_type($57); //@line 7043 "tcc_bootstrap.c"
 var $59=HEAP32[((9288)>>2)]; //@line 7043 "tcc_bootstrap.c"
 var $60=(($59+8)|0); //@line 7043 "tcc_bootstrap.c"
 var $61=HEAP16[(($60)>>1)]; //@line 7043 "tcc_bootstrap.c"
 var $62=($61&65535); //@line 7043 "tcc_bootstrap.c"
 var $63=$62|$58; //@line 7043 "tcc_bootstrap.c"
 var $64=(($63)&65535); //@line 7043 "tcc_bootstrap.c"
 HEAP16[(($60)>>1)]=$64; //@line 7043 "tcc_bootstrap.c"
 label=11;break; //@line 7044 "tcc_bootstrap.c"
 case 11: 
 return; //@line 7043 "tcc_bootstrap.c"
  default: assert(0, "bad label: " + label);
 }

}


function _pointed_type($type){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 $1=$type;
 var $2=$1; //@line 5841 "tcc_bootstrap.c"
 var $3=(($2+4)|0); //@line 5841 "tcc_bootstrap.c"
 var $4=HEAP32[(($3)>>2)]; //@line 5841 "tcc_bootstrap.c"
 var $5=(($4+16)|0); //@line 5841 "tcc_bootstrap.c"
 STACKTOP=sp;return $5; //@line 5841 "tcc_bootstrap.c"
}


function _lvalue_type($t){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $bt;
 var $r;
 $2=$t;
 $r=256; //@line 7018 "tcc_bootstrap.c"
 var $3=$2; //@line 7019 "tcc_bootstrap.c"
 var $4=$3&15; //@line 7019 "tcc_bootstrap.c"
 $bt=$4; //@line 7019 "tcc_bootstrap.c"
 var $5=$bt; //@line 7020 "tcc_bootstrap.c"
 var $6=($5|0)==1; //@line 7020 "tcc_bootstrap.c"
 if($6){label=3;break;}else{label=2;break;} //@line 7020 "tcc_bootstrap.c"
 case 2: 
 var $8=$bt; //@line 7020 "tcc_bootstrap.c"
 var $9=($8|0)==11; //@line 7020 "tcc_bootstrap.c"
 if($9){label=3;break;}else{label=4;break;} //@line 7020 "tcc_bootstrap.c"
 case 3: 
 var $11=$r; //@line 7021 "tcc_bootstrap.c"
 var $12=$11|4096; //@line 7021 "tcc_bootstrap.c"
 $r=$12; //@line 7021 "tcc_bootstrap.c"
 label=8;break; //@line 7021 "tcc_bootstrap.c"
 case 4: 
 var $14=$bt; //@line 7022 "tcc_bootstrap.c"
 var $15=($14|0)==2; //@line 7022 "tcc_bootstrap.c"
 if($15){label=5;break;}else{label=6;break;} //@line 7022 "tcc_bootstrap.c"
 case 5: 
 var $17=$r; //@line 7023 "tcc_bootstrap.c"
 var $18=$17|8192; //@line 7023 "tcc_bootstrap.c"
 $r=$18; //@line 7023 "tcc_bootstrap.c"
 label=7;break; //@line 7023 "tcc_bootstrap.c"
 case 6: 
 var $20=$r; //@line 7025 "tcc_bootstrap.c"
 $1=$20; //@line 7025 "tcc_bootstrap.c"
 label=11;break; //@line 7025 "tcc_bootstrap.c"
 case 7: 
 label=8;break;
 case 8: 
 var $23=$2; //@line 7026 "tcc_bootstrap.c"
 var $24=$23&16; //@line 7026 "tcc_bootstrap.c"
 var $25=($24|0)!=0; //@line 7026 "tcc_bootstrap.c"
 if($25){label=9;break;}else{label=10;break;} //@line 7026 "tcc_bootstrap.c"
 case 9: 
 var $27=$r; //@line 7027 "tcc_bootstrap.c"
 var $28=$27|16384; //@line 7027 "tcc_bootstrap.c"
 $r=$28; //@line 7027 "tcc_bootstrap.c"
 label=10;break; //@line 7027 "tcc_bootstrap.c"
 case 10: 
 var $30=$r; //@line 7028 "tcc_bootstrap.c"
 $1=$30; //@line 7028 "tcc_bootstrap.c"
 label=11;break; //@line 7028 "tcc_bootstrap.c"
 case 11: 
 var $32=$1; //@line 7029 "tcc_bootstrap.c"
 STACKTOP=sp;return $32; //@line 7029 "tcc_bootstrap.c"
  default: assert(0, "bad label: " + label);
 }

}


function _save_reg($r){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 $1=$r;
 var $2=$1; //@line 4606 "tcc_bootstrap.c"
 _save_reg_upstack($2,0); //@line 4606 "tcc_bootstrap.c"
 STACKTOP=sp;return; //@line 4607 "tcc_bootstrap.c"
}


function _load($r,$sv){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+40)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $v;
 var $t;
 var $ft;
 var $fc;
 var $fr;
 var $v1=sp;
 $1=$r;
 $2=$sv;
 var $3=$2; //@line 10079 "tcc_bootstrap.c"
 var $4=(($3+8)|0); //@line 10079 "tcc_bootstrap.c"
 var $5=HEAP16[(($4)>>1)]; //@line 10079 "tcc_bootstrap.c"
 var $6=($5&65535); //@line 10079 "tcc_bootstrap.c"
 $fr=$6; //@line 10079 "tcc_bootstrap.c"
 var $7=$2; //@line 10080 "tcc_bootstrap.c"
 var $8=(($7)|0); //@line 10080 "tcc_bootstrap.c"
 var $9=(($8)|0); //@line 10080 "tcc_bootstrap.c"
 var $10=HEAP32[(($9)>>2)]; //@line 10080 "tcc_bootstrap.c"
 var $11=$10&-33; //@line 10080 "tcc_bootstrap.c"
 $ft=$11; //@line 10080 "tcc_bootstrap.c"
 var $12=$2; //@line 10081 "tcc_bootstrap.c"
 var $13=(($12)|0); //@line 10081 "tcc_bootstrap.c"
 var $14=(($13)|0); //@line 10081 "tcc_bootstrap.c"
 var $15=HEAP32[(($14)>>2)]; //@line 10081 "tcc_bootstrap.c"
 var $16=$15&-33; //@line 10081 "tcc_bootstrap.c"
 $ft=$16; //@line 10081 "tcc_bootstrap.c"
 var $17=$2; //@line 10082 "tcc_bootstrap.c"
 var $18=(($17+16)|0); //@line 10082 "tcc_bootstrap.c"
 var $19=$18; //@line 10082 "tcc_bootstrap.c"
 var $ld$0$0=(($19)|0);
 var $20$0=HEAP32[(($ld$0$0)>>2)];
 var $ld$1$1=(($19+4)|0);
 var $20$1=HEAP32[(($ld$1$1)>>2)];
 var $21$0=$20$0;
 var $21=$21$0;
 $fc=$21; //@line 10082 "tcc_bootstrap.c"
 var $22=$ft; //@line 10083 "tcc_bootstrap.c"
 var $23=$22&-769; //@line 10083 "tcc_bootstrap.c"
 $ft=$23; //@line 10083 "tcc_bootstrap.c"
 var $24=$fr; //@line 10084 "tcc_bootstrap.c"
 var $25=$24&63; //@line 10084 "tcc_bootstrap.c"
 $v=$25; //@line 10084 "tcc_bootstrap.c"
 var $26=$fr; //@line 10085 "tcc_bootstrap.c"
 var $27=$26&256; //@line 10085 "tcc_bootstrap.c"
 var $28=($27|0)!=0; //@line 10085 "tcc_bootstrap.c"
 if($28){label=2;break;}else{label=29;break;} //@line 10085 "tcc_bootstrap.c"
 case 2: 
 var $30=$v; //@line 10086 "tcc_bootstrap.c"
 var $31=($30|0)==49; //@line 10086 "tcc_bootstrap.c"
 if($31){label=3;break;}else{label=6;break;} //@line 10086 "tcc_bootstrap.c"
 case 3: 
 var $33=(($v1)|0); //@line 10087 "tcc_bootstrap.c"
 var $34=(($33)|0); //@line 10087 "tcc_bootstrap.c"
 HEAP32[(($34)>>2)]=3; //@line 10087 "tcc_bootstrap.c"
 var $35=(($v1+8)|0); //@line 10088 "tcc_bootstrap.c"
 HEAP16[(($35)>>1)]=306; //@line 10088 "tcc_bootstrap.c"
 var $36=$fc; //@line 10089 "tcc_bootstrap.c"
 var $37$0=$36;
 var $37$1=((((($36|0)<0))|0)?-1:0);
 var $38=(($v1+16)|0); //@line 10089 "tcc_bootstrap.c"
 var $39=$38; //@line 10089 "tcc_bootstrap.c"
 var $st$2$0=(($39)|0);
 HEAP32[(($st$2$0)>>2)]=$37$0;
 var $st$3$1=(($39+4)|0);
 HEAP32[(($st$3$1)>>2)]=$37$1;
 var $40=$1; //@line 10090 "tcc_bootstrap.c"
 $fr=$40; //@line 10090 "tcc_bootstrap.c"
 var $41=$fr; //@line 10091 "tcc_bootstrap.c"
 var $42=((2824+($41<<2))|0); //@line 10091 "tcc_bootstrap.c"
 var $43=HEAP32[(($42)>>2)]; //@line 10091 "tcc_bootstrap.c"
 var $44=$43&1; //@line 10091 "tcc_bootstrap.c"
 var $45=($44|0)!=0; //@line 10091 "tcc_bootstrap.c"
 if($45){label=5;break;}else{label=4;break;} //@line 10091 "tcc_bootstrap.c"
 case 4: 
 var $47=_get_reg(1); //@line 10092 "tcc_bootstrap.c"
 $fr=$47; //@line 10092 "tcc_bootstrap.c"
 label=5;break; //@line 10092 "tcc_bootstrap.c"
 case 5: 
 var $49=$fr; //@line 10093 "tcc_bootstrap.c"
 _load($49,$v1); //@line 10093 "tcc_bootstrap.c"
 label=6;break; //@line 10094 "tcc_bootstrap.c"
 case 6: 
 var $51=$ft; //@line 10095 "tcc_bootstrap.c"
 var $52=$51&15; //@line 10095 "tcc_bootstrap.c"
 var $53=($52|0)==8; //@line 10095 "tcc_bootstrap.c"
 if($53){label=7;break;}else{label=8;break;} //@line 10095 "tcc_bootstrap.c"
 case 7: 
 _o(217); //@line 10096 "tcc_bootstrap.c"
 $1=0; //@line 10097 "tcc_bootstrap.c"
 label=28;break; //@line 10098 "tcc_bootstrap.c"
 case 8: 
 var $56=$ft; //@line 10098 "tcc_bootstrap.c"
 var $57=$56&15; //@line 10098 "tcc_bootstrap.c"
 var $58=($57|0)==9; //@line 10098 "tcc_bootstrap.c"
 if($58){label=9;break;}else{label=10;break;} //@line 10098 "tcc_bootstrap.c"
 case 9: 
 _o(221); //@line 10099 "tcc_bootstrap.c"
 $1=0; //@line 10100 "tcc_bootstrap.c"
 label=27;break; //@line 10101 "tcc_bootstrap.c"
 case 10: 
 var $61=$ft; //@line 10101 "tcc_bootstrap.c"
 var $62=$61&15; //@line 10101 "tcc_bootstrap.c"
 var $63=($62|0)==10; //@line 10101 "tcc_bootstrap.c"
 if($63){label=11;break;}else{label=12;break;} //@line 10101 "tcc_bootstrap.c"
 case 11: 
 _o(219); //@line 10102 "tcc_bootstrap.c"
 $1=5; //@line 10103 "tcc_bootstrap.c"
 label=26;break; //@line 10104 "tcc_bootstrap.c"
 case 12: 
 var $66=$ft; //@line 10104 "tcc_bootstrap.c"
 var $67=$66&987007; //@line 10104 "tcc_bootstrap.c"
 var $68=($67|0)==1; //@line 10104 "tcc_bootstrap.c"
 if($68){label=14;break;}else{label=13;break;} //@line 10104 "tcc_bootstrap.c"
 case 13: 
 var $70=$ft; //@line 10104 "tcc_bootstrap.c"
 var $71=$70&987007; //@line 10104 "tcc_bootstrap.c"
 var $72=($71|0)==11; //@line 10104 "tcc_bootstrap.c"
 if($72){label=14;break;}else{label=15;break;} //@line 10104 "tcc_bootstrap.c"
 case 14: 
 _o(48655); //@line 10105 "tcc_bootstrap.c"
 label=25;break; //@line 10106 "tcc_bootstrap.c"
 case 15: 
 var $75=$ft; //@line 10106 "tcc_bootstrap.c"
 var $76=$75&987007; //@line 10106 "tcc_bootstrap.c"
 var $77=($76|0)==17; //@line 10106 "tcc_bootstrap.c"
 if($77){label=16;break;}else{label=17;break;} //@line 10106 "tcc_bootstrap.c"
 case 16: 
 _o(46607); //@line 10107 "tcc_bootstrap.c"
 label=24;break; //@line 10108 "tcc_bootstrap.c"
 case 17: 
 var $80=$ft; //@line 10108 "tcc_bootstrap.c"
 var $81=$80&987007; //@line 10108 "tcc_bootstrap.c"
 var $82=($81|0)==2; //@line 10108 "tcc_bootstrap.c"
 if($82){label=18;break;}else{label=19;break;} //@line 10108 "tcc_bootstrap.c"
 case 18: 
 _o(48911); //@line 10109 "tcc_bootstrap.c"
 label=23;break; //@line 10110 "tcc_bootstrap.c"
 case 19: 
 var $85=$ft; //@line 10110 "tcc_bootstrap.c"
 var $86=$85&987007; //@line 10110 "tcc_bootstrap.c"
 var $87=($86|0)==18; //@line 10110 "tcc_bootstrap.c"
 if($87){label=20;break;}else{label=21;break;} //@line 10110 "tcc_bootstrap.c"
 case 20: 
 _o(46863); //@line 10111 "tcc_bootstrap.c"
 label=22;break; //@line 10112 "tcc_bootstrap.c"
 case 21: 
 _o(139); //@line 10113 "tcc_bootstrap.c"
 label=22;break;
 case 22: 
 label=23;break;
 case 23: 
 label=24;break;
 case 24: 
 label=25;break;
 case 25: 
 label=26;break;
 case 26: 
 label=27;break;
 case 27: 
 label=28;break;
 case 28: 
 var $97=$1; //@line 10115 "tcc_bootstrap.c"
 var $98=$fr; //@line 10115 "tcc_bootstrap.c"
 var $99=$2; //@line 10115 "tcc_bootstrap.c"
 var $100=(($99+32)|0); //@line 10115 "tcc_bootstrap.c"
 var $101=HEAP32[(($100)>>2)]; //@line 10115 "tcc_bootstrap.c"
 var $102=$fc; //@line 10115 "tcc_bootstrap.c"
 _gen_modrm($97,$98,$101,$102); //@line 10115 "tcc_bootstrap.c"
 label=48;break; //@line 10116 "tcc_bootstrap.c"
 case 29: 
 var $104=$v; //@line 10117 "tcc_bootstrap.c"
 var $105=($104|0)==48; //@line 10117 "tcc_bootstrap.c"
 if($105){label=30;break;}else{label=31;break;} //@line 10117 "tcc_bootstrap.c"
 case 30: 
 var $107=$1; //@line 10118 "tcc_bootstrap.c"
 var $108=((($107)+(184))|0); //@line 10118 "tcc_bootstrap.c"
 _o($108); //@line 10118 "tcc_bootstrap.c"
 var $109=$fr; //@line 10119 "tcc_bootstrap.c"
 var $110=$2; //@line 10119 "tcc_bootstrap.c"
 var $111=(($110+32)|0); //@line 10119 "tcc_bootstrap.c"
 var $112=HEAP32[(($111)>>2)]; //@line 10119 "tcc_bootstrap.c"
 var $113=$fc; //@line 10119 "tcc_bootstrap.c"
 _gen_addr32($109,$112,$113); //@line 10119 "tcc_bootstrap.c"
 label=47;break; //@line 10120 "tcc_bootstrap.c"
 case 31: 
 var $115=$v; //@line 10120 "tcc_bootstrap.c"
 var $116=($115|0)==50; //@line 10120 "tcc_bootstrap.c"
 if($116){label=32;break;}else{label=36;break;} //@line 10120 "tcc_bootstrap.c"
 case 32: 
 var $118=$fc; //@line 10121 "tcc_bootstrap.c"
 var $119=($118|0)!=0; //@line 10121 "tcc_bootstrap.c"
 if($119){label=33;break;}else{label=34;break;} //@line 10121 "tcc_bootstrap.c"
 case 33: 
 _o(141); //@line 10122 "tcc_bootstrap.c"
 var $121=$1; //@line 10123 "tcc_bootstrap.c"
 var $122=$2; //@line 10123 "tcc_bootstrap.c"
 var $123=(($122+32)|0); //@line 10123 "tcc_bootstrap.c"
 var $124=HEAP32[(($123)>>2)]; //@line 10123 "tcc_bootstrap.c"
 var $125=$fc; //@line 10123 "tcc_bootstrap.c"
 _gen_modrm($121,50,$124,$125); //@line 10123 "tcc_bootstrap.c"
 label=35;break; //@line 10124 "tcc_bootstrap.c"
 case 34: 
 _o(137); //@line 10125 "tcc_bootstrap.c"
 var $127=$1; //@line 10126 "tcc_bootstrap.c"
 var $128=((($127)+(232))|0); //@line 10126 "tcc_bootstrap.c"
 _o($128); //@line 10126 "tcc_bootstrap.c"
 label=35;break;
 case 35: 
 label=46;break; //@line 10128 "tcc_bootstrap.c"
 case 36: 
 var $131=$v; //@line 10128 "tcc_bootstrap.c"
 var $132=($131|0)==51; //@line 10128 "tcc_bootstrap.c"
 if($132){label=37;break;}else{label=38;break;} //@line 10128 "tcc_bootstrap.c"
 case 37: 
 var $134=$1; //@line 10129 "tcc_bootstrap.c"
 var $135=((($134)+(184))|0); //@line 10129 "tcc_bootstrap.c"
 var $136=_oad($135,0); //@line 10129 "tcc_bootstrap.c"
 _o(15); //@line 10130 "tcc_bootstrap.c"
 var $137=$fc; //@line 10131 "tcc_bootstrap.c"
 _o($137); //@line 10131 "tcc_bootstrap.c"
 var $138=$1; //@line 10132 "tcc_bootstrap.c"
 var $139=((($138)+(192))|0); //@line 10132 "tcc_bootstrap.c"
 _o($139); //@line 10132 "tcc_bootstrap.c"
 label=45;break; //@line 10133 "tcc_bootstrap.c"
 case 38: 
 var $141=$v; //@line 10133 "tcc_bootstrap.c"
 var $142=($141|0)==52; //@line 10133 "tcc_bootstrap.c"
 if($142){label=40;break;}else{label=39;break;} //@line 10133 "tcc_bootstrap.c"
 case 39: 
 var $144=$v; //@line 10133 "tcc_bootstrap.c"
 var $145=($144|0)==53; //@line 10133 "tcc_bootstrap.c"
 if($145){label=40;break;}else{label=41;break;} //@line 10133 "tcc_bootstrap.c"
 case 40: 
 var $147=$v; //@line 10134 "tcc_bootstrap.c"
 var $148=$147&1; //@line 10134 "tcc_bootstrap.c"
 $t=$148; //@line 10134 "tcc_bootstrap.c"
 var $149=$1; //@line 10135 "tcc_bootstrap.c"
 var $150=((($149)+(184))|0); //@line 10135 "tcc_bootstrap.c"
 var $151=$t; //@line 10135 "tcc_bootstrap.c"
 var $152=_oad($150,$151); //@line 10135 "tcc_bootstrap.c"
 _o(1515); //@line 10136 "tcc_bootstrap.c"
 var $153=$fc; //@line 10137 "tcc_bootstrap.c"
 _gsym($153); //@line 10137 "tcc_bootstrap.c"
 var $154=$1; //@line 10138 "tcc_bootstrap.c"
 var $155=((($154)+(184))|0); //@line 10138 "tcc_bootstrap.c"
 var $156=$t; //@line 10138 "tcc_bootstrap.c"
 var $157=$156^1; //@line 10138 "tcc_bootstrap.c"
 var $158=_oad($155,$157); //@line 10138 "tcc_bootstrap.c"
 label=44;break; //@line 10139 "tcc_bootstrap.c"
 case 41: 
 var $160=$v; //@line 10139 "tcc_bootstrap.c"
 var $161=$1; //@line 10139 "tcc_bootstrap.c"
 var $162=($160|0)!=($161|0); //@line 10139 "tcc_bootstrap.c"
 if($162){label=42;break;}else{label=43;break;} //@line 10139 "tcc_bootstrap.c"
 case 42: 
 _o(137); //@line 10140 "tcc_bootstrap.c"
 var $164=$1; //@line 10141 "tcc_bootstrap.c"
 var $165=((($164)+(192))|0); //@line 10141 "tcc_bootstrap.c"
 var $166=$v; //@line 10141 "tcc_bootstrap.c"
 var $167=($166<<3); //@line 10141 "tcc_bootstrap.c"
 var $168=((($165)+($167))|0); //@line 10141 "tcc_bootstrap.c"
 _o($168); //@line 10141 "tcc_bootstrap.c"
 label=43;break; //@line 10142 "tcc_bootstrap.c"
 case 43: 
 label=44;break;
 case 44: 
 label=45;break;
 case 45: 
 label=46;break;
 case 46: 
 label=47;break;
 case 47: 
 label=48;break;
 case 48: 
 STACKTOP=sp;return; //@line 10144 "tcc_bootstrap.c"
  default: assert(0, "bad label: " + label);
 }

}


function _get_reg($rc){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $r;
 var $p;
 $2=$rc;
 $r=0; //@line 4659 "tcc_bootstrap.c"
 label=2;break; //@line 4659 "tcc_bootstrap.c"
 case 2: 
 var $4=$r; //@line 4659 "tcc_bootstrap.c"
 var $5=($4|0)<5; //@line 4659 "tcc_bootstrap.c"
 if($5){label=3;break;}else{label=17;break;} //@line 4659 "tcc_bootstrap.c"
 case 3: 
 var $7=$r; //@line 4660 "tcc_bootstrap.c"
 var $8=((2824+($7<<2))|0); //@line 4660 "tcc_bootstrap.c"
 var $9=HEAP32[(($8)>>2)]; //@line 4660 "tcc_bootstrap.c"
 var $10=$2; //@line 4660 "tcc_bootstrap.c"
 var $11=$9&$10; //@line 4660 "tcc_bootstrap.c"
 var $12=($11|0)!=0; //@line 4660 "tcc_bootstrap.c"
 if($12){label=4;break;}else{label=14;break;} //@line 4660 "tcc_bootstrap.c"
 case 4: 
 var $14=HEAP32[((10616)>>2)]; //@line 4661 "tcc_bootstrap.c"
 var $15=($14|0)!=0; //@line 4661 "tcc_bootstrap.c"
 if($15){label=5;break;}else{label=6;break;} //@line 4661 "tcc_bootstrap.c"
 case 5: 
 var $17=$r; //@line 4662 "tcc_bootstrap.c"
 $1=$17; //@line 4662 "tcc_bootstrap.c"
 label=29;break; //@line 4662 "tcc_bootstrap.c"
 case 6: 
 $p=77280; //@line 4663 "tcc_bootstrap.c"
 label=7;break; //@line 4663 "tcc_bootstrap.c"
 case 7: 
 var $20=$p; //@line 4663 "tcc_bootstrap.c"
 var $21=HEAP32[((9288)>>2)]; //@line 4663 "tcc_bootstrap.c"
 var $22=($20>>>0)<=($21>>>0); //@line 4663 "tcc_bootstrap.c"
 if($22){label=8;break;}else{label=13;break;} //@line 4663 "tcc_bootstrap.c"
 case 8: 
 var $24=$p; //@line 4664 "tcc_bootstrap.c"
 var $25=(($24+8)|0); //@line 4664 "tcc_bootstrap.c"
 var $26=HEAP16[(($25)>>1)]; //@line 4664 "tcc_bootstrap.c"
 var $27=($26&65535); //@line 4664 "tcc_bootstrap.c"
 var $28=$27&63; //@line 4664 "tcc_bootstrap.c"
 var $29=$r; //@line 4664 "tcc_bootstrap.c"
 var $30=($28|0)==($29|0); //@line 4664 "tcc_bootstrap.c"
 if($30){label=10;break;}else{label=9;break;} //@line 4664 "tcc_bootstrap.c"
 case 9: 
 var $32=$p; //@line 4664 "tcc_bootstrap.c"
 var $33=(($32+10)|0); //@line 4664 "tcc_bootstrap.c"
 var $34=HEAP16[(($33)>>1)]; //@line 4664 "tcc_bootstrap.c"
 var $35=($34&65535); //@line 4664 "tcc_bootstrap.c"
 var $36=$35&63; //@line 4664 "tcc_bootstrap.c"
 var $37=$r; //@line 4664 "tcc_bootstrap.c"
 var $38=($36|0)==($37|0); //@line 4664 "tcc_bootstrap.c"
 if($38){label=10;break;}else{label=11;break;} //@line 4664 "tcc_bootstrap.c"
 case 10: 
 label=15;break; //@line 4666 "tcc_bootstrap.c"
 case 11: 
 label=12;break; //@line 4667 "tcc_bootstrap.c"
 case 12: 
 var $42=$p; //@line 4663 "tcc_bootstrap.c"
 var $43=(($42+40)|0); //@line 4663 "tcc_bootstrap.c"
 $p=$43; //@line 4663 "tcc_bootstrap.c"
 label=7;break; //@line 4663 "tcc_bootstrap.c"
 case 13: 
 var $45=$r; //@line 4668 "tcc_bootstrap.c"
 $1=$45; //@line 4668 "tcc_bootstrap.c"
 label=29;break; //@line 4668 "tcc_bootstrap.c"
 case 14: 
 label=15;break; //@line 4669 "tcc_bootstrap.c"
 case 15: 
 label=16;break; //@line 4671 "tcc_bootstrap.c"
 case 16: 
 var $49=$r; //@line 4659 "tcc_bootstrap.c"
 var $50=((($49)+(1))|0); //@line 4659 "tcc_bootstrap.c"
 $r=$50; //@line 4659 "tcc_bootstrap.c"
 label=2;break; //@line 4659 "tcc_bootstrap.c"
 case 17: 
 $p=77280; //@line 4672 "tcc_bootstrap.c"
 label=18;break; //@line 4672 "tcc_bootstrap.c"
 case 18: 
 var $53=$p; //@line 4672 "tcc_bootstrap.c"
 var $54=HEAP32[((9288)>>2)]; //@line 4672 "tcc_bootstrap.c"
 var $55=($53>>>0)<=($54>>>0); //@line 4672 "tcc_bootstrap.c"
 if($55){label=19;break;}else{label=28;break;} //@line 4672 "tcc_bootstrap.c"
 case 19: 
 var $57=$p; //@line 4673 "tcc_bootstrap.c"
 var $58=(($57+10)|0); //@line 4673 "tcc_bootstrap.c"
 var $59=HEAP16[(($58)>>1)]; //@line 4673 "tcc_bootstrap.c"
 var $60=($59&65535); //@line 4673 "tcc_bootstrap.c"
 var $61=$60&63; //@line 4673 "tcc_bootstrap.c"
 $r=$61; //@line 4673 "tcc_bootstrap.c"
 var $62=$r; //@line 4674 "tcc_bootstrap.c"
 var $63=($62|0)<48; //@line 4674 "tcc_bootstrap.c"
 if($63){label=20;break;}else{label=22;break;} //@line 4674 "tcc_bootstrap.c"
 case 20: 
 var $65=$r; //@line 4674 "tcc_bootstrap.c"
 var $66=((2824+($65<<2))|0); //@line 4674 "tcc_bootstrap.c"
 var $67=HEAP32[(($66)>>2)]; //@line 4674 "tcc_bootstrap.c"
 var $68=$2; //@line 4674 "tcc_bootstrap.c"
 var $69=$67&$68; //@line 4674 "tcc_bootstrap.c"
 var $70=($69|0)!=0; //@line 4674 "tcc_bootstrap.c"
 if($70){label=21;break;}else{label=22;break;} //@line 4674 "tcc_bootstrap.c"
 case 21: 
 label=25;break; //@line 4675 "tcc_bootstrap.c"
 case 22: 
 var $73=$p; //@line 4676 "tcc_bootstrap.c"
 var $74=(($73+8)|0); //@line 4676 "tcc_bootstrap.c"
 var $75=HEAP16[(($74)>>1)]; //@line 4676 "tcc_bootstrap.c"
 var $76=($75&65535); //@line 4676 "tcc_bootstrap.c"
 var $77=$76&63; //@line 4676 "tcc_bootstrap.c"
 $r=$77; //@line 4676 "tcc_bootstrap.c"
 var $78=$r; //@line 4677 "tcc_bootstrap.c"
 var $79=($78|0)<48; //@line 4677 "tcc_bootstrap.c"
 if($79){label=23;break;}else{label=26;break;} //@line 4677 "tcc_bootstrap.c"
 case 23: 
 var $81=$r; //@line 4677 "tcc_bootstrap.c"
 var $82=((2824+($81<<2))|0); //@line 4677 "tcc_bootstrap.c"
 var $83=HEAP32[(($82)>>2)]; //@line 4677 "tcc_bootstrap.c"
 var $84=$2; //@line 4677 "tcc_bootstrap.c"
 var $85=$83&$84; //@line 4677 "tcc_bootstrap.c"
 var $86=($85|0)!=0; //@line 4677 "tcc_bootstrap.c"
 if($86){label=24;break;}else{label=26;break;} //@line 4677 "tcc_bootstrap.c"
 case 24: 
 label=25;break; //@line 4677 "tcc_bootstrap.c"
 case 25: 
 var $89=$r; //@line 4679 "tcc_bootstrap.c"
 _save_reg($89); //@line 4679 "tcc_bootstrap.c"
 var $90=$r; //@line 4680 "tcc_bootstrap.c"
 $1=$90; //@line 4680 "tcc_bootstrap.c"
 label=29;break; //@line 4680 "tcc_bootstrap.c"
 case 26: 
 label=27;break; //@line 4682 "tcc_bootstrap.c"
 case 27: 
 var $93=$p; //@line 4672 "tcc_bootstrap.c"
 var $94=(($93+40)|0); //@line 4672 "tcc_bootstrap.c"
 $p=$94; //@line 4672 "tcc_bootstrap.c"
 label=18;break; //@line 4672 "tcc_bootstrap.c"
 case 28: 
 $1=-1; //@line 4683 "tcc_bootstrap.c"
 label=29;break; //@line 4683 "tcc_bootstrap.c"
 case 29: 
 var $97=$1; //@line 4684 "tcc_bootstrap.c"
 STACKTOP=sp;return $97; //@line 4684 "tcc_bootstrap.c"
  default: assert(0, "bad label: " + label);
 }

}


function _gen_modrm($op_reg,$r,$sym,$c){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 $1=$op_reg;
 $2=$r;
 $3=$sym;
 $4=$c;
 var $5=$1; //@line 10060 "tcc_bootstrap.c"
 var $6=$5<<3; //@line 10060 "tcc_bootstrap.c"
 $1=$6; //@line 10060 "tcc_bootstrap.c"
 var $7=$2; //@line 10061 "tcc_bootstrap.c"
 var $8=$7&63; //@line 10061 "tcc_bootstrap.c"
 var $9=($8|0)==48; //@line 10061 "tcc_bootstrap.c"
 if($9){label=2;break;}else{label=3;break;} //@line 10061 "tcc_bootstrap.c"
 case 2: 
 var $11=$1; //@line 10062 "tcc_bootstrap.c"
 var $12=5|$11; //@line 10062 "tcc_bootstrap.c"
 _o($12); //@line 10062 "tcc_bootstrap.c"
 var $13=$2; //@line 10063 "tcc_bootstrap.c"
 var $14=$3; //@line 10063 "tcc_bootstrap.c"
 var $15=$4; //@line 10063 "tcc_bootstrap.c"
 _gen_addr32($13,$14,$15); //@line 10063 "tcc_bootstrap.c"
 label=10;break; //@line 10064 "tcc_bootstrap.c"
 case 3: 
 var $17=$2; //@line 10064 "tcc_bootstrap.c"
 var $18=$17&63; //@line 10064 "tcc_bootstrap.c"
 var $19=($18|0)==50; //@line 10064 "tcc_bootstrap.c"
 if($19){label=4;break;}else{label=8;break;} //@line 10064 "tcc_bootstrap.c"
 case 4: 
 var $21=$4; //@line 10065 "tcc_bootstrap.c"
 var $22=$4; //@line 10065 "tcc_bootstrap.c"
 var $23=(($22)&255); //@line 10065 "tcc_bootstrap.c"
 var $24=(($23<<24)>>24); //@line 10065 "tcc_bootstrap.c"
 var $25=($21|0)==($24|0); //@line 10065 "tcc_bootstrap.c"
 if($25){label=5;break;}else{label=6;break;} //@line 10065 "tcc_bootstrap.c"
 case 5: 
 var $27=$1; //@line 10066 "tcc_bootstrap.c"
 var $28=69|$27; //@line 10066 "tcc_bootstrap.c"
 _o($28); //@line 10066 "tcc_bootstrap.c"
 var $29=$4; //@line 10067 "tcc_bootstrap.c"
 _g($29); //@line 10067 "tcc_bootstrap.c"
 label=7;break; //@line 10068 "tcc_bootstrap.c"
 case 6: 
 var $31=$1; //@line 10069 "tcc_bootstrap.c"
 var $32=133|$31; //@line 10069 "tcc_bootstrap.c"
 var $33=$4; //@line 10069 "tcc_bootstrap.c"
 var $34=_oad($32,$33); //@line 10069 "tcc_bootstrap.c"
 label=7;break;
 case 7: 
 label=9;break; //@line 10071 "tcc_bootstrap.c"
 case 8: 
 var $37=$1; //@line 10072 "tcc_bootstrap.c"
 var $38=0|$37; //@line 10072 "tcc_bootstrap.c"
 var $39=$2; //@line 10072 "tcc_bootstrap.c"
 var $40=$39&63; //@line 10072 "tcc_bootstrap.c"
 var $41=$38|$40; //@line 10072 "tcc_bootstrap.c"
 _g($41); //@line 10072 "tcc_bootstrap.c"
 label=9;break;
 case 9: 
 label=10;break;
 case 10: 
 STACKTOP=sp;return; //@line 10074 "tcc_bootstrap.c"
  default: assert(0, "bad label: " + label);
 }

}


function _gen_addr32($r,$sym,$c){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 $1=$r;
 $2=$sym;
 $3=$c;
 var $4=$1; //@line 10054 "tcc_bootstrap.c"
 var $5=$4&512; //@line 10054 "tcc_bootstrap.c"
 var $6=($5|0)!=0; //@line 10054 "tcc_bootstrap.c"
 if($6){label=2;break;}else{label=3;break;} //@line 10054 "tcc_bootstrap.c"
 case 2: 
 var $8=HEAP32[((76672)>>2)]; //@line 10055 "tcc_bootstrap.c"
 var $9=$2; //@line 10055 "tcc_bootstrap.c"
 var $10=HEAP32[((11008)>>2)]; //@line 10055 "tcc_bootstrap.c"
 _greloc($8,$9,$10,1); //@line 10055 "tcc_bootstrap.c"
 label=3;break; //@line 10055 "tcc_bootstrap.c"
 case 3: 
 var $12=$3; //@line 10056 "tcc_bootstrap.c"
 _gen_le32($12); //@line 10056 "tcc_bootstrap.c"
 STACKTOP=sp;return; //@line 10057 "tcc_bootstrap.c"
  default: assert(0, "bad label: " + label);
 }

}


function _oad($c,$s){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $t;
 $2=$c;
 $3=$s;
 var $4=HEAP32[((10616)>>2)]; //@line 10045 "tcc_bootstrap.c"
 var $5=($4|0)!=0; //@line 10045 "tcc_bootstrap.c"
 if($5){label=2;break;}else{label=3;break;} //@line 10045 "tcc_bootstrap.c"
 case 2: 
 var $7=$3; //@line 10046 "tcc_bootstrap.c"
 $1=$7; //@line 10046 "tcc_bootstrap.c"
 label=4;break; //@line 10046 "tcc_bootstrap.c"
 case 3: 
 var $9=$2; //@line 10047 "tcc_bootstrap.c"
 _o($9); //@line 10047 "tcc_bootstrap.c"
 var $10=HEAP32[((11008)>>2)]; //@line 10048 "tcc_bootstrap.c"
 $t=$10; //@line 10048 "tcc_bootstrap.c"
 var $11=$3; //@line 10049 "tcc_bootstrap.c"
 _gen_le32($11); //@line 10049 "tcc_bootstrap.c"
 var $12=$t; //@line 10050 "tcc_bootstrap.c"
 $1=$12; //@line 10050 "tcc_bootstrap.c"
 label=4;break; //@line 10050 "tcc_bootstrap.c"
 case 4: 
 var $14=$1; //@line 10051 "tcc_bootstrap.c"
 STACKTOP=sp;return $14; //@line 10051 "tcc_bootstrap.c"
  default: assert(0, "bad label: " + label);
 }

}


function _gen_le32($c){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 $1=$c;
 var $2=$1; //@line 10024 "tcc_bootstrap.c"
 _g($2); //@line 10024 "tcc_bootstrap.c"
 var $3=$1; //@line 10025 "tcc_bootstrap.c"
 var $4=$3>>8; //@line 10025 "tcc_bootstrap.c"
 _g($4); //@line 10025 "tcc_bootstrap.c"
 var $5=$1; //@line 10026 "tcc_bootstrap.c"
 var $6=$5>>16; //@line 10026 "tcc_bootstrap.c"
 _g($6); //@line 10026 "tcc_bootstrap.c"
 var $7=$1; //@line 10027 "tcc_bootstrap.c"
 var $8=$7>>24; //@line 10027 "tcc_bootstrap.c"
 _g($8); //@line 10027 "tcc_bootstrap.c"
 STACKTOP=sp;return; //@line 10028 "tcc_bootstrap.c"
}


function _greloc($s,$sym,$offset,$type){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 var $2;
 var $3;
 var $4;
 $1=$s;
 $2=$sym;
 $3=$offset;
 $4=$type;
 var $5=$1; //@line 4249 "tcc_bootstrap.c"
 var $6=$2; //@line 4249 "tcc_bootstrap.c"
 var $7=$3; //@line 4249 "tcc_bootstrap.c"
 var $8=$4; //@line 4249 "tcc_bootstrap.c"
 _greloca($5,$6,$7,$8,0); //@line 4249 "tcc_bootstrap.c"
 STACKTOP=sp;return; //@line 4250 "tcc_bootstrap.c"
}


function _greloca($s,$sym,$offset,$type,$addend){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $c;
 $1=$s;
 $2=$sym;
 $3=$offset;
 $4=$type;
 $5=$addend;
 $c=0; //@line 4236 "tcc_bootstrap.c"
 var $6=HEAP32[((10616)>>2)]; //@line 4237 "tcc_bootstrap.c"
 var $7=($6|0)!=0; //@line 4237 "tcc_bootstrap.c"
 if($7){label=2;break;}else{label=4;break;} //@line 4237 "tcc_bootstrap.c"
 case 2: 
 var $9=$1; //@line 4237 "tcc_bootstrap.c"
 var $10=HEAP32[((76672)>>2)]; //@line 4237 "tcc_bootstrap.c"
 var $11=($9|0)==($10|0); //@line 4237 "tcc_bootstrap.c"
 if($11){label=3;break;}else{label=4;break;} //@line 4237 "tcc_bootstrap.c"
 case 3: 
 label=9;break; //@line 4238 "tcc_bootstrap.c"
 case 4: 
 var $14=$2; //@line 4239 "tcc_bootstrap.c"
 var $15=($14|0)!=0; //@line 4239 "tcc_bootstrap.c"
 if($15){label=5;break;}else{label=8;break;} //@line 4239 "tcc_bootstrap.c"
 case 5: 
 var $17=$2; //@line 4240 "tcc_bootstrap.c"
 var $18=(($17+8)|0); //@line 4240 "tcc_bootstrap.c"
 var $19=$18; //@line 4240 "tcc_bootstrap.c"
 var $20=(($19)|0); //@line 4240 "tcc_bootstrap.c"
 var $21=HEAP32[(($20)>>2)]; //@line 4240 "tcc_bootstrap.c"
 var $22=0==($21|0); //@line 4240 "tcc_bootstrap.c"
 if($22){label=6;break;}else{label=7;break;} //@line 4240 "tcc_bootstrap.c"
 case 6: 
 var $24=$2; //@line 4241 "tcc_bootstrap.c"
 _put_extern_sym($24,0,0,0); //@line 4241 "tcc_bootstrap.c"
 label=7;break; //@line 4241 "tcc_bootstrap.c"
 case 7: 
 var $26=$2; //@line 4242 "tcc_bootstrap.c"
 var $27=(($26+8)|0); //@line 4242 "tcc_bootstrap.c"
 var $28=$27; //@line 4242 "tcc_bootstrap.c"
 var $29=(($28)|0); //@line 4242 "tcc_bootstrap.c"
 var $30=HEAP32[(($29)>>2)]; //@line 4242 "tcc_bootstrap.c"
 $c=$30; //@line 4242 "tcc_bootstrap.c"
 label=8;break; //@line 4243 "tcc_bootstrap.c"
 case 8: 
 var $32=HEAP32[((10504)>>2)]; //@line 4244 "tcc_bootstrap.c"
 var $33=$1; //@line 4244 "tcc_bootstrap.c"
 var $34=$3; //@line 4244 "tcc_bootstrap.c"
 var $35=$4; //@line 4244 "tcc_bootstrap.c"
 var $36=$c; //@line 4244 "tcc_bootstrap.c"
 var $37=$5; //@line 4244 "tcc_bootstrap.c"
 _put_elf_reloca($32,$33,$34,$35,$36,$37); //@line 4244 "tcc_bootstrap.c"
 label=9;break; //@line 4244 "tcc_bootstrap.c"
 case 9: 
 STACKTOP=sp;return; //@line 4244 "tcc_bootstrap.c"
  default: assert(0, "bad label: " + label);
 }

}


function _put_extern_sym($sym,$section,$value,$size){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $sh_num;
 $1=$sym;
 $2=$section;
 $3=$value;
 $4=$size;
 var $5=$2; //@line 4229 "tcc_bootstrap.c"
 var $6=($5|0)!=0; //@line 4229 "tcc_bootstrap.c"
 if($6){label=2;break;}else{label=3;break;} //@line 4229 "tcc_bootstrap.c"
 case 2: 
 var $8=$2; //@line 4229 "tcc_bootstrap.c"
 var $9=(($8+16)|0); //@line 4229 "tcc_bootstrap.c"
 var $10=HEAP32[(($9)>>2)]; //@line 4229 "tcc_bootstrap.c"
 var $13=$10;label=4;break; //@line 4229 "tcc_bootstrap.c"
 case 3: 
 var $13=0;label=4;break; //@line 4229 "tcc_bootstrap.c"
 case 4: 
 var $13; //@line 4229 "tcc_bootstrap.c"
 $sh_num=$13; //@line 4229 "tcc_bootstrap.c"
 var $14=$1; //@line 4230 "tcc_bootstrap.c"
 var $15=$sh_num; //@line 4230 "tcc_bootstrap.c"
 var $16=$3; //@line 4230 "tcc_bootstrap.c"
 var $17=$4; //@line 4230 "tcc_bootstrap.c"
 _put_extern_sym2($14,$15,$16,$17,1); //@line 4230 "tcc_bootstrap.c"
 STACKTOP=sp;return; //@line 4231 "tcc_bootstrap.c"
  default: assert(0, "bad label: " + label);
 }

}


function _put_elf_reloca($symtab,$s,$offset,$type,$symbol,$addend){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+256)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 var $buf=sp;
 var $sr;
 var $rel;
 $1=$symtab;
 $2=$s;
 $3=$offset;
 $4=$type;
 $5=$symbol;
 $6=$addend;
 var $7=$2; //@line 9577 "tcc_bootstrap.c"
 var $8=(($7+60)|0); //@line 9577 "tcc_bootstrap.c"
 var $9=HEAP32[(($8)>>2)]; //@line 9577 "tcc_bootstrap.c"
 $sr=$9; //@line 9577 "tcc_bootstrap.c"
 var $10=$sr; //@line 9578 "tcc_bootstrap.c"
 var $11=($10|0)!=0; //@line 9578 "tcc_bootstrap.c"
 if($11){label=3;break;}else{label=2;break;} //@line 9578 "tcc_bootstrap.c"
 case 2: 
 var $13=(($buf)|0); //@line 9579 "tcc_bootstrap.c"
 var $14=$2; //@line 9579 "tcc_bootstrap.c"
 var $15=(($14+72)|0); //@line 9579 "tcc_bootstrap.c"
 var $16=(($15)|0); //@line 9579 "tcc_bootstrap.c"
 var $17=_snprintf($13,256,2936,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$16,tempVarArgs)); STACKTOP=tempVarArgs; //@line 9579 "tcc_bootstrap.c"
 var $18=HEAP32[((10488)>>2)]; //@line 9580 "tcc_bootstrap.c"
 var $19=(($buf)|0); //@line 9580 "tcc_bootstrap.c"
 var $20=$1; //@line 9580 "tcc_bootstrap.c"
 var $21=(($20+24)|0); //@line 9580 "tcc_bootstrap.c"
 var $22=HEAP32[(($21)>>2)]; //@line 9580 "tcc_bootstrap.c"
 var $23=_new_section($18,$19,9,$22); //@line 9580 "tcc_bootstrap.c"
 $sr=$23; //@line 9580 "tcc_bootstrap.c"
 var $24=$sr; //@line 9581 "tcc_bootstrap.c"
 var $25=(($24+36)|0); //@line 9581 "tcc_bootstrap.c"
 HEAP32[(($25)>>2)]=8; //@line 9581 "tcc_bootstrap.c"
 var $26=$1; //@line 9582 "tcc_bootstrap.c"
 var $27=$sr; //@line 9582 "tcc_bootstrap.c"
 var $28=(($27+56)|0); //@line 9582 "tcc_bootstrap.c"
 HEAP32[(($28)>>2)]=$26; //@line 9582 "tcc_bootstrap.c"
 var $29=$2; //@line 9583 "tcc_bootstrap.c"
 var $30=(($29+16)|0); //@line 9583 "tcc_bootstrap.c"
 var $31=HEAP32[(($30)>>2)]; //@line 9583 "tcc_bootstrap.c"
 var $32=$sr; //@line 9583 "tcc_bootstrap.c"
 var $33=(($32+28)|0); //@line 9583 "tcc_bootstrap.c"
 HEAP32[(($33)>>2)]=$31; //@line 9583 "tcc_bootstrap.c"
 var $34=$sr; //@line 9584 "tcc_bootstrap.c"
 var $35=$2; //@line 9584 "tcc_bootstrap.c"
 var $36=(($35+60)|0); //@line 9584 "tcc_bootstrap.c"
 HEAP32[(($36)>>2)]=$34; //@line 9584 "tcc_bootstrap.c"
 label=3;break; //@line 9585 "tcc_bootstrap.c"
 case 3: 
 var $38=$sr; //@line 9586 "tcc_bootstrap.c"
 var $39=_section_ptr_add($38,8); //@line 9586 "tcc_bootstrap.c"
 var $40=$39; //@line 9586 "tcc_bootstrap.c"
 $rel=$40; //@line 9586 "tcc_bootstrap.c"
 var $41=$3; //@line 9587 "tcc_bootstrap.c"
 var $42=$rel; //@line 9587 "tcc_bootstrap.c"
 var $43=(($42)|0); //@line 9587 "tcc_bootstrap.c"
 HEAP32[(($43)>>2)]=$41; //@line 9587 "tcc_bootstrap.c"
 var $44=$5; //@line 9588 "tcc_bootstrap.c"
 var $45=$44<<8; //@line 9588 "tcc_bootstrap.c"
 var $46=$4; //@line 9588 "tcc_bootstrap.c"
 var $47=$46&255; //@line 9588 "tcc_bootstrap.c"
 var $48=((($45)+($47))|0); //@line 9588 "tcc_bootstrap.c"
 var $49=$rel; //@line 9588 "tcc_bootstrap.c"
 var $50=(($49+4)|0); //@line 9588 "tcc_bootstrap.c"
 HEAP32[(($50)>>2)]=$48; //@line 9588 "tcc_bootstrap.c"
 var $51=$6; //@line 9589 "tcc_bootstrap.c"
 var $52=($51|0)!=0; //@line 9589 "tcc_bootstrap.c"
 if($52){label=4;break;}else{label=5;break;} //@line 9589 "tcc_bootstrap.c"
 case 4: 
 _tcc_error(2896,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs; //@line 9590 "tcc_bootstrap.c"
 label=5;break; //@line 9590 "tcc_bootstrap.c"
 case 5: 
 STACKTOP=sp;return; //@line 9592 "tcc_bootstrap.c"
  default: assert(0, "bad label: " + label);
 }

}


function _put_extern_sym2($sym,$sh_num,$value,$size,$can_add_underscore){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+288)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $sym_type;
 var $sym_bind;
 var $info;
 var $other;
 var $t;
 var $esym;
 var $name;
 var $buf1=sp;
 var $buf=(sp)+(256);
 $1=$sym;
 $2=$sh_num;
 $3=$value;
 $4=$size;
 $5=$can_add_underscore;
 var $6=$1; //@line 4194 "tcc_bootstrap.c"
 var $7=(($6+8)|0); //@line 4194 "tcc_bootstrap.c"
 var $8=$7; //@line 4194 "tcc_bootstrap.c"
 var $9=(($8)|0); //@line 4194 "tcc_bootstrap.c"
 var $10=HEAP32[(($9)>>2)]; //@line 4194 "tcc_bootstrap.c"
 var $11=($10|0)!=0; //@line 4194 "tcc_bootstrap.c"
 if($11){label=17;break;}else{label=2;break;} //@line 4194 "tcc_bootstrap.c"
 case 2: 
 var $13=$1; //@line 4195 "tcc_bootstrap.c"
 var $14=(($13)|0); //@line 4195 "tcc_bootstrap.c"
 var $15=HEAP32[(($14)>>2)]; //@line 4195 "tcc_bootstrap.c"
 var $16=_get_tok_str($15,0); //@line 4195 "tcc_bootstrap.c"
 $name=$16; //@line 4195 "tcc_bootstrap.c"
 var $17=$1; //@line 4196 "tcc_bootstrap.c"
 var $18=(($17+16)|0); //@line 4196 "tcc_bootstrap.c"
 var $19=(($18)|0); //@line 4196 "tcc_bootstrap.c"
 var $20=HEAP32[(($19)>>2)]; //@line 4196 "tcc_bootstrap.c"
 $t=$20; //@line 4196 "tcc_bootstrap.c"
 var $21=$t; //@line 4197 "tcc_bootstrap.c"
 var $22=$21&15; //@line 4197 "tcc_bootstrap.c"
 var $23=($22|0)==6; //@line 4197 "tcc_bootstrap.c"
 if($23){label=3;break;}else{label=4;break;} //@line 4197 "tcc_bootstrap.c"
 case 3: 
 $sym_type=2; //@line 4198 "tcc_bootstrap.c"
 label=8;break; //@line 4199 "tcc_bootstrap.c"
 case 4: 
 var $26=$t; //@line 4199 "tcc_bootstrap.c"
 var $27=$26&15; //@line 4199 "tcc_bootstrap.c"
 var $28=($27|0)==0; //@line 4199 "tcc_bootstrap.c"
 if($28){label=5;break;}else{label=6;break;} //@line 4199 "tcc_bootstrap.c"
 case 5: 
 $sym_type=0; //@line 4200 "tcc_bootstrap.c"
 label=7;break; //@line 4201 "tcc_bootstrap.c"
 case 6: 
 $sym_type=1; //@line 4202 "tcc_bootstrap.c"
 label=7;break;
 case 7: 
 label=8;break;
 case 8: 
 var $33=$t; //@line 4204 "tcc_bootstrap.c"
 var $34=$33&8192; //@line 4204 "tcc_bootstrap.c"
 var $35=($34|0)!=0; //@line 4204 "tcc_bootstrap.c"
 if($35){label=9;break;}else{label=10;break;} //@line 4204 "tcc_bootstrap.c"
 case 9: 
 $sym_bind=0; //@line 4205 "tcc_bootstrap.c"
 label=11;break; //@line 4205 "tcc_bootstrap.c"
 case 10: 
 $sym_bind=1; //@line 4207 "tcc_bootstrap.c"
 label=11;break;
 case 11: 
 $other=0; //@line 4208 "tcc_bootstrap.c"
 var $39=HEAP32[((10488)>>2)]; //@line 4209 "tcc_bootstrap.c"
 var $40=(($39+12)|0); //@line 4209 "tcc_bootstrap.c"
 var $41=HEAP32[(($40)>>2)]; //@line 4209 "tcc_bootstrap.c"
 var $42=($41|0)!=0; //@line 4209 "tcc_bootstrap.c"
 if($42){label=12;break;}else{label=14;break;} //@line 4209 "tcc_bootstrap.c"
 case 12: 
 var $44=$5; //@line 4209 "tcc_bootstrap.c"
 var $45=($44|0)!=0; //@line 4209 "tcc_bootstrap.c"
 if($45){label=13;break;}else{label=14;break;} //@line 4209 "tcc_bootstrap.c"
 case 13: 
 var $47=(($buf1)|0); //@line 4210 "tcc_bootstrap.c"
 HEAP8[(($47)>>0)]=95; //@line 4210 "tcc_bootstrap.c"
 var $48=(($buf1)|0); //@line 4211 "tcc_bootstrap.c"
 var $49=(($48+1)|0); //@line 4211 "tcc_bootstrap.c"
 var $50=$name; //@line 4211 "tcc_bootstrap.c"
 var $51=_pstrcpy($49,255,$50); //@line 4211 "tcc_bootstrap.c"
 var $52=(($buf1)|0); //@line 4212 "tcc_bootstrap.c"
 $name=$52; //@line 4212 "tcc_bootstrap.c"
 label=14;break; //@line 4213 "tcc_bootstrap.c"
 case 14: 
 var $54=$1; //@line 4214 "tcc_bootstrap.c"
 var $55=(($54+24)|0); //@line 4214 "tcc_bootstrap.c"
 var $56=$55; //@line 4214 "tcc_bootstrap.c"
 var $57=HEAP32[(($56)>>2)]; //@line 4214 "tcc_bootstrap.c"
 var $58=($57|0)!=0; //@line 4214 "tcc_bootstrap.c"
 if($58){label=15;break;}else{label=16;break;} //@line 4214 "tcc_bootstrap.c"
 case 15: 
 var $60=$1; //@line 4215 "tcc_bootstrap.c"
 var $61=(($60+24)|0); //@line 4215 "tcc_bootstrap.c"
 var $62=$61; //@line 4215 "tcc_bootstrap.c"
 var $63=HEAP32[(($62)>>2)]; //@line 4215 "tcc_bootstrap.c"
 var $64=_get_tok_str($63,0); //@line 4215 "tcc_bootstrap.c"
 $name=$64; //@line 4215 "tcc_bootstrap.c"
 label=16;break; //@line 4215 "tcc_bootstrap.c"
 case 16: 
 var $66=$sym_bind; //@line 4216 "tcc_bootstrap.c"
 var $67=$66<<4; //@line 4216 "tcc_bootstrap.c"
 var $68=$sym_type; //@line 4216 "tcc_bootstrap.c"
 var $69=$68&15; //@line 4216 "tcc_bootstrap.c"
 var $70=((($67)+($69))|0); //@line 4216 "tcc_bootstrap.c"
 $info=$70; //@line 4216 "tcc_bootstrap.c"
 var $71=HEAP32[((10504)>>2)]; //@line 4217 "tcc_bootstrap.c"
 var $72=$3; //@line 4217 "tcc_bootstrap.c"
 var $73=$4; //@line 4217 "tcc_bootstrap.c"
 var $74=$info; //@line 4217 "tcc_bootstrap.c"
 var $75=$other; //@line 4217 "tcc_bootstrap.c"
 var $76=$2; //@line 4217 "tcc_bootstrap.c"
 var $77=$name; //@line 4217 "tcc_bootstrap.c"
 var $78=_put_elf_sym($71,$72,$73,$74,$75,$76,$77); //@line 4217 "tcc_bootstrap.c"
 var $79=$1; //@line 4217 "tcc_bootstrap.c"
 var $80=(($79+8)|0); //@line 4217 "tcc_bootstrap.c"
 var $81=$80; //@line 4217 "tcc_bootstrap.c"
 var $82=(($81)|0); //@line 4217 "tcc_bootstrap.c"
 HEAP32[(($82)>>2)]=$78; //@line 4217 "tcc_bootstrap.c"
 label=18;break; //@line 4218 "tcc_bootstrap.c"
 case 17: 
 var $84=$1; //@line 4219 "tcc_bootstrap.c"
 var $85=_elfsym($84); //@line 4219 "tcc_bootstrap.c"
 $esym=$85; //@line 4219 "tcc_bootstrap.c"
 var $86=$3; //@line 4220 "tcc_bootstrap.c"
 var $87=$esym; //@line 4220 "tcc_bootstrap.c"
 var $88=(($87+4)|0); //@line 4220 "tcc_bootstrap.c"
 HEAP32[(($88)>>2)]=$86; //@line 4220 "tcc_bootstrap.c"
 var $89=$4; //@line 4221 "tcc_bootstrap.c"
 var $90=$esym; //@line 4221 "tcc_bootstrap.c"
 var $91=(($90+8)|0); //@line 4221 "tcc_bootstrap.c"
 HEAP32[(($91)>>2)]=$89; //@line 4221 "tcc_bootstrap.c"
 var $92=$2; //@line 4222 "tcc_bootstrap.c"
 var $93=(($92)&65535); //@line 4222 "tcc_bootstrap.c"
 var $94=$esym; //@line 4222 "tcc_bootstrap.c"
 var $95=(($94+14)|0); //@line 4222 "tcc_bootstrap.c"
 HEAP16[(($95)>>1)]=$93; //@line 4222 "tcc_bootstrap.c"
 label=18;break;
 case 18: 
 var $97=$1; //@line 4224 "tcc_bootstrap.c"
 _update_storage($97); //@line 4224 "tcc_bootstrap.c"
 STACKTOP=sp;return; //@line 4225 "tcc_bootstrap.c"
  default: assert(0, "bad label: " + label);
 }

}


function _elfsym($s){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 $2=$s;
 var $3=$2; //@line 4160 "tcc_bootstrap.c"
 var $4=($3|0)!=0; //@line 4160 "tcc_bootstrap.c"
 if($4){label=2;break;}else{label=3;break;} //@line 4160 "tcc_bootstrap.c"
 case 2: 
 var $6=$2; //@line 4160 "tcc_bootstrap.c"
 var $7=(($6+8)|0); //@line 4160 "tcc_bootstrap.c"
 var $8=$7; //@line 4160 "tcc_bootstrap.c"
 var $9=(($8)|0); //@line 4160 "tcc_bootstrap.c"
 var $10=HEAP32[(($9)>>2)]; //@line 4160 "tcc_bootstrap.c"
 var $11=($10|0)!=0; //@line 4160 "tcc_bootstrap.c"
 if($11){label=4;break;}else{label=3;break;} //@line 4160 "tcc_bootstrap.c"
 case 3: 
 $1=0; //@line 4161 "tcc_bootstrap.c"
 label=5;break; //@line 4161 "tcc_bootstrap.c"
 case 4: 
 var $14=$2; //@line 4162 "tcc_bootstrap.c"
 var $15=(($14+8)|0); //@line 4162 "tcc_bootstrap.c"
 var $16=$15; //@line 4162 "tcc_bootstrap.c"
 var $17=(($16)|0); //@line 4162 "tcc_bootstrap.c"
 var $18=HEAP32[(($17)>>2)]; //@line 4162 "tcc_bootstrap.c"
 var $19=HEAP32[((10504)>>2)]; //@line 4162 "tcc_bootstrap.c"
 var $20=(($19+4)|0); //@line 4162 "tcc_bootstrap.c"
 var $21=HEAP32[(($20)>>2)]; //@line 4162 "tcc_bootstrap.c"
 var $22=$21; //@line 4162 "tcc_bootstrap.c"
 var $23=(($22+($18<<4))|0); //@line 4162 "tcc_bootstrap.c"
 $1=$23; //@line 4162 "tcc_bootstrap.c"
 label=5;break; //@line 4162 "tcc_bootstrap.c"
 case 5: 
 var $25=$1; //@line 4163 "tcc_bootstrap.c"
 STACKTOP=sp;return $25; //@line 4163 "tcc_bootstrap.c"
  default: assert(0, "bad label: " + label);
 }

}


function _update_storage($sym){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $esym;
 var $sym_bind;
 var $old_sym_bind;
 $1=$sym;
 var $2=$1; //@line 4168 "tcc_bootstrap.c"
 var $3=_elfsym($2); //@line 4168 "tcc_bootstrap.c"
 $esym=$3; //@line 4168 "tcc_bootstrap.c"
 var $4=$esym; //@line 4169 "tcc_bootstrap.c"
 var $5=($4|0)!=0; //@line 4169 "tcc_bootstrap.c"
 if($5){label=3;break;}else{label=2;break;} //@line 4169 "tcc_bootstrap.c"
 case 2: 
 label=13;break; //@line 4170 "tcc_bootstrap.c"
 case 3: 
 var $8=$1; //@line 4171 "tcc_bootstrap.c"
 var $9=(($8+6)|0); //@line 4171 "tcc_bootstrap.c"
 var $10=$9; //@line 4171 "tcc_bootstrap.c"
 var $11=HEAP16[(($10)>>1)]; //@line 4171 "tcc_bootstrap.c"
 var $12=($11&65535)>>>7; //@line 4171 "tcc_bootstrap.c"
 var $13=$12&3; //@line 4171 "tcc_bootstrap.c"
 var $14=(($13<<16)>>16)!=0; //@line 4171 "tcc_bootstrap.c"
 if($14){label=4;break;}else{label=5;break;} //@line 4171 "tcc_bootstrap.c"
 case 4: 
 var $16=$esym; //@line 4172 "tcc_bootstrap.c"
 var $17=(($16+13)|0); //@line 4172 "tcc_bootstrap.c"
 var $18=HEAP8[(($17)>>0)]; //@line 4172 "tcc_bootstrap.c"
 var $19=($18&255); //@line 4172 "tcc_bootstrap.c"
 var $20=$19&-4; //@line 4172 "tcc_bootstrap.c"
 var $21=$1; //@line 4172 "tcc_bootstrap.c"
 var $22=(($21+6)|0); //@line 4172 "tcc_bootstrap.c"
 var $23=$22; //@line 4172 "tcc_bootstrap.c"
 var $24=HEAP16[(($23)>>1)]; //@line 4172 "tcc_bootstrap.c"
 var $25=($24&65535)>>>7; //@line 4172 "tcc_bootstrap.c"
 var $26=$25&3; //@line 4172 "tcc_bootstrap.c"
 var $27=($26&65535); //@line 4172 "tcc_bootstrap.c"
 var $28=$20|$27; //@line 4172 "tcc_bootstrap.c"
 var $29=(($28)&255); //@line 4172 "tcc_bootstrap.c"
 var $30=$esym; //@line 4172 "tcc_bootstrap.c"
 var $31=(($30+13)|0); //@line 4172 "tcc_bootstrap.c"
 HEAP8[(($31)>>0)]=$29; //@line 4172 "tcc_bootstrap.c"
 label=5;break; //@line 4172 "tcc_bootstrap.c"
 case 5: 
 var $33=$1; //@line 4174 "tcc_bootstrap.c"
 var $34=(($33+16)|0); //@line 4174 "tcc_bootstrap.c"
 var $35=(($34)|0); //@line 4174 "tcc_bootstrap.c"
 var $36=HEAP32[(($35)>>2)]; //@line 4174 "tcc_bootstrap.c"
 var $37=$36&8192; //@line 4174 "tcc_bootstrap.c"
 var $38=($37|0)!=0; //@line 4174 "tcc_bootstrap.c"
 if($38){label=6;break;}else{label=7;break;} //@line 4174 "tcc_bootstrap.c"
 case 6: 
 $sym_bind=0; //@line 4175 "tcc_bootstrap.c"
 label=11;break; //@line 4175 "tcc_bootstrap.c"
 case 7: 
 var $41=$1; //@line 4176 "tcc_bootstrap.c"
 var $42=(($41+6)|0); //@line 4176 "tcc_bootstrap.c"
 var $43=$42; //@line 4176 "tcc_bootstrap.c"
 var $44=HEAP16[(($43)>>1)]; //@line 4176 "tcc_bootstrap.c"
 var $45=($44&65535)>>>6; //@line 4176 "tcc_bootstrap.c"
 var $46=$45&1; //@line 4176 "tcc_bootstrap.c"
 var $47=(($46<<16)>>16)!=0; //@line 4176 "tcc_bootstrap.c"
 if($47){label=8;break;}else{label=9;break;} //@line 4176 "tcc_bootstrap.c"
 case 8: 
 $sym_bind=2; //@line 4177 "tcc_bootstrap.c"
 label=10;break; //@line 4177 "tcc_bootstrap.c"
 case 9: 
 $sym_bind=1; //@line 4179 "tcc_bootstrap.c"
 label=10;break;
 case 10: 
 label=11;break;
 case 11: 
 var $52=$esym; //@line 4180 "tcc_bootstrap.c"
 var $53=(($52+12)|0); //@line 4180 "tcc_bootstrap.c"
 var $54=HEAP8[(($53)>>0)]; //@line 4180 "tcc_bootstrap.c"
 var $55=($54&255); //@line 4180 "tcc_bootstrap.c"
 var $56=$55>>4; //@line 4180 "tcc_bootstrap.c"
 $old_sym_bind=$56; //@line 4180 "tcc_bootstrap.c"
 var $57=$sym_bind; //@line 4181 "tcc_bootstrap.c"
 var $58=$old_sym_bind; //@line 4181 "tcc_bootstrap.c"
 var $59=($57|0)!=($58|0); //@line 4181 "tcc_bootstrap.c"
 if($59){label=12;break;}else{label=13;break;} //@line 4181 "tcc_bootstrap.c"
 case 12: 
 var $61=$sym_bind; //@line 4182 "tcc_bootstrap.c"
 var $62=$61<<4; //@line 4182 "tcc_bootstrap.c"
 var $63=$esym; //@line 4182 "tcc_bootstrap.c"
 var $64=(($63+12)|0); //@line 4182 "tcc_bootstrap.c"
 var $65=HEAP8[(($64)>>0)]; //@line 4182 "tcc_bootstrap.c"
 var $66=($65&255); //@line 4182 "tcc_bootstrap.c"
 var $67=$66&15; //@line 4182 "tcc_bootstrap.c"
 var $68=$67&15; //@line 4182 "tcc_bootstrap.c"
 var $69=((($62)+($68))|0); //@line 4182 "tcc_bootstrap.c"
 var $70=(($69)&255); //@line 4182 "tcc_bootstrap.c"
 var $71=$esym; //@line 4182 "tcc_bootstrap.c"
 var $72=(($71+12)|0); //@line 4182 "tcc_bootstrap.c"
 HEAP8[(($72)>>0)]=$70; //@line 4182 "tcc_bootstrap.c"
 label=13;break; //@line 4183 "tcc_bootstrap.c"
 case 13: 
 STACKTOP=sp;return; //@line 4182 "tcc_bootstrap.c"
  default: assert(0, "bad label: " + label);
 }

}


function _save_reg_upstack($r,$n){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+48)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $l;
 var $saved;
 var $size;
 var $align=sp;
 var $p;
 var $p1;
 var $sv=(sp)+(8);
 var $type;
 $1=$r;
 $2=$n;
 var $3=$1; //@line 4613 "tcc_bootstrap.c"
 var $4=$3&63; //@line 4613 "tcc_bootstrap.c"
 $1=$4; //@line 4613 "tcc_bootstrap.c"
 var $5=($4|0)>=48; //@line 4613 "tcc_bootstrap.c"
 if($5){label=2;break;}else{label=3;break;} //@line 4613 "tcc_bootstrap.c"
 case 2: 
 label=26;break; //@line 4614 "tcc_bootstrap.c"
 case 3: 
 var $8=HEAP32[((10616)>>2)]; //@line 4615 "tcc_bootstrap.c"
 var $9=($8|0)!=0; //@line 4615 "tcc_bootstrap.c"
 if($9){label=4;break;}else{label=5;break;} //@line 4615 "tcc_bootstrap.c"
 case 4: 
 label=26;break; //@line 4616 "tcc_bootstrap.c"
 case 5: 
 $saved=0; //@line 4617 "tcc_bootstrap.c"
 $l=0; //@line 4618 "tcc_bootstrap.c"
 $p=77280; //@line 4619 "tcc_bootstrap.c"
 var $12=HEAP32[((9288)>>2)]; //@line 4619 "tcc_bootstrap.c"
 var $13=$2; //@line 4619 "tcc_bootstrap.c"
 var $14=(((-$13))|0); //@line 4619 "tcc_bootstrap.c"
 var $15=(($12+((($14)*(40))&-1))|0); //@line 4619 "tcc_bootstrap.c"
 $p1=$15; //@line 4619 "tcc_bootstrap.c"
 label=6;break; //@line 4619 "tcc_bootstrap.c"
 case 6: 
 var $17=$p; //@line 4619 "tcc_bootstrap.c"
 var $18=$p1; //@line 4619 "tcc_bootstrap.c"
 var $19=($17>>>0)<=($18>>>0); //@line 4619 "tcc_bootstrap.c"
 if($19){label=7;break;}else{label=26;break;} //@line 4619 "tcc_bootstrap.c"
 case 7: 
 var $21=$p; //@line 4620 "tcc_bootstrap.c"
 var $22=(($21+8)|0); //@line 4620 "tcc_bootstrap.c"
 var $23=HEAP16[(($22)>>1)]; //@line 4620 "tcc_bootstrap.c"
 var $24=($23&65535); //@line 4620 "tcc_bootstrap.c"
 var $25=$24&63; //@line 4620 "tcc_bootstrap.c"
 var $26=$1; //@line 4620 "tcc_bootstrap.c"
 var $27=($25|0)==($26|0); //@line 4620 "tcc_bootstrap.c"
 if($27){label=10;break;}else{label=8;break;} //@line 4620 "tcc_bootstrap.c"
 case 8: 
 var $29=$p; //@line 4620 "tcc_bootstrap.c"
 var $30=(($29)|0); //@line 4620 "tcc_bootstrap.c"
 var $31=(($30)|0); //@line 4620 "tcc_bootstrap.c"
 var $32=HEAP32[(($31)>>2)]; //@line 4620 "tcc_bootstrap.c"
 var $33=$32&15; //@line 4620 "tcc_bootstrap.c"
 var $34=($33|0)==4; //@line 4620 "tcc_bootstrap.c"
 if($34){label=9;break;}else{label=24;break;} //@line 4620 "tcc_bootstrap.c"
 case 9: 
 var $36=$p; //@line 4620 "tcc_bootstrap.c"
 var $37=(($36+10)|0); //@line 4620 "tcc_bootstrap.c"
 var $38=HEAP16[(($37)>>1)]; //@line 4620 "tcc_bootstrap.c"
 var $39=($38&65535); //@line 4620 "tcc_bootstrap.c"
 var $40=$39&63; //@line 4620 "tcc_bootstrap.c"
 var $41=$1; //@line 4620 "tcc_bootstrap.c"
 var $42=($40|0)==($41|0); //@line 4620 "tcc_bootstrap.c"
 if($42){label=10;break;}else{label=24;break;} //@line 4620 "tcc_bootstrap.c"
 case 10: 
 var $44=$saved; //@line 4622 "tcc_bootstrap.c"
 var $45=($44|0)!=0; //@line 4622 "tcc_bootstrap.c"
 if($45){label=20;break;}else{label=11;break;} //@line 4622 "tcc_bootstrap.c"
 case 11: 
 var $47=$p; //@line 4623 "tcc_bootstrap.c"
 var $48=(($47+8)|0); //@line 4623 "tcc_bootstrap.c"
 var $49=HEAP16[(($48)>>1)]; //@line 4623 "tcc_bootstrap.c"
 var $50=($49&65535); //@line 4623 "tcc_bootstrap.c"
 var $51=$50&63; //@line 4623 "tcc_bootstrap.c"
 $1=$51; //@line 4623 "tcc_bootstrap.c"
 var $52=$p; //@line 4624 "tcc_bootstrap.c"
 var $53=(($52)|0); //@line 4624 "tcc_bootstrap.c"
 $type=$53; //@line 4624 "tcc_bootstrap.c"
 var $54=$p; //@line 4625 "tcc_bootstrap.c"
 var $55=(($54+8)|0); //@line 4625 "tcc_bootstrap.c"
 var $56=HEAP16[(($55)>>1)]; //@line 4625 "tcc_bootstrap.c"
 var $57=($56&65535); //@line 4625 "tcc_bootstrap.c"
 var $58=$57&256; //@line 4625 "tcc_bootstrap.c"
 var $59=($58|0)!=0; //@line 4625 "tcc_bootstrap.c"
 if($59){label=14;break;}else{label=12;break;} //@line 4625 "tcc_bootstrap.c"
 case 12: 
 var $61=$type; //@line 4626 "tcc_bootstrap.c"
 var $62=(($61)|0); //@line 4626 "tcc_bootstrap.c"
 var $63=HEAP32[(($62)>>2)]; //@line 4626 "tcc_bootstrap.c"
 var $64=_is_float($63); //@line 4626 "tcc_bootstrap.c"
 var $65=($64|0)!=0; //@line 4626 "tcc_bootstrap.c"
 if($65){label=15;break;}else{label=13;break;} //@line 4626 "tcc_bootstrap.c"
 case 13: 
 var $67=$type; //@line 4626 "tcc_bootstrap.c"
 var $68=(($67)|0); //@line 4626 "tcc_bootstrap.c"
 var $69=HEAP32[(($68)>>2)]; //@line 4626 "tcc_bootstrap.c"
 var $70=$69&15; //@line 4626 "tcc_bootstrap.c"
 var $71=($70|0)!=4; //@line 4626 "tcc_bootstrap.c"
 if($71){label=14;break;}else{label=15;break;} //@line 4626 "tcc_bootstrap.c"
 case 14: 
 $type=11000; //@line 4627 "tcc_bootstrap.c"
 label=15;break; //@line 4627 "tcc_bootstrap.c"
 case 15: 
 var $74=$type; //@line 4628 "tcc_bootstrap.c"
 var $75=_type_size($74,$align); //@line 4628 "tcc_bootstrap.c"
 $size=$75; //@line 4628 "tcc_bootstrap.c"
 var $76=HEAP32[((10728)>>2)]; //@line 4629 "tcc_bootstrap.c"
 var $77=$size; //@line 4629 "tcc_bootstrap.c"
 var $78=((($76)-($77))|0); //@line 4629 "tcc_bootstrap.c"
 var $79=HEAP32[(($align)>>2)]; //@line 4629 "tcc_bootstrap.c"
 var $80=(((-$79))|0); //@line 4629 "tcc_bootstrap.c"
 var $81=$78&$80; //@line 4629 "tcc_bootstrap.c"
 HEAP32[((10728)>>2)]=$81; //@line 4629 "tcc_bootstrap.c"
 var $82=$type; //@line 4630 "tcc_bootstrap.c"
 var $83=(($82)|0); //@line 4630 "tcc_bootstrap.c"
 var $84=HEAP32[(($83)>>2)]; //@line 4630 "tcc_bootstrap.c"
 var $85=(($sv)|0); //@line 4630 "tcc_bootstrap.c"
 var $86=(($85)|0); //@line 4630 "tcc_bootstrap.c"
 HEAP32[(($86)>>2)]=$84; //@line 4630 "tcc_bootstrap.c"
 var $87=(($sv+8)|0); //@line 4631 "tcc_bootstrap.c"
 HEAP16[(($87)>>1)]=306; //@line 4631 "tcc_bootstrap.c"
 var $88=HEAP32[((10728)>>2)]; //@line 4632 "tcc_bootstrap.c"
 var $89$0=$88;
 var $89$1=((((($88|0)<0))|0)?-1:0);
 var $90=(($sv+16)|0); //@line 4632 "tcc_bootstrap.c"
 var $91=$90; //@line 4632 "tcc_bootstrap.c"
 var $st$0$0=(($91)|0);
 HEAP32[(($st$0$0)>>2)]=$89$0;
 var $st$1$1=(($91+4)|0);
 HEAP32[(($st$1$1)>>2)]=$89$1;
 var $92=$1; //@line 4633 "tcc_bootstrap.c"
 _store($92,$sv); //@line 4633 "tcc_bootstrap.c"
 var $93=$1; //@line 4634 "tcc_bootstrap.c"
 var $94=($93|0)==4; //@line 4634 "tcc_bootstrap.c"
 if($94){label=16;break;}else{label=17;break;} //@line 4634 "tcc_bootstrap.c"
 case 16: 
 _o(55517); //@line 4635 "tcc_bootstrap.c"
 label=17;break; //@line 4636 "tcc_bootstrap.c"
 case 17: 
 var $97=$type; //@line 4637 "tcc_bootstrap.c"
 var $98=(($97)|0); //@line 4637 "tcc_bootstrap.c"
 var $99=HEAP32[(($98)>>2)]; //@line 4637 "tcc_bootstrap.c"
 var $100=$99&15; //@line 4637 "tcc_bootstrap.c"
 var $101=($100|0)==4; //@line 4637 "tcc_bootstrap.c"
 if($101){label=18;break;}else{label=19;break;} //@line 4637 "tcc_bootstrap.c"
 case 18: 
 var $103=(($sv+16)|0); //@line 4638 "tcc_bootstrap.c"
 var $104=$103; //@line 4638 "tcc_bootstrap.c"
 var $ld$2$0=(($104)|0);
 var $105$0=HEAP32[(($ld$2$0)>>2)];
 var $ld$3$1=(($104+4)|0);
 var $105$1=HEAP32[(($ld$3$1)>>2)];
 var $$etemp$4$0=4;
 var $$etemp$4$1=0;
 var $106$0=_i64Add($105$0,$105$1,$$etemp$4$0,$$etemp$4$1);var $106$1=tempRet0; //@line 4638 "tcc_bootstrap.c"
 var $st$5$0=(($104)|0);
 HEAP32[(($st$5$0)>>2)]=$106$0;
 var $st$6$1=(($104+4)|0);
 HEAP32[(($st$6$1)>>2)]=$106$1;
 var $107=$p; //@line 4639 "tcc_bootstrap.c"
 var $108=(($107+10)|0); //@line 4639 "tcc_bootstrap.c"
 var $109=HEAP16[(($108)>>1)]; //@line 4639 "tcc_bootstrap.c"
 var $110=($109&65535); //@line 4639 "tcc_bootstrap.c"
 _store($110,$sv); //@line 4639 "tcc_bootstrap.c"
 label=19;break; //@line 4640 "tcc_bootstrap.c"
 case 19: 
 var $112=HEAP32[((10728)>>2)]; //@line 4641 "tcc_bootstrap.c"
 $l=$112; //@line 4641 "tcc_bootstrap.c"
 $saved=1; //@line 4642 "tcc_bootstrap.c"
 label=20;break; //@line 4643 "tcc_bootstrap.c"
 case 20: 
 var $114=$p; //@line 4644 "tcc_bootstrap.c"
 var $115=(($114+8)|0); //@line 4644 "tcc_bootstrap.c"
 var $116=HEAP16[(($115)>>1)]; //@line 4644 "tcc_bootstrap.c"
 var $117=($116&65535); //@line 4644 "tcc_bootstrap.c"
 var $118=$117&256; //@line 4644 "tcc_bootstrap.c"
 var $119=($118|0)!=0; //@line 4644 "tcc_bootstrap.c"
 if($119){label=21;break;}else{label=22;break;} //@line 4644 "tcc_bootstrap.c"
 case 21: 
 var $121=$p; //@line 4645 "tcc_bootstrap.c"
 var $122=(($121+8)|0); //@line 4645 "tcc_bootstrap.c"
 var $123=HEAP16[(($122)>>1)]; //@line 4645 "tcc_bootstrap.c"
 var $124=($123&65535); //@line 4645 "tcc_bootstrap.c"
 var $125=$124&-32832; //@line 4645 "tcc_bootstrap.c"
 var $126=$125|49; //@line 4645 "tcc_bootstrap.c"
 var $127=(($126)&65535); //@line 4645 "tcc_bootstrap.c"
 var $128=$p; //@line 4645 "tcc_bootstrap.c"
 var $129=(($128+8)|0); //@line 4645 "tcc_bootstrap.c"
 HEAP16[(($129)>>1)]=$127; //@line 4645 "tcc_bootstrap.c"
 label=23;break; //@line 4647 "tcc_bootstrap.c"
 case 22: 
 var $131=$p; //@line 4648 "tcc_bootstrap.c"
 var $132=(($131)|0); //@line 4648 "tcc_bootstrap.c"
 var $133=(($132)|0); //@line 4648 "tcc_bootstrap.c"
 var $134=HEAP32[(($133)>>2)]; //@line 4648 "tcc_bootstrap.c"
 var $135=_lvalue_type($134); //@line 4648 "tcc_bootstrap.c"
 var $136=$135|50; //@line 4648 "tcc_bootstrap.c"
 var $137=(($136)&65535); //@line 4648 "tcc_bootstrap.c"
 var $138=$p; //@line 4648 "tcc_bootstrap.c"
 var $139=(($138+8)|0); //@line 4648 "tcc_bootstrap.c"
 HEAP16[(($139)>>1)]=$137; //@line 4648 "tcc_bootstrap.c"
 label=23;break;
 case 23: 
 var $141=$p; //@line 4650 "tcc_bootstrap.c"
 var $142=(($141+10)|0); //@line 4650 "tcc_bootstrap.c"
 HEAP16[(($142)>>1)]=48; //@line 4650 "tcc_bootstrap.c"
 var $143=$l; //@line 4651 "tcc_bootstrap.c"
 var $144$0=$143;
 var $144$1=((((($143|0)<0))|0)?-1:0);
 var $145=$p; //@line 4651 "tcc_bootstrap.c"
 var $146=(($145+16)|0); //@line 4651 "tcc_bootstrap.c"
 var $147=$146; //@line 4651 "tcc_bootstrap.c"
 var $st$7$0=(($147)|0);
 HEAP32[(($st$7$0)>>2)]=$144$0;
 var $st$8$1=(($147+4)|0);
 HEAP32[(($st$8$1)>>2)]=$144$1;
 label=24;break; //@line 4652 "tcc_bootstrap.c"
 case 24: 
 label=25;break; //@line 4653 "tcc_bootstrap.c"
 case 25: 
 var $150=$p; //@line 4619 "tcc_bootstrap.c"
 var $151=(($150+40)|0); //@line 4619 "tcc_bootstrap.c"
 $p=$151; //@line 4619 "tcc_bootstrap.c"
 label=6;break; //@line 4619 "tcc_bootstrap.c"
 case 26: 
 STACKTOP=sp;return; //@line 4619 "tcc_bootstrap.c"
  default: assert(0, "bad label: " + label);
 }

}


function _type_size($type,$a){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $s;
 var $bt;
 var $ts;
 $2=$type;
 $3=$a;
 var $4=$2; //@line 5800 "tcc_bootstrap.c"
 var $5=(($4)|0); //@line 5800 "tcc_bootstrap.c"
 var $6=HEAP32[(($5)>>2)]; //@line 5800 "tcc_bootstrap.c"
 var $7=$6&15; //@line 5800 "tcc_bootstrap.c"
 $bt=$7; //@line 5800 "tcc_bootstrap.c"
 var $8=$bt; //@line 5801 "tcc_bootstrap.c"
 var $9=($8|0)==7; //@line 5801 "tcc_bootstrap.c"
 if($9){label=2;break;}else{label=3;break;} //@line 5801 "tcc_bootstrap.c"
 case 2: 
 var $11=$2; //@line 5802 "tcc_bootstrap.c"
 var $12=(($11+4)|0); //@line 5802 "tcc_bootstrap.c"
 var $13=HEAP32[(($12)>>2)]; //@line 5802 "tcc_bootstrap.c"
 $s=$13; //@line 5802 "tcc_bootstrap.c"
 var $14=$s; //@line 5803 "tcc_bootstrap.c"
 var $15=(($14+4)|0); //@line 5803 "tcc_bootstrap.c"
 var $16=HEAP16[(($15)>>1)]; //@line 5803 "tcc_bootstrap.c"
 var $17=($16&65535); //@line 5803 "tcc_bootstrap.c"
 var $18=$3; //@line 5803 "tcc_bootstrap.c"
 HEAP32[(($18)>>2)]=$17; //@line 5803 "tcc_bootstrap.c"
 var $19=$s; //@line 5804 "tcc_bootstrap.c"
 var $20=(($19+8)|0); //@line 5804 "tcc_bootstrap.c"
 var $21=$20; //@line 5804 "tcc_bootstrap.c"
 var $22=(($21)|0); //@line 5804 "tcc_bootstrap.c"
 var $23=HEAP32[(($22)>>2)]; //@line 5804 "tcc_bootstrap.c"
 $1=$23; //@line 5804 "tcc_bootstrap.c"
 label=27;break; //@line 5804 "tcc_bootstrap.c"
 case 3: 
 var $25=$bt; //@line 5805 "tcc_bootstrap.c"
 var $26=($25|0)==5; //@line 5805 "tcc_bootstrap.c"
 if($26){label=4;break;}else{label=10;break;} //@line 5805 "tcc_bootstrap.c"
 case 4: 
 var $28=$2; //@line 5806 "tcc_bootstrap.c"
 var $29=(($28)|0); //@line 5806 "tcc_bootstrap.c"
 var $30=HEAP32[(($29)>>2)]; //@line 5806 "tcc_bootstrap.c"
 var $31=$30&64; //@line 5806 "tcc_bootstrap.c"
 var $32=($31|0)!=0; //@line 5806 "tcc_bootstrap.c"
 if($32){label=5;break;}else{label=9;break;} //@line 5806 "tcc_bootstrap.c"
 case 5: 
 var $34=$2; //@line 5808 "tcc_bootstrap.c"
 var $35=(($34+4)|0); //@line 5808 "tcc_bootstrap.c"
 var $36=HEAP32[(($35)>>2)]; //@line 5808 "tcc_bootstrap.c"
 $s=$36; //@line 5808 "tcc_bootstrap.c"
 var $37=$s; //@line 5809 "tcc_bootstrap.c"
 var $38=(($37+16)|0); //@line 5809 "tcc_bootstrap.c"
 var $39=$3; //@line 5809 "tcc_bootstrap.c"
 var $40=_type_size($38,$39); //@line 5809 "tcc_bootstrap.c"
 $ts=$40; //@line 5809 "tcc_bootstrap.c"
 var $41=$ts; //@line 5810 "tcc_bootstrap.c"
 var $42=($41|0)<0; //@line 5810 "tcc_bootstrap.c"
 if($42){label=6;break;}else{label=8;break;} //@line 5810 "tcc_bootstrap.c"
 case 6: 
 var $44=$s; //@line 5810 "tcc_bootstrap.c"
 var $45=(($44+8)|0); //@line 5810 "tcc_bootstrap.c"
 var $46=$45; //@line 5810 "tcc_bootstrap.c"
 var $47=(($46)|0); //@line 5810 "tcc_bootstrap.c"
 var $48=HEAP32[(($47)>>2)]; //@line 5810 "tcc_bootstrap.c"
 var $49=($48|0)<0; //@line 5810 "tcc_bootstrap.c"
 if($49){label=7;break;}else{label=8;break;} //@line 5810 "tcc_bootstrap.c"
 case 7: 
 var $51=$ts; //@line 5811 "tcc_bootstrap.c"
 var $52=(((-$51))|0); //@line 5811 "tcc_bootstrap.c"
 $ts=$52; //@line 5811 "tcc_bootstrap.c"
 label=8;break; //@line 5811 "tcc_bootstrap.c"
 case 8: 
 var $54=$ts; //@line 5812 "tcc_bootstrap.c"
 var $55=$s; //@line 5812 "tcc_bootstrap.c"
 var $56=(($55+8)|0); //@line 5812 "tcc_bootstrap.c"
 var $57=$56; //@line 5812 "tcc_bootstrap.c"
 var $58=(($57)|0); //@line 5812 "tcc_bootstrap.c"
 var $59=HEAP32[(($58)>>2)]; //@line 5812 "tcc_bootstrap.c"
 var $60=(Math_imul($54,$59)|0); //@line 5812 "tcc_bootstrap.c"
 $1=$60; //@line 5812 "tcc_bootstrap.c"
 label=27;break; //@line 5812 "tcc_bootstrap.c"
 case 9: 
 var $62=$3; //@line 5814 "tcc_bootstrap.c"
 HEAP32[(($62)>>2)]=4; //@line 5814 "tcc_bootstrap.c"
 $1=4; //@line 5815 "tcc_bootstrap.c"
 label=27;break; //@line 5815 "tcc_bootstrap.c"
 case 10: 
 var $64=$2; //@line 5817 "tcc_bootstrap.c"
 var $65=(($64)|0); //@line 5817 "tcc_bootstrap.c"
 var $66=HEAP32[(($65)>>2)]; //@line 5817 "tcc_bootstrap.c"
 var $67=_IS_ENUM($66); //@line 5817 "tcc_bootstrap.c"
 var $68=($67|0)!=0; //@line 5817 "tcc_bootstrap.c"
 if($68){label=11;break;}else{label=13;break;} //@line 5817 "tcc_bootstrap.c"
 case 11: 
 var $70=$2; //@line 5817 "tcc_bootstrap.c"
 var $71=(($70+4)|0); //@line 5817 "tcc_bootstrap.c"
 var $72=HEAP32[(($71)>>2)]; //@line 5817 "tcc_bootstrap.c"
 var $73=(($72+8)|0); //@line 5817 "tcc_bootstrap.c"
 var $74=$73; //@line 5817 "tcc_bootstrap.c"
 var $75=(($74)|0); //@line 5817 "tcc_bootstrap.c"
 var $76=HEAP32[(($75)>>2)]; //@line 5817 "tcc_bootstrap.c"
 var $77=($76|0)==-1; //@line 5817 "tcc_bootstrap.c"
 if($77){label=12;break;}else{label=13;break;} //@line 5817 "tcc_bootstrap.c"
 case 12: 
 $1=-1; //@line 5818 "tcc_bootstrap.c"
 label=27;break; //@line 5818 "tcc_bootstrap.c"
 case 13: 
 var $80=$bt; //@line 5819 "tcc_bootstrap.c"
 var $81=($80|0)==10; //@line 5819 "tcc_bootstrap.c"
 if($81){label=14;break;}else{label=15;break;} //@line 5819 "tcc_bootstrap.c"
 case 14: 
 var $83=$3; //@line 5820 "tcc_bootstrap.c"
 HEAP32[(($83)>>2)]=4; //@line 5820 "tcc_bootstrap.c"
 $1=12; //@line 5821 "tcc_bootstrap.c"
 label=27;break; //@line 5821 "tcc_bootstrap.c"
 case 15: 
 var $85=$bt; //@line 5822 "tcc_bootstrap.c"
 var $86=($85|0)==9; //@line 5822 "tcc_bootstrap.c"
 if($86){label=17;break;}else{label=16;break;} //@line 5822 "tcc_bootstrap.c"
 case 16: 
 var $88=$bt; //@line 5822 "tcc_bootstrap.c"
 var $89=($88|0)==4; //@line 5822 "tcc_bootstrap.c"
 if($89){label=17;break;}else{label=18;break;} //@line 5822 "tcc_bootstrap.c"
 case 17: 
 var $91=$3; //@line 5823 "tcc_bootstrap.c"
 HEAP32[(($91)>>2)]=4; //@line 5823 "tcc_bootstrap.c"
 $1=8; //@line 5824 "tcc_bootstrap.c"
 label=27;break; //@line 5824 "tcc_bootstrap.c"
 case 18: 
 var $93=$bt; //@line 5825 "tcc_bootstrap.c"
 var $94=($93|0)==3; //@line 5825 "tcc_bootstrap.c"
 if($94){label=20;break;}else{label=19;break;} //@line 5825 "tcc_bootstrap.c"
 case 19: 
 var $96=$bt; //@line 5825 "tcc_bootstrap.c"
 var $97=($96|0)==8; //@line 5825 "tcc_bootstrap.c"
 if($97){label=20;break;}else{label=21;break;} //@line 5825 "tcc_bootstrap.c"
 case 20: 
 var $99=$3; //@line 5826 "tcc_bootstrap.c"
 HEAP32[(($99)>>2)]=4; //@line 5826 "tcc_bootstrap.c"
 $1=4; //@line 5827 "tcc_bootstrap.c"
 label=27;break; //@line 5827 "tcc_bootstrap.c"
 case 21: 
 var $101=$bt; //@line 5828 "tcc_bootstrap.c"
 var $102=($101|0)==2; //@line 5828 "tcc_bootstrap.c"
 if($102){label=22;break;}else{label=23;break;} //@line 5828 "tcc_bootstrap.c"
 case 22: 
 var $104=$3; //@line 5829 "tcc_bootstrap.c"
 HEAP32[(($104)>>2)]=2; //@line 5829 "tcc_bootstrap.c"
 $1=2; //@line 5830 "tcc_bootstrap.c"
 label=27;break; //@line 5830 "tcc_bootstrap.c"
 case 23: 
 var $106=$bt; //@line 5831 "tcc_bootstrap.c"
 var $107=($106|0)==13; //@line 5831 "tcc_bootstrap.c"
 if($107){label=25;break;}else{label=24;break;} //@line 5831 "tcc_bootstrap.c"
 case 24: 
 var $109=$bt; //@line 5831 "tcc_bootstrap.c"
 var $110=($109|0)==14; //@line 5831 "tcc_bootstrap.c"
 if($110){label=25;break;}else{label=26;break;} //@line 5831 "tcc_bootstrap.c"
 case 25: 
 var $112=$3; //@line 5832 "tcc_bootstrap.c"
 HEAP32[(($112)>>2)]=8; //@line 5832 "tcc_bootstrap.c"
 $1=16; //@line 5833 "tcc_bootstrap.c"
 label=27;break; //@line 5833 "tcc_bootstrap.c"
 case 26: 
 var $114=$3; //@line 5835 "tcc_bootstrap.c"
 HEAP32[(($114)>>2)]=1; //@line 5835 "tcc_bootstrap.c"
 $1=1; //@line 5836 "tcc_bootstrap.c"
 label=27;break; //@line 5836 "tcc_bootstrap.c"
 case 27: 
 var $116=$1; //@line 5838 "tcc_bootstrap.c"
 STACKTOP=sp;return $116; //@line 5838 "tcc_bootstrap.c"
  default: assert(0, "bad label: " + label);
 }

}


function _store($r,$v){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $fr;
 var $bt;
 var $ft;
 var $fc;
 $1=$r;
 $2=$v;
 var $3=$2; //@line 10148 "tcc_bootstrap.c"
 var $4=(($3)|0); //@line 10148 "tcc_bootstrap.c"
 var $5=(($4)|0); //@line 10148 "tcc_bootstrap.c"
 var $6=HEAP32[(($5)>>2)]; //@line 10148 "tcc_bootstrap.c"
 $ft=$6; //@line 10148 "tcc_bootstrap.c"
 var $7=$2; //@line 10149 "tcc_bootstrap.c"
 var $8=(($7+16)|0); //@line 10149 "tcc_bootstrap.c"
 var $9=$8; //@line 10149 "tcc_bootstrap.c"
 var $ld$0$0=(($9)|0);
 var $10$0=HEAP32[(($ld$0$0)>>2)];
 var $ld$1$1=(($9+4)|0);
 var $10$1=HEAP32[(($ld$1$1)>>2)];
 var $11$0=$10$0;
 var $11=$11$0;
 $fc=$11; //@line 10149 "tcc_bootstrap.c"
 var $12=$2; //@line 10150 "tcc_bootstrap.c"
 var $13=(($12+8)|0); //@line 10150 "tcc_bootstrap.c"
 var $14=HEAP16[(($13)>>1)]; //@line 10150 "tcc_bootstrap.c"
 var $15=($14&65535); //@line 10150 "tcc_bootstrap.c"
 var $16=$15&63; //@line 10150 "tcc_bootstrap.c"
 $fr=$16; //@line 10150 "tcc_bootstrap.c"
 var $17=$ft; //@line 10151 "tcc_bootstrap.c"
 var $18=$17&-769; //@line 10151 "tcc_bootstrap.c"
 $ft=$18; //@line 10151 "tcc_bootstrap.c"
 var $19=$ft; //@line 10152 "tcc_bootstrap.c"
 var $20=$19&15; //@line 10152 "tcc_bootstrap.c"
 $bt=$20; //@line 10152 "tcc_bootstrap.c"
 var $21=$bt; //@line 10153 "tcc_bootstrap.c"
 var $22=($21|0)==8; //@line 10153 "tcc_bootstrap.c"
 if($22){label=2;break;}else{label=3;break;} //@line 10153 "tcc_bootstrap.c"
 case 2: 
 _o(217); //@line 10154 "tcc_bootstrap.c"
 $1=2; //@line 10155 "tcc_bootstrap.c"
 label=16;break; //@line 10156 "tcc_bootstrap.c"
 case 3: 
 var $25=$bt; //@line 10156 "tcc_bootstrap.c"
 var $26=($25|0)==9; //@line 10156 "tcc_bootstrap.c"
 if($26){label=4;break;}else{label=5;break;} //@line 10156 "tcc_bootstrap.c"
 case 4: 
 _o(221); //@line 10157 "tcc_bootstrap.c"
 $1=2; //@line 10158 "tcc_bootstrap.c"
 label=15;break; //@line 10159 "tcc_bootstrap.c"
 case 5: 
 var $29=$bt; //@line 10159 "tcc_bootstrap.c"
 var $30=($29|0)==10; //@line 10159 "tcc_bootstrap.c"
 if($30){label=6;break;}else{label=7;break;} //@line 10159 "tcc_bootstrap.c"
 case 6: 
 _o(49369); //@line 10160 "tcc_bootstrap.c"
 _o(219); //@line 10161 "tcc_bootstrap.c"
 $1=7; //@line 10162 "tcc_bootstrap.c"
 label=14;break; //@line 10163 "tcc_bootstrap.c"
 case 7: 
 var $33=$bt; //@line 10164 "tcc_bootstrap.c"
 var $34=($33|0)==2; //@line 10164 "tcc_bootstrap.c"
 if($34){label=8;break;}else{label=9;break;} //@line 10164 "tcc_bootstrap.c"
 case 8: 
 _o(102); //@line 10165 "tcc_bootstrap.c"
 label=9;break; //@line 10165 "tcc_bootstrap.c"
 case 9: 
 var $37=$bt; //@line 10166 "tcc_bootstrap.c"
 var $38=($37|0)==1; //@line 10166 "tcc_bootstrap.c"
 if($38){label=11;break;}else{label=10;break;} //@line 10166 "tcc_bootstrap.c"
 case 10: 
 var $40=$bt; //@line 10166 "tcc_bootstrap.c"
 var $41=($40|0)==11; //@line 10166 "tcc_bootstrap.c"
 if($41){label=11;break;}else{label=12;break;} //@line 10166 "tcc_bootstrap.c"
 case 11: 
 _o(136); //@line 10167 "tcc_bootstrap.c"
 label=13;break; //@line 10167 "tcc_bootstrap.c"
 case 12: 
 _o(137); //@line 10169 "tcc_bootstrap.c"
 label=13;break;
 case 13: 
 label=14;break;
 case 14: 
 label=15;break;
 case 15: 
 label=16;break;
 case 16: 
 var $48=$fr; //@line 10171 "tcc_bootstrap.c"
 var $49=($48|0)==48; //@line 10171 "tcc_bootstrap.c"
 if($49){label=19;break;}else{label=17;break;} //@line 10171 "tcc_bootstrap.c"
 case 17: 
 var $51=$fr; //@line 10171 "tcc_bootstrap.c"
 var $52=($51|0)==50; //@line 10171 "tcc_bootstrap.c"
 if($52){label=19;break;}else{label=18;break;} //@line 10171 "tcc_bootstrap.c"
 case 18: 
 var $54=$2; //@line 10171 "tcc_bootstrap.c"
 var $55=(($54+8)|0); //@line 10171 "tcc_bootstrap.c"
 var $56=HEAP16[(($55)>>1)]; //@line 10171 "tcc_bootstrap.c"
 var $57=($56&65535); //@line 10171 "tcc_bootstrap.c"
 var $58=$57&256; //@line 10171 "tcc_bootstrap.c"
 var $59=($58|0)!=0; //@line 10171 "tcc_bootstrap.c"
 if($59){label=19;break;}else{label=20;break;} //@line 10171 "tcc_bootstrap.c"
 case 19: 
 var $61=$1; //@line 10174 "tcc_bootstrap.c"
 var $62=$2; //@line 10174 "tcc_bootstrap.c"
 var $63=(($62+8)|0); //@line 10174 "tcc_bootstrap.c"
 var $64=HEAP16[(($63)>>1)]; //@line 10174 "tcc_bootstrap.c"
 var $65=($64&65535); //@line 10174 "tcc_bootstrap.c"
 var $66=$2; //@line 10174 "tcc_bootstrap.c"
 var $67=(($66+32)|0); //@line 10174 "tcc_bootstrap.c"
 var $68=HEAP32[(($67)>>2)]; //@line 10174 "tcc_bootstrap.c"
 var $69=$fc; //@line 10174 "tcc_bootstrap.c"
 _gen_modrm($61,$65,$68,$69); //@line 10174 "tcc_bootstrap.c"
 label=23;break; //@line 10175 "tcc_bootstrap.c"
 case 20: 
 var $71=$fr; //@line 10175 "tcc_bootstrap.c"
 var $72=$1; //@line 10175 "tcc_bootstrap.c"
 var $73=($71|0)!=($72|0); //@line 10175 "tcc_bootstrap.c"
 if($73){label=21;break;}else{label=22;break;} //@line 10175 "tcc_bootstrap.c"
 case 21: 
 var $75=$fr; //@line 10176 "tcc_bootstrap.c"
 var $76=((($75)+(192))|0); //@line 10176 "tcc_bootstrap.c"
 var $77=$1; //@line 10176 "tcc_bootstrap.c"
 var $78=($77<<3); //@line 10176 "tcc_bootstrap.c"
 var $79=((($76)+($78))|0); //@line 10176 "tcc_bootstrap.c"
 _o($79); //@line 10176 "tcc_bootstrap.c"
 label=22;break; //@line 10177 "tcc_bootstrap.c"
 case 22: 
 label=23;break;
 case 23: 
 STACKTOP=sp;return; //@line 10178 "tcc_bootstrap.c"
  default: assert(0, "bad label: " + label);
 }

}


function _sym_push($v,$type,$r,$c){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $s;
 var $ps;
 var $ts;
 $1=$v;
 $2=$type;
 $3=$r;
 $4=$c;
 var $5=HEAP32[((10704)>>2)]; //@line 4323 "tcc_bootstrap.c"
 var $6=($5|0)!=0; //@line 4323 "tcc_bootstrap.c"
 if($6){label=2;break;}else{label=3;break;} //@line 4323 "tcc_bootstrap.c"
 case 2: 
 $ps=10704; //@line 4324 "tcc_bootstrap.c"
 label=4;break; //@line 4324 "tcc_bootstrap.c"
 case 3: 
 $ps=76560; //@line 4326 "tcc_bootstrap.c"
 label=4;break;
 case 4: 
 var $10=$ps; //@line 4327 "tcc_bootstrap.c"
 var $11=$1; //@line 4327 "tcc_bootstrap.c"
 var $12=$2; //@line 4327 "tcc_bootstrap.c"
 var $13=(($12)|0); //@line 4327 "tcc_bootstrap.c"
 var $14=HEAP32[(($13)>>2)]; //@line 4327 "tcc_bootstrap.c"
 var $15=$4; //@line 4327 "tcc_bootstrap.c"
 var $16=_sym_push2($10,$11,$14,$15); //@line 4327 "tcc_bootstrap.c"
 $s=$16; //@line 4327 "tcc_bootstrap.c"
 var $17=$2; //@line 4328 "tcc_bootstrap.c"
 var $18=(($17+4)|0); //@line 4328 "tcc_bootstrap.c"
 var $19=HEAP32[(($18)>>2)]; //@line 4328 "tcc_bootstrap.c"
 var $20=$s; //@line 4328 "tcc_bootstrap.c"
 var $21=(($20+16)|0); //@line 4328 "tcc_bootstrap.c"
 var $22=(($21+4)|0); //@line 4328 "tcc_bootstrap.c"
 HEAP32[(($22)>>2)]=$19; //@line 4328 "tcc_bootstrap.c"
 var $23=$3; //@line 4329 "tcc_bootstrap.c"
 var $24=(($23)&65535); //@line 4329 "tcc_bootstrap.c"
 var $25=$s; //@line 4329 "tcc_bootstrap.c"
 var $26=(($25+4)|0); //@line 4329 "tcc_bootstrap.c"
 HEAP16[(($26)>>1)]=$24; //@line 4329 "tcc_bootstrap.c"
 var $27=$1; //@line 4330 "tcc_bootstrap.c"
 var $28=$27&536870912; //@line 4330 "tcc_bootstrap.c"
 var $29=($28|0)!=0; //@line 4330 "tcc_bootstrap.c"
 if($29){label=13;break;}else{label=5;break;} //@line 4330 "tcc_bootstrap.c"
 case 5: 
 var $31=$1; //@line 4330 "tcc_bootstrap.c"
 var $32=$31&-1073741825; //@line 4330 "tcc_bootstrap.c"
 var $33=($32|0)<268435456; //@line 4330 "tcc_bootstrap.c"
 if($33){label=6;break;}else{label=13;break;} //@line 4330 "tcc_bootstrap.c"
 case 6: 
 var $35=$1; //@line 4331 "tcc_bootstrap.c"
 var $36=$35&-1073741825; //@line 4331 "tcc_bootstrap.c"
 var $37=((($36)-(256))|0); //@line 4331 "tcc_bootstrap.c"
 var $38=HEAP32[((10496)>>2)]; //@line 4331 "tcc_bootstrap.c"
 var $39=(($38+($37<<2))|0); //@line 4331 "tcc_bootstrap.c"
 var $40=HEAP32[(($39)>>2)]; //@line 4331 "tcc_bootstrap.c"
 $ts=$40; //@line 4331 "tcc_bootstrap.c"
 var $41=$1; //@line 4332 "tcc_bootstrap.c"
 var $42=$41&1073741824; //@line 4332 "tcc_bootstrap.c"
 var $43=($42|0)!=0; //@line 4332 "tcc_bootstrap.c"
 if($43){label=7;break;}else{label=8;break;} //@line 4332 "tcc_bootstrap.c"
 case 7: 
 var $45=$ts; //@line 4333 "tcc_bootstrap.c"
 var $46=(($45+12)|0); //@line 4333 "tcc_bootstrap.c"
 $ps=$46; //@line 4333 "tcc_bootstrap.c"
 label=9;break; //@line 4333 "tcc_bootstrap.c"
 case 8: 
 var $48=$ts; //@line 4335 "tcc_bootstrap.c"
 var $49=(($48+16)|0); //@line 4335 "tcc_bootstrap.c"
 $ps=$49; //@line 4335 "tcc_bootstrap.c"
 label=9;break;
 case 9: 
 var $51=$ps; //@line 4336 "tcc_bootstrap.c"
 var $52=HEAP32[(($51)>>2)]; //@line 4336 "tcc_bootstrap.c"
 var $53=$s; //@line 4336 "tcc_bootstrap.c"
 var $54=(($53+32)|0); //@line 4336 "tcc_bootstrap.c"
 HEAP32[(($54)>>2)]=$52; //@line 4336 "tcc_bootstrap.c"
 var $55=$s; //@line 4337 "tcc_bootstrap.c"
 var $56=$ps; //@line 4337 "tcc_bootstrap.c"
 HEAP32[(($56)>>2)]=$55; //@line 4337 "tcc_bootstrap.c"
 var $57=HEAP32[((10712)>>2)]; //@line 4338 "tcc_bootstrap.c"
 var $58=$s; //@line 4338 "tcc_bootstrap.c"
 var $59=(($58+8)|0); //@line 4338 "tcc_bootstrap.c"
 var $60=$59; //@line 4338 "tcc_bootstrap.c"
 var $61=(($60+4)|0); //@line 4338 "tcc_bootstrap.c"
 var $62=$61; //@line 4338 "tcc_bootstrap.c"
 HEAP32[(($62)>>2)]=$57; //@line 4338 "tcc_bootstrap.c"
 var $63=$s; //@line 4339 "tcc_bootstrap.c"
 var $64=(($63+32)|0); //@line 4339 "tcc_bootstrap.c"
 var $65=HEAP32[(($64)>>2)]; //@line 4339 "tcc_bootstrap.c"
 var $66=($65|0)!=0; //@line 4339 "tcc_bootstrap.c"
 if($66){label=10;break;}else{label=12;break;} //@line 4339 "tcc_bootstrap.c"
 case 10: 
 var $68=$s; //@line 4339 "tcc_bootstrap.c"
 var $69=(($68+32)|0); //@line 4339 "tcc_bootstrap.c"
 var $70=HEAP32[(($69)>>2)]; //@line 4339 "tcc_bootstrap.c"
 var $71=(($70+8)|0); //@line 4339 "tcc_bootstrap.c"
 var $72=$71; //@line 4339 "tcc_bootstrap.c"
 var $73=(($72+4)|0); //@line 4339 "tcc_bootstrap.c"
 var $74=$73; //@line 4339 "tcc_bootstrap.c"
 var $75=HEAP32[(($74)>>2)]; //@line 4339 "tcc_bootstrap.c"
 var $76=$s; //@line 4339 "tcc_bootstrap.c"
 var $77=(($76+8)|0); //@line 4339 "tcc_bootstrap.c"
 var $78=$77; //@line 4339 "tcc_bootstrap.c"
 var $79=(($78+4)|0); //@line 4339 "tcc_bootstrap.c"
 var $80=$79; //@line 4339 "tcc_bootstrap.c"
 var $81=HEAP32[(($80)>>2)]; //@line 4339 "tcc_bootstrap.c"
 var $82=($75|0)==($81|0); //@line 4339 "tcc_bootstrap.c"
 if($82){label=11;break;}else{label=12;break;} //@line 4339 "tcc_bootstrap.c"
 case 11: 
 var $84=$1; //@line 4341 "tcc_bootstrap.c"
 var $85=$84&-1073741825; //@line 4341 "tcc_bootstrap.c"
 var $86=_get_tok_str($85,0); //@line 4341 "tcc_bootstrap.c"
 _tcc_error(9200,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$86,tempVarArgs)); STACKTOP=tempVarArgs; //@line 4341 "tcc_bootstrap.c"
 label=12;break; //@line 4341 "tcc_bootstrap.c"
 case 12: 
 label=13;break; //@line 4342 "tcc_bootstrap.c"
 case 13: 
 var $89=$s; //@line 4343 "tcc_bootstrap.c"
 STACKTOP=sp;return $89; //@line 4343 "tcc_bootstrap.c"
  default: assert(0, "bad label: " + label);
 }

}


function _force_charshort_cast($t){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $bits;
 var $dbt;
 $1=$t;
 var $2=HEAP32[((10616)>>2)]; //@line 5638 "tcc_bootstrap.c"
 var $3=$2&-1073741824; //@line 5638 "tcc_bootstrap.c"
 var $4=($3|0)!=0; //@line 5638 "tcc_bootstrap.c"
 if($4){label=2;break;}else{label=3;break;} //@line 5638 "tcc_bootstrap.c"
 case 2: 
 label=12;break; //@line 5639 "tcc_bootstrap.c"
 case 3: 
 var $7=$1; //@line 5640 "tcc_bootstrap.c"
 var $8=$7&15; //@line 5640 "tcc_bootstrap.c"
 $dbt=$8; //@line 5640 "tcc_bootstrap.c"
 var $9=$dbt; //@line 5641 "tcc_bootstrap.c"
 var $10=($9|0)==1; //@line 5641 "tcc_bootstrap.c"
 if($10){label=4;break;}else{label=5;break;} //@line 5641 "tcc_bootstrap.c"
 case 4: 
 $bits=8; //@line 5642 "tcc_bootstrap.c"
 label=6;break; //@line 5642 "tcc_bootstrap.c"
 case 5: 
 $bits=16; //@line 5644 "tcc_bootstrap.c"
 label=6;break;
 case 6: 
 var $14=$1; //@line 5645 "tcc_bootstrap.c"
 var $15=$14&16; //@line 5645 "tcc_bootstrap.c"
 var $16=($15|0)!=0; //@line 5645 "tcc_bootstrap.c"
 if($16){label=7;break;}else{label=8;break;} //@line 5645 "tcc_bootstrap.c"
 case 7: 
 var $18=$bits; //@line 5646 "tcc_bootstrap.c"
 var $19=1<<$18; //@line 5646 "tcc_bootstrap.c"
 var $20=((($19)-(1))|0); //@line 5646 "tcc_bootstrap.c"
 _vpushi($20); //@line 5646 "tcc_bootstrap.c"
 _gen_op(38); //@line 5647 "tcc_bootstrap.c"
 label=12;break; //@line 5648 "tcc_bootstrap.c"
 case 8: 
 var $22=HEAP32[((9288)>>2)]; //@line 5649 "tcc_bootstrap.c"
 var $23=(($22)|0); //@line 5649 "tcc_bootstrap.c"
 var $24=(($23)|0); //@line 5649 "tcc_bootstrap.c"
 var $25=HEAP32[(($24)>>2)]; //@line 5649 "tcc_bootstrap.c"
 var $26=$25&15; //@line 5649 "tcc_bootstrap.c"
 var $27=($26|0)==4; //@line 5649 "tcc_bootstrap.c"
 if($27){label=9;break;}else{label=10;break;} //@line 5649 "tcc_bootstrap.c"
 case 9: 
 var $29=$bits; //@line 5650 "tcc_bootstrap.c"
 var $30=(((64)-($29))|0); //@line 5650 "tcc_bootstrap.c"
 $bits=$30; //@line 5650 "tcc_bootstrap.c"
 label=11;break; //@line 5650 "tcc_bootstrap.c"
 case 10: 
 var $32=$bits; //@line 5652 "tcc_bootstrap.c"
 var $33=(((32)-($32))|0); //@line 5652 "tcc_bootstrap.c"
 $bits=$33; //@line 5652 "tcc_bootstrap.c"
 label=11;break;
 case 11: 
 var $35=$bits; //@line 5653 "tcc_bootstrap.c"
 _vpushi($35); //@line 5653 "tcc_bootstrap.c"
 _gen_op(1); //@line 5654 "tcc_bootstrap.c"
 var $36=HEAP32[((9288)>>2)]; //@line 5655 "tcc_bootstrap.c"
 var $37=(($36)|0); //@line 5655 "tcc_bootstrap.c"
 var $38=(($37)|0); //@line 5655 "tcc_bootstrap.c"
 var $39=HEAP32[(($38)>>2)]; //@line 5655 "tcc_bootstrap.c"
 var $40=$39&-17; //@line 5655 "tcc_bootstrap.c"
 HEAP32[(($38)>>2)]=$40; //@line 5655 "tcc_bootstrap.c"
 var $41=$bits; //@line 5656 "tcc_bootstrap.c"
 _vpushi($41); //@line 5656 "tcc_bootstrap.c"
 _gen_op(2); //@line 5657 "tcc_bootstrap.c"
 label=12;break;
 case 12: 
 STACKTOP=sp;return; //@line 5657 "tcc_bootstrap.c"
  default: assert(0, "bad label: " + label);
 }

}


function _gen_cvt_ftof($t){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 $1=$t;
 var $2=_gv(2); //@line 10665 "tcc_bootstrap.c"
 STACKTOP=sp;return; //@line 10666 "tcc_bootstrap.c"
}


function _gen_cvt_itof1($t){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 $1=$t;
 var $2=HEAP32[((9288)>>2)]; //@line 5598 "tcc_bootstrap.c"
 var $3=(($2)|0); //@line 5598 "tcc_bootstrap.c"
 var $4=(($3)|0); //@line 5598 "tcc_bootstrap.c"
 var $5=HEAP32[(($4)>>2)]; //@line 5598 "tcc_bootstrap.c"
 var $6=$5&31; //@line 5598 "tcc_bootstrap.c"
 var $7=($6|0)==20; //@line 5598 "tcc_bootstrap.c"
 if($7){label=2;break;}else{label=9;break;} //@line 5598 "tcc_bootstrap.c"
 case 2: 
 var $9=$1; //@line 5600 "tcc_bootstrap.c"
 var $10=($9|0)==8; //@line 5600 "tcc_bootstrap.c"
 if($10){label=3;break;}else{label=4;break;} //@line 5600 "tcc_bootstrap.c"
 case 3: 
 _vpush_global_sym(76632,396); //@line 5601 "tcc_bootstrap.c"
 label=8;break; //@line 5601 "tcc_bootstrap.c"
 case 4: 
 var $13=$1; //@line 5602 "tcc_bootstrap.c"
 var $14=($13|0)==10; //@line 5602 "tcc_bootstrap.c"
 if($14){label=5;break;}else{label=6;break;} //@line 5602 "tcc_bootstrap.c"
 case 5: 
 _vpush_global_sym(76632,398); //@line 5603 "tcc_bootstrap.c"
 label=7;break; //@line 5603 "tcc_bootstrap.c"
 case 6: 
 _vpush_global_sym(76632,397); //@line 5606 "tcc_bootstrap.c"
 label=7;break;
 case 7: 
 label=8;break;
 case 8: 
 _vrott(2); //@line 5607 "tcc_bootstrap.c"
 _gfunc_call(1); //@line 5608 "tcc_bootstrap.c"
 _vpushi(0); //@line 5609 "tcc_bootstrap.c"
 var $19=$1; //@line 5610 "tcc_bootstrap.c"
 var $20=_reg_fret($19); //@line 5610 "tcc_bootstrap.c"
 var $21=(($20)&65535); //@line 5610 "tcc_bootstrap.c"
 var $22=HEAP32[((9288)>>2)]; //@line 5610 "tcc_bootstrap.c"
 var $23=(($22+8)|0); //@line 5610 "tcc_bootstrap.c"
 HEAP16[(($23)>>1)]=$21; //@line 5610 "tcc_bootstrap.c"
 label=10;break; //@line 5611 "tcc_bootstrap.c"
 case 9: 
 var $25=$1; //@line 5612 "tcc_bootstrap.c"
 _gen_cvt_itof($25); //@line 5612 "tcc_bootstrap.c"
 label=10;break;
 case 10: 
 STACKTOP=sp;return; //@line 5614 "tcc_bootstrap.c"
  default: assert(0, "bad label: " + label);
 }

}


function _vpushi($v){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 var $cval=sp;
 $1=$v;
 var $2=$1; //@line 4432 "tcc_bootstrap.c"
 var $3$0=$2;
 var $3$1=((((($2|0)<0))|0)?-1:0);
 var $4=$cval; //@line 4432 "tcc_bootstrap.c"
 var $st$0$0=(($4)|0);
 HEAP32[(($st$0$0)>>2)]=$3$0;
 var $st$1$1=(($4+4)|0);
 HEAP32[(($st$1$1)>>2)]=$3$1;
 _vsetc(11000,48,$cval); //@line 4433 "tcc_bootstrap.c"
 STACKTOP=sp;return; //@line 4434 "tcc_bootstrap.c"
}


function _gen_op($op){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $u;
 var $t1;
 var $t2;
 var $bt1;
 var $bt2;
 var $t;
 var $type1=sp;
 $1=$op;
 label=2;break; //@line 5460 "tcc_bootstrap.c"
 case 2: 
 var $3=HEAP32[((9288)>>2)]; //@line 5462 "tcc_bootstrap.c"
 var $4=((($3)-(40))|0); //@line 5462 "tcc_bootstrap.c"
 var $5=(($4)|0); //@line 5462 "tcc_bootstrap.c"
 var $6=(($5)|0); //@line 5462 "tcc_bootstrap.c"
 var $7=HEAP32[(($6)>>2)]; //@line 5462 "tcc_bootstrap.c"
 $t1=$7; //@line 5462 "tcc_bootstrap.c"
 var $8=HEAP32[((9288)>>2)]; //@line 5463 "tcc_bootstrap.c"
 var $9=(($8)|0); //@line 5463 "tcc_bootstrap.c"
 var $10=(($9)|0); //@line 5463 "tcc_bootstrap.c"
 var $11=(($10)|0); //@line 5463 "tcc_bootstrap.c"
 var $12=HEAP32[(($11)>>2)]; //@line 5463 "tcc_bootstrap.c"
 $t2=$12; //@line 5463 "tcc_bootstrap.c"
 var $13=$t1; //@line 5464 "tcc_bootstrap.c"
 var $14=$13&15; //@line 5464 "tcc_bootstrap.c"
 $bt1=$14; //@line 5464 "tcc_bootstrap.c"
 var $15=$t2; //@line 5465 "tcc_bootstrap.c"
 var $16=$15&15; //@line 5465 "tcc_bootstrap.c"
 $bt2=$16; //@line 5465 "tcc_bootstrap.c"
 var $17=$bt1; //@line 5466 "tcc_bootstrap.c"
 var $18=($17|0)==7; //@line 5466 "tcc_bootstrap.c"
 if($18){label=4;break;}else{label=3;break;} //@line 5466 "tcc_bootstrap.c"
 case 3: 
 var $20=$bt2; //@line 5466 "tcc_bootstrap.c"
 var $21=($20|0)==7; //@line 5466 "tcc_bootstrap.c"
 if($21){label=4;break;}else{label=5;break;} //@line 5466 "tcc_bootstrap.c"
 case 4: 
 _tcc_error(8472,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs; //@line 5467 "tcc_bootstrap.c"
 label=116;break; //@line 5468 "tcc_bootstrap.c"
 case 5: 
 var $24=$bt1; //@line 5468 "tcc_bootstrap.c"
 var $25=($24|0)==6; //@line 5468 "tcc_bootstrap.c"
 if($25){label=7;break;}else{label=6;break;} //@line 5468 "tcc_bootstrap.c"
 case 6: 
 var $27=$bt2; //@line 5468 "tcc_bootstrap.c"
 var $28=($27|0)==6; //@line 5468 "tcc_bootstrap.c"
 if($28){label=7;break;}else{label=12;break;} //@line 5468 "tcc_bootstrap.c"
 case 7: 
 var $30=$bt2; //@line 5469 "tcc_bootstrap.c"
 var $31=($30|0)==6; //@line 5469 "tcc_bootstrap.c"
 if($31){label=8;break;}else{label=9;break;} //@line 5469 "tcc_bootstrap.c"
 case 8: 
 var $33=HEAP32[((9288)>>2)]; //@line 5470 "tcc_bootstrap.c"
 var $34=(($33)|0); //@line 5470 "tcc_bootstrap.c"
 _mk_pointer($34); //@line 5470 "tcc_bootstrap.c"
 _gaddrof(); //@line 5471 "tcc_bootstrap.c"
 label=9;break; //@line 5472 "tcc_bootstrap.c"
 case 9: 
 var $36=$bt1; //@line 5473 "tcc_bootstrap.c"
 var $37=($36|0)==6; //@line 5473 "tcc_bootstrap.c"
 if($37){label=10;break;}else{label=11;break;} //@line 5473 "tcc_bootstrap.c"
 case 10: 
 _vswap(); //@line 5474 "tcc_bootstrap.c"
 var $39=HEAP32[((9288)>>2)]; //@line 5475 "tcc_bootstrap.c"
 var $40=(($39)|0); //@line 5475 "tcc_bootstrap.c"
 _mk_pointer($40); //@line 5475 "tcc_bootstrap.c"
 _gaddrof(); //@line 5476 "tcc_bootstrap.c"
 _vswap(); //@line 5477 "tcc_bootstrap.c"
 label=11;break; //@line 5478 "tcc_bootstrap.c"
 case 11: 
 label=2;break; //@line 5479 "tcc_bootstrap.c"
 case 12: 
 var $43=$bt1; //@line 5480 "tcc_bootstrap.c"
 var $44=($43|0)==5; //@line 5480 "tcc_bootstrap.c"
 if($44){label=14;break;}else{label=13;break;} //@line 5480 "tcc_bootstrap.c"
 case 13: 
 var $46=$bt2; //@line 5480 "tcc_bootstrap.c"
 var $47=($46|0)==5; //@line 5480 "tcc_bootstrap.c"
 if($47){label=14;break;}else{label=39;break;} //@line 5480 "tcc_bootstrap.c"
 case 14: 
 var $49=$1; //@line 5481 "tcc_bootstrap.c"
 var $50=($49|0)>=146; //@line 5481 "tcc_bootstrap.c"
 if($50){label=15;break;}else{label=17;break;} //@line 5481 "tcc_bootstrap.c"
 case 15: 
 var $52=$1; //@line 5481 "tcc_bootstrap.c"
 var $53=($52|0)<=161; //@line 5481 "tcc_bootstrap.c"
 if($53){label=16;break;}else{label=17;break;} //@line 5481 "tcc_bootstrap.c"
 case 16: 
 var $55=HEAP32[((9288)>>2)]; //@line 5482 "tcc_bootstrap.c"
 var $56=((($55)-(40))|0); //@line 5482 "tcc_bootstrap.c"
 var $57=HEAP32[((9288)>>2)]; //@line 5482 "tcc_bootstrap.c"
 var $58=$1; //@line 5482 "tcc_bootstrap.c"
 _check_comparison_pointer_types($56,$57,$58); //@line 5482 "tcc_bootstrap.c"
 $t=19; //@line 5483 "tcc_bootstrap.c"
 label=77;break; //@line 5484 "tcc_bootstrap.c"
 case 17: 
 var $60=$bt1; //@line 5486 "tcc_bootstrap.c"
 var $61=($60|0)==5; //@line 5486 "tcc_bootstrap.c"
 if($61){label=18;break;}else{label=25;break;} //@line 5486 "tcc_bootstrap.c"
 case 18: 
 var $63=$bt2; //@line 5486 "tcc_bootstrap.c"
 var $64=($63|0)==5; //@line 5486 "tcc_bootstrap.c"
 if($64){label=19;break;}else{label=25;break;} //@line 5486 "tcc_bootstrap.c"
 case 19: 
 var $66=$1; //@line 5487 "tcc_bootstrap.c"
 var $67=($66|0)!=45; //@line 5487 "tcc_bootstrap.c"
 if($67){label=20;break;}else{label=21;break;} //@line 5487 "tcc_bootstrap.c"
 case 20: 
 _tcc_error(8440,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs; //@line 5488 "tcc_bootstrap.c"
 label=21;break; //@line 5488 "tcc_bootstrap.c"
 case 21: 
 var $70=HEAP32[((9288)>>2)]; //@line 5489 "tcc_bootstrap.c"
 var $71=((($70)-(40))|0); //@line 5489 "tcc_bootstrap.c"
 var $72=HEAP32[((9288)>>2)]; //@line 5489 "tcc_bootstrap.c"
 var $73=$1; //@line 5489 "tcc_bootstrap.c"
 _check_comparison_pointer_types($71,$72,$73); //@line 5489 "tcc_bootstrap.c"
 var $74=HEAP32[((9288)>>2)]; //@line 5490 "tcc_bootstrap.c"
 var $75=((($74)-(40))|0); //@line 5490 "tcc_bootstrap.c"
 var $76=(($75)|0); //@line 5490 "tcc_bootstrap.c"
 var $77=(($76)|0); //@line 5490 "tcc_bootstrap.c"
 var $78=HEAP32[(($77)>>2)]; //@line 5490 "tcc_bootstrap.c"
 var $79=$78&1024; //@line 5490 "tcc_bootstrap.c"
 var $80=($79|0)!=0; //@line 5490 "tcc_bootstrap.c"
 if($80){label=22;break;}else{label=23;break;} //@line 5490 "tcc_bootstrap.c"
 case 22: 
 var $82=HEAP32[((9288)>>2)]; //@line 5491 "tcc_bootstrap.c"
 var $83=((($82)-(40))|0); //@line 5491 "tcc_bootstrap.c"
 var $84=(($83)|0); //@line 5491 "tcc_bootstrap.c"
 _vla_runtime_pointed_size($84); //@line 5491 "tcc_bootstrap.c"
 label=24;break; //@line 5492 "tcc_bootstrap.c"
 case 23: 
 var $86=HEAP32[((9288)>>2)]; //@line 5493 "tcc_bootstrap.c"
 var $87=((($86)-(40))|0); //@line 5493 "tcc_bootstrap.c"
 var $88=(($87)|0); //@line 5493 "tcc_bootstrap.c"
 var $89=_pointed_size($88); //@line 5493 "tcc_bootstrap.c"
 _vpushi($89); //@line 5493 "tcc_bootstrap.c"
 label=24;break;
 case 24: 
 _vrott(3); //@line 5495 "tcc_bootstrap.c"
 var $91=$1; //@line 5496 "tcc_bootstrap.c"
 _gen_opic($91); //@line 5496 "tcc_bootstrap.c"
 var $92=HEAP32[((10560)>>2)]; //@line 5497 "tcc_bootstrap.c"
 var $93=HEAP32[((9288)>>2)]; //@line 5497 "tcc_bootstrap.c"
 var $94=(($93)|0); //@line 5497 "tcc_bootstrap.c"
 var $95=(($94)|0); //@line 5497 "tcc_bootstrap.c"
 HEAP32[(($95)>>2)]=$92; //@line 5497 "tcc_bootstrap.c"
 _vswap(); //@line 5498 "tcc_bootstrap.c"
 _gen_op(178); //@line 5499 "tcc_bootstrap.c"
 label=38;break; //@line 5500 "tcc_bootstrap.c"
 case 25: 
 var $97=$1; //@line 5501 "tcc_bootstrap.c"
 var $98=($97|0)!=45; //@line 5501 "tcc_bootstrap.c"
 if($98){label=26;break;}else{label=28;break;} //@line 5501 "tcc_bootstrap.c"
 case 26: 
 var $100=$1; //@line 5501 "tcc_bootstrap.c"
 var $101=($100|0)!=43; //@line 5501 "tcc_bootstrap.c"
 if($101){label=27;break;}else{label=28;break;} //@line 5501 "tcc_bootstrap.c"
 case 27: 
 _tcc_error(8440,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs; //@line 5502 "tcc_bootstrap.c"
 label=28;break; //@line 5502 "tcc_bootstrap.c"
 case 28: 
 var $104=$bt2; //@line 5503 "tcc_bootstrap.c"
 var $105=($104|0)==5; //@line 5503 "tcc_bootstrap.c"
 if($105){label=29;break;}else{label=30;break;} //@line 5503 "tcc_bootstrap.c"
 case 29: 
 _vswap(); //@line 5504 "tcc_bootstrap.c"
 var $107=$t1; //@line 5505 "tcc_bootstrap.c"
 $t=$107; //@line 5505 "tcc_bootstrap.c"
 var $108=$t2; //@line 5505 "tcc_bootstrap.c"
 $t1=$108; //@line 5505 "tcc_bootstrap.c"
 var $109=$t; //@line 5505 "tcc_bootstrap.c"
 $t2=$109; //@line 5505 "tcc_bootstrap.c"
 label=30;break; //@line 5506 "tcc_bootstrap.c"
 case 30: 
 var $111=HEAP32[((9288)>>2)]; //@line 5507 "tcc_bootstrap.c"
 var $112=(($111)|0); //@line 5507 "tcc_bootstrap.c"
 var $113=(($112)|0); //@line 5507 "tcc_bootstrap.c"
 var $114=(($113)|0); //@line 5507 "tcc_bootstrap.c"
 var $115=HEAP32[(($114)>>2)]; //@line 5507 "tcc_bootstrap.c"
 var $116=$115&15; //@line 5507 "tcc_bootstrap.c"
 var $117=($116|0)==4; //@line 5507 "tcc_bootstrap.c"
 if($117){label=31;break;}else{label=32;break;} //@line 5507 "tcc_bootstrap.c"
 case 31: 
 _gen_cast_s(3); //@line 5508 "tcc_bootstrap.c"
 label=32;break; //@line 5508 "tcc_bootstrap.c"
 case 32: 
 var $120=HEAP32[((9288)>>2)]; //@line 5509 "tcc_bootstrap.c"
 var $121=((($120)-(40))|0); //@line 5509 "tcc_bootstrap.c"
 var $122=(($121)|0); //@line 5509 "tcc_bootstrap.c"
 var $123=$type1; //@line 5509 "tcc_bootstrap.c"
 var $124=$122; //@line 5509 "tcc_bootstrap.c"
 assert(8 % 1 === 0);HEAP32[(($123)>>2)]=HEAP32[(($124)>>2)];HEAP32[((($123)+(4))>>2)]=HEAP32[((($124)+(4))>>2)]; //@line 5509 "tcc_bootstrap.c"
 var $125=(($type1)|0); //@line 5510 "tcc_bootstrap.c"
 var $126=HEAP32[(($125)>>2)]; //@line 5510 "tcc_bootstrap.c"
 var $127=$126&-65; //@line 5510 "tcc_bootstrap.c"
 HEAP32[(($125)>>2)]=$127; //@line 5510 "tcc_bootstrap.c"
 var $128=HEAP32[((9288)>>2)]; //@line 5511 "tcc_bootstrap.c"
 var $129=((($128)-(40))|0); //@line 5511 "tcc_bootstrap.c"
 var $130=(($129)|0); //@line 5511 "tcc_bootstrap.c"
 var $131=(($130)|0); //@line 5511 "tcc_bootstrap.c"
 var $132=HEAP32[(($131)>>2)]; //@line 5511 "tcc_bootstrap.c"
 var $133=$132&1024; //@line 5511 "tcc_bootstrap.c"
 var $134=($133|0)!=0; //@line 5511 "tcc_bootstrap.c"
 if($134){label=33;break;}else{label=34;break;} //@line 5511 "tcc_bootstrap.c"
 case 33: 
 var $136=HEAP32[((9288)>>2)]; //@line 5512 "tcc_bootstrap.c"
 var $137=((($136)-(40))|0); //@line 5512 "tcc_bootstrap.c"
 var $138=(($137)|0); //@line 5512 "tcc_bootstrap.c"
 _vla_runtime_pointed_size($138); //@line 5512 "tcc_bootstrap.c"
 label=37;break; //@line 5512 "tcc_bootstrap.c"
 case 34: 
 var $140=HEAP32[((9288)>>2)]; //@line 5514 "tcc_bootstrap.c"
 var $141=((($140)-(40))|0); //@line 5514 "tcc_bootstrap.c"
 var $142=(($141)|0); //@line 5514 "tcc_bootstrap.c"
 var $143=_pointed_size($142); //@line 5514 "tcc_bootstrap.c"
 $u=$143; //@line 5514 "tcc_bootstrap.c"
 var $144=$u; //@line 5515 "tcc_bootstrap.c"
 var $145=($144|0)<0; //@line 5515 "tcc_bootstrap.c"
 if($145){label=35;break;}else{label=36;break;} //@line 5515 "tcc_bootstrap.c"
 case 35: 
 _tcc_error(8408,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs; //@line 5516 "tcc_bootstrap.c"
 label=36;break; //@line 5516 "tcc_bootstrap.c"
 case 36: 
 var $148=$u; //@line 5517 "tcc_bootstrap.c"
 _vpushi($148); //@line 5517 "tcc_bootstrap.c"
 label=37;break;
 case 37: 
 _gen_op(42); //@line 5519 "tcc_bootstrap.c"
 var $150=$1; //@line 5521 "tcc_bootstrap.c"
 _gen_opic($150); //@line 5521 "tcc_bootstrap.c"
 var $151=HEAP32[((9288)>>2)]; //@line 5523 "tcc_bootstrap.c"
 var $152=(($151)|0); //@line 5523 "tcc_bootstrap.c"
 var $153=$152; //@line 5523 "tcc_bootstrap.c"
 var $154=$type1; //@line 5523 "tcc_bootstrap.c"
 assert(8 % 1 === 0);HEAP32[(($153)>>2)]=HEAP32[(($154)>>2)];HEAP32[((($153)+(4))>>2)]=HEAP32[((($154)+(4))>>2)]; //@line 5523 "tcc_bootstrap.c"
 label=38;break;
 case 38: 
 label=114;break; //@line 5525 "tcc_bootstrap.c"
 case 39: 
 var $157=$bt1; //@line 5525 "tcc_bootstrap.c"
 var $158=_is_float($157); //@line 5525 "tcc_bootstrap.c"
 var $159=($158|0)!=0; //@line 5525 "tcc_bootstrap.c"
 if($159){label=41;break;}else{label=40;break;} //@line 5525 "tcc_bootstrap.c"
 case 40: 
 var $161=$bt2; //@line 5525 "tcc_bootstrap.c"
 var $162=_is_float($161); //@line 5525 "tcc_bootstrap.c"
 var $163=($162|0)!=0; //@line 5525 "tcc_bootstrap.c"
 if($163){label=41;break;}else{label=57;break;} //@line 5525 "tcc_bootstrap.c"
 case 41: 
 var $165=$bt1; //@line 5526 "tcc_bootstrap.c"
 var $166=($165|0)==10; //@line 5526 "tcc_bootstrap.c"
 if($166){label=43;break;}else{label=42;break;} //@line 5526 "tcc_bootstrap.c"
 case 42: 
 var $168=$bt2; //@line 5526 "tcc_bootstrap.c"
 var $169=($168|0)==10; //@line 5526 "tcc_bootstrap.c"
 if($169){label=43;break;}else{label=44;break;} //@line 5526 "tcc_bootstrap.c"
 case 43: 
 $t=10; //@line 5527 "tcc_bootstrap.c"
 label=49;break; //@line 5528 "tcc_bootstrap.c"
 case 44: 
 var $172=$bt1; //@line 5528 "tcc_bootstrap.c"
 var $173=($172|0)==9; //@line 5528 "tcc_bootstrap.c"
 if($173){label=46;break;}else{label=45;break;} //@line 5528 "tcc_bootstrap.c"
 case 45: 
 var $175=$bt2; //@line 5528 "tcc_bootstrap.c"
 var $176=($175|0)==9; //@line 5528 "tcc_bootstrap.c"
 if($176){label=46;break;}else{label=47;break;} //@line 5528 "tcc_bootstrap.c"
 case 46: 
 $t=9; //@line 5529 "tcc_bootstrap.c"
 label=48;break; //@line 5530 "tcc_bootstrap.c"
 case 47: 
 $t=8; //@line 5531 "tcc_bootstrap.c"
 label=48;break;
 case 48: 
 label=49;break;
 case 49: 
 var $181=$1; //@line 5533 "tcc_bootstrap.c"
 var $182=($181|0)!=43; //@line 5533 "tcc_bootstrap.c"
 if($182){label=50;break;}else{label=56;break;} //@line 5533 "tcc_bootstrap.c"
 case 50: 
 var $184=$1; //@line 5533 "tcc_bootstrap.c"
 var $185=($184|0)!=45; //@line 5533 "tcc_bootstrap.c"
 if($185){label=51;break;}else{label=56;break;} //@line 5533 "tcc_bootstrap.c"
 case 51: 
 var $187=$1; //@line 5533 "tcc_bootstrap.c"
 var $188=($187|0)!=42; //@line 5533 "tcc_bootstrap.c"
 if($188){label=52;break;}else{label=56;break;} //@line 5533 "tcc_bootstrap.c"
 case 52: 
 var $190=$1; //@line 5533 "tcc_bootstrap.c"
 var $191=($190|0)!=47; //@line 5533 "tcc_bootstrap.c"
 if($191){label=53;break;}else{label=56;break;} //@line 5533 "tcc_bootstrap.c"
 case 53: 
 var $193=$1; //@line 5533 "tcc_bootstrap.c"
 var $194=($193|0)<146; //@line 5533 "tcc_bootstrap.c"
 if($194){label=55;break;}else{label=54;break;} //@line 5533 "tcc_bootstrap.c"
 case 54: 
 var $196=$1; //@line 5533 "tcc_bootstrap.c"
 var $197=($196|0)>159; //@line 5533 "tcc_bootstrap.c"
 if($197){label=55;break;}else{label=56;break;} //@line 5533 "tcc_bootstrap.c"
 case 55: 
 _tcc_error(8352,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs; //@line 5535 "tcc_bootstrap.c"
 label=56;break; //@line 5535 "tcc_bootstrap.c"
 case 56: 
 label=77;break; //@line 5536 "tcc_bootstrap.c"
 case 57: 
 var $201=$1; //@line 5537 "tcc_bootstrap.c"
 var $202=($201|0)==201; //@line 5537 "tcc_bootstrap.c"
 if($202){label=60;break;}else{label=58;break;} //@line 5537 "tcc_bootstrap.c"
 case 58: 
 var $204=$1; //@line 5537 "tcc_bootstrap.c"
 var $205=($204|0)==2; //@line 5537 "tcc_bootstrap.c"
 if($205){label=60;break;}else{label=59;break;} //@line 5537 "tcc_bootstrap.c"
 case 59: 
 var $207=$1; //@line 5537 "tcc_bootstrap.c"
 var $208=($207|0)==1; //@line 5537 "tcc_bootstrap.c"
 if($208){label=60;break;}else{label=63;break;} //@line 5537 "tcc_bootstrap.c"
 case 60: 
 var $210=$bt1; //@line 5538 "tcc_bootstrap.c"
 var $211=($210|0)==4; //@line 5538 "tcc_bootstrap.c"
 var $212=($211?4:3); //@line 5538 "tcc_bootstrap.c"
 $t=$212; //@line 5538 "tcc_bootstrap.c"
 var $213=$t1; //@line 5539 "tcc_bootstrap.c"
 var $214=$213&159; //@line 5539 "tcc_bootstrap.c"
 var $215=$t; //@line 5539 "tcc_bootstrap.c"
 var $216=$215|16; //@line 5539 "tcc_bootstrap.c"
 var $217=($214|0)==($216|0); //@line 5539 "tcc_bootstrap.c"
 if($217){label=61;break;}else{label=62;break;} //@line 5539 "tcc_bootstrap.c"
 case 61: 
 var $219=$t; //@line 5540 "tcc_bootstrap.c"
 var $220=$219|16; //@line 5540 "tcc_bootstrap.c"
 $t=$220; //@line 5540 "tcc_bootstrap.c"
 label=62;break; //@line 5540 "tcc_bootstrap.c"
 case 62: 
 var $222=$t1; //@line 5541 "tcc_bootstrap.c"
 var $223=2048&$222; //@line 5541 "tcc_bootstrap.c"
 var $224=$t; //@line 5541 "tcc_bootstrap.c"
 var $225=$224|$223; //@line 5541 "tcc_bootstrap.c"
 $t=$225; //@line 5541 "tcc_bootstrap.c"
 label=77;break; //@line 5542 "tcc_bootstrap.c"
 case 63: 
 var $227=$bt1; //@line 5543 "tcc_bootstrap.c"
 var $228=($227|0)==4; //@line 5543 "tcc_bootstrap.c"
 if($228){label=65;break;}else{label=64;break;} //@line 5543 "tcc_bootstrap.c"
 case 64: 
 var $230=$bt2; //@line 5543 "tcc_bootstrap.c"
 var $231=($230|0)==4; //@line 5543 "tcc_bootstrap.c"
 if($231){label=65;break;}else{label=73;break;} //@line 5543 "tcc_bootstrap.c"
 case 65: 
 $t=2052; //@line 5544 "tcc_bootstrap.c"
 var $233=$bt1; //@line 5545 "tcc_bootstrap.c"
 var $234=($233|0)==4; //@line 5545 "tcc_bootstrap.c"
 if($234){label=66;break;}else{label=67;break;} //@line 5545 "tcc_bootstrap.c"
 case 66: 
 var $236=$t1; //@line 5546 "tcc_bootstrap.c"
 var $237=$t; //@line 5546 "tcc_bootstrap.c"
 var $238=$237&$236; //@line 5546 "tcc_bootstrap.c"
 $t=$238; //@line 5546 "tcc_bootstrap.c"
 label=67;break; //@line 5546 "tcc_bootstrap.c"
 case 67: 
 var $240=$bt2; //@line 5547 "tcc_bootstrap.c"
 var $241=($240|0)==4; //@line 5547 "tcc_bootstrap.c"
 if($241){label=68;break;}else{label=69;break;} //@line 5547 "tcc_bootstrap.c"
 case 68: 
 var $243=$t2; //@line 5548 "tcc_bootstrap.c"
 var $244=$t; //@line 5548 "tcc_bootstrap.c"
 var $245=$244&$243; //@line 5548 "tcc_bootstrap.c"
 $t=$245; //@line 5548 "tcc_bootstrap.c"
 label=69;break; //@line 5548 "tcc_bootstrap.c"
 case 69: 
 var $247=$t1; //@line 5549 "tcc_bootstrap.c"
 var $248=$247&159; //@line 5549 "tcc_bootstrap.c"
 var $249=($248|0)==20; //@line 5549 "tcc_bootstrap.c"
 if($249){label=71;break;}else{label=70;break;} //@line 5549 "tcc_bootstrap.c"
 case 70: 
 var $251=$t2; //@line 5549 "tcc_bootstrap.c"
 var $252=$251&159; //@line 5549 "tcc_bootstrap.c"
 var $253=($252|0)==20; //@line 5549 "tcc_bootstrap.c"
 if($253){label=71;break;}else{label=72;break;} //@line 5549 "tcc_bootstrap.c"
 case 71: 
 var $255=$t; //@line 5551 "tcc_bootstrap.c"
 var $256=$255|16; //@line 5551 "tcc_bootstrap.c"
 $t=$256; //@line 5551 "tcc_bootstrap.c"
 label=72;break; //@line 5551 "tcc_bootstrap.c"
 case 72: 
 label=77;break; //@line 5552 "tcc_bootstrap.c"
 case 73: 
 var $259=$t1; //@line 5554 "tcc_bootstrap.c"
 var $260=$t2; //@line 5554 "tcc_bootstrap.c"
 var $261=$259|$260; //@line 5554 "tcc_bootstrap.c"
 var $262=2048&$261; //@line 5554 "tcc_bootstrap.c"
 var $263=3|$262; //@line 5554 "tcc_bootstrap.c"
 $t=$263; //@line 5554 "tcc_bootstrap.c"
 var $264=$t1; //@line 5555 "tcc_bootstrap.c"
 var $265=$264&159; //@line 5555 "tcc_bootstrap.c"
 var $266=($265|0)==19; //@line 5555 "tcc_bootstrap.c"
 if($266){label=75;break;}else{label=74;break;} //@line 5555 "tcc_bootstrap.c"
 case 74: 
 var $268=$t2; //@line 5555 "tcc_bootstrap.c"
 var $269=$268&159; //@line 5555 "tcc_bootstrap.c"
 var $270=($269|0)==19; //@line 5555 "tcc_bootstrap.c"
 if($270){label=75;break;}else{label=76;break;} //@line 5555 "tcc_bootstrap.c"
 case 75: 
 var $272=$t; //@line 5557 "tcc_bootstrap.c"
 var $273=$272|16; //@line 5557 "tcc_bootstrap.c"
 $t=$273; //@line 5557 "tcc_bootstrap.c"
 label=76;break; //@line 5557 "tcc_bootstrap.c"
 case 76: 
 label=77;break; //@line 5557 "tcc_bootstrap.c"
 case 77: 
 var $276=$t; //@line 5559 "tcc_bootstrap.c"
 var $277=$276&16; //@line 5559 "tcc_bootstrap.c"
 var $278=($277|0)!=0; //@line 5559 "tcc_bootstrap.c"
 if($278){label=78;break;}else{label=99;break;} //@line 5559 "tcc_bootstrap.c"
 case 78: 
 var $280=$1; //@line 5560 "tcc_bootstrap.c"
 var $281=($280|0)==2; //@line 5560 "tcc_bootstrap.c"
 if($281){label=79;break;}else{label=80;break;} //@line 5560 "tcc_bootstrap.c"
 case 79: 
 $1=201; //@line 5561 "tcc_bootstrap.c"
 label=98;break; //@line 5561 "tcc_bootstrap.c"
 case 80: 
 var $284=$1; //@line 5562 "tcc_bootstrap.c"
 var $285=($284|0)==47; //@line 5562 "tcc_bootstrap.c"
 if($285){label=81;break;}else{label=82;break;} //@line 5562 "tcc_bootstrap.c"
 case 81: 
 $1=176; //@line 5563 "tcc_bootstrap.c"
 label=97;break; //@line 5563 "tcc_bootstrap.c"
 case 82: 
 var $288=$1; //@line 5564 "tcc_bootstrap.c"
 var $289=($288|0)==37; //@line 5564 "tcc_bootstrap.c"
 if($289){label=83;break;}else{label=84;break;} //@line 5564 "tcc_bootstrap.c"
 case 83: 
 $1=177; //@line 5565 "tcc_bootstrap.c"
 label=96;break; //@line 5565 "tcc_bootstrap.c"
 case 84: 
 var $292=$1; //@line 5566 "tcc_bootstrap.c"
 var $293=($292|0)==156; //@line 5566 "tcc_bootstrap.c"
 if($293){label=85;break;}else{label=86;break;} //@line 5566 "tcc_bootstrap.c"
 case 85: 
 $1=146; //@line 5567 "tcc_bootstrap.c"
 label=95;break; //@line 5567 "tcc_bootstrap.c"
 case 86: 
 var $296=$1; //@line 5568 "tcc_bootstrap.c"
 var $297=($296|0)==159; //@line 5568 "tcc_bootstrap.c"
 if($297){label=87;break;}else{label=88;break;} //@line 5568 "tcc_bootstrap.c"
 case 87: 
 $1=151; //@line 5569 "tcc_bootstrap.c"
 label=94;break; //@line 5569 "tcc_bootstrap.c"
 case 88: 
 var $300=$1; //@line 5570 "tcc_bootstrap.c"
 var $301=($300|0)==158; //@line 5570 "tcc_bootstrap.c"
 if($301){label=89;break;}else{label=90;break;} //@line 5570 "tcc_bootstrap.c"
 case 89: 
 $1=150; //@line 5571 "tcc_bootstrap.c"
 label=93;break; //@line 5571 "tcc_bootstrap.c"
 case 90: 
 var $304=$1; //@line 5572 "tcc_bootstrap.c"
 var $305=($304|0)==157; //@line 5572 "tcc_bootstrap.c"
 if($305){label=91;break;}else{label=92;break;} //@line 5572 "tcc_bootstrap.c"
 case 91: 
 $1=147; //@line 5573 "tcc_bootstrap.c"
 label=92;break; //@line 5573 "tcc_bootstrap.c"
 case 92: 
 label=93;break;
 case 93: 
 label=94;break;
 case 94: 
 label=95;break;
 case 95: 
 label=96;break;
 case 96: 
 label=97;break;
 case 97: 
 label=98;break;
 case 98: 
 label=99;break; //@line 5574 "tcc_bootstrap.c"
 case 99: 
 _vswap(); //@line 5575 "tcc_bootstrap.c"
 var $315=$t; //@line 5576 "tcc_bootstrap.c"
 var $316=(($type1)|0); //@line 5576 "tcc_bootstrap.c"
 HEAP32[(($316)>>2)]=$315; //@line 5576 "tcc_bootstrap.c"
 var $317=(($type1+4)|0); //@line 5577 "tcc_bootstrap.c"
 HEAP32[(($317)>>2)]=0; //@line 5577 "tcc_bootstrap.c"
 _gen_cast($type1); //@line 5578 "tcc_bootstrap.c"
 _vswap(); //@line 5579 "tcc_bootstrap.c"
 var $318=$1; //@line 5580 "tcc_bootstrap.c"
 var $319=($318|0)==201; //@line 5580 "tcc_bootstrap.c"
 if($319){label=102;break;}else{label=100;break;} //@line 5580 "tcc_bootstrap.c"
 case 100: 
 var $321=$1; //@line 5580 "tcc_bootstrap.c"
 var $322=($321|0)==2; //@line 5580 "tcc_bootstrap.c"
 if($322){label=102;break;}else{label=101;break;} //@line 5580 "tcc_bootstrap.c"
 case 101: 
 var $324=$1; //@line 5580 "tcc_bootstrap.c"
 var $325=($324|0)==1; //@line 5580 "tcc_bootstrap.c"
 if($325){label=102;break;}else{label=103;break;} //@line 5580 "tcc_bootstrap.c"
 case 102: 
 var $327=(($type1)|0); //@line 5581 "tcc_bootstrap.c"
 HEAP32[(($327)>>2)]=3; //@line 5581 "tcc_bootstrap.c"
 label=103;break; //@line 5581 "tcc_bootstrap.c"
 case 103: 
 _gen_cast($type1); //@line 5582 "tcc_bootstrap.c"
 var $329=$t; //@line 5583 "tcc_bootstrap.c"
 var $330=_is_float($329); //@line 5583 "tcc_bootstrap.c"
 var $331=($330|0)!=0; //@line 5583 "tcc_bootstrap.c"
 if($331){label=104;break;}else{label=105;break;} //@line 5583 "tcc_bootstrap.c"
 case 104: 
 var $333=$1; //@line 5584 "tcc_bootstrap.c"
 _gen_opif($333); //@line 5584 "tcc_bootstrap.c"
 label=106;break; //@line 5584 "tcc_bootstrap.c"
 case 105: 
 var $335=$1; //@line 5586 "tcc_bootstrap.c"
 _gen_opic($335); //@line 5586 "tcc_bootstrap.c"
 label=106;break;
 case 106: 
 var $337=$1; //@line 5587 "tcc_bootstrap.c"
 var $338=($337|0)>=146; //@line 5587 "tcc_bootstrap.c"
 if($338){label=107;break;}else{label=109;break;} //@line 5587 "tcc_bootstrap.c"
 case 107: 
 var $340=$1; //@line 5587 "tcc_bootstrap.c"
 var $341=($340|0)<=159; //@line 5587 "tcc_bootstrap.c"
 if($341){label=108;break;}else{label=109;break;} //@line 5587 "tcc_bootstrap.c"
 case 108: 
 var $343=HEAP32[((9288)>>2)]; //@line 5588 "tcc_bootstrap.c"
 var $344=(($343)|0); //@line 5588 "tcc_bootstrap.c"
 var $345=(($344)|0); //@line 5588 "tcc_bootstrap.c"
 HEAP32[(($345)>>2)]=3; //@line 5588 "tcc_bootstrap.c"
 label=110;break; //@line 5589 "tcc_bootstrap.c"
 case 109: 
 var $347=$t; //@line 5590 "tcc_bootstrap.c"
 var $348=HEAP32[((9288)>>2)]; //@line 5590 "tcc_bootstrap.c"
 var $349=(($348)|0); //@line 5590 "tcc_bootstrap.c"
 var $350=(($349)|0); //@line 5590 "tcc_bootstrap.c"
 HEAP32[(($350)>>2)]=$347; //@line 5590 "tcc_bootstrap.c"
 label=110;break;
 case 110: 
 label=111;break;
 case 111: 
 label=112;break;
 case 112: 
 label=113;break;
 case 113: 
 label=114;break;
 case 114: 
 label=115;break;
 case 115: 
 label=116;break;
 case 116: 
 var $358=HEAP32[((9288)>>2)]; //@line 5593 "tcc_bootstrap.c"
 var $359=(($358+8)|0); //@line 5593 "tcc_bootstrap.c"
 var $360=HEAP16[(($359)>>1)]; //@line 5593 "tcc_bootstrap.c"
 var $361=($360&65535); //@line 5593 "tcc_bootstrap.c"
 var $362=$361&256; //@line 5593 "tcc_bootstrap.c"
 var $363=($362|0)!=0; //@line 5593 "tcc_bootstrap.c"
 if($363){label=117;break;}else{label=118;break;} //@line 5593 "tcc_bootstrap.c"
 case 117: 
 var $365=HEAP32[((9288)>>2)]; //@line 5594 "tcc_bootstrap.c"
 var $366=(($365)|0); //@line 5594 "tcc_bootstrap.c"
 var $367=(($366)|0); //@line 5594 "tcc_bootstrap.c"
 var $368=HEAP32[(($367)>>2)]; //@line 5594 "tcc_bootstrap.c"
 var $369=$368&15; //@line 5594 "tcc_bootstrap.c"
 var $370=_is_float($369); //@line 5594 "tcc_bootstrap.c"
 var $371=($370|0)!=0; //@line 5594 "tcc_bootstrap.c"
 var $372=($371?2:1); //@line 5594 "tcc_bootstrap.c"
 var $373=_gv($372); //@line 5594 "tcc_bootstrap.c"
 label=118;break; //@line 5594 "tcc_bootstrap.c"
 case 118: 
 STACKTOP=sp;return; //@line 5595 "tcc_bootstrap.c"
  default: assert(0, "bad label: " + label);
 }

}


function _gen_cvt_ftoi1($t){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $st;
 $1=$t;
 var $2=$1; //@line 5618 "tcc_bootstrap.c"
 var $3=($2|0)==20; //@line 5618 "tcc_bootstrap.c"
 if($3){label=2;break;}else{label=9;break;} //@line 5618 "tcc_bootstrap.c"
 case 2: 
 var $5=HEAP32[((9288)>>2)]; //@line 5619 "tcc_bootstrap.c"
 var $6=(($5)|0); //@line 5619 "tcc_bootstrap.c"
 var $7=(($6)|0); //@line 5619 "tcc_bootstrap.c"
 var $8=HEAP32[(($7)>>2)]; //@line 5619 "tcc_bootstrap.c"
 var $9=$8&15; //@line 5619 "tcc_bootstrap.c"
 $st=$9; //@line 5619 "tcc_bootstrap.c"
 var $10=$st; //@line 5620 "tcc_bootstrap.c"
 var $11=($10|0)==8; //@line 5620 "tcc_bootstrap.c"
 if($11){label=3;break;}else{label=4;break;} //@line 5620 "tcc_bootstrap.c"
 case 3: 
 _vpush_global_sym(76632,400); //@line 5621 "tcc_bootstrap.c"
 label=8;break; //@line 5621 "tcc_bootstrap.c"
 case 4: 
 var $14=$st; //@line 5622 "tcc_bootstrap.c"
 var $15=($14|0)==10; //@line 5622 "tcc_bootstrap.c"
 if($15){label=5;break;}else{label=6;break;} //@line 5622 "tcc_bootstrap.c"
 case 5: 
 _vpush_global_sym(76632,399); //@line 5623 "tcc_bootstrap.c"
 label=7;break; //@line 5623 "tcc_bootstrap.c"
 case 6: 
 _vpush_global_sym(76632,401); //@line 5625 "tcc_bootstrap.c"
 label=7;break;
 case 7: 
 label=8;break;
 case 8: 
 _vrott(2); //@line 5626 "tcc_bootstrap.c"
 _gfunc_call(1); //@line 5627 "tcc_bootstrap.c"
 _vpushi(0); //@line 5628 "tcc_bootstrap.c"
 var $20=HEAP32[((9288)>>2)]; //@line 5629 "tcc_bootstrap.c"
 var $21=(($20+8)|0); //@line 5629 "tcc_bootstrap.c"
 HEAP16[(($21)>>1)]=0; //@line 5629 "tcc_bootstrap.c"
 var $22=HEAP32[((9288)>>2)]; //@line 5630 "tcc_bootstrap.c"
 var $23=(($22+10)|0); //@line 5630 "tcc_bootstrap.c"
 HEAP16[(($23)>>1)]=2; //@line 5630 "tcc_bootstrap.c"
 label=10;break; //@line 5631 "tcc_bootstrap.c"
 case 9: 
 label=10;break;
 case 10: 
 STACKTOP=sp;return; //@line 5634 "tcc_bootstrap.c"
  default: assert(0, "bad label: " + label);
 }

}


function _gen_cast_s($t){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 var $type=sp;
 $1=$t;
 var $2=$1; //@line 5663 "tcc_bootstrap.c"
 var $3=(($type)|0); //@line 5663 "tcc_bootstrap.c"
 HEAP32[(($3)>>2)]=$2; //@line 5663 "tcc_bootstrap.c"
 var $4=(($type+4)|0); //@line 5664 "tcc_bootstrap.c"
 HEAP32[(($4)>>2)]=0; //@line 5664 "tcc_bootstrap.c"
 _gen_cast($type); //@line 5665 "tcc_bootstrap.c"
 STACKTOP=sp;return; //@line 5666 "tcc_bootstrap.c"
}


function _lexpand(){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $u;
 var $v;
 var $1=HEAP32[((9288)>>2)]; //@line 4935 "tcc_bootstrap.c"
 var $2=(($1)|0); //@line 4935 "tcc_bootstrap.c"
 var $3=(($2)|0); //@line 4935 "tcc_bootstrap.c"
 var $4=HEAP32[(($3)>>2)]; //@line 4935 "tcc_bootstrap.c"
 var $5=$4&48; //@line 4935 "tcc_bootstrap.c"
 $u=$5; //@line 4935 "tcc_bootstrap.c"
 var $6=HEAP32[((9288)>>2)]; //@line 4936 "tcc_bootstrap.c"
 var $7=(($6+8)|0); //@line 4936 "tcc_bootstrap.c"
 var $8=HEAP16[(($7)>>1)]; //@line 4936 "tcc_bootstrap.c"
 var $9=($8&65535); //@line 4936 "tcc_bootstrap.c"
 var $10=$9&319; //@line 4936 "tcc_bootstrap.c"
 $v=$10; //@line 4936 "tcc_bootstrap.c"
 var $11=$v; //@line 4937 "tcc_bootstrap.c"
 var $12=($11|0)==48; //@line 4937 "tcc_bootstrap.c"
 if($12){label=2;break;}else{label=3;break;} //@line 4937 "tcc_bootstrap.c"
 case 2: 
 _vdup(); //@line 4938 "tcc_bootstrap.c"
 var $14=HEAP32[((9288)>>2)]; //@line 4939 "tcc_bootstrap.c"
 var $15=(($14)|0); //@line 4939 "tcc_bootstrap.c"
 var $16=(($15+16)|0); //@line 4939 "tcc_bootstrap.c"
 var $17=$16; //@line 4939 "tcc_bootstrap.c"
 var $ld$0$0=(($17)|0);
 var $18$0=HEAP32[(($ld$0$0)>>2)];
 var $ld$1$1=(($17+4)|0);
 var $18$1=HEAP32[(($ld$1$1)>>2)];
 var $19$0=$18$1;
 var $19$1=0;
 var $st$2$0=(($17)|0);
 HEAP32[(($st$2$0)>>2)]=$19$0;
 var $st$3$1=(($17+4)|0);
 HEAP32[(($st$3$1)>>2)]=$19$1;
 label=8;break; //@line 4940 "tcc_bootstrap.c"
 case 3: 
 var $21=$v; //@line 4940 "tcc_bootstrap.c"
 var $22=($21|0)==304; //@line 4940 "tcc_bootstrap.c"
 if($22){label=5;break;}else{label=4;break;} //@line 4940 "tcc_bootstrap.c"
 case 4: 
 var $24=$v; //@line 4940 "tcc_bootstrap.c"
 var $25=($24|0)==306; //@line 4940 "tcc_bootstrap.c"
 if($25){label=5;break;}else{label=6;break;} //@line 4940 "tcc_bootstrap.c"
 case 5: 
 _vdup(); //@line 4941 "tcc_bootstrap.c"
 var $27=HEAP32[((9288)>>2)]; //@line 4942 "tcc_bootstrap.c"
 var $28=(($27)|0); //@line 4942 "tcc_bootstrap.c"
 var $29=(($28+16)|0); //@line 4942 "tcc_bootstrap.c"
 var $30=$29; //@line 4942 "tcc_bootstrap.c"
 var $ld$4$0=(($30)|0);
 var $31$0=HEAP32[(($ld$4$0)>>2)];
 var $ld$5$1=(($30+4)|0);
 var $31$1=HEAP32[(($ld$5$1)>>2)];
 var $$etemp$6$0=4;
 var $$etemp$6$1=0;
 var $32$0=_i64Add($31$0,$31$1,$$etemp$6$0,$$etemp$6$1);var $32$1=tempRet0; //@line 4942 "tcc_bootstrap.c"
 var $st$7$0=(($30)|0);
 HEAP32[(($st$7$0)>>2)]=$32$0;
 var $st$8$1=(($30+4)|0);
 HEAP32[(($st$8$1)>>2)]=$32$1;
 label=7;break; //@line 4943 "tcc_bootstrap.c"
 case 6: 
 var $34=_gv(1); //@line 4944 "tcc_bootstrap.c"
 _vdup(); //@line 4945 "tcc_bootstrap.c"
 var $35=HEAP32[((9288)>>2)]; //@line 4946 "tcc_bootstrap.c"
 var $36=((($35)-(40))|0); //@line 4946 "tcc_bootstrap.c"
 var $37=(($36+10)|0); //@line 4946 "tcc_bootstrap.c"
 var $38=HEAP16[(($37)>>1)]; //@line 4946 "tcc_bootstrap.c"
 var $39=HEAP32[((9288)>>2)]; //@line 4946 "tcc_bootstrap.c"
 var $40=(($39)|0); //@line 4946 "tcc_bootstrap.c"
 var $41=(($40+8)|0); //@line 4946 "tcc_bootstrap.c"
 HEAP16[(($41)>>1)]=$38; //@line 4946 "tcc_bootstrap.c"
 var $42=HEAP32[((9288)>>2)]; //@line 4947 "tcc_bootstrap.c"
 var $43=((($42)-(40))|0); //@line 4947 "tcc_bootstrap.c"
 var $44=(($43+10)|0); //@line 4947 "tcc_bootstrap.c"
 HEAP16[(($44)>>1)]=48; //@line 4947 "tcc_bootstrap.c"
 var $45=HEAP32[((9288)>>2)]; //@line 4947 "tcc_bootstrap.c"
 var $46=(($45)|0); //@line 4947 "tcc_bootstrap.c"
 var $47=(($46+10)|0); //@line 4947 "tcc_bootstrap.c"
 HEAP16[(($47)>>1)]=48; //@line 4947 "tcc_bootstrap.c"
 label=7;break;
 case 7: 
 label=8;break;
 case 8: 
 var $50=$u; //@line 4949 "tcc_bootstrap.c"
 var $51=3|$50; //@line 4949 "tcc_bootstrap.c"
 var $52=HEAP32[((9288)>>2)]; //@line 4949 "tcc_bootstrap.c"
 var $53=((($52)-(40))|0); //@line 4949 "tcc_bootstrap.c"
 var $54=(($53)|0); //@line 4949 "tcc_bootstrap.c"
 var $55=(($54)|0); //@line 4949 "tcc_bootstrap.c"
 HEAP32[(($55)>>2)]=$51; //@line 4949 "tcc_bootstrap.c"
 var $56=HEAP32[((9288)>>2)]; //@line 4949 "tcc_bootstrap.c"
 var $57=(($56)|0); //@line 4949 "tcc_bootstrap.c"
 var $58=(($57)|0); //@line 4949 "tcc_bootstrap.c"
 var $59=(($58)|0); //@line 4949 "tcc_bootstrap.c"
 HEAP32[(($59)>>2)]=$51; //@line 4949 "tcc_bootstrap.c"
 STACKTOP=sp;return; //@line 4950 "tcc_bootstrap.c"
  default: assert(0, "bad label: " + label);
 }

}


function _vdup(){
 var label=0;


 var $1=HEAP32[((9288)>>2)]; //@line 4476 "tcc_bootstrap.c"
 _vpushv($1); //@line 4476 "tcc_bootstrap.c"
 return; //@line 4477 "tcc_bootstrap.c"
}


function _vpushv($v){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 $1=$v;
 var $2=HEAP32[((9288)>>2)]; //@line 4469 "tcc_bootstrap.c"
 var $3=($2>>>0)>=87480; //@line 4469 "tcc_bootstrap.c"
 if($3){label=2;break;}else{label=3;break;} //@line 4469 "tcc_bootstrap.c"
 case 2: 
 _tcc_error(9120,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs; //@line 4470 "tcc_bootstrap.c"
 label=3;break; //@line 4470 "tcc_bootstrap.c"
 case 3: 
 var $6=HEAP32[((9288)>>2)]; //@line 4471 "tcc_bootstrap.c"
 var $7=(($6+40)|0); //@line 4471 "tcc_bootstrap.c"
 HEAP32[((9288)>>2)]=$7; //@line 4471 "tcc_bootstrap.c"
 var $8=HEAP32[((9288)>>2)]; //@line 4472 "tcc_bootstrap.c"
 var $9=$1; //@line 4472 "tcc_bootstrap.c"
 var $10=$8; //@line 4472 "tcc_bootstrap.c"
 var $11=$9; //@line 4472 "tcc_bootstrap.c"
 assert(40 % 1 === 0);HEAP32[(($10)>>2)]=HEAP32[(($11)>>2)];HEAP32[((($10)+(4))>>2)]=HEAP32[((($11)+(4))>>2)];HEAP32[((($10)+(8))>>2)]=HEAP32[((($11)+(8))>>2)];HEAP32[((($10)+(12))>>2)]=HEAP32[((($11)+(12))>>2)];HEAP32[((($10)+(16))>>2)]=HEAP32[((($11)+(16))>>2)];HEAP32[((($10)+(20))>>2)]=HEAP32[((($11)+(20))>>2)];HEAP32[((($10)+(24))>>2)]=HEAP32[((($11)+(24))>>2)];HEAP32[((($10)+(28))>>2)]=HEAP32[((($11)+(28))>>2)];HEAP32[((($10)+(32))>>2)]=HEAP32[((($11)+(32))>>2)];HEAP32[((($10)+(36))>>2)]=HEAP32[((($11)+(36))>>2)]; //@line 4472 "tcc_bootstrap.c"
 STACKTOP=sp;return; //@line 4473 "tcc_bootstrap.c"
  default: assert(0, "bad label: " + label);
 }

}


function _vpush_global_sym($type,$v){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 var $2;
 $1=$type;
 $2=$v;
 var $3=$1; //@line 4595 "tcc_bootstrap.c"
 var $4=$2; //@line 4595 "tcc_bootstrap.c"
 var $5=$1; //@line 4595 "tcc_bootstrap.c"
 var $6=_external_global_sym($4,$5,0); //@line 4595 "tcc_bootstrap.c"
 _vpushsym($3,$6); //@line 4595 "tcc_bootstrap.c"
 STACKTOP=sp;return; //@line 4596 "tcc_bootstrap.c"
}


function _vrott($n){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 $1=$n;
 var $2=HEAP32[((9288)>>2)]; //@line 4499 "tcc_bootstrap.c"
 var $3=$1; //@line 4499 "tcc_bootstrap.c"
 _vrote($2,$3); //@line 4499 "tcc_bootstrap.c"
 STACKTOP=sp;return; //@line 4500 "tcc_bootstrap.c"
}


function _gfunc_call($nb_args){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $size;
 var $align=sp;
 var $r;
 var $args_size;
 var $i;
 var $func_call;
 var $func_sym;
 $1=$nb_args;
 $args_size=0; //@line 10233 "tcc_bootstrap.c"
 $i=0; //@line 10234 "tcc_bootstrap.c"
 label=2;break; //@line 10234 "tcc_bootstrap.c"
 case 2: 
 var $3=$i; //@line 10234 "tcc_bootstrap.c"
 var $4=$1; //@line 10234 "tcc_bootstrap.c"
 var $5=($3|0)<($4|0); //@line 10234 "tcc_bootstrap.c"
 if($5){label=3;break;}else{label=23;break;} //@line 10234 "tcc_bootstrap.c"
 case 3: 
 var $7=HEAP32[((9288)>>2)]; //@line 10235 "tcc_bootstrap.c"
 var $8=(($7)|0); //@line 10235 "tcc_bootstrap.c"
 var $9=(($8)|0); //@line 10235 "tcc_bootstrap.c"
 var $10=HEAP32[(($9)>>2)]; //@line 10235 "tcc_bootstrap.c"
 var $11=$10&15; //@line 10235 "tcc_bootstrap.c"
 var $12=($11|0)==7; //@line 10235 "tcc_bootstrap.c"
 if($12){label=4;break;}else{label=5;break;} //@line 10235 "tcc_bootstrap.c"
 case 4: 
 var $14=HEAP32[((9288)>>2)]; //@line 10236 "tcc_bootstrap.c"
 var $15=(($14)|0); //@line 10236 "tcc_bootstrap.c"
 var $16=_type_size($15,$align); //@line 10236 "tcc_bootstrap.c"
 $size=$16; //@line 10236 "tcc_bootstrap.c"
 var $17=$size; //@line 10237 "tcc_bootstrap.c"
 var $18=((($17)+(3))|0); //@line 10237 "tcc_bootstrap.c"
 var $19=$18&-4; //@line 10237 "tcc_bootstrap.c"
 $size=$19; //@line 10237 "tcc_bootstrap.c"
 var $20=$size; //@line 10238 "tcc_bootstrap.c"
 var $21=_oad(60545,$20); //@line 10238 "tcc_bootstrap.c"
 var $22=_get_reg(1); //@line 10239 "tcc_bootstrap.c"
 $r=$22; //@line 10239 "tcc_bootstrap.c"
 _o(137); //@line 10240 "tcc_bootstrap.c"
 var $23=$r; //@line 10241 "tcc_bootstrap.c"
 var $24=((($23)+(224))|0); //@line 10241 "tcc_bootstrap.c"
 _o($24); //@line 10241 "tcc_bootstrap.c"
 var $25=HEAP32[((9288)>>2)]; //@line 10242 "tcc_bootstrap.c"
 var $26=(($25)|0); //@line 10242 "tcc_bootstrap.c"
 var $27=$r; //@line 10242 "tcc_bootstrap.c"
 var $28=$27|256; //@line 10242 "tcc_bootstrap.c"
 _vset($26,$28,0); //@line 10242 "tcc_bootstrap.c"
 var $29=HEAP32[((9288)>>2)]; //@line 10243 "tcc_bootstrap.c"
 var $30=(($29)|0); //@line 10243 "tcc_bootstrap.c"
 var $31=$r; //@line 10243 "tcc_bootstrap.c"
 var $32=$31|256; //@line 10243 "tcc_bootstrap.c"
 _vset($30,$32,0); //@line 10243 "tcc_bootstrap.c"
 _vswap(); //@line 10244 "tcc_bootstrap.c"
 _vstore(); //@line 10245 "tcc_bootstrap.c"
 var $33=$size; //@line 10246 "tcc_bootstrap.c"
 var $34=$args_size; //@line 10246 "tcc_bootstrap.c"
 var $35=((($34)+($33))|0); //@line 10246 "tcc_bootstrap.c"
 $args_size=$35; //@line 10246 "tcc_bootstrap.c"
 label=21;break; //@line 10247 "tcc_bootstrap.c"
 case 5: 
 var $37=HEAP32[((9288)>>2)]; //@line 10247 "tcc_bootstrap.c"
 var $38=(($37)|0); //@line 10247 "tcc_bootstrap.c"
 var $39=(($38)|0); //@line 10247 "tcc_bootstrap.c"
 var $40=HEAP32[(($39)>>2)]; //@line 10247 "tcc_bootstrap.c"
 var $41=_is_float($40); //@line 10247 "tcc_bootstrap.c"
 var $42=($41|0)!=0; //@line 10247 "tcc_bootstrap.c"
 if($42){label=6;break;}else{label=16;break;} //@line 10247 "tcc_bootstrap.c"
 case 6: 
 var $44=_gv(2); //@line 10248 "tcc_bootstrap.c"
 var $45=HEAP32[((9288)>>2)]; //@line 10249 "tcc_bootstrap.c"
 var $46=(($45)|0); //@line 10249 "tcc_bootstrap.c"
 var $47=(($46)|0); //@line 10249 "tcc_bootstrap.c"
 var $48=HEAP32[(($47)>>2)]; //@line 10249 "tcc_bootstrap.c"
 var $49=$48&15; //@line 10249 "tcc_bootstrap.c"
 var $50=($49|0)==8; //@line 10249 "tcc_bootstrap.c"
 if($50){label=7;break;}else{label=8;break;} //@line 10249 "tcc_bootstrap.c"
 case 7: 
 $size=4; //@line 10250 "tcc_bootstrap.c"
 label=12;break; //@line 10250 "tcc_bootstrap.c"
 case 8: 
 var $53=HEAP32[((9288)>>2)]; //@line 10251 "tcc_bootstrap.c"
 var $54=(($53)|0); //@line 10251 "tcc_bootstrap.c"
 var $55=(($54)|0); //@line 10251 "tcc_bootstrap.c"
 var $56=HEAP32[(($55)>>2)]; //@line 10251 "tcc_bootstrap.c"
 var $57=$56&15; //@line 10251 "tcc_bootstrap.c"
 var $58=($57|0)==9; //@line 10251 "tcc_bootstrap.c"
 if($58){label=9;break;}else{label=10;break;} //@line 10251 "tcc_bootstrap.c"
 case 9: 
 $size=8; //@line 10252 "tcc_bootstrap.c"
 label=11;break; //@line 10252 "tcc_bootstrap.c"
 case 10: 
 $size=12; //@line 10254 "tcc_bootstrap.c"
 label=11;break;
 case 11: 
 label=12;break;
 case 12: 
 var $63=$size; //@line 10255 "tcc_bootstrap.c"
 var $64=_oad(60545,$63); //@line 10255 "tcc_bootstrap.c"
 var $65=$size; //@line 10256 "tcc_bootstrap.c"
 var $66=($65|0)==12; //@line 10256 "tcc_bootstrap.c"
 if($66){label=13;break;}else{label=14;break;} //@line 10256 "tcc_bootstrap.c"
 case 13: 
 _o(31963); //@line 10257 "tcc_bootstrap.c"
 label=15;break; //@line 10257 "tcc_bootstrap.c"
 case 14: 
 var $69=$size; //@line 10259 "tcc_bootstrap.c"
 var $70=((($69)+(23769))|0); //@line 10259 "tcc_bootstrap.c"
 var $71=((($70)-(4))|0); //@line 10259 "tcc_bootstrap.c"
 _o($71); //@line 10259 "tcc_bootstrap.c"
 label=15;break;
 case 15: 
 _g(36); //@line 10260 "tcc_bootstrap.c"
 _g(0); //@line 10261 "tcc_bootstrap.c"
 var $73=$size; //@line 10262 "tcc_bootstrap.c"
 var $74=$args_size; //@line 10262 "tcc_bootstrap.c"
 var $75=((($74)+($73))|0); //@line 10262 "tcc_bootstrap.c"
 $args_size=$75; //@line 10262 "tcc_bootstrap.c"
 label=20;break; //@line 10263 "tcc_bootstrap.c"
 case 16: 
 var $77=_gv(1); //@line 10264 "tcc_bootstrap.c"
 $r=$77; //@line 10264 "tcc_bootstrap.c"
 var $78=HEAP32[((9288)>>2)]; //@line 10265 "tcc_bootstrap.c"
 var $79=(($78)|0); //@line 10265 "tcc_bootstrap.c"
 var $80=(($79)|0); //@line 10265 "tcc_bootstrap.c"
 var $81=HEAP32[(($80)>>2)]; //@line 10265 "tcc_bootstrap.c"
 var $82=$81&15; //@line 10265 "tcc_bootstrap.c"
 var $83=($82|0)==4; //@line 10265 "tcc_bootstrap.c"
 if($83){label=17;break;}else{label=18;break;} //@line 10265 "tcc_bootstrap.c"
 case 17: 
 $size=8; //@line 10266 "tcc_bootstrap.c"
 var $85=HEAP32[((9288)>>2)]; //@line 10267 "tcc_bootstrap.c"
 var $86=(($85+10)|0); //@line 10267 "tcc_bootstrap.c"
 var $87=HEAP16[(($86)>>1)]; //@line 10267 "tcc_bootstrap.c"
 var $88=($87&65535); //@line 10267 "tcc_bootstrap.c"
 var $89=((($88)+(80))|0); //@line 10267 "tcc_bootstrap.c"
 _o($89); //@line 10267 "tcc_bootstrap.c"
 label=19;break; //@line 10268 "tcc_bootstrap.c"
 case 18: 
 $size=4; //@line 10269 "tcc_bootstrap.c"
 label=19;break;
 case 19: 
 var $92=$r; //@line 10271 "tcc_bootstrap.c"
 var $93=((($92)+(80))|0); //@line 10271 "tcc_bootstrap.c"
 _o($93); //@line 10271 "tcc_bootstrap.c"
 var $94=$size; //@line 10272 "tcc_bootstrap.c"
 var $95=$args_size; //@line 10272 "tcc_bootstrap.c"
 var $96=((($95)+($94))|0); //@line 10272 "tcc_bootstrap.c"
 $args_size=$96; //@line 10272 "tcc_bootstrap.c"
 label=20;break;
 case 20: 
 label=21;break;
 case 21: 
 var $99=HEAP32[((9288)>>2)]; //@line 10274 "tcc_bootstrap.c"
 var $100=((($99)-(40))|0); //@line 10274 "tcc_bootstrap.c"
 HEAP32[((9288)>>2)]=$100; //@line 10274 "tcc_bootstrap.c"
 label=22;break; //@line 10275 "tcc_bootstrap.c"
 case 22: 
 var $102=$i; //@line 10234 "tcc_bootstrap.c"
 var $103=((($102)+(1))|0); //@line 10234 "tcc_bootstrap.c"
 $i=$103; //@line 10234 "tcc_bootstrap.c"
 label=2;break; //@line 10234 "tcc_bootstrap.c"
 case 23: 
 _save_regs(0); //@line 10276 "tcc_bootstrap.c"
 var $105=HEAP32[((9288)>>2)]; //@line 10277 "tcc_bootstrap.c"
 var $106=(($105)|0); //@line 10277 "tcc_bootstrap.c"
 var $107=(($106+4)|0); //@line 10277 "tcc_bootstrap.c"
 var $108=HEAP32[(($107)>>2)]; //@line 10277 "tcc_bootstrap.c"
 $func_sym=$108; //@line 10277 "tcc_bootstrap.c"
 var $109=$func_sym; //@line 10278 "tcc_bootstrap.c"
 var $110=(($109+8)|0); //@line 10278 "tcc_bootstrap.c"
 var $111=$110; //@line 10278 "tcc_bootstrap.c"
 var $112=(($111+4)|0); //@line 10278 "tcc_bootstrap.c"
 var $113=$112; //@line 10278 "tcc_bootstrap.c"
 var $114=$113; //@line 10278 "tcc_bootstrap.c"
 var $115=HEAP16[(($114)>>1)]; //@line 10278 "tcc_bootstrap.c"
 var $116=$115&7; //@line 10278 "tcc_bootstrap.c"
 var $117=($116&65535); //@line 10278 "tcc_bootstrap.c"
 $func_call=$117; //@line 10278 "tcc_bootstrap.c"
 _gcall_or_jmp(0); //@line 10279 "tcc_bootstrap.c"
 var $118=$args_size; //@line 10280 "tcc_bootstrap.c"
 var $119=($118|0)!=0; //@line 10280 "tcc_bootstrap.c"
 if($119){label=24;break;}else{label=26;break;} //@line 10280 "tcc_bootstrap.c"
 case 24: 
 var $121=$func_call; //@line 10280 "tcc_bootstrap.c"
 var $122=($121|0)!=1; //@line 10280 "tcc_bootstrap.c"
 if($122){label=25;break;}else{label=26;break;} //@line 10280 "tcc_bootstrap.c"
 case 25: 
 var $124=$args_size; //@line 10281 "tcc_bootstrap.c"
 _gadd_sp($124); //@line 10281 "tcc_bootstrap.c"
 label=26;break; //@line 10282 "tcc_bootstrap.c"
 case 26: 
 var $126=HEAP32[((9288)>>2)]; //@line 10283 "tcc_bootstrap.c"
 var $127=((($126)-(40))|0); //@line 10283 "tcc_bootstrap.c"
 HEAP32[((9288)>>2)]=$127; //@line 10283 "tcc_bootstrap.c"
 STACKTOP=sp;return; //@line 10284 "tcc_bootstrap.c"
  default: assert(0, "bad label: " + label);
 }

}


function _vset($type,$r,$v){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 var $2;
 var $3;
 var $cval=sp;
 $1=$type;
 $2=$r;
 $3=$v;
 var $4=$3; //@line 4457 "tcc_bootstrap.c"
 var $5$0=$4;
 var $5$1=((((($4|0)<0))|0)?-1:0);
 var $6=$cval; //@line 4457 "tcc_bootstrap.c"
 var $st$0$0=(($6)|0);
 HEAP32[(($st$0$0)>>2)]=$5$0;
 var $st$1$1=(($6+4)|0);
 HEAP32[(($st$1$1)>>2)]=$5$1;
 var $7=$1; //@line 4458 "tcc_bootstrap.c"
 var $8=$2; //@line 4458 "tcc_bootstrap.c"
 _vsetc($7,$8,$cval); //@line 4458 "tcc_bootstrap.c"
 STACKTOP=sp;return; //@line 4459 "tcc_bootstrap.c"
}


function _vswap(){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+40)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $tmp=sp;
 var $v;
 var $1=HEAP32[((9288)>>2)]; //@line 4402 "tcc_bootstrap.c"
 var $2=($1>>>0)>=77280; //@line 4402 "tcc_bootstrap.c"
 if($2){label=2;break;}else{label=7;break;} //@line 4402 "tcc_bootstrap.c"
 case 2: 
 var $4=HEAP32[((10616)>>2)]; //@line 4402 "tcc_bootstrap.c"
 var $5=($4|0)!=0; //@line 4402 "tcc_bootstrap.c"
 if($5){label=7;break;}else{label=3;break;} //@line 4402 "tcc_bootstrap.c"
 case 3: 
 var $7=HEAP32[((9288)>>2)]; //@line 4403 "tcc_bootstrap.c"
 var $8=(($7+8)|0); //@line 4403 "tcc_bootstrap.c"
 var $9=HEAP16[(($8)>>1)]; //@line 4403 "tcc_bootstrap.c"
 var $10=($9&65535); //@line 4403 "tcc_bootstrap.c"
 var $11=$10&63; //@line 4403 "tcc_bootstrap.c"
 $v=$11; //@line 4403 "tcc_bootstrap.c"
 var $12=$v; //@line 4404 "tcc_bootstrap.c"
 var $13=($12|0)==51; //@line 4404 "tcc_bootstrap.c"
 if($13){label=5;break;}else{label=4;break;} //@line 4404 "tcc_bootstrap.c"
 case 4: 
 var $15=$v; //@line 4404 "tcc_bootstrap.c"
 var $16=$15&-2; //@line 4404 "tcc_bootstrap.c"
 var $17=($16|0)==52; //@line 4404 "tcc_bootstrap.c"
 if($17){label=5;break;}else{label=6;break;} //@line 4404 "tcc_bootstrap.c"
 case 5: 
 var $19=_gv(1); //@line 4405 "tcc_bootstrap.c"
 label=6;break; //@line 4405 "tcc_bootstrap.c"
 case 6: 
 label=7;break; //@line 4406 "tcc_bootstrap.c"
 case 7: 
 var $22=HEAP32[((9288)>>2)]; //@line 4407 "tcc_bootstrap.c"
 var $23=(($22)|0); //@line 4407 "tcc_bootstrap.c"
 var $24=$tmp; //@line 4407 "tcc_bootstrap.c"
 var $25=$23; //@line 4407 "tcc_bootstrap.c"
 assert(40 % 1 === 0);HEAP32[(($24)>>2)]=HEAP32[(($25)>>2)];HEAP32[((($24)+(4))>>2)]=HEAP32[((($25)+(4))>>2)];HEAP32[((($24)+(8))>>2)]=HEAP32[((($25)+(8))>>2)];HEAP32[((($24)+(12))>>2)]=HEAP32[((($25)+(12))>>2)];HEAP32[((($24)+(16))>>2)]=HEAP32[((($25)+(16))>>2)];HEAP32[((($24)+(20))>>2)]=HEAP32[((($25)+(20))>>2)];HEAP32[((($24)+(24))>>2)]=HEAP32[((($25)+(24))>>2)];HEAP32[((($24)+(28))>>2)]=HEAP32[((($25)+(28))>>2)];HEAP32[((($24)+(32))>>2)]=HEAP32[((($25)+(32))>>2)];HEAP32[((($24)+(36))>>2)]=HEAP32[((($25)+(36))>>2)]; //@line 4407 "tcc_bootstrap.c"
 var $26=HEAP32[((9288)>>2)]; //@line 4408 "tcc_bootstrap.c"
 var $27=(($26)|0); //@line 4408 "tcc_bootstrap.c"
 var $28=HEAP32[((9288)>>2)]; //@line 4408 "tcc_bootstrap.c"
 var $29=((($28)-(40))|0); //@line 4408 "tcc_bootstrap.c"
 var $30=$27; //@line 4408 "tcc_bootstrap.c"
 var $31=$29; //@line 4408 "tcc_bootstrap.c"
 assert(40 % 1 === 0);HEAP32[(($30)>>2)]=HEAP32[(($31)>>2)];HEAP32[((($30)+(4))>>2)]=HEAP32[((($31)+(4))>>2)];HEAP32[((($30)+(8))>>2)]=HEAP32[((($31)+(8))>>2)];HEAP32[((($30)+(12))>>2)]=HEAP32[((($31)+(12))>>2)];HEAP32[((($30)+(16))>>2)]=HEAP32[((($31)+(16))>>2)];HEAP32[((($30)+(20))>>2)]=HEAP32[((($31)+(20))>>2)];HEAP32[((($30)+(24))>>2)]=HEAP32[((($31)+(24))>>2)];HEAP32[((($30)+(28))>>2)]=HEAP32[((($31)+(28))>>2)];HEAP32[((($30)+(32))>>2)]=HEAP32[((($31)+(32))>>2)];HEAP32[((($30)+(36))>>2)]=HEAP32[((($31)+(36))>>2)]; //@line 4408 "tcc_bootstrap.c"
 var $32=HEAP32[((9288)>>2)]; //@line 4409 "tcc_bootstrap.c"
 var $33=((($32)-(40))|0); //@line 4409 "tcc_bootstrap.c"
 var $34=$33; //@line 4409 "tcc_bootstrap.c"
 var $35=$tmp; //@line 4409 "tcc_bootstrap.c"
 assert(40 % 1 === 0);HEAP32[(($34)>>2)]=HEAP32[(($35)>>2)];HEAP32[((($34)+(4))>>2)]=HEAP32[((($35)+(4))>>2)];HEAP32[((($34)+(8))>>2)]=HEAP32[((($35)+(8))>>2)];HEAP32[((($34)+(12))>>2)]=HEAP32[((($35)+(12))>>2)];HEAP32[((($34)+(16))>>2)]=HEAP32[((($35)+(16))>>2)];HEAP32[((($34)+(20))>>2)]=HEAP32[((($35)+(20))>>2)];HEAP32[((($34)+(24))>>2)]=HEAP32[((($35)+(24))>>2)];HEAP32[((($34)+(28))>>2)]=HEAP32[((($35)+(28))>>2)];HEAP32[((($34)+(32))>>2)]=HEAP32[((($35)+(32))>>2)];HEAP32[((($34)+(36))>>2)]=HEAP32[((($35)+(36))>>2)]; //@line 4409 "tcc_bootstrap.c"
 STACKTOP=sp;return; //@line 4411 "tcc_bootstrap.c"
  default: assert(0, "bad label: " + label);
 }

}


function _vstore(){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+56)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $sbt;
 var $dbt;
 var $ft;
 var $r;
 var $t;
 var $size;
 var $align=sp;
 var $bit_size;
 var $bit_pos;
 var $rc;
 var $delayed_cast;
 var $mask=(sp)+(8);
 var $sv=(sp)+(16);
 var $addr_type;
 var $load_size;
 var $load_type;
 var $1=HEAP32[((9288)>>2)]; //@line 6102 "tcc_bootstrap.c"
 var $2=((($1)-(40))|0); //@line 6102 "tcc_bootstrap.c"
 var $3=(($2)|0); //@line 6102 "tcc_bootstrap.c"
 var $4=(($3)|0); //@line 6102 "tcc_bootstrap.c"
 var $5=HEAP32[(($4)>>2)]; //@line 6102 "tcc_bootstrap.c"
 $ft=$5; //@line 6102 "tcc_bootstrap.c"
 var $6=HEAP32[((9288)>>2)]; //@line 6103 "tcc_bootstrap.c"
 var $7=(($6)|0); //@line 6103 "tcc_bootstrap.c"
 var $8=(($7)|0); //@line 6103 "tcc_bootstrap.c"
 var $9=HEAP32[(($8)>>2)]; //@line 6103 "tcc_bootstrap.c"
 var $10=$9&15; //@line 6103 "tcc_bootstrap.c"
 $sbt=$10; //@line 6103 "tcc_bootstrap.c"
 var $11=$ft; //@line 6104 "tcc_bootstrap.c"
 var $12=$11&15; //@line 6104 "tcc_bootstrap.c"
 $dbt=$12; //@line 6104 "tcc_bootstrap.c"
 var $13=$sbt; //@line 6105 "tcc_bootstrap.c"
 var $14=($13|0)==3; //@line 6105 "tcc_bootstrap.c"
 if($14){label=3;break;}else{label=2;break;} //@line 6105 "tcc_bootstrap.c"
 case 2: 
 var $16=$sbt; //@line 6105 "tcc_bootstrap.c"
 var $17=($16|0)==2; //@line 6105 "tcc_bootstrap.c"
 if($17){label=3;break;}else{label=4;break;} //@line 6105 "tcc_bootstrap.c"
 case 3: 
 var $19=$dbt; //@line 6105 "tcc_bootstrap.c"
 var $20=($19|0)==1; //@line 6105 "tcc_bootstrap.c"
 if($20){label=6;break;}else{label=4;break;} //@line 6105 "tcc_bootstrap.c"
 case 4: 
 var $22=$sbt; //@line 6105 "tcc_bootstrap.c"
 var $23=($22|0)==3; //@line 6105 "tcc_bootstrap.c"
 if($23){label=5;break;}else{label=10;break;} //@line 6105 "tcc_bootstrap.c"
 case 5: 
 var $25=$dbt; //@line 6105 "tcc_bootstrap.c"
 var $26=($25|0)==2; //@line 6105 "tcc_bootstrap.c"
 if($26){label=6;break;}else{label=10;break;} //@line 6105 "tcc_bootstrap.c"
 case 6: 
 var $28=HEAP32[((9288)>>2)]; //@line 6105 "tcc_bootstrap.c"
 var $29=(($28)|0); //@line 6105 "tcc_bootstrap.c"
 var $30=(($29)|0); //@line 6105 "tcc_bootstrap.c"
 var $31=HEAP32[(($30)>>2)]; //@line 6105 "tcc_bootstrap.c"
 var $32=$31&128; //@line 6105 "tcc_bootstrap.c"
 var $33=($32|0)!=0; //@line 6105 "tcc_bootstrap.c"
 if($33){label=10;break;}else{label=7;break;} //@line 6105 "tcc_bootstrap.c"
 case 7: 
 $delayed_cast=1024; //@line 6108 "tcc_bootstrap.c"
 var $35=$ft; //@line 6109 "tcc_bootstrap.c"
 var $36=$35&987007; //@line 6109 "tcc_bootstrap.c"
 var $37=HEAP32[((9288)>>2)]; //@line 6109 "tcc_bootstrap.c"
 var $38=(($37)|0); //@line 6109 "tcc_bootstrap.c"
 var $39=(($38)|0); //@line 6109 "tcc_bootstrap.c"
 HEAP32[(($39)>>2)]=$36; //@line 6109 "tcc_bootstrap.c"
 var $40=$ft; //@line 6110 "tcc_bootstrap.c"
 var $41=$40&256; //@line 6110 "tcc_bootstrap.c"
 var $42=($41|0)!=0; //@line 6110 "tcc_bootstrap.c"
 if($42){label=8;break;}else{label=9;break;} //@line 6110 "tcc_bootstrap.c"
 case 8: 
 _tcc_warning(9080,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs; //@line 6111 "tcc_bootstrap.c"
 label=9;break; //@line 6111 "tcc_bootstrap.c"
 case 9: 
 label=13;break; //@line 6112 "tcc_bootstrap.c"
 case 10: 
 $delayed_cast=0; //@line 6113 "tcc_bootstrap.c"
 var $46=$ft; //@line 6114 "tcc_bootstrap.c"
 var $47=$46&128; //@line 6114 "tcc_bootstrap.c"
 var $48=($47|0)!=0; //@line 6114 "tcc_bootstrap.c"
 if($48){label=12;break;}else{label=11;break;} //@line 6114 "tcc_bootstrap.c"
 case 11: 
 var $50=HEAP32[((9288)>>2)]; //@line 6115 "tcc_bootstrap.c"
 var $51=((($50)-(40))|0); //@line 6115 "tcc_bootstrap.c"
 var $52=(($51)|0); //@line 6115 "tcc_bootstrap.c"
 _gen_assign_cast($52); //@line 6115 "tcc_bootstrap.c"
 label=12;break; //@line 6115 "tcc_bootstrap.c"
 case 12: 
 label=13;break;
 case 13: 
 var $55=$sbt; //@line 6117 "tcc_bootstrap.c"
 var $56=($55|0)==7; //@line 6117 "tcc_bootstrap.c"
 if($56){label=14;break;}else{label=15;break;} //@line 6117 "tcc_bootstrap.c"
 case 14: 
 var $58=HEAP32[((9288)>>2)]; //@line 6118 "tcc_bootstrap.c"
 var $59=(($58)|0); //@line 6118 "tcc_bootstrap.c"
 var $60=_type_size($59,$align); //@line 6118 "tcc_bootstrap.c"
 $size=$60; //@line 6118 "tcc_bootstrap.c"
 _vswap(); //@line 6119 "tcc_bootstrap.c"
 var $61=HEAP32[((9288)>>2)]; //@line 6120 "tcc_bootstrap.c"
 var $62=(($61)|0); //@line 6120 "tcc_bootstrap.c"
 var $63=(($62)|0); //@line 6120 "tcc_bootstrap.c"
 HEAP32[(($63)>>2)]=5; //@line 6120 "tcc_bootstrap.c"
 _gaddrof(); //@line 6121 "tcc_bootstrap.c"
 _vpush_global_sym(76632,387); //@line 6122 "tcc_bootstrap.c"
 _vswap(); //@line 6123 "tcc_bootstrap.c"
 var $64=HEAP32[((9288)>>2)]; //@line 6124 "tcc_bootstrap.c"
 var $65=((($64)-(80))|0); //@line 6124 "tcc_bootstrap.c"
 _vpushv($65); //@line 6124 "tcc_bootstrap.c"
 var $66=HEAP32[((9288)>>2)]; //@line 6125 "tcc_bootstrap.c"
 var $67=(($66)|0); //@line 6125 "tcc_bootstrap.c"
 var $68=(($67)|0); //@line 6125 "tcc_bootstrap.c"
 HEAP32[(($68)>>2)]=5; //@line 6125 "tcc_bootstrap.c"
 _gaddrof(); //@line 6126 "tcc_bootstrap.c"
 var $69=$size; //@line 6127 "tcc_bootstrap.c"
 _vpushi($69); //@line 6127 "tcc_bootstrap.c"
 _gfunc_call(3); //@line 6128 "tcc_bootstrap.c"
 label=42;break; //@line 6129 "tcc_bootstrap.c"
 case 15: 
 var $71=$ft; //@line 6129 "tcc_bootstrap.c"
 var $72=$71&128; //@line 6129 "tcc_bootstrap.c"
 var $73=($72|0)!=0; //@line 6129 "tcc_bootstrap.c"
 if($73){label=16;break;}else{label=30;break;} //@line 6129 "tcc_bootstrap.c"
 case 16: 
 _vdup(); //@line 6130 "tcc_bootstrap.c"
 var $75=HEAP32[((9288)>>2)]; //@line 6130 "tcc_bootstrap.c"
 var $76=((($75)-(40))|0); //@line 6130 "tcc_bootstrap.c"
 var $77=HEAP32[((9288)>>2)]; //@line 6130 "tcc_bootstrap.c"
 var $78=((($77)-(80))|0); //@line 6130 "tcc_bootstrap.c"
 var $79=$76; //@line 6130 "tcc_bootstrap.c"
 var $80=$78; //@line 6130 "tcc_bootstrap.c"
 assert(40 % 1 === 0);HEAP32[(($79)>>2)]=HEAP32[(($80)>>2)];HEAP32[((($79)+(4))>>2)]=HEAP32[((($80)+(4))>>2)];HEAP32[((($79)+(8))>>2)]=HEAP32[((($80)+(8))>>2)];HEAP32[((($79)+(12))>>2)]=HEAP32[((($80)+(12))>>2)];HEAP32[((($79)+(16))>>2)]=HEAP32[((($80)+(16))>>2)];HEAP32[((($79)+(20))>>2)]=HEAP32[((($80)+(20))>>2)];HEAP32[((($79)+(24))>>2)]=HEAP32[((($80)+(24))>>2)];HEAP32[((($79)+(28))>>2)]=HEAP32[((($80)+(28))>>2)];HEAP32[((($79)+(32))>>2)]=HEAP32[((($80)+(32))>>2)];HEAP32[((($79)+(36))>>2)]=HEAP32[((($80)+(36))>>2)]; //@line 6130 "tcc_bootstrap.c"
 var $81=$ft; //@line 6131 "tcc_bootstrap.c"
 var $82=_BIT_POS($81); //@line 6131 "tcc_bootstrap.c"
 $bit_pos=$82; //@line 6131 "tcc_bootstrap.c"
 var $83=$ft; //@line 6132 "tcc_bootstrap.c"
 var $84=_BIT_SIZE($83); //@line 6132 "tcc_bootstrap.c"
 $bit_size=$84; //@line 6132 "tcc_bootstrap.c"
 var $85=$ft; //@line 6133 "tcc_bootstrap.c"
 var $86=$85&1048447; //@line 6133 "tcc_bootstrap.c"
 var $87=HEAP32[((9288)>>2)]; //@line 6133 "tcc_bootstrap.c"
 var $88=((($87)-(40))|0); //@line 6133 "tcc_bootstrap.c"
 var $89=(($88)|0); //@line 6133 "tcc_bootstrap.c"
 var $90=(($89)|0); //@line 6133 "tcc_bootstrap.c"
 HEAP32[(($90)>>2)]=$86; //@line 6133 "tcc_bootstrap.c"
 var $91=$ft; //@line 6134 "tcc_bootstrap.c"
 var $92=$91&15; //@line 6134 "tcc_bootstrap.c"
 var $93=($92|0)==11; //@line 6134 "tcc_bootstrap.c"
 if($93){label=17;break;}else{label=18;break;} //@line 6134 "tcc_bootstrap.c"
 case 17: 
 var $95=HEAP32[((9288)>>2)]; //@line 6135 "tcc_bootstrap.c"
 var $96=((($95)-(40))|0); //@line 6135 "tcc_bootstrap.c"
 var $97=(($96)|0); //@line 6135 "tcc_bootstrap.c"
 _gen_cast($97); //@line 6135 "tcc_bootstrap.c"
 var $98=HEAP32[((9288)>>2)]; //@line 6136 "tcc_bootstrap.c"
 var $99=((($98)-(40))|0); //@line 6136 "tcc_bootstrap.c"
 var $100=(($99)|0); //@line 6136 "tcc_bootstrap.c"
 var $101=(($100)|0); //@line 6136 "tcc_bootstrap.c"
 var $102=HEAP32[(($101)>>2)]; //@line 6136 "tcc_bootstrap.c"
 var $103=$102&-16; //@line 6136 "tcc_bootstrap.c"
 var $104=$103|17; //@line 6136 "tcc_bootstrap.c"
 var $105=HEAP32[((9288)>>2)]; //@line 6136 "tcc_bootstrap.c"
 var $106=((($105)-(40))|0); //@line 6136 "tcc_bootstrap.c"
 var $107=(($106)|0); //@line 6136 "tcc_bootstrap.c"
 var $108=(($107)|0); //@line 6136 "tcc_bootstrap.c"
 HEAP32[(($108)>>2)]=$104; //@line 6136 "tcc_bootstrap.c"
 label=18;break; //@line 6137 "tcc_bootstrap.c"
 case 18: 
 var $110=HEAP32[((9288)>>2)]; //@line 6138 "tcc_bootstrap.c"
 var $111=((($110)-(40))|0); //@line 6138 "tcc_bootstrap.c"
 var $112=$bit_pos; //@line 6138 "tcc_bootstrap.c"
 var $113=$bit_size; //@line 6138 "tcc_bootstrap.c"
 var $114=_adjust_bf($111,$112,$113); //@line 6138 "tcc_bootstrap.c"
 $r=$114; //@line 6138 "tcc_bootstrap.c"
 var $115=$r; //@line 6139 "tcc_bootstrap.c"
 var $116=($115|0)==7; //@line 6139 "tcc_bootstrap.c"
 if($116){label=19;break;}else{label=20;break;} //@line 6139 "tcc_bootstrap.c"
 case 19: 
 var $118=$ft; //@line 6140 "tcc_bootstrap.c"
 var $119=$118&15; //@line 6140 "tcc_bootstrap.c"
 var $120=($119|0)==4; //@line 6140 "tcc_bootstrap.c"
 var $121=($120?4:3); //@line 6140 "tcc_bootstrap.c"
 _gen_cast_s($121); //@line 6140 "tcc_bootstrap.c"
 var $122=$bit_pos; //@line 6141 "tcc_bootstrap.c"
 var $123=$bit_size; //@line 6141 "tcc_bootstrap.c"
 _store_packed_bf($122,$123); //@line 6141 "tcc_bootstrap.c"
 label=29;break; //@line 6142 "tcc_bootstrap.c"
 case 20: 
 var $125=$bit_size; //@line 6143 "tcc_bootstrap.c"
 var $126$0=$125;
 var $126$1=0;
 var $$etemp$0$0=1;
 var $$etemp$0$1=0;
 var $127$0=_bitshift64Shl($$etemp$0$0,$$etemp$0$1,$126$0);var $127$1=tempRet0; //@line 6143 "tcc_bootstrap.c"
 var $$etemp$1$0=1;
 var $$etemp$1$1=0;
 var $128$0=_i64Subtract($127$0,$127$1,$$etemp$1$0,$$etemp$1$1);var $128$1=tempRet0; //@line 6143 "tcc_bootstrap.c"
 var $st$2$0=(($mask)|0);
 HEAP32[(($st$2$0)>>2)]=$128$0;
 var $st$3$1=(($mask+4)|0);
 HEAP32[(($st$3$1)>>2)]=$128$1;
 var $129=$ft; //@line 6144 "tcc_bootstrap.c"
 var $130=$129&15; //@line 6144 "tcc_bootstrap.c"
 var $131=($130|0)!=11; //@line 6144 "tcc_bootstrap.c"
 if($131){label=21;break;}else{label=25;break;} //@line 6144 "tcc_bootstrap.c"
 case 21: 
 var $133=HEAP32[((9288)>>2)]; //@line 6145 "tcc_bootstrap.c"
 var $134=((($133)-(40))|0); //@line 6145 "tcc_bootstrap.c"
 var $135=(($134)|0); //@line 6145 "tcc_bootstrap.c"
 var $136=(($135)|0); //@line 6145 "tcc_bootstrap.c"
 var $137=HEAP32[(($136)>>2)]; //@line 6145 "tcc_bootstrap.c"
 var $138=$137&15; //@line 6145 "tcc_bootstrap.c"
 var $139=($138|0)==4; //@line 6145 "tcc_bootstrap.c"
 if($139){label=22;break;}else{label=23;break;} //@line 6145 "tcc_bootstrap.c"
 case 22: 
 var $ld$4$0=(($mask)|0);
 var $141$0=HEAP32[(($ld$4$0)>>2)];
 var $ld$5$1=(($mask+4)|0);
 var $141$1=HEAP32[(($ld$5$1)>>2)];
 _vpushll($141$0,$141$1);
 label=24;break; //@line 6146 "tcc_bootstrap.c"
 case 23: 
 var $ld$6$0=(($mask)|0);
 var $143$0=HEAP32[(($ld$6$0)>>2)];
 var $ld$7$1=(($mask+4)|0);
 var $143$1=HEAP32[(($ld$7$1)>>2)];
 var $144$0=$143$0;
 var $144=$144$0;
 _vpushi($144); //@line 6148 "tcc_bootstrap.c"
 label=24;break;
 case 24: 
 _gen_op(38); //@line 6149 "tcc_bootstrap.c"
 label=25;break; //@line 6150 "tcc_bootstrap.c"
 case 25: 
 var $147=$bit_pos; //@line 6151 "tcc_bootstrap.c"
 _vpushi($147); //@line 6151 "tcc_bootstrap.c"
 _gen_op(1); //@line 6152 "tcc_bootstrap.c"
 _vswap(); //@line 6153 "tcc_bootstrap.c"
 _vdup(); //@line 6154 "tcc_bootstrap.c"
 _vrott(3); //@line 6155 "tcc_bootstrap.c"
 var $148=HEAP32[((9288)>>2)]; //@line 6156 "tcc_bootstrap.c"
 var $149=(($148)|0); //@line 6156 "tcc_bootstrap.c"
 var $150=(($149)|0); //@line 6156 "tcc_bootstrap.c"
 var $151=HEAP32[(($150)>>2)]; //@line 6156 "tcc_bootstrap.c"
 var $152=$151&15; //@line 6156 "tcc_bootstrap.c"
 var $153=($152|0)==4; //@line 6156 "tcc_bootstrap.c"
 if($153){label=26;break;}else{label=27;break;} //@line 6156 "tcc_bootstrap.c"
 case 26: 
 var $ld$8$0=(($mask)|0);
 var $155$0=HEAP32[(($ld$8$0)>>2)];
 var $ld$9$1=(($mask+4)|0);
 var $155$1=HEAP32[(($ld$9$1)>>2)];
 var $156=$bit_pos; //@line 6157 "tcc_bootstrap.c"
 var $157$0=$156;
 var $157$1=0;
 var $158$0=_bitshift64Shl($155$0,$155$1,$157$0);var $158$1=tempRet0; //@line 6157 "tcc_bootstrap.c"
 var $$etemp$10$0=-1;
 var $$etemp$10$1=-1;
 var $159$0=$158$0^$$etemp$10$0;
 var $159$1=$158$1^$$etemp$10$1;
 _vpushll($159$0,$159$1);
 label=28;break; //@line 6157 "tcc_bootstrap.c"
 case 27: 
 var $ld$11$0=(($mask)|0);
 var $161$0=HEAP32[(($ld$11$0)>>2)];
 var $ld$12$1=(($mask+4)|0);
 var $161$1=HEAP32[(($ld$12$1)>>2)];
 var $162$0=$161$0;
 var $162=$162$0;
 var $163=$bit_pos; //@line 6159 "tcc_bootstrap.c"
 var $164=$162<<$163; //@line 6159 "tcc_bootstrap.c"
 var $165=$164^-1; //@line 6159 "tcc_bootstrap.c"
 _vpushi($165); //@line 6159 "tcc_bootstrap.c"
 label=28;break;
 case 28: 
 _gen_op(38); //@line 6160 "tcc_bootstrap.c"
 _gen_op(124); //@line 6161 "tcc_bootstrap.c"
 _vstore(); //@line 6162 "tcc_bootstrap.c"
 _vpop(); //@line 6163 "tcc_bootstrap.c"
 label=29;break;
 case 29: 
 label=41;break; //@line 6165 "tcc_bootstrap.c"
 case 30: 
 var $169=$dbt; //@line 6165 "tcc_bootstrap.c"
 var $170=($169|0)==0; //@line 6165 "tcc_bootstrap.c"
 if($170){label=31;break;}else{label=32;break;} //@line 6165 "tcc_bootstrap.c"
 case 31: 
 var $172=HEAP32[((9288)>>2)]; //@line 6166 "tcc_bootstrap.c"
 var $173=((($172)-(40))|0); //@line 6166 "tcc_bootstrap.c"
 HEAP32[((9288)>>2)]=$173; //@line 6166 "tcc_bootstrap.c"
 label=40;break; //@line 6167 "tcc_bootstrap.c"
 case 32: 
 $rc=1; //@line 6168 "tcc_bootstrap.c"
 var $175=$ft; //@line 6169 "tcc_bootstrap.c"
 var $176=_is_float($175); //@line 6169 "tcc_bootstrap.c"
 var $177=($176|0)!=0; //@line 6169 "tcc_bootstrap.c"
 if($177){label=33;break;}else{label=34;break;} //@line 6169 "tcc_bootstrap.c"
 case 33: 
 $rc=2; //@line 6170 "tcc_bootstrap.c"
 label=34;break; //@line 6171 "tcc_bootstrap.c"
 case 34: 
 var $180=$rc; //@line 6172 "tcc_bootstrap.c"
 var $181=_gv($180); //@line 6172 "tcc_bootstrap.c"
 $r=$181; //@line 6172 "tcc_bootstrap.c"
 var $182=HEAP32[((9288)>>2)]; //@line 6173 "tcc_bootstrap.c"
 var $183=((($182)-(40))|0); //@line 6173 "tcc_bootstrap.c"
 var $184=(($183+8)|0); //@line 6173 "tcc_bootstrap.c"
 var $185=HEAP16[(($184)>>1)]; //@line 6173 "tcc_bootstrap.c"
 var $186=($185&65535); //@line 6173 "tcc_bootstrap.c"
 var $187=$186&63; //@line 6173 "tcc_bootstrap.c"
 var $188=($187|0)==49; //@line 6173 "tcc_bootstrap.c"
 if($188){label=35;break;}else{label=36;break;} //@line 6173 "tcc_bootstrap.c"
 case 35: 
 var $190=_get_reg(1); //@line 6175 "tcc_bootstrap.c"
 $t=$190; //@line 6175 "tcc_bootstrap.c"
 var $191=(($sv)|0); //@line 6176 "tcc_bootstrap.c"
 var $192=(($191)|0); //@line 6176 "tcc_bootstrap.c"
 HEAP32[(($192)>>2)]=3; //@line 6176 "tcc_bootstrap.c"
 var $193=(($sv+8)|0); //@line 6177 "tcc_bootstrap.c"
 HEAP16[(($193)>>1)]=306; //@line 6177 "tcc_bootstrap.c"
 var $194=HEAP32[((9288)>>2)]; //@line 6178 "tcc_bootstrap.c"
 var $195=((($194)-(40))|0); //@line 6178 "tcc_bootstrap.c"
 var $196=(($195+16)|0); //@line 6178 "tcc_bootstrap.c"
 var $197=$196; //@line 6178 "tcc_bootstrap.c"
 var $ld$13$0=(($197)|0);
 var $198$0=HEAP32[(($ld$13$0)>>2)];
 var $ld$14$1=(($197+4)|0);
 var $198$1=HEAP32[(($ld$14$1)>>2)];
 var $199=(($sv+16)|0); //@line 6178 "tcc_bootstrap.c"
 var $200=$199; //@line 6178 "tcc_bootstrap.c"
 var $st$15$0=(($200)|0);
 HEAP32[(($st$15$0)>>2)]=$198$0;
 var $st$16$1=(($200+4)|0);
 HEAP32[(($st$16$1)>>2)]=$198$1;
 var $201=$t; //@line 6179 "tcc_bootstrap.c"
 _load($201,$sv); //@line 6179 "tcc_bootstrap.c"
 var $202=$t; //@line 6180 "tcc_bootstrap.c"
 var $203=$202|256; //@line 6180 "tcc_bootstrap.c"
 var $204=(($203)&65535); //@line 6180 "tcc_bootstrap.c"
 var $205=HEAP32[((9288)>>2)]; //@line 6180 "tcc_bootstrap.c"
 var $206=((($205)-(40))|0); //@line 6180 "tcc_bootstrap.c"
 var $207=(($206+8)|0); //@line 6180 "tcc_bootstrap.c"
 HEAP16[(($207)>>1)]=$204; //@line 6180 "tcc_bootstrap.c"
 label=36;break; //@line 6181 "tcc_bootstrap.c"
 case 36: 
 var $209=$ft; //@line 6182 "tcc_bootstrap.c"
 var $210=$209&15; //@line 6182 "tcc_bootstrap.c"
 var $211=($210|0)==4; //@line 6182 "tcc_bootstrap.c"
 if($211){label=37;break;}else{label=38;break;} //@line 6182 "tcc_bootstrap.c"
 case 37: 
 $addr_type=3; //@line 6183 "tcc_bootstrap.c"
 $load_size=4; //@line 6183 "tcc_bootstrap.c"
 $load_type=3; //@line 6183 "tcc_bootstrap.c"
 var $213=$load_type; //@line 6184 "tcc_bootstrap.c"
 var $214=HEAP32[((9288)>>2)]; //@line 6184 "tcc_bootstrap.c"
 var $215=((($214)-(40))|0); //@line 6184 "tcc_bootstrap.c"
 var $216=(($215)|0); //@line 6184 "tcc_bootstrap.c"
 var $217=(($216)|0); //@line 6184 "tcc_bootstrap.c"
 HEAP32[(($217)>>2)]=$213; //@line 6184 "tcc_bootstrap.c"
 var $218=$r; //@line 6185 "tcc_bootstrap.c"
 var $219=HEAP32[((9288)>>2)]; //@line 6185 "tcc_bootstrap.c"
 var $220=((($219)-(40))|0); //@line 6185 "tcc_bootstrap.c"
 _store($218,$220); //@line 6185 "tcc_bootstrap.c"
 _vswap(); //@line 6186 "tcc_bootstrap.c"
 var $221=$addr_type; //@line 6187 "tcc_bootstrap.c"
 var $222=HEAP32[((9288)>>2)]; //@line 6187 "tcc_bootstrap.c"
 var $223=(($222)|0); //@line 6187 "tcc_bootstrap.c"
 var $224=(($223)|0); //@line 6187 "tcc_bootstrap.c"
 HEAP32[(($224)>>2)]=$221; //@line 6187 "tcc_bootstrap.c"
 _gaddrof(); //@line 6188 "tcc_bootstrap.c"
 var $225=$load_size; //@line 6189 "tcc_bootstrap.c"
 _vpushi($225); //@line 6189 "tcc_bootstrap.c"
 _gen_op(43); //@line 6190 "tcc_bootstrap.c"
 var $226=HEAP32[((9288)>>2)]; //@line 6191 "tcc_bootstrap.c"
 var $227=(($226+8)|0); //@line 6191 "tcc_bootstrap.c"
 var $228=HEAP16[(($227)>>1)]; //@line 6191 "tcc_bootstrap.c"
 var $229=($228&65535); //@line 6191 "tcc_bootstrap.c"
 var $230=$229|256; //@line 6191 "tcc_bootstrap.c"
 var $231=(($230)&65535); //@line 6191 "tcc_bootstrap.c"
 HEAP16[(($227)>>1)]=$231; //@line 6191 "tcc_bootstrap.c"
 _vswap(); //@line 6192 "tcc_bootstrap.c"
 var $232=$load_type; //@line 6193 "tcc_bootstrap.c"
 var $233=HEAP32[((9288)>>2)]; //@line 6193 "tcc_bootstrap.c"
 var $234=((($233)-(40))|0); //@line 6193 "tcc_bootstrap.c"
 var $235=(($234)|0); //@line 6193 "tcc_bootstrap.c"
 var $236=(($235)|0); //@line 6193 "tcc_bootstrap.c"
 HEAP32[(($236)>>2)]=$232; //@line 6193 "tcc_bootstrap.c"
 var $237=HEAP32[((9288)>>2)]; //@line 6194 "tcc_bootstrap.c"
 var $238=(($237+10)|0); //@line 6194 "tcc_bootstrap.c"
 var $239=HEAP16[(($238)>>1)]; //@line 6194 "tcc_bootstrap.c"
 var $240=($239&65535); //@line 6194 "tcc_bootstrap.c"
 var $241=HEAP32[((9288)>>2)]; //@line 6194 "tcc_bootstrap.c"
 var $242=((($241)-(40))|0); //@line 6194 "tcc_bootstrap.c"
 _store($240,$242); //@line 6194 "tcc_bootstrap.c"
 label=39;break; //@line 6195 "tcc_bootstrap.c"
 case 38: 
 var $244=$r; //@line 6196 "tcc_bootstrap.c"
 var $245=HEAP32[((9288)>>2)]; //@line 6196 "tcc_bootstrap.c"
 var $246=((($245)-(40))|0); //@line 6196 "tcc_bootstrap.c"
 _store($244,$246); //@line 6196 "tcc_bootstrap.c"
 label=39;break;
 case 39: 
 _vswap(); //@line 6198 "tcc_bootstrap.c"
 var $248=HEAP32[((9288)>>2)]; //@line 6199 "tcc_bootstrap.c"
 var $249=((($248)-(40))|0); //@line 6199 "tcc_bootstrap.c"
 HEAP32[((9288)>>2)]=$249; //@line 6199 "tcc_bootstrap.c"
 var $250=$delayed_cast; //@line 6200 "tcc_bootstrap.c"
 var $251=HEAP32[((9288)>>2)]; //@line 6200 "tcc_bootstrap.c"
 var $252=(($251+8)|0); //@line 6200 "tcc_bootstrap.c"
 var $253=HEAP16[(($252)>>1)]; //@line 6200 "tcc_bootstrap.c"
 var $254=($253&65535); //@line 6200 "tcc_bootstrap.c"
 var $255=$254|$250; //@line 6200 "tcc_bootstrap.c"
 var $256=(($255)&65535); //@line 6200 "tcc_bootstrap.c"
 HEAP16[(($252)>>1)]=$256; //@line 6200 "tcc_bootstrap.c"
 label=40;break;
 case 40: 
 label=41;break;
 case 41: 
 label=42;break;
 case 42: 
 STACKTOP=sp;return; //@line 6202 "tcc_bootstrap.c"
  default: assert(0, "bad label: " + label);
 }

}


function _gcall_or_jmp($is_jmp){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $r;
 var $rt;
 $1=$is_jmp;
 var $2=HEAP32[((9288)>>2)]; //@line 10191 "tcc_bootstrap.c"
 var $3=(($2+8)|0); //@line 10191 "tcc_bootstrap.c"
 var $4=HEAP16[(($3)>>1)]; //@line 10191 "tcc_bootstrap.c"
 var $5=($4&65535); //@line 10191 "tcc_bootstrap.c"
 var $6=$5&319; //@line 10191 "tcc_bootstrap.c"
 var $7=($6|0)==48; //@line 10191 "tcc_bootstrap.c"
 if($7){label=2;break;}else{label=4;break;} //@line 10191 "tcc_bootstrap.c"
 case 2: 
 var $9=HEAP32[((9288)>>2)]; //@line 10191 "tcc_bootstrap.c"
 var $10=(($9+8)|0); //@line 10191 "tcc_bootstrap.c"
 var $11=HEAP16[(($10)>>1)]; //@line 10191 "tcc_bootstrap.c"
 var $12=($11&65535); //@line 10191 "tcc_bootstrap.c"
 var $13=$12&512; //@line 10191 "tcc_bootstrap.c"
 var $14=($13|0)!=0; //@line 10191 "tcc_bootstrap.c"
 if($14){label=3;break;}else{label=4;break;} //@line 10191 "tcc_bootstrap.c"
 case 3: 
 var $16=HEAP32[((76672)>>2)]; //@line 10192 "tcc_bootstrap.c"
 var $17=HEAP32[((9288)>>2)]; //@line 10192 "tcc_bootstrap.c"
 var $18=(($17+32)|0); //@line 10192 "tcc_bootstrap.c"
 var $19=HEAP32[(($18)>>2)]; //@line 10192 "tcc_bootstrap.c"
 var $20=HEAP32[((11008)>>2)]; //@line 10192 "tcc_bootstrap.c"
 var $21=((($20)+(1))|0); //@line 10192 "tcc_bootstrap.c"
 _greloc($16,$19,$21,2); //@line 10192 "tcc_bootstrap.c"
 var $22=$1; //@line 10193 "tcc_bootstrap.c"
 var $23=((($22)+(232))|0); //@line 10193 "tcc_bootstrap.c"
 var $24=HEAP32[((9288)>>2)]; //@line 10193 "tcc_bootstrap.c"
 var $25=(($24+16)|0); //@line 10193 "tcc_bootstrap.c"
 var $26=$25; //@line 10193 "tcc_bootstrap.c"
 var $ld$0$0=(($26)|0);
 var $27$0=HEAP32[(($ld$0$0)>>2)];
 var $ld$1$1=(($26+4)|0);
 var $27$1=HEAP32[(($ld$1$1)>>2)];
 var $$etemp$2$0=4;
 var $$etemp$2$1=0;
 var $28$0=_i64Subtract($27$0,$27$1,$$etemp$2$0,$$etemp$2$1);var $28$1=tempRet0; //@line 10193 "tcc_bootstrap.c"
 var $29$0=$28$0;
 var $29=$29$0;
 var $30=_oad($23,$29); //@line 10193 "tcc_bootstrap.c"
 label=5;break; //@line 10194 "tcc_bootstrap.c"
 case 4: 
 var $32=_gv(1); //@line 10195 "tcc_bootstrap.c"
 $r=$32; //@line 10195 "tcc_bootstrap.c"
 _o(255); //@line 10196 "tcc_bootstrap.c"
 var $33=$r; //@line 10197 "tcc_bootstrap.c"
 var $34=((($33)+(208))|0); //@line 10197 "tcc_bootstrap.c"
 var $35=$1; //@line 10197 "tcc_bootstrap.c"
 var $36=$35<<4; //@line 10197 "tcc_bootstrap.c"
 var $37=((($34)+($36))|0); //@line 10197 "tcc_bootstrap.c"
 _o($37); //@line 10197 "tcc_bootstrap.c"
 label=5;break;
 case 5: 
 var $39=$1; //@line 10199 "tcc_bootstrap.c"
 var $40=($39|0)!=0; //@line 10199 "tcc_bootstrap.c"
 if($40){label=17;break;}else{label=6;break;} //@line 10199 "tcc_bootstrap.c"
 case 6: 
 var $42=HEAP32[((9288)>>2)]; //@line 10201 "tcc_bootstrap.c"
 var $43=(($42)|0); //@line 10201 "tcc_bootstrap.c"
 var $44=(($43+4)|0); //@line 10201 "tcc_bootstrap.c"
 var $45=HEAP32[(($44)>>2)]; //@line 10201 "tcc_bootstrap.c"
 var $46=(($45+16)|0); //@line 10201 "tcc_bootstrap.c"
 var $47=(($46)|0); //@line 10201 "tcc_bootstrap.c"
 var $48=HEAP32[(($47)>>2)]; //@line 10201 "tcc_bootstrap.c"
 $rt=$48; //@line 10201 "tcc_bootstrap.c"
 var $49=$rt; //@line 10202 "tcc_bootstrap.c"
 var $50=$49&15; //@line 10202 "tcc_bootstrap.c"
 if(($50|0)==2){ label=11;break;}else if(($50|0)==1){ label=7;break;}else{label=15;break;}
 case 7: 
 var $52=$rt; //@line 10204 "tcc_bootstrap.c"
 var $53=$52&16; //@line 10204 "tcc_bootstrap.c"
 var $54=($53|0)!=0; //@line 10204 "tcc_bootstrap.c"
 if($54){label=8;break;}else{label=9;break;} //@line 10204 "tcc_bootstrap.c"
 case 8: 
 _o(12629519); //@line 10205 "tcc_bootstrap.c"
 label=10;break; //@line 10206 "tcc_bootstrap.c"
 case 9: 
 _o(12631567); //@line 10208 "tcc_bootstrap.c"
 label=10;break;
 case 10: 
 label=16;break; //@line 10210 "tcc_bootstrap.c"
 case 11: 
 var $59=$rt; //@line 10212 "tcc_bootstrap.c"
 var $60=$59&16; //@line 10212 "tcc_bootstrap.c"
 var $61=($60|0)!=0; //@line 10212 "tcc_bootstrap.c"
 if($61){label=12;break;}else{label=13;break;} //@line 10212 "tcc_bootstrap.c"
 case 12: 
 _o(12629775); //@line 10213 "tcc_bootstrap.c"
 label=14;break; //@line 10214 "tcc_bootstrap.c"
 case 13: 
 _o(12631823); //@line 10216 "tcc_bootstrap.c"
 label=14;break;
 case 14: 
 label=16;break; //@line 10218 "tcc_bootstrap.c"
 case 15: 
 label=16;break; //@line 10220 "tcc_bootstrap.c"
 case 16: 
 label=17;break; //@line 10222 "tcc_bootstrap.c"
 case 17: 
 STACKTOP=sp;return; //@line 10223 "tcc_bootstrap.c"
  default: assert(0, "bad label: " + label);
 }

}


function _gadd_sp($val){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 $1=$val;
 var $2=$1; //@line 10181 "tcc_bootstrap.c"
 var $3=$1; //@line 10181 "tcc_bootstrap.c"
 var $4=(($3)&255); //@line 10181 "tcc_bootstrap.c"
 var $5=(($4<<24)>>24); //@line 10181 "tcc_bootstrap.c"
 var $6=($2|0)==($5|0); //@line 10181 "tcc_bootstrap.c"
 if($6){label=2;break;}else{label=3;break;} //@line 10181 "tcc_bootstrap.c"
 case 2: 
 _o(50307); //@line 10182 "tcc_bootstrap.c"
 var $8=$1; //@line 10183 "tcc_bootstrap.c"
 _g($8); //@line 10183 "tcc_bootstrap.c"
 label=4;break; //@line 10184 "tcc_bootstrap.c"
 case 3: 
 var $10=$1; //@line 10185 "tcc_bootstrap.c"
 var $11=_oad(50305,$10); //@line 10185 "tcc_bootstrap.c"
 label=4;break;
 case 4: 
 STACKTOP=sp;return; //@line 10187 "tcc_bootstrap.c"
  default: assert(0, "bad label: " + label);
 }

}


function _gen_assign_cast($dt){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+512)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $st;
 var $type1;
 var $type2;
 var $buf1=sp;
 var $buf2=(sp)+(256);
 var $dbt;
 var $sbt;
 $1=$dt;
 var $2=HEAP32[((9288)>>2)]; //@line 6033 "tcc_bootstrap.c"
 var $3=(($2)|0); //@line 6033 "tcc_bootstrap.c"
 $st=$3; //@line 6033 "tcc_bootstrap.c"
 var $4=$1; //@line 6034 "tcc_bootstrap.c"
 var $5=(($4)|0); //@line 6034 "tcc_bootstrap.c"
 var $6=HEAP32[(($5)>>2)]; //@line 6034 "tcc_bootstrap.c"
 var $7=$6&15; //@line 6034 "tcc_bootstrap.c"
 $dbt=$7; //@line 6034 "tcc_bootstrap.c"
 var $8=$st; //@line 6035 "tcc_bootstrap.c"
 var $9=(($8)|0); //@line 6035 "tcc_bootstrap.c"
 var $10=HEAP32[(($9)>>2)]; //@line 6035 "tcc_bootstrap.c"
 var $11=$10&15; //@line 6035 "tcc_bootstrap.c"
 $sbt=$11; //@line 6035 "tcc_bootstrap.c"
 var $12=$sbt; //@line 6036 "tcc_bootstrap.c"
 var $13=($12|0)==0; //@line 6036 "tcc_bootstrap.c"
 if($13){label=3;break;}else{label=2;break;} //@line 6036 "tcc_bootstrap.c"
 case 2: 
 var $15=$dbt; //@line 6036 "tcc_bootstrap.c"
 var $16=($15|0)==0; //@line 6036 "tcc_bootstrap.c"
 if($16){label=3;break;}else{label=8;break;} //@line 6036 "tcc_bootstrap.c"
 case 3: 
 var $18=$sbt; //@line 6037 "tcc_bootstrap.c"
 var $19=($18|0)==0; //@line 6037 "tcc_bootstrap.c"
 if($19){label=4;break;}else{label=6;break;} //@line 6037 "tcc_bootstrap.c"
 case 4: 
 var $21=$dbt; //@line 6037 "tcc_bootstrap.c"
 var $22=($21|0)==0; //@line 6037 "tcc_bootstrap.c"
 if($22){label=5;break;}else{label=6;break;} //@line 6037 "tcc_bootstrap.c"
 case 5: 
 label=7;break; //@line 6037 "tcc_bootstrap.c"
 case 6: 
 _tcc_error(9048,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs; //@line 6040 "tcc_bootstrap.c"
 label=7;break;
 case 7: 
 label=8;break; //@line 6041 "tcc_bootstrap.c"
 case 8: 
 var $27=$1; //@line 6042 "tcc_bootstrap.c"
 var $28=(($27)|0); //@line 6042 "tcc_bootstrap.c"
 var $29=HEAP32[(($28)>>2)]; //@line 6042 "tcc_bootstrap.c"
 var $30=$29&256; //@line 6042 "tcc_bootstrap.c"
 var $31=($30|0)!=0; //@line 6042 "tcc_bootstrap.c"
 if($31){label=9;break;}else{label=10;break;} //@line 6042 "tcc_bootstrap.c"
 case 9: 
 _tcc_warning(9080,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs; //@line 6043 "tcc_bootstrap.c"
 label=10;break; //@line 6043 "tcc_bootstrap.c"
 case 10: 
 var $34=$dbt; //@line 6044 "tcc_bootstrap.c"
 switch(($34|0)){case 5:{ label=11;break;}case 1:case 2:case 3:case 4:{ label=38;break;}case 7:{ label=45;break;}default:{label=50;break;}}break;
 case 11: 
 var $36=HEAP32[((9288)>>2)]; //@line 6046 "tcc_bootstrap.c"
 var $37=_is_null_pointer($36); //@line 6046 "tcc_bootstrap.c"
 var $38=($37|0)!=0; //@line 6046 "tcc_bootstrap.c"
 if($38){label=12;break;}else{label=13;break;} //@line 6046 "tcc_bootstrap.c"
 case 12: 
 label=51;break; //@line 6047 "tcc_bootstrap.c"
 case 13: 
 var $41=$sbt; //@line 6048 "tcc_bootstrap.c"
 var $42=_is_integer_btype($41); //@line 6048 "tcc_bootstrap.c"
 var $43=($42|0)!=0; //@line 6048 "tcc_bootstrap.c"
 if($43){label=14;break;}else{label=15;break;} //@line 6048 "tcc_bootstrap.c"
 case 14: 
 _tcc_warning(8992,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs; //@line 6049 "tcc_bootstrap.c"
 label=51;break; //@line 6050 "tcc_bootstrap.c"
 case 15: 
 var $46=$1; //@line 6052 "tcc_bootstrap.c"
 var $47=_pointed_type($46); //@line 6052 "tcc_bootstrap.c"
 $type1=$47; //@line 6052 "tcc_bootstrap.c"
 var $48=$sbt; //@line 6053 "tcc_bootstrap.c"
 var $49=($48|0)==6; //@line 6053 "tcc_bootstrap.c"
 if($49){label=16;break;}else{label=20;break;} //@line 6053 "tcc_bootstrap.c"
 case 16: 
 var $51=$type1; //@line 6054 "tcc_bootstrap.c"
 var $52=(($51)|0); //@line 6054 "tcc_bootstrap.c"
 var $53=HEAP32[(($52)>>2)]; //@line 6054 "tcc_bootstrap.c"
 var $54=$53&15; //@line 6054 "tcc_bootstrap.c"
 var $55=($54|0)!=0; //@line 6054 "tcc_bootstrap.c"
 if($55){label=17;break;}else{label=19;break;} //@line 6054 "tcc_bootstrap.c"
 case 17: 
 var $57=$1; //@line 6055 "tcc_bootstrap.c"
 var $58=_pointed_type($57); //@line 6055 "tcc_bootstrap.c"
 var $59=$st; //@line 6055 "tcc_bootstrap.c"
 var $60=_is_compatible_types($58,$59); //@line 6055 "tcc_bootstrap.c"
 var $61=($60|0)!=0; //@line 6055 "tcc_bootstrap.c"
 if($61){label=19;break;}else{label=18;break;} //@line 6055 "tcc_bootstrap.c"
 case 18: 
 _tcc_warning(8944,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs; //@line 6056 "tcc_bootstrap.c"
 label=19;break; //@line 6056 "tcc_bootstrap.c"
 case 19: 
 label=51;break; //@line 6057 "tcc_bootstrap.c"
 case 20: 
 var $65=$sbt; //@line 6059 "tcc_bootstrap.c"
 var $66=($65|0)!=5; //@line 6059 "tcc_bootstrap.c"
 if($66){label=21;break;}else{label=22;break;} //@line 6059 "tcc_bootstrap.c"
 case 21: 
 label=48;break; //@line 6060 "tcc_bootstrap.c"
 case 22: 
 var $69=$st; //@line 6061 "tcc_bootstrap.c"
 var $70=_pointed_type($69); //@line 6061 "tcc_bootstrap.c"
 $type2=$70; //@line 6061 "tcc_bootstrap.c"
 var $71=$type1; //@line 6062 "tcc_bootstrap.c"
 var $72=(($71)|0); //@line 6062 "tcc_bootstrap.c"
 var $73=HEAP32[(($72)>>2)]; //@line 6062 "tcc_bootstrap.c"
 var $74=$73&15; //@line 6062 "tcc_bootstrap.c"
 var $75=($74|0)==0; //@line 6062 "tcc_bootstrap.c"
 if($75){label=24;break;}else{label=23;break;} //@line 6062 "tcc_bootstrap.c"
 case 23: 
 var $77=$type2; //@line 6062 "tcc_bootstrap.c"
 var $78=(($77)|0); //@line 6062 "tcc_bootstrap.c"
 var $79=HEAP32[(($78)>>2)]; //@line 6062 "tcc_bootstrap.c"
 var $80=$79&15; //@line 6062 "tcc_bootstrap.c"
 var $81=($80|0)==0; //@line 6062 "tcc_bootstrap.c"
 if($81){label=24;break;}else{label=25;break;} //@line 6062 "tcc_bootstrap.c"
 case 24: 
 label=32;break; //@line 6064 "tcc_bootstrap.c"
 case 25: 
 var $84=$type1; //@line 6065 "tcc_bootstrap.c"
 var $85=$type2; //@line 6065 "tcc_bootstrap.c"
 var $86=_is_compatible_unqualified_types($84,$85); //@line 6065 "tcc_bootstrap.c"
 var $87=($86|0)!=0; //@line 6065 "tcc_bootstrap.c"
 if($87){label=31;break;}else{label=26;break;} //@line 6065 "tcc_bootstrap.c"
 case 26: 
 var $89=$type1; //@line 6066 "tcc_bootstrap.c"
 var $90=(($89)|0); //@line 6066 "tcc_bootstrap.c"
 var $91=HEAP32[(($90)>>2)]; //@line 6066 "tcc_bootstrap.c"
 var $92=$91&2063; //@line 6066 "tcc_bootstrap.c"
 var $93=$type2; //@line 6066 "tcc_bootstrap.c"
 var $94=(($93)|0); //@line 6066 "tcc_bootstrap.c"
 var $95=HEAP32[(($94)>>2)]; //@line 6066 "tcc_bootstrap.c"
 var $96=$95&2063; //@line 6066 "tcc_bootstrap.c"
 var $97=($92|0)!=($96|0); //@line 6066 "tcc_bootstrap.c"
 if($97){label=29;break;}else{label=27;break;} //@line 6066 "tcc_bootstrap.c"
 case 27: 
 var $99=$type1; //@line 6067 "tcc_bootstrap.c"
 var $100=(($99)|0); //@line 6067 "tcc_bootstrap.c"
 var $101=HEAP32[(($100)>>2)]; //@line 6067 "tcc_bootstrap.c"
 var $102=_IS_ENUM($101); //@line 6067 "tcc_bootstrap.c"
 var $103=($102|0)!=0; //@line 6067 "tcc_bootstrap.c"
 if($103){label=29;break;}else{label=28;break;} //@line 6067 "tcc_bootstrap.c"
 case 28: 
 var $105=$type2; //@line 6067 "tcc_bootstrap.c"
 var $106=(($105)|0); //@line 6067 "tcc_bootstrap.c"
 var $107=HEAP32[(($106)>>2)]; //@line 6067 "tcc_bootstrap.c"
 var $108=_IS_ENUM($107); //@line 6067 "tcc_bootstrap.c"
 var $109=($108|0)!=0; //@line 6067 "tcc_bootstrap.c"
 if($109){label=29;break;}else{label=30;break;} //@line 6067 "tcc_bootstrap.c"
 case 29: 
 _tcc_warning(8944,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs; //@line 6069 "tcc_bootstrap.c"
 label=30;break; //@line 6069 "tcc_bootstrap.c"
 case 30: 
 label=31;break; //@line 6070 "tcc_bootstrap.c"
 case 31: 
 label=32;break;
 case 32: 
 var $114=$type1; //@line 6072 "tcc_bootstrap.c"
 var $115=(($114)|0); //@line 6072 "tcc_bootstrap.c"
 var $116=HEAP32[(($115)>>2)]; //@line 6072 "tcc_bootstrap.c"
 var $117=$116&256; //@line 6072 "tcc_bootstrap.c"
 var $118=($117|0)!=0; //@line 6072 "tcc_bootstrap.c"
 if($118){label=34;break;}else{label=33;break;} //@line 6072 "tcc_bootstrap.c"
 case 33: 
 var $120=$type2; //@line 6072 "tcc_bootstrap.c"
 var $121=(($120)|0); //@line 6072 "tcc_bootstrap.c"
 var $122=HEAP32[(($121)>>2)]; //@line 6072 "tcc_bootstrap.c"
 var $123=$122&256; //@line 6072 "tcc_bootstrap.c"
 var $124=($123|0)!=0; //@line 6072 "tcc_bootstrap.c"
 if($124){label=36;break;}else{label=34;break;} //@line 6072 "tcc_bootstrap.c"
 case 34: 
 var $126=$type1; //@line 6072 "tcc_bootstrap.c"
 var $127=(($126)|0); //@line 6072 "tcc_bootstrap.c"
 var $128=HEAP32[(($127)>>2)]; //@line 6072 "tcc_bootstrap.c"
 var $129=$128&512; //@line 6072 "tcc_bootstrap.c"
 var $130=($129|0)!=0; //@line 6072 "tcc_bootstrap.c"
 if($130){label=37;break;}else{label=35;break;} //@line 6072 "tcc_bootstrap.c"
 case 35: 
 var $132=$type2; //@line 6072 "tcc_bootstrap.c"
 var $133=(($132)|0); //@line 6072 "tcc_bootstrap.c"
 var $134=HEAP32[(($133)>>2)]; //@line 6072 "tcc_bootstrap.c"
 var $135=$134&512; //@line 6072 "tcc_bootstrap.c"
 var $136=($135|0)!=0; //@line 6072 "tcc_bootstrap.c"
 if($136){label=36;break;}else{label=37;break;} //@line 6072 "tcc_bootstrap.c"
 case 36: 
 _tcc_warning(8888,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs; //@line 6074 "tcc_bootstrap.c"
 label=37;break; //@line 6074 "tcc_bootstrap.c"
 case 37: 
 label=50;break; //@line 6075 "tcc_bootstrap.c"
 case 38: 
 var $140=$sbt; //@line 6080 "tcc_bootstrap.c"
 var $141=($140|0)==5; //@line 6080 "tcc_bootstrap.c"
 if($141){label=40;break;}else{label=39;break;} //@line 6080 "tcc_bootstrap.c"
 case 39: 
 var $143=$sbt; //@line 6080 "tcc_bootstrap.c"
 var $144=($143|0)==6; //@line 6080 "tcc_bootstrap.c"
 if($144){label=40;break;}else{label=41;break;} //@line 6080 "tcc_bootstrap.c"
 case 40: 
 _tcc_warning(8832,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs; //@line 6081 "tcc_bootstrap.c"
 label=44;break; //@line 6082 "tcc_bootstrap.c"
 case 41: 
 var $147=$sbt; //@line 6082 "tcc_bootstrap.c"
 var $148=($147|0)==7; //@line 6082 "tcc_bootstrap.c"
 if($148){label=42;break;}else{label=43;break;} //@line 6082 "tcc_bootstrap.c"
 case 42: 
 label=46;break; //@line 6083 "tcc_bootstrap.c"
 case 43: 
 label=44;break;
 case 44: 
 label=50;break; //@line 6085 "tcc_bootstrap.c"
 case 45: 
 label=46;break; //@line 6085 "tcc_bootstrap.c"
 case 46: 
 var $154=$1; //@line 6088 "tcc_bootstrap.c"
 var $155=$st; //@line 6088 "tcc_bootstrap.c"
 var $156=_is_compatible_unqualified_types($154,$155); //@line 6088 "tcc_bootstrap.c"
 var $157=($156|0)!=0; //@line 6088 "tcc_bootstrap.c"
 if($157){label=49;break;}else{label=47;break;} //@line 6088 "tcc_bootstrap.c"
 case 47: 
 label=48;break; //@line 6088 "tcc_bootstrap.c"
 case 48: 
 var $160=(($buf1)|0); //@line 6090 "tcc_bootstrap.c"
 var $161=$st; //@line 6090 "tcc_bootstrap.c"
 _type_to_str($160,256,$161,0); //@line 6090 "tcc_bootstrap.c"
 var $162=(($buf2)|0); //@line 6091 "tcc_bootstrap.c"
 var $163=$1; //@line 6091 "tcc_bootstrap.c"
 _type_to_str($162,256,$163,0); //@line 6091 "tcc_bootstrap.c"
 var $164=(($buf1)|0); //@line 6092 "tcc_bootstrap.c"
 var $165=(($buf2)|0); //@line 6092 "tcc_bootstrap.c"
 _tcc_error(8800,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$164,HEAP32[(((tempVarArgs)+(8))>>2)]=$165,tempVarArgs)); STACKTOP=tempVarArgs; //@line 6092 "tcc_bootstrap.c"
 label=49;break; //@line 6093 "tcc_bootstrap.c"
 case 49: 
 label=50;break; //@line 6094 "tcc_bootstrap.c"
 case 50: 
 label=51;break; //@line 6095 "tcc_bootstrap.c"
 case 51: 
 var $169=$1; //@line 6097 "tcc_bootstrap.c"
 _gen_cast($169); //@line 6097 "tcc_bootstrap.c"
 STACKTOP=sp;return; //@line 6098 "tcc_bootstrap.c"
  default: assert(0, "bad label: " + label);
 }

}


function _adjust_bf($sv,$bit_pos,$bit_size){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $t;
 $2=$sv;
 $3=$bit_pos;
 $4=$bit_size;
 var $5=$2; //@line 4781 "tcc_bootstrap.c"
 var $6=(($5)|0); //@line 4781 "tcc_bootstrap.c"
 var $7=(($6+4)|0); //@line 4781 "tcc_bootstrap.c"
 var $8=HEAP32[(($7)>>2)]; //@line 4781 "tcc_bootstrap.c"
 var $9=0==($8|0); //@line 4781 "tcc_bootstrap.c"
 if($9){label=2;break;}else{label=3;break;} //@line 4781 "tcc_bootstrap.c"
 case 2: 
 $1=0; //@line 4782 "tcc_bootstrap.c"
 label=7;break; //@line 4782 "tcc_bootstrap.c"
 case 3: 
 var $12=$2; //@line 4783 "tcc_bootstrap.c"
 var $13=(($12)|0); //@line 4783 "tcc_bootstrap.c"
 var $14=(($13+4)|0); //@line 4783 "tcc_bootstrap.c"
 var $15=HEAP32[(($14)>>2)]; //@line 4783 "tcc_bootstrap.c"
 var $16=(($15+8)|0); //@line 4783 "tcc_bootstrap.c"
 var $17=$16; //@line 4783 "tcc_bootstrap.c"
 var $18=(($17+4)|0); //@line 4783 "tcc_bootstrap.c"
 var $19=$18; //@line 4783 "tcc_bootstrap.c"
 var $20=HEAP32[(($19)>>2)]; //@line 4783 "tcc_bootstrap.c"
 $t=$20; //@line 4783 "tcc_bootstrap.c"
 var $21=$t; //@line 4784 "tcc_bootstrap.c"
 var $22=($21|0)!=-1; //@line 4784 "tcc_bootstrap.c"
 if($22){label=4;break;}else{label=6;break;} //@line 4784 "tcc_bootstrap.c"
 case 4: 
 var $24=$t; //@line 4784 "tcc_bootstrap.c"
 var $25=($24|0)!=7; //@line 4784 "tcc_bootstrap.c"
 if($25){label=5;break;}else{label=6;break;} //@line 4784 "tcc_bootstrap.c"
 case 5: 
 var $27=$2; //@line 4785 "tcc_bootstrap.c"
 var $28=(($27)|0); //@line 4785 "tcc_bootstrap.c"
 var $29=(($28)|0); //@line 4785 "tcc_bootstrap.c"
 var $30=HEAP32[(($29)>>2)]; //@line 4785 "tcc_bootstrap.c"
 var $31=$30&-16; //@line 4785 "tcc_bootstrap.c"
 var $32=$t; //@line 4785 "tcc_bootstrap.c"
 var $33=$31|$32; //@line 4785 "tcc_bootstrap.c"
 var $34=$2; //@line 4785 "tcc_bootstrap.c"
 var $35=(($34)|0); //@line 4785 "tcc_bootstrap.c"
 var $36=(($35)|0); //@line 4785 "tcc_bootstrap.c"
 HEAP32[(($36)>>2)]=$33; //@line 4785 "tcc_bootstrap.c"
 var $37=$2; //@line 4786 "tcc_bootstrap.c"
 var $38=(($37+8)|0); //@line 4786 "tcc_bootstrap.c"
 var $39=HEAP16[(($38)>>1)]; //@line 4786 "tcc_bootstrap.c"
 var $40=($39&65535); //@line 4786 "tcc_bootstrap.c"
 var $41=$40&-28673; //@line 4786 "tcc_bootstrap.c"
 var $42=$2; //@line 4786 "tcc_bootstrap.c"
 var $43=(($42)|0); //@line 4786 "tcc_bootstrap.c"
 var $44=(($43)|0); //@line 4786 "tcc_bootstrap.c"
 var $45=HEAP32[(($44)>>2)]; //@line 4786 "tcc_bootstrap.c"
 var $46=_lvalue_type($45); //@line 4786 "tcc_bootstrap.c"
 var $47=$41|$46; //@line 4786 "tcc_bootstrap.c"
 var $48=(($47)&65535); //@line 4786 "tcc_bootstrap.c"
 var $49=$2; //@line 4786 "tcc_bootstrap.c"
 var $50=(($49+8)|0); //@line 4786 "tcc_bootstrap.c"
 HEAP16[(($50)>>1)]=$48; //@line 4786 "tcc_bootstrap.c"
 label=6;break; //@line 4787 "tcc_bootstrap.c"
 case 6: 
 var $52=$t; //@line 4788 "tcc_bootstrap.c"
 $1=$52; //@line 4788 "tcc_bootstrap.c"
 label=7;break; //@line 4788 "tcc_bootstrap.c"
 case 7: 
 var $54=$1; //@line 4789 "tcc_bootstrap.c"
 STACKTOP=sp;return $54; //@line 4789 "tcc_bootstrap.c"
  default: assert(0, "bad label: " + label);
 }

}


function _store_packed_bf($bit_pos,$bit_size){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $bits;
 var $n;
 var $o;
 var $m;
 var $c;
 $1=$bit_pos;
 $2=$bit_size;
 var $3=HEAP32[((9288)>>2)]; //@line 4748 "tcc_bootstrap.c"
 var $4=(($3+8)|0); //@line 4748 "tcc_bootstrap.c"
 var $5=HEAP16[(($4)>>1)]; //@line 4748 "tcc_bootstrap.c"
 var $6=($5&65535); //@line 4748 "tcc_bootstrap.c"
 var $7=$6&831; //@line 4748 "tcc_bootstrap.c"
 var $8=($7|0)==48; //@line 4748 "tcc_bootstrap.c"
 var $9=($8&1); //@line 4748 "tcc_bootstrap.c"
 $c=$9; //@line 4748 "tcc_bootstrap.c"
 _vswap(); //@line 4749 "tcc_bootstrap.c"
 var $10=HEAP32[((9288)>>2)]; //@line 4750 "tcc_bootstrap.c"
 var $11=(($10+8)|0); //@line 4750 "tcc_bootstrap.c"
 var $12=HEAP16[(($11)>>1)]; //@line 4750 "tcc_bootstrap.c"
 var $13=($12&65535); //@line 4750 "tcc_bootstrap.c"
 _save_reg_upstack($13,1); //@line 4750 "tcc_bootstrap.c"
 $bits=0; //@line 4751 "tcc_bootstrap.c"
 var $14=$1; //@line 4751 "tcc_bootstrap.c"
 var $15=$14>>3; //@line 4751 "tcc_bootstrap.c"
 $o=$15; //@line 4751 "tcc_bootstrap.c"
 var $16=$1; //@line 4751 "tcc_bootstrap.c"
 var $17=$16&7; //@line 4751 "tcc_bootstrap.c"
 $1=$17; //@line 4751 "tcc_bootstrap.c"
 label=2;break; //@line 4752 "tcc_bootstrap.c"
 case 2: 
 var $19=$o; //@line 4753 "tcc_bootstrap.c"
 _incr_bf_adr($19); //@line 4753 "tcc_bootstrap.c"
 _vswap(); //@line 4754 "tcc_bootstrap.c"
 var $20=$c; //@line 4755 "tcc_bootstrap.c"
 var $21=($20|0)!=0; //@line 4755 "tcc_bootstrap.c"
 if($21){label=3;break;}else{label=4;break;} //@line 4755 "tcc_bootstrap.c"
 case 3: 
 _vdup(); //@line 4755 "tcc_bootstrap.c"
 label=5;break; //@line 4755 "tcc_bootstrap.c"
 case 4: 
 _gv_dup(); //@line 4755 "tcc_bootstrap.c"
 label=5;break; //@line 4755 "tcc_bootstrap.c"
 case 5: 
 _vrott(3); //@line 4756 "tcc_bootstrap.c"
 var $25=$bits; //@line 4757 "tcc_bootstrap.c"
 var $26=($25|0)!=0; //@line 4757 "tcc_bootstrap.c"
 if($26){label=6;break;}else{label=7;break;} //@line 4757 "tcc_bootstrap.c"
 case 6: 
 var $28=$bits; //@line 4758 "tcc_bootstrap.c"
 _vpushi($28); //@line 4758 "tcc_bootstrap.c"
 _gen_op(201); //@line 4758 "tcc_bootstrap.c"
 label=7;break; //@line 4758 "tcc_bootstrap.c"
 case 7: 
 var $30=$1; //@line 4759 "tcc_bootstrap.c"
 var $31=($30|0)!=0; //@line 4759 "tcc_bootstrap.c"
 if($31){label=8;break;}else{label=9;break;} //@line 4759 "tcc_bootstrap.c"
 case 8: 
 var $33=$1; //@line 4760 "tcc_bootstrap.c"
 _vpushi($33); //@line 4760 "tcc_bootstrap.c"
 _gen_op(1); //@line 4760 "tcc_bootstrap.c"
 label=9;break; //@line 4760 "tcc_bootstrap.c"
 case 9: 
 var $35=$1; //@line 4761 "tcc_bootstrap.c"
 var $36=(((8)-($35))|0); //@line 4761 "tcc_bootstrap.c"
 $n=$36; //@line 4761 "tcc_bootstrap.c"
 var $37=$n; //@line 4762 "tcc_bootstrap.c"
 var $38=$2; //@line 4762 "tcc_bootstrap.c"
 var $39=($37|0)>($38|0); //@line 4762 "tcc_bootstrap.c"
 if($39){label=10;break;}else{label=11;break;} //@line 4762 "tcc_bootstrap.c"
 case 10: 
 var $41=$2; //@line 4763 "tcc_bootstrap.c"
 $n=$41; //@line 4763 "tcc_bootstrap.c"
 label=11;break; //@line 4763 "tcc_bootstrap.c"
 case 11: 
 var $43=$n; //@line 4764 "tcc_bootstrap.c"
 var $44=($43|0)<8; //@line 4764 "tcc_bootstrap.c"
 if($44){label=12;break;}else{label=16;break;} //@line 4764 "tcc_bootstrap.c"
 case 12: 
 var $46=$n; //@line 4765 "tcc_bootstrap.c"
 var $47=1<<$46; //@line 4765 "tcc_bootstrap.c"
 var $48=((($47)-(1))|0); //@line 4765 "tcc_bootstrap.c"
 var $49=$1; //@line 4765 "tcc_bootstrap.c"
 var $50=$48<<$49; //@line 4765 "tcc_bootstrap.c"
 $m=$50; //@line 4765 "tcc_bootstrap.c"
 var $51=$m; //@line 4766 "tcc_bootstrap.c"
 _vpushi($51); //@line 4766 "tcc_bootstrap.c"
 _gen_op(38); //@line 4766 "tcc_bootstrap.c"
 var $52=HEAP32[((9288)>>2)]; //@line 4767 "tcc_bootstrap.c"
 var $53=((($52)-(40))|0); //@line 4767 "tcc_bootstrap.c"
 _vpushv($53); //@line 4767 "tcc_bootstrap.c"
 var $54=$m; //@line 4768 "tcc_bootstrap.c"
 var $55=$54&128; //@line 4768 "tcc_bootstrap.c"
 var $56=($55|0)!=0; //@line 4768 "tcc_bootstrap.c"
 if($56){label=13;break;}else{label=14;break;} //@line 4768 "tcc_bootstrap.c"
 case 13: 
 var $58=$m; //@line 4768 "tcc_bootstrap.c"
 var $59=$58^-1; //@line 4768 "tcc_bootstrap.c"
 var $60=$59&127; //@line 4768 "tcc_bootstrap.c"
 var $65=$60;label=15;break; //@line 4768 "tcc_bootstrap.c"
 case 14: 
 var $62=$m; //@line 4768 "tcc_bootstrap.c"
 var $63=$62^-1; //@line 4768 "tcc_bootstrap.c"
 var $65=$63;label=15;break; //@line 4768 "tcc_bootstrap.c"
 case 15: 
 var $65; //@line 4768 "tcc_bootstrap.c"
 _vpushi($65); //@line 4768 "tcc_bootstrap.c"
 _gen_op(38); //@line 4769 "tcc_bootstrap.c"
 _gen_op(124); //@line 4770 "tcc_bootstrap.c"
 label=16;break; //@line 4771 "tcc_bootstrap.c"
 case 16: 
 _vdup(); //@line 4772 "tcc_bootstrap.c"
 var $67=HEAP32[((9288)>>2)]; //@line 4772 "tcc_bootstrap.c"
 var $68=((($67)-(40))|0); //@line 4772 "tcc_bootstrap.c"
 var $69=HEAP32[((9288)>>2)]; //@line 4772 "tcc_bootstrap.c"
 var $70=((($69)-(80))|0); //@line 4772 "tcc_bootstrap.c"
 var $71=$68; //@line 4772 "tcc_bootstrap.c"
 var $72=$70; //@line 4772 "tcc_bootstrap.c"
 assert(40 % 1 === 0);HEAP32[(($71)>>2)]=HEAP32[(($72)>>2)];HEAP32[((($71)+(4))>>2)]=HEAP32[((($72)+(4))>>2)];HEAP32[((($71)+(8))>>2)]=HEAP32[((($72)+(8))>>2)];HEAP32[((($71)+(12))>>2)]=HEAP32[((($72)+(12))>>2)];HEAP32[((($71)+(16))>>2)]=HEAP32[((($72)+(16))>>2)];HEAP32[((($71)+(20))>>2)]=HEAP32[((($72)+(20))>>2)];HEAP32[((($71)+(24))>>2)]=HEAP32[((($72)+(24))>>2)];HEAP32[((($71)+(28))>>2)]=HEAP32[((($72)+(28))>>2)];HEAP32[((($71)+(32))>>2)]=HEAP32[((($72)+(32))>>2)];HEAP32[((($71)+(36))>>2)]=HEAP32[((($72)+(36))>>2)]; //@line 4772 "tcc_bootstrap.c"
 _vstore(); //@line 4773 "tcc_bootstrap.c"
 _vpop(); //@line 4773 "tcc_bootstrap.c"
 var $73=$n; //@line 4774 "tcc_bootstrap.c"
 var $74=$bits; //@line 4774 "tcc_bootstrap.c"
 var $75=((($74)+($73))|0); //@line 4774 "tcc_bootstrap.c"
 $bits=$75; //@line 4774 "tcc_bootstrap.c"
 var $76=$n; //@line 4774 "tcc_bootstrap.c"
 var $77=$2; //@line 4774 "tcc_bootstrap.c"
 var $78=((($77)-($76))|0); //@line 4774 "tcc_bootstrap.c"
 $2=$78; //@line 4774 "tcc_bootstrap.c"
 $1=0; //@line 4774 "tcc_bootstrap.c"
 $o=1; //@line 4774 "tcc_bootstrap.c"
 label=17;break; //@line 4775 "tcc_bootstrap.c"
 case 17: 
 var $80=$2; //@line 4775 "tcc_bootstrap.c"
 var $81=($80|0)!=0; //@line 4775 "tcc_bootstrap.c"
 if($81){label=2;break;}else{label=18;break;} //@line 4775 "tcc_bootstrap.c"
 case 18: 
 _vpop(); //@line 4776 "tcc_bootstrap.c"
 _vpop(); //@line 4776 "tcc_bootstrap.c"
 STACKTOP=sp;return; //@line 4777 "tcc_bootstrap.c"
  default: assert(0, "bad label: " + label);
 }

}


function _vpushll($v$0,$v$1){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1=sp;
 var $st$0$0=(($1)|0);
 HEAP32[(($st$0$0)>>2)]=$v$0;
 var $st$1$1=(($1+4)|0);
 HEAP32[(($st$1$1)>>2)]=$v$1;
 var $ld$2$0=(($1)|0);
 var $2$0=HEAP32[(($ld$2$0)>>2)];
 var $ld$3$1=(($1+4)|0);
 var $2$1=HEAP32[(($ld$3$1)>>2)];
 _vpush64(4,$2$0,$2$1);
 STACKTOP=sp;return; //@line 4453 "tcc_bootstrap.c"
}


function _vpush64($ty,$v$0,$v$1){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+32)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 var $2=sp;
 var $cval=(sp)+(8);
 var $ctype=(sp)+(24);
 $1=$ty;
 var $st$0$0=(($2)|0);
 HEAP32[(($st$0$0)>>2)]=$v$0;
 var $st$1$1=(($2+4)|0);
 HEAP32[(($st$1$1)>>2)]=$v$1;
 var $3=$1; //@line 4445 "tcc_bootstrap.c"
 var $4=(($ctype)|0); //@line 4445 "tcc_bootstrap.c"
 HEAP32[(($4)>>2)]=$3; //@line 4445 "tcc_bootstrap.c"
 var $5=(($ctype+4)|0); //@line 4446 "tcc_bootstrap.c"
 HEAP32[(($5)>>2)]=0; //@line 4446 "tcc_bootstrap.c"
 var $ld$2$0=(($2)|0);
 var $6$0=HEAP32[(($ld$2$0)>>2)];
 var $ld$3$1=(($2+4)|0);
 var $6$1=HEAP32[(($ld$3$1)>>2)];
 var $7=$cval; //@line 4447 "tcc_bootstrap.c"
 var $st$4$0=(($7)|0);
 HEAP32[(($st$4$0)>>2)]=$6$0;
 var $st$5$1=(($7+4)|0);
 HEAP32[(($st$5$1)>>2)]=$6$1;
 _vsetc($ctype,48,$cval); //@line 4448 "tcc_bootstrap.c"
 STACKTOP=sp;return; //@line 4449 "tcc_bootstrap.c"
}


function _vsetc($type,$r,$vc){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $v;
 $1=$type;
 $2=$r;
 $3=$vc;
 var $4=HEAP32[((9288)>>2)]; //@line 4385 "tcc_bootstrap.c"
 var $5=($4>>>0)>=87480; //@line 4385 "tcc_bootstrap.c"
 if($5){label=2;break;}else{label=3;break;} //@line 4385 "tcc_bootstrap.c"
 case 2: 
 _tcc_error(9120,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs; //@line 4386 "tcc_bootstrap.c"
 label=3;break; //@line 4386 "tcc_bootstrap.c"
 case 3: 
 var $8=HEAP32[((9288)>>2)]; //@line 4387 "tcc_bootstrap.c"
 var $9=($8>>>0)>=77280; //@line 4387 "tcc_bootstrap.c"
 if($9){label=4;break;}else{label=9;break;} //@line 4387 "tcc_bootstrap.c"
 case 4: 
 var $11=HEAP32[((10616)>>2)]; //@line 4387 "tcc_bootstrap.c"
 var $12=($11|0)!=0; //@line 4387 "tcc_bootstrap.c"
 if($12){label=9;break;}else{label=5;break;} //@line 4387 "tcc_bootstrap.c"
 case 5: 
 var $14=HEAP32[((9288)>>2)]; //@line 4388 "tcc_bootstrap.c"
 var $15=(($14+8)|0); //@line 4388 "tcc_bootstrap.c"
 var $16=HEAP16[(($15)>>1)]; //@line 4388 "tcc_bootstrap.c"
 var $17=($16&65535); //@line 4388 "tcc_bootstrap.c"
 var $18=$17&63; //@line 4388 "tcc_bootstrap.c"
 $v=$18; //@line 4388 "tcc_bootstrap.c"
 var $19=$v; //@line 4389 "tcc_bootstrap.c"
 var $20=($19|0)==51; //@line 4389 "tcc_bootstrap.c"
 if($20){label=7;break;}else{label=6;break;} //@line 4389 "tcc_bootstrap.c"
 case 6: 
 var $22=$v; //@line 4389 "tcc_bootstrap.c"
 var $23=$22&-2; //@line 4389 "tcc_bootstrap.c"
 var $24=($23|0)==52; //@line 4389 "tcc_bootstrap.c"
 if($24){label=7;break;}else{label=8;break;} //@line 4389 "tcc_bootstrap.c"
 case 7: 
 var $26=_gv(1); //@line 4390 "tcc_bootstrap.c"
 label=8;break; //@line 4390 "tcc_bootstrap.c"
 case 8: 
 label=9;break; //@line 4391 "tcc_bootstrap.c"
 case 9: 
 var $29=HEAP32[((9288)>>2)]; //@line 4392 "tcc_bootstrap.c"
 var $30=(($29+40)|0); //@line 4392 "tcc_bootstrap.c"
 HEAP32[((9288)>>2)]=$30; //@line 4392 "tcc_bootstrap.c"
 var $31=HEAP32[((9288)>>2)]; //@line 4393 "tcc_bootstrap.c"
 var $32=(($31)|0); //@line 4393 "tcc_bootstrap.c"
 var $33=$1; //@line 4393 "tcc_bootstrap.c"
 var $34=$32; //@line 4393 "tcc_bootstrap.c"
 var $35=$33; //@line 4393 "tcc_bootstrap.c"
 assert(8 % 1 === 0);HEAP32[(($34)>>2)]=HEAP32[(($35)>>2)];HEAP32[((($34)+(4))>>2)]=HEAP32[((($35)+(4))>>2)]; //@line 4393 "tcc_bootstrap.c"
 var $36=$2; //@line 4394 "tcc_bootstrap.c"
 var $37=(($36)&65535); //@line 4394 "tcc_bootstrap.c"
 var $38=HEAP32[((9288)>>2)]; //@line 4394 "tcc_bootstrap.c"
 var $39=(($38+8)|0); //@line 4394 "tcc_bootstrap.c"
 HEAP16[(($39)>>1)]=$37; //@line 4394 "tcc_bootstrap.c"
 var $40=HEAP32[((9288)>>2)]; //@line 4395 "tcc_bootstrap.c"
 var $41=(($40+10)|0); //@line 4395 "tcc_bootstrap.c"
 HEAP16[(($41)>>1)]=48; //@line 4395 "tcc_bootstrap.c"
 var $42=HEAP32[((9288)>>2)]; //@line 4396 "tcc_bootstrap.c"
 var $43=(($42+16)|0); //@line 4396 "tcc_bootstrap.c"
 var $44=$3; //@line 4396 "tcc_bootstrap.c"
 var $45=$43; //@line 4396 "tcc_bootstrap.c"
 var $46=$44; //@line 4396 "tcc_bootstrap.c"
 assert(16 % 1 === 0);HEAP32[(($45)>>2)]=HEAP32[(($46)>>2)];HEAP32[((($45)+(4))>>2)]=HEAP32[((($46)+(4))>>2)];HEAP32[((($45)+(8))>>2)]=HEAP32[((($46)+(8))>>2)];HEAP32[((($45)+(12))>>2)]=HEAP32[((($46)+(12))>>2)]; //@line 4396 "tcc_bootstrap.c"
 var $47=HEAP32[((9288)>>2)]; //@line 4397 "tcc_bootstrap.c"
 var $48=(($47+32)|0); //@line 4397 "tcc_bootstrap.c"
 HEAP32[(($48)>>2)]=0; //@line 4397 "tcc_bootstrap.c"
 STACKTOP=sp;return; //@line 4398 "tcc_bootstrap.c"
  default: assert(0, "bad label: " + label);
 }

}


function _incr_bf_adr($o){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 $1=$o;
 var $2=HEAP32[((9288)>>2)]; //@line 4705 "tcc_bootstrap.c"
 var $3=(($2)|0); //@line 4705 "tcc_bootstrap.c"
 var $4=$3; //@line 4705 "tcc_bootstrap.c"
 assert(8 % 1 === 0);HEAP32[(($4)>>2)]=HEAP32[((76728)>>2)];HEAP32[((($4)+(4))>>2)]=HEAP32[((76732)>>2)]; //@line 4705 "tcc_bootstrap.c"
 _gaddrof(); //@line 4706 "tcc_bootstrap.c"
 var $5=$1; //@line 4707 "tcc_bootstrap.c"
 _vpushi($5); //@line 4707 "tcc_bootstrap.c"
 _gen_op(43); //@line 4708 "tcc_bootstrap.c"
 var $6=HEAP32[((9288)>>2)]; //@line 4709 "tcc_bootstrap.c"
 var $7=(($6)|0); //@line 4709 "tcc_bootstrap.c"
 var $8=(($7)|0); //@line 4709 "tcc_bootstrap.c"
 var $9=HEAP32[(($8)>>2)]; //@line 4709 "tcc_bootstrap.c"
 var $10=$9&-48; //@line 4709 "tcc_bootstrap.c"
 var $11=$10|17; //@line 4709 "tcc_bootstrap.c"
 var $12=HEAP32[((9288)>>2)]; //@line 4709 "tcc_bootstrap.c"
 var $13=(($12)|0); //@line 4709 "tcc_bootstrap.c"
 var $14=(($13)|0); //@line 4709 "tcc_bootstrap.c"
 HEAP32[(($14)>>2)]=$11; //@line 4709 "tcc_bootstrap.c"
 var $15=HEAP32[((9288)>>2)]; //@line 4711 "tcc_bootstrap.c"
 var $16=(($15+8)|0); //@line 4711 "tcc_bootstrap.c"
 var $17=HEAP16[(($16)>>1)]; //@line 4711 "tcc_bootstrap.c"
 var $18=($17&65535); //@line 4711 "tcc_bootstrap.c"
 var $19=$18&-28673; //@line 4711 "tcc_bootstrap.c"
 var $20=$19|20736; //@line 4711 "tcc_bootstrap.c"
 var $21=(($20)&65535); //@line 4711 "tcc_bootstrap.c"
 var $22=HEAP32[((9288)>>2)]; //@line 4711 "tcc_bootstrap.c"
 var $23=(($22+8)|0); //@line 4711 "tcc_bootstrap.c"
 HEAP16[(($23)>>1)]=$21; //@line 4711 "tcc_bootstrap.c"
 STACKTOP=sp;return; //@line 4713 "tcc_bootstrap.c"
}


function _is_integer_btype($bt){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 $1=$bt;
 var $2=$1; //@line 5415 "tcc_bootstrap.c"
 var $3=($2|0)==1; //@line 5415 "tcc_bootstrap.c"
 if($3){var $14=1;label=5;break;}else{label=2;break;} //@line 5415 "tcc_bootstrap.c"
 case 2: 
 var $5=$1; //@line 5415 "tcc_bootstrap.c"
 var $6=($5|0)==2; //@line 5415 "tcc_bootstrap.c"
 if($6){var $14=1;label=5;break;}else{label=3;break;} //@line 5415 "tcc_bootstrap.c"
 case 3: 
 var $8=$1; //@line 5415 "tcc_bootstrap.c"
 var $9=($8|0)==3; //@line 5415 "tcc_bootstrap.c"
 if($9){var $14=1;label=5;break;}else{label=4;break;} //@line 5415 "tcc_bootstrap.c"
 case 4: 
 var $11=$1; //@line 5415 "tcc_bootstrap.c"
 var $12=($11|0)==4; //@line 5415 "tcc_bootstrap.c"
 var $14=$12;label=5;break; //@line 5415 "tcc_bootstrap.c"
 case 5: 
 var $14;
 var $15=($14&1); //@line 5415 "tcc_bootstrap.c"
 STACKTOP=sp;return $15; //@line 5415 "tcc_bootstrap.c"
  default: assert(0, "bad label: " + label);
 }

}


function _is_compatible_types($type1,$type2){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 var $2;
 $1=$type1;
 $2=$type2;
 var $3=$1; //@line 5907 "tcc_bootstrap.c"
 var $4=$2; //@line 5907 "tcc_bootstrap.c"
 var $5=_compare_types($3,$4,0); //@line 5907 "tcc_bootstrap.c"
 STACKTOP=sp;return $5; //@line 5907 "tcc_bootstrap.c"
}


function _is_compatible_unqualified_types($type1,$type2){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 var $2;
 $1=$type1;
 $2=$type2;
 var $3=$1; //@line 5911 "tcc_bootstrap.c"
 var $4=$2; //@line 5911 "tcc_bootstrap.c"
 var $5=_compare_types($3,$4,1); //@line 5911 "tcc_bootstrap.c"
 STACKTOP=sp;return $5; //@line 5911 "tcc_bootstrap.c"
}


function _type_to_str($buf,$buf_size,$type,$varstr){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+256)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $bt;
 var $v;
 var $t;
 var $s;
 var $sa;
 var $buf1=sp;
 var $tstr;
 $1=$buf;
 $2=$buf_size;
 $3=$type;
 $4=$varstr;
 var $5=$3; //@line 5920 "tcc_bootstrap.c"
 var $6=(($5)|0); //@line 5920 "tcc_bootstrap.c"
 var $7=HEAP32[(($6)>>2)]; //@line 5920 "tcc_bootstrap.c"
 $t=$7; //@line 5920 "tcc_bootstrap.c"
 var $8=$t; //@line 5921 "tcc_bootstrap.c"
 var $9=$8&15; //@line 5921 "tcc_bootstrap.c"
 $bt=$9; //@line 5921 "tcc_bootstrap.c"
 var $10=$1; //@line 5922 "tcc_bootstrap.c"
 var $11=(($10)|0); //@line 5922 "tcc_bootstrap.c"
 HEAP8[(($11)>>0)]=0; //@line 5922 "tcc_bootstrap.c"
 var $12=$t; //@line 5923 "tcc_bootstrap.c"
 var $13=$12&4096; //@line 5923 "tcc_bootstrap.c"
 var $14=($13|0)!=0; //@line 5923 "tcc_bootstrap.c"
 if($14){label=2;break;}else{label=3;break;} //@line 5923 "tcc_bootstrap.c"
 case 2: 
 var $16=$1; //@line 5924 "tcc_bootstrap.c"
 var $17=$2; //@line 5924 "tcc_bootstrap.c"
 var $18=_pstrcat($16,$17,8776); //@line 5924 "tcc_bootstrap.c"
 label=3;break; //@line 5924 "tcc_bootstrap.c"
 case 3: 
 var $20=$t; //@line 5925 "tcc_bootstrap.c"
 var $21=$20&8192; //@line 5925 "tcc_bootstrap.c"
 var $22=($21|0)!=0; //@line 5925 "tcc_bootstrap.c"
 if($22){label=4;break;}else{label=5;break;} //@line 5925 "tcc_bootstrap.c"
 case 4: 
 var $24=$1; //@line 5926 "tcc_bootstrap.c"
 var $25=$2; //@line 5926 "tcc_bootstrap.c"
 var $26=_pstrcat($24,$25,8768); //@line 5926 "tcc_bootstrap.c"
 label=5;break; //@line 5926 "tcc_bootstrap.c"
 case 5: 
 var $28=$t; //@line 5927 "tcc_bootstrap.c"
 var $29=$28&16384; //@line 5927 "tcc_bootstrap.c"
 var $30=($29|0)!=0; //@line 5927 "tcc_bootstrap.c"
 if($30){label=6;break;}else{label=7;break;} //@line 5927 "tcc_bootstrap.c"
 case 6: 
 var $32=$1; //@line 5928 "tcc_bootstrap.c"
 var $33=$2; //@line 5928 "tcc_bootstrap.c"
 var $34=_pstrcat($32,$33,8752); //@line 5928 "tcc_bootstrap.c"
 label=7;break; //@line 5928 "tcc_bootstrap.c"
 case 7: 
 var $36=$t; //@line 5929 "tcc_bootstrap.c"
 var $37=$36&32768; //@line 5929 "tcc_bootstrap.c"
 var $38=($37|0)!=0; //@line 5929 "tcc_bootstrap.c"
 if($38){label=8;break;}else{label=9;break;} //@line 5929 "tcc_bootstrap.c"
 case 8: 
 var $40=$1; //@line 5930 "tcc_bootstrap.c"
 var $41=$2; //@line 5930 "tcc_bootstrap.c"
 var $42=_pstrcat($40,$41,8744); //@line 5930 "tcc_bootstrap.c"
 label=9;break; //@line 5930 "tcc_bootstrap.c"
 case 9: 
 var $44=$t; //@line 5931 "tcc_bootstrap.c"
 var $45=$44&512; //@line 5931 "tcc_bootstrap.c"
 var $46=($45|0)!=0; //@line 5931 "tcc_bootstrap.c"
 if($46){label=10;break;}else{label=11;break;} //@line 5931 "tcc_bootstrap.c"
 case 10: 
 var $48=$1; //@line 5932 "tcc_bootstrap.c"
 var $49=$2; //@line 5932 "tcc_bootstrap.c"
 var $50=_pstrcat($48,$49,8728); //@line 5932 "tcc_bootstrap.c"
 label=11;break; //@line 5932 "tcc_bootstrap.c"
 case 11: 
 var $52=$t; //@line 5933 "tcc_bootstrap.c"
 var $53=$52&256; //@line 5933 "tcc_bootstrap.c"
 var $54=($53|0)!=0; //@line 5933 "tcc_bootstrap.c"
 if($54){label=12;break;}else{label=13;break;} //@line 5933 "tcc_bootstrap.c"
 case 12: 
 var $56=$1; //@line 5934 "tcc_bootstrap.c"
 var $57=$2; //@line 5934 "tcc_bootstrap.c"
 var $58=_pstrcat($56,$57,8720); //@line 5934 "tcc_bootstrap.c"
 label=13;break; //@line 5934 "tcc_bootstrap.c"
 case 13: 
 var $60=$t; //@line 5935 "tcc_bootstrap.c"
 var $61=$60&32; //@line 5935 "tcc_bootstrap.c"
 var $62=($61|0)!=0; //@line 5935 "tcc_bootstrap.c"
 if($62){label=14;break;}else{label=15;break;} //@line 5935 "tcc_bootstrap.c"
 case 14: 
 var $64=$bt; //@line 5935 "tcc_bootstrap.c"
 var $65=($64|0)==1; //@line 5935 "tcc_bootstrap.c"
 if($65){label=20;break;}else{label=15;break;} //@line 5935 "tcc_bootstrap.c"
 case 15: 
 var $67=$t; //@line 5935 "tcc_bootstrap.c"
 var $68=$67&16; //@line 5935 "tcc_bootstrap.c"
 var $69=($68|0)!=0; //@line 5935 "tcc_bootstrap.c"
 if($69){label=16;break;}else{label=21;break;} //@line 5935 "tcc_bootstrap.c"
 case 16: 
 var $71=$bt; //@line 5935 "tcc_bootstrap.c"
 var $72=($71|0)==2; //@line 5935 "tcc_bootstrap.c"
 if($72){label=19;break;}else{label=17;break;} //@line 5935 "tcc_bootstrap.c"
 case 17: 
 var $74=$bt; //@line 5935 "tcc_bootstrap.c"
 var $75=($74|0)==3; //@line 5935 "tcc_bootstrap.c"
 if($75){label=19;break;}else{label=18;break;} //@line 5935 "tcc_bootstrap.c"
 case 18: 
 var $77=$bt; //@line 5935 "tcc_bootstrap.c"
 var $78=($77|0)==4; //@line 5935 "tcc_bootstrap.c"
 if($78){label=19;break;}else{label=21;break;} //@line 5935 "tcc_bootstrap.c"
 case 19: 
 var $80=$t; //@line 5938 "tcc_bootstrap.c"
 var $81=_IS_ENUM($80); //@line 5938 "tcc_bootstrap.c"
 var $82=($81|0)!=0; //@line 5938 "tcc_bootstrap.c"
 if($82){label=21;break;}else{label=20;break;} //@line 5938 "tcc_bootstrap.c"
 case 20: 
 var $84=$1; //@line 5940 "tcc_bootstrap.c"
 var $85=$2; //@line 5940 "tcc_bootstrap.c"
 var $86=$t; //@line 5940 "tcc_bootstrap.c"
 var $87=$86&16; //@line 5940 "tcc_bootstrap.c"
 var $88=($87|0)!=0; //@line 5940 "tcc_bootstrap.c"
 var $89=($88?8704:8696); //@line 5940 "tcc_bootstrap.c"
 var $90=_pstrcat($84,$85,$89); //@line 5940 "tcc_bootstrap.c"
 label=21;break; //@line 5940 "tcc_bootstrap.c"
 case 21: 
 var $92=$1; //@line 5941 "tcc_bootstrap.c"
 var $93=_strlen($92); //@line 5941 "tcc_bootstrap.c"
 var $94=$2; //@line 5941 "tcc_bootstrap.c"
 var $95=((($94)-($93))|0); //@line 5941 "tcc_bootstrap.c"
 $2=$95; //@line 5941 "tcc_bootstrap.c"
 var $96=$1; //@line 5942 "tcc_bootstrap.c"
 var $97=_strlen($96); //@line 5942 "tcc_bootstrap.c"
 var $98=$1; //@line 5942 "tcc_bootstrap.c"
 var $99=(($98+$97)|0); //@line 5942 "tcc_bootstrap.c"
 $1=$99; //@line 5942 "tcc_bootstrap.c"
 var $100=$bt; //@line 5943 "tcc_bootstrap.c"
 switch(($100|0)){case 0:{ label=22;break;}case 11:{ label=23;break;}case 1:{ label=24;break;}case 2:{ label=25;break;}case 3:{ label=26;break;}case 4:{ label=27;break;}case 8:{ label=33;break;}case 9:{ label=34;break;}case 10:{ label=35;break;}case 7:{ label=37;break;}case 6:{ label=44;break;}case 5:{ label=50;break;}default:{label=62;break;}}break;
 case 22: 
 $tstr=8688; //@line 5945 "tcc_bootstrap.c"
 label=36;break; //@line 5946 "tcc_bootstrap.c"
 case 23: 
 $tstr=8680; //@line 5948 "tcc_bootstrap.c"
 label=36;break; //@line 5949 "tcc_bootstrap.c"
 case 24: 
 $tstr=8664; //@line 5951 "tcc_bootstrap.c"
 label=36;break; //@line 5952 "tcc_bootstrap.c"
 case 25: 
 $tstr=8656; //@line 5954 "tcc_bootstrap.c"
 label=36;break; //@line 5955 "tcc_bootstrap.c"
 case 26: 
 $tstr=5760; //@line 5957 "tcc_bootstrap.c"
 label=28;break; //@line 5958 "tcc_bootstrap.c"
 case 27: 
 $tstr=8632; //@line 5960 "tcc_bootstrap.c"
 label=28;break; //@line 5960 "tcc_bootstrap.c"
 case 28: 
 var $108=$t; //@line 5962 "tcc_bootstrap.c"
 var $109=$108&2048; //@line 5962 "tcc_bootstrap.c"
 var $110=($109|0)!=0; //@line 5962 "tcc_bootstrap.c"
 if($110){label=29;break;}else{label=30;break;} //@line 5962 "tcc_bootstrap.c"
 case 29: 
 $tstr=8624; //@line 5963 "tcc_bootstrap.c"
 label=30;break; //@line 5963 "tcc_bootstrap.c"
 case 30: 
 var $113=$t; //@line 5964 "tcc_bootstrap.c"
 var $114=_IS_ENUM($113); //@line 5964 "tcc_bootstrap.c"
 var $115=($114|0)!=0; //@line 5964 "tcc_bootstrap.c"
 if($115){label=32;break;}else{label=31;break;} //@line 5964 "tcc_bootstrap.c"
 case 31: 
 label=36;break; //@line 5965 "tcc_bootstrap.c"
 case 32: 
 $tstr=8616; //@line 5966 "tcc_bootstrap.c"
 label=40;break; //@line 5967 "tcc_bootstrap.c"
 case 33: 
 $tstr=8608; //@line 5969 "tcc_bootstrap.c"
 label=36;break; //@line 5970 "tcc_bootstrap.c"
 case 34: 
 $tstr=8600; //@line 5972 "tcc_bootstrap.c"
 label=36;break; //@line 5973 "tcc_bootstrap.c"
 case 35: 
 $tstr=8584; //@line 5975 "tcc_bootstrap.c"
 label=36;break; //@line 5975 "tcc_bootstrap.c"
 case 36: 
 var $122=$1; //@line 5977 "tcc_bootstrap.c"
 var $123=$2; //@line 5977 "tcc_bootstrap.c"
 var $124=$tstr; //@line 5977 "tcc_bootstrap.c"
 var $125=_pstrcat($122,$123,$124); //@line 5977 "tcc_bootstrap.c"
 label=62;break; //@line 5978 "tcc_bootstrap.c"
 case 37: 
 $tstr=8576; //@line 5980 "tcc_bootstrap.c"
 var $127=$t; //@line 5981 "tcc_bootstrap.c"
 var $128=$127&-1048433; //@line 5981 "tcc_bootstrap.c"
 var $129=($128|0)==1048583; //@line 5981 "tcc_bootstrap.c"
 if($129){label=38;break;}else{label=39;break;} //@line 5981 "tcc_bootstrap.c"
 case 38: 
 $tstr=8568; //@line 5982 "tcc_bootstrap.c"
 label=39;break; //@line 5982 "tcc_bootstrap.c"
 case 39: 
 label=40;break; //@line 5982 "tcc_bootstrap.c"
 case 40: 
 var $133=$1; //@line 5984 "tcc_bootstrap.c"
 var $134=$2; //@line 5984 "tcc_bootstrap.c"
 var $135=$tstr; //@line 5984 "tcc_bootstrap.c"
 var $136=_pstrcat($133,$134,$135); //@line 5984 "tcc_bootstrap.c"
 var $137=$3; //@line 5985 "tcc_bootstrap.c"
 var $138=(($137+4)|0); //@line 5985 "tcc_bootstrap.c"
 var $139=HEAP32[(($138)>>2)]; //@line 5985 "tcc_bootstrap.c"
 var $140=(($139)|0); //@line 5985 "tcc_bootstrap.c"
 var $141=HEAP32[(($140)>>2)]; //@line 5985 "tcc_bootstrap.c"
 var $142=$141&-1073741825; //@line 5985 "tcc_bootstrap.c"
 $v=$142; //@line 5985 "tcc_bootstrap.c"
 var $143=$v; //@line 5986 "tcc_bootstrap.c"
 var $144=($143|0)>=268435456; //@line 5986 "tcc_bootstrap.c"
 if($144){label=41;break;}else{label=42;break;} //@line 5986 "tcc_bootstrap.c"
 case 41: 
 var $146=$1; //@line 5987 "tcc_bootstrap.c"
 var $147=$2; //@line 5987 "tcc_bootstrap.c"
 var $148=_pstrcat($146,$147,8544); //@line 5987 "tcc_bootstrap.c"
 label=43;break; //@line 5987 "tcc_bootstrap.c"
 case 42: 
 var $150=$1; //@line 5989 "tcc_bootstrap.c"
 var $151=$2; //@line 5989 "tcc_bootstrap.c"
 var $152=$v; //@line 5989 "tcc_bootstrap.c"
 var $153=_get_tok_str($152,0); //@line 5989 "tcc_bootstrap.c"
 var $154=_pstrcat($150,$151,$153); //@line 5989 "tcc_bootstrap.c"
 label=43;break;
 case 43: 
 label=62;break; //@line 5990 "tcc_bootstrap.c"
 case 44: 
 var $157=$3; //@line 5992 "tcc_bootstrap.c"
 var $158=(($157+4)|0); //@line 5992 "tcc_bootstrap.c"
 var $159=HEAP32[(($158)>>2)]; //@line 5992 "tcc_bootstrap.c"
 $s=$159; //@line 5992 "tcc_bootstrap.c"
 var $160=$1; //@line 5993 "tcc_bootstrap.c"
 var $161=$2; //@line 5993 "tcc_bootstrap.c"
 var $162=$s; //@line 5993 "tcc_bootstrap.c"
 var $163=(($162+16)|0); //@line 5993 "tcc_bootstrap.c"
 var $164=$4; //@line 5993 "tcc_bootstrap.c"
 _type_to_str($160,$161,$163,$164); //@line 5993 "tcc_bootstrap.c"
 var $165=$1; //@line 5994 "tcc_bootstrap.c"
 var $166=$2; //@line 5994 "tcc_bootstrap.c"
 var $167=_pstrcat($165,$166,8536); //@line 5994 "tcc_bootstrap.c"
 var $168=$s; //@line 5995 "tcc_bootstrap.c"
 var $169=(($168+24)|0); //@line 5995 "tcc_bootstrap.c"
 var $170=$169; //@line 5995 "tcc_bootstrap.c"
 var $171=HEAP32[(($170)>>2)]; //@line 5995 "tcc_bootstrap.c"
 $sa=$171; //@line 5995 "tcc_bootstrap.c"
 label=45;break; //@line 5996 "tcc_bootstrap.c"
 case 45: 
 var $173=$sa; //@line 5996 "tcc_bootstrap.c"
 var $174=($173|0)!=0; //@line 5996 "tcc_bootstrap.c"
 if($174){label=46;break;}else{label=49;break;} //@line 5996 "tcc_bootstrap.c"
 case 46: 
 var $176=(($buf1)|0); //@line 5997 "tcc_bootstrap.c"
 var $177=$sa; //@line 5997 "tcc_bootstrap.c"
 var $178=(($177+16)|0); //@line 5997 "tcc_bootstrap.c"
 _type_to_str($176,256,$178,0); //@line 5997 "tcc_bootstrap.c"
 var $179=$1; //@line 5998 "tcc_bootstrap.c"
 var $180=$2; //@line 5998 "tcc_bootstrap.c"
 var $181=(($buf1)|0); //@line 5998 "tcc_bootstrap.c"
 var $182=_pstrcat($179,$180,$181); //@line 5998 "tcc_bootstrap.c"
 var $183=$sa; //@line 5999 "tcc_bootstrap.c"
 var $184=(($183+24)|0); //@line 5999 "tcc_bootstrap.c"
 var $185=$184; //@line 5999 "tcc_bootstrap.c"
 var $186=HEAP32[(($185)>>2)]; //@line 5999 "tcc_bootstrap.c"
 $sa=$186; //@line 5999 "tcc_bootstrap.c"
 var $187=$sa; //@line 6000 "tcc_bootstrap.c"
 var $188=($187|0)!=0; //@line 6000 "tcc_bootstrap.c"
 if($188){label=47;break;}else{label=48;break;} //@line 6000 "tcc_bootstrap.c"
 case 47: 
 var $190=$1; //@line 6001 "tcc_bootstrap.c"
 var $191=$2; //@line 6001 "tcc_bootstrap.c"
 var $192=_pstrcat($190,$191,8528); //@line 6001 "tcc_bootstrap.c"
 label=48;break; //@line 6001 "tcc_bootstrap.c"
 case 48: 
 label=45;break; //@line 6002 "tcc_bootstrap.c"
 case 49: 
 var $195=$1; //@line 6003 "tcc_bootstrap.c"
 var $196=$2; //@line 6003 "tcc_bootstrap.c"
 var $197=_pstrcat($195,$196,8520); //@line 6003 "tcc_bootstrap.c"
 label=65;break; //@line 6004 "tcc_bootstrap.c"
 case 50: 
 var $199=$3; //@line 6006 "tcc_bootstrap.c"
 var $200=(($199+4)|0); //@line 6006 "tcc_bootstrap.c"
 var $201=HEAP32[(($200)>>2)]; //@line 6006 "tcc_bootstrap.c"
 $s=$201; //@line 6006 "tcc_bootstrap.c"
 var $202=$t; //@line 6007 "tcc_bootstrap.c"
 var $203=$202&64; //@line 6007 "tcc_bootstrap.c"
 var $204=($203|0)!=0; //@line 6007 "tcc_bootstrap.c"
 if($204){label=51;break;}else{label=55;break;} //@line 6007 "tcc_bootstrap.c"
 case 51: 
 var $206=(($buf1)|0); //@line 6008 "tcc_bootstrap.c"
 var $207=$4; //@line 6008 "tcc_bootstrap.c"
 var $208=($207|0)!=0; //@line 6008 "tcc_bootstrap.c"
 if($208){label=52;break;}else{label=53;break;} //@line 6008 "tcc_bootstrap.c"
 case 52: 
 var $210=$4; //@line 6008 "tcc_bootstrap.c"
 var $213=$210;label=54;break; //@line 6008 "tcc_bootstrap.c"
 case 53: 
 var $213=76760;label=54;break; //@line 6008 "tcc_bootstrap.c"
 case 54: 
 var $213; //@line 6008 "tcc_bootstrap.c"
 var $214=$s; //@line 6008 "tcc_bootstrap.c"
 var $215=(($214+8)|0); //@line 6008 "tcc_bootstrap.c"
 var $216=$215; //@line 6008 "tcc_bootstrap.c"
 var $217=(($216)|0); //@line 6008 "tcc_bootstrap.c"
 var $218=HEAP32[(($217)>>2)]; //@line 6008 "tcc_bootstrap.c"
 var $219=_snprintf($206,256,8512,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$213,HEAP32[(((tempVarArgs)+(8))>>2)]=$218,tempVarArgs)); STACKTOP=tempVarArgs; //@line 6008 "tcc_bootstrap.c"
 var $220=$1; //@line 6009 "tcc_bootstrap.c"
 var $221=$2; //@line 6009 "tcc_bootstrap.c"
 var $222=$s; //@line 6009 "tcc_bootstrap.c"
 var $223=(($222+16)|0); //@line 6009 "tcc_bootstrap.c"
 var $224=(($buf1)|0); //@line 6009 "tcc_bootstrap.c"
 _type_to_str($220,$221,$223,$224); //@line 6009 "tcc_bootstrap.c"
 label=65;break; //@line 6010 "tcc_bootstrap.c"
 case 55: 
 var $226=(($buf1)|0); //@line 6012 "tcc_bootstrap.c"
 var $227=_pstrcpy($226,256,8504); //@line 6012 "tcc_bootstrap.c"
 var $228=$t; //@line 6013 "tcc_bootstrap.c"
 var $229=$228&256; //@line 6013 "tcc_bootstrap.c"
 var $230=($229|0)!=0; //@line 6013 "tcc_bootstrap.c"
 if($230){label=56;break;}else{label=57;break;} //@line 6013 "tcc_bootstrap.c"
 case 56: 
 var $232=(($buf1)|0); //@line 6014 "tcc_bootstrap.c"
 var $233=$2; //@line 6014 "tcc_bootstrap.c"
 var $234=_pstrcat($232,$233,8720); //@line 6014 "tcc_bootstrap.c"
 label=57;break; //@line 6014 "tcc_bootstrap.c"
 case 57: 
 var $236=$t; //@line 6015 "tcc_bootstrap.c"
 var $237=$236&512; //@line 6015 "tcc_bootstrap.c"
 var $238=($237|0)!=0; //@line 6015 "tcc_bootstrap.c"
 if($238){label=58;break;}else{label=59;break;} //@line 6015 "tcc_bootstrap.c"
 case 58: 
 var $240=(($buf1)|0); //@line 6016 "tcc_bootstrap.c"
 var $241=$2; //@line 6016 "tcc_bootstrap.c"
 var $242=_pstrcat($240,$241,8728); //@line 6016 "tcc_bootstrap.c"
 label=59;break; //@line 6016 "tcc_bootstrap.c"
 case 59: 
 var $244=$4; //@line 6017 "tcc_bootstrap.c"
 var $245=($244|0)!=0; //@line 6017 "tcc_bootstrap.c"
 if($245){label=60;break;}else{label=61;break;} //@line 6017 "tcc_bootstrap.c"
 case 60: 
 var $247=(($buf1)|0); //@line 6018 "tcc_bootstrap.c"
 var $248=$4; //@line 6018 "tcc_bootstrap.c"
 var $249=_pstrcat($247,256,$248); //@line 6018 "tcc_bootstrap.c"
 label=61;break; //@line 6018 "tcc_bootstrap.c"
 case 61: 
 var $251=$1; //@line 6019 "tcc_bootstrap.c"
 var $252=$2; //@line 6019 "tcc_bootstrap.c"
 var $253=$s; //@line 6019 "tcc_bootstrap.c"
 var $254=(($253+16)|0); //@line 6019 "tcc_bootstrap.c"
 var $255=(($buf1)|0); //@line 6019 "tcc_bootstrap.c"
 _type_to_str($251,$252,$254,$255); //@line 6019 "tcc_bootstrap.c"
 label=65;break; //@line 6020 "tcc_bootstrap.c"
 case 62: 
 var $257=$4; //@line 6022 "tcc_bootstrap.c"
 var $258=($257|0)!=0; //@line 6022 "tcc_bootstrap.c"
 if($258){label=63;break;}else{label=64;break;} //@line 6022 "tcc_bootstrap.c"
 case 63: 
 var $260=$1; //@line 6023 "tcc_bootstrap.c"
 var $261=$2; //@line 6023 "tcc_bootstrap.c"
 var $262=_pstrcat($260,$261,8496); //@line 6023 "tcc_bootstrap.c"
 var $263=$1; //@line 6024 "tcc_bootstrap.c"
 var $264=$2; //@line 6024 "tcc_bootstrap.c"
 var $265=$4; //@line 6024 "tcc_bootstrap.c"
 var $266=_pstrcat($263,$264,$265); //@line 6024 "tcc_bootstrap.c"
 label=64;break; //@line 6025 "tcc_bootstrap.c"
 case 64: 
 label=65;break; //@line 6025 "tcc_bootstrap.c"
 case 65: 
 STACKTOP=sp;return; //@line 6027 "tcc_bootstrap.c"
  default: assert(0, "bad label: " + label);
 }

}


function _compare_types($type1,$type2,$unqualified){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $bt1;
 var $t1;
 var $t2;
 $2=$type1;
 $3=$type2;
 $4=$unqualified;
 var $5=$2; //@line 5879 "tcc_bootstrap.c"
 var $6=(($5)|0); //@line 5879 "tcc_bootstrap.c"
 var $7=HEAP32[(($6)>>2)]; //@line 5879 "tcc_bootstrap.c"
 var $8=$7&987007; //@line 5879 "tcc_bootstrap.c"
 $t1=$8; //@line 5879 "tcc_bootstrap.c"
 var $9=$3; //@line 5880 "tcc_bootstrap.c"
 var $10=(($9)|0); //@line 5880 "tcc_bootstrap.c"
 var $11=HEAP32[(($10)>>2)]; //@line 5880 "tcc_bootstrap.c"
 var $12=$11&987007; //@line 5880 "tcc_bootstrap.c"
 $t2=$12; //@line 5880 "tcc_bootstrap.c"
 var $13=$4; //@line 5881 "tcc_bootstrap.c"
 var $14=($13|0)!=0; //@line 5881 "tcc_bootstrap.c"
 if($14){label=2;break;}else{label=3;break;} //@line 5881 "tcc_bootstrap.c"
 case 2: 
 var $16=$t1; //@line 5882 "tcc_bootstrap.c"
 var $17=$16&-769; //@line 5882 "tcc_bootstrap.c"
 $t1=$17; //@line 5882 "tcc_bootstrap.c"
 var $18=$t2; //@line 5883 "tcc_bootstrap.c"
 var $19=$18&-769; //@line 5883 "tcc_bootstrap.c"
 $t2=$19; //@line 5883 "tcc_bootstrap.c"
 label=3;break; //@line 5884 "tcc_bootstrap.c"
 case 3: 
 var $21=$t1; //@line 5885 "tcc_bootstrap.c"
 var $22=$21&15; //@line 5885 "tcc_bootstrap.c"
 var $23=($22|0)!=1; //@line 5885 "tcc_bootstrap.c"
 if($23){label=4;break;}else{label=5;break;} //@line 5885 "tcc_bootstrap.c"
 case 4: 
 var $25=$t1; //@line 5886 "tcc_bootstrap.c"
 var $26=$25&-33; //@line 5886 "tcc_bootstrap.c"
 $t1=$26; //@line 5886 "tcc_bootstrap.c"
 var $27=$t2; //@line 5887 "tcc_bootstrap.c"
 var $28=$27&-33; //@line 5887 "tcc_bootstrap.c"
 $t2=$28; //@line 5887 "tcc_bootstrap.c"
 label=5;break; //@line 5888 "tcc_bootstrap.c"
 case 5: 
 var $30=$t1; //@line 5889 "tcc_bootstrap.c"
 var $31=$t2; //@line 5889 "tcc_bootstrap.c"
 var $32=($30|0)!=($31|0); //@line 5889 "tcc_bootstrap.c"
 if($32){label=6;break;}else{label=7;break;} //@line 5889 "tcc_bootstrap.c"
 case 6: 
 $1=0; //@line 5890 "tcc_bootstrap.c"
 label=14;break; //@line 5890 "tcc_bootstrap.c"
 case 7: 
 var $35=$t1; //@line 5891 "tcc_bootstrap.c"
 var $36=$35&15; //@line 5891 "tcc_bootstrap.c"
 $bt1=$36; //@line 5891 "tcc_bootstrap.c"
 var $37=$bt1; //@line 5892 "tcc_bootstrap.c"
 var $38=($37|0)==5; //@line 5892 "tcc_bootstrap.c"
 if($38){label=8;break;}else{label=9;break;} //@line 5892 "tcc_bootstrap.c"
 case 8: 
 var $40=$2; //@line 5893 "tcc_bootstrap.c"
 var $41=_pointed_type($40); //@line 5893 "tcc_bootstrap.c"
 $2=$41; //@line 5893 "tcc_bootstrap.c"
 var $42=$3; //@line 5894 "tcc_bootstrap.c"
 var $43=_pointed_type($42); //@line 5894 "tcc_bootstrap.c"
 $3=$43; //@line 5894 "tcc_bootstrap.c"
 var $44=$2; //@line 5895 "tcc_bootstrap.c"
 var $45=$3; //@line 5895 "tcc_bootstrap.c"
 var $46=_is_compatible_types($44,$45); //@line 5895 "tcc_bootstrap.c"
 $1=$46; //@line 5895 "tcc_bootstrap.c"
 label=14;break; //@line 5895 "tcc_bootstrap.c"
 case 9: 
 var $48=$bt1; //@line 5896 "tcc_bootstrap.c"
 var $49=($48|0)==7; //@line 5896 "tcc_bootstrap.c"
 if($49){label=10;break;}else{label=11;break;} //@line 5896 "tcc_bootstrap.c"
 case 10: 
 var $51=$2; //@line 5897 "tcc_bootstrap.c"
 var $52=(($51+4)|0); //@line 5897 "tcc_bootstrap.c"
 var $53=HEAP32[(($52)>>2)]; //@line 5897 "tcc_bootstrap.c"
 var $54=$3; //@line 5897 "tcc_bootstrap.c"
 var $55=(($54+4)|0); //@line 5897 "tcc_bootstrap.c"
 var $56=HEAP32[(($55)>>2)]; //@line 5897 "tcc_bootstrap.c"
 var $57=($53|0)==($56|0); //@line 5897 "tcc_bootstrap.c"
 var $58=($57&1); //@line 5897 "tcc_bootstrap.c"
 $1=$58; //@line 5897 "tcc_bootstrap.c"
 label=14;break; //@line 5897 "tcc_bootstrap.c"
 case 11: 
 var $60=$bt1; //@line 5898 "tcc_bootstrap.c"
 var $61=($60|0)==6; //@line 5898 "tcc_bootstrap.c"
 if($61){label=12;break;}else{label=13;break;} //@line 5898 "tcc_bootstrap.c"
 case 12: 
 var $63=$2; //@line 5899 "tcc_bootstrap.c"
 var $64=$3; //@line 5899 "tcc_bootstrap.c"
 var $65=_is_compatible_func($63,$64); //@line 5899 "tcc_bootstrap.c"
 $1=$65; //@line 5899 "tcc_bootstrap.c"
 label=14;break; //@line 5899 "tcc_bootstrap.c"
 case 13: 
 $1=1; //@line 5901 "tcc_bootstrap.c"
 label=14;break; //@line 5901 "tcc_bootstrap.c"
 case 14: 
 var $68=$1; //@line 5903 "tcc_bootstrap.c"
 STACKTOP=sp;return $68; //@line 5903 "tcc_bootstrap.c"
  default: assert(0, "bad label: " + label);
 }

}


function _is_compatible_func($type1,$type2){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $s1;
 var $s2;
 $2=$type1;
 $3=$type2;
 var $4=$2; //@line 5854 "tcc_bootstrap.c"
 var $5=(($4+4)|0); //@line 5854 "tcc_bootstrap.c"
 var $6=HEAP32[(($5)>>2)]; //@line 5854 "tcc_bootstrap.c"
 $s1=$6; //@line 5854 "tcc_bootstrap.c"
 var $7=$3; //@line 5855 "tcc_bootstrap.c"
 var $8=(($7+4)|0); //@line 5855 "tcc_bootstrap.c"
 var $9=HEAP32[(($8)>>2)]; //@line 5855 "tcc_bootstrap.c"
 $s2=$9; //@line 5855 "tcc_bootstrap.c"
 var $10=$s1; //@line 5856 "tcc_bootstrap.c"
 var $11=(($10+16)|0); //@line 5856 "tcc_bootstrap.c"
 var $12=$s2; //@line 5856 "tcc_bootstrap.c"
 var $13=(($12+16)|0); //@line 5856 "tcc_bootstrap.c"
 var $14=_is_compatible_types($11,$13); //@line 5856 "tcc_bootstrap.c"
 var $15=($14|0)!=0; //@line 5856 "tcc_bootstrap.c"
 if($15){label=3;break;}else{label=2;break;} //@line 5856 "tcc_bootstrap.c"
 case 2: 
 $1=0; //@line 5857 "tcc_bootstrap.c"
 label=20;break; //@line 5857 "tcc_bootstrap.c"
 case 3: 
 var $18=$s1; //@line 5858 "tcc_bootstrap.c"
 var $19=(($18+8)|0); //@line 5858 "tcc_bootstrap.c"
 var $20=$19; //@line 5858 "tcc_bootstrap.c"
 var $21=(($20+4)|0); //@line 5858 "tcc_bootstrap.c"
 var $22=$21; //@line 5858 "tcc_bootstrap.c"
 var $23=$22; //@line 5858 "tcc_bootstrap.c"
 var $24=HEAP16[(($23)>>1)]; //@line 5858 "tcc_bootstrap.c"
 var $25=$24&7; //@line 5858 "tcc_bootstrap.c"
 var $26=($25&65535); //@line 5858 "tcc_bootstrap.c"
 var $27=$s2; //@line 5858 "tcc_bootstrap.c"
 var $28=(($27+8)|0); //@line 5858 "tcc_bootstrap.c"
 var $29=$28; //@line 5858 "tcc_bootstrap.c"
 var $30=(($29+4)|0); //@line 5858 "tcc_bootstrap.c"
 var $31=$30; //@line 5858 "tcc_bootstrap.c"
 var $32=$31; //@line 5858 "tcc_bootstrap.c"
 var $33=HEAP16[(($32)>>1)]; //@line 5858 "tcc_bootstrap.c"
 var $34=$33&7; //@line 5858 "tcc_bootstrap.c"
 var $35=($34&65535); //@line 5858 "tcc_bootstrap.c"
 var $36=($26|0)!=($35|0); //@line 5858 "tcc_bootstrap.c"
 if($36){label=4;break;}else{label=5;break;} //@line 5858 "tcc_bootstrap.c"
 case 4: 
 $1=0; //@line 5859 "tcc_bootstrap.c"
 label=20;break; //@line 5859 "tcc_bootstrap.c"
 case 5: 
 var $39=$s1; //@line 5860 "tcc_bootstrap.c"
 var $40=(($39+8)|0); //@line 5860 "tcc_bootstrap.c"
 var $41=$40; //@line 5860 "tcc_bootstrap.c"
 var $42=(($41+4)|0); //@line 5860 "tcc_bootstrap.c"
 var $43=$42; //@line 5860 "tcc_bootstrap.c"
 var $44=$43; //@line 5860 "tcc_bootstrap.c"
 var $45=HEAP16[(($44)>>1)]; //@line 5860 "tcc_bootstrap.c"
 var $46=($45&65535)>>>3; //@line 5860 "tcc_bootstrap.c"
 var $47=$46&3; //@line 5860 "tcc_bootstrap.c"
 var $48=($47&65535); //@line 5860 "tcc_bootstrap.c"
 var $49=($48|0)==2; //@line 5860 "tcc_bootstrap.c"
 if($49){label=7;break;}else{label=6;break;} //@line 5860 "tcc_bootstrap.c"
 case 6: 
 var $51=$s2; //@line 5860 "tcc_bootstrap.c"
 var $52=(($51+8)|0); //@line 5860 "tcc_bootstrap.c"
 var $53=$52; //@line 5860 "tcc_bootstrap.c"
 var $54=(($53+4)|0); //@line 5860 "tcc_bootstrap.c"
 var $55=$54; //@line 5860 "tcc_bootstrap.c"
 var $56=$55; //@line 5860 "tcc_bootstrap.c"
 var $57=HEAP16[(($56)>>1)]; //@line 5860 "tcc_bootstrap.c"
 var $58=($57&65535)>>>3; //@line 5860 "tcc_bootstrap.c"
 var $59=$58&3; //@line 5860 "tcc_bootstrap.c"
 var $60=($59&65535); //@line 5860 "tcc_bootstrap.c"
 var $61=($60|0)==2; //@line 5860 "tcc_bootstrap.c"
 if($61){label=7;break;}else{label=8;break;} //@line 5860 "tcc_bootstrap.c"
 case 7: 
 $1=1; //@line 5861 "tcc_bootstrap.c"
 label=20;break; //@line 5861 "tcc_bootstrap.c"
 case 8: 
 var $64=$s1; //@line 5862 "tcc_bootstrap.c"
 var $65=(($64+8)|0); //@line 5862 "tcc_bootstrap.c"
 var $66=$65; //@line 5862 "tcc_bootstrap.c"
 var $67=(($66+4)|0); //@line 5862 "tcc_bootstrap.c"
 var $68=$67; //@line 5862 "tcc_bootstrap.c"
 var $69=$68; //@line 5862 "tcc_bootstrap.c"
 var $70=HEAP16[(($69)>>1)]; //@line 5862 "tcc_bootstrap.c"
 var $71=($70&65535)>>>3; //@line 5862 "tcc_bootstrap.c"
 var $72=$71&3; //@line 5862 "tcc_bootstrap.c"
 var $73=($72&65535); //@line 5862 "tcc_bootstrap.c"
 var $74=$s2; //@line 5862 "tcc_bootstrap.c"
 var $75=(($74+8)|0); //@line 5862 "tcc_bootstrap.c"
 var $76=$75; //@line 5862 "tcc_bootstrap.c"
 var $77=(($76+4)|0); //@line 5862 "tcc_bootstrap.c"
 var $78=$77; //@line 5862 "tcc_bootstrap.c"
 var $79=$78; //@line 5862 "tcc_bootstrap.c"
 var $80=HEAP16[(($79)>>1)]; //@line 5862 "tcc_bootstrap.c"
 var $81=($80&65535)>>>3; //@line 5862 "tcc_bootstrap.c"
 var $82=$81&3; //@line 5862 "tcc_bootstrap.c"
 var $83=($82&65535); //@line 5862 "tcc_bootstrap.c"
 var $84=($73|0)!=($83|0); //@line 5862 "tcc_bootstrap.c"
 if($84){label=9;break;}else{label=10;break;} //@line 5862 "tcc_bootstrap.c"
 case 9: 
 $1=0; //@line 5863 "tcc_bootstrap.c"
 label=20;break; //@line 5863 "tcc_bootstrap.c"
 case 10: 
 label=11;break; //@line 5864 "tcc_bootstrap.c"
 case 11: 
 var $88=$s1; //@line 5864 "tcc_bootstrap.c"
 var $89=($88|0)!=0; //@line 5864 "tcc_bootstrap.c"
 if($89){label=12;break;}else{label=17;break;} //@line 5864 "tcc_bootstrap.c"
 case 12: 
 var $91=$s2; //@line 5865 "tcc_bootstrap.c"
 var $92=($91|0)==0; //@line 5865 "tcc_bootstrap.c"
 if($92){label=13;break;}else{label=14;break;} //@line 5865 "tcc_bootstrap.c"
 case 13: 
 $1=0; //@line 5866 "tcc_bootstrap.c"
 label=20;break; //@line 5866 "tcc_bootstrap.c"
 case 14: 
 var $95=$s1; //@line 5867 "tcc_bootstrap.c"
 var $96=(($95+16)|0); //@line 5867 "tcc_bootstrap.c"
 var $97=$s2; //@line 5867 "tcc_bootstrap.c"
 var $98=(($97+16)|0); //@line 5867 "tcc_bootstrap.c"
 var $99=_is_compatible_unqualified_types($96,$98); //@line 5867 "tcc_bootstrap.c"
 var $100=($99|0)!=0; //@line 5867 "tcc_bootstrap.c"
 if($100){label=16;break;}else{label=15;break;} //@line 5867 "tcc_bootstrap.c"
 case 15: 
 $1=0; //@line 5868 "tcc_bootstrap.c"
 label=20;break; //@line 5868 "tcc_bootstrap.c"
 case 16: 
 var $103=$s1; //@line 5869 "tcc_bootstrap.c"
 var $104=(($103+24)|0); //@line 5869 "tcc_bootstrap.c"
 var $105=$104; //@line 5869 "tcc_bootstrap.c"
 var $106=HEAP32[(($105)>>2)]; //@line 5869 "tcc_bootstrap.c"
 $s1=$106; //@line 5869 "tcc_bootstrap.c"
 var $107=$s2; //@line 5870 "tcc_bootstrap.c"
 var $108=(($107+24)|0); //@line 5870 "tcc_bootstrap.c"
 var $109=$108; //@line 5870 "tcc_bootstrap.c"
 var $110=HEAP32[(($109)>>2)]; //@line 5870 "tcc_bootstrap.c"
 $s2=$110; //@line 5870 "tcc_bootstrap.c"
 label=11;break; //@line 5871 "tcc_bootstrap.c"
 case 17: 
 var $112=$s2; //@line 5872 "tcc_bootstrap.c"
 var $113=($112|0)!=0; //@line 5872 "tcc_bootstrap.c"
 if($113){label=18;break;}else{label=19;break;} //@line 5872 "tcc_bootstrap.c"
 case 18: 
 $1=0; //@line 5873 "tcc_bootstrap.c"
 label=20;break; //@line 5873 "tcc_bootstrap.c"
 case 19: 
 $1=1; //@line 5874 "tcc_bootstrap.c"
 label=20;break; //@line 5874 "tcc_bootstrap.c"
 case 20: 
 var $117=$1; //@line 5874 "tcc_bootstrap.c"
 STACKTOP=sp;return $117; //@line 5874 "tcc_bootstrap.c"
  default: assert(0, "bad label: " + label);
 }

}


function _vrote($e,$n){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+40)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $i;
 var $tmp=sp;
 $1=$e;
 $2=$n;
 var $3=$1; //@line 4492 "tcc_bootstrap.c"
 var $4=$tmp; //@line 4492 "tcc_bootstrap.c"
 var $5=$3; //@line 4492 "tcc_bootstrap.c"
 assert(40 % 1 === 0);HEAP32[(($4)>>2)]=HEAP32[(($5)>>2)];HEAP32[((($4)+(4))>>2)]=HEAP32[((($5)+(4))>>2)];HEAP32[((($4)+(8))>>2)]=HEAP32[((($5)+(8))>>2)];HEAP32[((($4)+(12))>>2)]=HEAP32[((($5)+(12))>>2)];HEAP32[((($4)+(16))>>2)]=HEAP32[((($5)+(16))>>2)];HEAP32[((($4)+(20))>>2)]=HEAP32[((($5)+(20))>>2)];HEAP32[((($4)+(24))>>2)]=HEAP32[((($5)+(24))>>2)];HEAP32[((($4)+(28))>>2)]=HEAP32[((($5)+(28))>>2)];HEAP32[((($4)+(32))>>2)]=HEAP32[((($5)+(32))>>2)];HEAP32[((($4)+(36))>>2)]=HEAP32[((($5)+(36))>>2)]; //@line 4492 "tcc_bootstrap.c"
 $i=0; //@line 4493 "tcc_bootstrap.c"
 label=2;break; //@line 4493 "tcc_bootstrap.c"
 case 2: 
 var $7=$i; //@line 4493 "tcc_bootstrap.c"
 var $8=$2; //@line 4493 "tcc_bootstrap.c"
 var $9=((($8)-(1))|0); //@line 4493 "tcc_bootstrap.c"
 var $10=($7|0)<($9|0); //@line 4493 "tcc_bootstrap.c"
 if($10){label=3;break;}else{label=5;break;} //@line 4493 "tcc_bootstrap.c"
 case 3: 
 var $12=$i; //@line 4494 "tcc_bootstrap.c"
 var $13=(((-$12))|0); //@line 4494 "tcc_bootstrap.c"
 var $14=$1; //@line 4494 "tcc_bootstrap.c"
 var $15=(($14+((($13)*(40))&-1))|0); //@line 4494 "tcc_bootstrap.c"
 var $16=$i; //@line 4494 "tcc_bootstrap.c"
 var $17=(((-$16))|0); //@line 4494 "tcc_bootstrap.c"
 var $18=((($17)-(1))|0); //@line 4494 "tcc_bootstrap.c"
 var $19=$1; //@line 4494 "tcc_bootstrap.c"
 var $20=(($19+((($18)*(40))&-1))|0); //@line 4494 "tcc_bootstrap.c"
 var $21=$15; //@line 4494 "tcc_bootstrap.c"
 var $22=$20; //@line 4494 "tcc_bootstrap.c"
 assert(40 % 1 === 0);HEAP32[(($21)>>2)]=HEAP32[(($22)>>2)];HEAP32[((($21)+(4))>>2)]=HEAP32[((($22)+(4))>>2)];HEAP32[((($21)+(8))>>2)]=HEAP32[((($22)+(8))>>2)];HEAP32[((($21)+(12))>>2)]=HEAP32[((($22)+(12))>>2)];HEAP32[((($21)+(16))>>2)]=HEAP32[((($22)+(16))>>2)];HEAP32[((($21)+(20))>>2)]=HEAP32[((($22)+(20))>>2)];HEAP32[((($21)+(24))>>2)]=HEAP32[((($22)+(24))>>2)];HEAP32[((($21)+(28))>>2)]=HEAP32[((($22)+(28))>>2)];HEAP32[((($21)+(32))>>2)]=HEAP32[((($22)+(32))>>2)];HEAP32[((($21)+(36))>>2)]=HEAP32[((($22)+(36))>>2)]; //@line 4494 "tcc_bootstrap.c"
 label=4;break; //@line 4494 "tcc_bootstrap.c"
 case 4: 
 var $24=$i; //@line 4493 "tcc_bootstrap.c"
 var $25=((($24)+(1))|0); //@line 4493 "tcc_bootstrap.c"
 $i=$25; //@line 4493 "tcc_bootstrap.c"
 label=2;break; //@line 4493 "tcc_bootstrap.c"
 case 5: 
 var $27=$2; //@line 4495 "tcc_bootstrap.c"
 var $28=(((-$27))|0); //@line 4495 "tcc_bootstrap.c"
 var $29=((($28)+(1))|0); //@line 4495 "tcc_bootstrap.c"
 var $30=$1; //@line 4495 "tcc_bootstrap.c"
 var $31=(($30+((($29)*(40))&-1))|0); //@line 4495 "tcc_bootstrap.c"
 var $32=$31; //@line 4495 "tcc_bootstrap.c"
 var $33=$tmp; //@line 4495 "tcc_bootstrap.c"
 assert(40 % 1 === 0);HEAP32[(($32)>>2)]=HEAP32[(($33)>>2)];HEAP32[((($32)+(4))>>2)]=HEAP32[((($33)+(4))>>2)];HEAP32[((($32)+(8))>>2)]=HEAP32[((($33)+(8))>>2)];HEAP32[((($32)+(12))>>2)]=HEAP32[((($33)+(12))>>2)];HEAP32[((($32)+(16))>>2)]=HEAP32[((($33)+(16))>>2)];HEAP32[((($32)+(20))>>2)]=HEAP32[((($33)+(20))>>2)];HEAP32[((($32)+(24))>>2)]=HEAP32[((($33)+(24))>>2)];HEAP32[((($32)+(28))>>2)]=HEAP32[((($33)+(28))>>2)];HEAP32[((($32)+(32))>>2)]=HEAP32[((($33)+(32))>>2)];HEAP32[((($32)+(36))>>2)]=HEAP32[((($33)+(36))>>2)]; //@line 4495 "tcc_bootstrap.c"
 STACKTOP=sp;return; //@line 4496 "tcc_bootstrap.c"
  default: assert(0, "bad label: " + label);
 }

}


function _vpushsym($type,$sym){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 var $2;
 var $cval=sp;
 $1=$type;
 $2=$sym;
 var $3=$cval; //@line 4504 "tcc_bootstrap.c"
 var $$etemp$0$0=0;
 var $$etemp$0$1=0;
 var $st$1$0=(($3)|0);
 HEAP32[(($st$1$0)>>2)]=$$etemp$0$0;
 var $st$2$1=(($3+4)|0);
 HEAP32[(($st$2$1)>>2)]=$$etemp$0$1;
 var $4=$1; //@line 4505 "tcc_bootstrap.c"
 _vsetc($4,560,$cval); //@line 4505 "tcc_bootstrap.c"
 var $5=$2; //@line 4506 "tcc_bootstrap.c"
 var $6=HEAP32[((9288)>>2)]; //@line 4506 "tcc_bootstrap.c"
 var $7=(($6+32)|0); //@line 4506 "tcc_bootstrap.c"
 HEAP32[(($7)>>2)]=$5; //@line 4506 "tcc_bootstrap.c"
 STACKTOP=sp;return; //@line 4507 "tcc_bootstrap.c"
}


function _external_global_sym($v,$type,$r){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $s;
 $1=$v;
 $2=$type;
 $3=$r;
 var $4=$1; //@line 4525 "tcc_bootstrap.c"
 var $5=_sym_find($4); //@line 4525 "tcc_bootstrap.c"
 $s=$5; //@line 4525 "tcc_bootstrap.c"
 var $6=$s; //@line 4526 "tcc_bootstrap.c"
 var $7=($6|0)!=0; //@line 4526 "tcc_bootstrap.c"
 if($7){label=3;break;}else{label=2;break;} //@line 4526 "tcc_bootstrap.c"
 case 2: 
 var $9=$1; //@line 4527 "tcc_bootstrap.c"
 var $10=$2; //@line 4527 "tcc_bootstrap.c"
 var $11=(($10)|0); //@line 4527 "tcc_bootstrap.c"
 var $12=HEAP32[(($11)>>2)]; //@line 4527 "tcc_bootstrap.c"
 var $13=$12|4096; //@line 4527 "tcc_bootstrap.c"
 var $14=_global_identifier_push($9,$13,0); //@line 4527 "tcc_bootstrap.c"
 $s=$14; //@line 4527 "tcc_bootstrap.c"
 var $15=$2; //@line 4528 "tcc_bootstrap.c"
 var $16=(($15+4)|0); //@line 4528 "tcc_bootstrap.c"
 var $17=HEAP32[(($16)>>2)]; //@line 4528 "tcc_bootstrap.c"
 var $18=$s; //@line 4528 "tcc_bootstrap.c"
 var $19=(($18+16)|0); //@line 4528 "tcc_bootstrap.c"
 var $20=(($19+4)|0); //@line 4528 "tcc_bootstrap.c"
 HEAP32[(($20)>>2)]=$17; //@line 4528 "tcc_bootstrap.c"
 var $21=$3; //@line 4529 "tcc_bootstrap.c"
 var $22=$21|48; //@line 4529 "tcc_bootstrap.c"
 var $23=$22|512; //@line 4529 "tcc_bootstrap.c"
 var $24=(($23)&65535); //@line 4529 "tcc_bootstrap.c"
 var $25=$s; //@line 4529 "tcc_bootstrap.c"
 var $26=(($25+4)|0); //@line 4529 "tcc_bootstrap.c"
 HEAP16[(($26)>>1)]=$24; //@line 4529 "tcc_bootstrap.c"
 label=3;break; //@line 4530 "tcc_bootstrap.c"
 case 3: 
 var $28=$s; //@line 4531 "tcc_bootstrap.c"
 STACKTOP=sp;return $28; //@line 4531 "tcc_bootstrap.c"
  default: assert(0, "bad label: " + label);
 }

}


function _sym_find($v){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 $2=$v;
 var $3=$2; //@line 4314 "tcc_bootstrap.c"
 var $4=((($3)-(256))|0); //@line 4314 "tcc_bootstrap.c"
 $2=$4; //@line 4314 "tcc_bootstrap.c"
 var $5=$2; //@line 4315 "tcc_bootstrap.c"
 var $6=HEAP32[((10456)>>2)]; //@line 4315 "tcc_bootstrap.c"
 var $7=((($6)-(256))|0); //@line 4315 "tcc_bootstrap.c"
 var $8=($5>>>0)>=($7>>>0); //@line 4315 "tcc_bootstrap.c"
 if($8){label=2;break;}else{label=3;break;} //@line 4315 "tcc_bootstrap.c"
 case 2: 
 $1=0; //@line 4316 "tcc_bootstrap.c"
 label=4;break; //@line 4316 "tcc_bootstrap.c"
 case 3: 
 var $11=$2; //@line 4317 "tcc_bootstrap.c"
 var $12=HEAP32[((10496)>>2)]; //@line 4317 "tcc_bootstrap.c"
 var $13=(($12+($11<<2))|0); //@line 4317 "tcc_bootstrap.c"
 var $14=HEAP32[(($13)>>2)]; //@line 4317 "tcc_bootstrap.c"
 var $15=(($14+16)|0); //@line 4317 "tcc_bootstrap.c"
 var $16=HEAP32[(($15)>>2)]; //@line 4317 "tcc_bootstrap.c"
 $1=$16; //@line 4317 "tcc_bootstrap.c"
 label=4;break; //@line 4317 "tcc_bootstrap.c"
 case 4: 
 var $18=$1; //@line 4318 "tcc_bootstrap.c"
 STACKTOP=sp;return $18; //@line 4318 "tcc_bootstrap.c"
  default: assert(0, "bad label: " + label);
 }

}


function _global_identifier_push($v,$t,$c){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $s;
 var $ps;
 $1=$v;
 $2=$t;
 $3=$c;
 var $4=$1; //@line 4348 "tcc_bootstrap.c"
 var $5=$2; //@line 4348 "tcc_bootstrap.c"
 var $6=$3; //@line 4348 "tcc_bootstrap.c"
 var $7=_sym_push2(76560,$4,$5,$6); //@line 4348 "tcc_bootstrap.c"
 $s=$7; //@line 4348 "tcc_bootstrap.c"
 var $8=$1; //@line 4349 "tcc_bootstrap.c"
 var $9=($8|0)<268435456; //@line 4349 "tcc_bootstrap.c"
 if($9){label=2;break;}else{label=8;break;} //@line 4349 "tcc_bootstrap.c"
 case 2: 
 var $11=$1; //@line 4350 "tcc_bootstrap.c"
 var $12=((($11)-(256))|0); //@line 4350 "tcc_bootstrap.c"
 var $13=HEAP32[((10496)>>2)]; //@line 4350 "tcc_bootstrap.c"
 var $14=(($13+($12<<2))|0); //@line 4350 "tcc_bootstrap.c"
 var $15=HEAP32[(($14)>>2)]; //@line 4350 "tcc_bootstrap.c"
 var $16=(($15+16)|0); //@line 4350 "tcc_bootstrap.c"
 $ps=$16; //@line 4350 "tcc_bootstrap.c"
 label=3;break; //@line 4351 "tcc_bootstrap.c"
 case 3: 
 var $18=$ps; //@line 4351 "tcc_bootstrap.c"
 var $19=HEAP32[(($18)>>2)]; //@line 4351 "tcc_bootstrap.c"
 var $20=($19|0)!=0; //@line 4351 "tcc_bootstrap.c"
 if($20){label=4;break;}else{var $31=0;label=5;break;} //@line 4351 "tcc_bootstrap.c"
 case 4: 
 var $22=$ps; //@line 4351 "tcc_bootstrap.c"
 var $23=HEAP32[(($22)>>2)]; //@line 4351 "tcc_bootstrap.c"
 var $24=(($23+8)|0); //@line 4351 "tcc_bootstrap.c"
 var $25=$24; //@line 4351 "tcc_bootstrap.c"
 var $26=(($25+4)|0); //@line 4351 "tcc_bootstrap.c"
 var $27=$26; //@line 4351 "tcc_bootstrap.c"
 var $28=HEAP32[(($27)>>2)]; //@line 4351 "tcc_bootstrap.c"
 var $29=($28|0)!=0; //@line 4351 "tcc_bootstrap.c"
 var $31=$29;label=5;break;
 case 5: 
 var $31;
 if($31){label=6;break;}else{label=7;break;}
 case 6: 
 var $33=$ps; //@line 4352 "tcc_bootstrap.c"
 var $34=HEAP32[(($33)>>2)]; //@line 4352 "tcc_bootstrap.c"
 var $35=(($34+32)|0); //@line 4352 "tcc_bootstrap.c"
 $ps=$35; //@line 4352 "tcc_bootstrap.c"
 label=3;break; //@line 4352 "tcc_bootstrap.c"
 case 7: 
 var $37=$ps; //@line 4353 "tcc_bootstrap.c"
 var $38=HEAP32[(($37)>>2)]; //@line 4353 "tcc_bootstrap.c"
 var $39=$s; //@line 4353 "tcc_bootstrap.c"
 var $40=(($39+32)|0); //@line 4353 "tcc_bootstrap.c"
 HEAP32[(($40)>>2)]=$38; //@line 4353 "tcc_bootstrap.c"
 var $41=$s; //@line 4354 "tcc_bootstrap.c"
 var $42=$ps; //@line 4354 "tcc_bootstrap.c"
 HEAP32[(($42)>>2)]=$41; //@line 4354 "tcc_bootstrap.c"
 label=8;break; //@line 4355 "tcc_bootstrap.c"
 case 8: 
 var $44=$s; //@line 4356 "tcc_bootstrap.c"
 STACKTOP=sp;return $44; //@line 4356 "tcc_bootstrap.c"
  default: assert(0, "bad label: " + label);
 }

}


function _check_comparison_pointer_types($p1,$p2,$op){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $type1;
 var $type2;
 var $tmp_type1=sp;
 var $tmp_type2=(sp)+(8);
 var $bt1;
 var $bt2;
 $1=$p1;
 $2=$p2;
 $3=$op;
 var $4=$1; //@line 5422 "tcc_bootstrap.c"
 var $5=_is_null_pointer($4); //@line 5422 "tcc_bootstrap.c"
 var $6=($5|0)!=0; //@line 5422 "tcc_bootstrap.c"
 if($6){label=3;break;}else{label=2;break;} //@line 5422 "tcc_bootstrap.c"
 case 2: 
 var $8=$2; //@line 5422 "tcc_bootstrap.c"
 var $9=_is_null_pointer($8); //@line 5422 "tcc_bootstrap.c"
 var $10=($9|0)!=0; //@line 5422 "tcc_bootstrap.c"
 if($10){label=3;break;}else{label=4;break;} //@line 5422 "tcc_bootstrap.c"
 case 3: 
 label=30;break; //@line 5423 "tcc_bootstrap.c"
 case 4: 
 var $13=$1; //@line 5424 "tcc_bootstrap.c"
 var $14=(($13)|0); //@line 5424 "tcc_bootstrap.c"
 $type1=$14; //@line 5424 "tcc_bootstrap.c"
 var $15=$2; //@line 5425 "tcc_bootstrap.c"
 var $16=(($15)|0); //@line 5425 "tcc_bootstrap.c"
 $type2=$16; //@line 5425 "tcc_bootstrap.c"
 var $17=$type1; //@line 5426 "tcc_bootstrap.c"
 var $18=(($17)|0); //@line 5426 "tcc_bootstrap.c"
 var $19=HEAP32[(($18)>>2)]; //@line 5426 "tcc_bootstrap.c"
 var $20=$19&15; //@line 5426 "tcc_bootstrap.c"
 $bt1=$20; //@line 5426 "tcc_bootstrap.c"
 var $21=$type2; //@line 5427 "tcc_bootstrap.c"
 var $22=(($21)|0); //@line 5427 "tcc_bootstrap.c"
 var $23=HEAP32[(($22)>>2)]; //@line 5427 "tcc_bootstrap.c"
 var $24=$23&15; //@line 5427 "tcc_bootstrap.c"
 $bt2=$24; //@line 5427 "tcc_bootstrap.c"
 var $25=$bt1; //@line 5428 "tcc_bootstrap.c"
 var $26=_is_integer_btype($25); //@line 5428 "tcc_bootstrap.c"
 var $27=($26|0)!=0; //@line 5428 "tcc_bootstrap.c"
 if($27){label=6;break;}else{label=5;break;} //@line 5428 "tcc_bootstrap.c"
 case 5: 
 var $29=$bt2; //@line 5428 "tcc_bootstrap.c"
 var $30=_is_integer_btype($29); //@line 5428 "tcc_bootstrap.c"
 var $31=($30|0)!=0; //@line 5428 "tcc_bootstrap.c"
 if($31){label=6;break;}else{label=11;break;} //@line 5428 "tcc_bootstrap.c"
 case 6: 
 var $33=$3; //@line 5428 "tcc_bootstrap.c"
 var $34=($33|0)!=45; //@line 5428 "tcc_bootstrap.c"
 if($34){label=7;break;}else{label=11;break;} //@line 5428 "tcc_bootstrap.c"
 case 7: 
 var $36=$3; //@line 5429 "tcc_bootstrap.c"
 var $37=($36|0)!=161; //@line 5429 "tcc_bootstrap.c"
 if($37){label=8;break;}else{label=10;break;} //@line 5429 "tcc_bootstrap.c"
 case 8: 
 var $39=$3; //@line 5429 "tcc_bootstrap.c"
 var $40=($39|0)!=160; //@line 5429 "tcc_bootstrap.c"
 if($40){label=9;break;}else{label=10;break;} //@line 5429 "tcc_bootstrap.c"
 case 9: 
 _tcc_warning(8280,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs; //@line 5430 "tcc_bootstrap.c"
 label=10;break; //@line 5430 "tcc_bootstrap.c"
 case 10: 
 label=30;break; //@line 5431 "tcc_bootstrap.c"
 case 11: 
 var $44=$bt1; //@line 5433 "tcc_bootstrap.c"
 var $45=($44|0)==5; //@line 5433 "tcc_bootstrap.c"
 if($45){label=12;break;}else{label=13;break;} //@line 5433 "tcc_bootstrap.c"
 case 12: 
 var $47=$type1; //@line 5434 "tcc_bootstrap.c"
 var $48=_pointed_type($47); //@line 5434 "tcc_bootstrap.c"
 $type1=$48; //@line 5434 "tcc_bootstrap.c"
 label=16;break; //@line 5435 "tcc_bootstrap.c"
 case 13: 
 var $50=$bt1; //@line 5435 "tcc_bootstrap.c"
 var $51=($50|0)!=6; //@line 5435 "tcc_bootstrap.c"
 if($51){label=14;break;}else{label=15;break;} //@line 5435 "tcc_bootstrap.c"
 case 14: 
 label=20;break; //@line 5436 "tcc_bootstrap.c"
 case 15: 
 label=16;break;
 case 16: 
 var $55=$bt2; //@line 5437 "tcc_bootstrap.c"
 var $56=($55|0)==5; //@line 5437 "tcc_bootstrap.c"
 if($56){label=17;break;}else{label=18;break;} //@line 5437 "tcc_bootstrap.c"
 case 17: 
 var $58=$type2; //@line 5438 "tcc_bootstrap.c"
 var $59=_pointed_type($58); //@line 5438 "tcc_bootstrap.c"
 $type2=$59; //@line 5438 "tcc_bootstrap.c"
 label=22;break; //@line 5439 "tcc_bootstrap.c"
 case 18: 
 var $61=$bt2; //@line 5439 "tcc_bootstrap.c"
 var $62=($61|0)!=6; //@line 5439 "tcc_bootstrap.c"
 if($62){label=19;break;}else{label=21;break;} //@line 5439 "tcc_bootstrap.c"
 case 19: 
 label=20;break; //@line 5439 "tcc_bootstrap.c"
 case 20: 
 var $65=$3; //@line 5441 "tcc_bootstrap.c"
 var $66=_get_tok_str($65,0); //@line 5441 "tcc_bootstrap.c"
 _tcc_error(8248,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$66,tempVarArgs)); STACKTOP=tempVarArgs; //@line 5441 "tcc_bootstrap.c"
 label=21;break; //@line 5442 "tcc_bootstrap.c"
 case 21: 
 label=22;break;
 case 22: 
 var $69=$type1; //@line 5443 "tcc_bootstrap.c"
 var $70=(($69)|0); //@line 5443 "tcc_bootstrap.c"
 var $71=HEAP32[(($70)>>2)]; //@line 5443 "tcc_bootstrap.c"
 var $72=$71&15; //@line 5443 "tcc_bootstrap.c"
 var $73=($72|0)==0; //@line 5443 "tcc_bootstrap.c"
 if($73){label=24;break;}else{label=23;break;} //@line 5443 "tcc_bootstrap.c"
 case 23: 
 var $75=$type2; //@line 5443 "tcc_bootstrap.c"
 var $76=(($75)|0); //@line 5443 "tcc_bootstrap.c"
 var $77=HEAP32[(($76)>>2)]; //@line 5443 "tcc_bootstrap.c"
 var $78=$77&15; //@line 5443 "tcc_bootstrap.c"
 var $79=($78|0)==0; //@line 5443 "tcc_bootstrap.c"
 if($79){label=24;break;}else{label=25;break;} //@line 5443 "tcc_bootstrap.c"
 case 24: 
 label=30;break; //@line 5445 "tcc_bootstrap.c"
 case 25: 
 var $82=$type1; //@line 5446 "tcc_bootstrap.c"
 var $83=$tmp_type1; //@line 5446 "tcc_bootstrap.c"
 var $84=$82; //@line 5446 "tcc_bootstrap.c"
 assert(8 % 1 === 0);HEAP32[(($83)>>2)]=HEAP32[(($84)>>2)];HEAP32[((($83)+(4))>>2)]=HEAP32[((($84)+(4))>>2)]; //@line 5446 "tcc_bootstrap.c"
 var $85=$type2; //@line 5447 "tcc_bootstrap.c"
 var $86=$tmp_type2; //@line 5447 "tcc_bootstrap.c"
 var $87=$85; //@line 5447 "tcc_bootstrap.c"
 assert(8 % 1 === 0);HEAP32[(($86)>>2)]=HEAP32[(($87)>>2)];HEAP32[((($86)+(4))>>2)]=HEAP32[((($87)+(4))>>2)]; //@line 5447 "tcc_bootstrap.c"
 var $88=(($tmp_type1)|0); //@line 5448 "tcc_bootstrap.c"
 var $89=HEAP32[(($88)>>2)]; //@line 5448 "tcc_bootstrap.c"
 var $90=$89&-817; //@line 5448 "tcc_bootstrap.c"
 HEAP32[(($88)>>2)]=$90; //@line 5448 "tcc_bootstrap.c"
 var $91=(($tmp_type2)|0); //@line 5449 "tcc_bootstrap.c"
 var $92=HEAP32[(($91)>>2)]; //@line 5449 "tcc_bootstrap.c"
 var $93=$92&-817; //@line 5449 "tcc_bootstrap.c"
 HEAP32[(($91)>>2)]=$93; //@line 5449 "tcc_bootstrap.c"
 var $94=_is_compatible_types($tmp_type1,$tmp_type2); //@line 5450 "tcc_bootstrap.c"
 var $95=($94|0)!=0; //@line 5450 "tcc_bootstrap.c"
 if($95){label=30;break;}else{label=26;break;} //@line 5450 "tcc_bootstrap.c"
 case 26: 
 var $97=$3; //@line 5451 "tcc_bootstrap.c"
 var $98=($97|0)==45; //@line 5451 "tcc_bootstrap.c"
 if($98){label=27;break;}else{label=28;break;} //@line 5451 "tcc_bootstrap.c"
 case 27: 
 label=20;break; //@line 5452 "tcc_bootstrap.c"
 case 28: 
 _tcc_warning(8192,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs; //@line 5454 "tcc_bootstrap.c"
 label=29;break;
 case 29: 
 label=30;break; //@line 5455 "tcc_bootstrap.c"
 case 30: 
 STACKTOP=sp;return; //@line 5454 "tcc_bootstrap.c"
  default: assert(0, "bad label: " + label);
 }

}


function _vla_runtime_pointed_size($type){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 var $align;
 $1=$type;
 STACKTOP=sp;return; //@line 5403 "tcc_bootstrap.c"
}


function _pointed_size($type){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 var $align=sp;
 $1=$type;
 var $2=$1; //@line 5398 "tcc_bootstrap.c"
 var $3=_pointed_type($2); //@line 5398 "tcc_bootstrap.c"
 var $4=_type_size($3,$align); //@line 5398 "tcc_bootstrap.c"
 STACKTOP=sp;return $4; //@line 5398 "tcc_bootstrap.c"
}


function _gen_opic($op){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $v1;
 var $v2;
 var $t1;
 var $t2;
 var $c1;
 var $c2;
 var $l1=sp;
 var $l2=(sp)+(8);
 var $shm;
 var $n;
 $1=$op;
 var $2=HEAP32[((9288)>>2)]; //@line 5212 "tcc_bootstrap.c"
 var $3=((($2)-(40))|0); //@line 5212 "tcc_bootstrap.c"
 $v1=$3; //@line 5212 "tcc_bootstrap.c"
 var $4=HEAP32[((9288)>>2)]; //@line 5213 "tcc_bootstrap.c"
 $v2=$4; //@line 5213 "tcc_bootstrap.c"
 var $5=$v1; //@line 5214 "tcc_bootstrap.c"
 var $6=(($5)|0); //@line 5214 "tcc_bootstrap.c"
 var $7=(($6)|0); //@line 5214 "tcc_bootstrap.c"
 var $8=HEAP32[(($7)>>2)]; //@line 5214 "tcc_bootstrap.c"
 var $9=$8&15; //@line 5214 "tcc_bootstrap.c"
 $t1=$9; //@line 5214 "tcc_bootstrap.c"
 var $10=$v2; //@line 5215 "tcc_bootstrap.c"
 var $11=(($10)|0); //@line 5215 "tcc_bootstrap.c"
 var $12=(($11)|0); //@line 5215 "tcc_bootstrap.c"
 var $13=HEAP32[(($12)>>2)]; //@line 5215 "tcc_bootstrap.c"
 var $14=$13&15; //@line 5215 "tcc_bootstrap.c"
 $t2=$14; //@line 5215 "tcc_bootstrap.c"
 var $15=$v1; //@line 5216 "tcc_bootstrap.c"
 var $16=(($15+8)|0); //@line 5216 "tcc_bootstrap.c"
 var $17=HEAP16[(($16)>>1)]; //@line 5216 "tcc_bootstrap.c"
 var $18=($17&65535); //@line 5216 "tcc_bootstrap.c"
 var $19=$18&831; //@line 5216 "tcc_bootstrap.c"
 var $20=($19|0)==48; //@line 5216 "tcc_bootstrap.c"
 var $21=($20&1); //@line 5216 "tcc_bootstrap.c"
 $c1=$21; //@line 5216 "tcc_bootstrap.c"
 var $22=$v2; //@line 5217 "tcc_bootstrap.c"
 var $23=(($22+8)|0); //@line 5217 "tcc_bootstrap.c"
 var $24=HEAP16[(($23)>>1)]; //@line 5217 "tcc_bootstrap.c"
 var $25=($24&65535); //@line 5217 "tcc_bootstrap.c"
 var $26=$25&831; //@line 5217 "tcc_bootstrap.c"
 var $27=($26|0)==48; //@line 5217 "tcc_bootstrap.c"
 var $28=($27&1); //@line 5217 "tcc_bootstrap.c"
 $c2=$28; //@line 5217 "tcc_bootstrap.c"
 var $29=$c1; //@line 5218 "tcc_bootstrap.c"
 var $30=($29|0)!=0; //@line 5218 "tcc_bootstrap.c"
 if($30){label=2;break;}else{label=3;break;} //@line 5218 "tcc_bootstrap.c"
 case 2: 
 var $32=$v1; //@line 5218 "tcc_bootstrap.c"
 var $33=(($32+16)|0); //@line 5218 "tcc_bootstrap.c"
 var $34=$33; //@line 5218 "tcc_bootstrap.c"
 var $ld$0$0=(($34)|0);
 var $35$0=HEAP32[(($ld$0$0)>>2)];
 var $ld$1$1=(($34+4)|0);
 var $35$1=HEAP32[(($ld$1$1)>>2)];
 var $38$1=$35$1;var $38$0=$35$0;label=4;break; //@line 5218 "tcc_bootstrap.c"
 case 3: 
 var $38$1=0;var $38$0=0;label=4;break; //@line 5218 "tcc_bootstrap.c"
 case 4: 
 var $38$0;
 var $38$1;
 var $st$2$0=(($l1)|0);
 HEAP32[(($st$2$0)>>2)]=$38$0;
 var $st$3$1=(($l1+4)|0);
 HEAP32[(($st$3$1)>>2)]=$38$1;
 var $39=$c2; //@line 5219 "tcc_bootstrap.c"
 var $40=($39|0)!=0; //@line 5219 "tcc_bootstrap.c"
 if($40){label=5;break;}else{label=6;break;} //@line 5219 "tcc_bootstrap.c"
 case 5: 
 var $42=$v2; //@line 5219 "tcc_bootstrap.c"
 var $43=(($42+16)|0); //@line 5219 "tcc_bootstrap.c"
 var $44=$43; //@line 5219 "tcc_bootstrap.c"
 var $ld$4$0=(($44)|0);
 var $45$0=HEAP32[(($ld$4$0)>>2)];
 var $ld$5$1=(($44+4)|0);
 var $45$1=HEAP32[(($ld$5$1)>>2)];
 var $48$1=$45$1;var $48$0=$45$0;label=7;break; //@line 5219 "tcc_bootstrap.c"
 case 6: 
 var $48$1=0;var $48$0=0;label=7;break; //@line 5219 "tcc_bootstrap.c"
 case 7: 
 var $48$0;
 var $48$1;
 var $st$6$0=(($l2)|0);
 HEAP32[(($st$6$0)>>2)]=$48$0;
 var $st$7$1=(($l2+4)|0);
 HEAP32[(($st$7$1)>>2)]=$48$1;
 var $49=$t1; //@line 5220 "tcc_bootstrap.c"
 var $50=($49|0)==4; //@line 5220 "tcc_bootstrap.c"
 var $51=($50?63:31); //@line 5220 "tcc_bootstrap.c"
 $shm=$51; //@line 5220 "tcc_bootstrap.c"
 var $52=$t1; //@line 5221 "tcc_bootstrap.c"
 var $53=($52|0)!=4; //@line 5221 "tcc_bootstrap.c"
 if($53){label=8;break;}else{label=12;break;} //@line 5221 "tcc_bootstrap.c"
 case 8: 
 var $ld$8$0=(($l1)|0);
 var $55$0=HEAP32[(($ld$8$0)>>2)];
 var $ld$9$1=(($l1+4)|0);
 var $55$1=HEAP32[(($ld$9$1)>>2)];
 var $56$0=$55$0;
 var $56=$56$0;
 var $57$0=$56;
 var $57$1=0;
 var $58=$v1; //@line 5222 "tcc_bootstrap.c"
 var $59=(($58)|0); //@line 5222 "tcc_bootstrap.c"
 var $60=(($59)|0); //@line 5222 "tcc_bootstrap.c"
 var $61=HEAP32[(($60)>>2)]; //@line 5222 "tcc_bootstrap.c"
 var $62=$61&16; //@line 5222 "tcc_bootstrap.c"
 var $63=($62|0)!=0; //@line 5222 "tcc_bootstrap.c"
 if($63){label=9;break;}else{label=10;break;} //@line 5222 "tcc_bootstrap.c"
 case 9: 
 var $70$1=0;var $70$0=0;label=11;break; //@line 5222 "tcc_bootstrap.c"
 case 10: 
 var $ld$10$0=(($l1)|0);
 var $66$0=HEAP32[(($ld$10$0)>>2)];
 var $ld$11$1=(($l1+4)|0);
 var $66$1=HEAP32[(($ld$11$1)>>2)];
 var $$etemp$12$0=-2147483648;
 var $$etemp$12$1=0;
 var $67$0=$66$0&$$etemp$12$0;
 var $67$1=$66$1&$$etemp$12$1;
 var $$etemp$13$0=0;
 var $$etemp$13$1=0;
 var $68$0=_i64Subtract($$etemp$13$0,$$etemp$13$1,$67$0,$67$1);var $68$1=tempRet0; //@line 5222 "tcc_bootstrap.c"
 var $70$1=$68$1;var $70$0=$68$0;label=11;break; //@line 5222 "tcc_bootstrap.c"
 case 11: 
 var $70$0;
 var $70$1;
 var $71$0=$57$0|$70$0;
 var $71$1=$57$1|$70$1;
 var $st$14$0=(($l1)|0);
 HEAP32[(($st$14$0)>>2)]=$71$0;
 var $st$15$1=(($l1+4)|0);
 HEAP32[(($st$15$1)>>2)]=$71$1;
 label=12;break; //@line 5222 "tcc_bootstrap.c"
 case 12: 
 var $73=$t2; //@line 5224 "tcc_bootstrap.c"
 var $74=($73|0)!=4; //@line 5224 "tcc_bootstrap.c"
 if($74){label=13;break;}else{label=17;break;} //@line 5224 "tcc_bootstrap.c"
 case 13: 
 var $ld$16$0=(($l2)|0);
 var $76$0=HEAP32[(($ld$16$0)>>2)];
 var $ld$17$1=(($l2+4)|0);
 var $76$1=HEAP32[(($ld$17$1)>>2)];
 var $77$0=$76$0;
 var $77=$77$0;
 var $78$0=$77;
 var $78$1=0;
 var $79=$v2; //@line 5225 "tcc_bootstrap.c"
 var $80=(($79)|0); //@line 5225 "tcc_bootstrap.c"
 var $81=(($80)|0); //@line 5225 "tcc_bootstrap.c"
 var $82=HEAP32[(($81)>>2)]; //@line 5225 "tcc_bootstrap.c"
 var $83=$82&16; //@line 5225 "tcc_bootstrap.c"
 var $84=($83|0)!=0; //@line 5225 "tcc_bootstrap.c"
 if($84){label=14;break;}else{label=15;break;} //@line 5225 "tcc_bootstrap.c"
 case 14: 
 var $91$1=0;var $91$0=0;label=16;break; //@line 5225 "tcc_bootstrap.c"
 case 15: 
 var $ld$18$0=(($l2)|0);
 var $87$0=HEAP32[(($ld$18$0)>>2)];
 var $ld$19$1=(($l2+4)|0);
 var $87$1=HEAP32[(($ld$19$1)>>2)];
 var $$etemp$20$0=-2147483648;
 var $$etemp$20$1=0;
 var $88$0=$87$0&$$etemp$20$0;
 var $88$1=$87$1&$$etemp$20$1;
 var $$etemp$21$0=0;
 var $$etemp$21$1=0;
 var $89$0=_i64Subtract($$etemp$21$0,$$etemp$21$1,$88$0,$88$1);var $89$1=tempRet0; //@line 5225 "tcc_bootstrap.c"
 var $91$1=$89$1;var $91$0=$89$0;label=16;break; //@line 5225 "tcc_bootstrap.c"
 case 16: 
 var $91$0;
 var $91$1;
 var $92$0=$78$0|$91$0;
 var $92$1=$78$1|$91$1;
 var $st$22$0=(($l2)|0);
 HEAP32[(($st$22$0)>>2)]=$92$0;
 var $st$23$1=(($l2+4)|0);
 HEAP32[(($st$23$1)>>2)]=$92$1;
 label=17;break; //@line 5225 "tcc_bootstrap.c"
 case 17: 
 var $94=$c1; //@line 5228 "tcc_bootstrap.c"
 var $95=($94|0)!=0; //@line 5228 "tcc_bootstrap.c"
 if($95){label=18;break;}else{label=65;break;} //@line 5228 "tcc_bootstrap.c"
 case 18: 
 var $97=$c2; //@line 5228 "tcc_bootstrap.c"
 var $98=($97|0)!=0; //@line 5228 "tcc_bootstrap.c"
 if($98){label=19;break;}else{label=65;break;} //@line 5228 "tcc_bootstrap.c"
 case 19: 
 var $100=$1; //@line 5229 "tcc_bootstrap.c"
 switch(($100|0)){case 43:{ label=20;break;}case 45:{ label=21;break;}case 38:{ label=22;break;}case 94:{ label=23;break;}case 124:{ label=24;break;}case 42:{ label=25;break;}case 178:case 47:case 37:case 176:case 177:{ label=26;break;}case 1:{ label=36;break;}case 201:{ label=37;break;}case 2:{ label=38;break;}case 146:{ label=42;break;}case 147:{ label=43;break;}case 148:{ label=44;break;}case 149:{ label=45;break;}case 150:{ label=46;break;}case 151:{ label=47;break;}case 156:{ label=48;break;}case 157:{ label=49;break;}case 158:{ label=50;break;}case 159:{ label=51;break;}case 160:{ label=52;break;}case 161:{ label=55;break;}default:{label=58;break;}}break;
 case 20: 
 var $ld$24$0=(($l2)|0);
 var $102$0=HEAP32[(($ld$24$0)>>2)];
 var $ld$25$1=(($l2+4)|0);
 var $102$1=HEAP32[(($ld$25$1)>>2)];
 var $ld$26$0=(($l1)|0);
 var $103$0=HEAP32[(($ld$26$0)>>2)];
 var $ld$27$1=(($l1+4)|0);
 var $103$1=HEAP32[(($ld$27$1)>>2)];
 var $104$0=_i64Add($103$0,$103$1,$102$0,$102$1);var $104$1=tempRet0; //@line 5230 "tcc_bootstrap.c"
 var $st$28$0=(($l1)|0);
 HEAP32[(($st$28$0)>>2)]=$104$0;
 var $st$29$1=(($l1+4)|0);
 HEAP32[(($st$29$1)>>2)]=$104$1;
 label=59;break; //@line 5230 "tcc_bootstrap.c"
 case 21: 
 var $ld$30$0=(($l2)|0);
 var $106$0=HEAP32[(($ld$30$0)>>2)];
 var $ld$31$1=(($l2+4)|0);
 var $106$1=HEAP32[(($ld$31$1)>>2)];
 var $ld$32$0=(($l1)|0);
 var $107$0=HEAP32[(($ld$32$0)>>2)];
 var $ld$33$1=(($l1+4)|0);
 var $107$1=HEAP32[(($ld$33$1)>>2)];
 var $108$0=_i64Subtract($107$0,$107$1,$106$0,$106$1);var $108$1=tempRet0; //@line 5231 "tcc_bootstrap.c"
 var $st$34$0=(($l1)|0);
 HEAP32[(($st$34$0)>>2)]=$108$0;
 var $st$35$1=(($l1+4)|0);
 HEAP32[(($st$35$1)>>2)]=$108$1;
 label=59;break; //@line 5231 "tcc_bootstrap.c"
 case 22: 
 var $ld$36$0=(($l2)|0);
 var $110$0=HEAP32[(($ld$36$0)>>2)];
 var $ld$37$1=(($l2+4)|0);
 var $110$1=HEAP32[(($ld$37$1)>>2)];
 var $ld$38$0=(($l1)|0);
 var $111$0=HEAP32[(($ld$38$0)>>2)];
 var $ld$39$1=(($l1+4)|0);
 var $111$1=HEAP32[(($ld$39$1)>>2)];
 var $112$0=$111$0&$110$0;
 var $112$1=$111$1&$110$1;
 var $st$40$0=(($l1)|0);
 HEAP32[(($st$40$0)>>2)]=$112$0;
 var $st$41$1=(($l1+4)|0);
 HEAP32[(($st$41$1)>>2)]=$112$1;
 label=59;break; //@line 5232 "tcc_bootstrap.c"
 case 23: 
 var $ld$42$0=(($l2)|0);
 var $114$0=HEAP32[(($ld$42$0)>>2)];
 var $ld$43$1=(($l2+4)|0);
 var $114$1=HEAP32[(($ld$43$1)>>2)];
 var $ld$44$0=(($l1)|0);
 var $115$0=HEAP32[(($ld$44$0)>>2)];
 var $ld$45$1=(($l1+4)|0);
 var $115$1=HEAP32[(($ld$45$1)>>2)];
 var $116$0=$115$0^$114$0;
 var $116$1=$115$1^$114$1;
 var $st$46$0=(($l1)|0);
 HEAP32[(($st$46$0)>>2)]=$116$0;
 var $st$47$1=(($l1+4)|0);
 HEAP32[(($st$47$1)>>2)]=$116$1;
 label=59;break; //@line 5233 "tcc_bootstrap.c"
 case 24: 
 var $ld$48$0=(($l2)|0);
 var $118$0=HEAP32[(($ld$48$0)>>2)];
 var $ld$49$1=(($l2+4)|0);
 var $118$1=HEAP32[(($ld$49$1)>>2)];
 var $ld$50$0=(($l1)|0);
 var $119$0=HEAP32[(($ld$50$0)>>2)];
 var $ld$51$1=(($l1+4)|0);
 var $119$1=HEAP32[(($ld$51$1)>>2)];
 var $120$0=$119$0|$118$0;
 var $120$1=$119$1|$118$1;
 var $st$52$0=(($l1)|0);
 HEAP32[(($st$52$0)>>2)]=$120$0;
 var $st$53$1=(($l1+4)|0);
 HEAP32[(($st$53$1)>>2)]=$120$1;
 label=59;break; //@line 5234 "tcc_bootstrap.c"
 case 25: 
 var $ld$54$0=(($l2)|0);
 var $122$0=HEAP32[(($ld$54$0)>>2)];
 var $ld$55$1=(($l2+4)|0);
 var $122$1=HEAP32[(($ld$55$1)>>2)];
 var $ld$56$0=(($l1)|0);
 var $123$0=HEAP32[(($ld$56$0)>>2)];
 var $ld$57$1=(($l1+4)|0);
 var $123$1=HEAP32[(($ld$57$1)>>2)];
 var $124$0=___muldi3($123$0,$123$1,$122$0,$122$1);var $124$1=tempRet0; //@line 5235 "tcc_bootstrap.c"
 var $st$58$0=(($l1)|0);
 HEAP32[(($st$58$0)>>2)]=$124$0;
 var $st$59$1=(($l1+4)|0);
 HEAP32[(($st$59$1)>>2)]=$124$1;
 label=59;break; //@line 5235 "tcc_bootstrap.c"
 case 26: 
 var $ld$60$0=(($l2)|0);
 var $126$0=HEAP32[(($ld$60$0)>>2)];
 var $ld$61$1=(($l2+4)|0);
 var $126$1=HEAP32[(($ld$61$1)>>2)];
 var $$etemp$62$0=0;
 var $$etemp$62$1=0;
 var $127=(($126$0|0) == ($$etemp$62$0|0)) & (($126$1|0) == ($$etemp$62$1|0)); //@line 5241 "tcc_bootstrap.c"
 if($127){label=27;break;}else{label=30;break;} //@line 5241 "tcc_bootstrap.c"
 case 27: 
 var $129=HEAP32[((76712)>>2)]; //@line 5242 "tcc_bootstrap.c"
 var $130=($129|0)!=0; //@line 5242 "tcc_bootstrap.c"
 if($130){label=28;break;}else{label=29;break;} //@line 5242 "tcc_bootstrap.c"
 case 28: 
 _tcc_error(8320,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs; //@line 5243 "tcc_bootstrap.c"
 label=29;break; //@line 5243 "tcc_bootstrap.c"
 case 29: 
 label=143;break; //@line 5244 "tcc_bootstrap.c"
 case 30: 
 var $134=$1; //@line 5246 "tcc_bootstrap.c"
 if(($134|0)==37){ label=32;break;}else if(($134|0)==176){ label=33;break;}else if(($134|0)==177){ label=34;break;}else{label=31;break;}
 case 31: 
 var $ld$63$0=(($l1)|0);
 var $136$0=HEAP32[(($ld$63$0)>>2)];
 var $ld$64$1=(($l1+4)|0);
 var $136$1=HEAP32[(($ld$64$1)>>2)];
 var $ld$65$0=(($l2)|0);
 var $137$0=HEAP32[(($ld$65$0)>>2)];
 var $ld$66$1=(($l2+4)|0);
 var $137$1=HEAP32[(($ld$66$1)>>2)];
 var $138$0=_gen_opic_sdiv($136$0,$136$1,$137$0,$137$1);
 var $138$1=tempRet0;
 var $st$67$0=(($l1)|0);
 HEAP32[(($st$67$0)>>2)]=$138$0;
 var $st$68$1=(($l1+4)|0);
 HEAP32[(($st$68$1)>>2)]=$138$1;
 label=35;break; //@line 5247 "tcc_bootstrap.c"
 case 32: 
 var $ld$69$0=(($l1)|0);
 var $140$0=HEAP32[(($ld$69$0)>>2)];
 var $ld$70$1=(($l1+4)|0);
 var $140$1=HEAP32[(($ld$70$1)>>2)];
 var $ld$71$0=(($l2)|0);
 var $141$0=HEAP32[(($ld$71$0)>>2)];
 var $ld$72$1=(($l2+4)|0);
 var $141$1=HEAP32[(($ld$72$1)>>2)];
 var $ld$73$0=(($l1)|0);
 var $142$0=HEAP32[(($ld$73$0)>>2)];
 var $ld$74$1=(($l1+4)|0);
 var $142$1=HEAP32[(($ld$74$1)>>2)];
 var $ld$75$0=(($l2)|0);
 var $143$0=HEAP32[(($ld$75$0)>>2)];
 var $ld$76$1=(($l2+4)|0);
 var $143$1=HEAP32[(($ld$76$1)>>2)];
 var $144$0=_gen_opic_sdiv($142$0,$142$1,$143$0,$143$1);
 var $144$1=tempRet0;
 var $145$0=___muldi3($141$0,$141$1,$144$0,$144$1);var $145$1=tempRet0; //@line 5248 "tcc_bootstrap.c"
 var $146$0=_i64Subtract($140$0,$140$1,$145$0,$145$1);var $146$1=tempRet0; //@line 5248 "tcc_bootstrap.c"
 var $st$77$0=(($l1)|0);
 HEAP32[(($st$77$0)>>2)]=$146$0;
 var $st$78$1=(($l1+4)|0);
 HEAP32[(($st$78$1)>>2)]=$146$1;
 label=35;break; //@line 5248 "tcc_bootstrap.c"
 case 33: 
 var $ld$79$0=(($l1)|0);
 var $148$0=HEAP32[(($ld$79$0)>>2)];
 var $ld$80$1=(($l1+4)|0);
 var $148$1=HEAP32[(($ld$80$1)>>2)];
 var $ld$81$0=(($l2)|0);
 var $149$0=HEAP32[(($ld$81$0)>>2)];
 var $ld$82$1=(($l2+4)|0);
 var $149$1=HEAP32[(($ld$82$1)>>2)];
 var $150$0=___udivdi3($148$0,$148$1,$149$0,$149$1);var $150$1=tempRet0; //@line 5249 "tcc_bootstrap.c"
 var $st$83$0=(($l1)|0);
 HEAP32[(($st$83$0)>>2)]=$150$0;
 var $st$84$1=(($l1+4)|0);
 HEAP32[(($st$84$1)>>2)]=$150$1;
 label=35;break; //@line 5249 "tcc_bootstrap.c"
 case 34: 
 var $ld$85$0=(($l1)|0);
 var $152$0=HEAP32[(($ld$85$0)>>2)];
 var $ld$86$1=(($l1+4)|0);
 var $152$1=HEAP32[(($ld$86$1)>>2)];
 var $ld$87$0=(($l2)|0);
 var $153$0=HEAP32[(($ld$87$0)>>2)];
 var $ld$88$1=(($l2+4)|0);
 var $153$1=HEAP32[(($ld$88$1)>>2)];
 var $154$0=___uremdi3($152$0,$152$1,$153$0,$153$1);var $154$1=tempRet0; //@line 5250 "tcc_bootstrap.c"
 var $st$89$0=(($l1)|0);
 HEAP32[(($st$89$0)>>2)]=$154$0;
 var $st$90$1=(($l1+4)|0);
 HEAP32[(($st$90$1)>>2)]=$154$1;
 label=35;break; //@line 5250 "tcc_bootstrap.c"
 case 35: 
 label=59;break; //@line 5252 "tcc_bootstrap.c"
 case 36: 
 var $ld$91$0=(($l2)|0);
 var $157$0=HEAP32[(($ld$91$0)>>2)];
 var $ld$92$1=(($l2+4)|0);
 var $157$1=HEAP32[(($ld$92$1)>>2)];
 var $158=$shm; //@line 5253 "tcc_bootstrap.c"
 var $159$0=$158;
 var $159$1=((((($158|0)<0))|0)?-1:0);
 var $160$0=$157$0&$159$0;
 var $160$1=$157$1&$159$1;
 var $ld$93$0=(($l1)|0);
 var $161$0=HEAP32[(($ld$93$0)>>2)];
 var $ld$94$1=(($l1+4)|0);
 var $161$1=HEAP32[(($ld$94$1)>>2)];
 var $162$0=_bitshift64Shl($161$0,$161$1,$160$0);var $162$1=tempRet0; //@line 5253 "tcc_bootstrap.c"
 var $st$95$0=(($l1)|0);
 HEAP32[(($st$95$0)>>2)]=$162$0;
 var $st$96$1=(($l1+4)|0);
 HEAP32[(($st$96$1)>>2)]=$162$1;
 label=59;break; //@line 5253 "tcc_bootstrap.c"
 case 37: 
 var $ld$97$0=(($l2)|0);
 var $164$0=HEAP32[(($ld$97$0)>>2)];
 var $ld$98$1=(($l2+4)|0);
 var $164$1=HEAP32[(($ld$98$1)>>2)];
 var $165=$shm; //@line 5254 "tcc_bootstrap.c"
 var $166$0=$165;
 var $166$1=((((($165|0)<0))|0)?-1:0);
 var $167$0=$164$0&$166$0;
 var $167$1=$164$1&$166$1;
 var $ld$99$0=(($l1)|0);
 var $168$0=HEAP32[(($ld$99$0)>>2)];
 var $ld$100$1=(($l1+4)|0);
 var $168$1=HEAP32[(($ld$100$1)>>2)];
 var $169$0=_bitshift64Lshr($168$0,$168$1,$167$0);var $169$1=tempRet0; //@line 5254 "tcc_bootstrap.c"
 var $st$101$0=(($l1)|0);
 HEAP32[(($st$101$0)>>2)]=$169$0;
 var $st$102$1=(($l1+4)|0);
 HEAP32[(($st$102$1)>>2)]=$169$1;
 label=59;break; //@line 5254 "tcc_bootstrap.c"
 case 38: 
 var $ld$103$0=(($l1)|0);
 var $171$0=HEAP32[(($ld$103$0)>>2)];
 var $ld$104$1=(($l1+4)|0);
 var $171$1=HEAP32[(($ld$104$1)>>2)];
 var $172$0=($171$1>>>31)|(0<<1);
 var $172$1=(0>>>31)|(0<<1);
 var $$etemp$105$0=0;
 var $$etemp$105$1=0;
 var $173=(($172$0|0) != ($$etemp$105$0|0)) | (($172$1|0) != ($$etemp$105$1|0)); //@line 5256 "tcc_bootstrap.c"
 if($173){label=39;break;}else{label=40;break;} //@line 5256 "tcc_bootstrap.c"
 case 39: 
 var $ld$106$0=(($l1)|0);
 var $175$0=HEAP32[(($ld$106$0)>>2)];
 var $ld$107$1=(($l1+4)|0);
 var $175$1=HEAP32[(($ld$107$1)>>2)];
 var $$etemp$108$0=-1;
 var $$etemp$108$1=-1;
 var $176$0=$175$0^$$etemp$108$0;
 var $176$1=$175$1^$$etemp$108$1;
 var $ld$109$0=(($l2)|0);
 var $177$0=HEAP32[(($ld$109$0)>>2)];
 var $ld$110$1=(($l2+4)|0);
 var $177$1=HEAP32[(($ld$110$1)>>2)];
 var $178=$shm; //@line 5256 "tcc_bootstrap.c"
 var $179$0=$178;
 var $179$1=((((($178|0)<0))|0)?-1:0);
 var $180$0=$177$0&$179$0;
 var $180$1=$177$1&$179$1;
 var $181$0=_bitshift64Lshr($176$0,$176$1,$180$0);var $181$1=tempRet0; //@line 5256 "tcc_bootstrap.c"
 var $$etemp$111$0=-1;
 var $$etemp$111$1=-1;
 var $182$0=$181$0^$$etemp$111$0;
 var $182$1=$181$1^$$etemp$111$1;
 var $191$1=$182$1;var $191$0=$182$0;label=41;break; //@line 5256 "tcc_bootstrap.c"
 case 40: 
 var $ld$112$0=(($l1)|0);
 var $184$0=HEAP32[(($ld$112$0)>>2)];
 var $ld$113$1=(($l1+4)|0);
 var $184$1=HEAP32[(($ld$113$1)>>2)];
 var $ld$114$0=(($l2)|0);
 var $185$0=HEAP32[(($ld$114$0)>>2)];
 var $ld$115$1=(($l2+4)|0);
 var $185$1=HEAP32[(($ld$115$1)>>2)];
 var $186=$shm; //@line 5256 "tcc_bootstrap.c"
 var $187$0=$186;
 var $187$1=((((($186|0)<0))|0)?-1:0);
 var $188$0=$185$0&$187$0;
 var $188$1=$185$1&$187$1;
 var $189$0=_bitshift64Lshr($184$0,$184$1,$188$0);var $189$1=tempRet0; //@line 5256 "tcc_bootstrap.c"
 var $191$1=$189$1;var $191$0=$189$0;label=41;break; //@line 5256 "tcc_bootstrap.c"
 case 41: 
 var $191$0;
 var $191$1;
 var $st$116$0=(($l1)|0);
 HEAP32[(($st$116$0)>>2)]=$191$0;
 var $st$117$1=(($l1+4)|0);
 HEAP32[(($st$117$1)>>2)]=$191$1;
 label=59;break; //@line 5257 "tcc_bootstrap.c"
 case 42: 
 var $ld$118$0=(($l1)|0);
 var $193$0=HEAP32[(($ld$118$0)>>2)];
 var $ld$119$1=(($l1+4)|0);
 var $193$1=HEAP32[(($ld$119$1)>>2)];
 var $ld$120$0=(($l2)|0);
 var $194$0=HEAP32[(($ld$120$0)>>2)];
 var $ld$121$1=(($l2+4)|0);
 var $194$1=HEAP32[(($ld$121$1)>>2)];
 var $195=(($193$1>>>0) < ($194$1>>>0)) | (((($193$1>>>0) == ($194$1>>>0) & ($193$0>>>0) <  ($194$0>>>0)))); //@line 5258 "tcc_bootstrap.c"
 var $196=($195&1); //@line 5258 "tcc_bootstrap.c"
 var $197$0=$196;
 var $197$1=((((($196|0)<0))|0)?-1:0);
 var $st$122$0=(($l1)|0);
 HEAP32[(($st$122$0)>>2)]=$197$0;
 var $st$123$1=(($l1+4)|0);
 HEAP32[(($st$123$1)>>2)]=$197$1;
 label=59;break; //@line 5258 "tcc_bootstrap.c"
 case 43: 
 var $ld$124$0=(($l1)|0);
 var $199$0=HEAP32[(($ld$124$0)>>2)];
 var $ld$125$1=(($l1+4)|0);
 var $199$1=HEAP32[(($ld$125$1)>>2)];
 var $ld$126$0=(($l2)|0);
 var $200$0=HEAP32[(($ld$126$0)>>2)];
 var $ld$127$1=(($l2+4)|0);
 var $200$1=HEAP32[(($ld$127$1)>>2)];
 var $201=(($199$1>>>0) >= ($200$1>>>0)) & (((($199$1>>>0) >  ($200$1>>>0)) | ($199$0>>>0) >= ($200$0>>>0))); //@line 5259 "tcc_bootstrap.c"
 var $202=($201&1); //@line 5259 "tcc_bootstrap.c"
 var $203$0=$202;
 var $203$1=((((($202|0)<0))|0)?-1:0);
 var $st$128$0=(($l1)|0);
 HEAP32[(($st$128$0)>>2)]=$203$0;
 var $st$129$1=(($l1+4)|0);
 HEAP32[(($st$129$1)>>2)]=$203$1;
 label=59;break; //@line 5259 "tcc_bootstrap.c"
 case 44: 
 var $ld$130$0=(($l1)|0);
 var $205$0=HEAP32[(($ld$130$0)>>2)];
 var $ld$131$1=(($l1+4)|0);
 var $205$1=HEAP32[(($ld$131$1)>>2)];
 var $ld$132$0=(($l2)|0);
 var $206$0=HEAP32[(($ld$132$0)>>2)];
 var $ld$133$1=(($l2+4)|0);
 var $206$1=HEAP32[(($ld$133$1)>>2)];
 var $207=(($205$0|0) == ($206$0|0)) & (($205$1|0) == ($206$1|0)); //@line 5260 "tcc_bootstrap.c"
 var $208=($207&1); //@line 5260 "tcc_bootstrap.c"
 var $209$0=$208;
 var $209$1=((((($208|0)<0))|0)?-1:0);
 var $st$134$0=(($l1)|0);
 HEAP32[(($st$134$0)>>2)]=$209$0;
 var $st$135$1=(($l1+4)|0);
 HEAP32[(($st$135$1)>>2)]=$209$1;
 label=59;break; //@line 5260 "tcc_bootstrap.c"
 case 45: 
 var $ld$136$0=(($l1)|0);
 var $211$0=HEAP32[(($ld$136$0)>>2)];
 var $ld$137$1=(($l1+4)|0);
 var $211$1=HEAP32[(($ld$137$1)>>2)];
 var $ld$138$0=(($l2)|0);
 var $212$0=HEAP32[(($ld$138$0)>>2)];
 var $ld$139$1=(($l2+4)|0);
 var $212$1=HEAP32[(($ld$139$1)>>2)];
 var $213=(($211$0|0) != ($212$0|0)) | (($211$1|0) != ($212$1|0)); //@line 5261 "tcc_bootstrap.c"
 var $214=($213&1); //@line 5261 "tcc_bootstrap.c"
 var $215$0=$214;
 var $215$1=((((($214|0)<0))|0)?-1:0);
 var $st$140$0=(($l1)|0);
 HEAP32[(($st$140$0)>>2)]=$215$0;
 var $st$141$1=(($l1+4)|0);
 HEAP32[(($st$141$1)>>2)]=$215$1;
 label=59;break; //@line 5261 "tcc_bootstrap.c"
 case 46: 
 var $ld$142$0=(($l1)|0);
 var $217$0=HEAP32[(($ld$142$0)>>2)];
 var $ld$143$1=(($l1+4)|0);
 var $217$1=HEAP32[(($ld$143$1)>>2)];
 var $ld$144$0=(($l2)|0);
 var $218$0=HEAP32[(($ld$144$0)>>2)];
 var $ld$145$1=(($l2+4)|0);
 var $218$1=HEAP32[(($ld$145$1)>>2)];
 var $219=(($217$1>>>0) <= ($218$1>>>0)) & (((($217$1>>>0) <  ($218$1>>>0)) | ($217$0>>>0) <= ($218$0>>>0))); //@line 5262 "tcc_bootstrap.c"
 var $220=($219&1); //@line 5262 "tcc_bootstrap.c"
 var $221$0=$220;
 var $221$1=((((($220|0)<0))|0)?-1:0);
 var $st$146$0=(($l1)|0);
 HEAP32[(($st$146$0)>>2)]=$221$0;
 var $st$147$1=(($l1+4)|0);
 HEAP32[(($st$147$1)>>2)]=$221$1;
 label=59;break; //@line 5262 "tcc_bootstrap.c"
 case 47: 
 var $ld$148$0=(($l1)|0);
 var $223$0=HEAP32[(($ld$148$0)>>2)];
 var $ld$149$1=(($l1+4)|0);
 var $223$1=HEAP32[(($ld$149$1)>>2)];
 var $ld$150$0=(($l2)|0);
 var $224$0=HEAP32[(($ld$150$0)>>2)];
 var $ld$151$1=(($l2+4)|0);
 var $224$1=HEAP32[(($ld$151$1)>>2)];
 var $225=(($223$1>>>0) > ($224$1>>>0)) | (((($223$1>>>0) == ($224$1>>>0) & ($223$0>>>0) >  ($224$0>>>0)))); //@line 5263 "tcc_bootstrap.c"
 var $226=($225&1); //@line 5263 "tcc_bootstrap.c"
 var $227$0=$226;
 var $227$1=((((($226|0)<0))|0)?-1:0);
 var $st$152$0=(($l1)|0);
 HEAP32[(($st$152$0)>>2)]=$227$0;
 var $st$153$1=(($l1+4)|0);
 HEAP32[(($st$153$1)>>2)]=$227$1;
 label=59;break; //@line 5263 "tcc_bootstrap.c"
 case 48: 
 var $ld$154$0=(($l1)|0);
 var $229$0=HEAP32[(($ld$154$0)>>2)];
 var $ld$155$1=(($l1+4)|0);
 var $229$1=HEAP32[(($ld$155$1)>>2)];
 var $ld$156$0=(($l2)|0);
 var $230$0=HEAP32[(($ld$156$0)>>2)];
 var $ld$157$1=(($l2+4)|0);
 var $230$1=HEAP32[(($ld$157$1)>>2)];
 var $231=_gen_opic_lt($229$0,$229$1,$230$0,$230$1);
 var $232$0=$231;
 var $232$1=((((($231|0)<0))|0)?-1:0);
 var $st$158$0=(($l1)|0);
 HEAP32[(($st$158$0)>>2)]=$232$0;
 var $st$159$1=(($l1+4)|0);
 HEAP32[(($st$159$1)>>2)]=$232$1;
 label=59;break; //@line 5264 "tcc_bootstrap.c"
 case 49: 
 var $ld$160$0=(($l1)|0);
 var $234$0=HEAP32[(($ld$160$0)>>2)];
 var $ld$161$1=(($l1+4)|0);
 var $234$1=HEAP32[(($ld$161$1)>>2)];
 var $ld$162$0=(($l2)|0);
 var $235$0=HEAP32[(($ld$162$0)>>2)];
 var $ld$163$1=(($l2+4)|0);
 var $235$1=HEAP32[(($ld$163$1)>>2)];
 var $236=_gen_opic_lt($234$0,$234$1,$235$0,$235$1);
 var $237=($236|0)!=0; //@line 5265 "tcc_bootstrap.c"
 var $238=$237^1; //@line 5265 "tcc_bootstrap.c"
 var $239=($238&1); //@line 5265 "tcc_bootstrap.c"
 var $240$0=$239;
 var $240$1=((((($239|0)<0))|0)?-1:0);
 var $st$164$0=(($l1)|0);
 HEAP32[(($st$164$0)>>2)]=$240$0;
 var $st$165$1=(($l1+4)|0);
 HEAP32[(($st$165$1)>>2)]=$240$1;
 label=59;break; //@line 5265 "tcc_bootstrap.c"
 case 50: 
 var $ld$166$0=(($l2)|0);
 var $242$0=HEAP32[(($ld$166$0)>>2)];
 var $ld$167$1=(($l2+4)|0);
 var $242$1=HEAP32[(($ld$167$1)>>2)];
 var $ld$168$0=(($l1)|0);
 var $243$0=HEAP32[(($ld$168$0)>>2)];
 var $ld$169$1=(($l1+4)|0);
 var $243$1=HEAP32[(($ld$169$1)>>2)];
 var $244=_gen_opic_lt($242$0,$242$1,$243$0,$243$1);
 var $245=($244|0)!=0; //@line 5266 "tcc_bootstrap.c"
 var $246=$245^1; //@line 5266 "tcc_bootstrap.c"
 var $247=($246&1); //@line 5266 "tcc_bootstrap.c"
 var $248$0=$247;
 var $248$1=((((($247|0)<0))|0)?-1:0);
 var $st$170$0=(($l1)|0);
 HEAP32[(($st$170$0)>>2)]=$248$0;
 var $st$171$1=(($l1+4)|0);
 HEAP32[(($st$171$1)>>2)]=$248$1;
 label=59;break; //@line 5266 "tcc_bootstrap.c"
 case 51: 
 var $ld$172$0=(($l2)|0);
 var $250$0=HEAP32[(($ld$172$0)>>2)];
 var $ld$173$1=(($l2+4)|0);
 var $250$1=HEAP32[(($ld$173$1)>>2)];
 var $ld$174$0=(($l1)|0);
 var $251$0=HEAP32[(($ld$174$0)>>2)];
 var $ld$175$1=(($l1+4)|0);
 var $251$1=HEAP32[(($ld$175$1)>>2)];
 var $252=_gen_opic_lt($250$0,$250$1,$251$0,$251$1);
 var $253$0=$252;
 var $253$1=((((($252|0)<0))|0)?-1:0);
 var $st$176$0=(($l1)|0);
 HEAP32[(($st$176$0)>>2)]=$253$0;
 var $st$177$1=(($l1+4)|0);
 HEAP32[(($st$177$1)>>2)]=$253$1;
 label=59;break; //@line 5267 "tcc_bootstrap.c"
 case 52: 
 var $ld$178$0=(($l1)|0);
 var $255$0=HEAP32[(($ld$178$0)>>2)];
 var $ld$179$1=(($l1+4)|0);
 var $255$1=HEAP32[(($ld$179$1)>>2)];
 var $$etemp$180$0=0;
 var $$etemp$180$1=0;
 var $256=(($255$0|0) != ($$etemp$180$0|0)) | (($255$1|0) != ($$etemp$180$1|0)); //@line 5268 "tcc_bootstrap.c"
 if($256){label=53;break;}else{var $261=0;label=54;break;} //@line 5268 "tcc_bootstrap.c"
 case 53: 
 var $ld$181$0=(($l2)|0);
 var $258$0=HEAP32[(($ld$181$0)>>2)];
 var $ld$182$1=(($l2+4)|0);
 var $258$1=HEAP32[(($ld$182$1)>>2)];
 var $$etemp$183$0=0;
 var $$etemp$183$1=0;
 var $259=(($258$0|0) != ($$etemp$183$0|0)) | (($258$1|0) != ($$etemp$183$1|0)); //@line 5268 "tcc_bootstrap.c"
 var $261=$259;label=54;break;
 case 54: 
 var $261;
 var $262=($261&1);
 var $263$0=$262;
 var $263$1=((((($262|0)<0))|0)?-1:0);
 var $st$184$0=(($l1)|0);
 HEAP32[(($st$184$0)>>2)]=$263$0;
 var $st$185$1=(($l1+4)|0);
 HEAP32[(($st$185$1)>>2)]=$263$1;
 label=59;break; //@line 5268 "tcc_bootstrap.c"
 case 55: 
 var $ld$186$0=(($l1)|0);
 var $265$0=HEAP32[(($ld$186$0)>>2)];
 var $ld$187$1=(($l1+4)|0);
 var $265$1=HEAP32[(($ld$187$1)>>2)];
 var $$etemp$188$0=0;
 var $$etemp$188$1=0;
 var $266=(($265$0|0) != ($$etemp$188$0|0)) | (($265$1|0) != ($$etemp$188$1|0)); //@line 5269 "tcc_bootstrap.c"
 if($266){var $271=1;label=57;break;}else{label=56;break;} //@line 5269 "tcc_bootstrap.c"
 case 56: 
 var $ld$189$0=(($l2)|0);
 var $268$0=HEAP32[(($ld$189$0)>>2)];
 var $ld$190$1=(($l2+4)|0);
 var $268$1=HEAP32[(($ld$190$1)>>2)];
 var $$etemp$191$0=0;
 var $$etemp$191$1=0;
 var $269=(($268$0|0) != ($$etemp$191$0|0)) | (($268$1|0) != ($$etemp$191$1|0)); //@line 5269 "tcc_bootstrap.c"
 var $271=$269;label=57;break; //@line 5269 "tcc_bootstrap.c"
 case 57: 
 var $271;
 var $272=($271&1); //@line 5269 "tcc_bootstrap.c"
 var $273$0=$272;
 var $273$1=((((($272|0)<0))|0)?-1:0);
 var $st$192$0=(($l1)|0);
 HEAP32[(($st$192$0)>>2)]=$273$0;
 var $st$193$1=(($l1+4)|0);
 HEAP32[(($st$193$1)>>2)]=$273$1;
 label=59;break; //@line 5269 "tcc_bootstrap.c"
 case 58: 
 label=143;break; //@line 5271 "tcc_bootstrap.c"
 case 59: 
 var $276=$t1; //@line 5273 "tcc_bootstrap.c"
 var $277=($276|0)!=4; //@line 5273 "tcc_bootstrap.c"
 if($277){label=60;break;}else{label=64;break;} //@line 5273 "tcc_bootstrap.c"
 case 60: 
 var $ld$194$0=(($l1)|0);
 var $279$0=HEAP32[(($ld$194$0)>>2)];
 var $ld$195$1=(($l1+4)|0);
 var $279$1=HEAP32[(($ld$195$1)>>2)];
 var $280$0=$279$0;
 var $280=$280$0;
 var $281$0=$280;
 var $281$1=0;
 var $282=$v1; //@line 5274 "tcc_bootstrap.c"
 var $283=(($282)|0); //@line 5274 "tcc_bootstrap.c"
 var $284=(($283)|0); //@line 5274 "tcc_bootstrap.c"
 var $285=HEAP32[(($284)>>2)]; //@line 5274 "tcc_bootstrap.c"
 var $286=$285&16; //@line 5274 "tcc_bootstrap.c"
 var $287=($286|0)!=0; //@line 5274 "tcc_bootstrap.c"
 if($287){label=61;break;}else{label=62;break;} //@line 5274 "tcc_bootstrap.c"
 case 61: 
 var $294$1=0;var $294$0=0;label=63;break; //@line 5274 "tcc_bootstrap.c"
 case 62: 
 var $ld$196$0=(($l1)|0);
 var $290$0=HEAP32[(($ld$196$0)>>2)];
 var $ld$197$1=(($l1+4)|0);
 var $290$1=HEAP32[(($ld$197$1)>>2)];
 var $$etemp$198$0=-2147483648;
 var $$etemp$198$1=0;
 var $291$0=$290$0&$$etemp$198$0;
 var $291$1=$290$1&$$etemp$198$1;
 var $$etemp$199$0=0;
 var $$etemp$199$1=0;
 var $292$0=_i64Subtract($$etemp$199$0,$$etemp$199$1,$291$0,$291$1);var $292$1=tempRet0; //@line 5274 "tcc_bootstrap.c"
 var $294$1=$292$1;var $294$0=$292$0;label=63;break; //@line 5274 "tcc_bootstrap.c"
 case 63: 
 var $294$0;
 var $294$1;
 var $295$0=$281$0|$294$0;
 var $295$1=$281$1|$294$1;
 var $st$200$0=(($l1)|0);
 HEAP32[(($st$200$0)>>2)]=$295$0;
 var $st$201$1=(($l1+4)|0);
 HEAP32[(($st$201$1)>>2)]=$295$1;
 label=64;break; //@line 5274 "tcc_bootstrap.c"
 case 64: 
 var $ld$202$0=(($l1)|0);
 var $297$0=HEAP32[(($ld$202$0)>>2)];
 var $ld$203$1=(($l1+4)|0);
 var $297$1=HEAP32[(($ld$203$1)>>2)];
 var $298=$v1; //@line 5276 "tcc_bootstrap.c"
 var $299=(($298+16)|0); //@line 5276 "tcc_bootstrap.c"
 var $300=$299; //@line 5276 "tcc_bootstrap.c"
 var $st$204$0=(($300)|0);
 HEAP32[(($st$204$0)>>2)]=$297$0;
 var $st$205$1=(($300+4)|0);
 HEAP32[(($st$205$1)>>2)]=$297$1;
 var $301=HEAP32[((9288)>>2)]; //@line 5277 "tcc_bootstrap.c"
 var $302=((($301)-(40))|0); //@line 5277 "tcc_bootstrap.c"
 HEAP32[((9288)>>2)]=$302; //@line 5277 "tcc_bootstrap.c"
 label=153;break; //@line 5278 "tcc_bootstrap.c"
 case 65: 
 var $304=$c1; //@line 5279 "tcc_bootstrap.c"
 var $305=($304|0)!=0; //@line 5279 "tcc_bootstrap.c"
 if($305){label=66;break;}else{label=72;break;} //@line 5279 "tcc_bootstrap.c"
 case 66: 
 var $307=$1; //@line 5279 "tcc_bootstrap.c"
 var $308=($307|0)==43; //@line 5279 "tcc_bootstrap.c"
 if($308){label=71;break;}else{label=67;break;} //@line 5279 "tcc_bootstrap.c"
 case 67: 
 var $310=$1; //@line 5279 "tcc_bootstrap.c"
 var $311=($310|0)==38; //@line 5279 "tcc_bootstrap.c"
 if($311){label=71;break;}else{label=68;break;} //@line 5279 "tcc_bootstrap.c"
 case 68: 
 var $313=$1; //@line 5279 "tcc_bootstrap.c"
 var $314=($313|0)==94; //@line 5279 "tcc_bootstrap.c"
 if($314){label=71;break;}else{label=69;break;} //@line 5279 "tcc_bootstrap.c"
 case 69: 
 var $316=$1; //@line 5279 "tcc_bootstrap.c"
 var $317=($316|0)==124; //@line 5279 "tcc_bootstrap.c"
 if($317){label=71;break;}else{label=70;break;} //@line 5279 "tcc_bootstrap.c"
 case 70: 
 var $319=$1; //@line 5279 "tcc_bootstrap.c"
 var $320=($319|0)==42; //@line 5279 "tcc_bootstrap.c"
 if($320){label=71;break;}else{label=72;break;} //@line 5279 "tcc_bootstrap.c"
 case 71: 
 _vswap(); //@line 5281 "tcc_bootstrap.c"
 var $322=$c1; //@line 5282 "tcc_bootstrap.c"
 $c2=$322; //@line 5282 "tcc_bootstrap.c"
 var $ld$206$0=(($l1)|0);
 var $323$0=HEAP32[(($ld$206$0)>>2)];
 var $ld$207$1=(($l1+4)|0);
 var $323$1=HEAP32[(($ld$207$1)>>2)];
 var $st$208$0=(($l2)|0);
 HEAP32[(($st$208$0)>>2)]=$323$0;
 var $st$209$1=(($l2+4)|0);
 HEAP32[(($st$209$1)>>2)]=$323$1;
 label=72;break; //@line 5284 "tcc_bootstrap.c"
 case 72: 
 var $325=HEAP32[((76712)>>2)]; //@line 5285 "tcc_bootstrap.c"
 var $326=($325|0)!=0; //@line 5285 "tcc_bootstrap.c"
 if($326){label=81;break;}else{label=73;break;} //@line 5285 "tcc_bootstrap.c"
 case 73: 
 var $328=$c1; //@line 5285 "tcc_bootstrap.c"
 var $329=($328|0)!=0; //@line 5285 "tcc_bootstrap.c"
 if($329){label=74;break;}else{label=81;break;} //@line 5285 "tcc_bootstrap.c"
 case 74: 
 var $ld$210$0=(($l1)|0);
 var $331$0=HEAP32[(($ld$210$0)>>2)];
 var $ld$211$1=(($l1+4)|0);
 var $331$1=HEAP32[(($ld$211$1)>>2)];
 var $$etemp$212$0=0;
 var $$etemp$212$1=0;
 var $332=(($331$0|0) == ($$etemp$212$0|0)) & (($331$1|0) == ($$etemp$212$1|0)); //@line 5285 "tcc_bootstrap.c"
 if($332){label=75;break;}else{label=78;break;} //@line 5285 "tcc_bootstrap.c"
 case 75: 
 var $334=$1; //@line 5285 "tcc_bootstrap.c"
 var $335=($334|0)==1; //@line 5285 "tcc_bootstrap.c"
 if($335){label=80;break;}else{label=76;break;} //@line 5285 "tcc_bootstrap.c"
 case 76: 
 var $337=$1; //@line 5285 "tcc_bootstrap.c"
 var $338=($337|0)==201; //@line 5285 "tcc_bootstrap.c"
 if($338){label=80;break;}else{label=77;break;} //@line 5285 "tcc_bootstrap.c"
 case 77: 
 var $340=$1; //@line 5285 "tcc_bootstrap.c"
 var $341=($340|0)==2; //@line 5285 "tcc_bootstrap.c"
 if($341){label=80;break;}else{label=78;break;} //@line 5285 "tcc_bootstrap.c"
 case 78: 
 var $ld$213$0=(($l1)|0);
 var $343$0=HEAP32[(($ld$213$0)>>2)];
 var $ld$214$1=(($l1+4)|0);
 var $343$1=HEAP32[(($ld$214$1)>>2)];
 var $$etemp$215$0=-1;
 var $$etemp$215$1=-1;
 var $344=(($343$0|0) == ($$etemp$215$0|0)) & (($343$1|0) == ($$etemp$215$1|0)); //@line 5285 "tcc_bootstrap.c"
 if($344){label=79;break;}else{label=81;break;} //@line 5285 "tcc_bootstrap.c"
 case 79: 
 var $346=$1; //@line 5285 "tcc_bootstrap.c"
 var $347=($346|0)==2; //@line 5285 "tcc_bootstrap.c"
 if($347){label=80;break;}else{label=81;break;} //@line 5285 "tcc_bootstrap.c"
 case 80: 
 var $349=HEAP32[((9288)>>2)]; //@line 5289 "tcc_bootstrap.c"
 var $350=((($349)-(40))|0); //@line 5289 "tcc_bootstrap.c"
 HEAP32[((9288)>>2)]=$350; //@line 5289 "tcc_bootstrap.c"
 label=152;break; //@line 5290 "tcc_bootstrap.c"
 case 81: 
 var $352=HEAP32[((76712)>>2)]; //@line 5290 "tcc_bootstrap.c"
 var $353=($352|0)!=0; //@line 5290 "tcc_bootstrap.c"
 if($353){label=96;break;}else{label=82;break;} //@line 5290 "tcc_bootstrap.c"
 case 82: 
 var $355=$c2; //@line 5290 "tcc_bootstrap.c"
 var $356=($355|0)!=0; //@line 5290 "tcc_bootstrap.c"
 if($356){label=83;break;}else{label=96;break;} //@line 5290 "tcc_bootstrap.c"
 case 83: 
 var $ld$216$0=(($l2)|0);
 var $358$0=HEAP32[(($ld$216$0)>>2)];
 var $ld$217$1=(($l2+4)|0);
 var $358$1=HEAP32[(($ld$217$1)>>2)];
 var $$etemp$218$0=0;
 var $$etemp$218$1=0;
 var $359=(($358$0|0) == ($$etemp$218$0|0)) & (($358$1|0) == ($$etemp$218$1|0)); //@line 5290 "tcc_bootstrap.c"
 if($359){label=84;break;}else{label=86;break;} //@line 5290 "tcc_bootstrap.c"
 case 84: 
 var $361=$1; //@line 5290 "tcc_bootstrap.c"
 var $362=($361|0)==38; //@line 5290 "tcc_bootstrap.c"
 if($362){label=93;break;}else{label=85;break;} //@line 5290 "tcc_bootstrap.c"
 case 85: 
 var $364=$1; //@line 5290 "tcc_bootstrap.c"
 var $365=($364|0)==42; //@line 5290 "tcc_bootstrap.c"
 if($365){label=93;break;}else{label=86;break;} //@line 5290 "tcc_bootstrap.c"
 case 86: 
 var $367=$1; //@line 5290 "tcc_bootstrap.c"
 var $368=($367|0)==124; //@line 5290 "tcc_bootstrap.c"
 if($368){label=87;break;}else{label=90;break;} //@line 5290 "tcc_bootstrap.c"
 case 87: 
 var $ld$219$0=(($l2)|0);
 var $370$0=HEAP32[(($ld$219$0)>>2)];
 var $ld$220$1=(($l2+4)|0);
 var $370$1=HEAP32[(($ld$220$1)>>2)];
 var $$etemp$221$0=-1;
 var $$etemp$221$1=-1;
 var $371=(($370$0|0) == ($$etemp$221$0|0)) & (($370$1|0) == ($$etemp$221$1|0)); //@line 5290 "tcc_bootstrap.c"
 if($371){label=93;break;}else{label=88;break;} //@line 5290 "tcc_bootstrap.c"
 case 88: 
 var $ld$222$0=(($l2)|0);
 var $373$0=HEAP32[(($ld$222$0)>>2)];
 var $ld$223$1=(($l2+4)|0);
 var $373$1=HEAP32[(($ld$223$1)>>2)];
 var $$etemp$224$0=-1;
 var $$etemp$224$1=0;
 var $374=(($373$0|0) == ($$etemp$224$0|0)) & (($373$1|0) == ($$etemp$224$1|0)); //@line 5290 "tcc_bootstrap.c"
 if($374){label=89;break;}else{label=90;break;} //@line 5290 "tcc_bootstrap.c"
 case 89: 
 var $376=$t2; //@line 5290 "tcc_bootstrap.c"
 var $377=($376|0)!=4; //@line 5290 "tcc_bootstrap.c"
 if($377){label=93;break;}else{label=90;break;} //@line 5290 "tcc_bootstrap.c"
 case 90: 
 var $ld$225$0=(($l2)|0);
 var $379$0=HEAP32[(($ld$225$0)>>2)];
 var $ld$226$1=(($l2+4)|0);
 var $379$1=HEAP32[(($ld$226$1)>>2)];
 var $$etemp$227$0=1;
 var $$etemp$227$1=0;
 var $380=(($379$0|0) == ($$etemp$227$0|0)) & (($379$1|0) == ($$etemp$227$1|0)); //@line 5290 "tcc_bootstrap.c"
 if($380){label=91;break;}else{label=96;break;} //@line 5290 "tcc_bootstrap.c"
 case 91: 
 var $382=$1; //@line 5290 "tcc_bootstrap.c"
 var $383=($382|0)==37; //@line 5290 "tcc_bootstrap.c"
 if($383){label=93;break;}else{label=92;break;} //@line 5290 "tcc_bootstrap.c"
 case 92: 
 var $385=$1; //@line 5290 "tcc_bootstrap.c"
 var $386=($385|0)==177; //@line 5290 "tcc_bootstrap.c"
 if($386){label=93;break;}else{label=96;break;} //@line 5290 "tcc_bootstrap.c"
 case 93: 
 var $ld$228$0=(($l2)|0);
 var $388$0=HEAP32[(($ld$228$0)>>2)];
 var $ld$229$1=(($l2+4)|0);
 var $388$1=HEAP32[(($ld$229$1)>>2)];
 var $$etemp$230$0=1;
 var $$etemp$230$1=0;
 var $389=(($388$0|0) == ($$etemp$230$0|0)) & (($388$1|0) == ($$etemp$230$1|0)); //@line 5296 "tcc_bootstrap.c"
 if($389){label=94;break;}else{label=95;break;} //@line 5296 "tcc_bootstrap.c"
 case 94: 
 var $391=HEAP32[((9288)>>2)]; //@line 5297 "tcc_bootstrap.c"
 var $392=(($391+16)|0); //@line 5297 "tcc_bootstrap.c"
 var $393=$392; //@line 5297 "tcc_bootstrap.c"
 var $$etemp$231$0=0;
 var $$etemp$231$1=0;
 var $st$232$0=(($393)|0);
 HEAP32[(($st$232$0)>>2)]=$$etemp$231$0;
 var $st$233$1=(($393+4)|0);
 HEAP32[(($st$233$1)>>2)]=$$etemp$231$1;
 label=95;break; //@line 5297 "tcc_bootstrap.c"
 case 95: 
 _vswap(); //@line 5298 "tcc_bootstrap.c"
 var $395=HEAP32[((9288)>>2)]; //@line 5299 "tcc_bootstrap.c"
 var $396=((($395)-(40))|0); //@line 5299 "tcc_bootstrap.c"
 HEAP32[((9288)>>2)]=$396; //@line 5299 "tcc_bootstrap.c"
 label=151;break; //@line 5300 "tcc_bootstrap.c"
 case 96: 
 var $398=$c2; //@line 5300 "tcc_bootstrap.c"
 var $399=($398|0)!=0; //@line 5300 "tcc_bootstrap.c"
 if($399){label=97;break;}else{label=115;break;} //@line 5300 "tcc_bootstrap.c"
 case 97: 
 var $401=$1; //@line 5300 "tcc_bootstrap.c"
 var $402=($401|0)==42; //@line 5300 "tcc_bootstrap.c"
 if($402){label=101;break;}else{label=98;break;} //@line 5300 "tcc_bootstrap.c"
 case 98: 
 var $404=$1; //@line 5300 "tcc_bootstrap.c"
 var $405=($404|0)==47; //@line 5300 "tcc_bootstrap.c"
 if($405){label=101;break;}else{label=99;break;} //@line 5300 "tcc_bootstrap.c"
 case 99: 
 var $407=$1; //@line 5300 "tcc_bootstrap.c"
 var $408=($407|0)==176; //@line 5300 "tcc_bootstrap.c"
 if($408){label=101;break;}else{label=100;break;} //@line 5300 "tcc_bootstrap.c"
 case 100: 
 var $410=$1; //@line 5300 "tcc_bootstrap.c"
 var $411=($410|0)==178; //@line 5300 "tcc_bootstrap.c"
 if($411){label=101;break;}else{label=102;break;} //@line 5300 "tcc_bootstrap.c"
 case 101: 
 var $ld$234$0=(($l2)|0);
 var $413$0=HEAP32[(($ld$234$0)>>2)];
 var $ld$235$1=(($l2+4)|0);
 var $413$1=HEAP32[(($ld$235$1)>>2)];
 var $$etemp$236$0=1;
 var $$etemp$236$1=0;
 var $414=(($413$0|0) == ($$etemp$236$0|0)) & (($413$1|0) == ($$etemp$236$1|0)); //@line 5300 "tcc_bootstrap.c"
 if($414){label=114;break;}else{label=102;break;} //@line 5300 "tcc_bootstrap.c"
 case 102: 
 var $416=$1; //@line 5300 "tcc_bootstrap.c"
 var $417=($416|0)==43; //@line 5300 "tcc_bootstrap.c"
 if($417){label=109;break;}else{label=103;break;} //@line 5300 "tcc_bootstrap.c"
 case 103: 
 var $419=$1; //@line 5300 "tcc_bootstrap.c"
 var $420=($419|0)==45; //@line 5300 "tcc_bootstrap.c"
 if($420){label=109;break;}else{label=104;break;} //@line 5300 "tcc_bootstrap.c"
 case 104: 
 var $422=$1; //@line 5300 "tcc_bootstrap.c"
 var $423=($422|0)==124; //@line 5300 "tcc_bootstrap.c"
 if($423){label=109;break;}else{label=105;break;} //@line 5300 "tcc_bootstrap.c"
 case 105: 
 var $425=$1; //@line 5300 "tcc_bootstrap.c"
 var $426=($425|0)==94; //@line 5300 "tcc_bootstrap.c"
 if($426){label=109;break;}else{label=106;break;} //@line 5300 "tcc_bootstrap.c"
 case 106: 
 var $428=$1; //@line 5300 "tcc_bootstrap.c"
 var $429=($428|0)==1; //@line 5300 "tcc_bootstrap.c"
 if($429){label=109;break;}else{label=107;break;} //@line 5300 "tcc_bootstrap.c"
 case 107: 
 var $431=$1; //@line 5300 "tcc_bootstrap.c"
 var $432=($431|0)==201; //@line 5300 "tcc_bootstrap.c"
 if($432){label=109;break;}else{label=108;break;} //@line 5300 "tcc_bootstrap.c"
 case 108: 
 var $434=$1; //@line 5300 "tcc_bootstrap.c"
 var $435=($434|0)==2; //@line 5300 "tcc_bootstrap.c"
 if($435){label=109;break;}else{label=110;break;} //@line 5300 "tcc_bootstrap.c"
 case 109: 
 var $ld$237$0=(($l2)|0);
 var $437$0=HEAP32[(($ld$237$0)>>2)];
 var $ld$238$1=(($l2+4)|0);
 var $437$1=HEAP32[(($ld$238$1)>>2)];
 var $$etemp$239$0=0;
 var $$etemp$239$1=0;
 var $438=(($437$0|0) == ($$etemp$239$0|0)) & (($437$1|0) == ($$etemp$239$1|0)); //@line 5300 "tcc_bootstrap.c"
 if($438){label=114;break;}else{label=110;break;} //@line 5300 "tcc_bootstrap.c"
 case 110: 
 var $440=$1; //@line 5300 "tcc_bootstrap.c"
 var $441=($440|0)==38; //@line 5300 "tcc_bootstrap.c"
 if($441){label=111;break;}else{label=115;break;} //@line 5300 "tcc_bootstrap.c"
 case 111: 
 var $ld$240$0=(($l2)|0);
 var $443$0=HEAP32[(($ld$240$0)>>2)];
 var $ld$241$1=(($l2+4)|0);
 var $443$1=HEAP32[(($ld$241$1)>>2)];
 var $$etemp$242$0=-1;
 var $$etemp$242$1=-1;
 var $444=(($443$0|0) == ($$etemp$242$0|0)) & (($443$1|0) == ($$etemp$242$1|0)); //@line 5300 "tcc_bootstrap.c"
 if($444){label=114;break;}else{label=112;break;} //@line 5300 "tcc_bootstrap.c"
 case 112: 
 var $ld$243$0=(($l2)|0);
 var $446$0=HEAP32[(($ld$243$0)>>2)];
 var $ld$244$1=(($l2+4)|0);
 var $446$1=HEAP32[(($ld$244$1)>>2)];
 var $$etemp$245$0=-1;
 var $$etemp$245$1=0;
 var $447=(($446$0|0) == ($$etemp$245$0|0)) & (($446$1|0) == ($$etemp$245$1|0)); //@line 5300 "tcc_bootstrap.c"
 if($447){label=113;break;}else{label=115;break;} //@line 5300 "tcc_bootstrap.c"
 case 113: 
 var $449=$t2; //@line 5300 "tcc_bootstrap.c"
 var $450=($449|0)!=4; //@line 5300 "tcc_bootstrap.c"
 if($450){label=114;break;}else{label=115;break;} //@line 5300 "tcc_bootstrap.c"
 case 114: 
 var $452=HEAP32[((9288)>>2)]; //@line 5308 "tcc_bootstrap.c"
 var $453=((($452)-(40))|0); //@line 5308 "tcc_bootstrap.c"
 HEAP32[((9288)>>2)]=$453; //@line 5308 "tcc_bootstrap.c"
 label=150;break; //@line 5309 "tcc_bootstrap.c"
 case 115: 
 var $455=$c2; //@line 5309 "tcc_bootstrap.c"
 var $456=($455|0)!=0; //@line 5309 "tcc_bootstrap.c"
 if($456){label=116;break;}else{label=132;break;} //@line 5309 "tcc_bootstrap.c"
 case 116: 
 var $458=$1; //@line 5309 "tcc_bootstrap.c"
 var $459=($458|0)==42; //@line 5309 "tcc_bootstrap.c"
 if($459){label=119;break;}else{label=117;break;} //@line 5309 "tcc_bootstrap.c"
 case 117: 
 var $461=$1; //@line 5309 "tcc_bootstrap.c"
 var $462=($461|0)==178; //@line 5309 "tcc_bootstrap.c"
 if($462){label=119;break;}else{label=118;break;} //@line 5309 "tcc_bootstrap.c"
 case 118: 
 var $464=$1; //@line 5309 "tcc_bootstrap.c"
 var $465=($464|0)==176; //@line 5309 "tcc_bootstrap.c"
 if($465){label=119;break;}else{label=132;break;} //@line 5309 "tcc_bootstrap.c"
 case 119: 
 var $ld$246$0=(($l2)|0);
 var $467$0=HEAP32[(($ld$246$0)>>2)];
 var $ld$247$1=(($l2+4)|0);
 var $467$1=HEAP32[(($ld$247$1)>>2)];
 var $$etemp$248$0=0;
 var $$etemp$248$1=0;
 var $468=(($467$1>>>0) > ($$etemp$248$1>>>0)) | (((($467$1>>>0) == ($$etemp$248$1>>>0) & ($467$0>>>0) >  ($$etemp$248$0>>>0)))); //@line 5310 "tcc_bootstrap.c"
 if($468){label=120;break;}else{label=131;break;} //@line 5310 "tcc_bootstrap.c"
 case 120: 
 var $ld$249$0=(($l2)|0);
 var $470$0=HEAP32[(($ld$249$0)>>2)];
 var $ld$250$1=(($l2+4)|0);
 var $470$1=HEAP32[(($ld$250$1)>>2)];
 var $ld$251$0=(($l2)|0);
 var $471$0=HEAP32[(($ld$251$0)>>2)];
 var $ld$252$1=(($l2+4)|0);
 var $471$1=HEAP32[(($ld$252$1)>>2)];
 var $$etemp$253$0=1;
 var $$etemp$253$1=0;
 var $472$0=_i64Subtract($471$0,$471$1,$$etemp$253$0,$$etemp$253$1);var $472$1=tempRet0; //@line 5310 "tcc_bootstrap.c"
 var $473$0=$470$0&$472$0;
 var $473$1=$470$1&$472$1;
 var $$etemp$254$0=0;
 var $$etemp$254$1=0;
 var $474=(($473$0|0) == ($$etemp$254$0|0)) & (($473$1|0) == ($$etemp$254$1|0)); //@line 5310 "tcc_bootstrap.c"
 if($474){label=121;break;}else{label=131;break;} //@line 5310 "tcc_bootstrap.c"
 case 121: 
 $n=-1; //@line 5311 "tcc_bootstrap.c"
 label=122;break; //@line 5312 "tcc_bootstrap.c"
 case 122: 
 var $ld$255$0=(($l2)|0);
 var $477$0=HEAP32[(($ld$255$0)>>2)];
 var $ld$256$1=(($l2+4)|0);
 var $477$1=HEAP32[(($ld$256$1)>>2)];
 var $$etemp$257$0=0;
 var $$etemp$257$1=0;
 var $478=(($477$0|0) != ($$etemp$257$0|0)) | (($477$1|0) != ($$etemp$257$1|0)); //@line 5312 "tcc_bootstrap.c"
 if($478){label=123;break;}else{label=124;break;} //@line 5312 "tcc_bootstrap.c"
 case 123: 
 var $ld$258$0=(($l2)|0);
 var $480$0=HEAP32[(($ld$258$0)>>2)];
 var $ld$259$1=(($l2+4)|0);
 var $480$1=HEAP32[(($ld$259$1)>>2)];
 var $481$0=($480$0>>>1)|($480$1<<31);
 var $481$1=($480$1>>>1)|(0<<31);
 var $st$260$0=(($l2)|0);
 HEAP32[(($st$260$0)>>2)]=$481$0;
 var $st$261$1=(($l2+4)|0);
 HEAP32[(($st$261$1)>>2)]=$481$1;
 var $482=$n; //@line 5314 "tcc_bootstrap.c"
 var $483=((($482)+(1))|0); //@line 5314 "tcc_bootstrap.c"
 $n=$483; //@line 5314 "tcc_bootstrap.c"
 label=122;break; //@line 5315 "tcc_bootstrap.c"
 case 124: 
 var $485=$n; //@line 5316 "tcc_bootstrap.c"
 var $486$0=$485;
 var $486$1=((((($485|0)<0))|0)?-1:0);
 var $487=HEAP32[((9288)>>2)]; //@line 5316 "tcc_bootstrap.c"
 var $488=(($487+16)|0); //@line 5316 "tcc_bootstrap.c"
 var $489=$488; //@line 5316 "tcc_bootstrap.c"
 var $st$262$0=(($489)|0);
 HEAP32[(($st$262$0)>>2)]=$486$0;
 var $st$263$1=(($489+4)|0);
 HEAP32[(($st$263$1)>>2)]=$486$1;
 var $490=$1; //@line 5317 "tcc_bootstrap.c"
 var $491=($490|0)==42; //@line 5317 "tcc_bootstrap.c"
 if($491){label=125;break;}else{label=126;break;} //@line 5317 "tcc_bootstrap.c"
 case 125: 
 $1=1; //@line 5318 "tcc_bootstrap.c"
 label=130;break; //@line 5318 "tcc_bootstrap.c"
 case 126: 
 var $494=$1; //@line 5319 "tcc_bootstrap.c"
 var $495=($494|0)==178; //@line 5319 "tcc_bootstrap.c"
 if($495){label=127;break;}else{label=128;break;} //@line 5319 "tcc_bootstrap.c"
 case 127: 
 $1=2; //@line 5320 "tcc_bootstrap.c"
 label=129;break; //@line 5320 "tcc_bootstrap.c"
 case 128: 
 $1=201; //@line 5322 "tcc_bootstrap.c"
 label=129;break;
 case 129: 
 label=130;break;
 case 130: 
 label=131;break; //@line 5323 "tcc_bootstrap.c"
 case 131: 
 label=143;break; //@line 5324 "tcc_bootstrap.c"
 case 132: 
 var $502=$c2; //@line 5325 "tcc_bootstrap.c"
 var $503=($502|0)!=0; //@line 5325 "tcc_bootstrap.c"
 if($503){label=133;break;}else{label=142;break;} //@line 5325 "tcc_bootstrap.c"
 case 133: 
 var $505=$1; //@line 5325 "tcc_bootstrap.c"
 var $506=($505|0)==43; //@line 5325 "tcc_bootstrap.c"
 if($506){label=135;break;}else{label=134;break;} //@line 5325 "tcc_bootstrap.c"
 case 134: 
 var $508=$1; //@line 5325 "tcc_bootstrap.c"
 var $509=($508|0)==45; //@line 5325 "tcc_bootstrap.c"
 if($509){label=135;break;}else{label=142;break;} //@line 5325 "tcc_bootstrap.c"
 case 135: 
 var $511=HEAP32[((9288)>>2)]; //@line 5325 "tcc_bootstrap.c"
 var $512=((($511)-(40))|0); //@line 5325 "tcc_bootstrap.c"
 var $513=(($512+8)|0); //@line 5325 "tcc_bootstrap.c"
 var $514=HEAP16[(($513)>>1)]; //@line 5325 "tcc_bootstrap.c"
 var $515=($514&65535); //@line 5325 "tcc_bootstrap.c"
 var $516=$515&831; //@line 5325 "tcc_bootstrap.c"
 var $517=($516|0)==560; //@line 5325 "tcc_bootstrap.c"
 if($517){label=137;break;}else{label=136;break;} //@line 5325 "tcc_bootstrap.c"
 case 136: 
 var $519=HEAP32[((9288)>>2)]; //@line 5325 "tcc_bootstrap.c"
 var $520=((($519)-(40))|0); //@line 5325 "tcc_bootstrap.c"
 var $521=(($520+8)|0); //@line 5325 "tcc_bootstrap.c"
 var $522=HEAP16[(($521)>>1)]; //@line 5325 "tcc_bootstrap.c"
 var $523=($522&65535); //@line 5325 "tcc_bootstrap.c"
 var $524=$523&319; //@line 5325 "tcc_bootstrap.c"
 var $525=($524|0)==50; //@line 5325 "tcc_bootstrap.c"
 if($525){label=137;break;}else{label=142;break;} //@line 5325 "tcc_bootstrap.c"
 case 137: 
 var $527=$1; //@line 5328 "tcc_bootstrap.c"
 var $528=($527|0)==45; //@line 5328 "tcc_bootstrap.c"
 if($528){label=138;break;}else{label=139;break;} //@line 5328 "tcc_bootstrap.c"
 case 138: 
 var $ld$264$0=(($l2)|0);
 var $530$0=HEAP32[(($ld$264$0)>>2)];
 var $ld$265$1=(($l2+4)|0);
 var $530$1=HEAP32[(($ld$265$1)>>2)];
 var $$etemp$266$0=0;
 var $$etemp$266$1=0;
 var $531$0=_i64Subtract($$etemp$266$0,$$etemp$266$1,$530$0,$530$1);var $531$1=tempRet0; //@line 5329 "tcc_bootstrap.c"
 var $st$267$0=(($l2)|0);
 HEAP32[(($st$267$0)>>2)]=$531$0;
 var $st$268$1=(($l2+4)|0);
 HEAP32[(($st$268$1)>>2)]=$531$1;
 label=139;break; //@line 5329 "tcc_bootstrap.c"
 case 139: 
 var $533=HEAP32[((9288)>>2)]; //@line 5330 "tcc_bootstrap.c"
 var $534=((($533)-(40))|0); //@line 5330 "tcc_bootstrap.c"
 var $535=(($534+16)|0); //@line 5330 "tcc_bootstrap.c"
 var $536=$535; //@line 5330 "tcc_bootstrap.c"
 var $ld$269$0=(($536)|0);
 var $537$0=HEAP32[(($ld$269$0)>>2)];
 var $ld$270$1=(($536+4)|0);
 var $537$1=HEAP32[(($ld$270$1)>>2)];
 var $ld$271$0=(($l2)|0);
 var $538$0=HEAP32[(($ld$271$0)>>2)];
 var $ld$272$1=(($l2+4)|0);
 var $538$1=HEAP32[(($ld$272$1)>>2)];
 var $539$0=_i64Add($538$0,$538$1,$537$0,$537$1);var $539$1=tempRet0; //@line 5330 "tcc_bootstrap.c"
 var $st$273$0=(($l2)|0);
 HEAP32[(($st$273$0)>>2)]=$539$0;
 var $st$274$1=(($l2+4)|0);
 HEAP32[(($st$274$1)>>2)]=$539$1;
 var $ld$275$0=(($l2)|0);
 var $540$0=HEAP32[(($ld$275$0)>>2)];
 var $ld$276$1=(($l2+4)|0);
 var $540$1=HEAP32[(($ld$276$1)>>2)];
 var $541$0=$540$0;
 var $541=$541$0;
 var $542$0=$541;
 var $542$1=((((($541|0)<0))|0)?-1:0);
 var $ld$277$0=(($l2)|0);
 var $543$0=HEAP32[(($ld$277$0)>>2)];
 var $ld$278$1=(($l2+4)|0);
 var $543$1=HEAP32[(($ld$278$1)>>2)];
 var $544=(($542$0|0) != ($543$0|0)) | (($542$1|0) != ($543$1|0)); //@line 5331 "tcc_bootstrap.c"
 if($544){label=140;break;}else{label=141;break;} //@line 5331 "tcc_bootstrap.c"
 case 140: 
 label=143;break; //@line 5332 "tcc_bootstrap.c"
 case 141: 
 var $547=HEAP32[((9288)>>2)]; //@line 5333 "tcc_bootstrap.c"
 var $548=((($547)-(40))|0); //@line 5333 "tcc_bootstrap.c"
 HEAP32[((9288)>>2)]=$548; //@line 5333 "tcc_bootstrap.c"
 var $ld$279$0=(($l2)|0);
 var $549$0=HEAP32[(($ld$279$0)>>2)];
 var $ld$280$1=(($l2+4)|0);
 var $549$1=HEAP32[(($ld$280$1)>>2)];
 var $550=HEAP32[((9288)>>2)]; //@line 5334 "tcc_bootstrap.c"
 var $551=(($550+16)|0); //@line 5334 "tcc_bootstrap.c"
 var $552=$551; //@line 5334 "tcc_bootstrap.c"
 var $st$281$0=(($552)|0);
 HEAP32[(($st$281$0)>>2)]=$549$0;
 var $st$282$1=(($552+4)|0);
 HEAP32[(($st$282$1)>>2)]=$549$1;
 label=148;break; //@line 5335 "tcc_bootstrap.c"
 case 142: 
 label=143;break; //@line 5335 "tcc_bootstrap.c"
 case 143: 
 var $555=$t1; //@line 5337 "tcc_bootstrap.c"
 var $556=($555|0)==4; //@line 5337 "tcc_bootstrap.c"
 if($556){label=145;break;}else{label=144;break;} //@line 5337 "tcc_bootstrap.c"
 case 144: 
 var $558=$t2; //@line 5337 "tcc_bootstrap.c"
 var $559=($558|0)==4; //@line 5337 "tcc_bootstrap.c"
 if($559){label=145;break;}else{label=146;break;} //@line 5337 "tcc_bootstrap.c"
 case 145: 
 var $561=$1; //@line 5339 "tcc_bootstrap.c"
 _gen_opl($561); //@line 5339 "tcc_bootstrap.c"
 label=147;break; //@line 5339 "tcc_bootstrap.c"
 case 146: 
 var $563=$1; //@line 5341 "tcc_bootstrap.c"
 _gen_opi($563); //@line 5341 "tcc_bootstrap.c"
 label=147;break;
 case 147: 
 label=148;break;
 case 148: 
 label=149;break;
 case 149: 
 label=150;break;
 case 150: 
 label=151;break;
 case 151: 
 label=152;break;
 case 152: 
 label=153;break;
 case 153: 
 STACKTOP=sp;return; //@line 5344 "tcc_bootstrap.c"
  default: assert(0, "bad label: " + label);
 }

}


function _gen_opif($op){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $c1;
 var $c2;
 var $v1;
 var $v2;
 var $f1;
 var $f2;
 $1=$op;
 var $2=HEAP32[((9288)>>2)]; //@line 5350 "tcc_bootstrap.c"
 var $3=((($2)-(40))|0); //@line 5350 "tcc_bootstrap.c"
 $v1=$3; //@line 5350 "tcc_bootstrap.c"
 var $4=HEAP32[((9288)>>2)]; //@line 5351 "tcc_bootstrap.c"
 $v2=$4; //@line 5351 "tcc_bootstrap.c"
 var $5=$v1; //@line 5352 "tcc_bootstrap.c"
 var $6=(($5+8)|0); //@line 5352 "tcc_bootstrap.c"
 var $7=HEAP16[(($6)>>1)]; //@line 5352 "tcc_bootstrap.c"
 var $8=($7&65535); //@line 5352 "tcc_bootstrap.c"
 var $9=$8&831; //@line 5352 "tcc_bootstrap.c"
 var $10=($9|0)==48; //@line 5352 "tcc_bootstrap.c"
 var $11=($10&1); //@line 5352 "tcc_bootstrap.c"
 $c1=$11; //@line 5352 "tcc_bootstrap.c"
 var $12=$v2; //@line 5353 "tcc_bootstrap.c"
 var $13=(($12+8)|0); //@line 5353 "tcc_bootstrap.c"
 var $14=HEAP16[(($13)>>1)]; //@line 5353 "tcc_bootstrap.c"
 var $15=($14&65535); //@line 5353 "tcc_bootstrap.c"
 var $16=$15&831; //@line 5353 "tcc_bootstrap.c"
 var $17=($16|0)==48; //@line 5353 "tcc_bootstrap.c"
 var $18=($17&1); //@line 5353 "tcc_bootstrap.c"
 $c2=$18; //@line 5353 "tcc_bootstrap.c"
 var $19=$c1; //@line 5354 "tcc_bootstrap.c"
 var $20=($19|0)!=0; //@line 5354 "tcc_bootstrap.c"
 if($20){label=2;break;}else{label=29;break;} //@line 5354 "tcc_bootstrap.c"
 case 2: 
 var $22=$c2; //@line 5354 "tcc_bootstrap.c"
 var $23=($22|0)!=0; //@line 5354 "tcc_bootstrap.c"
 if($23){label=3;break;}else{label=29;break;} //@line 5354 "tcc_bootstrap.c"
 case 3: 
 var $25=$v1; //@line 5355 "tcc_bootstrap.c"
 var $26=(($25)|0); //@line 5355 "tcc_bootstrap.c"
 var $27=(($26)|0); //@line 5355 "tcc_bootstrap.c"
 var $28=HEAP32[(($27)>>2)]; //@line 5355 "tcc_bootstrap.c"
 var $29=($28|0)==8; //@line 5355 "tcc_bootstrap.c"
 if($29){label=4;break;}else{label=5;break;} //@line 5355 "tcc_bootstrap.c"
 case 4: 
 var $31=$v1; //@line 5356 "tcc_bootstrap.c"
 var $32=(($31+16)|0); //@line 5356 "tcc_bootstrap.c"
 var $33=$32; //@line 5356 "tcc_bootstrap.c"
 var $34=HEAPF32[(($33)>>2)]; //@line 5356 "tcc_bootstrap.c"
 var $35=$34; //@line 5356 "tcc_bootstrap.c"
 $f1=$35; //@line 5356 "tcc_bootstrap.c"
 var $36=$v2; //@line 5357 "tcc_bootstrap.c"
 var $37=(($36+16)|0); //@line 5357 "tcc_bootstrap.c"
 var $38=$37; //@line 5357 "tcc_bootstrap.c"
 var $39=HEAPF32[(($38)>>2)]; //@line 5357 "tcc_bootstrap.c"
 var $40=$39; //@line 5357 "tcc_bootstrap.c"
 $f2=$40; //@line 5357 "tcc_bootstrap.c"
 label=9;break; //@line 5358 "tcc_bootstrap.c"
 case 5: 
 var $42=$v1; //@line 5358 "tcc_bootstrap.c"
 var $43=(($42)|0); //@line 5358 "tcc_bootstrap.c"
 var $44=(($43)|0); //@line 5358 "tcc_bootstrap.c"
 var $45=HEAP32[(($44)>>2)]; //@line 5358 "tcc_bootstrap.c"
 var $46=($45|0)==9; //@line 5358 "tcc_bootstrap.c"
 if($46){label=6;break;}else{label=7;break;} //@line 5358 "tcc_bootstrap.c"
 case 6: 
 var $48=$v1; //@line 5359 "tcc_bootstrap.c"
 var $49=(($48+16)|0); //@line 5359 "tcc_bootstrap.c"
 var $50=$49; //@line 5359 "tcc_bootstrap.c"
 var $51=HEAPF64[(($50)>>3)]; //@line 5359 "tcc_bootstrap.c"
 $f1=$51; //@line 5359 "tcc_bootstrap.c"
 var $52=$v2; //@line 5360 "tcc_bootstrap.c"
 var $53=(($52+16)|0); //@line 5360 "tcc_bootstrap.c"
 var $54=$53; //@line 5360 "tcc_bootstrap.c"
 var $55=HEAPF64[(($54)>>3)]; //@line 5360 "tcc_bootstrap.c"
 $f2=$55; //@line 5360 "tcc_bootstrap.c"
 label=8;break; //@line 5361 "tcc_bootstrap.c"
 case 7: 
 var $57=$v1; //@line 5362 "tcc_bootstrap.c"
 var $58=(($57+16)|0); //@line 5362 "tcc_bootstrap.c"
 var $59=$58; //@line 5362 "tcc_bootstrap.c"
 var $60=HEAPF64[(($59)>>3)]; //@line 5362 "tcc_bootstrap.c"
 $f1=$60; //@line 5362 "tcc_bootstrap.c"
 var $61=$v2; //@line 5363 "tcc_bootstrap.c"
 var $62=(($61+16)|0); //@line 5363 "tcc_bootstrap.c"
 var $63=$62; //@line 5363 "tcc_bootstrap.c"
 var $64=HEAPF64[(($63)>>3)]; //@line 5363 "tcc_bootstrap.c"
 $f2=$64; //@line 5363 "tcc_bootstrap.c"
 label=8;break;
 case 8: 
 label=9;break;
 case 9: 
 var $67=$f1; //@line 5365 "tcc_bootstrap.c"
 var $68=_ieee_finite($67); //@line 5365 "tcc_bootstrap.c"
 var $69=($68|0)!=0; //@line 5365 "tcc_bootstrap.c"
 if($69){label=10;break;}else{label=11;break;} //@line 5365 "tcc_bootstrap.c"
 case 10: 
 var $71=$f2; //@line 5365 "tcc_bootstrap.c"
 var $72=_ieee_finite($71); //@line 5365 "tcc_bootstrap.c"
 var $73=($72|0)!=0; //@line 5365 "tcc_bootstrap.c"
 if($73){label=12;break;}else{label=11;break;} //@line 5365 "tcc_bootstrap.c"
 case 11: 
 label=30;break; //@line 5366 "tcc_bootstrap.c"
 case 12: 
 var $76=$1; //@line 5367 "tcc_bootstrap.c"
 if(($76|0)==43){ label=13;break;}else if(($76|0)==45){ label=14;break;}else if(($76|0)==42){ label=15;break;}else if(($76|0)==47){ label=16;break;}else{label=21;break;}
 case 13: 
 var $78=$f2; //@line 5368 "tcc_bootstrap.c"
 var $79=$f1; //@line 5368 "tcc_bootstrap.c"
 var $80=($79)+($78); //@line 5368 "tcc_bootstrap.c"
 $f1=$80; //@line 5368 "tcc_bootstrap.c"
 label=22;break; //@line 5368 "tcc_bootstrap.c"
 case 14: 
 var $82=$f2; //@line 5369 "tcc_bootstrap.c"
 var $83=$f1; //@line 5369 "tcc_bootstrap.c"
 var $84=($83)-($82); //@line 5369 "tcc_bootstrap.c"
 $f1=$84; //@line 5369 "tcc_bootstrap.c"
 label=22;break; //@line 5369 "tcc_bootstrap.c"
 case 15: 
 var $86=$f2; //@line 5370 "tcc_bootstrap.c"
 var $87=$f1; //@line 5370 "tcc_bootstrap.c"
 var $88=($87)*($86); //@line 5370 "tcc_bootstrap.c"
 $f1=$88; //@line 5370 "tcc_bootstrap.c"
 label=22;break; //@line 5370 "tcc_bootstrap.c"
 case 16: 
 var $90=$f2; //@line 5372 "tcc_bootstrap.c"
 var $91=$90==0; //@line 5372 "tcc_bootstrap.c"
 if($91){label=17;break;}else{label=20;break;} //@line 5372 "tcc_bootstrap.c"
 case 17: 
 var $93=HEAP32[((76712)>>2)]; //@line 5373 "tcc_bootstrap.c"
 var $94=($93|0)!=0; //@line 5373 "tcc_bootstrap.c"
 if($94){label=18;break;}else{label=19;break;} //@line 5373 "tcc_bootstrap.c"
 case 18: 
 _tcc_error(8320,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs; //@line 5374 "tcc_bootstrap.c"
 label=19;break; //@line 5374 "tcc_bootstrap.c"
 case 19: 
 label=30;break; //@line 5375 "tcc_bootstrap.c"
 case 20: 
 var $98=$f2; //@line 5377 "tcc_bootstrap.c"
 var $99=$f1; //@line 5377 "tcc_bootstrap.c"
 var $100=($99)/($98); //@line 5377 "tcc_bootstrap.c"
 $f1=$100; //@line 5377 "tcc_bootstrap.c"
 label=22;break; //@line 5378 "tcc_bootstrap.c"
 case 21: 
 label=30;break; //@line 5380 "tcc_bootstrap.c"
 case 22: 
 var $103=$v1; //@line 5382 "tcc_bootstrap.c"
 var $104=(($103)|0); //@line 5382 "tcc_bootstrap.c"
 var $105=(($104)|0); //@line 5382 "tcc_bootstrap.c"
 var $106=HEAP32[(($105)>>2)]; //@line 5382 "tcc_bootstrap.c"
 var $107=($106|0)==8; //@line 5382 "tcc_bootstrap.c"
 if($107){label=23;break;}else{label=24;break;} //@line 5382 "tcc_bootstrap.c"
 case 23: 
 var $109=$f1; //@line 5383 "tcc_bootstrap.c"
 var $110=$109; //@line 5383 "tcc_bootstrap.c"
 var $111=$v1; //@line 5383 "tcc_bootstrap.c"
 var $112=(($111+16)|0); //@line 5383 "tcc_bootstrap.c"
 var $113=$112; //@line 5383 "tcc_bootstrap.c"
 HEAPF32[(($113)>>2)]=$110; //@line 5383 "tcc_bootstrap.c"
 label=28;break; //@line 5384 "tcc_bootstrap.c"
 case 24: 
 var $115=$v1; //@line 5384 "tcc_bootstrap.c"
 var $116=(($115)|0); //@line 5384 "tcc_bootstrap.c"
 var $117=(($116)|0); //@line 5384 "tcc_bootstrap.c"
 var $118=HEAP32[(($117)>>2)]; //@line 5384 "tcc_bootstrap.c"
 var $119=($118|0)==9; //@line 5384 "tcc_bootstrap.c"
 if($119){label=25;break;}else{label=26;break;} //@line 5384 "tcc_bootstrap.c"
 case 25: 
 var $121=$f1; //@line 5385 "tcc_bootstrap.c"
 var $122=$v1; //@line 5385 "tcc_bootstrap.c"
 var $123=(($122+16)|0); //@line 5385 "tcc_bootstrap.c"
 var $124=$123; //@line 5385 "tcc_bootstrap.c"
 HEAPF64[(($124)>>3)]=$121; //@line 5385 "tcc_bootstrap.c"
 label=27;break; //@line 5386 "tcc_bootstrap.c"
 case 26: 
 var $126=$f1; //@line 5387 "tcc_bootstrap.c"
 var $127=$v1; //@line 5387 "tcc_bootstrap.c"
 var $128=(($127+16)|0); //@line 5387 "tcc_bootstrap.c"
 var $129=$128; //@line 5387 "tcc_bootstrap.c"
 HEAPF64[(($129)>>3)]=$126; //@line 5387 "tcc_bootstrap.c"
 label=27;break;
 case 27: 
 label=28;break;
 case 28: 
 var $132=HEAP32[((9288)>>2)]; //@line 5389 "tcc_bootstrap.c"
 var $133=((($132)-(40))|0); //@line 5389 "tcc_bootstrap.c"
 HEAP32[((9288)>>2)]=$133; //@line 5389 "tcc_bootstrap.c"
 label=31;break; //@line 5390 "tcc_bootstrap.c"
 case 29: 
 label=30;break; //@line 5390 "tcc_bootstrap.c"
 case 30: 
 var $136=$1; //@line 5392 "tcc_bootstrap.c"
 _gen_opf($136); //@line 5392 "tcc_bootstrap.c"
 label=31;break;
 case 31: 
 STACKTOP=sp;return; //@line 5394 "tcc_bootstrap.c"
  default: assert(0, "bad label: " + label);
 }

}


function _ieee_finite($d){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+24)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1=sp;
 var $p=(sp)+(8);
 HEAPF64[(($1)>>3)]=$d;
 var $2=$p; //@line 4120 "tcc_bootstrap.c"
 var $3=$1; //@line 4120 "tcc_bootstrap.c"
 assert(8 % 1 === 0);HEAP32[(($2)>>2)]=HEAP32[(($3)>>2)];HEAP32[((($2)+(4))>>2)]=HEAP32[((($3)+(4))>>2)]; //@line 4120 "tcc_bootstrap.c"
 var $4=(($p+4)|0); //@line 4121 "tcc_bootstrap.c"
 var $5=HEAP32[(($4)>>2)]; //@line 4121 "tcc_bootstrap.c"
 var $6=$5|-2146435073; //@line 4121 "tcc_bootstrap.c"
 var $7=((($6)+(1))|0); //@line 4121 "tcc_bootstrap.c"
 var $8=$7>>>31; //@line 4121 "tcc_bootstrap.c"
 STACKTOP=sp;return $8; //@line 4121 "tcc_bootstrap.c"
}


function _gen_opf($op){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+40)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $a;
 var $ft;
 var $fc;
 var $swapped;
 var $r;
 var $v1=sp;
 $1=$op;
 var $2=HEAP32[((9288)>>2)]; //@line 10542 "tcc_bootstrap.c"
 var $3=((($2)-(40))|0); //@line 10542 "tcc_bootstrap.c"
 var $4=(($3+8)|0); //@line 10542 "tcc_bootstrap.c"
 var $5=HEAP16[(($4)>>1)]; //@line 10542 "tcc_bootstrap.c"
 var $6=($5&65535); //@line 10542 "tcc_bootstrap.c"
 var $7=$6&319; //@line 10542 "tcc_bootstrap.c"
 var $8=($7|0)==48; //@line 10542 "tcc_bootstrap.c"
 if($8){label=2;break;}else{label=3;break;} //@line 10542 "tcc_bootstrap.c"
 case 2: 
 _vswap(); //@line 10543 "tcc_bootstrap.c"
 var $10=_gv(2); //@line 10544 "tcc_bootstrap.c"
 _vswap(); //@line 10545 "tcc_bootstrap.c"
 label=3;break; //@line 10546 "tcc_bootstrap.c"
 case 3: 
 var $12=HEAP32[((9288)>>2)]; //@line 10547 "tcc_bootstrap.c"
 var $13=(($12)|0); //@line 10547 "tcc_bootstrap.c"
 var $14=(($13+8)|0); //@line 10547 "tcc_bootstrap.c"
 var $15=HEAP16[(($14)>>1)]; //@line 10547 "tcc_bootstrap.c"
 var $16=($15&65535); //@line 10547 "tcc_bootstrap.c"
 var $17=$16&319; //@line 10547 "tcc_bootstrap.c"
 var $18=($17|0)==48; //@line 10547 "tcc_bootstrap.c"
 if($18){label=4;break;}else{label=5;break;} //@line 10547 "tcc_bootstrap.c"
 case 4: 
 var $20=_gv(2); //@line 10548 "tcc_bootstrap.c"
 label=5;break; //@line 10548 "tcc_bootstrap.c"
 case 5: 
 var $22=HEAP32[((9288)>>2)]; //@line 10549 "tcc_bootstrap.c"
 var $23=((($22)-(40))|0); //@line 10549 "tcc_bootstrap.c"
 var $24=(($23+8)|0); //@line 10549 "tcc_bootstrap.c"
 var $25=HEAP16[(($24)>>1)]; //@line 10549 "tcc_bootstrap.c"
 var $26=($25&65535); //@line 10549 "tcc_bootstrap.c"
 var $27=$26&256; //@line 10549 "tcc_bootstrap.c"
 var $28=($27|0)!=0; //@line 10549 "tcc_bootstrap.c"
 if($28){label=6;break;}else{label=8;break;} //@line 10549 "tcc_bootstrap.c"
 case 6: 
 var $30=HEAP32[((9288)>>2)]; //@line 10549 "tcc_bootstrap.c"
 var $31=(($30)|0); //@line 10549 "tcc_bootstrap.c"
 var $32=(($31+8)|0); //@line 10549 "tcc_bootstrap.c"
 var $33=HEAP16[(($32)>>1)]; //@line 10549 "tcc_bootstrap.c"
 var $34=($33&65535); //@line 10549 "tcc_bootstrap.c"
 var $35=$34&256; //@line 10549 "tcc_bootstrap.c"
 var $36=($35|0)!=0; //@line 10549 "tcc_bootstrap.c"
 if($36){label=7;break;}else{label=8;break;} //@line 10549 "tcc_bootstrap.c"
 case 7: 
 _vswap(); //@line 10551 "tcc_bootstrap.c"
 var $38=_gv(2); //@line 10552 "tcc_bootstrap.c"
 _vswap(); //@line 10553 "tcc_bootstrap.c"
 label=8;break; //@line 10554 "tcc_bootstrap.c"
 case 8: 
 $swapped=0; //@line 10555 "tcc_bootstrap.c"
 var $40=HEAP32[((9288)>>2)]; //@line 10556 "tcc_bootstrap.c"
 var $41=((($40)-(40))|0); //@line 10556 "tcc_bootstrap.c"
 var $42=(($41+8)|0); //@line 10556 "tcc_bootstrap.c"
 var $43=HEAP16[(($42)>>1)]; //@line 10556 "tcc_bootstrap.c"
 var $44=($43&65535); //@line 10556 "tcc_bootstrap.c"
 var $45=$44&256; //@line 10556 "tcc_bootstrap.c"
 var $46=($45|0)!=0; //@line 10556 "tcc_bootstrap.c"
 if($46){label=9;break;}else{label=10;break;} //@line 10556 "tcc_bootstrap.c"
 case 9: 
 _vswap(); //@line 10557 "tcc_bootstrap.c"
 $swapped=1; //@line 10558 "tcc_bootstrap.c"
 label=10;break; //@line 10559 "tcc_bootstrap.c"
 case 10: 
 var $49=$1; //@line 10560 "tcc_bootstrap.c"
 var $50=($49|0)>=146; //@line 10560 "tcc_bootstrap.c"
 if($50){label=11;break;}else{label=36;break;} //@line 10560 "tcc_bootstrap.c"
 case 11: 
 var $52=$1; //@line 10560 "tcc_bootstrap.c"
 var $53=($52|0)<=159; //@line 10560 "tcc_bootstrap.c"
 if($53){label=12;break;}else{label=36;break;} //@line 10560 "tcc_bootstrap.c"
 case 12: 
 var $55=HEAP32[((9288)>>2)]; //@line 10561 "tcc_bootstrap.c"
 _load(4,$55); //@line 10561 "tcc_bootstrap.c"
 _save_reg(0); //@line 10562 "tcc_bootstrap.c"
 var $56=$1; //@line 10563 "tcc_bootstrap.c"
 var $57=($56|0)==157; //@line 10563 "tcc_bootstrap.c"
 if($57){label=14;break;}else{label=13;break;} //@line 10563 "tcc_bootstrap.c"
 case 13: 
 var $59=$1; //@line 10563 "tcc_bootstrap.c"
 var $60=($59|0)==159; //@line 10563 "tcc_bootstrap.c"
 if($60){label=14;break;}else{label=15;break;} //@line 10563 "tcc_bootstrap.c"
 case 14: 
 var $62=$swapped; //@line 10564 "tcc_bootstrap.c"
 var $63=($62|0)!=0; //@line 10564 "tcc_bootstrap.c"
 var $64=$63^1; //@line 10564 "tcc_bootstrap.c"
 var $65=($64&1); //@line 10564 "tcc_bootstrap.c"
 $swapped=$65; //@line 10564 "tcc_bootstrap.c"
 label=19;break; //@line 10564 "tcc_bootstrap.c"
 case 15: 
 var $67=$1; //@line 10565 "tcc_bootstrap.c"
 var $68=($67|0)==148; //@line 10565 "tcc_bootstrap.c"
 if($68){label=17;break;}else{label=16;break;} //@line 10565 "tcc_bootstrap.c"
 case 16: 
 var $70=$1; //@line 10565 "tcc_bootstrap.c"
 var $71=($70|0)==149; //@line 10565 "tcc_bootstrap.c"
 if($71){label=17;break;}else{label=18;break;} //@line 10565 "tcc_bootstrap.c"
 case 17: 
 $swapped=0; //@line 10566 "tcc_bootstrap.c"
 label=18;break; //@line 10566 "tcc_bootstrap.c"
 case 18: 
 label=19;break;
 case 19: 
 var $75=$swapped; //@line 10567 "tcc_bootstrap.c"
 var $76=($75|0)!=0; //@line 10567 "tcc_bootstrap.c"
 if($76){label=20;break;}else{label=21;break;} //@line 10567 "tcc_bootstrap.c"
 case 20: 
 _o(51673); //@line 10568 "tcc_bootstrap.c"
 label=21;break; //@line 10568 "tcc_bootstrap.c"
 case 21: 
 var $79=$1; //@line 10569 "tcc_bootstrap.c"
 var $80=($79|0)==148; //@line 10569 "tcc_bootstrap.c"
 if($80){label=23;break;}else{label=22;break;} //@line 10569 "tcc_bootstrap.c"
 case 22: 
 var $82=$1; //@line 10569 "tcc_bootstrap.c"
 var $83=($82|0)==149; //@line 10569 "tcc_bootstrap.c"
 if($83){label=23;break;}else{label=24;break;} //@line 10569 "tcc_bootstrap.c"
 case 23: 
 _o(59866); //@line 10570 "tcc_bootstrap.c"
 label=25;break; //@line 10570 "tcc_bootstrap.c"
 case 24: 
 _o(55774); //@line 10572 "tcc_bootstrap.c"
 label=25;break;
 case 25: 
 _o(57567); //@line 10573 "tcc_bootstrap.c"
 var $87=$1; //@line 10574 "tcc_bootstrap.c"
 var $88=($87|0)==148; //@line 10574 "tcc_bootstrap.c"
 if($88){label=26;break;}else{label=27;break;} //@line 10574 "tcc_bootstrap.c"
 case 26: 
 _o(4580480); //@line 10575 "tcc_bootstrap.c"
 _o(4258944); //@line 10576 "tcc_bootstrap.c"
 label=35;break; //@line 10577 "tcc_bootstrap.c"
 case 27: 
 var $91=$1; //@line 10577 "tcc_bootstrap.c"
 var $92=($91|0)==149; //@line 10577 "tcc_bootstrap.c"
 if($92){label=28;break;}else{label=29;break;} //@line 10577 "tcc_bootstrap.c"
 case 28: 
 _o(4580480); //@line 10578 "tcc_bootstrap.c"
 _o(4256896); //@line 10579 "tcc_bootstrap.c"
 $1=149; //@line 10580 "tcc_bootstrap.c"
 label=34;break; //@line 10581 "tcc_bootstrap.c"
 case 29: 
 var $95=$1; //@line 10581 "tcc_bootstrap.c"
 var $96=($95|0)==157; //@line 10581 "tcc_bootstrap.c"
 if($96){label=31;break;}else{label=30;break;} //@line 10581 "tcc_bootstrap.c"
 case 30: 
 var $98=$1; //@line 10581 "tcc_bootstrap.c"
 var $99=($98|0)==158; //@line 10581 "tcc_bootstrap.c"
 if($99){label=31;break;}else{label=32;break;} //@line 10581 "tcc_bootstrap.c"
 case 31: 
 _o(378102); //@line 10582 "tcc_bootstrap.c"
 $1=148; //@line 10583 "tcc_bootstrap.c"
 label=33;break; //@line 10584 "tcc_bootstrap.c"
 case 32: 
 _o(4572406); //@line 10585 "tcc_bootstrap.c"
 $1=148; //@line 10586 "tcc_bootstrap.c"
 label=33;break;
 case 33: 
 label=34;break;
 case 34: 
 label=35;break;
 case 35: 
 var $105=HEAP32[((9288)>>2)]; //@line 10588 "tcc_bootstrap.c"
 var $106=((($105)-(40))|0); //@line 10588 "tcc_bootstrap.c"
 HEAP32[((9288)>>2)]=$106; //@line 10588 "tcc_bootstrap.c"
 var $107=HEAP32[((9288)>>2)]; //@line 10589 "tcc_bootstrap.c"
 var $108=(($107+8)|0); //@line 10589 "tcc_bootstrap.c"
 HEAP16[(($108)>>1)]=51; //@line 10589 "tcc_bootstrap.c"
 var $109=$1; //@line 10590 "tcc_bootstrap.c"
 var $110$0=$109;
 var $110$1=((((($109|0)<0))|0)?-1:0);
 var $111=HEAP32[((9288)>>2)]; //@line 10590 "tcc_bootstrap.c"
 var $112=(($111+16)|0); //@line 10590 "tcc_bootstrap.c"
 var $113=$112; //@line 10590 "tcc_bootstrap.c"
 var $st$0$0=(($113)|0);
 HEAP32[(($st$0$0)>>2)]=$110$0;
 var $st$1$1=(($113+4)|0);
 HEAP32[(($st$1$1)>>2)]=$110$1;
 label=57;break; //@line 10591 "tcc_bootstrap.c"
 case 36: 
 var $115=HEAP32[((9288)>>2)]; //@line 10592 "tcc_bootstrap.c"
 var $116=(($115)|0); //@line 10592 "tcc_bootstrap.c"
 var $117=(($116)|0); //@line 10592 "tcc_bootstrap.c"
 var $118=HEAP32[(($117)>>2)]; //@line 10592 "tcc_bootstrap.c"
 var $119=$118&15; //@line 10592 "tcc_bootstrap.c"
 var $120=($119|0)==10; //@line 10592 "tcc_bootstrap.c"
 if($120){label=37;break;}else{label=38;break;} //@line 10592 "tcc_bootstrap.c"
 case 37: 
 var $122=HEAP32[((9288)>>2)]; //@line 10593 "tcc_bootstrap.c"
 _load(4,$122); //@line 10593 "tcc_bootstrap.c"
 var $123=$swapped; //@line 10594 "tcc_bootstrap.c"
 var $124=($123|0)!=0; //@line 10594 "tcc_bootstrap.c"
 var $125=$124^1; //@line 10594 "tcc_bootstrap.c"
 var $126=($125&1); //@line 10594 "tcc_bootstrap.c"
 $swapped=$126; //@line 10594 "tcc_bootstrap.c"
 label=38;break; //@line 10595 "tcc_bootstrap.c"
 case 38: 
 var $128=$1; //@line 10596 "tcc_bootstrap.c"
 if(($128|0)==43){ label=40;break;}else if(($128|0)==45){ label=41;break;}else if(($128|0)==42){ label=44;break;}else if(($128|0)==47){ label=45;break;}else{label=39;break;}
 case 39: 
 label=40;break; //@line 10596 "tcc_bootstrap.c"
 case 40: 
 $a=0; //@line 10599 "tcc_bootstrap.c"
 label=48;break; //@line 10600 "tcc_bootstrap.c"
 case 41: 
 $a=4; //@line 10602 "tcc_bootstrap.c"
 var $132=$swapped; //@line 10603 "tcc_bootstrap.c"
 var $133=($132|0)!=0; //@line 10603 "tcc_bootstrap.c"
 if($133){label=42;break;}else{label=43;break;} //@line 10603 "tcc_bootstrap.c"
 case 42: 
 var $135=$a; //@line 10604 "tcc_bootstrap.c"
 var $136=((($135)+(1))|0); //@line 10604 "tcc_bootstrap.c"
 $a=$136; //@line 10604 "tcc_bootstrap.c"
 label=43;break; //@line 10604 "tcc_bootstrap.c"
 case 43: 
 label=48;break; //@line 10605 "tcc_bootstrap.c"
 case 44: 
 $a=1; //@line 10607 "tcc_bootstrap.c"
 label=48;break; //@line 10608 "tcc_bootstrap.c"
 case 45: 
 $a=6; //@line 10610 "tcc_bootstrap.c"
 var $140=$swapped; //@line 10611 "tcc_bootstrap.c"
 var $141=($140|0)!=0; //@line 10611 "tcc_bootstrap.c"
 if($141){label=46;break;}else{label=47;break;} //@line 10611 "tcc_bootstrap.c"
 case 46: 
 var $143=$a; //@line 10612 "tcc_bootstrap.c"
 var $144=((($143)+(1))|0); //@line 10612 "tcc_bootstrap.c"
 $a=$144; //@line 10612 "tcc_bootstrap.c"
 label=47;break; //@line 10612 "tcc_bootstrap.c"
 case 47: 
 label=48;break; //@line 10613 "tcc_bootstrap.c"
 case 48: 
 var $147=HEAP32[((9288)>>2)]; //@line 10615 "tcc_bootstrap.c"
 var $148=(($147)|0); //@line 10615 "tcc_bootstrap.c"
 var $149=(($148)|0); //@line 10615 "tcc_bootstrap.c"
 var $150=HEAP32[(($149)>>2)]; //@line 10615 "tcc_bootstrap.c"
 $ft=$150; //@line 10615 "tcc_bootstrap.c"
 var $151=HEAP32[((9288)>>2)]; //@line 10616 "tcc_bootstrap.c"
 var $152=(($151+16)|0); //@line 10616 "tcc_bootstrap.c"
 var $153=$152; //@line 10616 "tcc_bootstrap.c"
 var $ld$2$0=(($153)|0);
 var $154$0=HEAP32[(($ld$2$0)>>2)];
 var $ld$3$1=(($153+4)|0);
 var $154$1=HEAP32[(($ld$3$1)>>2)];
 var $155$0=$154$0;
 var $155=$155$0;
 $fc=$155; //@line 10616 "tcc_bootstrap.c"
 var $156=$ft; //@line 10617 "tcc_bootstrap.c"
 var $157=$156&15; //@line 10617 "tcc_bootstrap.c"
 var $158=($157|0)==10; //@line 10617 "tcc_bootstrap.c"
 if($158){label=49;break;}else{label=50;break;} //@line 10617 "tcc_bootstrap.c"
 case 49: 
 _o(222); //@line 10618 "tcc_bootstrap.c"
 var $160=$a; //@line 10619 "tcc_bootstrap.c"
 var $161=$160<<3; //@line 10619 "tcc_bootstrap.c"
 var $162=((($161)+(193))|0); //@line 10619 "tcc_bootstrap.c"
 _o($162); //@line 10619 "tcc_bootstrap.c"
 label=56;break; //@line 10620 "tcc_bootstrap.c"
 case 50: 
 var $164=HEAP32[((9288)>>2)]; //@line 10621 "tcc_bootstrap.c"
 var $165=(($164+8)|0); //@line 10621 "tcc_bootstrap.c"
 var $166=HEAP16[(($165)>>1)]; //@line 10621 "tcc_bootstrap.c"
 var $167=($166&65535); //@line 10621 "tcc_bootstrap.c"
 $r=$167; //@line 10621 "tcc_bootstrap.c"
 var $168=$r; //@line 10622 "tcc_bootstrap.c"
 var $169=$168&63; //@line 10622 "tcc_bootstrap.c"
 var $170=($169|0)==49; //@line 10622 "tcc_bootstrap.c"
 if($170){label=51;break;}else{label=52;break;} //@line 10622 "tcc_bootstrap.c"
 case 51: 
 var $172=_get_reg(1); //@line 10624 "tcc_bootstrap.c"
 $r=$172; //@line 10624 "tcc_bootstrap.c"
 var $173=(($v1)|0); //@line 10625 "tcc_bootstrap.c"
 var $174=(($173)|0); //@line 10625 "tcc_bootstrap.c"
 HEAP32[(($174)>>2)]=3; //@line 10625 "tcc_bootstrap.c"
 var $175=(($v1+8)|0); //@line 10626 "tcc_bootstrap.c"
 HEAP16[(($175)>>1)]=306; //@line 10626 "tcc_bootstrap.c"
 var $176=$fc; //@line 10627 "tcc_bootstrap.c"
 var $177$0=$176;
 var $177$1=((((($176|0)<0))|0)?-1:0);
 var $178=(($v1+16)|0); //@line 10627 "tcc_bootstrap.c"
 var $179=$178; //@line 10627 "tcc_bootstrap.c"
 var $st$4$0=(($179)|0);
 HEAP32[(($st$4$0)>>2)]=$177$0;
 var $st$5$1=(($179+4)|0);
 HEAP32[(($st$5$1)>>2)]=$177$1;
 var $180=$r; //@line 10628 "tcc_bootstrap.c"
 _load($180,$v1); //@line 10628 "tcc_bootstrap.c"
 $fc=0; //@line 10629 "tcc_bootstrap.c"
 label=52;break; //@line 10630 "tcc_bootstrap.c"
 case 52: 
 var $182=$ft; //@line 10631 "tcc_bootstrap.c"
 var $183=$182&15; //@line 10631 "tcc_bootstrap.c"
 var $184=($183|0)==9; //@line 10631 "tcc_bootstrap.c"
 if($184){label=53;break;}else{label=54;break;} //@line 10631 "tcc_bootstrap.c"
 case 53: 
 _o(220); //@line 10632 "tcc_bootstrap.c"
 label=55;break; //@line 10632 "tcc_bootstrap.c"
 case 54: 
 _o(216); //@line 10634 "tcc_bootstrap.c"
 label=55;break;
 case 55: 
 var $188=$a; //@line 10635 "tcc_bootstrap.c"
 var $189=$r; //@line 10635 "tcc_bootstrap.c"
 var $190=HEAP32[((9288)>>2)]; //@line 10635 "tcc_bootstrap.c"
 var $191=(($190+32)|0); //@line 10635 "tcc_bootstrap.c"
 var $192=HEAP32[(($191)>>2)]; //@line 10635 "tcc_bootstrap.c"
 var $193=$fc; //@line 10635 "tcc_bootstrap.c"
 _gen_modrm($188,$189,$192,$193); //@line 10635 "tcc_bootstrap.c"
 label=56;break;
 case 56: 
 var $195=HEAP32[((9288)>>2)]; //@line 10637 "tcc_bootstrap.c"
 var $196=((($195)-(40))|0); //@line 10637 "tcc_bootstrap.c"
 HEAP32[((9288)>>2)]=$196; //@line 10637 "tcc_bootstrap.c"
 label=57;break;
 case 57: 
 STACKTOP=sp;return; //@line 10639 "tcc_bootstrap.c"
  default: assert(0, "bad label: " + label);
 }

}


function _gen_opic_sdiv($a$0,$a$1,$b$0,$b$1){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+24)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=sp;
 var $2=(sp)+(8);
 var $x=(sp)+(16);
 var $st$0$0=(($1)|0);
 HEAP32[(($st$0$0)>>2)]=$a$0;
 var $st$1$1=(($1+4)|0);
 HEAP32[(($st$1$1)>>2)]=$a$1;
 var $st$2$0=(($2)|0);
 HEAP32[(($st$2$0)>>2)]=$b$0;
 var $st$3$1=(($2+4)|0);
 HEAP32[(($st$3$1)>>2)]=$b$1;
 var $ld$4$0=(($1)|0);
 var $3$0=HEAP32[(($ld$4$0)>>2)];
 var $ld$5$1=(($1+4)|0);
 var $3$1=HEAP32[(($ld$5$1)>>2)];
 var $4$0=($3$1>>>31)|(0<<1);
 var $4$1=(0>>>31)|(0<<1);
 var $$etemp$6$0=0;
 var $$etemp$6$1=0;
 var $5=(($4$0|0) != ($$etemp$6$0|0)) | (($4$1|0) != ($$etemp$6$1|0)); //@line 5203 "tcc_bootstrap.c"
 if($5){label=2;break;}else{label=3;break;} //@line 5203 "tcc_bootstrap.c"
 case 2: 
 var $ld$7$0=(($1)|0);
 var $7$0=HEAP32[(($ld$7$0)>>2)];
 var $ld$8$1=(($1+4)|0);
 var $7$1=HEAP32[(($ld$8$1)>>2)];
 var $$etemp$9$0=0;
 var $$etemp$9$1=0;
 var $8$0=_i64Subtract($$etemp$9$0,$$etemp$9$1,$7$0,$7$1);var $8$1=tempRet0; //@line 5203 "tcc_bootstrap.c"
 var $12$1=$8$1;var $12$0=$8$0;label=4;break; //@line 5203 "tcc_bootstrap.c"
 case 3: 
 var $ld$10$0=(($1)|0);
 var $10$0=HEAP32[(($ld$10$0)>>2)];
 var $ld$11$1=(($1+4)|0);
 var $10$1=HEAP32[(($ld$11$1)>>2)];
 var $12$1=$10$1;var $12$0=$10$0;label=4;break; //@line 5203 "tcc_bootstrap.c"
 case 4: 
 var $12$0;
 var $12$1;
 var $ld$12$0=(($2)|0);
 var $13$0=HEAP32[(($ld$12$0)>>2)];
 var $ld$13$1=(($2+4)|0);
 var $13$1=HEAP32[(($ld$13$1)>>2)];
 var $14$0=($13$1>>>31)|(0<<1);
 var $14$1=(0>>>31)|(0<<1);
 var $$etemp$14$0=0;
 var $$etemp$14$1=0;
 var $15=(($14$0|0) != ($$etemp$14$0|0)) | (($14$1|0) != ($$etemp$14$1|0)); //@line 5203 "tcc_bootstrap.c"
 if($15){label=5;break;}else{label=6;break;} //@line 5203 "tcc_bootstrap.c"
 case 5: 
 var $ld$15$0=(($2)|0);
 var $17$0=HEAP32[(($ld$15$0)>>2)];
 var $ld$16$1=(($2+4)|0);
 var $17$1=HEAP32[(($ld$16$1)>>2)];
 var $$etemp$17$0=0;
 var $$etemp$17$1=0;
 var $18$0=_i64Subtract($$etemp$17$0,$$etemp$17$1,$17$0,$17$1);var $18$1=tempRet0; //@line 5203 "tcc_bootstrap.c"
 var $22$1=$18$1;var $22$0=$18$0;label=7;break; //@line 5203 "tcc_bootstrap.c"
 case 6: 
 var $ld$18$0=(($2)|0);
 var $20$0=HEAP32[(($ld$18$0)>>2)];
 var $ld$19$1=(($2+4)|0);
 var $20$1=HEAP32[(($ld$19$1)>>2)];
 var $22$1=$20$1;var $22$0=$20$0;label=7;break; //@line 5203 "tcc_bootstrap.c"
 case 7: 
 var $22$0;
 var $22$1;
 var $23$0=___udivdi3($12$0,$12$1,$22$0,$22$1);var $23$1=tempRet0; //@line 5203 "tcc_bootstrap.c"
 var $st$20$0=(($x)|0);
 HEAP32[(($st$20$0)>>2)]=$23$0;
 var $st$21$1=(($x+4)|0);
 HEAP32[(($st$21$1)>>2)]=$23$1;
 var $ld$22$0=(($1)|0);
 var $24$0=HEAP32[(($ld$22$0)>>2)];
 var $ld$23$1=(($1+4)|0);
 var $24$1=HEAP32[(($ld$23$1)>>2)];
 var $ld$24$0=(($2)|0);
 var $25$0=HEAP32[(($ld$24$0)>>2)];
 var $ld$25$1=(($2+4)|0);
 var $25$1=HEAP32[(($ld$25$1)>>2)];
 var $26$0=$24$0^$25$0;
 var $26$1=$24$1^$25$1;
 var $27$0=($26$1>>>31)|(0<<1);
 var $27$1=(0>>>31)|(0<<1);
 var $$etemp$26$0=0;
 var $$etemp$26$1=0;
 var $28=(($27$0|0) != ($$etemp$26$0|0)) | (($27$1|0) != ($$etemp$26$1|0)); //@line 5204 "tcc_bootstrap.c"
 if($28){label=8;break;}else{label=9;break;} //@line 5204 "tcc_bootstrap.c"
 case 8: 
 var $ld$27$0=(($x)|0);
 var $30$0=HEAP32[(($ld$27$0)>>2)];
 var $ld$28$1=(($x+4)|0);
 var $30$1=HEAP32[(($ld$28$1)>>2)];
 var $$etemp$29$0=0;
 var $$etemp$29$1=0;
 var $31$0=_i64Subtract($$etemp$29$0,$$etemp$29$1,$30$0,$30$1);var $31$1=tempRet0; //@line 5204 "tcc_bootstrap.c"
 var $35$1=$31$1;var $35$0=$31$0;label=10;break; //@line 5204 "tcc_bootstrap.c"
 case 9: 
 var $ld$30$0=(($x)|0);
 var $33$0=HEAP32[(($ld$30$0)>>2)];
 var $ld$31$1=(($x+4)|0);
 var $33$1=HEAP32[(($ld$31$1)>>2)];
 var $35$1=$33$1;var $35$0=$33$0;label=10;break; //@line 5204 "tcc_bootstrap.c"
 case 10: 
 var $35$0;
 var $35$1;
 STACKTOP=sp;return (tempRet0=$35$1,$35$0); //@line 5204 "tcc_bootstrap.c"
  default: assert(0, "bad label: " + label);
 }

}


function _gen_opic_lt($a$0,$a$1,$b$0,$b$1){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1=sp;
 var $2=(sp)+(8);
 var $st$0$0=(($1)|0);
 HEAP32[(($st$0$0)>>2)]=$a$0;
 var $st$1$1=(($1+4)|0);
 HEAP32[(($st$1$1)>>2)]=$a$1;
 var $st$2$0=(($2)|0);
 HEAP32[(($st$2$0)>>2)]=$b$0;
 var $st$3$1=(($2+4)|0);
 HEAP32[(($st$3$1)>>2)]=$b$1;
 var $ld$4$0=(($1)|0);
 var $3$0=HEAP32[(($ld$4$0)>>2)];
 var $ld$5$1=(($1+4)|0);
 var $3$1=HEAP32[(($ld$5$1)>>2)];
 var $$etemp$6$0=0;
 var $$etemp$6$1=-2147483648;
 var $4$0=$3$0^$$etemp$6$0;
 var $4$1=$3$1^$$etemp$6$1;
 var $ld$7$0=(($2)|0);
 var $5$0=HEAP32[(($ld$7$0)>>2)];
 var $ld$8$1=(($2+4)|0);
 var $5$1=HEAP32[(($ld$8$1)>>2)];
 var $$etemp$9$0=0;
 var $$etemp$9$1=-2147483648;
 var $6$0=$5$0^$$etemp$9$0;
 var $6$1=$5$1^$$etemp$9$1;
 var $7=(($4$1>>>0) < ($6$1>>>0)) | (((($4$1>>>0) == ($6$1>>>0) & ($4$0>>>0) <  ($6$0>>>0)))); //@line 5208 "tcc_bootstrap.c"
 var $8=($7&1); //@line 5208 "tcc_bootstrap.c"
 STACKTOP=sp;return $8; //@line 5208 "tcc_bootstrap.c"
}


function _gen_opl($op){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+40)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $t;
 var $a;
 var $b;
 var $op1;
 var $c;
 var $i;
 var $func;
 var $reg_iret;
 var $reg_lret;
 var $tmp=sp;
 $1=$op;
 $reg_iret=0; //@line 5016 "tcc_bootstrap.c"
 $reg_lret=2; //@line 5017 "tcc_bootstrap.c"
 var $2=$1; //@line 5019 "tcc_bootstrap.c"
 switch(($2|0)){case 47:case 178:{ label=2;break;}case 2:case 201:case 1:{ label=23;break;}case 176:{ label=3;break;}case 37:{ label=4;break;}case 177:{ label=5;break;}case 94:case 38:case 124:case 42:case 43:case 45:{ label=8;break;}default:{label=49;break;}}break;
 case 2: 
 $func=389; //@line 5022 "tcc_bootstrap.c"
 label=7;break; //@line 5023 "tcc_bootstrap.c"
 case 3: 
 $func=391; //@line 5025 "tcc_bootstrap.c"
 label=7;break; //@line 5026 "tcc_bootstrap.c"
 case 4: 
 $func=390; //@line 5028 "tcc_bootstrap.c"
 label=6;break; //@line 5029 "tcc_bootstrap.c"
 case 5: 
 $func=392; //@line 5031 "tcc_bootstrap.c"
 label=6;break; //@line 5031 "tcc_bootstrap.c"
 case 6: 
 label=7;break; //@line 5031 "tcc_bootstrap.c"
 case 7: 
 var $9=$func; //@line 5034 "tcc_bootstrap.c"
 _vpush_global_sym(76632,$9); //@line 5034 "tcc_bootstrap.c"
 _vrott(3); //@line 5035 "tcc_bootstrap.c"
 _gfunc_call(2); //@line 5036 "tcc_bootstrap.c"
 _vpushi(0); //@line 5037 "tcc_bootstrap.c"
 var $10=$reg_iret; //@line 5038 "tcc_bootstrap.c"
 var $11=HEAP32[((9288)>>2)]; //@line 5038 "tcc_bootstrap.c"
 var $12=(($11+8)|0); //@line 5038 "tcc_bootstrap.c"
 HEAP16[(($12)>>1)]=$10; //@line 5038 "tcc_bootstrap.c"
 var $13=$reg_lret; //@line 5039 "tcc_bootstrap.c"
 var $14=HEAP32[((9288)>>2)]; //@line 5039 "tcc_bootstrap.c"
 var $15=(($14+10)|0); //@line 5039 "tcc_bootstrap.c"
 HEAP16[(($15)>>1)]=$13; //@line 5039 "tcc_bootstrap.c"
 label=77;break; //@line 5040 "tcc_bootstrap.c"
 case 8: 
 var $17=HEAP32[((9288)>>2)]; //@line 5047 "tcc_bootstrap.c"
 var $18=(($17)|0); //@line 5047 "tcc_bootstrap.c"
 var $19=(($18)|0); //@line 5047 "tcc_bootstrap.c"
 var $20=HEAP32[(($19)>>2)]; //@line 5047 "tcc_bootstrap.c"
 $t=$20; //@line 5047 "tcc_bootstrap.c"
 _vswap(); //@line 5048 "tcc_bootstrap.c"
 _lexpand(); //@line 5049 "tcc_bootstrap.c"
 _vrotb(3); //@line 5050 "tcc_bootstrap.c"
 _lexpand(); //@line 5051 "tcc_bootstrap.c"
 var $21=HEAP32[((9288)>>2)]; //@line 5052 "tcc_bootstrap.c"
 var $22=(($21)|0); //@line 5052 "tcc_bootstrap.c"
 var $23=$tmp; //@line 5052 "tcc_bootstrap.c"
 var $24=$22; //@line 5052 "tcc_bootstrap.c"
 assert(40 % 1 === 0);HEAP32[(($23)>>2)]=HEAP32[(($24)>>2)];HEAP32[((($23)+(4))>>2)]=HEAP32[((($24)+(4))>>2)];HEAP32[((($23)+(8))>>2)]=HEAP32[((($24)+(8))>>2)];HEAP32[((($23)+(12))>>2)]=HEAP32[((($24)+(12))>>2)];HEAP32[((($23)+(16))>>2)]=HEAP32[((($24)+(16))>>2)];HEAP32[((($23)+(20))>>2)]=HEAP32[((($24)+(20))>>2)];HEAP32[((($23)+(24))>>2)]=HEAP32[((($24)+(24))>>2)];HEAP32[((($23)+(28))>>2)]=HEAP32[((($24)+(28))>>2)];HEAP32[((($23)+(32))>>2)]=HEAP32[((($24)+(32))>>2)];HEAP32[((($23)+(36))>>2)]=HEAP32[((($24)+(36))>>2)]; //@line 5052 "tcc_bootstrap.c"
 var $25=HEAP32[((9288)>>2)]; //@line 5053 "tcc_bootstrap.c"
 var $26=(($25)|0); //@line 5053 "tcc_bootstrap.c"
 var $27=HEAP32[((9288)>>2)]; //@line 5053 "tcc_bootstrap.c"
 var $28=((($27)-(120))|0); //@line 5053 "tcc_bootstrap.c"
 var $29=$26; //@line 5053 "tcc_bootstrap.c"
 var $30=$28; //@line 5053 "tcc_bootstrap.c"
 assert(40 % 1 === 0);HEAP32[(($29)>>2)]=HEAP32[(($30)>>2)];HEAP32[((($29)+(4))>>2)]=HEAP32[((($30)+(4))>>2)];HEAP32[((($29)+(8))>>2)]=HEAP32[((($30)+(8))>>2)];HEAP32[((($29)+(12))>>2)]=HEAP32[((($30)+(12))>>2)];HEAP32[((($29)+(16))>>2)]=HEAP32[((($30)+(16))>>2)];HEAP32[((($29)+(20))>>2)]=HEAP32[((($30)+(20))>>2)];HEAP32[((($29)+(24))>>2)]=HEAP32[((($30)+(24))>>2)];HEAP32[((($29)+(28))>>2)]=HEAP32[((($30)+(28))>>2)];HEAP32[((($29)+(32))>>2)]=HEAP32[((($30)+(32))>>2)];HEAP32[((($29)+(36))>>2)]=HEAP32[((($30)+(36))>>2)]; //@line 5053 "tcc_bootstrap.c"
 var $31=HEAP32[((9288)>>2)]; //@line 5054 "tcc_bootstrap.c"
 var $32=((($31)-(120))|0); //@line 5054 "tcc_bootstrap.c"
 var $33=$32; //@line 5054 "tcc_bootstrap.c"
 var $34=$tmp; //@line 5054 "tcc_bootstrap.c"
 assert(40 % 1 === 0);HEAP32[(($33)>>2)]=HEAP32[(($34)>>2)];HEAP32[((($33)+(4))>>2)]=HEAP32[((($34)+(4))>>2)];HEAP32[((($33)+(8))>>2)]=HEAP32[((($34)+(8))>>2)];HEAP32[((($33)+(12))>>2)]=HEAP32[((($34)+(12))>>2)];HEAP32[((($33)+(16))>>2)]=HEAP32[((($34)+(16))>>2)];HEAP32[((($33)+(20))>>2)]=HEAP32[((($34)+(20))>>2)];HEAP32[((($33)+(24))>>2)]=HEAP32[((($34)+(24))>>2)];HEAP32[((($33)+(28))>>2)]=HEAP32[((($34)+(28))>>2)];HEAP32[((($33)+(32))>>2)]=HEAP32[((($34)+(32))>>2)];HEAP32[((($33)+(36))>>2)]=HEAP32[((($34)+(36))>>2)]; //@line 5054 "tcc_bootstrap.c"
 var $35=HEAP32[((9288)>>2)]; //@line 5055 "tcc_bootstrap.c"
 var $36=((($35)-(80))|0); //@line 5055 "tcc_bootstrap.c"
 var $37=$tmp; //@line 5055 "tcc_bootstrap.c"
 var $38=$36; //@line 5055 "tcc_bootstrap.c"
 assert(40 % 1 === 0);HEAP32[(($37)>>2)]=HEAP32[(($38)>>2)];HEAP32[((($37)+(4))>>2)]=HEAP32[((($38)+(4))>>2)];HEAP32[((($37)+(8))>>2)]=HEAP32[((($38)+(8))>>2)];HEAP32[((($37)+(12))>>2)]=HEAP32[((($38)+(12))>>2)];HEAP32[((($37)+(16))>>2)]=HEAP32[((($38)+(16))>>2)];HEAP32[((($37)+(20))>>2)]=HEAP32[((($38)+(20))>>2)];HEAP32[((($37)+(24))>>2)]=HEAP32[((($38)+(24))>>2)];HEAP32[((($37)+(28))>>2)]=HEAP32[((($38)+(28))>>2)];HEAP32[((($37)+(32))>>2)]=HEAP32[((($38)+(32))>>2)];HEAP32[((($37)+(36))>>2)]=HEAP32[((($38)+(36))>>2)]; //@line 5055 "tcc_bootstrap.c"
 var $39=HEAP32[((9288)>>2)]; //@line 5056 "tcc_bootstrap.c"
 var $40=((($39)-(80))|0); //@line 5056 "tcc_bootstrap.c"
 var $41=HEAP32[((9288)>>2)]; //@line 5056 "tcc_bootstrap.c"
 var $42=((($41)-(120))|0); //@line 5056 "tcc_bootstrap.c"
 var $43=$40; //@line 5056 "tcc_bootstrap.c"
 var $44=$42; //@line 5056 "tcc_bootstrap.c"
 assert(40 % 1 === 0);HEAP32[(($43)>>2)]=HEAP32[(($44)>>2)];HEAP32[((($43)+(4))>>2)]=HEAP32[((($44)+(4))>>2)];HEAP32[((($43)+(8))>>2)]=HEAP32[((($44)+(8))>>2)];HEAP32[((($43)+(12))>>2)]=HEAP32[((($44)+(12))>>2)];HEAP32[((($43)+(16))>>2)]=HEAP32[((($44)+(16))>>2)];HEAP32[((($43)+(20))>>2)]=HEAP32[((($44)+(20))>>2)];HEAP32[((($43)+(24))>>2)]=HEAP32[((($44)+(24))>>2)];HEAP32[((($43)+(28))>>2)]=HEAP32[((($44)+(28))>>2)];HEAP32[((($43)+(32))>>2)]=HEAP32[((($44)+(32))>>2)];HEAP32[((($43)+(36))>>2)]=HEAP32[((($44)+(36))>>2)]; //@line 5056 "tcc_bootstrap.c"
 var $45=HEAP32[((9288)>>2)]; //@line 5057 "tcc_bootstrap.c"
 var $46=((($45)-(120))|0); //@line 5057 "tcc_bootstrap.c"
 var $47=$46; //@line 5057 "tcc_bootstrap.c"
 var $48=$tmp; //@line 5057 "tcc_bootstrap.c"
 assert(40 % 1 === 0);HEAP32[(($47)>>2)]=HEAP32[(($48)>>2)];HEAP32[((($47)+(4))>>2)]=HEAP32[((($48)+(4))>>2)];HEAP32[((($47)+(8))>>2)]=HEAP32[((($48)+(8))>>2)];HEAP32[((($47)+(12))>>2)]=HEAP32[((($48)+(12))>>2)];HEAP32[((($47)+(16))>>2)]=HEAP32[((($48)+(16))>>2)];HEAP32[((($47)+(20))>>2)]=HEAP32[((($48)+(20))>>2)];HEAP32[((($47)+(24))>>2)]=HEAP32[((($48)+(24))>>2)];HEAP32[((($47)+(28))>>2)]=HEAP32[((($48)+(28))>>2)];HEAP32[((($47)+(32))>>2)]=HEAP32[((($48)+(32))>>2)];HEAP32[((($47)+(36))>>2)]=HEAP32[((($48)+(36))>>2)]; //@line 5057 "tcc_bootstrap.c"
 _vswap(); //@line 5058 "tcc_bootstrap.c"
 var $49=$1; //@line 5059 "tcc_bootstrap.c"
 var $50=($49|0)==42; //@line 5059 "tcc_bootstrap.c"
 if($50){label=9;break;}else{label=14;break;} //@line 5059 "tcc_bootstrap.c"
 case 9: 
 var $52=HEAP32[((9288)>>2)]; //@line 5060 "tcc_bootstrap.c"
 var $53=((($52)-(40))|0); //@line 5060 "tcc_bootstrap.c"
 _vpushv($53); //@line 5060 "tcc_bootstrap.c"
 var $54=HEAP32[((9288)>>2)]; //@line 5061 "tcc_bootstrap.c"
 var $55=((($54)-(40))|0); //@line 5061 "tcc_bootstrap.c"
 _vpushv($55); //@line 5061 "tcc_bootstrap.c"
 _gen_op(194); //@line 5062 "tcc_bootstrap.c"
 _lexpand(); //@line 5063 "tcc_bootstrap.c"
 $i=0; //@line 5064 "tcc_bootstrap.c"
 label=10;break; //@line 5064 "tcc_bootstrap.c"
 case 10: 
 var $57=$i; //@line 5064 "tcc_bootstrap.c"
 var $58=($57|0)<4; //@line 5064 "tcc_bootstrap.c"
 if($58){label=11;break;}else{label=13;break;} //@line 5064 "tcc_bootstrap.c"
 case 11: 
 _vrotb(6); //@line 5065 "tcc_bootstrap.c"
 label=12;break; //@line 5065 "tcc_bootstrap.c"
 case 12: 
 var $61=$i; //@line 5064 "tcc_bootstrap.c"
 var $62=((($61)+(1))|0); //@line 5064 "tcc_bootstrap.c"
 $i=$62; //@line 5064 "tcc_bootstrap.c"
 label=10;break; //@line 5064 "tcc_bootstrap.c"
 case 13: 
 var $64=HEAP32[((9288)>>2)]; //@line 5066 "tcc_bootstrap.c"
 var $65=(($64)|0); //@line 5066 "tcc_bootstrap.c"
 var $66=$tmp; //@line 5066 "tcc_bootstrap.c"
 var $67=$65; //@line 5066 "tcc_bootstrap.c"
 assert(40 % 1 === 0);HEAP32[(($66)>>2)]=HEAP32[(($67)>>2)];HEAP32[((($66)+(4))>>2)]=HEAP32[((($67)+(4))>>2)];HEAP32[((($66)+(8))>>2)]=HEAP32[((($67)+(8))>>2)];HEAP32[((($66)+(12))>>2)]=HEAP32[((($67)+(12))>>2)];HEAP32[((($66)+(16))>>2)]=HEAP32[((($67)+(16))>>2)];HEAP32[((($66)+(20))>>2)]=HEAP32[((($67)+(20))>>2)];HEAP32[((($66)+(24))>>2)]=HEAP32[((($67)+(24))>>2)];HEAP32[((($66)+(28))>>2)]=HEAP32[((($67)+(28))>>2)];HEAP32[((($66)+(32))>>2)]=HEAP32[((($67)+(32))>>2)];HEAP32[((($66)+(36))>>2)]=HEAP32[((($67)+(36))>>2)]; //@line 5066 "tcc_bootstrap.c"
 var $68=HEAP32[((9288)>>2)]; //@line 5067 "tcc_bootstrap.c"
 var $69=(($68)|0); //@line 5067 "tcc_bootstrap.c"
 var $70=HEAP32[((9288)>>2)]; //@line 5067 "tcc_bootstrap.c"
 var $71=((($70)-(80))|0); //@line 5067 "tcc_bootstrap.c"
 var $72=$69; //@line 5067 "tcc_bootstrap.c"
 var $73=$71; //@line 5067 "tcc_bootstrap.c"
 assert(40 % 1 === 0);HEAP32[(($72)>>2)]=HEAP32[(($73)>>2)];HEAP32[((($72)+(4))>>2)]=HEAP32[((($73)+(4))>>2)];HEAP32[((($72)+(8))>>2)]=HEAP32[((($73)+(8))>>2)];HEAP32[((($72)+(12))>>2)]=HEAP32[((($73)+(12))>>2)];HEAP32[((($72)+(16))>>2)]=HEAP32[((($73)+(16))>>2)];HEAP32[((($72)+(20))>>2)]=HEAP32[((($73)+(20))>>2)];HEAP32[((($72)+(24))>>2)]=HEAP32[((($73)+(24))>>2)];HEAP32[((($72)+(28))>>2)]=HEAP32[((($73)+(28))>>2)];HEAP32[((($72)+(32))>>2)]=HEAP32[((($73)+(32))>>2)];HEAP32[((($72)+(36))>>2)]=HEAP32[((($73)+(36))>>2)]; //@line 5067 "tcc_bootstrap.c"
 var $74=HEAP32[((9288)>>2)]; //@line 5068 "tcc_bootstrap.c"
 var $75=((($74)-(80))|0); //@line 5068 "tcc_bootstrap.c"
 var $76=$75; //@line 5068 "tcc_bootstrap.c"
 var $77=$tmp; //@line 5068 "tcc_bootstrap.c"
 assert(40 % 1 === 0);HEAP32[(($76)>>2)]=HEAP32[(($77)>>2)];HEAP32[((($76)+(4))>>2)]=HEAP32[((($77)+(4))>>2)];HEAP32[((($76)+(8))>>2)]=HEAP32[((($77)+(8))>>2)];HEAP32[((($76)+(12))>>2)]=HEAP32[((($77)+(12))>>2)];HEAP32[((($76)+(16))>>2)]=HEAP32[((($77)+(16))>>2)];HEAP32[((($76)+(20))>>2)]=HEAP32[((($77)+(20))>>2)];HEAP32[((($76)+(24))>>2)]=HEAP32[((($77)+(24))>>2)];HEAP32[((($76)+(28))>>2)]=HEAP32[((($77)+(28))>>2)];HEAP32[((($76)+(32))>>2)]=HEAP32[((($77)+(32))>>2)];HEAP32[((($76)+(36))>>2)]=HEAP32[((($77)+(36))>>2)]; //@line 5068 "tcc_bootstrap.c"
 _gen_op(42); //@line 5069 "tcc_bootstrap.c"
 _vrotb(3); //@line 5070 "tcc_bootstrap.c"
 _vrotb(3); //@line 5071 "tcc_bootstrap.c"
 _gen_op(42); //@line 5072 "tcc_bootstrap.c"
 _gen_op(43); //@line 5073 "tcc_bootstrap.c"
 _gen_op(43); //@line 5074 "tcc_bootstrap.c"
 label=22;break; //@line 5075 "tcc_bootstrap.c"
 case 14: 
 var $79=$1; //@line 5075 "tcc_bootstrap.c"
 var $80=($79|0)==43; //@line 5075 "tcc_bootstrap.c"
 if($80){label=16;break;}else{label=15;break;} //@line 5075 "tcc_bootstrap.c"
 case 15: 
 var $82=$1; //@line 5075 "tcc_bootstrap.c"
 var $83=($82|0)==45; //@line 5075 "tcc_bootstrap.c"
 if($83){label=16;break;}else{label=20;break;} //@line 5075 "tcc_bootstrap.c"
 case 16: 
 var $85=$1; //@line 5076 "tcc_bootstrap.c"
 var $86=($85|0)==43; //@line 5076 "tcc_bootstrap.c"
 if($86){label=17;break;}else{label=18;break;} //@line 5076 "tcc_bootstrap.c"
 case 17: 
 $op1=195; //@line 5077 "tcc_bootstrap.c"
 label=19;break; //@line 5077 "tcc_bootstrap.c"
 case 18: 
 $op1=197; //@line 5079 "tcc_bootstrap.c"
 label=19;break;
 case 19: 
 var $90=$op1; //@line 5080 "tcc_bootstrap.c"
 _gen_op($90); //@line 5080 "tcc_bootstrap.c"
 _vrotb(3); //@line 5081 "tcc_bootstrap.c"
 _vrotb(3); //@line 5082 "tcc_bootstrap.c"
 var $91=$op1; //@line 5083 "tcc_bootstrap.c"
 var $92=((($91)+(1))|0); //@line 5083 "tcc_bootstrap.c"
 _gen_op($92); //@line 5083 "tcc_bootstrap.c"
 label=21;break; //@line 5084 "tcc_bootstrap.c"
 case 20: 
 var $94=$1; //@line 5085 "tcc_bootstrap.c"
 _gen_op($94); //@line 5085 "tcc_bootstrap.c"
 _vrotb(3); //@line 5086 "tcc_bootstrap.c"
 _vrotb(3); //@line 5087 "tcc_bootstrap.c"
 var $95=$1; //@line 5088 "tcc_bootstrap.c"
 _gen_op($95); //@line 5088 "tcc_bootstrap.c"
 label=21;break;
 case 21: 
 label=22;break;
 case 22: 
 var $98=$t; //@line 5090 "tcc_bootstrap.c"
 _lbuild($98); //@line 5090 "tcc_bootstrap.c"
 label=77;break; //@line 5091 "tcc_bootstrap.c"
 case 23: 
 var $100=HEAP32[((9288)>>2)]; //@line 5095 "tcc_bootstrap.c"
 var $101=(($100+8)|0); //@line 5095 "tcc_bootstrap.c"
 var $102=HEAP16[(($101)>>1)]; //@line 5095 "tcc_bootstrap.c"
 var $103=($102&65535); //@line 5095 "tcc_bootstrap.c"
 var $104=$103&831; //@line 5095 "tcc_bootstrap.c"
 var $105=($104|0)==48; //@line 5095 "tcc_bootstrap.c"
 if($105){label=24;break;}else{label=43;break;} //@line 5095 "tcc_bootstrap.c"
 case 24: 
 var $107=HEAP32[((9288)>>2)]; //@line 5096 "tcc_bootstrap.c"
 var $108=((($107)-(40))|0); //@line 5096 "tcc_bootstrap.c"
 var $109=(($108)|0); //@line 5096 "tcc_bootstrap.c"
 var $110=(($109)|0); //@line 5096 "tcc_bootstrap.c"
 var $111=HEAP32[(($110)>>2)]; //@line 5096 "tcc_bootstrap.c"
 $t=$111; //@line 5096 "tcc_bootstrap.c"
 _vswap(); //@line 5097 "tcc_bootstrap.c"
 _lexpand(); //@line 5098 "tcc_bootstrap.c"
 _vrotb(3); //@line 5099 "tcc_bootstrap.c"
 var $112=HEAP32[((9288)>>2)]; //@line 5100 "tcc_bootstrap.c"
 var $113=(($112+16)|0); //@line 5100 "tcc_bootstrap.c"
 var $114=$113; //@line 5100 "tcc_bootstrap.c"
 var $ld$0$0=(($114)|0);
 var $115$0=HEAP32[(($ld$0$0)>>2)];
 var $ld$1$1=(($114+4)|0);
 var $115$1=HEAP32[(($ld$1$1)>>2)];
 var $116$0=$115$0;
 var $116=$116$0;
 $c=$116; //@line 5100 "tcc_bootstrap.c"
 _vpop(); //@line 5101 "tcc_bootstrap.c"
 var $117=$1; //@line 5102 "tcc_bootstrap.c"
 var $118=($117|0)!=1; //@line 5102 "tcc_bootstrap.c"
 if($118){label=25;break;}else{label=26;break;} //@line 5102 "tcc_bootstrap.c"
 case 25: 
 _vswap(); //@line 5103 "tcc_bootstrap.c"
 label=26;break; //@line 5103 "tcc_bootstrap.c"
 case 26: 
 var $121=$c; //@line 5104 "tcc_bootstrap.c"
 var $122=($121|0)>=32; //@line 5104 "tcc_bootstrap.c"
 if($122){label=27;break;}else{label=33;break;} //@line 5104 "tcc_bootstrap.c"
 case 27: 
 _vpop(); //@line 5105 "tcc_bootstrap.c"
 var $124=$c; //@line 5106 "tcc_bootstrap.c"
 var $125=($124|0)>32; //@line 5106 "tcc_bootstrap.c"
 if($125){label=28;break;}else{label=29;break;} //@line 5106 "tcc_bootstrap.c"
 case 28: 
 var $127=$c; //@line 5107 "tcc_bootstrap.c"
 var $128=((($127)-(32))|0); //@line 5107 "tcc_bootstrap.c"
 _vpushi($128); //@line 5107 "tcc_bootstrap.c"
 var $129=$1; //@line 5108 "tcc_bootstrap.c"
 _gen_op($129); //@line 5108 "tcc_bootstrap.c"
 label=29;break; //@line 5109 "tcc_bootstrap.c"
 case 29: 
 var $131=$1; //@line 5110 "tcc_bootstrap.c"
 var $132=($131|0)!=2; //@line 5110 "tcc_bootstrap.c"
 if($132){label=30;break;}else{label=31;break;} //@line 5110 "tcc_bootstrap.c"
 case 30: 
 _vpushi(0); //@line 5111 "tcc_bootstrap.c"
 label=32;break; //@line 5112 "tcc_bootstrap.c"
 case 31: 
 _gv_dup(); //@line 5113 "tcc_bootstrap.c"
 _vpushi(31); //@line 5114 "tcc_bootstrap.c"
 _gen_op(2); //@line 5115 "tcc_bootstrap.c"
 label=32;break;
 case 32: 
 _vswap(); //@line 5117 "tcc_bootstrap.c"
 label=40;break; //@line 5118 "tcc_bootstrap.c"
 case 33: 
 _vswap(); //@line 5119 "tcc_bootstrap.c"
 _gv_dup(); //@line 5120 "tcc_bootstrap.c"
 var $137=$c; //@line 5121 "tcc_bootstrap.c"
 _vpushi($137); //@line 5121 "tcc_bootstrap.c"
 var $138=$1; //@line 5122 "tcc_bootstrap.c"
 _gen_op($138); //@line 5122 "tcc_bootstrap.c"
 _vswap(); //@line 5123 "tcc_bootstrap.c"
 var $139=$c; //@line 5124 "tcc_bootstrap.c"
 var $140=(((32)-($139))|0); //@line 5124 "tcc_bootstrap.c"
 _vpushi($140); //@line 5124 "tcc_bootstrap.c"
 var $141=$1; //@line 5125 "tcc_bootstrap.c"
 var $142=($141|0)==1; //@line 5125 "tcc_bootstrap.c"
 if($142){label=34;break;}else{label=35;break;} //@line 5125 "tcc_bootstrap.c"
 case 34: 
 _gen_op(201); //@line 5126 "tcc_bootstrap.c"
 label=36;break; //@line 5126 "tcc_bootstrap.c"
 case 35: 
 _gen_op(1); //@line 5128 "tcc_bootstrap.c"
 label=36;break;
 case 36: 
 _vrotb(3); //@line 5129 "tcc_bootstrap.c"
 var $146=$c; //@line 5130 "tcc_bootstrap.c"
 _vpushi($146); //@line 5130 "tcc_bootstrap.c"
 var $147=$1; //@line 5131 "tcc_bootstrap.c"
 var $148=($147|0)==1; //@line 5131 "tcc_bootstrap.c"
 if($148){label=37;break;}else{label=38;break;} //@line 5131 "tcc_bootstrap.c"
 case 37: 
 _gen_op(1); //@line 5132 "tcc_bootstrap.c"
 label=39;break; //@line 5132 "tcc_bootstrap.c"
 case 38: 
 _gen_op(201); //@line 5134 "tcc_bootstrap.c"
 label=39;break;
 case 39: 
 _gen_op(124); //@line 5135 "tcc_bootstrap.c"
 label=40;break;
 case 40: 
 var $153=$1; //@line 5137 "tcc_bootstrap.c"
 var $154=($153|0)!=1; //@line 5137 "tcc_bootstrap.c"
 if($154){label=41;break;}else{label=42;break;} //@line 5137 "tcc_bootstrap.c"
 case 41: 
 _vswap(); //@line 5138 "tcc_bootstrap.c"
 label=42;break; //@line 5138 "tcc_bootstrap.c"
 case 42: 
 var $157=$t; //@line 5139 "tcc_bootstrap.c"
 _lbuild($157); //@line 5139 "tcc_bootstrap.c"
 label=48;break; //@line 5140 "tcc_bootstrap.c"
 case 43: 
 var $159=$1; //@line 5141 "tcc_bootstrap.c"
 if(($159|0)==2){ label=44;break;}else if(($159|0)==201){ label=45;break;}else if(($159|0)==1){ label=46;break;}else{label=47;break;}
 case 44: 
 $func=393; //@line 5143 "tcc_bootstrap.c"
 label=7;break; //@line 5144 "tcc_bootstrap.c"
 case 45: 
 $func=394; //@line 5146 "tcc_bootstrap.c"
 label=7;break; //@line 5147 "tcc_bootstrap.c"
 case 46: 
 $func=395; //@line 5149 "tcc_bootstrap.c"
 label=7;break; //@line 5150 "tcc_bootstrap.c"
 case 47: 
 label=48;break;
 case 48: 
 label=77;break; //@line 5153 "tcc_bootstrap.c"
 case 49: 
 var $166=HEAP32[((9288)>>2)]; //@line 5155 "tcc_bootstrap.c"
 var $167=(($166)|0); //@line 5155 "tcc_bootstrap.c"
 var $168=(($167)|0); //@line 5155 "tcc_bootstrap.c"
 var $169=HEAP32[(($168)>>2)]; //@line 5155 "tcc_bootstrap.c"
 $t=$169; //@line 5155 "tcc_bootstrap.c"
 _vswap(); //@line 5156 "tcc_bootstrap.c"
 _lexpand(); //@line 5157 "tcc_bootstrap.c"
 _vrotb(3); //@line 5158 "tcc_bootstrap.c"
 _lexpand(); //@line 5159 "tcc_bootstrap.c"
 var $170=HEAP32[((9288)>>2)]; //@line 5160 "tcc_bootstrap.c"
 var $171=((($170)-(40))|0); //@line 5160 "tcc_bootstrap.c"
 var $172=$tmp; //@line 5160 "tcc_bootstrap.c"
 var $173=$171; //@line 5160 "tcc_bootstrap.c"
 assert(40 % 1 === 0);HEAP32[(($172)>>2)]=HEAP32[(($173)>>2)];HEAP32[((($172)+(4))>>2)]=HEAP32[((($173)+(4))>>2)];HEAP32[((($172)+(8))>>2)]=HEAP32[((($173)+(8))>>2)];HEAP32[((($172)+(12))>>2)]=HEAP32[((($173)+(12))>>2)];HEAP32[((($172)+(16))>>2)]=HEAP32[((($173)+(16))>>2)];HEAP32[((($172)+(20))>>2)]=HEAP32[((($173)+(20))>>2)];HEAP32[((($172)+(24))>>2)]=HEAP32[((($173)+(24))>>2)];HEAP32[((($172)+(28))>>2)]=HEAP32[((($173)+(28))>>2)];HEAP32[((($172)+(32))>>2)]=HEAP32[((($173)+(32))>>2)];HEAP32[((($172)+(36))>>2)]=HEAP32[((($173)+(36))>>2)]; //@line 5160 "tcc_bootstrap.c"
 var $174=HEAP32[((9288)>>2)]; //@line 5161 "tcc_bootstrap.c"
 var $175=((($174)-(40))|0); //@line 5161 "tcc_bootstrap.c"
 var $176=HEAP32[((9288)>>2)]; //@line 5161 "tcc_bootstrap.c"
 var $177=((($176)-(80))|0); //@line 5161 "tcc_bootstrap.c"
 var $178=$175; //@line 5161 "tcc_bootstrap.c"
 var $179=$177; //@line 5161 "tcc_bootstrap.c"
 assert(40 % 1 === 0);HEAP32[(($178)>>2)]=HEAP32[(($179)>>2)];HEAP32[((($178)+(4))>>2)]=HEAP32[((($179)+(4))>>2)];HEAP32[((($178)+(8))>>2)]=HEAP32[((($179)+(8))>>2)];HEAP32[((($178)+(12))>>2)]=HEAP32[((($179)+(12))>>2)];HEAP32[((($178)+(16))>>2)]=HEAP32[((($179)+(16))>>2)];HEAP32[((($178)+(20))>>2)]=HEAP32[((($179)+(20))>>2)];HEAP32[((($178)+(24))>>2)]=HEAP32[((($179)+(24))>>2)];HEAP32[((($178)+(28))>>2)]=HEAP32[((($179)+(28))>>2)];HEAP32[((($178)+(32))>>2)]=HEAP32[((($179)+(32))>>2)];HEAP32[((($178)+(36))>>2)]=HEAP32[((($179)+(36))>>2)]; //@line 5161 "tcc_bootstrap.c"
 var $180=HEAP32[((9288)>>2)]; //@line 5162 "tcc_bootstrap.c"
 var $181=((($180)-(80))|0); //@line 5162 "tcc_bootstrap.c"
 var $182=$181; //@line 5162 "tcc_bootstrap.c"
 var $183=$tmp; //@line 5162 "tcc_bootstrap.c"
 assert(40 % 1 === 0);HEAP32[(($182)>>2)]=HEAP32[(($183)>>2)];HEAP32[((($182)+(4))>>2)]=HEAP32[((($183)+(4))>>2)];HEAP32[((($182)+(8))>>2)]=HEAP32[((($183)+(8))>>2)];HEAP32[((($182)+(12))>>2)]=HEAP32[((($183)+(12))>>2)];HEAP32[((($182)+(16))>>2)]=HEAP32[((($183)+(16))>>2)];HEAP32[((($182)+(20))>>2)]=HEAP32[((($183)+(20))>>2)];HEAP32[((($182)+(24))>>2)]=HEAP32[((($183)+(24))>>2)];HEAP32[((($182)+(28))>>2)]=HEAP32[((($183)+(28))>>2)];HEAP32[((($182)+(32))>>2)]=HEAP32[((($183)+(32))>>2)];HEAP32[((($182)+(36))>>2)]=HEAP32[((($183)+(36))>>2)]; //@line 5162 "tcc_bootstrap.c"
 var $184=$1; //@line 5163 "tcc_bootstrap.c"
 $op1=$184; //@line 5163 "tcc_bootstrap.c"
 var $185=$op1; //@line 5164 "tcc_bootstrap.c"
 var $186=($185|0)==156; //@line 5164 "tcc_bootstrap.c"
 if($186){label=50;break;}else{label=51;break;} //@line 5164 "tcc_bootstrap.c"
 case 50: 
 $op1=158; //@line 5165 "tcc_bootstrap.c"
 label=60;break; //@line 5165 "tcc_bootstrap.c"
 case 51: 
 var $189=$op1; //@line 5166 "tcc_bootstrap.c"
 var $190=($189|0)==159; //@line 5166 "tcc_bootstrap.c"
 if($190){label=52;break;}else{label=53;break;} //@line 5166 "tcc_bootstrap.c"
 case 52: 
 $op1=157; //@line 5167 "tcc_bootstrap.c"
 label=59;break; //@line 5167 "tcc_bootstrap.c"
 case 53: 
 var $193=$op1; //@line 5168 "tcc_bootstrap.c"
 var $194=($193|0)==146; //@line 5168 "tcc_bootstrap.c"
 if($194){label=54;break;}else{label=55;break;} //@line 5168 "tcc_bootstrap.c"
 case 54: 
 $op1=150; //@line 5169 "tcc_bootstrap.c"
 label=58;break; //@line 5169 "tcc_bootstrap.c"
 case 55: 
 var $197=$op1; //@line 5170 "tcc_bootstrap.c"
 var $198=($197|0)==151; //@line 5170 "tcc_bootstrap.c"
 if($198){label=56;break;}else{label=57;break;} //@line 5170 "tcc_bootstrap.c"
 case 56: 
 $op1=147; //@line 5171 "tcc_bootstrap.c"
 label=57;break; //@line 5171 "tcc_bootstrap.c"
 case 57: 
 label=58;break;
 case 58: 
 label=59;break;
 case 59: 
 label=60;break;
 case 60: 
 $a=0; //@line 5172 "tcc_bootstrap.c"
 $b=0; //@line 5173 "tcc_bootstrap.c"
 var $204=$op1; //@line 5174 "tcc_bootstrap.c"
 _gen_op($204); //@line 5174 "tcc_bootstrap.c"
 var $205=$1; //@line 5175 "tcc_bootstrap.c"
 var $206=($205|0)==149; //@line 5175 "tcc_bootstrap.c"
 if($206){label=61;break;}else{label=62;break;} //@line 5175 "tcc_bootstrap.c"
 case 61: 
 var $208=_gvtst(0,0); //@line 5176 "tcc_bootstrap.c"
 $b=$208; //@line 5176 "tcc_bootstrap.c"
 label=65;break; //@line 5177 "tcc_bootstrap.c"
 case 62: 
 var $210=_gvtst(1,0); //@line 5178 "tcc_bootstrap.c"
 $a=$210; //@line 5178 "tcc_bootstrap.c"
 var $211=$1; //@line 5179 "tcc_bootstrap.c"
 var $212=($211|0)!=148; //@line 5179 "tcc_bootstrap.c"
 if($212){label=63;break;}else{label=64;break;} //@line 5179 "tcc_bootstrap.c"
 case 63: 
 _vpushi(149); //@line 5180 "tcc_bootstrap.c"
 var $214=HEAP32[((9288)>>2)]; //@line 5181 "tcc_bootstrap.c"
 var $215=(($214+8)|0); //@line 5181 "tcc_bootstrap.c"
 HEAP16[(($215)>>1)]=51; //@line 5181 "tcc_bootstrap.c"
 var $216=_gvtst(0,0); //@line 5182 "tcc_bootstrap.c"
 $b=$216; //@line 5182 "tcc_bootstrap.c"
 label=64;break; //@line 5183 "tcc_bootstrap.c"
 case 64: 
 label=65;break;
 case 65: 
 var $219=$1; //@line 5185 "tcc_bootstrap.c"
 $op1=$219; //@line 5185 "tcc_bootstrap.c"
 var $220=$op1; //@line 5186 "tcc_bootstrap.c"
 var $221=($220|0)==156; //@line 5186 "tcc_bootstrap.c"
 if($221){label=66;break;}else{label=67;break;} //@line 5186 "tcc_bootstrap.c"
 case 66: 
 $op1=146; //@line 5187 "tcc_bootstrap.c"
 label=76;break; //@line 5187 "tcc_bootstrap.c"
 case 67: 
 var $224=$op1; //@line 5188 "tcc_bootstrap.c"
 var $225=($224|0)==158; //@line 5188 "tcc_bootstrap.c"
 if($225){label=68;break;}else{label=69;break;} //@line 5188 "tcc_bootstrap.c"
 case 68: 
 $op1=150; //@line 5189 "tcc_bootstrap.c"
 label=75;break; //@line 5189 "tcc_bootstrap.c"
 case 69: 
 var $228=$op1; //@line 5190 "tcc_bootstrap.c"
 var $229=($228|0)==159; //@line 5190 "tcc_bootstrap.c"
 if($229){label=70;break;}else{label=71;break;} //@line 5190 "tcc_bootstrap.c"
 case 70: 
 $op1=151; //@line 5191 "tcc_bootstrap.c"
 label=74;break; //@line 5191 "tcc_bootstrap.c"
 case 71: 
 var $232=$op1; //@line 5192 "tcc_bootstrap.c"
 var $233=($232|0)==157; //@line 5192 "tcc_bootstrap.c"
 if($233){label=72;break;}else{label=73;break;} //@line 5192 "tcc_bootstrap.c"
 case 72: 
 $op1=147; //@line 5193 "tcc_bootstrap.c"
 label=73;break; //@line 5193 "tcc_bootstrap.c"
 case 73: 
 label=74;break;
 case 74: 
 label=75;break;
 case 75: 
 label=76;break;
 case 76: 
 var $239=$op1; //@line 5194 "tcc_bootstrap.c"
 _gen_op($239); //@line 5194 "tcc_bootstrap.c"
 var $240=$a; //@line 5195 "tcc_bootstrap.c"
 var $241=_gvtst(1,$240); //@line 5195 "tcc_bootstrap.c"
 $a=$241; //@line 5195 "tcc_bootstrap.c"
 var $242=$b; //@line 5196 "tcc_bootstrap.c"
 _gsym($242); //@line 5196 "tcc_bootstrap.c"
 var $243=$a; //@line 5197 "tcc_bootstrap.c"
 _vseti(53,$243); //@line 5197 "tcc_bootstrap.c"
 label=77;break; //@line 5198 "tcc_bootstrap.c"
 case 77: 
 STACKTOP=sp;return; //@line 5200 "tcc_bootstrap.c"
  default: assert(0, "bad label: " + label);
 }

}


function _gen_opi($op){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $r;
 var $fr;
 var $opc;
 var $c;
 $1=$op;
 var $2=$1; //@line 10412 "tcc_bootstrap.c"
 switch(($2|0)){case 43:case 195:{ label=2;break;}case 45:case 197:{ label=23;break;}case 196:{ label=24;break;}case 198:{ label=25;break;}case 38:{ label=26;break;}case 94:{ label=27;break;}case 124:{ label=28;break;}case 42:{ label=29;break;}case 1:{ label=30;break;}case 201:{ label=31;break;}case 2:{ label=32;break;}case 47:case 176:case 178:case 37:case 177:case 194:{ label=37;break;}default:{label=49;break;}}break;
 case 2: 
 $opc=0; //@line 10415 "tcc_bootstrap.c"
 label=3;break; //@line 10415 "tcc_bootstrap.c"
 case 3: 
 var $5=HEAP32[((9288)>>2)]; //@line 10417 "tcc_bootstrap.c"
 var $6=(($5+8)|0); //@line 10417 "tcc_bootstrap.c"
 var $7=HEAP16[(($6)>>1)]; //@line 10417 "tcc_bootstrap.c"
 var $8=($7&65535); //@line 10417 "tcc_bootstrap.c"
 var $9=$8&831; //@line 10417 "tcc_bootstrap.c"
 var $10=($9|0)==48; //@line 10417 "tcc_bootstrap.c"
 if($10){label=4;break;}else{label=18;break;} //@line 10417 "tcc_bootstrap.c"
 case 4: 
 _vswap(); //@line 10418 "tcc_bootstrap.c"
 var $12=_gv(1); //@line 10419 "tcc_bootstrap.c"
 $r=$12; //@line 10419 "tcc_bootstrap.c"
 _vswap(); //@line 10420 "tcc_bootstrap.c"
 var $13=HEAP32[((9288)>>2)]; //@line 10421 "tcc_bootstrap.c"
 var $14=(($13+16)|0); //@line 10421 "tcc_bootstrap.c"
 var $15=$14; //@line 10421 "tcc_bootstrap.c"
 var $ld$0$0=(($15)|0);
 var $16$0=HEAP32[(($ld$0$0)>>2)];
 var $ld$1$1=(($15+4)|0);
 var $16$1=HEAP32[(($ld$1$1)>>2)];
 var $17$0=$16$0;
 var $17=$17$0;
 $c=$17; //@line 10421 "tcc_bootstrap.c"
 var $18=$c; //@line 10422 "tcc_bootstrap.c"
 var $19=$c; //@line 10422 "tcc_bootstrap.c"
 var $20=(($19)&255); //@line 10422 "tcc_bootstrap.c"
 var $21=(($20<<24)>>24); //@line 10422 "tcc_bootstrap.c"
 var $22=($18|0)==($21|0); //@line 10422 "tcc_bootstrap.c"
 if($22){label=5;break;}else{label=16;break;} //@line 10422 "tcc_bootstrap.c"
 case 5: 
 var $24=$c; //@line 10423 "tcc_bootstrap.c"
 var $25=($24|0)==1; //@line 10423 "tcc_bootstrap.c"
 if($25){label=6;break;}else{label=9;break;} //@line 10423 "tcc_bootstrap.c"
 case 6: 
 var $27=$opc; //@line 10423 "tcc_bootstrap.c"
 var $28=($27|0)==0; //@line 10423 "tcc_bootstrap.c"
 if($28){label=7;break;}else{label=9;break;} //@line 10423 "tcc_bootstrap.c"
 case 7: 
 var $30=$1; //@line 10423 "tcc_bootstrap.c"
 var $31=($30|0)!=195; //@line 10423 "tcc_bootstrap.c"
 if($31){label=8;break;}else{label=9;break;} //@line 10423 "tcc_bootstrap.c"
 case 8: 
 var $33=$r; //@line 10424 "tcc_bootstrap.c"
 var $34=64|$33; //@line 10424 "tcc_bootstrap.c"
 _o($34); //@line 10424 "tcc_bootstrap.c"
 label=15;break; //@line 10425 "tcc_bootstrap.c"
 case 9: 
 var $36=$c; //@line 10425 "tcc_bootstrap.c"
 var $37=($36|0)==1; //@line 10425 "tcc_bootstrap.c"
 if($37){label=10;break;}else{label=13;break;} //@line 10425 "tcc_bootstrap.c"
 case 10: 
 var $39=$opc; //@line 10425 "tcc_bootstrap.c"
 var $40=($39|0)==5; //@line 10425 "tcc_bootstrap.c"
 if($40){label=11;break;}else{label=13;break;} //@line 10425 "tcc_bootstrap.c"
 case 11: 
 var $42=$1; //@line 10425 "tcc_bootstrap.c"
 var $43=($42|0)!=197; //@line 10425 "tcc_bootstrap.c"
 if($43){label=12;break;}else{label=13;break;} //@line 10425 "tcc_bootstrap.c"
 case 12: 
 var $45=$r; //@line 10426 "tcc_bootstrap.c"
 var $46=72|$45; //@line 10426 "tcc_bootstrap.c"
 _o($46); //@line 10426 "tcc_bootstrap.c"
 label=14;break; //@line 10427 "tcc_bootstrap.c"
 case 13: 
 _o(131); //@line 10428 "tcc_bootstrap.c"
 var $48=$opc; //@line 10429 "tcc_bootstrap.c"
 var $49=$48<<3; //@line 10429 "tcc_bootstrap.c"
 var $50=192|$49; //@line 10429 "tcc_bootstrap.c"
 var $51=$r; //@line 10429 "tcc_bootstrap.c"
 var $52=$50|$51; //@line 10429 "tcc_bootstrap.c"
 _o($52); //@line 10429 "tcc_bootstrap.c"
 var $53=$c; //@line 10430 "tcc_bootstrap.c"
 _g($53); //@line 10430 "tcc_bootstrap.c"
 label=14;break;
 case 14: 
 label=15;break;
 case 15: 
 label=17;break; //@line 10432 "tcc_bootstrap.c"
 case 16: 
 _o(129); //@line 10433 "tcc_bootstrap.c"
 var $57=$opc; //@line 10434 "tcc_bootstrap.c"
 var $58=$57<<3; //@line 10434 "tcc_bootstrap.c"
 var $59=192|$58; //@line 10434 "tcc_bootstrap.c"
 var $60=$r; //@line 10434 "tcc_bootstrap.c"
 var $61=$59|$60; //@line 10434 "tcc_bootstrap.c"
 var $62=$c; //@line 10434 "tcc_bootstrap.c"
 var $63=_oad($61,$62); //@line 10434 "tcc_bootstrap.c"
 label=17;break;
 case 17: 
 label=19;break; //@line 10436 "tcc_bootstrap.c"
 case 18: 
 _gv2(1,1); //@line 10437 "tcc_bootstrap.c"
 var $66=HEAP32[((9288)>>2)]; //@line 10438 "tcc_bootstrap.c"
 var $67=((($66)-(40))|0); //@line 10438 "tcc_bootstrap.c"
 var $68=(($67+8)|0); //@line 10438 "tcc_bootstrap.c"
 var $69=HEAP16[(($68)>>1)]; //@line 10438 "tcc_bootstrap.c"
 var $70=($69&65535); //@line 10438 "tcc_bootstrap.c"
 $r=$70; //@line 10438 "tcc_bootstrap.c"
 var $71=HEAP32[((9288)>>2)]; //@line 10439 "tcc_bootstrap.c"
 var $72=(($71)|0); //@line 10439 "tcc_bootstrap.c"
 var $73=(($72+8)|0); //@line 10439 "tcc_bootstrap.c"
 var $74=HEAP16[(($73)>>1)]; //@line 10439 "tcc_bootstrap.c"
 var $75=($74&65535); //@line 10439 "tcc_bootstrap.c"
 $fr=$75; //@line 10439 "tcc_bootstrap.c"
 var $76=$opc; //@line 10440 "tcc_bootstrap.c"
 var $77=$76<<3; //@line 10440 "tcc_bootstrap.c"
 var $78=$77|1; //@line 10440 "tcc_bootstrap.c"
 _o($78); //@line 10440 "tcc_bootstrap.c"
 var $79=$r; //@line 10441 "tcc_bootstrap.c"
 var $80=((($79)+(192))|0); //@line 10441 "tcc_bootstrap.c"
 var $81=$fr; //@line 10441 "tcc_bootstrap.c"
 var $82=($81<<3); //@line 10441 "tcc_bootstrap.c"
 var $83=((($80)+($82))|0); //@line 10441 "tcc_bootstrap.c"
 _o($83); //@line 10441 "tcc_bootstrap.c"
 label=19;break;
 case 19: 
 var $85=HEAP32[((9288)>>2)]; //@line 10443 "tcc_bootstrap.c"
 var $86=((($85)-(40))|0); //@line 10443 "tcc_bootstrap.c"
 HEAP32[((9288)>>2)]=$86; //@line 10443 "tcc_bootstrap.c"
 var $87=$1; //@line 10444 "tcc_bootstrap.c"
 var $88=($87|0)>=146; //@line 10444 "tcc_bootstrap.c"
 if($88){label=20;break;}else{label=22;break;} //@line 10444 "tcc_bootstrap.c"
 case 20: 
 var $90=$1; //@line 10444 "tcc_bootstrap.c"
 var $91=($90|0)<=159; //@line 10444 "tcc_bootstrap.c"
 if($91){label=21;break;}else{label=22;break;} //@line 10444 "tcc_bootstrap.c"
 case 21: 
 var $93=HEAP32[((9288)>>2)]; //@line 10445 "tcc_bootstrap.c"
 var $94=(($93+8)|0); //@line 10445 "tcc_bootstrap.c"
 HEAP16[(($94)>>1)]=51; //@line 10445 "tcc_bootstrap.c"
 var $95=$1; //@line 10446 "tcc_bootstrap.c"
 var $96$0=$95;
 var $96$1=((((($95|0)<0))|0)?-1:0);
 var $97=HEAP32[((9288)>>2)]; //@line 10446 "tcc_bootstrap.c"
 var $98=(($97+16)|0); //@line 10446 "tcc_bootstrap.c"
 var $99=$98; //@line 10446 "tcc_bootstrap.c"
 var $st$2$0=(($99)|0);
 HEAP32[(($st$2$0)>>2)]=$96$0;
 var $st$3$1=(($99+4)|0);
 HEAP32[(($st$3$1)>>2)]=$96$1;
 label=22;break; //@line 10447 "tcc_bootstrap.c"
 case 22: 
 label=50;break; //@line 10448 "tcc_bootstrap.c"
 case 23: 
 $opc=5; //@line 10451 "tcc_bootstrap.c"
 label=3;break; //@line 10452 "tcc_bootstrap.c"
 case 24: 
 $opc=2; //@line 10454 "tcc_bootstrap.c"
 label=3;break; //@line 10455 "tcc_bootstrap.c"
 case 25: 
 $opc=3; //@line 10457 "tcc_bootstrap.c"
 label=3;break; //@line 10458 "tcc_bootstrap.c"
 case 26: 
 $opc=4; //@line 10460 "tcc_bootstrap.c"
 label=3;break; //@line 10461 "tcc_bootstrap.c"
 case 27: 
 $opc=6; //@line 10463 "tcc_bootstrap.c"
 label=3;break; //@line 10464 "tcc_bootstrap.c"
 case 28: 
 $opc=1; //@line 10466 "tcc_bootstrap.c"
 label=3;break; //@line 10467 "tcc_bootstrap.c"
 case 29: 
 _gv2(1,1); //@line 10469 "tcc_bootstrap.c"
 var $108=HEAP32[((9288)>>2)]; //@line 10470 "tcc_bootstrap.c"
 var $109=((($108)-(40))|0); //@line 10470 "tcc_bootstrap.c"
 var $110=(($109+8)|0); //@line 10470 "tcc_bootstrap.c"
 var $111=HEAP16[(($110)>>1)]; //@line 10470 "tcc_bootstrap.c"
 var $112=($111&65535); //@line 10470 "tcc_bootstrap.c"
 $r=$112; //@line 10470 "tcc_bootstrap.c"
 var $113=HEAP32[((9288)>>2)]; //@line 10471 "tcc_bootstrap.c"
 var $114=(($113)|0); //@line 10471 "tcc_bootstrap.c"
 var $115=(($114+8)|0); //@line 10471 "tcc_bootstrap.c"
 var $116=HEAP16[(($115)>>1)]; //@line 10471 "tcc_bootstrap.c"
 var $117=($116&65535); //@line 10471 "tcc_bootstrap.c"
 $fr=$117; //@line 10471 "tcc_bootstrap.c"
 var $118=HEAP32[((9288)>>2)]; //@line 10472 "tcc_bootstrap.c"
 var $119=((($118)-(40))|0); //@line 10472 "tcc_bootstrap.c"
 HEAP32[((9288)>>2)]=$119; //@line 10472 "tcc_bootstrap.c"
 _o(44815); //@line 10473 "tcc_bootstrap.c"
 var $120=$fr; //@line 10474 "tcc_bootstrap.c"
 var $121=((($120)+(192))|0); //@line 10474 "tcc_bootstrap.c"
 var $122=$r; //@line 10474 "tcc_bootstrap.c"
 var $123=($122<<3); //@line 10474 "tcc_bootstrap.c"
 var $124=((($121)+($123))|0); //@line 10474 "tcc_bootstrap.c"
 _o($124); //@line 10474 "tcc_bootstrap.c"
 label=50;break; //@line 10475 "tcc_bootstrap.c"
 case 30: 
 $opc=4; //@line 10477 "tcc_bootstrap.c"
 label=33;break; //@line 10478 "tcc_bootstrap.c"
 case 31: 
 $opc=5; //@line 10480 "tcc_bootstrap.c"
 label=33;break; //@line 10481 "tcc_bootstrap.c"
 case 32: 
 $opc=7; //@line 10483 "tcc_bootstrap.c"
 label=33;break; //@line 10483 "tcc_bootstrap.c"
 case 33: 
 var $129=$opc; //@line 10485 "tcc_bootstrap.c"
 var $130=$129<<3; //@line 10485 "tcc_bootstrap.c"
 var $131=192|$130; //@line 10485 "tcc_bootstrap.c"
 $opc=$131; //@line 10485 "tcc_bootstrap.c"
 var $132=HEAP32[((9288)>>2)]; //@line 10486 "tcc_bootstrap.c"
 var $133=(($132+8)|0); //@line 10486 "tcc_bootstrap.c"
 var $134=HEAP16[(($133)>>1)]; //@line 10486 "tcc_bootstrap.c"
 var $135=($134&65535); //@line 10486 "tcc_bootstrap.c"
 var $136=$135&831; //@line 10486 "tcc_bootstrap.c"
 var $137=($136|0)==48; //@line 10486 "tcc_bootstrap.c"
 if($137){label=34;break;}else{label=35;break;} //@line 10486 "tcc_bootstrap.c"
 case 34: 
 _vswap(); //@line 10487 "tcc_bootstrap.c"
 var $139=_gv(1); //@line 10488 "tcc_bootstrap.c"
 $r=$139; //@line 10488 "tcc_bootstrap.c"
 _vswap(); //@line 10489 "tcc_bootstrap.c"
 var $140=HEAP32[((9288)>>2)]; //@line 10490 "tcc_bootstrap.c"
 var $141=(($140+16)|0); //@line 10490 "tcc_bootstrap.c"
 var $142=$141; //@line 10490 "tcc_bootstrap.c"
 var $ld$4$0=(($142)|0);
 var $143$0=HEAP32[(($ld$4$0)>>2)];
 var $ld$5$1=(($142+4)|0);
 var $143$1=HEAP32[(($ld$5$1)>>2)];
 var $$etemp$6$0=31;
 var $$etemp$6$1=0;
 var $144$0=$143$0&$$etemp$6$0;
 var $144$1=$143$1&$$etemp$6$1;
 var $145$0=$144$0;
 var $145=$145$0;
 $c=$145; //@line 10490 "tcc_bootstrap.c"
 _o(193); //@line 10491 "tcc_bootstrap.c"
 var $146=$opc; //@line 10492 "tcc_bootstrap.c"
 var $147=$r; //@line 10492 "tcc_bootstrap.c"
 var $148=$146|$147; //@line 10492 "tcc_bootstrap.c"
 _o($148); //@line 10492 "tcc_bootstrap.c"
 var $149=$c; //@line 10493 "tcc_bootstrap.c"
 _g($149); //@line 10493 "tcc_bootstrap.c"
 label=36;break; //@line 10494 "tcc_bootstrap.c"
 case 35: 
 _gv2(1,16); //@line 10495 "tcc_bootstrap.c"
 var $151=HEAP32[((9288)>>2)]; //@line 10496 "tcc_bootstrap.c"
 var $152=((($151)-(40))|0); //@line 10496 "tcc_bootstrap.c"
 var $153=(($152+8)|0); //@line 10496 "tcc_bootstrap.c"
 var $154=HEAP16[(($153)>>1)]; //@line 10496 "tcc_bootstrap.c"
 var $155=($154&65535); //@line 10496 "tcc_bootstrap.c"
 $r=$155; //@line 10496 "tcc_bootstrap.c"
 _o(211); //@line 10497 "tcc_bootstrap.c"
 var $156=$opc; //@line 10498 "tcc_bootstrap.c"
 var $157=$r; //@line 10498 "tcc_bootstrap.c"
 var $158=$156|$157; //@line 10498 "tcc_bootstrap.c"
 _o($158); //@line 10498 "tcc_bootstrap.c"
 label=36;break;
 case 36: 
 var $160=HEAP32[((9288)>>2)]; //@line 10500 "tcc_bootstrap.c"
 var $161=((($160)-(40))|0); //@line 10500 "tcc_bootstrap.c"
 HEAP32[((9288)>>2)]=$161; //@line 10500 "tcc_bootstrap.c"
 label=50;break; //@line 10501 "tcc_bootstrap.c"
 case 37: 
 _gv2(4,16); //@line 10508 "tcc_bootstrap.c"
 var $163=HEAP32[((9288)>>2)]; //@line 10509 "tcc_bootstrap.c"
 var $164=((($163)-(40))|0); //@line 10509 "tcc_bootstrap.c"
 var $165=(($164+8)|0); //@line 10509 "tcc_bootstrap.c"
 var $166=HEAP16[(($165)>>1)]; //@line 10509 "tcc_bootstrap.c"
 var $167=($166&65535); //@line 10509 "tcc_bootstrap.c"
 $r=$167; //@line 10509 "tcc_bootstrap.c"
 var $168=HEAP32[((9288)>>2)]; //@line 10510 "tcc_bootstrap.c"
 var $169=(($168)|0); //@line 10510 "tcc_bootstrap.c"
 var $170=(($169+8)|0); //@line 10510 "tcc_bootstrap.c"
 var $171=HEAP16[(($170)>>1)]; //@line 10510 "tcc_bootstrap.c"
 var $172=($171&65535); //@line 10510 "tcc_bootstrap.c"
 $fr=$172; //@line 10510 "tcc_bootstrap.c"
 var $173=HEAP32[((9288)>>2)]; //@line 10511 "tcc_bootstrap.c"
 var $174=((($173)-(40))|0); //@line 10511 "tcc_bootstrap.c"
 HEAP32[((9288)>>2)]=$174; //@line 10511 "tcc_bootstrap.c"
 _save_reg(2); //@line 10512 "tcc_bootstrap.c"
 _save_reg_upstack(0,1); //@line 10513 "tcc_bootstrap.c"
 var $175=$1; //@line 10514 "tcc_bootstrap.c"
 var $176=($175|0)==194; //@line 10514 "tcc_bootstrap.c"
 if($176){label=38;break;}else{label=39;break;} //@line 10514 "tcc_bootstrap.c"
 case 38: 
 _o(247); //@line 10515 "tcc_bootstrap.c"
 var $178=$fr; //@line 10516 "tcc_bootstrap.c"
 var $179=((($178)+(224))|0); //@line 10516 "tcc_bootstrap.c"
 _o($179); //@line 10516 "tcc_bootstrap.c"
 var $180=HEAP32[((9288)>>2)]; //@line 10517 "tcc_bootstrap.c"
 var $181=(($180+10)|0); //@line 10517 "tcc_bootstrap.c"
 HEAP16[(($181)>>1)]=2; //@line 10517 "tcc_bootstrap.c"
 $r=0; //@line 10518 "tcc_bootstrap.c"
 label=48;break; //@line 10519 "tcc_bootstrap.c"
 case 39: 
 var $183=$1; //@line 10520 "tcc_bootstrap.c"
 var $184=($183|0)==176; //@line 10520 "tcc_bootstrap.c"
 if($184){label=41;break;}else{label=40;break;} //@line 10520 "tcc_bootstrap.c"
 case 40: 
 var $186=$1; //@line 10520 "tcc_bootstrap.c"
 var $187=($186|0)==177; //@line 10520 "tcc_bootstrap.c"
 if($187){label=41;break;}else{label=42;break;} //@line 10520 "tcc_bootstrap.c"
 case 41: 
 _o(16241201); //@line 10521 "tcc_bootstrap.c"
 var $189=$fr; //@line 10522 "tcc_bootstrap.c"
 var $190=((($189)+(240))|0); //@line 10522 "tcc_bootstrap.c"
 _o($190); //@line 10522 "tcc_bootstrap.c"
 label=43;break; //@line 10523 "tcc_bootstrap.c"
 case 42: 
 _o(63385); //@line 10524 "tcc_bootstrap.c"
 var $192=$fr; //@line 10525 "tcc_bootstrap.c"
 var $193=((($192)+(248))|0); //@line 10525 "tcc_bootstrap.c"
 _o($193); //@line 10525 "tcc_bootstrap.c"
 label=43;break;
 case 43: 
 var $195=$1; //@line 10527 "tcc_bootstrap.c"
 var $196=($195|0)==37; //@line 10527 "tcc_bootstrap.c"
 if($196){label=45;break;}else{label=44;break;} //@line 10527 "tcc_bootstrap.c"
 case 44: 
 var $198=$1; //@line 10527 "tcc_bootstrap.c"
 var $199=($198|0)==177; //@line 10527 "tcc_bootstrap.c"
 if($199){label=45;break;}else{label=46;break;} //@line 10527 "tcc_bootstrap.c"
 case 45: 
 $r=2; //@line 10528 "tcc_bootstrap.c"
 label=47;break; //@line 10528 "tcc_bootstrap.c"
 case 46: 
 $r=0; //@line 10530 "tcc_bootstrap.c"
 label=47;break;
 case 47: 
 label=48;break;
 case 48: 
 var $204=$r; //@line 10532 "tcc_bootstrap.c"
 var $205=(($204)&65535); //@line 10532 "tcc_bootstrap.c"
 var $206=HEAP32[((9288)>>2)]; //@line 10532 "tcc_bootstrap.c"
 var $207=(($206+8)|0); //@line 10532 "tcc_bootstrap.c"
 HEAP16[(($207)>>1)]=$205; //@line 10532 "tcc_bootstrap.c"
 label=50;break; //@line 10533 "tcc_bootstrap.c"
 case 49: 
 $opc=7; //@line 10535 "tcc_bootstrap.c"
 label=3;break; //@line 10536 "tcc_bootstrap.c"
 case 50: 
 STACKTOP=sp;return; //@line 10538 "tcc_bootstrap.c"
  default: assert(0, "bad label: " + label);
 }

}


function _gv2($rc1,$rc2){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $v;
 $1=$rc1;
 $2=$rc2;
 var $3=HEAP32[((9288)>>2)]; //@line 4902 "tcc_bootstrap.c"
 var $4=(($3)|0); //@line 4902 "tcc_bootstrap.c"
 var $5=(($4+8)|0); //@line 4902 "tcc_bootstrap.c"
 var $6=HEAP16[(($5)>>1)]; //@line 4902 "tcc_bootstrap.c"
 var $7=($6&65535); //@line 4902 "tcc_bootstrap.c"
 var $8=$7&63; //@line 4902 "tcc_bootstrap.c"
 $v=$8; //@line 4902 "tcc_bootstrap.c"
 var $9=$v; //@line 4903 "tcc_bootstrap.c"
 var $10=($9|0)!=51; //@line 4903 "tcc_bootstrap.c"
 if($10){label=2;break;}else{label=7;break;} //@line 4903 "tcc_bootstrap.c"
 case 2: 
 var $12=$v; //@line 4903 "tcc_bootstrap.c"
 var $13=$12&-2; //@line 4903 "tcc_bootstrap.c"
 var $14=($13|0)!=52; //@line 4903 "tcc_bootstrap.c"
 if($14){label=3;break;}else{label=7;break;} //@line 4903 "tcc_bootstrap.c"
 case 3: 
 var $16=$1; //@line 4903 "tcc_bootstrap.c"
 var $17=$2; //@line 4903 "tcc_bootstrap.c"
 var $18=($16|0)<=($17|0); //@line 4903 "tcc_bootstrap.c"
 if($18){label=4;break;}else{label=7;break;} //@line 4903 "tcc_bootstrap.c"
 case 4: 
 _vswap(); //@line 4904 "tcc_bootstrap.c"
 var $20=$1; //@line 4905 "tcc_bootstrap.c"
 var $21=_gv($20); //@line 4905 "tcc_bootstrap.c"
 _vswap(); //@line 4906 "tcc_bootstrap.c"
 var $22=$2; //@line 4907 "tcc_bootstrap.c"
 var $23=_gv($22); //@line 4907 "tcc_bootstrap.c"
 var $24=HEAP32[((9288)>>2)]; //@line 4908 "tcc_bootstrap.c"
 var $25=((($24)-(40))|0); //@line 4908 "tcc_bootstrap.c"
 var $26=(($25+8)|0); //@line 4908 "tcc_bootstrap.c"
 var $27=HEAP16[(($26)>>1)]; //@line 4908 "tcc_bootstrap.c"
 var $28=($27&65535); //@line 4908 "tcc_bootstrap.c"
 var $29=$28&63; //@line 4908 "tcc_bootstrap.c"
 var $30=($29|0)>=48; //@line 4908 "tcc_bootstrap.c"
 if($30){label=5;break;}else{label=6;break;} //@line 4908 "tcc_bootstrap.c"
 case 5: 
 _vswap(); //@line 4909 "tcc_bootstrap.c"
 var $32=$1; //@line 4910 "tcc_bootstrap.c"
 var $33=_gv($32); //@line 4910 "tcc_bootstrap.c"
 _vswap(); //@line 4911 "tcc_bootstrap.c"
 label=6;break; //@line 4912 "tcc_bootstrap.c"
 case 6: 
 label=10;break; //@line 4913 "tcc_bootstrap.c"
 case 7: 
 var $36=$2; //@line 4914 "tcc_bootstrap.c"
 var $37=_gv($36); //@line 4914 "tcc_bootstrap.c"
 _vswap(); //@line 4915 "tcc_bootstrap.c"
 var $38=$1; //@line 4916 "tcc_bootstrap.c"
 var $39=_gv($38); //@line 4916 "tcc_bootstrap.c"
 _vswap(); //@line 4917 "tcc_bootstrap.c"
 var $40=HEAP32[((9288)>>2)]; //@line 4919 "tcc_bootstrap.c"
 var $41=(($40)|0); //@line 4919 "tcc_bootstrap.c"
 var $42=(($41+8)|0); //@line 4919 "tcc_bootstrap.c"
 var $43=HEAP16[(($42)>>1)]; //@line 4919 "tcc_bootstrap.c"
 var $44=($43&65535); //@line 4919 "tcc_bootstrap.c"
 var $45=$44&63; //@line 4919 "tcc_bootstrap.c"
 var $46=($45|0)>=48; //@line 4919 "tcc_bootstrap.c"
 if($46){label=8;break;}else{label=9;break;} //@line 4919 "tcc_bootstrap.c"
 case 8: 
 var $48=$2; //@line 4920 "tcc_bootstrap.c"
 var $49=_gv($48); //@line 4920 "tcc_bootstrap.c"
 label=9;break; //@line 4921 "tcc_bootstrap.c"
 case 9: 
 label=10;break;
 case 10: 
 STACKTOP=sp;return; //@line 4923 "tcc_bootstrap.c"
  default: assert(0, "bad label: " + label);
 }

}


function _vrotb($n){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+40)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $i;
 var $tmp=sp;
 $1=$n;
 var $2=$1; //@line 4483 "tcc_bootstrap.c"
 var $3=(((-$2))|0); //@line 4483 "tcc_bootstrap.c"
 var $4=((($3)+(1))|0); //@line 4483 "tcc_bootstrap.c"
 var $5=HEAP32[((9288)>>2)]; //@line 4483 "tcc_bootstrap.c"
 var $6=(($5+((($4)*(40))&-1))|0); //@line 4483 "tcc_bootstrap.c"
 var $7=$tmp; //@line 4483 "tcc_bootstrap.c"
 var $8=$6; //@line 4483 "tcc_bootstrap.c"
 assert(40 % 1 === 0);HEAP32[(($7)>>2)]=HEAP32[(($8)>>2)];HEAP32[((($7)+(4))>>2)]=HEAP32[((($8)+(4))>>2)];HEAP32[((($7)+(8))>>2)]=HEAP32[((($8)+(8))>>2)];HEAP32[((($7)+(12))>>2)]=HEAP32[((($8)+(12))>>2)];HEAP32[((($7)+(16))>>2)]=HEAP32[((($8)+(16))>>2)];HEAP32[((($7)+(20))>>2)]=HEAP32[((($8)+(20))>>2)];HEAP32[((($7)+(24))>>2)]=HEAP32[((($8)+(24))>>2)];HEAP32[((($7)+(28))>>2)]=HEAP32[((($8)+(28))>>2)];HEAP32[((($7)+(32))>>2)]=HEAP32[((($8)+(32))>>2)];HEAP32[((($7)+(36))>>2)]=HEAP32[((($8)+(36))>>2)]; //@line 4483 "tcc_bootstrap.c"
 var $9=$1; //@line 4484 "tcc_bootstrap.c"
 var $10=(((-$9))|0); //@line 4484 "tcc_bootstrap.c"
 var $11=((($10)+(1))|0); //@line 4484 "tcc_bootstrap.c"
 $i=$11; //@line 4484 "tcc_bootstrap.c"
 label=2;break; //@line 4484 "tcc_bootstrap.c"
 case 2: 
 var $13=$i; //@line 4484 "tcc_bootstrap.c"
 var $14=($13|0)!=0; //@line 4484 "tcc_bootstrap.c"
 if($14){label=3;break;}else{label=5;break;} //@line 4484 "tcc_bootstrap.c"
 case 3: 
 var $16=$i; //@line 4485 "tcc_bootstrap.c"
 var $17=HEAP32[((9288)>>2)]; //@line 4485 "tcc_bootstrap.c"
 var $18=(($17+((($16)*(40))&-1))|0); //@line 4485 "tcc_bootstrap.c"
 var $19=$i; //@line 4485 "tcc_bootstrap.c"
 var $20=((($19)+(1))|0); //@line 4485 "tcc_bootstrap.c"
 var $21=HEAP32[((9288)>>2)]; //@line 4485 "tcc_bootstrap.c"
 var $22=(($21+((($20)*(40))&-1))|0); //@line 4485 "tcc_bootstrap.c"
 var $23=$18; //@line 4485 "tcc_bootstrap.c"
 var $24=$22; //@line 4485 "tcc_bootstrap.c"
 assert(40 % 1 === 0);HEAP32[(($23)>>2)]=HEAP32[(($24)>>2)];HEAP32[((($23)+(4))>>2)]=HEAP32[((($24)+(4))>>2)];HEAP32[((($23)+(8))>>2)]=HEAP32[((($24)+(8))>>2)];HEAP32[((($23)+(12))>>2)]=HEAP32[((($24)+(12))>>2)];HEAP32[((($23)+(16))>>2)]=HEAP32[((($24)+(16))>>2)];HEAP32[((($23)+(20))>>2)]=HEAP32[((($24)+(20))>>2)];HEAP32[((($23)+(24))>>2)]=HEAP32[((($24)+(24))>>2)];HEAP32[((($23)+(28))>>2)]=HEAP32[((($24)+(28))>>2)];HEAP32[((($23)+(32))>>2)]=HEAP32[((($24)+(32))>>2)];HEAP32[((($23)+(36))>>2)]=HEAP32[((($24)+(36))>>2)]; //@line 4485 "tcc_bootstrap.c"
 label=4;break; //@line 4485 "tcc_bootstrap.c"
 case 4: 
 var $26=$i; //@line 4484 "tcc_bootstrap.c"
 var $27=((($26)+(1))|0); //@line 4484 "tcc_bootstrap.c"
 $i=$27; //@line 4484 "tcc_bootstrap.c"
 label=2;break; //@line 4484 "tcc_bootstrap.c"
 case 5: 
 var $29=HEAP32[((9288)>>2)]; //@line 4486 "tcc_bootstrap.c"
 var $30=(($29)|0); //@line 4486 "tcc_bootstrap.c"
 var $31=$30; //@line 4486 "tcc_bootstrap.c"
 var $32=$tmp; //@line 4486 "tcc_bootstrap.c"
 assert(40 % 1 === 0);HEAP32[(($31)>>2)]=HEAP32[(($32)>>2)];HEAP32[((($31)+(4))>>2)]=HEAP32[((($32)+(4))>>2)];HEAP32[((($31)+(8))>>2)]=HEAP32[((($32)+(8))>>2)];HEAP32[((($31)+(12))>>2)]=HEAP32[((($32)+(12))>>2)];HEAP32[((($31)+(16))>>2)]=HEAP32[((($32)+(16))>>2)];HEAP32[((($31)+(20))>>2)]=HEAP32[((($32)+(20))>>2)];HEAP32[((($31)+(24))>>2)]=HEAP32[((($32)+(24))>>2)];HEAP32[((($31)+(28))>>2)]=HEAP32[((($32)+(28))>>2)];HEAP32[((($31)+(32))>>2)]=HEAP32[((($32)+(32))>>2)];HEAP32[((($31)+(36))>>2)]=HEAP32[((($32)+(36))>>2)]; //@line 4486 "tcc_bootstrap.c"
 STACKTOP=sp;return; //@line 4487 "tcc_bootstrap.c"
  default: assert(0, "bad label: " + label);
 }

}


function _lbuild($t){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 $1=$t;
 _gv2(1,1); //@line 4953 "tcc_bootstrap.c"
 var $2=HEAP32[((9288)>>2)]; //@line 4954 "tcc_bootstrap.c"
 var $3=(($2)|0); //@line 4954 "tcc_bootstrap.c"
 var $4=(($3+8)|0); //@line 4954 "tcc_bootstrap.c"
 var $5=HEAP16[(($4)>>1)]; //@line 4954 "tcc_bootstrap.c"
 var $6=HEAP32[((9288)>>2)]; //@line 4954 "tcc_bootstrap.c"
 var $7=((($6)-(40))|0); //@line 4954 "tcc_bootstrap.c"
 var $8=(($7+10)|0); //@line 4954 "tcc_bootstrap.c"
 HEAP16[(($8)>>1)]=$5; //@line 4954 "tcc_bootstrap.c"
 var $9=$1; //@line 4955 "tcc_bootstrap.c"
 var $10=HEAP32[((9288)>>2)]; //@line 4955 "tcc_bootstrap.c"
 var $11=((($10)-(40))|0); //@line 4955 "tcc_bootstrap.c"
 var $12=(($11)|0); //@line 4955 "tcc_bootstrap.c"
 var $13=(($12)|0); //@line 4955 "tcc_bootstrap.c"
 HEAP32[(($13)>>2)]=$9; //@line 4955 "tcc_bootstrap.c"
 _vpop(); //@line 4956 "tcc_bootstrap.c"
 STACKTOP=sp;return; //@line 4957 "tcc_bootstrap.c"
}


function _vseti($r,$v){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 var $2;
 var $type=sp;
 $1=$r;
 $2=$v;
 var $3=(($type)|0); //@line 4463 "tcc_bootstrap.c"
 HEAP32[(($3)>>2)]=3; //@line 4463 "tcc_bootstrap.c"
 var $4=(($type+4)|0); //@line 4464 "tcc_bootstrap.c"
 HEAP32[(($4)>>2)]=0; //@line 4464 "tcc_bootstrap.c"
 var $5=$1; //@line 4465 "tcc_bootstrap.c"
 var $6=$2; //@line 4465 "tcc_bootstrap.c"
 _vset($type,$5,$6); //@line 4465 "tcc_bootstrap.c"
 STACKTOP=sp;return; //@line 4466 "tcc_bootstrap.c"
}


function _reg_fret($t){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 $1=$t;
 STACKTOP=sp;return 4; //@line 4930 "tcc_bootstrap.c"
}


function _gen_cvt_itof($t){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 $1=$t;
 _save_reg(4); //@line 10642 "tcc_bootstrap.c"
 var $2=_gv(1); //@line 10643 "tcc_bootstrap.c"
 var $3=HEAP32[((9288)>>2)]; //@line 10644 "tcc_bootstrap.c"
 var $4=(($3)|0); //@line 10644 "tcc_bootstrap.c"
 var $5=(($4)|0); //@line 10644 "tcc_bootstrap.c"
 var $6=HEAP32[(($5)>>2)]; //@line 10644 "tcc_bootstrap.c"
 var $7=$6&15; //@line 10644 "tcc_bootstrap.c"
 var $8=($7|0)==4; //@line 10644 "tcc_bootstrap.c"
 if($8){label=2;break;}else{label=3;break;} //@line 10644 "tcc_bootstrap.c"
 case 2: 
 var $10=HEAP32[((9288)>>2)]; //@line 10645 "tcc_bootstrap.c"
 var $11=(($10+10)|0); //@line 10645 "tcc_bootstrap.c"
 var $12=HEAP16[(($11)>>1)]; //@line 10645 "tcc_bootstrap.c"
 var $13=($12&65535); //@line 10645 "tcc_bootstrap.c"
 var $14=((($13)+(80))|0); //@line 10645 "tcc_bootstrap.c"
 _o($14); //@line 10645 "tcc_bootstrap.c"
 var $15=HEAP32[((9288)>>2)]; //@line 10646 "tcc_bootstrap.c"
 var $16=(($15+8)|0); //@line 10646 "tcc_bootstrap.c"
 var $17=HEAP16[(($16)>>1)]; //@line 10646 "tcc_bootstrap.c"
 var $18=($17&65535); //@line 10646 "tcc_bootstrap.c"
 var $19=$18&63; //@line 10646 "tcc_bootstrap.c"
 var $20=((($19)+(80))|0); //@line 10646 "tcc_bootstrap.c"
 _o($20); //@line 10646 "tcc_bootstrap.c"
 _o(2370783); //@line 10647 "tcc_bootstrap.c"
 _o(574595); //@line 10648 "tcc_bootstrap.c"
 label=7;break; //@line 10649 "tcc_bootstrap.c"
 case 3: 
 var $22=HEAP32[((9288)>>2)]; //@line 10649 "tcc_bootstrap.c"
 var $23=(($22)|0); //@line 10649 "tcc_bootstrap.c"
 var $24=(($23)|0); //@line 10649 "tcc_bootstrap.c"
 var $25=HEAP32[(($24)>>2)]; //@line 10649 "tcc_bootstrap.c"
 var $26=$25&31; //@line 10649 "tcc_bootstrap.c"
 var $27=($26|0)==19; //@line 10649 "tcc_bootstrap.c"
 if($27){label=4;break;}else{label=5;break;} //@line 10649 "tcc_bootstrap.c"
 case 4: 
 _o(106); //@line 10651 "tcc_bootstrap.c"
 _g(0); //@line 10652 "tcc_bootstrap.c"
 var $29=HEAP32[((9288)>>2)]; //@line 10653 "tcc_bootstrap.c"
 var $30=(($29+8)|0); //@line 10653 "tcc_bootstrap.c"
 var $31=HEAP16[(($30)>>1)]; //@line 10653 "tcc_bootstrap.c"
 var $32=($31&65535); //@line 10653 "tcc_bootstrap.c"
 var $33=$32&63; //@line 10653 "tcc_bootstrap.c"
 var $34=((($33)+(80))|0); //@line 10653 "tcc_bootstrap.c"
 _o($34); //@line 10653 "tcc_bootstrap.c"
 _o(2370783); //@line 10654 "tcc_bootstrap.c"
 _o(574595); //@line 10655 "tcc_bootstrap.c"
 label=6;break; //@line 10656 "tcc_bootstrap.c"
 case 5: 
 var $36=HEAP32[((9288)>>2)]; //@line 10657 "tcc_bootstrap.c"
 var $37=(($36+8)|0); //@line 10657 "tcc_bootstrap.c"
 var $38=HEAP16[(($37)>>1)]; //@line 10657 "tcc_bootstrap.c"
 var $39=($38&65535); //@line 10657 "tcc_bootstrap.c"
 var $40=$39&63; //@line 10657 "tcc_bootstrap.c"
 var $41=((($40)+(80))|0); //@line 10657 "tcc_bootstrap.c"
 _o($41); //@line 10657 "tcc_bootstrap.c"
 _o(2360539); //@line 10658 "tcc_bootstrap.c"
 _o(312451); //@line 10659 "tcc_bootstrap.c"
 label=6;break;
 case 6: 
 label=7;break;
 case 7: 
 var $44=HEAP32[((9288)>>2)]; //@line 10661 "tcc_bootstrap.c"
 var $45=(($44+8)|0); //@line 10661 "tcc_bootstrap.c"
 HEAP16[(($45)>>1)]=4; //@line 10661 "tcc_bootstrap.c"
 STACKTOP=sp;return; //@line 10662 "tcc_bootstrap.c"
  default: assert(0, "bad label: " + label);
 }

}


function _expr_eq(){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $t;
 _expr_cond(); //@line 7967 "tcc_bootstrap.c"
 var $1=HEAP32[((10472)>>2)]; //@line 7968 "tcc_bootstrap.c"
 var $2=($1|0)==61; //@line 7968 "tcc_bootstrap.c"
 if($2){label=8;break;}else{label=2;break;} //@line 7968 "tcc_bootstrap.c"
 case 2: 
 var $4=HEAP32[((10472)>>2)]; //@line 7968 "tcc_bootstrap.c"
 var $5=($4|0)>=165; //@line 7968 "tcc_bootstrap.c"
 if($5){label=3;break;}else{label=4;break;} //@line 7968 "tcc_bootstrap.c"
 case 3: 
 var $7=HEAP32[((10472)>>2)]; //@line 7968 "tcc_bootstrap.c"
 var $8=($7|0)<=175; //@line 7968 "tcc_bootstrap.c"
 if($8){label=8;break;}else{label=4;break;} //@line 7968 "tcc_bootstrap.c"
 case 4: 
 var $10=HEAP32[((10472)>>2)]; //@line 7968 "tcc_bootstrap.c"
 var $11=($10|0)==222; //@line 7968 "tcc_bootstrap.c"
 if($11){label=8;break;}else{label=5;break;} //@line 7968 "tcc_bootstrap.c"
 case 5: 
 var $13=HEAP32[((10472)>>2)]; //@line 7968 "tcc_bootstrap.c"
 var $14=($13|0)==252; //@line 7968 "tcc_bootstrap.c"
 if($14){label=8;break;}else{label=6;break;} //@line 7968 "tcc_bootstrap.c"
 case 6: 
 var $16=HEAP32[((10472)>>2)]; //@line 7968 "tcc_bootstrap.c"
 var $17=($16|0)==129; //@line 7968 "tcc_bootstrap.c"
 if($17){label=8;break;}else{label=7;break;} //@line 7968 "tcc_bootstrap.c"
 case 7: 
 var $19=HEAP32[((10472)>>2)]; //@line 7968 "tcc_bootstrap.c"
 var $20=($19|0)==130; //@line 7968 "tcc_bootstrap.c"
 if($20){label=8;break;}else{label=12;break;} //@line 7968 "tcc_bootstrap.c"
 case 8: 
 _test_lvalue(); //@line 7972 "tcc_bootstrap.c"
 var $22=HEAP32[((10472)>>2)]; //@line 7973 "tcc_bootstrap.c"
 $t=$22; //@line 7973 "tcc_bootstrap.c"
 _next(); //@line 7974 "tcc_bootstrap.c"
 var $23=$t; //@line 7975 "tcc_bootstrap.c"
 var $24=($23|0)==61; //@line 7975 "tcc_bootstrap.c"
 if($24){label=9;break;}else{label=10;break;} //@line 7975 "tcc_bootstrap.c"
 case 9: 
 _expr_eq(); //@line 7976 "tcc_bootstrap.c"
 label=11;break; //@line 7977 "tcc_bootstrap.c"
 case 10: 
 _vdup(); //@line 7978 "tcc_bootstrap.c"
 _expr_eq(); //@line 7979 "tcc_bootstrap.c"
 var $27=$t; //@line 7980 "tcc_bootstrap.c"
 var $28=$27&127; //@line 7980 "tcc_bootstrap.c"
 _gen_op($28); //@line 7980 "tcc_bootstrap.c"
 label=11;break;
 case 11: 
 _vstore(); //@line 7982 "tcc_bootstrap.c"
 label=12;break; //@line 7983 "tcc_bootstrap.c"
 case 12: 
 STACKTOP=sp;return; //@line 7984 "tcc_bootstrap.c"
  default: assert(0, "bad label: " + label);
 }

}


function _test_lvalue(){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=HEAP32[((9288)>>2)]; //@line 4125 "tcc_bootstrap.c"
 var $2=(($1+8)|0); //@line 4125 "tcc_bootstrap.c"
 var $3=HEAP16[(($2)>>1)]; //@line 4125 "tcc_bootstrap.c"
 var $4=($3&65535); //@line 4125 "tcc_bootstrap.c"
 var $5=$4&256; //@line 4125 "tcc_bootstrap.c"
 var $6=($5|0)!=0; //@line 4125 "tcc_bootstrap.c"
 if($6){label=3;break;}else{label=2;break;} //@line 4125 "tcc_bootstrap.c"
 case 2: 
 _expect(8152); //@line 4126 "tcc_bootstrap.c"
 label=3;break; //@line 4126 "tcc_bootstrap.c"
 case 3: 
 return; //@line 4127 "tcc_bootstrap.c"
  default: assert(0, "bad label: " + label);
 }

}


function _gtst($inv,$t){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $v;
 var $n1;
 var $n;
 $1=$inv;
 $2=$t;
 var $3=HEAP32[((9288)>>2)]; //@line 10386 "tcc_bootstrap.c"
 var $4=(($3+8)|0); //@line 10386 "tcc_bootstrap.c"
 var $5=HEAP16[(($4)>>1)]; //@line 10386 "tcc_bootstrap.c"
 var $6=($5&65535); //@line 10386 "tcc_bootstrap.c"
 var $7=$6&63; //@line 10386 "tcc_bootstrap.c"
 $v=$7; //@line 10386 "tcc_bootstrap.c"
 var $8=HEAP32[((10616)>>2)]; //@line 10387 "tcc_bootstrap.c"
 var $9=($8|0)!=0; //@line 10387 "tcc_bootstrap.c"
 if($9){label=2;break;}else{label=3;break;} //@line 10387 "tcc_bootstrap.c"
 case 2: 
 label=18;break; //@line 10389 "tcc_bootstrap.c"
 case 3: 
 var $12=$v; //@line 10389 "tcc_bootstrap.c"
 var $13=($12|0)==51; //@line 10389 "tcc_bootstrap.c"
 if($13){label=4;break;}else{label=5;break;} //@line 10389 "tcc_bootstrap.c"
 case 4: 
 _g(15); //@line 10390 "tcc_bootstrap.c"
 var $15=HEAP32[((9288)>>2)]; //@line 10391 "tcc_bootstrap.c"
 var $16=(($15+16)|0); //@line 10391 "tcc_bootstrap.c"
 var $17=$16; //@line 10391 "tcc_bootstrap.c"
 var $ld$0$0=(($17)|0);
 var $18$0=HEAP32[(($ld$0$0)>>2)];
 var $ld$1$1=(($17+4)|0);
 var $18$1=HEAP32[(($ld$1$1)>>2)];
 var $$etemp$2$0=16;
 var $$etemp$2$1=0;
 var $19$0=_i64Subtract($18$0,$18$1,$$etemp$2$0,$$etemp$2$1);var $19$1=tempRet0; //@line 10391 "tcc_bootstrap.c"
 var $20=$1; //@line 10391 "tcc_bootstrap.c"
 var $21$0=$20;
 var $21$1=((((($20|0)<0))|0)?-1:0);
 var $22$0=$19$0^$21$0;
 var $22$1=$19$1^$21$1;
 var $23$0=$22$0;
 var $23=$23$0;
 var $24=$2; //@line 10391 "tcc_bootstrap.c"
 var $25=_oad($23,$24); //@line 10391 "tcc_bootstrap.c"
 $2=$25; //@line 10391 "tcc_bootstrap.c"
 label=17;break; //@line 10392 "tcc_bootstrap.c"
 case 5: 
 var $27=$v; //@line 10392 "tcc_bootstrap.c"
 var $28=($27|0)==52; //@line 10392 "tcc_bootstrap.c"
 if($28){label=7;break;}else{label=6;break;} //@line 10392 "tcc_bootstrap.c"
 case 6: 
 var $30=$v; //@line 10392 "tcc_bootstrap.c"
 var $31=($30|0)==53; //@line 10392 "tcc_bootstrap.c"
 if($31){label=7;break;}else{label=16;break;} //@line 10392 "tcc_bootstrap.c"
 case 7: 
 var $33=$v; //@line 10393 "tcc_bootstrap.c"
 var $34=$33&1; //@line 10393 "tcc_bootstrap.c"
 var $35=$1; //@line 10393 "tcc_bootstrap.c"
 var $36=($34|0)==($35|0); //@line 10393 "tcc_bootstrap.c"
 if($36){label=8;break;}else{label=14;break;} //@line 10393 "tcc_bootstrap.c"
 case 8: 
 var $38=HEAP32[((9288)>>2)]; //@line 10394 "tcc_bootstrap.c"
 var $39=(($38+16)|0); //@line 10394 "tcc_bootstrap.c"
 var $40=$39; //@line 10394 "tcc_bootstrap.c"
 var $ld$3$0=(($40)|0);
 var $41$0=HEAP32[(($ld$3$0)>>2)];
 var $ld$4$1=(($40+4)|0);
 var $41$1=HEAP32[(($ld$4$1)>>2)];
 var $42$0=$41$0;
 var $42=$42$0;
 $n=$42; //@line 10394 "tcc_bootstrap.c"
 var $43=$n; //@line 10395 "tcc_bootstrap.c"
 var $44=($43|0)!=0; //@line 10395 "tcc_bootstrap.c"
 if($44){label=9;break;}else{label=13;break;} //@line 10395 "tcc_bootstrap.c"
 case 9: 
 label=10;break; //@line 10396 "tcc_bootstrap.c"
 case 10: 
 var $47=HEAP32[((76672)>>2)]; //@line 10396 "tcc_bootstrap.c"
 var $48=(($47+4)|0); //@line 10396 "tcc_bootstrap.c"
 var $49=HEAP32[(($48)>>2)]; //@line 10396 "tcc_bootstrap.c"
 var $50=$n; //@line 10396 "tcc_bootstrap.c"
 var $51=(($49+$50)|0); //@line 10396 "tcc_bootstrap.c"
 var $52=_read32le($51); //@line 10396 "tcc_bootstrap.c"
 $n1=$52; //@line 10396 "tcc_bootstrap.c"
 var $53=($52|0)!=0; //@line 10396 "tcc_bootstrap.c"
 if($53){label=11;break;}else{label=12;break;} //@line 10396 "tcc_bootstrap.c"
 case 11: 
 var $55=$n1; //@line 10397 "tcc_bootstrap.c"
 $n=$55; //@line 10397 "tcc_bootstrap.c"
 label=10;break; //@line 10397 "tcc_bootstrap.c"
 case 12: 
 var $57=HEAP32[((76672)>>2)]; //@line 10398 "tcc_bootstrap.c"
 var $58=(($57+4)|0); //@line 10398 "tcc_bootstrap.c"
 var $59=HEAP32[(($58)>>2)]; //@line 10398 "tcc_bootstrap.c"
 var $60=$n; //@line 10398 "tcc_bootstrap.c"
 var $61=(($59+$60)|0); //@line 10398 "tcc_bootstrap.c"
 var $62=$2; //@line 10398 "tcc_bootstrap.c"
 _write32le($61,$62); //@line 10398 "tcc_bootstrap.c"
 var $63=HEAP32[((9288)>>2)]; //@line 10399 "tcc_bootstrap.c"
 var $64=(($63+16)|0); //@line 10399 "tcc_bootstrap.c"
 var $65=$64; //@line 10399 "tcc_bootstrap.c"
 var $ld$5$0=(($65)|0);
 var $66$0=HEAP32[(($ld$5$0)>>2)];
 var $ld$6$1=(($65+4)|0);
 var $66$1=HEAP32[(($ld$6$1)>>2)];
 var $67$0=$66$0;
 var $67=$67$0;
 $2=$67; //@line 10399 "tcc_bootstrap.c"
 label=13;break; //@line 10400 "tcc_bootstrap.c"
 case 13: 
 label=15;break; //@line 10401 "tcc_bootstrap.c"
 case 14: 
 var $70=$2; //@line 10402 "tcc_bootstrap.c"
 var $71=_gjmp($70); //@line 10402 "tcc_bootstrap.c"
 $2=$71; //@line 10402 "tcc_bootstrap.c"
 var $72=HEAP32[((9288)>>2)]; //@line 10403 "tcc_bootstrap.c"
 var $73=(($72+16)|0); //@line 10403 "tcc_bootstrap.c"
 var $74=$73; //@line 10403 "tcc_bootstrap.c"
 var $ld$7$0=(($74)|0);
 var $75$0=HEAP32[(($ld$7$0)>>2)];
 var $ld$8$1=(($74+4)|0);
 var $75$1=HEAP32[(($ld$8$1)>>2)];
 var $76$0=$75$0;
 var $76=$76$0;
 _gsym($76); //@line 10403 "tcc_bootstrap.c"
 label=15;break;
 case 15: 
 label=16;break; //@line 10405 "tcc_bootstrap.c"
 case 16: 
 label=17;break;
 case 17: 
 label=18;break;
 case 18: 
 var $81=HEAP32[((9288)>>2)]; //@line 10406 "tcc_bootstrap.c"
 var $82=((($81)-(40))|0); //@line 10406 "tcc_bootstrap.c"
 HEAP32[((9288)>>2)]=$82; //@line 10406 "tcc_bootstrap.c"
 var $83=$2; //@line 10407 "tcc_bootstrap.c"
 STACKTOP=sp;return $83; //@line 10407 "tcc_bootstrap.c"
  default: assert(0, "bad label: " + label);
 }

}


function _load_packed_bf($type,$bit_pos,$bit_size){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $n;
 var $o;
 var $bits;
 $1=$type;
 $2=$bit_pos;
 $3=$bit_size;
 var $4=HEAP32[((9288)>>2)]; //@line 4717 "tcc_bootstrap.c"
 var $5=(($4+8)|0); //@line 4717 "tcc_bootstrap.c"
 var $6=HEAP16[(($5)>>1)]; //@line 4717 "tcc_bootstrap.c"
 var $7=($6&65535); //@line 4717 "tcc_bootstrap.c"
 _save_reg_upstack($7,1); //@line 4717 "tcc_bootstrap.c"
 var $8=$1; //@line 4718 "tcc_bootstrap.c"
 var $9=(($8)|0); //@line 4718 "tcc_bootstrap.c"
 var $10=HEAP32[(($9)>>2)]; //@line 4718 "tcc_bootstrap.c"
 var $11=$10&15; //@line 4718 "tcc_bootstrap.c"
 var $$etemp$0$0=0;
 var $$etemp$0$1=0;
 _vpush64($11,$$etemp$0$0,$$etemp$0$1);
 $bits=0; //@line 4719 "tcc_bootstrap.c"
 var $12=$2; //@line 4719 "tcc_bootstrap.c"
 var $13=$12>>3; //@line 4719 "tcc_bootstrap.c"
 $o=$13; //@line 4719 "tcc_bootstrap.c"
 var $14=$2; //@line 4719 "tcc_bootstrap.c"
 var $15=$14&7; //@line 4719 "tcc_bootstrap.c"
 $2=$15; //@line 4719 "tcc_bootstrap.c"
 label=2;break; //@line 4720 "tcc_bootstrap.c"
 case 2: 
 _vswap(); //@line 4721 "tcc_bootstrap.c"
 var $17=$o; //@line 4722 "tcc_bootstrap.c"
 _incr_bf_adr($17); //@line 4722 "tcc_bootstrap.c"
 _vdup(); //@line 4723 "tcc_bootstrap.c"
 var $18=$2; //@line 4724 "tcc_bootstrap.c"
 var $19=(((8)-($18))|0); //@line 4724 "tcc_bootstrap.c"
 $n=$19; //@line 4724 "tcc_bootstrap.c"
 var $20=$n; //@line 4725 "tcc_bootstrap.c"
 var $21=$3; //@line 4725 "tcc_bootstrap.c"
 var $22=($20|0)>($21|0); //@line 4725 "tcc_bootstrap.c"
 if($22){label=3;break;}else{label=4;break;} //@line 4725 "tcc_bootstrap.c"
 case 3: 
 var $24=$3; //@line 4726 "tcc_bootstrap.c"
 $n=$24; //@line 4726 "tcc_bootstrap.c"
 label=4;break; //@line 4726 "tcc_bootstrap.c"
 case 4: 
 var $26=$2; //@line 4727 "tcc_bootstrap.c"
 var $27=($26|0)!=0; //@line 4727 "tcc_bootstrap.c"
 if($27){label=5;break;}else{label=6;break;} //@line 4727 "tcc_bootstrap.c"
 case 5: 
 var $29=$2; //@line 4728 "tcc_bootstrap.c"
 _vpushi($29); //@line 4728 "tcc_bootstrap.c"
 _gen_op(201); //@line 4728 "tcc_bootstrap.c"
 $2=0; //@line 4728 "tcc_bootstrap.c"
 label=6;break; //@line 4728 "tcc_bootstrap.c"
 case 6: 
 var $31=$n; //@line 4729 "tcc_bootstrap.c"
 var $32=($31|0)<8; //@line 4729 "tcc_bootstrap.c"
 if($32){label=7;break;}else{label=8;break;} //@line 4729 "tcc_bootstrap.c"
 case 7: 
 var $34=$n; //@line 4730 "tcc_bootstrap.c"
 var $35=1<<$34; //@line 4730 "tcc_bootstrap.c"
 var $36=((($35)-(1))|0); //@line 4730 "tcc_bootstrap.c"
 _vpushi($36); //@line 4730 "tcc_bootstrap.c"
 _gen_op(38); //@line 4730 "tcc_bootstrap.c"
 label=8;break; //@line 4730 "tcc_bootstrap.c"
 case 8: 
 var $38=$1; //@line 4731 "tcc_bootstrap.c"
 _gen_cast($38); //@line 4731 "tcc_bootstrap.c"
 var $39=$bits; //@line 4732 "tcc_bootstrap.c"
 var $40=($39|0)!=0; //@line 4732 "tcc_bootstrap.c"
 if($40){label=9;break;}else{label=10;break;} //@line 4732 "tcc_bootstrap.c"
 case 9: 
 var $42=$bits; //@line 4733 "tcc_bootstrap.c"
 _vpushi($42); //@line 4733 "tcc_bootstrap.c"
 _gen_op(1); //@line 4733 "tcc_bootstrap.c"
 label=10;break; //@line 4733 "tcc_bootstrap.c"
 case 10: 
 _vrotb(3); //@line 4734 "tcc_bootstrap.c"
 _gen_op(124); //@line 4735 "tcc_bootstrap.c"
 var $44=$n; //@line 4736 "tcc_bootstrap.c"
 var $45=$bits; //@line 4736 "tcc_bootstrap.c"
 var $46=((($45)+($44))|0); //@line 4736 "tcc_bootstrap.c"
 $bits=$46; //@line 4736 "tcc_bootstrap.c"
 var $47=$n; //@line 4736 "tcc_bootstrap.c"
 var $48=$3; //@line 4736 "tcc_bootstrap.c"
 var $49=((($48)-($47))|0); //@line 4736 "tcc_bootstrap.c"
 $3=$49; //@line 4736 "tcc_bootstrap.c"
 $o=1; //@line 4736 "tcc_bootstrap.c"
 label=11;break; //@line 4737 "tcc_bootstrap.c"
 case 11: 
 var $51=$3; //@line 4737 "tcc_bootstrap.c"
 var $52=($51|0)!=0; //@line 4737 "tcc_bootstrap.c"
 if($52){label=2;break;}else{label=12;break;} //@line 4737 "tcc_bootstrap.c"
 case 12: 
 _vswap(); //@line 4738 "tcc_bootstrap.c"
 _vpop(); //@line 4738 "tcc_bootstrap.c"
 var $54=$1; //@line 4739 "tcc_bootstrap.c"
 var $55=(($54)|0); //@line 4739 "tcc_bootstrap.c"
 var $56=HEAP32[(($55)>>2)]; //@line 4739 "tcc_bootstrap.c"
 var $57=$56&16; //@line 4739 "tcc_bootstrap.c"
 var $58=($57|0)!=0; //@line 4739 "tcc_bootstrap.c"
 if($58){label=14;break;}else{label=13;break;} //@line 4739 "tcc_bootstrap.c"
 case 13: 
 var $60=$1; //@line 4740 "tcc_bootstrap.c"
 var $61=(($60)|0); //@line 4740 "tcc_bootstrap.c"
 var $62=HEAP32[(($61)>>2)]; //@line 4740 "tcc_bootstrap.c"
 var $63=$62&15; //@line 4740 "tcc_bootstrap.c"
 var $64=($63|0)==4; //@line 4740 "tcc_bootstrap.c"
 var $65=($64?64:32); //@line 4740 "tcc_bootstrap.c"
 var $66=$bits; //@line 4740 "tcc_bootstrap.c"
 var $67=((($65)-($66))|0); //@line 4740 "tcc_bootstrap.c"
 $n=$67; //@line 4740 "tcc_bootstrap.c"
 var $68=$n; //@line 4741 "tcc_bootstrap.c"
 _vpushi($68); //@line 4741 "tcc_bootstrap.c"
 _gen_op(1); //@line 4741 "tcc_bootstrap.c"
 var $69=$n; //@line 4742 "tcc_bootstrap.c"
 _vpushi($69); //@line 4742 "tcc_bootstrap.c"
 _gen_op(2); //@line 4742 "tcc_bootstrap.c"
 label=14;break; //@line 4743 "tcc_bootstrap.c"
 case 14: 
 STACKTOP=sp;return; //@line 4744 "tcc_bootstrap.c"
  default: assert(0, "bad label: " + label);
 }

}


function _vpush_ref($type,$sec,$offset,$size){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 var $2;
 var $3;
 var $4;
 $1=$type;
 $2=$sec;
 $3=$offset;
 $4=$size;
 var $5=$1; //@line 4520 "tcc_bootstrap.c"
 var $6=$1; //@line 4520 "tcc_bootstrap.c"
 var $7=$2; //@line 4520 "tcc_bootstrap.c"
 var $8=$3; //@line 4520 "tcc_bootstrap.c"
 var $9=$4; //@line 4520 "tcc_bootstrap.c"
 var $10=_get_sym_ref($6,$7,$8,$9); //@line 4520 "tcc_bootstrap.c"
 _vpushsym($5,$10); //@line 4520 "tcc_bootstrap.c"
 STACKTOP=sp;return; //@line 4521 "tcc_bootstrap.c"
}


function _init_putv($type,$sec,$c){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $bt;
 var $ptr;
 var $dtype=sp;
 var $size;
 var $align=(sp)+(8);
 var $ssec;
 var $esym;
 var $rel;
 var $val;
 var $val1;
 $1=$type;
 $2=$sec;
 $3=$c;
 var $4=$1; //@line 8637 "tcc_bootstrap.c"
 var $5=$dtype; //@line 8637 "tcc_bootstrap.c"
 var $6=$4; //@line 8637 "tcc_bootstrap.c"
 assert(8 % 1 === 0);HEAP32[(($5)>>2)]=HEAP32[(($6)>>2)];HEAP32[((($5)+(4))>>2)]=HEAP32[((($6)+(4))>>2)]; //@line 8637 "tcc_bootstrap.c"
 var $7=(($dtype)|0); //@line 8638 "tcc_bootstrap.c"
 var $8=HEAP32[(($7)>>2)]; //@line 8638 "tcc_bootstrap.c"
 var $9=$8&-257; //@line 8638 "tcc_bootstrap.c"
 HEAP32[(($7)>>2)]=$9; //@line 8638 "tcc_bootstrap.c"
 var $10=$2; //@line 8639 "tcc_bootstrap.c"
 var $11=($10|0)!=0; //@line 8639 "tcc_bootstrap.c"
 if($11){label=2;break;}else{label=35;break;} //@line 8639 "tcc_bootstrap.c"
 case 2: 
 _gen_assign_cast($dtype); //@line 8641 "tcc_bootstrap.c"
 var $13=$1; //@line 8642 "tcc_bootstrap.c"
 var $14=(($13)|0); //@line 8642 "tcc_bootstrap.c"
 var $15=HEAP32[(($14)>>2)]; //@line 8642 "tcc_bootstrap.c"
 var $16=$15&15; //@line 8642 "tcc_bootstrap.c"
 $bt=$16; //@line 8642 "tcc_bootstrap.c"
 var $17=HEAP32[((9288)>>2)]; //@line 8643 "tcc_bootstrap.c"
 var $18=(($17+8)|0); //@line 8643 "tcc_bootstrap.c"
 var $19=HEAP16[(($18)>>1)]; //@line 8643 "tcc_bootstrap.c"
 var $20=($19&65535); //@line 8643 "tcc_bootstrap.c"
 var $21=$20&512; //@line 8643 "tcc_bootstrap.c"
 var $22=($21|0)!=0; //@line 8643 "tcc_bootstrap.c"
 if($22){label=3;break;}else{label=10;break;} //@line 8643 "tcc_bootstrap.c"
 case 3: 
 var $24=$bt; //@line 8643 "tcc_bootstrap.c"
 var $25=($24|0)!=5; //@line 8643 "tcc_bootstrap.c"
 if($25){label=4;break;}else{label=10;break;} //@line 8643 "tcc_bootstrap.c"
 case 4: 
 var $27=$bt; //@line 8643 "tcc_bootstrap.c"
 var $28=($27|0)!=6; //@line 8643 "tcc_bootstrap.c"
 if($28){label=5;break;}else{label=10;break;} //@line 8643 "tcc_bootstrap.c"
 case 5: 
 var $30=$bt; //@line 8643 "tcc_bootstrap.c"
 var $31=($30|0)!=3; //@line 8643 "tcc_bootstrap.c"
 if($31){label=7;break;}else{label=6;break;} //@line 8643 "tcc_bootstrap.c"
 case 6: 
 var $33=$1; //@line 8643 "tcc_bootstrap.c"
 var $34=(($33)|0); //@line 8643 "tcc_bootstrap.c"
 var $35=HEAP32[(($34)>>2)]; //@line 8643 "tcc_bootstrap.c"
 var $36=$35&128; //@line 8643 "tcc_bootstrap.c"
 var $37=($36|0)!=0; //@line 8643 "tcc_bootstrap.c"
 if($37){label=7;break;}else{label=10;break;} //@line 8643 "tcc_bootstrap.c"
 case 7: 
 var $39=HEAP32[((9288)>>2)]; //@line 8643 "tcc_bootstrap.c"
 var $40=(($39+8)|0); //@line 8643 "tcc_bootstrap.c"
 var $41=HEAP16[(($40)>>1)]; //@line 8643 "tcc_bootstrap.c"
 var $42=($41&65535); //@line 8643 "tcc_bootstrap.c"
 var $43=$42&48; //@line 8643 "tcc_bootstrap.c"
 var $44=($43|0)!=0; //@line 8643 "tcc_bootstrap.c"
 if($44){label=8;break;}else{label=9;break;} //@line 8643 "tcc_bootstrap.c"
 case 8: 
 var $46=HEAP32[((9288)>>2)]; //@line 8643 "tcc_bootstrap.c"
 var $47=(($46+32)|0); //@line 8643 "tcc_bootstrap.c"
 var $48=HEAP32[(($47)>>2)]; //@line 8643 "tcc_bootstrap.c"
 var $49=(($48)|0); //@line 8643 "tcc_bootstrap.c"
 var $50=HEAP32[(($49)>>2)]; //@line 8643 "tcc_bootstrap.c"
 var $51=($50|0)>=268435456; //@line 8643 "tcc_bootstrap.c"
 if($51){label=10;break;}else{label=9;break;} //@line 8643 "tcc_bootstrap.c"
 case 9: 
 _tcc_error(8096,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs; //@line 8650 "tcc_bootstrap.c"
 label=10;break; //@line 8650 "tcc_bootstrap.c"
 case 10: 
 var $54=HEAP32[((10616)>>2)]; //@line 8651 "tcc_bootstrap.c"
 var $55=($54|0)>0; //@line 8651 "tcc_bootstrap.c"
 if($55){label=11;break;}else{label=12;break;} //@line 8651 "tcc_bootstrap.c"
 case 11: 
 var $57=HEAP32[((9288)>>2)]; //@line 8652 "tcc_bootstrap.c"
 var $58=((($57)-(40))|0); //@line 8652 "tcc_bootstrap.c"
 HEAP32[((9288)>>2)]=$58; //@line 8652 "tcc_bootstrap.c"
 label=36;break; //@line 8653 "tcc_bootstrap.c"
 case 12: 
 var $60=$1; //@line 8655 "tcc_bootstrap.c"
 var $61=_type_size($60,$align); //@line 8655 "tcc_bootstrap.c"
 $size=$61; //@line 8655 "tcc_bootstrap.c"
 var $62=$2; //@line 8656 "tcc_bootstrap.c"
 var $63=$3; //@line 8656 "tcc_bootstrap.c"
 var $64=$size; //@line 8656 "tcc_bootstrap.c"
 var $65=((($63)+($64))|0); //@line 8656 "tcc_bootstrap.c"
 _section_reserve($62,$65); //@line 8656 "tcc_bootstrap.c"
 var $66=$2; //@line 8657 "tcc_bootstrap.c"
 var $67=(($66+4)|0); //@line 8657 "tcc_bootstrap.c"
 var $68=HEAP32[(($67)>>2)]; //@line 8657 "tcc_bootstrap.c"
 var $69=$3; //@line 8657 "tcc_bootstrap.c"
 var $70=(($68+$69)|0); //@line 8657 "tcc_bootstrap.c"
 $ptr=$70; //@line 8657 "tcc_bootstrap.c"
 var $71=HEAP32[((9288)>>2)]; //@line 8658 "tcc_bootstrap.c"
 var $72=(($71+8)|0); //@line 8658 "tcc_bootstrap.c"
 var $73=HEAP16[(($72)>>1)]; //@line 8658 "tcc_bootstrap.c"
 var $74=($73&65535); //@line 8658 "tcc_bootstrap.c"
 var $75=$74&560; //@line 8658 "tcc_bootstrap.c"
 var $76=($75|0)==560; //@line 8658 "tcc_bootstrap.c"
 if($76){label=13;break;}else{label=16;break;} //@line 8658 "tcc_bootstrap.c"
 case 13: 
 var $78=HEAP32[((9288)>>2)]; //@line 8658 "tcc_bootstrap.c"
 var $79=(($78+32)|0); //@line 8658 "tcc_bootstrap.c"
 var $80=HEAP32[(($79)>>2)]; //@line 8658 "tcc_bootstrap.c"
 var $81=(($80)|0); //@line 8658 "tcc_bootstrap.c"
 var $82=HEAP32[(($81)>>2)]; //@line 8658 "tcc_bootstrap.c"
 var $83=($82|0)>=268435456; //@line 8658 "tcc_bootstrap.c"
 if($83){label=14;break;}else{label=16;break;} //@line 8658 "tcc_bootstrap.c"
 case 14: 
 var $85=HEAP32[((9288)>>2)]; //@line 8658 "tcc_bootstrap.c"
 var $86=(($85)|0); //@line 8658 "tcc_bootstrap.c"
 var $87=(($86)|0); //@line 8658 "tcc_bootstrap.c"
 var $88=HEAP32[(($87)>>2)]; //@line 8658 "tcc_bootstrap.c"
 var $89=$88&15; //@line 8658 "tcc_bootstrap.c"
 var $90=($89|0)!=5; //@line 8658 "tcc_bootstrap.c"
 if($90){label=15;break;}else{label=16;break;} //@line 8658 "tcc_bootstrap.c"
 case 15: 
 var $92=HEAP32[((9288)>>2)]; //@line 8664 "tcc_bootstrap.c"
 var $93=(($92+32)|0); //@line 8664 "tcc_bootstrap.c"
 var $94=HEAP32[(($93)>>2)]; //@line 8664 "tcc_bootstrap.c"
 var $95=_elfsym($94); //@line 8664 "tcc_bootstrap.c"
 $esym=$95; //@line 8664 "tcc_bootstrap.c"
 var $96=$esym; //@line 8665 "tcc_bootstrap.c"
 var $97=(($96+14)|0); //@line 8665 "tcc_bootstrap.c"
 var $98=HEAP16[(($97)>>1)]; //@line 8665 "tcc_bootstrap.c"
 var $99=($98&65535); //@line 8665 "tcc_bootstrap.c"
 var $100=HEAP32[((10488)>>2)]; //@line 8665 "tcc_bootstrap.c"
 var $101=(($100+680)|0); //@line 8665 "tcc_bootstrap.c"
 var $102=HEAP32[(($101)>>2)]; //@line 8665 "tcc_bootstrap.c"
 var $103=(($102+($99<<2))|0); //@line 8665 "tcc_bootstrap.c"
 var $104=HEAP32[(($103)>>2)]; //@line 8665 "tcc_bootstrap.c"
 $ssec=$104; //@line 8665 "tcc_bootstrap.c"
 var $105=$ptr; //@line 8666 "tcc_bootstrap.c"
 var $106=$ssec; //@line 8666 "tcc_bootstrap.c"
 var $107=(($106+4)|0); //@line 8666 "tcc_bootstrap.c"
 var $108=HEAP32[(($107)>>2)]; //@line 8666 "tcc_bootstrap.c"
 var $109=$esym; //@line 8666 "tcc_bootstrap.c"
 var $110=(($109+4)|0); //@line 8666 "tcc_bootstrap.c"
 var $111=HEAP32[(($110)>>2)]; //@line 8666 "tcc_bootstrap.c"
 var $112=(($108+$111)|0); //@line 8666 "tcc_bootstrap.c"
 var $113=$size; //@line 8666 "tcc_bootstrap.c"
 _memmove($105,$112,$113,1,0); //@line 8666 "tcc_bootstrap.c"
 label=34;break; //@line 8667 "tcc_bootstrap.c"
 case 16: 
 var $115=$bt; //@line 8668 "tcc_bootstrap.c"
 switch(($115|0)){case 11:{ label=17;break;}case 1:{ label=18;break;}case 2:{ label=19;break;}case 8:{ label=20;break;}case 9:{ label=21;break;}case 10:{ label=22;break;}case 4:{ label=26;break;}case 5:{ label=27;break;}default:{label=30;break;}}break;
 case 17: 
 var $117=HEAP32[((9288)>>2)]; //@line 8670 "tcc_bootstrap.c"
 var $118=(($117+16)|0); //@line 8670 "tcc_bootstrap.c"
 var $119=$118; //@line 8670 "tcc_bootstrap.c"
 var $ld$0$0=(($119)|0);
 var $120$0=HEAP32[(($ld$0$0)>>2)];
 var $ld$1$1=(($119+4)|0);
 var $120$1=HEAP32[(($ld$1$1)>>2)];
 var $$etemp$2$0=0;
 var $$etemp$2$1=0;
 var $121=(($120$0|0) != ($$etemp$2$0|0)) | (($120$1|0) != ($$etemp$2$1|0)); //@line 8670 "tcc_bootstrap.c"
 var $122=($121&1); //@line 8670 "tcc_bootstrap.c"
 var $123$0=$122;
 var $123$1=((((($122|0)<0))|0)?-1:0);
 var $124=HEAP32[((9288)>>2)]; //@line 8670 "tcc_bootstrap.c"
 var $125=(($124+16)|0); //@line 8670 "tcc_bootstrap.c"
 var $126=$125; //@line 8670 "tcc_bootstrap.c"
 var $st$3$0=(($126)|0);
 HEAP32[(($st$3$0)>>2)]=$123$0;
 var $st$4$1=(($126+4)|0);
 HEAP32[(($st$4$1)>>2)]=$123$1;
 label=18;break; //@line 8670 "tcc_bootstrap.c"
 case 18: 
 var $128=HEAP32[((9288)>>2)]; //@line 8672 "tcc_bootstrap.c"
 var $129=(($128+16)|0); //@line 8672 "tcc_bootstrap.c"
 var $130=$129; //@line 8672 "tcc_bootstrap.c"
 var $ld$5$0=(($130)|0);
 var $131$0=HEAP32[(($ld$5$0)>>2)];
 var $ld$6$1=(($130+4)|0);
 var $131$1=HEAP32[(($ld$6$1)>>2)];
 var $132=$ptr; //@line 8672 "tcc_bootstrap.c"
 var $133=HEAP8[(($132)>>0)]; //@line 8672 "tcc_bootstrap.c"
 var $134$0=(($133<<24)>>24);
 var $134$1=(((((($133<<24)>>24)<0))|0)?-1:0);
 var $135$0=$134$0|$131$0;
 var $135$1=$134$1|$131$1;
 var $136$0=$135$0;
 var $136=$136$0&255;
 HEAP8[(($132)>>0)]=$136; //@line 8672 "tcc_bootstrap.c"
 label=33;break; //@line 8673 "tcc_bootstrap.c"
 case 19: 
 var $138=HEAP32[((9288)>>2)]; //@line 8675 "tcc_bootstrap.c"
 var $139=(($138+16)|0); //@line 8675 "tcc_bootstrap.c"
 var $140=$139; //@line 8675 "tcc_bootstrap.c"
 var $ld$7$0=(($140)|0);
 var $141$0=HEAP32[(($ld$7$0)>>2)];
 var $ld$8$1=(($140+4)|0);
 var $141$1=HEAP32[(($ld$8$1)>>2)];
 var $142=$ptr; //@line 8675 "tcc_bootstrap.c"
 var $143=$142; //@line 8675 "tcc_bootstrap.c"
 var $144=HEAP16[(($143)>>1)]; //@line 8675 "tcc_bootstrap.c"
 var $145$0=(($144<<16)>>16);
 var $145$1=(((((($144<<16)>>16)<0))|0)?-1:0);
 var $146$0=$145$0|$141$0;
 var $146$1=$145$1|$141$1;
 var $147$0=$146$0;
 var $147=$147$0&65535;
 HEAP16[(($143)>>1)]=$147; //@line 8675 "tcc_bootstrap.c"
 label=33;break; //@line 8676 "tcc_bootstrap.c"
 case 20: 
 var $149=HEAP32[((9288)>>2)]; //@line 8678 "tcc_bootstrap.c"
 var $150=(($149+16)|0); //@line 8678 "tcc_bootstrap.c"
 var $151=$150; //@line 8678 "tcc_bootstrap.c"
 var $152=HEAPF32[(($151)>>2)]; //@line 8678 "tcc_bootstrap.c"
 var $153=$ptr; //@line 8678 "tcc_bootstrap.c"
 var $154=$153; //@line 8678 "tcc_bootstrap.c"
 HEAPF32[(($154)>>2)]=$152; //@line 8678 "tcc_bootstrap.c"
 label=33;break; //@line 8679 "tcc_bootstrap.c"
 case 21: 
 var $156=HEAP32[((9288)>>2)]; //@line 8681 "tcc_bootstrap.c"
 var $157=(($156+16)|0); //@line 8681 "tcc_bootstrap.c"
 var $158=$157; //@line 8681 "tcc_bootstrap.c"
 var $159=HEAPF64[(($158)>>3)]; //@line 8681 "tcc_bootstrap.c"
 var $160=$ptr; //@line 8681 "tcc_bootstrap.c"
 var $161=$160; //@line 8681 "tcc_bootstrap.c"
 HEAPF64[(($161)>>3)]=$159; //@line 8681 "tcc_bootstrap.c"
 label=33;break; //@line 8682 "tcc_bootstrap.c"
 case 22: 
 var $163=HEAP32[((9288)>>2)]; //@line 8686 "tcc_bootstrap.c"
 var $164=(($163+16)|0); //@line 8686 "tcc_bootstrap.c"
 var $165=$164; //@line 8686 "tcc_bootstrap.c"
 var $166=HEAPF64[(($165)>>3)]; //@line 8686 "tcc_bootstrap.c"
 var $167=$166==0; //@line 8686 "tcc_bootstrap.c"
 if($167){label=23;break;}else{label=24;break;} //@line 8686 "tcc_bootstrap.c"
 case 23: 
 label=25;break; //@line 8686 "tcc_bootstrap.c"
 case 24: 
 _tcc_error(8048,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs; //@line 8694 "tcc_bootstrap.c"
 label=25;break;
 case 25: 
 label=33;break; //@line 8695 "tcc_bootstrap.c"
 case 26: 
 var $172=HEAP32[((9288)>>2)]; //@line 8697 "tcc_bootstrap.c"
 var $173=(($172+16)|0); //@line 8697 "tcc_bootstrap.c"
 var $174=$173; //@line 8697 "tcc_bootstrap.c"
 var $ld$9$0=(($174)|0);
 var $175$0=HEAP32[(($ld$9$0)>>2)];
 var $ld$10$1=(($174+4)|0);
 var $175$1=HEAP32[(($ld$10$1)>>2)];
 var $176=$ptr; //@line 8697 "tcc_bootstrap.c"
 var $177=$176; //@line 8697 "tcc_bootstrap.c"
 var $ld$11$0=(($177)|0);
 var $178$0=HEAP32[(($ld$11$0)>>2)];
 var $ld$12$1=(($177+4)|0);
 var $178$1=HEAP32[(($ld$12$1)>>2)];
 var $179$0=$178$0|$175$0;
 var $179$1=$178$1|$175$1;
 var $st$13$0=(($177)|0);
 HEAP32[(($st$13$0)>>2)]=$179$0;
 var $st$14$1=(($177+4)|0);
 HEAP32[(($st$14$1)>>2)]=$179$1;
 label=33;break; //@line 8698 "tcc_bootstrap.c"
 case 27: 
 var $181=HEAP32[((9288)>>2)]; //@line 8701 "tcc_bootstrap.c"
 var $182=(($181+16)|0); //@line 8701 "tcc_bootstrap.c"
 var $183=$182; //@line 8701 "tcc_bootstrap.c"
 var $ld$15$0=(($183)|0);
 var $184$0=HEAP32[(($ld$15$0)>>2)];
 var $ld$16$1=(($183+4)|0);
 var $184$1=HEAP32[(($ld$16$1)>>2)];
 var $185$0=$184$0;
 var $185=$185$0;
 $val=$185; //@line 8701 "tcc_bootstrap.c"
 var $186=HEAP32[((9288)>>2)]; //@line 8702 "tcc_bootstrap.c"
 var $187=(($186+8)|0); //@line 8702 "tcc_bootstrap.c"
 var $188=HEAP16[(($187)>>1)]; //@line 8702 "tcc_bootstrap.c"
 var $189=($188&65535); //@line 8702 "tcc_bootstrap.c"
 var $190=$189&512; //@line 8702 "tcc_bootstrap.c"
 var $191=($190|0)!=0; //@line 8702 "tcc_bootstrap.c"
 if($191){label=28;break;}else{label=29;break;} //@line 8702 "tcc_bootstrap.c"
 case 28: 
 var $193=$2; //@line 8703 "tcc_bootstrap.c"
 var $194=HEAP32[((9288)>>2)]; //@line 8703 "tcc_bootstrap.c"
 var $195=(($194+32)|0); //@line 8703 "tcc_bootstrap.c"
 var $196=HEAP32[(($195)>>2)]; //@line 8703 "tcc_bootstrap.c"
 var $197=$3; //@line 8703 "tcc_bootstrap.c"
 _greloc($193,$196,$197,1); //@line 8703 "tcc_bootstrap.c"
 label=29;break; //@line 8703 "tcc_bootstrap.c"
 case 29: 
 var $199=$val; //@line 8704 "tcc_bootstrap.c"
 var $200=$ptr; //@line 8704 "tcc_bootstrap.c"
 var $201=$200; //@line 8704 "tcc_bootstrap.c"
 var $202=HEAP32[(($201)>>2)]; //@line 8704 "tcc_bootstrap.c"
 var $203=$202|$199; //@line 8704 "tcc_bootstrap.c"
 HEAP32[(($201)>>2)]=$203; //@line 8704 "tcc_bootstrap.c"
 label=33;break; //@line 8705 "tcc_bootstrap.c"
 case 30: 
 var $205=HEAP32[((9288)>>2)]; //@line 8709 "tcc_bootstrap.c"
 var $206=(($205+16)|0); //@line 8709 "tcc_bootstrap.c"
 var $207=$206; //@line 8709 "tcc_bootstrap.c"
 var $ld$17$0=(($207)|0);
 var $208$0=HEAP32[(($ld$17$0)>>2)];
 var $ld$18$1=(($207+4)|0);
 var $208$1=HEAP32[(($ld$18$1)>>2)];
 var $209$0=$208$0;
 var $209=$209$0;
 $val1=$209; //@line 8709 "tcc_bootstrap.c"
 var $210=HEAP32[((9288)>>2)]; //@line 8710 "tcc_bootstrap.c"
 var $211=(($210+8)|0); //@line 8710 "tcc_bootstrap.c"
 var $212=HEAP16[(($211)>>1)]; //@line 8710 "tcc_bootstrap.c"
 var $213=($212&65535); //@line 8710 "tcc_bootstrap.c"
 var $214=$213&512; //@line 8710 "tcc_bootstrap.c"
 var $215=($214|0)!=0; //@line 8710 "tcc_bootstrap.c"
 if($215){label=31;break;}else{label=32;break;} //@line 8710 "tcc_bootstrap.c"
 case 31: 
 var $217=$2; //@line 8711 "tcc_bootstrap.c"
 var $218=HEAP32[((9288)>>2)]; //@line 8711 "tcc_bootstrap.c"
 var $219=(($218+32)|0); //@line 8711 "tcc_bootstrap.c"
 var $220=HEAP32[(($219)>>2)]; //@line 8711 "tcc_bootstrap.c"
 var $221=$3; //@line 8711 "tcc_bootstrap.c"
 _greloc($217,$220,$221,1); //@line 8711 "tcc_bootstrap.c"
 label=32;break; //@line 8711 "tcc_bootstrap.c"
 case 32: 
 var $223=$val1; //@line 8712 "tcc_bootstrap.c"
 var $224=$ptr; //@line 8712 "tcc_bootstrap.c"
 var $225=$224; //@line 8712 "tcc_bootstrap.c"
 var $226=HEAP32[(($225)>>2)]; //@line 8712 "tcc_bootstrap.c"
 var $227=$226|$223; //@line 8712 "tcc_bootstrap.c"
 HEAP32[(($225)>>2)]=$227; //@line 8712 "tcc_bootstrap.c"
 label=33;break; //@line 8713 "tcc_bootstrap.c"
 case 33: 
 label=34;break;
 case 34: 
 var $230=HEAP32[((9288)>>2)]; //@line 8717 "tcc_bootstrap.c"
 var $231=((($230)-(40))|0); //@line 8717 "tcc_bootstrap.c"
 HEAP32[((9288)>>2)]=$231; //@line 8717 "tcc_bootstrap.c"
 label=36;break; //@line 8718 "tcc_bootstrap.c"
 case 35: 
 var $233=$3; //@line 8719 "tcc_bootstrap.c"
 _vset($dtype,306,$233); //@line 8719 "tcc_bootstrap.c"
 _vswap(); //@line 8720 "tcc_bootstrap.c"
 _vstore(); //@line 8721 "tcc_bootstrap.c"
 _vpop(); //@line 8722 "tcc_bootstrap.c"
 label=36;break;
 case 36: 
 STACKTOP=sp;return; //@line 8722 "tcc_bootstrap.c"
  default: assert(0, "bad label: " + label);
 }

}


function _section_reserve($sec,$size){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 $1=$sec;
 $2=$size;
 var $3=$2; //@line 9387 "tcc_bootstrap.c"
 var $4=$1; //@line 9387 "tcc_bootstrap.c"
 var $5=(($4+8)|0); //@line 9387 "tcc_bootstrap.c"
 var $6=HEAP32[(($5)>>2)]; //@line 9387 "tcc_bootstrap.c"
 var $7=($3>>>0)>($6>>>0); //@line 9387 "tcc_bootstrap.c"
 if($7){label=2;break;}else{label=3;break;} //@line 9387 "tcc_bootstrap.c"
 case 2: 
 var $9=$1; //@line 9388 "tcc_bootstrap.c"
 var $10=$2; //@line 9388 "tcc_bootstrap.c"
 _section_realloc($9,$10); //@line 9388 "tcc_bootstrap.c"
 label=3;break; //@line 9388 "tcc_bootstrap.c"
 case 3: 
 var $12=$2; //@line 9389 "tcc_bootstrap.c"
 var $13=$1; //@line 9389 "tcc_bootstrap.c"
 var $14=(($13)|0); //@line 9389 "tcc_bootstrap.c"
 var $15=HEAP32[(($14)>>2)]; //@line 9389 "tcc_bootstrap.c"
 var $16=($12>>>0)>($15>>>0); //@line 9389 "tcc_bootstrap.c"
 if($16){label=4;break;}else{label=5;break;} //@line 9389 "tcc_bootstrap.c"
 case 4: 
 var $18=$2; //@line 9390 "tcc_bootstrap.c"
 var $19=$1; //@line 9390 "tcc_bootstrap.c"
 var $20=(($19)|0); //@line 9390 "tcc_bootstrap.c"
 HEAP32[(($20)>>2)]=$18; //@line 9390 "tcc_bootstrap.c"
 label=5;break; //@line 9390 "tcc_bootstrap.c"
 case 5: 
 STACKTOP=sp;return; //@line 9391 "tcc_bootstrap.c"
  default: assert(0, "bad label: " + label);
 }

}


function _get_sym_ref($type,$sec,$offset,$size){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 var $2;
 var $3;
 var $4;
 var $v;
 var $sym;
 $1=$type;
 $2=$sec;
 $3=$offset;
 $4=$size;
 var $5=HEAP32[((76752)>>2)]; //@line 4511 "tcc_bootstrap.c"
 var $6=((($5)+(1))|0); //@line 4511 "tcc_bootstrap.c"
 HEAP32[((76752)>>2)]=$6; //@line 4511 "tcc_bootstrap.c"
 $v=$5; //@line 4511 "tcc_bootstrap.c"
 var $7=$v; //@line 4512 "tcc_bootstrap.c"
 var $8=$1; //@line 4512 "tcc_bootstrap.c"
 var $9=(($8)|0); //@line 4512 "tcc_bootstrap.c"
 var $10=HEAP32[(($9)>>2)]; //@line 4512 "tcc_bootstrap.c"
 var $11=$10|8192; //@line 4512 "tcc_bootstrap.c"
 var $12=_global_identifier_push($7,$11,0); //@line 4512 "tcc_bootstrap.c"
 $sym=$12; //@line 4512 "tcc_bootstrap.c"
 var $13=$1; //@line 4513 "tcc_bootstrap.c"
 var $14=(($13+4)|0); //@line 4513 "tcc_bootstrap.c"
 var $15=HEAP32[(($14)>>2)]; //@line 4513 "tcc_bootstrap.c"
 var $16=$sym; //@line 4513 "tcc_bootstrap.c"
 var $17=(($16+16)|0); //@line 4513 "tcc_bootstrap.c"
 var $18=(($17+4)|0); //@line 4513 "tcc_bootstrap.c"
 HEAP32[(($18)>>2)]=$15; //@line 4513 "tcc_bootstrap.c"
 var $19=$sym; //@line 4514 "tcc_bootstrap.c"
 var $20=(($19+4)|0); //@line 4514 "tcc_bootstrap.c"
 HEAP16[(($20)>>1)]=560; //@line 4514 "tcc_bootstrap.c"
 var $21=$sym; //@line 4515 "tcc_bootstrap.c"
 var $22=$2; //@line 4515 "tcc_bootstrap.c"
 var $23=$3; //@line 4515 "tcc_bootstrap.c"
 var $24=$4; //@line 4515 "tcc_bootstrap.c"
 _put_extern_sym($21,$22,$23,$24); //@line 4515 "tcc_bootstrap.c"
 var $25=$sym; //@line 4516 "tcc_bootstrap.c"
 STACKTOP=sp;return $25; //@line 4516 "tcc_bootstrap.c"
}


function _expr_land(){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $t;
 _expr_or(); //@line 7746 "tcc_bootstrap.c"
 var $1=HEAP32[((10472)>>2)]; //@line 7747 "tcc_bootstrap.c"
 var $2=($1|0)==160; //@line 7747 "tcc_bootstrap.c"
 if($2){label=2;break;}else{label=23;break;} //@line 7747 "tcc_bootstrap.c"
 case 2: 
 $t=0; //@line 7748 "tcc_bootstrap.c"
 label=3;break; //@line 7749 "tcc_bootstrap.c"
 case 3: 
 var $5=HEAP32[((9288)>>2)]; //@line 7750 "tcc_bootstrap.c"
 var $6=(($5+8)|0); //@line 7750 "tcc_bootstrap.c"
 var $7=HEAP16[(($6)>>1)]; //@line 7750 "tcc_bootstrap.c"
 var $8=($7&65535); //@line 7750 "tcc_bootstrap.c"
 var $9=$8&831; //@line 7750 "tcc_bootstrap.c"
 var $10=($9|0)==48; //@line 7750 "tcc_bootstrap.c"
 if($10){label=4;break;}else{label=13;break;} //@line 7750 "tcc_bootstrap.c"
 case 4: 
 _gen_cast_s(11); //@line 7751 "tcc_bootstrap.c"
 var $12=HEAP32[((9288)>>2)]; //@line 7752 "tcc_bootstrap.c"
 var $13=(($12+16)|0); //@line 7752 "tcc_bootstrap.c"
 var $14=$13; //@line 7752 "tcc_bootstrap.c"
 var $ld$0$0=(($14)|0);
 var $15$0=HEAP32[(($ld$0$0)>>2)];
 var $ld$1$1=(($14+4)|0);
 var $15$1=HEAP32[(($ld$1$1)>>2)];
 var $$etemp$2$0=0;
 var $$etemp$2$1=0;
 var $16=(($15$0|0) != ($$etemp$2$0|0)) | (($15$1|0) != ($$etemp$2$1|0)); //@line 7752 "tcc_bootstrap.c"
 if($16){label=5;break;}else{label=6;break;} //@line 7752 "tcc_bootstrap.c"
 case 5: 
 _vpop(); //@line 7753 "tcc_bootstrap.c"
 label=12;break; //@line 7754 "tcc_bootstrap.c"
 case 6: 
 var $19=HEAP32[((10616)>>2)]; //@line 7755 "tcc_bootstrap.c"
 var $20=((($19)+(1))|0); //@line 7755 "tcc_bootstrap.c"
 HEAP32[((10616)>>2)]=$20; //@line 7755 "tcc_bootstrap.c"
 label=7;break; //@line 7756 "tcc_bootstrap.c"
 case 7: 
 var $22=HEAP32[((10472)>>2)]; //@line 7756 "tcc_bootstrap.c"
 var $23=($22|0)==160; //@line 7756 "tcc_bootstrap.c"
 if($23){label=8;break;}else{label=9;break;} //@line 7756 "tcc_bootstrap.c"
 case 8: 
 _next(); //@line 7757 "tcc_bootstrap.c"
 _expr_or(); //@line 7758 "tcc_bootstrap.c"
 _vpop(); //@line 7759 "tcc_bootstrap.c"
 label=7;break; //@line 7760 "tcc_bootstrap.c"
 case 9: 
 var $26=HEAP32[((10616)>>2)]; //@line 7761 "tcc_bootstrap.c"
 var $27=((($26)-(1))|0); //@line 7761 "tcc_bootstrap.c"
 HEAP32[((10616)>>2)]=$27; //@line 7761 "tcc_bootstrap.c"
 var $28=$t; //@line 7762 "tcc_bootstrap.c"
 var $29=($28|0)!=0; //@line 7762 "tcc_bootstrap.c"
 if($29){label=10;break;}else{label=11;break;} //@line 7762 "tcc_bootstrap.c"
 case 10: 
 var $31=$t; //@line 7763 "tcc_bootstrap.c"
 _gsym($31); //@line 7763 "tcc_bootstrap.c"
 label=11;break; //@line 7763 "tcc_bootstrap.c"
 case 11: 
 _gen_cast_s(3); //@line 7764 "tcc_bootstrap.c"
 label=22;break; //@line 7765 "tcc_bootstrap.c"
 case 12: 
 label=16;break; //@line 7767 "tcc_bootstrap.c"
 case 13: 
 var $35=$t; //@line 7768 "tcc_bootstrap.c"
 var $36=($35|0)!=0; //@line 7768 "tcc_bootstrap.c"
 if($36){label=15;break;}else{label=14;break;} //@line 7768 "tcc_bootstrap.c"
 case 14: 
 _save_regs(1); //@line 7769 "tcc_bootstrap.c"
 label=15;break; //@line 7769 "tcc_bootstrap.c"
 case 15: 
 var $39=$t; //@line 7770 "tcc_bootstrap.c"
 var $40=_gvtst(1,$39); //@line 7770 "tcc_bootstrap.c"
 $t=$40; //@line 7770 "tcc_bootstrap.c"
 label=16;break;
 case 16: 
 var $42=HEAP32[((10472)>>2)]; //@line 7772 "tcc_bootstrap.c"
 var $43=($42|0)!=160; //@line 7772 "tcc_bootstrap.c"
 if($43){label=17;break;}else{label=21;break;} //@line 7772 "tcc_bootstrap.c"
 case 17: 
 var $45=$t; //@line 7773 "tcc_bootstrap.c"
 var $46=($45|0)!=0; //@line 7773 "tcc_bootstrap.c"
 if($46){label=18;break;}else{label=19;break;} //@line 7773 "tcc_bootstrap.c"
 case 18: 
 var $48=$t; //@line 7774 "tcc_bootstrap.c"
 _vseti(53,$48); //@line 7774 "tcc_bootstrap.c"
 label=20;break; //@line 7774 "tcc_bootstrap.c"
 case 19: 
 _vpushi(1); //@line 7776 "tcc_bootstrap.c"
 label=20;break;
 case 20: 
 label=22;break; //@line 7777 "tcc_bootstrap.c"
 case 21: 
 _next(); //@line 7779 "tcc_bootstrap.c"
 _expr_or(); //@line 7780 "tcc_bootstrap.c"
 label=3;break; //@line 7781 "tcc_bootstrap.c"
 case 22: 
 label=23;break; //@line 7782 "tcc_bootstrap.c"
 case 23: 
 STACKTOP=sp;return; //@line 7783 "tcc_bootstrap.c"
  default: assert(0, "bad label: " + label);
 }

}


function _expr_or(){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 _expr_xor(); //@line 7737 "tcc_bootstrap.c"
 label=2;break; //@line 7738 "tcc_bootstrap.c"
 case 2: 
 var $2=HEAP32[((10472)>>2)]; //@line 7738 "tcc_bootstrap.c"
 var $3=($2|0)==124; //@line 7738 "tcc_bootstrap.c"
 if($3){label=3;break;}else{label=4;break;} //@line 7738 "tcc_bootstrap.c"
 case 3: 
 _next(); //@line 7739 "tcc_bootstrap.c"
 _expr_xor(); //@line 7740 "tcc_bootstrap.c"
 _gen_op(124); //@line 7741 "tcc_bootstrap.c"
 label=2;break; //@line 7742 "tcc_bootstrap.c"
 case 4: 
 return; //@line 7743 "tcc_bootstrap.c"
  default: assert(0, "bad label: " + label);
 }

}


function _expr_xor(){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 _expr_and(); //@line 7728 "tcc_bootstrap.c"
 label=2;break; //@line 7729 "tcc_bootstrap.c"
 case 2: 
 var $2=HEAP32[((10472)>>2)]; //@line 7729 "tcc_bootstrap.c"
 var $3=($2|0)==94; //@line 7729 "tcc_bootstrap.c"
 if($3){label=3;break;}else{label=4;break;} //@line 7729 "tcc_bootstrap.c"
 case 3: 
 _next(); //@line 7730 "tcc_bootstrap.c"
 _expr_and(); //@line 7731 "tcc_bootstrap.c"
 _gen_op(94); //@line 7732 "tcc_bootstrap.c"
 label=2;break; //@line 7733 "tcc_bootstrap.c"
 case 4: 
 return; //@line 7734 "tcc_bootstrap.c"
  default: assert(0, "bad label: " + label);
 }

}


function _expr_and(){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 _expr_cmpeq(); //@line 7719 "tcc_bootstrap.c"
 label=2;break; //@line 7720 "tcc_bootstrap.c"
 case 2: 
 var $2=HEAP32[((10472)>>2)]; //@line 7720 "tcc_bootstrap.c"
 var $3=($2|0)==38; //@line 7720 "tcc_bootstrap.c"
 if($3){label=3;break;}else{label=4;break;} //@line 7720 "tcc_bootstrap.c"
 case 3: 
 _next(); //@line 7721 "tcc_bootstrap.c"
 _expr_cmpeq(); //@line 7722 "tcc_bootstrap.c"
 _gen_op(38); //@line 7723 "tcc_bootstrap.c"
 label=2;break; //@line 7724 "tcc_bootstrap.c"
 case 4: 
 return; //@line 7725 "tcc_bootstrap.c"
  default: assert(0, "bad label: " + label);
 }

}


function _expr_cmpeq(){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $t;
 _expr_cmp(); //@line 7709 "tcc_bootstrap.c"
 label=2;break; //@line 7710 "tcc_bootstrap.c"
 case 2: 
 var $2=HEAP32[((10472)>>2)]; //@line 7710 "tcc_bootstrap.c"
 var $3=($2|0)==148; //@line 7710 "tcc_bootstrap.c"
 if($3){var $8=1;label=4;break;}else{label=3;break;} //@line 7710 "tcc_bootstrap.c"
 case 3: 
 var $5=HEAP32[((10472)>>2)]; //@line 7710 "tcc_bootstrap.c"
 var $6=($5|0)==149; //@line 7710 "tcc_bootstrap.c"
 var $8=$6;label=4;break; //@line 7710 "tcc_bootstrap.c"
 case 4: 
 var $8;
 if($8){label=5;break;}else{label=6;break;} //@line 7710 "tcc_bootstrap.c"
 case 5: 
 var $10=HEAP32[((10472)>>2)]; //@line 7711 "tcc_bootstrap.c"
 $t=$10; //@line 7711 "tcc_bootstrap.c"
 _next(); //@line 7712 "tcc_bootstrap.c"
 _expr_cmp(); //@line 7713 "tcc_bootstrap.c"
 var $11=$t; //@line 7714 "tcc_bootstrap.c"
 _gen_op($11); //@line 7714 "tcc_bootstrap.c"
 label=2;break; //@line 7715 "tcc_bootstrap.c"
 case 6: 
 STACKTOP=sp;return; //@line 7716 "tcc_bootstrap.c"
  default: assert(0, "bad label: " + label);
 }

}


function _expr_cmp(){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $t;
 _expr_shift(); //@line 7697 "tcc_bootstrap.c"
 label=2;break; //@line 7698 "tcc_bootstrap.c"
 case 2: 
 var $2=HEAP32[((10472)>>2)]; //@line 7698 "tcc_bootstrap.c"
 var $3=($2|0)>=150; //@line 7698 "tcc_bootstrap.c"
 if($3){label=3;break;}else{label=4;break;} //@line 7698 "tcc_bootstrap.c"
 case 3: 
 var $5=HEAP32[((10472)>>2)]; //@line 7698 "tcc_bootstrap.c"
 var $6=($5|0)<=159; //@line 7698 "tcc_bootstrap.c"
 if($6){var $14=1;label=6;break;}else{label=4;break;} //@line 7698 "tcc_bootstrap.c"
 case 4: 
 var $8=HEAP32[((10472)>>2)]; //@line 7698 "tcc_bootstrap.c"
 var $9=($8|0)==146; //@line 7698 "tcc_bootstrap.c"
 if($9){var $14=1;label=6;break;}else{label=5;break;} //@line 7698 "tcc_bootstrap.c"
 case 5: 
 var $11=HEAP32[((10472)>>2)]; //@line 7698 "tcc_bootstrap.c"
 var $12=($11|0)==147; //@line 7698 "tcc_bootstrap.c"
 var $14=$12;label=6;break; //@line 7698 "tcc_bootstrap.c"
 case 6: 
 var $14;
 if($14){label=7;break;}else{label=8;break;} //@line 7698 "tcc_bootstrap.c"
 case 7: 
 var $16=HEAP32[((10472)>>2)]; //@line 7700 "tcc_bootstrap.c"
 $t=$16; //@line 7700 "tcc_bootstrap.c"
 _next(); //@line 7701 "tcc_bootstrap.c"
 _expr_shift(); //@line 7702 "tcc_bootstrap.c"
 var $17=$t; //@line 7703 "tcc_bootstrap.c"
 _gen_op($17); //@line 7703 "tcc_bootstrap.c"
 label=2;break; //@line 7704 "tcc_bootstrap.c"
 case 8: 
 STACKTOP=sp;return; //@line 7705 "tcc_bootstrap.c"
  default: assert(0, "bad label: " + label);
 }

}


function _expr_shift(){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $t;
 _expr_sum(); //@line 7686 "tcc_bootstrap.c"
 label=2;break; //@line 7687 "tcc_bootstrap.c"
 case 2: 
 var $2=HEAP32[((10472)>>2)]; //@line 7687 "tcc_bootstrap.c"
 var $3=($2|0)==1; //@line 7687 "tcc_bootstrap.c"
 if($3){var $8=1;label=4;break;}else{label=3;break;} //@line 7687 "tcc_bootstrap.c"
 case 3: 
 var $5=HEAP32[((10472)>>2)]; //@line 7687 "tcc_bootstrap.c"
 var $6=($5|0)==2; //@line 7687 "tcc_bootstrap.c"
 var $8=$6;label=4;break; //@line 7687 "tcc_bootstrap.c"
 case 4: 
 var $8;
 if($8){label=5;break;}else{label=6;break;} //@line 7687 "tcc_bootstrap.c"
 case 5: 
 var $10=HEAP32[((10472)>>2)]; //@line 7688 "tcc_bootstrap.c"
 $t=$10; //@line 7688 "tcc_bootstrap.c"
 _next(); //@line 7689 "tcc_bootstrap.c"
 _expr_sum(); //@line 7690 "tcc_bootstrap.c"
 var $11=$t; //@line 7691 "tcc_bootstrap.c"
 _gen_op($11); //@line 7691 "tcc_bootstrap.c"
 label=2;break; //@line 7692 "tcc_bootstrap.c"
 case 6: 
 STACKTOP=sp;return; //@line 7693 "tcc_bootstrap.c"
  default: assert(0, "bad label: " + label);
 }

}


function _expr_sum(){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $t;
 _expr_prod(); //@line 7675 "tcc_bootstrap.c"
 label=2;break; //@line 7676 "tcc_bootstrap.c"
 case 2: 
 var $2=HEAP32[((10472)>>2)]; //@line 7676 "tcc_bootstrap.c"
 var $3=($2|0)==43; //@line 7676 "tcc_bootstrap.c"
 if($3){var $8=1;label=4;break;}else{label=3;break;} //@line 7676 "tcc_bootstrap.c"
 case 3: 
 var $5=HEAP32[((10472)>>2)]; //@line 7676 "tcc_bootstrap.c"
 var $6=($5|0)==45; //@line 7676 "tcc_bootstrap.c"
 var $8=$6;label=4;break; //@line 7676 "tcc_bootstrap.c"
 case 4: 
 var $8;
 if($8){label=5;break;}else{label=6;break;} //@line 7676 "tcc_bootstrap.c"
 case 5: 
 var $10=HEAP32[((10472)>>2)]; //@line 7677 "tcc_bootstrap.c"
 $t=$10; //@line 7677 "tcc_bootstrap.c"
 _next(); //@line 7678 "tcc_bootstrap.c"
 _expr_prod(); //@line 7679 "tcc_bootstrap.c"
 var $11=$t; //@line 7680 "tcc_bootstrap.c"
 _gen_op($11); //@line 7680 "tcc_bootstrap.c"
 label=2;break; //@line 7681 "tcc_bootstrap.c"
 case 6: 
 STACKTOP=sp;return; //@line 7682 "tcc_bootstrap.c"
  default: assert(0, "bad label: " + label);
 }

}


function _expr_prod(){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $t;
 _unary(); //@line 7664 "tcc_bootstrap.c"
 label=2;break; //@line 7665 "tcc_bootstrap.c"
 case 2: 
 var $2=HEAP32[((10472)>>2)]; //@line 7665 "tcc_bootstrap.c"
 var $3=($2|0)==42; //@line 7665 "tcc_bootstrap.c"
 if($3){var $11=1;label=5;break;}else{label=3;break;} //@line 7665 "tcc_bootstrap.c"
 case 3: 
 var $5=HEAP32[((10472)>>2)]; //@line 7665 "tcc_bootstrap.c"
 var $6=($5|0)==47; //@line 7665 "tcc_bootstrap.c"
 if($6){var $11=1;label=5;break;}else{label=4;break;} //@line 7665 "tcc_bootstrap.c"
 case 4: 
 var $8=HEAP32[((10472)>>2)]; //@line 7665 "tcc_bootstrap.c"
 var $9=($8|0)==37; //@line 7665 "tcc_bootstrap.c"
 var $11=$9;label=5;break; //@line 7665 "tcc_bootstrap.c"
 case 5: 
 var $11;
 if($11){label=6;break;}else{label=7;break;} //@line 7665 "tcc_bootstrap.c"
 case 6: 
 var $13=HEAP32[((10472)>>2)]; //@line 7666 "tcc_bootstrap.c"
 $t=$13; //@line 7666 "tcc_bootstrap.c"
 _next(); //@line 7667 "tcc_bootstrap.c"
 _unary(); //@line 7668 "tcc_bootstrap.c"
 var $14=$t; //@line 7669 "tcc_bootstrap.c"
 _gen_op($14); //@line 7669 "tcc_bootstrap.c"
 label=2;break; //@line 7670 "tcc_bootstrap.c"
 case 7: 
 STACKTOP=sp;return; //@line 7671 "tcc_bootstrap.c"
  default: assert(0, "bad label: " + label);
 }

}


function _unary(){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+232)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $n=sp;
 var $t;
 var $align=(sp)+(8);
 var $size;
 var $r;
 var $sizeof_caller;
 var $type=(sp)+(16);
 var $s;
 var $ad=(sp)+(24);
 var $ptr;
 var $len;
 var $saved_nocode_wanted;
 var $c=(sp)+(48);
 var $tok1;
 var $level;
 var $controlling_type=(sp)+(56);
 var $has_default;
 var $has_match;
 var $learn;
 var $str=(sp)+(64);
 var $ad_tmp=(sp)+(72);
 var $itmp=(sp)+(96);
 var $cur_type=(sp)+(104);
 var $buf=(sp)+(112);
 var $name;
 var $qualifiers;
 var $ret=(sp)+(176);
 var $sa;
 var $nb_args;
 var $ret_nregs;
 var $ret_align=(sp)+(216);
 var $regsize=(sp)+(224);
 var $variadic;
 var $addr;
 var $offset;
 var $1=HEAP32[((11016)>>2)]; //@line 7127 "tcc_bootstrap.c"
 $sizeof_caller=$1; //@line 7127 "tcc_bootstrap.c"
 HEAP32[((11016)>>2)]=0; //@line 7128 "tcc_bootstrap.c"
 var $2=(($type+4)|0); //@line 7129 "tcc_bootstrap.c"
 HEAP32[(($2)>>2)]=0; //@line 7129 "tcc_bootstrap.c"
 label=2;break; //@line 7129 "tcc_bootstrap.c"
 case 2: 
 var $4=HEAP32[((10472)>>2)]; //@line 7131 "tcc_bootstrap.c"
 switch(($4|0)){case 188:{ label=10;break;}case 160:{ label=105;break;}case 189:{ label=11;break;}case 292:{ label=117;break;}case 206:{ label=12;break;}case 207:{ label=13;break;}case 331:{ label=14;break;}case 335:{ label=142;break;}case 336:{ label=143;break;}case 337:{ label=144;break;}case 334:{ label=17;break;}case 186:{ label=20;break;}case 185:{ label=21;break;}case 40:{ label=25;break;}case 291:{ label=3;break;}case 180:case 181:case 179:{ label=4;break;}case 42:{ label=44;break;}case 38:{ label=45;break;}case 33:{ label=49;break;}case 126:{ label=56;break;}case 43:{ label=57;break;}case 182:{ label=6;break;}case 302:case 305:case 306:{ label=62;break;}case 183:{ label=7;break;}case 378:{ label=74;break;}case 373:{ label=75;break;}case 374:{ label=76;break;}case 184:{ label=8;break;}case 375:{ label=85;break;}case 376:case 377:{ label=86;break;}case 187:{ label=9;break;}case 164:case 162:{ label=94;break;}case 45:{ label=95;break;}default:{label=145;break;}}break;
 case 3: 
 _next(); //@line 7133 "tcc_bootstrap.c"
 label=2;break; //@line 7134 "tcc_bootstrap.c"
 case 4: 
 $t=3; //@line 7138 "tcc_bootstrap.c"
 label=5;break; //@line 7138 "tcc_bootstrap.c"
 case 5: 
 var $8=$t; //@line 7140 "tcc_bootstrap.c"
 var $9=(($type)|0); //@line 7140 "tcc_bootstrap.c"
 HEAP32[(($9)>>2)]=$8; //@line 7140 "tcc_bootstrap.c"
 _vsetc($type,48,10440); //@line 7141 "tcc_bootstrap.c"
 _next(); //@line 7142 "tcc_bootstrap.c"
 label=163;break; //@line 7143 "tcc_bootstrap.c"
 case 6: 
 $t=19; //@line 7145 "tcc_bootstrap.c"
 label=5;break; //@line 7146 "tcc_bootstrap.c"
 case 7: 
 $t=4; //@line 7148 "tcc_bootstrap.c"
 label=5;break; //@line 7149 "tcc_bootstrap.c"
 case 8: 
 $t=20; //@line 7151 "tcc_bootstrap.c"
 label=5;break; //@line 7152 "tcc_bootstrap.c"
 case 9: 
 $t=8; //@line 7154 "tcc_bootstrap.c"
 label=5;break; //@line 7155 "tcc_bootstrap.c"
 case 10: 
 $t=9; //@line 7157 "tcc_bootstrap.c"
 label=5;break; //@line 7158 "tcc_bootstrap.c"
 case 11: 
 $t=10; //@line 7160 "tcc_bootstrap.c"
 label=5;break; //@line 7161 "tcc_bootstrap.c"
 case 12: 
 $t=2051; //@line 7163 "tcc_bootstrap.c"
 label=5;break; //@line 7164 "tcc_bootstrap.c"
 case 13: 
 $t=2067; //@line 7166 "tcc_bootstrap.c"
 label=5;break; //@line 7167 "tcc_bootstrap.c"
 case 14: 
 var $19=HEAP32[((2848)>>2)]; //@line 7169 "tcc_bootstrap.c"
 var $20=($19|0)!=0; //@line 7169 "tcc_bootstrap.c"
 if($20){label=16;break;}else{label=15;break;} //@line 7169 "tcc_bootstrap.c"
 case 15: 
 label=146;break; //@line 7170 "tcc_bootstrap.c"
 case 16: 
 label=17;break; //@line 7170 "tcc_bootstrap.c"
 case 17: 
 var $24=HEAP32[((76584)>>2)]; //@line 7175 "tcc_bootstrap.c"
 var $25=_strlen($24); //@line 7175 "tcc_bootstrap.c"
 var $26=((($25)+(1))|0); //@line 7175 "tcc_bootstrap.c"
 $len=$26; //@line 7175 "tcc_bootstrap.c"
 var $27=(($type)|0); //@line 7176 "tcc_bootstrap.c"
 HEAP32[(($27)>>2)]=1; //@line 7176 "tcc_bootstrap.c"
 _mk_pointer($type); //@line 7177 "tcc_bootstrap.c"
 var $28=(($type)|0); //@line 7178 "tcc_bootstrap.c"
 var $29=HEAP32[(($28)>>2)]; //@line 7178 "tcc_bootstrap.c"
 var $30=$29|64; //@line 7178 "tcc_bootstrap.c"
 HEAP32[(($28)>>2)]=$30; //@line 7178 "tcc_bootstrap.c"
 var $31=$len; //@line 7179 "tcc_bootstrap.c"
 var $32=(($type+4)|0); //@line 7179 "tcc_bootstrap.c"
 var $33=HEAP32[(($32)>>2)]; //@line 7179 "tcc_bootstrap.c"
 var $34=(($33+8)|0); //@line 7179 "tcc_bootstrap.c"
 var $35=$34; //@line 7179 "tcc_bootstrap.c"
 var $36=(($35)|0); //@line 7179 "tcc_bootstrap.c"
 HEAP32[(($36)>>2)]=$31; //@line 7179 "tcc_bootstrap.c"
 var $37=HEAP32[((76664)>>2)]; //@line 7180 "tcc_bootstrap.c"
 var $38=HEAP32[((76664)>>2)]; //@line 7180 "tcc_bootstrap.c"
 var $39=(($38)|0); //@line 7180 "tcc_bootstrap.c"
 var $40=HEAP32[(($39)>>2)]; //@line 7180 "tcc_bootstrap.c"
 var $41=$len; //@line 7180 "tcc_bootstrap.c"
 _vpush_ref($type,$37,$40,$41); //@line 7180 "tcc_bootstrap.c"
 var $42=HEAP32[((10616)>>2)]; //@line 7181 "tcc_bootstrap.c"
 var $43=($42|0)>0; //@line 7181 "tcc_bootstrap.c"
 if($43){label=19;break;}else{label=18;break;} //@line 7181 "tcc_bootstrap.c"
 case 18: 
 var $45=HEAP32[((76664)>>2)]; //@line 7182 "tcc_bootstrap.c"
 var $46=$len; //@line 7182 "tcc_bootstrap.c"
 var $47=_section_ptr_add($45,$46); //@line 7182 "tcc_bootstrap.c"
 $ptr=$47; //@line 7182 "tcc_bootstrap.c"
 var $48=$ptr; //@line 7183 "tcc_bootstrap.c"
 var $49=HEAP32[((76584)>>2)]; //@line 7183 "tcc_bootstrap.c"
 var $50=$len; //@line 7183 "tcc_bootstrap.c"
 assert($50 % 1 === 0);(_memcpy($48, $49, $50)|0); //@line 7183 "tcc_bootstrap.c"
 label=19;break; //@line 7184 "tcc_bootstrap.c"
 case 19: 
 _next(); //@line 7185 "tcc_bootstrap.c"
 label=163;break; //@line 7187 "tcc_bootstrap.c"
 case 20: 
 $t=3; //@line 7189 "tcc_bootstrap.c"
 label=22;break; //@line 7190 "tcc_bootstrap.c"
 case 21: 
 $t=1; //@line 7192 "tcc_bootstrap.c"
 label=22;break; //@line 7192 "tcc_bootstrap.c"
 case 22: 
 var $55=HEAP32[((10488)>>2)]; //@line 7194 "tcc_bootstrap.c"
 var $56=(($55+20)|0); //@line 7194 "tcc_bootstrap.c"
 var $57=HEAP32[(($56)>>2)]; //@line 7194 "tcc_bootstrap.c"
 var $58=($57|0)!=0; //@line 7194 "tcc_bootstrap.c"
 if($58){label=23;break;}else{label=24;break;} //@line 7194 "tcc_bootstrap.c"
 case 23: 
 var $60=$t; //@line 7195 "tcc_bootstrap.c"
 var $61=$60|256; //@line 7195 "tcc_bootstrap.c"
 $t=$61; //@line 7195 "tcc_bootstrap.c"
 label=24;break; //@line 7195 "tcc_bootstrap.c"
 case 24: 
 var $63=$t; //@line 7196 "tcc_bootstrap.c"
 var $64=(($type)|0); //@line 7196 "tcc_bootstrap.c"
 HEAP32[(($64)>>2)]=$63; //@line 7196 "tcc_bootstrap.c"
 _mk_pointer($type); //@line 7197 "tcc_bootstrap.c"
 var $65=(($type)|0); //@line 7198 "tcc_bootstrap.c"
 var $66=HEAP32[(($65)>>2)]; //@line 7198 "tcc_bootstrap.c"
 var $67=$66|64; //@line 7198 "tcc_bootstrap.c"
 HEAP32[(($65)>>2)]=$67; //@line 7198 "tcc_bootstrap.c"
 var $68=$ad; //@line 7199 "tcc_bootstrap.c"
 HEAP32[(($68)>>2)]=0; HEAP32[((($68)+(4))>>2)]=0; HEAP32[((($68)+(8))>>2)]=0; HEAP32[((($68)+(12))>>2)]=0; HEAP32[((($68)+(16))>>2)]=0; HEAP32[((($68)+(20))>>2)]=0; //@line 7199 "tcc_bootstrap.c"
 _decl_initializer_alloc($type,$ad,48,2,0,0); //@line 7200 "tcc_bootstrap.c"
 label=163;break; //@line 7201 "tcc_bootstrap.c"
 case 25: 
 _next(); //@line 7203 "tcc_bootstrap.c"
 var $70=_parse_btype($type,$ad); //@line 7204 "tcc_bootstrap.c"
 var $71=($70|0)!=0; //@line 7204 "tcc_bootstrap.c"
 if($71){label=26;break;}else{label=37;break;} //@line 7204 "tcc_bootstrap.c"
 case 26: 
 var $73=_type_decl($type,$ad,$n,1); //@line 7205 "tcc_bootstrap.c"
 _skip(41); //@line 7206 "tcc_bootstrap.c"
 var $74=HEAP32[((10472)>>2)]; //@line 7207 "tcc_bootstrap.c"
 var $75=($74|0)==123; //@line 7207 "tcc_bootstrap.c"
 if($75){label=27;break;}else{label=33;break;} //@line 7207 "tcc_bootstrap.c"
 case 27: 
 var $77=HEAP32[((76576)>>2)]; //@line 7208 "tcc_bootstrap.c"
 var $78=($77|0)!=0; //@line 7208 "tcc_bootstrap.c"
 if($78){label=28;break;}else{label=29;break;} //@line 7208 "tcc_bootstrap.c"
 case 28: 
 $r=48; //@line 7209 "tcc_bootstrap.c"
 label=30;break; //@line 7209 "tcc_bootstrap.c"
 case 29: 
 $r=50; //@line 7211 "tcc_bootstrap.c"
 label=30;break;
 case 30: 
 var $82=(($type)|0); //@line 7212 "tcc_bootstrap.c"
 var $83=HEAP32[(($82)>>2)]; //@line 7212 "tcc_bootstrap.c"
 var $84=$83&64; //@line 7212 "tcc_bootstrap.c"
 var $85=($84|0)!=0; //@line 7212 "tcc_bootstrap.c"
 if($85){label=32;break;}else{label=31;break;} //@line 7212 "tcc_bootstrap.c"
 case 31: 
 var $87=(($type)|0); //@line 7213 "tcc_bootstrap.c"
 var $88=HEAP32[(($87)>>2)]; //@line 7213 "tcc_bootstrap.c"
 var $89=_lvalue_type($88); //@line 7213 "tcc_bootstrap.c"
 var $90=$r; //@line 7213 "tcc_bootstrap.c"
 var $91=$90|$89; //@line 7213 "tcc_bootstrap.c"
 $r=$91; //@line 7213 "tcc_bootstrap.c"
 label=32;break; //@line 7213 "tcc_bootstrap.c"
 case 32: 
 var $93=$ad; //@line 7214 "tcc_bootstrap.c"
 HEAP32[(($93)>>2)]=0; HEAP32[((($93)+(4))>>2)]=0; HEAP32[((($93)+(8))>>2)]=0; HEAP32[((($93)+(12))>>2)]=0; HEAP32[((($93)+(16))>>2)]=0; HEAP32[((($93)+(20))>>2)]=0; //@line 7214 "tcc_bootstrap.c"
 var $94=$r; //@line 7215 "tcc_bootstrap.c"
 _decl_initializer_alloc($type,$ad,$94,1,0,0); //@line 7215 "tcc_bootstrap.c"
 label=36;break; //@line 7216 "tcc_bootstrap.c"
 case 33: 
 var $96=$sizeof_caller; //@line 7217 "tcc_bootstrap.c"
 var $97=($96|0)!=0; //@line 7217 "tcc_bootstrap.c"
 if($97){label=34;break;}else{label=35;break;} //@line 7217 "tcc_bootstrap.c"
 case 34: 
 _vpush($type); //@line 7218 "tcc_bootstrap.c"
 label=239;break; //@line 7219 "tcc_bootstrap.c"
 case 35: 
 _unary(); //@line 7221 "tcc_bootstrap.c"
 _gen_cast($type); //@line 7222 "tcc_bootstrap.c"
 label=36;break;
 case 36: 
 label=43;break; //@line 7224 "tcc_bootstrap.c"
 case 37: 
 var $102=HEAP32[((10472)>>2)]; //@line 7224 "tcc_bootstrap.c"
 var $103=($102|0)==123; //@line 7224 "tcc_bootstrap.c"
 if($103){label=38;break;}else{label=41;break;} //@line 7224 "tcc_bootstrap.c"
 case 38: 
 var $105=HEAP32[((10616)>>2)]; //@line 7225 "tcc_bootstrap.c"
 $saved_nocode_wanted=$105; //@line 7225 "tcc_bootstrap.c"
 var $106=HEAP32[((76712)>>2)]; //@line 7226 "tcc_bootstrap.c"
 var $107=($106|0)!=0; //@line 7226 "tcc_bootstrap.c"
 if($107){label=39;break;}else{label=40;break;} //@line 7226 "tcc_bootstrap.c"
 case 39: 
 _tcc_error(8024,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs; //@line 7227 "tcc_bootstrap.c"
 label=40;break; //@line 7227 "tcc_bootstrap.c"
 case 40: 
 _save_regs(0); //@line 7228 "tcc_bootstrap.c"
 _block(0,0,1); //@line 7229 "tcc_bootstrap.c"
 var $110=$saved_nocode_wanted; //@line 7230 "tcc_bootstrap.c"
 HEAP32[((10616)>>2)]=$110; //@line 7230 "tcc_bootstrap.c"
 _skip(41); //@line 7231 "tcc_bootstrap.c"
 label=42;break; //@line 7232 "tcc_bootstrap.c"
 case 41: 
 _gexpr(); //@line 7233 "tcc_bootstrap.c"
 _skip(41); //@line 7234 "tcc_bootstrap.c"
 label=42;break;
 case 42: 
 label=43;break;
 case 43: 
 label=163;break; //@line 7236 "tcc_bootstrap.c"
 case 44: 
 _next(); //@line 7238 "tcc_bootstrap.c"
 _unary(); //@line 7239 "tcc_bootstrap.c"
 _indir(); //@line 7240 "tcc_bootstrap.c"
 label=163;break; //@line 7241 "tcc_bootstrap.c"
 case 45: 
 _next(); //@line 7243 "tcc_bootstrap.c"
 _unary(); //@line 7244 "tcc_bootstrap.c"
 var $116=HEAP32[((9288)>>2)]; //@line 7245 "tcc_bootstrap.c"
 var $117=(($116)|0); //@line 7245 "tcc_bootstrap.c"
 var $118=(($117)|0); //@line 7245 "tcc_bootstrap.c"
 var $119=HEAP32[(($118)>>2)]; //@line 7245 "tcc_bootstrap.c"
 var $120=$119&15; //@line 7245 "tcc_bootstrap.c"
 var $121=($120|0)!=6; //@line 7245 "tcc_bootstrap.c"
 if($121){label=46;break;}else{label=48;break;} //@line 7245 "tcc_bootstrap.c"
 case 46: 
 var $123=HEAP32[((9288)>>2)]; //@line 7245 "tcc_bootstrap.c"
 var $124=(($123)|0); //@line 7245 "tcc_bootstrap.c"
 var $125=(($124)|0); //@line 7245 "tcc_bootstrap.c"
 var $126=HEAP32[(($125)>>2)]; //@line 7245 "tcc_bootstrap.c"
 var $127=$126&64; //@line 7245 "tcc_bootstrap.c"
 var $128=($127|0)!=0; //@line 7245 "tcc_bootstrap.c"
 if($128){label=48;break;}else{label=47;break;} //@line 7245 "tcc_bootstrap.c"
 case 47: 
 _test_lvalue(); //@line 7247 "tcc_bootstrap.c"
 label=48;break; //@line 7247 "tcc_bootstrap.c"
 case 48: 
 var $131=HEAP32[((9288)>>2)]; //@line 7248 "tcc_bootstrap.c"
 var $132=(($131)|0); //@line 7248 "tcc_bootstrap.c"
 _mk_pointer($132); //@line 7248 "tcc_bootstrap.c"
 _gaddrof(); //@line 7249 "tcc_bootstrap.c"
 label=163;break; //@line 7250 "tcc_bootstrap.c"
 case 49: 
 _next(); //@line 7252 "tcc_bootstrap.c"
 _unary(); //@line 7253 "tcc_bootstrap.c"
 var $134=HEAP32[((9288)>>2)]; //@line 7254 "tcc_bootstrap.c"
 var $135=(($134+8)|0); //@line 7254 "tcc_bootstrap.c"
 var $136=HEAP16[(($135)>>1)]; //@line 7254 "tcc_bootstrap.c"
 var $137=($136&65535); //@line 7254 "tcc_bootstrap.c"
 var $138=$137&831; //@line 7254 "tcc_bootstrap.c"
 var $139=($138|0)==48; //@line 7254 "tcc_bootstrap.c"
 if($139){label=50;break;}else{label=51;break;} //@line 7254 "tcc_bootstrap.c"
 case 50: 
 _gen_cast_s(11); //@line 7255 "tcc_bootstrap.c"
 var $141=HEAP32[((9288)>>2)]; //@line 7256 "tcc_bootstrap.c"
 var $142=(($141+16)|0); //@line 7256 "tcc_bootstrap.c"
 var $143=$142; //@line 7256 "tcc_bootstrap.c"
 var $ld$0$0=(($143)|0);
 var $144$0=HEAP32[(($ld$0$0)>>2)];
 var $ld$1$1=(($143+4)|0);
 var $144$1=HEAP32[(($ld$1$1)>>2)];
 var $$etemp$2$0=0;
 var $$etemp$2$1=0;
 var $145=(($144$0|0) != ($$etemp$2$0|0)) | (($144$1|0) != ($$etemp$2$1|0)); //@line 7256 "tcc_bootstrap.c"
 var $146=$145^1; //@line 7256 "tcc_bootstrap.c"
 var $147=($146&1); //@line 7256 "tcc_bootstrap.c"
 var $148$0=$147;
 var $148$1=((((($147|0)<0))|0)?-1:0);
 var $149=HEAP32[((9288)>>2)]; //@line 7256 "tcc_bootstrap.c"
 var $150=(($149+16)|0); //@line 7256 "tcc_bootstrap.c"
 var $151=$150; //@line 7256 "tcc_bootstrap.c"
 var $st$3$0=(($151)|0);
 HEAP32[(($st$3$0)>>2)]=$148$0;
 var $st$4$1=(($151+4)|0);
 HEAP32[(($st$4$1)>>2)]=$148$1;
 label=55;break; //@line 7257 "tcc_bootstrap.c"
 case 51: 
 var $153=HEAP32[((9288)>>2)]; //@line 7257 "tcc_bootstrap.c"
 var $154=(($153+8)|0); //@line 7257 "tcc_bootstrap.c"
 var $155=HEAP16[(($154)>>1)]; //@line 7257 "tcc_bootstrap.c"
 var $156=($155&65535); //@line 7257 "tcc_bootstrap.c"
 var $157=$156&63; //@line 7257 "tcc_bootstrap.c"
 var $158=($157|0)==51; //@line 7257 "tcc_bootstrap.c"
 if($158){label=52;break;}else{label=53;break;} //@line 7257 "tcc_bootstrap.c"
 case 52: 
 var $160=HEAP32[((9288)>>2)]; //@line 7258 "tcc_bootstrap.c"
 var $161=(($160+16)|0); //@line 7258 "tcc_bootstrap.c"
 var $162=$161; //@line 7258 "tcc_bootstrap.c"
 var $ld$5$0=(($162)|0);
 var $163$0=HEAP32[(($ld$5$0)>>2)];
 var $ld$6$1=(($162+4)|0);
 var $163$1=HEAP32[(($ld$6$1)>>2)];
 var $$etemp$7$0=1;
 var $$etemp$7$1=0;
 var $164$0=$163$0^$$etemp$7$0;
 var $164$1=$163$1^$$etemp$7$1;
 var $st$8$0=(($162)|0);
 HEAP32[(($st$8$0)>>2)]=$164$0;
 var $st$9$1=(($162+4)|0);
 HEAP32[(($st$9$1)>>2)]=$164$1;
 label=54;break; //@line 7258 "tcc_bootstrap.c"
 case 53: 
 _save_regs(1); //@line 7260 "tcc_bootstrap.c"
 var $166=_gvtst(1,0); //@line 7261 "tcc_bootstrap.c"
 _vseti(52,$166); //@line 7261 "tcc_bootstrap.c"
 label=54;break;
 case 54: 
 label=55;break;
 case 55: 
 label=163;break; //@line 7263 "tcc_bootstrap.c"
 case 56: 
 _next(); //@line 7265 "tcc_bootstrap.c"
 _unary(); //@line 7266 "tcc_bootstrap.c"
 _vpushi(-1); //@line 7267 "tcc_bootstrap.c"
 _gen_op(94); //@line 7268 "tcc_bootstrap.c"
 label=163;break; //@line 7269 "tcc_bootstrap.c"
 case 57: 
 _next(); //@line 7271 "tcc_bootstrap.c"
 _unary(); //@line 7272 "tcc_bootstrap.c"
 var $171=HEAP32[((9288)>>2)]; //@line 7273 "tcc_bootstrap.c"
 var $172=(($171)|0); //@line 7273 "tcc_bootstrap.c"
 var $173=(($172)|0); //@line 7273 "tcc_bootstrap.c"
 var $174=HEAP32[(($173)>>2)]; //@line 7273 "tcc_bootstrap.c"
 var $175=$174&15; //@line 7273 "tcc_bootstrap.c"
 var $176=($175|0)==5; //@line 7273 "tcc_bootstrap.c"
 if($176){label=58;break;}else{label=59;break;} //@line 7273 "tcc_bootstrap.c"
 case 58: 
 _tcc_error(7976,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs; //@line 7274 "tcc_bootstrap.c"
 label=59;break; //@line 7274 "tcc_bootstrap.c"
 case 59: 
 var $179=HEAP32[((9288)>>2)]; //@line 7275 "tcc_bootstrap.c"
 var $180=(($179)|0); //@line 7275 "tcc_bootstrap.c"
 var $181=(($180)|0); //@line 7275 "tcc_bootstrap.c"
 var $182=HEAP32[(($181)>>2)]; //@line 7275 "tcc_bootstrap.c"
 var $183=_is_float($182); //@line 7275 "tcc_bootstrap.c"
 var $184=($183|0)!=0; //@line 7275 "tcc_bootstrap.c"
 if($184){label=61;break;}else{label=60;break;} //@line 7275 "tcc_bootstrap.c"
 case 60: 
 _vpushi(0); //@line 7276 "tcc_bootstrap.c"
 _gen_op(43); //@line 7277 "tcc_bootstrap.c"
 label=61;break; //@line 7278 "tcc_bootstrap.c"
 case 61: 
 label=163;break; //@line 7279 "tcc_bootstrap.c"
 case 62: 
 var $188=HEAP32[((10472)>>2)]; //@line 7283 "tcc_bootstrap.c"
 $t=$188; //@line 7283 "tcc_bootstrap.c"
 _next(); //@line 7284 "tcc_bootstrap.c"
 var $189=HEAP32[((11016)>>2)]; //@line 7285 "tcc_bootstrap.c"
 var $190=((($189)+(1))|0); //@line 7285 "tcc_bootstrap.c"
 HEAP32[((11016)>>2)]=$190; //@line 7285 "tcc_bootstrap.c"
 _expr_type($type,10); //@line 7286 "tcc_bootstrap.c"
 var $191=HEAP32[((9288)>>2)]; //@line 7287 "tcc_bootstrap.c"
 var $192=(($191+40)|0); //@line 7287 "tcc_bootstrap.c"
 var $193=(($192+32)|0); //@line 7287 "tcc_bootstrap.c"
 var $194=HEAP32[(($193)>>2)]; //@line 7287 "tcc_bootstrap.c"
 $s=$194; //@line 7287 "tcc_bootstrap.c"
 var $195=_type_size($type,$align); //@line 7288 "tcc_bootstrap.c"
 $size=$195; //@line 7288 "tcc_bootstrap.c"
 var $196=$s; //@line 7289 "tcc_bootstrap.c"
 var $197=($196|0)!=0; //@line 7289 "tcc_bootstrap.c"
 if($197){label=63;break;}else{label=65;break;} //@line 7289 "tcc_bootstrap.c"
 case 63: 
 var $199=$s; //@line 7289 "tcc_bootstrap.c"
 var $200=(($199+6)|0); //@line 7289 "tcc_bootstrap.c"
 var $201=$200; //@line 7289 "tcc_bootstrap.c"
 var $202=HEAP16[(($201)>>1)]; //@line 7289 "tcc_bootstrap.c"
 var $203=$202&31; //@line 7289 "tcc_bootstrap.c"
 var $204=($203&65535); //@line 7289 "tcc_bootstrap.c"
 var $205=($204|0)!=0; //@line 7289 "tcc_bootstrap.c"
 if($205){label=64;break;}else{label=65;break;} //@line 7289 "tcc_bootstrap.c"
 case 64: 
 var $207=$s; //@line 7290 "tcc_bootstrap.c"
 var $208=(($207+6)|0); //@line 7290 "tcc_bootstrap.c"
 var $209=$208; //@line 7290 "tcc_bootstrap.c"
 var $210=HEAP16[(($209)>>1)]; //@line 7290 "tcc_bootstrap.c"
 var $211=$210&31; //@line 7290 "tcc_bootstrap.c"
 var $212=($211&65535); //@line 7290 "tcc_bootstrap.c"
 var $213=((($212)-(1))|0); //@line 7290 "tcc_bootstrap.c"
 var $214=1<<$213; //@line 7290 "tcc_bootstrap.c"
 HEAP32[(($align)>>2)]=$214; //@line 7290 "tcc_bootstrap.c"
 label=65;break; //@line 7290 "tcc_bootstrap.c"
 case 65: 
 var $216=$t; //@line 7291 "tcc_bootstrap.c"
 var $217=($216|0)==302; //@line 7291 "tcc_bootstrap.c"
 if($217){label=66;break;}else{label=72;break;} //@line 7291 "tcc_bootstrap.c"
 case 66: 
 var $219=(($type)|0); //@line 7292 "tcc_bootstrap.c"
 var $220=HEAP32[(($219)>>2)]; //@line 7292 "tcc_bootstrap.c"
 var $221=$220&1024; //@line 7292 "tcc_bootstrap.c"
 var $222=($221|0)!=0; //@line 7292 "tcc_bootstrap.c"
 if($222){label=70;break;}else{label=67;break;} //@line 7292 "tcc_bootstrap.c"
 case 67: 
 var $224=$size; //@line 7293 "tcc_bootstrap.c"
 var $225=($224|0)<0; //@line 7293 "tcc_bootstrap.c"
 if($225){label=68;break;}else{label=69;break;} //@line 7293 "tcc_bootstrap.c"
 case 68: 
 _tcc_error(7936,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs; //@line 7294 "tcc_bootstrap.c"
 label=69;break; //@line 7294 "tcc_bootstrap.c"
 case 69: 
 var $228=$size; //@line 7295 "tcc_bootstrap.c"
 _vpushs($228); //@line 7295 "tcc_bootstrap.c"
 label=71;break; //@line 7296 "tcc_bootstrap.c"
 case 70: 
 label=71;break;
 case 71: 
 label=73;break; //@line 7298 "tcc_bootstrap.c"
 case 72: 
 var $232=HEAP32[(($align)>>2)]; //@line 7299 "tcc_bootstrap.c"
 _vpushs($232); //@line 7299 "tcc_bootstrap.c"
 label=73;break;
 case 73: 
 var $234=HEAP32[((9288)>>2)]; //@line 7301 "tcc_bootstrap.c"
 var $235=(($234)|0); //@line 7301 "tcc_bootstrap.c"
 var $236=(($235)|0); //@line 7301 "tcc_bootstrap.c"
 var $237=HEAP32[(($236)>>2)]; //@line 7301 "tcc_bootstrap.c"
 var $238=$237|16; //@line 7301 "tcc_bootstrap.c"
 HEAP32[(($236)>>2)]=$238; //@line 7301 "tcc_bootstrap.c"
 label=163;break; //@line 7302 "tcc_bootstrap.c"
 case 74: 
 _parse_builtin_params(0,7928); //@line 7304 "tcc_bootstrap.c"
 _vpop(); //@line 7305 "tcc_bootstrap.c"
 label=163;break; //@line 7306 "tcc_bootstrap.c"
 case 75: 
 _parse_builtin_params(0,7920); //@line 7308 "tcc_bootstrap.c"
 var $241=HEAP32[((9288)>>2)]; //@line 7309 "tcc_bootstrap.c"
 var $242=((($241)-(40))|0); //@line 7309 "tcc_bootstrap.c"
 var $243=(($242)|0); //@line 7309 "tcc_bootstrap.c"
 var $244=(($243)|0); //@line 7309 "tcc_bootstrap.c"
 var $245=HEAP32[(($244)>>2)]; //@line 7309 "tcc_bootstrap.c"
 var $246=$245&-769; //@line 7309 "tcc_bootstrap.c"
 HEAP32[(($244)>>2)]=$246; //@line 7309 "tcc_bootstrap.c"
 var $247=HEAP32[((9288)>>2)]; //@line 7310 "tcc_bootstrap.c"
 var $248=(($247)|0); //@line 7310 "tcc_bootstrap.c"
 var $249=(($248)|0); //@line 7310 "tcc_bootstrap.c"
 var $250=(($249)|0); //@line 7310 "tcc_bootstrap.c"
 var $251=HEAP32[(($250)>>2)]; //@line 7310 "tcc_bootstrap.c"
 var $252=$251&-769; //@line 7310 "tcc_bootstrap.c"
 HEAP32[(($250)>>2)]=$252; //@line 7310 "tcc_bootstrap.c"
 var $253=HEAP32[((9288)>>2)]; //@line 7311 "tcc_bootstrap.c"
 var $254=((($253)-(40))|0); //@line 7311 "tcc_bootstrap.c"
 var $255=(($254)|0); //@line 7311 "tcc_bootstrap.c"
 var $256=HEAP32[((9288)>>2)]; //@line 7311 "tcc_bootstrap.c"
 var $257=(($256)|0); //@line 7311 "tcc_bootstrap.c"
 var $258=(($257)|0); //@line 7311 "tcc_bootstrap.c"
 var $259=_is_compatible_types($255,$258); //@line 7311 "tcc_bootstrap.c"
 HEAP32[(($n)>>2)]=$259; //@line 7311 "tcc_bootstrap.c"
 var $260=HEAP32[((9288)>>2)]; //@line 7312 "tcc_bootstrap.c"
 var $261=((($260)-(80))|0); //@line 7312 "tcc_bootstrap.c"
 HEAP32[((9288)>>2)]=$261; //@line 7312 "tcc_bootstrap.c"
 var $262=HEAP32[(($n)>>2)]; //@line 7313 "tcc_bootstrap.c"
 _vpushi($262); //@line 7313 "tcc_bootstrap.c"
 label=163;break; //@line 7314 "tcc_bootstrap.c"
 case 76: 
 _next(); //@line 7318 "tcc_bootstrap.c"
 _skip(40); //@line 7319 "tcc_bootstrap.c"
 var $264$0=_expr_const64();
 var $264$1=tempRet0;
 var $st$10$0=(($c)|0);
 HEAP32[(($st$10$0)>>2)]=$264$0;
 var $st$11$1=(($c+4)|0);
 HEAP32[(($st$11$1)>>2)]=$264$1;
 _skip(44); //@line 7321 "tcc_bootstrap.c"
 var $ld$12$0=(($c)|0);
 var $265$0=HEAP32[(($ld$12$0)>>2)];
 var $ld$13$1=(($c+4)|0);
 var $265$1=HEAP32[(($ld$13$1)>>2)];
 var $$etemp$14$0=0;
 var $$etemp$14$1=0;
 var $266=(($265$0|0) != ($$etemp$14$0|0)) | (($265$1|0) != ($$etemp$14$1|0)); //@line 7322 "tcc_bootstrap.c"
 if($266){label=78;break;}else{label=77;break;} //@line 7322 "tcc_bootstrap.c"
 case 77: 
 var $268=HEAP32[((10616)>>2)]; //@line 7323 "tcc_bootstrap.c"
 var $269=((($268)+(1))|0); //@line 7323 "tcc_bootstrap.c"
 HEAP32[((10616)>>2)]=$269; //@line 7323 "tcc_bootstrap.c"
 label=78;break; //@line 7324 "tcc_bootstrap.c"
 case 78: 
 _expr_eq(); //@line 7325 "tcc_bootstrap.c"
 var $ld$15$0=(($c)|0);
 var $271$0=HEAP32[(($ld$15$0)>>2)];
 var $ld$16$1=(($c+4)|0);
 var $271$1=HEAP32[(($ld$16$1)>>2)];
 var $$etemp$17$0=0;
 var $$etemp$17$1=0;
 var $272=(($271$0|0) != ($$etemp$17$0|0)) | (($271$1|0) != ($$etemp$17$1|0)); //@line 7326 "tcc_bootstrap.c"
 if($272){label=80;break;}else{label=79;break;} //@line 7326 "tcc_bootstrap.c"
 case 79: 
 _vpop(); //@line 7327 "tcc_bootstrap.c"
 var $274=HEAP32[((10616)>>2)]; //@line 7328 "tcc_bootstrap.c"
 var $275=((($274)-(1))|0); //@line 7328 "tcc_bootstrap.c"
 HEAP32[((10616)>>2)]=$275; //@line 7328 "tcc_bootstrap.c"
 label=80;break; //@line 7329 "tcc_bootstrap.c"
 case 80: 
 _skip(44); //@line 7330 "tcc_bootstrap.c"
 var $ld$18$0=(($c)|0);
 var $277$0=HEAP32[(($ld$18$0)>>2)];
 var $ld$19$1=(($c+4)|0);
 var $277$1=HEAP32[(($ld$19$1)>>2)];
 var $$etemp$20$0=0;
 var $$etemp$20$1=0;
 var $278=(($277$0|0) != ($$etemp$20$0|0)) | (($277$1|0) != ($$etemp$20$1|0)); //@line 7331 "tcc_bootstrap.c"
 if($278){label=81;break;}else{label=82;break;} //@line 7331 "tcc_bootstrap.c"
 case 81: 
 var $280=HEAP32[((10616)>>2)]; //@line 7332 "tcc_bootstrap.c"
 var $281=((($280)+(1))|0); //@line 7332 "tcc_bootstrap.c"
 HEAP32[((10616)>>2)]=$281; //@line 7332 "tcc_bootstrap.c"
 label=82;break; //@line 7333 "tcc_bootstrap.c"
 case 82: 
 _expr_eq(); //@line 7334 "tcc_bootstrap.c"
 var $ld$21$0=(($c)|0);
 var $283$0=HEAP32[(($ld$21$0)>>2)];
 var $ld$22$1=(($c+4)|0);
 var $283$1=HEAP32[(($ld$22$1)>>2)];
 var $$etemp$23$0=0;
 var $$etemp$23$1=0;
 var $284=(($283$0|0) != ($$etemp$23$0|0)) | (($283$1|0) != ($$etemp$23$1|0)); //@line 7335 "tcc_bootstrap.c"
 if($284){label=83;break;}else{label=84;break;} //@line 7335 "tcc_bootstrap.c"
 case 83: 
 _vpop(); //@line 7336 "tcc_bootstrap.c"
 var $286=HEAP32[((10616)>>2)]; //@line 7337 "tcc_bootstrap.c"
 var $287=((($286)-(1))|0); //@line 7337 "tcc_bootstrap.c"
 HEAP32[((10616)>>2)]=$287; //@line 7337 "tcc_bootstrap.c"
 label=84;break; //@line 7338 "tcc_bootstrap.c"
 case 84: 
 _skip(41); //@line 7339 "tcc_bootstrap.c"
 label=163;break; //@line 7341 "tcc_bootstrap.c"
 case 85: 
 _parse_builtin_params(1,7904); //@line 7343 "tcc_bootstrap.c"
 var $290=HEAP32[((9288)>>2)]; //@line 7344 "tcc_bootstrap.c"
 var $291=(($290+8)|0); //@line 7344 "tcc_bootstrap.c"
 var $292=HEAP16[(($291)>>1)]; //@line 7344 "tcc_bootstrap.c"
 var $293=($292&65535); //@line 7344 "tcc_bootstrap.c"
 var $294=$293&831; //@line 7344 "tcc_bootstrap.c"
 var $295=($294|0)==48; //@line 7344 "tcc_bootstrap.c"
 var $296=($295&1); //@line 7344 "tcc_bootstrap.c"
 HEAP32[(($n)>>2)]=$296; //@line 7344 "tcc_bootstrap.c"
 var $297=HEAP32[((9288)>>2)]; //@line 7345 "tcc_bootstrap.c"
 var $298=((($297)-(40))|0); //@line 7345 "tcc_bootstrap.c"
 HEAP32[((9288)>>2)]=$298; //@line 7345 "tcc_bootstrap.c"
 var $299=HEAP32[(($n)>>2)]; //@line 7346 "tcc_bootstrap.c"
 _vpushi($299); //@line 7346 "tcc_bootstrap.c"
 label=163;break; //@line 7347 "tcc_bootstrap.c"
 case 86: 
 var $301=HEAP32[((10472)>>2)]; //@line 7351 "tcc_bootstrap.c"
 $tok1=$301; //@line 7351 "tcc_bootstrap.c"
 _next(); //@line 7353 "tcc_bootstrap.c"
 _skip(40); //@line 7354 "tcc_bootstrap.c"
 var $302=HEAP32[((10472)>>2)]; //@line 7355 "tcc_bootstrap.c"
 var $303=($302|0)!=181; //@line 7355 "tcc_bootstrap.c"
 if($303){label=87;break;}else{label=88;break;} //@line 7355 "tcc_bootstrap.c"
 case 87: 
 var $305=$tok1; //@line 7356 "tcc_bootstrap.c"
 var $306=($305|0)==377; //@line 7356 "tcc_bootstrap.c"
 var $307=($306?7840:7816); //@line 7356 "tcc_bootstrap.c"
 _tcc_error(7872,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$307,tempVarArgs)); STACKTOP=tempVarArgs; //@line 7356 "tcc_bootstrap.c"
 label=88;break; //@line 7360 "tcc_bootstrap.c"
 case 88: 
 var $$etemp$24=10440;
 var $ld$25$0=(($$etemp$24)|0);
 var $309$0=HEAP32[(($ld$25$0)>>2)];
 var $ld$26$1=(($$etemp$24+4)|0);
 var $309$1=HEAP32[(($ld$26$1)>>2)];
 var $310$0=$309$0;
 var $310=$310$0;
 $level=$310; //@line 7361 "tcc_bootstrap.c"
 _next(); //@line 7362 "tcc_bootstrap.c"
 _skip(41); //@line 7363 "tcc_bootstrap.c"
 var $311=(($type)|0); //@line 7364 "tcc_bootstrap.c"
 HEAP32[(($311)>>2)]=0; //@line 7364 "tcc_bootstrap.c"
 _mk_pointer($type); //@line 7365 "tcc_bootstrap.c"
 _vset($type,50,0); //@line 7366 "tcc_bootstrap.c"
 label=89;break; //@line 7367 "tcc_bootstrap.c"
 case 89: 
 var $313=$level; //@line 7367 "tcc_bootstrap.c"
 var $314=((($313)-(1))|0); //@line 7367 "tcc_bootstrap.c"
 $level=$314; //@line 7367 "tcc_bootstrap.c"
 var $315=($313|0)!=0; //@line 7367 "tcc_bootstrap.c"
 if($315){label=90;break;}else{label=91;break;} //@line 7367 "tcc_bootstrap.c"
 case 90: 
 var $317=HEAP32[((9288)>>2)]; //@line 7368 "tcc_bootstrap.c"
 var $318=(($317)|0); //@line 7368 "tcc_bootstrap.c"
 _mk_pointer($318); //@line 7368 "tcc_bootstrap.c"
 _indir(); //@line 7369 "tcc_bootstrap.c"
 label=89;break; //@line 7370 "tcc_bootstrap.c"
 case 91: 
 var $320=$tok1; //@line 7371 "tcc_bootstrap.c"
 var $321=($320|0)==377; //@line 7371 "tcc_bootstrap.c"
 if($321){label=92;break;}else{label=93;break;} //@line 7371 "tcc_bootstrap.c"
 case 92: 
 _vpushi(4); //@line 7372 "tcc_bootstrap.c"
 _gen_op(43); //@line 7373 "tcc_bootstrap.c"
 var $323=HEAP32[((9288)>>2)]; //@line 7374 "tcc_bootstrap.c"
 var $324=(($323)|0); //@line 7374 "tcc_bootstrap.c"
 _mk_pointer($324); //@line 7374 "tcc_bootstrap.c"
 _indir(); //@line 7375 "tcc_bootstrap.c"
 label=93;break; //@line 7376 "tcc_bootstrap.c"
 case 93: 
 label=163;break; //@line 7378 "tcc_bootstrap.c"
 case 94: 
 var $327=HEAP32[((10472)>>2)]; //@line 7381 "tcc_bootstrap.c"
 $t=$327; //@line 7381 "tcc_bootstrap.c"
 _next(); //@line 7382 "tcc_bootstrap.c"
 _unary(); //@line 7383 "tcc_bootstrap.c"
 var $328=$t; //@line 7384 "tcc_bootstrap.c"
 _inc(0,$328); //@line 7384 "tcc_bootstrap.c"
 label=163;break; //@line 7385 "tcc_bootstrap.c"
 case 95: 
 _next(); //@line 7387 "tcc_bootstrap.c"
 _unary(); //@line 7388 "tcc_bootstrap.c"
 var $330=HEAP32[((9288)>>2)]; //@line 7389 "tcc_bootstrap.c"
 var $331=(($330)|0); //@line 7389 "tcc_bootstrap.c"
 var $332=(($331)|0); //@line 7389 "tcc_bootstrap.c"
 var $333=HEAP32[(($332)>>2)]; //@line 7389 "tcc_bootstrap.c"
 var $334=$333&15; //@line 7389 "tcc_bootstrap.c"
 $t=$334; //@line 7389 "tcc_bootstrap.c"
 var $335=$t; //@line 7390 "tcc_bootstrap.c"
 var $336=_is_float($335); //@line 7390 "tcc_bootstrap.c"
 var $337=($336|0)!=0; //@line 7390 "tcc_bootstrap.c"
 if($337){label=96;break;}else{label=103;break;} //@line 7390 "tcc_bootstrap.c"
 case 96: 
 var $339=HEAP32[((9288)>>2)]; //@line 7393 "tcc_bootstrap.c"
 var $340=(($339)|0); //@line 7393 "tcc_bootstrap.c"
 _vpush($340); //@line 7393 "tcc_bootstrap.c"
 var $341=$t; //@line 7394 "tcc_bootstrap.c"
 var $342=($341|0)==8; //@line 7394 "tcc_bootstrap.c"
 if($342){label=97;break;}else{label=98;break;} //@line 7394 "tcc_bootstrap.c"
 case 97: 
 var $344=HEAP32[((9288)>>2)]; //@line 7395 "tcc_bootstrap.c"
 var $345=(($344+16)|0); //@line 7395 "tcc_bootstrap.c"
 var $346=$345; //@line 7395 "tcc_bootstrap.c"
 HEAPF32[(($346)>>2)]=-.0; //@line 7395 "tcc_bootstrap.c"
 label=102;break; //@line 7395 "tcc_bootstrap.c"
 case 98: 
 var $348=$t; //@line 7396 "tcc_bootstrap.c"
 var $349=($348|0)==9; //@line 7396 "tcc_bootstrap.c"
 if($349){label=99;break;}else{label=100;break;} //@line 7396 "tcc_bootstrap.c"
 case 99: 
 var $351=HEAP32[((9288)>>2)]; //@line 7397 "tcc_bootstrap.c"
 var $352=(($351+16)|0); //@line 7397 "tcc_bootstrap.c"
 var $353=$352; //@line 7397 "tcc_bootstrap.c"
 HEAPF64[(($353)>>3)]=-.0; //@line 7397 "tcc_bootstrap.c"
 label=101;break; //@line 7397 "tcc_bootstrap.c"
 case 100: 
 var $355=HEAP32[((9288)>>2)]; //@line 7399 "tcc_bootstrap.c"
 var $356=(($355+16)|0); //@line 7399 "tcc_bootstrap.c"
 var $357=$356; //@line 7399 "tcc_bootstrap.c"
 HEAPF64[(($357)>>3)]=-.0; //@line 7399 "tcc_bootstrap.c"
 label=101;break;
 case 101: 
 label=102;break;
 case 102: 
 label=104;break; //@line 7400 "tcc_bootstrap.c"
 case 103: 
 _vpushi(0); //@line 7401 "tcc_bootstrap.c"
 label=104;break;
 case 104: 
 _vswap(); //@line 7402 "tcc_bootstrap.c"
 _gen_op(45); //@line 7403 "tcc_bootstrap.c"
 label=163;break; //@line 7404 "tcc_bootstrap.c"
 case 105: 
 var $363=HEAP32[((2848)>>2)]; //@line 7406 "tcc_bootstrap.c"
 var $364=($363|0)!=0; //@line 7406 "tcc_bootstrap.c"
 if($364){label=107;break;}else{label=106;break;} //@line 7406 "tcc_bootstrap.c"
 case 106: 
 label=146;break; //@line 7407 "tcc_bootstrap.c"
 case 107: 
 _next(); //@line 7408 "tcc_bootstrap.c"
 var $367=HEAP32[((10472)>>2)]; //@line 7410 "tcc_bootstrap.c"
 var $368=($367|0)<314; //@line 7410 "tcc_bootstrap.c"
 if($368){label=108;break;}else{label=109;break;} //@line 7410 "tcc_bootstrap.c"
 case 108: 
 _expect(7792); //@line 7411 "tcc_bootstrap.c"
 label=109;break; //@line 7411 "tcc_bootstrap.c"
 case 109: 
 var $371=HEAP32[((10472)>>2)]; //@line 7412 "tcc_bootstrap.c"
 var $372=_label_find($371); //@line 7412 "tcc_bootstrap.c"
 $s=$372; //@line 7412 "tcc_bootstrap.c"
 var $373=$s; //@line 7413 "tcc_bootstrap.c"
 var $374=($373|0)!=0; //@line 7413 "tcc_bootstrap.c"
 if($374){label=111;break;}else{label=110;break;} //@line 7413 "tcc_bootstrap.c"
 case 110: 
 var $376=HEAP32[((10472)>>2)]; //@line 7414 "tcc_bootstrap.c"
 var $377=_label_push(76568,$376,1); //@line 7414 "tcc_bootstrap.c"
 $s=$377; //@line 7414 "tcc_bootstrap.c"
 label=114;break; //@line 7415 "tcc_bootstrap.c"
 case 111: 
 var $379=$s; //@line 7416 "tcc_bootstrap.c"
 var $380=(($379+4)|0); //@line 7416 "tcc_bootstrap.c"
 var $381=HEAP16[(($380)>>1)]; //@line 7416 "tcc_bootstrap.c"
 var $382=($381&65535); //@line 7416 "tcc_bootstrap.c"
 var $383=($382|0)==2; //@line 7416 "tcc_bootstrap.c"
 if($383){label=112;break;}else{label=113;break;} //@line 7416 "tcc_bootstrap.c"
 case 112: 
 var $385=$s; //@line 7417 "tcc_bootstrap.c"
 var $386=(($385+4)|0); //@line 7417 "tcc_bootstrap.c"
 HEAP16[(($386)>>1)]=1; //@line 7417 "tcc_bootstrap.c"
 label=113;break; //@line 7417 "tcc_bootstrap.c"
 case 113: 
 label=114;break;
 case 114: 
 var $389=$s; //@line 7419 "tcc_bootstrap.c"
 var $390=(($389+16)|0); //@line 7419 "tcc_bootstrap.c"
 var $391=(($390)|0); //@line 7419 "tcc_bootstrap.c"
 var $392=HEAP32[(($391)>>2)]; //@line 7419 "tcc_bootstrap.c"
 var $393=($392|0)!=0; //@line 7419 "tcc_bootstrap.c"
 if($393){label=116;break;}else{label=115;break;} //@line 7419 "tcc_bootstrap.c"
 case 115: 
 var $395=$s; //@line 7420 "tcc_bootstrap.c"
 var $396=(($395+16)|0); //@line 7420 "tcc_bootstrap.c"
 var $397=(($396)|0); //@line 7420 "tcc_bootstrap.c"
 HEAP32[(($397)>>2)]=0; //@line 7420 "tcc_bootstrap.c"
 var $398=$s; //@line 7421 "tcc_bootstrap.c"
 var $399=(($398+16)|0); //@line 7421 "tcc_bootstrap.c"
 _mk_pointer($399); //@line 7421 "tcc_bootstrap.c"
 var $400=$s; //@line 7422 "tcc_bootstrap.c"
 var $401=(($400+16)|0); //@line 7422 "tcc_bootstrap.c"
 var $402=(($401)|0); //@line 7422 "tcc_bootstrap.c"
 var $403=HEAP32[(($402)>>2)]; //@line 7422 "tcc_bootstrap.c"
 var $404=$403|8192; //@line 7422 "tcc_bootstrap.c"
 HEAP32[(($402)>>2)]=$404; //@line 7422 "tcc_bootstrap.c"
 label=116;break; //@line 7423 "tcc_bootstrap.c"
 case 116: 
 var $406=$s; //@line 7424 "tcc_bootstrap.c"
 var $407=(($406+16)|0); //@line 7424 "tcc_bootstrap.c"
 var $408=$s; //@line 7424 "tcc_bootstrap.c"
 _vpushsym($407,$408); //@line 7424 "tcc_bootstrap.c"
 _next(); //@line 7425 "tcc_bootstrap.c"
 label=163;break; //@line 7426 "tcc_bootstrap.c"
 case 117: 
 $has_default=0; //@line 7430 "tcc_bootstrap.c"
 $has_match=0; //@line 7431 "tcc_bootstrap.c"
 $learn=0; //@line 7432 "tcc_bootstrap.c"
 HEAP32[(($str)>>2)]=0; //@line 7433 "tcc_bootstrap.c"
 _next(); //@line 7434 "tcc_bootstrap.c"
 _skip(40); //@line 7435 "tcc_bootstrap.c"
 _expr_type($controlling_type,4); //@line 7436 "tcc_bootstrap.c"
 var $410=(($controlling_type)|0); //@line 7437 "tcc_bootstrap.c"
 var $411=HEAP32[(($410)>>2)]; //@line 7437 "tcc_bootstrap.c"
 var $412=$411&-833; //@line 7437 "tcc_bootstrap.c"
 HEAP32[(($410)>>2)]=$412; //@line 7437 "tcc_bootstrap.c"
 label=118;break; //@line 7438 "tcc_bootstrap.c"
 case 118: 
 $learn=0; //@line 7439 "tcc_bootstrap.c"
 _skip(44); //@line 7440 "tcc_bootstrap.c"
 var $414=HEAP32[((10472)>>2)]; //@line 7441 "tcc_bootstrap.c"
 var $415=($414|0)==300; //@line 7441 "tcc_bootstrap.c"
 if($415){label=119;break;}else{label=124;break;} //@line 7441 "tcc_bootstrap.c"
 case 119: 
 var $417=$has_default; //@line 7442 "tcc_bootstrap.c"
 var $418=($417|0)!=0; //@line 7442 "tcc_bootstrap.c"
 if($418){label=120;break;}else{label=121;break;} //@line 7442 "tcc_bootstrap.c"
 case 120: 
 _tcc_error(7768,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs; //@line 7443 "tcc_bootstrap.c"
 label=121;break; //@line 7443 "tcc_bootstrap.c"
 case 121: 
 $has_default=1; //@line 7444 "tcc_bootstrap.c"
 var $421=$has_match; //@line 7445 "tcc_bootstrap.c"
 var $422=($421|0)!=0; //@line 7445 "tcc_bootstrap.c"
 if($422){label=123;break;}else{label=122;break;} //@line 7445 "tcc_bootstrap.c"
 case 122: 
 $learn=1; //@line 7446 "tcc_bootstrap.c"
 label=123;break; //@line 7446 "tcc_bootstrap.c"
 case 123: 
 _next(); //@line 7447 "tcc_bootstrap.c"
 label=129;break; //@line 7448 "tcc_bootstrap.c"
 case 124: 
 var $426=_parse_btype($cur_type,$ad_tmp); //@line 7452 "tcc_bootstrap.c"
 var $427=_type_decl($cur_type,$ad_tmp,$itmp,1); //@line 7453 "tcc_bootstrap.c"
 var $428=_compare_types($controlling_type,$cur_type,0); //@line 7454 "tcc_bootstrap.c"
 var $429=($428|0)!=0; //@line 7454 "tcc_bootstrap.c"
 if($429){label=125;break;}else{label=128;break;} //@line 7454 "tcc_bootstrap.c"
 case 125: 
 var $431=$has_match; //@line 7455 "tcc_bootstrap.c"
 var $432=($431|0)!=0; //@line 7455 "tcc_bootstrap.c"
 if($432){label=126;break;}else{label=127;break;} //@line 7455 "tcc_bootstrap.c"
 case 126: 
 _tcc_error(7736,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs; //@line 7456 "tcc_bootstrap.c"
 label=127;break; //@line 7457 "tcc_bootstrap.c"
 case 127: 
 $has_match=1; //@line 7458 "tcc_bootstrap.c"
 $learn=1; //@line 7459 "tcc_bootstrap.c"
 label=128;break; //@line 7460 "tcc_bootstrap.c"
 case 128: 
 label=129;break;
 case 129: 
 _skip(58); //@line 7462 "tcc_bootstrap.c"
 var $437=$learn; //@line 7463 "tcc_bootstrap.c"
 var $438=($437|0)!=0; //@line 7463 "tcc_bootstrap.c"
 if($438){label=130;break;}else{label=133;break;} //@line 7463 "tcc_bootstrap.c"
 case 130: 
 var $440=HEAP32[(($str)>>2)]; //@line 7464 "tcc_bootstrap.c"
 var $441=($440|0)!=0; //@line 7464 "tcc_bootstrap.c"
 if($441){label=131;break;}else{label=132;break;} //@line 7464 "tcc_bootstrap.c"
 case 131: 
 var $443=HEAP32[(($str)>>2)]; //@line 7465 "tcc_bootstrap.c"
 _tok_str_free($443); //@line 7465 "tcc_bootstrap.c"
 label=132;break; //@line 7465 "tcc_bootstrap.c"
 case 132: 
 _skip_or_save_block($str); //@line 7466 "tcc_bootstrap.c"
 label=134;break; //@line 7467 "tcc_bootstrap.c"
 case 133: 
 _skip_or_save_block(0); //@line 7468 "tcc_bootstrap.c"
 label=134;break;
 case 134: 
 var $447=HEAP32[((10472)>>2)]; //@line 7470 "tcc_bootstrap.c"
 var $448=($447|0)==41; //@line 7470 "tcc_bootstrap.c"
 if($448){label=135;break;}else{label=136;break;} //@line 7470 "tcc_bootstrap.c"
 case 135: 
 label=137;break; //@line 7471 "tcc_bootstrap.c"
 case 136: 
 label=118;break; //@line 7472 "tcc_bootstrap.c"
 case 137: 
 var $452=HEAP32[(($str)>>2)]; //@line 7473 "tcc_bootstrap.c"
 var $453=($452|0)!=0; //@line 7473 "tcc_bootstrap.c"
 if($453){label=139;break;}else{label=138;break;} //@line 7473 "tcc_bootstrap.c"
 case 138: 
 var $455=(($buf)|0); //@line 7475 "tcc_bootstrap.c"
 _type_to_str($455,60,$controlling_type,0); //@line 7475 "tcc_bootstrap.c"
 var $456=(($buf)|0); //@line 7476 "tcc_bootstrap.c"
 _tcc_error(7688,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$456,tempVarArgs)); STACKTOP=tempVarArgs; //@line 7476 "tcc_bootstrap.c"
 label=139;break; //@line 7477 "tcc_bootstrap.c"
 case 139: 
 var $458=HEAP32[(($str)>>2)]; //@line 7478 "tcc_bootstrap.c"
 _begin_macro($458,1); //@line 7478 "tcc_bootstrap.c"
 _next(); //@line 7479 "tcc_bootstrap.c"
 _expr_eq(); //@line 7480 "tcc_bootstrap.c"
 var $459=HEAP32[((10472)>>2)]; //@line 7481 "tcc_bootstrap.c"
 var $460=($459|0)!=-1; //@line 7481 "tcc_bootstrap.c"
 if($460){label=140;break;}else{label=141;break;} //@line 7481 "tcc_bootstrap.c"
 case 140: 
 _expect(7680); //@line 7482 "tcc_bootstrap.c"
 label=141;break; //@line 7482 "tcc_bootstrap.c"
 case 141: 
 _end_macro(); //@line 7483 "tcc_bootstrap.c"
 _next(); //@line 7484 "tcc_bootstrap.c"
 label=163;break; //@line 7485 "tcc_bootstrap.c"
 case 142: 
 var $$etemp$27$0=0; //@line 9365 "tcc_bootstrap.c"
 var $$etemp$27$1=2146959360;
 _vpush64(9,$$etemp$27$0,$$etemp$27$1);
 _next(); //@line 7489 "tcc_bootstrap.c"
 label=163;break; //@line 7490 "tcc_bootstrap.c"
 case 143: 
 var $$etemp$28$0=1;
 var $$etemp$28$1=2146435072;
 _vpush64(9,$$etemp$28$0,$$etemp$28$1);
 _next(); //@line 7493 "tcc_bootstrap.c"
 label=163;break; //@line 7494 "tcc_bootstrap.c"
 case 144: 
 var $$etemp$29$0=0;
 var $$etemp$29$1=2146435072;
 _vpush64(9,$$etemp$29$0,$$etemp$29$1);
 _next(); //@line 7497 "tcc_bootstrap.c"
 label=163;break; //@line 7498 "tcc_bootstrap.c"
 case 145: 
 label=146;break; //@line 7498 "tcc_bootstrap.c"
 case 146: 
 var $468=HEAP32[((10472)>>2)]; //@line 7501 "tcc_bootstrap.c"
 $t=$468; //@line 7501 "tcc_bootstrap.c"
 _next(); //@line 7502 "tcc_bootstrap.c"
 var $469=$t; //@line 7503 "tcc_bootstrap.c"
 var $470=($469|0)<314; //@line 7503 "tcc_bootstrap.c"
 if($470){label=147;break;}else{label=148;break;} //@line 7503 "tcc_bootstrap.c"
 case 147: 
 _expect(3008); //@line 7504 "tcc_bootstrap.c"
 label=148;break; //@line 7504 "tcc_bootstrap.c"
 case 148: 
 var $473=$t; //@line 7505 "tcc_bootstrap.c"
 var $474=_sym_find($473); //@line 7505 "tcc_bootstrap.c"
 $s=$474; //@line 7505 "tcc_bootstrap.c"
 var $475=$s; //@line 7506 "tcc_bootstrap.c"
 var $476=($475|0)!=0; //@line 7506 "tcc_bootstrap.c"
 if($476){label=154;break;}else{label=149;break;} //@line 7506 "tcc_bootstrap.c"
 case 149: 
 var $478=$t; //@line 7507 "tcc_bootstrap.c"
 var $479=_get_tok_str($478,0); //@line 7507 "tcc_bootstrap.c"
 $name=$479; //@line 7507 "tcc_bootstrap.c"
 var $480=HEAP32[((10472)>>2)]; //@line 7508 "tcc_bootstrap.c"
 var $481=($480|0)!=40; //@line 7508 "tcc_bootstrap.c"
 if($481){label=150;break;}else{label=151;break;} //@line 7508 "tcc_bootstrap.c"
 case 150: 
 var $483=$name; //@line 7509 "tcc_bootstrap.c"
 _tcc_error(7664,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$483,tempVarArgs)); STACKTOP=tempVarArgs; //@line 7509 "tcc_bootstrap.c"
 label=151;break; //@line 7509 "tcc_bootstrap.c"
 case 151: 
 var $485=HEAP32[((10488)>>2)]; //@line 7510 "tcc_bootstrap.c"
 var $486=(($485+36)|0); //@line 7510 "tcc_bootstrap.c"
 var $487=HEAP32[(($486)>>2)]; //@line 7510 "tcc_bootstrap.c"
 var $488=($487|0)!=0; //@line 7510 "tcc_bootstrap.c"
 if($488){label=152;break;}else{label=153;break;} //@line 7510 "tcc_bootstrap.c"
 case 152: 
 var $490=$name; //@line 7512 "tcc_bootstrap.c"
 _tcc_warning(7624,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$490,tempVarArgs)); STACKTOP=tempVarArgs; //@line 7512 "tcc_bootstrap.c"
 label=153;break; //@line 7512 "tcc_bootstrap.c"
 case 153: 
 var $492=$t; //@line 7513 "tcc_bootstrap.c"
 var $493=_external_global_sym($492,76632,0); //@line 7513 "tcc_bootstrap.c"
 $s=$493; //@line 7513 "tcc_bootstrap.c"
 label=154;break; //@line 7514 "tcc_bootstrap.c"
 case 154: 
 var $495=$s; //@line 7515 "tcc_bootstrap.c"
 var $496=(($495+4)|0); //@line 7515 "tcc_bootstrap.c"
 var $497=HEAP16[(($496)>>1)]; //@line 7515 "tcc_bootstrap.c"
 var $498=($497&65535); //@line 7515 "tcc_bootstrap.c"
 $r=$498; //@line 7515 "tcc_bootstrap.c"
 var $499=$r; //@line 7516 "tcc_bootstrap.c"
 var $500=$499&63; //@line 7516 "tcc_bootstrap.c"
 var $501=($500|0)<48; //@line 7516 "tcc_bootstrap.c"
 if($501){label=155;break;}else{label=156;break;} //@line 7516 "tcc_bootstrap.c"
 case 155: 
 var $503=$r; //@line 7517 "tcc_bootstrap.c"
 var $504=$503&-64; //@line 7517 "tcc_bootstrap.c"
 var $505=$504|50; //@line 7517 "tcc_bootstrap.c"
 $r=$505; //@line 7517 "tcc_bootstrap.c"
 label=156;break; //@line 7517 "tcc_bootstrap.c"
 case 156: 
 var $507=$s; //@line 7518 "tcc_bootstrap.c"
 var $508=(($507+16)|0); //@line 7518 "tcc_bootstrap.c"
 var $509=$r; //@line 7518 "tcc_bootstrap.c"
 var $510=$s; //@line 7518 "tcc_bootstrap.c"
 var $511=(($510+8)|0); //@line 7518 "tcc_bootstrap.c"
 var $512=$511; //@line 7518 "tcc_bootstrap.c"
 var $513=(($512)|0); //@line 7518 "tcc_bootstrap.c"
 var $514=HEAP32[(($513)>>2)]; //@line 7518 "tcc_bootstrap.c"
 _vset($508,$509,$514); //@line 7518 "tcc_bootstrap.c"
 var $515=$s; //@line 7519 "tcc_bootstrap.c"
 var $516=HEAP32[((9288)>>2)]; //@line 7519 "tcc_bootstrap.c"
 var $517=(($516+32)|0); //@line 7519 "tcc_bootstrap.c"
 HEAP32[(($517)>>2)]=$515; //@line 7519 "tcc_bootstrap.c"
 var $518=$r; //@line 7520 "tcc_bootstrap.c"
 var $519=$518&512; //@line 7520 "tcc_bootstrap.c"
 var $520=($519|0)!=0; //@line 7520 "tcc_bootstrap.c"
 if($520){label=157;break;}else{label=158;break;} //@line 7520 "tcc_bootstrap.c"
 case 157: 
 var $522=HEAP32[((9288)>>2)]; //@line 7521 "tcc_bootstrap.c"
 var $523=(($522+16)|0); //@line 7521 "tcc_bootstrap.c"
 var $524=$523; //@line 7521 "tcc_bootstrap.c"
 var $$etemp$30$0=0;
 var $$etemp$30$1=0;
 var $st$31$0=(($524)|0);
 HEAP32[(($st$31$0)>>2)]=$$etemp$30$0;
 var $st$32$1=(($524+4)|0);
 HEAP32[(($st$32$1)>>2)]=$$etemp$30$1;
 label=162;break; //@line 7522 "tcc_bootstrap.c"
 case 158: 
 var $526=$r; //@line 7522 "tcc_bootstrap.c"
 var $527=($526|0)==48; //@line 7522 "tcc_bootstrap.c"
 if($527){label=159;break;}else{label=161;break;} //@line 7522 "tcc_bootstrap.c"
 case 159: 
 var $529=$s; //@line 7522 "tcc_bootstrap.c"
 var $530=(($529+16)|0); //@line 7522 "tcc_bootstrap.c"
 var $531=(($530)|0); //@line 7522 "tcc_bootstrap.c"
 var $532=HEAP32[(($531)>>2)]; //@line 7522 "tcc_bootstrap.c"
 var $533=_IS_ENUM_VAL($532); //@line 7522 "tcc_bootstrap.c"
 var $534=($533|0)!=0; //@line 7522 "tcc_bootstrap.c"
 if($534){label=160;break;}else{label=161;break;} //@line 7522 "tcc_bootstrap.c"
 case 160: 
 var $536=$s; //@line 7523 "tcc_bootstrap.c"
 var $537=(($536+8)|0); //@line 7523 "tcc_bootstrap.c"
 var $538=$537; //@line 7523 "tcc_bootstrap.c"
 var $ld$33$0=(($538)|0);
 var $539$0=HEAP32[(($ld$33$0)>>2)];
 var $ld$34$1=(($538+4)|0);
 var $539$1=HEAP32[(($ld$34$1)>>2)];
 var $540=HEAP32[((9288)>>2)]; //@line 7523 "tcc_bootstrap.c"
 var $541=(($540+16)|0); //@line 7523 "tcc_bootstrap.c"
 var $542=$541; //@line 7523 "tcc_bootstrap.c"
 var $st$35$0=(($542)|0);
 HEAP32[(($st$35$0)>>2)]=$539$0;
 var $st$36$1=(($542+4)|0);
 HEAP32[(($st$36$1)>>2)]=$539$1;
 label=161;break; //@line 7524 "tcc_bootstrap.c"
 case 161: 
 label=162;break;
 case 162: 
 label=163;break; //@line 7525 "tcc_bootstrap.c"
 case 163: 
 label=164;break; //@line 7527 "tcc_bootstrap.c"
 case 164: 
 var $547=HEAP32[((10472)>>2)]; //@line 7528 "tcc_bootstrap.c"
 var $548=($547|0)==164; //@line 7528 "tcc_bootstrap.c"
 if($548){label=166;break;}else{label=165;break;} //@line 7528 "tcc_bootstrap.c"
 case 165: 
 var $550=HEAP32[((10472)>>2)]; //@line 7528 "tcc_bootstrap.c"
 var $551=($550|0)==162; //@line 7528 "tcc_bootstrap.c"
 if($551){label=166;break;}else{label=167;break;} //@line 7528 "tcc_bootstrap.c"
 case 166: 
 var $553=HEAP32[((10472)>>2)]; //@line 7529 "tcc_bootstrap.c"
 _inc(1,$553); //@line 7529 "tcc_bootstrap.c"
 _next(); //@line 7530 "tcc_bootstrap.c"
 label=238;break; //@line 7531 "tcc_bootstrap.c"
 case 167: 
 var $555=HEAP32[((10472)>>2)]; //@line 7531 "tcc_bootstrap.c"
 var $556=($555|0)==46; //@line 7531 "tcc_bootstrap.c"
 if($556){label=170;break;}else{label=168;break;} //@line 7531 "tcc_bootstrap.c"
 case 168: 
 var $558=HEAP32[((10472)>>2)]; //@line 7531 "tcc_bootstrap.c"
 var $559=($558|0)==199; //@line 7531 "tcc_bootstrap.c"
 if($559){label=170;break;}else{label=169;break;} //@line 7531 "tcc_bootstrap.c"
 case 169: 
 var $561=HEAP32[((10472)>>2)]; //@line 7531 "tcc_bootstrap.c"
 var $562=($561|0)==188; //@line 7531 "tcc_bootstrap.c"
 if($562){label=170;break;}else{label=184;break;} //@line 7531 "tcc_bootstrap.c"
 case 170: 
 var $564=HEAP32[((10472)>>2)]; //@line 7533 "tcc_bootstrap.c"
 var $565=($564|0)==199; //@line 7533 "tcc_bootstrap.c"
 if($565){label=171;break;}else{label=172;break;} //@line 7533 "tcc_bootstrap.c"
 case 171: 
 _indir(); //@line 7534 "tcc_bootstrap.c"
 label=172;break; //@line 7534 "tcc_bootstrap.c"
 case 172: 
 var $568=HEAP32[((9288)>>2)]; //@line 7535 "tcc_bootstrap.c"
 var $569=(($568)|0); //@line 7535 "tcc_bootstrap.c"
 var $570=(($569)|0); //@line 7535 "tcc_bootstrap.c"
 var $571=HEAP32[(($570)>>2)]; //@line 7535 "tcc_bootstrap.c"
 var $572=$571&768; //@line 7535 "tcc_bootstrap.c"
 $qualifiers=$572; //@line 7535 "tcc_bootstrap.c"
 _test_lvalue(); //@line 7536 "tcc_bootstrap.c"
 _gaddrof(); //@line 7537 "tcc_bootstrap.c"
 var $573=HEAP32[((9288)>>2)]; //@line 7538 "tcc_bootstrap.c"
 var $574=(($573)|0); //@line 7538 "tcc_bootstrap.c"
 var $575=(($574)|0); //@line 7538 "tcc_bootstrap.c"
 var $576=HEAP32[(($575)>>2)]; //@line 7538 "tcc_bootstrap.c"
 var $577=$576&15; //@line 7538 "tcc_bootstrap.c"
 var $578=($577|0)!=7; //@line 7538 "tcc_bootstrap.c"
 if($578){label=173;break;}else{label=174;break;} //@line 7538 "tcc_bootstrap.c"
 case 173: 
 _expect(7608); //@line 7539 "tcc_bootstrap.c"
 label=174;break; //@line 7539 "tcc_bootstrap.c"
 case 174: 
 var $581=HEAP32[((10472)>>2)]; //@line 7540 "tcc_bootstrap.c"
 var $582=($581|0)==188; //@line 7540 "tcc_bootstrap.c"
 if($582){label=175;break;}else{label=176;break;} //@line 7540 "tcc_bootstrap.c"
 case 175: 
 _expect(7592); //@line 7541 "tcc_bootstrap.c"
 label=176;break; //@line 7541 "tcc_bootstrap.c"
 case 176: 
 _next(); //@line 7542 "tcc_bootstrap.c"
 var $585=HEAP32[((10472)>>2)]; //@line 7543 "tcc_bootstrap.c"
 var $586=($585|0)==181; //@line 7543 "tcc_bootstrap.c"
 if($586){label=178;break;}else{label=177;break;} //@line 7543 "tcc_bootstrap.c"
 case 177: 
 var $588=HEAP32[((10472)>>2)]; //@line 7543 "tcc_bootstrap.c"
 var $589=($588|0)==182; //@line 7543 "tcc_bootstrap.c"
 if($589){label=178;break;}else{label=179;break;} //@line 7543 "tcc_bootstrap.c"
 case 178: 
 _expect(7592); //@line 7544 "tcc_bootstrap.c"
 label=179;break; //@line 7544 "tcc_bootstrap.c"
 case 179: 
 var $592=HEAP32[((9288)>>2)]; //@line 7545 "tcc_bootstrap.c"
 var $593=(($592)|0); //@line 7545 "tcc_bootstrap.c"
 var $594=HEAP32[((10472)>>2)]; //@line 7545 "tcc_bootstrap.c"
 var $595=_find_field($593,$594); //@line 7545 "tcc_bootstrap.c"
 $s=$595; //@line 7545 "tcc_bootstrap.c"
 var $596=$s; //@line 7546 "tcc_bootstrap.c"
 var $597=($596|0)!=0; //@line 7546 "tcc_bootstrap.c"
 if($597){label=181;break;}else{label=180;break;} //@line 7546 "tcc_bootstrap.c"
 case 180: 
 var $599=HEAP32[((10472)>>2)]; //@line 7547 "tcc_bootstrap.c"
 var $600=$599&-536870913; //@line 7547 "tcc_bootstrap.c"
 var $601=_get_tok_str($600,10440); //@line 7547 "tcc_bootstrap.c"
 _tcc_error(7568,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$601,tempVarArgs)); STACKTOP=tempVarArgs; //@line 7547 "tcc_bootstrap.c"
 label=181;break; //@line 7547 "tcc_bootstrap.c"
 case 181: 
 var $603=HEAP32[((9288)>>2)]; //@line 7548 "tcc_bootstrap.c"
 var $604=(($603)|0); //@line 7548 "tcc_bootstrap.c"
 var $605=$604; //@line 7548 "tcc_bootstrap.c"
 assert(8 % 1 === 0);HEAP32[(($605)>>2)]=HEAP32[((76728)>>2)];HEAP32[((($605)+(4))>>2)]=HEAP32[((76732)>>2)]; //@line 7548 "tcc_bootstrap.c"
 var $606=$s; //@line 7549 "tcc_bootstrap.c"
 var $607=(($606+8)|0); //@line 7549 "tcc_bootstrap.c"
 var $608=$607; //@line 7549 "tcc_bootstrap.c"
 var $609=(($608)|0); //@line 7549 "tcc_bootstrap.c"
 var $610=HEAP32[(($609)>>2)]; //@line 7549 "tcc_bootstrap.c"
 _vpushi($610); //@line 7549 "tcc_bootstrap.c"
 _gen_op(43); //@line 7550 "tcc_bootstrap.c"
 var $611=HEAP32[((9288)>>2)]; //@line 7551 "tcc_bootstrap.c"
 var $612=(($611)|0); //@line 7551 "tcc_bootstrap.c"
 var $613=$s; //@line 7551 "tcc_bootstrap.c"
 var $614=(($613+16)|0); //@line 7551 "tcc_bootstrap.c"
 var $615=$612; //@line 7551 "tcc_bootstrap.c"
 var $616=$614; //@line 7551 "tcc_bootstrap.c"
 assert(8 % 1 === 0);HEAP32[(($615)>>2)]=HEAP32[(($616)>>2)];HEAP32[((($615)+(4))>>2)]=HEAP32[((($616)+(4))>>2)]; //@line 7551 "tcc_bootstrap.c"
 var $617=$qualifiers; //@line 7552 "tcc_bootstrap.c"
 var $618=HEAP32[((9288)>>2)]; //@line 7552 "tcc_bootstrap.c"
 var $619=(($618)|0); //@line 7552 "tcc_bootstrap.c"
 var $620=(($619)|0); //@line 7552 "tcc_bootstrap.c"
 var $621=HEAP32[(($620)>>2)]; //@line 7552 "tcc_bootstrap.c"
 var $622=$621|$617; //@line 7552 "tcc_bootstrap.c"
 HEAP32[(($620)>>2)]=$622; //@line 7552 "tcc_bootstrap.c"
 var $623=HEAP32[((9288)>>2)]; //@line 7553 "tcc_bootstrap.c"
 var $624=(($623)|0); //@line 7553 "tcc_bootstrap.c"
 var $625=(($624)|0); //@line 7553 "tcc_bootstrap.c"
 var $626=HEAP32[(($625)>>2)]; //@line 7553 "tcc_bootstrap.c"
 var $627=$626&64; //@line 7553 "tcc_bootstrap.c"
 var $628=($627|0)!=0; //@line 7553 "tcc_bootstrap.c"
 if($628){label=183;break;}else{label=182;break;} //@line 7553 "tcc_bootstrap.c"
 case 182: 
 var $630=HEAP32[((9288)>>2)]; //@line 7554 "tcc_bootstrap.c"
 var $631=(($630)|0); //@line 7554 "tcc_bootstrap.c"
 var $632=(($631)|0); //@line 7554 "tcc_bootstrap.c"
 var $633=HEAP32[(($632)>>2)]; //@line 7554 "tcc_bootstrap.c"
 var $634=_lvalue_type($633); //@line 7554 "tcc_bootstrap.c"
 var $635=HEAP32[((9288)>>2)]; //@line 7554 "tcc_bootstrap.c"
 var $636=(($635+8)|0); //@line 7554 "tcc_bootstrap.c"
 var $637=HEAP16[(($636)>>1)]; //@line 7554 "tcc_bootstrap.c"
 var $638=($637&65535); //@line 7554 "tcc_bootstrap.c"
 var $639=$638|$634; //@line 7554 "tcc_bootstrap.c"
 var $640=(($639)&65535); //@line 7554 "tcc_bootstrap.c"
 HEAP16[(($636)>>1)]=$640; //@line 7554 "tcc_bootstrap.c"
 label=183;break; //@line 7555 "tcc_bootstrap.c"
 case 183: 
 _next(); //@line 7556 "tcc_bootstrap.c"
 label=237;break; //@line 7557 "tcc_bootstrap.c"
 case 184: 
 var $643=HEAP32[((10472)>>2)]; //@line 7557 "tcc_bootstrap.c"
 var $644=($643|0)==91; //@line 7557 "tcc_bootstrap.c"
 if($644){label=185;break;}else{label=186;break;} //@line 7557 "tcc_bootstrap.c"
 case 185: 
 _next(); //@line 7558 "tcc_bootstrap.c"
 _gexpr(); //@line 7559 "tcc_bootstrap.c"
 _gen_op(43); //@line 7560 "tcc_bootstrap.c"
 _indir(); //@line 7561 "tcc_bootstrap.c"
 _skip(93); //@line 7562 "tcc_bootstrap.c"
 label=236;break; //@line 7563 "tcc_bootstrap.c"
 case 186: 
 var $647=HEAP32[((10472)>>2)]; //@line 7563 "tcc_bootstrap.c"
 var $648=($647|0)==91; //@line 7563 "tcc_bootstrap.c"
 if($648){label=187;break;}else{label=188;break;} //@line 7563 "tcc_bootstrap.c"
 case 187: 
 _next(); //@line 7564 "tcc_bootstrap.c"
 _gexpr(); //@line 7565 "tcc_bootstrap.c"
 _gen_op(43); //@line 7566 "tcc_bootstrap.c"
 _indir(); //@line 7567 "tcc_bootstrap.c"
 _skip(93); //@line 7568 "tcc_bootstrap.c"
 label=235;break; //@line 7569 "tcc_bootstrap.c"
 case 188: 
 var $651=HEAP32[((10472)>>2)]; //@line 7569 "tcc_bootstrap.c"
 var $652=($651|0)==40; //@line 7569 "tcc_bootstrap.c"
 if($652){label=189;break;}else{label=233;break;} //@line 7569 "tcc_bootstrap.c"
 case 189: 
 var $654=HEAP32[((9288)>>2)]; //@line 7573 "tcc_bootstrap.c"
 var $655=(($654)|0); //@line 7573 "tcc_bootstrap.c"
 var $656=(($655)|0); //@line 7573 "tcc_bootstrap.c"
 var $657=HEAP32[(($656)>>2)]; //@line 7573 "tcc_bootstrap.c"
 var $658=$657&15; //@line 7573 "tcc_bootstrap.c"
 var $659=($658|0)!=6; //@line 7573 "tcc_bootstrap.c"
 if($659){label=190;break;}else{label=197;break;} //@line 7573 "tcc_bootstrap.c"
 case 190: 
 var $661=HEAP32[((9288)>>2)]; //@line 7574 "tcc_bootstrap.c"
 var $662=(($661)|0); //@line 7574 "tcc_bootstrap.c"
 var $663=(($662)|0); //@line 7574 "tcc_bootstrap.c"
 var $664=HEAP32[(($663)>>2)]; //@line 7574 "tcc_bootstrap.c"
 var $665=$664&79; //@line 7574 "tcc_bootstrap.c"
 var $666=($665|0)==5; //@line 7574 "tcc_bootstrap.c"
 if($666){label=191;break;}else{label=194;break;} //@line 7574 "tcc_bootstrap.c"
 case 191: 
 var $668=HEAP32[((9288)>>2)]; //@line 7575 "tcc_bootstrap.c"
 var $669=(($668)|0); //@line 7575 "tcc_bootstrap.c"
 var $670=HEAP32[((9288)>>2)]; //@line 7575 "tcc_bootstrap.c"
 var $671=(($670)|0); //@line 7575 "tcc_bootstrap.c"
 var $672=_pointed_type($671); //@line 7575 "tcc_bootstrap.c"
 var $673=$669; //@line 7575 "tcc_bootstrap.c"
 var $674=$672; //@line 7575 "tcc_bootstrap.c"
 assert(8 % 1 === 0);HEAP32[(($673)>>2)]=HEAP32[(($674)>>2)];HEAP32[((($673)+(4))>>2)]=HEAP32[((($674)+(4))>>2)]; //@line 7575 "tcc_bootstrap.c"
 var $675=HEAP32[((9288)>>2)]; //@line 7576 "tcc_bootstrap.c"
 var $676=(($675)|0); //@line 7576 "tcc_bootstrap.c"
 var $677=(($676)|0); //@line 7576 "tcc_bootstrap.c"
 var $678=HEAP32[(($677)>>2)]; //@line 7576 "tcc_bootstrap.c"
 var $679=$678&15; //@line 7576 "tcc_bootstrap.c"
 var $680=($679|0)!=6; //@line 7576 "tcc_bootstrap.c"
 if($680){label=192;break;}else{label=193;break;} //@line 7576 "tcc_bootstrap.c"
 case 192: 
 label=195;break; //@line 7577 "tcc_bootstrap.c"
 case 193: 
 label=196;break; //@line 7578 "tcc_bootstrap.c"
 case 194: 
 label=195;break; //@line 7578 "tcc_bootstrap.c"
 case 195: 
 _expect(7544); //@line 7580 "tcc_bootstrap.c"
 label=196;break;
 case 196: 
 label=198;break; //@line 7582 "tcc_bootstrap.c"
 case 197: 
 var $687=HEAP32[((9288)>>2)]; //@line 7583 "tcc_bootstrap.c"
 var $688=(($687+8)|0); //@line 7583 "tcc_bootstrap.c"
 var $689=HEAP16[(($688)>>1)]; //@line 7583 "tcc_bootstrap.c"
 var $690=($689&65535); //@line 7583 "tcc_bootstrap.c"
 var $691=$690&-257; //@line 7583 "tcc_bootstrap.c"
 var $692=(($691)&65535); //@line 7583 "tcc_bootstrap.c"
 HEAP16[(($688)>>1)]=$692; //@line 7583 "tcc_bootstrap.c"
 label=198;break;
 case 198: 
 var $694=HEAP32[((9288)>>2)]; //@line 7585 "tcc_bootstrap.c"
 var $695=(($694)|0); //@line 7585 "tcc_bootstrap.c"
 var $696=(($695+4)|0); //@line 7585 "tcc_bootstrap.c"
 var $697=HEAP32[(($696)>>2)]; //@line 7585 "tcc_bootstrap.c"
 $s=$697; //@line 7585 "tcc_bootstrap.c"
 _next(); //@line 7586 "tcc_bootstrap.c"
 var $698=$s; //@line 7587 "tcc_bootstrap.c"
 var $699=(($698+24)|0); //@line 7587 "tcc_bootstrap.c"
 var $700=$699; //@line 7587 "tcc_bootstrap.c"
 var $701=HEAP32[(($700)>>2)]; //@line 7587 "tcc_bootstrap.c"
 $sa=$701; //@line 7587 "tcc_bootstrap.c"
 HEAP32[(($regsize)>>2)]=0; //@line 7588 "tcc_bootstrap.c"
 $nb_args=0; //@line 7588 "tcc_bootstrap.c"
 var $702=(($ret+10)|0); //@line 7589 "tcc_bootstrap.c"
 HEAP16[(($702)>>1)]=48; //@line 7589 "tcc_bootstrap.c"
 var $703=$s; //@line 7590 "tcc_bootstrap.c"
 var $704=(($703+16)|0); //@line 7590 "tcc_bootstrap.c"
 var $705=(($704)|0); //@line 7590 "tcc_bootstrap.c"
 var $706=HEAP32[(($705)>>2)]; //@line 7590 "tcc_bootstrap.c"
 var $707=$706&15; //@line 7590 "tcc_bootstrap.c"
 var $708=($707|0)==7; //@line 7590 "tcc_bootstrap.c"
 if($708){label=199;break;}else{label=202;break;} //@line 7590 "tcc_bootstrap.c"
 case 199: 
 var $710=$s; //@line 7591 "tcc_bootstrap.c"
 var $711=(($710+8)|0); //@line 7591 "tcc_bootstrap.c"
 var $712=$711; //@line 7591 "tcc_bootstrap.c"
 var $713=(($712+4)|0); //@line 7591 "tcc_bootstrap.c"
 var $714=$713; //@line 7591 "tcc_bootstrap.c"
 var $715=$714; //@line 7591 "tcc_bootstrap.c"
 var $716=HEAP16[(($715)>>1)]; //@line 7591 "tcc_bootstrap.c"
 var $717=($716&65535)>>>3; //@line 7591 "tcc_bootstrap.c"
 var $718=$717&3; //@line 7591 "tcc_bootstrap.c"
 var $719=($718&65535); //@line 7591 "tcc_bootstrap.c"
 var $720=($719|0)==3; //@line 7591 "tcc_bootstrap.c"
 var $721=($720&1); //@line 7591 "tcc_bootstrap.c"
 $variadic=$721; //@line 7591 "tcc_bootstrap.c"
 var $722=$s; //@line 7592 "tcc_bootstrap.c"
 var $723=(($722+16)|0); //@line 7592 "tcc_bootstrap.c"
 var $724=$variadic; //@line 7592 "tcc_bootstrap.c"
 var $725=(($ret)|0); //@line 7592 "tcc_bootstrap.c"
 var $726=_gfunc_sret($723,$724,$725,$ret_align,$regsize); //@line 7592 "tcc_bootstrap.c"
 $ret_nregs=$726; //@line 7592 "tcc_bootstrap.c"
 var $727=$ret_nregs; //@line 7594 "tcc_bootstrap.c"
 var $728=($727|0)!=0; //@line 7594 "tcc_bootstrap.c"
 if($728){label=201;break;}else{label=200;break;} //@line 7594 "tcc_bootstrap.c"
 case 200: 
 var $730=HEAP32[((10728)>>2)]; //@line 7595 "tcc_bootstrap.c"
 var $731=$size; //@line 7595 "tcc_bootstrap.c"
 var $732=((($730)-($731))|0); //@line 7595 "tcc_bootstrap.c"
 var $733=HEAP32[(($align)>>2)]; //@line 7595 "tcc_bootstrap.c"
 var $734=(((-$733))|0); //@line 7595 "tcc_bootstrap.c"
 var $735=$732&$734; //@line 7595 "tcc_bootstrap.c"
 HEAP32[((10728)>>2)]=$735; //@line 7595 "tcc_bootstrap.c"
 var $736=(($ret)|0); //@line 7596 "tcc_bootstrap.c"
 var $737=$s; //@line 7596 "tcc_bootstrap.c"
 var $738=(($737+16)|0); //@line 7596 "tcc_bootstrap.c"
 var $739=$736; //@line 7596 "tcc_bootstrap.c"
 var $740=$738; //@line 7596 "tcc_bootstrap.c"
 assert(8 % 1 === 0);HEAP32[(($739)>>2)]=HEAP32[(($740)>>2)];HEAP32[((($739)+(4))>>2)]=HEAP32[((($740)+(4))>>2)]; //@line 7596 "tcc_bootstrap.c"
 var $741=(($ret+8)|0); //@line 7597 "tcc_bootstrap.c"
 HEAP16[(($741)>>1)]=306; //@line 7597 "tcc_bootstrap.c"
 var $742=HEAP32[((10728)>>2)]; //@line 7598 "tcc_bootstrap.c"
 _vseti(50,$742); //@line 7598 "tcc_bootstrap.c"
 var $743=(($ret+16)|0); //@line 7599 "tcc_bootstrap.c"
 var $744=HEAP32[((9288)>>2)]; //@line 7599 "tcc_bootstrap.c"
 var $745=(($744+16)|0); //@line 7599 "tcc_bootstrap.c"
 var $746=$743; //@line 7599 "tcc_bootstrap.c"
 var $747=$745; //@line 7599 "tcc_bootstrap.c"
 assert(16 % 1 === 0);HEAP32[(($746)>>2)]=HEAP32[(($747)>>2)];HEAP32[((($746)+(4))>>2)]=HEAP32[((($747)+(4))>>2)];HEAP32[((($746)+(8))>>2)]=HEAP32[((($747)+(8))>>2)];HEAP32[((($746)+(12))>>2)]=HEAP32[((($747)+(12))>>2)]; //@line 7599 "tcc_bootstrap.c"
 var $748=$nb_args; //@line 7600 "tcc_bootstrap.c"
 var $749=((($748)+(1))|0); //@line 7600 "tcc_bootstrap.c"
 $nb_args=$749; //@line 7600 "tcc_bootstrap.c"
 label=201;break; //@line 7601 "tcc_bootstrap.c"
 case 201: 
 label=203;break; //@line 7602 "tcc_bootstrap.c"
 case 202: 
 $ret_nregs=1; //@line 7603 "tcc_bootstrap.c"
 var $752=(($ret)|0); //@line 7604 "tcc_bootstrap.c"
 var $753=$s; //@line 7604 "tcc_bootstrap.c"
 var $754=(($753+16)|0); //@line 7604 "tcc_bootstrap.c"
 var $755=$752; //@line 7604 "tcc_bootstrap.c"
 var $756=$754; //@line 7604 "tcc_bootstrap.c"
 assert(8 % 1 === 0);HEAP32[(($755)>>2)]=HEAP32[(($756)>>2)];HEAP32[((($755)+(4))>>2)]=HEAP32[((($756)+(4))>>2)]; //@line 7604 "tcc_bootstrap.c"
 label=203;break;
 case 203: 
 var $758=$ret_nregs; //@line 7606 "tcc_bootstrap.c"
 var $759=($758|0)!=0; //@line 7606 "tcc_bootstrap.c"
 if($759){label=204;break;}else{label=210;break;} //@line 7606 "tcc_bootstrap.c"
 case 204: 
 var $761=(($ret)|0); //@line 7608 "tcc_bootstrap.c"
 var $762=(($761)|0); //@line 7608 "tcc_bootstrap.c"
 var $763=HEAP32[(($762)>>2)]; //@line 7608 "tcc_bootstrap.c"
 var $764=_is_float($763); //@line 7608 "tcc_bootstrap.c"
 var $765=($764|0)!=0; //@line 7608 "tcc_bootstrap.c"
 if($765){label=205;break;}else{label=206;break;} //@line 7608 "tcc_bootstrap.c"
 case 205: 
 var $767=(($ret)|0); //@line 7609 "tcc_bootstrap.c"
 var $768=(($767)|0); //@line 7609 "tcc_bootstrap.c"
 var $769=HEAP32[(($768)>>2)]; //@line 7609 "tcc_bootstrap.c"
 var $770=_reg_fret($769); //@line 7609 "tcc_bootstrap.c"
 var $771=(($770)&65535); //@line 7609 "tcc_bootstrap.c"
 var $772=(($ret+8)|0); //@line 7609 "tcc_bootstrap.c"
 HEAP16[(($772)>>1)]=$771; //@line 7609 "tcc_bootstrap.c"
 label=209;break; //@line 7610 "tcc_bootstrap.c"
 case 206: 
 var $774=(($ret)|0); //@line 7611 "tcc_bootstrap.c"
 var $775=(($774)|0); //@line 7611 "tcc_bootstrap.c"
 var $776=HEAP32[(($775)>>2)]; //@line 7611 "tcc_bootstrap.c"
 var $777=$776&15; //@line 7611 "tcc_bootstrap.c"
 var $778=($777|0)==4; //@line 7611 "tcc_bootstrap.c"
 if($778){label=207;break;}else{label=208;break;} //@line 7611 "tcc_bootstrap.c"
 case 207: 
 var $780=(($ret+10)|0); //@line 7612 "tcc_bootstrap.c"
 HEAP16[(($780)>>1)]=2; //@line 7612 "tcc_bootstrap.c"
 label=208;break; //@line 7612 "tcc_bootstrap.c"
 case 208: 
 var $782=(($ret+8)|0); //@line 7613 "tcc_bootstrap.c"
 HEAP16[(($782)>>1)]=0; //@line 7613 "tcc_bootstrap.c"
 label=209;break;
 case 209: 
 var $784=(($ret+16)|0); //@line 7615 "tcc_bootstrap.c"
 var $785=$784; //@line 7615 "tcc_bootstrap.c"
 var $$etemp$37$0=0;
 var $$etemp$37$1=0;
 var $st$38$0=(($785)|0);
 HEAP32[(($st$38$0)>>2)]=$$etemp$37$0;
 var $st$39$1=(($785+4)|0);
 HEAP32[(($st$39$1)>>2)]=$$etemp$37$1;
 label=210;break; //@line 7616 "tcc_bootstrap.c"
 case 210: 
 var $787=HEAP32[((10472)>>2)]; //@line 7617 "tcc_bootstrap.c"
 var $788=($787|0)!=41; //@line 7617 "tcc_bootstrap.c"
 if($788){label=211;break;}else{label=218;break;} //@line 7617 "tcc_bootstrap.c"
 case 211: 
 label=212;break; //@line 7618 "tcc_bootstrap.c"
 case 212: 
 _expr_eq(); //@line 7619 "tcc_bootstrap.c"
 var $791=$s; //@line 7620 "tcc_bootstrap.c"
 var $792=$sa; //@line 7620 "tcc_bootstrap.c"
 _gfunc_param_typed($791,$792); //@line 7620 "tcc_bootstrap.c"
 var $793=$nb_args; //@line 7621 "tcc_bootstrap.c"
 var $794=((($793)+(1))|0); //@line 7621 "tcc_bootstrap.c"
 $nb_args=$794; //@line 7621 "tcc_bootstrap.c"
 var $795=$sa; //@line 7622 "tcc_bootstrap.c"
 var $796=($795|0)!=0; //@line 7622 "tcc_bootstrap.c"
 if($796){label=213;break;}else{label=214;break;} //@line 7622 "tcc_bootstrap.c"
 case 213: 
 var $798=$sa; //@line 7623 "tcc_bootstrap.c"
 var $799=(($798+24)|0); //@line 7623 "tcc_bootstrap.c"
 var $800=$799; //@line 7623 "tcc_bootstrap.c"
 var $801=HEAP32[(($800)>>2)]; //@line 7623 "tcc_bootstrap.c"
 $sa=$801; //@line 7623 "tcc_bootstrap.c"
 label=214;break; //@line 7623 "tcc_bootstrap.c"
 case 214: 
 var $803=HEAP32[((10472)>>2)]; //@line 7624 "tcc_bootstrap.c"
 var $804=($803|0)==41; //@line 7624 "tcc_bootstrap.c"
 if($804){label=215;break;}else{label=216;break;} //@line 7624 "tcc_bootstrap.c"
 case 215: 
 label=217;break; //@line 7625 "tcc_bootstrap.c"
 case 216: 
 _skip(44); //@line 7626 "tcc_bootstrap.c"
 label=212;break; //@line 7627 "tcc_bootstrap.c"
 case 217: 
 label=218;break; //@line 7628 "tcc_bootstrap.c"
 case 218: 
 var $809=$sa; //@line 7629 "tcc_bootstrap.c"
 var $810=($809|0)!=0; //@line 7629 "tcc_bootstrap.c"
 if($810){label=219;break;}else{label=220;break;} //@line 7629 "tcc_bootstrap.c"
 case 219: 
 _tcc_error(7512,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs; //@line 7630 "tcc_bootstrap.c"
 label=220;break; //@line 7630 "tcc_bootstrap.c"
 case 220: 
 _skip(41); //@line 7631 "tcc_bootstrap.c"
 var $813=$nb_args; //@line 7632 "tcc_bootstrap.c"
 _gfunc_call($813); //@line 7632 "tcc_bootstrap.c"
 var $814=(($ret+8)|0); //@line 7633 "tcc_bootstrap.c"
 var $815=HEAP16[(($814)>>1)]; //@line 7633 "tcc_bootstrap.c"
 var $816=($815&65535); //@line 7633 "tcc_bootstrap.c"
 var $817=$ret_nregs; //@line 7633 "tcc_bootstrap.c"
 var $818=((($816)+($817))|0); //@line 7633 "tcc_bootstrap.c"
 var $819=$ret_nregs; //@line 7633 "tcc_bootstrap.c"
 var $820=($819|0)!=0; //@line 7633 "tcc_bootstrap.c"
 var $821=$820^1; //@line 7633 "tcc_bootstrap.c"
 var $822=($821&1); //@line 7633 "tcc_bootstrap.c"
 var $823=((($818)+($822))|0); //@line 7633 "tcc_bootstrap.c"
 $r=$823; //@line 7633 "tcc_bootstrap.c"
 label=221;break; //@line 7633 "tcc_bootstrap.c"
 case 221: 
 var $825=$r; //@line 7633 "tcc_bootstrap.c"
 var $826=((($825)-(1))|0); //@line 7633 "tcc_bootstrap.c"
 $r=$826; //@line 7633 "tcc_bootstrap.c"
 var $827=(($ret+8)|0); //@line 7633 "tcc_bootstrap.c"
 var $828=HEAP16[(($827)>>1)]; //@line 7633 "tcc_bootstrap.c"
 var $829=($828&65535); //@line 7633 "tcc_bootstrap.c"
 var $830=($825|0)>($829|0); //@line 7633 "tcc_bootstrap.c"
 if($830){label=222;break;}else{label=223;break;} //@line 7633 "tcc_bootstrap.c"
 case 222: 
 var $832=(($ret)|0); //@line 7634 "tcc_bootstrap.c"
 var $833=$r; //@line 7634 "tcc_bootstrap.c"
 var $834=(($ret+16)|0); //@line 7634 "tcc_bootstrap.c"
 _vsetc($832,$833,$834); //@line 7634 "tcc_bootstrap.c"
 var $835=(($ret+10)|0); //@line 7635 "tcc_bootstrap.c"
 var $836=HEAP16[(($835)>>1)]; //@line 7635 "tcc_bootstrap.c"
 var $837=HEAP32[((9288)>>2)]; //@line 7635 "tcc_bootstrap.c"
 var $838=(($837+10)|0); //@line 7635 "tcc_bootstrap.c"
 HEAP16[(($838)>>1)]=$836; //@line 7635 "tcc_bootstrap.c"
 label=221;break; //@line 7636 "tcc_bootstrap.c"
 case 223: 
 var $840=$s; //@line 7637 "tcc_bootstrap.c"
 var $841=(($840+16)|0); //@line 7637 "tcc_bootstrap.c"
 var $842=(($841)|0); //@line 7637 "tcc_bootstrap.c"
 var $843=HEAP32[(($842)>>2)]; //@line 7637 "tcc_bootstrap.c"
 var $844=$843&15; //@line 7637 "tcc_bootstrap.c"
 var $845=($844|0)==7; //@line 7637 "tcc_bootstrap.c"
 if($845){label=224;break;}else{label=232;break;} //@line 7637 "tcc_bootstrap.c"
 case 224: 
 var $847=$ret_nregs; //@line 7637 "tcc_bootstrap.c"
 var $848=($847|0)!=0; //@line 7637 "tcc_bootstrap.c"
 if($848){label=225;break;}else{label=232;break;} //@line 7637 "tcc_bootstrap.c"
 case 225: 
 var $850=$s; //@line 7639 "tcc_bootstrap.c"
 var $851=(($850+16)|0); //@line 7639 "tcc_bootstrap.c"
 var $852=_type_size($851,$align); //@line 7639 "tcc_bootstrap.c"
 $size=$852; //@line 7639 "tcc_bootstrap.c"
 var $853=HEAP32[(($regsize)>>2)]; //@line 7640 "tcc_bootstrap.c"
 var $854=HEAP32[(($align)>>2)]; //@line 7640 "tcc_bootstrap.c"
 var $855=($853|0)>($854|0); //@line 7640 "tcc_bootstrap.c"
 if($855){label=226;break;}else{label=227;break;} //@line 7640 "tcc_bootstrap.c"
 case 226: 
 var $857=HEAP32[(($regsize)>>2)]; //@line 7641 "tcc_bootstrap.c"
 HEAP32[(($align)>>2)]=$857; //@line 7641 "tcc_bootstrap.c"
 label=227;break; //@line 7641 "tcc_bootstrap.c"
 case 227: 
 var $859=HEAP32[((10728)>>2)]; //@line 7642 "tcc_bootstrap.c"
 var $860=$size; //@line 7642 "tcc_bootstrap.c"
 var $861=((($859)-($860))|0); //@line 7642 "tcc_bootstrap.c"
 var $862=HEAP32[(($align)>>2)]; //@line 7642 "tcc_bootstrap.c"
 var $863=(((-$862))|0); //@line 7642 "tcc_bootstrap.c"
 var $864=$861&$863; //@line 7642 "tcc_bootstrap.c"
 HEAP32[((10728)>>2)]=$864; //@line 7642 "tcc_bootstrap.c"
 var $865=HEAP32[((10728)>>2)]; //@line 7643 "tcc_bootstrap.c"
 $addr=$865; //@line 7643 "tcc_bootstrap.c"
 $offset=0; //@line 7644 "tcc_bootstrap.c"
 label=228;break; //@line 7645 "tcc_bootstrap.c"
 case 228: 
 var $867=(($ret)|0); //@line 7646 "tcc_bootstrap.c"
 var $868=$addr; //@line 7646 "tcc_bootstrap.c"
 var $869=$offset; //@line 7646 "tcc_bootstrap.c"
 var $870=((($868)+($869))|0); //@line 7646 "tcc_bootstrap.c"
 _vset($867,306,$870); //@line 7646 "tcc_bootstrap.c"
 _vswap(); //@line 7647 "tcc_bootstrap.c"
 _vstore(); //@line 7648 "tcc_bootstrap.c"
 var $871=HEAP32[((9288)>>2)]; //@line 7649 "tcc_bootstrap.c"
 var $872=((($871)-(40))|0); //@line 7649 "tcc_bootstrap.c"
 HEAP32[((9288)>>2)]=$872; //@line 7649 "tcc_bootstrap.c"
 var $873=$ret_nregs; //@line 7650 "tcc_bootstrap.c"
 var $874=((($873)-(1))|0); //@line 7650 "tcc_bootstrap.c"
 $ret_nregs=$874; //@line 7650 "tcc_bootstrap.c"
 var $875=($874|0)==0; //@line 7650 "tcc_bootstrap.c"
 if($875){label=229;break;}else{label=230;break;} //@line 7650 "tcc_bootstrap.c"
 case 229: 
 label=231;break; //@line 7651 "tcc_bootstrap.c"
 case 230: 
 var $878=HEAP32[(($regsize)>>2)]; //@line 7652 "tcc_bootstrap.c"
 var $879=$offset; //@line 7652 "tcc_bootstrap.c"
 var $880=((($879)+($878))|0); //@line 7652 "tcc_bootstrap.c"
 $offset=$880; //@line 7652 "tcc_bootstrap.c"
 label=228;break; //@line 7653 "tcc_bootstrap.c"
 case 231: 
 var $882=$s; //@line 7654 "tcc_bootstrap.c"
 var $883=(($882+16)|0); //@line 7654 "tcc_bootstrap.c"
 var $884=$addr; //@line 7654 "tcc_bootstrap.c"
 _vset($883,306,$884); //@line 7654 "tcc_bootstrap.c"
 label=232;break; //@line 7655 "tcc_bootstrap.c"
 case 232: 
 label=234;break; //@line 7656 "tcc_bootstrap.c"
 case 233: 
 label=239;break; //@line 7657 "tcc_bootstrap.c"
 case 234: 
 label=235;break;
 case 235: 
 label=236;break;
 case 236: 
 label=237;break;
 case 237: 
 label=238;break;
 case 238: 
 label=164;break; //@line 7659 "tcc_bootstrap.c"
 case 239: 
 STACKTOP=sp;return; //@line 7657 "tcc_bootstrap.c"
  default: assert(0, "bad label: " + label);
 }

}


function _decl_initializer_alloc($type,$ad,$r,$has_init,$v,$scope){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 var $size;
 var $align=sp;
 var $addr;
 var $init_str=(sp)+(8);
 var $sec;
 var $flexible_array;
 var $sym;
 var $saved_nocode_wanted;
 var $bcheck;
 var $field;
 var $speca;
 var $oldreloc_offset;
 $1=$type;
 $2=$ad;
 $3=$r;
 $4=$has_init;
 $5=$v;
 $6=$scope;
 HEAP32[(($init_str)>>2)]=0; //@line 8862 "tcc_bootstrap.c"
 $sym=0; //@line 8865 "tcc_bootstrap.c"
 var $7=HEAP32[((10616)>>2)]; //@line 8866 "tcc_bootstrap.c"
 $saved_nocode_wanted=$7; //@line 8866 "tcc_bootstrap.c"
 $bcheck=0; //@line 8867 "tcc_bootstrap.c"
 var $8=$1; //@line 8868 "tcc_bootstrap.c"
 var $9=(($8)|0); //@line 8868 "tcc_bootstrap.c"
 var $10=HEAP32[(($9)>>2)]; //@line 8868 "tcc_bootstrap.c"
 var $11=$10&8192; //@line 8868 "tcc_bootstrap.c"
 var $12=($11|0)!=0; //@line 8868 "tcc_bootstrap.c"
 if($12){label=2;break;}else{label=3;break;} //@line 8868 "tcc_bootstrap.c"
 case 2: 
 var $14=HEAP32[((10616)>>2)]; //@line 8869 "tcc_bootstrap.c"
 var $15=($14|0)>0; //@line 8869 "tcc_bootstrap.c"
 var $16=($15?1073741824:-2147483648); //@line 8869 "tcc_bootstrap.c"
 var $17=HEAP32[((10616)>>2)]; //@line 8869 "tcc_bootstrap.c"
 var $18=$17|$16; //@line 8869 "tcc_bootstrap.c"
 HEAP32[((10616)>>2)]=$18; //@line 8869 "tcc_bootstrap.c"
 label=3;break; //@line 8869 "tcc_bootstrap.c"
 case 3: 
 $flexible_array=0; //@line 8870 "tcc_bootstrap.c"
 var $20=$1; //@line 8871 "tcc_bootstrap.c"
 var $21=(($20)|0); //@line 8871 "tcc_bootstrap.c"
 var $22=HEAP32[(($21)>>2)]; //@line 8871 "tcc_bootstrap.c"
 var $23=$22&15; //@line 8871 "tcc_bootstrap.c"
 var $24=($23|0)==7; //@line 8871 "tcc_bootstrap.c"
 if($24){label=4;break;}else{label=13;break;} //@line 8871 "tcc_bootstrap.c"
 case 4: 
 var $26=$1; //@line 8872 "tcc_bootstrap.c"
 var $27=(($26+4)|0); //@line 8872 "tcc_bootstrap.c"
 var $28=HEAP32[(($27)>>2)]; //@line 8872 "tcc_bootstrap.c"
 var $29=(($28+24)|0); //@line 8872 "tcc_bootstrap.c"
 var $30=$29; //@line 8872 "tcc_bootstrap.c"
 var $31=HEAP32[(($30)>>2)]; //@line 8872 "tcc_bootstrap.c"
 $field=$31; //@line 8872 "tcc_bootstrap.c"
 var $32=$field; //@line 8873 "tcc_bootstrap.c"
 var $33=($32|0)!=0; //@line 8873 "tcc_bootstrap.c"
 if($33){label=5;break;}else{label=12;break;} //@line 8873 "tcc_bootstrap.c"
 case 5: 
 label=6;break; //@line 8874 "tcc_bootstrap.c"
 case 6: 
 var $36=$field; //@line 8874 "tcc_bootstrap.c"
 var $37=(($36+24)|0); //@line 8874 "tcc_bootstrap.c"
 var $38=$37; //@line 8874 "tcc_bootstrap.c"
 var $39=HEAP32[(($38)>>2)]; //@line 8874 "tcc_bootstrap.c"
 var $40=($39|0)!=0; //@line 8874 "tcc_bootstrap.c"
 if($40){label=7;break;}else{label=8;break;} //@line 8874 "tcc_bootstrap.c"
 case 7: 
 var $42=$field; //@line 8875 "tcc_bootstrap.c"
 var $43=(($42+24)|0); //@line 8875 "tcc_bootstrap.c"
 var $44=$43; //@line 8875 "tcc_bootstrap.c"
 var $45=HEAP32[(($44)>>2)]; //@line 8875 "tcc_bootstrap.c"
 $field=$45; //@line 8875 "tcc_bootstrap.c"
 label=6;break; //@line 8875 "tcc_bootstrap.c"
 case 8: 
 var $47=$field; //@line 8876 "tcc_bootstrap.c"
 var $48=(($47+16)|0); //@line 8876 "tcc_bootstrap.c"
 var $49=(($48)|0); //@line 8876 "tcc_bootstrap.c"
 var $50=HEAP32[(($49)>>2)]; //@line 8876 "tcc_bootstrap.c"
 var $51=$50&64; //@line 8876 "tcc_bootstrap.c"
 var $52=($51|0)!=0; //@line 8876 "tcc_bootstrap.c"
 if($52){label=9;break;}else{label=11;break;} //@line 8876 "tcc_bootstrap.c"
 case 9: 
 var $54=$field; //@line 8876 "tcc_bootstrap.c"
 var $55=(($54+16)|0); //@line 8876 "tcc_bootstrap.c"
 var $56=(($55+4)|0); //@line 8876 "tcc_bootstrap.c"
 var $57=HEAP32[(($56)>>2)]; //@line 8876 "tcc_bootstrap.c"
 var $58=(($57+8)|0); //@line 8876 "tcc_bootstrap.c"
 var $59=$58; //@line 8876 "tcc_bootstrap.c"
 var $60=(($59)|0); //@line 8876 "tcc_bootstrap.c"
 var $61=HEAP32[(($60)>>2)]; //@line 8876 "tcc_bootstrap.c"
 var $62=($61|0)<0; //@line 8876 "tcc_bootstrap.c"
 if($62){label=10;break;}else{label=11;break;} //@line 8876 "tcc_bootstrap.c"
 case 10: 
 var $64=$field; //@line 8877 "tcc_bootstrap.c"
 $flexible_array=$64; //@line 8877 "tcc_bootstrap.c"
 label=11;break; //@line 8877 "tcc_bootstrap.c"
 case 11: 
 label=12;break; //@line 8878 "tcc_bootstrap.c"
 case 12: 
 label=13;break; //@line 8879 "tcc_bootstrap.c"
 case 13: 
 var $68=$1; //@line 8880 "tcc_bootstrap.c"
 var $69=_type_size($68,$align); //@line 8880 "tcc_bootstrap.c"
 $size=$69; //@line 8880 "tcc_bootstrap.c"
 var $70=$size; //@line 8881 "tcc_bootstrap.c"
 var $71=($70|0)<0; //@line 8881 "tcc_bootstrap.c"
 if($71){label=16;break;}else{label=14;break;} //@line 8881 "tcc_bootstrap.c"
 case 14: 
 var $73=$flexible_array; //@line 8881 "tcc_bootstrap.c"
 var $74=($73|0)!=0; //@line 8881 "tcc_bootstrap.c"
 if($74){label=15;break;}else{label=29;break;} //@line 8881 "tcc_bootstrap.c"
 case 15: 
 var $76=$4; //@line 8881 "tcc_bootstrap.c"
 var $77=($76|0)!=0; //@line 8881 "tcc_bootstrap.c"
 if($77){label=16;break;}else{label=29;break;} //@line 8881 "tcc_bootstrap.c"
 case 16: 
 var $79=$4; //@line 8882 "tcc_bootstrap.c"
 var $80=($79|0)!=0; //@line 8882 "tcc_bootstrap.c"
 if($80){label=18;break;}else{label=17;break;} //@line 8882 "tcc_bootstrap.c"
 case 17: 
 _tcc_error(5768,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs; //@line 8883 "tcc_bootstrap.c"
 label=18;break; //@line 8883 "tcc_bootstrap.c"
 case 18: 
 var $83=$4; //@line 8884 "tcc_bootstrap.c"
 var $84=($83|0)==2; //@line 8884 "tcc_bootstrap.c"
 if($84){label=19;break;}else{label=25;break;} //@line 8884 "tcc_bootstrap.c"
 case 19: 
 var $86=_tok_str_alloc(); //@line 8885 "tcc_bootstrap.c"
 HEAP32[(($init_str)>>2)]=$86; //@line 8885 "tcc_bootstrap.c"
 label=20;break; //@line 8886 "tcc_bootstrap.c"
 case 20: 
 var $88=HEAP32[((10472)>>2)]; //@line 8886 "tcc_bootstrap.c"
 var $89=($88|0)==185; //@line 8886 "tcc_bootstrap.c"
 if($89){var $94=1;label=22;break;}else{label=21;break;} //@line 8886 "tcc_bootstrap.c"
 case 21: 
 var $91=HEAP32[((10472)>>2)]; //@line 8886 "tcc_bootstrap.c"
 var $92=($91|0)==186; //@line 8886 "tcc_bootstrap.c"
 var $94=$92;label=22;break; //@line 8886 "tcc_bootstrap.c"
 case 22: 
 var $94;
 if($94){label=23;break;}else{label=24;break;} //@line 8886 "tcc_bootstrap.c"
 case 23: 
 var $96=HEAP32[(($init_str)>>2)]; //@line 8887 "tcc_bootstrap.c"
 _tok_str_add_tok($96); //@line 8887 "tcc_bootstrap.c"
 _next(); //@line 8888 "tcc_bootstrap.c"
 label=20;break; //@line 8889 "tcc_bootstrap.c"
 case 24: 
 var $98=HEAP32[(($init_str)>>2)]; //@line 8890 "tcc_bootstrap.c"
 _tok_str_add($98,-1); //@line 8890 "tcc_bootstrap.c"
 var $99=HEAP32[(($init_str)>>2)]; //@line 8891 "tcc_bootstrap.c"
 _tok_str_add($99,0); //@line 8891 "tcc_bootstrap.c"
 label=26;break; //@line 8892 "tcc_bootstrap.c"
 case 25: 
 _skip_or_save_block($init_str); //@line 8893 "tcc_bootstrap.c"
 label=26;break;
 case 26: 
 _unget_tok(0); //@line 8895 "tcc_bootstrap.c"
 var $102=HEAP32[(($init_str)>>2)]; //@line 8896 "tcc_bootstrap.c"
 _begin_macro($102,1); //@line 8896 "tcc_bootstrap.c"
 _next(); //@line 8897 "tcc_bootstrap.c"
 var $103=$1; //@line 8898 "tcc_bootstrap.c"
 _decl_initializer($103,0,0,1,1); //@line 8898 "tcc_bootstrap.c"
 var $104=HEAP32[(($init_str)>>2)]; //@line 8899 "tcc_bootstrap.c"
 var $105=(($104)|0); //@line 8899 "tcc_bootstrap.c"
 var $106=HEAP32[(($105)>>2)]; //@line 8899 "tcc_bootstrap.c"
 HEAP32[((10680)>>2)]=$106; //@line 8899 "tcc_bootstrap.c"
 _next(); //@line 8900 "tcc_bootstrap.c"
 var $107=$1; //@line 8901 "tcc_bootstrap.c"
 var $108=_type_size($107,$align); //@line 8901 "tcc_bootstrap.c"
 $size=$108; //@line 8901 "tcc_bootstrap.c"
 var $109=$size; //@line 8902 "tcc_bootstrap.c"
 var $110=($109|0)<0; //@line 8902 "tcc_bootstrap.c"
 if($110){label=27;break;}else{label=28;break;} //@line 8902 "tcc_bootstrap.c"
 case 27: 
 _tcc_error(5768,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs; //@line 8903 "tcc_bootstrap.c"
 label=28;break; //@line 8903 "tcc_bootstrap.c"
 case 28: 
 label=29;break; //@line 8904 "tcc_bootstrap.c"
 case 29: 
 var $114=$flexible_array; //@line 8905 "tcc_bootstrap.c"
 var $115=($114|0)!=0; //@line 8905 "tcc_bootstrap.c"
 if($115){label=30;break;}else{label=32;break;} //@line 8905 "tcc_bootstrap.c"
 case 30: 
 var $117=$flexible_array; //@line 8905 "tcc_bootstrap.c"
 var $118=(($117+16)|0); //@line 8905 "tcc_bootstrap.c"
 var $119=(($118+4)|0); //@line 8905 "tcc_bootstrap.c"
 var $120=HEAP32[(($119)>>2)]; //@line 8905 "tcc_bootstrap.c"
 var $121=(($120+8)|0); //@line 8905 "tcc_bootstrap.c"
 var $122=$121; //@line 8905 "tcc_bootstrap.c"
 var $123=(($122)|0); //@line 8905 "tcc_bootstrap.c"
 var $124=HEAP32[(($123)>>2)]; //@line 8905 "tcc_bootstrap.c"
 var $125=($124|0)>0; //@line 8905 "tcc_bootstrap.c"
 if($125){label=31;break;}else{label=32;break;} //@line 8905 "tcc_bootstrap.c"
 case 31: 
 var $127=$flexible_array; //@line 8907 "tcc_bootstrap.c"
 var $128=(($127+16)|0); //@line 8907 "tcc_bootstrap.c"
 var $129=(($128+4)|0); //@line 8907 "tcc_bootstrap.c"
 var $130=HEAP32[(($129)>>2)]; //@line 8907 "tcc_bootstrap.c"
 var $131=(($130+8)|0); //@line 8907 "tcc_bootstrap.c"
 var $132=$131; //@line 8907 "tcc_bootstrap.c"
 var $133=(($132)|0); //@line 8907 "tcc_bootstrap.c"
 var $134=HEAP32[(($133)>>2)]; //@line 8907 "tcc_bootstrap.c"
 var $135=$flexible_array; //@line 8908 "tcc_bootstrap.c"
 var $136=(($135+16)|0); //@line 8908 "tcc_bootstrap.c"
 var $137=_pointed_size($136); //@line 8908 "tcc_bootstrap.c"
 var $138=(Math_imul($134,$137)|0); //@line 8908 "tcc_bootstrap.c"
 var $139=$size; //@line 8908 "tcc_bootstrap.c"
 var $140=((($139)+($138))|0); //@line 8908 "tcc_bootstrap.c"
 $size=$140; //@line 8908 "tcc_bootstrap.c"
 label=32;break; //@line 8908 "tcc_bootstrap.c"
 case 32: 
 var $142=$2; //@line 8909 "tcc_bootstrap.c"
 var $143=(($142)|0); //@line 8909 "tcc_bootstrap.c"
 var $144=$143; //@line 8909 "tcc_bootstrap.c"
 var $145=HEAP16[(($144)>>1)]; //@line 8909 "tcc_bootstrap.c"
 var $146=$145&31; //@line 8909 "tcc_bootstrap.c"
 var $147=(($146<<16)>>16)!=0; //@line 8909 "tcc_bootstrap.c"
 if($147){label=33;break;}else{label=36;break;} //@line 8909 "tcc_bootstrap.c"
 case 33: 
 var $149=$2; //@line 8910 "tcc_bootstrap.c"
 var $150=(($149)|0); //@line 8910 "tcc_bootstrap.c"
 var $151=$150; //@line 8910 "tcc_bootstrap.c"
 var $152=HEAP16[(($151)>>1)]; //@line 8910 "tcc_bootstrap.c"
 var $153=$152&31; //@line 8910 "tcc_bootstrap.c"
 var $154=($153&65535); //@line 8910 "tcc_bootstrap.c"
 var $155=((($154)-(1))|0); //@line 8910 "tcc_bootstrap.c"
 var $156=1<<$155; //@line 8910 "tcc_bootstrap.c"
 $speca=$156; //@line 8910 "tcc_bootstrap.c"
 var $157=$speca; //@line 8911 "tcc_bootstrap.c"
 var $158=HEAP32[(($align)>>2)]; //@line 8911 "tcc_bootstrap.c"
 var $159=($157|0)>($158|0); //@line 8911 "tcc_bootstrap.c"
 if($159){label=34;break;}else{label=35;break;} //@line 8911 "tcc_bootstrap.c"
 case 34: 
 var $161=$speca; //@line 8912 "tcc_bootstrap.c"
 HEAP32[(($align)>>2)]=$161; //@line 8912 "tcc_bootstrap.c"
 label=35;break; //@line 8912 "tcc_bootstrap.c"
 case 35: 
 label=39;break; //@line 8913 "tcc_bootstrap.c"
 case 36: 
 var $164=$2; //@line 8913 "tcc_bootstrap.c"
 var $165=(($164)|0); //@line 8913 "tcc_bootstrap.c"
 var $166=$165; //@line 8913 "tcc_bootstrap.c"
 var $167=HEAP16[(($166)>>1)]; //@line 8913 "tcc_bootstrap.c"
 var $168=($167&65535)>>>5; //@line 8913 "tcc_bootstrap.c"
 var $169=$168&1; //@line 8913 "tcc_bootstrap.c"
 var $170=(($169<<16)>>16)!=0; //@line 8913 "tcc_bootstrap.c"
 if($170){label=37;break;}else{label=38;break;} //@line 8913 "tcc_bootstrap.c"
 case 37: 
 HEAP32[(($align)>>2)]=1; //@line 8914 "tcc_bootstrap.c"
 label=38;break; //@line 8915 "tcc_bootstrap.c"
 case 38: 
 label=39;break;
 case 39: 
 var $174=HEAP32[((10616)>>2)]; //@line 8916 "tcc_bootstrap.c"
 var $175=($174|0)>0; //@line 8916 "tcc_bootstrap.c"
 if($175){label=40;break;}else{label=41;break;} //@line 8916 "tcc_bootstrap.c"
 case 40: 
 $size=0; //@line 8917 "tcc_bootstrap.c"
 HEAP32[(($align)>>2)]=1; //@line 8917 "tcc_bootstrap.c"
 label=41;break; //@line 8917 "tcc_bootstrap.c"
 case 41: 
 var $178=$3; //@line 8918 "tcc_bootstrap.c"
 var $179=$178&63; //@line 8918 "tcc_bootstrap.c"
 var $180=($179|0)==50; //@line 8918 "tcc_bootstrap.c"
 if($180){label=42;break;}else{label=46;break;} //@line 8918 "tcc_bootstrap.c"
 case 42: 
 $sec=0; //@line 8919 "tcc_bootstrap.c"
 var $182=HEAP32[((10728)>>2)]; //@line 8920 "tcc_bootstrap.c"
 var $183=$size; //@line 8920 "tcc_bootstrap.c"
 var $184=((($182)-($183))|0); //@line 8920 "tcc_bootstrap.c"
 var $185=HEAP32[(($align)>>2)]; //@line 8920 "tcc_bootstrap.c"
 var $186=(((-$185))|0); //@line 8920 "tcc_bootstrap.c"
 var $187=$184&$186; //@line 8920 "tcc_bootstrap.c"
 HEAP32[((10728)>>2)]=$187; //@line 8920 "tcc_bootstrap.c"
 var $188=HEAP32[((10728)>>2)]; //@line 8921 "tcc_bootstrap.c"
 $addr=$188; //@line 8921 "tcc_bootstrap.c"
 var $189=$5; //@line 8922 "tcc_bootstrap.c"
 var $190=($189|0)!=0; //@line 8922 "tcc_bootstrap.c"
 if($190){label=43;break;}else{label=44;break;} //@line 8922 "tcc_bootstrap.c"
 case 43: 
 var $192=$5; //@line 8923 "tcc_bootstrap.c"
 var $193=$1; //@line 8923 "tcc_bootstrap.c"
 var $194=$3; //@line 8923 "tcc_bootstrap.c"
 var $195=$addr; //@line 8923 "tcc_bootstrap.c"
 var $196=_sym_push($192,$193,$194,$195); //@line 8923 "tcc_bootstrap.c"
 $sym=$196; //@line 8923 "tcc_bootstrap.c"
 var $197=$sym; //@line 8924 "tcc_bootstrap.c"
 var $198=(($197+6)|0); //@line 8924 "tcc_bootstrap.c"
 var $199=$2; //@line 8924 "tcc_bootstrap.c"
 var $200=(($199)|0); //@line 8924 "tcc_bootstrap.c"
 var $201=$198; //@line 8924 "tcc_bootstrap.c"
 var $202=$200; //@line 8924 "tcc_bootstrap.c"
 assert(2 % 1 === 0);HEAP16[(($201)>>1)]=HEAP16[(($202)>>1)]; //@line 8924 "tcc_bootstrap.c"
 label=45;break; //@line 8925 "tcc_bootstrap.c"
 case 44: 
 var $204=$1; //@line 8926 "tcc_bootstrap.c"
 var $205=$3; //@line 8926 "tcc_bootstrap.c"
 var $206=$addr; //@line 8926 "tcc_bootstrap.c"
 _vset($204,$205,$206); //@line 8926 "tcc_bootstrap.c"
 label=45;break;
 case 45: 
 label=68;break; //@line 8928 "tcc_bootstrap.c"
 case 46: 
 var $209=$5; //@line 8929 "tcc_bootstrap.c"
 var $210=($209|0)!=0; //@line 8929 "tcc_bootstrap.c"
 if($210){label=47;break;}else{label=55;break;} //@line 8929 "tcc_bootstrap.c"
 case 47: 
 var $212=$6; //@line 8929 "tcc_bootstrap.c"
 var $213=($212|0)==48; //@line 8929 "tcc_bootstrap.c"
 if($213){label=48;break;}else{label=55;break;} //@line 8929 "tcc_bootstrap.c"
 case 48: 
 var $215=$5; //@line 8930 "tcc_bootstrap.c"
 var $216=_sym_find($215); //@line 8930 "tcc_bootstrap.c"
 $sym=$216; //@line 8930 "tcc_bootstrap.c"
 var $217=$sym; //@line 8931 "tcc_bootstrap.c"
 var $218=($217|0)!=0; //@line 8931 "tcc_bootstrap.c"
 if($218){label=49;break;}else{label=54;break;} //@line 8931 "tcc_bootstrap.c"
 case 49: 
 var $220=$sym; //@line 8932 "tcc_bootstrap.c"
 var $221=$2; //@line 8932 "tcc_bootstrap.c"
 var $222=$1; //@line 8932 "tcc_bootstrap.c"
 _patch_storage($220,$221,$222); //@line 8932 "tcc_bootstrap.c"
 var $223=$4; //@line 8933 "tcc_bootstrap.c"
 var $224=($223|0)!=0; //@line 8933 "tcc_bootstrap.c"
 if($224){label=53;break;}else{label=50;break;} //@line 8933 "tcc_bootstrap.c"
 case 50: 
 var $226=$sym; //@line 8933 "tcc_bootstrap.c"
 var $227=(($226+8)|0); //@line 8933 "tcc_bootstrap.c"
 var $228=$227; //@line 8933 "tcc_bootstrap.c"
 var $229=(($228)|0); //@line 8933 "tcc_bootstrap.c"
 var $230=HEAP32[(($229)>>2)]; //@line 8933 "tcc_bootstrap.c"
 var $231=($230|0)!=0; //@line 8933 "tcc_bootstrap.c"
 if($231){label=51;break;}else{label=53;break;} //@line 8933 "tcc_bootstrap.c"
 case 51: 
 var $233=$sym; //@line 8933 "tcc_bootstrap.c"
 var $234=_elfsym($233); //@line 8933 "tcc_bootstrap.c"
 var $235=(($234+14)|0); //@line 8933 "tcc_bootstrap.c"
 var $236=HEAP16[(($235)>>1)]; //@line 8933 "tcc_bootstrap.c"
 var $237=($236&65535); //@line 8933 "tcc_bootstrap.c"
 var $238=($237|0)!=0; //@line 8933 "tcc_bootstrap.c"
 if($238){label=52;break;}else{label=53;break;} //@line 8933 "tcc_bootstrap.c"
 case 52: 
 label=79;break; //@line 8934 "tcc_bootstrap.c"
 case 53: 
 label=54;break; //@line 8935 "tcc_bootstrap.c"
 case 54: 
 label=55;break; //@line 8936 "tcc_bootstrap.c"
 case 55: 
 var $243=$2; //@line 8937 "tcc_bootstrap.c"
 var $244=(($243+8)|0); //@line 8937 "tcc_bootstrap.c"
 var $245=HEAP32[(($244)>>2)]; //@line 8937 "tcc_bootstrap.c"
 $sec=$245; //@line 8937 "tcc_bootstrap.c"
 var $246=$sec; //@line 8938 "tcc_bootstrap.c"
 var $247=($246|0)!=0; //@line 8938 "tcc_bootstrap.c"
 if($247){label=59;break;}else{label=56;break;} //@line 8938 "tcc_bootstrap.c"
 case 56: 
 var $249=$4; //@line 8939 "tcc_bootstrap.c"
 var $250=($249|0)!=0; //@line 8939 "tcc_bootstrap.c"
 if($250){label=57;break;}else{label=58;break;} //@line 8939 "tcc_bootstrap.c"
 case 57: 
 var $252=HEAP32[((76664)>>2)]; //@line 8940 "tcc_bootstrap.c"
 $sec=$252; //@line 8940 "tcc_bootstrap.c"
 label=58;break; //@line 8940 "tcc_bootstrap.c"
 case 58: 
 label=59;break; //@line 8941 "tcc_bootstrap.c"
 case 59: 
 var $255=$sec; //@line 8942 "tcc_bootstrap.c"
 var $256=($255|0)!=0; //@line 8942 "tcc_bootstrap.c"
 if($256){label=60;break;}else{label=61;break;} //@line 8942 "tcc_bootstrap.c"
 case 60: 
 var $258=$sec; //@line 8943 "tcc_bootstrap.c"
 var $259=$size; //@line 8943 "tcc_bootstrap.c"
 var $260=HEAP32[(($align)>>2)]; //@line 8943 "tcc_bootstrap.c"
 var $261=_section_add($258,$259,$260); //@line 8943 "tcc_bootstrap.c"
 $addr=$261; //@line 8943 "tcc_bootstrap.c"
 label=62;break; //@line 8944 "tcc_bootstrap.c"
 case 61: 
 var $263=HEAP32[(($align)>>2)]; //@line 8945 "tcc_bootstrap.c"
 $addr=$263; //@line 8945 "tcc_bootstrap.c"
 var $264=HEAP32[((76720)>>2)]; //@line 8946 "tcc_bootstrap.c"
 $sec=$264; //@line 8946 "tcc_bootstrap.c"
 label=62;break;
 case 62: 
 var $266=$5; //@line 8948 "tcc_bootstrap.c"
 var $267=($266|0)!=0; //@line 8948 "tcc_bootstrap.c"
 if($267){label=63;break;}else{label=66;break;} //@line 8948 "tcc_bootstrap.c"
 case 63: 
 var $269=$sym; //@line 8949 "tcc_bootstrap.c"
 var $270=($269|0)!=0; //@line 8949 "tcc_bootstrap.c"
 if($270){label=65;break;}else{label=64;break;} //@line 8949 "tcc_bootstrap.c"
 case 64: 
 var $272=$5; //@line 8950 "tcc_bootstrap.c"
 var $273=$1; //@line 8950 "tcc_bootstrap.c"
 var $274=$3; //@line 8950 "tcc_bootstrap.c"
 var $275=$274|512; //@line 8950 "tcc_bootstrap.c"
 var $276=_sym_push($272,$273,$275,0); //@line 8950 "tcc_bootstrap.c"
 $sym=$276; //@line 8950 "tcc_bootstrap.c"
 var $277=$sym; //@line 8951 "tcc_bootstrap.c"
 var $278=$2; //@line 8951 "tcc_bootstrap.c"
 _patch_storage($277,$278,0); //@line 8951 "tcc_bootstrap.c"
 label=65;break; //@line 8952 "tcc_bootstrap.c"
 case 65: 
 var $280=$sym; //@line 8953 "tcc_bootstrap.c"
 var $281=(($280+8)|0); //@line 8953 "tcc_bootstrap.c"
 var $282=$281; //@line 8953 "tcc_bootstrap.c"
 var $283=(($282+4)|0); //@line 8953 "tcc_bootstrap.c"
 var $284=$283; //@line 8953 "tcc_bootstrap.c"
 HEAP32[(($284)>>2)]=0; //@line 8953 "tcc_bootstrap.c"
 var $285=$sym; //@line 8954 "tcc_bootstrap.c"
 var $286=$sec; //@line 8954 "tcc_bootstrap.c"
 var $287=$addr; //@line 8954 "tcc_bootstrap.c"
 var $288=$size; //@line 8954 "tcc_bootstrap.c"
 _put_extern_sym($285,$286,$287,$288); //@line 8954 "tcc_bootstrap.c"
 label=67;break; //@line 8955 "tcc_bootstrap.c"
 case 66: 
 var $290=$1; //@line 8956 "tcc_bootstrap.c"
 var $291=$sec; //@line 8956 "tcc_bootstrap.c"
 var $292=$addr; //@line 8956 "tcc_bootstrap.c"
 var $293=$size; //@line 8956 "tcc_bootstrap.c"
 var $294=_get_sym_ref($290,$291,$292,$293); //@line 8956 "tcc_bootstrap.c"
 $sym=$294; //@line 8956 "tcc_bootstrap.c"
 var $295=$1; //@line 8957 "tcc_bootstrap.c"
 var $296=$sym; //@line 8957 "tcc_bootstrap.c"
 _vpushsym($295,$296); //@line 8957 "tcc_bootstrap.c"
 var $297=$3; //@line 8958 "tcc_bootstrap.c"
 var $298=HEAP32[((9288)>>2)]; //@line 8958 "tcc_bootstrap.c"
 var $299=(($298+8)|0); //@line 8958 "tcc_bootstrap.c"
 var $300=HEAP16[(($299)>>1)]; //@line 8958 "tcc_bootstrap.c"
 var $301=($300&65535); //@line 8958 "tcc_bootstrap.c"
 var $302=$301|$297; //@line 8958 "tcc_bootstrap.c"
 var $303=(($302)&65535); //@line 8958 "tcc_bootstrap.c"
 HEAP16[(($299)>>1)]=$303; //@line 8958 "tcc_bootstrap.c"
 label=67;break;
 case 67: 
 label=68;break;
 case 68: 
 var $306=$4; //@line 8961 "tcc_bootstrap.c"
 var $307=($306|0)!=0; //@line 8961 "tcc_bootstrap.c"
 if($307){label=69;break;}else{label=78;break;} //@line 8961 "tcc_bootstrap.c"
 case 69: 
 $oldreloc_offset=0; //@line 8962 "tcc_bootstrap.c"
 var $309=$sec; //@line 8963 "tcc_bootstrap.c"
 var $310=($309|0)!=0; //@line 8963 "tcc_bootstrap.c"
 if($310){label=70;break;}else{label=72;break;} //@line 8963 "tcc_bootstrap.c"
 case 70: 
 var $312=$sec; //@line 8963 "tcc_bootstrap.c"
 var $313=(($312+60)|0); //@line 8963 "tcc_bootstrap.c"
 var $314=HEAP32[(($313)>>2)]; //@line 8963 "tcc_bootstrap.c"
 var $315=($314|0)!=0; //@line 8963 "tcc_bootstrap.c"
 if($315){label=71;break;}else{label=72;break;} //@line 8963 "tcc_bootstrap.c"
 case 71: 
 var $317=$sec; //@line 8964 "tcc_bootstrap.c"
 var $318=(($317+60)|0); //@line 8964 "tcc_bootstrap.c"
 var $319=HEAP32[(($318)>>2)]; //@line 8964 "tcc_bootstrap.c"
 var $320=(($319)|0); //@line 8964 "tcc_bootstrap.c"
 var $321=HEAP32[(($320)>>2)]; //@line 8964 "tcc_bootstrap.c"
 $oldreloc_offset=$321; //@line 8964 "tcc_bootstrap.c"
 label=72;break; //@line 8964 "tcc_bootstrap.c"
 case 72: 
 var $323=$1; //@line 8965 "tcc_bootstrap.c"
 var $324=$sec; //@line 8965 "tcc_bootstrap.c"
 var $325=$addr; //@line 8965 "tcc_bootstrap.c"
 _decl_initializer($323,$324,$325,1,0); //@line 8965 "tcc_bootstrap.c"
 var $326=$sec; //@line 8966 "tcc_bootstrap.c"
 var $327=($326|0)!=0; //@line 8966 "tcc_bootstrap.c"
 if($327){label=73;break;}else{label=75;break;} //@line 8966 "tcc_bootstrap.c"
 case 73: 
 var $329=$sec; //@line 8966 "tcc_bootstrap.c"
 var $330=(($329+60)|0); //@line 8966 "tcc_bootstrap.c"
 var $331=HEAP32[(($330)>>2)]; //@line 8966 "tcc_bootstrap.c"
 var $332=($331|0)!=0; //@line 8966 "tcc_bootstrap.c"
 if($332){label=74;break;}else{label=75;break;} //@line 8966 "tcc_bootstrap.c"
 case 74: 
 var $334=$sec; //@line 8967 "tcc_bootstrap.c"
 var $335=$oldreloc_offset; //@line 8967 "tcc_bootstrap.c"
 _squeeze_multi_relocs($334,$335); //@line 8967 "tcc_bootstrap.c"
 label=75;break; //@line 8968 "tcc_bootstrap.c"
 case 75: 
 var $337=$flexible_array; //@line 8969 "tcc_bootstrap.c"
 var $338=($337|0)!=0; //@line 8969 "tcc_bootstrap.c"
 if($338){label=76;break;}else{label=77;break;} //@line 8969 "tcc_bootstrap.c"
 case 76: 
 var $340=$flexible_array; //@line 8970 "tcc_bootstrap.c"
 var $341=(($340+16)|0); //@line 8970 "tcc_bootstrap.c"
 var $342=(($341+4)|0); //@line 8970 "tcc_bootstrap.c"
 var $343=HEAP32[(($342)>>2)]; //@line 8970 "tcc_bootstrap.c"
 var $344=(($343+8)|0); //@line 8970 "tcc_bootstrap.c"
 var $345=$344; //@line 8970 "tcc_bootstrap.c"
 var $346=(($345)|0); //@line 8970 "tcc_bootstrap.c"
 HEAP32[(($346)>>2)]=-1; //@line 8970 "tcc_bootstrap.c"
 label=77;break; //@line 8970 "tcc_bootstrap.c"
 case 77: 
 label=78;break; //@line 8971 "tcc_bootstrap.c"
 case 78: 
 label=79;break; //@line 8971 "tcc_bootstrap.c"
 case 79: 
 var $350=HEAP32[(($init_str)>>2)]; //@line 8973 "tcc_bootstrap.c"
 var $351=($350|0)!=0; //@line 8973 "tcc_bootstrap.c"
 if($351){label=80;break;}else{label=81;break;} //@line 8973 "tcc_bootstrap.c"
 case 80: 
 _end_macro(); //@line 8974 "tcc_bootstrap.c"
 _next(); //@line 8975 "tcc_bootstrap.c"
 label=81;break; //@line 8976 "tcc_bootstrap.c"
 case 81: 
 var $354=$saved_nocode_wanted; //@line 8977 "tcc_bootstrap.c"
 HEAP32[((10616)>>2)]=$354; //@line 8977 "tcc_bootstrap.c"
 STACKTOP=sp;return; //@line 8978 "tcc_bootstrap.c"
  default: assert(0, "bad label: " + label);
 }

}


function _parse_btype($type,$ad){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $t;
 var $u;
 var $bt;
 var $st;
 var $type_found;
 var $typespec_found;
 var $g;
 var $s;
 var $type1=sp;
 $1=$type;
 $2=$ad;
 var $3=$2; //@line 6662 "tcc_bootstrap.c"
 var $4=$3; //@line 6662 "tcc_bootstrap.c"
 HEAP32[(($4)>>2)]=0; HEAP32[((($4)+(4))>>2)]=0; HEAP32[((($4)+(8))>>2)]=0; HEAP32[((($4)+(12))>>2)]=0; HEAP32[((($4)+(16))>>2)]=0; HEAP32[((($4)+(20))>>2)]=0; //@line 6662 "tcc_bootstrap.c"
 $type_found=0; //@line 6663 "tcc_bootstrap.c"
 $typespec_found=0; //@line 6664 "tcc_bootstrap.c"
 $t=3; //@line 6665 "tcc_bootstrap.c"
 $st=-1; //@line 6666 "tcc_bootstrap.c"
 $bt=-1; //@line 6666 "tcc_bootstrap.c"
 var $5=$1; //@line 6667 "tcc_bootstrap.c"
 var $6=(($5+4)|0); //@line 6667 "tcc_bootstrap.c"
 HEAP32[(($6)>>2)]=0; //@line 6667 "tcc_bootstrap.c"
 label=2;break; //@line 6668 "tcc_bootstrap.c"
 case 2: 
 var $8=HEAP32[((10472)>>2)]; //@line 6669 "tcc_bootstrap.c"
 switch(($8|0)){case 257:{ label=22;break;}case 296:{ label=23;break;}case 256:{ label=24;break;}case 279:{ label=25;break;}case 291:{ label=3;break;}case 295:{ label=32;break;}case 293:{ label=33;break;}case 294:{ label=34;break;}case 301:{ label=38;break;}case 258:{ label=4;break;}case 297:{ label=40;break;}case 298:{ label=41;break;}case 273:case 274:case 275:{ label=42;break;}case 276:case 277:case 278:{ label=43;break;}case 281:case 282:case 283:{ label=44;break;}case 280:case 284:case 288:case 289:case 290:{ label=47;break;}case 267:{ label=48;break;}case 265:{ label=51;break;}case 266:{ label=52;break;}case 299:{ label=53;break;}case 285:case 286:case 287:{ label=57;break;}case 303:case 304:{ label=58;break;}case 307:case 308:case 309:{ label=61;break;}default:{label=64;break;}}break;
 case 3: 
 _next(); //@line 6671 "tcc_bootstrap.c"
 label=2;break; //@line 6672 "tcc_bootstrap.c"
 case 4: 
 $u=1; //@line 6674 "tcc_bootstrap.c"
 label=5;break; //@line 6674 "tcc_bootstrap.c"
 case 5: 
 _next(); //@line 6676 "tcc_bootstrap.c"
 label=6;break; //@line 6676 "tcc_bootstrap.c"
 case 6: 
 var $13=$u; //@line 6678 "tcc_bootstrap.c"
 var $14=($13|0)==2; //@line 6678 "tcc_bootstrap.c"
 if($14){label=8;break;}else{label=7;break;} //@line 6678 "tcc_bootstrap.c"
 case 7: 
 var $16=$u; //@line 6678 "tcc_bootstrap.c"
 var $17=($16|0)==2048; //@line 6678 "tcc_bootstrap.c"
 if($17){label=8;break;}else{label=14;break;} //@line 6678 "tcc_bootstrap.c"
 case 8: 
 var $19=$st; //@line 6679 "tcc_bootstrap.c"
 var $20=($19|0)!=-1; //@line 6679 "tcc_bootstrap.c"
 if($20){label=11;break;}else{label=9;break;} //@line 6679 "tcc_bootstrap.c"
 case 9: 
 var $22=$bt; //@line 6679 "tcc_bootstrap.c"
 var $23=($22|0)!=-1; //@line 6679 "tcc_bootstrap.c"
 if($23){label=10;break;}else{label=13;break;} //@line 6679 "tcc_bootstrap.c"
 case 10: 
 var $25=$bt; //@line 6679 "tcc_bootstrap.c"
 var $26=($25|0)!=3; //@line 6679 "tcc_bootstrap.c"
 if($26){label=11;break;}else{label=13;break;} //@line 6679 "tcc_bootstrap.c"
 case 11: 
 label=12;break; //@line 6679 "tcc_bootstrap.c"
 case 12: 
 _tcc_error(6256,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs; //@line 6680 "tcc_bootstrap.c"
 label=13;break; //@line 6680 "tcc_bootstrap.c"
 case 13: 
 var $30=$u; //@line 6681 "tcc_bootstrap.c"
 $st=$30; //@line 6681 "tcc_bootstrap.c"
 label=19;break; //@line 6682 "tcc_bootstrap.c"
 case 14: 
 var $32=$bt; //@line 6683 "tcc_bootstrap.c"
 var $33=($32|0)!=-1; //@line 6683 "tcc_bootstrap.c"
 if($33){label=17;break;}else{label=15;break;} //@line 6683 "tcc_bootstrap.c"
 case 15: 
 var $35=$st; //@line 6683 "tcc_bootstrap.c"
 var $36=($35|0)!=-1; //@line 6683 "tcc_bootstrap.c"
 if($36){label=16;break;}else{label=18;break;} //@line 6683 "tcc_bootstrap.c"
 case 16: 
 var $38=$u; //@line 6683 "tcc_bootstrap.c"
 var $39=($38|0)!=3; //@line 6683 "tcc_bootstrap.c"
 if($39){label=17;break;}else{label=18;break;} //@line 6683 "tcc_bootstrap.c"
 case 17: 
 label=12;break; //@line 6684 "tcc_bootstrap.c"
 case 18: 
 var $42=$u; //@line 6685 "tcc_bootstrap.c"
 $bt=$42; //@line 6685 "tcc_bootstrap.c"
 label=19;break;
 case 19: 
 var $44=$u; //@line 6687 "tcc_bootstrap.c"
 var $45=($44|0)!=3; //@line 6687 "tcc_bootstrap.c"
 if($45){label=20;break;}else{label=21;break;} //@line 6687 "tcc_bootstrap.c"
 case 20: 
 var $47=$t; //@line 6688 "tcc_bootstrap.c"
 var $48=$47&-2064; //@line 6688 "tcc_bootstrap.c"
 var $49=$u; //@line 6688 "tcc_bootstrap.c"
 var $50=$48|$49; //@line 6688 "tcc_bootstrap.c"
 $t=$50; //@line 6688 "tcc_bootstrap.c"
 label=21;break; //@line 6688 "tcc_bootstrap.c"
 case 21: 
 $typespec_found=1; //@line 6689 "tcc_bootstrap.c"
 label=72;break; //@line 6690 "tcc_bootstrap.c"
 case 22: 
 $u=0; //@line 6692 "tcc_bootstrap.c"
 label=5;break; //@line 6693 "tcc_bootstrap.c"
 case 23: 
 $u=2; //@line 6695 "tcc_bootstrap.c"
 label=5;break; //@line 6696 "tcc_bootstrap.c"
 case 24: 
 $u=3; //@line 6698 "tcc_bootstrap.c"
 label=5;break; //@line 6699 "tcc_bootstrap.c"
 case 25: 
 var $56=$t; //@line 6701 "tcc_bootstrap.c"
 var $57=$56&15; //@line 6701 "tcc_bootstrap.c"
 var $58=($57|0)==9; //@line 6701 "tcc_bootstrap.c"
 if($58){label=26;break;}else{label=27;break;} //@line 6701 "tcc_bootstrap.c"
 case 26: 
 var $60=$t; //@line 6702 "tcc_bootstrap.c"
 var $61=$60&-2064; //@line 6702 "tcc_bootstrap.c"
 var $62=$61|9; //@line 6702 "tcc_bootstrap.c"
 $t=$62; //@line 6702 "tcc_bootstrap.c"
 label=31;break; //@line 6703 "tcc_bootstrap.c"
 case 27: 
 var $64=$t; //@line 6703 "tcc_bootstrap.c"
 var $65=$64&2063; //@line 6703 "tcc_bootstrap.c"
 var $66=($65|0)==2048; //@line 6703 "tcc_bootstrap.c"
 if($66){label=28;break;}else{label=29;break;} //@line 6703 "tcc_bootstrap.c"
 case 28: 
 var $68=$t; //@line 6704 "tcc_bootstrap.c"
 var $69=$68&-2064; //@line 6704 "tcc_bootstrap.c"
 var $70=$69|4; //@line 6704 "tcc_bootstrap.c"
 $t=$70; //@line 6704 "tcc_bootstrap.c"
 label=30;break; //@line 6705 "tcc_bootstrap.c"
 case 29: 
 $u=2048; //@line 6706 "tcc_bootstrap.c"
 label=5;break; //@line 6707 "tcc_bootstrap.c"
 case 30: 
 label=31;break;
 case 31: 
 _next(); //@line 6709 "tcc_bootstrap.c"
 label=72;break; //@line 6710 "tcc_bootstrap.c"
 case 32: 
 $u=11; //@line 6712 "tcc_bootstrap.c"
 label=5;break; //@line 6713 "tcc_bootstrap.c"
 case 33: 
 $u=8; //@line 6715 "tcc_bootstrap.c"
 label=5;break; //@line 6716 "tcc_bootstrap.c"
 case 34: 
 var $77=$t; //@line 6718 "tcc_bootstrap.c"
 var $78=$77&2063; //@line 6718 "tcc_bootstrap.c"
 var $79=($78|0)==2048; //@line 6718 "tcc_bootstrap.c"
 if($79){label=35;break;}else{label=36;break;} //@line 6718 "tcc_bootstrap.c"
 case 35: 
 var $81=$t; //@line 6719 "tcc_bootstrap.c"
 var $82=$81&-2064; //@line 6719 "tcc_bootstrap.c"
 var $83=$82|10; //@line 6719 "tcc_bootstrap.c"
 $t=$83; //@line 6719 "tcc_bootstrap.c"
 label=37;break; //@line 6720 "tcc_bootstrap.c"
 case 36: 
 $u=9; //@line 6721 "tcc_bootstrap.c"
 label=5;break; //@line 6722 "tcc_bootstrap.c"
 case 37: 
 _next(); //@line 6724 "tcc_bootstrap.c"
 label=72;break; //@line 6725 "tcc_bootstrap.c"
 case 38: 
 _struct_decl($type1,2097152); //@line 6727 "tcc_bootstrap.c"
 label=39;break; //@line 6727 "tcc_bootstrap.c"
 case 39: 
 var $88=(($type1)|0); //@line 6729 "tcc_bootstrap.c"
 var $89=HEAP32[(($88)>>2)]; //@line 6729 "tcc_bootstrap.c"
 $u=$89; //@line 6729 "tcc_bootstrap.c"
 var $90=(($type1+4)|0); //@line 6730 "tcc_bootstrap.c"
 var $91=HEAP32[(($90)>>2)]; //@line 6730 "tcc_bootstrap.c"
 var $92=$1; //@line 6730 "tcc_bootstrap.c"
 var $93=(($92+4)|0); //@line 6730 "tcc_bootstrap.c"
 HEAP32[(($93)>>2)]=$91; //@line 6730 "tcc_bootstrap.c"
 label=6;break; //@line 6731 "tcc_bootstrap.c"
 case 40: 
 _struct_decl($type1,7); //@line 6733 "tcc_bootstrap.c"
 label=39;break; //@line 6734 "tcc_bootstrap.c"
 case 41: 
 _struct_decl($type1,1048583); //@line 6736 "tcc_bootstrap.c"
 label=39;break; //@line 6737 "tcc_bootstrap.c"
 case 42: 
 var $97=$t; //@line 6741 "tcc_bootstrap.c"
 var $98=$1; //@line 6741 "tcc_bootstrap.c"
 var $99=(($98)|0); //@line 6741 "tcc_bootstrap.c"
 HEAP32[(($99)>>2)]=$97; //@line 6741 "tcc_bootstrap.c"
 var $100=$1; //@line 6742 "tcc_bootstrap.c"
 _parse_btype_qualify($100,256); //@line 6742 "tcc_bootstrap.c"
 var $101=$1; //@line 6743 "tcc_bootstrap.c"
 var $102=(($101)|0); //@line 6743 "tcc_bootstrap.c"
 var $103=HEAP32[(($102)>>2)]; //@line 6743 "tcc_bootstrap.c"
 $t=$103; //@line 6743 "tcc_bootstrap.c"
 _next(); //@line 6744 "tcc_bootstrap.c"
 label=72;break; //@line 6745 "tcc_bootstrap.c"
 case 43: 
 var $105=$t; //@line 6749 "tcc_bootstrap.c"
 var $106=$1; //@line 6749 "tcc_bootstrap.c"
 var $107=(($106)|0); //@line 6749 "tcc_bootstrap.c"
 HEAP32[(($107)>>2)]=$105; //@line 6749 "tcc_bootstrap.c"
 var $108=$1; //@line 6750 "tcc_bootstrap.c"
 _parse_btype_qualify($108,512); //@line 6750 "tcc_bootstrap.c"
 var $109=$1; //@line 6751 "tcc_bootstrap.c"
 var $110=(($109)|0); //@line 6751 "tcc_bootstrap.c"
 var $111=HEAP32[(($110)>>2)]; //@line 6751 "tcc_bootstrap.c"
 $t=$111; //@line 6751 "tcc_bootstrap.c"
 _next(); //@line 6752 "tcc_bootstrap.c"
 label=72;break; //@line 6753 "tcc_bootstrap.c"
 case 44: 
 var $113=$t; //@line 6757 "tcc_bootstrap.c"
 var $114=$113&48; //@line 6757 "tcc_bootstrap.c"
 var $115=($114|0)==48; //@line 6757 "tcc_bootstrap.c"
 if($115){label=45;break;}else{label=46;break;} //@line 6757 "tcc_bootstrap.c"
 case 45: 
 _tcc_error(6224,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs; //@line 6758 "tcc_bootstrap.c"
 label=46;break; //@line 6758 "tcc_bootstrap.c"
 case 46: 
 var $118=$t; //@line 6759 "tcc_bootstrap.c"
 var $119=$118|32; //@line 6759 "tcc_bootstrap.c"
 $t=$119; //@line 6759 "tcc_bootstrap.c"
 _next(); //@line 6760 "tcc_bootstrap.c"
 $typespec_found=1; //@line 6761 "tcc_bootstrap.c"
 label=72;break; //@line 6762 "tcc_bootstrap.c"
 case 47: 
 _next(); //@line 6768 "tcc_bootstrap.c"
 label=72;break; //@line 6769 "tcc_bootstrap.c"
 case 48: 
 var $122=$t; //@line 6771 "tcc_bootstrap.c"
 var $123=$122&48; //@line 6771 "tcc_bootstrap.c"
 var $124=($123|0)==32; //@line 6771 "tcc_bootstrap.c"
 if($124){label=49;break;}else{label=50;break;} //@line 6771 "tcc_bootstrap.c"
 case 49: 
 _tcc_error(6224,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs; //@line 6772 "tcc_bootstrap.c"
 label=50;break; //@line 6772 "tcc_bootstrap.c"
 case 50: 
 var $127=$t; //@line 6773 "tcc_bootstrap.c"
 var $128=$127|48; //@line 6773 "tcc_bootstrap.c"
 $t=$128; //@line 6773 "tcc_bootstrap.c"
 _next(); //@line 6774 "tcc_bootstrap.c"
 $typespec_found=1; //@line 6775 "tcc_bootstrap.c"
 label=72;break; //@line 6776 "tcc_bootstrap.c"
 case 51: 
 $g=4096; //@line 6778 "tcc_bootstrap.c"
 label=54;break; //@line 6779 "tcc_bootstrap.c"
 case 52: 
 $g=8192; //@line 6781 "tcc_bootstrap.c"
 label=54;break; //@line 6782 "tcc_bootstrap.c"
 case 53: 
 $g=16384; //@line 6784 "tcc_bootstrap.c"
 label=54;break; //@line 6785 "tcc_bootstrap.c"
 case 54: 
 var $133=$t; //@line 6787 "tcc_bootstrap.c"
 var $134=$133&28672; //@line 6787 "tcc_bootstrap.c"
 var $135=$g; //@line 6787 "tcc_bootstrap.c"
 var $136=$135^-1; //@line 6787 "tcc_bootstrap.c"
 var $137=$134&$136; //@line 6787 "tcc_bootstrap.c"
 var $138=($137|0)!=0; //@line 6787 "tcc_bootstrap.c"
 if($138){label=55;break;}else{label=56;break;} //@line 6787 "tcc_bootstrap.c"
 case 55: 
 _tcc_error(6192,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs; //@line 6788 "tcc_bootstrap.c"
 label=56;break; //@line 6788 "tcc_bootstrap.c"
 case 56: 
 var $141=$g; //@line 6789 "tcc_bootstrap.c"
 var $142=$t; //@line 6789 "tcc_bootstrap.c"
 var $143=$142|$141; //@line 6789 "tcc_bootstrap.c"
 $t=$143; //@line 6789 "tcc_bootstrap.c"
 _next(); //@line 6790 "tcc_bootstrap.c"
 label=72;break; //@line 6791 "tcc_bootstrap.c"
 case 57: 
 var $145=$t; //@line 6795 "tcc_bootstrap.c"
 var $146=$145|32768; //@line 6795 "tcc_bootstrap.c"
 $t=$146; //@line 6795 "tcc_bootstrap.c"
 _next(); //@line 6796 "tcc_bootstrap.c"
 label=72;break; //@line 6797 "tcc_bootstrap.c"
 case 58: 
 var $148=$2; //@line 6800 "tcc_bootstrap.c"
 _parse_attribute($148); //@line 6800 "tcc_bootstrap.c"
 var $149=$2; //@line 6801 "tcc_bootstrap.c"
 var $150=(($149+20)|0); //@line 6801 "tcc_bootstrap.c"
 var $151=HEAP8[(($150)>>0)]; //@line 6801 "tcc_bootstrap.c"
 var $152=(($151<<24)>>24)!=0; //@line 6801 "tcc_bootstrap.c"
 if($152){label=59;break;}else{label=60;break;} //@line 6801 "tcc_bootstrap.c"
 case 59: 
 var $154=$2; //@line 6802 "tcc_bootstrap.c"
 var $155=(($154+20)|0); //@line 6802 "tcc_bootstrap.c"
 var $156=HEAP8[(($155)>>0)]; //@line 6802 "tcc_bootstrap.c"
 var $157=(($156<<24)>>24); //@line 6802 "tcc_bootstrap.c"
 var $158=((($157)-(1))|0); //@line 6802 "tcc_bootstrap.c"
 $u=$158; //@line 6802 "tcc_bootstrap.c"
 var $159=$t; //@line 6803 "tcc_bootstrap.c"
 var $160=$159&-2064; //@line 6803 "tcc_bootstrap.c"
 var $161=$u; //@line 6803 "tcc_bootstrap.c"
 var $162=$160|$161; //@line 6803 "tcc_bootstrap.c"
 $t=$162; //@line 6803 "tcc_bootstrap.c"
 label=60;break; //@line 6804 "tcc_bootstrap.c"
 case 60: 
 label=72;break; //@line 6805 "tcc_bootstrap.c"
 case 61: 
 _next(); //@line 6809 "tcc_bootstrap.c"
 _parse_expr_type($type1); //@line 6810 "tcc_bootstrap.c"
 var $165=(($type1)|0); //@line 6811 "tcc_bootstrap.c"
 var $166=HEAP32[(($165)>>2)]; //@line 6811 "tcc_bootstrap.c"
 var $167=$166&-45057; //@line 6811 "tcc_bootstrap.c"
 HEAP32[(($165)>>2)]=$167; //@line 6811 "tcc_bootstrap.c"
 var $168=(($type1+4)|0); //@line 6812 "tcc_bootstrap.c"
 var $169=HEAP32[(($168)>>2)]; //@line 6812 "tcc_bootstrap.c"
 var $170=($169|0)!=0; //@line 6812 "tcc_bootstrap.c"
 if($170){label=62;break;}else{label=63;break;} //@line 6812 "tcc_bootstrap.c"
 case 62: 
 var $172=$2; //@line 6813 "tcc_bootstrap.c"
 var $173=(($type1+4)|0); //@line 6813 "tcc_bootstrap.c"
 var $174=HEAP32[(($173)>>2)]; //@line 6813 "tcc_bootstrap.c"
 _sym_to_attr($172,$174); //@line 6813 "tcc_bootstrap.c"
 label=63;break; //@line 6813 "tcc_bootstrap.c"
 case 63: 
 label=39;break; //@line 6814 "tcc_bootstrap.c"
 case 64: 
 var $177=$typespec_found; //@line 6816 "tcc_bootstrap.c"
 var $178=($177|0)!=0; //@line 6816 "tcc_bootstrap.c"
 if($178){label=65;break;}else{label=66;break;} //@line 6816 "tcc_bootstrap.c"
 case 65: 
 label=73;break; //@line 6817 "tcc_bootstrap.c"
 case 66: 
 var $181=HEAP32[((10472)>>2)]; //@line 6818 "tcc_bootstrap.c"
 var $182=_sym_find($181); //@line 6818 "tcc_bootstrap.c"
 $s=$182; //@line 6818 "tcc_bootstrap.c"
 var $183=$s; //@line 6819 "tcc_bootstrap.c"
 var $184=($183|0)!=0; //@line 6819 "tcc_bootstrap.c"
 if($184){label=67;break;}else{label=68;break;} //@line 6819 "tcc_bootstrap.c"
 case 67: 
 var $186=$s; //@line 6819 "tcc_bootstrap.c"
 var $187=(($186+16)|0); //@line 6819 "tcc_bootstrap.c"
 var $188=(($187)|0); //@line 6819 "tcc_bootstrap.c"
 var $189=HEAP32[(($188)>>2)]; //@line 6819 "tcc_bootstrap.c"
 var $190=$189&16384; //@line 6819 "tcc_bootstrap.c"
 var $191=($190|0)!=0; //@line 6819 "tcc_bootstrap.c"
 if($191){label=69;break;}else{label=68;break;} //@line 6819 "tcc_bootstrap.c"
 case 68: 
 label=73;break; //@line 6820 "tcc_bootstrap.c"
 case 69: 
 var $194=$t; //@line 6821 "tcc_bootstrap.c"
 var $195=$194&-2064; //@line 6821 "tcc_bootstrap.c"
 $t=$195; //@line 6821 "tcc_bootstrap.c"
 var $196=$t; //@line 6822 "tcc_bootstrap.c"
 var $197=$196&-769; //@line 6822 "tcc_bootstrap.c"
 $u=$197; //@line 6822 "tcc_bootstrap.c"
 var $198=$u; //@line 6822 "tcc_bootstrap.c"
 var $199=$t; //@line 6822 "tcc_bootstrap.c"
 var $200=$199^$198; //@line 6822 "tcc_bootstrap.c"
 $t=$200; //@line 6822 "tcc_bootstrap.c"
 var $201=$s; //@line 6823 "tcc_bootstrap.c"
 var $202=(($201+16)|0); //@line 6823 "tcc_bootstrap.c"
 var $203=(($202)|0); //@line 6823 "tcc_bootstrap.c"
 var $204=HEAP32[(($203)>>2)]; //@line 6823 "tcc_bootstrap.c"
 var $205=$204&-16385; //@line 6823 "tcc_bootstrap.c"
 var $206=$u; //@line 6823 "tcc_bootstrap.c"
 var $207=$205|$206; //@line 6823 "tcc_bootstrap.c"
 var $208=$1; //@line 6823 "tcc_bootstrap.c"
 var $209=(($208)|0); //@line 6823 "tcc_bootstrap.c"
 HEAP32[(($209)>>2)]=$207; //@line 6823 "tcc_bootstrap.c"
 var $210=$s; //@line 6824 "tcc_bootstrap.c"
 var $211=(($210+16)|0); //@line 6824 "tcc_bootstrap.c"
 var $212=(($211+4)|0); //@line 6824 "tcc_bootstrap.c"
 var $213=HEAP32[(($212)>>2)]; //@line 6824 "tcc_bootstrap.c"
 var $214=$1; //@line 6824 "tcc_bootstrap.c"
 var $215=(($214+4)|0); //@line 6824 "tcc_bootstrap.c"
 HEAP32[(($215)>>2)]=$213; //@line 6824 "tcc_bootstrap.c"
 var $216=$t; //@line 6825 "tcc_bootstrap.c"
 var $217=($216|0)!=0; //@line 6825 "tcc_bootstrap.c"
 if($217){label=70;break;}else{label=71;break;} //@line 6825 "tcc_bootstrap.c"
 case 70: 
 var $219=$1; //@line 6826 "tcc_bootstrap.c"
 var $220=$t; //@line 6826 "tcc_bootstrap.c"
 _parse_btype_qualify($219,$220); //@line 6826 "tcc_bootstrap.c"
 label=71;break; //@line 6826 "tcc_bootstrap.c"
 case 71: 
 var $222=$1; //@line 6827 "tcc_bootstrap.c"
 var $223=(($222)|0); //@line 6827 "tcc_bootstrap.c"
 var $224=HEAP32[(($223)>>2)]; //@line 6827 "tcc_bootstrap.c"
 $t=$224; //@line 6827 "tcc_bootstrap.c"
 var $225=$2; //@line 6828 "tcc_bootstrap.c"
 var $226=$s; //@line 6828 "tcc_bootstrap.c"
 _sym_to_attr($225,$226); //@line 6828 "tcc_bootstrap.c"
 _next(); //@line 6829 "tcc_bootstrap.c"
 $typespec_found=1; //@line 6830 "tcc_bootstrap.c"
 $bt=-2; //@line 6831 "tcc_bootstrap.c"
 $st=-2; //@line 6831 "tcc_bootstrap.c"
 label=72;break; //@line 6832 "tcc_bootstrap.c"
 case 72: 
 $type_found=1; //@line 6834 "tcc_bootstrap.c"
 label=2;break; //@line 6835 "tcc_bootstrap.c"
 case 73: 
 var $229=$t; //@line 6837 "tcc_bootstrap.c"
 var $230=$229&2063; //@line 6837 "tcc_bootstrap.c"
 $bt=$230; //@line 6837 "tcc_bootstrap.c"
 var $231=$bt; //@line 6838 "tcc_bootstrap.c"
 var $232=($231|0)==2048; //@line 6838 "tcc_bootstrap.c"
 if($232){label=74;break;}else{label=75;break;} //@line 6838 "tcc_bootstrap.c"
 case 74: 
 var $234=$t; //@line 6839 "tcc_bootstrap.c"
 var $235=$234|3; //@line 6839 "tcc_bootstrap.c"
 $t=$235; //@line 6839 "tcc_bootstrap.c"
 label=75;break; //@line 6839 "tcc_bootstrap.c"
 case 75: 
 var $237=$t; //@line 6840 "tcc_bootstrap.c"
 var $238=$1; //@line 6840 "tcc_bootstrap.c"
 var $239=(($238)|0); //@line 6840 "tcc_bootstrap.c"
 HEAP32[(($239)>>2)]=$237; //@line 6840 "tcc_bootstrap.c"
 var $240=$type_found; //@line 6841 "tcc_bootstrap.c"
 STACKTOP=sp;return $240; //@line 6841 "tcc_bootstrap.c"
  default: assert(0, "bad label: " + label);
 }

}


function _type_decl($type,$ad,$v,$td){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $post;
 var $ret;
 var $qualifiers;
 var $storage;
 $1=$type;
 $2=$ad;
 $3=$v;
 $4=$td;
 var $5=$1; //@line 6963 "tcc_bootstrap.c"
 var $6=(($5)|0); //@line 6963 "tcc_bootstrap.c"
 var $7=HEAP32[(($6)>>2)]; //@line 6963 "tcc_bootstrap.c"
 var $8=$7&61440; //@line 6963 "tcc_bootstrap.c"
 $storage=$8; //@line 6963 "tcc_bootstrap.c"
 var $9=$1; //@line 6964 "tcc_bootstrap.c"
 var $10=(($9)|0); //@line 6964 "tcc_bootstrap.c"
 var $11=HEAP32[(($10)>>2)]; //@line 6964 "tcc_bootstrap.c"
 var $12=$11&-61441; //@line 6964 "tcc_bootstrap.c"
 HEAP32[(($10)>>2)]=$12; //@line 6964 "tcc_bootstrap.c"
 var $13=$1; //@line 6965 "tcc_bootstrap.c"
 $ret=$13; //@line 6965 "tcc_bootstrap.c"
 $post=$13; //@line 6965 "tcc_bootstrap.c"
 label=2;break; //@line 6966 "tcc_bootstrap.c"
 case 2: 
 var $15=HEAP32[((10472)>>2)]; //@line 6966 "tcc_bootstrap.c"
 var $16=($15|0)==42; //@line 6966 "tcc_bootstrap.c"
 if($16){label=3;break;}else{label=12;break;} //@line 6966 "tcc_bootstrap.c"
 case 3: 
 $qualifiers=0; //@line 6967 "tcc_bootstrap.c"
 label=4;break; //@line 6967 "tcc_bootstrap.c"
 case 4: 
 _next(); //@line 6969 "tcc_bootstrap.c"
 var $19=HEAP32[((10472)>>2)]; //@line 6970 "tcc_bootstrap.c"
 switch(($19|0)){case 273:case 274:case 275:{ label=5;break;}case 276:case 277:case 278:{ label=6;break;}case 288:case 289:case 290:{ label=7;break;}case 303:case 304:{ label=8;break;}default:{label=9;break;}}break;
 case 5: 
 var $21=$qualifiers; //@line 6974 "tcc_bootstrap.c"
 var $22=$21|256; //@line 6974 "tcc_bootstrap.c"
 $qualifiers=$22; //@line 6974 "tcc_bootstrap.c"
 label=4;break; //@line 6975 "tcc_bootstrap.c"
 case 6: 
 var $24=$qualifiers; //@line 6979 "tcc_bootstrap.c"
 var $25=$24|512; //@line 6979 "tcc_bootstrap.c"
 $qualifiers=$25; //@line 6979 "tcc_bootstrap.c"
 label=4;break; //@line 6980 "tcc_bootstrap.c"
 case 7: 
 label=4;break; //@line 6984 "tcc_bootstrap.c"
 case 8: 
 var $28=$2; //@line 6987 "tcc_bootstrap.c"
 _parse_attribute($28); //@line 6987 "tcc_bootstrap.c"
 label=9;break; //@line 6988 "tcc_bootstrap.c"
 case 9: 
 var $30=$1; //@line 6990 "tcc_bootstrap.c"
 _mk_pointer($30); //@line 6990 "tcc_bootstrap.c"
 var $31=$qualifiers; //@line 6991 "tcc_bootstrap.c"
 var $32=$1; //@line 6991 "tcc_bootstrap.c"
 var $33=(($32)|0); //@line 6991 "tcc_bootstrap.c"
 var $34=HEAP32[(($33)>>2)]; //@line 6991 "tcc_bootstrap.c"
 var $35=$34|$31; //@line 6991 "tcc_bootstrap.c"
 HEAP32[(($33)>>2)]=$35; //@line 6991 "tcc_bootstrap.c"
 var $36=$ret; //@line 6992 "tcc_bootstrap.c"
 var $37=$1; //@line 6992 "tcc_bootstrap.c"
 var $38=($36|0)==($37|0); //@line 6992 "tcc_bootstrap.c"
 if($38){label=10;break;}else{label=11;break;} //@line 6992 "tcc_bootstrap.c"
 case 10: 
 var $40=$1; //@line 6993 "tcc_bootstrap.c"
 var $41=_pointed_type($40); //@line 6993 "tcc_bootstrap.c"
 $ret=$41; //@line 6993 "tcc_bootstrap.c"
 label=11;break; //@line 6993 "tcc_bootstrap.c"
 case 11: 
 label=2;break; //@line 6994 "tcc_bootstrap.c"
 case 12: 
 var $44=HEAP32[((10472)>>2)]; //@line 6995 "tcc_bootstrap.c"
 var $45=($44|0)==40; //@line 6995 "tcc_bootstrap.c"
 if($45){label=13;break;}else{label=16;break;} //@line 6995 "tcc_bootstrap.c"
 case 13: 
 var $47=$1; //@line 6996 "tcc_bootstrap.c"
 var $48=$2; //@line 6996 "tcc_bootstrap.c"
 var $49=$4; //@line 6996 "tcc_bootstrap.c"
 var $50=_post_type($47,$48,0,$49); //@line 6996 "tcc_bootstrap.c"
 var $51=($50|0)!=0; //@line 6996 "tcc_bootstrap.c"
 if($51){label=15;break;}else{label=14;break;} //@line 6996 "tcc_bootstrap.c"
 case 14: 
 var $53=$2; //@line 6997 "tcc_bootstrap.c"
 _parse_attribute($53); //@line 6997 "tcc_bootstrap.c"
 var $54=$1; //@line 6998 "tcc_bootstrap.c"
 var $55=$2; //@line 6998 "tcc_bootstrap.c"
 var $56=$3; //@line 6998 "tcc_bootstrap.c"
 var $57=$4; //@line 6998 "tcc_bootstrap.c"
 var $58=_type_decl($54,$55,$56,$57); //@line 6998 "tcc_bootstrap.c"
 $post=$58; //@line 6998 "tcc_bootstrap.c"
 _skip(41); //@line 6999 "tcc_bootstrap.c"
 label=15;break; //@line 7000 "tcc_bootstrap.c"
 case 15: 
 label=23;break; //@line 7001 "tcc_bootstrap.c"
 case 16: 
 var $61=HEAP32[((10472)>>2)]; //@line 7001 "tcc_bootstrap.c"
 var $62=($61|0)>=256; //@line 7001 "tcc_bootstrap.c"
 if($62){label=17;break;}else{label=19;break;} //@line 7001 "tcc_bootstrap.c"
 case 17: 
 var $64=$4; //@line 7001 "tcc_bootstrap.c"
 var $65=$64&2; //@line 7001 "tcc_bootstrap.c"
 var $66=($65|0)!=0; //@line 7001 "tcc_bootstrap.c"
 if($66){label=18;break;}else{label=19;break;} //@line 7001 "tcc_bootstrap.c"
 case 18: 
 var $68=HEAP32[((10472)>>2)]; //@line 7002 "tcc_bootstrap.c"
 var $69=$3; //@line 7002 "tcc_bootstrap.c"
 HEAP32[(($69)>>2)]=$68; //@line 7002 "tcc_bootstrap.c"
 _next(); //@line 7003 "tcc_bootstrap.c"
 label=22;break; //@line 7004 "tcc_bootstrap.c"
 case 19: 
 var $71=$4; //@line 7005 "tcc_bootstrap.c"
 var $72=$71&1; //@line 7005 "tcc_bootstrap.c"
 var $73=($72|0)!=0; //@line 7005 "tcc_bootstrap.c"
 if($73){label=21;break;}else{label=20;break;} //@line 7005 "tcc_bootstrap.c"
 case 20: 
 _expect(3008); //@line 7006 "tcc_bootstrap.c"
 label=21;break; //@line 7006 "tcc_bootstrap.c"
 case 21: 
 var $76=$3; //@line 7007 "tcc_bootstrap.c"
 HEAP32[(($76)>>2)]=0; //@line 7007 "tcc_bootstrap.c"
 label=22;break;
 case 22: 
 label=23;break;
 case 23: 
 var $79=$post; //@line 7009 "tcc_bootstrap.c"
 var $80=$2; //@line 7009 "tcc_bootstrap.c"
 var $81=$storage; //@line 7009 "tcc_bootstrap.c"
 var $82=_post_type($79,$80,$81,0); //@line 7009 "tcc_bootstrap.c"
 var $83=$2; //@line 7010 "tcc_bootstrap.c"
 _parse_attribute($83); //@line 7010 "tcc_bootstrap.c"
 var $84=$storage; //@line 7011 "tcc_bootstrap.c"
 var $85=$1; //@line 7011 "tcc_bootstrap.c"
 var $86=(($85)|0); //@line 7011 "tcc_bootstrap.c"
 var $87=HEAP32[(($86)>>2)]; //@line 7011 "tcc_bootstrap.c"
 var $88=$87|$84; //@line 7011 "tcc_bootstrap.c"
 HEAP32[(($86)>>2)]=$88; //@line 7011 "tcc_bootstrap.c"
 var $89=$ret; //@line 7012 "tcc_bootstrap.c"
 STACKTOP=sp;return $89; //@line 7012 "tcc_bootstrap.c"
  default: assert(0, "bad label: " + label);
 }

}


function _vpush($type){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 $1=$type;
 var $2=$1; //@line 4427 "tcc_bootstrap.c"
 _vset($2,48,0); //@line 4427 "tcc_bootstrap.c"
 STACKTOP=sp;return; //@line 4428 "tcc_bootstrap.c"
}


function _block($bsym,$csym,$is_expr){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+72)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $a=sp;
 var $b=(sp)+(8);
 var $c;
 var $d;
 var $cond;
 var $s;
 var $saved_nocode_wanted;
 var $saved_nocode_wanted1;
 var $llabel;
 var $block_vla_sp_loc;
 var $saved_vlas_in_scope;
 var $e;
 var $saved_nocode_wanted2;
 var $saved_nocode_wanted3;
 var $saved;
 var $sw=(sp)+(16);
 var $saved_nocode_wanted4;
 var $switchval=(sp)+(32);
 var $cr;
 $1=$bsym;
 $2=$csym;
 $3=$is_expr;
 var $4=$3; //@line 8156 "tcc_bootstrap.c"
 var $5=($4|0)!=0; //@line 8156 "tcc_bootstrap.c"
 if($5){label=2;break;}else{label=3;break;} //@line 8156 "tcc_bootstrap.c"
 case 2: 
 _vpushi(0); //@line 8157 "tcc_bootstrap.c"
 var $7=HEAP32[((9288)>>2)]; //@line 8158 "tcc_bootstrap.c"
 var $8=(($7)|0); //@line 8158 "tcc_bootstrap.c"
 var $9=(($8)|0); //@line 8158 "tcc_bootstrap.c"
 HEAP32[(($9)>>2)]=0; //@line 8158 "tcc_bootstrap.c"
 label=3;break; //@line 8160 "tcc_bootstrap.c"
 case 3: 
 var $11=HEAP32[((10472)>>2)]; //@line 8161 "tcc_bootstrap.c"
 var $12=($11|0)==259; //@line 8161 "tcc_bootstrap.c"
 if($12){label=4;break;}else{label=19;break;} //@line 8161 "tcc_bootstrap.c"
 case 4: 
 var $14=HEAP32[((10616)>>2)]; //@line 8162 "tcc_bootstrap.c"
 $saved_nocode_wanted=$14; //@line 8162 "tcc_bootstrap.c"
 _next(); //@line 8163 "tcc_bootstrap.c"
 _skip(40); //@line 8164 "tcc_bootstrap.c"
 _gexpr(); //@line 8165 "tcc_bootstrap.c"
 _skip(41); //@line 8166 "tcc_bootstrap.c"
 var $15=_condition_3way(); //@line 8167 "tcc_bootstrap.c"
 $cond=$15; //@line 8167 "tcc_bootstrap.c"
 var $16=$cond; //@line 8168 "tcc_bootstrap.c"
 var $17=($16|0)==1; //@line 8168 "tcc_bootstrap.c"
 if($17){label=5;break;}else{label=6;break;} //@line 8168 "tcc_bootstrap.c"
 case 5: 
 HEAP32[(($a)>>2)]=0; //@line 8169 "tcc_bootstrap.c"
 _vpop(); //@line 8169 "tcc_bootstrap.c"
 label=7;break; //@line 8169 "tcc_bootstrap.c"
 case 6: 
 var $20=_gvtst(1,0); //@line 8171 "tcc_bootstrap.c"
 HEAP32[(($a)>>2)]=$20; //@line 8171 "tcc_bootstrap.c"
 label=7;break;
 case 7: 
 var $22=$cond; //@line 8172 "tcc_bootstrap.c"
 var $23=($22|0)==0; //@line 8172 "tcc_bootstrap.c"
 if($23){label=8;break;}else{label=9;break;} //@line 8172 "tcc_bootstrap.c"
 case 8: 
 var $25=HEAP32[((10616)>>2)]; //@line 8173 "tcc_bootstrap.c"
 var $26=$25|536870912; //@line 8173 "tcc_bootstrap.c"
 HEAP32[((10616)>>2)]=$26; //@line 8173 "tcc_bootstrap.c"
 label=9;break; //@line 8173 "tcc_bootstrap.c"
 case 9: 
 var $28=$1; //@line 8174 "tcc_bootstrap.c"
 var $29=$2; //@line 8174 "tcc_bootstrap.c"
 _block($28,$29,0); //@line 8174 "tcc_bootstrap.c"
 var $30=$cond; //@line 8175 "tcc_bootstrap.c"
 var $31=($30|0)!=1; //@line 8175 "tcc_bootstrap.c"
 if($31){label=10;break;}else{label=11;break;} //@line 8175 "tcc_bootstrap.c"
 case 10: 
 var $33=$saved_nocode_wanted; //@line 8176 "tcc_bootstrap.c"
 HEAP32[((10616)>>2)]=$33; //@line 8176 "tcc_bootstrap.c"
 label=11;break; //@line 8176 "tcc_bootstrap.c"
 case 11: 
 var $35=HEAP32[((10472)>>2)]; //@line 8177 "tcc_bootstrap.c"
 $c=$35; //@line 8177 "tcc_bootstrap.c"
 var $36=$c; //@line 8178 "tcc_bootstrap.c"
 var $37=($36|0)==260; //@line 8178 "tcc_bootstrap.c"
 if($37){label=12;break;}else{label=17;break;} //@line 8178 "tcc_bootstrap.c"
 case 12: 
 _next(); //@line 8179 "tcc_bootstrap.c"
 var $39=_gjmp(0); //@line 8180 "tcc_bootstrap.c"
 $d=$39; //@line 8180 "tcc_bootstrap.c"
 var $40=HEAP32[(($a)>>2)]; //@line 8181 "tcc_bootstrap.c"
 _gsym($40); //@line 8181 "tcc_bootstrap.c"
 var $41=$cond; //@line 8182 "tcc_bootstrap.c"
 var $42=($41|0)==1; //@line 8182 "tcc_bootstrap.c"
 if($42){label=13;break;}else{label=14;break;} //@line 8182 "tcc_bootstrap.c"
 case 13: 
 var $44=HEAP32[((10616)>>2)]; //@line 8183 "tcc_bootstrap.c"
 var $45=$44|536870912; //@line 8183 "tcc_bootstrap.c"
 HEAP32[((10616)>>2)]=$45; //@line 8183 "tcc_bootstrap.c"
 label=14;break; //@line 8183 "tcc_bootstrap.c"
 case 14: 
 var $47=$1; //@line 8184 "tcc_bootstrap.c"
 var $48=$2; //@line 8184 "tcc_bootstrap.c"
 _block($47,$48,0); //@line 8184 "tcc_bootstrap.c"
 var $49=$d; //@line 8185 "tcc_bootstrap.c"
 _gsym($49); //@line 8185 "tcc_bootstrap.c"
 var $50=$cond; //@line 8186 "tcc_bootstrap.c"
 var $51=($50|0)!=0; //@line 8186 "tcc_bootstrap.c"
 if($51){label=15;break;}else{label=16;break;} //@line 8186 "tcc_bootstrap.c"
 case 15: 
 var $53=$saved_nocode_wanted; //@line 8187 "tcc_bootstrap.c"
 HEAP32[((10616)>>2)]=$53; //@line 8187 "tcc_bootstrap.c"
 label=16;break; //@line 8187 "tcc_bootstrap.c"
 case 16: 
 label=18;break; //@line 8188 "tcc_bootstrap.c"
 case 17: 
 var $56=HEAP32[(($a)>>2)]; //@line 8189 "tcc_bootstrap.c"
 _gsym($56); //@line 8189 "tcc_bootstrap.c"
 label=18;break;
 case 18: 
 label=154;break; //@line 8190 "tcc_bootstrap.c"
 case 19: 
 var $59=HEAP32[((10472)>>2)]; //@line 8190 "tcc_bootstrap.c"
 var $60=($59|0)==261; //@line 8190 "tcc_bootstrap.c"
 if($60){label=20;break;}else{label=21;break;} //@line 8190 "tcc_bootstrap.c"
 case 20: 
 var $62=HEAP32[((10616)>>2)]; //@line 8192 "tcc_bootstrap.c"
 var $63=$62&-536870913; //@line 8192 "tcc_bootstrap.c"
 HEAP32[((10616)>>2)]=$63; //@line 8192 "tcc_bootstrap.c"
 _next(); //@line 8193 "tcc_bootstrap.c"
 var $64=HEAP32[((11008)>>2)]; //@line 8194 "tcc_bootstrap.c"
 $d=$64; //@line 8194 "tcc_bootstrap.c"
 _skip(40); //@line 8195 "tcc_bootstrap.c"
 _gexpr(); //@line 8196 "tcc_bootstrap.c"
 _skip(41); //@line 8197 "tcc_bootstrap.c"
 var $65=_gvtst(1,0); //@line 8198 "tcc_bootstrap.c"
 HEAP32[(($a)>>2)]=$65; //@line 8198 "tcc_bootstrap.c"
 HEAP32[(($b)>>2)]=0; //@line 8199 "tcc_bootstrap.c"
 var $66=HEAP32[((10712)>>2)]; //@line 8200 "tcc_bootstrap.c"
 var $67=((($66)+(1))|0); //@line 8200 "tcc_bootstrap.c"
 HEAP32[((10712)>>2)]=$67; //@line 8200 "tcc_bootstrap.c"
 var $68=HEAP32[((10616)>>2)]; //@line 8201 "tcc_bootstrap.c"
 $saved_nocode_wanted1=$68; //@line 8201 "tcc_bootstrap.c"
 _block($a,$b,0); //@line 8202 "tcc_bootstrap.c"
 var $69=$saved_nocode_wanted1; //@line 8203 "tcc_bootstrap.c"
 HEAP32[((10616)>>2)]=$69; //@line 8203 "tcc_bootstrap.c"
 var $70=HEAP32[((10712)>>2)]; //@line 8204 "tcc_bootstrap.c"
 var $71=((($70)-(1))|0); //@line 8204 "tcc_bootstrap.c"
 HEAP32[((10712)>>2)]=$71; //@line 8204 "tcc_bootstrap.c"
 var $72=$d; //@line 8205 "tcc_bootstrap.c"
 _gjmp_addr($72); //@line 8205 "tcc_bootstrap.c"
 var $73=HEAP32[(($a)>>2)]; //@line 8206 "tcc_bootstrap.c"
 _gsym($73); //@line 8206 "tcc_bootstrap.c"
 var $74=HEAP32[(($b)>>2)]; //@line 8207 "tcc_bootstrap.c"
 var $75=$d; //@line 8207 "tcc_bootstrap.c"
 _gsym_addr($74,$75); //@line 8207 "tcc_bootstrap.c"
 label=153;break; //@line 8208 "tcc_bootstrap.c"
 case 21: 
 var $77=HEAP32[((10472)>>2)]; //@line 8208 "tcc_bootstrap.c"
 var $78=($77|0)==123; //@line 8208 "tcc_bootstrap.c"
 if($78){label=22;break;}else{label=47;break;} //@line 8208 "tcc_bootstrap.c"
 case 22: 
 var $80=HEAP32[((9312)>>2)]; //@line 8210 "tcc_bootstrap.c"
 $block_vla_sp_loc=$80; //@line 8210 "tcc_bootstrap.c"
 var $81=HEAP32[((9296)>>2)]; //@line 8210 "tcc_bootstrap.c"
 $saved_vlas_in_scope=$81; //@line 8210 "tcc_bootstrap.c"
 _next(); //@line 8211 "tcc_bootstrap.c"
 var $82=HEAP32[((10704)>>2)]; //@line 8212 "tcc_bootstrap.c"
 $s=$82; //@line 8212 "tcc_bootstrap.c"
 var $83=HEAP32[((10720)>>2)]; //@line 8213 "tcc_bootstrap.c"
 $llabel=$83; //@line 8213 "tcc_bootstrap.c"
 var $84=HEAP32[((10712)>>2)]; //@line 8214 "tcc_bootstrap.c"
 var $85=((($84)+(1))|0); //@line 8214 "tcc_bootstrap.c"
 HEAP32[((10712)>>2)]=$85; //@line 8214 "tcc_bootstrap.c"
 var $86=HEAP32[((10472)>>2)]; //@line 8215 "tcc_bootstrap.c"
 var $87=($86|0)==310; //@line 8215 "tcc_bootstrap.c"
 if($87){label=23;break;}else{label=31;break;} //@line 8215 "tcc_bootstrap.c"
 case 23: 
 _next(); //@line 8216 "tcc_bootstrap.c"
 label=24;break; //@line 8217 "tcc_bootstrap.c"
 case 24: 
 var $90=HEAP32[((10472)>>2)]; //@line 8218 "tcc_bootstrap.c"
 var $91=($90|0)<314; //@line 8218 "tcc_bootstrap.c"
 if($91){label=25;break;}else{label=26;break;} //@line 8218 "tcc_bootstrap.c"
 case 25: 
 _expect(7792); //@line 8219 "tcc_bootstrap.c"
 label=26;break; //@line 8219 "tcc_bootstrap.c"
 case 26: 
 var $94=HEAP32[((10472)>>2)]; //@line 8220 "tcc_bootstrap.c"
 var $95=_label_push(10720,$94,2); //@line 8220 "tcc_bootstrap.c"
 _next(); //@line 8221 "tcc_bootstrap.c"
 var $96=HEAP32[((10472)>>2)]; //@line 8222 "tcc_bootstrap.c"
 var $97=($96|0)==44; //@line 8222 "tcc_bootstrap.c"
 if($97){label=27;break;}else{label=28;break;} //@line 8222 "tcc_bootstrap.c"
 case 27: 
 _next(); //@line 8223 "tcc_bootstrap.c"
 label=29;break; //@line 8224 "tcc_bootstrap.c"
 case 28: 
 _skip(59); //@line 8225 "tcc_bootstrap.c"
 label=30;break; //@line 8226 "tcc_bootstrap.c"
 case 29: 
 label=24;break; //@line 8228 "tcc_bootstrap.c"
 case 30: 
 label=31;break; //@line 8229 "tcc_bootstrap.c"
 case 31: 
 label=32;break; //@line 8230 "tcc_bootstrap.c"
 case 32: 
 var $104=HEAP32[((10472)>>2)]; //@line 8230 "tcc_bootstrap.c"
 var $105=($104|0)!=125; //@line 8230 "tcc_bootstrap.c"
 if($105){label=33;break;}else{label=41;break;} //@line 8230 "tcc_bootstrap.c"
 case 33: 
 var $107=_is_label(); //@line 8231 "tcc_bootstrap.c"
 HEAP32[(($a)>>2)]=$107; //@line 8231 "tcc_bootstrap.c"
 var $108=($107|0)!=0; //@line 8231 "tcc_bootstrap.c"
 if($108){label=34;break;}else{label=35;break;} //@line 8231 "tcc_bootstrap.c"
 case 34: 
 var $110=HEAP32[(($a)>>2)]; //@line 8232 "tcc_bootstrap.c"
 _unget_tok($110); //@line 8232 "tcc_bootstrap.c"
 label=36;break; //@line 8232 "tcc_bootstrap.c"
 case 35: 
 _decl(50); //@line 8234 "tcc_bootstrap.c"
 label=36;break;
 case 36: 
 var $113=HEAP32[((10472)>>2)]; //@line 8235 "tcc_bootstrap.c"
 var $114=($113|0)!=125; //@line 8235 "tcc_bootstrap.c"
 if($114){label=37;break;}else{label=40;break;} //@line 8235 "tcc_bootstrap.c"
 case 37: 
 var $116=$3; //@line 8236 "tcc_bootstrap.c"
 var $117=($116|0)!=0; //@line 8236 "tcc_bootstrap.c"
 if($117){label=38;break;}else{label=39;break;} //@line 8236 "tcc_bootstrap.c"
 case 38: 
 _vpop(); //@line 8237 "tcc_bootstrap.c"
 label=39;break; //@line 8237 "tcc_bootstrap.c"
 case 39: 
 var $120=$1; //@line 8238 "tcc_bootstrap.c"
 var $121=$2; //@line 8238 "tcc_bootstrap.c"
 var $122=$3; //@line 8238 "tcc_bootstrap.c"
 _block($120,$121,$122); //@line 8238 "tcc_bootstrap.c"
 label=40;break; //@line 8239 "tcc_bootstrap.c"
 case 40: 
 label=32;break; //@line 8240 "tcc_bootstrap.c"
 case 41: 
 var $125=$llabel; //@line 8241 "tcc_bootstrap.c"
 var $126=$3; //@line 8241 "tcc_bootstrap.c"
 _label_pop(10720,$125,$126); //@line 8241 "tcc_bootstrap.c"
 var $127=HEAP32[((10712)>>2)]; //@line 8242 "tcc_bootstrap.c"
 var $128=((($127)-(1))|0); //@line 8242 "tcc_bootstrap.c"
 HEAP32[((10712)>>2)]=$128; //@line 8242 "tcc_bootstrap.c"
 var $129=$s; //@line 8243 "tcc_bootstrap.c"
 var $130=$3; //@line 8243 "tcc_bootstrap.c"
 _sym_pop(10704,$129,$130); //@line 8243 "tcc_bootstrap.c"
 var $131=HEAP32[((9296)>>2)]; //@line 8244 "tcc_bootstrap.c"
 var $132=$saved_vlas_in_scope; //@line 8244 "tcc_bootstrap.c"
 var $133=($131|0)>($132|0); //@line 8244 "tcc_bootstrap.c"
 if($133){label=42;break;}else{label=46;break;} //@line 8244 "tcc_bootstrap.c"
 case 42: 
 var $135=$saved_vlas_in_scope; //@line 8245 "tcc_bootstrap.c"
 var $136=($135|0)!=0; //@line 8245 "tcc_bootstrap.c"
 if($136){label=43;break;}else{label=44;break;} //@line 8245 "tcc_bootstrap.c"
 case 43: 
 var $138=$block_vla_sp_loc; //@line 8245 "tcc_bootstrap.c"
 var $142=$138;label=45;break; //@line 8245 "tcc_bootstrap.c"
 case 44: 
 var $140=HEAP32[((9304)>>2)]; //@line 8245 "tcc_bootstrap.c"
 var $142=$140;label=45;break; //@line 8245 "tcc_bootstrap.c"
 case 45: 
 var $142; //@line 8245 "tcc_bootstrap.c"
 HEAP32[((9312)>>2)]=$142; //@line 8245 "tcc_bootstrap.c"
 label=46;break; //@line 8246 "tcc_bootstrap.c"
 case 46: 
 var $144=$saved_vlas_in_scope; //@line 8247 "tcc_bootstrap.c"
 HEAP32[((9296)>>2)]=$144; //@line 8247 "tcc_bootstrap.c"
 _next(); //@line 8248 "tcc_bootstrap.c"
 label=152;break; //@line 8249 "tcc_bootstrap.c"
 case 47: 
 var $146=HEAP32[((10472)>>2)]; //@line 8249 "tcc_bootstrap.c"
 var $147=($146|0)==263; //@line 8249 "tcc_bootstrap.c"
 if($147){label=48;break;}else{label=57;break;} //@line 8249 "tcc_bootstrap.c"
 case 48: 
 _next(); //@line 8250 "tcc_bootstrap.c"
 var $149=HEAP32[((10472)>>2)]; //@line 8251 "tcc_bootstrap.c"
 var $150=($149|0)!=59; //@line 8251 "tcc_bootstrap.c"
 if($150){label=49;break;}else{label=53;break;} //@line 8251 "tcc_bootstrap.c"
 case 49: 
 _gexpr(); //@line 8252 "tcc_bootstrap.c"
 _gen_assign_cast(76592); //@line 8253 "tcc_bootstrap.c"
 var $152=HEAP32[((76592)>>2)]; //@line 8254 "tcc_bootstrap.c"
 var $153=$152&15; //@line 8254 "tcc_bootstrap.c"
 var $154=($153|0)==0; //@line 8254 "tcc_bootstrap.c"
 if($154){label=50;break;}else{label=51;break;} //@line 8254 "tcc_bootstrap.c"
 case 50: 
 var $156=HEAP32[((9288)>>2)]; //@line 8255 "tcc_bootstrap.c"
 var $157=((($156)-(40))|0); //@line 8255 "tcc_bootstrap.c"
 HEAP32[((9288)>>2)]=$157; //@line 8255 "tcc_bootstrap.c"
 label=52;break; //@line 8255 "tcc_bootstrap.c"
 case 51: 
 _gfunc_return(76592); //@line 8257 "tcc_bootstrap.c"
 label=52;break;
 case 52: 
 label=53;break; //@line 8258 "tcc_bootstrap.c"
 case 53: 
 _skip(59); //@line 8259 "tcc_bootstrap.c"
 var $161=HEAP32[((10472)>>2)]; //@line 8260 "tcc_bootstrap.c"
 var $162=($161|0)!=125; //@line 8260 "tcc_bootstrap.c"
 if($162){label=55;break;}else{label=54;break;} //@line 8260 "tcc_bootstrap.c"
 case 54: 
 var $164=HEAP32[((10712)>>2)]; //@line 8260 "tcc_bootstrap.c"
 var $165=($164|0)!=1; //@line 8260 "tcc_bootstrap.c"
 if($165){label=55;break;}else{label=56;break;} //@line 8260 "tcc_bootstrap.c"
 case 55: 
 var $167=HEAP32[((10544)>>2)]; //@line 8261 "tcc_bootstrap.c"
 var $168=_gjmp($167); //@line 8261 "tcc_bootstrap.c"
 HEAP32[((10544)>>2)]=$168; //@line 8261 "tcc_bootstrap.c"
 label=56;break; //@line 8261 "tcc_bootstrap.c"
 case 56: 
 var $170=HEAP32[((10616)>>2)]; //@line 8262 "tcc_bootstrap.c"
 var $171=$170|536870912; //@line 8262 "tcc_bootstrap.c"
 HEAP32[((10616)>>2)]=$171; //@line 8262 "tcc_bootstrap.c"
 label=151;break; //@line 8263 "tcc_bootstrap.c"
 case 57: 
 var $173=HEAP32[((10472)>>2)]; //@line 8263 "tcc_bootstrap.c"
 var $174=($173|0)==262; //@line 8263 "tcc_bootstrap.c"
 if($174){label=58;break;}else{label=61;break;} //@line 8263 "tcc_bootstrap.c"
 case 58: 
 var $176=$1; //@line 8264 "tcc_bootstrap.c"
 var $177=($176|0)!=0; //@line 8264 "tcc_bootstrap.c"
 if($177){label=60;break;}else{label=59;break;} //@line 8264 "tcc_bootstrap.c"
 case 59: 
 _tcc_error(7400,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs; //@line 8265 "tcc_bootstrap.c"
 label=60;break; //@line 8265 "tcc_bootstrap.c"
 case 60: 
 var $180=$1; //@line 8266 "tcc_bootstrap.c"
 var $181=HEAP32[(($180)>>2)]; //@line 8266 "tcc_bootstrap.c"
 var $182=_gjmp($181); //@line 8266 "tcc_bootstrap.c"
 var $183=$1; //@line 8266 "tcc_bootstrap.c"
 HEAP32[(($183)>>2)]=$182; //@line 8266 "tcc_bootstrap.c"
 _next(); //@line 8267 "tcc_bootstrap.c"
 _skip(59); //@line 8268 "tcc_bootstrap.c"
 var $184=HEAP32[((10616)>>2)]; //@line 8269 "tcc_bootstrap.c"
 var $185=$184|536870912; //@line 8269 "tcc_bootstrap.c"
 HEAP32[((10616)>>2)]=$185; //@line 8269 "tcc_bootstrap.c"
 label=150;break; //@line 8270 "tcc_bootstrap.c"
 case 61: 
 var $187=HEAP32[((10472)>>2)]; //@line 8270 "tcc_bootstrap.c"
 var $188=($187|0)==270; //@line 8270 "tcc_bootstrap.c"
 if($188){label=62;break;}else{label=65;break;} //@line 8270 "tcc_bootstrap.c"
 case 62: 
 var $190=$2; //@line 8272 "tcc_bootstrap.c"
 var $191=($190|0)!=0; //@line 8272 "tcc_bootstrap.c"
 if($191){label=64;break;}else{label=63;break;} //@line 8272 "tcc_bootstrap.c"
 case 63: 
 _tcc_error(7384,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs; //@line 8273 "tcc_bootstrap.c"
 label=64;break; //@line 8273 "tcc_bootstrap.c"
 case 64: 
 var $194=$2; //@line 8274 "tcc_bootstrap.c"
 var $195=HEAP32[(($194)>>2)]; //@line 8274 "tcc_bootstrap.c"
 var $196=_gjmp($195); //@line 8274 "tcc_bootstrap.c"
 var $197=$2; //@line 8274 "tcc_bootstrap.c"
 HEAP32[(($197)>>2)]=$196; //@line 8274 "tcc_bootstrap.c"
 _next(); //@line 8275 "tcc_bootstrap.c"
 _skip(59); //@line 8276 "tcc_bootstrap.c"
 label=149;break; //@line 8277 "tcc_bootstrap.c"
 case 65: 
 var $199=HEAP32[((10472)>>2)]; //@line 8277 "tcc_bootstrap.c"
 var $200=($199|0)==264; //@line 8277 "tcc_bootstrap.c"
 if($200){label=66;break;}else{label=75;break;} //@line 8277 "tcc_bootstrap.c"
 case 66: 
 var $202=HEAP32[((10616)>>2)]; //@line 8280 "tcc_bootstrap.c"
 var $203=$202&-536870913; //@line 8280 "tcc_bootstrap.c"
 HEAP32[((10616)>>2)]=$203; //@line 8280 "tcc_bootstrap.c"
 _next(); //@line 8281 "tcc_bootstrap.c"
 _skip(40); //@line 8282 "tcc_bootstrap.c"
 var $204=HEAP32[((10704)>>2)]; //@line 8283 "tcc_bootstrap.c"
 $s=$204; //@line 8283 "tcc_bootstrap.c"
 var $205=HEAP32[((10712)>>2)]; //@line 8284 "tcc_bootstrap.c"
 var $206=((($205)+(1))|0); //@line 8284 "tcc_bootstrap.c"
 HEAP32[((10712)>>2)]=$206; //@line 8284 "tcc_bootstrap.c"
 var $207=HEAP32[((10472)>>2)]; //@line 8285 "tcc_bootstrap.c"
 var $208=($207|0)!=59; //@line 8285 "tcc_bootstrap.c"
 if($208){label=67;break;}else{label=70;break;} //@line 8285 "tcc_bootstrap.c"
 case 67: 
 var $210=_decl0(50,1,0); //@line 8286 "tcc_bootstrap.c"
 var $211=($210|0)!=0; //@line 8286 "tcc_bootstrap.c"
 if($211){label=69;break;}else{label=68;break;} //@line 8286 "tcc_bootstrap.c"
 case 68: 
 _gexpr(); //@line 8287 "tcc_bootstrap.c"
 _vpop(); //@line 8288 "tcc_bootstrap.c"
 label=69;break; //@line 8289 "tcc_bootstrap.c"
 case 69: 
 label=70;break; //@line 8290 "tcc_bootstrap.c"
 case 70: 
 _skip(59); //@line 8291 "tcc_bootstrap.c"
 var $215=HEAP32[((11008)>>2)]; //@line 8292 "tcc_bootstrap.c"
 $d=$215; //@line 8292 "tcc_bootstrap.c"
 var $216=HEAP32[((11008)>>2)]; //@line 8293 "tcc_bootstrap.c"
 $c=$216; //@line 8293 "tcc_bootstrap.c"
 HEAP32[(($a)>>2)]=0; //@line 8294 "tcc_bootstrap.c"
 HEAP32[(($b)>>2)]=0; //@line 8295 "tcc_bootstrap.c"
 var $217=HEAP32[((10472)>>2)]; //@line 8296 "tcc_bootstrap.c"
 var $218=($217|0)!=59; //@line 8296 "tcc_bootstrap.c"
 if($218){label=71;break;}else{label=72;break;} //@line 8296 "tcc_bootstrap.c"
 case 71: 
 _gexpr(); //@line 8297 "tcc_bootstrap.c"
 var $220=_gvtst(1,0); //@line 8298 "tcc_bootstrap.c"
 HEAP32[(($a)>>2)]=$220; //@line 8298 "tcc_bootstrap.c"
 label=72;break; //@line 8299 "tcc_bootstrap.c"
 case 72: 
 _skip(59); //@line 8300 "tcc_bootstrap.c"
 var $222=HEAP32[((10472)>>2)]; //@line 8301 "tcc_bootstrap.c"
 var $223=($222|0)!=41; //@line 8301 "tcc_bootstrap.c"
 if($223){label=73;break;}else{label=74;break;} //@line 8301 "tcc_bootstrap.c"
 case 73: 
 var $225=_gjmp(0); //@line 8302 "tcc_bootstrap.c"
 $e=$225; //@line 8302 "tcc_bootstrap.c"
 var $226=HEAP32[((11008)>>2)]; //@line 8303 "tcc_bootstrap.c"
 $c=$226; //@line 8303 "tcc_bootstrap.c"
 _gexpr(); //@line 8304 "tcc_bootstrap.c"
 _vpop(); //@line 8305 "tcc_bootstrap.c"
 var $227=$d; //@line 8306 "tcc_bootstrap.c"
 _gjmp_addr($227); //@line 8306 "tcc_bootstrap.c"
 var $228=$e; //@line 8307 "tcc_bootstrap.c"
 _gsym($228); //@line 8307 "tcc_bootstrap.c"
 label=74;break; //@line 8308 "tcc_bootstrap.c"
 case 74: 
 _skip(41); //@line 8309 "tcc_bootstrap.c"
 var $230=HEAP32[((10616)>>2)]; //@line 8310 "tcc_bootstrap.c"
 $saved_nocode_wanted2=$230; //@line 8310 "tcc_bootstrap.c"
 _block($a,$b,0); //@line 8311 "tcc_bootstrap.c"
 var $231=$saved_nocode_wanted2; //@line 8312 "tcc_bootstrap.c"
 HEAP32[((10616)>>2)]=$231; //@line 8312 "tcc_bootstrap.c"
 var $232=$c; //@line 8313 "tcc_bootstrap.c"
 _gjmp_addr($232); //@line 8313 "tcc_bootstrap.c"
 var $233=HEAP32[(($a)>>2)]; //@line 8314 "tcc_bootstrap.c"
 _gsym($233); //@line 8314 "tcc_bootstrap.c"
 var $234=HEAP32[(($b)>>2)]; //@line 8315 "tcc_bootstrap.c"
 var $235=$c; //@line 8315 "tcc_bootstrap.c"
 _gsym_addr($234,$235); //@line 8315 "tcc_bootstrap.c"
 var $236=HEAP32[((10712)>>2)]; //@line 8316 "tcc_bootstrap.c"
 var $237=((($236)-(1))|0); //@line 8316 "tcc_bootstrap.c"
 HEAP32[((10712)>>2)]=$237; //@line 8316 "tcc_bootstrap.c"
 var $238=$s; //@line 8317 "tcc_bootstrap.c"
 _sym_pop(10704,$238,0); //@line 8317 "tcc_bootstrap.c"
 label=148;break; //@line 8319 "tcc_bootstrap.c"
 case 75: 
 var $240=HEAP32[((10472)>>2)]; //@line 8320 "tcc_bootstrap.c"
 var $241=($240|0)==269; //@line 8320 "tcc_bootstrap.c"
 if($241){label=76;break;}else{label=77;break;} //@line 8320 "tcc_bootstrap.c"
 case 76: 
 var $243=HEAP32[((10616)>>2)]; //@line 8322 "tcc_bootstrap.c"
 var $244=$243&-536870913; //@line 8322 "tcc_bootstrap.c"
 HEAP32[((10616)>>2)]=$244; //@line 8322 "tcc_bootstrap.c"
 _next(); //@line 8323 "tcc_bootstrap.c"
 HEAP32[(($a)>>2)]=0; //@line 8324 "tcc_bootstrap.c"
 HEAP32[(($b)>>2)]=0; //@line 8325 "tcc_bootstrap.c"
 var $245=HEAP32[((11008)>>2)]; //@line 8326 "tcc_bootstrap.c"
 $d=$245; //@line 8326 "tcc_bootstrap.c"
 var $246=HEAP32[((10616)>>2)]; //@line 8327 "tcc_bootstrap.c"
 $saved_nocode_wanted3=$246; //@line 8327 "tcc_bootstrap.c"
 _block($a,$b,0); //@line 8328 "tcc_bootstrap.c"
 _skip(261); //@line 8329 "tcc_bootstrap.c"
 _skip(40); //@line 8330 "tcc_bootstrap.c"
 var $247=HEAP32[(($b)>>2)]; //@line 8331 "tcc_bootstrap.c"
 _gsym($247); //@line 8331 "tcc_bootstrap.c"
 _gexpr(); //@line 8332 "tcc_bootstrap.c"
 var $248=_gvtst(0,0); //@line 8333 "tcc_bootstrap.c"
 $c=$248; //@line 8333 "tcc_bootstrap.c"
 var $249=$c; //@line 8334 "tcc_bootstrap.c"
 var $250=$d; //@line 8334 "tcc_bootstrap.c"
 _gsym_addr($249,$250); //@line 8334 "tcc_bootstrap.c"
 var $251=$saved_nocode_wanted3; //@line 8335 "tcc_bootstrap.c"
 HEAP32[((10616)>>2)]=$251; //@line 8335 "tcc_bootstrap.c"
 _skip(41); //@line 8336 "tcc_bootstrap.c"
 var $252=HEAP32[(($a)>>2)]; //@line 8337 "tcc_bootstrap.c"
 _gsym($252); //@line 8337 "tcc_bootstrap.c"
 _skip(59); //@line 8338 "tcc_bootstrap.c"
 label=147;break; //@line 8339 "tcc_bootstrap.c"
 case 77: 
 var $254=HEAP32[((10472)>>2)]; //@line 8340 "tcc_bootstrap.c"
 var $255=($254|0)==271; //@line 8340 "tcc_bootstrap.c"
 if($255){label=78;break;}else{label=89;break;} //@line 8340 "tcc_bootstrap.c"
 case 78: 
 var $257=HEAP32[((10616)>>2)]; //@line 8342 "tcc_bootstrap.c"
 $saved_nocode_wanted4=$257; //@line 8342 "tcc_bootstrap.c"
 _next(); //@line 8344 "tcc_bootstrap.c"
 _skip(40); //@line 8345 "tcc_bootstrap.c"
 _gexpr(); //@line 8346 "tcc_bootstrap.c"
 _skip(41); //@line 8347 "tcc_bootstrap.c"
 var $258=HEAP32[((9288)>>2)]; //@line 8348 "tcc_bootstrap.c"
 var $259=((($258)-(40))|0); //@line 8348 "tcc_bootstrap.c"
 HEAP32[((9288)>>2)]=$259; //@line 8348 "tcc_bootstrap.c"
 var $260=$switchval; //@line 8348 "tcc_bootstrap.c"
 var $261=$258; //@line 8348 "tcc_bootstrap.c"
 assert(40 % 1 === 0);HEAP32[(($260)>>2)]=HEAP32[(($261)>>2)];HEAP32[((($260)+(4))>>2)]=HEAP32[((($261)+(4))>>2)];HEAP32[((($260)+(8))>>2)]=HEAP32[((($261)+(8))>>2)];HEAP32[((($260)+(12))>>2)]=HEAP32[((($261)+(12))>>2)];HEAP32[((($260)+(16))>>2)]=HEAP32[((($261)+(16))>>2)];HEAP32[((($260)+(20))>>2)]=HEAP32[((($261)+(20))>>2)];HEAP32[((($260)+(24))>>2)]=HEAP32[((($261)+(24))>>2)];HEAP32[((($260)+(28))>>2)]=HEAP32[((($261)+(28))>>2)];HEAP32[((($260)+(32))>>2)]=HEAP32[((($261)+(32))>>2)];HEAP32[((($260)+(36))>>2)]=HEAP32[((($261)+(36))>>2)]; //@line 8348 "tcc_bootstrap.c"
 HEAP32[(($a)>>2)]=0; //@line 8349 "tcc_bootstrap.c"
 var $262=_gjmp(0); //@line 8350 "tcc_bootstrap.c"
 HEAP32[(($b)>>2)]=$262; //@line 8350 "tcc_bootstrap.c"
 var $263=(($sw)|0); //@line 8351 "tcc_bootstrap.c"
 HEAP32[(($263)>>2)]=0; //@line 8351 "tcc_bootstrap.c"
 var $264=(($sw+4)|0); //@line 8351 "tcc_bootstrap.c"
 HEAP32[(($264)>>2)]=0; //@line 8351 "tcc_bootstrap.c"
 var $265=(($sw+8)|0); //@line 8351 "tcc_bootstrap.c"
 HEAP32[(($265)>>2)]=0; //@line 8351 "tcc_bootstrap.c"
 var $266=HEAP32[((76680)>>2)]; //@line 8352 "tcc_bootstrap.c"
 $saved=$266; //@line 8352 "tcc_bootstrap.c"
 HEAP32[((76680)>>2)]=$sw; //@line 8353 "tcc_bootstrap.c"
 var $267=$2; //@line 8354 "tcc_bootstrap.c"
 _block($a,$267,0); //@line 8354 "tcc_bootstrap.c"
 var $268=$saved_nocode_wanted4; //@line 8355 "tcc_bootstrap.c"
 HEAP32[((10616)>>2)]=$268; //@line 8355 "tcc_bootstrap.c"
 var $269=HEAP32[(($a)>>2)]; //@line 8356 "tcc_bootstrap.c"
 var $270=_gjmp($269); //@line 8356 "tcc_bootstrap.c"
 HEAP32[(($a)>>2)]=$270; //@line 8356 "tcc_bootstrap.c"
 var $271=HEAP32[(($b)>>2)]; //@line 8357 "tcc_bootstrap.c"
 _gsym($271); //@line 8357 "tcc_bootstrap.c"
 var $272=(($sw)|0); //@line 8358 "tcc_bootstrap.c"
 var $273=HEAP32[(($272)>>2)]; //@line 8358 "tcc_bootstrap.c"
 var $274=$273; //@line 8358 "tcc_bootstrap.c"
 var $275=(($sw+4)|0); //@line 8358 "tcc_bootstrap.c"
 var $276=HEAP32[(($275)>>2)]; //@line 8358 "tcc_bootstrap.c"
 _qsort($274,$276,4,6); //@line 8358 "tcc_bootstrap.c"
 HEAP32[(($b)>>2)]=1; //@line 8359 "tcc_bootstrap.c"
 label=79;break; //@line 8359 "tcc_bootstrap.c"
 case 79: 
 var $278=HEAP32[(($b)>>2)]; //@line 8359 "tcc_bootstrap.c"
 var $279=(($sw+4)|0); //@line 8359 "tcc_bootstrap.c"
 var $280=HEAP32[(($279)>>2)]; //@line 8359 "tcc_bootstrap.c"
 var $281=($278|0)<($280|0); //@line 8359 "tcc_bootstrap.c"
 if($281){label=80;break;}else{label=84;break;} //@line 8359 "tcc_bootstrap.c"
 case 80: 
 var $283=HEAP32[(($b)>>2)]; //@line 8360 "tcc_bootstrap.c"
 var $284=((($283)-(1))|0); //@line 8360 "tcc_bootstrap.c"
 var $285=(($sw)|0); //@line 8360 "tcc_bootstrap.c"
 var $286=HEAP32[(($285)>>2)]; //@line 8360 "tcc_bootstrap.c"
 var $287=(($286+($284<<2))|0); //@line 8360 "tcc_bootstrap.c"
 var $288=HEAP32[(($287)>>2)]; //@line 8360 "tcc_bootstrap.c"
 var $289=(($288+8)|0); //@line 8360 "tcc_bootstrap.c"
 var $ld$0$0=(($289)|0);
 var $290$0=HEAP32[(($ld$0$0)>>2)];
 var $ld$1$1=(($289+4)|0);
 var $290$1=HEAP32[(($ld$1$1)>>2)];
 var $291=HEAP32[(($b)>>2)]; //@line 8360 "tcc_bootstrap.c"
 var $292=(($sw)|0); //@line 8360 "tcc_bootstrap.c"
 var $293=HEAP32[(($292)>>2)]; //@line 8360 "tcc_bootstrap.c"
 var $294=(($293+($291<<2))|0); //@line 8360 "tcc_bootstrap.c"
 var $295=HEAP32[(($294)>>2)]; //@line 8360 "tcc_bootstrap.c"
 var $296=(($295)|0); //@line 8360 "tcc_bootstrap.c"
 var $ld$2$0=(($296)|0);
 var $297$0=HEAP32[(($ld$2$0)>>2)];
 var $ld$3$1=(($296+4)|0);
 var $297$1=HEAP32[(($ld$3$1)>>2)];
 var $298=(($290$1|0) >= ($297$1|0)) & (((($290$1|0) >  ($297$1|0)) | ($290$0>>>0) >= ($297$0>>>0))); //@line 8360 "tcc_bootstrap.c"
 if($298){label=81;break;}else{label=82;break;} //@line 8360 "tcc_bootstrap.c"
 case 81: 
 _tcc_error(7360,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs; //@line 8361 "tcc_bootstrap.c"
 label=82;break; //@line 8361 "tcc_bootstrap.c"
 case 82: 
 label=83;break; //@line 8361 "tcc_bootstrap.c"
 case 83: 
 var $302=HEAP32[(($b)>>2)]; //@line 8359 "tcc_bootstrap.c"
 var $303=((($302)+(1))|0); //@line 8359 "tcc_bootstrap.c"
 HEAP32[(($b)>>2)]=$303; //@line 8359 "tcc_bootstrap.c"
 label=79;break; //@line 8359 "tcc_bootstrap.c"
 case 84: 
 var $305=(($switchval)|0); //@line 8362 "tcc_bootstrap.c"
 var $306=(($305)|0); //@line 8362 "tcc_bootstrap.c"
 var $307=HEAP32[(($306)>>2)]; //@line 8362 "tcc_bootstrap.c"
 var $308=$307&15; //@line 8362 "tcc_bootstrap.c"
 var $309=($308|0)==4; //@line 8362 "tcc_bootstrap.c"
 if($309){label=85;break;}else{label=86;break;} //@line 8362 "tcc_bootstrap.c"
 case 85: 
 var $311=(($switchval)|0); //@line 8363 "tcc_bootstrap.c"
 var $312=(($311)|0); //@line 8363 "tcc_bootstrap.c"
 var $313=HEAP32[(($312)>>2)]; //@line 8363 "tcc_bootstrap.c"
 var $314=$313&-17; //@line 8363 "tcc_bootstrap.c"
 HEAP32[(($312)>>2)]=$314; //@line 8363 "tcc_bootstrap.c"
 label=86;break; //@line 8363 "tcc_bootstrap.c"
 case 86: 
 _vpushv($switchval); //@line 8364 "tcc_bootstrap.c"
 var $316=(($sw)|0); //@line 8365 "tcc_bootstrap.c"
 var $317=HEAP32[(($316)>>2)]; //@line 8365 "tcc_bootstrap.c"
 var $318=(($sw+4)|0); //@line 8365 "tcc_bootstrap.c"
 var $319=HEAP32[(($318)>>2)]; //@line 8365 "tcc_bootstrap.c"
 _gcase($317,$319,$a); //@line 8365 "tcc_bootstrap.c"
 _vpop(); //@line 8366 "tcc_bootstrap.c"
 var $320=(($sw+8)|0); //@line 8367 "tcc_bootstrap.c"
 var $321=HEAP32[(($320)>>2)]; //@line 8367 "tcc_bootstrap.c"
 var $322=($321|0)!=0; //@line 8367 "tcc_bootstrap.c"
 if($322){label=87;break;}else{label=88;break;} //@line 8367 "tcc_bootstrap.c"
 case 87: 
 var $324=(($sw+8)|0); //@line 8368 "tcc_bootstrap.c"
 var $325=HEAP32[(($324)>>2)]; //@line 8368 "tcc_bootstrap.c"
 _gjmp_addr($325); //@line 8368 "tcc_bootstrap.c"
 label=88;break; //@line 8368 "tcc_bootstrap.c"
 case 88: 
 var $327=(($sw)|0); //@line 8369 "tcc_bootstrap.c"
 var $328=$327; //@line 8369 "tcc_bootstrap.c"
 var $329=(($sw+4)|0); //@line 8369 "tcc_bootstrap.c"
 _dynarray_reset($328,$329); //@line 8369 "tcc_bootstrap.c"
 var $330=$saved; //@line 8370 "tcc_bootstrap.c"
 HEAP32[((76680)>>2)]=$330; //@line 8370 "tcc_bootstrap.c"
 var $331=HEAP32[(($a)>>2)]; //@line 8371 "tcc_bootstrap.c"
 _gsym($331); //@line 8371 "tcc_bootstrap.c"
 label=146;break; //@line 8372 "tcc_bootstrap.c"
 case 89: 
 var $333=HEAP32[((10472)>>2)]; //@line 8373 "tcc_bootstrap.c"
 var $334=($333|0)==272; //@line 8373 "tcc_bootstrap.c"
 if($334){label=90;break;}else{label=98;break;} //@line 8373 "tcc_bootstrap.c"
 case 90: 
 var $336=_tcc_malloc(24); //@line 8374 "tcc_bootstrap.c"
 var $337=$336; //@line 8374 "tcc_bootstrap.c"
 $cr=$337; //@line 8374 "tcc_bootstrap.c"
 var $338=HEAP32[((76680)>>2)]; //@line 8375 "tcc_bootstrap.c"
 var $339=($338|0)!=0; //@line 8375 "tcc_bootstrap.c"
 if($339){label=92;break;}else{label=91;break;} //@line 8375 "tcc_bootstrap.c"
 case 91: 
 _expect(7352); //@line 8376 "tcc_bootstrap.c"
 label=92;break; //@line 8376 "tcc_bootstrap.c"
 case 92: 
 var $342=HEAP32[((10616)>>2)]; //@line 8377 "tcc_bootstrap.c"
 var $343=$342&-536870913; //@line 8377 "tcc_bootstrap.c"
 HEAP32[((10616)>>2)]=$343; //@line 8377 "tcc_bootstrap.c"
 _next(); //@line 8378 "tcc_bootstrap.c"
 var $344$0=_expr_const64();
 var $344$1=tempRet0;
 var $345=$cr; //@line 8379 "tcc_bootstrap.c"
 var $346=(($345+8)|0); //@line 8379 "tcc_bootstrap.c"
 var $st$4$0=(($346)|0);
 HEAP32[(($st$4$0)>>2)]=$344$0;
 var $st$5$1=(($346+4)|0);
 HEAP32[(($st$5$1)>>2)]=$344$1;
 var $347=$cr; //@line 8379 "tcc_bootstrap.c"
 var $348=(($347)|0); //@line 8379 "tcc_bootstrap.c"
 var $st$6$0=(($348)|0);
 HEAP32[(($st$6$0)>>2)]=$344$0;
 var $st$7$1=(($348+4)|0);
 HEAP32[(($st$7$1)>>2)]=$344$1;
 var $349=HEAP32[((2848)>>2)]; //@line 8380 "tcc_bootstrap.c"
 var $350=($349|0)!=0; //@line 8380 "tcc_bootstrap.c"
 if($350){label=93;break;}else{label=97;break;} //@line 8380 "tcc_bootstrap.c"
 case 93: 
 var $352=HEAP32[((10472)>>2)]; //@line 8380 "tcc_bootstrap.c"
 var $353=($352|0)==200; //@line 8380 "tcc_bootstrap.c"
 if($353){label=94;break;}else{label=97;break;} //@line 8380 "tcc_bootstrap.c"
 case 94: 
 _next(); //@line 8381 "tcc_bootstrap.c"
 var $355$0=_expr_const64();
 var $355$1=tempRet0;
 var $356=$cr; //@line 8382 "tcc_bootstrap.c"
 var $357=(($356+8)|0); //@line 8382 "tcc_bootstrap.c"
 var $st$8$0=(($357)|0);
 HEAP32[(($st$8$0)>>2)]=$355$0;
 var $st$9$1=(($357+4)|0);
 HEAP32[(($st$9$1)>>2)]=$355$1;
 var $358=$cr; //@line 8383 "tcc_bootstrap.c"
 var $359=(($358+8)|0); //@line 8383 "tcc_bootstrap.c"
 var $ld$10$0=(($359)|0);
 var $360$0=HEAP32[(($ld$10$0)>>2)];
 var $ld$11$1=(($359+4)|0);
 var $360$1=HEAP32[(($ld$11$1)>>2)];
 var $361=$cr; //@line 8383 "tcc_bootstrap.c"
 var $362=(($361)|0); //@line 8383 "tcc_bootstrap.c"
 var $ld$12$0=(($362)|0);
 var $363$0=HEAP32[(($ld$12$0)>>2)];
 var $ld$13$1=(($362+4)|0);
 var $363$1=HEAP32[(($ld$13$1)>>2)];
 var $364=(($360$1|0) < ($363$1|0)) | (((($360$1|0) == ($363$1|0) & ($360$0>>>0) <  ($363$0>>>0)))); //@line 8383 "tcc_bootstrap.c"
 if($364){label=95;break;}else{label=96;break;} //@line 8383 "tcc_bootstrap.c"
 case 95: 
 _tcc_warning(7328,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs; //@line 8384 "tcc_bootstrap.c"
 label=96;break; //@line 8384 "tcc_bootstrap.c"
 case 96: 
 label=97;break; //@line 8385 "tcc_bootstrap.c"
 case 97: 
 var $368=HEAP32[((11008)>>2)]; //@line 8386 "tcc_bootstrap.c"
 var $369=$cr; //@line 8386 "tcc_bootstrap.c"
 var $370=(($369+16)|0); //@line 8386 "tcc_bootstrap.c"
 HEAP32[(($370)>>2)]=$368; //@line 8386 "tcc_bootstrap.c"
 var $371=HEAP32[((76680)>>2)]; //@line 8387 "tcc_bootstrap.c"
 var $372=(($371)|0); //@line 8387 "tcc_bootstrap.c"
 var $373=$372; //@line 8387 "tcc_bootstrap.c"
 var $374=HEAP32[((76680)>>2)]; //@line 8387 "tcc_bootstrap.c"
 var $375=(($374+4)|0); //@line 8387 "tcc_bootstrap.c"
 var $376=$cr; //@line 8387 "tcc_bootstrap.c"
 var $377=$376; //@line 8387 "tcc_bootstrap.c"
 _dynarray_add($373,$375,$377); //@line 8387 "tcc_bootstrap.c"
 _skip(58); //@line 8388 "tcc_bootstrap.c"
 $3=0; //@line 8389 "tcc_bootstrap.c"
 label=130;break; //@line 8390 "tcc_bootstrap.c"
 case 98: 
 var $379=HEAP32[((10472)>>2)]; //@line 8392 "tcc_bootstrap.c"
 var $380=($379|0)==300; //@line 8392 "tcc_bootstrap.c"
 if($380){label=99;break;}else{label=104;break;} //@line 8392 "tcc_bootstrap.c"
 case 99: 
 _next(); //@line 8393 "tcc_bootstrap.c"
 _skip(58); //@line 8394 "tcc_bootstrap.c"
 var $382=HEAP32[((76680)>>2)]; //@line 8395 "tcc_bootstrap.c"
 var $383=($382|0)!=0; //@line 8395 "tcc_bootstrap.c"
 if($383){label=101;break;}else{label=100;break;} //@line 8395 "tcc_bootstrap.c"
 case 100: 
 _expect(7352); //@line 8396 "tcc_bootstrap.c"
 label=101;break; //@line 8396 "tcc_bootstrap.c"
 case 101: 
 var $386=HEAP32[((76680)>>2)]; //@line 8397 "tcc_bootstrap.c"
 var $387=(($386+8)|0); //@line 8397 "tcc_bootstrap.c"
 var $388=HEAP32[(($387)>>2)]; //@line 8397 "tcc_bootstrap.c"
 var $389=($388|0)!=0; //@line 8397 "tcc_bootstrap.c"
 if($389){label=102;break;}else{label=103;break;} //@line 8397 "tcc_bootstrap.c"
 case 102: 
 _tcc_error(7768,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs; //@line 8398 "tcc_bootstrap.c"
 label=103;break; //@line 8398 "tcc_bootstrap.c"
 case 103: 
 var $392=HEAP32[((11008)>>2)]; //@line 8399 "tcc_bootstrap.c"
 var $393=HEAP32[((76680)>>2)]; //@line 8399 "tcc_bootstrap.c"
 var $394=(($393+8)|0); //@line 8399 "tcc_bootstrap.c"
 HEAP32[(($394)>>2)]=$392; //@line 8399 "tcc_bootstrap.c"
 $3=0; //@line 8400 "tcc_bootstrap.c"
 label=130;break; //@line 8401 "tcc_bootstrap.c"
 case 104: 
 var $396=HEAP32[((10472)>>2)]; //@line 8403 "tcc_bootstrap.c"
 var $397=($396|0)==268; //@line 8403 "tcc_bootstrap.c"
 if($397){label=105;break;}else{label=123;break;} //@line 8403 "tcc_bootstrap.c"
 case 105: 
 _next(); //@line 8404 "tcc_bootstrap.c"
 var $399=HEAP32[((10472)>>2)]; //@line 8405 "tcc_bootstrap.c"
 var $400=($399|0)==42; //@line 8405 "tcc_bootstrap.c"
 if($400){label=106;break;}else{label=110;break;} //@line 8405 "tcc_bootstrap.c"
 case 106: 
 var $402=HEAP32[((2848)>>2)]; //@line 8405 "tcc_bootstrap.c"
 var $403=($402|0)!=0; //@line 8405 "tcc_bootstrap.c"
 if($403){label=107;break;}else{label=110;break;} //@line 8405 "tcc_bootstrap.c"
 case 107: 
 _next(); //@line 8406 "tcc_bootstrap.c"
 _gexpr(); //@line 8407 "tcc_bootstrap.c"
 var $405=HEAP32[((9288)>>2)]; //@line 8408 "tcc_bootstrap.c"
 var $406=(($405)|0); //@line 8408 "tcc_bootstrap.c"
 var $407=(($406)|0); //@line 8408 "tcc_bootstrap.c"
 var $408=HEAP32[(($407)>>2)]; //@line 8408 "tcc_bootstrap.c"
 var $409=$408&15; //@line 8408 "tcc_bootstrap.c"
 var $410=($409|0)!=5; //@line 8408 "tcc_bootstrap.c"
 if($410){label=108;break;}else{label=109;break;} //@line 8408 "tcc_bootstrap.c"
 case 108: 
 _expect(2944); //@line 8409 "tcc_bootstrap.c"
 label=109;break; //@line 8409 "tcc_bootstrap.c"
 case 109: 
 label=122;break; //@line 8410 "tcc_bootstrap.c"
 case 110: 
 var $414=HEAP32[((10472)>>2)]; //@line 8410 "tcc_bootstrap.c"
 var $415=($414|0)>=314; //@line 8410 "tcc_bootstrap.c"
 if($415){label=111;break;}else{label=120;break;} //@line 8410 "tcc_bootstrap.c"
 case 111: 
 var $417=HEAP32[((10472)>>2)]; //@line 8411 "tcc_bootstrap.c"
 var $418=_label_find($417); //@line 8411 "tcc_bootstrap.c"
 $s=$418; //@line 8411 "tcc_bootstrap.c"
 var $419=$s; //@line 8412 "tcc_bootstrap.c"
 var $420=($419|0)!=0; //@line 8412 "tcc_bootstrap.c"
 if($420){label=113;break;}else{label=112;break;} //@line 8412 "tcc_bootstrap.c"
 case 112: 
 var $422=HEAP32[((10472)>>2)]; //@line 8413 "tcc_bootstrap.c"
 var $423=_label_push(76568,$422,1); //@line 8413 "tcc_bootstrap.c"
 $s=$423; //@line 8413 "tcc_bootstrap.c"
 label=116;break; //@line 8414 "tcc_bootstrap.c"
 case 113: 
 var $425=$s; //@line 8415 "tcc_bootstrap.c"
 var $426=(($425+4)|0); //@line 8415 "tcc_bootstrap.c"
 var $427=HEAP16[(($426)>>1)]; //@line 8415 "tcc_bootstrap.c"
 var $428=($427&65535); //@line 8415 "tcc_bootstrap.c"
 var $429=($428|0)==2; //@line 8415 "tcc_bootstrap.c"
 if($429){label=114;break;}else{label=115;break;} //@line 8415 "tcc_bootstrap.c"
 case 114: 
 var $431=$s; //@line 8416 "tcc_bootstrap.c"
 var $432=(($431+4)|0); //@line 8416 "tcc_bootstrap.c"
 HEAP16[(($432)>>1)]=1; //@line 8416 "tcc_bootstrap.c"
 label=115;break; //@line 8416 "tcc_bootstrap.c"
 case 115: 
 label=116;break;
 case 116: 
 var $435=$s; //@line 8418 "tcc_bootstrap.c"
 var $436=(($435+4)|0); //@line 8418 "tcc_bootstrap.c"
 var $437=HEAP16[(($436)>>1)]; //@line 8418 "tcc_bootstrap.c"
 var $438=($437&65535); //@line 8418 "tcc_bootstrap.c"
 var $439=$438&1; //@line 8418 "tcc_bootstrap.c"
 var $440=($439|0)!=0; //@line 8418 "tcc_bootstrap.c"
 if($440){label=117;break;}else{label=118;break;} //@line 8418 "tcc_bootstrap.c"
 case 117: 
 var $442=$s; //@line 8419 "tcc_bootstrap.c"
 var $443=(($442+8)|0); //@line 8419 "tcc_bootstrap.c"
 var $444=$443; //@line 8419 "tcc_bootstrap.c"
 var $445=(($444+4)|0); //@line 8419 "tcc_bootstrap.c"
 var $446=$445; //@line 8419 "tcc_bootstrap.c"
 var $447=HEAP32[(($446)>>2)]; //@line 8419 "tcc_bootstrap.c"
 var $448=_gjmp($447); //@line 8419 "tcc_bootstrap.c"
 var $449=$s; //@line 8419 "tcc_bootstrap.c"
 var $450=(($449+8)|0); //@line 8419 "tcc_bootstrap.c"
 var $451=$450; //@line 8419 "tcc_bootstrap.c"
 var $452=(($451+4)|0); //@line 8419 "tcc_bootstrap.c"
 var $453=$452; //@line 8419 "tcc_bootstrap.c"
 HEAP32[(($453)>>2)]=$448; //@line 8419 "tcc_bootstrap.c"
 label=119;break; //@line 8419 "tcc_bootstrap.c"
 case 118: 
 var $455=$s; //@line 8421 "tcc_bootstrap.c"
 var $456=(($455+8)|0); //@line 8421 "tcc_bootstrap.c"
 var $457=$456; //@line 8421 "tcc_bootstrap.c"
 var $458=(($457+4)|0); //@line 8421 "tcc_bootstrap.c"
 var $459=$458; //@line 8421 "tcc_bootstrap.c"
 var $460=HEAP32[(($459)>>2)]; //@line 8421 "tcc_bootstrap.c"
 _gjmp_addr($460); //@line 8421 "tcc_bootstrap.c"
 label=119;break;
 case 119: 
 _next(); //@line 8422 "tcc_bootstrap.c"
 label=121;break; //@line 8423 "tcc_bootstrap.c"
 case 120: 
 _expect(7792); //@line 8424 "tcc_bootstrap.c"
 label=121;break;
 case 121: 
 label=122;break;
 case 122: 
 _skip(59); //@line 8426 "tcc_bootstrap.c"
 label=143;break; //@line 8427 "tcc_bootstrap.c"
 case 123: 
 var $466=_is_label(); //@line 8428 "tcc_bootstrap.c"
 HEAP32[(($b)>>2)]=$466; //@line 8428 "tcc_bootstrap.c"
 var $467=HEAP32[(($b)>>2)]; //@line 8429 "tcc_bootstrap.c"
 var $468=($467|0)!=0; //@line 8429 "tcc_bootstrap.c"
 if($468){label=124;break;}else{label=136;break;} //@line 8429 "tcc_bootstrap.c"
 case 124: 
 _next(); //@line 8430 "tcc_bootstrap.c"
 var $470=HEAP32[(($b)>>2)]; //@line 8431 "tcc_bootstrap.c"
 var $471=_label_find($470); //@line 8431 "tcc_bootstrap.c"
 $s=$471; //@line 8431 "tcc_bootstrap.c"
 var $472=$s; //@line 8432 "tcc_bootstrap.c"
 var $473=($472|0)!=0; //@line 8432 "tcc_bootstrap.c"
 if($473){label=125;break;}else{label=128;break;} //@line 8432 "tcc_bootstrap.c"
 case 125: 
 var $475=$s; //@line 8433 "tcc_bootstrap.c"
 var $476=(($475+4)|0); //@line 8433 "tcc_bootstrap.c"
 var $477=HEAP16[(($476)>>1)]; //@line 8433 "tcc_bootstrap.c"
 var $478=($477&65535); //@line 8433 "tcc_bootstrap.c"
 var $479=($478|0)==0; //@line 8433 "tcc_bootstrap.c"
 if($479){label=126;break;}else{label=127;break;} //@line 8433 "tcc_bootstrap.c"
 case 126: 
 var $481=$s; //@line 8434 "tcc_bootstrap.c"
 var $482=(($481)|0); //@line 8434 "tcc_bootstrap.c"
 var $483=HEAP32[(($482)>>2)]; //@line 8434 "tcc_bootstrap.c"
 var $484=_get_tok_str($483,0); //@line 8434 "tcc_bootstrap.c"
 _tcc_error(7304,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$484,tempVarArgs)); STACKTOP=tempVarArgs; //@line 8434 "tcc_bootstrap.c"
 label=127;break; //@line 8434 "tcc_bootstrap.c"
 case 127: 
 var $486=$s; //@line 8435 "tcc_bootstrap.c"
 var $487=(($486+8)|0); //@line 8435 "tcc_bootstrap.c"
 var $488=$487; //@line 8435 "tcc_bootstrap.c"
 var $489=(($488+4)|0); //@line 8435 "tcc_bootstrap.c"
 var $490=$489; //@line 8435 "tcc_bootstrap.c"
 var $491=HEAP32[(($490)>>2)]; //@line 8435 "tcc_bootstrap.c"
 _gsym($491); //@line 8435 "tcc_bootstrap.c"
 var $492=$s; //@line 8436 "tcc_bootstrap.c"
 var $493=(($492+4)|0); //@line 8436 "tcc_bootstrap.c"
 HEAP16[(($493)>>1)]=0; //@line 8436 "tcc_bootstrap.c"
 label=129;break; //@line 8437 "tcc_bootstrap.c"
 case 128: 
 var $495=HEAP32[(($b)>>2)]; //@line 8438 "tcc_bootstrap.c"
 var $496=_label_push(76568,$495,0); //@line 8438 "tcc_bootstrap.c"
 $s=$496; //@line 8438 "tcc_bootstrap.c"
 label=129;break;
 case 129: 
 var $498=HEAP32[((11008)>>2)]; //@line 8440 "tcc_bootstrap.c"
 var $499=$s; //@line 8440 "tcc_bootstrap.c"
 var $500=(($499+8)|0); //@line 8440 "tcc_bootstrap.c"
 var $501=$500; //@line 8440 "tcc_bootstrap.c"
 var $502=(($501+4)|0); //@line 8440 "tcc_bootstrap.c"
 var $503=$502; //@line 8440 "tcc_bootstrap.c"
 HEAP32[(($503)>>2)]=$498; //@line 8440 "tcc_bootstrap.c"
 label=130;break; //@line 8440 "tcc_bootstrap.c"
 case 130: 
 var $505=HEAP32[((10616)>>2)]; //@line 8442 "tcc_bootstrap.c"
 var $506=$505&-536870913; //@line 8442 "tcc_bootstrap.c"
 HEAP32[((10616)>>2)]=$506; //@line 8442 "tcc_bootstrap.c"
 var $507=HEAP32[((10472)>>2)]; //@line 8443 "tcc_bootstrap.c"
 var $508=($507|0)==125; //@line 8443 "tcc_bootstrap.c"
 if($508){label=131;break;}else{label=132;break;} //@line 8443 "tcc_bootstrap.c"
 case 131: 
 _tcc_warning(7240,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs; //@line 8444 "tcc_bootstrap.c"
 label=135;break; //@line 8445 "tcc_bootstrap.c"
 case 132: 
 var $511=$3; //@line 8446 "tcc_bootstrap.c"
 var $512=($511|0)!=0; //@line 8446 "tcc_bootstrap.c"
 if($512){label=133;break;}else{label=134;break;} //@line 8446 "tcc_bootstrap.c"
 case 133: 
 _vpop(); //@line 8447 "tcc_bootstrap.c"
 label=134;break; //@line 8447 "tcc_bootstrap.c"
 case 134: 
 var $515=$1; //@line 8448 "tcc_bootstrap.c"
 var $516=$2; //@line 8448 "tcc_bootstrap.c"
 var $517=$3; //@line 8448 "tcc_bootstrap.c"
 _block($515,$516,$517); //@line 8448 "tcc_bootstrap.c"
 label=135;break;
 case 135: 
 label=142;break; //@line 8450 "tcc_bootstrap.c"
 case 136: 
 var $520=HEAP32[((10472)>>2)]; //@line 8452 "tcc_bootstrap.c"
 var $521=($520|0)!=59; //@line 8452 "tcc_bootstrap.c"
 if($521){label=137;break;}else{label=141;break;} //@line 8452 "tcc_bootstrap.c"
 case 137: 
 var $523=$3; //@line 8453 "tcc_bootstrap.c"
 var $524=($523|0)!=0; //@line 8453 "tcc_bootstrap.c"
 if($524){label=138;break;}else{label=139;break;} //@line 8453 "tcc_bootstrap.c"
 case 138: 
 _vpop(); //@line 8454 "tcc_bootstrap.c"
 _gexpr(); //@line 8455 "tcc_bootstrap.c"
 label=140;break; //@line 8456 "tcc_bootstrap.c"
 case 139: 
 _gexpr(); //@line 8457 "tcc_bootstrap.c"
 _vpop(); //@line 8458 "tcc_bootstrap.c"
 label=140;break;
 case 140: 
 label=141;break; //@line 8460 "tcc_bootstrap.c"
 case 141: 
 _skip(59); //@line 8461 "tcc_bootstrap.c"
 label=142;break;
 case 142: 
 label=143;break;
 case 143: 
 label=144;break;
 case 144: 
 label=145;break;
 case 145: 
 label=146;break;
 case 146: 
 label=147;break;
 case 147: 
 label=148;break;
 case 148: 
 label=149;break;
 case 149: 
 label=150;break;
 case 150: 
 label=151;break;
 case 151: 
 label=152;break;
 case 152: 
 label=153;break;
 case 153: 
 label=154;break;
 case 154: 
 STACKTOP=sp;return; //@line 8464 "tcc_bootstrap.c"
  default: assert(0, "bad label: " + label);
 }

}


function _expr_type($type,$expr_fn){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 var $2;
 $1=$type;
 $2=$expr_fn;
 var $3=HEAP32[((10616)>>2)]; //@line 7070 "tcc_bootstrap.c"
 var $4=((($3)+(1))|0); //@line 7070 "tcc_bootstrap.c"
 HEAP32[((10616)>>2)]=$4; //@line 7070 "tcc_bootstrap.c"
 var $5=$2; //@line 7071 "tcc_bootstrap.c"
 FUNCTION_TABLE[$5](); //@line 7071 "tcc_bootstrap.c"
 var $6=$1; //@line 7072 "tcc_bootstrap.c"
 var $7=HEAP32[((9288)>>2)]; //@line 7072 "tcc_bootstrap.c"
 var $8=(($7)|0); //@line 7072 "tcc_bootstrap.c"
 var $9=$6; //@line 7072 "tcc_bootstrap.c"
 var $10=$8; //@line 7072 "tcc_bootstrap.c"
 assert(8 % 1 === 0);HEAP32[(($9)>>2)]=HEAP32[(($10)>>2)];HEAP32[((($9)+(4))>>2)]=HEAP32[((($10)+(4))>>2)]; //@line 7072 "tcc_bootstrap.c"
 _vpop(); //@line 7073 "tcc_bootstrap.c"
 var $11=HEAP32[((10616)>>2)]; //@line 7074 "tcc_bootstrap.c"
 var $12=((($11)-(1))|0); //@line 7074 "tcc_bootstrap.c"
 HEAP32[((10616)>>2)]=$12; //@line 7074 "tcc_bootstrap.c"
 STACKTOP=sp;return; //@line 7075 "tcc_bootstrap.c"
}


function _vpushs($v){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 var $cval=sp;
 $1=$v;
 var $2=$1; //@line 4438 "tcc_bootstrap.c"
 var $3$0=$2;
 var $3$1=0;
 var $4=$cval; //@line 4438 "tcc_bootstrap.c"
 var $st$0$0=(($4)|0);
 HEAP32[(($st$0$0)>>2)]=$3$0;
 var $st$1$1=(($4+4)|0);
 HEAP32[(($st$1$1)>>2)]=$3$1;
 _vsetc(10528,48,$cval); //@line 4439 "tcc_bootstrap.c"
 STACKTOP=sp;return; //@line 4440 "tcc_bootstrap.c"
}


function _parse_builtin_params($nc,$args){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $c;
 var $sep;
 var $t=sp;
 $1=$nc;
 $2=$args;
 $sep=40; //@line 7099 "tcc_bootstrap.c"
 var $3=$1; //@line 7101 "tcc_bootstrap.c"
 var $4=($3|0)!=0; //@line 7101 "tcc_bootstrap.c"
 if($4){label=2;break;}else{label=3;break;} //@line 7101 "tcc_bootstrap.c"
 case 2: 
 var $6=HEAP32[((10616)>>2)]; //@line 7102 "tcc_bootstrap.c"
 var $7=((($6)+(1))|0); //@line 7102 "tcc_bootstrap.c"
 HEAP32[((10616)>>2)]=$7; //@line 7102 "tcc_bootstrap.c"
 label=3;break; //@line 7102 "tcc_bootstrap.c"
 case 3: 
 _next(); //@line 7103 "tcc_bootstrap.c"
 label=4;break; //@line 7104 "tcc_bootstrap.c"
 case 4: 
 var $10=$2; //@line 7104 "tcc_bootstrap.c"
 var $11=(($10+1)|0); //@line 7104 "tcc_bootstrap.c"
 $2=$11; //@line 7104 "tcc_bootstrap.c"
 var $12=HEAP8[(($10)>>0)]; //@line 7104 "tcc_bootstrap.c"
 $c=$12; //@line 7104 "tcc_bootstrap.c"
 var $13=(($12<<24)>>24)!=0; //@line 7104 "tcc_bootstrap.c"
 if($13){label=5;break;}else{label=10;break;} //@line 7104 "tcc_bootstrap.c"
 case 5: 
 var $15=$sep; //@line 7105 "tcc_bootstrap.c"
 var $16=(($15<<24)>>24); //@line 7105 "tcc_bootstrap.c"
 _skip($16); //@line 7105 "tcc_bootstrap.c"
 $sep=44; //@line 7106 "tcc_bootstrap.c"
 var $17=$c; //@line 7107 "tcc_bootstrap.c"
 var $18=(($17<<24)>>24); //@line 7107 "tcc_bootstrap.c"
 if(($18|0)==101){ label=6;break;}else if(($18|0)==116){ label=7;break;}else{label=8;break;}
 case 6: 
 _expr_eq(); //@line 7108 "tcc_bootstrap.c"
 label=4;break; //@line 7108 "tcc_bootstrap.c"
 case 7: 
 _parse_type($t); //@line 7109 "tcc_bootstrap.c"
 _vpush($t); //@line 7109 "tcc_bootstrap.c"
 label=4;break; //@line 7109 "tcc_bootstrap.c"
 case 8: 
 _tcc_error(7424,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs; //@line 7110 "tcc_bootstrap.c"
 label=9;break; //@line 7110 "tcc_bootstrap.c"
 case 9: 
 label=4;break; //@line 7112 "tcc_bootstrap.c"
 case 10: 
 _skip(41); //@line 7113 "tcc_bootstrap.c"
 var $24=$1; //@line 7114 "tcc_bootstrap.c"
 var $25=($24|0)!=0; //@line 7114 "tcc_bootstrap.c"
 if($25){label=11;break;}else{label=12;break;} //@line 7114 "tcc_bootstrap.c"
 case 11: 
 var $27=HEAP32[((10616)>>2)]; //@line 7115 "tcc_bootstrap.c"
 var $28=((($27)-(1))|0); //@line 7115 "tcc_bootstrap.c"
 HEAP32[((10616)>>2)]=$28; //@line 7115 "tcc_bootstrap.c"
 label=12;break; //@line 7115 "tcc_bootstrap.c"
 case 12: 
 STACKTOP=sp;return; //@line 7116 "tcc_bootstrap.c"
  default: assert(0, "bad label: " + label);
 }

}


function _inc($post,$c){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 $1=$post;
 $2=$c;
 _test_lvalue(); //@line 6205 "tcc_bootstrap.c"
 _vdup(); //@line 6206 "tcc_bootstrap.c"
 var $3=$1; //@line 6207 "tcc_bootstrap.c"
 var $4=($3|0)!=0; //@line 6207 "tcc_bootstrap.c"
 if($4){label=2;break;}else{label=3;break;} //@line 6207 "tcc_bootstrap.c"
 case 2: 
 _gv_dup(); //@line 6208 "tcc_bootstrap.c"
 _vrotb(3); //@line 6209 "tcc_bootstrap.c"
 _vrotb(3); //@line 6210 "tcc_bootstrap.c"
 label=3;break; //@line 6211 "tcc_bootstrap.c"
 case 3: 
 var $7=$2; //@line 6212 "tcc_bootstrap.c"
 var $8=((($7)-(163))|0); //@line 6212 "tcc_bootstrap.c"
 _vpushi($8); //@line 6212 "tcc_bootstrap.c"
 _gen_op(43); //@line 6213 "tcc_bootstrap.c"
 _vstore(); //@line 6214 "tcc_bootstrap.c"
 var $9=$1; //@line 6215 "tcc_bootstrap.c"
 var $10=($9|0)!=0; //@line 6215 "tcc_bootstrap.c"
 if($10){label=4;break;}else{label=5;break;} //@line 6215 "tcc_bootstrap.c"
 case 4: 
 _vpop(); //@line 6216 "tcc_bootstrap.c"
 label=5;break; //@line 6216 "tcc_bootstrap.c"
 case 5: 
 STACKTOP=sp;return; //@line 6217 "tcc_bootstrap.c"
  default: assert(0, "bad label: " + label);
 }

}


function _label_find($v){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 $2=$v;
 var $3=$2; //@line 2175 "tcc_bootstrap.c"
 var $4=((($3)-(256))|0); //@line 2175 "tcc_bootstrap.c"
 $2=$4; //@line 2175 "tcc_bootstrap.c"
 var $5=$2; //@line 2176 "tcc_bootstrap.c"
 var $6=HEAP32[((10456)>>2)]; //@line 2176 "tcc_bootstrap.c"
 var $7=((($6)-(256))|0); //@line 2176 "tcc_bootstrap.c"
 var $8=($5>>>0)>=($7>>>0); //@line 2176 "tcc_bootstrap.c"
 if($8){label=2;break;}else{label=3;break;} //@line 2176 "tcc_bootstrap.c"
 case 2: 
 $1=0; //@line 2177 "tcc_bootstrap.c"
 label=4;break; //@line 2177 "tcc_bootstrap.c"
 case 3: 
 var $11=$2; //@line 2178 "tcc_bootstrap.c"
 var $12=HEAP32[((10496)>>2)]; //@line 2178 "tcc_bootstrap.c"
 var $13=(($12+($11<<2))|0); //@line 2178 "tcc_bootstrap.c"
 var $14=HEAP32[(($13)>>2)]; //@line 2178 "tcc_bootstrap.c"
 var $15=(($14+8)|0); //@line 2178 "tcc_bootstrap.c"
 var $16=HEAP32[(($15)>>2)]; //@line 2178 "tcc_bootstrap.c"
 $1=$16; //@line 2178 "tcc_bootstrap.c"
 label=4;break; //@line 2178 "tcc_bootstrap.c"
 case 4: 
 var $18=$1; //@line 2179 "tcc_bootstrap.c"
 STACKTOP=sp;return $18; //@line 2179 "tcc_bootstrap.c"
  default: assert(0, "bad label: " + label);
 }

}


function _label_push($ptop,$v,$flags){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $s;
 var $ps;
 $1=$ptop;
 $2=$v;
 $3=$flags;
 var $4=$1; //@line 2183 "tcc_bootstrap.c"
 var $5=$2; //@line 2183 "tcc_bootstrap.c"
 var $6=_sym_push2($4,$5,0,0); //@line 2183 "tcc_bootstrap.c"
 $s=$6; //@line 2183 "tcc_bootstrap.c"
 var $7=$3; //@line 2184 "tcc_bootstrap.c"
 var $8=(($7)&65535); //@line 2184 "tcc_bootstrap.c"
 var $9=$s; //@line 2184 "tcc_bootstrap.c"
 var $10=(($9+4)|0); //@line 2184 "tcc_bootstrap.c"
 HEAP16[(($10)>>1)]=$8; //@line 2184 "tcc_bootstrap.c"
 var $11=$2; //@line 2185 "tcc_bootstrap.c"
 var $12=((($11)-(256))|0); //@line 2185 "tcc_bootstrap.c"
 var $13=HEAP32[((10496)>>2)]; //@line 2185 "tcc_bootstrap.c"
 var $14=(($13+($12<<2))|0); //@line 2185 "tcc_bootstrap.c"
 var $15=HEAP32[(($14)>>2)]; //@line 2185 "tcc_bootstrap.c"
 var $16=(($15+8)|0); //@line 2185 "tcc_bootstrap.c"
 $ps=$16; //@line 2185 "tcc_bootstrap.c"
 var $17=$1; //@line 2186 "tcc_bootstrap.c"
 var $18=($17|0)==76568; //@line 2186 "tcc_bootstrap.c"
 if($18){label=2;break;}else{label=6;break;} //@line 2186 "tcc_bootstrap.c"
 case 2: 
 label=3;break; //@line 2187 "tcc_bootstrap.c"
 case 3: 
 var $21=$ps; //@line 2187 "tcc_bootstrap.c"
 var $22=HEAP32[(($21)>>2)]; //@line 2187 "tcc_bootstrap.c"
 var $23=($22|0)!=0; //@line 2187 "tcc_bootstrap.c"
 if($23){label=4;break;}else{label=5;break;} //@line 2187 "tcc_bootstrap.c"
 case 4: 
 var $25=$ps; //@line 2188 "tcc_bootstrap.c"
 var $26=HEAP32[(($25)>>2)]; //@line 2188 "tcc_bootstrap.c"
 var $27=(($26+32)|0); //@line 2188 "tcc_bootstrap.c"
 $ps=$27; //@line 2188 "tcc_bootstrap.c"
 label=3;break; //@line 2188 "tcc_bootstrap.c"
 case 5: 
 label=6;break; //@line 2189 "tcc_bootstrap.c"
 case 6: 
 var $30=$ps; //@line 2190 "tcc_bootstrap.c"
 var $31=HEAP32[(($30)>>2)]; //@line 2190 "tcc_bootstrap.c"
 var $32=$s; //@line 2190 "tcc_bootstrap.c"
 var $33=(($32+32)|0); //@line 2190 "tcc_bootstrap.c"
 HEAP32[(($33)>>2)]=$31; //@line 2190 "tcc_bootstrap.c"
 var $34=$s; //@line 2191 "tcc_bootstrap.c"
 var $35=$ps; //@line 2191 "tcc_bootstrap.c"
 HEAP32[(($35)>>2)]=$34; //@line 2191 "tcc_bootstrap.c"
 var $36=$s; //@line 2192 "tcc_bootstrap.c"
 STACKTOP=sp;return $36; //@line 2192 "tcc_bootstrap.c"
  default: assert(0, "bad label: " + label);
 }

}


function _skip_or_save_block($str){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $braces;
 var $level;
 var $t;
 $1=$str;
 var $2=HEAP32[((10472)>>2)]; //@line 8467 "tcc_bootstrap.c"
 var $3=($2|0)==123; //@line 8467 "tcc_bootstrap.c"
 var $4=($3&1); //@line 8467 "tcc_bootstrap.c"
 $braces=$4; //@line 8467 "tcc_bootstrap.c"
 $level=0; //@line 8468 "tcc_bootstrap.c"
 var $5=$1; //@line 8469 "tcc_bootstrap.c"
 var $6=($5|0)!=0; //@line 8469 "tcc_bootstrap.c"
 if($6){label=2;break;}else{label=3;break;} //@line 8469 "tcc_bootstrap.c"
 case 2: 
 var $8=_tok_str_alloc(); //@line 8470 "tcc_bootstrap.c"
 var $9=$1; //@line 8470 "tcc_bootstrap.c"
 HEAP32[(($9)>>2)]=$8; //@line 8470 "tcc_bootstrap.c"
 label=3;break; //@line 8470 "tcc_bootstrap.c"
 case 3: 
 label=4;break; //@line 8471 "tcc_bootstrap.c"
 case 4: 
 var $12=$level; //@line 8471 "tcc_bootstrap.c"
 var $13=($12|0)>0; //@line 8471 "tcc_bootstrap.c"
 if($13){var $29=1;label=10;break;}else{label=5;break;} //@line 8471 "tcc_bootstrap.c"
 case 5: 
 var $15=HEAP32[((10472)>>2)]; //@line 8471 "tcc_bootstrap.c"
 var $16=($15|0)!=125; //@line 8471 "tcc_bootstrap.c"
 if($16){label=6;break;}else{var $27=0;label=9;break;} //@line 8471 "tcc_bootstrap.c"
 case 6: 
 var $18=HEAP32[((10472)>>2)]; //@line 8471 "tcc_bootstrap.c"
 var $19=($18|0)!=44; //@line 8471 "tcc_bootstrap.c"
 if($19){label=7;break;}else{var $27=0;label=9;break;} //@line 8471 "tcc_bootstrap.c"
 case 7: 
 var $21=HEAP32[((10472)>>2)]; //@line 8471 "tcc_bootstrap.c"
 var $22=($21|0)!=59; //@line 8471 "tcc_bootstrap.c"
 if($22){label=8;break;}else{var $27=0;label=9;break;} //@line 8471 "tcc_bootstrap.c"
 case 8: 
 var $24=HEAP32[((10472)>>2)]; //@line 8471 "tcc_bootstrap.c"
 var $25=($24|0)!=41; //@line 8471 "tcc_bootstrap.c"
 var $27=$25;label=9;break;
 case 9: 
 var $27;
 var $29=$27;label=10;break;
 case 10: 
 var $29;
 if($29){label=11;break;}else{label=31;break;}
 case 11: 
 var $31=HEAP32[((10472)>>2)]; //@line 8473 "tcc_bootstrap.c"
 var $32=($31|0)==-1; //@line 8473 "tcc_bootstrap.c"
 if($32){label=12;break;}else{label=17;break;} //@line 8473 "tcc_bootstrap.c"
 case 12: 
 var $34=$1; //@line 8474 "tcc_bootstrap.c"
 var $35=($34|0)!=0; //@line 8474 "tcc_bootstrap.c"
 if($35){label=14;break;}else{label=13;break;} //@line 8474 "tcc_bootstrap.c"
 case 13: 
 var $37=$level; //@line 8474 "tcc_bootstrap.c"
 var $38=($37|0)>0; //@line 8474 "tcc_bootstrap.c"
 if($38){label=14;break;}else{label=15;break;} //@line 8474 "tcc_bootstrap.c"
 case 14: 
 _tcc_error(7440,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs; //@line 8475 "tcc_bootstrap.c"
 label=16;break; //@line 8475 "tcc_bootstrap.c"
 case 15: 
 label=31;break; //@line 8477 "tcc_bootstrap.c"
 case 16: 
 label=17;break; //@line 8478 "tcc_bootstrap.c"
 case 17: 
 var $43=$1; //@line 8479 "tcc_bootstrap.c"
 var $44=($43|0)!=0; //@line 8479 "tcc_bootstrap.c"
 if($44){label=18;break;}else{label=19;break;} //@line 8479 "tcc_bootstrap.c"
 case 18: 
 var $46=$1; //@line 8480 "tcc_bootstrap.c"
 var $47=HEAP32[(($46)>>2)]; //@line 8480 "tcc_bootstrap.c"
 _tok_str_add_tok($47); //@line 8480 "tcc_bootstrap.c"
 label=19;break; //@line 8480 "tcc_bootstrap.c"
 case 19: 
 var $49=HEAP32[((10472)>>2)]; //@line 8481 "tcc_bootstrap.c"
 $t=$49; //@line 8481 "tcc_bootstrap.c"
 _next(); //@line 8482 "tcc_bootstrap.c"
 var $50=$t; //@line 8483 "tcc_bootstrap.c"
 var $51=($50|0)==123; //@line 8483 "tcc_bootstrap.c"
 if($51){label=21;break;}else{label=20;break;} //@line 8483 "tcc_bootstrap.c"
 case 20: 
 var $53=$t; //@line 8483 "tcc_bootstrap.c"
 var $54=($53|0)==40; //@line 8483 "tcc_bootstrap.c"
 if($54){label=21;break;}else{label=22;break;} //@line 8483 "tcc_bootstrap.c"
 case 21: 
 var $56=$level; //@line 8484 "tcc_bootstrap.c"
 var $57=((($56)+(1))|0); //@line 8484 "tcc_bootstrap.c"
 $level=$57; //@line 8484 "tcc_bootstrap.c"
 label=30;break; //@line 8485 "tcc_bootstrap.c"
 case 22: 
 var $59=$t; //@line 8485 "tcc_bootstrap.c"
 var $60=($59|0)==125; //@line 8485 "tcc_bootstrap.c"
 if($60){label=24;break;}else{label=23;break;} //@line 8485 "tcc_bootstrap.c"
 case 23: 
 var $62=$t; //@line 8485 "tcc_bootstrap.c"
 var $63=($62|0)==41; //@line 8485 "tcc_bootstrap.c"
 if($63){label=24;break;}else{label=29;break;} //@line 8485 "tcc_bootstrap.c"
 case 24: 
 var $65=$level; //@line 8486 "tcc_bootstrap.c"
 var $66=((($65)-(1))|0); //@line 8486 "tcc_bootstrap.c"
 $level=$66; //@line 8486 "tcc_bootstrap.c"
 var $67=$level; //@line 8487 "tcc_bootstrap.c"
 var $68=($67|0)==0; //@line 8487 "tcc_bootstrap.c"
 if($68){label=25;break;}else{label=28;break;} //@line 8487 "tcc_bootstrap.c"
 case 25: 
 var $70=$braces; //@line 8487 "tcc_bootstrap.c"
 var $71=($70|0)!=0; //@line 8487 "tcc_bootstrap.c"
 if($71){label=26;break;}else{label=28;break;} //@line 8487 "tcc_bootstrap.c"
 case 26: 
 var $73=$t; //@line 8487 "tcc_bootstrap.c"
 var $74=($73|0)==125; //@line 8487 "tcc_bootstrap.c"
 if($74){label=27;break;}else{label=28;break;} //@line 8487 "tcc_bootstrap.c"
 case 27: 
 label=31;break; //@line 8488 "tcc_bootstrap.c"
 case 28: 
 label=29;break; //@line 8489 "tcc_bootstrap.c"
 case 29: 
 label=30;break;
 case 30: 
 label=4;break; //@line 8490 "tcc_bootstrap.c"
 case 31: 
 var $80=$1; //@line 8491 "tcc_bootstrap.c"
 var $81=($80|0)!=0; //@line 8491 "tcc_bootstrap.c"
 if($81){label=32;break;}else{label=33;break;} //@line 8491 "tcc_bootstrap.c"
 case 32: 
 var $83=$1; //@line 8492 "tcc_bootstrap.c"
 var $84=HEAP32[(($83)>>2)]; //@line 8492 "tcc_bootstrap.c"
 _tok_str_add($84,-1); //@line 8492 "tcc_bootstrap.c"
 var $85=$1; //@line 8493 "tcc_bootstrap.c"
 var $86=HEAP32[(($85)>>2)]; //@line 8493 "tcc_bootstrap.c"
 _tok_str_add($86,0); //@line 8493 "tcc_bootstrap.c"
 label=33;break; //@line 8494 "tcc_bootstrap.c"
 case 33: 
 STACKTOP=sp;return; //@line 8495 "tcc_bootstrap.c"
  default: assert(0, "bad label: " + label);
 }

}


function _find_field($type,$v){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $s;
 var $ret;
 $2=$type;
 $3=$v;
 var $4=$2; //@line 6243 "tcc_bootstrap.c"
 var $5=(($4+4)|0); //@line 6243 "tcc_bootstrap.c"
 var $6=HEAP32[(($5)>>2)]; //@line 6243 "tcc_bootstrap.c"
 $s=$6; //@line 6243 "tcc_bootstrap.c"
 var $7=$3; //@line 6244 "tcc_bootstrap.c"
 var $8=$7|536870912; //@line 6244 "tcc_bootstrap.c"
 $3=$8; //@line 6244 "tcc_bootstrap.c"
 label=2;break; //@line 6245 "tcc_bootstrap.c"
 case 2: 
 var $10=$s; //@line 6245 "tcc_bootstrap.c"
 var $11=(($10+24)|0); //@line 6245 "tcc_bootstrap.c"
 var $12=$11; //@line 6245 "tcc_bootstrap.c"
 var $13=HEAP32[(($12)>>2)]; //@line 6245 "tcc_bootstrap.c"
 $s=$13; //@line 6245 "tcc_bootstrap.c"
 var $14=($13|0)!=0; //@line 6245 "tcc_bootstrap.c"
 if($14){label=3;break;}else{label=12;break;} //@line 6245 "tcc_bootstrap.c"
 case 3: 
 var $16=$s; //@line 6246 "tcc_bootstrap.c"
 var $17=(($16)|0); //@line 6246 "tcc_bootstrap.c"
 var $18=HEAP32[(($17)>>2)]; //@line 6246 "tcc_bootstrap.c"
 var $19=$18&536870912; //@line 6246 "tcc_bootstrap.c"
 var $20=($19|0)!=0; //@line 6246 "tcc_bootstrap.c"
 if($20){label=4;break;}else{label=9;break;} //@line 6246 "tcc_bootstrap.c"
 case 4: 
 var $22=$s; //@line 6246 "tcc_bootstrap.c"
 var $23=(($22+16)|0); //@line 6246 "tcc_bootstrap.c"
 var $24=(($23)|0); //@line 6246 "tcc_bootstrap.c"
 var $25=HEAP32[(($24)>>2)]; //@line 6246 "tcc_bootstrap.c"
 var $26=$25&15; //@line 6246 "tcc_bootstrap.c"
 var $27=($26|0)==7; //@line 6246 "tcc_bootstrap.c"
 if($27){label=5;break;}else{label=9;break;} //@line 6246 "tcc_bootstrap.c"
 case 5: 
 var $29=$s; //@line 6246 "tcc_bootstrap.c"
 var $30=(($29)|0); //@line 6246 "tcc_bootstrap.c"
 var $31=HEAP32[(($30)>>2)]; //@line 6246 "tcc_bootstrap.c"
 var $32=$31&-536870913; //@line 6246 "tcc_bootstrap.c"
 var $33=($32|0)>=268435456; //@line 6246 "tcc_bootstrap.c"
 if($33){label=6;break;}else{label=9;break;} //@line 6246 "tcc_bootstrap.c"
 case 6: 
 var $35=$s; //@line 6249 "tcc_bootstrap.c"
 var $36=(($35+16)|0); //@line 6249 "tcc_bootstrap.c"
 var $37=$3; //@line 6249 "tcc_bootstrap.c"
 var $38=_find_field($36,$37); //@line 6249 "tcc_bootstrap.c"
 $ret=$38; //@line 6249 "tcc_bootstrap.c"
 var $39=$ret; //@line 6250 "tcc_bootstrap.c"
 var $40=($39|0)!=0; //@line 6250 "tcc_bootstrap.c"
 if($40){label=7;break;}else{label=8;break;} //@line 6250 "tcc_bootstrap.c"
 case 7: 
 var $42=$ret; //@line 6251 "tcc_bootstrap.c"
 $1=$42; //@line 6251 "tcc_bootstrap.c"
 label=13;break; //@line 6251 "tcc_bootstrap.c"
 case 8: 
 label=9;break; //@line 6252 "tcc_bootstrap.c"
 case 9: 
 var $45=$s; //@line 6253 "tcc_bootstrap.c"
 var $46=(($45)|0); //@line 6253 "tcc_bootstrap.c"
 var $47=HEAP32[(($46)>>2)]; //@line 6253 "tcc_bootstrap.c"
 var $48=$3; //@line 6253 "tcc_bootstrap.c"
 var $49=($47|0)==($48|0); //@line 6253 "tcc_bootstrap.c"
 if($49){label=10;break;}else{label=11;break;} //@line 6253 "tcc_bootstrap.c"
 case 10: 
 label=12;break; //@line 6254 "tcc_bootstrap.c"
 case 11: 
 label=2;break; //@line 6255 "tcc_bootstrap.c"
 case 12: 
 var $53=$s; //@line 6256 "tcc_bootstrap.c"
 $1=$53; //@line 6256 "tcc_bootstrap.c"
 label=13;break; //@line 6256 "tcc_bootstrap.c"
 case 13: 
 var $55=$1; //@line 6257 "tcc_bootstrap.c"
 STACKTOP=sp;return $55; //@line 6257 "tcc_bootstrap.c"
  default: assert(0, "bad label: " + label);
 }

}


function _gfunc_sret($vt,$variadic,$ret,$ret_align,$regsize){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 $1=$vt;
 $2=$variadic;
 $3=$ret;
 $4=$ret_align;
 $5=$regsize;
 var $6=$4; //@line 10226 "tcc_bootstrap.c"
 HEAP32[(($6)>>2)]=1; //@line 10226 "tcc_bootstrap.c"
 STACKTOP=sp;return 0; //@line 10227 "tcc_bootstrap.c"
}


function _gfunc_param_typed($func,$arg){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $func_type;
 var $type=sp;
 $1=$func;
 $2=$arg;
 var $3=$1; //@line 7050 "tcc_bootstrap.c"
 var $4=(($3+8)|0); //@line 7050 "tcc_bootstrap.c"
 var $5=$4; //@line 7050 "tcc_bootstrap.c"
 var $6=(($5+4)|0); //@line 7050 "tcc_bootstrap.c"
 var $7=$6; //@line 7050 "tcc_bootstrap.c"
 var $8=$7; //@line 7050 "tcc_bootstrap.c"
 var $9=HEAP16[(($8)>>1)]; //@line 7050 "tcc_bootstrap.c"
 var $10=($9&65535)>>>3; //@line 7050 "tcc_bootstrap.c"
 var $11=$10&3; //@line 7050 "tcc_bootstrap.c"
 var $12=($11&65535); //@line 7050 "tcc_bootstrap.c"
 $func_type=$12; //@line 7050 "tcc_bootstrap.c"
 var $13=$func_type; //@line 7051 "tcc_bootstrap.c"
 var $14=($13|0)==2; //@line 7051 "tcc_bootstrap.c"
 if($14){label=4;break;}else{label=2;break;} //@line 7051 "tcc_bootstrap.c"
 case 2: 
 var $16=$func_type; //@line 7051 "tcc_bootstrap.c"
 var $17=($16|0)==3; //@line 7051 "tcc_bootstrap.c"
 if($17){label=3;break;}else{label=10;break;} //@line 7051 "tcc_bootstrap.c"
 case 3: 
 var $19=$2; //@line 7051 "tcc_bootstrap.c"
 var $20=($19|0)==0; //@line 7051 "tcc_bootstrap.c"
 if($20){label=4;break;}else{label=10;break;} //@line 7051 "tcc_bootstrap.c"
 case 4: 
 var $22=HEAP32[((9288)>>2)]; //@line 7053 "tcc_bootstrap.c"
 var $23=(($22)|0); //@line 7053 "tcc_bootstrap.c"
 var $24=(($23)|0); //@line 7053 "tcc_bootstrap.c"
 var $25=HEAP32[(($24)>>2)]; //@line 7053 "tcc_bootstrap.c"
 var $26=$25&15; //@line 7053 "tcc_bootstrap.c"
 var $27=($26|0)==8; //@line 7053 "tcc_bootstrap.c"
 if($27){label=5;break;}else{label=6;break;} //@line 7053 "tcc_bootstrap.c"
 case 5: 
 _gen_cast_s(9); //@line 7054 "tcc_bootstrap.c"
 label=9;break; //@line 7055 "tcc_bootstrap.c"
 case 6: 
 var $30=HEAP32[((9288)>>2)]; //@line 7055 "tcc_bootstrap.c"
 var $31=(($30)|0); //@line 7055 "tcc_bootstrap.c"
 var $32=(($31)|0); //@line 7055 "tcc_bootstrap.c"
 var $33=HEAP32[(($32)>>2)]; //@line 7055 "tcc_bootstrap.c"
 var $34=$33&128; //@line 7055 "tcc_bootstrap.c"
 var $35=($34|0)!=0; //@line 7055 "tcc_bootstrap.c"
 if($35){label=7;break;}else{label=8;break;} //@line 7055 "tcc_bootstrap.c"
 case 7: 
 var $37=HEAP32[((9288)>>2)]; //@line 7056 "tcc_bootstrap.c"
 var $38=(($37)|0); //@line 7056 "tcc_bootstrap.c"
 var $39=(($38)|0); //@line 7056 "tcc_bootstrap.c"
 var $40=HEAP32[(($39)>>2)]; //@line 7056 "tcc_bootstrap.c"
 var $41=$40&31; //@line 7056 "tcc_bootstrap.c"
 var $42=(($type)|0); //@line 7056 "tcc_bootstrap.c"
 HEAP32[(($42)>>2)]=$41; //@line 7056 "tcc_bootstrap.c"
 var $43=HEAP32[((9288)>>2)]; //@line 7057 "tcc_bootstrap.c"
 var $44=(($43)|0); //@line 7057 "tcc_bootstrap.c"
 var $45=(($44+4)|0); //@line 7057 "tcc_bootstrap.c"
 var $46=HEAP32[(($45)>>2)]; //@line 7057 "tcc_bootstrap.c"
 var $47=(($type+4)|0); //@line 7057 "tcc_bootstrap.c"
 HEAP32[(($47)>>2)]=$46; //@line 7057 "tcc_bootstrap.c"
 _gen_cast($type); //@line 7058 "tcc_bootstrap.c"
 label=8;break; //@line 7059 "tcc_bootstrap.c"
 case 8: 
 label=9;break;
 case 9: 
 label=14;break; //@line 7060 "tcc_bootstrap.c"
 case 10: 
 var $51=$2; //@line 7060 "tcc_bootstrap.c"
 var $52=($51|0)==0; //@line 7060 "tcc_bootstrap.c"
 if($52){label=11;break;}else{label=12;break;} //@line 7060 "tcc_bootstrap.c"
 case 11: 
 _tcc_error(7464,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs; //@line 7061 "tcc_bootstrap.c"
 label=13;break; //@line 7062 "tcc_bootstrap.c"
 case 12: 
 var $55=$2; //@line 7063 "tcc_bootstrap.c"
 var $56=(($55+16)|0); //@line 7063 "tcc_bootstrap.c"
 var $57=$type; //@line 7063 "tcc_bootstrap.c"
 var $58=$56; //@line 7063 "tcc_bootstrap.c"
 assert(8 % 1 === 0);HEAP32[(($57)>>2)]=HEAP32[(($58)>>2)];HEAP32[((($57)+(4))>>2)]=HEAP32[((($58)+(4))>>2)]; //@line 7063 "tcc_bootstrap.c"
 var $59=(($type)|0); //@line 7064 "tcc_bootstrap.c"
 var $60=HEAP32[(($59)>>2)]; //@line 7064 "tcc_bootstrap.c"
 var $61=$60&-257; //@line 7064 "tcc_bootstrap.c"
 HEAP32[(($59)>>2)]=$61; //@line 7064 "tcc_bootstrap.c"
 _gen_assign_cast($type); //@line 7065 "tcc_bootstrap.c"
 label=13;break;
 case 13: 
 label=14;break;
 case 14: 
 STACKTOP=sp;return; //@line 7067 "tcc_bootstrap.c"
  default: assert(0, "bad label: " + label);
 }

}


function _parse_type($type){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+32)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $ad=sp;
 var $n=(sp)+(24);
 $1=$type;
 var $2=$1; //@line 7092 "tcc_bootstrap.c"
 var $3=_parse_btype($2,$ad); //@line 7092 "tcc_bootstrap.c"
 var $4=($3|0)!=0; //@line 7092 "tcc_bootstrap.c"
 if($4){label=3;break;}else{label=2;break;} //@line 7092 "tcc_bootstrap.c"
 case 2: 
 _expect(7416); //@line 7093 "tcc_bootstrap.c"
 label=3;break; //@line 7094 "tcc_bootstrap.c"
 case 3: 
 var $7=$1; //@line 7095 "tcc_bootstrap.c"
 var $8=_type_decl($7,$ad,$n,1); //@line 7095 "tcc_bootstrap.c"
 STACKTOP=sp;return; //@line 7096 "tcc_bootstrap.c"
  default: assert(0, "bad label: " + label);
 }

}


function _gjmp_addr($a){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $r;
 $1=$a;
 var $2=$1; //@line 10351 "tcc_bootstrap.c"
 var $3=HEAP32[((11008)>>2)]; //@line 10351 "tcc_bootstrap.c"
 var $4=((($2)-($3))|0); //@line 10351 "tcc_bootstrap.c"
 var $5=((($4)-(2))|0); //@line 10351 "tcc_bootstrap.c"
 $r=$5; //@line 10351 "tcc_bootstrap.c"
 var $6=$r; //@line 10352 "tcc_bootstrap.c"
 var $7=$r; //@line 10352 "tcc_bootstrap.c"
 var $8=(($7)&255); //@line 10352 "tcc_bootstrap.c"
 var $9=(($8<<24)>>24); //@line 10352 "tcc_bootstrap.c"
 var $10=($6|0)==($9|0); //@line 10352 "tcc_bootstrap.c"
 if($10){label=2;break;}else{label=3;break;} //@line 10352 "tcc_bootstrap.c"
 case 2: 
 _g(235); //@line 10353 "tcc_bootstrap.c"
 var $12=$r; //@line 10354 "tcc_bootstrap.c"
 _g($12); //@line 10354 "tcc_bootstrap.c"
 label=4;break; //@line 10355 "tcc_bootstrap.c"
 case 3: 
 var $14=$1; //@line 10356 "tcc_bootstrap.c"
 var $15=HEAP32[((11008)>>2)]; //@line 10356 "tcc_bootstrap.c"
 var $16=((($14)-($15))|0); //@line 10356 "tcc_bootstrap.c"
 var $17=((($16)-(5))|0); //@line 10356 "tcc_bootstrap.c"
 var $18=_oad(233,$17); //@line 10356 "tcc_bootstrap.c"
 label=4;break;
 case 4: 
 STACKTOP=sp;return; //@line 10358 "tcc_bootstrap.c"
  default: assert(0, "bad label: " + label);
 }

}


function _is_label(){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $last_tok;
 var $2=HEAP32[((10472)>>2)]; //@line 8025 "tcc_bootstrap.c"
 var $3=($2|0)<314; //@line 8025 "tcc_bootstrap.c"
 if($3){label=2;break;}else{label=3;break;} //@line 8025 "tcc_bootstrap.c"
 case 2: 
 $1=0; //@line 8026 "tcc_bootstrap.c"
 label=6;break; //@line 8026 "tcc_bootstrap.c"
 case 3: 
 var $6=HEAP32[((10472)>>2)]; //@line 8027 "tcc_bootstrap.c"
 $last_tok=$6; //@line 8027 "tcc_bootstrap.c"
 _next(); //@line 8028 "tcc_bootstrap.c"
 var $7=HEAP32[((10472)>>2)]; //@line 8029 "tcc_bootstrap.c"
 var $8=($7|0)==58; //@line 8029 "tcc_bootstrap.c"
 if($8){label=4;break;}else{label=5;break;} //@line 8029 "tcc_bootstrap.c"
 case 4: 
 var $10=$last_tok; //@line 8030 "tcc_bootstrap.c"
 $1=$10; //@line 8030 "tcc_bootstrap.c"
 label=6;break; //@line 8030 "tcc_bootstrap.c"
 case 5: 
 var $12=$last_tok; //@line 8032 "tcc_bootstrap.c"
 _unget_tok($12); //@line 8032 "tcc_bootstrap.c"
 $1=0; //@line 8033 "tcc_bootstrap.c"
 label=6;break; //@line 8033 "tcc_bootstrap.c"
 case 6: 
 var $14=$1; //@line 8035 "tcc_bootstrap.c"
 STACKTOP=sp;return $14; //@line 8035 "tcc_bootstrap.c"
  default: assert(0, "bad label: " + label);
 }

}


function _unget_tok($last_tok){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 var $str;
 $1=$last_tok;
 var $2=_tok_str_alloc(); //@line 3891 "tcc_bootstrap.c"
 $str=$2; //@line 3891 "tcc_bootstrap.c"
 var $3=$str; //@line 3892 "tcc_bootstrap.c"
 var $4=HEAP32[((10472)>>2)]; //@line 3892 "tcc_bootstrap.c"
 _tok_str_add2($3,$4,10440); //@line 3892 "tcc_bootstrap.c"
 var $5=$str; //@line 3893 "tcc_bootstrap.c"
 _tok_str_add($5,0); //@line 3893 "tcc_bootstrap.c"
 var $6=$str; //@line 3894 "tcc_bootstrap.c"
 _begin_macro($6,1); //@line 3894 "tcc_bootstrap.c"
 var $7=$1; //@line 3895 "tcc_bootstrap.c"
 HEAP32[((10472)>>2)]=$7; //@line 3895 "tcc_bootstrap.c"
 STACKTOP=sp;return; //@line 3896 "tcc_bootstrap.c"
}


function _decl($l){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 $1=$l;
 var $2=$1; //@line 9215 "tcc_bootstrap.c"
 var $3=_decl0($2,0,0); //@line 9215 "tcc_bootstrap.c"
 STACKTOP=sp;return; //@line 9216 "tcc_bootstrap.c"
}


function _label_pop($ptop,$slast,$keep){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $s;
 var $s1;
 $1=$ptop;
 $2=$slast;
 $3=$keep;
 var $4=$1; //@line 2197 "tcc_bootstrap.c"
 var $5=HEAP32[(($4)>>2)]; //@line 2197 "tcc_bootstrap.c"
 $s=$5; //@line 2197 "tcc_bootstrap.c"
 label=2;break; //@line 2197 "tcc_bootstrap.c"
 case 2: 
 var $7=$s; //@line 2197 "tcc_bootstrap.c"
 var $8=$2; //@line 2197 "tcc_bootstrap.c"
 var $9=($7|0)!=($8|0); //@line 2197 "tcc_bootstrap.c"
 if($9){label=3;break;}else{label=15;break;} //@line 2197 "tcc_bootstrap.c"
 case 3: 
 var $11=$s; //@line 2198 "tcc_bootstrap.c"
 var $12=(($11+28)|0); //@line 2198 "tcc_bootstrap.c"
 var $13=HEAP32[(($12)>>2)]; //@line 2198 "tcc_bootstrap.c"
 $s1=$13; //@line 2198 "tcc_bootstrap.c"
 var $14=$s; //@line 2199 "tcc_bootstrap.c"
 var $15=(($14+4)|0); //@line 2199 "tcc_bootstrap.c"
 var $16=HEAP16[(($15)>>1)]; //@line 2199 "tcc_bootstrap.c"
 var $17=($16&65535); //@line 2199 "tcc_bootstrap.c"
 var $18=($17|0)==2; //@line 2199 "tcc_bootstrap.c"
 if($18){label=4;break;}else{label=5;break;} //@line 2199 "tcc_bootstrap.c"
 case 4: 
 var $20=$s; //@line 2200 "tcc_bootstrap.c"
 var $21=(($20)|0); //@line 2200 "tcc_bootstrap.c"
 var $22=HEAP32[(($21)>>2)]; //@line 2200 "tcc_bootstrap.c"
 var $23=_get_tok_str($22,0); //@line 2200 "tcc_bootstrap.c"
 _tcc_warning(6512,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$23,tempVarArgs)); STACKTOP=tempVarArgs; //@line 2200 "tcc_bootstrap.c"
 label=11;break; //@line 2201 "tcc_bootstrap.c"
 case 5: 
 var $25=$s; //@line 2201 "tcc_bootstrap.c"
 var $26=(($25+4)|0); //@line 2201 "tcc_bootstrap.c"
 var $27=HEAP16[(($26)>>1)]; //@line 2201 "tcc_bootstrap.c"
 var $28=($27&65535); //@line 2201 "tcc_bootstrap.c"
 var $29=($28|0)==1; //@line 2201 "tcc_bootstrap.c"
 if($29){label=6;break;}else{label=7;break;} //@line 2201 "tcc_bootstrap.c"
 case 6: 
 var $31=$s; //@line 2203 "tcc_bootstrap.c"
 var $32=(($31)|0); //@line 2203 "tcc_bootstrap.c"
 var $33=HEAP32[(($32)>>2)]; //@line 2203 "tcc_bootstrap.c"
 var $34=_get_tok_str($33,0); //@line 2203 "tcc_bootstrap.c"
 _tcc_error(6480,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$34,tempVarArgs)); STACKTOP=tempVarArgs; //@line 2203 "tcc_bootstrap.c"
 label=10;break; //@line 2204 "tcc_bootstrap.c"
 case 7: 
 var $36=$s; //@line 2205 "tcc_bootstrap.c"
 var $37=(($36+8)|0); //@line 2205 "tcc_bootstrap.c"
 var $38=$37; //@line 2205 "tcc_bootstrap.c"
 var $39=(($38)|0); //@line 2205 "tcc_bootstrap.c"
 var $40=HEAP32[(($39)>>2)]; //@line 2205 "tcc_bootstrap.c"
 var $41=($40|0)!=0; //@line 2205 "tcc_bootstrap.c"
 if($41){label=8;break;}else{label=9;break;} //@line 2205 "tcc_bootstrap.c"
 case 8: 
 var $43=$s; //@line 2206 "tcc_bootstrap.c"
 var $44=HEAP32[((76672)>>2)]; //@line 2206 "tcc_bootstrap.c"
 var $45=$s; //@line 2206 "tcc_bootstrap.c"
 var $46=(($45+8)|0); //@line 2206 "tcc_bootstrap.c"
 var $47=$46; //@line 2206 "tcc_bootstrap.c"
 var $48=(($47+4)|0); //@line 2206 "tcc_bootstrap.c"
 var $49=$48; //@line 2206 "tcc_bootstrap.c"
 var $50=HEAP32[(($49)>>2)]; //@line 2206 "tcc_bootstrap.c"
 _put_extern_sym($43,$44,$50,1); //@line 2206 "tcc_bootstrap.c"
 label=9;break; //@line 2207 "tcc_bootstrap.c"
 case 9: 
 label=10;break;
 case 10: 
 label=11;break;
 case 11: 
 var $54=$s; //@line 2209 "tcc_bootstrap.c"
 var $55=(($54+32)|0); //@line 2209 "tcc_bootstrap.c"
 var $56=HEAP32[(($55)>>2)]; //@line 2209 "tcc_bootstrap.c"
 var $57=$s; //@line 2209 "tcc_bootstrap.c"
 var $58=(($57)|0); //@line 2209 "tcc_bootstrap.c"
 var $59=HEAP32[(($58)>>2)]; //@line 2209 "tcc_bootstrap.c"
 var $60=((($59)-(256))|0); //@line 2209 "tcc_bootstrap.c"
 var $61=HEAP32[((10496)>>2)]; //@line 2209 "tcc_bootstrap.c"
 var $62=(($61+($60<<2))|0); //@line 2209 "tcc_bootstrap.c"
 var $63=HEAP32[(($62)>>2)]; //@line 2209 "tcc_bootstrap.c"
 var $64=(($63+8)|0); //@line 2209 "tcc_bootstrap.c"
 HEAP32[(($64)>>2)]=$56; //@line 2209 "tcc_bootstrap.c"
 var $65=$3; //@line 2210 "tcc_bootstrap.c"
 var $66=($65|0)!=0; //@line 2210 "tcc_bootstrap.c"
 if($66){label=13;break;}else{label=12;break;} //@line 2210 "tcc_bootstrap.c"
 case 12: 
 var $68=$s; //@line 2211 "tcc_bootstrap.c"
 _sym_free($68); //@line 2211 "tcc_bootstrap.c"
 label=13;break; //@line 2211 "tcc_bootstrap.c"
 case 13: 
 label=14;break; //@line 2212 "tcc_bootstrap.c"
 case 14: 
 var $71=$s1; //@line 2197 "tcc_bootstrap.c"
 $s=$71; //@line 2197 "tcc_bootstrap.c"
 label=2;break; //@line 2197 "tcc_bootstrap.c"
 case 15: 
 var $73=$3; //@line 2213 "tcc_bootstrap.c"
 var $74=($73|0)!=0; //@line 2213 "tcc_bootstrap.c"
 if($74){label=17;break;}else{label=16;break;} //@line 2213 "tcc_bootstrap.c"
 case 16: 
 var $76=$2; //@line 2214 "tcc_bootstrap.c"
 var $77=$1; //@line 2214 "tcc_bootstrap.c"
 HEAP32[(($77)>>2)]=$76; //@line 2214 "tcc_bootstrap.c"
 label=17;break; //@line 2214 "tcc_bootstrap.c"
 case 17: 
 STACKTOP=sp;return; //@line 2215 "tcc_bootstrap.c"
  default: assert(0, "bad label: " + label);
 }

}


function _sym_pop($ptop,$b,$keep){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $s;
 var $ss;
 var $ps;
 var $ts;
 var $v;
 $1=$ptop;
 $2=$b;
 $3=$keep;
 var $4=$1; //@line 4363 "tcc_bootstrap.c"
 var $5=HEAP32[(($4)>>2)]; //@line 4363 "tcc_bootstrap.c"
 $s=$5; //@line 4363 "tcc_bootstrap.c"
 label=2;break; //@line 4364 "tcc_bootstrap.c"
 case 2: 
 var $7=$s; //@line 4364 "tcc_bootstrap.c"
 var $8=$2; //@line 4364 "tcc_bootstrap.c"
 var $9=($7|0)!=($8|0); //@line 4364 "tcc_bootstrap.c"
 if($9){label=3;break;}else{label=12;break;} //@line 4364 "tcc_bootstrap.c"
 case 3: 
 var $11=$s; //@line 4365 "tcc_bootstrap.c"
 var $12=(($11+28)|0); //@line 4365 "tcc_bootstrap.c"
 var $13=HEAP32[(($12)>>2)]; //@line 4365 "tcc_bootstrap.c"
 $ss=$13; //@line 4365 "tcc_bootstrap.c"
 var $14=$s; //@line 4366 "tcc_bootstrap.c"
 var $15=(($14)|0); //@line 4366 "tcc_bootstrap.c"
 var $16=HEAP32[(($15)>>2)]; //@line 4366 "tcc_bootstrap.c"
 $v=$16; //@line 4366 "tcc_bootstrap.c"
 var $17=$v; //@line 4367 "tcc_bootstrap.c"
 var $18=$17&536870912; //@line 4367 "tcc_bootstrap.c"
 var $19=($18|0)!=0; //@line 4367 "tcc_bootstrap.c"
 if($19){label=9;break;}else{label=4;break;} //@line 4367 "tcc_bootstrap.c"
 case 4: 
 var $21=$v; //@line 4367 "tcc_bootstrap.c"
 var $22=$21&-1073741825; //@line 4367 "tcc_bootstrap.c"
 var $23=($22|0)<268435456; //@line 4367 "tcc_bootstrap.c"
 if($23){label=5;break;}else{label=9;break;} //@line 4367 "tcc_bootstrap.c"
 case 5: 
 var $25=$v; //@line 4368 "tcc_bootstrap.c"
 var $26=$25&-1073741825; //@line 4368 "tcc_bootstrap.c"
 var $27=((($26)-(256))|0); //@line 4368 "tcc_bootstrap.c"
 var $28=HEAP32[((10496)>>2)]; //@line 4368 "tcc_bootstrap.c"
 var $29=(($28+($27<<2))|0); //@line 4368 "tcc_bootstrap.c"
 var $30=HEAP32[(($29)>>2)]; //@line 4368 "tcc_bootstrap.c"
 $ts=$30; //@line 4368 "tcc_bootstrap.c"
 var $31=$v; //@line 4369 "tcc_bootstrap.c"
 var $32=$31&1073741824; //@line 4369 "tcc_bootstrap.c"
 var $33=($32|0)!=0; //@line 4369 "tcc_bootstrap.c"
 if($33){label=6;break;}else{label=7;break;} //@line 4369 "tcc_bootstrap.c"
 case 6: 
 var $35=$ts; //@line 4370 "tcc_bootstrap.c"
 var $36=(($35+12)|0); //@line 4370 "tcc_bootstrap.c"
 $ps=$36; //@line 4370 "tcc_bootstrap.c"
 label=8;break; //@line 4370 "tcc_bootstrap.c"
 case 7: 
 var $38=$ts; //@line 4372 "tcc_bootstrap.c"
 var $39=(($38+16)|0); //@line 4372 "tcc_bootstrap.c"
 $ps=$39; //@line 4372 "tcc_bootstrap.c"
 label=8;break;
 case 8: 
 var $41=$s; //@line 4373 "tcc_bootstrap.c"
 var $42=(($41+32)|0); //@line 4373 "tcc_bootstrap.c"
 var $43=HEAP32[(($42)>>2)]; //@line 4373 "tcc_bootstrap.c"
 var $44=$ps; //@line 4373 "tcc_bootstrap.c"
 HEAP32[(($44)>>2)]=$43; //@line 4373 "tcc_bootstrap.c"
 label=9;break; //@line 4374 "tcc_bootstrap.c"
 case 9: 
 var $46=$3; //@line 4375 "tcc_bootstrap.c"
 var $47=($46|0)!=0; //@line 4375 "tcc_bootstrap.c"
 if($47){label=11;break;}else{label=10;break;} //@line 4375 "tcc_bootstrap.c"
 case 10: 
 var $49=$s; //@line 4376 "tcc_bootstrap.c"
 _sym_free($49); //@line 4376 "tcc_bootstrap.c"
 label=11;break; //@line 4376 "tcc_bootstrap.c"
 case 11: 
 var $51=$ss; //@line 4377 "tcc_bootstrap.c"
 $s=$51; //@line 4377 "tcc_bootstrap.c"
 label=2;break; //@line 4378 "tcc_bootstrap.c"
 case 12: 
 var $53=$3; //@line 4379 "tcc_bootstrap.c"
 var $54=($53|0)!=0; //@line 4379 "tcc_bootstrap.c"
 if($54){label=14;break;}else{label=13;break;} //@line 4379 "tcc_bootstrap.c"
 case 13: 
 var $56=$2; //@line 4380 "tcc_bootstrap.c"
 var $57=$1; //@line 4380 "tcc_bootstrap.c"
 HEAP32[(($57)>>2)]=$56; //@line 4380 "tcc_bootstrap.c"
 label=14;break; //@line 4380 "tcc_bootstrap.c"
 case 14: 
 STACKTOP=sp;return; //@line 4381 "tcc_bootstrap.c"
  default: assert(0, "bad label: " + label);
 }

}


function _gfunc_return($func_type){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+40)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $type=sp;
 var $ret_type=(sp)+(8);
 var $ret_align=(sp)+(16);
 var $ret_nregs;
 var $regsize=(sp)+(24);
 var $r;
 var $size;
 var $addr;
 var $align=(sp)+(32);
 $1=$func_type;
 var $2=$1; //@line 8038 "tcc_bootstrap.c"
 var $3=(($2)|0); //@line 8038 "tcc_bootstrap.c"
 var $4=HEAP32[(($3)>>2)]; //@line 8038 "tcc_bootstrap.c"
 var $5=$4&15; //@line 8038 "tcc_bootstrap.c"
 var $6=($5|0)==7; //@line 8038 "tcc_bootstrap.c"
 if($6){label=2;break;}else{label=20;break;} //@line 8038 "tcc_bootstrap.c"
 case 2: 
 var $8=$1; //@line 8041 "tcc_bootstrap.c"
 var $9=HEAP32[((76608)>>2)]; //@line 8041 "tcc_bootstrap.c"
 var $10=_gfunc_sret($8,$9,$ret_type,$ret_align,$regsize); //@line 8041 "tcc_bootstrap.c"
 $ret_nregs=$10; //@line 8041 "tcc_bootstrap.c"
 var $11=$ret_nregs; //@line 8043 "tcc_bootstrap.c"
 var $12=0==($11|0); //@line 8043 "tcc_bootstrap.c"
 if($12){label=3;break;}else{label=4;break;} //@line 8043 "tcc_bootstrap.c"
 case 3: 
 var $14=$1; //@line 8044 "tcc_bootstrap.c"
 var $15=$type; //@line 8044 "tcc_bootstrap.c"
 var $16=$14; //@line 8044 "tcc_bootstrap.c"
 assert(8 % 1 === 0);HEAP32[(($15)>>2)]=HEAP32[(($16)>>2)];HEAP32[((($15)+(4))>>2)]=HEAP32[((($16)+(4))>>2)]; //@line 8044 "tcc_bootstrap.c"
 _mk_pointer($type); //@line 8045 "tcc_bootstrap.c"
 var $17=HEAP32[((76600)>>2)]; //@line 8046 "tcc_bootstrap.c"
 _vset($type,306,$17); //@line 8046 "tcc_bootstrap.c"
 _indir(); //@line 8047 "tcc_bootstrap.c"
 _vswap(); //@line 8048 "tcc_bootstrap.c"
 _vstore(); //@line 8049 "tcc_bootstrap.c"
 label=19;break; //@line 8050 "tcc_bootstrap.c"
 case 4: 
 var $19=$1; //@line 8052 "tcc_bootstrap.c"
 var $20=_type_size($19,$align); //@line 8052 "tcc_bootstrap.c"
 $size=$20; //@line 8052 "tcc_bootstrap.c"
 var $21=HEAP32[((9288)>>2)]; //@line 8053 "tcc_bootstrap.c"
 var $22=(($21+8)|0); //@line 8053 "tcc_bootstrap.c"
 var $23=HEAP16[(($22)>>1)]; //@line 8053 "tcc_bootstrap.c"
 var $24=($23&65535); //@line 8053 "tcc_bootstrap.c"
 var $25=($24|0)!=306; //@line 8053 "tcc_bootstrap.c"
 if($25){label=6;break;}else{label=5;break;} //@line 8053 "tcc_bootstrap.c"
 case 5: 
 var $27=HEAP32[((9288)>>2)]; //@line 8053 "tcc_bootstrap.c"
 var $28=(($27+16)|0); //@line 8053 "tcc_bootstrap.c"
 var $29=$28; //@line 8053 "tcc_bootstrap.c"
 var $ld$0$0=(($29)|0);
 var $30$0=HEAP32[(($ld$0$0)>>2)];
 var $ld$1$1=(($29+4)|0);
 var $30$1=HEAP32[(($ld$1$1)>>2)];
 var $31=HEAP32[(($ret_align)>>2)]; //@line 8053 "tcc_bootstrap.c"
 var $32=((($31)-(1))|0); //@line 8053 "tcc_bootstrap.c"
 var $33$0=$32;
 var $33$1=((((($32|0)<0))|0)?-1:0);
 var $34$0=$30$0&$33$0;
 var $34$1=$30$1&$33$1;
 var $$etemp$2$0=0;
 var $$etemp$2$1=0;
 var $35=(($34$0|0) != ($$etemp$2$0|0)) | (($34$1|0) != ($$etemp$2$1|0)); //@line 8053 "tcc_bootstrap.c"
 if($35){label=6;break;}else{label=8;break;} //@line 8053 "tcc_bootstrap.c"
 case 6: 
 var $37=HEAP32[(($align)>>2)]; //@line 8053 "tcc_bootstrap.c"
 var $38=HEAP32[(($ret_align)>>2)]; //@line 8053 "tcc_bootstrap.c"
 var $39=((($38)-(1))|0); //@line 8053 "tcc_bootstrap.c"
 var $40=$37&$39; //@line 8053 "tcc_bootstrap.c"
 var $41=($40|0)!=0; //@line 8053 "tcc_bootstrap.c"
 if($41){label=7;break;}else{label=8;break;} //@line 8053 "tcc_bootstrap.c"
 case 7: 
 var $43=HEAP32[((10728)>>2)]; //@line 8056 "tcc_bootstrap.c"
 var $44=$size; //@line 8056 "tcc_bootstrap.c"
 var $45=((($43)-($44))|0); //@line 8056 "tcc_bootstrap.c"
 var $46=HEAP32[(($ret_align)>>2)]; //@line 8056 "tcc_bootstrap.c"
 var $47=(((-$46))|0); //@line 8056 "tcc_bootstrap.c"
 var $48=$45&$47; //@line 8056 "tcc_bootstrap.c"
 HEAP32[((10728)>>2)]=$48; //@line 8056 "tcc_bootstrap.c"
 var $49=HEAP32[((10728)>>2)]; //@line 8057 "tcc_bootstrap.c"
 $addr=$49; //@line 8057 "tcc_bootstrap.c"
 var $50=$1; //@line 8058 "tcc_bootstrap.c"
 var $51=$type; //@line 8058 "tcc_bootstrap.c"
 var $52=$50; //@line 8058 "tcc_bootstrap.c"
 assert(8 % 1 === 0);HEAP32[(($51)>>2)]=HEAP32[(($52)>>2)];HEAP32[((($51)+(4))>>2)]=HEAP32[((($52)+(4))>>2)]; //@line 8058 "tcc_bootstrap.c"
 var $53=$addr; //@line 8059 "tcc_bootstrap.c"
 _vset($type,306,$53); //@line 8059 "tcc_bootstrap.c"
 _vswap(); //@line 8060 "tcc_bootstrap.c"
 _vstore(); //@line 8061 "tcc_bootstrap.c"
 _vpop(); //@line 8062 "tcc_bootstrap.c"
 var $54=$addr; //@line 8063 "tcc_bootstrap.c"
 _vset($ret_type,306,$54); //@line 8063 "tcc_bootstrap.c"
 label=8;break; //@line 8064 "tcc_bootstrap.c"
 case 8: 
 var $56=HEAP32[((9288)>>2)]; //@line 8065 "tcc_bootstrap.c"
 var $57=(($56)|0); //@line 8065 "tcc_bootstrap.c"
 var $58=$57; //@line 8065 "tcc_bootstrap.c"
 var $59=$ret_type; //@line 8065 "tcc_bootstrap.c"
 assert(8 % 1 === 0);HEAP32[(($58)>>2)]=HEAP32[(($59)>>2)];HEAP32[((($58)+(4))>>2)]=HEAP32[((($59)+(4))>>2)]; //@line 8065 "tcc_bootstrap.c"
 var $60=(($ret_type)|0); //@line 8066 "tcc_bootstrap.c"
 var $61=HEAP32[(($60)>>2)]; //@line 8066 "tcc_bootstrap.c"
 var $62=_is_float($61); //@line 8066 "tcc_bootstrap.c"
 var $63=($62|0)!=0; //@line 8066 "tcc_bootstrap.c"
 if($63){label=9;break;}else{label=10;break;} //@line 8066 "tcc_bootstrap.c"
 case 9: 
 var $65=(($ret_type)|0); //@line 8067 "tcc_bootstrap.c"
 var $66=HEAP32[(($65)>>2)]; //@line 8067 "tcc_bootstrap.c"
 var $67=_rc_fret($66); //@line 8067 "tcc_bootstrap.c"
 $r=$67; //@line 8067 "tcc_bootstrap.c"
 label=11;break; //@line 8067 "tcc_bootstrap.c"
 case 10: 
 $r=4; //@line 8069 "tcc_bootstrap.c"
 label=11;break;
 case 11: 
 var $70=$ret_nregs; //@line 8070 "tcc_bootstrap.c"
 var $71=($70|0)==1; //@line 8070 "tcc_bootstrap.c"
 if($71){label=12;break;}else{label=13;break;} //@line 8070 "tcc_bootstrap.c"
 case 12: 
 var $73=$r; //@line 8071 "tcc_bootstrap.c"
 var $74=_gv($73); //@line 8071 "tcc_bootstrap.c"
 label=18;break; //@line 8071 "tcc_bootstrap.c"
 case 13: 
 label=14;break; //@line 8073 "tcc_bootstrap.c"
 case 14: 
 _vdup(); //@line 8074 "tcc_bootstrap.c"
 var $77=$r; //@line 8075 "tcc_bootstrap.c"
 var $78=_gv($77); //@line 8075 "tcc_bootstrap.c"
 _vpop(); //@line 8076 "tcc_bootstrap.c"
 var $79=$ret_nregs; //@line 8077 "tcc_bootstrap.c"
 var $80=((($79)-(1))|0); //@line 8077 "tcc_bootstrap.c"
 $ret_nregs=$80; //@line 8077 "tcc_bootstrap.c"
 var $81=($80|0)==0; //@line 8077 "tcc_bootstrap.c"
 if($81){label=15;break;}else{label=16;break;} //@line 8077 "tcc_bootstrap.c"
 case 15: 
 label=17;break; //@line 8078 "tcc_bootstrap.c"
 case 16: 
 var $84=$r; //@line 8079 "tcc_bootstrap.c"
 var $85=$84<<1; //@line 8079 "tcc_bootstrap.c"
 $r=$85; //@line 8079 "tcc_bootstrap.c"
 var $86=HEAP32[(($regsize)>>2)]; //@line 8080 "tcc_bootstrap.c"
 var $87$0=$86;
 var $87$1=((((($86|0)<0))|0)?-1:0);
 var $88=HEAP32[((9288)>>2)]; //@line 8080 "tcc_bootstrap.c"
 var $89=(($88+16)|0); //@line 8080 "tcc_bootstrap.c"
 var $90=$89; //@line 8080 "tcc_bootstrap.c"
 var $ld$3$0=(($90)|0);
 var $91$0=HEAP32[(($ld$3$0)>>2)];
 var $ld$4$1=(($90+4)|0);
 var $91$1=HEAP32[(($ld$4$1)>>2)];
 var $92$0=_i64Add($91$0,$91$1,$87$0,$87$1);var $92$1=tempRet0; //@line 8080 "tcc_bootstrap.c"
 var $st$5$0=(($90)|0);
 HEAP32[(($st$5$0)>>2)]=$92$0;
 var $st$6$1=(($90+4)|0);
 HEAP32[(($st$6$1)>>2)]=$92$1;
 label=14;break; //@line 8081 "tcc_bootstrap.c"
 case 17: 
 label=18;break;
 case 18: 
 label=19;break;
 case 19: 
 label=24;break; //@line 8084 "tcc_bootstrap.c"
 case 20: 
 var $97=$1; //@line 8084 "tcc_bootstrap.c"
 var $98=(($97)|0); //@line 8084 "tcc_bootstrap.c"
 var $99=HEAP32[(($98)>>2)]; //@line 8084 "tcc_bootstrap.c"
 var $100=_is_float($99); //@line 8084 "tcc_bootstrap.c"
 var $101=($100|0)!=0; //@line 8084 "tcc_bootstrap.c"
 if($101){label=21;break;}else{label=22;break;} //@line 8084 "tcc_bootstrap.c"
 case 21: 
 var $103=$1; //@line 8085 "tcc_bootstrap.c"
 var $104=(($103)|0); //@line 8085 "tcc_bootstrap.c"
 var $105=HEAP32[(($104)>>2)]; //@line 8085 "tcc_bootstrap.c"
 var $106=_rc_fret($105); //@line 8085 "tcc_bootstrap.c"
 var $107=_gv($106); //@line 8085 "tcc_bootstrap.c"
 label=23;break; //@line 8086 "tcc_bootstrap.c"
 case 22: 
 var $109=_gv(4); //@line 8087 "tcc_bootstrap.c"
 label=23;break;
 case 23: 
 label=24;break;
 case 24: 
 var $112=HEAP32[((9288)>>2)]; //@line 8089 "tcc_bootstrap.c"
 var $113=((($112)-(40))|0); //@line 8089 "tcc_bootstrap.c"
 HEAP32[((9288)>>2)]=$113; //@line 8089 "tcc_bootstrap.c"
 STACKTOP=sp;return; //@line 8090 "tcc_bootstrap.c"
  default: assert(0, "bad label: " + label);
 }

}


function _decl0($l,$is_for_loop_init,$func_sym){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+48)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $v=sp;
 var $has_init;
 var $r;
 var $type=(sp)+(8);
 var $btype=(sp)+(16);
 var $sym;
 var $ad=(sp)+(24);
 var $v1;
 var $fn;
 var $filename;
 var $esym;
 var $alias_target;
 $2=$l;
 $3=$is_for_loop_init;
 $4=$func_sym;
 label=2;break; //@line 9053 "tcc_bootstrap.c"
 case 2: 
 var $6=_parse_btype($btype,$ad); //@line 9054 "tcc_bootstrap.c"
 var $7=($6|0)!=0; //@line 9054 "tcc_bootstrap.c"
 if($7){label=16;break;}else{label=3;break;} //@line 9054 "tcc_bootstrap.c"
 case 3: 
 var $9=$3; //@line 9055 "tcc_bootstrap.c"
 var $10=($9|0)!=0; //@line 9055 "tcc_bootstrap.c"
 if($10){label=4;break;}else{label=5;break;} //@line 9055 "tcc_bootstrap.c"
 case 4: 
 $1=0; //@line 9056 "tcc_bootstrap.c"
 label=123;break; //@line 9056 "tcc_bootstrap.c"
 case 5: 
 var $13=HEAP32[((10472)>>2)]; //@line 9057 "tcc_bootstrap.c"
 var $14=($13|0)==59; //@line 9057 "tcc_bootstrap.c"
 if($14){label=6;break;}else{label=8;break;} //@line 9057 "tcc_bootstrap.c"
 case 6: 
 var $16=$2; //@line 9057 "tcc_bootstrap.c"
 var $17=($16|0)!=51; //@line 9057 "tcc_bootstrap.c"
 if($17){label=7;break;}else{label=8;break;} //@line 9057 "tcc_bootstrap.c"
 case 7: 
 _next(); //@line 9058 "tcc_bootstrap.c"
 label=2;break; //@line 9059 "tcc_bootstrap.c"
 case 8: 
 var $20=$2; //@line 9061 "tcc_bootstrap.c"
 var $21=($20|0)!=48; //@line 9061 "tcc_bootstrap.c"
 if($21){label=9;break;}else{label=10;break;} //@line 9061 "tcc_bootstrap.c"
 case 9: 
 label=122;break; //@line 9062 "tcc_bootstrap.c"
 case 10: 
 var $24=HEAP32[((10472)>>2)]; //@line 9063 "tcc_bootstrap.c"
 var $25=($24|0)>=314; //@line 9063 "tcc_bootstrap.c"
 if($25){label=11;break;}else{label=12;break;} //@line 9063 "tcc_bootstrap.c"
 case 11: 
 var $27=(($btype)|0); //@line 9064 "tcc_bootstrap.c"
 HEAP32[(($27)>>2)]=3; //@line 9064 "tcc_bootstrap.c"
 label=15;break; //@line 9065 "tcc_bootstrap.c"
 case 12: 
 var $29=HEAP32[((10472)>>2)]; //@line 9066 "tcc_bootstrap.c"
 var $30=($29|0)!=-1; //@line 9066 "tcc_bootstrap.c"
 if($30){label=13;break;}else{label=14;break;} //@line 9066 "tcc_bootstrap.c"
 case 13: 
 _expect(7224); //@line 9067 "tcc_bootstrap.c"
 label=14;break; //@line 9067 "tcc_bootstrap.c"
 case 14: 
 label=122;break; //@line 9068 "tcc_bootstrap.c"
 case 15: 
 label=16;break; //@line 9070 "tcc_bootstrap.c"
 case 16: 
 var $35=HEAP32[((10472)>>2)]; //@line 9071 "tcc_bootstrap.c"
 var $36=($35|0)==59; //@line 9071 "tcc_bootstrap.c"
 if($36){label=17;break;}else{label=25;break;} //@line 9071 "tcc_bootstrap.c"
 case 17: 
 var $38=(($btype)|0); //@line 9072 "tcc_bootstrap.c"
 var $39=HEAP32[(($38)>>2)]; //@line 9072 "tcc_bootstrap.c"
 var $40=$39&15; //@line 9072 "tcc_bootstrap.c"
 var $41=($40|0)==7; //@line 9072 "tcc_bootstrap.c"
 if($41){label=18;break;}else{label=22;break;} //@line 9072 "tcc_bootstrap.c"
 case 18: 
 var $43=(($btype+4)|0); //@line 9073 "tcc_bootstrap.c"
 var $44=HEAP32[(($43)>>2)]; //@line 9073 "tcc_bootstrap.c"
 var $45=(($44)|0); //@line 9073 "tcc_bootstrap.c"
 var $46=HEAP32[(($45)>>2)]; //@line 9073 "tcc_bootstrap.c"
 $v1=$46; //@line 9073 "tcc_bootstrap.c"
 var $47=$v1; //@line 9074 "tcc_bootstrap.c"
 var $48=$47&536870912; //@line 9074 "tcc_bootstrap.c"
 var $49=($48|0)!=0; //@line 9074 "tcc_bootstrap.c"
 if($49){label=21;break;}else{label=19;break;} //@line 9074 "tcc_bootstrap.c"
 case 19: 
 var $51=$v1; //@line 9074 "tcc_bootstrap.c"
 var $52=$51&-1073741825; //@line 9074 "tcc_bootstrap.c"
 var $53=($52|0)>=268435456; //@line 9074 "tcc_bootstrap.c"
 if($53){label=20;break;}else{label=21;break;} //@line 9074 "tcc_bootstrap.c"
 case 20: 
 _tcc_warning(7176,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs; //@line 9075 "tcc_bootstrap.c"
 label=21;break; //@line 9075 "tcc_bootstrap.c"
 case 21: 
 _next(); //@line 9076 "tcc_bootstrap.c"
 label=2;break; //@line 9077 "tcc_bootstrap.c"
 case 22: 
 var $57=(($btype)|0); //@line 9079 "tcc_bootstrap.c"
 var $58=HEAP32[(($57)>>2)]; //@line 9079 "tcc_bootstrap.c"
 var $59=_IS_ENUM($58); //@line 9079 "tcc_bootstrap.c"
 var $60=($59|0)!=0; //@line 9079 "tcc_bootstrap.c"
 if($60){label=23;break;}else{label=24;break;} //@line 9079 "tcc_bootstrap.c"
 case 23: 
 _next(); //@line 9080 "tcc_bootstrap.c"
 label=2;break; //@line 9081 "tcc_bootstrap.c"
 case 24: 
 label=25;break; //@line 9083 "tcc_bootstrap.c"
 case 25: 
 label=26;break; //@line 9084 "tcc_bootstrap.c"
 case 26: 
 var $65=$type; //@line 9085 "tcc_bootstrap.c"
 var $66=$btype; //@line 9085 "tcc_bootstrap.c"
 assert(8 % 1 === 0);HEAP32[(($65)>>2)]=HEAP32[(($66)>>2)];HEAP32[((($65)+(4))>>2)]=HEAP32[((($66)+(4))>>2)]; //@line 9085 "tcc_bootstrap.c"
 var $67=(($type)|0); //@line 9086 "tcc_bootstrap.c"
 var $68=HEAP32[(($67)>>2)]; //@line 9086 "tcc_bootstrap.c"
 var $69=$68&64; //@line 9086 "tcc_bootstrap.c"
 var $70=($69|0)!=0; //@line 9086 "tcc_bootstrap.c"
 if($70){label=27;break;}else{label=29;break;} //@line 9086 "tcc_bootstrap.c"
 case 27: 
 var $72=(($type+4)|0); //@line 9086 "tcc_bootstrap.c"
 var $73=HEAP32[(($72)>>2)]; //@line 9086 "tcc_bootstrap.c"
 var $74=(($73+8)|0); //@line 9086 "tcc_bootstrap.c"
 var $75=$74; //@line 9086 "tcc_bootstrap.c"
 var $76=(($75)|0); //@line 9086 "tcc_bootstrap.c"
 var $77=HEAP32[(($76)>>2)]; //@line 9086 "tcc_bootstrap.c"
 var $78=($77|0)<0; //@line 9086 "tcc_bootstrap.c"
 if($78){label=28;break;}else{label=29;break;} //@line 9086 "tcc_bootstrap.c"
 case 28: 
 var $80=(($type+4)|0); //@line 9087 "tcc_bootstrap.c"
 var $81=HEAP32[(($80)>>2)]; //@line 9087 "tcc_bootstrap.c"
 var $82=(($81+16)|0); //@line 9087 "tcc_bootstrap.c"
 var $83=(($type+4)|0); //@line 9087 "tcc_bootstrap.c"
 var $84=HEAP32[(($83)>>2)]; //@line 9087 "tcc_bootstrap.c"
 var $85=(($84+8)|0); //@line 9087 "tcc_bootstrap.c"
 var $86=$85; //@line 9087 "tcc_bootstrap.c"
 var $87=(($86)|0); //@line 9087 "tcc_bootstrap.c"
 var $88=HEAP32[(($87)>>2)]; //@line 9087 "tcc_bootstrap.c"
 var $89=_sym_push(536870912,$82,0,$88); //@line 9087 "tcc_bootstrap.c"
 var $90=(($type+4)|0); //@line 9087 "tcc_bootstrap.c"
 HEAP32[(($90)>>2)]=$89; //@line 9087 "tcc_bootstrap.c"
 label=29;break; //@line 9088 "tcc_bootstrap.c"
 case 29: 
 var $92=_type_decl($type,$ad,$v,2); //@line 9089 "tcc_bootstrap.c"
 var $93=(($type)|0); //@line 9090 "tcc_bootstrap.c"
 var $94=HEAP32[(($93)>>2)]; //@line 9090 "tcc_bootstrap.c"
 var $95=$94&15; //@line 9090 "tcc_bootstrap.c"
 var $96=($95|0)==6; //@line 9090 "tcc_bootstrap.c"
 if($96){label=30;break;}else{label=37;break;} //@line 9090 "tcc_bootstrap.c"
 case 30: 
 var $98=(($type)|0); //@line 9091 "tcc_bootstrap.c"
 var $99=HEAP32[(($98)>>2)]; //@line 9091 "tcc_bootstrap.c"
 var $100=$99&8192; //@line 9091 "tcc_bootstrap.c"
 var $101=($100|0)!=0; //@line 9091 "tcc_bootstrap.c"
 if($101){label=31;break;}else{label=33;break;} //@line 9091 "tcc_bootstrap.c"
 case 31: 
 var $103=$2; //@line 9091 "tcc_bootstrap.c"
 var $104=($103|0)==50; //@line 9091 "tcc_bootstrap.c"
 if($104){label=32;break;}else{label=33;break;} //@line 9091 "tcc_bootstrap.c"
 case 32: 
 _tcc_error(7128,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs; //@line 9092 "tcc_bootstrap.c"
 label=33;break; //@line 9093 "tcc_bootstrap.c"
 case 33: 
 var $107=(($type+4)|0); //@line 9094 "tcc_bootstrap.c"
 var $108=HEAP32[(($107)>>2)]; //@line 9094 "tcc_bootstrap.c"
 $sym=$108; //@line 9094 "tcc_bootstrap.c"
 var $109=$sym; //@line 9095 "tcc_bootstrap.c"
 var $110=(($109+8)|0); //@line 9095 "tcc_bootstrap.c"
 var $111=$110; //@line 9095 "tcc_bootstrap.c"
 var $112=(($111+4)|0); //@line 9095 "tcc_bootstrap.c"
 var $113=$112; //@line 9095 "tcc_bootstrap.c"
 var $114=$113; //@line 9095 "tcc_bootstrap.c"
 var $115=HEAP16[(($114)>>1)]; //@line 9095 "tcc_bootstrap.c"
 var $116=($115&65535)>>>3; //@line 9095 "tcc_bootstrap.c"
 var $117=$116&3; //@line 9095 "tcc_bootstrap.c"
 var $118=($117&65535); //@line 9095 "tcc_bootstrap.c"
 var $119=($118|0)==2; //@line 9095 "tcc_bootstrap.c"
 if($119){label=34;break;}else{label=36;break;} //@line 9095 "tcc_bootstrap.c"
 case 34: 
 var $121=$2; //@line 9095 "tcc_bootstrap.c"
 var $122=($121|0)==48; //@line 9095 "tcc_bootstrap.c"
 if($122){label=35;break;}else{label=36;break;} //@line 9095 "tcc_bootstrap.c"
 case 35: 
 var $124=$sym; //@line 9096 "tcc_bootstrap.c"
 var $125=_decl0(51,0,$124); //@line 9096 "tcc_bootstrap.c"
 label=36;break; //@line 9096 "tcc_bootstrap.c"
 case 36: 
 label=37;break; //@line 9097 "tcc_bootstrap.c"
 case 37: 
 var $128=HEAP32[((10472)>>2)]; //@line 9098 "tcc_bootstrap.c"
 var $129=($128|0)==123; //@line 9098 "tcc_bootstrap.c"
 if($129){label=38;break;}else{label=60;break;} //@line 9098 "tcc_bootstrap.c"
 case 38: 
 var $131=$2; //@line 9099 "tcc_bootstrap.c"
 var $132=($131|0)!=48; //@line 9099 "tcc_bootstrap.c"
 if($132){label=39;break;}else{label=40;break;} //@line 9099 "tcc_bootstrap.c"
 case 39: 
 _tcc_error(7096,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs; //@line 9100 "tcc_bootstrap.c"
 label=40;break; //@line 9100 "tcc_bootstrap.c"
 case 40: 
 var $135=(($type)|0); //@line 9101 "tcc_bootstrap.c"
 var $136=HEAP32[(($135)>>2)]; //@line 9101 "tcc_bootstrap.c"
 var $137=$136&15; //@line 9101 "tcc_bootstrap.c"
 var $138=($137|0)!=6; //@line 9101 "tcc_bootstrap.c"
 if($138){label=41;break;}else{label=42;break;} //@line 9101 "tcc_bootstrap.c"
 case 41: 
 _expect(7072); //@line 9102 "tcc_bootstrap.c"
 label=42;break; //@line 9102 "tcc_bootstrap.c"
 case 42: 
 var $141=(($type+4)|0); //@line 9103 "tcc_bootstrap.c"
 var $142=HEAP32[(($141)>>2)]; //@line 9103 "tcc_bootstrap.c"
 $sym=$142; //@line 9103 "tcc_bootstrap.c"
 label=43;break; //@line 9104 "tcc_bootstrap.c"
 case 43: 
 var $144=$sym; //@line 9104 "tcc_bootstrap.c"
 var $145=(($144+24)|0); //@line 9104 "tcc_bootstrap.c"
 var $146=$145; //@line 9104 "tcc_bootstrap.c"
 var $147=HEAP32[(($146)>>2)]; //@line 9104 "tcc_bootstrap.c"
 $sym=$147; //@line 9104 "tcc_bootstrap.c"
 var $148=($147|0)!=0; //@line 9104 "tcc_bootstrap.c"
 if($148){label=44;break;}else{label=49;break;} //@line 9104 "tcc_bootstrap.c"
 case 44: 
 var $150=$sym; //@line 9105 "tcc_bootstrap.c"
 var $151=(($150)|0); //@line 9105 "tcc_bootstrap.c"
 var $152=HEAP32[(($151)>>2)]; //@line 9105 "tcc_bootstrap.c"
 var $153=$152&-536870913; //@line 9105 "tcc_bootstrap.c"
 var $154=($153|0)!=0; //@line 9105 "tcc_bootstrap.c"
 if($154){label=46;break;}else{label=45;break;} //@line 9105 "tcc_bootstrap.c"
 case 45: 
 _expect(3008); //@line 9106 "tcc_bootstrap.c"
 label=46;break; //@line 9106 "tcc_bootstrap.c"
 case 46: 
 var $157=$sym; //@line 9107 "tcc_bootstrap.c"
 var $158=(($157+16)|0); //@line 9107 "tcc_bootstrap.c"
 var $159=(($158)|0); //@line 9107 "tcc_bootstrap.c"
 var $160=HEAP32[(($159)>>2)]; //@line 9107 "tcc_bootstrap.c"
 var $161=($160|0)==0; //@line 9107 "tcc_bootstrap.c"
 if($161){label=47;break;}else{label=48;break;} //@line 9107 "tcc_bootstrap.c"
 case 47: 
 var $163=$sym; //@line 9108 "tcc_bootstrap.c"
 var $164=(($163+16)|0); //@line 9108 "tcc_bootstrap.c"
 var $165=$164; //@line 9108 "tcc_bootstrap.c"
 assert(8 % 1 === 0);HEAP32[(($165)>>2)]=HEAP32[((11000)>>2)];HEAP32[((($165)+(4))>>2)]=HEAP32[((11004)>>2)]; //@line 9108 "tcc_bootstrap.c"
 label=48;break; //@line 9108 "tcc_bootstrap.c"
 case 48: 
 label=43;break; //@line 9109 "tcc_bootstrap.c"
 case 49: 
 var $168=(($type)|0); //@line 9110 "tcc_bootstrap.c"
 var $169=HEAP32[(($168)>>2)]; //@line 9110 "tcc_bootstrap.c"
 var $170=$169&36864; //@line 9110 "tcc_bootstrap.c"
 var $171=($170|0)==36864; //@line 9110 "tcc_bootstrap.c"
 if($171){label=50;break;}else{label=51;break;} //@line 9110 "tcc_bootstrap.c"
 case 50: 
 var $173=(($type)|0); //@line 9111 "tcc_bootstrap.c"
 var $174=HEAP32[(($173)>>2)]; //@line 9111 "tcc_bootstrap.c"
 var $175=$174&-4097; //@line 9111 "tcc_bootstrap.c"
 var $176=$175|8192; //@line 9111 "tcc_bootstrap.c"
 var $177=(($type)|0); //@line 9111 "tcc_bootstrap.c"
 HEAP32[(($177)>>2)]=$176; //@line 9111 "tcc_bootstrap.c"
 label=51;break; //@line 9111 "tcc_bootstrap.c"
 case 51: 
 var $179=HEAP32[(($v)>>2)]; //@line 9112 "tcc_bootstrap.c"
 var $180=_external_global_sym($179,$type,0); //@line 9112 "tcc_bootstrap.c"
 $sym=$180; //@line 9112 "tcc_bootstrap.c"
 var $181=(($type)|0); //@line 9113 "tcc_bootstrap.c"
 var $182=HEAP32[(($181)>>2)]; //@line 9113 "tcc_bootstrap.c"
 var $183=$182&-4097; //@line 9113 "tcc_bootstrap.c"
 HEAP32[(($181)>>2)]=$183; //@line 9113 "tcc_bootstrap.c"
 var $184=$sym; //@line 9114 "tcc_bootstrap.c"
 _patch_storage($184,$ad,$type); //@line 9114 "tcc_bootstrap.c"
 var $185=(($type)|0); //@line 9115 "tcc_bootstrap.c"
 var $186=HEAP32[(($185)>>2)]; //@line 9115 "tcc_bootstrap.c"
 var $187=$186&40960; //@line 9115 "tcc_bootstrap.c"
 var $188=($187|0)==40960; //@line 9115 "tcc_bootstrap.c"
 if($188){label=52;break;}else{label=56;break;} //@line 9115 "tcc_bootstrap.c"
 case 52: 
 var $190=HEAP32[((76648)>>2)]; //@line 9119 "tcc_bootstrap.c"
 var $191=($190|0)!=0; //@line 9119 "tcc_bootstrap.c"
 if($191){label=53;break;}else{label=54;break;} //@line 9119 "tcc_bootstrap.c"
 case 53: 
 var $193=HEAP32[((76648)>>2)]; //@line 9119 "tcc_bootstrap.c"
 var $194=(($193+40)|0); //@line 9119 "tcc_bootstrap.c"
 var $195=(($194)|0); //@line 9119 "tcc_bootstrap.c"
 var $198=$195;label=55;break; //@line 9119 "tcc_bootstrap.c"
 case 54: 
 var $198=76760;label=55;break; //@line 9119 "tcc_bootstrap.c"
 case 55: 
 var $198; //@line 9119 "tcc_bootstrap.c"
 $filename=$198; //@line 9119 "tcc_bootstrap.c"
 var $199=$filename; //@line 9120 "tcc_bootstrap.c"
 var $200=_strlen($199); //@line 9120 "tcc_bootstrap.c"
 var $201=((($200)+(12))|0); //@line 9120 "tcc_bootstrap.c"
 var $202=_tcc_malloc($201); //@line 9120 "tcc_bootstrap.c"
 var $203=$202; //@line 9120 "tcc_bootstrap.c"
 $fn=$203; //@line 9120 "tcc_bootstrap.c"
 var $204=$fn; //@line 9121 "tcc_bootstrap.c"
 var $205=(($204+8)|0); //@line 9121 "tcc_bootstrap.c"
 var $206=(($205)|0); //@line 9121 "tcc_bootstrap.c"
 var $207=$filename; //@line 9121 "tcc_bootstrap.c"
 var $208=_strcpy($206,$207); //@line 9121 "tcc_bootstrap.c"
 var $209=$sym; //@line 9122 "tcc_bootstrap.c"
 var $210=$fn; //@line 9122 "tcc_bootstrap.c"
 var $211=(($210+4)|0); //@line 9122 "tcc_bootstrap.c"
 HEAP32[(($211)>>2)]=$209; //@line 9122 "tcc_bootstrap.c"
 var $212=$fn; //@line 9123 "tcc_bootstrap.c"
 var $213=(($212)|0); //@line 9123 "tcc_bootstrap.c"
 _skip_or_save_block($213); //@line 9123 "tcc_bootstrap.c"
 var $214=HEAP32[((10488)>>2)]; //@line 9124 "tcc_bootstrap.c"
 var $215=(($214+672)|0); //@line 9124 "tcc_bootstrap.c"
 var $216=$215; //@line 9124 "tcc_bootstrap.c"
 var $217=HEAP32[((10488)>>2)]; //@line 9124 "tcc_bootstrap.c"
 var $218=(($217+676)|0); //@line 9124 "tcc_bootstrap.c"
 var $219=$fn; //@line 9124 "tcc_bootstrap.c"
 var $220=$219; //@line 9124 "tcc_bootstrap.c"
 _dynarray_add($216,$218,$220); //@line 9124 "tcc_bootstrap.c"
 label=59;break; //@line 9126 "tcc_bootstrap.c"
 case 56: 
 var $222=(($ad+8)|0); //@line 9127 "tcc_bootstrap.c"
 var $223=HEAP32[(($222)>>2)]; //@line 9127 "tcc_bootstrap.c"
 HEAP32[((76672)>>2)]=$223; //@line 9127 "tcc_bootstrap.c"
 var $224=HEAP32[((76672)>>2)]; //@line 9128 "tcc_bootstrap.c"
 var $225=($224|0)!=0; //@line 9128 "tcc_bootstrap.c"
 if($225){label=58;break;}else{label=57;break;} //@line 9128 "tcc_bootstrap.c"
 case 57: 
 var $227=HEAP32[((10480)>>2)]; //@line 9129 "tcc_bootstrap.c"
 HEAP32[((76672)>>2)]=$227; //@line 9129 "tcc_bootstrap.c"
 label=58;break; //@line 9129 "tcc_bootstrap.c"
 case 58: 
 var $229=$sym; //@line 9130 "tcc_bootstrap.c"
 _gen_function($229); //@line 9130 "tcc_bootstrap.c"
 label=59;break;
 case 59: 
 label=121;break; //@line 9132 "tcc_bootstrap.c"
 case 60: 
 var $232=$2; //@line 9134 "tcc_bootstrap.c"
 var $233=($232|0)==51; //@line 9134 "tcc_bootstrap.c"
 if($233){label=61;break;}else{label=73;break;} //@line 9134 "tcc_bootstrap.c"
 case 61: 
 var $235=$4; //@line 9135 "tcc_bootstrap.c"
 var $236=(($235+24)|0); //@line 9135 "tcc_bootstrap.c"
 var $237=$236; //@line 9135 "tcc_bootstrap.c"
 var $238=HEAP32[(($237)>>2)]; //@line 9135 "tcc_bootstrap.c"
 $sym=$238; //@line 9135 "tcc_bootstrap.c"
 label=62;break; //@line 9135 "tcc_bootstrap.c"
 case 62: 
 var $240=$sym; //@line 9135 "tcc_bootstrap.c"
 var $241=($240|0)!=0; //@line 9135 "tcc_bootstrap.c"
 if($241){label=63;break;}else{label=67;break;} //@line 9135 "tcc_bootstrap.c"
 case 63: 
 var $243=$sym; //@line 9136 "tcc_bootstrap.c"
 var $244=(($243)|0); //@line 9136 "tcc_bootstrap.c"
 var $245=HEAP32[(($244)>>2)]; //@line 9136 "tcc_bootstrap.c"
 var $246=$245&-536870913; //@line 9136 "tcc_bootstrap.c"
 var $247=HEAP32[(($v)>>2)]; //@line 9136 "tcc_bootstrap.c"
 var $248=($246|0)==($247|0); //@line 9136 "tcc_bootstrap.c"
 if($248){label=64;break;}else{label=65;break;} //@line 9136 "tcc_bootstrap.c"
 case 64: 
 label=68;break; //@line 9137 "tcc_bootstrap.c"
 case 65: 
 label=66;break; //@line 9137 "tcc_bootstrap.c"
 case 66: 
 var $252=$sym; //@line 9135 "tcc_bootstrap.c"
 var $253=(($252+24)|0); //@line 9135 "tcc_bootstrap.c"
 var $254=$253; //@line 9135 "tcc_bootstrap.c"
 var $255=HEAP32[(($254)>>2)]; //@line 9135 "tcc_bootstrap.c"
 $sym=$255; //@line 9135 "tcc_bootstrap.c"
 label=62;break; //@line 9135 "tcc_bootstrap.c"
 case 67: 
 var $257=HEAP32[(($v)>>2)]; //@line 9139 "tcc_bootstrap.c"
 var $258=_get_tok_str($257,0); //@line 9139 "tcc_bootstrap.c"
 _tcc_error(7016,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$258,tempVarArgs)); STACKTOP=tempVarArgs; //@line 9139 "tcc_bootstrap.c"
 label=68;break; //@line 9139 "tcc_bootstrap.c"
 case 68: 
 var $260=(($type)|0); //@line 9141 "tcc_bootstrap.c"
 var $261=HEAP32[(($260)>>2)]; //@line 9141 "tcc_bootstrap.c"
 var $262=$261&61440; //@line 9141 "tcc_bootstrap.c"
 var $263=($262|0)!=0; //@line 9141 "tcc_bootstrap.c"
 if($263){label=69;break;}else{label=70;break;} //@line 9141 "tcc_bootstrap.c"
 case 69: 
 var $265=HEAP32[(($v)>>2)]; //@line 9143 "tcc_bootstrap.c"
 var $266=_get_tok_str($265,0); //@line 9143 "tcc_bootstrap.c"
 _tcc_error(6976,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$266,tempVarArgs)); STACKTOP=tempVarArgs; //@line 9143 "tcc_bootstrap.c"
 label=70;break; //@line 9143 "tcc_bootstrap.c"
 case 70: 
 var $268=$sym; //@line 9144 "tcc_bootstrap.c"
 var $269=(($268+16)|0); //@line 9144 "tcc_bootstrap.c"
 var $270=(($269)|0); //@line 9144 "tcc_bootstrap.c"
 var $271=HEAP32[(($270)>>2)]; //@line 9144 "tcc_bootstrap.c"
 var $272=($271|0)!=0; //@line 9144 "tcc_bootstrap.c"
 if($272){label=71;break;}else{label=72;break;} //@line 9144 "tcc_bootstrap.c"
 case 71: 
 var $274=HEAP32[(($v)>>2)]; //@line 9146 "tcc_bootstrap.c"
 var $275=_get_tok_str($274,0); //@line 9146 "tcc_bootstrap.c"
 _tcc_error(6944,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$275,tempVarArgs)); STACKTOP=tempVarArgs; //@line 9146 "tcc_bootstrap.c"
 label=72;break; //@line 9146 "tcc_bootstrap.c"
 case 72: 
 _convert_parameter_type($type); //@line 9147 "tcc_bootstrap.c"
 var $277=$sym; //@line 9148 "tcc_bootstrap.c"
 var $278=(($277+16)|0); //@line 9148 "tcc_bootstrap.c"
 var $279=$278; //@line 9148 "tcc_bootstrap.c"
 var $280=$type; //@line 9148 "tcc_bootstrap.c"
 assert(8 % 1 === 0);HEAP32[(($279)>>2)]=HEAP32[(($280)>>2)];HEAP32[((($279)+(4))>>2)]=HEAP32[((($280)+(4))>>2)]; //@line 9148 "tcc_bootstrap.c"
 label=115;break; //@line 9149 "tcc_bootstrap.c"
 case 73: 
 var $282=(($type)|0); //@line 9149 "tcc_bootstrap.c"
 var $283=HEAP32[(($282)>>2)]; //@line 9149 "tcc_bootstrap.c"
 var $284=$283&16384; //@line 9149 "tcc_bootstrap.c"
 var $285=($284|0)!=0; //@line 9149 "tcc_bootstrap.c"
 if($285){label=74;break;}else{label=82;break;} //@line 9149 "tcc_bootstrap.c"
 case 74: 
 var $287=HEAP32[(($v)>>2)]; //@line 9150 "tcc_bootstrap.c"
 var $288=_sym_find($287); //@line 9150 "tcc_bootstrap.c"
 $sym=$288; //@line 9150 "tcc_bootstrap.c"
 var $289=$sym; //@line 9151 "tcc_bootstrap.c"
 var $290=($289|0)!=0; //@line 9151 "tcc_bootstrap.c"
 if($290){label=75;break;}else{label=80;break;} //@line 9151 "tcc_bootstrap.c"
 case 75: 
 var $292=$sym; //@line 9151 "tcc_bootstrap.c"
 var $293=(($292+8)|0); //@line 9151 "tcc_bootstrap.c"
 var $294=$293; //@line 9151 "tcc_bootstrap.c"
 var $295=(($294+4)|0); //@line 9151 "tcc_bootstrap.c"
 var $296=$295; //@line 9151 "tcc_bootstrap.c"
 var $297=HEAP32[(($296)>>2)]; //@line 9151 "tcc_bootstrap.c"
 var $298=HEAP32[((10712)>>2)]; //@line 9151 "tcc_bootstrap.c"
 var $299=($297|0)==($298|0); //@line 9151 "tcc_bootstrap.c"
 if($299){label=76;break;}else{label=80;break;} //@line 9151 "tcc_bootstrap.c"
 case 76: 
 var $301=$sym; //@line 9152 "tcc_bootstrap.c"
 var $302=(($301+16)|0); //@line 9152 "tcc_bootstrap.c"
 var $303=_is_compatible_types($302,$type); //@line 9152 "tcc_bootstrap.c"
 var $304=($303|0)!=0; //@line 9152 "tcc_bootstrap.c"
 if($304){label=77;break;}else{label=78;break;} //@line 9152 "tcc_bootstrap.c"
 case 77: 
 var $306=$sym; //@line 9152 "tcc_bootstrap.c"
 var $307=(($306+16)|0); //@line 9152 "tcc_bootstrap.c"
 var $308=(($307)|0); //@line 9152 "tcc_bootstrap.c"
 var $309=HEAP32[(($308)>>2)]; //@line 9152 "tcc_bootstrap.c"
 var $310=$309&16384; //@line 9152 "tcc_bootstrap.c"
 var $311=($310|0)!=0; //@line 9152 "tcc_bootstrap.c"
 if($311){label=79;break;}else{label=78;break;} //@line 9152 "tcc_bootstrap.c"
 case 78: 
 var $313=HEAP32[(($v)>>2)]; //@line 9155 "tcc_bootstrap.c"
 var $314=_get_tok_str($313,0); //@line 9155 "tcc_bootstrap.c"
 _tcc_error(6904,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$314,tempVarArgs)); STACKTOP=tempVarArgs; //@line 9155 "tcc_bootstrap.c"
 label=79;break; //@line 9155 "tcc_bootstrap.c"
 case 79: 
 var $316=$sym; //@line 9156 "tcc_bootstrap.c"
 var $317=(($316+16)|0); //@line 9156 "tcc_bootstrap.c"
 var $318=$317; //@line 9156 "tcc_bootstrap.c"
 var $319=$type; //@line 9156 "tcc_bootstrap.c"
 assert(8 % 1 === 0);HEAP32[(($318)>>2)]=HEAP32[(($319)>>2)];HEAP32[((($318)+(4))>>2)]=HEAP32[((($319)+(4))>>2)]; //@line 9156 "tcc_bootstrap.c"
 label=81;break; //@line 9157 "tcc_bootstrap.c"
 case 80: 
 var $321=HEAP32[(($v)>>2)]; //@line 9158 "tcc_bootstrap.c"
 var $322=_sym_push($321,$type,0,0); //@line 9158 "tcc_bootstrap.c"
 $sym=$322; //@line 9158 "tcc_bootstrap.c"
 label=81;break;
 case 81: 
 var $324=$sym; //@line 9160 "tcc_bootstrap.c"
 var $325=(($324+6)|0); //@line 9160 "tcc_bootstrap.c"
 var $326=(($ad)|0); //@line 9160 "tcc_bootstrap.c"
 var $327=$325; //@line 9160 "tcc_bootstrap.c"
 var $328=$326; //@line 9160 "tcc_bootstrap.c"
 assert(2 % 1 === 0);HEAP16[(($327)>>1)]=HEAP16[(($328)>>1)]; //@line 9160 "tcc_bootstrap.c"
 var $329=$sym; //@line 9161 "tcc_bootstrap.c"
 var $330=(($329+8)|0); //@line 9161 "tcc_bootstrap.c"
 var $331=$330; //@line 9161 "tcc_bootstrap.c"
 var $332=(($331+4)|0); //@line 9161 "tcc_bootstrap.c"
 var $333=$332; //@line 9161 "tcc_bootstrap.c"
 var $334=(($ad+4)|0); //@line 9161 "tcc_bootstrap.c"
 var $335=$333; //@line 9161 "tcc_bootstrap.c"
 var $336=$334; //@line 9161 "tcc_bootstrap.c"
 assert(4 % 1 === 0);HEAP32[(($335)>>2)]=HEAP32[(($336)>>2)]; //@line 9161 "tcc_bootstrap.c"
 label=114;break; //@line 9162 "tcc_bootstrap.c"
 case 82: 
 $r=0; //@line 9163 "tcc_bootstrap.c"
 var $338=(($type)|0); //@line 9164 "tcc_bootstrap.c"
 var $339=HEAP32[(($338)>>2)]; //@line 9164 "tcc_bootstrap.c"
 var $340=$339&15; //@line 9164 "tcc_bootstrap.c"
 var $341=($340|0)==6; //@line 9164 "tcc_bootstrap.c"
 if($341){label=83;break;}else{label=84;break;} //@line 9164 "tcc_bootstrap.c"
 case 83: 
 var $343=(($type+4)|0); //@line 9165 "tcc_bootstrap.c"
 var $344=HEAP32[(($343)>>2)]; //@line 9165 "tcc_bootstrap.c"
 var $345=(($344+8)|0); //@line 9165 "tcc_bootstrap.c"
 var $346=$345; //@line 9165 "tcc_bootstrap.c"
 var $347=(($346+4)|0); //@line 9165 "tcc_bootstrap.c"
 var $348=$347; //@line 9165 "tcc_bootstrap.c"
 var $349=(($ad+4)|0); //@line 9165 "tcc_bootstrap.c"
 var $350=$348; //@line 9165 "tcc_bootstrap.c"
 var $351=$349; //@line 9165 "tcc_bootstrap.c"
 assert(4 % 1 === 0);HEAP32[(($350)>>2)]=HEAP32[(($351)>>2)]; //@line 9165 "tcc_bootstrap.c"
 label=87;break; //@line 9166 "tcc_bootstrap.c"
 case 84: 
 var $353=(($type)|0); //@line 9166 "tcc_bootstrap.c"
 var $354=HEAP32[(($353)>>2)]; //@line 9166 "tcc_bootstrap.c"
 var $355=$354&64; //@line 9166 "tcc_bootstrap.c"
 var $356=($355|0)!=0; //@line 9166 "tcc_bootstrap.c"
 if($356){label=86;break;}else{label=85;break;} //@line 9166 "tcc_bootstrap.c"
 case 85: 
 var $358=(($type)|0); //@line 9167 "tcc_bootstrap.c"
 var $359=HEAP32[(($358)>>2)]; //@line 9167 "tcc_bootstrap.c"
 var $360=_lvalue_type($359); //@line 9167 "tcc_bootstrap.c"
 var $361=$r; //@line 9167 "tcc_bootstrap.c"
 var $362=$361|$360; //@line 9167 "tcc_bootstrap.c"
 $r=$362; //@line 9167 "tcc_bootstrap.c"
 label=86;break; //@line 9168 "tcc_bootstrap.c"
 case 86: 
 label=87;break;
 case 87: 
 var $365=HEAP32[((10472)>>2)]; //@line 9169 "tcc_bootstrap.c"
 var $366=($365|0)==61; //@line 9169 "tcc_bootstrap.c"
 var $367=($366&1); //@line 9169 "tcc_bootstrap.c"
 $has_init=$367; //@line 9169 "tcc_bootstrap.c"
 var $368=$has_init; //@line 9170 "tcc_bootstrap.c"
 var $369=($368|0)!=0; //@line 9170 "tcc_bootstrap.c"
 if($369){label=88;break;}else{label=90;break;} //@line 9170 "tcc_bootstrap.c"
 case 88: 
 var $371=(($type)|0); //@line 9170 "tcc_bootstrap.c"
 var $372=HEAP32[(($371)>>2)]; //@line 9170 "tcc_bootstrap.c"
 var $373=$372&1024; //@line 9170 "tcc_bootstrap.c"
 var $374=($373|0)!=0; //@line 9170 "tcc_bootstrap.c"
 if($374){label=89;break;}else{label=90;break;} //@line 9170 "tcc_bootstrap.c"
 case 89: 
 _tcc_error(6840,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs; //@line 9171 "tcc_bootstrap.c"
 label=90;break; //@line 9171 "tcc_bootstrap.c"
 case 90: 
 var $377=(($type)|0); //@line 9172 "tcc_bootstrap.c"
 var $378=HEAP32[(($377)>>2)]; //@line 9172 "tcc_bootstrap.c"
 var $379=$378&4096; //@line 9172 "tcc_bootstrap.c"
 var $380=($379|0)!=0; //@line 9172 "tcc_bootstrap.c"
 if($380){label=91;break;}else{label=93;break;} //@line 9172 "tcc_bootstrap.c"
 case 91: 
 var $382=$has_init; //@line 9172 "tcc_bootstrap.c"
 var $383=($382|0)!=0; //@line 9172 "tcc_bootstrap.c"
 if($383){label=92;break;}else{label=99;break;} //@line 9172 "tcc_bootstrap.c"
 case 92: 
 var $385=$2; //@line 9172 "tcc_bootstrap.c"
 var $386=($385|0)!=48; //@line 9172 "tcc_bootstrap.c"
 if($386){label=99;break;}else{label=93;break;} //@line 9172 "tcc_bootstrap.c"
 case 93: 
 var $388=(($type)|0); //@line 9172 "tcc_bootstrap.c"
 var $389=HEAP32[(($388)>>2)]; //@line 9172 "tcc_bootstrap.c"
 var $390=$389&15; //@line 9172 "tcc_bootstrap.c"
 var $391=($390|0)==6; //@line 9172 "tcc_bootstrap.c"
 if($391){label=99;break;}else{label=94;break;} //@line 9172 "tcc_bootstrap.c"
 case 94: 
 var $393=(($type)|0); //@line 9172 "tcc_bootstrap.c"
 var $394=HEAP32[(($393)>>2)]; //@line 9172 "tcc_bootstrap.c"
 var $395=$394&64; //@line 9172 "tcc_bootstrap.c"
 var $396=($395|0)!=0; //@line 9172 "tcc_bootstrap.c"
 if($396){label=95;break;}else{label=104;break;} //@line 9172 "tcc_bootstrap.c"
 case 95: 
 var $398=(($type)|0); //@line 9172 "tcc_bootstrap.c"
 var $399=HEAP32[(($398)>>2)]; //@line 9172 "tcc_bootstrap.c"
 var $400=$399&8192; //@line 9172 "tcc_bootstrap.c"
 var $401=($400|0)!=0; //@line 9172 "tcc_bootstrap.c"
 if($401){label=96;break;}else{label=104;break;} //@line 9172 "tcc_bootstrap.c"
 case 96: 
 var $403=$has_init; //@line 9172 "tcc_bootstrap.c"
 var $404=($403|0)!=0; //@line 9172 "tcc_bootstrap.c"
 if($404){label=104;break;}else{label=97;break;} //@line 9172 "tcc_bootstrap.c"
 case 97: 
 var $406=$2; //@line 9172 "tcc_bootstrap.c"
 var $407=($406|0)==48; //@line 9172 "tcc_bootstrap.c"
 if($407){label=98;break;}else{label=104;break;} //@line 9172 "tcc_bootstrap.c"
 case 98: 
 var $409=(($type+4)|0); //@line 9172 "tcc_bootstrap.c"
 var $410=HEAP32[(($409)>>2)]; //@line 9172 "tcc_bootstrap.c"
 var $411=(($410+8)|0); //@line 9172 "tcc_bootstrap.c"
 var $412=$411; //@line 9172 "tcc_bootstrap.c"
 var $413=(($412)|0); //@line 9172 "tcc_bootstrap.c"
 var $414=HEAP32[(($413)>>2)]; //@line 9172 "tcc_bootstrap.c"
 var $415=($414|0)<0; //@line 9172 "tcc_bootstrap.c"
 if($415){label=99;break;}else{label=104;break;} //@line 9172 "tcc_bootstrap.c"
 case 99: 
 var $417=(($type)|0); //@line 9176 "tcc_bootstrap.c"
 var $418=HEAP32[(($417)>>2)]; //@line 9176 "tcc_bootstrap.c"
 var $419=$418|4096; //@line 9176 "tcc_bootstrap.c"
 HEAP32[(($417)>>2)]=$419; //@line 9176 "tcc_bootstrap.c"
 var $420=HEAP32[(($v)>>2)]; //@line 9177 "tcc_bootstrap.c"
 var $421=$r; //@line 9177 "tcc_bootstrap.c"
 var $422=_external_sym($420,$type,$421,$ad); //@line 9177 "tcc_bootstrap.c"
 $sym=$422; //@line 9177 "tcc_bootstrap.c"
 var $423=(($ad+12)|0); //@line 9178 "tcc_bootstrap.c"
 var $424=HEAP32[(($423)>>2)]; //@line 9178 "tcc_bootstrap.c"
 var $425=($424|0)!=0; //@line 9178 "tcc_bootstrap.c"
 if($425){label=100;break;}else{label=103;break;} //@line 9178 "tcc_bootstrap.c"
 case 100: 
 var $427=(($ad+12)|0); //@line 9181 "tcc_bootstrap.c"
 var $428=HEAP32[(($427)>>2)]; //@line 9181 "tcc_bootstrap.c"
 var $429=_sym_find($428); //@line 9181 "tcc_bootstrap.c"
 $alias_target=$429; //@line 9181 "tcc_bootstrap.c"
 var $430=$alias_target; //@line 9182 "tcc_bootstrap.c"
 var $431=_elfsym($430); //@line 9182 "tcc_bootstrap.c"
 $esym=$431; //@line 9182 "tcc_bootstrap.c"
 var $432=$esym; //@line 9183 "tcc_bootstrap.c"
 var $433=($432|0)!=0; //@line 9183 "tcc_bootstrap.c"
 if($433){label=102;break;}else{label=101;break;} //@line 9183 "tcc_bootstrap.c"
 case 101: 
 _tcc_error(6800,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs; //@line 9184 "tcc_bootstrap.c"
 label=102;break; //@line 9184 "tcc_bootstrap.c"
 case 102: 
 var $436=$sym; //@line 9185 "tcc_bootstrap.c"
 var $437=(($436+8)|0); //@line 9185 "tcc_bootstrap.c"
 var $438=$437; //@line 9185 "tcc_bootstrap.c"
 var $439=(($438+4)|0); //@line 9185 "tcc_bootstrap.c"
 var $440=$439; //@line 9185 "tcc_bootstrap.c"
 HEAP32[(($440)>>2)]=0; //@line 9185 "tcc_bootstrap.c"
 var $441=$sym; //@line 9186 "tcc_bootstrap.c"
 var $442=$esym; //@line 9186 "tcc_bootstrap.c"
 var $443=(($442+14)|0); //@line 9186 "tcc_bootstrap.c"
 var $444=HEAP16[(($443)>>1)]; //@line 9186 "tcc_bootstrap.c"
 var $445=($444&65535); //@line 9186 "tcc_bootstrap.c"
 var $446=$esym; //@line 9186 "tcc_bootstrap.c"
 var $447=(($446+4)|0); //@line 9186 "tcc_bootstrap.c"
 var $448=HEAP32[(($447)>>2)]; //@line 9186 "tcc_bootstrap.c"
 var $449=$esym; //@line 9186 "tcc_bootstrap.c"
 var $450=(($449+8)|0); //@line 9186 "tcc_bootstrap.c"
 var $451=HEAP32[(($450)>>2)]; //@line 9186 "tcc_bootstrap.c"
 _put_extern_sym2($441,$445,$448,$451,0); //@line 9186 "tcc_bootstrap.c"
 label=103;break; //@line 9187 "tcc_bootstrap.c"
 case 103: 
 label=113;break; //@line 9188 "tcc_bootstrap.c"
 case 104: 
 var $454=(($type)|0); //@line 9189 "tcc_bootstrap.c"
 var $455=HEAP32[(($454)>>2)]; //@line 9189 "tcc_bootstrap.c"
 var $456=$455&8192; //@line 9189 "tcc_bootstrap.c"
 var $457=($456|0)!=0; //@line 9189 "tcc_bootstrap.c"
 if($457){label=105;break;}else{label=106;break;} //@line 9189 "tcc_bootstrap.c"
 case 105: 
 var $459=$r; //@line 9190 "tcc_bootstrap.c"
 var $460=$459|48; //@line 9190 "tcc_bootstrap.c"
 $r=$460; //@line 9190 "tcc_bootstrap.c"
 label=107;break; //@line 9190 "tcc_bootstrap.c"
 case 106: 
 var $462=$2; //@line 9192 "tcc_bootstrap.c"
 var $463=$r; //@line 9192 "tcc_bootstrap.c"
 var $464=$463|$462; //@line 9192 "tcc_bootstrap.c"
 $r=$464; //@line 9192 "tcc_bootstrap.c"
 label=107;break;
 case 107: 
 var $466=$has_init; //@line 9193 "tcc_bootstrap.c"
 var $467=($466|0)!=0; //@line 9193 "tcc_bootstrap.c"
 if($467){label=108;break;}else{label=109;break;} //@line 9193 "tcc_bootstrap.c"
 case 108: 
 _next(); //@line 9194 "tcc_bootstrap.c"
 label=112;break; //@line 9194 "tcc_bootstrap.c"
 case 109: 
 var $470=$2; //@line 9195 "tcc_bootstrap.c"
 var $471=($470|0)==48; //@line 9195 "tcc_bootstrap.c"
 if($471){label=110;break;}else{label=111;break;} //@line 9195 "tcc_bootstrap.c"
 case 110: 
 var $473=(($type)|0); //@line 9196 "tcc_bootstrap.c"
 var $474=HEAP32[(($473)>>2)]; //@line 9196 "tcc_bootstrap.c"
 var $475=$474|4096; //@line 9196 "tcc_bootstrap.c"
 HEAP32[(($473)>>2)]=$475; //@line 9196 "tcc_bootstrap.c"
 label=111;break; //@line 9196 "tcc_bootstrap.c"
 case 111: 
 label=112;break;
 case 112: 
 var $478=$r; //@line 9197 "tcc_bootstrap.c"
 var $479=$has_init; //@line 9197 "tcc_bootstrap.c"
 var $480=HEAP32[(($v)>>2)]; //@line 9197 "tcc_bootstrap.c"
 var $481=$2; //@line 9197 "tcc_bootstrap.c"
 _decl_initializer_alloc($type,$ad,$478,$479,$480,$481); //@line 9197 "tcc_bootstrap.c"
 label=113;break;
 case 113: 
 label=114;break;
 case 114: 
 label=115;break;
 case 115: 
 var $485=HEAP32[((10472)>>2)]; //@line 9200 "tcc_bootstrap.c"
 var $486=($485|0)!=44; //@line 9200 "tcc_bootstrap.c"
 if($486){label=116;break;}else{label=119;break;} //@line 9200 "tcc_bootstrap.c"
 case 116: 
 var $488=$3; //@line 9201 "tcc_bootstrap.c"
 var $489=($488|0)!=0; //@line 9201 "tcc_bootstrap.c"
 if($489){label=117;break;}else{label=118;break;} //@line 9201 "tcc_bootstrap.c"
 case 117: 
 $1=1; //@line 9202 "tcc_bootstrap.c"
 label=123;break; //@line 9202 "tcc_bootstrap.c"
 case 118: 
 _skip(59); //@line 9203 "tcc_bootstrap.c"
 label=121;break; //@line 9204 "tcc_bootstrap.c"
 case 119: 
 _next(); //@line 9206 "tcc_bootstrap.c"
 label=120;break;
 case 120: 
 var $494=(($ad)|0); //@line 9208 "tcc_bootstrap.c"
 var $495=$494; //@line 9208 "tcc_bootstrap.c"
 var $496=HEAP16[(($495)>>1)]; //@line 9208 "tcc_bootstrap.c"
 var $497=$496&-32; //@line 9208 "tcc_bootstrap.c"
 HEAP16[(($495)>>1)]=$497; //@line 9208 "tcc_bootstrap.c"
 label=26;break; //@line 9209 "tcc_bootstrap.c"
 case 121: 
 label=2;break; //@line 9210 "tcc_bootstrap.c"
 case 122: 
 $1=0; //@line 9211 "tcc_bootstrap.c"
 label=123;break; //@line 9211 "tcc_bootstrap.c"
 case 123: 
 var $501=$1; //@line 9211 "tcc_bootstrap.c"
 STACKTOP=sp;return $501; //@line 9211 "tcc_bootstrap.c"
  default: assert(0, "bad label: " + label);
 }

}


function _case_cmp($pa,$pb){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $a=sp;
 var $b=(sp)+(8);
 $1=$pa;
 $2=$pb;
 var $3=$1; //@line 8093 "tcc_bootstrap.c"
 var $4=$3; //@line 8093 "tcc_bootstrap.c"
 var $5=HEAP32[(($4)>>2)]; //@line 8093 "tcc_bootstrap.c"
 var $6=(($5)|0); //@line 8093 "tcc_bootstrap.c"
 var $ld$0$0=(($6)|0);
 var $7$0=HEAP32[(($ld$0$0)>>2)];
 var $ld$1$1=(($6+4)|0);
 var $7$1=HEAP32[(($ld$1$1)>>2)];
 var $st$2$0=(($a)|0);
 HEAP32[(($st$2$0)>>2)]=$7$0;
 var $st$3$1=(($a+4)|0);
 HEAP32[(($st$3$1)>>2)]=$7$1;
 var $8=$2; //@line 8094 "tcc_bootstrap.c"
 var $9=$8; //@line 8094 "tcc_bootstrap.c"
 var $10=HEAP32[(($9)>>2)]; //@line 8094 "tcc_bootstrap.c"
 var $11=(($10)|0); //@line 8094 "tcc_bootstrap.c"
 var $ld$4$0=(($11)|0);
 var $12$0=HEAP32[(($ld$4$0)>>2)];
 var $ld$5$1=(($11+4)|0);
 var $12$1=HEAP32[(($ld$5$1)>>2)];
 var $st$6$0=(($b)|0);
 HEAP32[(($st$6$0)>>2)]=$12$0;
 var $st$7$1=(($b+4)|0);
 HEAP32[(($st$7$1)>>2)]=$12$1;
 var $ld$8$0=(($a)|0);
 var $13$0=HEAP32[(($ld$8$0)>>2)];
 var $ld$9$1=(($a+4)|0);
 var $13$1=HEAP32[(($ld$9$1)>>2)];
 var $ld$10$0=(($b)|0);
 var $14$0=HEAP32[(($ld$10$0)>>2)];
 var $ld$11$1=(($b+4)|0);
 var $14$1=HEAP32[(($ld$11$1)>>2)];
 var $15=(($13$1|0) < ($14$1|0)) | (((($13$1|0) == ($14$1|0) & ($13$0>>>0) <  ($14$0>>>0)))); //@line 8095 "tcc_bootstrap.c"
 if($15){label=2;break;}else{label=3;break;} //@line 8095 "tcc_bootstrap.c"
 case 2: 
 var $23=-1;label=4;break; //@line 8095 "tcc_bootstrap.c"
 case 3: 
 var $ld$12$0=(($a)|0);
 var $18$0=HEAP32[(($ld$12$0)>>2)];
 var $ld$13$1=(($a+4)|0);
 var $18$1=HEAP32[(($ld$13$1)>>2)];
 var $ld$14$0=(($b)|0);
 var $19$0=HEAP32[(($ld$14$0)>>2)];
 var $ld$15$1=(($b+4)|0);
 var $19$1=HEAP32[(($ld$15$1)>>2)];
 var $20=(($18$1|0) > ($19$1|0)) | (((($18$1|0) == ($19$1|0) & ($18$0>>>0) >  ($19$0>>>0)))); //@line 8095 "tcc_bootstrap.c"
 var $21=($20&1); //@line 8095 "tcc_bootstrap.c"
 var $23=$21;label=4;break; //@line 8095 "tcc_bootstrap.c"
 case 4: 
 var $23; //@line 8095 "tcc_bootstrap.c"
 STACKTOP=sp;return $23; //@line 8095 "tcc_bootstrap.c"
  default: assert(0, "bad label: " + label);
 }

}


function _gcase($base,$len,$bsym){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $p;
 var $e;
 var $ll;
 $1=$base;
 $2=$len;
 $3=$bsym;
 var $4=HEAP32[((9288)>>2)]; //@line 8101 "tcc_bootstrap.c"
 var $5=(($4)|0); //@line 8101 "tcc_bootstrap.c"
 var $6=(($5)|0); //@line 8101 "tcc_bootstrap.c"
 var $7=HEAP32[(($6)>>2)]; //@line 8101 "tcc_bootstrap.c"
 var $8=$7&15; //@line 8101 "tcc_bootstrap.c"
 var $9=($8|0)==4; //@line 8101 "tcc_bootstrap.c"
 var $10=($9&1); //@line 8101 "tcc_bootstrap.c"
 $ll=$10; //@line 8101 "tcc_bootstrap.c"
 var $11=_gv(1); //@line 8102 "tcc_bootstrap.c"
 label=2;break; //@line 8103 "tcc_bootstrap.c"
 case 2: 
 var $13=$2; //@line 8103 "tcc_bootstrap.c"
 var $14=($13|0)>4; //@line 8103 "tcc_bootstrap.c"
 if($14){label=3;break;}else{label=13;break;} //@line 8103 "tcc_bootstrap.c"
 case 3: 
 var $16=$2; //@line 8104 "tcc_bootstrap.c"
 var $17=(((($16|0))/(2))&-1); //@line 8104 "tcc_bootstrap.c"
 var $18=$1; //@line 8104 "tcc_bootstrap.c"
 var $19=(($18+($17<<2))|0); //@line 8104 "tcc_bootstrap.c"
 var $20=HEAP32[(($19)>>2)]; //@line 8104 "tcc_bootstrap.c"
 $p=$20; //@line 8104 "tcc_bootstrap.c"
 _vdup(); //@line 8105 "tcc_bootstrap.c"
 var $21=$ll; //@line 8106 "tcc_bootstrap.c"
 var $22=($21|0)!=0; //@line 8106 "tcc_bootstrap.c"
 if($22){label=4;break;}else{label=5;break;} //@line 8106 "tcc_bootstrap.c"
 case 4: 
 var $24=$p; //@line 8107 "tcc_bootstrap.c"
 var $25=(($24+8)|0); //@line 8107 "tcc_bootstrap.c"
 var $ld$0$0=(($25)|0);
 var $26$0=HEAP32[(($ld$0$0)>>2)];
 var $ld$1$1=(($25+4)|0);
 var $26$1=HEAP32[(($ld$1$1)>>2)];
 _vpushll($26$0,$26$1);
 label=6;break; //@line 8107 "tcc_bootstrap.c"
 case 5: 
 var $28=$p; //@line 8109 "tcc_bootstrap.c"
 var $29=(($28+8)|0); //@line 8109 "tcc_bootstrap.c"
 var $ld$2$0=(($29)|0);
 var $30$0=HEAP32[(($ld$2$0)>>2)];
 var $ld$3$1=(($29+4)|0);
 var $30$1=HEAP32[(($ld$3$1)>>2)];
 var $31$0=$30$0;
 var $31=$31$0;
 _vpushi($31); //@line 8109 "tcc_bootstrap.c"
 label=6;break;
 case 6: 
 _gen_op(158); //@line 8110 "tcc_bootstrap.c"
 var $33=_gtst(1,0); //@line 8111 "tcc_bootstrap.c"
 $e=$33; //@line 8111 "tcc_bootstrap.c"
 _vdup(); //@line 8112 "tcc_bootstrap.c"
 var $34=$ll; //@line 8113 "tcc_bootstrap.c"
 var $35=($34|0)!=0; //@line 8113 "tcc_bootstrap.c"
 if($35){label=7;break;}else{label=8;break;} //@line 8113 "tcc_bootstrap.c"
 case 7: 
 var $37=$p; //@line 8114 "tcc_bootstrap.c"
 var $38=(($37)|0); //@line 8114 "tcc_bootstrap.c"
 var $ld$4$0=(($38)|0);
 var $39$0=HEAP32[(($ld$4$0)>>2)];
 var $ld$5$1=(($38+4)|0);
 var $39$1=HEAP32[(($ld$5$1)>>2)];
 _vpushll($39$0,$39$1);
 label=9;break; //@line 8114 "tcc_bootstrap.c"
 case 8: 
 var $41=$p; //@line 8116 "tcc_bootstrap.c"
 var $42=(($41)|0); //@line 8116 "tcc_bootstrap.c"
 var $ld$6$0=(($42)|0);
 var $43$0=HEAP32[(($ld$6$0)>>2)];
 var $ld$7$1=(($42+4)|0);
 var $43$1=HEAP32[(($ld$7$1)>>2)];
 var $44$0=$43$0;
 var $44=$44$0;
 _vpushi($44); //@line 8116 "tcc_bootstrap.c"
 label=9;break;
 case 9: 
 _gen_op(157); //@line 8117 "tcc_bootstrap.c"
 var $46=$p; //@line 8118 "tcc_bootstrap.c"
 var $47=(($46+16)|0); //@line 8118 "tcc_bootstrap.c"
 var $48=HEAP32[(($47)>>2)]; //@line 8118 "tcc_bootstrap.c"
 _gtst_addr(0,$48); //@line 8118 "tcc_bootstrap.c"
 var $49=$1; //@line 8119 "tcc_bootstrap.c"
 var $50=$2; //@line 8119 "tcc_bootstrap.c"
 var $51=(((($50|0))/(2))&-1); //@line 8119 "tcc_bootstrap.c"
 var $52=$3; //@line 8119 "tcc_bootstrap.c"
 _gcase($49,$51,$52); //@line 8119 "tcc_bootstrap.c"
 var $53=HEAP32[((76680)>>2)]; //@line 8120 "tcc_bootstrap.c"
 var $54=(($53+8)|0); //@line 8120 "tcc_bootstrap.c"
 var $55=HEAP32[(($54)>>2)]; //@line 8120 "tcc_bootstrap.c"
 var $56=($55|0)!=0; //@line 8120 "tcc_bootstrap.c"
 if($56){label=10;break;}else{label=11;break;} //@line 8120 "tcc_bootstrap.c"
 case 10: 
 var $58=HEAP32[((76680)>>2)]; //@line 8121 "tcc_bootstrap.c"
 var $59=(($58+8)|0); //@line 8121 "tcc_bootstrap.c"
 var $60=HEAP32[(($59)>>2)]; //@line 8121 "tcc_bootstrap.c"
 _gjmp_addr($60); //@line 8121 "tcc_bootstrap.c"
 label=12;break; //@line 8121 "tcc_bootstrap.c"
 case 11: 
 var $62=$3; //@line 8123 "tcc_bootstrap.c"
 var $63=HEAP32[(($62)>>2)]; //@line 8123 "tcc_bootstrap.c"
 var $64=_gjmp($63); //@line 8123 "tcc_bootstrap.c"
 var $65=$3; //@line 8123 "tcc_bootstrap.c"
 HEAP32[(($65)>>2)]=$64; //@line 8123 "tcc_bootstrap.c"
 label=12;break;
 case 12: 
 var $67=$e; //@line 8124 "tcc_bootstrap.c"
 _gsym($67); //@line 8124 "tcc_bootstrap.c"
 var $68=$2; //@line 8125 "tcc_bootstrap.c"
 var $69=(((($68|0))/(2))&-1); //@line 8125 "tcc_bootstrap.c"
 var $70=((($69)+(1))|0); //@line 8125 "tcc_bootstrap.c"
 $e=$70; //@line 8125 "tcc_bootstrap.c"
 var $71=$e; //@line 8126 "tcc_bootstrap.c"
 var $72=$1; //@line 8126 "tcc_bootstrap.c"
 var $73=(($72+($71<<2))|0); //@line 8126 "tcc_bootstrap.c"
 $1=$73; //@line 8126 "tcc_bootstrap.c"
 var $74=$e; //@line 8126 "tcc_bootstrap.c"
 var $75=$2; //@line 8126 "tcc_bootstrap.c"
 var $76=((($75)-($74))|0); //@line 8126 "tcc_bootstrap.c"
 $2=$76; //@line 8126 "tcc_bootstrap.c"
 label=2;break; //@line 8127 "tcc_bootstrap.c"
 case 13: 
 label=14;break; //@line 8128 "tcc_bootstrap.c"
 case 14: 
 var $79=$2; //@line 8128 "tcc_bootstrap.c"
 var $80=((($79)-(1))|0); //@line 8128 "tcc_bootstrap.c"
 $2=$80; //@line 8128 "tcc_bootstrap.c"
 var $81=($79|0)!=0; //@line 8128 "tcc_bootstrap.c"
 if($81){label=15;break;}else{label=25;break;} //@line 8128 "tcc_bootstrap.c"
 case 15: 
 var $83=$1; //@line 8129 "tcc_bootstrap.c"
 var $84=(($83+4)|0); //@line 8129 "tcc_bootstrap.c"
 $1=$84; //@line 8129 "tcc_bootstrap.c"
 var $85=HEAP32[(($83)>>2)]; //@line 8129 "tcc_bootstrap.c"
 $p=$85; //@line 8129 "tcc_bootstrap.c"
 _vdup(); //@line 8130 "tcc_bootstrap.c"
 var $86=$ll; //@line 8131 "tcc_bootstrap.c"
 var $87=($86|0)!=0; //@line 8131 "tcc_bootstrap.c"
 if($87){label=16;break;}else{label=17;break;} //@line 8131 "tcc_bootstrap.c"
 case 16: 
 var $89=$p; //@line 8132 "tcc_bootstrap.c"
 var $90=(($89+8)|0); //@line 8132 "tcc_bootstrap.c"
 var $ld$8$0=(($90)|0);
 var $91$0=HEAP32[(($ld$8$0)>>2)];
 var $ld$9$1=(($90+4)|0);
 var $91$1=HEAP32[(($ld$9$1)>>2)];
 _vpushll($91$0,$91$1);
 label=18;break; //@line 8132 "tcc_bootstrap.c"
 case 17: 
 var $93=$p; //@line 8134 "tcc_bootstrap.c"
 var $94=(($93+8)|0); //@line 8134 "tcc_bootstrap.c"
 var $ld$10$0=(($94)|0);
 var $95$0=HEAP32[(($ld$10$0)>>2)];
 var $ld$11$1=(($94+4)|0);
 var $95$1=HEAP32[(($ld$11$1)>>2)];
 var $96$0=$95$0;
 var $96=$96$0;
 _vpushi($96); //@line 8134 "tcc_bootstrap.c"
 label=18;break;
 case 18: 
 var $98=$p; //@line 8135 "tcc_bootstrap.c"
 var $99=(($98)|0); //@line 8135 "tcc_bootstrap.c"
 var $ld$12$0=(($99)|0);
 var $100$0=HEAP32[(($ld$12$0)>>2)];
 var $ld$13$1=(($99+4)|0);
 var $100$1=HEAP32[(($ld$13$1)>>2)];
 var $101=$p; //@line 8135 "tcc_bootstrap.c"
 var $102=(($101+8)|0); //@line 8135 "tcc_bootstrap.c"
 var $ld$14$0=(($102)|0);
 var $103$0=HEAP32[(($ld$14$0)>>2)];
 var $ld$15$1=(($102+4)|0);
 var $103$1=HEAP32[(($ld$15$1)>>2)];
 var $104=(($100$0|0) == ($103$0|0)) & (($100$1|0) == ($103$1|0)); //@line 8135 "tcc_bootstrap.c"
 if($104){label=19;break;}else{label=20;break;} //@line 8135 "tcc_bootstrap.c"
 case 19: 
 _gen_op(148); //@line 8136 "tcc_bootstrap.c"
 var $106=$p; //@line 8137 "tcc_bootstrap.c"
 var $107=(($106+16)|0); //@line 8137 "tcc_bootstrap.c"
 var $108=HEAP32[(($107)>>2)]; //@line 8137 "tcc_bootstrap.c"
 _gtst_addr(0,$108); //@line 8137 "tcc_bootstrap.c"
 label=24;break; //@line 8138 "tcc_bootstrap.c"
 case 20: 
 _gen_op(158); //@line 8139 "tcc_bootstrap.c"
 var $110=_gtst(1,0); //@line 8140 "tcc_bootstrap.c"
 $e=$110; //@line 8140 "tcc_bootstrap.c"
 _vdup(); //@line 8141 "tcc_bootstrap.c"
 var $111=$ll; //@line 8142 "tcc_bootstrap.c"
 var $112=($111|0)!=0; //@line 8142 "tcc_bootstrap.c"
 if($112){label=21;break;}else{label=22;break;} //@line 8142 "tcc_bootstrap.c"
 case 21: 
 var $114=$p; //@line 8143 "tcc_bootstrap.c"
 var $115=(($114)|0); //@line 8143 "tcc_bootstrap.c"
 var $ld$16$0=(($115)|0);
 var $116$0=HEAP32[(($ld$16$0)>>2)];
 var $ld$17$1=(($115+4)|0);
 var $116$1=HEAP32[(($ld$17$1)>>2)];
 _vpushll($116$0,$116$1);
 label=23;break; //@line 8143 "tcc_bootstrap.c"
 case 22: 
 var $118=$p; //@line 8145 "tcc_bootstrap.c"
 var $119=(($118)|0); //@line 8145 "tcc_bootstrap.c"
 var $ld$18$0=(($119)|0);
 var $120$0=HEAP32[(($ld$18$0)>>2)];
 var $ld$19$1=(($119+4)|0);
 var $120$1=HEAP32[(($ld$19$1)>>2)];
 var $121$0=$120$0;
 var $121=$121$0;
 _vpushi($121); //@line 8145 "tcc_bootstrap.c"
 label=23;break;
 case 23: 
 _gen_op(157); //@line 8146 "tcc_bootstrap.c"
 var $123=$p; //@line 8147 "tcc_bootstrap.c"
 var $124=(($123+16)|0); //@line 8147 "tcc_bootstrap.c"
 var $125=HEAP32[(($124)>>2)]; //@line 8147 "tcc_bootstrap.c"
 _gtst_addr(0,$125); //@line 8147 "tcc_bootstrap.c"
 var $126=$e; //@line 8148 "tcc_bootstrap.c"
 _gsym($126); //@line 8148 "tcc_bootstrap.c"
 label=24;break;
 case 24: 
 label=14;break; //@line 8150 "tcc_bootstrap.c"
 case 25: 
 STACKTOP=sp;return; //@line 8151 "tcc_bootstrap.c"
  default: assert(0, "bad label: " + label);
 }

}


function _gtst_addr($inv,$a){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $v;
 $1=$inv;
 $2=$a;
 var $3=HEAP32[((9288)>>2)]; //@line 10361 "tcc_bootstrap.c"
 var $4=(($3+8)|0); //@line 10361 "tcc_bootstrap.c"
 var $5=HEAP16[(($4)>>1)]; //@line 10361 "tcc_bootstrap.c"
 var $6=($5&65535); //@line 10361 "tcc_bootstrap.c"
 var $7=$6&63; //@line 10361 "tcc_bootstrap.c"
 $v=$7; //@line 10361 "tcc_bootstrap.c"
 var $8=$v; //@line 10362 "tcc_bootstrap.c"
 var $9=($8|0)==51; //@line 10362 "tcc_bootstrap.c"
 if($9){label=2;break;}else{label=6;break;} //@line 10362 "tcc_bootstrap.c"
 case 2: 
 var $11=HEAP32[((9288)>>2)]; //@line 10363 "tcc_bootstrap.c"
 var $12=((($11)-(40))|0); //@line 10363 "tcc_bootstrap.c"
 HEAP32[((9288)>>2)]=$12; //@line 10363 "tcc_bootstrap.c"
 var $13=(($11+16)|0); //@line 10363 "tcc_bootstrap.c"
 var $14=$13; //@line 10363 "tcc_bootstrap.c"
 var $ld$0$0=(($14)|0);
 var $15$0=HEAP32[(($ld$0$0)>>2)];
 var $ld$1$1=(($14+4)|0);
 var $15$1=HEAP32[(($ld$1$1)>>2)];
 var $16=$1; //@line 10363 "tcc_bootstrap.c"
 var $17$0=$16;
 var $17$1=((((($16|0)<0))|0)?-1:0);
 var $18$0=$17$0^$15$0;
 var $18$1=$17$1^$15$1;
 var $19$0=$18$0;
 var $19=$19$0;
 $1=$19; //@line 10363 "tcc_bootstrap.c"
 var $20=HEAP32[((11008)>>2)]; //@line 10364 "tcc_bootstrap.c"
 var $21=((($20)+(2))|0); //@line 10364 "tcc_bootstrap.c"
 var $22=$2; //@line 10364 "tcc_bootstrap.c"
 var $23=((($22)-($21))|0); //@line 10364 "tcc_bootstrap.c"
 $2=$23; //@line 10364 "tcc_bootstrap.c"
 var $24=$2; //@line 10365 "tcc_bootstrap.c"
 var $25=$2; //@line 10365 "tcc_bootstrap.c"
 var $26=(($25)&255); //@line 10365 "tcc_bootstrap.c"
 var $27=(($26<<24)>>24); //@line 10365 "tcc_bootstrap.c"
 var $28=($24|0)==($27|0); //@line 10365 "tcc_bootstrap.c"
 if($28){label=3;break;}else{label=4;break;} //@line 10365 "tcc_bootstrap.c"
 case 3: 
 var $30=$1; //@line 10366 "tcc_bootstrap.c"
 var $31=((($30)-(32))|0); //@line 10366 "tcc_bootstrap.c"
 _g($31); //@line 10366 "tcc_bootstrap.c"
 var $32=$2; //@line 10367 "tcc_bootstrap.c"
 _g($32); //@line 10367 "tcc_bootstrap.c"
 label=5;break; //@line 10368 "tcc_bootstrap.c"
 case 4: 
 _g(15); //@line 10369 "tcc_bootstrap.c"
 var $34=$1; //@line 10370 "tcc_bootstrap.c"
 var $35=((($34)-(16))|0); //@line 10370 "tcc_bootstrap.c"
 var $36=$2; //@line 10370 "tcc_bootstrap.c"
 var $37=((($36)-(4))|0); //@line 10370 "tcc_bootstrap.c"
 var $38=_oad($35,$37); //@line 10370 "tcc_bootstrap.c"
 label=5;break;
 case 5: 
 label=12;break; //@line 10372 "tcc_bootstrap.c"
 case 6: 
 var $41=$v; //@line 10372 "tcc_bootstrap.c"
 var $42=$41&-2; //@line 10372 "tcc_bootstrap.c"
 var $43=($42|0)==52; //@line 10372 "tcc_bootstrap.c"
 if($43){label=7;break;}else{label=11;break;} //@line 10372 "tcc_bootstrap.c"
 case 7: 
 var $45=$v; //@line 10373 "tcc_bootstrap.c"
 var $46=$45&1; //@line 10373 "tcc_bootstrap.c"
 var $47=$1; //@line 10373 "tcc_bootstrap.c"
 var $48=($46|0)!=($47|0); //@line 10373 "tcc_bootstrap.c"
 if($48){label=8;break;}else{label=9;break;} //@line 10373 "tcc_bootstrap.c"
 case 8: 
 var $50=$2; //@line 10374 "tcc_bootstrap.c"
 _gjmp_addr($50); //@line 10374 "tcc_bootstrap.c"
 var $51=HEAP32[((9288)>>2)]; //@line 10375 "tcc_bootstrap.c"
 var $52=(($51+16)|0); //@line 10375 "tcc_bootstrap.c"
 var $53=$52; //@line 10375 "tcc_bootstrap.c"
 var $ld$2$0=(($53)|0);
 var $54$0=HEAP32[(($ld$2$0)>>2)];
 var $ld$3$1=(($53+4)|0);
 var $54$1=HEAP32[(($ld$3$1)>>2)];
 var $55$0=$54$0;
 var $55=$55$0;
 _gsym($55); //@line 10375 "tcc_bootstrap.c"
 label=10;break; //@line 10376 "tcc_bootstrap.c"
 case 9: 
 var $57=HEAP32[((9288)>>2)]; //@line 10377 "tcc_bootstrap.c"
 var $58=(($57+16)|0); //@line 10377 "tcc_bootstrap.c"
 var $59=$58; //@line 10377 "tcc_bootstrap.c"
 var $ld$4$0=(($59)|0);
 var $60$0=HEAP32[(($ld$4$0)>>2)];
 var $ld$5$1=(($59+4)|0);
 var $60$1=HEAP32[(($ld$5$1)>>2)];
 var $61$0=$60$0;
 var $61=$61$0;
 _gsym($61); //@line 10377 "tcc_bootstrap.c"
 _o(1515); //@line 10378 "tcc_bootstrap.c"
 var $62=$2; //@line 10379 "tcc_bootstrap.c"
 _gjmp_addr($62); //@line 10379 "tcc_bootstrap.c"
 label=10;break;
 case 10: 
 var $64=HEAP32[((9288)>>2)]; //@line 10381 "tcc_bootstrap.c"
 var $65=((($64)-(40))|0); //@line 10381 "tcc_bootstrap.c"
 HEAP32[((9288)>>2)]=$65; //@line 10381 "tcc_bootstrap.c"
 label=11;break; //@line 10382 "tcc_bootstrap.c"
 case 11: 
 label=12;break;
 case 12: 
 STACKTOP=sp;return; //@line 10383 "tcc_bootstrap.c"
  default: assert(0, "bad label: " + label);
 }

}


function _patch_storage($sym,$ad,$type){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 $1=$sym;
 $2=$ad;
 $3=$type;
 var $4=$3; //@line 4568 "tcc_bootstrap.c"
 var $5=($4|0)!=0; //@line 4568 "tcc_bootstrap.c"
 if($5){label=2;break;}else{label=3;break;} //@line 4568 "tcc_bootstrap.c"
 case 2: 
 var $7=$1; //@line 4569 "tcc_bootstrap.c"
 var $8=$3; //@line 4569 "tcc_bootstrap.c"
 _patch_type($7,$8); //@line 4569 "tcc_bootstrap.c"
 label=3;break; //@line 4570 "tcc_bootstrap.c"
 case 3: 
 var $10=$2; //@line 4571 "tcc_bootstrap.c"
 var $11=(($10)|0); //@line 4571 "tcc_bootstrap.c"
 var $12=$11; //@line 4571 "tcc_bootstrap.c"
 var $13=HEAP16[(($12)>>1)]; //@line 4571 "tcc_bootstrap.c"
 var $14=($13&65535)>>>6; //@line 4571 "tcc_bootstrap.c"
 var $15=$14&1; //@line 4571 "tcc_bootstrap.c"
 var $16=($15&65535); //@line 4571 "tcc_bootstrap.c"
 var $17=$1; //@line 4571 "tcc_bootstrap.c"
 var $18=(($17+6)|0); //@line 4571 "tcc_bootstrap.c"
 var $19=$18; //@line 4571 "tcc_bootstrap.c"
 var $20=HEAP16[(($19)>>1)]; //@line 4571 "tcc_bootstrap.c"
 var $21=($20&65535)>>>6; //@line 4571 "tcc_bootstrap.c"
 var $22=$21&1; //@line 4571 "tcc_bootstrap.c"
 var $23=($22&65535); //@line 4571 "tcc_bootstrap.c"
 var $24=$23|$16; //@line 4571 "tcc_bootstrap.c"
 var $25=(($24)&65535); //@line 4571 "tcc_bootstrap.c"
 var $26=HEAP16[(($19)>>1)]; //@line 4571 "tcc_bootstrap.c"
 var $27=$25&1; //@line 4571 "tcc_bootstrap.c"
 var $28=$27<<6; //@line 4571 "tcc_bootstrap.c"
 var $29=$26&-65; //@line 4571 "tcc_bootstrap.c"
 var $30=$29|$28; //@line 4571 "tcc_bootstrap.c"
 HEAP16[(($19)>>1)]=$30; //@line 4571 "tcc_bootstrap.c"
 var $31=$1; //@line 4572 "tcc_bootstrap.c"
 _update_storage($31); //@line 4572 "tcc_bootstrap.c"
 STACKTOP=sp;return; //@line 4573 "tcc_bootstrap.c"
  default: assert(0, "bad label: " + label);
 }

}


function _gen_function($sym){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 $1=$sym;
 HEAP32[((10616)>>2)]=0; //@line 8981 "tcc_bootstrap.c"
 var $2=HEAP32[((76672)>>2)]; //@line 8982 "tcc_bootstrap.c"
 var $3=(($2)|0); //@line 8982 "tcc_bootstrap.c"
 var $4=HEAP32[(($3)>>2)]; //@line 8982 "tcc_bootstrap.c"
 HEAP32[((11008)>>2)]=$4; //@line 8982 "tcc_bootstrap.c"
 var $5=$1; //@line 8983 "tcc_bootstrap.c"
 var $6=HEAP32[((76672)>>2)]; //@line 8983 "tcc_bootstrap.c"
 var $7=HEAP32[((11008)>>2)]; //@line 8983 "tcc_bootstrap.c"
 _put_extern_sym($5,$6,$7,0); //@line 8983 "tcc_bootstrap.c"
 var $8=$1; //@line 8984 "tcc_bootstrap.c"
 var $9=(($8)|0); //@line 8984 "tcc_bootstrap.c"
 var $10=HEAP32[(($9)>>2)]; //@line 8984 "tcc_bootstrap.c"
 var $11=_get_tok_str($10,0); //@line 8984 "tcc_bootstrap.c"
 HEAP32[((76584)>>2)]=$11; //@line 8984 "tcc_bootstrap.c"
 var $12=HEAP32[((11008)>>2)]; //@line 8985 "tcc_bootstrap.c"
 HEAP32[((76640)>>2)]=$12; //@line 8985 "tcc_bootstrap.c"
 HEAP32[((9312)>>2)]=-1; //@line 8986 "tcc_bootstrap.c"
 HEAP32[((9304)>>2)]=-1; //@line 8987 "tcc_bootstrap.c"
 var $13=_sym_push2(10704,536870912,0,0); //@line 8988 "tcc_bootstrap.c"
 HEAP32[((10712)>>2)]=1; //@line 8989 "tcc_bootstrap.c"
 var $14=$1; //@line 8990 "tcc_bootstrap.c"
 var $15=(($14+16)|0); //@line 8990 "tcc_bootstrap.c"
 _gfunc_prolog($15); //@line 8990 "tcc_bootstrap.c"
 HEAP32[((10712)>>2)]=0; //@line 8991 "tcc_bootstrap.c"
 HEAP32[((10544)>>2)]=0; //@line 8992 "tcc_bootstrap.c"
 _block(0,0,0); //@line 8993 "tcc_bootstrap.c"
 HEAP32[((10616)>>2)]=0; //@line 8994 "tcc_bootstrap.c"
 var $16=HEAP32[((10544)>>2)]; //@line 8995 "tcc_bootstrap.c"
 _gsym($16); //@line 8995 "tcc_bootstrap.c"
 _gfunc_epilog(); //@line 8996 "tcc_bootstrap.c"
 var $17=HEAP32[((11008)>>2)]; //@line 8997 "tcc_bootstrap.c"
 var $18=HEAP32[((76672)>>2)]; //@line 8997 "tcc_bootstrap.c"
 var $19=(($18)|0); //@line 8997 "tcc_bootstrap.c"
 HEAP32[(($19)>>2)]=$17; //@line 8997 "tcc_bootstrap.c"
 _label_pop(76568,0,0); //@line 8998 "tcc_bootstrap.c"
 HEAP32[((10712)>>2)]=0; //@line 8999 "tcc_bootstrap.c"
 _sym_pop(10704,0,0); //@line 9000 "tcc_bootstrap.c"
 var $20=HEAP32[((11008)>>2)]; //@line 9001 "tcc_bootstrap.c"
 var $21=HEAP32[((76640)>>2)]; //@line 9001 "tcc_bootstrap.c"
 var $22=((($20)-($21))|0); //@line 9001 "tcc_bootstrap.c"
 var $23=$1; //@line 9001 "tcc_bootstrap.c"
 var $24=_elfsym($23); //@line 9001 "tcc_bootstrap.c"
 var $25=(($24+8)|0); //@line 9001 "tcc_bootstrap.c"
 HEAP32[(($25)>>2)]=$22; //@line 9001 "tcc_bootstrap.c"
 HEAP32[((76672)>>2)]=0; //@line 9002 "tcc_bootstrap.c"
 HEAP32[((76584)>>2)]=76760; //@line 9003 "tcc_bootstrap.c"
 HEAP32[((76592)>>2)]=0; //@line 9004 "tcc_bootstrap.c"
 HEAP32[((76608)>>2)]=0; //@line 9005 "tcc_bootstrap.c"
 HEAP32[((11008)>>2)]=0; //@line 9006 "tcc_bootstrap.c"
 HEAP32[((10616)>>2)]=-2147483648; //@line 9007 "tcc_bootstrap.c"
 _check_vstack(); //@line 9008 "tcc_bootstrap.c"
 STACKTOP=sp;return; //@line 9009 "tcc_bootstrap.c"
}


function _convert_parameter_type($pt){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 $1=$pt;
 var $2=$1; //@line 6845 "tcc_bootstrap.c"
 var $3=(($2)|0); //@line 6845 "tcc_bootstrap.c"
 var $4=HEAP32[(($3)>>2)]; //@line 6845 "tcc_bootstrap.c"
 var $5=$4&-769; //@line 6845 "tcc_bootstrap.c"
 HEAP32[(($3)>>2)]=$5; //@line 6845 "tcc_bootstrap.c"
 var $6=$1; //@line 6847 "tcc_bootstrap.c"
 var $7=(($6)|0); //@line 6847 "tcc_bootstrap.c"
 var $8=HEAP32[(($7)>>2)]; //@line 6847 "tcc_bootstrap.c"
 var $9=$8&-65; //@line 6847 "tcc_bootstrap.c"
 HEAP32[(($7)>>2)]=$9; //@line 6847 "tcc_bootstrap.c"
 var $10=$1; //@line 6848 "tcc_bootstrap.c"
 var $11=(($10)|0); //@line 6848 "tcc_bootstrap.c"
 var $12=HEAP32[(($11)>>2)]; //@line 6848 "tcc_bootstrap.c"
 var $13=$12&15; //@line 6848 "tcc_bootstrap.c"
 var $14=($13|0)==6; //@line 6848 "tcc_bootstrap.c"
 if($14){label=2;break;}else{label=3;break;} //@line 6848 "tcc_bootstrap.c"
 case 2: 
 var $16=$1; //@line 6849 "tcc_bootstrap.c"
 _mk_pointer($16); //@line 6849 "tcc_bootstrap.c"
 label=3;break; //@line 6850 "tcc_bootstrap.c"
 case 3: 
 STACKTOP=sp;return; //@line 6851 "tcc_bootstrap.c"
  default: assert(0, "bad label: " + label);
 }

}


function _external_sym($v,$type,$r,$ad){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $s;
 $1=$v;
 $2=$type;
 $3=$r;
 $4=$ad;
 var $5=$1; //@line 4577 "tcc_bootstrap.c"
 var $6=_sym_find($5); //@line 4577 "tcc_bootstrap.c"
 $s=$6; //@line 4577 "tcc_bootstrap.c"
 var $7=$s; //@line 4578 "tcc_bootstrap.c"
 var $8=($7|0)!=0; //@line 4578 "tcc_bootstrap.c"
 if($8){label=3;break;}else{label=2;break;} //@line 4578 "tcc_bootstrap.c"
 case 2: 
 var $10=$1; //@line 4579 "tcc_bootstrap.c"
 var $11=$2; //@line 4579 "tcc_bootstrap.c"
 var $12=$3; //@line 4579 "tcc_bootstrap.c"
 var $13=$12|48; //@line 4579 "tcc_bootstrap.c"
 var $14=$13|512; //@line 4579 "tcc_bootstrap.c"
 var $15=_sym_push($10,$11,$14,0); //@line 4579 "tcc_bootstrap.c"
 $s=$15; //@line 4579 "tcc_bootstrap.c"
 var $16=$s; //@line 4580 "tcc_bootstrap.c"
 var $17=(($16+16)|0); //@line 4580 "tcc_bootstrap.c"
 var $18=(($17)|0); //@line 4580 "tcc_bootstrap.c"
 var $19=HEAP32[(($18)>>2)]; //@line 4580 "tcc_bootstrap.c"
 var $20=$19|4096; //@line 4580 "tcc_bootstrap.c"
 HEAP32[(($18)>>2)]=$20; //@line 4580 "tcc_bootstrap.c"
 var $21=$s; //@line 4581 "tcc_bootstrap.c"
 var $22=(($21+6)|0); //@line 4581 "tcc_bootstrap.c"
 var $23=$4; //@line 4581 "tcc_bootstrap.c"
 var $24=(($23)|0); //@line 4581 "tcc_bootstrap.c"
 var $25=$22; //@line 4581 "tcc_bootstrap.c"
 var $26=$24; //@line 4581 "tcc_bootstrap.c"
 assert(2 % 1 === 0);HEAP16[(($25)>>1)]=HEAP16[(($26)>>1)]; //@line 4581 "tcc_bootstrap.c"
 var $27=$s; //@line 4582 "tcc_bootstrap.c"
 var $28=(($27+8)|0); //@line 4582 "tcc_bootstrap.c"
 var $29=$28; //@line 4582 "tcc_bootstrap.c"
 var $30=(($29+4)|0); //@line 4582 "tcc_bootstrap.c"
 var $31=$30; //@line 4582 "tcc_bootstrap.c"
 HEAP32[(($31)>>2)]=0; //@line 4582 "tcc_bootstrap.c"
 label=6;break; //@line 4583 "tcc_bootstrap.c"
 case 3: 
 var $33=$s; //@line 4584 "tcc_bootstrap.c"
 var $34=(($33+16)|0); //@line 4584 "tcc_bootstrap.c"
 var $35=(($34+4)|0); //@line 4584 "tcc_bootstrap.c"
 var $36=HEAP32[(($35)>>2)]; //@line 4584 "tcc_bootstrap.c"
 var $37=HEAP32[((76636)>>2)]; //@line 4584 "tcc_bootstrap.c"
 var $38=($36|0)==($37|0); //@line 4584 "tcc_bootstrap.c"
 if($38){label=4;break;}else{label=5;break;} //@line 4584 "tcc_bootstrap.c"
 case 4: 
 var $40=$2; //@line 4585 "tcc_bootstrap.c"
 var $41=(($40+4)|0); //@line 4585 "tcc_bootstrap.c"
 var $42=HEAP32[(($41)>>2)]; //@line 4585 "tcc_bootstrap.c"
 var $43=$s; //@line 4585 "tcc_bootstrap.c"
 var $44=(($43+16)|0); //@line 4585 "tcc_bootstrap.c"
 var $45=(($44+4)|0); //@line 4585 "tcc_bootstrap.c"
 HEAP32[(($45)>>2)]=$42; //@line 4585 "tcc_bootstrap.c"
 var $46=$3; //@line 4586 "tcc_bootstrap.c"
 var $47=$46|48; //@line 4586 "tcc_bootstrap.c"
 var $48=$47|512; //@line 4586 "tcc_bootstrap.c"
 var $49=(($48)&65535); //@line 4586 "tcc_bootstrap.c"
 var $50=$s; //@line 4586 "tcc_bootstrap.c"
 var $51=(($50+4)|0); //@line 4586 "tcc_bootstrap.c"
 HEAP16[(($51)>>1)]=$49; //@line 4586 "tcc_bootstrap.c"
 var $52=$s; //@line 4587 "tcc_bootstrap.c"
 var $53=(($52+16)|0); //@line 4587 "tcc_bootstrap.c"
 var $54=(($53)|0); //@line 4587 "tcc_bootstrap.c"
 var $55=HEAP32[(($54)>>2)]; //@line 4587 "tcc_bootstrap.c"
 var $56=$55|4096; //@line 4587 "tcc_bootstrap.c"
 HEAP32[(($54)>>2)]=$56; //@line 4587 "tcc_bootstrap.c"
 label=5;break; //@line 4588 "tcc_bootstrap.c"
 case 5: 
 var $58=$s; //@line 4589 "tcc_bootstrap.c"
 var $59=$4; //@line 4589 "tcc_bootstrap.c"
 var $60=$2; //@line 4589 "tcc_bootstrap.c"
 _patch_storage($58,$59,$60); //@line 4589 "tcc_bootstrap.c"
 label=6;break;
 case 6: 
 var $62=$s; //@line 4591 "tcc_bootstrap.c"
 STACKTOP=sp;return $62; //@line 4591 "tcc_bootstrap.c"
  default: assert(0, "bad label: " + label);
 }

}


function _gfunc_prolog($func_type){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $addr;
 var $align=sp;
 var $size;
 var $func_call;
 var $param_index;
 var $param_addr;
 var $sym;
 var $type;
 $1=$func_type;
 var $2=$1; //@line 10291 "tcc_bootstrap.c"
 var $3=(($2+4)|0); //@line 10291 "tcc_bootstrap.c"
 var $4=HEAP32[(($3)>>2)]; //@line 10291 "tcc_bootstrap.c"
 $sym=$4; //@line 10291 "tcc_bootstrap.c"
 var $5=$sym; //@line 10292 "tcc_bootstrap.c"
 var $6=(($5+8)|0); //@line 10292 "tcc_bootstrap.c"
 var $7=$6; //@line 10292 "tcc_bootstrap.c"
 var $8=(($7+4)|0); //@line 10292 "tcc_bootstrap.c"
 var $9=$8; //@line 10292 "tcc_bootstrap.c"
 var $10=$9; //@line 10292 "tcc_bootstrap.c"
 var $11=HEAP16[(($10)>>1)]; //@line 10292 "tcc_bootstrap.c"
 var $12=$11&7; //@line 10292 "tcc_bootstrap.c"
 var $13=($12&65535); //@line 10292 "tcc_bootstrap.c"
 $func_call=$13; //@line 10292 "tcc_bootstrap.c"
 $addr=8; //@line 10293 "tcc_bootstrap.c"
 HEAP32[((10728)>>2)]=0; //@line 10294 "tcc_bootstrap.c"
 HEAP32[((76600)>>2)]=0; //@line 10295 "tcc_bootstrap.c"
 $param_index=0; //@line 10296 "tcc_bootstrap.c"
 var $14=HEAP32[((11008)>>2)]; //@line 10297 "tcc_bootstrap.c"
 var $15=((($14)+(9))|0); //@line 10297 "tcc_bootstrap.c"
 HEAP32[((11008)>>2)]=$15; //@line 10297 "tcc_bootstrap.c"
 var $16=HEAP32[((11008)>>2)]; //@line 10298 "tcc_bootstrap.c"
 HEAP32[((76616)>>2)]=$16; //@line 10298 "tcc_bootstrap.c"
 var $17=$sym; //@line 10299 "tcc_bootstrap.c"
 var $18=(($17+16)|0); //@line 10299 "tcc_bootstrap.c"
 var $19=$18; //@line 10299 "tcc_bootstrap.c"
 assert(8 % 1 === 0);HEAP32[((76592)>>2)]=HEAP32[(($19)>>2)];HEAP32[((76596)>>2)]=HEAP32[((($19)+(4))>>2)]; //@line 10299 "tcc_bootstrap.c"
 var $20=$sym; //@line 10300 "tcc_bootstrap.c"
 var $21=(($20+8)|0); //@line 10300 "tcc_bootstrap.c"
 var $22=$21; //@line 10300 "tcc_bootstrap.c"
 var $23=(($22+4)|0); //@line 10300 "tcc_bootstrap.c"
 var $24=$23; //@line 10300 "tcc_bootstrap.c"
 var $25=$24; //@line 10300 "tcc_bootstrap.c"
 var $26=HEAP16[(($25)>>1)]; //@line 10300 "tcc_bootstrap.c"
 var $27=($26&65535)>>>3; //@line 10300 "tcc_bootstrap.c"
 var $28=$27&3; //@line 10300 "tcc_bootstrap.c"
 var $29=($28&65535); //@line 10300 "tcc_bootstrap.c"
 var $30=($29|0)==3; //@line 10300 "tcc_bootstrap.c"
 var $31=($30&1); //@line 10300 "tcc_bootstrap.c"
 HEAP32[((76608)>>2)]=$31; //@line 10300 "tcc_bootstrap.c"
 var $32=HEAP32[((76592)>>2)]; //@line 10301 "tcc_bootstrap.c"
 var $33=$32&15; //@line 10301 "tcc_bootstrap.c"
 var $34=($33|0)==7; //@line 10301 "tcc_bootstrap.c"
 if($34){label=2;break;}else{label=3;break;} //@line 10301 "tcc_bootstrap.c"
 case 2: 
 var $36=$addr; //@line 10302 "tcc_bootstrap.c"
 HEAP32[((76600)>>2)]=$36; //@line 10302 "tcc_bootstrap.c"
 var $37=$addr; //@line 10303 "tcc_bootstrap.c"
 var $38=((($37)+(4))|0); //@line 10303 "tcc_bootstrap.c"
 $addr=$38; //@line 10303 "tcc_bootstrap.c"
 var $39=$param_index; //@line 10304 "tcc_bootstrap.c"
 var $40=((($39)+(1))|0); //@line 10304 "tcc_bootstrap.c"
 $param_index=$40; //@line 10304 "tcc_bootstrap.c"
 label=3;break; //@line 10305 "tcc_bootstrap.c"
 case 3: 
 label=4;break; //@line 10306 "tcc_bootstrap.c"
 case 4: 
 var $43=$sym; //@line 10306 "tcc_bootstrap.c"
 var $44=(($43+24)|0); //@line 10306 "tcc_bootstrap.c"
 var $45=$44; //@line 10306 "tcc_bootstrap.c"
 var $46=HEAP32[(($45)>>2)]; //@line 10306 "tcc_bootstrap.c"
 $sym=$46; //@line 10306 "tcc_bootstrap.c"
 var $47=($46|0)!=0; //@line 10306 "tcc_bootstrap.c"
 if($47){label=5;break;}else{label=6;break;} //@line 10306 "tcc_bootstrap.c"
 case 5: 
 var $49=$sym; //@line 10307 "tcc_bootstrap.c"
 var $50=(($49+16)|0); //@line 10307 "tcc_bootstrap.c"
 $type=$50; //@line 10307 "tcc_bootstrap.c"
 var $51=$type; //@line 10308 "tcc_bootstrap.c"
 var $52=_type_size($51,$align); //@line 10308 "tcc_bootstrap.c"
 $size=$52; //@line 10308 "tcc_bootstrap.c"
 var $53=$size; //@line 10309 "tcc_bootstrap.c"
 var $54=((($53)+(3))|0); //@line 10309 "tcc_bootstrap.c"
 var $55=$54&-4; //@line 10309 "tcc_bootstrap.c"
 $size=$55; //@line 10309 "tcc_bootstrap.c"
 var $56=$addr; //@line 10310 "tcc_bootstrap.c"
 $param_addr=$56; //@line 10310 "tcc_bootstrap.c"
 var $57=$size; //@line 10311 "tcc_bootstrap.c"
 var $58=$addr; //@line 10311 "tcc_bootstrap.c"
 var $59=((($58)+($57))|0); //@line 10311 "tcc_bootstrap.c"
 $addr=$59; //@line 10311 "tcc_bootstrap.c"
 var $60=$sym; //@line 10312 "tcc_bootstrap.c"
 var $61=(($60)|0); //@line 10312 "tcc_bootstrap.c"
 var $62=HEAP32[(($61)>>2)]; //@line 10312 "tcc_bootstrap.c"
 var $63=$62&-536870913; //@line 10312 "tcc_bootstrap.c"
 var $64=$type; //@line 10312 "tcc_bootstrap.c"
 var $65=$type; //@line 10313 "tcc_bootstrap.c"
 var $66=(($65)|0); //@line 10313 "tcc_bootstrap.c"
 var $67=HEAP32[(($66)>>2)]; //@line 10313 "tcc_bootstrap.c"
 var $68=_lvalue_type($67); //@line 10313 "tcc_bootstrap.c"
 var $69=50|$68; //@line 10313 "tcc_bootstrap.c"
 var $70=$param_addr; //@line 10313 "tcc_bootstrap.c"
 var $71=_sym_push($63,$64,$69,$70); //@line 10313 "tcc_bootstrap.c"
 var $72=$param_index; //@line 10314 "tcc_bootstrap.c"
 var $73=((($72)+(1))|0); //@line 10314 "tcc_bootstrap.c"
 $param_index=$73; //@line 10314 "tcc_bootstrap.c"
 label=4;break; //@line 10315 "tcc_bootstrap.c"
 case 6: 
 HEAP32[((76624)>>2)]=0; //@line 10316 "tcc_bootstrap.c"
 var $75=$func_call; //@line 10317 "tcc_bootstrap.c"
 var $76=($75|0)==1; //@line 10317 "tcc_bootstrap.c"
 if($76){label=7;break;}else{label=8;break;} //@line 10317 "tcc_bootstrap.c"
 case 7: 
 var $78=$addr; //@line 10318 "tcc_bootstrap.c"
 var $79=((($78)-(8))|0); //@line 10318 "tcc_bootstrap.c"
 HEAP32[((76624)>>2)]=$79; //@line 10318 "tcc_bootstrap.c"
 label=11;break; //@line 10318 "tcc_bootstrap.c"
 case 8: 
 var $81=HEAP32[((76600)>>2)]; //@line 10319 "tcc_bootstrap.c"
 var $82=($81|0)!=0; //@line 10319 "tcc_bootstrap.c"
 if($82){label=9;break;}else{label=10;break;} //@line 10319 "tcc_bootstrap.c"
 case 9: 
 HEAP32[((76624)>>2)]=4; //@line 10320 "tcc_bootstrap.c"
 label=10;break; //@line 10320 "tcc_bootstrap.c"
 case 10: 
 label=11;break;
 case 11: 
 STACKTOP=sp;return; //@line 10321 "tcc_bootstrap.c"
  default: assert(0, "bad label: " + label);
 }

}


function _gfunc_epilog(){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $v;
 var $saved_ind;
 var $1=HEAP32[((10728)>>2)]; //@line 10325 "tcc_bootstrap.c"
 var $2=(((-$1))|0); //@line 10325 "tcc_bootstrap.c"
 var $3=((($2)+(3))|0); //@line 10325 "tcc_bootstrap.c"
 var $4=$3&-4; //@line 10325 "tcc_bootstrap.c"
 $v=$4; //@line 10325 "tcc_bootstrap.c"
 _o(201); //@line 10326 "tcc_bootstrap.c"
 var $5=HEAP32[((76624)>>2)]; //@line 10327 "tcc_bootstrap.c"
 var $6=($5|0)==0; //@line 10327 "tcc_bootstrap.c"
 if($6){label=2;break;}else{label=3;break;} //@line 10327 "tcc_bootstrap.c"
 case 2: 
 _o(195); //@line 10328 "tcc_bootstrap.c"
 label=4;break; //@line 10329 "tcc_bootstrap.c"
 case 3: 
 _o(194); //@line 10330 "tcc_bootstrap.c"
 var $9=HEAP32[((76624)>>2)]; //@line 10331 "tcc_bootstrap.c"
 _g($9); //@line 10331 "tcc_bootstrap.c"
 var $10=HEAP32[((76624)>>2)]; //@line 10332 "tcc_bootstrap.c"
 var $11=$10>>8; //@line 10332 "tcc_bootstrap.c"
 _g($11); //@line 10332 "tcc_bootstrap.c"
 label=4;break;
 case 4: 
 var $13=HEAP32[((11008)>>2)]; //@line 10334 "tcc_bootstrap.c"
 $saved_ind=$13; //@line 10334 "tcc_bootstrap.c"
 var $14=HEAP32[((76616)>>2)]; //@line 10335 "tcc_bootstrap.c"
 var $15=((($14)-(9))|0); //@line 10335 "tcc_bootstrap.c"
 HEAP32[((11008)>>2)]=$15; //@line 10335 "tcc_bootstrap.c"
 _o(15042901); //@line 10337 "tcc_bootstrap.c"
 _o(60545); //@line 10338 "tcc_bootstrap.c"
 var $16=$v; //@line 10339 "tcc_bootstrap.c"
 _gen_le32($16); //@line 10339 "tcc_bootstrap.c"
 _o(0); //@line 10341 "tcc_bootstrap.c"
 var $17=$saved_ind; //@line 10342 "tcc_bootstrap.c"
 HEAP32[((11008)>>2)]=$17; //@line 10342 "tcc_bootstrap.c"
 STACKTOP=sp;return; //@line 10343 "tcc_bootstrap.c"
  default: assert(0, "bad label: " + label);
 }

}


function _check_vstack(){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=HEAP32[((10552)>>2)]; //@line 4130 "tcc_bootstrap.c"
 var $2=HEAP32[((9288)>>2)]; //@line 4130 "tcc_bootstrap.c"
 var $3=($1|0)!=($2|0); //@line 4130 "tcc_bootstrap.c"
 if($3){label=2;break;}else{label=3;break;} //@line 4130 "tcc_bootstrap.c"
 case 2: 
 var $5=HEAP32[((9288)>>2)]; //@line 4131 "tcc_bootstrap.c"
 var $6=HEAP32[((10552)>>2)]; //@line 4131 "tcc_bootstrap.c"
 var $7=$5; //@line 4131 "tcc_bootstrap.c"
 var $8=$6; //@line 4131 "tcc_bootstrap.c"
 var $9=((($7)-($8))|0); //@line 4131 "tcc_bootstrap.c"
 var $10=(((($9|0))/(40))&-1); //@line 4131 "tcc_bootstrap.c"
 _tcc_error(6752,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$10,tempVarArgs)); STACKTOP=tempVarArgs; //@line 4131 "tcc_bootstrap.c"
 label=3;break; //@line 4131 "tcc_bootstrap.c"
 case 3: 
 STACKTOP=sp;return; //@line 4132 "tcc_bootstrap.c"
  default: assert(0, "bad label: " + label);
 }

}


function _patch_type($sym,$type){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $static_proto;
 $1=$sym;
 $2=$type;
 var $3=$2; //@line 4535 "tcc_bootstrap.c"
 var $4=(($3)|0); //@line 4535 "tcc_bootstrap.c"
 var $5=HEAP32[(($4)>>2)]; //@line 4535 "tcc_bootstrap.c"
 var $6=$5&4096; //@line 4535 "tcc_bootstrap.c"
 var $7=($6|0)!=0; //@line 4535 "tcc_bootstrap.c"
 if($7){label=5;break;}else{label=2;break;} //@line 4535 "tcc_bootstrap.c"
 case 2: 
 var $9=$1; //@line 4536 "tcc_bootstrap.c"
 var $10=(($9+16)|0); //@line 4536 "tcc_bootstrap.c"
 var $11=(($10)|0); //@line 4536 "tcc_bootstrap.c"
 var $12=HEAP32[(($11)>>2)]; //@line 4536 "tcc_bootstrap.c"
 var $13=$12&4096; //@line 4536 "tcc_bootstrap.c"
 var $14=($13|0)!=0; //@line 4536 "tcc_bootstrap.c"
 if($14){label=4;break;}else{label=3;break;} //@line 4536 "tcc_bootstrap.c"
 case 3: 
 var $16=$1; //@line 4537 "tcc_bootstrap.c"
 var $17=(($16)|0); //@line 4537 "tcc_bootstrap.c"
 var $18=HEAP32[(($17)>>2)]; //@line 4537 "tcc_bootstrap.c"
 var $19=_get_tok_str($18,0); //@line 4537 "tcc_bootstrap.c"
 _tcc_error(6728,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$19,tempVarArgs)); STACKTOP=tempVarArgs; //@line 4537 "tcc_bootstrap.c"
 label=4;break; //@line 4537 "tcc_bootstrap.c"
 case 4: 
 var $21=$1; //@line 4538 "tcc_bootstrap.c"
 var $22=(($21+16)|0); //@line 4538 "tcc_bootstrap.c"
 var $23=(($22)|0); //@line 4538 "tcc_bootstrap.c"
 var $24=HEAP32[(($23)>>2)]; //@line 4538 "tcc_bootstrap.c"
 var $25=$24&-4097; //@line 4538 "tcc_bootstrap.c"
 HEAP32[(($23)>>2)]=$25; //@line 4538 "tcc_bootstrap.c"
 label=5;break; //@line 4539 "tcc_bootstrap.c"
 case 5: 
 var $27=$1; //@line 4540 "tcc_bootstrap.c"
 var $28=(($27+16)|0); //@line 4540 "tcc_bootstrap.c"
 var $29=$2; //@line 4540 "tcc_bootstrap.c"
 var $30=_is_compatible_types($28,$29); //@line 4540 "tcc_bootstrap.c"
 var $31=($30|0)!=0; //@line 4540 "tcc_bootstrap.c"
 if($31){label=7;break;}else{label=6;break;} //@line 4540 "tcc_bootstrap.c"
 case 6: 
 var $33=$1; //@line 4542 "tcc_bootstrap.c"
 var $34=(($33)|0); //@line 4542 "tcc_bootstrap.c"
 var $35=HEAP32[(($34)>>2)]; //@line 4542 "tcc_bootstrap.c"
 var $36=_get_tok_str($35,0); //@line 4542 "tcc_bootstrap.c"
 _tcc_error(6680,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$36,tempVarArgs)); STACKTOP=tempVarArgs; //@line 4542 "tcc_bootstrap.c"
 label=29;break; //@line 4543 "tcc_bootstrap.c"
 case 7: 
 var $38=$1; //@line 4543 "tcc_bootstrap.c"
 var $39=(($38+16)|0); //@line 4543 "tcc_bootstrap.c"
 var $40=(($39)|0); //@line 4543 "tcc_bootstrap.c"
 var $41=HEAP32[(($40)>>2)]; //@line 4543 "tcc_bootstrap.c"
 var $42=$41&15; //@line 4543 "tcc_bootstrap.c"
 var $43=($42|0)==6; //@line 4543 "tcc_bootstrap.c"
 if($43){label=8;break;}else{label=17;break;} //@line 4543 "tcc_bootstrap.c"
 case 8: 
 var $45=$1; //@line 4544 "tcc_bootstrap.c"
 var $46=(($45+16)|0); //@line 4544 "tcc_bootstrap.c"
 var $47=(($46)|0); //@line 4544 "tcc_bootstrap.c"
 var $48=HEAP32[(($47)>>2)]; //@line 4544 "tcc_bootstrap.c"
 var $49=$48&8192; //@line 4544 "tcc_bootstrap.c"
 $static_proto=$49; //@line 4544 "tcc_bootstrap.c"
 var $50=$2; //@line 4545 "tcc_bootstrap.c"
 var $51=(($50)|0); //@line 4545 "tcc_bootstrap.c"
 var $52=HEAP32[(($51)>>2)]; //@line 4545 "tcc_bootstrap.c"
 var $53=$52&8192; //@line 4545 "tcc_bootstrap.c"
 var $54=($53|0)!=0; //@line 4545 "tcc_bootstrap.c"
 if($54){label=9;break;}else{label=12;break;} //@line 4545 "tcc_bootstrap.c"
 case 9: 
 var $56=$static_proto; //@line 4545 "tcc_bootstrap.c"
 var $57=($56|0)!=0; //@line 4545 "tcc_bootstrap.c"
 if($57){label=12;break;}else{label=10;break;} //@line 4545 "tcc_bootstrap.c"
 case 10: 
 var $59=$2; //@line 4545 "tcc_bootstrap.c"
 var $60=(($59)|0); //@line 4545 "tcc_bootstrap.c"
 var $61=HEAP32[(($60)>>2)]; //@line 4545 "tcc_bootstrap.c"
 var $62=$61&32768; //@line 4545 "tcc_bootstrap.c"
 var $63=($62|0)!=0; //@line 4545 "tcc_bootstrap.c"
 if($63){label=12;break;}else{label=11;break;} //@line 4545 "tcc_bootstrap.c"
 case 11: 
 var $65=$1; //@line 4547 "tcc_bootstrap.c"
 var $66=(($65)|0); //@line 4547 "tcc_bootstrap.c"
 var $67=HEAP32[(($66)>>2)]; //@line 4547 "tcc_bootstrap.c"
 var $68=_get_tok_str($67,0); //@line 4547 "tcc_bootstrap.c"
 _tcc_warning(6632,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$68,tempVarArgs)); STACKTOP=tempVarArgs; //@line 4547 "tcc_bootstrap.c"
 label=12;break; //@line 4547 "tcc_bootstrap.c"
 case 12: 
 var $70=$2; //@line 4548 "tcc_bootstrap.c"
 var $71=(($70)|0); //@line 4548 "tcc_bootstrap.c"
 var $72=HEAP32[(($71)>>2)]; //@line 4548 "tcc_bootstrap.c"
 var $73=$72&4096; //@line 4548 "tcc_bootstrap.c"
 var $74=0==($73|0); //@line 4548 "tcc_bootstrap.c"
 if($74){label=13;break;}else{label=16;break;} //@line 4548 "tcc_bootstrap.c"
 case 13: 
 var $76=$2; //@line 4549 "tcc_bootstrap.c"
 var $77=(($76)|0); //@line 4549 "tcc_bootstrap.c"
 var $78=HEAP32[(($77)>>2)]; //@line 4549 "tcc_bootstrap.c"
 var $79=$78&-8193; //@line 4549 "tcc_bootstrap.c"
 var $80=$static_proto; //@line 4549 "tcc_bootstrap.c"
 var $81=$79|$80; //@line 4549 "tcc_bootstrap.c"
 var $82=$1; //@line 4549 "tcc_bootstrap.c"
 var $83=(($82+16)|0); //@line 4549 "tcc_bootstrap.c"
 var $84=(($83)|0); //@line 4549 "tcc_bootstrap.c"
 HEAP32[(($84)>>2)]=$81; //@line 4549 "tcc_bootstrap.c"
 var $85=$2; //@line 4550 "tcc_bootstrap.c"
 var $86=(($85)|0); //@line 4550 "tcc_bootstrap.c"
 var $87=HEAP32[(($86)>>2)]; //@line 4550 "tcc_bootstrap.c"
 var $88=$87&32768; //@line 4550 "tcc_bootstrap.c"
 var $89=($88|0)!=0; //@line 4550 "tcc_bootstrap.c"
 if($89){label=14;break;}else{label=15;break;} //@line 4550 "tcc_bootstrap.c"
 case 14: 
 var $91=$2; //@line 4551 "tcc_bootstrap.c"
 var $92=(($91)|0); //@line 4551 "tcc_bootstrap.c"
 var $93=HEAP32[(($92)>>2)]; //@line 4551 "tcc_bootstrap.c"
 var $94=$1; //@line 4551 "tcc_bootstrap.c"
 var $95=(($94+16)|0); //@line 4551 "tcc_bootstrap.c"
 var $96=(($95)|0); //@line 4551 "tcc_bootstrap.c"
 HEAP32[(($96)>>2)]=$93; //@line 4551 "tcc_bootstrap.c"
 label=15;break; //@line 4551 "tcc_bootstrap.c"
 case 15: 
 var $98=$2; //@line 4552 "tcc_bootstrap.c"
 var $99=(($98+4)|0); //@line 4552 "tcc_bootstrap.c"
 var $100=HEAP32[(($99)>>2)]; //@line 4552 "tcc_bootstrap.c"
 var $101=$1; //@line 4552 "tcc_bootstrap.c"
 var $102=(($101+16)|0); //@line 4552 "tcc_bootstrap.c"
 var $103=(($102+4)|0); //@line 4552 "tcc_bootstrap.c"
 HEAP32[(($103)>>2)]=$100; //@line 4552 "tcc_bootstrap.c"
 label=16;break; //@line 4553 "tcc_bootstrap.c"
 case 16: 
 label=28;break; //@line 4554 "tcc_bootstrap.c"
 case 17: 
 var $106=$1; //@line 4555 "tcc_bootstrap.c"
 var $107=(($106+16)|0); //@line 4555 "tcc_bootstrap.c"
 var $108=(($107)|0); //@line 4555 "tcc_bootstrap.c"
 var $109=HEAP32[(($108)>>2)]; //@line 4555 "tcc_bootstrap.c"
 var $110=$109&64; //@line 4555 "tcc_bootstrap.c"
 var $111=($110|0)!=0; //@line 4555 "tcc_bootstrap.c"
 if($111){label=18;break;}else{label=25;break;} //@line 4555 "tcc_bootstrap.c"
 case 18: 
 var $113=$2; //@line 4555 "tcc_bootstrap.c"
 var $114=(($113+4)|0); //@line 4555 "tcc_bootstrap.c"
 var $115=HEAP32[(($114)>>2)]; //@line 4555 "tcc_bootstrap.c"
 var $116=(($115+8)|0); //@line 4555 "tcc_bootstrap.c"
 var $117=$116; //@line 4555 "tcc_bootstrap.c"
 var $118=(($117)|0); //@line 4555 "tcc_bootstrap.c"
 var $119=HEAP32[(($118)>>2)]; //@line 4555 "tcc_bootstrap.c"
 var $120=($119|0)>=0; //@line 4555 "tcc_bootstrap.c"
 if($120){label=19;break;}else{label=25;break;} //@line 4555 "tcc_bootstrap.c"
 case 19: 
 var $122=$1; //@line 4556 "tcc_bootstrap.c"
 var $123=(($122+16)|0); //@line 4556 "tcc_bootstrap.c"
 var $124=(($123+4)|0); //@line 4556 "tcc_bootstrap.c"
 var $125=HEAP32[(($124)>>2)]; //@line 4556 "tcc_bootstrap.c"
 var $126=(($125+8)|0); //@line 4556 "tcc_bootstrap.c"
 var $127=$126; //@line 4556 "tcc_bootstrap.c"
 var $128=(($127)|0); //@line 4556 "tcc_bootstrap.c"
 var $129=HEAP32[(($128)>>2)]; //@line 4556 "tcc_bootstrap.c"
 var $130=($129|0)<0; //@line 4556 "tcc_bootstrap.c"
 if($130){label=20;break;}else{label=21;break;} //@line 4556 "tcc_bootstrap.c"
 case 20: 
 var $132=$2; //@line 4557 "tcc_bootstrap.c"
 var $133=(($132+4)|0); //@line 4557 "tcc_bootstrap.c"
 var $134=HEAP32[(($133)>>2)]; //@line 4557 "tcc_bootstrap.c"
 var $135=(($134+8)|0); //@line 4557 "tcc_bootstrap.c"
 var $136=$135; //@line 4557 "tcc_bootstrap.c"
 var $137=(($136)|0); //@line 4557 "tcc_bootstrap.c"
 var $138=HEAP32[(($137)>>2)]; //@line 4557 "tcc_bootstrap.c"
 var $139=$1; //@line 4557 "tcc_bootstrap.c"
 var $140=(($139+16)|0); //@line 4557 "tcc_bootstrap.c"
 var $141=(($140+4)|0); //@line 4557 "tcc_bootstrap.c"
 var $142=HEAP32[(($141)>>2)]; //@line 4557 "tcc_bootstrap.c"
 var $143=(($142+8)|0); //@line 4557 "tcc_bootstrap.c"
 var $144=$143; //@line 4557 "tcc_bootstrap.c"
 var $145=(($144)|0); //@line 4557 "tcc_bootstrap.c"
 HEAP32[(($145)>>2)]=$138; //@line 4557 "tcc_bootstrap.c"
 label=24;break; //@line 4557 "tcc_bootstrap.c"
 case 21: 
 var $147=$1; //@line 4558 "tcc_bootstrap.c"
 var $148=(($147+16)|0); //@line 4558 "tcc_bootstrap.c"
 var $149=(($148+4)|0); //@line 4558 "tcc_bootstrap.c"
 var $150=HEAP32[(($149)>>2)]; //@line 4558 "tcc_bootstrap.c"
 var $151=(($150+8)|0); //@line 4558 "tcc_bootstrap.c"
 var $152=$151; //@line 4558 "tcc_bootstrap.c"
 var $153=(($152)|0); //@line 4558 "tcc_bootstrap.c"
 var $154=HEAP32[(($153)>>2)]; //@line 4558 "tcc_bootstrap.c"
 var $155=$2; //@line 4558 "tcc_bootstrap.c"
 var $156=(($155+4)|0); //@line 4558 "tcc_bootstrap.c"
 var $157=HEAP32[(($156)>>2)]; //@line 4558 "tcc_bootstrap.c"
 var $158=(($157+8)|0); //@line 4558 "tcc_bootstrap.c"
 var $159=$158; //@line 4558 "tcc_bootstrap.c"
 var $160=(($159)|0); //@line 4558 "tcc_bootstrap.c"
 var $161=HEAP32[(($160)>>2)]; //@line 4558 "tcc_bootstrap.c"
 var $162=($154|0)!=($161|0); //@line 4558 "tcc_bootstrap.c"
 if($162){label=22;break;}else{label=23;break;} //@line 4558 "tcc_bootstrap.c"
 case 22: 
 var $164=$1; //@line 4559 "tcc_bootstrap.c"
 var $165=(($164)|0); //@line 4559 "tcc_bootstrap.c"
 var $166=HEAP32[(($165)>>2)]; //@line 4559 "tcc_bootstrap.c"
 var $167=_get_tok_str($166,0); //@line 4559 "tcc_bootstrap.c"
 _tcc_error(6600,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$167,tempVarArgs)); STACKTOP=tempVarArgs; //@line 4559 "tcc_bootstrap.c"
 label=23;break; //@line 4559 "tcc_bootstrap.c"
 case 23: 
 label=24;break;
 case 24: 
 label=25;break; //@line 4560 "tcc_bootstrap.c"
 case 25: 
 var $171=$2; //@line 4561 "tcc_bootstrap.c"
 var $172=(($171)|0); //@line 4561 "tcc_bootstrap.c"
 var $173=HEAP32[(($172)>>2)]; //@line 4561 "tcc_bootstrap.c"
 var $174=$1; //@line 4561 "tcc_bootstrap.c"
 var $175=(($174+16)|0); //@line 4561 "tcc_bootstrap.c"
 var $176=(($175)|0); //@line 4561 "tcc_bootstrap.c"
 var $177=HEAP32[(($176)>>2)]; //@line 4561 "tcc_bootstrap.c"
 var $178=$173^$177; //@line 4561 "tcc_bootstrap.c"
 var $179=$178&8192; //@line 4561 "tcc_bootstrap.c"
 var $180=($179|0)!=0; //@line 4561 "tcc_bootstrap.c"
 if($180){label=26;break;}else{label=27;break;} //@line 4561 "tcc_bootstrap.c"
 case 26: 
 var $182=$1; //@line 4563 "tcc_bootstrap.c"
 var $183=(($182)|0); //@line 4563 "tcc_bootstrap.c"
 var $184=HEAP32[(($183)>>2)]; //@line 4563 "tcc_bootstrap.c"
 var $185=_get_tok_str($184,0); //@line 4563 "tcc_bootstrap.c"
 _tcc_warning(6552,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$185,tempVarArgs)); STACKTOP=tempVarArgs; //@line 4563 "tcc_bootstrap.c"
 label=27;break; //@line 4563 "tcc_bootstrap.c"
 case 27: 
 label=28;break;
 case 28: 
 label=29;break;
 case 29: 
 STACKTOP=sp;return; //@line 4565 "tcc_bootstrap.c"
  default: assert(0, "bad label: " + label);
 }

}


function _rc_fret($t){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 $1=$t;
 STACKTOP=sp;return 8; //@line 4926 "tcc_bootstrap.c"
}


function _parse_attribute($ad){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $t;
 var $n;
 var $astr=sp;
 $1=$ad;
 label=2;break; //@line 6236 "tcc_bootstrap.c"
 case 2: 
 var $3=HEAP32[((10472)>>2)]; //@line 6238 "tcc_bootstrap.c"
 var $4=($3|0)!=303; //@line 6238 "tcc_bootstrap.c"
 if($4){label=3;break;}else{label=5;break;} //@line 6238 "tcc_bootstrap.c"
 case 3: 
 var $6=HEAP32[((10472)>>2)]; //@line 6238 "tcc_bootstrap.c"
 var $7=($6|0)!=304; //@line 6238 "tcc_bootstrap.c"
 if($7){label=4;break;}else{label=5;break;} //@line 6238 "tcc_bootstrap.c"
 case 4: 
 label=5;break; //@line 6239 "tcc_bootstrap.c"
 case 5: 
 STACKTOP=sp;return; //@line 6239 "tcc_bootstrap.c"
  default: assert(0, "bad label: " + label);
 }

}


function _post_type($type,$ad,$storage,$td){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+56)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $n=sp;
 var $l;
 var $t1;
 var $arg_size;
 var $align=(sp)+(8);
 var $plast;
 var $s;
 var $first=(sp)+(16);
 var $ad1=(sp)+(24);
 var $pt=(sp)+(48);
 var $saved_nocode_wanted;
 $2=$type;
 $3=$ad;
 $4=$storage;
 $5=$td;
 var $6=HEAP32[((10472)>>2)]; //@line 6858 "tcc_bootstrap.c"
 var $7=($6|0)==40; //@line 6858 "tcc_bootstrap.c"
 if($7){label=2;break;}else{label=40;break;} //@line 6858 "tcc_bootstrap.c"
 case 2: 
 _next(); //@line 6859 "tcc_bootstrap.c"
 var $9=$5; //@line 6860 "tcc_bootstrap.c"
 var $10=($9|0)!=0; //@line 6860 "tcc_bootstrap.c"
 if($10){label=3;break;}else{label=5;break;} //@line 6860 "tcc_bootstrap.c"
 case 3: 
 var $12=$5; //@line 6860 "tcc_bootstrap.c"
 var $13=$12&1; //@line 6860 "tcc_bootstrap.c"
 var $14=($13|0)!=0; //@line 6860 "tcc_bootstrap.c"
 if($14){label=5;break;}else{label=4;break;} //@line 6860 "tcc_bootstrap.c"
 case 4: 
 $1=0; //@line 6861 "tcc_bootstrap.c"
 label=63;break; //@line 6861 "tcc_bootstrap.c"
 case 5: 
 var $17=HEAP32[((10472)>>2)]; //@line 6862 "tcc_bootstrap.c"
 var $18=($17|0)==41; //@line 6862 "tcc_bootstrap.c"
 if($18){label=6;break;}else{label=7;break;} //@line 6862 "tcc_bootstrap.c"
 case 6: 
 $l=0; //@line 6863 "tcc_bootstrap.c"
 label=14;break; //@line 6863 "tcc_bootstrap.c"
 case 7: 
 var $21=_parse_btype($pt,$ad1); //@line 6864 "tcc_bootstrap.c"
 var $22=($21|0)!=0; //@line 6864 "tcc_bootstrap.c"
 if($22){label=8;break;}else{label=9;break;} //@line 6864 "tcc_bootstrap.c"
 case 8: 
 $l=1; //@line 6865 "tcc_bootstrap.c"
 label=13;break; //@line 6865 "tcc_bootstrap.c"
 case 9: 
 var $25=$5; //@line 6866 "tcc_bootstrap.c"
 var $26=($25|0)!=0; //@line 6866 "tcc_bootstrap.c"
 if($26){label=10;break;}else{label=11;break;} //@line 6866 "tcc_bootstrap.c"
 case 10: 
 $1=0; //@line 6867 "tcc_bootstrap.c"
 label=63;break; //@line 6867 "tcc_bootstrap.c"
 case 11: 
 $l=2; //@line 6869 "tcc_bootstrap.c"
 label=12;break;
 case 12: 
 label=13;break;
 case 13: 
 label=14;break;
 case 14: 
 HEAP32[(($first)>>2)]=0; //@line 6870 "tcc_bootstrap.c"
 $plast=$first; //@line 6871 "tcc_bootstrap.c"
 $arg_size=0; //@line 6872 "tcc_bootstrap.c"
 var $32=$l; //@line 6873 "tcc_bootstrap.c"
 var $33=($32|0)!=0; //@line 6873 "tcc_bootstrap.c"
 if($33){label=15;break;}else{label=36;break;} //@line 6873 "tcc_bootstrap.c"
 case 15: 
 label=16;break; //@line 6874 "tcc_bootstrap.c"
 case 16: 
 var $36=$l; //@line 6875 "tcc_bootstrap.c"
 var $37=($36|0)!=2; //@line 6875 "tcc_bootstrap.c"
 if($37){label=17;break;}else{label=23;break;} //@line 6875 "tcc_bootstrap.c"
 case 17: 
 var $39=(($pt)|0); //@line 6876 "tcc_bootstrap.c"
 var $40=HEAP32[(($39)>>2)]; //@line 6876 "tcc_bootstrap.c"
 var $41=$40&15; //@line 6876 "tcc_bootstrap.c"
 var $42=($41|0)==0; //@line 6876 "tcc_bootstrap.c"
 if($42){label=18;break;}else{label=20;break;} //@line 6876 "tcc_bootstrap.c"
 case 18: 
 var $44=HEAP32[((10472)>>2)]; //@line 6876 "tcc_bootstrap.c"
 var $45=($44|0)==41; //@line 6876 "tcc_bootstrap.c"
 if($45){label=19;break;}else{label=20;break;} //@line 6876 "tcc_bootstrap.c"
 case 19: 
 label=35;break; //@line 6877 "tcc_bootstrap.c"
 case 20: 
 var $48=_type_decl($pt,$ad1,$n,3); //@line 6878 "tcc_bootstrap.c"
 var $49=(($pt)|0); //@line 6879 "tcc_bootstrap.c"
 var $50=HEAP32[(($49)>>2)]; //@line 6879 "tcc_bootstrap.c"
 var $51=$50&15; //@line 6879 "tcc_bootstrap.c"
 var $52=($51|0)==0; //@line 6879 "tcc_bootstrap.c"
 if($52){label=21;break;}else{label=22;break;} //@line 6879 "tcc_bootstrap.c"
 case 21: 
 _tcc_error(6432,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs; //@line 6880 "tcc_bootstrap.c"
 label=22;break; //@line 6880 "tcc_bootstrap.c"
 case 22: 
 var $55=_type_size($pt,$align); //@line 6881 "tcc_bootstrap.c"
 var $56=((($55)+(4))|0); //@line 6881 "tcc_bootstrap.c"
 var $57=((($56)-(1))|0); //@line 6881 "tcc_bootstrap.c"
 var $58=(((($57|0))/(4))&-1); //@line 6881 "tcc_bootstrap.c"
 var $59=$arg_size; //@line 6881 "tcc_bootstrap.c"
 var $60=((($59)+($58))|0); //@line 6881 "tcc_bootstrap.c"
 $arg_size=$60; //@line 6881 "tcc_bootstrap.c"
 label=26;break; //@line 6882 "tcc_bootstrap.c"
 case 23: 
 var $62=HEAP32[((10472)>>2)]; //@line 6883 "tcc_bootstrap.c"
 HEAP32[(($n)>>2)]=$62; //@line 6883 "tcc_bootstrap.c"
 var $63=HEAP32[(($n)>>2)]; //@line 6884 "tcc_bootstrap.c"
 var $64=($63|0)<314; //@line 6884 "tcc_bootstrap.c"
 if($64){label=24;break;}else{label=25;break;} //@line 6884 "tcc_bootstrap.c"
 case 24: 
 _expect(3008); //@line 6885 "tcc_bootstrap.c"
 label=25;break; //@line 6885 "tcc_bootstrap.c"
 case 25: 
 var $67=(($pt)|0); //@line 6886 "tcc_bootstrap.c"
 HEAP32[(($67)>>2)]=0; //@line 6886 "tcc_bootstrap.c"
 _next(); //@line 6887 "tcc_bootstrap.c"
 label=26;break;
 case 26: 
 _convert_parameter_type($pt); //@line 6889 "tcc_bootstrap.c"
 var $69=HEAP32[(($n)>>2)]; //@line 6890 "tcc_bootstrap.c"
 var $70=$69|536870912; //@line 6890 "tcc_bootstrap.c"
 var $71=_sym_push($70,$pt,0,0); //@line 6890 "tcc_bootstrap.c"
 $s=$71; //@line 6890 "tcc_bootstrap.c"
 var $72=$s; //@line 6891 "tcc_bootstrap.c"
 var $73=$plast; //@line 6891 "tcc_bootstrap.c"
 HEAP32[(($73)>>2)]=$72; //@line 6891 "tcc_bootstrap.c"
 var $74=$s; //@line 6892 "tcc_bootstrap.c"
 var $75=(($74+24)|0); //@line 6892 "tcc_bootstrap.c"
 var $76=$75; //@line 6892 "tcc_bootstrap.c"
 $plast=$76; //@line 6892 "tcc_bootstrap.c"
 var $77=HEAP32[((10472)>>2)]; //@line 6893 "tcc_bootstrap.c"
 var $78=($77|0)==41; //@line 6893 "tcc_bootstrap.c"
 if($78){label=27;break;}else{label=28;break;} //@line 6893 "tcc_bootstrap.c"
 case 27: 
 label=35;break; //@line 6894 "tcc_bootstrap.c"
 case 28: 
 _skip(44); //@line 6895 "tcc_bootstrap.c"
 var $81=$l; //@line 6896 "tcc_bootstrap.c"
 var $82=($81|0)==1; //@line 6896 "tcc_bootstrap.c"
 if($82){label=29;break;}else{label=31;break;} //@line 6896 "tcc_bootstrap.c"
 case 29: 
 var $84=HEAP32[((10472)>>2)]; //@line 6896 "tcc_bootstrap.c"
 var $85=($84|0)==200; //@line 6896 "tcc_bootstrap.c"
 if($85){label=30;break;}else{label=31;break;} //@line 6896 "tcc_bootstrap.c"
 case 30: 
 $l=3; //@line 6897 "tcc_bootstrap.c"
 _next(); //@line 6898 "tcc_bootstrap.c"
 label=35;break; //@line 6899 "tcc_bootstrap.c"
 case 31: 
 var $88=$l; //@line 6901 "tcc_bootstrap.c"
 var $89=($88|0)==1; //@line 6901 "tcc_bootstrap.c"
 if($89){label=32;break;}else{label=34;break;} //@line 6901 "tcc_bootstrap.c"
 case 32: 
 var $91=_parse_btype($pt,$ad1); //@line 6901 "tcc_bootstrap.c"
 var $92=($91|0)!=0; //@line 6901 "tcc_bootstrap.c"
 if($92){label=34;break;}else{label=33;break;} //@line 6901 "tcc_bootstrap.c"
 case 33: 
 _tcc_error(6416,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs; //@line 6902 "tcc_bootstrap.c"
 label=34;break; //@line 6902 "tcc_bootstrap.c"
 case 34: 
 label=16;break; //@line 6903 "tcc_bootstrap.c"
 case 35: 
 label=37;break; //@line 6904 "tcc_bootstrap.c"
 case 36: 
 $l=2; //@line 6905 "tcc_bootstrap.c"
 label=37;break;
 case 37: 
 _skip(41); //@line 6906 "tcc_bootstrap.c"
 var $98=$2; //@line 6907 "tcc_bootstrap.c"
 var $99=(($98)|0); //@line 6907 "tcc_bootstrap.c"
 var $100=HEAP32[(($99)>>2)]; //@line 6907 "tcc_bootstrap.c"
 var $101=$100&-257; //@line 6907 "tcc_bootstrap.c"
 HEAP32[(($99)>>2)]=$101; //@line 6907 "tcc_bootstrap.c"
 var $102=HEAP32[((10472)>>2)]; //@line 6908 "tcc_bootstrap.c"
 var $103=($102|0)==91; //@line 6908 "tcc_bootstrap.c"
 if($103){label=38;break;}else{label=39;break;} //@line 6908 "tcc_bootstrap.c"
 case 38: 
 _next(); //@line 6909 "tcc_bootstrap.c"
 _skip(93); //@line 6910 "tcc_bootstrap.c"
 var $105=$2; //@line 6911 "tcc_bootstrap.c"
 _mk_pointer($105); //@line 6911 "tcc_bootstrap.c"
 label=39;break; //@line 6912 "tcc_bootstrap.c"
 case 39: 
 var $107=$arg_size; //@line 6913 "tcc_bootstrap.c"
 var $108=$3; //@line 6913 "tcc_bootstrap.c"
 var $109=(($108+4)|0); //@line 6913 "tcc_bootstrap.c"
 var $110=$109; //@line 6913 "tcc_bootstrap.c"
 var $111=(($107)&65535); //@line 6913 "tcc_bootstrap.c"
 var $112=HEAP16[(($110)>>1)]; //@line 6913 "tcc_bootstrap.c"
 var $113=$111&255; //@line 6913 "tcc_bootstrap.c"
 var $114=$113<<5; //@line 6913 "tcc_bootstrap.c"
 var $115=$112&-8161; //@line 6913 "tcc_bootstrap.c"
 var $116=$115|$114; //@line 6913 "tcc_bootstrap.c"
 HEAP16[(($110)>>1)]=$116; //@line 6913 "tcc_bootstrap.c"
 var $117=($113&65535); //@line 6913 "tcc_bootstrap.c"
 var $118=$l; //@line 6914 "tcc_bootstrap.c"
 var $119=$3; //@line 6914 "tcc_bootstrap.c"
 var $120=(($119+4)|0); //@line 6914 "tcc_bootstrap.c"
 var $121=$120; //@line 6914 "tcc_bootstrap.c"
 var $122=(($118)&65535); //@line 6914 "tcc_bootstrap.c"
 var $123=HEAP16[(($121)>>1)]; //@line 6914 "tcc_bootstrap.c"
 var $124=$122&3; //@line 6914 "tcc_bootstrap.c"
 var $125=$124<<3; //@line 6914 "tcc_bootstrap.c"
 var $126=$123&-25; //@line 6914 "tcc_bootstrap.c"
 var $127=$126|$125; //@line 6914 "tcc_bootstrap.c"
 HEAP16[(($121)>>1)]=$127; //@line 6914 "tcc_bootstrap.c"
 var $128=($124&65535); //@line 6914 "tcc_bootstrap.c"
 var $129=$2; //@line 6915 "tcc_bootstrap.c"
 var $130=_sym_push(536870912,$129,0,0); //@line 6915 "tcc_bootstrap.c"
 $s=$130; //@line 6915 "tcc_bootstrap.c"
 var $131=$s; //@line 6916 "tcc_bootstrap.c"
 var $132=(($131+6)|0); //@line 6916 "tcc_bootstrap.c"
 var $133=$3; //@line 6916 "tcc_bootstrap.c"
 var $134=(($133)|0); //@line 6916 "tcc_bootstrap.c"
 var $135=$132; //@line 6916 "tcc_bootstrap.c"
 var $136=$134; //@line 6916 "tcc_bootstrap.c"
 assert(2 % 1 === 0);HEAP16[(($135)>>1)]=HEAP16[(($136)>>1)]; //@line 6916 "tcc_bootstrap.c"
 var $137=$s; //@line 6917 "tcc_bootstrap.c"
 var $138=(($137+8)|0); //@line 6917 "tcc_bootstrap.c"
 var $139=$138; //@line 6917 "tcc_bootstrap.c"
 var $140=(($139+4)|0); //@line 6917 "tcc_bootstrap.c"
 var $141=$140; //@line 6917 "tcc_bootstrap.c"
 var $142=$3; //@line 6917 "tcc_bootstrap.c"
 var $143=(($142+4)|0); //@line 6917 "tcc_bootstrap.c"
 var $144=$141; //@line 6917 "tcc_bootstrap.c"
 var $145=$143; //@line 6917 "tcc_bootstrap.c"
 assert(4 % 1 === 0);HEAP32[(($144)>>2)]=HEAP32[(($145)>>2)]; //@line 6917 "tcc_bootstrap.c"
 var $146=HEAP32[(($first)>>2)]; //@line 6918 "tcc_bootstrap.c"
 var $147=$s; //@line 6918 "tcc_bootstrap.c"
 var $148=(($147+24)|0); //@line 6918 "tcc_bootstrap.c"
 var $149=$148; //@line 6918 "tcc_bootstrap.c"
 HEAP32[(($149)>>2)]=$146; //@line 6918 "tcc_bootstrap.c"
 var $150=$2; //@line 6919 "tcc_bootstrap.c"
 var $151=(($150)|0); //@line 6919 "tcc_bootstrap.c"
 HEAP32[(($151)>>2)]=6; //@line 6919 "tcc_bootstrap.c"
 var $152=$s; //@line 6920 "tcc_bootstrap.c"
 var $153=$2; //@line 6920 "tcc_bootstrap.c"
 var $154=(($153+4)|0); //@line 6920 "tcc_bootstrap.c"
 HEAP32[(($154)>>2)]=$152; //@line 6920 "tcc_bootstrap.c"
 label=62;break; //@line 6921 "tcc_bootstrap.c"
 case 40: 
 var $156=HEAP32[((10472)>>2)]; //@line 6921 "tcc_bootstrap.c"
 var $157=($156|0)==91; //@line 6921 "tcc_bootstrap.c"
 if($157){label=41;break;}else{label=61;break;} //@line 6921 "tcc_bootstrap.c"
 case 41: 
 var $159=HEAP32[((10616)>>2)]; //@line 6922 "tcc_bootstrap.c"
 $saved_nocode_wanted=$159; //@line 6922 "tcc_bootstrap.c"
 _next(); //@line 6923 "tcc_bootstrap.c"
 var $160=HEAP32[((10472)>>2)]; //@line 6924 "tcc_bootstrap.c"
 var $161=($160|0)==288; //@line 6924 "tcc_bootstrap.c"
 if($161){label=42;break;}else{label=43;break;} //@line 6924 "tcc_bootstrap.c"
 case 42: 
 _next(); //@line 6925 "tcc_bootstrap.c"
 label=43;break; //@line 6925 "tcc_bootstrap.c"
 case 43: 
 HEAP32[(($n)>>2)]=-1; //@line 6926 "tcc_bootstrap.c"
 $t1=0; //@line 6927 "tcc_bootstrap.c"
 var $164=HEAP32[((10472)>>2)]; //@line 6928 "tcc_bootstrap.c"
 var $165=($164|0)!=93; //@line 6928 "tcc_bootstrap.c"
 if($165){label=44;break;}else{label=56;break;} //@line 6928 "tcc_bootstrap.c"
 case 44: 
 var $167=HEAP32[((10704)>>2)]; //@line 6929 "tcc_bootstrap.c"
 var $168=($167|0)!=0; //@line 6929 "tcc_bootstrap.c"
 if($168){label=45;break;}else{label=46;break;} //@line 6929 "tcc_bootstrap.c"
 case 45: 
 var $170=$4; //@line 6929 "tcc_bootstrap.c"
 var $171=$170&8192; //@line 6929 "tcc_bootstrap.c"
 var $172=($171|0)!=0; //@line 6929 "tcc_bootstrap.c"
 if($172){label=46;break;}else{label=47;break;} //@line 6929 "tcc_bootstrap.c"
 case 46: 
 var $174=_expr_const(); //@line 6930 "tcc_bootstrap.c"
 _vpushi($174); //@line 6930 "tcc_bootstrap.c"
 label=48;break; //@line 6930 "tcc_bootstrap.c"
 case 47: 
 HEAP32[((10616)>>2)]=0; //@line 6932 "tcc_bootstrap.c"
 _gexpr(); //@line 6933 "tcc_bootstrap.c"
 label=48;break;
 case 48: 
 var $177=HEAP32[((9288)>>2)]; //@line 6935 "tcc_bootstrap.c"
 var $178=(($177+8)|0); //@line 6935 "tcc_bootstrap.c"
 var $179=HEAP16[(($178)>>1)]; //@line 6935 "tcc_bootstrap.c"
 var $180=($179&65535); //@line 6935 "tcc_bootstrap.c"
 var $181=$180&831; //@line 6935 "tcc_bootstrap.c"
 var $182=($181|0)==48; //@line 6935 "tcc_bootstrap.c"
 if($182){label=49;break;}else{label=52;break;} //@line 6935 "tcc_bootstrap.c"
 case 49: 
 var $184=HEAP32[((9288)>>2)]; //@line 6936 "tcc_bootstrap.c"
 var $185=(($184+16)|0); //@line 6936 "tcc_bootstrap.c"
 var $186=$185; //@line 6936 "tcc_bootstrap.c"
 var $ld$0$0=(($186)|0);
 var $187$0=HEAP32[(($ld$0$0)>>2)];
 var $ld$1$1=(($186+4)|0);
 var $187$1=HEAP32[(($ld$1$1)>>2)];
 var $188$0=$187$0;
 var $188=$188$0;
 HEAP32[(($n)>>2)]=$188; //@line 6936 "tcc_bootstrap.c"
 var $189=HEAP32[(($n)>>2)]; //@line 6937 "tcc_bootstrap.c"
 var $190=($189|0)<0; //@line 6937 "tcc_bootstrap.c"
 if($190){label=50;break;}else{label=51;break;} //@line 6937 "tcc_bootstrap.c"
 case 50: 
 _tcc_error(6392,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs; //@line 6938 "tcc_bootstrap.c"
 label=51;break; //@line 6938 "tcc_bootstrap.c"
 case 51: 
 label=55;break; //@line 6939 "tcc_bootstrap.c"
 case 52: 
 var $194=HEAP32[((9288)>>2)]; //@line 6940 "tcc_bootstrap.c"
 var $195=(($194)|0); //@line 6940 "tcc_bootstrap.c"
 var $196=(($195)|0); //@line 6940 "tcc_bootstrap.c"
 var $197=HEAP32[(($196)>>2)]; //@line 6940 "tcc_bootstrap.c"
 var $198=$197&15; //@line 6940 "tcc_bootstrap.c"
 var $199=_is_integer_btype($198); //@line 6940 "tcc_bootstrap.c"
 var $200=($199|0)!=0; //@line 6940 "tcc_bootstrap.c"
 if($200){label=54;break;}else{label=53;break;} //@line 6940 "tcc_bootstrap.c"
 case 53: 
 _tcc_error(6336,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs; //@line 6941 "tcc_bootstrap.c"
 label=54;break; //@line 6941 "tcc_bootstrap.c"
 case 54: 
 $t1=1024; //@line 6942 "tcc_bootstrap.c"
 label=55;break;
 case 55: 
 label=56;break; //@line 6944 "tcc_bootstrap.c"
 case 56: 
 _skip(93); //@line 6945 "tcc_bootstrap.c"
 var $205=$2; //@line 6946 "tcc_bootstrap.c"
 var $206=$3; //@line 6946 "tcc_bootstrap.c"
 var $207=$4; //@line 6946 "tcc_bootstrap.c"
 var $208=_post_type($205,$206,$207,0); //@line 6946 "tcc_bootstrap.c"
 var $209=$2; //@line 6947 "tcc_bootstrap.c"
 var $210=(($209)|0); //@line 6947 "tcc_bootstrap.c"
 var $211=HEAP32[(($210)>>2)]; //@line 6947 "tcc_bootstrap.c"
 var $212=($211|0)==6; //@line 6947 "tcc_bootstrap.c"
 if($212){label=57;break;}else{label=58;break;} //@line 6947 "tcc_bootstrap.c"
 case 57: 
 _tcc_error(6280,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs; //@line 6948 "tcc_bootstrap.c"
 label=58;break; //@line 6948 "tcc_bootstrap.c"
 case 58: 
 var $215=$2; //@line 6949 "tcc_bootstrap.c"
 var $216=(($215)|0); //@line 6949 "tcc_bootstrap.c"
 var $217=HEAP32[(($216)>>2)]; //@line 6949 "tcc_bootstrap.c"
 var $218=$217&1024; //@line 6949 "tcc_bootstrap.c"
 var $219=$t1; //@line 6949 "tcc_bootstrap.c"
 var $220=$219|$218; //@line 6949 "tcc_bootstrap.c"
 $t1=$220; //@line 6949 "tcc_bootstrap.c"
 var $221=HEAP32[(($n)>>2)]; //@line 6950 "tcc_bootstrap.c"
 var $222=($221|0)!=-1; //@line 6950 "tcc_bootstrap.c"
 if($222){label=59;break;}else{label=60;break;} //@line 6950 "tcc_bootstrap.c"
 case 59: 
 _vpop(); //@line 6951 "tcc_bootstrap.c"
 label=60;break; //@line 6951 "tcc_bootstrap.c"
 case 60: 
 var $225=$saved_nocode_wanted; //@line 6952 "tcc_bootstrap.c"
 HEAP32[((10616)>>2)]=$225; //@line 6952 "tcc_bootstrap.c"
 var $226=$2; //@line 6953 "tcc_bootstrap.c"
 var $227=HEAP32[(($n)>>2)]; //@line 6953 "tcc_bootstrap.c"
 var $228=_sym_push(536870912,$226,0,$227); //@line 6953 "tcc_bootstrap.c"
 $s=$228; //@line 6953 "tcc_bootstrap.c"
 var $229=$t1; //@line 6954 "tcc_bootstrap.c"
 var $230=($229|0)!=0; //@line 6954 "tcc_bootstrap.c"
 var $231=($230?1024:64); //@line 6954 "tcc_bootstrap.c"
 var $232=$231|5; //@line 6954 "tcc_bootstrap.c"
 var $233=$2; //@line 6954 "tcc_bootstrap.c"
 var $234=(($233)|0); //@line 6954 "tcc_bootstrap.c"
 HEAP32[(($234)>>2)]=$232; //@line 6954 "tcc_bootstrap.c"
 var $235=$s; //@line 6955 "tcc_bootstrap.c"
 var $236=$2; //@line 6955 "tcc_bootstrap.c"
 var $237=(($236+4)|0); //@line 6955 "tcc_bootstrap.c"
 HEAP32[(($237)>>2)]=$235; //@line 6955 "tcc_bootstrap.c"
 label=61;break; //@line 6956 "tcc_bootstrap.c"
 case 61: 
 label=62;break;
 case 62: 
 $1=1; //@line 6957 "tcc_bootstrap.c"
 label=63;break; //@line 6957 "tcc_bootstrap.c"
 case 63: 
 var $241=$1; //@line 6957 "tcc_bootstrap.c"
 STACKTOP=sp;return $241; //@line 6957 "tcc_bootstrap.c"
  default: assert(0, "bad label: " + label);
 }

}


function _struct_decl($type,$u){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+112)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $v=sp;
 var $c;
 var $size;
 var $align=(sp)+(8);
 var $flexible;
 var $bit_size;
 var $bsize;
 var $bt;
 var $s;
 var $ss;
 var $ps;
 var $ad=(sp)+(16);
 var $ad1=(sp)+(40);
 var $type1=(sp)+(64);
 var $btype=(sp)+(72);
 var $ll=(sp)+(80);
 var $pl=(sp)+(88);
 var $nl=(sp)+(96);
 var $t=(sp)+(104);
 var $v1;
 $1=$type;
 $2=$u;
 var $3=$ad; //@line 6453 "tcc_bootstrap.c"
 HEAP32[(($3)>>2)]=0; HEAP32[((($3)+(4))>>2)]=0; HEAP32[((($3)+(8))>>2)]=0; HEAP32[((($3)+(12))>>2)]=0; HEAP32[((($3)+(16))>>2)]=0; HEAP32[((($3)+(20))>>2)]=0; //@line 6453 "tcc_bootstrap.c"
 _next(); //@line 6454 "tcc_bootstrap.c"
 _parse_attribute($ad); //@line 6455 "tcc_bootstrap.c"
 var $4=HEAP32[((10472)>>2)]; //@line 6456 "tcc_bootstrap.c"
 var $5=($4|0)!=123; //@line 6456 "tcc_bootstrap.c"
 if($5){label=2;break;}else{label=14;break;} //@line 6456 "tcc_bootstrap.c"
 case 2: 
 var $7=HEAP32[((10472)>>2)]; //@line 6457 "tcc_bootstrap.c"
 HEAP32[(($v)>>2)]=$7; //@line 6457 "tcc_bootstrap.c"
 _next(); //@line 6458 "tcc_bootstrap.c"
 var $8=HEAP32[(($v)>>2)]; //@line 6459 "tcc_bootstrap.c"
 var $9=($8|0)<256; //@line 6459 "tcc_bootstrap.c"
 if($9){label=3;break;}else{label=4;break;} //@line 6459 "tcc_bootstrap.c"
 case 3: 
 _expect(6168); //@line 6460 "tcc_bootstrap.c"
 label=4;break; //@line 6460 "tcc_bootstrap.c"
 case 4: 
 var $12=HEAP32[(($v)>>2)]; //@line 6461 "tcc_bootstrap.c"
 var $13=_struct_find($12); //@line 6461 "tcc_bootstrap.c"
 $s=$13; //@line 6461 "tcc_bootstrap.c"
 var $14=$s; //@line 6462 "tcc_bootstrap.c"
 var $15=($14|0)!=0; //@line 6462 "tcc_bootstrap.c"
 if($15){label=5;break;}else{label=13;break;} //@line 6462 "tcc_bootstrap.c"
 case 5: 
 var $17=$s; //@line 6462 "tcc_bootstrap.c"
 var $18=(($17+8)|0); //@line 6462 "tcc_bootstrap.c"
 var $19=$18; //@line 6462 "tcc_bootstrap.c"
 var $20=(($19+4)|0); //@line 6462 "tcc_bootstrap.c"
 var $21=$20; //@line 6462 "tcc_bootstrap.c"
 var $22=HEAP32[(($21)>>2)]; //@line 6462 "tcc_bootstrap.c"
 var $23=HEAP32[((10712)>>2)]; //@line 6462 "tcc_bootstrap.c"
 var $24=($22|0)==($23|0); //@line 6462 "tcc_bootstrap.c"
 if($24){label=7;break;}else{label=6;break;} //@line 6462 "tcc_bootstrap.c"
 case 6: 
 var $26=HEAP32[((10472)>>2)]; //@line 6462 "tcc_bootstrap.c"
 var $27=($26|0)!=123; //@line 6462 "tcc_bootstrap.c"
 if($27){label=7;break;}else{label=13;break;} //@line 6462 "tcc_bootstrap.c"
 case 7: 
 var $29=$2; //@line 6463 "tcc_bootstrap.c"
 var $30=$s; //@line 6463 "tcc_bootstrap.c"
 var $31=(($30+16)|0); //@line 6463 "tcc_bootstrap.c"
 var $32=(($31)|0); //@line 6463 "tcc_bootstrap.c"
 var $33=HEAP32[(($32)>>2)]; //@line 6463 "tcc_bootstrap.c"
 var $34=($29|0)==($33|0); //@line 6463 "tcc_bootstrap.c"
 if($34){label=8;break;}else{label=9;break;} //@line 6463 "tcc_bootstrap.c"
 case 8: 
 label=19;break; //@line 6464 "tcc_bootstrap.c"
 case 9: 
 var $37=$2; //@line 6465 "tcc_bootstrap.c"
 var $38=($37|0)==2097152; //@line 6465 "tcc_bootstrap.c"
 if($38){label=10;break;}else{label=12;break;} //@line 6465 "tcc_bootstrap.c"
 case 10: 
 var $40=$s; //@line 6465 "tcc_bootstrap.c"
 var $41=(($40+16)|0); //@line 6465 "tcc_bootstrap.c"
 var $42=(($41)|0); //@line 6465 "tcc_bootstrap.c"
 var $43=HEAP32[(($42)>>2)]; //@line 6465 "tcc_bootstrap.c"
 var $44=_IS_ENUM($43); //@line 6465 "tcc_bootstrap.c"
 var $45=($44|0)!=0; //@line 6465 "tcc_bootstrap.c"
 if($45){label=11;break;}else{label=12;break;} //@line 6465 "tcc_bootstrap.c"
 case 11: 
 label=19;break; //@line 6466 "tcc_bootstrap.c"
 case 12: 
 var $48=HEAP32[(($v)>>2)]; //@line 6467 "tcc_bootstrap.c"
 var $49=_get_tok_str($48,0); //@line 6467 "tcc_bootstrap.c"
 _tcc_error(6728,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$49,tempVarArgs)); STACKTOP=tempVarArgs; //@line 6467 "tcc_bootstrap.c"
 label=13;break; //@line 6468 "tcc_bootstrap.c"
 case 13: 
 label=15;break; //@line 6469 "tcc_bootstrap.c"
 case 14: 
 var $52=HEAP32[((76752)>>2)]; //@line 6470 "tcc_bootstrap.c"
 var $53=((($52)+(1))|0); //@line 6470 "tcc_bootstrap.c"
 HEAP32[((76752)>>2)]=$53; //@line 6470 "tcc_bootstrap.c"
 HEAP32[(($v)>>2)]=$52; //@line 6470 "tcc_bootstrap.c"
 label=15;break;
 case 15: 
 var $55=$2; //@line 6472 "tcc_bootstrap.c"
 var $56=($55|0)==2097152; //@line 6472 "tcc_bootstrap.c"
 if($56){label=16;break;}else{label=17;break;} //@line 6472 "tcc_bootstrap.c"
 case 16: 
 var $58=$2; //@line 6472 "tcc_bootstrap.c"
 var $59=$58|3; //@line 6472 "tcc_bootstrap.c"
 var $60=$59|16; //@line 6472 "tcc_bootstrap.c"
 var $64=$60;label=18;break; //@line 6472 "tcc_bootstrap.c"
 case 17: 
 var $62=$2; //@line 6472 "tcc_bootstrap.c"
 var $64=$62;label=18;break; //@line 6472 "tcc_bootstrap.c"
 case 18: 
 var $64; //@line 6472 "tcc_bootstrap.c"
 var $65=(($type1)|0); //@line 6472 "tcc_bootstrap.c"
 HEAP32[(($65)>>2)]=$64; //@line 6472 "tcc_bootstrap.c"
 var $66=(($type1+4)|0); //@line 6473 "tcc_bootstrap.c"
 HEAP32[(($66)>>2)]=0; //@line 6473 "tcc_bootstrap.c"
 var $67=HEAP32[(($v)>>2)]; //@line 6474 "tcc_bootstrap.c"
 var $68=$67|1073741824; //@line 6474 "tcc_bootstrap.c"
 var $69=_sym_push($68,$type1,0,-1); //@line 6474 "tcc_bootstrap.c"
 $s=$69; //@line 6474 "tcc_bootstrap.c"
 var $70=$s; //@line 6475 "tcc_bootstrap.c"
 var $71=(($70+4)|0); //@line 6475 "tcc_bootstrap.c"
 HEAP16[(($71)>>1)]=0; //@line 6475 "tcc_bootstrap.c"
 label=19;break; //@line 6475 "tcc_bootstrap.c"
 case 19: 
 var $73=$s; //@line 6477 "tcc_bootstrap.c"
 var $74=(($73+16)|0); //@line 6477 "tcc_bootstrap.c"
 var $75=(($74)|0); //@line 6477 "tcc_bootstrap.c"
 var $76=HEAP32[(($75)>>2)]; //@line 6477 "tcc_bootstrap.c"
 var $77=$1; //@line 6477 "tcc_bootstrap.c"
 var $78=(($77)|0); //@line 6477 "tcc_bootstrap.c"
 HEAP32[(($78)>>2)]=$76; //@line 6477 "tcc_bootstrap.c"
 var $79=$s; //@line 6478 "tcc_bootstrap.c"
 var $80=$1; //@line 6478 "tcc_bootstrap.c"
 var $81=(($80+4)|0); //@line 6478 "tcc_bootstrap.c"
 HEAP32[(($81)>>2)]=$79; //@line 6478 "tcc_bootstrap.c"
 var $82=HEAP32[((10472)>>2)]; //@line 6479 "tcc_bootstrap.c"
 var $83=($82|0)==123; //@line 6479 "tcc_bootstrap.c"
 if($83){label=20;break;}else{label=130;break;} //@line 6479 "tcc_bootstrap.c"
 case 20: 
 _next(); //@line 6480 "tcc_bootstrap.c"
 var $85=$s; //@line 6481 "tcc_bootstrap.c"
 var $86=(($85+8)|0); //@line 6481 "tcc_bootstrap.c"
 var $87=$86; //@line 6481 "tcc_bootstrap.c"
 var $88=(($87)|0); //@line 6481 "tcc_bootstrap.c"
 var $89=HEAP32[(($88)>>2)]; //@line 6481 "tcc_bootstrap.c"
 var $90=($89|0)!=-1; //@line 6481 "tcc_bootstrap.c"
 if($90){label=21;break;}else{label=22;break;} //@line 6481 "tcc_bootstrap.c"
 case 21: 
 _tcc_error(6128,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs; //@line 6482 "tcc_bootstrap.c"
 label=22;break; //@line 6482 "tcc_bootstrap.c"
 case 22: 
 var $93=$s; //@line 6483 "tcc_bootstrap.c"
 var $94=(($93+24)|0); //@line 6483 "tcc_bootstrap.c"
 var $95=$94; //@line 6483 "tcc_bootstrap.c"
 $ps=$95; //@line 6483 "tcc_bootstrap.c"
 var $96=$2; //@line 6484 "tcc_bootstrap.c"
 var $97=($96|0)==2097152; //@line 6484 "tcc_bootstrap.c"
 if($97){label=23;break;}else{label=59;break;} //@line 6484 "tcc_bootstrap.c"
 case 23: 
 var $$etemp$0$0=0;
 var $$etemp$0$1=0;
 var $st$1$0=(($ll)|0);
 HEAP32[(($st$1$0)>>2)]=$$etemp$0$0;
 var $st$2$1=(($ll+4)|0);
 HEAP32[(($st$2$1)>>2)]=$$etemp$0$1;
 var $$etemp$3$0=0;
 var $$etemp$3$1=0;
 var $st$4$0=(($pl)|0);
 HEAP32[(($st$4$0)>>2)]=$$etemp$3$0;
 var $st$5$1=(($pl+4)|0);
 HEAP32[(($st$5$1)>>2)]=$$etemp$3$1;
 var $$etemp$6$0=0;
 var $$etemp$6$1=0;
 var $st$7$0=(($nl)|0);
 HEAP32[(($st$7$0)>>2)]=$$etemp$6$0;
 var $st$8$1=(($nl+4)|0);
 HEAP32[(($st$8$1)>>2)]=$$etemp$6$1;
 var $99=$s; //@line 6487 "tcc_bootstrap.c"
 var $100=(($t+4)|0); //@line 6487 "tcc_bootstrap.c"
 HEAP32[(($100)>>2)]=$99; //@line 6487 "tcc_bootstrap.c"
 var $101=(($t)|0); //@line 6488 "tcc_bootstrap.c"
 HEAP32[(($101)>>2)]=3153923; //@line 6488 "tcc_bootstrap.c"
 label=24;break; //@line 6489 "tcc_bootstrap.c"
 case 24: 
 var $103=HEAP32[((10472)>>2)]; //@line 6490 "tcc_bootstrap.c"
 HEAP32[(($v)>>2)]=$103; //@line 6490 "tcc_bootstrap.c"
 var $104=HEAP32[(($v)>>2)]; //@line 6491 "tcc_bootstrap.c"
 var $105=($104|0)<314; //@line 6491 "tcc_bootstrap.c"
 if($105){label=25;break;}else{label=26;break;} //@line 6491 "tcc_bootstrap.c"
 case 25: 
 _expect(3008); //@line 6492 "tcc_bootstrap.c"
 label=26;break; //@line 6492 "tcc_bootstrap.c"
 case 26: 
 var $108=HEAP32[(($v)>>2)]; //@line 6493 "tcc_bootstrap.c"
 var $109=_sym_find($108); //@line 6493 "tcc_bootstrap.c"
 $ss=$109; //@line 6493 "tcc_bootstrap.c"
 var $110=$ss; //@line 6494 "tcc_bootstrap.c"
 var $111=($110|0)!=0; //@line 6494 "tcc_bootstrap.c"
 if($111){label=27;break;}else{label=29;break;} //@line 6494 "tcc_bootstrap.c"
 case 27: 
 var $113=HEAP32[((10704)>>2)]; //@line 6494 "tcc_bootstrap.c"
 var $114=($113|0)!=0; //@line 6494 "tcc_bootstrap.c"
 if($114){label=29;break;}else{label=28;break;} //@line 6494 "tcc_bootstrap.c"
 case 28: 
 var $116=HEAP32[(($v)>>2)]; //@line 6496 "tcc_bootstrap.c"
 var $117=_get_tok_str($116,0); //@line 6496 "tcc_bootstrap.c"
 _tcc_error(6072,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$117,tempVarArgs)); STACKTOP=tempVarArgs; //@line 6496 "tcc_bootstrap.c"
 label=29;break; //@line 6496 "tcc_bootstrap.c"
 case 29: 
 _next(); //@line 6497 "tcc_bootstrap.c"
 var $119=HEAP32[((10472)>>2)]; //@line 6498 "tcc_bootstrap.c"
 var $120=($119|0)==61; //@line 6498 "tcc_bootstrap.c"
 if($120){label=30;break;}else{label=31;break;} //@line 6498 "tcc_bootstrap.c"
 case 30: 
 _next(); //@line 6499 "tcc_bootstrap.c"
 var $122$0=_expr_const64();
 var $122$1=tempRet0;
 var $st$9$0=(($ll)|0);
 HEAP32[(($st$9$0)>>2)]=$122$0;
 var $st$10$1=(($ll+4)|0);
 HEAP32[(($st$10$1)>>2)]=$122$1;
 label=31;break; //@line 6501 "tcc_bootstrap.c"
 case 31: 
 var $124=HEAP32[(($v)>>2)]; //@line 6502 "tcc_bootstrap.c"
 var $125=_sym_push($124,$t,48,0); //@line 6502 "tcc_bootstrap.c"
 $ss=$125; //@line 6502 "tcc_bootstrap.c"
 var $ld$11$0=(($ll)|0);
 var $126$0=HEAP32[(($ld$11$0)>>2)];
 var $ld$12$1=(($ll+4)|0);
 var $126$1=HEAP32[(($ld$12$1)>>2)];
 var $127=$ss; //@line 6503 "tcc_bootstrap.c"
 var $128=(($127+8)|0); //@line 6503 "tcc_bootstrap.c"
 var $129=$128; //@line 6503 "tcc_bootstrap.c"
 var $st$13$0=(($129)|0);
 HEAP32[(($st$13$0)>>2)]=$126$0;
 var $st$14$1=(($129+4)|0);
 HEAP32[(($st$14$1)>>2)]=$126$1;
 var $130=$ss; //@line 6504 "tcc_bootstrap.c"
 var $131=$ps; //@line 6504 "tcc_bootstrap.c"
 HEAP32[(($131)>>2)]=$130; //@line 6504 "tcc_bootstrap.c"
 var $132=$ss; //@line 6504 "tcc_bootstrap.c"
 var $133=(($132+24)|0); //@line 6504 "tcc_bootstrap.c"
 var $134=$133; //@line 6504 "tcc_bootstrap.c"
 $ps=$134; //@line 6504 "tcc_bootstrap.c"
 var $ld$15$0=(($ll)|0);
 var $135$0=HEAP32[(($ld$15$0)>>2)];
 var $ld$16$1=(($ll+4)|0);
 var $135$1=HEAP32[(($ld$16$1)>>2)];
 var $ld$17$0=(($nl)|0);
 var $136$0=HEAP32[(($ld$17$0)>>2)];
 var $ld$18$1=(($nl+4)|0);
 var $136$1=HEAP32[(($ld$18$1)>>2)];
 var $137=(($135$1|0) < ($136$1|0)) | (((($135$1|0) == ($136$1|0) & ($135$0>>>0) <  ($136$0>>>0)))); //@line 6505 "tcc_bootstrap.c"
 if($137){label=32;break;}else{label=33;break;} //@line 6505 "tcc_bootstrap.c"
 case 32: 
 var $ld$19$0=(($ll)|0);
 var $139$0=HEAP32[(($ld$19$0)>>2)];
 var $ld$20$1=(($ll+4)|0);
 var $139$1=HEAP32[(($ld$20$1)>>2)];
 var $st$21$0=(($nl)|0);
 HEAP32[(($st$21$0)>>2)]=$139$0;
 var $st$22$1=(($nl+4)|0);
 HEAP32[(($st$22$1)>>2)]=$139$1;
 label=33;break; //@line 6506 "tcc_bootstrap.c"
 case 33: 
 var $ld$23$0=(($ll)|0);
 var $141$0=HEAP32[(($ld$23$0)>>2)];
 var $ld$24$1=(($ll+4)|0);
 var $141$1=HEAP32[(($ld$24$1)>>2)];
 var $ld$25$0=(($pl)|0);
 var $142$0=HEAP32[(($ld$25$0)>>2)];
 var $ld$26$1=(($pl+4)|0);
 var $142$1=HEAP32[(($ld$26$1)>>2)];
 var $143=(($141$1|0) > ($142$1|0)) | (((($141$1|0) == ($142$1|0) & ($141$0>>>0) >  ($142$0>>>0)))); //@line 6507 "tcc_bootstrap.c"
 if($143){label=34;break;}else{label=35;break;} //@line 6507 "tcc_bootstrap.c"
 case 34: 
 var $ld$27$0=(($ll)|0);
 var $145$0=HEAP32[(($ld$27$0)>>2)];
 var $ld$28$1=(($ll+4)|0);
 var $145$1=HEAP32[(($ld$28$1)>>2)];
 var $st$29$0=(($pl)|0);
 HEAP32[(($st$29$0)>>2)]=$145$0;
 var $st$30$1=(($pl+4)|0);
 HEAP32[(($st$30$1)>>2)]=$145$1;
 label=35;break; //@line 6508 "tcc_bootstrap.c"
 case 35: 
 var $147=HEAP32[((10472)>>2)]; //@line 6509 "tcc_bootstrap.c"
 var $148=($147|0)!=44; //@line 6509 "tcc_bootstrap.c"
 if($148){label=36;break;}else{label=37;break;} //@line 6509 "tcc_bootstrap.c"
 case 36: 
 label=40;break; //@line 6510 "tcc_bootstrap.c"
 case 37: 
 _next(); //@line 6511 "tcc_bootstrap.c"
 var $ld$31$0=(($ll)|0);
 var $151$0=HEAP32[(($ld$31$0)>>2)];
 var $ld$32$1=(($ll+4)|0);
 var $151$1=HEAP32[(($ld$32$1)>>2)];
 var $$etemp$33$0=1;
 var $$etemp$33$1=0;
 var $152$0=_i64Add($151$0,$151$1,$$etemp$33$0,$$etemp$33$1);var $152$1=tempRet0; //@line 6512 "tcc_bootstrap.c"
 var $st$34$0=(($ll)|0);
 HEAP32[(($st$34$0)>>2)]=$152$0;
 var $st$35$1=(($ll+4)|0);
 HEAP32[(($st$35$1)>>2)]=$152$1;
 var $153=HEAP32[((10472)>>2)]; //@line 6513 "tcc_bootstrap.c"
 var $154=($153|0)==125; //@line 6513 "tcc_bootstrap.c"
 if($154){label=38;break;}else{label=39;break;} //@line 6513 "tcc_bootstrap.c"
 case 38: 
 label=40;break; //@line 6514 "tcc_bootstrap.c"
 case 39: 
 label=24;break; //@line 6515 "tcc_bootstrap.c"
 case 40: 
 _skip(125); //@line 6516 "tcc_bootstrap.c"
 var $158=(($t)|0); //@line 6517 "tcc_bootstrap.c"
 HEAP32[(($158)>>2)]=3; //@line 6517 "tcc_bootstrap.c"
 var $ld$36$0=(($nl)|0);
 var $159$0=HEAP32[(($ld$36$0)>>2)];
 var $ld$37$1=(($nl+4)|0);
 var $159$1=HEAP32[(($ld$37$1)>>2)];
 var $$etemp$38$0=0;
 var $$etemp$38$1=0;
 var $160=(($159$1|0) >= ($$etemp$38$1|0)) & (((($159$1|0) >  ($$etemp$38$1|0)) | ($159$0>>>0) >= ($$etemp$38$0>>>0))); //@line 6518 "tcc_bootstrap.c"
 if($160){label=41;break;}else{label=44;break;} //@line 6518 "tcc_bootstrap.c"
 case 41: 
 var $ld$39$0=(($pl)|0);
 var $162$0=HEAP32[(($ld$39$0)>>2)];
 var $ld$40$1=(($pl+4)|0);
 var $162$1=HEAP32[(($ld$40$1)>>2)];
 var $ld$41$0=(($pl)|0);
 var $163$0=HEAP32[(($ld$41$0)>>2)];
 var $ld$42$1=(($pl+4)|0);
 var $163$1=HEAP32[(($ld$42$1)>>2)];
 var $164$0=$163$0;
 var $164=$164$0;
 var $165$0=$164;
 var $165$1=0;
 var $166=(($162$0|0) != ($165$0|0)) | (($162$1|0) != ($165$1|0)); //@line 6519 "tcc_bootstrap.c"
 if($166){label=42;break;}else{label=43;break;} //@line 6519 "tcc_bootstrap.c"
 case 42: 
 var $168=(($t)|0); //@line 6520 "tcc_bootstrap.c"
 HEAP32[(($168)>>2)]=4; //@line 6520 "tcc_bootstrap.c"
 label=43;break; //@line 6520 "tcc_bootstrap.c"
 case 43: 
 var $170=(($t)|0); //@line 6521 "tcc_bootstrap.c"
 var $171=HEAP32[(($170)>>2)]; //@line 6521 "tcc_bootstrap.c"
 var $172=$171|16; //@line 6521 "tcc_bootstrap.c"
 HEAP32[(($170)>>2)]=$172; //@line 6521 "tcc_bootstrap.c"
 label=48;break; //@line 6522 "tcc_bootstrap.c"
 case 44: 
 var $ld$43$0=(($pl)|0);
 var $174$0=HEAP32[(($ld$43$0)>>2)];
 var $ld$44$1=(($pl+4)|0);
 var $174$1=HEAP32[(($ld$44$1)>>2)];
 var $ld$45$0=(($pl)|0);
 var $175$0=HEAP32[(($ld$45$0)>>2)];
 var $ld$46$1=(($pl+4)|0);
 var $175$1=HEAP32[(($ld$46$1)>>2)];
 var $176$0=$175$0;
 var $176=$176$0;
 var $177$0=$176;
 var $177$1=((((($176|0)<0))|0)?-1:0);
 var $178=(($174$0|0) != ($177$0|0)) | (($174$1|0) != ($177$1|0)); //@line 6522 "tcc_bootstrap.c"
 if($178){label=46;break;}else{label=45;break;} //@line 6522 "tcc_bootstrap.c"
 case 45: 
 var $ld$47$0=(($nl)|0);
 var $180$0=HEAP32[(($ld$47$0)>>2)];
 var $ld$48$1=(($nl+4)|0);
 var $180$1=HEAP32[(($ld$48$1)>>2)];
 var $ld$49$0=(($nl)|0);
 var $181$0=HEAP32[(($ld$49$0)>>2)];
 var $ld$50$1=(($nl+4)|0);
 var $181$1=HEAP32[(($ld$50$1)>>2)];
 var $182$0=$181$0;
 var $182=$182$0;
 var $183$0=$182;
 var $183$1=((((($182|0)<0))|0)?-1:0);
 var $184=(($180$0|0) != ($183$0|0)) | (($180$1|0) != ($183$1|0)); //@line 6522 "tcc_bootstrap.c"
 if($184){label=46;break;}else{label=47;break;} //@line 6522 "tcc_bootstrap.c"
 case 46: 
 var $186=(($t)|0); //@line 6523 "tcc_bootstrap.c"
 HEAP32[(($186)>>2)]=4; //@line 6523 "tcc_bootstrap.c"
 label=47;break; //@line 6523 "tcc_bootstrap.c"
 case 47: 
 label=48;break;
 case 48: 
 var $189=(($t)|0); //@line 6524 "tcc_bootstrap.c"
 var $190=HEAP32[(($189)>>2)]; //@line 6524 "tcc_bootstrap.c"
 var $191=$190|2097152; //@line 6524 "tcc_bootstrap.c"
 var $192=$1; //@line 6524 "tcc_bootstrap.c"
 var $193=(($192)|0); //@line 6524 "tcc_bootstrap.c"
 HEAP32[(($193)>>2)]=$191; //@line 6524 "tcc_bootstrap.c"
 var $194=$s; //@line 6524 "tcc_bootstrap.c"
 var $195=(($194+16)|0); //@line 6524 "tcc_bootstrap.c"
 var $196=(($195)|0); //@line 6524 "tcc_bootstrap.c"
 HEAP32[(($196)>>2)]=$191; //@line 6524 "tcc_bootstrap.c"
 var $197=$s; //@line 6525 "tcc_bootstrap.c"
 var $198=(($197+8)|0); //@line 6525 "tcc_bootstrap.c"
 var $199=$198; //@line 6525 "tcc_bootstrap.c"
 var $200=(($199)|0); //@line 6525 "tcc_bootstrap.c"
 HEAP32[(($200)>>2)]=0; //@line 6525 "tcc_bootstrap.c"
 var $201=$s; //@line 6526 "tcc_bootstrap.c"
 var $202=(($201+24)|0); //@line 6526 "tcc_bootstrap.c"
 var $203=$202; //@line 6526 "tcc_bootstrap.c"
 var $204=HEAP32[(($203)>>2)]; //@line 6526 "tcc_bootstrap.c"
 $ss=$204; //@line 6526 "tcc_bootstrap.c"
 label=49;break; //@line 6526 "tcc_bootstrap.c"
 case 49: 
 var $206=$ss; //@line 6526 "tcc_bootstrap.c"
 var $207=($206|0)!=0; //@line 6526 "tcc_bootstrap.c"
 if($207){label=50;break;}else{label=58;break;} //@line 6526 "tcc_bootstrap.c"
 case 50: 
 var $209=$ss; //@line 6527 "tcc_bootstrap.c"
 var $210=(($209+8)|0); //@line 6527 "tcc_bootstrap.c"
 var $211=$210; //@line 6527 "tcc_bootstrap.c"
 var $ld$51$0=(($211)|0);
 var $212$0=HEAP32[(($ld$51$0)>>2)];
 var $ld$52$1=(($211+4)|0);
 var $212$1=HEAP32[(($ld$52$1)>>2)];
 var $st$53$0=(($ll)|0);
 HEAP32[(($st$53$0)>>2)]=$212$0;
 var $st$54$1=(($ll+4)|0);
 HEAP32[(($st$54$1)>>2)]=$212$1;
 var $ld$55$0=(($ll)|0);
 var $213$0=HEAP32[(($ld$55$0)>>2)];
 var $ld$56$1=(($ll+4)|0);
 var $213$1=HEAP32[(($ld$56$1)>>2)];
 var $ld$57$0=(($ll)|0);
 var $214$0=HEAP32[(($ld$57$0)>>2)];
 var $ld$58$1=(($ll+4)|0);
 var $214$1=HEAP32[(($ld$58$1)>>2)];
 var $215$0=$214$0;
 var $215=$215$0;
 var $216$0=$215;
 var $216$1=((((($215|0)<0))|0)?-1:0);
 var $217=(($213$0|0) == ($216$0|0)) & (($213$1|0) == ($216$1|0)); //@line 6528 "tcc_bootstrap.c"
 if($217){label=51;break;}else{label=52;break;} //@line 6528 "tcc_bootstrap.c"
 case 51: 
 label=57;break; //@line 6529 "tcc_bootstrap.c"
 case 52: 
 var $220=(($t)|0); //@line 6530 "tcc_bootstrap.c"
 var $221=HEAP32[(($220)>>2)]; //@line 6530 "tcc_bootstrap.c"
 var $222=$221&16; //@line 6530 "tcc_bootstrap.c"
 var $223=($222|0)!=0; //@line 6530 "tcc_bootstrap.c"
 if($223){label=53;break;}else{label=56;break;} //@line 6530 "tcc_bootstrap.c"
 case 53: 
 var $225=$ss; //@line 6531 "tcc_bootstrap.c"
 var $226=(($225+16)|0); //@line 6531 "tcc_bootstrap.c"
 var $227=(($226)|0); //@line 6531 "tcc_bootstrap.c"
 var $228=HEAP32[(($227)>>2)]; //@line 6531 "tcc_bootstrap.c"
 var $229=$228|16; //@line 6531 "tcc_bootstrap.c"
 HEAP32[(($227)>>2)]=$229; //@line 6531 "tcc_bootstrap.c"
 var $ld$59$0=(($ll)|0);
 var $230$0=HEAP32[(($ld$59$0)>>2)];
 var $ld$60$1=(($ll+4)|0);
 var $230$1=HEAP32[(($ld$60$1)>>2)];
 var $ld$61$0=(($ll)|0);
 var $231$0=HEAP32[(($ld$61$0)>>2)];
 var $ld$62$1=(($ll+4)|0);
 var $231$1=HEAP32[(($ld$62$1)>>2)];
 var $232$0=$231$0;
 var $232=$232$0;
 var $233$0=$232;
 var $233$1=0;
 var $234=(($230$0|0) == ($233$0|0)) & (($230$1|0) == ($233$1|0)); //@line 6532 "tcc_bootstrap.c"
 if($234){label=54;break;}else{label=55;break;} //@line 6532 "tcc_bootstrap.c"
 case 54: 
 label=57;break; //@line 6533 "tcc_bootstrap.c"
 case 55: 
 label=56;break; //@line 6534 "tcc_bootstrap.c"
 case 56: 
 var $238=$ss; //@line 6535 "tcc_bootstrap.c"
 var $239=(($238+16)|0); //@line 6535 "tcc_bootstrap.c"
 var $240=(($239)|0); //@line 6535 "tcc_bootstrap.c"
 var $241=HEAP32[(($240)>>2)]; //@line 6535 "tcc_bootstrap.c"
 var $242=$241&-16; //@line 6535 "tcc_bootstrap.c"
 var $243=$242|4; //@line 6535 "tcc_bootstrap.c"
 var $244=$ss; //@line 6535 "tcc_bootstrap.c"
 var $245=(($244+16)|0); //@line 6535 "tcc_bootstrap.c"
 var $246=(($245)|0); //@line 6535 "tcc_bootstrap.c"
 HEAP32[(($246)>>2)]=$243; //@line 6535 "tcc_bootstrap.c"
 label=57;break; //@line 6537 "tcc_bootstrap.c"
 case 57: 
 var $248=$ss; //@line 6526 "tcc_bootstrap.c"
 var $249=(($248+24)|0); //@line 6526 "tcc_bootstrap.c"
 var $250=$249; //@line 6526 "tcc_bootstrap.c"
 var $251=HEAP32[(($250)>>2)]; //@line 6526 "tcc_bootstrap.c"
 $ss=$251; //@line 6526 "tcc_bootstrap.c"
 label=49;break; //@line 6526 "tcc_bootstrap.c"
 case 58: 
 label=129;break; //@line 6538 "tcc_bootstrap.c"
 case 59: 
 $c=0; //@line 6539 "tcc_bootstrap.c"
 $flexible=0; //@line 6540 "tcc_bootstrap.c"
 label=60;break; //@line 6541 "tcc_bootstrap.c"
 case 60: 
 var $255=HEAP32[((10472)>>2)]; //@line 6541 "tcc_bootstrap.c"
 var $256=($255|0)!=125; //@line 6541 "tcc_bootstrap.c"
 if($256){label=61;break;}else{label=128;break;} //@line 6541 "tcc_bootstrap.c"
 case 61: 
 var $258=_parse_btype($btype,$ad1); //@line 6542 "tcc_bootstrap.c"
 var $259=($258|0)!=0; //@line 6542 "tcc_bootstrap.c"
 if($259){label=63;break;}else{label=62;break;} //@line 6542 "tcc_bootstrap.c"
 case 62: 
 _skip(59); //@line 6543 "tcc_bootstrap.c"
 label=60;break; //@line 6544 "tcc_bootstrap.c"
 case 63: 
 label=64;break; //@line 6546 "tcc_bootstrap.c"
 case 64: 
 var $263=$flexible; //@line 6547 "tcc_bootstrap.c"
 var $264=($263|0)!=0; //@line 6547 "tcc_bootstrap.c"
 if($264){label=65;break;}else{label=66;break;} //@line 6547 "tcc_bootstrap.c"
 case 65: 
 var $266=HEAP32[(($v)>>2)]; //@line 6549 "tcc_bootstrap.c"
 var $267=_get_tok_str($266,0); //@line 6549 "tcc_bootstrap.c"
 _tcc_error(6016,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$267,tempVarArgs)); STACKTOP=tempVarArgs; //@line 6549 "tcc_bootstrap.c"
 label=66;break; //@line 6549 "tcc_bootstrap.c"
 case 66: 
 $bit_size=-1; //@line 6550 "tcc_bootstrap.c"
 HEAP32[(($v)>>2)]=0; //@line 6551 "tcc_bootstrap.c"
 var $269=$type1; //@line 6552 "tcc_bootstrap.c"
 var $270=$btype; //@line 6552 "tcc_bootstrap.c"
 assert(8 % 1 === 0);HEAP32[(($269)>>2)]=HEAP32[(($270)>>2)];HEAP32[((($269)+(4))>>2)]=HEAP32[((($270)+(4))>>2)]; //@line 6552 "tcc_bootstrap.c"
 var $271=HEAP32[((10472)>>2)]; //@line 6553 "tcc_bootstrap.c"
 var $272=($271|0)!=58; //@line 6553 "tcc_bootstrap.c"
 if($272){label=67;break;}else{label=88;break;} //@line 6553 "tcc_bootstrap.c"
 case 67: 
 var $274=HEAP32[((10472)>>2)]; //@line 6554 "tcc_bootstrap.c"
 var $275=($274|0)!=59; //@line 6554 "tcc_bootstrap.c"
 if($275){label=68;break;}else{label=69;break;} //@line 6554 "tcc_bootstrap.c"
 case 68: 
 var $277=_type_decl($type1,$ad1,$v,2); //@line 6555 "tcc_bootstrap.c"
 label=69;break; //@line 6555 "tcc_bootstrap.c"
 case 69: 
 var $279=HEAP32[(($v)>>2)]; //@line 6556 "tcc_bootstrap.c"
 var $280=($279|0)==0; //@line 6556 "tcc_bootstrap.c"
 if($280){label=70;break;}else{label=77;break;} //@line 6556 "tcc_bootstrap.c"
 case 70: 
 var $282=(($type1)|0); //@line 6557 "tcc_bootstrap.c"
 var $283=HEAP32[(($282)>>2)]; //@line 6557 "tcc_bootstrap.c"
 var $284=$283&15; //@line 6557 "tcc_bootstrap.c"
 var $285=($284|0)!=7; //@line 6557 "tcc_bootstrap.c"
 if($285){label=71;break;}else{label=72;break;} //@line 6557 "tcc_bootstrap.c"
 case 71: 
 _expect(3008); //@line 6558 "tcc_bootstrap.c"
 label=76;break; //@line 6558 "tcc_bootstrap.c"
 case 72: 
 var $288=(($btype+4)|0); //@line 6560 "tcc_bootstrap.c"
 var $289=HEAP32[(($288)>>2)]; //@line 6560 "tcc_bootstrap.c"
 var $290=(($289)|0); //@line 6560 "tcc_bootstrap.c"
 var $291=HEAP32[(($290)>>2)]; //@line 6560 "tcc_bootstrap.c"
 $v1=$291; //@line 6560 "tcc_bootstrap.c"
 var $292=$v1; //@line 6561 "tcc_bootstrap.c"
 var $293=$292&536870912; //@line 6561 "tcc_bootstrap.c"
 var $294=($293|0)!=0; //@line 6561 "tcc_bootstrap.c"
 if($294){label=75;break;}else{label=73;break;} //@line 6561 "tcc_bootstrap.c"
 case 73: 
 var $296=$v1; //@line 6561 "tcc_bootstrap.c"
 var $297=$296&-1073741825; //@line 6561 "tcc_bootstrap.c"
 var $298=($297|0)<268435456; //@line 6561 "tcc_bootstrap.c"
 if($298){label=74;break;}else{label=75;break;} //@line 6561 "tcc_bootstrap.c"
 case 74: 
 label=75;break; //@line 6562 "tcc_bootstrap.c"
 case 75: 
 label=76;break;
 case 76: 
 label=77;break; //@line 6564 "tcc_bootstrap.c"
 case 77: 
 var $303=_type_size($type1,$align); //@line 6565 "tcc_bootstrap.c"
 var $304=($303|0)<0; //@line 6565 "tcc_bootstrap.c"
 if($304){label=78;break;}else{label=84;break;} //@line 6565 "tcc_bootstrap.c"
 case 78: 
 var $306=$2; //@line 6566 "tcc_bootstrap.c"
 var $307=($306|0)==7; //@line 6566 "tcc_bootstrap.c"
 if($307){label=79;break;}else{label=82;break;} //@line 6566 "tcc_bootstrap.c"
 case 79: 
 var $309=(($type1)|0); //@line 6566 "tcc_bootstrap.c"
 var $310=HEAP32[(($309)>>2)]; //@line 6566 "tcc_bootstrap.c"
 var $311=$310&64; //@line 6566 "tcc_bootstrap.c"
 var $312=($311|0)!=0; //@line 6566 "tcc_bootstrap.c"
 if($312){label=80;break;}else{label=82;break;} //@line 6566 "tcc_bootstrap.c"
 case 80: 
 var $314=$c; //@line 6566 "tcc_bootstrap.c"
 var $315=($314|0)!=0; //@line 6566 "tcc_bootstrap.c"
 if($315){label=81;break;}else{label=82;break;} //@line 6566 "tcc_bootstrap.c"
 case 81: 
 $flexible=1; //@line 6567 "tcc_bootstrap.c"
 label=83;break; //@line 6567 "tcc_bootstrap.c"
 case 82: 
 var $318=HEAP32[(($v)>>2)]; //@line 6570 "tcc_bootstrap.c"
 var $319=_get_tok_str($318,0); //@line 6570 "tcc_bootstrap.c"
 _tcc_error(5984,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$319,tempVarArgs)); STACKTOP=tempVarArgs; //@line 6570 "tcc_bootstrap.c"
 label=83;break;
 case 83: 
 label=84;break; //@line 6571 "tcc_bootstrap.c"
 case 84: 
 var $322=(($type1)|0); //@line 6572 "tcc_bootstrap.c"
 var $323=HEAP32[(($322)>>2)]; //@line 6572 "tcc_bootstrap.c"
 var $324=$323&15; //@line 6572 "tcc_bootstrap.c"
 var $325=($324|0)==6; //@line 6572 "tcc_bootstrap.c"
 if($325){label=86;break;}else{label=85;break;} //@line 6572 "tcc_bootstrap.c"
 case 85: 
 var $327=(($type1)|0); //@line 6572 "tcc_bootstrap.c"
 var $328=HEAP32[(($327)>>2)]; //@line 6572 "tcc_bootstrap.c"
 var $329=$328&61440; //@line 6572 "tcc_bootstrap.c"
 var $330=($329|0)!=0; //@line 6572 "tcc_bootstrap.c"
 if($330){label=86;break;}else{label=87;break;} //@line 6572 "tcc_bootstrap.c"
 case 86: 
 var $332=HEAP32[(($v)>>2)]; //@line 6575 "tcc_bootstrap.c"
 var $333=_get_tok_str($332,0); //@line 6575 "tcc_bootstrap.c"
 _tcc_error(5960,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$333,tempVarArgs)); STACKTOP=tempVarArgs; //@line 6575 "tcc_bootstrap.c"
 label=87;break; //@line 6575 "tcc_bootstrap.c"
 case 87: 
 label=88;break; //@line 6576 "tcc_bootstrap.c"
 case 88: 
 var $336=HEAP32[((10472)>>2)]; //@line 6577 "tcc_bootstrap.c"
 var $337=($336|0)==58; //@line 6577 "tcc_bootstrap.c"
 if($337){label=89;break;}else{label=95;break;} //@line 6577 "tcc_bootstrap.c"
 case 89: 
 _next(); //@line 6578 "tcc_bootstrap.c"
 var $339=_expr_const(); //@line 6579 "tcc_bootstrap.c"
 $bit_size=$339; //@line 6579 "tcc_bootstrap.c"
 var $340=$bit_size; //@line 6580 "tcc_bootstrap.c"
 var $341=($340|0)<0; //@line 6580 "tcc_bootstrap.c"
 if($341){label=90;break;}else{label=91;break;} //@line 6580 "tcc_bootstrap.c"
 case 90: 
 var $343=HEAP32[(($v)>>2)]; //@line 6582 "tcc_bootstrap.c"
 var $344=_get_tok_str($343,0); //@line 6582 "tcc_bootstrap.c"
 _tcc_error(5920,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$344,tempVarArgs)); STACKTOP=tempVarArgs; //@line 6582 "tcc_bootstrap.c"
 label=91;break; //@line 6582 "tcc_bootstrap.c"
 case 91: 
 var $346=HEAP32[(($v)>>2)]; //@line 6583 "tcc_bootstrap.c"
 var $347=($346|0)!=0; //@line 6583 "tcc_bootstrap.c"
 if($347){label=92;break;}else{label=94;break;} //@line 6583 "tcc_bootstrap.c"
 case 92: 
 var $349=$bit_size; //@line 6583 "tcc_bootstrap.c"
 var $350=($349|0)==0; //@line 6583 "tcc_bootstrap.c"
 if($350){label=93;break;}else{label=94;break;} //@line 6583 "tcc_bootstrap.c"
 case 93: 
 var $352=HEAP32[(($v)>>2)]; //@line 6585 "tcc_bootstrap.c"
 var $353=_get_tok_str($352,0); //@line 6585 "tcc_bootstrap.c"
 _tcc_error(5888,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$353,tempVarArgs)); STACKTOP=tempVarArgs; //@line 6585 "tcc_bootstrap.c"
 label=94;break; //@line 6585 "tcc_bootstrap.c"
 case 94: 
 _parse_attribute($ad1); //@line 6586 "tcc_bootstrap.c"
 label=95;break; //@line 6587 "tcc_bootstrap.c"
 case 95: 
 var $356=_type_size($type1,$align); //@line 6588 "tcc_bootstrap.c"
 $size=$356; //@line 6588 "tcc_bootstrap.c"
 var $357=$bit_size; //@line 6589 "tcc_bootstrap.c"
 var $358=($357|0)>=0; //@line 6589 "tcc_bootstrap.c"
 if($358){label=96;break;}else{label=114;break;} //@line 6589 "tcc_bootstrap.c"
 case 96: 
 var $360=(($type1)|0); //@line 6590 "tcc_bootstrap.c"
 var $361=HEAP32[(($360)>>2)]; //@line 6590 "tcc_bootstrap.c"
 var $362=$361&15; //@line 6590 "tcc_bootstrap.c"
 $bt=$362; //@line 6590 "tcc_bootstrap.c"
 var $363=$bt; //@line 6591 "tcc_bootstrap.c"
 var $364=($363|0)!=3; //@line 6591 "tcc_bootstrap.c"
 if($364){label=97;break;}else{label=102;break;} //@line 6591 "tcc_bootstrap.c"
 case 97: 
 var $366=$bt; //@line 6591 "tcc_bootstrap.c"
 var $367=($366|0)!=1; //@line 6591 "tcc_bootstrap.c"
 if($367){label=98;break;}else{label=102;break;} //@line 6591 "tcc_bootstrap.c"
 case 98: 
 var $369=$bt; //@line 6591 "tcc_bootstrap.c"
 var $370=($369|0)!=2; //@line 6591 "tcc_bootstrap.c"
 if($370){label=99;break;}else{label=102;break;} //@line 6591 "tcc_bootstrap.c"
 case 99: 
 var $372=$bt; //@line 6591 "tcc_bootstrap.c"
 var $373=($372|0)!=11; //@line 6591 "tcc_bootstrap.c"
 if($373){label=100;break;}else{label=102;break;} //@line 6591 "tcc_bootstrap.c"
 case 100: 
 var $375=$bt; //@line 6591 "tcc_bootstrap.c"
 var $376=($375|0)!=4; //@line 6591 "tcc_bootstrap.c"
 if($376){label=101;break;}else{label=102;break;} //@line 6591 "tcc_bootstrap.c"
 case 101: 
 _tcc_error(5856,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs; //@line 6596 "tcc_bootstrap.c"
 label=102;break; //@line 6596 "tcc_bootstrap.c"
 case 102: 
 var $379=$size; //@line 6597 "tcc_bootstrap.c"
 var $380=($379<<3); //@line 6597 "tcc_bootstrap.c"
 $bsize=$380; //@line 6597 "tcc_bootstrap.c"
 var $381=$bit_size; //@line 6598 "tcc_bootstrap.c"
 var $382=$bsize; //@line 6598 "tcc_bootstrap.c"
 var $383=($381|0)>($382|0); //@line 6598 "tcc_bootstrap.c"
 if($383){label=103;break;}else{label=104;break;} //@line 6598 "tcc_bootstrap.c"
 case 103: 
 var $385=HEAP32[(($v)>>2)]; //@line 6600 "tcc_bootstrap.c"
 var $386=_get_tok_str($385,0); //@line 6600 "tcc_bootstrap.c"
 _tcc_error(5824,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$386,tempVarArgs)); STACKTOP=tempVarArgs; //@line 6600 "tcc_bootstrap.c"
 label=113;break; //@line 6601 "tcc_bootstrap.c"
 case 104: 
 var $388=$bit_size; //@line 6601 "tcc_bootstrap.c"
 var $389=$bsize; //@line 6601 "tcc_bootstrap.c"
 var $390=($388|0)==($389|0); //@line 6601 "tcc_bootstrap.c"
 if($390){label=105;break;}else{label=108;break;} //@line 6601 "tcc_bootstrap.c"
 case 105: 
 var $392=(($ad)|0); //@line 6601 "tcc_bootstrap.c"
 var $393=$392; //@line 6601 "tcc_bootstrap.c"
 var $394=HEAP16[(($393)>>1)]; //@line 6601 "tcc_bootstrap.c"
 var $395=($394&65535)>>>5; //@line 6601 "tcc_bootstrap.c"
 var $396=$395&1; //@line 6601 "tcc_bootstrap.c"
 var $397=(($396<<16)>>16)!=0; //@line 6601 "tcc_bootstrap.c"
 if($397){label=108;break;}else{label=106;break;} //@line 6601 "tcc_bootstrap.c"
 case 106: 
 var $399=(($ad1)|0); //@line 6601 "tcc_bootstrap.c"
 var $400=$399; //@line 6601 "tcc_bootstrap.c"
 var $401=HEAP16[(($400)>>1)]; //@line 6601 "tcc_bootstrap.c"
 var $402=($401&65535)>>>5; //@line 6601 "tcc_bootstrap.c"
 var $403=$402&1; //@line 6601 "tcc_bootstrap.c"
 var $404=(($403<<16)>>16)!=0; //@line 6601 "tcc_bootstrap.c"
 if($404){label=108;break;}else{label=107;break;} //@line 6601 "tcc_bootstrap.c"
 case 107: 
 label=112;break; //@line 6604 "tcc_bootstrap.c"
 case 108: 
 var $407=$bit_size; //@line 6604 "tcc_bootstrap.c"
 var $408=($407|0)==64; //@line 6604 "tcc_bootstrap.c"
 if($408){label=109;break;}else{label=110;break;} //@line 6604 "tcc_bootstrap.c"
 case 109: 
 _tcc_error(5792,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs; //@line 6605 "tcc_bootstrap.c"
 label=111;break; //@line 6606 "tcc_bootstrap.c"
 case 110: 
 var $411=(($type1)|0); //@line 6607 "tcc_bootstrap.c"
 var $412=HEAP32[(($411)>>2)]; //@line 6607 "tcc_bootstrap.c"
 var $413=$412&1048447; //@line 6607 "tcc_bootstrap.c"
 var $414=$413|128; //@line 6607 "tcc_bootstrap.c"
 var $415=$bit_size; //@line 6607 "tcc_bootstrap.c"
 var $416=$415<<26; //@line 6607 "tcc_bootstrap.c"
 var $417=$414|$416; //@line 6607 "tcc_bootstrap.c"
 var $418=(($type1)|0); //@line 6607 "tcc_bootstrap.c"
 HEAP32[(($418)>>2)]=$417; //@line 6607 "tcc_bootstrap.c"
 label=111;break;
 case 111: 
 label=112;break;
 case 112: 
 label=113;break;
 case 113: 
 label=114;break; //@line 6611 "tcc_bootstrap.c"
 case 114: 
 var $423=HEAP32[(($v)>>2)]; //@line 6612 "tcc_bootstrap.c"
 var $424=($423|0)!=0; //@line 6612 "tcc_bootstrap.c"
 if($424){label=116;break;}else{label=115;break;} //@line 6612 "tcc_bootstrap.c"
 case 115: 
 var $426=(($type1)|0); //@line 6612 "tcc_bootstrap.c"
 var $427=HEAP32[(($426)>>2)]; //@line 6612 "tcc_bootstrap.c"
 var $428=$427&15; //@line 6612 "tcc_bootstrap.c"
 var $429=($428|0)==7; //@line 6612 "tcc_bootstrap.c"
 if($429){label=116;break;}else{label=117;break;} //@line 6612 "tcc_bootstrap.c"
 case 116: 
 $c=1; //@line 6613 "tcc_bootstrap.c"
 label=117;break; //@line 6614 "tcc_bootstrap.c"
 case 117: 
 var $432=HEAP32[(($v)>>2)]; //@line 6615 "tcc_bootstrap.c"
 var $433=($432|0)==0; //@line 6615 "tcc_bootstrap.c"
 if($433){label=118;break;}else{label=121;break;} //@line 6615 "tcc_bootstrap.c"
 case 118: 
 var $435=(($type1)|0); //@line 6615 "tcc_bootstrap.c"
 var $436=HEAP32[(($435)>>2)]; //@line 6615 "tcc_bootstrap.c"
 var $437=$436&15; //@line 6615 "tcc_bootstrap.c"
 var $438=($437|0)==7; //@line 6615 "tcc_bootstrap.c"
 if($438){label=120;break;}else{label=119;break;} //@line 6615 "tcc_bootstrap.c"
 case 119: 
 var $440=$bit_size; //@line 6615 "tcc_bootstrap.c"
 var $441=($440|0)>=0; //@line 6615 "tcc_bootstrap.c"
 if($441){label=120;break;}else{label=121;break;} //@line 6615 "tcc_bootstrap.c"
 case 120: 
 var $443=HEAP32[((76752)>>2)]; //@line 6618 "tcc_bootstrap.c"
 var $444=((($443)+(1))|0); //@line 6618 "tcc_bootstrap.c"
 HEAP32[((76752)>>2)]=$444; //@line 6618 "tcc_bootstrap.c"
 HEAP32[(($v)>>2)]=$443; //@line 6618 "tcc_bootstrap.c"
 label=121;break; //@line 6619 "tcc_bootstrap.c"
 case 121: 
 var $446=HEAP32[(($v)>>2)]; //@line 6620 "tcc_bootstrap.c"
 var $447=($446|0)!=0; //@line 6620 "tcc_bootstrap.c"
 if($447){label=122;break;}else{label=123;break;} //@line 6620 "tcc_bootstrap.c"
 case 122: 
 var $449=HEAP32[(($v)>>2)]; //@line 6621 "tcc_bootstrap.c"
 var $450=$449|536870912; //@line 6621 "tcc_bootstrap.c"
 var $451=_sym_push($450,$type1,0,0); //@line 6621 "tcc_bootstrap.c"
 $ss=$451; //@line 6621 "tcc_bootstrap.c"
 var $452=$ss; //@line 6622 "tcc_bootstrap.c"
 var $453=(($452+6)|0); //@line 6622 "tcc_bootstrap.c"
 var $454=(($ad1)|0); //@line 6622 "tcc_bootstrap.c"
 var $455=$453; //@line 6622 "tcc_bootstrap.c"
 var $456=$454; //@line 6622 "tcc_bootstrap.c"
 assert(2 % 1 === 0);HEAP16[(($455)>>1)]=HEAP16[(($456)>>1)]; //@line 6622 "tcc_bootstrap.c"
 var $457=$ss; //@line 6623 "tcc_bootstrap.c"
 var $458=$ps; //@line 6623 "tcc_bootstrap.c"
 HEAP32[(($458)>>2)]=$457; //@line 6623 "tcc_bootstrap.c"
 var $459=$ss; //@line 6624 "tcc_bootstrap.c"
 var $460=(($459+24)|0); //@line 6624 "tcc_bootstrap.c"
 var $461=$460; //@line 6624 "tcc_bootstrap.c"
 $ps=$461; //@line 6624 "tcc_bootstrap.c"
 label=123;break; //@line 6625 "tcc_bootstrap.c"
 case 123: 
 var $463=HEAP32[((10472)>>2)]; //@line 6626 "tcc_bootstrap.c"
 var $464=($463|0)==59; //@line 6626 "tcc_bootstrap.c"
 if($464){label=125;break;}else{label=124;break;} //@line 6626 "tcc_bootstrap.c"
 case 124: 
 var $466=HEAP32[((10472)>>2)]; //@line 6626 "tcc_bootstrap.c"
 var $467=($466|0)==-1; //@line 6626 "tcc_bootstrap.c"
 if($467){label=125;break;}else{label=126;break;} //@line 6626 "tcc_bootstrap.c"
 case 125: 
 label=127;break; //@line 6627 "tcc_bootstrap.c"
 case 126: 
 _skip(44); //@line 6628 "tcc_bootstrap.c"
 label=64;break; //@line 6629 "tcc_bootstrap.c"
 case 127: 
 _skip(59); //@line 6630 "tcc_bootstrap.c"
 label=60;break; //@line 6631 "tcc_bootstrap.c"
 case 128: 
 _skip(125); //@line 6632 "tcc_bootstrap.c"
 _parse_attribute($ad); //@line 6633 "tcc_bootstrap.c"
 var $472=$1; //@line 6634 "tcc_bootstrap.c"
 _struct_layout($472,$ad); //@line 6634 "tcc_bootstrap.c"
 label=129;break;
 case 129: 
 label=130;break; //@line 6636 "tcc_bootstrap.c"
 case 130: 
 STACKTOP=sp;return; //@line 6637 "tcc_bootstrap.c"
  default: assert(0, "bad label: " + label);
 }

}


function _parse_btype_qualify($type,$qualifiers){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 $1=$type;
 $2=$qualifiers;
 label=2;break; //@line 6651 "tcc_bootstrap.c"
 case 2: 
 var $4=$1; //@line 6651 "tcc_bootstrap.c"
 var $5=(($4)|0); //@line 6651 "tcc_bootstrap.c"
 var $6=HEAP32[(($5)>>2)]; //@line 6651 "tcc_bootstrap.c"
 var $7=$6&64; //@line 6651 "tcc_bootstrap.c"
 var $8=($7|0)!=0; //@line 6651 "tcc_bootstrap.c"
 if($8){label=3;break;}else{label=4;break;} //@line 6651 "tcc_bootstrap.c"
 case 3: 
 var $10=$1; //@line 6652 "tcc_bootstrap.c"
 var $11=(($10+4)|0); //@line 6652 "tcc_bootstrap.c"
 var $12=HEAP32[(($11)>>2)]; //@line 6652 "tcc_bootstrap.c"
 var $13=(($12+16)|0); //@line 6652 "tcc_bootstrap.c"
 var $14=$1; //@line 6652 "tcc_bootstrap.c"
 var $15=(($14+4)|0); //@line 6652 "tcc_bootstrap.c"
 var $16=HEAP32[(($15)>>2)]; //@line 6652 "tcc_bootstrap.c"
 var $17=(($16+8)|0); //@line 6652 "tcc_bootstrap.c"
 var $18=$17; //@line 6652 "tcc_bootstrap.c"
 var $19=(($18)|0); //@line 6652 "tcc_bootstrap.c"
 var $20=HEAP32[(($19)>>2)]; //@line 6652 "tcc_bootstrap.c"
 var $21=_sym_push(536870912,$13,0,$20); //@line 6652 "tcc_bootstrap.c"
 var $22=$1; //@line 6652 "tcc_bootstrap.c"
 var $23=(($22+4)|0); //@line 6652 "tcc_bootstrap.c"
 HEAP32[(($23)>>2)]=$21; //@line 6652 "tcc_bootstrap.c"
 var $24=$1; //@line 6653 "tcc_bootstrap.c"
 var $25=(($24+4)|0); //@line 6653 "tcc_bootstrap.c"
 var $26=HEAP32[(($25)>>2)]; //@line 6653 "tcc_bootstrap.c"
 var $27=(($26+16)|0); //@line 6653 "tcc_bootstrap.c"
 $1=$27; //@line 6653 "tcc_bootstrap.c"
 label=2;break; //@line 6654 "tcc_bootstrap.c"
 case 4: 
 var $29=$2; //@line 6655 "tcc_bootstrap.c"
 var $30=$1; //@line 6655 "tcc_bootstrap.c"
 var $31=(($30)|0); //@line 6655 "tcc_bootstrap.c"
 var $32=HEAP32[(($31)>>2)]; //@line 6655 "tcc_bootstrap.c"
 var $33=$32|$29; //@line 6655 "tcc_bootstrap.c"
 HEAP32[(($31)>>2)]=$33; //@line 6655 "tcc_bootstrap.c"
 STACKTOP=sp;return; //@line 6656 "tcc_bootstrap.c"
  default: assert(0, "bad label: " + label);
 }

}


function _parse_expr_type($type){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+32)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $n=sp;
 var $ad=(sp)+(8);
 $1=$type;
 _skip(40); //@line 7080 "tcc_bootstrap.c"
 var $2=$1; //@line 7081 "tcc_bootstrap.c"
 var $3=_parse_btype($2,$ad); //@line 7081 "tcc_bootstrap.c"
 var $4=($3|0)!=0; //@line 7081 "tcc_bootstrap.c"
 if($4){label=2;break;}else{label=3;break;} //@line 7081 "tcc_bootstrap.c"
 case 2: 
 var $6=$1; //@line 7082 "tcc_bootstrap.c"
 var $7=_type_decl($6,$ad,$n,1); //@line 7082 "tcc_bootstrap.c"
 label=4;break; //@line 7083 "tcc_bootstrap.c"
 case 3: 
 var $9=$1; //@line 7084 "tcc_bootstrap.c"
 _expr_type($9,8); //@line 7084 "tcc_bootstrap.c"
 label=4;break;
 case 4: 
 _skip(41); //@line 7086 "tcc_bootstrap.c"
 STACKTOP=sp;return; //@line 7087 "tcc_bootstrap.c"
  default: assert(0, "bad label: " + label);
 }

}


function _sym_to_attr($ad,$s){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 $1=$ad;
 $2=$s;
 var $3=$2; //@line 6640 "tcc_bootstrap.c"
 var $4=(($3+6)|0); //@line 6640 "tcc_bootstrap.c"
 var $5=$4; //@line 6640 "tcc_bootstrap.c"
 var $6=HEAP16[(($5)>>1)]; //@line 6640 "tcc_bootstrap.c"
 var $7=$6&31; //@line 6640 "tcc_bootstrap.c"
 var $8=($7&65535); //@line 6640 "tcc_bootstrap.c"
 var $9=($8|0)!=0; //@line 6640 "tcc_bootstrap.c"
 if($9){label=2;break;}else{label=4;break;} //@line 6640 "tcc_bootstrap.c"
 case 2: 
 var $11=$1; //@line 6640 "tcc_bootstrap.c"
 var $12=(($11)|0); //@line 6640 "tcc_bootstrap.c"
 var $13=$12; //@line 6640 "tcc_bootstrap.c"
 var $14=HEAP16[(($13)>>1)]; //@line 6640 "tcc_bootstrap.c"
 var $15=$14&31; //@line 6640 "tcc_bootstrap.c"
 var $16=($15&65535); //@line 6640 "tcc_bootstrap.c"
 var $17=0==($16|0); //@line 6640 "tcc_bootstrap.c"
 if($17){label=3;break;}else{label=4;break;} //@line 6640 "tcc_bootstrap.c"
 case 3: 
 var $19=$2; //@line 6641 "tcc_bootstrap.c"
 var $20=(($19+6)|0); //@line 6641 "tcc_bootstrap.c"
 var $21=$20; //@line 6641 "tcc_bootstrap.c"
 var $22=HEAP16[(($21)>>1)]; //@line 6641 "tcc_bootstrap.c"
 var $23=$22&31; //@line 6641 "tcc_bootstrap.c"
 var $24=$1; //@line 6641 "tcc_bootstrap.c"
 var $25=(($24)|0); //@line 6641 "tcc_bootstrap.c"
 var $26=$25; //@line 6641 "tcc_bootstrap.c"
 var $27=HEAP16[(($26)>>1)]; //@line 6641 "tcc_bootstrap.c"
 var $28=$23&31; //@line 6641 "tcc_bootstrap.c"
 var $29=$27&-32; //@line 6641 "tcc_bootstrap.c"
 var $30=$29|$28; //@line 6641 "tcc_bootstrap.c"
 HEAP16[(($26)>>1)]=$30; //@line 6641 "tcc_bootstrap.c"
 label=4;break; //@line 6641 "tcc_bootstrap.c"
 case 4: 
 var $32=$2; //@line 6642 "tcc_bootstrap.c"
 var $33=(($32+8)|0); //@line 6642 "tcc_bootstrap.c"
 var $34=$33; //@line 6642 "tcc_bootstrap.c"
 var $35=(($34+4)|0); //@line 6642 "tcc_bootstrap.c"
 var $36=$35; //@line 6642 "tcc_bootstrap.c"
 var $37=$36; //@line 6642 "tcc_bootstrap.c"
 var $38=HEAP16[(($37)>>1)]; //@line 6642 "tcc_bootstrap.c"
 var $39=$38&7; //@line 6642 "tcc_bootstrap.c"
 var $40=($39&65535); //@line 6642 "tcc_bootstrap.c"
 var $41=($40|0)!=0; //@line 6642 "tcc_bootstrap.c"
 if($41){label=5;break;}else{label=7;break;} //@line 6642 "tcc_bootstrap.c"
 case 5: 
 var $43=$1; //@line 6642 "tcc_bootstrap.c"
 var $44=(($43+4)|0); //@line 6642 "tcc_bootstrap.c"
 var $45=$44; //@line 6642 "tcc_bootstrap.c"
 var $46=HEAP16[(($45)>>1)]; //@line 6642 "tcc_bootstrap.c"
 var $47=$46&7; //@line 6642 "tcc_bootstrap.c"
 var $48=($47&65535); //@line 6642 "tcc_bootstrap.c"
 var $49=0==($48|0); //@line 6642 "tcc_bootstrap.c"
 if($49){label=6;break;}else{label=7;break;} //@line 6642 "tcc_bootstrap.c"
 case 6: 
 var $51=$2; //@line 6643 "tcc_bootstrap.c"
 var $52=(($51+8)|0); //@line 6643 "tcc_bootstrap.c"
 var $53=$52; //@line 6643 "tcc_bootstrap.c"
 var $54=(($53+4)|0); //@line 6643 "tcc_bootstrap.c"
 var $55=$54; //@line 6643 "tcc_bootstrap.c"
 var $56=$55; //@line 6643 "tcc_bootstrap.c"
 var $57=HEAP16[(($56)>>1)]; //@line 6643 "tcc_bootstrap.c"
 var $58=$57&7; //@line 6643 "tcc_bootstrap.c"
 var $59=($58&65535); //@line 6643 "tcc_bootstrap.c"
 var $60=$1; //@line 6643 "tcc_bootstrap.c"
 var $61=(($60+4)|0); //@line 6643 "tcc_bootstrap.c"
 var $62=$61; //@line 6643 "tcc_bootstrap.c"
 var $63=(($59)&65535); //@line 6643 "tcc_bootstrap.c"
 var $64=HEAP16[(($62)>>1)]; //@line 6643 "tcc_bootstrap.c"
 var $65=$63&7; //@line 6643 "tcc_bootstrap.c"
 var $66=$64&-8; //@line 6643 "tcc_bootstrap.c"
 var $67=$66|$65; //@line 6643 "tcc_bootstrap.c"
 HEAP16[(($62)>>1)]=$67; //@line 6643 "tcc_bootstrap.c"
 var $68=($65&65535); //@line 6643 "tcc_bootstrap.c"
 label=7;break; //@line 6643 "tcc_bootstrap.c"
 case 7: 
 var $70=$2; //@line 6644 "tcc_bootstrap.c"
 var $71=(($70+8)|0); //@line 6644 "tcc_bootstrap.c"
 var $72=$71; //@line 6644 "tcc_bootstrap.c"
 var $73=(($72+4)|0); //@line 6644 "tcc_bootstrap.c"
 var $74=$73; //@line 6644 "tcc_bootstrap.c"
 var $75=$74; //@line 6644 "tcc_bootstrap.c"
 var $76=HEAP16[(($75)>>1)]; //@line 6644 "tcc_bootstrap.c"
 var $77=($76&65535)>>>3; //@line 6644 "tcc_bootstrap.c"
 var $78=$77&3; //@line 6644 "tcc_bootstrap.c"
 var $79=($78&65535); //@line 6644 "tcc_bootstrap.c"
 var $80=($79|0)!=0; //@line 6644 "tcc_bootstrap.c"
 if($80){label=8;break;}else{label=10;break;} //@line 6644 "tcc_bootstrap.c"
 case 8: 
 var $82=$1; //@line 6644 "tcc_bootstrap.c"
 var $83=(($82+4)|0); //@line 6644 "tcc_bootstrap.c"
 var $84=$83; //@line 6644 "tcc_bootstrap.c"
 var $85=HEAP16[(($84)>>1)]; //@line 6644 "tcc_bootstrap.c"
 var $86=($85&65535)>>>3; //@line 6644 "tcc_bootstrap.c"
 var $87=$86&3; //@line 6644 "tcc_bootstrap.c"
 var $88=($87&65535); //@line 6644 "tcc_bootstrap.c"
 var $89=0==($88|0); //@line 6644 "tcc_bootstrap.c"
 if($89){label=9;break;}else{label=10;break;} //@line 6644 "tcc_bootstrap.c"
 case 9: 
 var $91=$2; //@line 6645 "tcc_bootstrap.c"
 var $92=(($91+8)|0); //@line 6645 "tcc_bootstrap.c"
 var $93=$92; //@line 6645 "tcc_bootstrap.c"
 var $94=(($93+4)|0); //@line 6645 "tcc_bootstrap.c"
 var $95=$94; //@line 6645 "tcc_bootstrap.c"
 var $96=$95; //@line 6645 "tcc_bootstrap.c"
 var $97=HEAP16[(($96)>>1)]; //@line 6645 "tcc_bootstrap.c"
 var $98=($97&65535)>>>3; //@line 6645 "tcc_bootstrap.c"
 var $99=$98&3; //@line 6645 "tcc_bootstrap.c"
 var $100=($99&65535); //@line 6645 "tcc_bootstrap.c"
 var $101=$1; //@line 6645 "tcc_bootstrap.c"
 var $102=(($101+4)|0); //@line 6645 "tcc_bootstrap.c"
 var $103=$102; //@line 6645 "tcc_bootstrap.c"
 var $104=(($100)&65535); //@line 6645 "tcc_bootstrap.c"
 var $105=HEAP16[(($103)>>1)]; //@line 6645 "tcc_bootstrap.c"
 var $106=$104&3; //@line 6645 "tcc_bootstrap.c"
 var $107=$106<<3; //@line 6645 "tcc_bootstrap.c"
 var $108=$105&-25; //@line 6645 "tcc_bootstrap.c"
 var $109=$108|$107; //@line 6645 "tcc_bootstrap.c"
 HEAP16[(($103)>>1)]=$109; //@line 6645 "tcc_bootstrap.c"
 var $110=($106&65535); //@line 6645 "tcc_bootstrap.c"
 label=10;break; //@line 6645 "tcc_bootstrap.c"
 case 10: 
 var $112=$2; //@line 6646 "tcc_bootstrap.c"
 var $113=(($112+6)|0); //@line 6646 "tcc_bootstrap.c"
 var $114=$113; //@line 6646 "tcc_bootstrap.c"
 var $115=HEAP16[(($114)>>1)]; //@line 6646 "tcc_bootstrap.c"
 var $116=($115&65535)>>>5; //@line 6646 "tcc_bootstrap.c"
 var $117=$116&1; //@line 6646 "tcc_bootstrap.c"
 var $118=(($117<<16)>>16)!=0; //@line 6646 "tcc_bootstrap.c"
 if($118){label=11;break;}else{label=12;break;} //@line 6646 "tcc_bootstrap.c"
 case 11: 
 var $120=$1; //@line 6647 "tcc_bootstrap.c"
 var $121=(($120)|0); //@line 6647 "tcc_bootstrap.c"
 var $122=$121; //@line 6647 "tcc_bootstrap.c"
 var $123=HEAP16[(($122)>>1)]; //@line 6647 "tcc_bootstrap.c"
 var $124=$123&-33; //@line 6647 "tcc_bootstrap.c"
 var $125=$124|32; //@line 6647 "tcc_bootstrap.c"
 HEAP16[(($122)>>1)]=$125; //@line 6647 "tcc_bootstrap.c"
 label=12;break; //@line 6647 "tcc_bootstrap.c"
 case 12: 
 STACKTOP=sp;return; //@line 6648 "tcc_bootstrap.c"
  default: assert(0, "bad label: " + label);
 }

}


function _struct_find($v){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 $2=$v;
 var $3=$2; //@line 4307 "tcc_bootstrap.c"
 var $4=((($3)-(256))|0); //@line 4307 "tcc_bootstrap.c"
 $2=$4; //@line 4307 "tcc_bootstrap.c"
 var $5=$2; //@line 4308 "tcc_bootstrap.c"
 var $6=HEAP32[((10456)>>2)]; //@line 4308 "tcc_bootstrap.c"
 var $7=((($6)-(256))|0); //@line 4308 "tcc_bootstrap.c"
 var $8=($5>>>0)>=($7>>>0); //@line 4308 "tcc_bootstrap.c"
 if($8){label=2;break;}else{label=3;break;} //@line 4308 "tcc_bootstrap.c"
 case 2: 
 $1=0; //@line 4309 "tcc_bootstrap.c"
 label=4;break; //@line 4309 "tcc_bootstrap.c"
 case 3: 
 var $11=$2; //@line 4310 "tcc_bootstrap.c"
 var $12=HEAP32[((10496)>>2)]; //@line 4310 "tcc_bootstrap.c"
 var $13=(($12+($11<<2))|0); //@line 4310 "tcc_bootstrap.c"
 var $14=HEAP32[(($13)>>2)]; //@line 4310 "tcc_bootstrap.c"
 var $15=(($14+12)|0); //@line 4310 "tcc_bootstrap.c"
 var $16=HEAP32[(($15)>>2)]; //@line 4310 "tcc_bootstrap.c"
 $1=$16; //@line 4310 "tcc_bootstrap.c"
 label=4;break; //@line 4310 "tcc_bootstrap.c"
 case 4: 
 var $18=$1; //@line 4311 "tcc_bootstrap.c"
 STACKTOP=sp;return $18; //@line 4311 "tcc_bootstrap.c"
  default: assert(0, "bad label: " + label);
 }

}


function _struct_layout($type,$ad){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $size;
 var $align=sp;
 var $maxalign;
 var $offset;
 var $c;
 var $bit_pos;
 var $bit_size;
 var $packed;
 var $a;
 var $bt;
 var $prevbt;
 var $prev_bit_size;
 var $pcc;
 var $pragma_pack;
 var $f;
 var $a8;
 var $ofs;
 var $ass;
 var $v2;
 var $pps;
 var $s;
 var $px;
 var $cx;
 var $c0;
 var $t=(sp)+(8);
 $1=$type;
 $2=$ad;
 $pcc=0; //@line 6273 "tcc_bootstrap.c"
 var $3=HEAP32[((10488)>>2)]; //@line 6274 "tcc_bootstrap.c"
 var $4=(($3+668)|0); //@line 6274 "tcc_bootstrap.c"
 var $5=HEAP32[(($4)>>2)]; //@line 6274 "tcc_bootstrap.c"
 var $6=HEAP32[(($5)>>2)]; //@line 6274 "tcc_bootstrap.c"
 $pragma_pack=$6; //@line 6274 "tcc_bootstrap.c"
 $maxalign=1; //@line 6276 "tcc_bootstrap.c"
 $offset=0; //@line 6277 "tcc_bootstrap.c"
 $c=0; //@line 6278 "tcc_bootstrap.c"
 $bit_pos=0; //@line 6279 "tcc_bootstrap.c"
 $prevbt=7; //@line 6280 "tcc_bootstrap.c"
 $prev_bit_size=0; //@line 6281 "tcc_bootstrap.c"
 var $7=$1; //@line 6282 "tcc_bootstrap.c"
 var $8=(($7+4)|0); //@line 6282 "tcc_bootstrap.c"
 var $9=HEAP32[(($8)>>2)]; //@line 6282 "tcc_bootstrap.c"
 var $10=(($9+24)|0); //@line 6282 "tcc_bootstrap.c"
 var $11=$10; //@line 6282 "tcc_bootstrap.c"
 var $12=HEAP32[(($11)>>2)]; //@line 6282 "tcc_bootstrap.c"
 $f=$12; //@line 6282 "tcc_bootstrap.c"
 label=2;break; //@line 6282 "tcc_bootstrap.c"
 case 2: 
 var $14=$f; //@line 6282 "tcc_bootstrap.c"
 var $15=($14|0)!=0; //@line 6282 "tcc_bootstrap.c"
 if($15){label=3;break;}else{label=86;break;} //@line 6282 "tcc_bootstrap.c"
 case 3: 
 var $17=$f; //@line 6283 "tcc_bootstrap.c"
 var $18=(($17+16)|0); //@line 6283 "tcc_bootstrap.c"
 var $19=(($18)|0); //@line 6283 "tcc_bootstrap.c"
 var $20=HEAP32[(($19)>>2)]; //@line 6283 "tcc_bootstrap.c"
 var $21=$20&128; //@line 6283 "tcc_bootstrap.c"
 var $22=($21|0)!=0; //@line 6283 "tcc_bootstrap.c"
 if($22){label=4;break;}else{label=5;break;} //@line 6283 "tcc_bootstrap.c"
 case 4: 
 var $24=$f; //@line 6284 "tcc_bootstrap.c"
 var $25=(($24+16)|0); //@line 6284 "tcc_bootstrap.c"
 var $26=(($25)|0); //@line 6284 "tcc_bootstrap.c"
 var $27=HEAP32[(($26)>>2)]; //@line 6284 "tcc_bootstrap.c"
 var $28=_BIT_SIZE($27); //@line 6284 "tcc_bootstrap.c"
 $bit_size=$28; //@line 6284 "tcc_bootstrap.c"
 label=6;break; //@line 6284 "tcc_bootstrap.c"
 case 5: 
 $bit_size=-1; //@line 6286 "tcc_bootstrap.c"
 label=6;break;
 case 6: 
 var $31=$f; //@line 6287 "tcc_bootstrap.c"
 var $32=(($31+16)|0); //@line 6287 "tcc_bootstrap.c"
 var $33=_type_size($32,$align); //@line 6287 "tcc_bootstrap.c"
 $size=$33; //@line 6287 "tcc_bootstrap.c"
 var $34=$f; //@line 6288 "tcc_bootstrap.c"
 var $35=(($34+6)|0); //@line 6288 "tcc_bootstrap.c"
 var $36=$35; //@line 6288 "tcc_bootstrap.c"
 var $37=HEAP16[(($36)>>1)]; //@line 6288 "tcc_bootstrap.c"
 var $38=$37&31; //@line 6288 "tcc_bootstrap.c"
 var $39=($38&65535); //@line 6288 "tcc_bootstrap.c"
 var $40=($39|0)!=0; //@line 6288 "tcc_bootstrap.c"
 if($40){label=7;break;}else{label=8;break;} //@line 6288 "tcc_bootstrap.c"
 case 7: 
 var $42=$f; //@line 6288 "tcc_bootstrap.c"
 var $43=(($42+6)|0); //@line 6288 "tcc_bootstrap.c"
 var $44=$43; //@line 6288 "tcc_bootstrap.c"
 var $45=HEAP16[(($44)>>1)]; //@line 6288 "tcc_bootstrap.c"
 var $46=$45&31; //@line 6288 "tcc_bootstrap.c"
 var $47=($46&65535); //@line 6288 "tcc_bootstrap.c"
 var $48=((($47)-(1))|0); //@line 6288 "tcc_bootstrap.c"
 var $49=1<<$48; //@line 6288 "tcc_bootstrap.c"
 var $52=$49;label=9;break; //@line 6288 "tcc_bootstrap.c"
 case 8: 
 var $52=0;label=9;break; //@line 6288 "tcc_bootstrap.c"
 case 9: 
 var $52; //@line 6288 "tcc_bootstrap.c"
 $a=$52; //@line 6288 "tcc_bootstrap.c"
 $packed=0; //@line 6289 "tcc_bootstrap.c"
 var $53=$pcc; //@line 6290 "tcc_bootstrap.c"
 var $54=($53|0)!=0; //@line 6290 "tcc_bootstrap.c"
 if($54){label=10;break;}else{label=12;break;} //@line 6290 "tcc_bootstrap.c"
 case 10: 
 var $56=$bit_size; //@line 6290 "tcc_bootstrap.c"
 var $57=($56|0)==0; //@line 6290 "tcc_bootstrap.c"
 if($57){label=11;break;}else{label=12;break;} //@line 6290 "tcc_bootstrap.c"
 case 11: 
 label=24;break; //@line 6291 "tcc_bootstrap.c"
 case 12: 
 var $60=$pcc; //@line 6292 "tcc_bootstrap.c"
 var $61=($60|0)!=0; //@line 6292 "tcc_bootstrap.c"
 if($61){label=13;break;}else{label=16;break;} //@line 6292 "tcc_bootstrap.c"
 case 13: 
 var $63=$f; //@line 6292 "tcc_bootstrap.c"
 var $64=(($63+6)|0); //@line 6292 "tcc_bootstrap.c"
 var $65=$64; //@line 6292 "tcc_bootstrap.c"
 var $66=HEAP16[(($65)>>1)]; //@line 6292 "tcc_bootstrap.c"
 var $67=($66&65535)>>>5; //@line 6292 "tcc_bootstrap.c"
 var $68=$67&1; //@line 6292 "tcc_bootstrap.c"
 var $69=($68&65535); //@line 6292 "tcc_bootstrap.c"
 var $70=($69|0)!=0; //@line 6292 "tcc_bootstrap.c"
 if($70){label=15;break;}else{label=14;break;} //@line 6292 "tcc_bootstrap.c"
 case 14: 
 var $72=$2; //@line 6292 "tcc_bootstrap.c"
 var $73=(($72)|0); //@line 6292 "tcc_bootstrap.c"
 var $74=$73; //@line 6292 "tcc_bootstrap.c"
 var $75=HEAP16[(($74)>>1)]; //@line 6292 "tcc_bootstrap.c"
 var $76=($75&65535)>>>5; //@line 6292 "tcc_bootstrap.c"
 var $77=$76&1; //@line 6292 "tcc_bootstrap.c"
 var $78=($77&65535); //@line 6292 "tcc_bootstrap.c"
 var $79=($78|0)!=0; //@line 6292 "tcc_bootstrap.c"
 if($79){label=15;break;}else{label=16;break;} //@line 6292 "tcc_bootstrap.c"
 case 15: 
 $packed=1; //@line 6293 "tcc_bootstrap.c"
 HEAP32[(($align)>>2)]=1; //@line 6293 "tcc_bootstrap.c"
 label=16;break; //@line 6293 "tcc_bootstrap.c"
 case 16: 
 var $82=$pragma_pack; //@line 6294 "tcc_bootstrap.c"
 var $83=($82|0)!=0; //@line 6294 "tcc_bootstrap.c"
 if($83){label=17;break;}else{label=23;break;} //@line 6294 "tcc_bootstrap.c"
 case 17: 
 $packed=1; //@line 6295 "tcc_bootstrap.c"
 var $85=$pragma_pack; //@line 6296 "tcc_bootstrap.c"
 var $86=HEAP32[(($align)>>2)]; //@line 6296 "tcc_bootstrap.c"
 var $87=($85|0)<($86|0); //@line 6296 "tcc_bootstrap.c"
 if($87){label=18;break;}else{label=19;break;} //@line 6296 "tcc_bootstrap.c"
 case 18: 
 var $89=$pragma_pack; //@line 6297 "tcc_bootstrap.c"
 HEAP32[(($align)>>2)]=$89; //@line 6297 "tcc_bootstrap.c"
 label=19;break; //@line 6297 "tcc_bootstrap.c"
 case 19: 
 var $91=$pcc; //@line 6298 "tcc_bootstrap.c"
 var $92=($91|0)!=0; //@line 6298 "tcc_bootstrap.c"
 if($92){label=20;break;}else{label=22;break;} //@line 6298 "tcc_bootstrap.c"
 case 20: 
 var $94=$pragma_pack; //@line 6298 "tcc_bootstrap.c"
 var $95=$a; //@line 6298 "tcc_bootstrap.c"
 var $96=($94|0)<($95|0); //@line 6298 "tcc_bootstrap.c"
 if($96){label=21;break;}else{label=22;break;} //@line 6298 "tcc_bootstrap.c"
 case 21: 
 $a=0; //@line 6299 "tcc_bootstrap.c"
 label=22;break; //@line 6299 "tcc_bootstrap.c"
 case 22: 
 label=23;break; //@line 6300 "tcc_bootstrap.c"
 case 23: 
 label=24;break;
 case 24: 
 var $101=$a; //@line 6302 "tcc_bootstrap.c"
 var $102=($101|0)!=0; //@line 6302 "tcc_bootstrap.c"
 if($102){label=25;break;}else{label=26;break;} //@line 6302 "tcc_bootstrap.c"
 case 25: 
 var $104=$a; //@line 6303 "tcc_bootstrap.c"
 HEAP32[(($align)>>2)]=$104; //@line 6303 "tcc_bootstrap.c"
 label=26;break; //@line 6303 "tcc_bootstrap.c"
 case 26: 
 var $106=$1; //@line 6304 "tcc_bootstrap.c"
 var $107=(($106+4)|0); //@line 6304 "tcc_bootstrap.c"
 var $108=HEAP32[(($107)>>2)]; //@line 6304 "tcc_bootstrap.c"
 var $109=(($108+16)|0); //@line 6304 "tcc_bootstrap.c"
 var $110=(($109)|0); //@line 6304 "tcc_bootstrap.c"
 var $111=HEAP32[(($110)>>2)]; //@line 6304 "tcc_bootstrap.c"
 var $112=($111|0)==1048583; //@line 6304 "tcc_bootstrap.c"
 if($112){label=27;break;}else{label=33;break;} //@line 6304 "tcc_bootstrap.c"
 case 27: 
 var $114=$pcc; //@line 6305 "tcc_bootstrap.c"
 var $115=($114|0)!=0; //@line 6305 "tcc_bootstrap.c"
 if($115){label=28;break;}else{label=30;break;} //@line 6305 "tcc_bootstrap.c"
 case 28: 
 var $117=$bit_size; //@line 6305 "tcc_bootstrap.c"
 var $118=($117|0)>=0; //@line 6305 "tcc_bootstrap.c"
 if($118){label=29;break;}else{label=30;break;} //@line 6305 "tcc_bootstrap.c"
 case 29: 
 var $120=$bit_size; //@line 6306 "tcc_bootstrap.c"
 var $121=((($120)+(7))|0); //@line 6306 "tcc_bootstrap.c"
 var $122=$121>>3; //@line 6306 "tcc_bootstrap.c"
 $size=$122; //@line 6306 "tcc_bootstrap.c"
 label=30;break; //@line 6306 "tcc_bootstrap.c"
 case 30: 
 $offset=0; //@line 6307 "tcc_bootstrap.c"
 var $124=$size; //@line 6308 "tcc_bootstrap.c"
 var $125=$c; //@line 6308 "tcc_bootstrap.c"
 var $126=($124|0)>($125|0); //@line 6308 "tcc_bootstrap.c"
 if($126){label=31;break;}else{label=32;break;} //@line 6308 "tcc_bootstrap.c"
 case 31: 
 var $128=$size; //@line 6309 "tcc_bootstrap.c"
 $c=$128; //@line 6309 "tcc_bootstrap.c"
 label=32;break; //@line 6309 "tcc_bootstrap.c"
 case 32: 
 label=72;break; //@line 6310 "tcc_bootstrap.c"
 case 33: 
 var $131=$bit_size; //@line 6310 "tcc_bootstrap.c"
 var $132=($131|0)<0; //@line 6310 "tcc_bootstrap.c"
 if($132){label=34;break;}else{label=39;break;} //@line 6310 "tcc_bootstrap.c"
 case 34: 
 var $134=$pcc; //@line 6311 "tcc_bootstrap.c"
 var $135=($134|0)!=0; //@line 6311 "tcc_bootstrap.c"
 if($135){label=35;break;}else{label=36;break;} //@line 6311 "tcc_bootstrap.c"
 case 35: 
 var $137=$bit_pos; //@line 6312 "tcc_bootstrap.c"
 var $138=((($137)+(7))|0); //@line 6312 "tcc_bootstrap.c"
 var $139=$138>>3; //@line 6312 "tcc_bootstrap.c"
 var $140=$c; //@line 6312 "tcc_bootstrap.c"
 var $141=((($140)+($139))|0); //@line 6312 "tcc_bootstrap.c"
 $c=$141; //@line 6312 "tcc_bootstrap.c"
 label=36;break; //@line 6312 "tcc_bootstrap.c"
 case 36: 
 var $143=$c; //@line 6313 "tcc_bootstrap.c"
 var $144=HEAP32[(($align)>>2)]; //@line 6313 "tcc_bootstrap.c"
 var $145=((($143)+($144))|0); //@line 6313 "tcc_bootstrap.c"
 var $146=((($145)-(1))|0); //@line 6313 "tcc_bootstrap.c"
 var $147=HEAP32[(($align)>>2)]; //@line 6313 "tcc_bootstrap.c"
 var $148=(((-$147))|0); //@line 6313 "tcc_bootstrap.c"
 var $149=$146&$148; //@line 6313 "tcc_bootstrap.c"
 $c=$149; //@line 6313 "tcc_bootstrap.c"
 var $150=$c; //@line 6314 "tcc_bootstrap.c"
 $offset=$150; //@line 6314 "tcc_bootstrap.c"
 var $151=$size; //@line 6315 "tcc_bootstrap.c"
 var $152=($151|0)>0; //@line 6315 "tcc_bootstrap.c"
 if($152){label=37;break;}else{label=38;break;} //@line 6315 "tcc_bootstrap.c"
 case 37: 
 var $154=$size; //@line 6316 "tcc_bootstrap.c"
 var $155=$c; //@line 6316 "tcc_bootstrap.c"
 var $156=((($155)+($154))|0); //@line 6316 "tcc_bootstrap.c"
 $c=$156; //@line 6316 "tcc_bootstrap.c"
 label=38;break; //@line 6316 "tcc_bootstrap.c"
 case 38: 
 $bit_pos=0; //@line 6317 "tcc_bootstrap.c"
 $prevbt=7; //@line 6318 "tcc_bootstrap.c"
 $prev_bit_size=0; //@line 6319 "tcc_bootstrap.c"
 label=71;break; //@line 6320 "tcc_bootstrap.c"
 case 39: 
 var $159=$pcc; //@line 6321 "tcc_bootstrap.c"
 var $160=($159|0)!=0; //@line 6321 "tcc_bootstrap.c"
 if($160){label=40;break;}else{label=60;break;} //@line 6321 "tcc_bootstrap.c"
 case 40: 
 var $162=$bit_size; //@line 6322 "tcc_bootstrap.c"
 var $163=($162|0)==0; //@line 6322 "tcc_bootstrap.c"
 if($163){label=41;break;}else{label=43;break;} //@line 6322 "tcc_bootstrap.c"
 case 41: 
 label=42;break; //@line 6322 "tcc_bootstrap.c"
 case 42: 
 var $166=$c; //@line 6324 "tcc_bootstrap.c"
 var $167=$bit_pos; //@line 6324 "tcc_bootstrap.c"
 var $168=((($167)+(7))|0); //@line 6324 "tcc_bootstrap.c"
 var $169=$168>>3; //@line 6324 "tcc_bootstrap.c"
 var $170=((($166)+($169))|0); //@line 6324 "tcc_bootstrap.c"
 var $171=HEAP32[(($align)>>2)]; //@line 6324 "tcc_bootstrap.c"
 var $172=((($170)+($171))|0); //@line 6324 "tcc_bootstrap.c"
 var $173=((($172)-(1))|0); //@line 6324 "tcc_bootstrap.c"
 var $174=HEAP32[(($align)>>2)]; //@line 6324 "tcc_bootstrap.c"
 var $175=(((-$174))|0); //@line 6324 "tcc_bootstrap.c"
 var $176=$173&$175; //@line 6324 "tcc_bootstrap.c"
 $c=$176; //@line 6324 "tcc_bootstrap.c"
 $bit_pos=0; //@line 6325 "tcc_bootstrap.c"
 label=51;break; //@line 6326 "tcc_bootstrap.c"
 case 43: 
 var $178=$f; //@line 6326 "tcc_bootstrap.c"
 var $179=(($178+6)|0); //@line 6326 "tcc_bootstrap.c"
 var $180=$179; //@line 6326 "tcc_bootstrap.c"
 var $181=HEAP16[(($180)>>1)]; //@line 6326 "tcc_bootstrap.c"
 var $182=$181&31; //@line 6326 "tcc_bootstrap.c"
 var $183=(($182<<16)>>16)!=0; //@line 6326 "tcc_bootstrap.c"
 if($183){label=44;break;}else{label=45;break;} //@line 6326 "tcc_bootstrap.c"
 case 44: 
 label=42;break; //@line 6327 "tcc_bootstrap.c"
 case 45: 
 var $186=$packed; //@line 6328 "tcc_bootstrap.c"
 var $187=($186|0)!=0; //@line 6328 "tcc_bootstrap.c"
 if($187){label=49;break;}else{label=46;break;} //@line 6328 "tcc_bootstrap.c"
 case 46: 
 var $189=HEAP32[(($align)>>2)]; //@line 6329 "tcc_bootstrap.c"
 var $190=($189<<3); //@line 6329 "tcc_bootstrap.c"
 $a8=$190; //@line 6329 "tcc_bootstrap.c"
 var $191=$c; //@line 6330 "tcc_bootstrap.c"
 var $192=($191<<3); //@line 6330 "tcc_bootstrap.c"
 var $193=$bit_pos; //@line 6330 "tcc_bootstrap.c"
 var $194=((($192)+($193))|0); //@line 6330 "tcc_bootstrap.c"
 var $195=$a8; //@line 6330 "tcc_bootstrap.c"
 var $196=(((($194|0))%(($195|0)))&-1); //@line 6330 "tcc_bootstrap.c"
 var $197=$bit_size; //@line 6330 "tcc_bootstrap.c"
 var $198=((($196)+($197))|0); //@line 6330 "tcc_bootstrap.c"
 var $199=$a8; //@line 6330 "tcc_bootstrap.c"
 var $200=((($198)+($199))|0); //@line 6330 "tcc_bootstrap.c"
 var $201=((($200)-(1))|0); //@line 6330 "tcc_bootstrap.c"
 var $202=$a8; //@line 6330 "tcc_bootstrap.c"
 var $203=(((($201|0))/(($202|0)))&-1); //@line 6330 "tcc_bootstrap.c"
 $ofs=$203; //@line 6330 "tcc_bootstrap.c"
 var $204=$ofs; //@line 6331 "tcc_bootstrap.c"
 var $205=$size; //@line 6331 "tcc_bootstrap.c"
 var $206=HEAP32[(($align)>>2)]; //@line 6331 "tcc_bootstrap.c"
 var $207=(((($205|0))/(($206|0)))&-1); //@line 6331 "tcc_bootstrap.c"
 var $208=($204|0)>($207|0); //@line 6331 "tcc_bootstrap.c"
 if($208){label=47;break;}else{label=48;break;} //@line 6331 "tcc_bootstrap.c"
 case 47: 
 label=42;break; //@line 6332 "tcc_bootstrap.c"
 case 48: 
 label=49;break; //@line 6333 "tcc_bootstrap.c"
 case 49: 
 label=50;break;
 case 50: 
 label=51;break;
 case 51: 
 var $214=$size; //@line 6334 "tcc_bootstrap.c"
 var $215=($214|0)==8; //@line 6334 "tcc_bootstrap.c"
 if($215){label=52;break;}else{label=54;break;} //@line 6334 "tcc_bootstrap.c"
 case 52: 
 var $217=$bit_size; //@line 6334 "tcc_bootstrap.c"
 var $218=($217|0)<=32; //@line 6334 "tcc_bootstrap.c"
 if($218){label=53;break;}else{label=54;break;} //@line 6334 "tcc_bootstrap.c"
 case 53: 
 var $220=$f; //@line 6335 "tcc_bootstrap.c"
 var $221=(($220+16)|0); //@line 6335 "tcc_bootstrap.c"
 var $222=(($221)|0); //@line 6335 "tcc_bootstrap.c"
 var $223=HEAP32[(($222)>>2)]; //@line 6335 "tcc_bootstrap.c"
 var $224=$223&-16; //@line 6335 "tcc_bootstrap.c"
 var $225=$224|3; //@line 6335 "tcc_bootstrap.c"
 var $226=$f; //@line 6335 "tcc_bootstrap.c"
 var $227=(($226+16)|0); //@line 6335 "tcc_bootstrap.c"
 var $228=(($227)|0); //@line 6335 "tcc_bootstrap.c"
 HEAP32[(($228)>>2)]=$225; //@line 6335 "tcc_bootstrap.c"
 $size=4; //@line 6335 "tcc_bootstrap.c"
 label=54;break; //@line 6335 "tcc_bootstrap.c"
 case 54: 
 label=55;break; //@line 6336 "tcc_bootstrap.c"
 case 55: 
 var $231=$bit_pos; //@line 6336 "tcc_bootstrap.c"
 var $232=HEAP32[(($align)>>2)]; //@line 6336 "tcc_bootstrap.c"
 var $233=($232<<3); //@line 6336 "tcc_bootstrap.c"
 var $234=($231|0)>=($233|0); //@line 6336 "tcc_bootstrap.c"
 if($234){label=56;break;}else{label=57;break;} //@line 6336 "tcc_bootstrap.c"
 case 56: 
 var $236=HEAP32[(($align)>>2)]; //@line 6337 "tcc_bootstrap.c"
 var $237=$c; //@line 6337 "tcc_bootstrap.c"
 var $238=((($237)+($236))|0); //@line 6337 "tcc_bootstrap.c"
 $c=$238; //@line 6337 "tcc_bootstrap.c"
 var $239=HEAP32[(($align)>>2)]; //@line 6337 "tcc_bootstrap.c"
 var $240=($239<<3); //@line 6337 "tcc_bootstrap.c"
 var $241=$bit_pos; //@line 6337 "tcc_bootstrap.c"
 var $242=((($241)-($240))|0); //@line 6337 "tcc_bootstrap.c"
 $bit_pos=$242; //@line 6337 "tcc_bootstrap.c"
 label=55;break; //@line 6337 "tcc_bootstrap.c"
 case 57: 
 var $244=$c; //@line 6338 "tcc_bootstrap.c"
 $offset=$244; //@line 6338 "tcc_bootstrap.c"
 var $245=$f; //@line 6339 "tcc_bootstrap.c"
 var $246=(($245)|0); //@line 6339 "tcc_bootstrap.c"
 var $247=HEAP32[(($246)>>2)]; //@line 6339 "tcc_bootstrap.c"
 var $248=$247&268435456; //@line 6339 "tcc_bootstrap.c"
 var $249=($248|0)!=0; //@line 6339 "tcc_bootstrap.c"
 if($249){label=58;break;}else{label=59;break;} //@line 6339 "tcc_bootstrap.c"
 case 58: 
 HEAP32[(($align)>>2)]=1; //@line 6340 "tcc_bootstrap.c"
 label=59;break; //@line 6340 "tcc_bootstrap.c"
 case 59: 
 label=70;break; //@line 6341 "tcc_bootstrap.c"
 case 60: 
 var $253=$f; //@line 6342 "tcc_bootstrap.c"
 var $254=(($253+16)|0); //@line 6342 "tcc_bootstrap.c"
 var $255=(($254)|0); //@line 6342 "tcc_bootstrap.c"
 var $256=HEAP32[(($255)>>2)]; //@line 6342 "tcc_bootstrap.c"
 var $257=$256&15; //@line 6342 "tcc_bootstrap.c"
 $bt=$257; //@line 6342 "tcc_bootstrap.c"
 var $258=$bit_pos; //@line 6343 "tcc_bootstrap.c"
 var $259=$bit_size; //@line 6343 "tcc_bootstrap.c"
 var $260=((($258)+($259))|0); //@line 6343 "tcc_bootstrap.c"
 var $261=$size; //@line 6343 "tcc_bootstrap.c"
 var $262=($261<<3); //@line 6343 "tcc_bootstrap.c"
 var $263=($260|0)>($262|0); //@line 6343 "tcc_bootstrap.c"
 if($263){label=62;break;}else{label=61;break;} //@line 6343 "tcc_bootstrap.c"
 case 61: 
 var $265=$bit_size; //@line 6343 "tcc_bootstrap.c"
 var $266=($265|0)>0; //@line 6343 "tcc_bootstrap.c"
 var $267=($266&1); //@line 6343 "tcc_bootstrap.c"
 var $268=$bt; //@line 6343 "tcc_bootstrap.c"
 var $269=$prevbt; //@line 6343 "tcc_bootstrap.c"
 var $270=($268|0)!=($269|0); //@line 6343 "tcc_bootstrap.c"
 var $271=($270&1); //@line 6343 "tcc_bootstrap.c"
 var $272=($267|0)==($271|0); //@line 6343 "tcc_bootstrap.c"
 if($272){label=62;break;}else{label=66;break;} //@line 6343 "tcc_bootstrap.c"
 case 62: 
 var $274=$c; //@line 6346 "tcc_bootstrap.c"
 var $275=HEAP32[(($align)>>2)]; //@line 6346 "tcc_bootstrap.c"
 var $276=((($274)+($275))|0); //@line 6346 "tcc_bootstrap.c"
 var $277=((($276)-(1))|0); //@line 6346 "tcc_bootstrap.c"
 var $278=HEAP32[(($align)>>2)]; //@line 6346 "tcc_bootstrap.c"
 var $279=(((-$278))|0); //@line 6346 "tcc_bootstrap.c"
 var $280=$277&$279; //@line 6346 "tcc_bootstrap.c"
 $c=$280; //@line 6346 "tcc_bootstrap.c"
 var $281=$c; //@line 6347 "tcc_bootstrap.c"
 $offset=$281; //@line 6347 "tcc_bootstrap.c"
 $bit_pos=0; //@line 6348 "tcc_bootstrap.c"
 var $282=$bit_size; //@line 6349 "tcc_bootstrap.c"
 var $283=($282|0)!=0; //@line 6349 "tcc_bootstrap.c"
 if($283){label=64;break;}else{label=63;break;} //@line 6349 "tcc_bootstrap.c"
 case 63: 
 var $285=$prev_bit_size; //@line 6349 "tcc_bootstrap.c"
 var $286=($285|0)!=0; //@line 6349 "tcc_bootstrap.c"
 if($286){label=64;break;}else{label=65;break;} //@line 6349 "tcc_bootstrap.c"
 case 64: 
 var $288=$size; //@line 6350 "tcc_bootstrap.c"
 var $289=$c; //@line 6350 "tcc_bootstrap.c"
 var $290=((($289)+($288))|0); //@line 6350 "tcc_bootstrap.c"
 $c=$290; //@line 6350 "tcc_bootstrap.c"
 label=65;break; //@line 6350 "tcc_bootstrap.c"
 case 65: 
 label=66;break; //@line 6351 "tcc_bootstrap.c"
 case 66: 
 var $293=$bit_size; //@line 6352 "tcc_bootstrap.c"
 var $294=($293|0)==0; //@line 6352 "tcc_bootstrap.c"
 if($294){label=67;break;}else{label=69;break;} //@line 6352 "tcc_bootstrap.c"
 case 67: 
 var $296=$prevbt; //@line 6352 "tcc_bootstrap.c"
 var $297=$bt; //@line 6352 "tcc_bootstrap.c"
 var $298=($296|0)!=($297|0); //@line 6352 "tcc_bootstrap.c"
 if($298){label=68;break;}else{label=69;break;} //@line 6352 "tcc_bootstrap.c"
 case 68: 
 HEAP32[(($align)>>2)]=1; //@line 6353 "tcc_bootstrap.c"
 label=69;break; //@line 6353 "tcc_bootstrap.c"
 case 69: 
 var $301=$bt; //@line 6354 "tcc_bootstrap.c"
 $prevbt=$301; //@line 6354 "tcc_bootstrap.c"
 var $302=$bit_size; //@line 6355 "tcc_bootstrap.c"
 $prev_bit_size=$302; //@line 6355 "tcc_bootstrap.c"
 label=70;break;
 case 70: 
 var $304=$f; //@line 6357 "tcc_bootstrap.c"
 var $305=(($304+16)|0); //@line 6357 "tcc_bootstrap.c"
 var $306=(($305)|0); //@line 6357 "tcc_bootstrap.c"
 var $307=HEAP32[(($306)>>2)]; //@line 6357 "tcc_bootstrap.c"
 var $308=$307&-66060289; //@line 6357 "tcc_bootstrap.c"
 var $309=$bit_pos; //@line 6357 "tcc_bootstrap.c"
 var $310=$309<<20; //@line 6357 "tcc_bootstrap.c"
 var $311=$308|$310; //@line 6357 "tcc_bootstrap.c"
 var $312=$f; //@line 6357 "tcc_bootstrap.c"
 var $313=(($312+16)|0); //@line 6357 "tcc_bootstrap.c"
 var $314=(($313)|0); //@line 6357 "tcc_bootstrap.c"
 HEAP32[(($314)>>2)]=$311; //@line 6357 "tcc_bootstrap.c"
 var $315=$bit_size; //@line 6359 "tcc_bootstrap.c"
 var $316=$bit_pos; //@line 6359 "tcc_bootstrap.c"
 var $317=((($316)+($315))|0); //@line 6359 "tcc_bootstrap.c"
 $bit_pos=$317; //@line 6359 "tcc_bootstrap.c"
 label=71;break;
 case 71: 
 label=72;break;
 case 72: 
 var $320=HEAP32[(($align)>>2)]; //@line 6361 "tcc_bootstrap.c"
 var $321=$maxalign; //@line 6361 "tcc_bootstrap.c"
 var $322=($320|0)>($321|0); //@line 6361 "tcc_bootstrap.c"
 if($322){label=73;break;}else{label=74;break;} //@line 6361 "tcc_bootstrap.c"
 case 73: 
 var $324=HEAP32[(($align)>>2)]; //@line 6362 "tcc_bootstrap.c"
 $maxalign=$324; //@line 6362 "tcc_bootstrap.c"
 label=74;break; //@line 6362 "tcc_bootstrap.c"
 case 74: 
 var $326=$f; //@line 6363 "tcc_bootstrap.c"
 var $327=(($326)|0); //@line 6363 "tcc_bootstrap.c"
 var $328=HEAP32[(($327)>>2)]; //@line 6363 "tcc_bootstrap.c"
 var $329=$328&268435456; //@line 6363 "tcc_bootstrap.c"
 var $330=($329|0)!=0; //@line 6363 "tcc_bootstrap.c"
 if($330){label=75;break;}else{label=83;break;} //@line 6363 "tcc_bootstrap.c"
 case 75: 
 var $332=$f; //@line 6363 "tcc_bootstrap.c"
 var $333=(($332+16)|0); //@line 6363 "tcc_bootstrap.c"
 var $334=(($333)|0); //@line 6363 "tcc_bootstrap.c"
 var $335=HEAP32[(($334)>>2)]; //@line 6363 "tcc_bootstrap.c"
 var $336=$335&15; //@line 6363 "tcc_bootstrap.c"
 var $337=($336|0)==7; //@line 6363 "tcc_bootstrap.c"
 if($337){label=76;break;}else{label=83;break;} //@line 6363 "tcc_bootstrap.c"
 case 76: 
 var $339=$f; //@line 6365 "tcc_bootstrap.c"
 var $340=(($339+16)|0); //@line 6365 "tcc_bootstrap.c"
 var $341=(($340+4)|0); //@line 6365 "tcc_bootstrap.c"
 var $342=HEAP32[(($341)>>2)]; //@line 6365 "tcc_bootstrap.c"
 var $343=(($342)|0); //@line 6365 "tcc_bootstrap.c"
 var $344=HEAP32[(($343)>>2)]; //@line 6365 "tcc_bootstrap.c"
 $v2=$344; //@line 6365 "tcc_bootstrap.c"
 var $345=$v2; //@line 6366 "tcc_bootstrap.c"
 var $346=$345&536870912; //@line 6366 "tcc_bootstrap.c"
 var $347=($346|0)!=0; //@line 6366 "tcc_bootstrap.c"
 if($347){label=82;break;}else{label=77;break;} //@line 6366 "tcc_bootstrap.c"
 case 77: 
 var $349=$v2; //@line 6366 "tcc_bootstrap.c"
 var $350=$349&-1073741825; //@line 6366 "tcc_bootstrap.c"
 var $351=($350|0)<268435456; //@line 6366 "tcc_bootstrap.c"
 if($351){label=78;break;}else{label=82;break;} //@line 6366 "tcc_bootstrap.c"
 case 78: 
 var $353=$f; //@line 6369 "tcc_bootstrap.c"
 var $354=(($353+16)|0); //@line 6369 "tcc_bootstrap.c"
 var $355=(($354+4)|0); //@line 6369 "tcc_bootstrap.c"
 var $356=HEAP32[(($355)>>2)]; //@line 6369 "tcc_bootstrap.c"
 $ass=$356; //@line 6369 "tcc_bootstrap.c"
 var $357=HEAP32[((76752)>>2)]; //@line 6370 "tcc_bootstrap.c"
 var $358=((($357)+(1))|0); //@line 6370 "tcc_bootstrap.c"
 HEAP32[((76752)>>2)]=$358; //@line 6370 "tcc_bootstrap.c"
 var $359=$357|536870912; //@line 6370 "tcc_bootstrap.c"
 var $360=$f; //@line 6370 "tcc_bootstrap.c"
 var $361=(($360+16)|0); //@line 6370 "tcc_bootstrap.c"
 var $362=(($361+4)|0); //@line 6370 "tcc_bootstrap.c"
 var $363=HEAP32[(($362)>>2)]; //@line 6370 "tcc_bootstrap.c"
 var $364=(($363+16)|0); //@line 6370 "tcc_bootstrap.c"
 var $365=$f; //@line 6370 "tcc_bootstrap.c"
 var $366=(($365+16)|0); //@line 6370 "tcc_bootstrap.c"
 var $367=(($366+4)|0); //@line 6370 "tcc_bootstrap.c"
 var $368=HEAP32[(($367)>>2)]; //@line 6370 "tcc_bootstrap.c"
 var $369=(($368+8)|0); //@line 6370 "tcc_bootstrap.c"
 var $370=$369; //@line 6370 "tcc_bootstrap.c"
 var $371=(($370)|0); //@line 6370 "tcc_bootstrap.c"
 var $372=HEAP32[(($371)>>2)]; //@line 6370 "tcc_bootstrap.c"
 var $373=_sym_push($359,$364,0,$372); //@line 6370 "tcc_bootstrap.c"
 var $374=$f; //@line 6370 "tcc_bootstrap.c"
 var $375=(($374+16)|0); //@line 6370 "tcc_bootstrap.c"
 var $376=(($375+4)|0); //@line 6370 "tcc_bootstrap.c"
 HEAP32[(($376)>>2)]=$373; //@line 6370 "tcc_bootstrap.c"
 var $377=$f; //@line 6373 "tcc_bootstrap.c"
 var $378=(($377+16)|0); //@line 6373 "tcc_bootstrap.c"
 var $379=(($378+4)|0); //@line 6373 "tcc_bootstrap.c"
 var $380=HEAP32[(($379)>>2)]; //@line 6373 "tcc_bootstrap.c"
 var $381=(($380+24)|0); //@line 6373 "tcc_bootstrap.c"
 var $382=$381; //@line 6373 "tcc_bootstrap.c"
 $pps=$382; //@line 6373 "tcc_bootstrap.c"
 label=79;break; //@line 6374 "tcc_bootstrap.c"
 case 79: 
 var $384=$ass; //@line 6374 "tcc_bootstrap.c"
 var $385=(($384+24)|0); //@line 6374 "tcc_bootstrap.c"
 var $386=$385; //@line 6374 "tcc_bootstrap.c"
 var $387=HEAP32[(($386)>>2)]; //@line 6374 "tcc_bootstrap.c"
 $ass=$387; //@line 6374 "tcc_bootstrap.c"
 var $388=($387|0)!=0; //@line 6374 "tcc_bootstrap.c"
 if($388){label=80;break;}else{label=81;break;} //@line 6374 "tcc_bootstrap.c"
 case 80: 
 var $390=$ass; //@line 6375 "tcc_bootstrap.c"
 var $391=(($390)|0); //@line 6375 "tcc_bootstrap.c"
 var $392=HEAP32[(($391)>>2)]; //@line 6375 "tcc_bootstrap.c"
 var $393=$ass; //@line 6375 "tcc_bootstrap.c"
 var $394=(($393+16)|0); //@line 6375 "tcc_bootstrap.c"
 var $395=$ass; //@line 6375 "tcc_bootstrap.c"
 var $396=(($395+8)|0); //@line 6375 "tcc_bootstrap.c"
 var $397=$396; //@line 6375 "tcc_bootstrap.c"
 var $398=(($397)|0); //@line 6375 "tcc_bootstrap.c"
 var $399=HEAP32[(($398)>>2)]; //@line 6375 "tcc_bootstrap.c"
 var $400=_sym_push($392,$394,0,$399); //@line 6375 "tcc_bootstrap.c"
 var $401=$pps; //@line 6375 "tcc_bootstrap.c"
 HEAP32[(($401)>>2)]=$400; //@line 6375 "tcc_bootstrap.c"
 var $402=$pps; //@line 6376 "tcc_bootstrap.c"
 var $403=HEAP32[(($402)>>2)]; //@line 6376 "tcc_bootstrap.c"
 var $404=(($403+24)|0); //@line 6376 "tcc_bootstrap.c"
 var $405=$404; //@line 6376 "tcc_bootstrap.c"
 $pps=$405; //@line 6376 "tcc_bootstrap.c"
 label=79;break; //@line 6377 "tcc_bootstrap.c"
 case 81: 
 var $407=$pps; //@line 6378 "tcc_bootstrap.c"
 HEAP32[(($407)>>2)]=0; //@line 6378 "tcc_bootstrap.c"
 label=82;break; //@line 6379 "tcc_bootstrap.c"
 case 82: 
 var $409=$f; //@line 6380 "tcc_bootstrap.c"
 var $410=(($409+16)|0); //@line 6380 "tcc_bootstrap.c"
 var $411=(($410+4)|0); //@line 6380 "tcc_bootstrap.c"
 var $412=HEAP32[(($411)>>2)]; //@line 6380 "tcc_bootstrap.c"
 var $413=$offset; //@line 6380 "tcc_bootstrap.c"
 _struct_add_offset($412,$413); //@line 6380 "tcc_bootstrap.c"
 var $414=$f; //@line 6381 "tcc_bootstrap.c"
 var $415=(($414+8)|0); //@line 6381 "tcc_bootstrap.c"
 var $416=$415; //@line 6381 "tcc_bootstrap.c"
 var $417=(($416)|0); //@line 6381 "tcc_bootstrap.c"
 HEAP32[(($417)>>2)]=0; //@line 6381 "tcc_bootstrap.c"
 label=84;break; //@line 6382 "tcc_bootstrap.c"
 case 83: 
 var $419=$offset; //@line 6383 "tcc_bootstrap.c"
 var $420=$f; //@line 6383 "tcc_bootstrap.c"
 var $421=(($420+8)|0); //@line 6383 "tcc_bootstrap.c"
 var $422=$421; //@line 6383 "tcc_bootstrap.c"
 var $423=(($422)|0); //@line 6383 "tcc_bootstrap.c"
 HEAP32[(($423)>>2)]=$419; //@line 6383 "tcc_bootstrap.c"
 label=84;break;
 case 84: 
 var $425=$f; //@line 6385 "tcc_bootstrap.c"
 var $426=(($425+4)|0); //@line 6385 "tcc_bootstrap.c"
 HEAP16[(($426)>>1)]=0; //@line 6385 "tcc_bootstrap.c"
 label=85;break; //@line 6386 "tcc_bootstrap.c"
 case 85: 
 var $428=$f; //@line 6282 "tcc_bootstrap.c"
 var $429=(($428+24)|0); //@line 6282 "tcc_bootstrap.c"
 var $430=$429; //@line 6282 "tcc_bootstrap.c"
 var $431=HEAP32[(($430)>>2)]; //@line 6282 "tcc_bootstrap.c"
 $f=$431; //@line 6282 "tcc_bootstrap.c"
 label=2;break; //@line 6282 "tcc_bootstrap.c"
 case 86: 
 var $433=$pcc; //@line 6387 "tcc_bootstrap.c"
 var $434=($433|0)!=0; //@line 6387 "tcc_bootstrap.c"
 if($434){label=87;break;}else{label=88;break;} //@line 6387 "tcc_bootstrap.c"
 case 87: 
 var $436=$bit_pos; //@line 6388 "tcc_bootstrap.c"
 var $437=((($436)+(7))|0); //@line 6388 "tcc_bootstrap.c"
 var $438=$437>>3; //@line 6388 "tcc_bootstrap.c"
 var $439=$c; //@line 6388 "tcc_bootstrap.c"
 var $440=((($439)+($438))|0); //@line 6388 "tcc_bootstrap.c"
 $c=$440; //@line 6388 "tcc_bootstrap.c"
 label=88;break; //@line 6388 "tcc_bootstrap.c"
 case 88: 
 var $442=$2; //@line 6389 "tcc_bootstrap.c"
 var $443=(($442)|0); //@line 6389 "tcc_bootstrap.c"
 var $444=$443; //@line 6389 "tcc_bootstrap.c"
 var $445=HEAP16[(($444)>>1)]; //@line 6389 "tcc_bootstrap.c"
 var $446=$445&31; //@line 6389 "tcc_bootstrap.c"
 var $447=($446&65535); //@line 6389 "tcc_bootstrap.c"
 var $448=($447|0)!=0; //@line 6389 "tcc_bootstrap.c"
 if($448){label=89;break;}else{label=90;break;} //@line 6389 "tcc_bootstrap.c"
 case 89: 
 var $450=$2; //@line 6389 "tcc_bootstrap.c"
 var $451=(($450)|0); //@line 6389 "tcc_bootstrap.c"
 var $452=$451; //@line 6389 "tcc_bootstrap.c"
 var $453=HEAP16[(($452)>>1)]; //@line 6389 "tcc_bootstrap.c"
 var $454=$453&31; //@line 6389 "tcc_bootstrap.c"
 var $455=($454&65535); //@line 6389 "tcc_bootstrap.c"
 var $456=((($455)-(1))|0); //@line 6389 "tcc_bootstrap.c"
 var $457=1<<$456; //@line 6389 "tcc_bootstrap.c"
 var $460=$457;label=91;break; //@line 6389 "tcc_bootstrap.c"
 case 90: 
 var $460=1;label=91;break; //@line 6389 "tcc_bootstrap.c"
 case 91: 
 var $460; //@line 6389 "tcc_bootstrap.c"
 $bt=$460; //@line 6389 "tcc_bootstrap.c"
 $a=$460; //@line 6389 "tcc_bootstrap.c"
 var $461=$a; //@line 6390 "tcc_bootstrap.c"
 var $462=$maxalign; //@line 6390 "tcc_bootstrap.c"
 var $463=($461|0)<($462|0); //@line 6390 "tcc_bootstrap.c"
 if($463){label=92;break;}else{label=93;break;} //@line 6390 "tcc_bootstrap.c"
 case 92: 
 var $465=$maxalign; //@line 6391 "tcc_bootstrap.c"
 $a=$465; //@line 6391 "tcc_bootstrap.c"
 label=93;break; //@line 6391 "tcc_bootstrap.c"
 case 93: 
 var $467=$a; //@line 6392 "tcc_bootstrap.c"
 var $468=(($467)&65535); //@line 6392 "tcc_bootstrap.c"
 var $469=$1; //@line 6392 "tcc_bootstrap.c"
 var $470=(($469+4)|0); //@line 6392 "tcc_bootstrap.c"
 var $471=HEAP32[(($470)>>2)]; //@line 6392 "tcc_bootstrap.c"
 var $472=(($471+4)|0); //@line 6392 "tcc_bootstrap.c"
 HEAP16[(($472)>>1)]=$468; //@line 6392 "tcc_bootstrap.c"
 var $473=$pragma_pack; //@line 6393 "tcc_bootstrap.c"
 var $474=($473|0)!=0; //@line 6393 "tcc_bootstrap.c"
 if($474){label=94;break;}else{label=99;break;} //@line 6393 "tcc_bootstrap.c"
 case 94: 
 var $476=$pragma_pack; //@line 6393 "tcc_bootstrap.c"
 var $477=$maxalign; //@line 6393 "tcc_bootstrap.c"
 var $478=($476|0)<($477|0); //@line 6393 "tcc_bootstrap.c"
 if($478){label=95;break;}else{label=99;break;} //@line 6393 "tcc_bootstrap.c"
 case 95: 
 var $480=$pcc; //@line 6393 "tcc_bootstrap.c"
 var $481=0==($480|0); //@line 6393 "tcc_bootstrap.c"
 if($481){label=96;break;}else{label=99;break;} //@line 6393 "tcc_bootstrap.c"
 case 96: 
 var $483=$pragma_pack; //@line 6394 "tcc_bootstrap.c"
 $a=$483; //@line 6394 "tcc_bootstrap.c"
 var $484=$a; //@line 6395 "tcc_bootstrap.c"
 var $485=$bt; //@line 6395 "tcc_bootstrap.c"
 var $486=($484|0)<($485|0); //@line 6395 "tcc_bootstrap.c"
 if($486){label=97;break;}else{label=98;break;} //@line 6395 "tcc_bootstrap.c"
 case 97: 
 var $488=$bt; //@line 6396 "tcc_bootstrap.c"
 $a=$488; //@line 6396 "tcc_bootstrap.c"
 label=98;break; //@line 6396 "tcc_bootstrap.c"
 case 98: 
 label=99;break; //@line 6397 "tcc_bootstrap.c"
 case 99: 
 var $491=$c; //@line 6398 "tcc_bootstrap.c"
 var $492=$a; //@line 6398 "tcc_bootstrap.c"
 var $493=((($491)+($492))|0); //@line 6398 "tcc_bootstrap.c"
 var $494=((($493)-(1))|0); //@line 6398 "tcc_bootstrap.c"
 var $495=$a; //@line 6398 "tcc_bootstrap.c"
 var $496=(((-$495))|0); //@line 6398 "tcc_bootstrap.c"
 var $497=$494&$496; //@line 6398 "tcc_bootstrap.c"
 $c=$497; //@line 6398 "tcc_bootstrap.c"
 var $498=$c; //@line 6399 "tcc_bootstrap.c"
 var $499=$1; //@line 6399 "tcc_bootstrap.c"
 var $500=(($499+4)|0); //@line 6399 "tcc_bootstrap.c"
 var $501=HEAP32[(($500)>>2)]; //@line 6399 "tcc_bootstrap.c"
 var $502=(($501+8)|0); //@line 6399 "tcc_bootstrap.c"
 var $503=$502; //@line 6399 "tcc_bootstrap.c"
 var $504=(($503)|0); //@line 6399 "tcc_bootstrap.c"
 HEAP32[(($504)>>2)]=$498; //@line 6399 "tcc_bootstrap.c"
 var $505=$1; //@line 6400 "tcc_bootstrap.c"
 var $506=(($505+4)|0); //@line 6400 "tcc_bootstrap.c"
 var $507=HEAP32[(($506)>>2)]; //@line 6400 "tcc_bootstrap.c"
 var $508=(($507+24)|0); //@line 6400 "tcc_bootstrap.c"
 var $509=$508; //@line 6400 "tcc_bootstrap.c"
 var $510=HEAP32[(($509)>>2)]; //@line 6400 "tcc_bootstrap.c"
 $f=$510; //@line 6400 "tcc_bootstrap.c"
 label=100;break; //@line 6400 "tcc_bootstrap.c"
 case 100: 
 var $512=$f; //@line 6400 "tcc_bootstrap.c"
 var $513=($512|0)!=0; //@line 6400 "tcc_bootstrap.c"
 if($513){label=101;break;}else{label=129;break;} //@line 6400 "tcc_bootstrap.c"
 case 101: 
 var $515=$f; //@line 6403 "tcc_bootstrap.c"
 var $516=(($515+16)|0); //@line 6403 "tcc_bootstrap.c"
 var $517=(($516)|0); //@line 6403 "tcc_bootstrap.c"
 var $518=HEAP32[(($517)>>2)]; //@line 6403 "tcc_bootstrap.c"
 var $519=$518&128; //@line 6403 "tcc_bootstrap.c"
 var $520=0==($519|0); //@line 6403 "tcc_bootstrap.c"
 if($520){label=102;break;}else{label=103;break;} //@line 6403 "tcc_bootstrap.c"
 case 102: 
 label=128;break; //@line 6404 "tcc_bootstrap.c"
 case 103: 
 var $523=$f; //@line 6405 "tcc_bootstrap.c"
 var $524=$f; //@line 6405 "tcc_bootstrap.c"
 var $525=(($524+16)|0); //@line 6405 "tcc_bootstrap.c"
 var $526=(($525+4)|0); //@line 6405 "tcc_bootstrap.c"
 HEAP32[(($526)>>2)]=$523; //@line 6405 "tcc_bootstrap.c"
 var $527=$f; //@line 6406 "tcc_bootstrap.c"
 var $528=(($527+8)|0); //@line 6406 "tcc_bootstrap.c"
 var $529=$528; //@line 6406 "tcc_bootstrap.c"
 var $530=(($529+4)|0); //@line 6406 "tcc_bootstrap.c"
 var $531=$530; //@line 6406 "tcc_bootstrap.c"
 HEAP32[(($531)>>2)]=-1; //@line 6406 "tcc_bootstrap.c"
 var $532=$f; //@line 6407 "tcc_bootstrap.c"
 var $533=(($532+16)|0); //@line 6407 "tcc_bootstrap.c"
 var $534=(($533)|0); //@line 6407 "tcc_bootstrap.c"
 var $535=HEAP32[(($534)>>2)]; //@line 6407 "tcc_bootstrap.c"
 var $536=_BIT_SIZE($535); //@line 6407 "tcc_bootstrap.c"
 $bit_size=$536; //@line 6407 "tcc_bootstrap.c"
 var $537=$bit_size; //@line 6408 "tcc_bootstrap.c"
 var $538=($537|0)==0; //@line 6408 "tcc_bootstrap.c"
 if($538){label=104;break;}else{label=105;break;} //@line 6408 "tcc_bootstrap.c"
 case 104: 
 label=128;break; //@line 6409 "tcc_bootstrap.c"
 case 105: 
 var $541=$f; //@line 6410 "tcc_bootstrap.c"
 var $542=(($541+16)|0); //@line 6410 "tcc_bootstrap.c"
 var $543=(($542)|0); //@line 6410 "tcc_bootstrap.c"
 var $544=HEAP32[(($543)>>2)]; //@line 6410 "tcc_bootstrap.c"
 var $545=_BIT_POS($544); //@line 6410 "tcc_bootstrap.c"
 $bit_pos=$545; //@line 6410 "tcc_bootstrap.c"
 var $546=$f; //@line 6411 "tcc_bootstrap.c"
 var $547=(($546+16)|0); //@line 6411 "tcc_bootstrap.c"
 var $548=_type_size($547,$align); //@line 6411 "tcc_bootstrap.c"
 $size=$548; //@line 6411 "tcc_bootstrap.c"
 var $549=$bit_pos; //@line 6412 "tcc_bootstrap.c"
 var $550=$bit_size; //@line 6412 "tcc_bootstrap.c"
 var $551=((($549)+($550))|0); //@line 6412 "tcc_bootstrap.c"
 var $552=$size; //@line 6412 "tcc_bootstrap.c"
 var $553=($552<<3); //@line 6412 "tcc_bootstrap.c"
 var $554=($551|0)<=($553|0); //@line 6412 "tcc_bootstrap.c"
 if($554){label=106;break;}else{label=108;break;} //@line 6412 "tcc_bootstrap.c"
 case 106: 
 var $556=$f; //@line 6412 "tcc_bootstrap.c"
 var $557=(($556+8)|0); //@line 6412 "tcc_bootstrap.c"
 var $558=$557; //@line 6412 "tcc_bootstrap.c"
 var $559=(($558)|0); //@line 6412 "tcc_bootstrap.c"
 var $560=HEAP32[(($559)>>2)]; //@line 6412 "tcc_bootstrap.c"
 var $561=$size; //@line 6412 "tcc_bootstrap.c"
 var $562=((($560)+($561))|0); //@line 6412 "tcc_bootstrap.c"
 var $563=$c; //@line 6412 "tcc_bootstrap.c"
 var $564=($562|0)<=($563|0); //@line 6412 "tcc_bootstrap.c"
 if($564){label=107;break;}else{label=108;break;} //@line 6412 "tcc_bootstrap.c"
 case 107: 
 label=128;break; //@line 6413 "tcc_bootstrap.c"
 case 108: 
 $c0=-1; //@line 6414 "tcc_bootstrap.c"
 HEAP32[(($align)>>2)]=1; //@line 6414 "tcc_bootstrap.c"
 $s=1; //@line 6414 "tcc_bootstrap.c"
 label=109;break; //@line 6415 "tcc_bootstrap.c"
 case 109: 
 var $568=$f; //@line 6416 "tcc_bootstrap.c"
 var $569=(($568+8)|0); //@line 6416 "tcc_bootstrap.c"
 var $570=$569; //@line 6416 "tcc_bootstrap.c"
 var $571=(($570)|0); //@line 6416 "tcc_bootstrap.c"
 var $572=HEAP32[(($571)>>2)]; //@line 6416 "tcc_bootstrap.c"
 var $573=($572<<3); //@line 6416 "tcc_bootstrap.c"
 var $574=$bit_pos; //@line 6416 "tcc_bootstrap.c"
 var $575=((($573)+($574))|0); //@line 6416 "tcc_bootstrap.c"
 $px=$575; //@line 6416 "tcc_bootstrap.c"
 var $576=$px; //@line 6417 "tcc_bootstrap.c"
 var $577=$576>>3; //@line 6417 "tcc_bootstrap.c"
 var $578=HEAP32[(($align)>>2)]; //@line 6417 "tcc_bootstrap.c"
 var $579=(((-$578))|0); //@line 6417 "tcc_bootstrap.c"
 var $580=$577&$579; //@line 6417 "tcc_bootstrap.c"
 $cx=$580; //@line 6417 "tcc_bootstrap.c"
 var $581=$px; //@line 6418 "tcc_bootstrap.c"
 var $582=$cx; //@line 6418 "tcc_bootstrap.c"
 var $583=$582<<3; //@line 6418 "tcc_bootstrap.c"
 var $584=((($581)-($583))|0); //@line 6418 "tcc_bootstrap.c"
 $px=$584; //@line 6418 "tcc_bootstrap.c"
 var $585=$c0; //@line 6419 "tcc_bootstrap.c"
 var $586=$cx; //@line 6419 "tcc_bootstrap.c"
 var $587=($585|0)==($586|0); //@line 6419 "tcc_bootstrap.c"
 if($587){label=110;break;}else{label=111;break;} //@line 6419 "tcc_bootstrap.c"
 case 110: 
 label=121;break; //@line 6420 "tcc_bootstrap.c"
 case 111: 
 var $590=$px; //@line 6421 "tcc_bootstrap.c"
 var $591=$bit_size; //@line 6421 "tcc_bootstrap.c"
 var $592=((($590)+($591))|0); //@line 6421 "tcc_bootstrap.c"
 var $593=((($592)+(7))|0); //@line 6421 "tcc_bootstrap.c"
 var $594=$593>>3; //@line 6421 "tcc_bootstrap.c"
 $s=$594; //@line 6421 "tcc_bootstrap.c"
 var $595=$s; //@line 6422 "tcc_bootstrap.c"
 var $596=($595|0)>4; //@line 6422 "tcc_bootstrap.c"
 if($596){label=112;break;}else{label=113;break;} //@line 6422 "tcc_bootstrap.c"
 case 112: 
 var $598=(($t)|0); //@line 6423 "tcc_bootstrap.c"
 HEAP32[(($598)>>2)]=4; //@line 6423 "tcc_bootstrap.c"
 label=120;break; //@line 6424 "tcc_bootstrap.c"
 case 113: 
 var $600=$s; //@line 6424 "tcc_bootstrap.c"
 var $601=($600|0)>2; //@line 6424 "tcc_bootstrap.c"
 if($601){label=114;break;}else{label=115;break;} //@line 6424 "tcc_bootstrap.c"
 case 114: 
 var $603=(($t)|0); //@line 6425 "tcc_bootstrap.c"
 HEAP32[(($603)>>2)]=3; //@line 6425 "tcc_bootstrap.c"
 label=119;break; //@line 6426 "tcc_bootstrap.c"
 case 115: 
 var $605=$s; //@line 6426 "tcc_bootstrap.c"
 var $606=($605|0)>1; //@line 6426 "tcc_bootstrap.c"
 if($606){label=116;break;}else{label=117;break;} //@line 6426 "tcc_bootstrap.c"
 case 116: 
 var $608=(($t)|0); //@line 6427 "tcc_bootstrap.c"
 HEAP32[(($608)>>2)]=2; //@line 6427 "tcc_bootstrap.c"
 label=118;break; //@line 6428 "tcc_bootstrap.c"
 case 117: 
 var $610=(($t)|0); //@line 6429 "tcc_bootstrap.c"
 HEAP32[(($610)>>2)]=1; //@line 6429 "tcc_bootstrap.c"
 label=118;break;
 case 118: 
 label=119;break;
 case 119: 
 label=120;break;
 case 120: 
 var $614=_type_size($t,$align); //@line 6431 "tcc_bootstrap.c"
 $s=$614; //@line 6431 "tcc_bootstrap.c"
 var $615=$cx; //@line 6432 "tcc_bootstrap.c"
 $c0=$615; //@line 6432 "tcc_bootstrap.c"
 label=109;break; //@line 6433 "tcc_bootstrap.c"
 case 121: 
 var $617=$px; //@line 6434 "tcc_bootstrap.c"
 var $618=$bit_size; //@line 6434 "tcc_bootstrap.c"
 var $619=((($617)+($618))|0); //@line 6434 "tcc_bootstrap.c"
 var $620=$s; //@line 6434 "tcc_bootstrap.c"
 var $621=($620<<3); //@line 6434 "tcc_bootstrap.c"
 var $622=($619|0)<=($621|0); //@line 6434 "tcc_bootstrap.c"
 if($622){label=122;break;}else{label=126;break;} //@line 6434 "tcc_bootstrap.c"
 case 122: 
 var $624=$cx; //@line 6434 "tcc_bootstrap.c"
 var $625=$s; //@line 6434 "tcc_bootstrap.c"
 var $626=((($624)+($625))|0); //@line 6434 "tcc_bootstrap.c"
 var $627=$c; //@line 6434 "tcc_bootstrap.c"
 var $628=($626|0)<=($627|0); //@line 6434 "tcc_bootstrap.c"
 if($628){label=123;break;}else{label=126;break;} //@line 6434 "tcc_bootstrap.c"
 case 123: 
 var $630=$cx; //@line 6435 "tcc_bootstrap.c"
 var $631=$f; //@line 6435 "tcc_bootstrap.c"
 var $632=(($631+8)|0); //@line 6435 "tcc_bootstrap.c"
 var $633=$632; //@line 6435 "tcc_bootstrap.c"
 var $634=(($633)|0); //@line 6435 "tcc_bootstrap.c"
 HEAP32[(($634)>>2)]=$630; //@line 6435 "tcc_bootstrap.c"
 var $635=$px; //@line 6436 "tcc_bootstrap.c"
 $bit_pos=$635; //@line 6436 "tcc_bootstrap.c"
 var $636=$f; //@line 6437 "tcc_bootstrap.c"
 var $637=(($636+16)|0); //@line 6437 "tcc_bootstrap.c"
 var $638=(($637)|0); //@line 6437 "tcc_bootstrap.c"
 var $639=HEAP32[(($638)>>2)]; //@line 6437 "tcc_bootstrap.c"
 var $640=$639&-66060289; //@line 6437 "tcc_bootstrap.c"
 var $641=$bit_pos; //@line 6437 "tcc_bootstrap.c"
 var $642=$641<<20; //@line 6437 "tcc_bootstrap.c"
 var $643=$640|$642; //@line 6437 "tcc_bootstrap.c"
 var $644=$f; //@line 6437 "tcc_bootstrap.c"
 var $645=(($644+16)|0); //@line 6437 "tcc_bootstrap.c"
 var $646=(($645)|0); //@line 6437 "tcc_bootstrap.c"
 HEAP32[(($646)>>2)]=$643; //@line 6437 "tcc_bootstrap.c"
 var $647=$s; //@line 6439 "tcc_bootstrap.c"
 var $648=$size; //@line 6439 "tcc_bootstrap.c"
 var $649=($647|0)!=($648|0); //@line 6439 "tcc_bootstrap.c"
 if($649){label=124;break;}else{label=125;break;} //@line 6439 "tcc_bootstrap.c"
 case 124: 
 var $651=(($t)|0); //@line 6440 "tcc_bootstrap.c"
 var $652=HEAP32[(($651)>>2)]; //@line 6440 "tcc_bootstrap.c"
 var $653=$f; //@line 6440 "tcc_bootstrap.c"
 var $654=(($653+8)|0); //@line 6440 "tcc_bootstrap.c"
 var $655=$654; //@line 6440 "tcc_bootstrap.c"
 var $656=(($655+4)|0); //@line 6440 "tcc_bootstrap.c"
 var $657=$656; //@line 6440 "tcc_bootstrap.c"
 HEAP32[(($657)>>2)]=$652; //@line 6440 "tcc_bootstrap.c"
 label=125;break; //@line 6440 "tcc_bootstrap.c"
 case 125: 
 label=127;break; //@line 6441 "tcc_bootstrap.c"
 case 126: 
 var $660=$f; //@line 6442 "tcc_bootstrap.c"
 var $661=(($660+8)|0); //@line 6442 "tcc_bootstrap.c"
 var $662=$661; //@line 6442 "tcc_bootstrap.c"
 var $663=(($662+4)|0); //@line 6442 "tcc_bootstrap.c"
 var $664=$663; //@line 6442 "tcc_bootstrap.c"
 HEAP32[(($664)>>2)]=7; //@line 6442 "tcc_bootstrap.c"
 label=127;break;
 case 127: 
 label=128;break; //@line 6444 "tcc_bootstrap.c"
 case 128: 
 var $667=$f; //@line 6400 "tcc_bootstrap.c"
 var $668=(($667+24)|0); //@line 6400 "tcc_bootstrap.c"
 var $669=$668; //@line 6400 "tcc_bootstrap.c"
 var $670=HEAP32[(($669)>>2)]; //@line 6400 "tcc_bootstrap.c"
 $f=$670; //@line 6400 "tcc_bootstrap.c"
 label=100;break; //@line 6400 "tcc_bootstrap.c"
 case 129: 
 STACKTOP=sp;return; //@line 6445 "tcc_bootstrap.c"
  default: assert(0, "bad label: " + label);
 }

}


function _struct_add_offset($s,$offset){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 $1=$s;
 $2=$offset;
 label=2;break; //@line 6260 "tcc_bootstrap.c"
 case 2: 
 var $4=$1; //@line 6260 "tcc_bootstrap.c"
 var $5=(($4+24)|0); //@line 6260 "tcc_bootstrap.c"
 var $6=$5; //@line 6260 "tcc_bootstrap.c"
 var $7=HEAP32[(($6)>>2)]; //@line 6260 "tcc_bootstrap.c"
 $1=$7; //@line 6260 "tcc_bootstrap.c"
 var $8=($7|0)!=0; //@line 6260 "tcc_bootstrap.c"
 if($8){label=3;break;}else{label=9;break;} //@line 6260 "tcc_bootstrap.c"
 case 3: 
 var $10=$1; //@line 6261 "tcc_bootstrap.c"
 var $11=(($10)|0); //@line 6261 "tcc_bootstrap.c"
 var $12=HEAP32[(($11)>>2)]; //@line 6261 "tcc_bootstrap.c"
 var $13=$12&536870912; //@line 6261 "tcc_bootstrap.c"
 var $14=($13|0)!=0; //@line 6261 "tcc_bootstrap.c"
 if($14){label=4;break;}else{label=7;break;} //@line 6261 "tcc_bootstrap.c"
 case 4: 
 var $16=$1; //@line 6261 "tcc_bootstrap.c"
 var $17=(($16+16)|0); //@line 6261 "tcc_bootstrap.c"
 var $18=(($17)|0); //@line 6261 "tcc_bootstrap.c"
 var $19=HEAP32[(($18)>>2)]; //@line 6261 "tcc_bootstrap.c"
 var $20=$19&15; //@line 6261 "tcc_bootstrap.c"
 var $21=($20|0)==7; //@line 6261 "tcc_bootstrap.c"
 if($21){label=5;break;}else{label=7;break;} //@line 6261 "tcc_bootstrap.c"
 case 5: 
 var $23=$1; //@line 6261 "tcc_bootstrap.c"
 var $24=(($23)|0); //@line 6261 "tcc_bootstrap.c"
 var $25=HEAP32[(($24)>>2)]; //@line 6261 "tcc_bootstrap.c"
 var $26=$25&-536870913; //@line 6261 "tcc_bootstrap.c"
 var $27=($26|0)>=268435456; //@line 6261 "tcc_bootstrap.c"
 if($27){label=6;break;}else{label=7;break;} //@line 6261 "tcc_bootstrap.c"
 case 6: 
 var $29=$1; //@line 6264 "tcc_bootstrap.c"
 var $30=(($29+16)|0); //@line 6264 "tcc_bootstrap.c"
 var $31=(($30+4)|0); //@line 6264 "tcc_bootstrap.c"
 var $32=HEAP32[(($31)>>2)]; //@line 6264 "tcc_bootstrap.c"
 var $33=$2; //@line 6264 "tcc_bootstrap.c"
 _struct_add_offset($32,$33); //@line 6264 "tcc_bootstrap.c"
 label=8;break; //@line 6265 "tcc_bootstrap.c"
 case 7: 
 var $35=$2; //@line 6266 "tcc_bootstrap.c"
 var $36=$1; //@line 6266 "tcc_bootstrap.c"
 var $37=(($36+8)|0); //@line 6266 "tcc_bootstrap.c"
 var $38=$37; //@line 6266 "tcc_bootstrap.c"
 var $39=(($38)|0); //@line 6266 "tcc_bootstrap.c"
 var $40=HEAP32[(($39)>>2)]; //@line 6266 "tcc_bootstrap.c"
 var $41=((($40)+($35))|0); //@line 6266 "tcc_bootstrap.c"
 HEAP32[(($39)>>2)]=$41; //@line 6266 "tcc_bootstrap.c"
 label=8;break;
 case 8: 
 label=2;break; //@line 6267 "tcc_bootstrap.c"
 case 9: 
 STACKTOP=sp;return; //@line 6268 "tcc_bootstrap.c"
  default: assert(0, "bad label: " + label);
 }

}


function _decl_initializer($type,$sec,$c,$first,$size_only){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+56)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $len;
 var $n;
 var $no_oblock;
 var $nb;
 var $i;
 var $size1;
 var $align1=sp;
 var $have_elem;
 var $s;
 var $f=(sp)+(8);
 var $indexsym=(sp)+(16);
 var $t1;
 var $cstr_len;
 var $ch;
 $1=$type;
 $2=$sec;
 $3=$c;
 $4=$first;
 $5=$size_only;
 var $6=HEAP32[((10472)>>2)]; //@line 8734 "tcc_bootstrap.c"
 var $7=($6|0)==125; //@line 8734 "tcc_bootstrap.c"
 if($7){var $12=1;label=3;break;}else{label=2;break;} //@line 8734 "tcc_bootstrap.c"
 case 2: 
 var $9=HEAP32[((10472)>>2)]; //@line 8734 "tcc_bootstrap.c"
 var $10=($9|0)==44; //@line 8734 "tcc_bootstrap.c"
 var $12=$10;label=3;break; //@line 8734 "tcc_bootstrap.c"
 case 3: 
 var $12;
 var $13=($12&1); //@line 8734 "tcc_bootstrap.c"
 $have_elem=$13; //@line 8734 "tcc_bootstrap.c"
 var $14=$have_elem; //@line 8735 "tcc_bootstrap.c"
 var $15=($14|0)!=0; //@line 8735 "tcc_bootstrap.c"
 if($15){label=9;break;}else{label=4;break;} //@line 8735 "tcc_bootstrap.c"
 case 4: 
 var $17=HEAP32[((10472)>>2)]; //@line 8735 "tcc_bootstrap.c"
 var $18=($17|0)!=123; //@line 8735 "tcc_bootstrap.c"
 if($18){label=5;break;}else{label=9;break;} //@line 8735 "tcc_bootstrap.c"
 case 5: 
 var $20=HEAP32[((10472)>>2)]; //@line 8735 "tcc_bootstrap.c"
 var $21=($20|0)!=186; //@line 8735 "tcc_bootstrap.c"
 if($21){label=6;break;}else{label=9;break;} //@line 8735 "tcc_bootstrap.c"
 case 6: 
 var $23=HEAP32[((10472)>>2)]; //@line 8735 "tcc_bootstrap.c"
 var $24=($23|0)!=185; //@line 8735 "tcc_bootstrap.c"
 if($24){label=7;break;}else{label=9;break;} //@line 8735 "tcc_bootstrap.c"
 case 7: 
 var $26=$5; //@line 8735 "tcc_bootstrap.c"
 var $27=($26|0)!=0; //@line 8735 "tcc_bootstrap.c"
 if($27){label=9;break;}else{label=8;break;} //@line 8735 "tcc_bootstrap.c"
 case 8: 
 var $29=$2; //@line 8738 "tcc_bootstrap.c"
 var $30=($29|0)!=0; //@line 8738 "tcc_bootstrap.c"
 var $31=$30^1; //@line 8738 "tcc_bootstrap.c"
 var $32=($31?2:1); //@line 8738 "tcc_bootstrap.c"
 _parse_init_elem($32); //@line 8738 "tcc_bootstrap.c"
 $have_elem=1; //@line 8739 "tcc_bootstrap.c"
 label=9;break; //@line 8740 "tcc_bootstrap.c"
 case 9: 
 var $34=$have_elem; //@line 8741 "tcc_bootstrap.c"
 var $35=($34|0)!=0; //@line 8741 "tcc_bootstrap.c"
 if($35){label=10;break;}else{label=13;break;} //@line 8741 "tcc_bootstrap.c"
 case 10: 
 var $37=$1; //@line 8741 "tcc_bootstrap.c"
 var $38=(($37)|0); //@line 8741 "tcc_bootstrap.c"
 var $39=HEAP32[(($38)>>2)]; //@line 8741 "tcc_bootstrap.c"
 var $40=$39&64; //@line 8741 "tcc_bootstrap.c"
 var $41=($40|0)!=0; //@line 8741 "tcc_bootstrap.c"
 if($41){label=13;break;}else{label=11;break;} //@line 8741 "tcc_bootstrap.c"
 case 11: 
 var $43=$1; //@line 8743 "tcc_bootstrap.c"
 var $44=HEAP32[((9288)>>2)]; //@line 8743 "tcc_bootstrap.c"
 var $45=(($44)|0); //@line 8743 "tcc_bootstrap.c"
 var $46=_is_compatible_unqualified_types($43,$45); //@line 8743 "tcc_bootstrap.c"
 var $47=($46|0)!=0; //@line 8743 "tcc_bootstrap.c"
 if($47){label=12;break;}else{label=13;break;} //@line 8743 "tcc_bootstrap.c"
 case 12: 
 var $49=$1; //@line 8744 "tcc_bootstrap.c"
 var $50=$2; //@line 8744 "tcc_bootstrap.c"
 var $51=$3; //@line 8744 "tcc_bootstrap.c"
 _init_putv($49,$50,$51); //@line 8744 "tcc_bootstrap.c"
 label=111;break; //@line 8745 "tcc_bootstrap.c"
 case 13: 
 var $53=$1; //@line 8745 "tcc_bootstrap.c"
 var $54=(($53)|0); //@line 8745 "tcc_bootstrap.c"
 var $55=HEAP32[(($54)>>2)]; //@line 8745 "tcc_bootstrap.c"
 var $56=$55&64; //@line 8745 "tcc_bootstrap.c"
 var $57=($56|0)!=0; //@line 8745 "tcc_bootstrap.c"
 if($57){label=14;break;}else{label=92;break;} //@line 8745 "tcc_bootstrap.c"
 case 14: 
 var $59=$1; //@line 8746 "tcc_bootstrap.c"
 var $60=(($59+4)|0); //@line 8746 "tcc_bootstrap.c"
 var $61=HEAP32[(($60)>>2)]; //@line 8746 "tcc_bootstrap.c"
 $s=$61; //@line 8746 "tcc_bootstrap.c"
 var $62=$s; //@line 8747 "tcc_bootstrap.c"
 var $63=(($62+8)|0); //@line 8747 "tcc_bootstrap.c"
 var $64=$63; //@line 8747 "tcc_bootstrap.c"
 var $65=(($64)|0); //@line 8747 "tcc_bootstrap.c"
 var $66=HEAP32[(($65)>>2)]; //@line 8747 "tcc_bootstrap.c"
 $n=$66; //@line 8747 "tcc_bootstrap.c"
 var $67=$1; //@line 8748 "tcc_bootstrap.c"
 var $68=_pointed_type($67); //@line 8748 "tcc_bootstrap.c"
 $t1=$68; //@line 8748 "tcc_bootstrap.c"
 var $69=$t1; //@line 8749 "tcc_bootstrap.c"
 var $70=_type_size($69,$align1); //@line 8749 "tcc_bootstrap.c"
 $size1=$70; //@line 8749 "tcc_bootstrap.c"
 $no_oblock=1; //@line 8750 "tcc_bootstrap.c"
 var $71=$4; //@line 8751 "tcc_bootstrap.c"
 var $72=($71|0)!=0; //@line 8751 "tcc_bootstrap.c"
 if($72){label=15;break;}else{label=17;break;} //@line 8751 "tcc_bootstrap.c"
 case 15: 
 var $74=HEAP32[((10472)>>2)]; //@line 8751 "tcc_bootstrap.c"
 var $75=($74|0)!=186; //@line 8751 "tcc_bootstrap.c"
 if($75){label=16;break;}else{label=17;break;} //@line 8751 "tcc_bootstrap.c"
 case 16: 
 var $77=HEAP32[((10472)>>2)]; //@line 8751 "tcc_bootstrap.c"
 var $78=($77|0)!=185; //@line 8751 "tcc_bootstrap.c"
 if($78){label=18;break;}else{label=17;break;} //@line 8751 "tcc_bootstrap.c"
 case 17: 
 var $80=HEAP32[((10472)>>2)]; //@line 8751 "tcc_bootstrap.c"
 var $81=($80|0)==123; //@line 8751 "tcc_bootstrap.c"
 if($81){label=18;break;}else{label=21;break;} //@line 8751 "tcc_bootstrap.c"
 case 18: 
 var $83=HEAP32[((10472)>>2)]; //@line 8753 "tcc_bootstrap.c"
 var $84=($83|0)!=123; //@line 8753 "tcc_bootstrap.c"
 if($84){label=19;break;}else{label=20;break;} //@line 8753 "tcc_bootstrap.c"
 case 19: 
 _tcc_error(5680,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs; //@line 8754 "tcc_bootstrap.c"
 label=20;break; //@line 8754 "tcc_bootstrap.c"
 case 20: 
 _skip(123); //@line 8756 "tcc_bootstrap.c"
 $no_oblock=0; //@line 8757 "tcc_bootstrap.c"
 label=21;break; //@line 8758 "tcc_bootstrap.c"
 case 21: 
 var $88=HEAP32[((10472)>>2)]; //@line 8759 "tcc_bootstrap.c"
 var $89=($88|0)==186; //@line 8759 "tcc_bootstrap.c"
 if($89){label=22;break;}else{label=23;break;} //@line 8759 "tcc_bootstrap.c"
 case 22: 
 var $91=$t1; //@line 8759 "tcc_bootstrap.c"
 var $92=(($91)|0); //@line 8759 "tcc_bootstrap.c"
 var $93=HEAP32[(($92)>>2)]; //@line 8759 "tcc_bootstrap.c"
 var $94=$93&15; //@line 8759 "tcc_bootstrap.c"
 var $95=($94|0)==3; //@line 8759 "tcc_bootstrap.c"
 if($95){label=25;break;}else{label=23;break;} //@line 8759 "tcc_bootstrap.c"
 case 23: 
 var $97=HEAP32[((10472)>>2)]; //@line 8759 "tcc_bootstrap.c"
 var $98=($97|0)==185; //@line 8759 "tcc_bootstrap.c"
 if($98){label=24;break;}else{label=60;break;} //@line 8759 "tcc_bootstrap.c"
 case 24: 
 var $100=$t1; //@line 8759 "tcc_bootstrap.c"
 var $101=(($100)|0); //@line 8759 "tcc_bootstrap.c"
 var $102=HEAP32[(($101)>>2)]; //@line 8759 "tcc_bootstrap.c"
 var $103=$102&15; //@line 8759 "tcc_bootstrap.c"
 var $104=($103|0)==1; //@line 8759 "tcc_bootstrap.c"
 if($104){label=25;break;}else{label=60;break;} //@line 8759 "tcc_bootstrap.c"
 case 25: 
 $len=0; //@line 8762 "tcc_bootstrap.c"
 label=26;break; //@line 8763 "tcc_bootstrap.c"
 case 26: 
 var $107=HEAP32[((10472)>>2)]; //@line 8763 "tcc_bootstrap.c"
 var $108=($107|0)==185; //@line 8763 "tcc_bootstrap.c"
 if($108){var $113=1;label=28;break;}else{label=27;break;} //@line 8763 "tcc_bootstrap.c"
 case 27: 
 var $110=HEAP32[((10472)>>2)]; //@line 8763 "tcc_bootstrap.c"
 var $111=($110|0)==186; //@line 8763 "tcc_bootstrap.c"
 var $113=$111;label=28;break; //@line 8763 "tcc_bootstrap.c"
 case 28: 
 var $113;
 if($113){label=29;break;}else{label=54;break;} //@line 8763 "tcc_bootstrap.c"
 case 29: 
 var $115=HEAP32[((10472)>>2)]; //@line 8765 "tcc_bootstrap.c"
 var $116=($115|0)==185; //@line 8765 "tcc_bootstrap.c"
 if($116){label=30;break;}else{label=31;break;} //@line 8765 "tcc_bootstrap.c"
 case 30: 
 var $118=HEAP32[((10440)>>2)]; //@line 8766 "tcc_bootstrap.c"
 $cstr_len=$118; //@line 8766 "tcc_bootstrap.c"
 label=32;break; //@line 8766 "tcc_bootstrap.c"
 case 31: 
 var $120=HEAP32[((10440)>>2)]; //@line 8768 "tcc_bootstrap.c"
 var $121=(((($120>>>0))/(4))&-1); //@line 8768 "tcc_bootstrap.c"
 $cstr_len=$121; //@line 8768 "tcc_bootstrap.c"
 label=32;break;
 case 32: 
 var $123=$cstr_len; //@line 8769 "tcc_bootstrap.c"
 var $124=((($123)-(1))|0); //@line 8769 "tcc_bootstrap.c"
 $cstr_len=$124; //@line 8769 "tcc_bootstrap.c"
 var $125=$cstr_len; //@line 8770 "tcc_bootstrap.c"
 $nb=$125; //@line 8770 "tcc_bootstrap.c"
 var $126=$n; //@line 8771 "tcc_bootstrap.c"
 var $127=($126|0)>=0; //@line 8771 "tcc_bootstrap.c"
 if($127){label=33;break;}else{label=35;break;} //@line 8771 "tcc_bootstrap.c"
 case 33: 
 var $129=$nb; //@line 8771 "tcc_bootstrap.c"
 var $130=$n; //@line 8771 "tcc_bootstrap.c"
 var $131=$len; //@line 8771 "tcc_bootstrap.c"
 var $132=((($130)-($131))|0); //@line 8771 "tcc_bootstrap.c"
 var $133=($129|0)>($132|0); //@line 8771 "tcc_bootstrap.c"
 if($133){label=34;break;}else{label=35;break;} //@line 8771 "tcc_bootstrap.c"
 case 34: 
 var $135=$n; //@line 8772 "tcc_bootstrap.c"
 var $136=$len; //@line 8772 "tcc_bootstrap.c"
 var $137=((($135)-($136))|0); //@line 8772 "tcc_bootstrap.c"
 $nb=$137; //@line 8772 "tcc_bootstrap.c"
 label=35;break; //@line 8772 "tcc_bootstrap.c"
 case 35: 
 var $139=$5; //@line 8773 "tcc_bootstrap.c"
 var $140=($139|0)!=0; //@line 8773 "tcc_bootstrap.c"
 if($140){label=53;break;}else{label=36;break;} //@line 8773 "tcc_bootstrap.c"
 case 36: 
 var $142=$cstr_len; //@line 8774 "tcc_bootstrap.c"
 var $143=$nb; //@line 8774 "tcc_bootstrap.c"
 var $144=($142|0)>($143|0); //@line 8774 "tcc_bootstrap.c"
 if($144){label=37;break;}else{label=38;break;} //@line 8774 "tcc_bootstrap.c"
 case 37: 
 _tcc_warning(5632,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs; //@line 8775 "tcc_bootstrap.c"
 label=38;break; //@line 8775 "tcc_bootstrap.c"
 case 38: 
 var $147=$2; //@line 8776 "tcc_bootstrap.c"
 var $148=($147|0)!=0; //@line 8776 "tcc_bootstrap.c"
 if($148){label=39;break;}else{label=44;break;} //@line 8776 "tcc_bootstrap.c"
 case 39: 
 var $150=HEAP32[((10472)>>2)]; //@line 8776 "tcc_bootstrap.c"
 var $151=($150|0)==185; //@line 8776 "tcc_bootstrap.c"
 if($151){label=40;break;}else{label=44;break;} //@line 8776 "tcc_bootstrap.c"
 case 40: 
 var $153=$size1; //@line 8776 "tcc_bootstrap.c"
 var $154=($153|0)==1; //@line 8776 "tcc_bootstrap.c"
 if($154){label=41;break;}else{label=44;break;} //@line 8776 "tcc_bootstrap.c"
 case 41: 
 var $156=HEAP32[((10616)>>2)]; //@line 8777 "tcc_bootstrap.c"
 var $157=($156|0)>0; //@line 8777 "tcc_bootstrap.c"
 if($157){label=43;break;}else{label=42;break;} //@line 8777 "tcc_bootstrap.c"
 case 42: 
 var $159=$2; //@line 8778 "tcc_bootstrap.c"
 var $160=(($159+4)|0); //@line 8778 "tcc_bootstrap.c"
 var $161=HEAP32[(($160)>>2)]; //@line 8778 "tcc_bootstrap.c"
 var $162=$3; //@line 8778 "tcc_bootstrap.c"
 var $163=(($161+$162)|0); //@line 8778 "tcc_bootstrap.c"
 var $164=$len; //@line 8778 "tcc_bootstrap.c"
 var $165=(($163+$164)|0); //@line 8778 "tcc_bootstrap.c"
 var $166=HEAP32[((10444)>>2)]; //@line 8778 "tcc_bootstrap.c"
 var $167=$nb; //@line 8778 "tcc_bootstrap.c"
 assert($167 % 1 === 0);(_memcpy($165, $166, $167)|0); //@line 8778 "tcc_bootstrap.c"
 label=43;break; //@line 8778 "tcc_bootstrap.c"
 case 43: 
 label=52;break; //@line 8779 "tcc_bootstrap.c"
 case 44: 
 $i=0; //@line 8780 "tcc_bootstrap.c"
 label=45;break; //@line 8780 "tcc_bootstrap.c"
 case 45: 
 var $171=$i; //@line 8780 "tcc_bootstrap.c"
 var $172=$nb; //@line 8780 "tcc_bootstrap.c"
 var $173=($171|0)<($172|0); //@line 8780 "tcc_bootstrap.c"
 if($173){label=46;break;}else{label=51;break;} //@line 8780 "tcc_bootstrap.c"
 case 46: 
 var $175=HEAP32[((10472)>>2)]; //@line 8781 "tcc_bootstrap.c"
 var $176=($175|0)==185; //@line 8781 "tcc_bootstrap.c"
 if($176){label=47;break;}else{label=48;break;} //@line 8781 "tcc_bootstrap.c"
 case 47: 
 var $178=$i; //@line 8782 "tcc_bootstrap.c"
 var $179=HEAP32[((10444)>>2)]; //@line 8782 "tcc_bootstrap.c"
 var $180=(($179+$178)|0); //@line 8782 "tcc_bootstrap.c"
 var $181=HEAP8[(($180)>>0)]; //@line 8782 "tcc_bootstrap.c"
 var $182=($181&255); //@line 8782 "tcc_bootstrap.c"
 $ch=$182; //@line 8782 "tcc_bootstrap.c"
 label=49;break; //@line 8782 "tcc_bootstrap.c"
 case 48: 
 var $184=$i; //@line 8784 "tcc_bootstrap.c"
 var $185=HEAP32[((10444)>>2)]; //@line 8784 "tcc_bootstrap.c"
 var $186=$185; //@line 8784 "tcc_bootstrap.c"
 var $187=(($186+($184<<2))|0); //@line 8784 "tcc_bootstrap.c"
 var $188=HEAP32[(($187)>>2)]; //@line 8784 "tcc_bootstrap.c"
 $ch=$188; //@line 8784 "tcc_bootstrap.c"
 label=49;break;
 case 49: 
 var $190=$ch; //@line 8785 "tcc_bootstrap.c"
 _vpushi($190); //@line 8785 "tcc_bootstrap.c"
 var $191=$t1; //@line 8786 "tcc_bootstrap.c"
 var $192=$2; //@line 8786 "tcc_bootstrap.c"
 var $193=$3; //@line 8786 "tcc_bootstrap.c"
 var $194=$len; //@line 8786 "tcc_bootstrap.c"
 var $195=$i; //@line 8786 "tcc_bootstrap.c"
 var $196=((($194)+($195))|0); //@line 8786 "tcc_bootstrap.c"
 var $197=$size1; //@line 8786 "tcc_bootstrap.c"
 var $198=(Math_imul($196,$197)|0); //@line 8786 "tcc_bootstrap.c"
 var $199=((($193)+($198))|0); //@line 8786 "tcc_bootstrap.c"
 _init_putv($191,$192,$199); //@line 8786 "tcc_bootstrap.c"
 label=50;break; //@line 8787 "tcc_bootstrap.c"
 case 50: 
 var $201=$i; //@line 8780 "tcc_bootstrap.c"
 var $202=((($201)+(1))|0); //@line 8780 "tcc_bootstrap.c"
 $i=$202; //@line 8780 "tcc_bootstrap.c"
 label=45;break; //@line 8780 "tcc_bootstrap.c"
 case 51: 
 label=52;break;
 case 52: 
 label=53;break; //@line 8789 "tcc_bootstrap.c"
 case 53: 
 var $206=$nb; //@line 8790 "tcc_bootstrap.c"
 var $207=$len; //@line 8790 "tcc_bootstrap.c"
 var $208=((($207)+($206))|0); //@line 8790 "tcc_bootstrap.c"
 $len=$208; //@line 8790 "tcc_bootstrap.c"
 _next(); //@line 8791 "tcc_bootstrap.c"
 label=26;break; //@line 8792 "tcc_bootstrap.c"
 case 54: 
 var $210=$n; //@line 8793 "tcc_bootstrap.c"
 var $211=($210|0)<0; //@line 8793 "tcc_bootstrap.c"
 if($211){label=56;break;}else{label=55;break;} //@line 8793 "tcc_bootstrap.c"
 case 55: 
 var $213=$len; //@line 8793 "tcc_bootstrap.c"
 var $214=$n; //@line 8793 "tcc_bootstrap.c"
 var $215=($213|0)<($214|0); //@line 8793 "tcc_bootstrap.c"
 if($215){label=56;break;}else{label=59;break;} //@line 8793 "tcc_bootstrap.c"
 case 56: 
 var $217=$5; //@line 8794 "tcc_bootstrap.c"
 var $218=($217|0)!=0; //@line 8794 "tcc_bootstrap.c"
 if($218){label=58;break;}else{label=57;break;} //@line 8794 "tcc_bootstrap.c"
 case 57: 
 _vpushi(0); //@line 8795 "tcc_bootstrap.c"
 var $220=$t1; //@line 8796 "tcc_bootstrap.c"
 var $221=$2; //@line 8796 "tcc_bootstrap.c"
 var $222=$3; //@line 8796 "tcc_bootstrap.c"
 var $223=$len; //@line 8796 "tcc_bootstrap.c"
 var $224=$size1; //@line 8796 "tcc_bootstrap.c"
 var $225=(Math_imul($223,$224)|0); //@line 8796 "tcc_bootstrap.c"
 var $226=((($222)+($225))|0); //@line 8796 "tcc_bootstrap.c"
 _init_putv($220,$221,$226); //@line 8796 "tcc_bootstrap.c"
 label=58;break; //@line 8797 "tcc_bootstrap.c"
 case 58: 
 var $228=$len; //@line 8798 "tcc_bootstrap.c"
 var $229=((($228)+(1))|0); //@line 8798 "tcc_bootstrap.c"
 $len=$229; //@line 8798 "tcc_bootstrap.c"
 label=59;break; //@line 8799 "tcc_bootstrap.c"
 case 59: 
 var $231=$size1; //@line 8800 "tcc_bootstrap.c"
 var $232=$len; //@line 8800 "tcc_bootstrap.c"
 var $233=(Math_imul($232,$231)|0); //@line 8800 "tcc_bootstrap.c"
 $len=$233; //@line 8800 "tcc_bootstrap.c"
 label=81;break; //@line 8801 "tcc_bootstrap.c"
 case 60: 
 var $235=(($indexsym+8)|0); //@line 8802 "tcc_bootstrap.c"
 var $236=$235; //@line 8802 "tcc_bootstrap.c"
 var $237=(($236)|0); //@line 8802 "tcc_bootstrap.c"
 HEAP32[(($237)>>2)]=0; //@line 8802 "tcc_bootstrap.c"
 HEAP32[(($f)>>2)]=$indexsym; //@line 8803 "tcc_bootstrap.c"
 label=61;break; //@line 8803 "tcc_bootstrap.c"
 case 61: 
 $len=0; //@line 8805 "tcc_bootstrap.c"
 label=62;break; //@line 8806 "tcc_bootstrap.c"
 case 62: 
 var $240=HEAP32[((10472)>>2)]; //@line 8806 "tcc_bootstrap.c"
 var $241=($240|0)!=125; //@line 8806 "tcc_bootstrap.c"
 if($241){var $246=1;label=64;break;}else{label=63;break;} //@line 8806 "tcc_bootstrap.c"
 case 63: 
 var $243=$have_elem; //@line 8806 "tcc_bootstrap.c"
 var $244=($243|0)!=0; //@line 8806 "tcc_bootstrap.c"
 var $246=$244;label=64;break; //@line 8806 "tcc_bootstrap.c"
 case 64: 
 var $246;
 if($246){label=65;break;}else{label=80;break;} //@line 8806 "tcc_bootstrap.c"
 case 65: 
 var $248=$1; //@line 8807 "tcc_bootstrap.c"
 var $249=$2; //@line 8807 "tcc_bootstrap.c"
 var $250=$3; //@line 8807 "tcc_bootstrap.c"
 var $251=$5; //@line 8807 "tcc_bootstrap.c"
 var $252=$len; //@line 8807 "tcc_bootstrap.c"
 var $253=_decl_designator($248,$249,$250,$f,$251,$252); //@line 8807 "tcc_bootstrap.c"
 $len=$253; //@line 8807 "tcc_bootstrap.c"
 $have_elem=0; //@line 8808 "tcc_bootstrap.c"
 var $254=$1; //@line 8809 "tcc_bootstrap.c"
 var $255=(($254)|0); //@line 8809 "tcc_bootstrap.c"
 var $256=HEAP32[(($255)>>2)]; //@line 8809 "tcc_bootstrap.c"
 var $257=$256&64; //@line 8809 "tcc_bootstrap.c"
 var $258=($257|0)!=0; //@line 8809 "tcc_bootstrap.c"
 if($258){label=66;break;}else{label=70;break;} //@line 8809 "tcc_bootstrap.c"
 case 66: 
 var $260=(($indexsym+8)|0); //@line 8810 "tcc_bootstrap.c"
 var $261=$260; //@line 8810 "tcc_bootstrap.c"
 var $262=(($261)|0); //@line 8810 "tcc_bootstrap.c"
 var $263=HEAP32[(($262)>>2)]; //@line 8810 "tcc_bootstrap.c"
 var $264=((($263)+(1))|0); //@line 8810 "tcc_bootstrap.c"
 HEAP32[(($262)>>2)]=$264; //@line 8810 "tcc_bootstrap.c"
 var $265=$no_oblock; //@line 8811 "tcc_bootstrap.c"
 var $266=($265|0)!=0; //@line 8811 "tcc_bootstrap.c"
 if($266){label=67;break;}else{label=69;break;} //@line 8811 "tcc_bootstrap.c"
 case 67: 
 var $268=$len; //@line 8811 "tcc_bootstrap.c"
 var $269=$n; //@line 8811 "tcc_bootstrap.c"
 var $270=$size1; //@line 8811 "tcc_bootstrap.c"
 var $271=(Math_imul($269,$270)|0); //@line 8811 "tcc_bootstrap.c"
 var $272=($268|0)>=($271|0); //@line 8811 "tcc_bootstrap.c"
 if($272){label=68;break;}else{label=69;break;} //@line 8811 "tcc_bootstrap.c"
 case 68: 
 label=80;break; //@line 8812 "tcc_bootstrap.c"
 case 69: 
 label=77;break; //@line 8813 "tcc_bootstrap.c"
 case 70: 
 var $276=$s; //@line 8814 "tcc_bootstrap.c"
 var $277=(($276+16)|0); //@line 8814 "tcc_bootstrap.c"
 var $278=(($277)|0); //@line 8814 "tcc_bootstrap.c"
 var $279=HEAP32[(($278)>>2)]; //@line 8814 "tcc_bootstrap.c"
 var $280=($279|0)==1048583; //@line 8814 "tcc_bootstrap.c"
 if($280){label=71;break;}else{label=72;break;} //@line 8814 "tcc_bootstrap.c"
 case 71: 
 HEAP32[(($f)>>2)]=0; //@line 8815 "tcc_bootstrap.c"
 label=73;break; //@line 8815 "tcc_bootstrap.c"
 case 72: 
 var $283=HEAP32[(($f)>>2)]; //@line 8817 "tcc_bootstrap.c"
 var $284=(($283+24)|0); //@line 8817 "tcc_bootstrap.c"
 var $285=$284; //@line 8817 "tcc_bootstrap.c"
 var $286=HEAP32[(($285)>>2)]; //@line 8817 "tcc_bootstrap.c"
 HEAP32[(($f)>>2)]=$286; //@line 8817 "tcc_bootstrap.c"
 label=73;break;
 case 73: 
 var $288=$no_oblock; //@line 8818 "tcc_bootstrap.c"
 var $289=($288|0)!=0; //@line 8818 "tcc_bootstrap.c"
 if($289){label=74;break;}else{label=76;break;} //@line 8818 "tcc_bootstrap.c"
 case 74: 
 var $291=HEAP32[(($f)>>2)]; //@line 8818 "tcc_bootstrap.c"
 var $292=($291|0)==0; //@line 8818 "tcc_bootstrap.c"
 if($292){label=75;break;}else{label=76;break;} //@line 8818 "tcc_bootstrap.c"
 case 75: 
 label=80;break; //@line 8819 "tcc_bootstrap.c"
 case 76: 
 label=77;break;
 case 77: 
 var $296=HEAP32[((10472)>>2)]; //@line 8821 "tcc_bootstrap.c"
 var $297=($296|0)==125; //@line 8821 "tcc_bootstrap.c"
 if($297){label=78;break;}else{label=79;break;} //@line 8821 "tcc_bootstrap.c"
 case 78: 
 label=80;break; //@line 8822 "tcc_bootstrap.c"
 case 79: 
 _skip(44); //@line 8823 "tcc_bootstrap.c"
 label=62;break; //@line 8824 "tcc_bootstrap.c"
 case 80: 
 label=81;break;
 case 81: 
 var $302=$5; //@line 8826 "tcc_bootstrap.c"
 var $303=($302|0)!=0; //@line 8826 "tcc_bootstrap.c"
 if($303){label=84;break;}else{label=82;break;} //@line 8826 "tcc_bootstrap.c"
 case 82: 
 var $305=$len; //@line 8826 "tcc_bootstrap.c"
 var $306=$n; //@line 8826 "tcc_bootstrap.c"
 var $307=$size1; //@line 8826 "tcc_bootstrap.c"
 var $308=(Math_imul($306,$307)|0); //@line 8826 "tcc_bootstrap.c"
 var $309=($305|0)<($308|0); //@line 8826 "tcc_bootstrap.c"
 if($309){label=83;break;}else{label=84;break;} //@line 8826 "tcc_bootstrap.c"
 case 83: 
 var $311=$2; //@line 8827 "tcc_bootstrap.c"
 var $312=$3; //@line 8827 "tcc_bootstrap.c"
 var $313=$len; //@line 8827 "tcc_bootstrap.c"
 var $314=((($312)+($313))|0); //@line 8827 "tcc_bootstrap.c"
 var $315=$n; //@line 8827 "tcc_bootstrap.c"
 var $316=$size1; //@line 8827 "tcc_bootstrap.c"
 var $317=(Math_imul($315,$316)|0); //@line 8827 "tcc_bootstrap.c"
 var $318=$len; //@line 8827 "tcc_bootstrap.c"
 var $319=((($317)-($318))|0); //@line 8827 "tcc_bootstrap.c"
 _init_putz($311,$314,$319); //@line 8827 "tcc_bootstrap.c"
 label=84;break; //@line 8827 "tcc_bootstrap.c"
 case 84: 
 var $321=$no_oblock; //@line 8828 "tcc_bootstrap.c"
 var $322=($321|0)!=0; //@line 8828 "tcc_bootstrap.c"
 if($322){label=86;break;}else{label=85;break;} //@line 8828 "tcc_bootstrap.c"
 case 85: 
 _skip(125); //@line 8829 "tcc_bootstrap.c"
 label=86;break; //@line 8829 "tcc_bootstrap.c"
 case 86: 
 var $325=$n; //@line 8830 "tcc_bootstrap.c"
 var $326=($325|0)<0; //@line 8830 "tcc_bootstrap.c"
 if($326){label=87;break;}else{label=91;break;} //@line 8830 "tcc_bootstrap.c"
 case 87: 
 var $328=$size1; //@line 8831 "tcc_bootstrap.c"
 var $329=($328|0)==1; //@line 8831 "tcc_bootstrap.c"
 if($329){label=88;break;}else{label=89;break;} //@line 8831 "tcc_bootstrap.c"
 case 88: 
 var $331=$len; //@line 8831 "tcc_bootstrap.c"
 var $340=$331;label=90;break; //@line 8831 "tcc_bootstrap.c"
 case 89: 
 var $333=$len; //@line 8831 "tcc_bootstrap.c"
 var $334=$size1; //@line 8831 "tcc_bootstrap.c"
 var $335=((($333)+($334))|0); //@line 8831 "tcc_bootstrap.c"
 var $336=((($335)-(1))|0); //@line 8831 "tcc_bootstrap.c"
 var $337=$size1; //@line 8831 "tcc_bootstrap.c"
 var $338=(((($336|0))/(($337|0)))&-1); //@line 8831 "tcc_bootstrap.c"
 var $340=$338;label=90;break; //@line 8831 "tcc_bootstrap.c"
 case 90: 
 var $340; //@line 8831 "tcc_bootstrap.c"
 var $341=$s; //@line 8831 "tcc_bootstrap.c"
 var $342=(($341+8)|0); //@line 8831 "tcc_bootstrap.c"
 var $343=$342; //@line 8831 "tcc_bootstrap.c"
 var $344=(($343)|0); //@line 8831 "tcc_bootstrap.c"
 HEAP32[(($344)>>2)]=$340; //@line 8831 "tcc_bootstrap.c"
 label=91;break; //@line 8831 "tcc_bootstrap.c"
 case 91: 
 label=110;break; //@line 8832 "tcc_bootstrap.c"
 case 92: 
 var $347=$1; //@line 8832 "tcc_bootstrap.c"
 var $348=(($347)|0); //@line 8832 "tcc_bootstrap.c"
 var $349=HEAP32[(($348)>>2)]; //@line 8832 "tcc_bootstrap.c"
 var $350=$349&15; //@line 8832 "tcc_bootstrap.c"
 var $351=($350|0)==7; //@line 8832 "tcc_bootstrap.c"
 if($351){label=93;break;}else{label=97;break;} //@line 8832 "tcc_bootstrap.c"
 case 93: 
 $size1=1; //@line 8833 "tcc_bootstrap.c"
 $no_oblock=1; //@line 8834 "tcc_bootstrap.c"
 var $353=$4; //@line 8835 "tcc_bootstrap.c"
 var $354=($353|0)!=0; //@line 8835 "tcc_bootstrap.c"
 if($354){label=95;break;}else{label=94;break;} //@line 8835 "tcc_bootstrap.c"
 case 94: 
 var $356=HEAP32[((10472)>>2)]; //@line 8835 "tcc_bootstrap.c"
 var $357=($356|0)==123; //@line 8835 "tcc_bootstrap.c"
 if($357){label=95;break;}else{label=96;break;} //@line 8835 "tcc_bootstrap.c"
 case 95: 
 _skip(123); //@line 8836 "tcc_bootstrap.c"
 $no_oblock=0; //@line 8837 "tcc_bootstrap.c"
 label=96;break; //@line 8838 "tcc_bootstrap.c"
 case 96: 
 var $360=$1; //@line 8839 "tcc_bootstrap.c"
 var $361=(($360+4)|0); //@line 8839 "tcc_bootstrap.c"
 var $362=HEAP32[(($361)>>2)]; //@line 8839 "tcc_bootstrap.c"
 $s=$362; //@line 8839 "tcc_bootstrap.c"
 var $363=$s; //@line 8840 "tcc_bootstrap.c"
 var $364=(($363+24)|0); //@line 8840 "tcc_bootstrap.c"
 var $365=$364; //@line 8840 "tcc_bootstrap.c"
 var $366=HEAP32[(($365)>>2)]; //@line 8840 "tcc_bootstrap.c"
 HEAP32[(($f)>>2)]=$366; //@line 8840 "tcc_bootstrap.c"
 var $367=$s; //@line 8841 "tcc_bootstrap.c"
 var $368=(($367+8)|0); //@line 8841 "tcc_bootstrap.c"
 var $369=$368; //@line 8841 "tcc_bootstrap.c"
 var $370=(($369)|0); //@line 8841 "tcc_bootstrap.c"
 var $371=HEAP32[(($370)>>2)]; //@line 8841 "tcc_bootstrap.c"
 $n=$371; //@line 8841 "tcc_bootstrap.c"
 label=61;break; //@line 8842 "tcc_bootstrap.c"
 case 97: 
 var $373=HEAP32[((10472)>>2)]; //@line 8843 "tcc_bootstrap.c"
 var $374=($373|0)==123; //@line 8843 "tcc_bootstrap.c"
 if($374){label=98;break;}else{label=99;break;} //@line 8843 "tcc_bootstrap.c"
 case 98: 
 _next(); //@line 8844 "tcc_bootstrap.c"
 var $376=$1; //@line 8845 "tcc_bootstrap.c"
 var $377=$2; //@line 8845 "tcc_bootstrap.c"
 var $378=$3; //@line 8845 "tcc_bootstrap.c"
 var $379=$4; //@line 8845 "tcc_bootstrap.c"
 var $380=$5; //@line 8845 "tcc_bootstrap.c"
 _decl_initializer($376,$377,$378,$379,$380); //@line 8845 "tcc_bootstrap.c"
 _skip(125); //@line 8846 "tcc_bootstrap.c"
 label=108;break; //@line 8847 "tcc_bootstrap.c"
 case 99: 
 var $382=$5; //@line 8847 "tcc_bootstrap.c"
 var $383=($382|0)!=0; //@line 8847 "tcc_bootstrap.c"
 if($383){label=100;break;}else{label=101;break;} //@line 8847 "tcc_bootstrap.c"
 case 100: 
 _skip_or_save_block(0); //@line 8848 "tcc_bootstrap.c"
 label=107;break; //@line 8849 "tcc_bootstrap.c"
 case 101: 
 var $386=$have_elem; //@line 8850 "tcc_bootstrap.c"
 var $387=($386|0)!=0; //@line 8850 "tcc_bootstrap.c"
 if($387){label=106;break;}else{label=102;break;} //@line 8850 "tcc_bootstrap.c"
 case 102: 
 var $389=HEAP32[((10472)>>2)]; //@line 8851 "tcc_bootstrap.c"
 var $390=($389|0)!=185; //@line 8851 "tcc_bootstrap.c"
 if($390){label=103;break;}else{label=105;break;} //@line 8851 "tcc_bootstrap.c"
 case 103: 
 var $392=HEAP32[((10472)>>2)]; //@line 8851 "tcc_bootstrap.c"
 var $393=($392|0)!=186; //@line 8851 "tcc_bootstrap.c"
 if($393){label=104;break;}else{label=105;break;} //@line 8851 "tcc_bootstrap.c"
 case 104: 
 _expect(5616); //@line 8852 "tcc_bootstrap.c"
 label=105;break; //@line 8852 "tcc_bootstrap.c"
 case 105: 
 var $396=$2; //@line 8853 "tcc_bootstrap.c"
 var $397=($396|0)!=0; //@line 8853 "tcc_bootstrap.c"
 var $398=$397^1; //@line 8853 "tcc_bootstrap.c"
 var $399=($398?2:1); //@line 8853 "tcc_bootstrap.c"
 _parse_init_elem($399); //@line 8853 "tcc_bootstrap.c"
 label=106;break; //@line 8854 "tcc_bootstrap.c"
 case 106: 
 var $401=$1; //@line 8855 "tcc_bootstrap.c"
 var $402=$2; //@line 8855 "tcc_bootstrap.c"
 var $403=$3; //@line 8855 "tcc_bootstrap.c"
 _init_putv($401,$402,$403); //@line 8855 "tcc_bootstrap.c"
 label=107;break;
 case 107: 
 label=108;break;
 case 108: 
 label=109;break;
 case 109: 
 label=110;break;
 case 110: 
 label=111;break;
 case 111: 
 STACKTOP=sp;return; //@line 8857 "tcc_bootstrap.c"
  default: assert(0, "bad label: " + label);
 }

}


function _squeeze_multi_relocs($s,$oldrelocoffset){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $sr;
 var $r;
 var $dest;
 var $a;
 var $addr;
 var $i;
 var $tmp=sp;
 $1=$s;
 $2=$oldrelocoffset;
 var $3=$1; //@line 9595 "tcc_bootstrap.c"
 var $4=(($3+60)|0); //@line 9595 "tcc_bootstrap.c"
 var $5=HEAP32[(($4)>>2)]; //@line 9595 "tcc_bootstrap.c"
 $sr=$5; //@line 9595 "tcc_bootstrap.c"
 var $6=$2; //@line 9599 "tcc_bootstrap.c"
 var $7=((($6)+(8))|0); //@line 9599 "tcc_bootstrap.c"
 var $8=$sr; //@line 9599 "tcc_bootstrap.c"
 var $9=(($8)|0); //@line 9599 "tcc_bootstrap.c"
 var $10=HEAP32[(($9)>>2)]; //@line 9599 "tcc_bootstrap.c"
 var $11=($7>>>0)>=($10>>>0); //@line 9599 "tcc_bootstrap.c"
 if($11){label=2;break;}else{label=3;break;} //@line 9599 "tcc_bootstrap.c"
 case 2: 
 label=20;break; //@line 9600 "tcc_bootstrap.c"
 case 3: 
 var $14=$2; //@line 9601 "tcc_bootstrap.c"
 var $15=((($14)+(8))|0); //@line 9601 "tcc_bootstrap.c"
 $a=$15; //@line 9601 "tcc_bootstrap.c"
 label=4;break; //@line 9601 "tcc_bootstrap.c"
 case 4: 
 var $17=$a; //@line 9601 "tcc_bootstrap.c"
 var $18=$sr; //@line 9601 "tcc_bootstrap.c"
 var $19=(($18)|0); //@line 9601 "tcc_bootstrap.c"
 var $20=HEAP32[(($19)>>2)]; //@line 9601 "tcc_bootstrap.c"
 var $21=($17>>>0)<($20>>>0); //@line 9601 "tcc_bootstrap.c"
 if($21){label=5;break;}else{label=13;break;} //@line 9601 "tcc_bootstrap.c"
 case 5: 
 var $23=$a; //@line 9602 "tcc_bootstrap.c"
 var $24=((($23)-(8))|0); //@line 9602 "tcc_bootstrap.c"
 $i=$24; //@line 9602 "tcc_bootstrap.c"
 var $25=$sr; //@line 9603 "tcc_bootstrap.c"
 var $26=(($25+4)|0); //@line 9603 "tcc_bootstrap.c"
 var $27=HEAP32[(($26)>>2)]; //@line 9603 "tcc_bootstrap.c"
 var $28=$a; //@line 9603 "tcc_bootstrap.c"
 var $29=(($27+$28)|0); //@line 9603 "tcc_bootstrap.c"
 var $30=$29; //@line 9603 "tcc_bootstrap.c"
 var $31=(($30)|0); //@line 9603 "tcc_bootstrap.c"
 var $32=HEAP32[(($31)>>2)]; //@line 9603 "tcc_bootstrap.c"
 $addr=$32; //@line 9603 "tcc_bootstrap.c"
 label=6;break; //@line 9604 "tcc_bootstrap.c"
 case 6: 
 var $34=$i; //@line 9604 "tcc_bootstrap.c"
 var $35=$2; //@line 9604 "tcc_bootstrap.c"
 var $36=($34|0)>=($35|0); //@line 9604 "tcc_bootstrap.c"
 if($36){label=7;break;}else{var $49=0;label=8;break;} //@line 9604 "tcc_bootstrap.c"
 case 7: 
 var $38=$sr; //@line 9604 "tcc_bootstrap.c"
 var $39=(($38+4)|0); //@line 9604 "tcc_bootstrap.c"
 var $40=HEAP32[(($39)>>2)]; //@line 9604 "tcc_bootstrap.c"
 var $41=$i; //@line 9604 "tcc_bootstrap.c"
 var $42=(($40+$41)|0); //@line 9604 "tcc_bootstrap.c"
 var $43=$42; //@line 9604 "tcc_bootstrap.c"
 var $44=(($43)|0); //@line 9604 "tcc_bootstrap.c"
 var $45=HEAP32[(($44)>>2)]; //@line 9604 "tcc_bootstrap.c"
 var $46=$addr; //@line 9604 "tcc_bootstrap.c"
 var $47=($45>>>0)>($46>>>0); //@line 9604 "tcc_bootstrap.c"
 var $49=$47;label=8;break;
 case 8: 
 var $49;
 if($49){label=9;break;}else{label=11;break;}
 case 9: 
 var $51=$sr; //@line 9606 "tcc_bootstrap.c"
 var $52=(($51+4)|0); //@line 9606 "tcc_bootstrap.c"
 var $53=HEAP32[(($52)>>2)]; //@line 9606 "tcc_bootstrap.c"
 var $54=$a; //@line 9606 "tcc_bootstrap.c"
 var $55=(($53+$54)|0); //@line 9606 "tcc_bootstrap.c"
 var $56=$55; //@line 9606 "tcc_bootstrap.c"
 var $57=$tmp; //@line 9606 "tcc_bootstrap.c"
 var $58=$56; //@line 9606 "tcc_bootstrap.c"
 assert(8 % 1 === 0);HEAP32[(($57)>>2)]=HEAP32[(($58)>>2)];HEAP32[((($57)+(4))>>2)]=HEAP32[((($58)+(4))>>2)]; //@line 9606 "tcc_bootstrap.c"
 var $59=$sr; //@line 9607 "tcc_bootstrap.c"
 var $60=(($59+4)|0); //@line 9607 "tcc_bootstrap.c"
 var $61=HEAP32[(($60)>>2)]; //@line 9607 "tcc_bootstrap.c"
 var $62=$a; //@line 9607 "tcc_bootstrap.c"
 var $63=(($61+$62)|0); //@line 9607 "tcc_bootstrap.c"
 var $64=$63; //@line 9607 "tcc_bootstrap.c"
 var $65=$sr; //@line 9607 "tcc_bootstrap.c"
 var $66=(($65+4)|0); //@line 9607 "tcc_bootstrap.c"
 var $67=HEAP32[(($66)>>2)]; //@line 9607 "tcc_bootstrap.c"
 var $68=$i; //@line 9607 "tcc_bootstrap.c"
 var $69=(($67+$68)|0); //@line 9607 "tcc_bootstrap.c"
 var $70=$69; //@line 9607 "tcc_bootstrap.c"
 var $71=$64; //@line 9607 "tcc_bootstrap.c"
 var $72=$70; //@line 9607 "tcc_bootstrap.c"
 assert(8 % 1 === 0);HEAP32[(($71)>>2)]=HEAP32[(($72)>>2)];HEAP32[((($71)+(4))>>2)]=HEAP32[((($72)+(4))>>2)]; //@line 9607 "tcc_bootstrap.c"
 var $73=$sr; //@line 9608 "tcc_bootstrap.c"
 var $74=(($73+4)|0); //@line 9608 "tcc_bootstrap.c"
 var $75=HEAP32[(($74)>>2)]; //@line 9608 "tcc_bootstrap.c"
 var $76=$i; //@line 9608 "tcc_bootstrap.c"
 var $77=(($75+$76)|0); //@line 9608 "tcc_bootstrap.c"
 var $78=$77; //@line 9608 "tcc_bootstrap.c"
 var $79=$78; //@line 9608 "tcc_bootstrap.c"
 var $80=$tmp; //@line 9608 "tcc_bootstrap.c"
 assert(8 % 1 === 0);HEAP32[(($79)>>2)]=HEAP32[(($80)>>2)];HEAP32[((($79)+(4))>>2)]=HEAP32[((($80)+(4))>>2)]; //@line 9608 "tcc_bootstrap.c"
 label=10;break; //@line 9609 "tcc_bootstrap.c"
 case 10: 
 var $82=$i; //@line 9605 "tcc_bootstrap.c"
 var $83=((($82)-(8))|0); //@line 9605 "tcc_bootstrap.c"
 $i=$83; //@line 9605 "tcc_bootstrap.c"
 label=6;break; //@line 9605 "tcc_bootstrap.c"
 case 11: 
 label=12;break; //@line 9610 "tcc_bootstrap.c"
 case 12: 
 var $86=$a; //@line 9601 "tcc_bootstrap.c"
 var $87=((($86)+(8))|0); //@line 9601 "tcc_bootstrap.c"
 $a=$87; //@line 9601 "tcc_bootstrap.c"
 label=4;break; //@line 9601 "tcc_bootstrap.c"
 case 13: 
 var $89=$sr; //@line 9611 "tcc_bootstrap.c"
 var $90=(($89+4)|0); //@line 9611 "tcc_bootstrap.c"
 var $91=HEAP32[(($90)>>2)]; //@line 9611 "tcc_bootstrap.c"
 var $92=$2; //@line 9611 "tcc_bootstrap.c"
 var $93=(($91+$92)|0); //@line 9611 "tcc_bootstrap.c"
 var $94=$93; //@line 9611 "tcc_bootstrap.c"
 $r=$94; //@line 9611 "tcc_bootstrap.c"
 var $95=$r; //@line 9612 "tcc_bootstrap.c"
 $dest=$95; //@line 9612 "tcc_bootstrap.c"
 label=14;break; //@line 9613 "tcc_bootstrap.c"
 case 14: 
 var $97=$r; //@line 9613 "tcc_bootstrap.c"
 var $98=$sr; //@line 9613 "tcc_bootstrap.c"
 var $99=(($98+4)|0); //@line 9613 "tcc_bootstrap.c"
 var $100=HEAP32[(($99)>>2)]; //@line 9613 "tcc_bootstrap.c"
 var $101=$sr; //@line 9613 "tcc_bootstrap.c"
 var $102=(($101)|0); //@line 9613 "tcc_bootstrap.c"
 var $103=HEAP32[(($102)>>2)]; //@line 9613 "tcc_bootstrap.c"
 var $104=(($100+$103)|0); //@line 9613 "tcc_bootstrap.c"
 var $105=$104; //@line 9613 "tcc_bootstrap.c"
 var $106=($97>>>0)<($105>>>0); //@line 9613 "tcc_bootstrap.c"
 if($106){label=15;break;}else{label=19;break;} //@line 9613 "tcc_bootstrap.c"
 case 15: 
 var $108=$dest; //@line 9614 "tcc_bootstrap.c"
 var $109=(($108)|0); //@line 9614 "tcc_bootstrap.c"
 var $110=HEAP32[(($109)>>2)]; //@line 9614 "tcc_bootstrap.c"
 var $111=$r; //@line 9614 "tcc_bootstrap.c"
 var $112=(($111)|0); //@line 9614 "tcc_bootstrap.c"
 var $113=HEAP32[(($112)>>2)]; //@line 9614 "tcc_bootstrap.c"
 var $114=($110|0)!=($113|0); //@line 9614 "tcc_bootstrap.c"
 if($114){label=16;break;}else{label=17;break;} //@line 9614 "tcc_bootstrap.c"
 case 16: 
 var $116=$dest; //@line 9615 "tcc_bootstrap.c"
 var $117=(($116+8)|0); //@line 9615 "tcc_bootstrap.c"
 $dest=$117; //@line 9615 "tcc_bootstrap.c"
 label=17;break; //@line 9615 "tcc_bootstrap.c"
 case 17: 
 var $119=$dest; //@line 9616 "tcc_bootstrap.c"
 var $120=$r; //@line 9616 "tcc_bootstrap.c"
 var $121=$119; //@line 9616 "tcc_bootstrap.c"
 var $122=$120; //@line 9616 "tcc_bootstrap.c"
 assert(8 % 1 === 0);HEAP32[(($121)>>2)]=HEAP32[(($122)>>2)];HEAP32[((($121)+(4))>>2)]=HEAP32[((($122)+(4))>>2)]; //@line 9616 "tcc_bootstrap.c"
 label=18;break; //@line 9617 "tcc_bootstrap.c"
 case 18: 
 var $124=$r; //@line 9613 "tcc_bootstrap.c"
 var $125=(($124+8)|0); //@line 9613 "tcc_bootstrap.c"
 $r=$125; //@line 9613 "tcc_bootstrap.c"
 label=14;break; //@line 9613 "tcc_bootstrap.c"
 case 19: 
 var $127=$dest; //@line 9618 "tcc_bootstrap.c"
 var $128=$127; //@line 9618 "tcc_bootstrap.c"
 var $129=$sr; //@line 9618 "tcc_bootstrap.c"
 var $130=(($129+4)|0); //@line 9618 "tcc_bootstrap.c"
 var $131=HEAP32[(($130)>>2)]; //@line 9618 "tcc_bootstrap.c"
 var $132=$128; //@line 9618 "tcc_bootstrap.c"
 var $133=$131; //@line 9618 "tcc_bootstrap.c"
 var $134=((($132)-($133))|0); //@line 9618 "tcc_bootstrap.c"
 var $135=((($134)+(8))|0); //@line 9618 "tcc_bootstrap.c"
 var $136=$sr; //@line 9618 "tcc_bootstrap.c"
 var $137=(($136)|0); //@line 9618 "tcc_bootstrap.c"
 HEAP32[(($137)>>2)]=$135; //@line 9618 "tcc_bootstrap.c"
 label=20;break; //@line 9618 "tcc_bootstrap.c"
 case 20: 
 STACKTOP=sp;return; //@line 9618 "tcc_bootstrap.c"
  default: assert(0, "bad label: " + label);
 }

}


function _parse_init_elem($expr_type){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $saved_global_expr;
 $1=$expr_type;
 var $2=$1; //@line 8499 "tcc_bootstrap.c"
 if(($2|0)==1){ label=2;break;}else if(($2|0)==2){ label=7;break;}else{label=8;break;}
 case 2: 
 var $4=HEAP32[((76576)>>2)]; //@line 8501 "tcc_bootstrap.c"
 $saved_global_expr=$4; //@line 8501 "tcc_bootstrap.c"
 HEAP32[((76576)>>2)]=1; //@line 8502 "tcc_bootstrap.c"
 _expr_const1(); //@line 8503 "tcc_bootstrap.c"
 var $5=$saved_global_expr; //@line 8504 "tcc_bootstrap.c"
 HEAP32[((76576)>>2)]=$5; //@line 8504 "tcc_bootstrap.c"
 var $6=HEAP32[((9288)>>2)]; //@line 8505 "tcc_bootstrap.c"
 var $7=(($6+8)|0); //@line 8505 "tcc_bootstrap.c"
 var $8=HEAP16[(($7)>>1)]; //@line 8505 "tcc_bootstrap.c"
 var $9=($8&65535); //@line 8505 "tcc_bootstrap.c"
 var $10=$9&319; //@line 8505 "tcc_bootstrap.c"
 var $11=($10|0)!=48; //@line 8505 "tcc_bootstrap.c"
 if($11){label=3;break;}else{label=6;break;} //@line 8505 "tcc_bootstrap.c"
 case 3: 
 var $13=HEAP32[((9288)>>2)]; //@line 8505 "tcc_bootstrap.c"
 var $14=(($13+8)|0); //@line 8505 "tcc_bootstrap.c"
 var $15=HEAP16[(($14)>>1)]; //@line 8505 "tcc_bootstrap.c"
 var $16=($15&65535); //@line 8505 "tcc_bootstrap.c"
 var $17=$16&768; //@line 8505 "tcc_bootstrap.c"
 var $18=($17|0)!=768; //@line 8505 "tcc_bootstrap.c"
 if($18){label=5;break;}else{label=4;break;} //@line 8505 "tcc_bootstrap.c"
 case 4: 
 var $20=HEAP32[((9288)>>2)]; //@line 8505 "tcc_bootstrap.c"
 var $21=(($20+32)|0); //@line 8505 "tcc_bootstrap.c"
 var $22=HEAP32[(($21)>>2)]; //@line 8505 "tcc_bootstrap.c"
 var $23=(($22)|0); //@line 8505 "tcc_bootstrap.c"
 var $24=HEAP32[(($23)>>2)]; //@line 8505 "tcc_bootstrap.c"
 var $25=($24|0)<268435456; //@line 8505 "tcc_bootstrap.c"
 if($25){label=5;break;}else{label=6;break;} //@line 8505 "tcc_bootstrap.c"
 case 5: 
 _tcc_error(5424,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs; //@line 8509 "tcc_bootstrap.c"
 label=6;break; //@line 8509 "tcc_bootstrap.c"
 case 6: 
 label=8;break; //@line 8510 "tcc_bootstrap.c"
 case 7: 
 _expr_eq(); //@line 8512 "tcc_bootstrap.c"
 label=8;break; //@line 8513 "tcc_bootstrap.c"
 case 8: 
 STACKTOP=sp;return; //@line 8515 "tcc_bootstrap.c"
  default: assert(0, "bad label: " + label);
 }

}


function _decl_designator($type,$sec,$c,$cur_field,$size_only,$al){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 var $s;
 var $f;
 var $index;
 var $index_last;
 var $align=sp;
 var $l;
 var $nb_elems;
 var $elem_size;
 var $corig;
 var $c_end;
 var $src;
 var $dst;
 var $i;
 $1=$type;
 $2=$sec;
 $3=$c;
 $4=$cur_field;
 $5=$size_only;
 $6=$al;
 var $7=$3; //@line 8532 "tcc_bootstrap.c"
 $corig=$7; //@line 8532 "tcc_bootstrap.c"
 $elem_size=0; //@line 8534 "tcc_bootstrap.c"
 $nb_elems=1; //@line 8535 "tcc_bootstrap.c"
 var $8=HEAP32[((2848)>>2)]; //@line 8536 "tcc_bootstrap.c"
 var $9=($8|0)!=0; //@line 8536 "tcc_bootstrap.c"
 if($9){label=2;break;}else{label=4;break;} //@line 8536 "tcc_bootstrap.c"
 case 2: 
 var $11=_is_label(); //@line 8536 "tcc_bootstrap.c"
 $l=$11; //@line 8536 "tcc_bootstrap.c"
 var $12=($11|0)!=0; //@line 8536 "tcc_bootstrap.c"
 if($12){label=3;break;}else{label=4;break;} //@line 8536 "tcc_bootstrap.c"
 case 3: 
 label=25;break; //@line 8537 "tcc_bootstrap.c"
 case 4: 
 label=5;break; //@line 8539 "tcc_bootstrap.c"
 case 5: 
 var $16=$nb_elems; //@line 8539 "tcc_bootstrap.c"
 var $17=($16|0)==1; //@line 8539 "tcc_bootstrap.c"
 if($17){label=6;break;}else{var $27=0;label=9;break;} //@line 8539 "tcc_bootstrap.c"
 case 6: 
 var $19=HEAP32[((10472)>>2)]; //@line 8539 "tcc_bootstrap.c"
 var $20=($19|0)==91; //@line 8539 "tcc_bootstrap.c"
 if($20){var $25=1;label=8;break;}else{label=7;break;} //@line 8539 "tcc_bootstrap.c"
 case 7: 
 var $22=HEAP32[((10472)>>2)]; //@line 8539 "tcc_bootstrap.c"
 var $23=($22|0)==46; //@line 8539 "tcc_bootstrap.c"
 var $25=$23;label=8;break; //@line 8539 "tcc_bootstrap.c"
 case 8: 
 var $25;
 var $27=$25;label=9;break;
 case 9: 
 var $27;
 if($27){label=10;break;}else{label=33;break;}
 case 10: 
 var $29=HEAP32[((10472)>>2)]; //@line 8540 "tcc_bootstrap.c"
 var $30=($29|0)==91; //@line 8540 "tcc_bootstrap.c"
 if($30){label=11;break;}else{label=24;break;} //@line 8540 "tcc_bootstrap.c"
 case 11: 
 var $32=$1; //@line 8541 "tcc_bootstrap.c"
 var $33=(($32)|0); //@line 8541 "tcc_bootstrap.c"
 var $34=HEAP32[(($33)>>2)]; //@line 8541 "tcc_bootstrap.c"
 var $35=$34&64; //@line 8541 "tcc_bootstrap.c"
 var $36=($35|0)!=0; //@line 8541 "tcc_bootstrap.c"
 if($36){label=13;break;}else{label=12;break;} //@line 8541 "tcc_bootstrap.c"
 case 12: 
 _expect(5576); //@line 8542 "tcc_bootstrap.c"
 label=13;break; //@line 8542 "tcc_bootstrap.c"
 case 13: 
 _next(); //@line 8543 "tcc_bootstrap.c"
 var $39=_expr_const(); //@line 8544 "tcc_bootstrap.c"
 $index_last=$39; //@line 8544 "tcc_bootstrap.c"
 $index=$39; //@line 8544 "tcc_bootstrap.c"
 var $40=HEAP32[((10472)>>2)]; //@line 8545 "tcc_bootstrap.c"
 var $41=($40|0)==200; //@line 8545 "tcc_bootstrap.c"
 if($41){label=14;break;}else{label=16;break;} //@line 8545 "tcc_bootstrap.c"
 case 14: 
 var $43=HEAP32[((2848)>>2)]; //@line 8545 "tcc_bootstrap.c"
 var $44=($43|0)!=0; //@line 8545 "tcc_bootstrap.c"
 if($44){label=15;break;}else{label=16;break;} //@line 8545 "tcc_bootstrap.c"
 case 15: 
 _next(); //@line 8546 "tcc_bootstrap.c"
 var $46=_expr_const(); //@line 8547 "tcc_bootstrap.c"
 $index_last=$46; //@line 8547 "tcc_bootstrap.c"
 label=16;break; //@line 8548 "tcc_bootstrap.c"
 case 16: 
 _skip(93); //@line 8549 "tcc_bootstrap.c"
 var $48=$1; //@line 8550 "tcc_bootstrap.c"
 var $49=(($48+4)|0); //@line 8550 "tcc_bootstrap.c"
 var $50=HEAP32[(($49)>>2)]; //@line 8550 "tcc_bootstrap.c"
 $s=$50; //@line 8550 "tcc_bootstrap.c"
 var $51=$index; //@line 8551 "tcc_bootstrap.c"
 var $52=($51|0)<0; //@line 8551 "tcc_bootstrap.c"
 if($52){label=20;break;}else{label=17;break;} //@line 8551 "tcc_bootstrap.c"
 case 17: 
 var $54=$s; //@line 8551 "tcc_bootstrap.c"
 var $55=(($54+8)|0); //@line 8551 "tcc_bootstrap.c"
 var $56=$55; //@line 8551 "tcc_bootstrap.c"
 var $57=(($56)|0); //@line 8551 "tcc_bootstrap.c"
 var $58=HEAP32[(($57)>>2)]; //@line 8551 "tcc_bootstrap.c"
 var $59=($58|0)>=0; //@line 8551 "tcc_bootstrap.c"
 if($59){label=18;break;}else{label=19;break;} //@line 8551 "tcc_bootstrap.c"
 case 18: 
 var $61=$index_last; //@line 8551 "tcc_bootstrap.c"
 var $62=$s; //@line 8551 "tcc_bootstrap.c"
 var $63=(($62+8)|0); //@line 8551 "tcc_bootstrap.c"
 var $64=$63; //@line 8551 "tcc_bootstrap.c"
 var $65=(($64)|0); //@line 8551 "tcc_bootstrap.c"
 var $66=HEAP32[(($65)>>2)]; //@line 8551 "tcc_bootstrap.c"
 var $67=($61|0)>=($66|0); //@line 8551 "tcc_bootstrap.c"
 if($67){label=20;break;}else{label=19;break;} //@line 8551 "tcc_bootstrap.c"
 case 19: 
 var $69=$index_last; //@line 8551 "tcc_bootstrap.c"
 var $70=$index; //@line 8551 "tcc_bootstrap.c"
 var $71=($69|0)<($70|0); //@line 8551 "tcc_bootstrap.c"
 if($71){label=20;break;}else{label=21;break;} //@line 8551 "tcc_bootstrap.c"
 case 20: 
 _tcc_error(5560,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs; //@line 8553 "tcc_bootstrap.c"
 label=21;break; //@line 8553 "tcc_bootstrap.c"
 case 21: 
 var $74=$4; //@line 8554 "tcc_bootstrap.c"
 var $75=($74|0)!=0; //@line 8554 "tcc_bootstrap.c"
 if($75){label=22;break;}else{label=23;break;} //@line 8554 "tcc_bootstrap.c"
 case 22: 
 var $77=$index_last; //@line 8555 "tcc_bootstrap.c"
 var $78=$4; //@line 8555 "tcc_bootstrap.c"
 var $79=HEAP32[(($78)>>2)]; //@line 8555 "tcc_bootstrap.c"
 var $80=(($79+8)|0); //@line 8555 "tcc_bootstrap.c"
 var $81=$80; //@line 8555 "tcc_bootstrap.c"
 var $82=(($81)|0); //@line 8555 "tcc_bootstrap.c"
 HEAP32[(($82)>>2)]=$77; //@line 8555 "tcc_bootstrap.c"
 label=23;break; //@line 8555 "tcc_bootstrap.c"
 case 23: 
 var $84=$1; //@line 8556 "tcc_bootstrap.c"
 var $85=_pointed_type($84); //@line 8556 "tcc_bootstrap.c"
 $1=$85; //@line 8556 "tcc_bootstrap.c"
 var $86=$1; //@line 8557 "tcc_bootstrap.c"
 var $87=_type_size($86,$align); //@line 8557 "tcc_bootstrap.c"
 $elem_size=$87; //@line 8557 "tcc_bootstrap.c"
 var $88=$index; //@line 8558 "tcc_bootstrap.c"
 var $89=$elem_size; //@line 8558 "tcc_bootstrap.c"
 var $90=(Math_imul($88,$89)|0); //@line 8558 "tcc_bootstrap.c"
 var $91=$3; //@line 8558 "tcc_bootstrap.c"
 var $92=((($91)+($90))|0); //@line 8558 "tcc_bootstrap.c"
 $3=$92; //@line 8558 "tcc_bootstrap.c"
 var $93=$index_last; //@line 8559 "tcc_bootstrap.c"
 var $94=$index; //@line 8559 "tcc_bootstrap.c"
 var $95=((($93)-($94))|0); //@line 8559 "tcc_bootstrap.c"
 var $96=((($95)+(1))|0); //@line 8559 "tcc_bootstrap.c"
 $nb_elems=$96; //@line 8559 "tcc_bootstrap.c"
 label=32;break; //@line 8560 "tcc_bootstrap.c"
 case 24: 
 _next(); //@line 8561 "tcc_bootstrap.c"
 var $98=HEAP32[((10472)>>2)]; //@line 8562 "tcc_bootstrap.c"
 $l=$98; //@line 8562 "tcc_bootstrap.c"
 label=25;break; //@line 8562 "tcc_bootstrap.c"
 case 25: 
 _next(); //@line 8564 "tcc_bootstrap.c"
 var $100=$1; //@line 8565 "tcc_bootstrap.c"
 var $101=(($100)|0); //@line 8565 "tcc_bootstrap.c"
 var $102=HEAP32[(($101)>>2)]; //@line 8565 "tcc_bootstrap.c"
 var $103=$102&15; //@line 8565 "tcc_bootstrap.c"
 var $104=($103|0)!=7; //@line 8565 "tcc_bootstrap.c"
 if($104){label=26;break;}else{label=27;break;} //@line 8565 "tcc_bootstrap.c"
 case 26: 
 _expect(5536); //@line 8566 "tcc_bootstrap.c"
 label=27;break; //@line 8566 "tcc_bootstrap.c"
 case 27: 
 var $107=$1; //@line 8567 "tcc_bootstrap.c"
 var $108=$l; //@line 8567 "tcc_bootstrap.c"
 var $109=_find_field($107,$108); //@line 8567 "tcc_bootstrap.c"
 $f=$109; //@line 8567 "tcc_bootstrap.c"
 var $110=$f; //@line 8568 "tcc_bootstrap.c"
 var $111=($110|0)!=0; //@line 8568 "tcc_bootstrap.c"
 if($111){label=29;break;}else{label=28;break;} //@line 8568 "tcc_bootstrap.c"
 case 28: 
 _expect(5528); //@line 8569 "tcc_bootstrap.c"
 label=29;break; //@line 8569 "tcc_bootstrap.c"
 case 29: 
 var $114=$4; //@line 8570 "tcc_bootstrap.c"
 var $115=($114|0)!=0; //@line 8570 "tcc_bootstrap.c"
 if($115){label=30;break;}else{label=31;break;} //@line 8570 "tcc_bootstrap.c"
 case 30: 
 var $117=$f; //@line 8571 "tcc_bootstrap.c"
 var $118=$4; //@line 8571 "tcc_bootstrap.c"
 HEAP32[(($118)>>2)]=$117; //@line 8571 "tcc_bootstrap.c"
 label=31;break; //@line 8571 "tcc_bootstrap.c"
 case 31: 
 var $120=$f; //@line 8572 "tcc_bootstrap.c"
 var $121=(($120+16)|0); //@line 8572 "tcc_bootstrap.c"
 $1=$121; //@line 8572 "tcc_bootstrap.c"
 var $122=$f; //@line 8573 "tcc_bootstrap.c"
 var $123=(($122+8)|0); //@line 8573 "tcc_bootstrap.c"
 var $124=$123; //@line 8573 "tcc_bootstrap.c"
 var $125=(($124)|0); //@line 8573 "tcc_bootstrap.c"
 var $126=HEAP32[(($125)>>2)]; //@line 8573 "tcc_bootstrap.c"
 var $127=$3; //@line 8573 "tcc_bootstrap.c"
 var $128=((($127)+($126))|0); //@line 8573 "tcc_bootstrap.c"
 $3=$128; //@line 8573 "tcc_bootstrap.c"
 label=32;break;
 case 32: 
 $4=0; //@line 8575 "tcc_bootstrap.c"
 label=5;break; //@line 8576 "tcc_bootstrap.c"
 case 33: 
 var $131=$4; //@line 8577 "tcc_bootstrap.c"
 var $132=($131|0)!=0; //@line 8577 "tcc_bootstrap.c"
 if($132){label=40;break;}else{label=34;break;} //@line 8577 "tcc_bootstrap.c"
 case 34: 
 var $134=HEAP32[((10472)>>2)]; //@line 8578 "tcc_bootstrap.c"
 var $135=($134|0)==61; //@line 8578 "tcc_bootstrap.c"
 if($135){label=35;break;}else{label=36;break;} //@line 8578 "tcc_bootstrap.c"
 case 35: 
 _next(); //@line 8579 "tcc_bootstrap.c"
 label=39;break; //@line 8580 "tcc_bootstrap.c"
 case 36: 
 var $138=HEAP32[((2848)>>2)]; //@line 8580 "tcc_bootstrap.c"
 var $139=($138|0)!=0; //@line 8580 "tcc_bootstrap.c"
 if($139){label=38;break;}else{label=37;break;} //@line 8580 "tcc_bootstrap.c"
 case 37: 
 _expect(5520); //@line 8581 "tcc_bootstrap.c"
 label=38;break; //@line 8582 "tcc_bootstrap.c"
 case 38: 
 label=39;break;
 case 39: 
 label=55;break; //@line 8583 "tcc_bootstrap.c"
 case 40: 
 var $144=$1; //@line 8584 "tcc_bootstrap.c"
 var $145=(($144)|0); //@line 8584 "tcc_bootstrap.c"
 var $146=HEAP32[(($145)>>2)]; //@line 8584 "tcc_bootstrap.c"
 var $147=$146&64; //@line 8584 "tcc_bootstrap.c"
 var $148=($147|0)!=0; //@line 8584 "tcc_bootstrap.c"
 if($148){label=41;break;}else{label=45;break;} //@line 8584 "tcc_bootstrap.c"
 case 41: 
 var $150=$4; //@line 8585 "tcc_bootstrap.c"
 var $151=HEAP32[(($150)>>2)]; //@line 8585 "tcc_bootstrap.c"
 var $152=(($151+8)|0); //@line 8585 "tcc_bootstrap.c"
 var $153=$152; //@line 8585 "tcc_bootstrap.c"
 var $154=(($153)|0); //@line 8585 "tcc_bootstrap.c"
 var $155=HEAP32[(($154)>>2)]; //@line 8585 "tcc_bootstrap.c"
 $index=$155; //@line 8585 "tcc_bootstrap.c"
 var $156=$1; //@line 8586 "tcc_bootstrap.c"
 var $157=(($156+4)|0); //@line 8586 "tcc_bootstrap.c"
 var $158=HEAP32[(($157)>>2)]; //@line 8586 "tcc_bootstrap.c"
 var $159=(($158+8)|0); //@line 8586 "tcc_bootstrap.c"
 var $160=$159; //@line 8586 "tcc_bootstrap.c"
 var $161=(($160)|0); //@line 8586 "tcc_bootstrap.c"
 var $162=HEAP32[(($161)>>2)]; //@line 8586 "tcc_bootstrap.c"
 var $163=($162|0)>=0; //@line 8586 "tcc_bootstrap.c"
 if($163){label=42;break;}else{label=44;break;} //@line 8586 "tcc_bootstrap.c"
 case 42: 
 var $165=$index; //@line 8586 "tcc_bootstrap.c"
 var $166=$1; //@line 8586 "tcc_bootstrap.c"
 var $167=(($166+4)|0); //@line 8586 "tcc_bootstrap.c"
 var $168=HEAP32[(($167)>>2)]; //@line 8586 "tcc_bootstrap.c"
 var $169=(($168+8)|0); //@line 8586 "tcc_bootstrap.c"
 var $170=$169; //@line 8586 "tcc_bootstrap.c"
 var $171=(($170)|0); //@line 8586 "tcc_bootstrap.c"
 var $172=HEAP32[(($171)>>2)]; //@line 8586 "tcc_bootstrap.c"
 var $173=($165|0)>=($172|0); //@line 8586 "tcc_bootstrap.c"
 if($173){label=43;break;}else{label=44;break;} //@line 8586 "tcc_bootstrap.c"
 case 43: 
 _tcc_error(5504,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs; //@line 8587 "tcc_bootstrap.c"
 label=44;break; //@line 8587 "tcc_bootstrap.c"
 case 44: 
 var $176=$1; //@line 8588 "tcc_bootstrap.c"
 var $177=_pointed_type($176); //@line 8588 "tcc_bootstrap.c"
 $1=$177; //@line 8588 "tcc_bootstrap.c"
 var $178=$index; //@line 8589 "tcc_bootstrap.c"
 var $179=$1; //@line 8589 "tcc_bootstrap.c"
 var $180=_type_size($179,$align); //@line 8589 "tcc_bootstrap.c"
 var $181=(Math_imul($178,$180)|0); //@line 8589 "tcc_bootstrap.c"
 var $182=$3; //@line 8589 "tcc_bootstrap.c"
 var $183=((($182)+($181))|0); //@line 8589 "tcc_bootstrap.c"
 $3=$183; //@line 8589 "tcc_bootstrap.c"
 label=54;break; //@line 8590 "tcc_bootstrap.c"
 case 45: 
 var $185=$4; //@line 8591 "tcc_bootstrap.c"
 var $186=HEAP32[(($185)>>2)]; //@line 8591 "tcc_bootstrap.c"
 $f=$186; //@line 8591 "tcc_bootstrap.c"
 label=46;break; //@line 8592 "tcc_bootstrap.c"
 case 46: 
 var $188=$f; //@line 8592 "tcc_bootstrap.c"
 var $189=($188|0)!=0; //@line 8592 "tcc_bootstrap.c"
 if($189){label=47;break;}else{var $204=0;label=49;break;} //@line 8592 "tcc_bootstrap.c"
 case 47: 
 var $191=$f; //@line 8592 "tcc_bootstrap.c"
 var $192=(($191)|0); //@line 8592 "tcc_bootstrap.c"
 var $193=HEAP32[(($192)>>2)]; //@line 8592 "tcc_bootstrap.c"
 var $194=$193&268435456; //@line 8592 "tcc_bootstrap.c"
 var $195=($194|0)!=0; //@line 8592 "tcc_bootstrap.c"
 if($195){label=48;break;}else{var $204=0;label=49;break;} //@line 8592 "tcc_bootstrap.c"
 case 48: 
 var $197=$f; //@line 8592 "tcc_bootstrap.c"
 var $198=(($197+16)|0); //@line 8592 "tcc_bootstrap.c"
 var $199=(($198)|0); //@line 8592 "tcc_bootstrap.c"
 var $200=HEAP32[(($199)>>2)]; //@line 8592 "tcc_bootstrap.c"
 var $201=$200&128; //@line 8592 "tcc_bootstrap.c"
 var $202=($201|0)!=0; //@line 8592 "tcc_bootstrap.c"
 var $204=$202;label=49;break;
 case 49: 
 var $204;
 if($204){label=50;break;}else{label=51;break;}
 case 50: 
 var $206=$f; //@line 8593 "tcc_bootstrap.c"
 var $207=(($206+24)|0); //@line 8593 "tcc_bootstrap.c"
 var $208=$207; //@line 8593 "tcc_bootstrap.c"
 var $209=HEAP32[(($208)>>2)]; //@line 8593 "tcc_bootstrap.c"
 $f=$209; //@line 8593 "tcc_bootstrap.c"
 var $210=$4; //@line 8593 "tcc_bootstrap.c"
 HEAP32[(($210)>>2)]=$209; //@line 8593 "tcc_bootstrap.c"
 label=46;break; //@line 8593 "tcc_bootstrap.c"
 case 51: 
 var $212=$f; //@line 8594 "tcc_bootstrap.c"
 var $213=($212|0)!=0; //@line 8594 "tcc_bootstrap.c"
 if($213){label=53;break;}else{label=52;break;} //@line 8594 "tcc_bootstrap.c"
 case 52: 
 _tcc_error(5480,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs; //@line 8595 "tcc_bootstrap.c"
 label=53;break; //@line 8595 "tcc_bootstrap.c"
 case 53: 
 var $216=$f; //@line 8596 "tcc_bootstrap.c"
 var $217=(($216+16)|0); //@line 8596 "tcc_bootstrap.c"
 $1=$217; //@line 8596 "tcc_bootstrap.c"
 var $218=$f; //@line 8597 "tcc_bootstrap.c"
 var $219=(($218+8)|0); //@line 8597 "tcc_bootstrap.c"
 var $220=$219; //@line 8597 "tcc_bootstrap.c"
 var $221=(($220)|0); //@line 8597 "tcc_bootstrap.c"
 var $222=HEAP32[(($221)>>2)]; //@line 8597 "tcc_bootstrap.c"
 var $223=$3; //@line 8597 "tcc_bootstrap.c"
 var $224=((($223)+($222))|0); //@line 8597 "tcc_bootstrap.c"
 $3=$224; //@line 8597 "tcc_bootstrap.c"
 label=54;break;
 case 54: 
 label=55;break;
 case 55: 
 var $227=$5; //@line 8600 "tcc_bootstrap.c"
 var $228=($227|0)!=0; //@line 8600 "tcc_bootstrap.c"
 if($228){label=58;break;}else{label=56;break;} //@line 8600 "tcc_bootstrap.c"
 case 56: 
 var $230=$3; //@line 8600 "tcc_bootstrap.c"
 var $231=$corig; //@line 8600 "tcc_bootstrap.c"
 var $232=((($230)-($231))|0); //@line 8600 "tcc_bootstrap.c"
 var $233=$6; //@line 8600 "tcc_bootstrap.c"
 var $234=($232>>>0)>($233>>>0); //@line 8600 "tcc_bootstrap.c"
 if($234){label=57;break;}else{label=58;break;} //@line 8600 "tcc_bootstrap.c"
 case 57: 
 var $236=$2; //@line 8601 "tcc_bootstrap.c"
 var $237=$corig; //@line 8601 "tcc_bootstrap.c"
 var $238=$6; //@line 8601 "tcc_bootstrap.c"
 var $239=((($237)+($238))|0); //@line 8601 "tcc_bootstrap.c"
 var $240=$3; //@line 8601 "tcc_bootstrap.c"
 var $241=$corig; //@line 8601 "tcc_bootstrap.c"
 var $242=((($240)-($241))|0); //@line 8601 "tcc_bootstrap.c"
 var $243=$6; //@line 8601 "tcc_bootstrap.c"
 var $244=((($242)-($243))|0); //@line 8601 "tcc_bootstrap.c"
 _init_putz($236,$239,$244); //@line 8601 "tcc_bootstrap.c"
 label=58;break; //@line 8601 "tcc_bootstrap.c"
 case 58: 
 var $246=$1; //@line 8602 "tcc_bootstrap.c"
 var $247=$2; //@line 8602 "tcc_bootstrap.c"
 var $248=$3; //@line 8602 "tcc_bootstrap.c"
 var $249=$5; //@line 8602 "tcc_bootstrap.c"
 _decl_initializer($246,$247,$248,0,$249); //@line 8602 "tcc_bootstrap.c"
 var $250=$5; //@line 8603 "tcc_bootstrap.c"
 var $251=($250|0)!=0; //@line 8603 "tcc_bootstrap.c"
 if($251){label=76;break;}else{label=59;break;} //@line 8603 "tcc_bootstrap.c"
 case 59: 
 var $253=$nb_elems; //@line 8603 "tcc_bootstrap.c"
 var $254=($253|0)>1; //@line 8603 "tcc_bootstrap.c"
 if($254){label=60;break;}else{label=76;break;} //@line 8603 "tcc_bootstrap.c"
 case 60: 
 var $256=$2; //@line 8607 "tcc_bootstrap.c"
 var $257=($256|0)!=0; //@line 8607 "tcc_bootstrap.c"
 if($257){label=66;break;}else{label=61;break;} //@line 8607 "tcc_bootstrap.c"
 case 61: 
 var $259=$1; //@line 8608 "tcc_bootstrap.c"
 var $260=$3; //@line 8608 "tcc_bootstrap.c"
 _vset($259,306,$260); //@line 8608 "tcc_bootstrap.c"
 $i=1; //@line 8609 "tcc_bootstrap.c"
 label=62;break; //@line 8609 "tcc_bootstrap.c"
 case 62: 
 var $262=$i; //@line 8609 "tcc_bootstrap.c"
 var $263=$nb_elems; //@line 8609 "tcc_bootstrap.c"
 var $264=($262|0)<($263|0); //@line 8609 "tcc_bootstrap.c"
 if($264){label=63;break;}else{label=65;break;} //@line 8609 "tcc_bootstrap.c"
 case 63: 
 var $266=$1; //@line 8610 "tcc_bootstrap.c"
 var $267=$3; //@line 8610 "tcc_bootstrap.c"
 var $268=$elem_size; //@line 8610 "tcc_bootstrap.c"
 var $269=$i; //@line 8610 "tcc_bootstrap.c"
 var $270=(Math_imul($268,$269)|0); //@line 8610 "tcc_bootstrap.c"
 var $271=((($267)+($270))|0); //@line 8610 "tcc_bootstrap.c"
 _vset($266,306,$271); //@line 8610 "tcc_bootstrap.c"
 _vswap(); //@line 8611 "tcc_bootstrap.c"
 _vstore(); //@line 8612 "tcc_bootstrap.c"
 label=64;break; //@line 8613 "tcc_bootstrap.c"
 case 64: 
 var $273=$i; //@line 8609 "tcc_bootstrap.c"
 var $274=((($273)+(1))|0); //@line 8609 "tcc_bootstrap.c"
 $i=$274; //@line 8609 "tcc_bootstrap.c"
 label=62;break; //@line 8609 "tcc_bootstrap.c"
 case 65: 
 _vpop(); //@line 8614 "tcc_bootstrap.c"
 label=75;break; //@line 8615 "tcc_bootstrap.c"
 case 66: 
 var $277=HEAP32[((10616)>>2)]; //@line 8615 "tcc_bootstrap.c"
 var $278=($277|0)>0; //@line 8615 "tcc_bootstrap.c"
 if($278){label=74;break;}else{label=67;break;} //@line 8615 "tcc_bootstrap.c"
 case 67: 
 var $280=$3; //@line 8616 "tcc_bootstrap.c"
 var $281=$nb_elems; //@line 8616 "tcc_bootstrap.c"
 var $282=$elem_size; //@line 8616 "tcc_bootstrap.c"
 var $283=(Math_imul($281,$282)|0); //@line 8616 "tcc_bootstrap.c"
 var $284=((($280)+($283))|0); //@line 8616 "tcc_bootstrap.c"
 $c_end=$284; //@line 8616 "tcc_bootstrap.c"
 var $285=$c_end; //@line 8617 "tcc_bootstrap.c"
 var $286=$2; //@line 8617 "tcc_bootstrap.c"
 var $287=(($286+8)|0); //@line 8617 "tcc_bootstrap.c"
 var $288=HEAP32[(($287)>>2)]; //@line 8617 "tcc_bootstrap.c"
 var $289=($285>>>0)>($288>>>0); //@line 8617 "tcc_bootstrap.c"
 if($289){label=68;break;}else{label=69;break;} //@line 8617 "tcc_bootstrap.c"
 case 68: 
 var $291=$2; //@line 8618 "tcc_bootstrap.c"
 var $292=$c_end; //@line 8618 "tcc_bootstrap.c"
 _section_realloc($291,$292); //@line 8618 "tcc_bootstrap.c"
 label=69;break; //@line 8618 "tcc_bootstrap.c"
 case 69: 
 var $294=$2; //@line 8619 "tcc_bootstrap.c"
 var $295=(($294+4)|0); //@line 8619 "tcc_bootstrap.c"
 var $296=HEAP32[(($295)>>2)]; //@line 8619 "tcc_bootstrap.c"
 var $297=$3; //@line 8619 "tcc_bootstrap.c"
 var $298=(($296+$297)|0); //@line 8619 "tcc_bootstrap.c"
 $src=$298; //@line 8619 "tcc_bootstrap.c"
 var $299=$src; //@line 8620 "tcc_bootstrap.c"
 $dst=$299; //@line 8620 "tcc_bootstrap.c"
 $i=1; //@line 8621 "tcc_bootstrap.c"
 label=70;break; //@line 8621 "tcc_bootstrap.c"
 case 70: 
 var $301=$i; //@line 8621 "tcc_bootstrap.c"
 var $302=$nb_elems; //@line 8621 "tcc_bootstrap.c"
 var $303=($301|0)<($302|0); //@line 8621 "tcc_bootstrap.c"
 if($303){label=71;break;}else{label=73;break;} //@line 8621 "tcc_bootstrap.c"
 case 71: 
 var $305=$elem_size; //@line 8622 "tcc_bootstrap.c"
 var $306=$dst; //@line 8622 "tcc_bootstrap.c"
 var $307=(($306+$305)|0); //@line 8622 "tcc_bootstrap.c"
 $dst=$307; //@line 8622 "tcc_bootstrap.c"
 var $308=$dst; //@line 8623 "tcc_bootstrap.c"
 var $309=$src; //@line 8623 "tcc_bootstrap.c"
 var $310=$elem_size; //@line 8623 "tcc_bootstrap.c"
 assert($310 % 1 === 0);(_memcpy($308, $309, $310)|0); //@line 8623 "tcc_bootstrap.c"
 label=72;break; //@line 8624 "tcc_bootstrap.c"
 case 72: 
 var $312=$i; //@line 8621 "tcc_bootstrap.c"
 var $313=((($312)+(1))|0); //@line 8621 "tcc_bootstrap.c"
 $i=$313; //@line 8621 "tcc_bootstrap.c"
 label=70;break; //@line 8621 "tcc_bootstrap.c"
 case 73: 
 label=74;break; //@line 8625 "tcc_bootstrap.c"
 case 74: 
 label=75;break;
 case 75: 
 label=76;break; //@line 8626 "tcc_bootstrap.c"
 case 76: 
 var $318=$nb_elems; //@line 8627 "tcc_bootstrap.c"
 var $319=$1; //@line 8627 "tcc_bootstrap.c"
 var $320=_type_size($319,$align); //@line 8627 "tcc_bootstrap.c"
 var $321=(Math_imul($318,$320)|0); //@line 8627 "tcc_bootstrap.c"
 var $322=$3; //@line 8627 "tcc_bootstrap.c"
 var $323=((($322)+($321))|0); //@line 8627 "tcc_bootstrap.c"
 $3=$323; //@line 8627 "tcc_bootstrap.c"
 var $324=$3; //@line 8628 "tcc_bootstrap.c"
 var $325=$corig; //@line 8628 "tcc_bootstrap.c"
 var $326=((($324)-($325))|0); //@line 8628 "tcc_bootstrap.c"
 var $327=$6; //@line 8628 "tcc_bootstrap.c"
 var $328=($326>>>0)>($327>>>0); //@line 8628 "tcc_bootstrap.c"
 if($328){label=77;break;}else{label=78;break;} //@line 8628 "tcc_bootstrap.c"
 case 77: 
 var $330=$3; //@line 8629 "tcc_bootstrap.c"
 var $331=$corig; //@line 8629 "tcc_bootstrap.c"
 var $332=((($330)-($331))|0); //@line 8629 "tcc_bootstrap.c"
 $6=$332; //@line 8629 "tcc_bootstrap.c"
 label=78;break; //@line 8629 "tcc_bootstrap.c"
 case 78: 
 var $334=$6; //@line 8630 "tcc_bootstrap.c"
 STACKTOP=sp;return $334; //@line 8630 "tcc_bootstrap.c"
  default: assert(0, "bad label: " + label);
 }

}


function _init_putz($sec,$c,$size){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 $1=$sec;
 $2=$c;
 $3=$size;
 var $4=$1; //@line 8518 "tcc_bootstrap.c"
 var $5=($4|0)!=0; //@line 8518 "tcc_bootstrap.c"
 if($5){label=2;break;}else{label=3;break;} //@line 8518 "tcc_bootstrap.c"
 case 2: 
 label=4;break; //@line 8519 "tcc_bootstrap.c"
 case 3: 
 _vpush_global_sym(76632,388); //@line 8520 "tcc_bootstrap.c"
 var $8=$2; //@line 8521 "tcc_bootstrap.c"
 _vseti(50,$8); //@line 8521 "tcc_bootstrap.c"
 _vpushi(0); //@line 8522 "tcc_bootstrap.c"
 var $9=$3; //@line 8523 "tcc_bootstrap.c"
 _vpushs($9); //@line 8523 "tcc_bootstrap.c"
 _gfunc_call(3); //@line 8524 "tcc_bootstrap.c"
 label=4;break;
 case 4: 
 STACKTOP=sp;return; //@line 8526 "tcc_bootstrap.c"
  default: assert(0, "bad label: " + label);
 }

}


function _macro_subst_tok($tok_str,$nested_list,$s){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+160)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $args=sp;
 var $sa;
 var $sa1;
 var $parlevel;
 var $t;
 var $t1;
 var $spc=(sp)+(8);
 var $str=(sp)+(16);
 var $cstrval;
 var $cval=(sp)+(56);
 var $cstr=(sp)+(72);
 var $buf=(sp)+(88);
 var $saved_parse_flags;
 var $joined_str;
 var $mstr;
 var $ws_str=(sp)+(120);
 var $i;
 $2=$tok_str;
 $3=$nested_list;
 $4=$s;
 var $5=HEAP32[((10472)>>2)]; //@line 3686 "tcc_bootstrap.c"
 var $6=($5|0)==327; //@line 3686 "tcc_bootstrap.c"
 if($6){label=3;break;}else{label=2;break;} //@line 3686 "tcc_bootstrap.c"
 case 2: 
 var $8=HEAP32[((10472)>>2)]; //@line 3686 "tcc_bootstrap.c"
 var $9=($8|0)==333; //@line 3686 "tcc_bootstrap.c"
 if($9){label=3;break;}else{label=7;break;} //@line 3686 "tcc_bootstrap.c"
 case 3: 
 var $11=HEAP32[((10472)>>2)]; //@line 3687 "tcc_bootstrap.c"
 var $12=($11|0)==327; //@line 3687 "tcc_bootstrap.c"
 if($12){label=4;break;}else{label=5;break;} //@line 3687 "tcc_bootstrap.c"
 case 4: 
 var $14=HEAP32[((76648)>>2)]; //@line 3687 "tcc_bootstrap.c"
 var $15=(($14+16)|0); //@line 3687 "tcc_bootstrap.c"
 var $16=HEAP32[(($15)>>2)]; //@line 3687 "tcc_bootstrap.c"
 var $21=$16;label=6;break; //@line 3687 "tcc_bootstrap.c"
 case 5: 
 var $18=HEAP32[((10600)>>2)]; //@line 3687 "tcc_bootstrap.c"
 var $19=((($18)+(1))|0); //@line 3687 "tcc_bootstrap.c"
 HEAP32[((10600)>>2)]=$19; //@line 3687 "tcc_bootstrap.c"
 var $21=$18;label=6;break; //@line 3687 "tcc_bootstrap.c"
 case 6: 
 var $21; //@line 3687 "tcc_bootstrap.c"
 $t=$21; //@line 3687 "tcc_bootstrap.c"
 var $22=(($buf)|0); //@line 3688 "tcc_bootstrap.c"
 var $23=$t; //@line 3688 "tcc_bootstrap.c"
 var $24=_snprintf($22,32,5000,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$23,tempVarArgs)); STACKTOP=tempVarArgs; //@line 3688 "tcc_bootstrap.c"
 var $25=(($buf)|0); //@line 3689 "tcc_bootstrap.c"
 $cstrval=$25; //@line 3689 "tcc_bootstrap.c"
 $t1=190; //@line 3690 "tcc_bootstrap.c"
 label=9;break; //@line 3691 "tcc_bootstrap.c"
 case 7: 
 var $27=HEAP32[((10472)>>2)]; //@line 3692 "tcc_bootstrap.c"
 var $28=($27|0)==328; //@line 3692 "tcc_bootstrap.c"
 if($28){label=8;break;}else{label=10;break;} //@line 3692 "tcc_bootstrap.c"
 case 8: 
 var $30=HEAP32[((76648)>>2)]; //@line 3693 "tcc_bootstrap.c"
 var $31=(($30+40)|0); //@line 3693 "tcc_bootstrap.c"
 var $32=(($31)|0); //@line 3693 "tcc_bootstrap.c"
 $cstrval=$32; //@line 3693 "tcc_bootstrap.c"
 $t1=185; //@line 3694 "tcc_bootstrap.c"
 label=9;break; //@line 3694 "tcc_bootstrap.c"
 case 9: 
 _cstr_new($cstr); //@line 3696 "tcc_bootstrap.c"
 var $34=$cstrval; //@line 3697 "tcc_bootstrap.c"
 _cstr_cat($cstr,$34,0); //@line 3697 "tcc_bootstrap.c"
 var $35=(($cstr)|0); //@line 3698 "tcc_bootstrap.c"
 var $36=HEAP32[(($35)>>2)]; //@line 3698 "tcc_bootstrap.c"
 var $37=$cval; //@line 3698 "tcc_bootstrap.c"
 var $38=(($37)|0); //@line 3698 "tcc_bootstrap.c"
 HEAP32[(($38)>>2)]=$36; //@line 3698 "tcc_bootstrap.c"
 var $39=(($cstr+4)|0); //@line 3699 "tcc_bootstrap.c"
 var $40=HEAP32[(($39)>>2)]; //@line 3699 "tcc_bootstrap.c"
 var $41=$cval; //@line 3699 "tcc_bootstrap.c"
 var $42=(($41+4)|0); //@line 3699 "tcc_bootstrap.c"
 HEAP32[(($42)>>2)]=$40; //@line 3699 "tcc_bootstrap.c"
 var $43=$2; //@line 3700 "tcc_bootstrap.c"
 var $44=$t1; //@line 3700 "tcc_bootstrap.c"
 _tok_str_add2($43,$44,$cval); //@line 3700 "tcc_bootstrap.c"
 _cstr_free($cstr); //@line 3701 "tcc_bootstrap.c"
 label=86;break; //@line 3702 "tcc_bootstrap.c"
 case 10: 
 var $46=$4; //@line 3702 "tcc_bootstrap.c"
 var $47=(($46+8)|0); //@line 3702 "tcc_bootstrap.c"
 var $48=$47; //@line 3702 "tcc_bootstrap.c"
 var $49=HEAP32[(($48)>>2)]; //@line 3702 "tcc_bootstrap.c"
 var $50=($49|0)!=0; //@line 3702 "tcc_bootstrap.c"
 if($50){label=11;break;}else{label=85;break;} //@line 3702 "tcc_bootstrap.c"
 case 11: 
 var $52=HEAP32[((10608)>>2)]; //@line 3703 "tcc_bootstrap.c"
 $saved_parse_flags=$52; //@line 3703 "tcc_bootstrap.c"
 $joined_str=0; //@line 3704 "tcc_bootstrap.c"
 var $53=$4; //@line 3705 "tcc_bootstrap.c"
 var $54=(($53+8)|0); //@line 3705 "tcc_bootstrap.c"
 var $55=$54; //@line 3705 "tcc_bootstrap.c"
 var $56=HEAP32[(($55)>>2)]; //@line 3705 "tcc_bootstrap.c"
 $mstr=$56; //@line 3705 "tcc_bootstrap.c"
 var $57=$4; //@line 3706 "tcc_bootstrap.c"
 var $58=(($57+16)|0); //@line 3706 "tcc_bootstrap.c"
 var $59=(($58)|0); //@line 3706 "tcc_bootstrap.c"
 var $60=HEAP32[(($59)>>2)]; //@line 3706 "tcc_bootstrap.c"
 var $61=($60|0)==1; //@line 3706 "tcc_bootstrap.c"
 if($61){label=12;break;}else{label=77;break;} //@line 3706 "tcc_bootstrap.c"
 case 12: 
 _tok_str_new($ws_str); //@line 3708 "tcc_bootstrap.c"
 HEAP32[(($spc)>>2)]=0; //@line 3709 "tcc_bootstrap.c"
 var $63=HEAP32[((10608)>>2)]; //@line 3710 "tcc_bootstrap.c"
 var $64=$63|52; //@line 3710 "tcc_bootstrap.c"
 HEAP32[((10608)>>2)]=$64; //@line 3710 "tcc_bootstrap.c"
 var $65=$3; //@line 3712 "tcc_bootstrap.c"
 var $66=_next_argstream($65,$ws_str); //@line 3712 "tcc_bootstrap.c"
 $t=$66; //@line 3712 "tcc_bootstrap.c"
 var $67=$t; //@line 3713 "tcc_bootstrap.c"
 var $68=($67|0)!=40; //@line 3713 "tcc_bootstrap.c"
 if($68){label=13;break;}else{label=20;break;} //@line 3713 "tcc_bootstrap.c"
 case 13: 
 var $70=$saved_parse_flags; //@line 3714 "tcc_bootstrap.c"
 HEAP32[((10608)>>2)]=$70; //@line 3714 "tcc_bootstrap.c"
 var $71=$2; //@line 3715 "tcc_bootstrap.c"
 var $72=HEAP32[((10472)>>2)]; //@line 3715 "tcc_bootstrap.c"
 _tok_str_add($71,$72); //@line 3715 "tcc_bootstrap.c"
 var $73=HEAP32[((10608)>>2)]; //@line 3716 "tcc_bootstrap.c"
 var $74=$73&16; //@line 3716 "tcc_bootstrap.c"
 var $75=($74|0)!=0; //@line 3716 "tcc_bootstrap.c"
 if($75){label=14;break;}else{label=19;break;} //@line 3716 "tcc_bootstrap.c"
 case 14: 
 $i=0; //@line 3718 "tcc_bootstrap.c"
 label=15;break; //@line 3718 "tcc_bootstrap.c"
 case 15: 
 var $78=$i; //@line 3718 "tcc_bootstrap.c"
 var $79=(($ws_str+4)|0); //@line 3718 "tcc_bootstrap.c"
 var $80=HEAP32[(($79)>>2)]; //@line 3718 "tcc_bootstrap.c"
 var $81=($78|0)<($80|0); //@line 3718 "tcc_bootstrap.c"
 if($81){label=16;break;}else{label=18;break;} //@line 3718 "tcc_bootstrap.c"
 case 16: 
 var $83=$2; //@line 3719 "tcc_bootstrap.c"
 var $84=$i; //@line 3719 "tcc_bootstrap.c"
 var $85=(($ws_str)|0); //@line 3719 "tcc_bootstrap.c"
 var $86=HEAP32[(($85)>>2)]; //@line 3719 "tcc_bootstrap.c"
 var $87=(($86+($84<<2))|0); //@line 3719 "tcc_bootstrap.c"
 var $88=HEAP32[(($87)>>2)]; //@line 3719 "tcc_bootstrap.c"
 _tok_str_add($83,$88); //@line 3719 "tcc_bootstrap.c"
 label=17;break; //@line 3719 "tcc_bootstrap.c"
 case 17: 
 var $90=$i; //@line 3718 "tcc_bootstrap.c"
 var $91=((($90)+(1))|0); //@line 3718 "tcc_bootstrap.c"
 $i=$91; //@line 3718 "tcc_bootstrap.c"
 label=15;break; //@line 3718 "tcc_bootstrap.c"
 case 18: 
 label=19;break; //@line 3720 "tcc_bootstrap.c"
 case 19: 
 var $94=(($ws_str)|0); //@line 3721 "tcc_bootstrap.c"
 var $95=HEAP32[(($94)>>2)]; //@line 3721 "tcc_bootstrap.c"
 _tok_str_free_str($95); //@line 3721 "tcc_bootstrap.c"
 $1=0; //@line 3722 "tcc_bootstrap.c"
 label=88;break; //@line 3722 "tcc_bootstrap.c"
 case 20: 
 var $97=(($ws_str)|0); //@line 3724 "tcc_bootstrap.c"
 var $98=HEAP32[(($97)>>2)]; //@line 3724 "tcc_bootstrap.c"
 _tok_str_free_str($98); //@line 3724 "tcc_bootstrap.c"
 label=21;break;
 case 21: 
 label=22;break; //@line 3726 "tcc_bootstrap.c"
 case 22: 
 _next_nomacro(); //@line 3727 "tcc_bootstrap.c"
 label=23;break; //@line 3728 "tcc_bootstrap.c"
 case 23: 
 var $102=HEAP32[((10472)>>2)]; //@line 3728 "tcc_bootstrap.c"
 var $103=($102|0)==203; //@line 3728 "tcc_bootstrap.c"
 if($103){label=22;break;}else{label=24;break;} //@line 3728 "tcc_bootstrap.c"
 case 24: 
 HEAP32[(($args)>>2)]=0; //@line 3729 "tcc_bootstrap.c"
 var $105=$4; //@line 3730 "tcc_bootstrap.c"
 var $106=(($105+24)|0); //@line 3730 "tcc_bootstrap.c"
 var $107=$106; //@line 3730 "tcc_bootstrap.c"
 var $108=HEAP32[(($107)>>2)]; //@line 3730 "tcc_bootstrap.c"
 $sa=$108; //@line 3730 "tcc_bootstrap.c"
 label=25;break; //@line 3731 "tcc_bootstrap.c"
 case 25: 
 label=26;break; //@line 3732 "tcc_bootstrap.c"
 case 26: 
 var $111=$3; //@line 3733 "tcc_bootstrap.c"
 var $112=_next_argstream($111,0); //@line 3733 "tcc_bootstrap.c"
 label=27;break; //@line 3734 "tcc_bootstrap.c"
 case 27: 
 var $114=HEAP32[((10472)>>2)]; //@line 3734 "tcc_bootstrap.c"
 var $115=_is_space($114); //@line 3734 "tcc_bootstrap.c"
 var $116=($115|0)!=0; //@line 3734 "tcc_bootstrap.c"
 if($116){var $121=1;label=29;break;}else{label=28;break;} //@line 3734 "tcc_bootstrap.c"
 case 28: 
 var $118=HEAP32[((10472)>>2)]; //@line 3734 "tcc_bootstrap.c"
 var $119=10==($118|0); //@line 3734 "tcc_bootstrap.c"
 var $121=$119;label=29;break; //@line 3734 "tcc_bootstrap.c"
 case 29: 
 var $121;
 if($121){label=26;break;}else{label=30;break;} //@line 3734 "tcc_bootstrap.c"
 case 30: 
 label=31;break; //@line 3734 "tcc_bootstrap.c"
 case 31: 
 var $124=HEAP32[(($args)>>2)]; //@line 3736 "tcc_bootstrap.c"
 var $125=($124|0)!=0; //@line 3736 "tcc_bootstrap.c"
 if($125){label=35;break;}else{label=32;break;} //@line 3736 "tcc_bootstrap.c"
 case 32: 
 var $127=$sa; //@line 3736 "tcc_bootstrap.c"
 var $128=($127|0)!=0; //@line 3736 "tcc_bootstrap.c"
 if($128){label=35;break;}else{label=33;break;} //@line 3736 "tcc_bootstrap.c"
 case 33: 
 var $130=HEAP32[((10472)>>2)]; //@line 3736 "tcc_bootstrap.c"
 var $131=($130|0)==41; //@line 3736 "tcc_bootstrap.c"
 if($131){label=34;break;}else{label=35;break;} //@line 3736 "tcc_bootstrap.c"
 case 34: 
 label=69;break; //@line 3737 "tcc_bootstrap.c"
 case 35: 
 var $134=$sa; //@line 3738 "tcc_bootstrap.c"
 var $135=($134|0)!=0; //@line 3738 "tcc_bootstrap.c"
 if($135){label=37;break;}else{label=36;break;} //@line 3738 "tcc_bootstrap.c"
 case 36: 
 var $137=$4; //@line 3740 "tcc_bootstrap.c"
 var $138=(($137)|0); //@line 3740 "tcc_bootstrap.c"
 var $139=HEAP32[(($138)>>2)]; //@line 3740 "tcc_bootstrap.c"
 var $140=_get_tok_str($139,0); //@line 3740 "tcc_bootstrap.c"
 _tcc_error(4960,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$140,tempVarArgs)); STACKTOP=tempVarArgs; //@line 3740 "tcc_bootstrap.c"
 label=37;break; //@line 3740 "tcc_bootstrap.c"
 case 37: 
 _tok_str_new($str); //@line 3741 "tcc_bootstrap.c"
 HEAP32[(($spc)>>2)]=0; //@line 3742 "tcc_bootstrap.c"
 $parlevel=0; //@line 3742 "tcc_bootstrap.c"
 label=38;break; //@line 3743 "tcc_bootstrap.c"
 case 38: 
 var $143=$parlevel; //@line 3743 "tcc_bootstrap.c"
 var $144=($143|0)>0; //@line 3743 "tcc_bootstrap.c"
 if($144){var $162=1;label=44;break;}else{label=39;break;} //@line 3743 "tcc_bootstrap.c"
 case 39: 
 var $146=HEAP32[((10472)>>2)]; //@line 3743 "tcc_bootstrap.c"
 var $147=($146|0)!=41; //@line 3743 "tcc_bootstrap.c"
 if($147){label=40;break;}else{var $160=0;label=43;break;} //@line 3743 "tcc_bootstrap.c"
 case 40: 
 var $149=HEAP32[((10472)>>2)]; //@line 3743 "tcc_bootstrap.c"
 var $150=($149|0)!=44; //@line 3743 "tcc_bootstrap.c"
 if($150){var $158=1;label=42;break;}else{label=41;break;} //@line 3743 "tcc_bootstrap.c"
 case 41: 
 var $152=$sa; //@line 3743 "tcc_bootstrap.c"
 var $153=(($152+16)|0); //@line 3743 "tcc_bootstrap.c"
 var $154=(($153)|0); //@line 3743 "tcc_bootstrap.c"
 var $155=HEAP32[(($154)>>2)]; //@line 3743 "tcc_bootstrap.c"
 var $156=($155|0)!=0; //@line 3743 "tcc_bootstrap.c"
 var $158=$156;label=42;break; //@line 3743 "tcc_bootstrap.c"
 case 42: 
 var $158;
 var $160=$158;label=43;break;
 case 43: 
 var $160;
 var $162=$160;label=44;break;
 case 44: 
 var $162;
 if($162){label=45;break;}else{label=58;break;}
 case 45: 
 var $164=HEAP32[((10472)>>2)]; //@line 3746 "tcc_bootstrap.c"
 var $165=($164|0)==-1; //@line 3746 "tcc_bootstrap.c"
 if($165){label=47;break;}else{label=46;break;} //@line 3746 "tcc_bootstrap.c"
 case 46: 
 var $167=HEAP32[((10472)>>2)]; //@line 3746 "tcc_bootstrap.c"
 var $168=($167|0)==0; //@line 3746 "tcc_bootstrap.c"
 if($168){label=47;break;}else{label=48;break;} //@line 3746 "tcc_bootstrap.c"
 case 47: 
 label=58;break; //@line 3747 "tcc_bootstrap.c"
 case 48: 
 var $171=HEAP32[((10472)>>2)]; //@line 3748 "tcc_bootstrap.c"
 var $172=($171|0)==40; //@line 3748 "tcc_bootstrap.c"
 if($172){label=49;break;}else{label=50;break;} //@line 3748 "tcc_bootstrap.c"
 case 49: 
 var $174=$parlevel; //@line 3749 "tcc_bootstrap.c"
 var $175=((($174)+(1))|0); //@line 3749 "tcc_bootstrap.c"
 $parlevel=$175; //@line 3749 "tcc_bootstrap.c"
 label=53;break; //@line 3749 "tcc_bootstrap.c"
 case 50: 
 var $177=HEAP32[((10472)>>2)]; //@line 3750 "tcc_bootstrap.c"
 var $178=($177|0)==41; //@line 3750 "tcc_bootstrap.c"
 if($178){label=51;break;}else{label=52;break;} //@line 3750 "tcc_bootstrap.c"
 case 51: 
 var $180=$parlevel; //@line 3751 "tcc_bootstrap.c"
 var $181=((($180)-(1))|0); //@line 3751 "tcc_bootstrap.c"
 $parlevel=$181; //@line 3751 "tcc_bootstrap.c"
 label=52;break; //@line 3751 "tcc_bootstrap.c"
 case 52: 
 label=53;break;
 case 53: 
 var $184=HEAP32[((10472)>>2)]; //@line 3752 "tcc_bootstrap.c"
 var $185=($184|0)==10; //@line 3752 "tcc_bootstrap.c"
 if($185){label=54;break;}else{label=55;break;} //@line 3752 "tcc_bootstrap.c"
 case 54: 
 HEAP32[((10472)>>2)]=32; //@line 3753 "tcc_bootstrap.c"
 label=55;break; //@line 3753 "tcc_bootstrap.c"
 case 55: 
 var $188=HEAP32[((10472)>>2)]; //@line 3754 "tcc_bootstrap.c"
 var $189=_check_space($188,$spc); //@line 3754 "tcc_bootstrap.c"
 var $190=($189|0)!=0; //@line 3754 "tcc_bootstrap.c"
 if($190){label=57;break;}else{label=56;break;} //@line 3754 "tcc_bootstrap.c"
 case 56: 
 var $192=HEAP32[((10472)>>2)]; //@line 3755 "tcc_bootstrap.c"
 _tok_str_add2($str,$192,10440); //@line 3755 "tcc_bootstrap.c"
 label=57;break; //@line 3755 "tcc_bootstrap.c"
 case 57: 
 var $194=$3; //@line 3756 "tcc_bootstrap.c"
 var $195=_next_argstream($194,0); //@line 3756 "tcc_bootstrap.c"
 label=38;break; //@line 3757 "tcc_bootstrap.c"
 case 58: 
 var $197=$parlevel; //@line 3758 "tcc_bootstrap.c"
 var $198=($197|0)!=0; //@line 3758 "tcc_bootstrap.c"
 if($198){label=59;break;}else{label=60;break;} //@line 3758 "tcc_bootstrap.c"
 case 59: 
 _expect(8520); //@line 3759 "tcc_bootstrap.c"
 label=60;break; //@line 3759 "tcc_bootstrap.c"
 case 60: 
 var $201=HEAP32[(($spc)>>2)]; //@line 3760 "tcc_bootstrap.c"
 var $202=(($str+4)|0); //@line 3760 "tcc_bootstrap.c"
 var $203=HEAP32[(($202)>>2)]; //@line 3760 "tcc_bootstrap.c"
 var $204=((($203)-($201))|0); //@line 3760 "tcc_bootstrap.c"
 HEAP32[(($202)>>2)]=$204; //@line 3760 "tcc_bootstrap.c"
 _tok_str_add($str,-1); //@line 3761 "tcc_bootstrap.c"
 _tok_str_add($str,0); //@line 3762 "tcc_bootstrap.c"
 var $205=$sa; //@line 3763 "tcc_bootstrap.c"
 var $206=(($205)|0); //@line 3763 "tcc_bootstrap.c"
 var $207=HEAP32[(($206)>>2)]; //@line 3763 "tcc_bootstrap.c"
 var $208=$207&-536870913; //@line 3763 "tcc_bootstrap.c"
 var $209=$sa; //@line 3763 "tcc_bootstrap.c"
 var $210=(($209+16)|0); //@line 3763 "tcc_bootstrap.c"
 var $211=(($210)|0); //@line 3763 "tcc_bootstrap.c"
 var $212=HEAP32[(($211)>>2)]; //@line 3763 "tcc_bootstrap.c"
 var $213=_sym_push2($args,$208,$212,0); //@line 3763 "tcc_bootstrap.c"
 $sa1=$213; //@line 3763 "tcc_bootstrap.c"
 var $214=(($str)|0); //@line 3764 "tcc_bootstrap.c"
 var $215=HEAP32[(($214)>>2)]; //@line 3764 "tcc_bootstrap.c"
 var $216=$sa1; //@line 3764 "tcc_bootstrap.c"
 var $217=(($216+8)|0); //@line 3764 "tcc_bootstrap.c"
 var $218=$217; //@line 3764 "tcc_bootstrap.c"
 HEAP32[(($218)>>2)]=$215; //@line 3764 "tcc_bootstrap.c"
 var $219=$sa; //@line 3765 "tcc_bootstrap.c"
 var $220=(($219+24)|0); //@line 3765 "tcc_bootstrap.c"
 var $221=$220; //@line 3765 "tcc_bootstrap.c"
 var $222=HEAP32[(($221)>>2)]; //@line 3765 "tcc_bootstrap.c"
 $sa=$222; //@line 3765 "tcc_bootstrap.c"
 var $223=HEAP32[((10472)>>2)]; //@line 3766 "tcc_bootstrap.c"
 var $224=($223|0)==41; //@line 3766 "tcc_bootstrap.c"
 if($224){label=61;break;}else{label=66;break;} //@line 3766 "tcc_bootstrap.c"
 case 61: 
 var $226=$sa; //@line 3767 "tcc_bootstrap.c"
 var $227=($226|0)!=0; //@line 3767 "tcc_bootstrap.c"
 if($227){label=62;break;}else{label=65;break;} //@line 3767 "tcc_bootstrap.c"
 case 62: 
 var $229=$sa; //@line 3767 "tcc_bootstrap.c"
 var $230=(($229+16)|0); //@line 3767 "tcc_bootstrap.c"
 var $231=(($230)|0); //@line 3767 "tcc_bootstrap.c"
 var $232=HEAP32[(($231)>>2)]; //@line 3767 "tcc_bootstrap.c"
 var $233=($232|0)!=0; //@line 3767 "tcc_bootstrap.c"
 if($233){label=63;break;}else{label=65;break;} //@line 3767 "tcc_bootstrap.c"
 case 63: 
 var $235=HEAP32[((2848)>>2)]; //@line 3767 "tcc_bootstrap.c"
 var $236=($235|0)!=0; //@line 3767 "tcc_bootstrap.c"
 if($236){label=64;break;}else{label=65;break;} //@line 3767 "tcc_bootstrap.c"
 case 64: 
 label=31;break; //@line 3768 "tcc_bootstrap.c"
 case 65: 
 label=69;break; //@line 3769 "tcc_bootstrap.c"
 case 66: 
 var $240=HEAP32[((10472)>>2)]; //@line 3771 "tcc_bootstrap.c"
 var $241=($240|0)!=44; //@line 3771 "tcc_bootstrap.c"
 if($241){label=67;break;}else{label=68;break;} //@line 3771 "tcc_bootstrap.c"
 case 67: 
 _expect(7680); //@line 3772 "tcc_bootstrap.c"
 label=68;break; //@line 3772 "tcc_bootstrap.c"
 case 68: 
 label=25;break; //@line 3773 "tcc_bootstrap.c"
 case 69: 
 var $245=$sa; //@line 3774 "tcc_bootstrap.c"
 var $246=($245|0)!=0; //@line 3774 "tcc_bootstrap.c"
 if($246){label=70;break;}else{label=71;break;} //@line 3774 "tcc_bootstrap.c"
 case 70: 
 var $248=$4; //@line 3776 "tcc_bootstrap.c"
 var $249=(($248)|0); //@line 3776 "tcc_bootstrap.c"
 var $250=HEAP32[(($249)>>2)]; //@line 3776 "tcc_bootstrap.c"
 var $251=_get_tok_str($250,0); //@line 3776 "tcc_bootstrap.c"
 _tcc_error(4920,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$251,tempVarArgs)); STACKTOP=tempVarArgs; //@line 3776 "tcc_bootstrap.c"
 label=71;break; //@line 3777 "tcc_bootstrap.c"
 case 71: 
 var $253=$saved_parse_flags; //@line 3778 "tcc_bootstrap.c"
 HEAP32[((10608)>>2)]=$253; //@line 3778 "tcc_bootstrap.c"
 var $254=$3; //@line 3779 "tcc_bootstrap.c"
 var $255=$mstr; //@line 3779 "tcc_bootstrap.c"
 var $256=HEAP32[(($args)>>2)]; //@line 3779 "tcc_bootstrap.c"
 var $257=_macro_arg_subst($254,$255,$256); //@line 3779 "tcc_bootstrap.c"
 $mstr=$257; //@line 3779 "tcc_bootstrap.c"
 var $258=HEAP32[(($args)>>2)]; //@line 3780 "tcc_bootstrap.c"
 $sa=$258; //@line 3780 "tcc_bootstrap.c"
 label=72;break; //@line 3781 "tcc_bootstrap.c"
 case 72: 
 var $260=$sa; //@line 3781 "tcc_bootstrap.c"
 var $261=($260|0)!=0; //@line 3781 "tcc_bootstrap.c"
 if($261){label=73;break;}else{label=76;break;} //@line 3781 "tcc_bootstrap.c"
 case 73: 
 var $263=$sa; //@line 3782 "tcc_bootstrap.c"
 var $264=(($263+28)|0); //@line 3782 "tcc_bootstrap.c"
 var $265=HEAP32[(($264)>>2)]; //@line 3782 "tcc_bootstrap.c"
 $sa1=$265; //@line 3782 "tcc_bootstrap.c"
 var $266=$sa; //@line 3783 "tcc_bootstrap.c"
 var $267=(($266+8)|0); //@line 3783 "tcc_bootstrap.c"
 var $268=$267; //@line 3783 "tcc_bootstrap.c"
 var $269=HEAP32[(($268)>>2)]; //@line 3783 "tcc_bootstrap.c"
 _tok_str_free_str($269); //@line 3783 "tcc_bootstrap.c"
 var $270=$sa; //@line 3784 "tcc_bootstrap.c"
 var $271=(($270+24)|0); //@line 3784 "tcc_bootstrap.c"
 var $272=$271; //@line 3784 "tcc_bootstrap.c"
 var $273=HEAP32[(($272)>>2)]; //@line 3784 "tcc_bootstrap.c"
 var $274=($273|0)!=0; //@line 3784 "tcc_bootstrap.c"
 if($274){label=74;break;}else{label=75;break;} //@line 3784 "tcc_bootstrap.c"
 case 74: 
 var $276=$sa; //@line 3785 "tcc_bootstrap.c"
 var $277=(($276+24)|0); //@line 3785 "tcc_bootstrap.c"
 var $278=$277; //@line 3785 "tcc_bootstrap.c"
 var $279=HEAP32[(($278)>>2)]; //@line 3785 "tcc_bootstrap.c"
 var $280=(($279+8)|0); //@line 3785 "tcc_bootstrap.c"
 var $281=$280; //@line 3785 "tcc_bootstrap.c"
 var $282=HEAP32[(($281)>>2)]; //@line 3785 "tcc_bootstrap.c"
 _tok_str_free_str($282); //@line 3785 "tcc_bootstrap.c"
 var $283=$sa; //@line 3786 "tcc_bootstrap.c"
 var $284=(($283+24)|0); //@line 3786 "tcc_bootstrap.c"
 var $285=$284; //@line 3786 "tcc_bootstrap.c"
 var $286=HEAP32[(($285)>>2)]; //@line 3786 "tcc_bootstrap.c"
 _sym_free($286); //@line 3786 "tcc_bootstrap.c"
 label=75;break; //@line 3787 "tcc_bootstrap.c"
 case 75: 
 var $288=$sa; //@line 3788 "tcc_bootstrap.c"
 _sym_free($288); //@line 3788 "tcc_bootstrap.c"
 var $289=$sa1; //@line 3789 "tcc_bootstrap.c"
 $sa=$289; //@line 3789 "tcc_bootstrap.c"
 label=72;break; //@line 3790 "tcc_bootstrap.c"
 case 76: 
 label=77;break; //@line 3791 "tcc_bootstrap.c"
 case 77: 
 var $292=$3; //@line 3792 "tcc_bootstrap.c"
 var $293=$4; //@line 3792 "tcc_bootstrap.c"
 var $294=(($293)|0); //@line 3792 "tcc_bootstrap.c"
 var $295=HEAP32[(($294)>>2)]; //@line 3792 "tcc_bootstrap.c"
 var $296=_sym_push2($292,$295,0,0); //@line 3792 "tcc_bootstrap.c"
 var $297=$saved_parse_flags; //@line 3793 "tcc_bootstrap.c"
 HEAP32[((10608)>>2)]=$297; //@line 3793 "tcc_bootstrap.c"
 var $298=$mstr; //@line 3794 "tcc_bootstrap.c"
 var $299=_macro_twosharps($298); //@line 3794 "tcc_bootstrap.c"
 $joined_str=$299; //@line 3794 "tcc_bootstrap.c"
 var $300=$2; //@line 3795 "tcc_bootstrap.c"
 var $301=$3; //@line 3795 "tcc_bootstrap.c"
 var $302=$joined_str; //@line 3795 "tcc_bootstrap.c"
 var $303=($302|0)!=0; //@line 3795 "tcc_bootstrap.c"
 if($303){label=78;break;}else{label=79;break;} //@line 3795 "tcc_bootstrap.c"
 case 78: 
 var $305=$joined_str; //@line 3795 "tcc_bootstrap.c"
 var $309=$305;label=80;break; //@line 3795 "tcc_bootstrap.c"
 case 79: 
 var $307=$mstr; //@line 3795 "tcc_bootstrap.c"
 var $309=$307;label=80;break; //@line 3795 "tcc_bootstrap.c"
 case 80: 
 var $309; //@line 3795 "tcc_bootstrap.c"
 _macro_subst($300,$301,$309); //@line 3795 "tcc_bootstrap.c"
 var $310=$3; //@line 3796 "tcc_bootstrap.c"
 var $311=HEAP32[(($310)>>2)]; //@line 3796 "tcc_bootstrap.c"
 $sa1=$311; //@line 3796 "tcc_bootstrap.c"
 var $312=$sa1; //@line 3797 "tcc_bootstrap.c"
 var $313=(($312+28)|0); //@line 3797 "tcc_bootstrap.c"
 var $314=HEAP32[(($313)>>2)]; //@line 3797 "tcc_bootstrap.c"
 var $315=$3; //@line 3797 "tcc_bootstrap.c"
 HEAP32[(($315)>>2)]=$314; //@line 3797 "tcc_bootstrap.c"
 var $316=$sa1; //@line 3798 "tcc_bootstrap.c"
 _sym_free($316); //@line 3798 "tcc_bootstrap.c"
 var $317=$joined_str; //@line 3799 "tcc_bootstrap.c"
 var $318=($317|0)!=0; //@line 3799 "tcc_bootstrap.c"
 if($318){label=81;break;}else{label=82;break;} //@line 3799 "tcc_bootstrap.c"
 case 81: 
 var $320=$joined_str; //@line 3800 "tcc_bootstrap.c"
 _tok_str_free_str($320); //@line 3800 "tcc_bootstrap.c"
 label=82;break; //@line 3800 "tcc_bootstrap.c"
 case 82: 
 var $322=$mstr; //@line 3801 "tcc_bootstrap.c"
 var $323=$4; //@line 3801 "tcc_bootstrap.c"
 var $324=(($323+8)|0); //@line 3801 "tcc_bootstrap.c"
 var $325=$324; //@line 3801 "tcc_bootstrap.c"
 var $326=HEAP32[(($325)>>2)]; //@line 3801 "tcc_bootstrap.c"
 var $327=($322|0)!=($326|0); //@line 3801 "tcc_bootstrap.c"
 if($327){label=83;break;}else{label=84;break;} //@line 3801 "tcc_bootstrap.c"
 case 83: 
 var $329=$mstr; //@line 3802 "tcc_bootstrap.c"
 _tok_str_free_str($329); //@line 3802 "tcc_bootstrap.c"
 label=84;break; //@line 3802 "tcc_bootstrap.c"
 case 84: 
 label=85;break; //@line 3803 "tcc_bootstrap.c"
 case 85: 
 label=86;break;
 case 86: 
 label=87;break;
 case 87: 
 $1=0; //@line 3804 "tcc_bootstrap.c"
 label=88;break; //@line 3804 "tcc_bootstrap.c"
 case 88: 
 var $335=$1; //@line 3804 "tcc_bootstrap.c"
 STACKTOP=sp;return $335; //@line 3804 "tcc_bootstrap.c"
  default: assert(0, "bad label: " + label);
 }

}


function _parse_number($p){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+24)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $b;
 var $t;
 var $shift;
 var $frac_bits;
 var $s;
 var $exp_val;
 var $ch;
 var $q;
 var $bn=sp;
 var $d;
 var $n=(sp)+(8);
 var $n1=(sp)+(16);
 var $lcount;
 var $ucount;
 var $ov;
 var $p1;
 $1=$p;
 $q=9392; //@line 2814 "tcc_bootstrap.c"
 var $2=$1; //@line 2815 "tcc_bootstrap.c"
 var $3=(($2+1)|0); //@line 2815 "tcc_bootstrap.c"
 $1=$3; //@line 2815 "tcc_bootstrap.c"
 var $4=HEAP8[(($2)>>0)]; //@line 2815 "tcc_bootstrap.c"
 var $5=(($4<<24)>>24); //@line 2815 "tcc_bootstrap.c"
 $ch=$5; //@line 2815 "tcc_bootstrap.c"
 var $6=$ch; //@line 2816 "tcc_bootstrap.c"
 $t=$6; //@line 2816 "tcc_bootstrap.c"
 var $7=$1; //@line 2817 "tcc_bootstrap.c"
 var $8=(($7+1)|0); //@line 2817 "tcc_bootstrap.c"
 $1=$8; //@line 2817 "tcc_bootstrap.c"
 var $9=HEAP8[(($7)>>0)]; //@line 2817 "tcc_bootstrap.c"
 var $10=(($9<<24)>>24); //@line 2817 "tcc_bootstrap.c"
 $ch=$10; //@line 2817 "tcc_bootstrap.c"
 var $11=$t; //@line 2818 "tcc_bootstrap.c"
 var $12=(($11)&255); //@line 2818 "tcc_bootstrap.c"
 var $13=$q; //@line 2818 "tcc_bootstrap.c"
 var $14=(($13+1)|0); //@line 2818 "tcc_bootstrap.c"
 $q=$14; //@line 2818 "tcc_bootstrap.c"
 HEAP8[(($13)>>0)]=$12; //@line 2818 "tcc_bootstrap.c"
 $b=10; //@line 2819 "tcc_bootstrap.c"
 var $15=$t; //@line 2820 "tcc_bootstrap.c"
 var $16=($15|0)==46; //@line 2820 "tcc_bootstrap.c"
 if($16){label=2;break;}else{label=3;break;} //@line 2820 "tcc_bootstrap.c"
 case 2: 
 label=100;break; //@line 2821 "tcc_bootstrap.c"
 case 3: 
 var $19=$t; //@line 2822 "tcc_bootstrap.c"
 var $20=($19|0)==48; //@line 2822 "tcc_bootstrap.c"
 if($20){label=4;break;}else{label=13;break;} //@line 2822 "tcc_bootstrap.c"
 case 4: 
 var $22=$ch; //@line 2823 "tcc_bootstrap.c"
 var $23=($22|0)==120; //@line 2823 "tcc_bootstrap.c"
 if($23){label=6;break;}else{label=5;break;} //@line 2823 "tcc_bootstrap.c"
 case 5: 
 var $25=$ch; //@line 2823 "tcc_bootstrap.c"
 var $26=($25|0)==88; //@line 2823 "tcc_bootstrap.c"
 if($26){label=6;break;}else{label=7;break;} //@line 2823 "tcc_bootstrap.c"
 case 6: 
 var $28=$q; //@line 2824 "tcc_bootstrap.c"
 var $29=((($28)-(1))|0); //@line 2824 "tcc_bootstrap.c"
 $q=$29; //@line 2824 "tcc_bootstrap.c"
 var $30=$1; //@line 2825 "tcc_bootstrap.c"
 var $31=(($30+1)|0); //@line 2825 "tcc_bootstrap.c"
 $1=$31; //@line 2825 "tcc_bootstrap.c"
 var $32=HEAP8[(($30)>>0)]; //@line 2825 "tcc_bootstrap.c"
 var $33=(($32<<24)>>24); //@line 2825 "tcc_bootstrap.c"
 $ch=$33; //@line 2825 "tcc_bootstrap.c"
 $b=16; //@line 2826 "tcc_bootstrap.c"
 label=12;break; //@line 2827 "tcc_bootstrap.c"
 case 7: 
 var $35=HEAP32[((2088)>>2)]; //@line 2827 "tcc_bootstrap.c"
 var $36=($35|0)!=0; //@line 2827 "tcc_bootstrap.c"
 if($36){label=8;break;}else{label=11;break;} //@line 2827 "tcc_bootstrap.c"
 case 8: 
 var $38=$ch; //@line 2827 "tcc_bootstrap.c"
 var $39=($38|0)==98; //@line 2827 "tcc_bootstrap.c"
 if($39){label=10;break;}else{label=9;break;} //@line 2827 "tcc_bootstrap.c"
 case 9: 
 var $41=$ch; //@line 2827 "tcc_bootstrap.c"
 var $42=($41|0)==66; //@line 2827 "tcc_bootstrap.c"
 if($42){label=10;break;}else{label=11;break;} //@line 2827 "tcc_bootstrap.c"
 case 10: 
 var $44=$q; //@line 2828 "tcc_bootstrap.c"
 var $45=((($44)-(1))|0); //@line 2828 "tcc_bootstrap.c"
 $q=$45; //@line 2828 "tcc_bootstrap.c"
 var $46=$1; //@line 2829 "tcc_bootstrap.c"
 var $47=(($46+1)|0); //@line 2829 "tcc_bootstrap.c"
 $1=$47; //@line 2829 "tcc_bootstrap.c"
 var $48=HEAP8[(($46)>>0)]; //@line 2829 "tcc_bootstrap.c"
 var $49=(($48<<24)>>24); //@line 2829 "tcc_bootstrap.c"
 $ch=$49; //@line 2829 "tcc_bootstrap.c"
 $b=2; //@line 2830 "tcc_bootstrap.c"
 label=11;break; //@line 2831 "tcc_bootstrap.c"
 case 11: 
 label=12;break;
 case 12: 
 label=13;break; //@line 2832 "tcc_bootstrap.c"
 case 13: 
 label=14;break;
 case 14: 
 label=15;break; //@line 2833 "tcc_bootstrap.c"
 case 15: 
 var $55=$ch; //@line 2834 "tcc_bootstrap.c"
 var $56=($55|0)>=97; //@line 2834 "tcc_bootstrap.c"
 if($56){label=16;break;}else{label=18;break;} //@line 2834 "tcc_bootstrap.c"
 case 16: 
 var $58=$ch; //@line 2834 "tcc_bootstrap.c"
 var $59=($58|0)<=102; //@line 2834 "tcc_bootstrap.c"
 if($59){label=17;break;}else{label=18;break;} //@line 2834 "tcc_bootstrap.c"
 case 17: 
 var $61=$ch; //@line 2835 "tcc_bootstrap.c"
 var $62=((($61)-(97))|0); //@line 2835 "tcc_bootstrap.c"
 var $63=((($62)+(10))|0); //@line 2835 "tcc_bootstrap.c"
 $t=$63; //@line 2835 "tcc_bootstrap.c"
 label=26;break; //@line 2835 "tcc_bootstrap.c"
 case 18: 
 var $65=$ch; //@line 2836 "tcc_bootstrap.c"
 var $66=($65|0)>=65; //@line 2836 "tcc_bootstrap.c"
 if($66){label=19;break;}else{label=21;break;} //@line 2836 "tcc_bootstrap.c"
 case 19: 
 var $68=$ch; //@line 2836 "tcc_bootstrap.c"
 var $69=($68|0)<=70; //@line 2836 "tcc_bootstrap.c"
 if($69){label=20;break;}else{label=21;break;} //@line 2836 "tcc_bootstrap.c"
 case 20: 
 var $71=$ch; //@line 2837 "tcc_bootstrap.c"
 var $72=((($71)-(65))|0); //@line 2837 "tcc_bootstrap.c"
 var $73=((($72)+(10))|0); //@line 2837 "tcc_bootstrap.c"
 $t=$73; //@line 2837 "tcc_bootstrap.c"
 label=25;break; //@line 2837 "tcc_bootstrap.c"
 case 21: 
 var $75=$ch; //@line 2838 "tcc_bootstrap.c"
 var $76=_isnum($75); //@line 2838 "tcc_bootstrap.c"
 var $77=($76|0)!=0; //@line 2838 "tcc_bootstrap.c"
 if($77){label=22;break;}else{label=23;break;} //@line 2838 "tcc_bootstrap.c"
 case 22: 
 var $79=$ch; //@line 2839 "tcc_bootstrap.c"
 var $80=((($79)-(48))|0); //@line 2839 "tcc_bootstrap.c"
 $t=$80; //@line 2839 "tcc_bootstrap.c"
 label=24;break; //@line 2839 "tcc_bootstrap.c"
 case 23: 
 label=32;break; //@line 2841 "tcc_bootstrap.c"
 case 24: 
 label=25;break;
 case 25: 
 label=26;break;
 case 26: 
 var $85=$t; //@line 2842 "tcc_bootstrap.c"
 var $86=$b; //@line 2842 "tcc_bootstrap.c"
 var $87=($85|0)>=($86|0); //@line 2842 "tcc_bootstrap.c"
 if($87){label=27;break;}else{label=28;break;} //@line 2842 "tcc_bootstrap.c"
 case 27: 
 label=32;break; //@line 2843 "tcc_bootstrap.c"
 case 28: 
 var $90=$q; //@line 2844 "tcc_bootstrap.c"
 var $91=($90>>>0)>=10416; //@line 2844 "tcc_bootstrap.c"
 if($91){label=29;break;}else{label=31;break;} //@line 2844 "tcc_bootstrap.c"
 case 29: 
 label=30;break; //@line 2844 "tcc_bootstrap.c"
 case 30: 
 _tcc_error(5216,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs; //@line 2846 "tcc_bootstrap.c"
 label=31;break; //@line 2847 "tcc_bootstrap.c"
 case 31: 
 var $95=$ch; //@line 2848 "tcc_bootstrap.c"
 var $96=(($95)&255); //@line 2848 "tcc_bootstrap.c"
 var $97=$q; //@line 2848 "tcc_bootstrap.c"
 var $98=(($97+1)|0); //@line 2848 "tcc_bootstrap.c"
 $q=$98; //@line 2848 "tcc_bootstrap.c"
 HEAP8[(($97)>>0)]=$96; //@line 2848 "tcc_bootstrap.c"
 var $99=$1; //@line 2849 "tcc_bootstrap.c"
 var $100=(($99+1)|0); //@line 2849 "tcc_bootstrap.c"
 $1=$100; //@line 2849 "tcc_bootstrap.c"
 var $101=HEAP8[(($99)>>0)]; //@line 2849 "tcc_bootstrap.c"
 var $102=(($101<<24)>>24); //@line 2849 "tcc_bootstrap.c"
 $ch=$102; //@line 2849 "tcc_bootstrap.c"
 label=15;break; //@line 2850 "tcc_bootstrap.c"
 case 32: 
 var $104=$ch; //@line 2851 "tcc_bootstrap.c"
 var $105=($104|0)==46; //@line 2851 "tcc_bootstrap.c"
 if($105){label=40;break;}else{label=33;break;} //@line 2851 "tcc_bootstrap.c"
 case 33: 
 var $107=$ch; //@line 2851 "tcc_bootstrap.c"
 var $108=($107|0)==101; //@line 2851 "tcc_bootstrap.c"
 if($108){label=35;break;}else{label=34;break;} //@line 2851 "tcc_bootstrap.c"
 case 34: 
 var $110=$ch; //@line 2851 "tcc_bootstrap.c"
 var $111=($110|0)==69; //@line 2851 "tcc_bootstrap.c"
 if($111){label=35;break;}else{label=36;break;} //@line 2851 "tcc_bootstrap.c"
 case 35: 
 var $113=$b; //@line 2851 "tcc_bootstrap.c"
 var $114=($113|0)==10; //@line 2851 "tcc_bootstrap.c"
 if($114){label=40;break;}else{label=36;break;} //@line 2851 "tcc_bootstrap.c"
 case 36: 
 var $116=$ch; //@line 2851 "tcc_bootstrap.c"
 var $117=($116|0)==112; //@line 2851 "tcc_bootstrap.c"
 if($117){label=38;break;}else{label=37;break;} //@line 2851 "tcc_bootstrap.c"
 case 37: 
 var $119=$ch; //@line 2851 "tcc_bootstrap.c"
 var $120=($119|0)==80; //@line 2851 "tcc_bootstrap.c"
 if($120){label=38;break;}else{label=136;break;} //@line 2851 "tcc_bootstrap.c"
 case 38: 
 var $122=$b; //@line 2851 "tcc_bootstrap.c"
 var $123=($122|0)==16; //@line 2851 "tcc_bootstrap.c"
 if($123){label=40;break;}else{label=39;break;} //@line 2851 "tcc_bootstrap.c"
 case 39: 
 var $125=$b; //@line 2851 "tcc_bootstrap.c"
 var $126=($125|0)==2; //@line 2851 "tcc_bootstrap.c"
 if($126){label=40;break;}else{label=136;break;} //@line 2851 "tcc_bootstrap.c"
 case 40: 
 var $128=$b; //@line 2854 "tcc_bootstrap.c"
 var $129=($128|0)!=10; //@line 2854 "tcc_bootstrap.c"
 if($129){label=41;break;}else{label=96;break;} //@line 2854 "tcc_bootstrap.c"
 case 41: 
 var $131=$q; //@line 2855 "tcc_bootstrap.c"
 HEAP8[(($131)>>0)]=0; //@line 2855 "tcc_bootstrap.c"
 var $132=$b; //@line 2856 "tcc_bootstrap.c"
 var $133=($132|0)==16; //@line 2856 "tcc_bootstrap.c"
 if($133){label=42;break;}else{label=43;break;} //@line 2856 "tcc_bootstrap.c"
 case 42: 
 $shift=4; //@line 2857 "tcc_bootstrap.c"
 label=44;break; //@line 2857 "tcc_bootstrap.c"
 case 43: 
 $shift=1; //@line 2859 "tcc_bootstrap.c"
 label=44;break;
 case 44: 
 var $137=(($bn)|0); //@line 2860 "tcc_bootstrap.c"
 _bn_zero($137); //@line 2860 "tcc_bootstrap.c"
 $q=9392; //@line 2861 "tcc_bootstrap.c"
 label=45;break; //@line 2862 "tcc_bootstrap.c"
 case 45: 
 var $139=$q; //@line 2863 "tcc_bootstrap.c"
 var $140=(($139+1)|0); //@line 2863 "tcc_bootstrap.c"
 $q=$140; //@line 2863 "tcc_bootstrap.c"
 var $141=HEAP8[(($139)>>0)]; //@line 2863 "tcc_bootstrap.c"
 var $142=(($141<<24)>>24); //@line 2863 "tcc_bootstrap.c"
 $t=$142; //@line 2863 "tcc_bootstrap.c"
 var $143=$t; //@line 2864 "tcc_bootstrap.c"
 var $144=($143|0)==0; //@line 2864 "tcc_bootstrap.c"
 if($144){label=46;break;}else{label=47;break;} //@line 2864 "tcc_bootstrap.c"
 case 46: 
 label=55;break; //@line 2865 "tcc_bootstrap.c"
 case 47: 
 var $147=$t; //@line 2866 "tcc_bootstrap.c"
 var $148=($147|0)>=97; //@line 2866 "tcc_bootstrap.c"
 if($148){label=48;break;}else{label=49;break;} //@line 2866 "tcc_bootstrap.c"
 case 48: 
 var $150=$t; //@line 2867 "tcc_bootstrap.c"
 var $151=((($150)-(97))|0); //@line 2867 "tcc_bootstrap.c"
 var $152=((($151)+(10))|0); //@line 2867 "tcc_bootstrap.c"
 $t=$152; //@line 2867 "tcc_bootstrap.c"
 label=53;break; //@line 2868 "tcc_bootstrap.c"
 case 49: 
 var $154=$t; //@line 2868 "tcc_bootstrap.c"
 var $155=($154|0)>=65; //@line 2868 "tcc_bootstrap.c"
 if($155){label=50;break;}else{label=51;break;} //@line 2868 "tcc_bootstrap.c"
 case 50: 
 var $157=$t; //@line 2869 "tcc_bootstrap.c"
 var $158=((($157)-(65))|0); //@line 2869 "tcc_bootstrap.c"
 var $159=((($158)+(10))|0); //@line 2869 "tcc_bootstrap.c"
 $t=$159; //@line 2869 "tcc_bootstrap.c"
 label=52;break; //@line 2870 "tcc_bootstrap.c"
 case 51: 
 var $161=$t; //@line 2871 "tcc_bootstrap.c"
 var $162=((($161)-(48))|0); //@line 2871 "tcc_bootstrap.c"
 $t=$162; //@line 2871 "tcc_bootstrap.c"
 label=52;break;
 case 52: 
 label=53;break;
 case 53: 
 label=54;break;
 case 54: 
 var $166=(($bn)|0); //@line 2873 "tcc_bootstrap.c"
 var $167=$shift; //@line 2873 "tcc_bootstrap.c"
 var $168=$t; //@line 2873 "tcc_bootstrap.c"
 _bn_lshift($166,$167,$168); //@line 2873 "tcc_bootstrap.c"
 label=45;break; //@line 2874 "tcc_bootstrap.c"
 case 55: 
 $frac_bits=0; //@line 2875 "tcc_bootstrap.c"
 var $170=$ch; //@line 2876 "tcc_bootstrap.c"
 var $171=($170|0)==46; //@line 2876 "tcc_bootstrap.c"
 if($171){label=56;break;}else{label=73;break;} //@line 2876 "tcc_bootstrap.c"
 case 56: 
 var $173=$1; //@line 2877 "tcc_bootstrap.c"
 var $174=(($173+1)|0); //@line 2877 "tcc_bootstrap.c"
 $1=$174; //@line 2877 "tcc_bootstrap.c"
 var $175=HEAP8[(($173)>>0)]; //@line 2877 "tcc_bootstrap.c"
 var $176=(($175<<24)>>24); //@line 2877 "tcc_bootstrap.c"
 $ch=$176; //@line 2877 "tcc_bootstrap.c"
 label=57;break; //@line 2878 "tcc_bootstrap.c"
 case 57: 
 var $178=$ch; //@line 2879 "tcc_bootstrap.c"
 $t=$178; //@line 2879 "tcc_bootstrap.c"
 var $179=$t; //@line 2880 "tcc_bootstrap.c"
 var $180=($179|0)>=97; //@line 2880 "tcc_bootstrap.c"
 if($180){label=58;break;}else{label=60;break;} //@line 2880 "tcc_bootstrap.c"
 case 58: 
 var $182=$t; //@line 2880 "tcc_bootstrap.c"
 var $183=($182|0)<=102; //@line 2880 "tcc_bootstrap.c"
 if($183){label=59;break;}else{label=60;break;} //@line 2880 "tcc_bootstrap.c"
 case 59: 
 var $185=$t; //@line 2881 "tcc_bootstrap.c"
 var $186=((($185)-(97))|0); //@line 2881 "tcc_bootstrap.c"
 var $187=((($186)+(10))|0); //@line 2881 "tcc_bootstrap.c"
 $t=$187; //@line 2881 "tcc_bootstrap.c"
 label=69;break; //@line 2882 "tcc_bootstrap.c"
 case 60: 
 var $189=$t; //@line 2882 "tcc_bootstrap.c"
 var $190=($189|0)>=65; //@line 2882 "tcc_bootstrap.c"
 if($190){label=61;break;}else{label=63;break;} //@line 2882 "tcc_bootstrap.c"
 case 61: 
 var $192=$t; //@line 2882 "tcc_bootstrap.c"
 var $193=($192|0)<=70; //@line 2882 "tcc_bootstrap.c"
 if($193){label=62;break;}else{label=63;break;} //@line 2882 "tcc_bootstrap.c"
 case 62: 
 var $195=$t; //@line 2883 "tcc_bootstrap.c"
 var $196=((($195)-(65))|0); //@line 2883 "tcc_bootstrap.c"
 var $197=((($196)+(10))|0); //@line 2883 "tcc_bootstrap.c"
 $t=$197; //@line 2883 "tcc_bootstrap.c"
 label=68;break; //@line 2884 "tcc_bootstrap.c"
 case 63: 
 var $199=$t; //@line 2884 "tcc_bootstrap.c"
 var $200=($199|0)>=48; //@line 2884 "tcc_bootstrap.c"
 if($200){label=64;break;}else{label=66;break;} //@line 2884 "tcc_bootstrap.c"
 case 64: 
 var $202=$t; //@line 2884 "tcc_bootstrap.c"
 var $203=($202|0)<=57; //@line 2884 "tcc_bootstrap.c"
 if($203){label=65;break;}else{label=66;break;} //@line 2884 "tcc_bootstrap.c"
 case 65: 
 var $205=$t; //@line 2885 "tcc_bootstrap.c"
 var $206=((($205)-(48))|0); //@line 2885 "tcc_bootstrap.c"
 $t=$206; //@line 2885 "tcc_bootstrap.c"
 label=67;break; //@line 2886 "tcc_bootstrap.c"
 case 66: 
 label=72;break; //@line 2887 "tcc_bootstrap.c"
 case 67: 
 label=68;break;
 case 68: 
 label=69;break;
 case 69: 
 var $211=$t; //@line 2889 "tcc_bootstrap.c"
 var $212=$b; //@line 2889 "tcc_bootstrap.c"
 var $213=($211|0)>=($212|0); //@line 2889 "tcc_bootstrap.c"
 if($213){label=70;break;}else{label=71;break;} //@line 2889 "tcc_bootstrap.c"
 case 70: 
 _tcc_error(5200,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs; //@line 2890 "tcc_bootstrap.c"
 label=71;break; //@line 2890 "tcc_bootstrap.c"
 case 71: 
 var $216=(($bn)|0); //@line 2891 "tcc_bootstrap.c"
 var $217=$shift; //@line 2891 "tcc_bootstrap.c"
 var $218=$t; //@line 2891 "tcc_bootstrap.c"
 _bn_lshift($216,$217,$218); //@line 2891 "tcc_bootstrap.c"
 var $219=$shift; //@line 2892 "tcc_bootstrap.c"
 var $220=$frac_bits; //@line 2892 "tcc_bootstrap.c"
 var $221=((($220)+($219))|0); //@line 2892 "tcc_bootstrap.c"
 $frac_bits=$221; //@line 2892 "tcc_bootstrap.c"
 var $222=$1; //@line 2893 "tcc_bootstrap.c"
 var $223=(($222+1)|0); //@line 2893 "tcc_bootstrap.c"
 $1=$223; //@line 2893 "tcc_bootstrap.c"
 var $224=HEAP8[(($222)>>0)]; //@line 2893 "tcc_bootstrap.c"
 var $225=(($224<<24)>>24); //@line 2893 "tcc_bootstrap.c"
 $ch=$225; //@line 2893 "tcc_bootstrap.c"
 label=57;break; //@line 2894 "tcc_bootstrap.c"
 case 72: 
 label=73;break; //@line 2895 "tcc_bootstrap.c"
 case 73: 
 var $228=$ch; //@line 2896 "tcc_bootstrap.c"
 var $229=($228|0)!=112; //@line 2896 "tcc_bootstrap.c"
 if($229){label=74;break;}else{label=76;break;} //@line 2896 "tcc_bootstrap.c"
 case 74: 
 var $231=$ch; //@line 2896 "tcc_bootstrap.c"
 var $232=($231|0)!=80; //@line 2896 "tcc_bootstrap.c"
 if($232){label=75;break;}else{label=76;break;} //@line 2896 "tcc_bootstrap.c"
 case 75: 
 _expect(5184); //@line 2897 "tcc_bootstrap.c"
 label=76;break; //@line 2897 "tcc_bootstrap.c"
 case 76: 
 var $235=$1; //@line 2898 "tcc_bootstrap.c"
 var $236=(($235+1)|0); //@line 2898 "tcc_bootstrap.c"
 $1=$236; //@line 2898 "tcc_bootstrap.c"
 var $237=HEAP8[(($235)>>0)]; //@line 2898 "tcc_bootstrap.c"
 var $238=(($237<<24)>>24); //@line 2898 "tcc_bootstrap.c"
 $ch=$238; //@line 2898 "tcc_bootstrap.c"
 $s=1; //@line 2899 "tcc_bootstrap.c"
 $exp_val=0; //@line 2900 "tcc_bootstrap.c"
 var $239=$ch; //@line 2901 "tcc_bootstrap.c"
 var $240=($239|0)==43; //@line 2901 "tcc_bootstrap.c"
 if($240){label=77;break;}else{label=78;break;} //@line 2901 "tcc_bootstrap.c"
 case 77: 
 var $242=$1; //@line 2902 "tcc_bootstrap.c"
 var $243=(($242+1)|0); //@line 2902 "tcc_bootstrap.c"
 $1=$243; //@line 2902 "tcc_bootstrap.c"
 var $244=HEAP8[(($242)>>0)]; //@line 2902 "tcc_bootstrap.c"
 var $245=(($244<<24)>>24); //@line 2902 "tcc_bootstrap.c"
 $ch=$245; //@line 2902 "tcc_bootstrap.c"
 label=81;break; //@line 2903 "tcc_bootstrap.c"
 case 78: 
 var $247=$ch; //@line 2903 "tcc_bootstrap.c"
 var $248=($247|0)==45; //@line 2903 "tcc_bootstrap.c"
 if($248){label=79;break;}else{label=80;break;} //@line 2903 "tcc_bootstrap.c"
 case 79: 
 $s=-1; //@line 2904 "tcc_bootstrap.c"
 var $250=$1; //@line 2905 "tcc_bootstrap.c"
 var $251=(($250+1)|0); //@line 2905 "tcc_bootstrap.c"
 $1=$251; //@line 2905 "tcc_bootstrap.c"
 var $252=HEAP8[(($250)>>0)]; //@line 2905 "tcc_bootstrap.c"
 var $253=(($252<<24)>>24); //@line 2905 "tcc_bootstrap.c"
 $ch=$253; //@line 2905 "tcc_bootstrap.c"
 label=80;break; //@line 2906 "tcc_bootstrap.c"
 case 80: 
 label=81;break;
 case 81: 
 var $256=$ch; //@line 2907 "tcc_bootstrap.c"
 var $257=($256|0)<48; //@line 2907 "tcc_bootstrap.c"
 if($257){label=83;break;}else{label=82;break;} //@line 2907 "tcc_bootstrap.c"
 case 82: 
 var $259=$ch; //@line 2907 "tcc_bootstrap.c"
 var $260=($259|0)>57; //@line 2907 "tcc_bootstrap.c"
 if($260){label=83;break;}else{label=84;break;} //@line 2907 "tcc_bootstrap.c"
 case 83: 
 _expect(5168); //@line 2908 "tcc_bootstrap.c"
 label=84;break; //@line 2908 "tcc_bootstrap.c"
 case 84: 
 label=85;break; //@line 2909 "tcc_bootstrap.c"
 case 85: 
 var $264=$ch; //@line 2909 "tcc_bootstrap.c"
 var $265=($264|0)>=48; //@line 2909 "tcc_bootstrap.c"
 if($265){label=86;break;}else{var $270=0;label=87;break;} //@line 2909 "tcc_bootstrap.c"
 case 86: 
 var $267=$ch; //@line 2909 "tcc_bootstrap.c"
 var $268=($267|0)<=57; //@line 2909 "tcc_bootstrap.c"
 var $270=$268;label=87;break;
 case 87: 
 var $270;
 if($270){label=88;break;}else{label=89;break;}
 case 88: 
 var $272=$exp_val; //@line 2910 "tcc_bootstrap.c"
 var $273=((($272)*(10))&-1); //@line 2910 "tcc_bootstrap.c"
 var $274=$ch; //@line 2910 "tcc_bootstrap.c"
 var $275=((($273)+($274))|0); //@line 2910 "tcc_bootstrap.c"
 var $276=((($275)-(48))|0); //@line 2910 "tcc_bootstrap.c"
 $exp_val=$276; //@line 2910 "tcc_bootstrap.c"
 var $277=$1; //@line 2911 "tcc_bootstrap.c"
 var $278=(($277+1)|0); //@line 2911 "tcc_bootstrap.c"
 $1=$278; //@line 2911 "tcc_bootstrap.c"
 var $279=HEAP8[(($277)>>0)]; //@line 2911 "tcc_bootstrap.c"
 var $280=(($279<<24)>>24); //@line 2911 "tcc_bootstrap.c"
 $ch=$280; //@line 2911 "tcc_bootstrap.c"
 label=85;break; //@line 2912 "tcc_bootstrap.c"
 case 89: 
 var $282=$exp_val; //@line 2913 "tcc_bootstrap.c"
 var $283=$s; //@line 2913 "tcc_bootstrap.c"
 var $284=(Math_imul($282,$283)|0); //@line 2913 "tcc_bootstrap.c"
 $exp_val=$284; //@line 2913 "tcc_bootstrap.c"
 var $285=(($bn+4)|0); //@line 2914 "tcc_bootstrap.c"
 var $286=HEAP32[(($285)>>2)]; //@line 2914 "tcc_bootstrap.c"
 var $287=($286>>>0); //@line 2914 "tcc_bootstrap.c"
 var $288=($287)*(4294967296); //@line 2914 "tcc_bootstrap.c"
 var $289=(($bn)|0); //@line 2914 "tcc_bootstrap.c"
 var $290=HEAP32[(($289)>>2)]; //@line 2914 "tcc_bootstrap.c"
 var $291=($290>>>0); //@line 2914 "tcc_bootstrap.c"
 var $292=($288)+($291); //@line 2914 "tcc_bootstrap.c"
 $d=$292; //@line 2914 "tcc_bootstrap.c"
 var $293=$d; //@line 2915 "tcc_bootstrap.c"
 var $294=$exp_val; //@line 2915 "tcc_bootstrap.c"
 var $295=$frac_bits; //@line 2915 "tcc_bootstrap.c"
 var $296=((($294)-($295))|0); //@line 2915 "tcc_bootstrap.c"
 var $297=_ldexp($293,$296); //@line 2915 "tcc_bootstrap.c"
 $d=$297; //@line 2915 "tcc_bootstrap.c"
 var $298=$ch; //@line 2916 "tcc_bootstrap.c"
 var $299=_toup($298); //@line 2916 "tcc_bootstrap.c"
 $t=$299; //@line 2916 "tcc_bootstrap.c"
 var $300=$t; //@line 2917 "tcc_bootstrap.c"
 var $301=($300|0)==70; //@line 2917 "tcc_bootstrap.c"
 if($301){label=90;break;}else{label=91;break;} //@line 2917 "tcc_bootstrap.c"
 case 90: 
 var $303=$1; //@line 2918 "tcc_bootstrap.c"
 var $304=(($303+1)|0); //@line 2918 "tcc_bootstrap.c"
 $1=$304; //@line 2918 "tcc_bootstrap.c"
 var $305=HEAP8[(($303)>>0)]; //@line 2918 "tcc_bootstrap.c"
 var $306=(($305<<24)>>24); //@line 2918 "tcc_bootstrap.c"
 $ch=$306; //@line 2918 "tcc_bootstrap.c"
 HEAP32[((10472)>>2)]=187; //@line 2919 "tcc_bootstrap.c"
 var $307=$d; //@line 2920 "tcc_bootstrap.c"
 var $308=$307; //@line 2920 "tcc_bootstrap.c"
 HEAPF32[((10440)>>2)]=$308; //@line 2920 "tcc_bootstrap.c"
 label=95;break; //@line 2921 "tcc_bootstrap.c"
 case 91: 
 var $310=$t; //@line 2921 "tcc_bootstrap.c"
 var $311=($310|0)==76; //@line 2921 "tcc_bootstrap.c"
 if($311){label=92;break;}else{label=93;break;} //@line 2921 "tcc_bootstrap.c"
 case 92: 
 var $313=$1; //@line 2922 "tcc_bootstrap.c"
 var $314=(($313+1)|0); //@line 2922 "tcc_bootstrap.c"
 $1=$314; //@line 2922 "tcc_bootstrap.c"
 var $315=HEAP8[(($313)>>0)]; //@line 2922 "tcc_bootstrap.c"
 var $316=(($315<<24)>>24); //@line 2922 "tcc_bootstrap.c"
 $ch=$316; //@line 2922 "tcc_bootstrap.c"
 HEAP32[((10472)>>2)]=189; //@line 2923 "tcc_bootstrap.c"
 var $317=$d; //@line 2924 "tcc_bootstrap.c"
 HEAPF64[((10440)>>3)]=$317; //@line 2924 "tcc_bootstrap.c"
 label=94;break; //@line 2925 "tcc_bootstrap.c"
 case 93: 
 HEAP32[((10472)>>2)]=188; //@line 2926 "tcc_bootstrap.c"
 var $319=$d; //@line 2927 "tcc_bootstrap.c"
 HEAPF64[((10440)>>3)]=$319; //@line 2927 "tcc_bootstrap.c"
 label=94;break;
 case 94: 
 label=95;break;
 case 95: 
 label=135;break; //@line 2929 "tcc_bootstrap.c"
 case 96: 
 var $323=$ch; //@line 2930 "tcc_bootstrap.c"
 var $324=($323|0)==46; //@line 2930 "tcc_bootstrap.c"
 if($324){label=97;break;}else{label=108;break;} //@line 2930 "tcc_bootstrap.c"
 case 97: 
 var $326=$q; //@line 2931 "tcc_bootstrap.c"
 var $327=($326>>>0)>=10416; //@line 2931 "tcc_bootstrap.c"
 if($327){label=98;break;}else{label=99;break;} //@line 2931 "tcc_bootstrap.c"
 case 98: 
 label=30;break; //@line 2932 "tcc_bootstrap.c"
 case 99: 
 var $330=$ch; //@line 2933 "tcc_bootstrap.c"
 var $331=(($330)&255); //@line 2933 "tcc_bootstrap.c"
 var $332=$q; //@line 2933 "tcc_bootstrap.c"
 var $333=(($332+1)|0); //@line 2933 "tcc_bootstrap.c"
 $q=$333; //@line 2933 "tcc_bootstrap.c"
 HEAP8[(($332)>>0)]=$331; //@line 2933 "tcc_bootstrap.c"
 var $334=$1; //@line 2934 "tcc_bootstrap.c"
 var $335=(($334+1)|0); //@line 2934 "tcc_bootstrap.c"
 $1=$335; //@line 2934 "tcc_bootstrap.c"
 var $336=HEAP8[(($334)>>0)]; //@line 2934 "tcc_bootstrap.c"
 var $337=(($336<<24)>>24); //@line 2934 "tcc_bootstrap.c"
 $ch=$337; //@line 2934 "tcc_bootstrap.c"
 label=100;break; //@line 2934 "tcc_bootstrap.c"
 case 100: 
 label=101;break; //@line 2936 "tcc_bootstrap.c"
 case 101: 
 var $340=$ch; //@line 2936 "tcc_bootstrap.c"
 var $341=($340|0)>=48; //@line 2936 "tcc_bootstrap.c"
 if($341){label=102;break;}else{var $346=0;label=103;break;} //@line 2936 "tcc_bootstrap.c"
 case 102: 
 var $343=$ch; //@line 2936 "tcc_bootstrap.c"
 var $344=($343|0)<=57; //@line 2936 "tcc_bootstrap.c"
 var $346=$344;label=103;break;
 case 103: 
 var $346;
 if($346){label=104;break;}else{label=107;break;}
 case 104: 
 var $348=$q; //@line 2937 "tcc_bootstrap.c"
 var $349=($348>>>0)>=10416; //@line 2937 "tcc_bootstrap.c"
 if($349){label=105;break;}else{label=106;break;} //@line 2937 "tcc_bootstrap.c"
 case 105: 
 label=30;break; //@line 2938 "tcc_bootstrap.c"
 case 106: 
 var $352=$ch; //@line 2939 "tcc_bootstrap.c"
 var $353=(($352)&255); //@line 2939 "tcc_bootstrap.c"
 var $354=$q; //@line 2939 "tcc_bootstrap.c"
 var $355=(($354+1)|0); //@line 2939 "tcc_bootstrap.c"
 $q=$355; //@line 2939 "tcc_bootstrap.c"
 HEAP8[(($354)>>0)]=$353; //@line 2939 "tcc_bootstrap.c"
 var $356=$1; //@line 2940 "tcc_bootstrap.c"
 var $357=(($356+1)|0); //@line 2940 "tcc_bootstrap.c"
 $1=$357; //@line 2940 "tcc_bootstrap.c"
 var $358=HEAP8[(($356)>>0)]; //@line 2940 "tcc_bootstrap.c"
 var $359=(($358<<24)>>24); //@line 2940 "tcc_bootstrap.c"
 $ch=$359; //@line 2940 "tcc_bootstrap.c"
 label=101;break; //@line 2941 "tcc_bootstrap.c"
 case 107: 
 label=108;break; //@line 2942 "tcc_bootstrap.c"
 case 108: 
 var $362=$ch; //@line 2943 "tcc_bootstrap.c"
 var $363=($362|0)==101; //@line 2943 "tcc_bootstrap.c"
 if($363){label=110;break;}else{label=109;break;} //@line 2943 "tcc_bootstrap.c"
 case 109: 
 var $365=$ch; //@line 2943 "tcc_bootstrap.c"
 var $366=($365|0)==69; //@line 2943 "tcc_bootstrap.c"
 if($366){label=110;break;}else{label=128;break;} //@line 2943 "tcc_bootstrap.c"
 case 110: 
 var $368=$q; //@line 2944 "tcc_bootstrap.c"
 var $369=($368>>>0)>=10416; //@line 2944 "tcc_bootstrap.c"
 if($369){label=111;break;}else{label=112;break;} //@line 2944 "tcc_bootstrap.c"
 case 111: 
 label=30;break; //@line 2945 "tcc_bootstrap.c"
 case 112: 
 var $372=$ch; //@line 2946 "tcc_bootstrap.c"
 var $373=(($372)&255); //@line 2946 "tcc_bootstrap.c"
 var $374=$q; //@line 2946 "tcc_bootstrap.c"
 var $375=(($374+1)|0); //@line 2946 "tcc_bootstrap.c"
 $q=$375; //@line 2946 "tcc_bootstrap.c"
 HEAP8[(($374)>>0)]=$373; //@line 2946 "tcc_bootstrap.c"
 var $376=$1; //@line 2947 "tcc_bootstrap.c"
 var $377=(($376+1)|0); //@line 2947 "tcc_bootstrap.c"
 $1=$377; //@line 2947 "tcc_bootstrap.c"
 var $378=HEAP8[(($376)>>0)]; //@line 2947 "tcc_bootstrap.c"
 var $379=(($378<<24)>>24); //@line 2947 "tcc_bootstrap.c"
 $ch=$379; //@line 2947 "tcc_bootstrap.c"
 var $380=$ch; //@line 2948 "tcc_bootstrap.c"
 var $381=($380|0)==45; //@line 2948 "tcc_bootstrap.c"
 if($381){label=114;break;}else{label=113;break;} //@line 2948 "tcc_bootstrap.c"
 case 113: 
 var $383=$ch; //@line 2948 "tcc_bootstrap.c"
 var $384=($383|0)==43; //@line 2948 "tcc_bootstrap.c"
 if($384){label=114;break;}else{label=117;break;} //@line 2948 "tcc_bootstrap.c"
 case 114: 
 var $386=$q; //@line 2949 "tcc_bootstrap.c"
 var $387=($386>>>0)>=10416; //@line 2949 "tcc_bootstrap.c"
 if($387){label=115;break;}else{label=116;break;} //@line 2949 "tcc_bootstrap.c"
 case 115: 
 label=30;break; //@line 2950 "tcc_bootstrap.c"
 case 116: 
 var $390=$ch; //@line 2951 "tcc_bootstrap.c"
 var $391=(($390)&255); //@line 2951 "tcc_bootstrap.c"
 var $392=$q; //@line 2951 "tcc_bootstrap.c"
 var $393=(($392+1)|0); //@line 2951 "tcc_bootstrap.c"
 $q=$393; //@line 2951 "tcc_bootstrap.c"
 HEAP8[(($392)>>0)]=$391; //@line 2951 "tcc_bootstrap.c"
 var $394=$1; //@line 2952 "tcc_bootstrap.c"
 var $395=(($394+1)|0); //@line 2952 "tcc_bootstrap.c"
 $1=$395; //@line 2952 "tcc_bootstrap.c"
 var $396=HEAP8[(($394)>>0)]; //@line 2952 "tcc_bootstrap.c"
 var $397=(($396<<24)>>24); //@line 2952 "tcc_bootstrap.c"
 $ch=$397; //@line 2952 "tcc_bootstrap.c"
 label=117;break; //@line 2953 "tcc_bootstrap.c"
 case 117: 
 var $399=$ch; //@line 2954 "tcc_bootstrap.c"
 var $400=($399|0)<48; //@line 2954 "tcc_bootstrap.c"
 if($400){label=119;break;}else{label=118;break;} //@line 2954 "tcc_bootstrap.c"
 case 118: 
 var $402=$ch; //@line 2954 "tcc_bootstrap.c"
 var $403=($402|0)>57; //@line 2954 "tcc_bootstrap.c"
 if($403){label=119;break;}else{label=120;break;} //@line 2954 "tcc_bootstrap.c"
 case 119: 
 _expect(5168); //@line 2955 "tcc_bootstrap.c"
 label=120;break; //@line 2955 "tcc_bootstrap.c"
 case 120: 
 label=121;break; //@line 2956 "tcc_bootstrap.c"
 case 121: 
 var $407=$ch; //@line 2956 "tcc_bootstrap.c"
 var $408=($407|0)>=48; //@line 2956 "tcc_bootstrap.c"
 if($408){label=122;break;}else{var $413=0;label=123;break;} //@line 2956 "tcc_bootstrap.c"
 case 122: 
 var $410=$ch; //@line 2956 "tcc_bootstrap.c"
 var $411=($410|0)<=57; //@line 2956 "tcc_bootstrap.c"
 var $413=$411;label=123;break;
 case 123: 
 var $413;
 if($413){label=124;break;}else{label=127;break;}
 case 124: 
 var $415=$q; //@line 2957 "tcc_bootstrap.c"
 var $416=($415>>>0)>=10416; //@line 2957 "tcc_bootstrap.c"
 if($416){label=125;break;}else{label=126;break;} //@line 2957 "tcc_bootstrap.c"
 case 125: 
 label=30;break; //@line 2958 "tcc_bootstrap.c"
 case 126: 
 var $419=$ch; //@line 2959 "tcc_bootstrap.c"
 var $420=(($419)&255); //@line 2959 "tcc_bootstrap.c"
 var $421=$q; //@line 2959 "tcc_bootstrap.c"
 var $422=(($421+1)|0); //@line 2959 "tcc_bootstrap.c"
 $q=$422; //@line 2959 "tcc_bootstrap.c"
 HEAP8[(($421)>>0)]=$420; //@line 2959 "tcc_bootstrap.c"
 var $423=$1; //@line 2960 "tcc_bootstrap.c"
 var $424=(($423+1)|0); //@line 2960 "tcc_bootstrap.c"
 $1=$424; //@line 2960 "tcc_bootstrap.c"
 var $425=HEAP8[(($423)>>0)]; //@line 2960 "tcc_bootstrap.c"
 var $426=(($425<<24)>>24); //@line 2960 "tcc_bootstrap.c"
 $ch=$426; //@line 2960 "tcc_bootstrap.c"
 label=121;break; //@line 2961 "tcc_bootstrap.c"
 case 127: 
 label=128;break; //@line 2962 "tcc_bootstrap.c"
 case 128: 
 var $429=$q; //@line 2963 "tcc_bootstrap.c"
 HEAP8[(($429)>>0)]=0; //@line 2963 "tcc_bootstrap.c"
 var $430=$ch; //@line 2964 "tcc_bootstrap.c"
 var $431=_toup($430); //@line 2964 "tcc_bootstrap.c"
 $t=$431; //@line 2964 "tcc_bootstrap.c"
 var $432=$t; //@line 2965 "tcc_bootstrap.c"
 var $433=($432|0)==70; //@line 2965 "tcc_bootstrap.c"
 if($433){label=129;break;}else{label=130;break;} //@line 2965 "tcc_bootstrap.c"
 case 129: 
 var $435=$1; //@line 2966 "tcc_bootstrap.c"
 var $436=(($435+1)|0); //@line 2966 "tcc_bootstrap.c"
 $1=$436; //@line 2966 "tcc_bootstrap.c"
 var $437=HEAP8[(($435)>>0)]; //@line 2966 "tcc_bootstrap.c"
 var $438=(($437<<24)>>24); //@line 2966 "tcc_bootstrap.c"
 $ch=$438; //@line 2966 "tcc_bootstrap.c"
 HEAP32[((10472)>>2)]=187; //@line 2967 "tcc_bootstrap.c"
 var $439=_strtof(9392,0); //@line 2968 "tcc_bootstrap.c"
 HEAPF32[((10440)>>2)]=$439; //@line 2968 "tcc_bootstrap.c"
 label=134;break; //@line 2969 "tcc_bootstrap.c"
 case 130: 
 var $441=$t; //@line 2969 "tcc_bootstrap.c"
 var $442=($441|0)==76; //@line 2969 "tcc_bootstrap.c"
 if($442){label=131;break;}else{label=132;break;} //@line 2969 "tcc_bootstrap.c"
 case 131: 
 var $444=$1; //@line 2970 "tcc_bootstrap.c"
 var $445=(($444+1)|0); //@line 2970 "tcc_bootstrap.c"
 $1=$445; //@line 2970 "tcc_bootstrap.c"
 var $446=HEAP8[(($444)>>0)]; //@line 2970 "tcc_bootstrap.c"
 var $447=(($446<<24)>>24); //@line 2970 "tcc_bootstrap.c"
 $ch=$447; //@line 2970 "tcc_bootstrap.c"
 HEAP32[((10472)>>2)]=189; //@line 2971 "tcc_bootstrap.c"
 var $448=_strtold(9392,0); //@line 2972 "tcc_bootstrap.c"
 HEAPF64[((10440)>>3)]=$448; //@line 2972 "tcc_bootstrap.c"
 label=133;break; //@line 2973 "tcc_bootstrap.c"
 case 132: 
 HEAP32[((10472)>>2)]=188; //@line 2974 "tcc_bootstrap.c"
 var $450=_strtod(9392,0); //@line 2975 "tcc_bootstrap.c"
 HEAPF64[((10440)>>3)]=$450; //@line 2975 "tcc_bootstrap.c"
 label=133;break;
 case 133: 
 label=134;break;
 case 134: 
 label=135;break;
 case 135: 
 label=198;break; //@line 2978 "tcc_bootstrap.c"
 case 136: 
 $ov=0; //@line 2980 "tcc_bootstrap.c"
 var $455=$q; //@line 2982 "tcc_bootstrap.c"
 HEAP8[(($455)>>0)]=0; //@line 2982 "tcc_bootstrap.c"
 $q=9392; //@line 2983 "tcc_bootstrap.c"
 var $456=$b; //@line 2984 "tcc_bootstrap.c"
 var $457=($456|0)==10; //@line 2984 "tcc_bootstrap.c"
 if($457){label=137;break;}else{label=139;break;} //@line 2984 "tcc_bootstrap.c"
 case 137: 
 var $459=$q; //@line 2984 "tcc_bootstrap.c"
 var $460=HEAP8[(($459)>>0)]; //@line 2984 "tcc_bootstrap.c"
 var $461=(($460<<24)>>24); //@line 2984 "tcc_bootstrap.c"
 var $462=($461|0)==48; //@line 2984 "tcc_bootstrap.c"
 if($462){label=138;break;}else{label=139;break;} //@line 2984 "tcc_bootstrap.c"
 case 138: 
 $b=8; //@line 2985 "tcc_bootstrap.c"
 var $464=$q; //@line 2986 "tcc_bootstrap.c"
 var $465=(($464+1)|0); //@line 2986 "tcc_bootstrap.c"
 $q=$465; //@line 2986 "tcc_bootstrap.c"
 label=139;break; //@line 2987 "tcc_bootstrap.c"
 case 139: 
 var $$etemp$0$0=0;
 var $$etemp$0$1=0;
 var $st$1$0=(($n)|0);
 HEAP32[(($st$1$0)>>2)]=$$etemp$0$0;
 var $st$2$1=(($n+4)|0);
 HEAP32[(($st$2$1)>>2)]=$$etemp$0$1;
 label=140;break; //@line 2989 "tcc_bootstrap.c"
 case 140: 
 var $468=$q; //@line 2990 "tcc_bootstrap.c"
 var $469=(($468+1)|0); //@line 2990 "tcc_bootstrap.c"
 $q=$469; //@line 2990 "tcc_bootstrap.c"
 var $470=HEAP8[(($468)>>0)]; //@line 2990 "tcc_bootstrap.c"
 var $471=(($470<<24)>>24); //@line 2990 "tcc_bootstrap.c"
 $t=$471; //@line 2990 "tcc_bootstrap.c"
 var $472=$t; //@line 2991 "tcc_bootstrap.c"
 var $473=($472|0)==0; //@line 2991 "tcc_bootstrap.c"
 if($473){label=141;break;}else{label=142;break;} //@line 2991 "tcc_bootstrap.c"
 case 141: 
 label=155;break; //@line 2992 "tcc_bootstrap.c"
 case 142: 
 var $476=$t; //@line 2993 "tcc_bootstrap.c"
 var $477=($476|0)>=97; //@line 2993 "tcc_bootstrap.c"
 if($477){label=143;break;}else{label=144;break;} //@line 2993 "tcc_bootstrap.c"
 case 143: 
 var $479=$t; //@line 2994 "tcc_bootstrap.c"
 var $480=((($479)-(97))|0); //@line 2994 "tcc_bootstrap.c"
 var $481=((($480)+(10))|0); //@line 2994 "tcc_bootstrap.c"
 $t=$481; //@line 2994 "tcc_bootstrap.c"
 label=148;break; //@line 2994 "tcc_bootstrap.c"
 case 144: 
 var $483=$t; //@line 2995 "tcc_bootstrap.c"
 var $484=($483|0)>=65; //@line 2995 "tcc_bootstrap.c"
 if($484){label=145;break;}else{label=146;break;} //@line 2995 "tcc_bootstrap.c"
 case 145: 
 var $486=$t; //@line 2996 "tcc_bootstrap.c"
 var $487=((($486)-(65))|0); //@line 2996 "tcc_bootstrap.c"
 var $488=((($487)+(10))|0); //@line 2996 "tcc_bootstrap.c"
 $t=$488; //@line 2996 "tcc_bootstrap.c"
 label=147;break; //@line 2996 "tcc_bootstrap.c"
 case 146: 
 var $490=$t; //@line 2998 "tcc_bootstrap.c"
 var $491=((($490)-(48))|0); //@line 2998 "tcc_bootstrap.c"
 $t=$491; //@line 2998 "tcc_bootstrap.c"
 label=147;break;
 case 147: 
 label=148;break;
 case 148: 
 label=149;break;
 case 149: 
 var $495=$t; //@line 2999 "tcc_bootstrap.c"
 var $496=$b; //@line 2999 "tcc_bootstrap.c"
 var $497=($495|0)>=($496|0); //@line 2999 "tcc_bootstrap.c"
 if($497){label=150;break;}else{label=151;break;} //@line 2999 "tcc_bootstrap.c"
 case 150: 
 _tcc_error(5200,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs; //@line 3000 "tcc_bootstrap.c"
 label=151;break; //@line 3000 "tcc_bootstrap.c"
 case 151: 
 var $ld$3$0=(($n)|0);
 var $500$0=HEAP32[(($ld$3$0)>>2)];
 var $ld$4$1=(($n+4)|0);
 var $500$1=HEAP32[(($ld$4$1)>>2)];
 var $st$5$0=(($n1)|0);
 HEAP32[(($st$5$0)>>2)]=$500$0;
 var $st$6$1=(($n1+4)|0);
 HEAP32[(($st$6$1)>>2)]=$500$1;
 var $ld$7$0=(($n)|0);
 var $501$0=HEAP32[(($ld$7$0)>>2)];
 var $ld$8$1=(($n+4)|0);
 var $501$1=HEAP32[(($ld$8$1)>>2)];
 var $502=$b; //@line 3002 "tcc_bootstrap.c"
 var $503$0=$502;
 var $503$1=((((($502|0)<0))|0)?-1:0);
 var $504$0=___muldi3($501$0,$501$1,$503$0,$503$1);var $504$1=tempRet0; //@line 3002 "tcc_bootstrap.c"
 var $505=$t; //@line 3002 "tcc_bootstrap.c"
 var $506$0=$505;
 var $506$1=((((($505|0)<0))|0)?-1:0);
 var $507$0=_i64Add($504$0,$504$1,$506$0,$506$1);var $507$1=tempRet0; //@line 3002 "tcc_bootstrap.c"
 var $st$9$0=(($n)|0);
 HEAP32[(($st$9$0)>>2)]=$507$0;
 var $st$10$1=(($n+4)|0);
 HEAP32[(($st$10$1)>>2)]=$507$1;
 var $ld$11$0=(($n1)|0);
 var $508$0=HEAP32[(($ld$11$0)>>2)];
 var $ld$12$1=(($n1+4)|0);
 var $508$1=HEAP32[(($ld$12$1)>>2)];
 var $$etemp$13$0=0;
 var $$etemp$13$1=268435456;
 var $509=(($508$1>>>0) >= ($$etemp$13$1>>>0)) & (((($508$1>>>0) >  ($$etemp$13$1>>>0)) | ($508$0>>>0) >= ($$etemp$13$0>>>0))); //@line 3003 "tcc_bootstrap.c"
 if($509){label=152;break;}else{label=154;break;} //@line 3003 "tcc_bootstrap.c"
 case 152: 
 var $ld$14$0=(($n)|0);
 var $511$0=HEAP32[(($ld$14$0)>>2)];
 var $ld$15$1=(($n+4)|0);
 var $511$1=HEAP32[(($ld$15$1)>>2)];
 var $512=$b; //@line 3003 "tcc_bootstrap.c"
 var $513$0=$512;
 var $513$1=((((($512|0)<0))|0)?-1:0);
 var $514$0=___udivdi3($511$0,$511$1,$513$0,$513$1);var $514$1=tempRet0; //@line 3003 "tcc_bootstrap.c"
 var $ld$16$0=(($n1)|0);
 var $515$0=HEAP32[(($ld$16$0)>>2)];
 var $ld$17$1=(($n1+4)|0);
 var $515$1=HEAP32[(($ld$17$1)>>2)];
 var $516=(($514$0|0) != ($515$0|0)) | (($514$1|0) != ($515$1|0)); //@line 3003 "tcc_bootstrap.c"
 if($516){label=153;break;}else{label=154;break;} //@line 3003 "tcc_bootstrap.c"
 case 153: 
 $ov=1; //@line 3004 "tcc_bootstrap.c"
 label=154;break; //@line 3004 "tcc_bootstrap.c"
 case 154: 
 label=140;break; //@line 3005 "tcc_bootstrap.c"
 case 155: 
 $ucount=0; //@line 3006 "tcc_bootstrap.c"
 $lcount=0; //@line 3006 "tcc_bootstrap.c"
 var $520=$1; //@line 3007 "tcc_bootstrap.c"
 $p1=$520; //@line 3007 "tcc_bootstrap.c"
 label=156;break; //@line 3008 "tcc_bootstrap.c"
 case 156: 
 var $522=$ch; //@line 3009 "tcc_bootstrap.c"
 var $523=_toup($522); //@line 3009 "tcc_bootstrap.c"
 $t=$523; //@line 3009 "tcc_bootstrap.c"
 var $524=$t; //@line 3010 "tcc_bootstrap.c"
 var $525=($524|0)==76; //@line 3010 "tcc_bootstrap.c"
 if($525){label=157;break;}else{label=163;break;} //@line 3010 "tcc_bootstrap.c"
 case 157: 
 var $527=$lcount; //@line 3011 "tcc_bootstrap.c"
 var $528=($527|0)>=2; //@line 3011 "tcc_bootstrap.c"
 if($528){label=158;break;}else{label=159;break;} //@line 3011 "tcc_bootstrap.c"
 case 158: 
 _tcc_error(5120,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs; //@line 3012 "tcc_bootstrap.c"
 label=159;break; //@line 3012 "tcc_bootstrap.c"
 case 159: 
 var $531=$lcount; //@line 3013 "tcc_bootstrap.c"
 var $532=($531|0)!=0; //@line 3013 "tcc_bootstrap.c"
 if($532){label=160;break;}else{label=162;break;} //@line 3013 "tcc_bootstrap.c"
 case 160: 
 var $534=$1; //@line 3013 "tcc_bootstrap.c"
 var $535=((($534)-(1))|0); //@line 3013 "tcc_bootstrap.c"
 var $536=HEAP8[(($535)>>0)]; //@line 3013 "tcc_bootstrap.c"
 var $537=(($536<<24)>>24); //@line 3013 "tcc_bootstrap.c"
 var $538=$ch; //@line 3013 "tcc_bootstrap.c"
 var $539=($537|0)!=($538|0); //@line 3013 "tcc_bootstrap.c"
 if($539){label=161;break;}else{label=162;break;} //@line 3013 "tcc_bootstrap.c"
 case 161: 
 var $541=$p1; //@line 3014 "tcc_bootstrap.c"
 _tcc_error(5088,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$541,tempVarArgs)); STACKTOP=tempVarArgs; //@line 3014 "tcc_bootstrap.c"
 label=162;break; //@line 3014 "tcc_bootstrap.c"
 case 162: 
 var $543=$lcount; //@line 3015 "tcc_bootstrap.c"
 var $544=((($543)+(1))|0); //@line 3015 "tcc_bootstrap.c"
 $lcount=$544; //@line 3015 "tcc_bootstrap.c"
 var $545=$1; //@line 3016 "tcc_bootstrap.c"
 var $546=(($545+1)|0); //@line 3016 "tcc_bootstrap.c"
 $1=$546; //@line 3016 "tcc_bootstrap.c"
 var $547=HEAP8[(($545)>>0)]; //@line 3016 "tcc_bootstrap.c"
 var $548=(($547<<24)>>24); //@line 3016 "tcc_bootstrap.c"
 $ch=$548; //@line 3016 "tcc_bootstrap.c"
 label=169;break; //@line 3017 "tcc_bootstrap.c"
 case 163: 
 var $550=$t; //@line 3017 "tcc_bootstrap.c"
 var $551=($550|0)==85; //@line 3017 "tcc_bootstrap.c"
 if($551){label=164;break;}else{label=167;break;} //@line 3017 "tcc_bootstrap.c"
 case 164: 
 var $553=$ucount; //@line 3018 "tcc_bootstrap.c"
 var $554=($553|0)>=1; //@line 3018 "tcc_bootstrap.c"
 if($554){label=165;break;}else{label=166;break;} //@line 3018 "tcc_bootstrap.c"
 case 165: 
 _tcc_error(5056,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs; //@line 3019 "tcc_bootstrap.c"
 label=166;break; //@line 3019 "tcc_bootstrap.c"
 case 166: 
 var $557=$ucount; //@line 3020 "tcc_bootstrap.c"
 var $558=((($557)+(1))|0); //@line 3020 "tcc_bootstrap.c"
 $ucount=$558; //@line 3020 "tcc_bootstrap.c"
 var $559=$1; //@line 3021 "tcc_bootstrap.c"
 var $560=(($559+1)|0); //@line 3021 "tcc_bootstrap.c"
 $1=$560; //@line 3021 "tcc_bootstrap.c"
 var $561=HEAP8[(($559)>>0)]; //@line 3021 "tcc_bootstrap.c"
 var $562=(($561<<24)>>24); //@line 3021 "tcc_bootstrap.c"
 $ch=$562; //@line 3021 "tcc_bootstrap.c"
 label=168;break; //@line 3022 "tcc_bootstrap.c"
 case 167: 
 label=170;break; //@line 3023 "tcc_bootstrap.c"
 case 168: 
 label=169;break;
 case 169: 
 label=156;break; //@line 3025 "tcc_bootstrap.c"
 case 170: 
 var $567=$ucount; //@line 3026 "tcc_bootstrap.c"
 var $568=($567|0)==0; //@line 3026 "tcc_bootstrap.c"
 if($568){label=171;break;}else{label=179;break;} //@line 3026 "tcc_bootstrap.c"
 case 171: 
 var $570=$b; //@line 3026 "tcc_bootstrap.c"
 var $571=($570|0)==10; //@line 3026 "tcc_bootstrap.c"
 if($571){label=172;break;}else{label=179;break;} //@line 3026 "tcc_bootstrap.c"
 case 172: 
 var $573=$lcount; //@line 3027 "tcc_bootstrap.c"
 var $574=($573|0)<=1; //@line 3027 "tcc_bootstrap.c"
 if($574){label=173;break;}else{label=176;break;} //@line 3027 "tcc_bootstrap.c"
 case 173: 
 var $ld$18$0=(($n)|0);
 var $576$0=HEAP32[(($ld$18$0)>>2)];
 var $ld$19$1=(($n+4)|0);
 var $576$1=HEAP32[(($ld$19$1)>>2)];
 var $$etemp$20$0=-2147483648;
 var $$etemp$20$1=0;
 var $577=(($576$1>>>0) >= ($$etemp$20$1>>>0)) & (((($576$1>>>0) >  ($$etemp$20$1>>>0)) | ($576$0>>>0) >= ($$etemp$20$0>>>0))); //@line 3028 "tcc_bootstrap.c"
 if($577){label=174;break;}else{label=175;break;} //@line 3028 "tcc_bootstrap.c"
 case 174: 
 $lcount=2; //@line 3029 "tcc_bootstrap.c"
 label=175;break; //@line 3029 "tcc_bootstrap.c"
 case 175: 
 label=176;break; //@line 3030 "tcc_bootstrap.c"
 case 176: 
 var $ld$21$0=(($n)|0);
 var $581$0=HEAP32[(($ld$21$0)>>2)];
 var $ld$22$1=(($n+4)|0);
 var $581$1=HEAP32[(($ld$22$1)>>2)];
 var $$etemp$23$0=0;
 var $$etemp$23$1=-2147483648;
 var $582=(($581$1>>>0) >= ($$etemp$23$1>>>0)) & (((($581$1>>>0) >  ($$etemp$23$1>>>0)) | ($581$0>>>0) >= ($$etemp$23$0>>>0))); //@line 3031 "tcc_bootstrap.c"
 if($582){label=177;break;}else{label=178;break;} //@line 3031 "tcc_bootstrap.c"
 case 177: 
 $ov=1; //@line 3032 "tcc_bootstrap.c"
 $ucount=1; //@line 3032 "tcc_bootstrap.c"
 label=178;break; //@line 3032 "tcc_bootstrap.c"
 case 178: 
 label=189;break; //@line 3033 "tcc_bootstrap.c"
 case 179: 
 var $586=$lcount; //@line 3034 "tcc_bootstrap.c"
 var $587=($586|0)<=1; //@line 3034 "tcc_bootstrap.c"
 if($587){label=180;break;}else{label=186;break;} //@line 3034 "tcc_bootstrap.c"
 case 180: 
 var $ld$24$0=(($n)|0);
 var $589$0=HEAP32[(($ld$24$0)>>2)];
 var $ld$25$1=(($n+4)|0);
 var $589$1=HEAP32[(($ld$25$1)>>2)];
 var $$etemp$26$0=0;
 var $$etemp$26$1=1;
 var $590=(($589$1>>>0) >= ($$etemp$26$1>>>0)) & (((($589$1>>>0) >  ($$etemp$26$1>>>0)) | ($589$0>>>0) >= ($$etemp$26$0>>>0))); //@line 3035 "tcc_bootstrap.c"
 if($590){label=181;break;}else{label=182;break;} //@line 3035 "tcc_bootstrap.c"
 case 181: 
 $lcount=2; //@line 3036 "tcc_bootstrap.c"
 label=185;break; //@line 3036 "tcc_bootstrap.c"
 case 182: 
 var $ld$27$0=(($n)|0);
 var $593$0=HEAP32[(($ld$27$0)>>2)];
 var $ld$28$1=(($n+4)|0);
 var $593$1=HEAP32[(($ld$28$1)>>2)];
 var $$etemp$29$0=-2147483648;
 var $$etemp$29$1=0;
 var $594=(($593$1>>>0) >= ($$etemp$29$1>>>0)) & (((($593$1>>>0) >  ($$etemp$29$1>>>0)) | ($593$0>>>0) >= ($$etemp$29$0>>>0))); //@line 3037 "tcc_bootstrap.c"
 if($594){label=183;break;}else{label=184;break;} //@line 3037 "tcc_bootstrap.c"
 case 183: 
 $ucount=1; //@line 3038 "tcc_bootstrap.c"
 label=184;break; //@line 3038 "tcc_bootstrap.c"
 case 184: 
 label=185;break;
 case 185: 
 label=186;break; //@line 3039 "tcc_bootstrap.c"
 case 186: 
 var $ld$30$0=(($n)|0);
 var $599$0=HEAP32[(($ld$30$0)>>2)];
 var $ld$31$1=(($n+4)|0);
 var $599$1=HEAP32[(($ld$31$1)>>2)];
 var $$etemp$32$0=0;
 var $$etemp$32$1=-2147483648;
 var $600=(($599$1>>>0) >= ($$etemp$32$1>>>0)) & (((($599$1>>>0) >  ($$etemp$32$1>>>0)) | ($599$0>>>0) >= ($$etemp$32$0>>>0))); //@line 3040 "tcc_bootstrap.c"
 if($600){label=187;break;}else{label=188;break;} //@line 3040 "tcc_bootstrap.c"
 case 187: 
 $ucount=1; //@line 3041 "tcc_bootstrap.c"
 label=188;break; //@line 3041 "tcc_bootstrap.c"
 case 188: 
 label=189;break;
 case 189: 
 var $604=$ov; //@line 3043 "tcc_bootstrap.c"
 var $605=($604|0)!=0; //@line 3043 "tcc_bootstrap.c"
 if($605){label=190;break;}else{label=191;break;} //@line 3043 "tcc_bootstrap.c"
 case 190: 
 _tcc_warning(5024,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs; //@line 3044 "tcc_bootstrap.c"
 label=191;break; //@line 3044 "tcc_bootstrap.c"
 case 191: 
 HEAP32[((10472)>>2)]=181; //@line 3045 "tcc_bootstrap.c"
 var $608=$lcount; //@line 3046 "tcc_bootstrap.c"
 var $609=($608|0)!=0; //@line 3046 "tcc_bootstrap.c"
 if($609){label=192;break;}else{label=195;break;} //@line 3046 "tcc_bootstrap.c"
 case 192: 
 HEAP32[((10472)>>2)]=206; //@line 3047 "tcc_bootstrap.c"
 var $611=$lcount; //@line 3048 "tcc_bootstrap.c"
 var $612=($611|0)==2; //@line 3048 "tcc_bootstrap.c"
 if($612){label=193;break;}else{label=194;break;} //@line 3048 "tcc_bootstrap.c"
 case 193: 
 HEAP32[((10472)>>2)]=183; //@line 3049 "tcc_bootstrap.c"
 label=194;break; //@line 3049 "tcc_bootstrap.c"
 case 194: 
 label=195;break; //@line 3050 "tcc_bootstrap.c"
 case 195: 
 var $616=$ucount; //@line 3051 "tcc_bootstrap.c"
 var $617=($616|0)!=0; //@line 3051 "tcc_bootstrap.c"
 if($617){label=196;break;}else{label=197;break;} //@line 3051 "tcc_bootstrap.c"
 case 196: 
 var $619=HEAP32[((10472)>>2)]; //@line 3052 "tcc_bootstrap.c"
 var $620=((($619)+(1))|0); //@line 3052 "tcc_bootstrap.c"
 HEAP32[((10472)>>2)]=$620; //@line 3052 "tcc_bootstrap.c"
 label=197;break; //@line 3052 "tcc_bootstrap.c"
 case 197: 
 var $ld$33$0=(($n)|0);
 var $622$0=HEAP32[(($ld$33$0)>>2)];
 var $ld$34$1=(($n+4)|0);
 var $622$1=HEAP32[(($ld$34$1)>>2)];
 var $$etemp$35=10440;
 var $st$36$0=(($$etemp$35)|0);
 HEAP32[(($st$36$0)>>2)]=$622$0;
 var $st$37$1=(($$etemp$35+4)|0);
 HEAP32[(($st$37$1)>>2)]=$622$1;
 label=198;break;
 case 198: 
 var $624=$ch; //@line 3055 "tcc_bootstrap.c"
 var $625=($624|0)!=0; //@line 3055 "tcc_bootstrap.c"
 if($625){label=199;break;}else{label=200;break;} //@line 3055 "tcc_bootstrap.c"
 case 199: 
 _tcc_error(5008,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs; //@line 3056 "tcc_bootstrap.c"
 label=200;break; //@line 3056 "tcc_bootstrap.c"
 case 200: 
 STACKTOP=sp;return; //@line 3057 "tcc_bootstrap.c"
  default: assert(0, "bad label: " + label);
 }

}


function _parse_string($s,$len){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+1000)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $buf=sp;
 var $p;
 var $is_long;
 var $sep;
 var $char_size;
 var $i;
 var $n;
 var $c;
 $1=$s;
 $2=$len;
 var $3=(($buf)|0); //@line 2746 "tcc_bootstrap.c"
 $p=$3; //@line 2746 "tcc_bootstrap.c"
 var $4=$1; //@line 2748 "tcc_bootstrap.c"
 var $5=HEAP8[(($4)>>0)]; //@line 2748 "tcc_bootstrap.c"
 var $6=(($5<<24)>>24); //@line 2748 "tcc_bootstrap.c"
 var $7=($6|0)==76; //@line 2748 "tcc_bootstrap.c"
 var $8=($7&1); //@line 2748 "tcc_bootstrap.c"
 $is_long=$8; //@line 2748 "tcc_bootstrap.c"
 if($7){label=2;break;}else{label=3;break;} //@line 2748 "tcc_bootstrap.c"
 case 2: 
 var $10=$1; //@line 2749 "tcc_bootstrap.c"
 var $11=(($10+1)|0); //@line 2749 "tcc_bootstrap.c"
 $1=$11; //@line 2749 "tcc_bootstrap.c"
 var $12=$2; //@line 2749 "tcc_bootstrap.c"
 var $13=((($12)-(1))|0); //@line 2749 "tcc_bootstrap.c"
 $2=$13; //@line 2749 "tcc_bootstrap.c"
 label=3;break; //@line 2749 "tcc_bootstrap.c"
 case 3: 
 var $15=$1; //@line 2750 "tcc_bootstrap.c"
 var $16=(($15+1)|0); //@line 2750 "tcc_bootstrap.c"
 $1=$16; //@line 2750 "tcc_bootstrap.c"
 var $17=HEAP8[(($15)>>0)]; //@line 2750 "tcc_bootstrap.c"
 var $18=(($17<<24)>>24); //@line 2750 "tcc_bootstrap.c"
 $sep=$18; //@line 2750 "tcc_bootstrap.c"
 var $19=$2; //@line 2751 "tcc_bootstrap.c"
 var $20=((($19)-(2))|0); //@line 2751 "tcc_bootstrap.c"
 $2=$20; //@line 2751 "tcc_bootstrap.c"
 var $21=$2; //@line 2752 "tcc_bootstrap.c"
 var $22=($21>>>0)>=1000; //@line 2752 "tcc_bootstrap.c"
 if($22){label=4;break;}else{label=5;break;} //@line 2752 "tcc_bootstrap.c"
 case 4: 
 var $24=$2; //@line 2753 "tcc_bootstrap.c"
 var $25=((($24)+(1))|0); //@line 2753 "tcc_bootstrap.c"
 var $26=_tcc_malloc($25); //@line 2753 "tcc_bootstrap.c"
 $p=$26; //@line 2753 "tcc_bootstrap.c"
 label=5;break; //@line 2753 "tcc_bootstrap.c"
 case 5: 
 var $28=$p; //@line 2754 "tcc_bootstrap.c"
 var $29=$1; //@line 2754 "tcc_bootstrap.c"
 var $30=$2; //@line 2754 "tcc_bootstrap.c"
 assert($30 % 1 === 0);(_memcpy($28, $29, $30)|0); //@line 2754 "tcc_bootstrap.c"
 var $31=$2; //@line 2755 "tcc_bootstrap.c"
 var $32=$p; //@line 2755 "tcc_bootstrap.c"
 var $33=(($32+$31)|0); //@line 2755 "tcc_bootstrap.c"
 HEAP8[(($33)>>0)]=0; //@line 2755 "tcc_bootstrap.c"
 _cstr_reset(10424); //@line 2756 "tcc_bootstrap.c"
 var $34=$p; //@line 2757 "tcc_bootstrap.c"
 var $35=$is_long; //@line 2757 "tcc_bootstrap.c"
 _parse_escape_string(10424,$34,$35); //@line 2757 "tcc_bootstrap.c"
 var $36=$p; //@line 2758 "tcc_bootstrap.c"
 var $37=(($buf)|0); //@line 2758 "tcc_bootstrap.c"
 var $38=($36|0)!=($37|0); //@line 2758 "tcc_bootstrap.c"
 if($38){label=6;break;}else{label=7;break;} //@line 2758 "tcc_bootstrap.c"
 case 6: 
 var $40=$p; //@line 2759 "tcc_bootstrap.c"
 _tcc_free($40); //@line 2759 "tcc_bootstrap.c"
 label=7;break; //@line 2759 "tcc_bootstrap.c"
 case 7: 
 var $42=$sep; //@line 2760 "tcc_bootstrap.c"
 var $43=($42|0)==39; //@line 2760 "tcc_bootstrap.c"
 if($43){label=8;break;}else{label=23;break;} //@line 2760 "tcc_bootstrap.c"
 case 8: 
 var $45=$is_long; //@line 2763 "tcc_bootstrap.c"
 var $46=($45|0)!=0; //@line 2763 "tcc_bootstrap.c"
 if($46){label=10;break;}else{label=9;break;} //@line 2763 "tcc_bootstrap.c"
 case 9: 
 HEAP32[((10472)>>2)]=179; //@line 2764 "tcc_bootstrap.c"
 $char_size=1; //@line 2764 "tcc_bootstrap.c"
 label=11;break; //@line 2764 "tcc_bootstrap.c"
 case 10: 
 HEAP32[((10472)>>2)]=180; //@line 2766 "tcc_bootstrap.c"
 $char_size=4; //@line 2766 "tcc_bootstrap.c"
 label=11;break;
 case 11: 
 var $50=HEAP32[((10424)>>2)]; //@line 2767 "tcc_bootstrap.c"
 var $51=$char_size; //@line 2767 "tcc_bootstrap.c"
 var $52=(((($50|0))/(($51|0)))&-1); //@line 2767 "tcc_bootstrap.c"
 var $53=((($52)-(1))|0); //@line 2767 "tcc_bootstrap.c"
 $n=$53; //@line 2767 "tcc_bootstrap.c"
 var $54=$n; //@line 2768 "tcc_bootstrap.c"
 var $55=($54|0)<1; //@line 2768 "tcc_bootstrap.c"
 if($55){label=12;break;}else{label=13;break;} //@line 2768 "tcc_bootstrap.c"
 case 12: 
 _tcc_error(5392,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs; //@line 2769 "tcc_bootstrap.c"
 label=13;break; //@line 2769 "tcc_bootstrap.c"
 case 13: 
 var $58=$n; //@line 2770 "tcc_bootstrap.c"
 var $59=($58|0)>1; //@line 2770 "tcc_bootstrap.c"
 if($59){label=14;break;}else{label=15;break;} //@line 2770 "tcc_bootstrap.c"
 case 14: 
 _tcc_warning(5352,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs; //@line 2771 "tcc_bootstrap.c"
 label=15;break; //@line 2771 "tcc_bootstrap.c"
 case 15: 
 $i=0; //@line 2772 "tcc_bootstrap.c"
 $c=0; //@line 2772 "tcc_bootstrap.c"
 label=16;break; //@line 2772 "tcc_bootstrap.c"
 case 16: 
 var $63=$i; //@line 2772 "tcc_bootstrap.c"
 var $64=$n; //@line 2772 "tcc_bootstrap.c"
 var $65=($63|0)<($64|0); //@line 2772 "tcc_bootstrap.c"
 if($65){label=17;break;}else{label=22;break;} //@line 2772 "tcc_bootstrap.c"
 case 17: 
 var $67=$is_long; //@line 2773 "tcc_bootstrap.c"
 var $68=($67|0)!=0; //@line 2773 "tcc_bootstrap.c"
 if($68){label=18;break;}else{label=19;break;} //@line 2773 "tcc_bootstrap.c"
 case 18: 
 var $70=$i; //@line 2774 "tcc_bootstrap.c"
 var $71=HEAP32[((10428)>>2)]; //@line 2774 "tcc_bootstrap.c"
 var $72=$71; //@line 2774 "tcc_bootstrap.c"
 var $73=(($72+($70<<2))|0); //@line 2774 "tcc_bootstrap.c"
 var $74=HEAP32[(($73)>>2)]; //@line 2774 "tcc_bootstrap.c"
 $c=$74; //@line 2774 "tcc_bootstrap.c"
 label=20;break; //@line 2774 "tcc_bootstrap.c"
 case 19: 
 var $76=$c; //@line 2776 "tcc_bootstrap.c"
 var $77=$76<<8; //@line 2776 "tcc_bootstrap.c"
 var $78=$i; //@line 2776 "tcc_bootstrap.c"
 var $79=HEAP32[((10428)>>2)]; //@line 2776 "tcc_bootstrap.c"
 var $80=(($79+$78)|0); //@line 2776 "tcc_bootstrap.c"
 var $81=HEAP8[(($80)>>0)]; //@line 2776 "tcc_bootstrap.c"
 var $82=(($81<<24)>>24); //@line 2776 "tcc_bootstrap.c"
 var $83=$77|$82; //@line 2776 "tcc_bootstrap.c"
 $c=$83; //@line 2776 "tcc_bootstrap.c"
 label=20;break;
 case 20: 
 label=21;break; //@line 2777 "tcc_bootstrap.c"
 case 21: 
 var $86=$i; //@line 2772 "tcc_bootstrap.c"
 var $87=((($86)+(1))|0); //@line 2772 "tcc_bootstrap.c"
 $i=$87; //@line 2772 "tcc_bootstrap.c"
 label=16;break; //@line 2772 "tcc_bootstrap.c"
 case 22: 
 var $89=$c; //@line 2778 "tcc_bootstrap.c"
 var $90$0=$89;
 var $90$1=((((($89|0)<0))|0)?-1:0);
 var $$etemp$0=10440;
 var $st$1$0=(($$etemp$0)|0);
 HEAP32[(($st$1$0)>>2)]=$90$0;
 var $st$2$1=(($$etemp$0+4)|0);
 HEAP32[(($st$2$1)>>2)]=$90$1;
 label=27;break; //@line 2779 "tcc_bootstrap.c"
 case 23: 
 var $92=HEAP32[((10424)>>2)]; //@line 2780 "tcc_bootstrap.c"
 HEAP32[((10440)>>2)]=$92; //@line 2780 "tcc_bootstrap.c"
 var $93=HEAP32[((10428)>>2)]; //@line 2781 "tcc_bootstrap.c"
 HEAP32[((10444)>>2)]=$93; //@line 2781 "tcc_bootstrap.c"
 var $94=$is_long; //@line 2782 "tcc_bootstrap.c"
 var $95=($94|0)!=0; //@line 2782 "tcc_bootstrap.c"
 if($95){label=25;break;}else{label=24;break;} //@line 2782 "tcc_bootstrap.c"
 case 24: 
 HEAP32[((10472)>>2)]=185; //@line 2783 "tcc_bootstrap.c"
 label=26;break; //@line 2783 "tcc_bootstrap.c"
 case 25: 
 HEAP32[((10472)>>2)]=186; //@line 2785 "tcc_bootstrap.c"
 label=26;break;
 case 26: 
 label=27;break;
 case 27: 
 STACKTOP=sp;return; //@line 2787 "tcc_bootstrap.c"
  default: assert(0, "bad label: " + label);
 }

}


function _parse_escape_string($outstr,$buf,$is_long){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $c;
 var $n;
 var $p;
 var $cont;
 var $skip;
 var $i;
 var $l;
 var $h;
 $1=$outstr;
 $2=$buf;
 $3=$is_long;
 var $4=$2; //@line 2607 "tcc_bootstrap.c"
 $p=$4; //@line 2607 "tcc_bootstrap.c"
 label=2;break; //@line 2608 "tcc_bootstrap.c"
 case 2: 
 var $6=$p; //@line 2609 "tcc_bootstrap.c"
 var $7=HEAP8[(($6)>>0)]; //@line 2609 "tcc_bootstrap.c"
 var $8=($7&255); //@line 2609 "tcc_bootstrap.c"
 $c=$8; //@line 2609 "tcc_bootstrap.c"
 var $9=$c; //@line 2610 "tcc_bootstrap.c"
 var $10=($9|0)==0; //@line 2610 "tcc_bootstrap.c"
 if($10){label=3;break;}else{label=4;break;} //@line 2610 "tcc_bootstrap.c"
 case 3: 
 label=79;break; //@line 2611 "tcc_bootstrap.c"
 case 4: 
 var $13=$c; //@line 2612 "tcc_bootstrap.c"
 var $14=($13|0)==92; //@line 2612 "tcc_bootstrap.c"
 if($14){label=5;break;}else{label=43;break;} //@line 2612 "tcc_bootstrap.c"
 case 5: 
 var $16=$p; //@line 2613 "tcc_bootstrap.c"
 var $17=(($16+1)|0); //@line 2613 "tcc_bootstrap.c"
 $p=$17; //@line 2613 "tcc_bootstrap.c"
 var $18=$p; //@line 2614 "tcc_bootstrap.c"
 var $19=HEAP8[(($18)>>0)]; //@line 2614 "tcc_bootstrap.c"
 var $20=($19&255); //@line 2614 "tcc_bootstrap.c"
 $c=$20; //@line 2614 "tcc_bootstrap.c"
 var $21=$c; //@line 2615 "tcc_bootstrap.c"
 switch(($21|0)){case 120:case 117:case 85:{ label=11;break;}case 97:{ label=25;break;}case 98:{ label=26;break;}case 102:{ label=27;break;}case 110:{ label=28;break;}case 114:{ label=29;break;}case 116:{ label=30;break;}case 118:{ label=31;break;}case 101:{ label=32;break;}case 39:case 34:case 92:case 63:{ label=35;break;}case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:{ label=6;break;}default:{label=36;break;}}break;
 case 6: 
 var $23=$c; //@line 2618 "tcc_bootstrap.c"
 var $24=((($23)-(48))|0); //@line 2618 "tcc_bootstrap.c"
 $n=$24; //@line 2618 "tcc_bootstrap.c"
 var $25=$p; //@line 2619 "tcc_bootstrap.c"
 var $26=(($25+1)|0); //@line 2619 "tcc_bootstrap.c"
 $p=$26; //@line 2619 "tcc_bootstrap.c"
 var $27=$p; //@line 2620 "tcc_bootstrap.c"
 var $28=HEAP8[(($27)>>0)]; //@line 2620 "tcc_bootstrap.c"
 var $29=($28&255); //@line 2620 "tcc_bootstrap.c"
 $c=$29; //@line 2620 "tcc_bootstrap.c"
 var $30=$c; //@line 2621 "tcc_bootstrap.c"
 var $31=_isoct($30); //@line 2621 "tcc_bootstrap.c"
 var $32=($31|0)!=0; //@line 2621 "tcc_bootstrap.c"
 if($32){label=7;break;}else{label=10;break;} //@line 2621 "tcc_bootstrap.c"
 case 7: 
 var $34=$n; //@line 2622 "tcc_bootstrap.c"
 var $35=($34<<3); //@line 2622 "tcc_bootstrap.c"
 var $36=$c; //@line 2622 "tcc_bootstrap.c"
 var $37=((($35)+($36))|0); //@line 2622 "tcc_bootstrap.c"
 var $38=((($37)-(48))|0); //@line 2622 "tcc_bootstrap.c"
 $n=$38; //@line 2622 "tcc_bootstrap.c"
 var $39=$p; //@line 2623 "tcc_bootstrap.c"
 var $40=(($39+1)|0); //@line 2623 "tcc_bootstrap.c"
 $p=$40; //@line 2623 "tcc_bootstrap.c"
 var $41=$p; //@line 2624 "tcc_bootstrap.c"
 var $42=HEAP8[(($41)>>0)]; //@line 2624 "tcc_bootstrap.c"
 var $43=($42&255); //@line 2624 "tcc_bootstrap.c"
 $c=$43; //@line 2624 "tcc_bootstrap.c"
 var $44=$c; //@line 2625 "tcc_bootstrap.c"
 var $45=_isoct($44); //@line 2625 "tcc_bootstrap.c"
 var $46=($45|0)!=0; //@line 2625 "tcc_bootstrap.c"
 if($46){label=8;break;}else{label=9;break;} //@line 2625 "tcc_bootstrap.c"
 case 8: 
 var $48=$n; //@line 2626 "tcc_bootstrap.c"
 var $49=($48<<3); //@line 2626 "tcc_bootstrap.c"
 var $50=$c; //@line 2626 "tcc_bootstrap.c"
 var $51=((($49)+($50))|0); //@line 2626 "tcc_bootstrap.c"
 var $52=((($51)-(48))|0); //@line 2626 "tcc_bootstrap.c"
 $n=$52; //@line 2626 "tcc_bootstrap.c"
 var $53=$p; //@line 2627 "tcc_bootstrap.c"
 var $54=(($53+1)|0); //@line 2627 "tcc_bootstrap.c"
 $p=$54; //@line 2627 "tcc_bootstrap.c"
 label=9;break; //@line 2628 "tcc_bootstrap.c"
 case 9: 
 label=10;break; //@line 2629 "tcc_bootstrap.c"
 case 10: 
 var $57=$n; //@line 2630 "tcc_bootstrap.c"
 $c=$57; //@line 2630 "tcc_bootstrap.c"
 label=75;break; //@line 2631 "tcc_bootstrap.c"
 case 11: 
 var $59=$p; //@line 2635 "tcc_bootstrap.c"
 var $60=(($59+1)|0); //@line 2635 "tcc_bootstrap.c"
 $p=$60; //@line 2635 "tcc_bootstrap.c"
 $n=0; //@line 2636 "tcc_bootstrap.c"
 label=12;break; //@line 2637 "tcc_bootstrap.c"
 case 12: 
 var $62=$p; //@line 2638 "tcc_bootstrap.c"
 var $63=HEAP8[(($62)>>0)]; //@line 2638 "tcc_bootstrap.c"
 var $64=($63&255); //@line 2638 "tcc_bootstrap.c"
 $c=$64; //@line 2638 "tcc_bootstrap.c"
 var $65=$c; //@line 2639 "tcc_bootstrap.c"
 var $66=($65|0)>=97; //@line 2639 "tcc_bootstrap.c"
 if($66){label=13;break;}else{label=15;break;} //@line 2639 "tcc_bootstrap.c"
 case 13: 
 var $68=$c; //@line 2639 "tcc_bootstrap.c"
 var $69=($68|0)<=102; //@line 2639 "tcc_bootstrap.c"
 if($69){label=14;break;}else{label=15;break;} //@line 2639 "tcc_bootstrap.c"
 case 14: 
 var $71=$c; //@line 2640 "tcc_bootstrap.c"
 var $72=((($71)-(97))|0); //@line 2640 "tcc_bootstrap.c"
 var $73=((($72)+(10))|0); //@line 2640 "tcc_bootstrap.c"
 $c=$73; //@line 2640 "tcc_bootstrap.c"
 label=23;break; //@line 2640 "tcc_bootstrap.c"
 case 15: 
 var $75=$c; //@line 2641 "tcc_bootstrap.c"
 var $76=($75|0)>=65; //@line 2641 "tcc_bootstrap.c"
 if($76){label=16;break;}else{label=18;break;} //@line 2641 "tcc_bootstrap.c"
 case 16: 
 var $78=$c; //@line 2641 "tcc_bootstrap.c"
 var $79=($78|0)<=70; //@line 2641 "tcc_bootstrap.c"
 if($79){label=17;break;}else{label=18;break;} //@line 2641 "tcc_bootstrap.c"
 case 17: 
 var $81=$c; //@line 2642 "tcc_bootstrap.c"
 var $82=((($81)-(65))|0); //@line 2642 "tcc_bootstrap.c"
 var $83=((($82)+(10))|0); //@line 2642 "tcc_bootstrap.c"
 $c=$83; //@line 2642 "tcc_bootstrap.c"
 label=22;break; //@line 2642 "tcc_bootstrap.c"
 case 18: 
 var $85=$c; //@line 2643 "tcc_bootstrap.c"
 var $86=_isnum($85); //@line 2643 "tcc_bootstrap.c"
 var $87=($86|0)!=0; //@line 2643 "tcc_bootstrap.c"
 if($87){label=19;break;}else{label=20;break;} //@line 2643 "tcc_bootstrap.c"
 case 19: 
 var $89=$c; //@line 2644 "tcc_bootstrap.c"
 var $90=((($89)-(48))|0); //@line 2644 "tcc_bootstrap.c"
 $c=$90; //@line 2644 "tcc_bootstrap.c"
 label=21;break; //@line 2644 "tcc_bootstrap.c"
 case 20: 
 label=24;break; //@line 2646 "tcc_bootstrap.c"
 case 21: 
 label=22;break;
 case 22: 
 label=23;break;
 case 23: 
 var $95=$n; //@line 2647 "tcc_bootstrap.c"
 var $96=($95<<4); //@line 2647 "tcc_bootstrap.c"
 var $97=$c; //@line 2647 "tcc_bootstrap.c"
 var $98=((($96)+($97))|0); //@line 2647 "tcc_bootstrap.c"
 $n=$98; //@line 2647 "tcc_bootstrap.c"
 var $99=$p; //@line 2648 "tcc_bootstrap.c"
 var $100=(($99+1)|0); //@line 2648 "tcc_bootstrap.c"
 $p=$100; //@line 2648 "tcc_bootstrap.c"
 label=12;break; //@line 2649 "tcc_bootstrap.c"
 case 24: 
 var $102=$n; //@line 2650 "tcc_bootstrap.c"
 $c=$102; //@line 2650 "tcc_bootstrap.c"
 label=75;break; //@line 2651 "tcc_bootstrap.c"
 case 25: 
 $c=7; //@line 2653 "tcc_bootstrap.c"
 label=42;break; //@line 2654 "tcc_bootstrap.c"
 case 26: 
 $c=8; //@line 2656 "tcc_bootstrap.c"
 label=42;break; //@line 2657 "tcc_bootstrap.c"
 case 27: 
 $c=12; //@line 2659 "tcc_bootstrap.c"
 label=42;break; //@line 2660 "tcc_bootstrap.c"
 case 28: 
 $c=10; //@line 2662 "tcc_bootstrap.c"
 label=42;break; //@line 2663 "tcc_bootstrap.c"
 case 29: 
 $c=13; //@line 2665 "tcc_bootstrap.c"
 label=42;break; //@line 2666 "tcc_bootstrap.c"
 case 30: 
 $c=9; //@line 2668 "tcc_bootstrap.c"
 label=42;break; //@line 2669 "tcc_bootstrap.c"
 case 31: 
 $c=11; //@line 2671 "tcc_bootstrap.c"
 label=42;break; //@line 2672 "tcc_bootstrap.c"
 case 32: 
 var $111=HEAP32[((2848)>>2)]; //@line 2674 "tcc_bootstrap.c"
 var $112=($111|0)!=0; //@line 2674 "tcc_bootstrap.c"
 if($112){label=34;break;}else{label=33;break;} //@line 2674 "tcc_bootstrap.c"
 case 33: 
 label=37;break; //@line 2675 "tcc_bootstrap.c"
 case 34: 
 $c=27; //@line 2676 "tcc_bootstrap.c"
 label=42;break; //@line 2677 "tcc_bootstrap.c"
 case 35: 
 label=42;break; //@line 2682 "tcc_bootstrap.c"
 case 36: 
 label=37;break; //@line 2682 "tcc_bootstrap.c"
 case 37: 
 var $118=$c; //@line 2685 "tcc_bootstrap.c"
 var $119=($118|0)>=33; //@line 2685 "tcc_bootstrap.c"
 if($119){label=38;break;}else{label=40;break;} //@line 2685 "tcc_bootstrap.c"
 case 38: 
 var $121=$c; //@line 2685 "tcc_bootstrap.c"
 var $122=($121|0)<=126; //@line 2685 "tcc_bootstrap.c"
 if($122){label=39;break;}else{label=40;break;} //@line 2685 "tcc_bootstrap.c"
 case 39: 
 var $124=$c; //@line 2686 "tcc_bootstrap.c"
 _tcc_warning(5320,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$124,tempVarArgs)); STACKTOP=tempVarArgs; //@line 2686 "tcc_bootstrap.c"
 label=41;break; //@line 2686 "tcc_bootstrap.c"
 case 40: 
 var $126=$c; //@line 2688 "tcc_bootstrap.c"
 _tcc_warning(5288,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$126,tempVarArgs)); STACKTOP=tempVarArgs; //@line 2688 "tcc_bootstrap.c"
 label=41;break;
 case 41: 
 label=42;break; //@line 2689 "tcc_bootstrap.c"
 case 42: 
 label=74;break; //@line 2691 "tcc_bootstrap.c"
 case 43: 
 var $130=$3; //@line 2691 "tcc_bootstrap.c"
 var $131=($130|0)!=0; //@line 2691 "tcc_bootstrap.c"
 if($131){label=44;break;}else{label=73;break;} //@line 2691 "tcc_bootstrap.c"
 case 44: 
 var $133=$c; //@line 2691 "tcc_bootstrap.c"
 var $134=($133|0)>=128; //@line 2691 "tcc_bootstrap.c"
 if($134){label=45;break;}else{label=73;break;} //@line 2691 "tcc_bootstrap.c"
 case 45: 
 var $136=$c; //@line 2695 "tcc_bootstrap.c"
 var $137=($136|0)<194; //@line 2695 "tcc_bootstrap.c"
 if($137){label=46;break;}else{label=47;break;} //@line 2695 "tcc_bootstrap.c"
 case 46: 
 $skip=1; //@line 2696 "tcc_bootstrap.c"
 label=72;break; //@line 2696 "tcc_bootstrap.c"
 case 47: 
 var $140=$c; //@line 2697 "tcc_bootstrap.c"
 var $141=($140|0)<=223; //@line 2697 "tcc_bootstrap.c"
 if($141){label=48;break;}else{label=49;break;} //@line 2697 "tcc_bootstrap.c"
 case 48: 
 $cont=1; //@line 2698 "tcc_bootstrap.c"
 var $143=$c; //@line 2698 "tcc_bootstrap.c"
 var $144=$143&31; //@line 2698 "tcc_bootstrap.c"
 $n=$144; //@line 2698 "tcc_bootstrap.c"
 label=56;break; //@line 2699 "tcc_bootstrap.c"
 case 49: 
 var $146=$c; //@line 2699 "tcc_bootstrap.c"
 var $147=($146|0)<=239; //@line 2699 "tcc_bootstrap.c"
 if($147){label=50;break;}else{label=51;break;} //@line 2699 "tcc_bootstrap.c"
 case 50: 
 $cont=2; //@line 2700 "tcc_bootstrap.c"
 var $149=$c; //@line 2700 "tcc_bootstrap.c"
 var $150=$149&15; //@line 2700 "tcc_bootstrap.c"
 $n=$150; //@line 2700 "tcc_bootstrap.c"
 label=55;break; //@line 2701 "tcc_bootstrap.c"
 case 51: 
 var $152=$c; //@line 2701 "tcc_bootstrap.c"
 var $153=($152|0)<=244; //@line 2701 "tcc_bootstrap.c"
 if($153){label=52;break;}else{label=53;break;} //@line 2701 "tcc_bootstrap.c"
 case 52: 
 $cont=3; //@line 2702 "tcc_bootstrap.c"
 var $155=$c; //@line 2702 "tcc_bootstrap.c"
 var $156=$155&7; //@line 2702 "tcc_bootstrap.c"
 $n=$156; //@line 2702 "tcc_bootstrap.c"
 label=54;break; //@line 2703 "tcc_bootstrap.c"
 case 53: 
 $skip=1; //@line 2704 "tcc_bootstrap.c"
 label=72;break; //@line 2704 "tcc_bootstrap.c"
 case 54: 
 label=55;break;
 case 55: 
 label=56;break;
 case 56: 
 label=57;break;
 case 57: 
 $i=1; //@line 2706 "tcc_bootstrap.c"
 label=58;break; //@line 2706 "tcc_bootstrap.c"
 case 58: 
 var $163=$i; //@line 2706 "tcc_bootstrap.c"
 var $164=$cont; //@line 2706 "tcc_bootstrap.c"
 var $165=($163|0)<=($164|0); //@line 2706 "tcc_bootstrap.c"
 if($165){label=59;break;}else{label=71;break;} //@line 2706 "tcc_bootstrap.c"
 case 59: 
 $l=128; //@line 2707 "tcc_bootstrap.c"
 $h=191; //@line 2707 "tcc_bootstrap.c"
 var $167=$i; //@line 2708 "tcc_bootstrap.c"
 var $168=($167|0)==1; //@line 2708 "tcc_bootstrap.c"
 if($168){label=60;break;}else{label=66;break;} //@line 2708 "tcc_bootstrap.c"
 case 60: 
 var $170=$c; //@line 2709 "tcc_bootstrap.c"
 if(($170|0)==224){ label=61;break;}else if(($170|0)==237){ label=62;break;}else if(($170|0)==240){ label=63;break;}else if(($170|0)==244){ label=64;break;}else{label=65;break;}
 case 61: 
 $l=160; //@line 2710 "tcc_bootstrap.c"
 label=65;break; //@line 2710 "tcc_bootstrap.c"
 case 62: 
 $h=159; //@line 2711 "tcc_bootstrap.c"
 label=65;break; //@line 2711 "tcc_bootstrap.c"
 case 63: 
 $l=144; //@line 2712 "tcc_bootstrap.c"
 label=65;break; //@line 2712 "tcc_bootstrap.c"
 case 64: 
 $h=143; //@line 2713 "tcc_bootstrap.c"
 label=65;break; //@line 2713 "tcc_bootstrap.c"
 case 65: 
 label=66;break; //@line 2715 "tcc_bootstrap.c"
 case 66: 
 var $177=$i; //@line 2716 "tcc_bootstrap.c"
 var $178=$p; //@line 2716 "tcc_bootstrap.c"
 var $179=(($178+$177)|0); //@line 2716 "tcc_bootstrap.c"
 var $180=HEAP8[(($179)>>0)]; //@line 2716 "tcc_bootstrap.c"
 var $181=($180&255); //@line 2716 "tcc_bootstrap.c"
 var $182=$l; //@line 2716 "tcc_bootstrap.c"
 var $183=($181|0)<($182|0); //@line 2716 "tcc_bootstrap.c"
 if($183){label=68;break;}else{label=67;break;} //@line 2716 "tcc_bootstrap.c"
 case 67: 
 var $185=$i; //@line 2716 "tcc_bootstrap.c"
 var $186=$p; //@line 2716 "tcc_bootstrap.c"
 var $187=(($186+$185)|0); //@line 2716 "tcc_bootstrap.c"
 var $188=HEAP8[(($187)>>0)]; //@line 2716 "tcc_bootstrap.c"
 var $189=($188&255); //@line 2716 "tcc_bootstrap.c"
 var $190=$h; //@line 2716 "tcc_bootstrap.c"
 var $191=($189|0)>($190|0); //@line 2716 "tcc_bootstrap.c"
 if($191){label=68;break;}else{label=69;break;} //@line 2716 "tcc_bootstrap.c"
 case 68: 
 var $193=$i; //@line 2717 "tcc_bootstrap.c"
 $skip=$193; //@line 2717 "tcc_bootstrap.c"
 label=72;break; //@line 2717 "tcc_bootstrap.c"
 case 69: 
 var $195=$n; //@line 2720 "tcc_bootstrap.c"
 var $196=$195<<6; //@line 2720 "tcc_bootstrap.c"
 var $197=$i; //@line 2720 "tcc_bootstrap.c"
 var $198=$p; //@line 2720 "tcc_bootstrap.c"
 var $199=(($198+$197)|0); //@line 2720 "tcc_bootstrap.c"
 var $200=HEAP8[(($199)>>0)]; //@line 2720 "tcc_bootstrap.c"
 var $201=($200&255); //@line 2720 "tcc_bootstrap.c"
 var $202=$201&63; //@line 2720 "tcc_bootstrap.c"
 var $203=$196|$202; //@line 2720 "tcc_bootstrap.c"
 $n=$203; //@line 2720 "tcc_bootstrap.c"
 label=70;break; //@line 2721 "tcc_bootstrap.c"
 case 70: 
 var $205=$i; //@line 2706 "tcc_bootstrap.c"
 var $206=((($205)+(1))|0); //@line 2706 "tcc_bootstrap.c"
 $i=$206; //@line 2706 "tcc_bootstrap.c"
 label=58;break; //@line 2706 "tcc_bootstrap.c"
 case 71: 
 var $208=$cont; //@line 2722 "tcc_bootstrap.c"
 var $209=((($208)+(1))|0); //@line 2722 "tcc_bootstrap.c"
 var $210=$p; //@line 2722 "tcc_bootstrap.c"
 var $211=(($210+$209)|0); //@line 2722 "tcc_bootstrap.c"
 $p=$211; //@line 2722 "tcc_bootstrap.c"
 var $212=$n; //@line 2723 "tcc_bootstrap.c"
 $c=$212; //@line 2723 "tcc_bootstrap.c"
 label=75;break; //@line 2724 "tcc_bootstrap.c"
 case 72: 
 var $214=$c; //@line 2726 "tcc_bootstrap.c"
 _tcc_warning(5232,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$214,tempVarArgs)); STACKTOP=tempVarArgs; //@line 2726 "tcc_bootstrap.c"
 $c=65533; //@line 2727 "tcc_bootstrap.c"
 var $215=$skip; //@line 2728 "tcc_bootstrap.c"
 var $216=$p; //@line 2728 "tcc_bootstrap.c"
 var $217=(($216+$215)|0); //@line 2728 "tcc_bootstrap.c"
 $p=$217; //@line 2728 "tcc_bootstrap.c"
 label=75;break; //@line 2729 "tcc_bootstrap.c"
 case 73: 
 label=74;break;
 case 74: 
 var $220=$p; //@line 2731 "tcc_bootstrap.c"
 var $221=(($220+1)|0); //@line 2731 "tcc_bootstrap.c"
 $p=$221; //@line 2731 "tcc_bootstrap.c"
 label=75;break; //@line 2731 "tcc_bootstrap.c"
 case 75: 
 var $223=$3; //@line 2733 "tcc_bootstrap.c"
 var $224=($223|0)!=0; //@line 2733 "tcc_bootstrap.c"
 if($224){label=77;break;}else{label=76;break;} //@line 2733 "tcc_bootstrap.c"
 case 76: 
 var $226=$1; //@line 2734 "tcc_bootstrap.c"
 var $227=$c; //@line 2734 "tcc_bootstrap.c"
 _cstr_ccat($226,$227); //@line 2734 "tcc_bootstrap.c"
 label=78;break; //@line 2734 "tcc_bootstrap.c"
 case 77: 
 var $229=$1; //@line 2736 "tcc_bootstrap.c"
 var $230=$c; //@line 2736 "tcc_bootstrap.c"
 _cstr_wccat($229,$230); //@line 2736 "tcc_bootstrap.c"
 label=78;break;
 case 78: 
 label=2;break; //@line 2738 "tcc_bootstrap.c"
 case 79: 
 var $233=$3; //@line 2739 "tcc_bootstrap.c"
 var $234=($233|0)!=0; //@line 2739 "tcc_bootstrap.c"
 if($234){label=81;break;}else{label=80;break;} //@line 2739 "tcc_bootstrap.c"
 case 80: 
 var $236=$1; //@line 2740 "tcc_bootstrap.c"
 _cstr_ccat($236,0); //@line 2740 "tcc_bootstrap.c"
 label=82;break; //@line 2740 "tcc_bootstrap.c"
 case 81: 
 var $238=$1; //@line 2742 "tcc_bootstrap.c"
 _cstr_wccat($238,0); //@line 2742 "tcc_bootstrap.c"
 label=82;break;
 case 82: 
 STACKTOP=sp;return; //@line 2743 "tcc_bootstrap.c"
  default: assert(0, "bad label: " + label);
 }

}


function _isoct($c){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 $1=$c;
 var $2=$1; //@line 1020 "tcc_bootstrap.c"
 var $3=($2|0)>=48; //@line 1020 "tcc_bootstrap.c"
 if($3){label=2;break;}else{var $8=0;label=3;break;} //@line 1020 "tcc_bootstrap.c"
 case 2: 
 var $5=$1; //@line 1020 "tcc_bootstrap.c"
 var $6=($5|0)<=55; //@line 1020 "tcc_bootstrap.c"
 var $8=$6;label=3;break;
 case 3: 
 var $8;
 var $9=($8&1);
 STACKTOP=sp;return $9; //@line 1021 "tcc_bootstrap.c"
  default: assert(0, "bad label: " + label);
 }

}


function _cstr_wccat($cstr,$ch){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $size;
 $1=$cstr;
 $2=$ch;
 var $3=$1; //@line 1358 "tcc_bootstrap.c"
 var $4=(($3)|0); //@line 1358 "tcc_bootstrap.c"
 var $5=HEAP32[(($4)>>2)]; //@line 1358 "tcc_bootstrap.c"
 var $6=((($5)+(4))|0); //@line 1358 "tcc_bootstrap.c"
 $size=$6; //@line 1358 "tcc_bootstrap.c"
 var $7=$size; //@line 1359 "tcc_bootstrap.c"
 var $8=$1; //@line 1359 "tcc_bootstrap.c"
 var $9=(($8+8)|0); //@line 1359 "tcc_bootstrap.c"
 var $10=HEAP32[(($9)>>2)]; //@line 1359 "tcc_bootstrap.c"
 var $11=($7|0)>($10|0); //@line 1359 "tcc_bootstrap.c"
 if($11){label=2;break;}else{label=3;break;} //@line 1359 "tcc_bootstrap.c"
 case 2: 
 var $13=$1; //@line 1360 "tcc_bootstrap.c"
 var $14=$size; //@line 1360 "tcc_bootstrap.c"
 _cstr_realloc($13,$14); //@line 1360 "tcc_bootstrap.c"
 label=3;break; //@line 1360 "tcc_bootstrap.c"
 case 3: 
 var $16=$2; //@line 1361 "tcc_bootstrap.c"
 var $17=$1; //@line 1361 "tcc_bootstrap.c"
 var $18=(($17+4)|0); //@line 1361 "tcc_bootstrap.c"
 var $19=HEAP32[(($18)>>2)]; //@line 1361 "tcc_bootstrap.c"
 var $20=$size; //@line 1361 "tcc_bootstrap.c"
 var $21=(($19+$20)|0); //@line 1361 "tcc_bootstrap.c"
 var $22=((($21)-(4))|0); //@line 1361 "tcc_bootstrap.c"
 var $23=$22; //@line 1361 "tcc_bootstrap.c"
 HEAP32[(($23)>>2)]=$16; //@line 1361 "tcc_bootstrap.c"
 var $24=$size; //@line 1362 "tcc_bootstrap.c"
 var $25=$1; //@line 1362 "tcc_bootstrap.c"
 var $26=(($25)|0); //@line 1362 "tcc_bootstrap.c"
 HEAP32[(($26)>>2)]=$24; //@line 1362 "tcc_bootstrap.c"
 STACKTOP=sp;return; //@line 1363 "tcc_bootstrap.c"
  default: assert(0, "bad label: " + label);
 }

}


function _bn_zero($bn){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $i;
 $1=$bn;
 $i=0; //@line 2803 "tcc_bootstrap.c"
 label=2;break; //@line 2803 "tcc_bootstrap.c"
 case 2: 
 var $3=$i; //@line 2803 "tcc_bootstrap.c"
 var $4=($3|0)<2; //@line 2803 "tcc_bootstrap.c"
 if($4){label=3;break;}else{label=5;break;} //@line 2803 "tcc_bootstrap.c"
 case 3: 
 var $6=$i; //@line 2804 "tcc_bootstrap.c"
 var $7=$1; //@line 2804 "tcc_bootstrap.c"
 var $8=(($7+($6<<2))|0); //@line 2804 "tcc_bootstrap.c"
 HEAP32[(($8)>>2)]=0; //@line 2804 "tcc_bootstrap.c"
 label=4;break; //@line 2805 "tcc_bootstrap.c"
 case 4: 
 var $10=$i; //@line 2803 "tcc_bootstrap.c"
 var $11=((($10)+(1))|0); //@line 2803 "tcc_bootstrap.c"
 $i=$11; //@line 2803 "tcc_bootstrap.c"
 label=2;break; //@line 2803 "tcc_bootstrap.c"
 case 5: 
 STACKTOP=sp;return; //@line 2806 "tcc_bootstrap.c"
  default: assert(0, "bad label: " + label);
 }

}


function _bn_lshift($bn,$shift,$or_val){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $i;
 var $v;
 $1=$bn;
 $2=$shift;
 $3=$or_val;
 $i=0; //@line 2794 "tcc_bootstrap.c"
 label=2;break; //@line 2794 "tcc_bootstrap.c"
 case 2: 
 var $5=$i; //@line 2794 "tcc_bootstrap.c"
 var $6=($5|0)<2; //@line 2794 "tcc_bootstrap.c"
 if($6){label=3;break;}else{label=5;break;} //@line 2794 "tcc_bootstrap.c"
 case 3: 
 var $8=$i; //@line 2795 "tcc_bootstrap.c"
 var $9=$1; //@line 2795 "tcc_bootstrap.c"
 var $10=(($9+($8<<2))|0); //@line 2795 "tcc_bootstrap.c"
 var $11=HEAP32[(($10)>>2)]; //@line 2795 "tcc_bootstrap.c"
 $v=$11; //@line 2795 "tcc_bootstrap.c"
 var $12=$v; //@line 2796 "tcc_bootstrap.c"
 var $13=$2; //@line 2796 "tcc_bootstrap.c"
 var $14=$12<<$13; //@line 2796 "tcc_bootstrap.c"
 var $15=$3; //@line 2796 "tcc_bootstrap.c"
 var $16=$14|$15; //@line 2796 "tcc_bootstrap.c"
 var $17=$i; //@line 2796 "tcc_bootstrap.c"
 var $18=$1; //@line 2796 "tcc_bootstrap.c"
 var $19=(($18+($17<<2))|0); //@line 2796 "tcc_bootstrap.c"
 HEAP32[(($19)>>2)]=$16; //@line 2796 "tcc_bootstrap.c"
 var $20=$v; //@line 2797 "tcc_bootstrap.c"
 var $21=$2; //@line 2797 "tcc_bootstrap.c"
 var $22=(((32)-($21))|0); //@line 2797 "tcc_bootstrap.c"
 var $23=$20>>>($22>>>0); //@line 2797 "tcc_bootstrap.c"
 $3=$23; //@line 2797 "tcc_bootstrap.c"
 label=4;break; //@line 2798 "tcc_bootstrap.c"
 case 4: 
 var $25=$i; //@line 2794 "tcc_bootstrap.c"
 var $26=((($25)+(1))|0); //@line 2794 "tcc_bootstrap.c"
 $i=$26; //@line 2794 "tcc_bootstrap.c"
 label=2;break; //@line 2794 "tcc_bootstrap.c"
 case 5: 
 STACKTOP=sp;return; //@line 2799 "tcc_bootstrap.c"
  default: assert(0, "bad label: " + label);
 }

}


function _next_argstream($nested_list,$ws_str){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $t;
 var $p;
 var $sa;
 var $c=sp;
 var $p1=(sp)+(8);
 $2=$nested_list;
 $3=$ws_str;
 label=2;break; //@line 3628 "tcc_bootstrap.c"
 case 2: 
 var $5=HEAP32[((10680)>>2)]; //@line 3629 "tcc_bootstrap.c"
 var $6=($5|0)!=0; //@line 3629 "tcc_bootstrap.c"
 if($6){label=3;break;}else{label=21;break;} //@line 3629 "tcc_bootstrap.c"
 case 3: 
 var $8=HEAP32[((10680)>>2)]; //@line 3630 "tcc_bootstrap.c"
 $p=$8; //@line 3630 "tcc_bootstrap.c"
 var $9=$p; //@line 3630 "tcc_bootstrap.c"
 var $10=HEAP32[(($9)>>2)]; //@line 3630 "tcc_bootstrap.c"
 $t=$10; //@line 3630 "tcc_bootstrap.c"
 var $11=$3; //@line 3631 "tcc_bootstrap.c"
 var $12=($11|0)!=0; //@line 3631 "tcc_bootstrap.c"
 if($12){label=4;break;}else{label=11;break;} //@line 3631 "tcc_bootstrap.c"
 case 4: 
 label=5;break; //@line 3632 "tcc_bootstrap.c"
 case 5: 
 var $15=$t; //@line 3632 "tcc_bootstrap.c"
 var $16=_is_space($15); //@line 3632 "tcc_bootstrap.c"
 var $17=($16|0)!=0; //@line 3632 "tcc_bootstrap.c"
 if($17){var $25=1;label=8;break;}else{label=6;break;} //@line 3632 "tcc_bootstrap.c"
 case 6: 
 var $19=$t; //@line 3632 "tcc_bootstrap.c"
 var $20=10==($19|0); //@line 3632 "tcc_bootstrap.c"
 if($20){var $25=1;label=8;break;}else{label=7;break;} //@line 3632 "tcc_bootstrap.c"
 case 7: 
 var $22=$t; //@line 3632 "tcc_bootstrap.c"
 var $23=203==($22|0); //@line 3632 "tcc_bootstrap.c"
 var $25=$23;label=8;break; //@line 3632 "tcc_bootstrap.c"
 case 8: 
 var $25;
 if($25){label=9;break;}else{label=10;break;} //@line 3632 "tcc_bootstrap.c"
 case 9: 
 var $27=$3; //@line 3633 "tcc_bootstrap.c"
 var $28=$t; //@line 3633 "tcc_bootstrap.c"
 _tok_str_add($27,$28); //@line 3633 "tcc_bootstrap.c"
 var $29=$p; //@line 3633 "tcc_bootstrap.c"
 var $30=(($29+4)|0); //@line 3633 "tcc_bootstrap.c"
 $p=$30; //@line 3633 "tcc_bootstrap.c"
 var $31=HEAP32[(($30)>>2)]; //@line 3633 "tcc_bootstrap.c"
 $t=$31; //@line 3633 "tcc_bootstrap.c"
 label=5;break; //@line 3633 "tcc_bootstrap.c"
 case 10: 
 label=11;break; //@line 3634 "tcc_bootstrap.c"
 case 11: 
 var $34=$t; //@line 3635 "tcc_bootstrap.c"
 var $35=($34|0)==0; //@line 3635 "tcc_bootstrap.c"
 if($35){label=12;break;}else{label=20;break;} //@line 3635 "tcc_bootstrap.c"
 case 12: 
 _end_macro(); //@line 3636 "tcc_bootstrap.c"
 var $37=$2; //@line 3637 "tcc_bootstrap.c"
 var $38=HEAP32[(($37)>>2)]; //@line 3637 "tcc_bootstrap.c"
 $sa=$38; //@line 3637 "tcc_bootstrap.c"
 label=13;break; //@line 3638 "tcc_bootstrap.c"
 case 13: 
 var $40=$sa; //@line 3638 "tcc_bootstrap.c"
 var $41=($40|0)!=0; //@line 3638 "tcc_bootstrap.c"
 if($41){label=14;break;}else{var $48=0;label=15;break;} //@line 3638 "tcc_bootstrap.c"
 case 14: 
 var $43=$sa; //@line 3638 "tcc_bootstrap.c"
 var $44=(($43)|0); //@line 3638 "tcc_bootstrap.c"
 var $45=HEAP32[(($44)>>2)]; //@line 3638 "tcc_bootstrap.c"
 var $46=($45|0)==0; //@line 3638 "tcc_bootstrap.c"
 var $48=$46;label=15;break;
 case 15: 
 var $48;
 if($48){label=16;break;}else{label=17;break;}
 case 16: 
 var $50=$sa; //@line 3639 "tcc_bootstrap.c"
 var $51=(($50+28)|0); //@line 3639 "tcc_bootstrap.c"
 var $52=HEAP32[(($51)>>2)]; //@line 3639 "tcc_bootstrap.c"
 $sa=$52; //@line 3639 "tcc_bootstrap.c"
 label=13;break; //@line 3639 "tcc_bootstrap.c"
 case 17: 
 var $54=$sa; //@line 3640 "tcc_bootstrap.c"
 var $55=($54|0)!=0; //@line 3640 "tcc_bootstrap.c"
 if($55){label=18;break;}else{label=19;break;} //@line 3640 "tcc_bootstrap.c"
 case 18: 
 var $57=$sa; //@line 3641 "tcc_bootstrap.c"
 var $58=(($57)|0); //@line 3641 "tcc_bootstrap.c"
 HEAP32[(($58)>>2)]=0; //@line 3641 "tcc_bootstrap.c"
 label=19;break; //@line 3641 "tcc_bootstrap.c"
 case 19: 
 label=2;break; //@line 3642 "tcc_bootstrap.c"
 case 20: 
 label=44;break; //@line 3644 "tcc_bootstrap.c"
 case 21: 
 var $62=_handle_eob(); //@line 3645 "tcc_bootstrap.c"
 HEAP32[((76736)>>2)]=$62; //@line 3645 "tcc_bootstrap.c"
 var $63=$3; //@line 3646 "tcc_bootstrap.c"
 var $64=($63|0)!=0; //@line 3646 "tcc_bootstrap.c"
 if($64){label=22;break;}else{label=43;break;} //@line 3646 "tcc_bootstrap.c"
 case 22: 
 label=23;break; //@line 3647 "tcc_bootstrap.c"
 case 23: 
 var $67=HEAP32[((76736)>>2)]; //@line 3647 "tcc_bootstrap.c"
 var $68=_is_space($67); //@line 3647 "tcc_bootstrap.c"
 var $69=($68|0)!=0; //@line 3647 "tcc_bootstrap.c"
 if($69){var $77=1;label=26;break;}else{label=24;break;} //@line 3647 "tcc_bootstrap.c"
 case 24: 
 var $71=HEAP32[((76736)>>2)]; //@line 3647 "tcc_bootstrap.c"
 var $72=($71|0)==10; //@line 3647 "tcc_bootstrap.c"
 if($72){var $77=1;label=26;break;}else{label=25;break;} //@line 3647 "tcc_bootstrap.c"
 case 25: 
 var $74=HEAP32[((76736)>>2)]; //@line 3647 "tcc_bootstrap.c"
 var $75=($74|0)==47; //@line 3647 "tcc_bootstrap.c"
 var $77=$75;label=26;break; //@line 3647 "tcc_bootstrap.c"
 case 26: 
 var $77;
 if($77){label=27;break;}else{label=42;break;} //@line 3647 "tcc_bootstrap.c"
 case 27: 
 var $79=HEAP32[((76736)>>2)]; //@line 3648 "tcc_bootstrap.c"
 var $80=($79|0)==47; //@line 3648 "tcc_bootstrap.c"
 if($80){label=28;break;}else{label=35;break;} //@line 3648 "tcc_bootstrap.c"
 case 28: 
 var $82=HEAP32[((76648)>>2)]; //@line 3650 "tcc_bootstrap.c"
 var $83=(($82)|0); //@line 3650 "tcc_bootstrap.c"
 var $84=HEAP32[(($83)>>2)]; //@line 3650 "tcc_bootstrap.c"
 HEAP32[(($p1)>>2)]=$84; //@line 3650 "tcc_bootstrap.c"
 var $85=_PEEKC($c,$p1); //@line 3651 "tcc_bootstrap.c"
 HEAP32[(($p1)>>2)]=$85; //@line 3651 "tcc_bootstrap.c"
 var $86=HEAP32[(($c)>>2)]; //@line 3652 "tcc_bootstrap.c"
 var $87=($86|0)==42; //@line 3652 "tcc_bootstrap.c"
 if($87){label=29;break;}else{label=30;break;} //@line 3652 "tcc_bootstrap.c"
 case 29: 
 var $89=HEAP32[(($p1)>>2)]; //@line 3653 "tcc_bootstrap.c"
 var $90=_parse_comment($89); //@line 3653 "tcc_bootstrap.c"
 HEAP32[(($p1)>>2)]=$90; //@line 3653 "tcc_bootstrap.c"
 var $91=HEAP32[(($p1)>>2)]; //@line 3654 "tcc_bootstrap.c"
 var $92=((($91)-(1))|0); //@line 3654 "tcc_bootstrap.c"
 var $93=HEAP32[((76648)>>2)]; //@line 3654 "tcc_bootstrap.c"
 var $94=(($93)|0); //@line 3654 "tcc_bootstrap.c"
 HEAP32[(($94)>>2)]=$92; //@line 3654 "tcc_bootstrap.c"
 label=34;break; //@line 3655 "tcc_bootstrap.c"
 case 30: 
 var $96=HEAP32[(($c)>>2)]; //@line 3655 "tcc_bootstrap.c"
 var $97=($96|0)==47; //@line 3655 "tcc_bootstrap.c"
 if($97){label=31;break;}else{label=32;break;} //@line 3655 "tcc_bootstrap.c"
 case 31: 
 var $99=HEAP32[(($p1)>>2)]; //@line 3656 "tcc_bootstrap.c"
 var $100=_parse_line_comment($99); //@line 3656 "tcc_bootstrap.c"
 HEAP32[(($p1)>>2)]=$100; //@line 3656 "tcc_bootstrap.c"
 var $101=HEAP32[(($p1)>>2)]; //@line 3657 "tcc_bootstrap.c"
 var $102=((($101)-(1))|0); //@line 3657 "tcc_bootstrap.c"
 var $103=HEAP32[((76648)>>2)]; //@line 3657 "tcc_bootstrap.c"
 var $104=(($103)|0); //@line 3657 "tcc_bootstrap.c"
 HEAP32[(($104)>>2)]=$102; //@line 3657 "tcc_bootstrap.c"
 label=33;break; //@line 3658 "tcc_bootstrap.c"
 case 32: 
 label=42;break; //@line 3659 "tcc_bootstrap.c"
 case 33: 
 label=34;break;
 case 34: 
 HEAP32[((76736)>>2)]=32; //@line 3660 "tcc_bootstrap.c"
 label=35;break; //@line 3661 "tcc_bootstrap.c"
 case 35: 
 var $109=HEAP32[((76736)>>2)]; //@line 3662 "tcc_bootstrap.c"
 var $110=($109|0)==10; //@line 3662 "tcc_bootstrap.c"
 if($110){label=36;break;}else{label=37;break;} //@line 3662 "tcc_bootstrap.c"
 case 36: 
 var $112=HEAP32[((76648)>>2)]; //@line 3663 "tcc_bootstrap.c"
 var $113=(($112+16)|0); //@line 3663 "tcc_bootstrap.c"
 var $114=HEAP32[(($113)>>2)]; //@line 3663 "tcc_bootstrap.c"
 var $115=((($114)+(1))|0); //@line 3663 "tcc_bootstrap.c"
 HEAP32[(($113)>>2)]=$115; //@line 3663 "tcc_bootstrap.c"
 label=37;break; //@line 3663 "tcc_bootstrap.c"
 case 37: 
 var $117=HEAP32[((76736)>>2)]; //@line 3664 "tcc_bootstrap.c"
 var $118=($117|0)==12; //@line 3664 "tcc_bootstrap.c"
 if($118){label=41;break;}else{label=38;break;} //@line 3664 "tcc_bootstrap.c"
 case 38: 
 var $120=HEAP32[((76736)>>2)]; //@line 3664 "tcc_bootstrap.c"
 var $121=($120|0)==11; //@line 3664 "tcc_bootstrap.c"
 if($121){label=41;break;}else{label=39;break;} //@line 3664 "tcc_bootstrap.c"
 case 39: 
 var $123=HEAP32[((76736)>>2)]; //@line 3664 "tcc_bootstrap.c"
 var $124=($123|0)==13; //@line 3664 "tcc_bootstrap.c"
 if($124){label=41;break;}else{label=40;break;} //@line 3664 "tcc_bootstrap.c"
 case 40: 
 var $126=$3; //@line 3665 "tcc_bootstrap.c"
 var $127=HEAP32[((76736)>>2)]; //@line 3665 "tcc_bootstrap.c"
 _tok_str_add($126,$127); //@line 3665 "tcc_bootstrap.c"
 label=41;break; //@line 3665 "tcc_bootstrap.c"
 case 41: 
 _minp(); //@line 3666 "tcc_bootstrap.c"
 label=23;break; //@line 3667 "tcc_bootstrap.c"
 case 42: 
 label=43;break; //@line 3668 "tcc_bootstrap.c"
 case 43: 
 var $131=HEAP32[((76736)>>2)]; //@line 3669 "tcc_bootstrap.c"
 $t=$131; //@line 3669 "tcc_bootstrap.c"
 label=44;break;
 case 44: 
 var $133=$3; //@line 3671 "tcc_bootstrap.c"
 var $134=($133|0)!=0; //@line 3671 "tcc_bootstrap.c"
 if($134){label=45;break;}else{label=46;break;} //@line 3671 "tcc_bootstrap.c"
 case 45: 
 var $136=$t; //@line 3672 "tcc_bootstrap.c"
 $1=$136; //@line 3672 "tcc_bootstrap.c"
 label=47;break; //@line 3672 "tcc_bootstrap.c"
 case 46: 
 _next_nomacro_spc(); //@line 3673 "tcc_bootstrap.c"
 var $138=HEAP32[((10472)>>2)]; //@line 3674 "tcc_bootstrap.c"
 $1=$138; //@line 3674 "tcc_bootstrap.c"
 label=47;break; //@line 3674 "tcc_bootstrap.c"
 case 47: 
 var $140=$1; //@line 3676 "tcc_bootstrap.c"
 STACKTOP=sp;return $140; //@line 3676 "tcc_bootstrap.c"
  default: assert(0, "bad label: " + label);
 }

}


function _macro_arg_subst($nested_list,$macro_str,$args){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+152)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2=sp;
 var $3;
 var $t=(sp)+(8);
 var $t0;
 var $t1;
 var $spc=(sp)+(16);
 var $st=(sp)+(24);
 var $s;
 var $cval=(sp)+(32);
 var $str=(sp)+(48);
 var $cstr=(sp)+(88);
 var $s1;
 var $l0;
 var $str2=(sp)+(104);
 var $t2=(sp)+(144);
 $1=$nested_list;
 HEAP32[(($2)>>2)]=$macro_str;
 $3=$args;
 _tok_str_new($str); //@line 3455 "tcc_bootstrap.c"
 $t1=0; //@line 3456 "tcc_bootstrap.c"
 $t0=0; //@line 3456 "tcc_bootstrap.c"
 label=2;break; //@line 3457 "tcc_bootstrap.c"
 case 2: 
 _TOK_GET($t,$2,$cval); //@line 3458 "tcc_bootstrap.c"
 var $5=HEAP32[(($t)>>2)]; //@line 3459 "tcc_bootstrap.c"
 var $6=($5|0)!=0; //@line 3459 "tcc_bootstrap.c"
 if($6){label=4;break;}else{label=3;break;} //@line 3459 "tcc_bootstrap.c"
 case 3: 
 label=55;break; //@line 3460 "tcc_bootstrap.c"
 case 4: 
 var $9=HEAP32[(($t)>>2)]; //@line 3461 "tcc_bootstrap.c"
 var $10=($9|0)==35; //@line 3461 "tcc_bootstrap.c"
 if($10){label=5;break;}else{label=26;break;} //@line 3461 "tcc_bootstrap.c"
 case 5: 
 _TOK_GET($t,$2,$cval); //@line 3462 "tcc_bootstrap.c"
 var $12=HEAP32[(($t)>>2)]; //@line 3463 "tcc_bootstrap.c"
 var $13=($12|0)!=0; //@line 3463 "tcc_bootstrap.c"
 if($13){label=7;break;}else{label=6;break;} //@line 3463 "tcc_bootstrap.c"
 case 6: 
 label=24;break; //@line 3464 "tcc_bootstrap.c"
 case 7: 
 var $16=$3; //@line 3465 "tcc_bootstrap.c"
 var $17=HEAP32[(($t)>>2)]; //@line 3465 "tcc_bootstrap.c"
 var $18=_sym_find2($16,$17); //@line 3465 "tcc_bootstrap.c"
 $s=$18; //@line 3465 "tcc_bootstrap.c"
 var $19=$s; //@line 3466 "tcc_bootstrap.c"
 var $20=($19|0)!=0; //@line 3466 "tcc_bootstrap.c"
 if($20){label=8;break;}else{label=23;break;} //@line 3466 "tcc_bootstrap.c"
 case 8: 
 _cstr_new($cstr); //@line 3467 "tcc_bootstrap.c"
 _cstr_ccat($cstr,34); //@line 3468 "tcc_bootstrap.c"
 var $22=$s; //@line 3469 "tcc_bootstrap.c"
 var $23=(($22+8)|0); //@line 3469 "tcc_bootstrap.c"
 var $24=$23; //@line 3469 "tcc_bootstrap.c"
 var $25=HEAP32[(($24)>>2)]; //@line 3469 "tcc_bootstrap.c"
 HEAP32[(($st)>>2)]=$25; //@line 3469 "tcc_bootstrap.c"
 HEAP32[(($spc)>>2)]=0; //@line 3470 "tcc_bootstrap.c"
 label=9;break; //@line 3471 "tcc_bootstrap.c"
 case 9: 
 var $27=HEAP32[(($st)>>2)]; //@line 3471 "tcc_bootstrap.c"
 var $28=HEAP32[(($27)>>2)]; //@line 3471 "tcc_bootstrap.c"
 var $29=($28|0)>=0; //@line 3471 "tcc_bootstrap.c"
 if($29){label=10;break;}else{label=22;break;} //@line 3471 "tcc_bootstrap.c"
 case 10: 
 _TOK_GET($t,$st,$cval); //@line 3472 "tcc_bootstrap.c"
 var $31=HEAP32[(($t)>>2)]; //@line 3473 "tcc_bootstrap.c"
 var $32=($31|0)!=203; //@line 3473 "tcc_bootstrap.c"
 if($32){label=11;break;}else{label=21;break;} //@line 3473 "tcc_bootstrap.c"
 case 11: 
 var $34=HEAP32[(($t)>>2)]; //@line 3473 "tcc_bootstrap.c"
 var $35=($34|0)!=204; //@line 3473 "tcc_bootstrap.c"
 if($35){label=12;break;}else{label=21;break;} //@line 3473 "tcc_bootstrap.c"
 case 12: 
 var $37=HEAP32[(($t)>>2)]; //@line 3475 "tcc_bootstrap.c"
 var $38=_check_space($37,$spc); //@line 3475 "tcc_bootstrap.c"
 var $39=0==($38|0); //@line 3475 "tcc_bootstrap.c"
 if($39){label=13;break;}else{label=21;break;} //@line 3475 "tcc_bootstrap.c"
 case 13: 
 var $41=HEAP32[(($t)>>2)]; //@line 3476 "tcc_bootstrap.c"
 var $42=_get_tok_str($41,$cval); //@line 3476 "tcc_bootstrap.c"
 $s1=$42; //@line 3476 "tcc_bootstrap.c"
 label=14;break; //@line 3477 "tcc_bootstrap.c"
 case 14: 
 var $44=$s1; //@line 3477 "tcc_bootstrap.c"
 var $45=HEAP8[(($44)>>0)]; //@line 3477 "tcc_bootstrap.c"
 var $46=(($45<<24)>>24)!=0; //@line 3477 "tcc_bootstrap.c"
 if($46){label=15;break;}else{label=20;break;} //@line 3477 "tcc_bootstrap.c"
 case 15: 
 var $48=HEAP32[(($t)>>2)]; //@line 3478 "tcc_bootstrap.c"
 var $49=($48|0)==191; //@line 3478 "tcc_bootstrap.c"
 if($49){label=16;break;}else{label=18;break;} //@line 3478 "tcc_bootstrap.c"
 case 16: 
 var $51=$s1; //@line 3478 "tcc_bootstrap.c"
 var $52=HEAP8[(($51)>>0)]; //@line 3478 "tcc_bootstrap.c"
 var $53=(($52<<24)>>24); //@line 3478 "tcc_bootstrap.c"
 var $54=($53|0)!=39; //@line 3478 "tcc_bootstrap.c"
 if($54){label=17;break;}else{label=18;break;} //@line 3478 "tcc_bootstrap.c"
 case 17: 
 var $56=$s1; //@line 3479 "tcc_bootstrap.c"
 var $57=HEAP8[(($56)>>0)]; //@line 3479 "tcc_bootstrap.c"
 var $58=(($57<<24)>>24); //@line 3479 "tcc_bootstrap.c"
 _add_char($cstr,$58); //@line 3479 "tcc_bootstrap.c"
 label=19;break; //@line 3479 "tcc_bootstrap.c"
 case 18: 
 var $60=$s1; //@line 3481 "tcc_bootstrap.c"
 var $61=HEAP8[(($60)>>0)]; //@line 3481 "tcc_bootstrap.c"
 var $62=(($61<<24)>>24); //@line 3481 "tcc_bootstrap.c"
 _cstr_ccat($cstr,$62); //@line 3481 "tcc_bootstrap.c"
 label=19;break;
 case 19: 
 var $64=$s1; //@line 3482 "tcc_bootstrap.c"
 var $65=(($64+1)|0); //@line 3482 "tcc_bootstrap.c"
 $s1=$65; //@line 3482 "tcc_bootstrap.c"
 label=14;break; //@line 3483 "tcc_bootstrap.c"
 case 20: 
 label=21;break; //@line 3484 "tcc_bootstrap.c"
 case 21: 
 label=9;break; //@line 3485 "tcc_bootstrap.c"
 case 22: 
 var $69=HEAP32[(($spc)>>2)]; //@line 3486 "tcc_bootstrap.c"
 var $70=(($cstr)|0); //@line 3486 "tcc_bootstrap.c"
 var $71=HEAP32[(($70)>>2)]; //@line 3486 "tcc_bootstrap.c"
 var $72=((($71)-($69))|0); //@line 3486 "tcc_bootstrap.c"
 HEAP32[(($70)>>2)]=$72; //@line 3486 "tcc_bootstrap.c"
 _cstr_ccat($cstr,34); //@line 3487 "tcc_bootstrap.c"
 _cstr_ccat($cstr,0); //@line 3488 "tcc_bootstrap.c"
 var $73=(($cstr)|0); //@line 3489 "tcc_bootstrap.c"
 var $74=HEAP32[(($73)>>2)]; //@line 3489 "tcc_bootstrap.c"
 var $75=$cval; //@line 3489 "tcc_bootstrap.c"
 var $76=(($75)|0); //@line 3489 "tcc_bootstrap.c"
 HEAP32[(($76)>>2)]=$74; //@line 3489 "tcc_bootstrap.c"
 var $77=(($cstr+4)|0); //@line 3490 "tcc_bootstrap.c"
 var $78=HEAP32[(($77)>>2)]; //@line 3490 "tcc_bootstrap.c"
 var $79=$cval; //@line 3490 "tcc_bootstrap.c"
 var $80=(($79+4)|0); //@line 3490 "tcc_bootstrap.c"
 HEAP32[(($80)>>2)]=$78; //@line 3490 "tcc_bootstrap.c"
 _tok_str_add2($str,191,$cval); //@line 3491 "tcc_bootstrap.c"
 _cstr_free($cstr); //@line 3492 "tcc_bootstrap.c"
 label=25;break; //@line 3493 "tcc_bootstrap.c"
 case 23: 
 label=24;break; //@line 3493 "tcc_bootstrap.c"
 case 24: 
 _expect(4768); //@line 3495 "tcc_bootstrap.c"
 label=25;break;
 case 25: 
 label=54;break; //@line 3497 "tcc_bootstrap.c"
 case 26: 
 var $85=HEAP32[(($t)>>2)]; //@line 3497 "tcc_bootstrap.c"
 var $86=($85|0)>=256; //@line 3497 "tcc_bootstrap.c"
 if($86){label=27;break;}else{label=52;break;} //@line 3497 "tcc_bootstrap.c"
 case 27: 
 var $88=$3; //@line 3498 "tcc_bootstrap.c"
 var $89=HEAP32[(($t)>>2)]; //@line 3498 "tcc_bootstrap.c"
 var $90=_sym_find2($88,$89); //@line 3498 "tcc_bootstrap.c"
 $s=$90; //@line 3498 "tcc_bootstrap.c"
 var $91=$s; //@line 3499 "tcc_bootstrap.c"
 var $92=($91|0)!=0; //@line 3499 "tcc_bootstrap.c"
 if($92){label=28;break;}else{label=50;break;} //@line 3499 "tcc_bootstrap.c"
 case 28: 
 var $94=(($str+4)|0); //@line 3500 "tcc_bootstrap.c"
 var $95=HEAP32[(($94)>>2)]; //@line 3500 "tcc_bootstrap.c"
 $l0=$95; //@line 3500 "tcc_bootstrap.c"
 var $96=$s; //@line 3501 "tcc_bootstrap.c"
 var $97=(($96+8)|0); //@line 3501 "tcc_bootstrap.c"
 var $98=$97; //@line 3501 "tcc_bootstrap.c"
 var $99=HEAP32[(($98)>>2)]; //@line 3501 "tcc_bootstrap.c"
 HEAP32[(($st)>>2)]=$99; //@line 3501 "tcc_bootstrap.c"
 var $100=HEAP32[(($2)>>2)]; //@line 3502 "tcc_bootstrap.c"
 var $101=HEAP32[(($100)>>2)]; //@line 3502 "tcc_bootstrap.c"
 var $102=($101|0)==205; //@line 3502 "tcc_bootstrap.c"
 if($102){label=30;break;}else{label=29;break;} //@line 3502 "tcc_bootstrap.c"
 case 29: 
 var $104=$t1; //@line 3502 "tcc_bootstrap.c"
 var $105=($104|0)==205; //@line 3502 "tcc_bootstrap.c"
 if($105){label=30;break;}else{label=39;break;} //@line 3502 "tcc_bootstrap.c"
 case 30: 
 var $107=$t1; //@line 3503 "tcc_bootstrap.c"
 var $108=($107|0)==205; //@line 3503 "tcc_bootstrap.c"
 if($108){label=31;break;}else{label=38;break;} //@line 3503 "tcc_bootstrap.c"
 case 31: 
 var $110=$t0; //@line 3503 "tcc_bootstrap.c"
 var $111=($110|0)==44; //@line 3503 "tcc_bootstrap.c"
 if($111){label=32;break;}else{label=38;break;} //@line 3503 "tcc_bootstrap.c"
 case 32: 
 var $113=HEAP32[((2848)>>2)]; //@line 3503 "tcc_bootstrap.c"
 var $114=($113|0)!=0; //@line 3503 "tcc_bootstrap.c"
 if($114){label=33;break;}else{label=38;break;} //@line 3503 "tcc_bootstrap.c"
 case 33: 
 var $116=$s; //@line 3503 "tcc_bootstrap.c"
 var $117=(($116+16)|0); //@line 3503 "tcc_bootstrap.c"
 var $118=(($117)|0); //@line 3503 "tcc_bootstrap.c"
 var $119=HEAP32[(($118)>>2)]; //@line 3503 "tcc_bootstrap.c"
 var $120=($119|0)!=0; //@line 3503 "tcc_bootstrap.c"
 if($120){label=34;break;}else{label=38;break;} //@line 3503 "tcc_bootstrap.c"
 case 34: 
 var $122=HEAP32[(($st)>>2)]; //@line 3504 "tcc_bootstrap.c"
 var $123=HEAP32[(($122)>>2)]; //@line 3504 "tcc_bootstrap.c"
 var $124=($123|0)<=0; //@line 3504 "tcc_bootstrap.c"
 if($124){label=35;break;}else{label=36;break;} //@line 3504 "tcc_bootstrap.c"
 case 35: 
 var $126=(($str+4)|0); //@line 3506 "tcc_bootstrap.c"
 var $127=HEAP32[(($126)>>2)]; //@line 3506 "tcc_bootstrap.c"
 var $128=((($127)-(2))|0); //@line 3506 "tcc_bootstrap.c"
 HEAP32[(($126)>>2)]=$128; //@line 3506 "tcc_bootstrap.c"
 label=37;break; //@line 3507 "tcc_bootstrap.c"
 case 36: 
 var $130=(($str+4)|0); //@line 3508 "tcc_bootstrap.c"
 var $131=HEAP32[(($130)>>2)]; //@line 3508 "tcc_bootstrap.c"
 var $132=((($131)-(1))|0); //@line 3508 "tcc_bootstrap.c"
 HEAP32[(($130)>>2)]=$132; //@line 3508 "tcc_bootstrap.c"
 label=40;break; //@line 3509 "tcc_bootstrap.c"
 case 37: 
 label=38;break; //@line 3511 "tcc_bootstrap.c"
 case 38: 
 label=43;break; //@line 3512 "tcc_bootstrap.c"
 case 39: 
 label=40;break; //@line 3512 "tcc_bootstrap.c"
 case 40: 
 var $137=$s; //@line 3514 "tcc_bootstrap.c"
 var $138=(($137+24)|0); //@line 3514 "tcc_bootstrap.c"
 var $139=$138; //@line 3514 "tcc_bootstrap.c"
 var $140=HEAP32[(($139)>>2)]; //@line 3514 "tcc_bootstrap.c"
 var $141=($140|0)!=0; //@line 3514 "tcc_bootstrap.c"
 if($141){label=42;break;}else{label=41;break;} //@line 3514 "tcc_bootstrap.c"
 case 41: 
 var $143=$s; //@line 3516 "tcc_bootstrap.c"
 var $144=(($143+24)|0); //@line 3516 "tcc_bootstrap.c"
 var $145=$144; //@line 3516 "tcc_bootstrap.c"
 var $146=$s; //@line 3516 "tcc_bootstrap.c"
 var $147=(($146)|0); //@line 3516 "tcc_bootstrap.c"
 var $148=HEAP32[(($147)>>2)]; //@line 3516 "tcc_bootstrap.c"
 var $149=$s; //@line 3516 "tcc_bootstrap.c"
 var $150=(($149+16)|0); //@line 3516 "tcc_bootstrap.c"
 var $151=(($150)|0); //@line 3516 "tcc_bootstrap.c"
 var $152=HEAP32[(($151)>>2)]; //@line 3516 "tcc_bootstrap.c"
 var $153=_sym_push2($145,$148,$152,0); //@line 3516 "tcc_bootstrap.c"
 _tok_str_new($str2); //@line 3517 "tcc_bootstrap.c"
 var $154=$1; //@line 3518 "tcc_bootstrap.c"
 var $155=HEAP32[(($st)>>2)]; //@line 3518 "tcc_bootstrap.c"
 _macro_subst($str2,$154,$155); //@line 3518 "tcc_bootstrap.c"
 _tok_str_add($str2,0); //@line 3519 "tcc_bootstrap.c"
 var $156=(($str2)|0); //@line 3520 "tcc_bootstrap.c"
 var $157=HEAP32[(($156)>>2)]; //@line 3520 "tcc_bootstrap.c"
 var $158=$s; //@line 3520 "tcc_bootstrap.c"
 var $159=(($158+24)|0); //@line 3520 "tcc_bootstrap.c"
 var $160=$159; //@line 3520 "tcc_bootstrap.c"
 var $161=HEAP32[(($160)>>2)]; //@line 3520 "tcc_bootstrap.c"
 var $162=(($161+8)|0); //@line 3520 "tcc_bootstrap.c"
 var $163=$162; //@line 3520 "tcc_bootstrap.c"
 HEAP32[(($163)>>2)]=$157; //@line 3520 "tcc_bootstrap.c"
 label=42;break; //@line 3521 "tcc_bootstrap.c"
 case 42: 
 var $165=$s; //@line 3522 "tcc_bootstrap.c"
 var $166=(($165+24)|0); //@line 3522 "tcc_bootstrap.c"
 var $167=$166; //@line 3522 "tcc_bootstrap.c"
 var $168=HEAP32[(($167)>>2)]; //@line 3522 "tcc_bootstrap.c"
 var $169=(($168+8)|0); //@line 3522 "tcc_bootstrap.c"
 var $170=$169; //@line 3522 "tcc_bootstrap.c"
 var $171=HEAP32[(($170)>>2)]; //@line 3522 "tcc_bootstrap.c"
 HEAP32[(($st)>>2)]=$171; //@line 3522 "tcc_bootstrap.c"
 label=43;break;
 case 43: 
 label=44;break; //@line 3524 "tcc_bootstrap.c"
 case 44: 
 _TOK_GET($t2,$st,$cval); //@line 3526 "tcc_bootstrap.c"
 var $174=HEAP32[(($t2)>>2)]; //@line 3527 "tcc_bootstrap.c"
 var $175=($174|0)<=0; //@line 3527 "tcc_bootstrap.c"
 if($175){label=45;break;}else{label=46;break;} //@line 3527 "tcc_bootstrap.c"
 case 45: 
 label=47;break; //@line 3528 "tcc_bootstrap.c"
 case 46: 
 var $178=HEAP32[(($t2)>>2)]; //@line 3529 "tcc_bootstrap.c"
 _tok_str_add2($str,$178,$cval); //@line 3529 "tcc_bootstrap.c"
 label=44;break; //@line 3530 "tcc_bootstrap.c"
 case 47: 
 var $180=(($str+4)|0); //@line 3531 "tcc_bootstrap.c"
 var $181=HEAP32[(($180)>>2)]; //@line 3531 "tcc_bootstrap.c"
 var $182=$l0; //@line 3531 "tcc_bootstrap.c"
 var $183=($181|0)==($182|0); //@line 3531 "tcc_bootstrap.c"
 if($183){label=48;break;}else{label=49;break;} //@line 3531 "tcc_bootstrap.c"
 case 48: 
 _tok_str_add($str,203); //@line 3532 "tcc_bootstrap.c"
 label=49;break; //@line 3532 "tcc_bootstrap.c"
 case 49: 
 label=51;break; //@line 3533 "tcc_bootstrap.c"
 case 50: 
 var $187=HEAP32[(($t)>>2)]; //@line 3534 "tcc_bootstrap.c"
 _tok_str_add($str,$187); //@line 3534 "tcc_bootstrap.c"
 label=51;break;
 case 51: 
 label=53;break; //@line 3536 "tcc_bootstrap.c"
 case 52: 
 var $190=HEAP32[(($t)>>2)]; //@line 3537 "tcc_bootstrap.c"
 _tok_str_add2($str,$190,$cval); //@line 3537 "tcc_bootstrap.c"
 label=53;break;
 case 53: 
 label=54;break;
 case 54: 
 var $193=$t1; //@line 3539 "tcc_bootstrap.c"
 $t0=$193; //@line 3539 "tcc_bootstrap.c"
 var $194=HEAP32[(($t)>>2)]; //@line 3539 "tcc_bootstrap.c"
 $t1=$194; //@line 3539 "tcc_bootstrap.c"
 label=2;break; //@line 3540 "tcc_bootstrap.c"
 case 55: 
 _tok_str_add($str,0); //@line 3541 "tcc_bootstrap.c"
 var $196=(($str)|0); //@line 3542 "tcc_bootstrap.c"
 var $197=HEAP32[(($196)>>2)]; //@line 3542 "tcc_bootstrap.c"
 STACKTOP=sp;return $197; //@line 3542 "tcc_bootstrap.c"
  default: assert(0, "bad label: " + label);
 }

}


function _macro_twosharps($ptr0){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+96)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $t=sp;
 var $cval=(sp)+(8);
 var $macro_str1=(sp)+(24);
 var $start_of_nosubsts;
 var $ptr=(sp)+(64);
 var $t1=(sp)+(72);
 var $cv1=(sp)+(80);
 $2=$ptr0;
 $start_of_nosubsts=-1; //@line 3578 "tcc_bootstrap.c"
 var $3=$2; //@line 3580 "tcc_bootstrap.c"
 HEAP32[(($ptr)>>2)]=$3; //@line 3580 "tcc_bootstrap.c"
 label=2;break; //@line 3580 "tcc_bootstrap.c"
 case 2: 
 _TOK_GET($t,$ptr,$cval); //@line 3581 "tcc_bootstrap.c"
 var $5=HEAP32[(($t)>>2)]; //@line 3582 "tcc_bootstrap.c"
 var $6=($5|0)==205; //@line 3582 "tcc_bootstrap.c"
 if($6){label=3;break;}else{label=4;break;} //@line 3582 "tcc_bootstrap.c"
 case 3: 
 label=7;break; //@line 3583 "tcc_bootstrap.c"
 case 4: 
 var $9=HEAP32[(($t)>>2)]; //@line 3584 "tcc_bootstrap.c"
 var $10=($9|0)==0; //@line 3584 "tcc_bootstrap.c"
 if($10){label=5;break;}else{label=6;break;} //@line 3584 "tcc_bootstrap.c"
 case 5: 
 $1=0; //@line 3585 "tcc_bootstrap.c"
 label=36;break; //@line 3585 "tcc_bootstrap.c"
 case 6: 
 label=2;break; //@line 3586 "tcc_bootstrap.c"
 case 7: 
 _tok_str_new($macro_str1); //@line 3587 "tcc_bootstrap.c"
 var $14=$2; //@line 3588 "tcc_bootstrap.c"
 HEAP32[(($ptr)>>2)]=$14; //@line 3588 "tcc_bootstrap.c"
 label=8;break; //@line 3588 "tcc_bootstrap.c"
 case 8: 
 _TOK_GET($t,$ptr,$cval); //@line 3589 "tcc_bootstrap.c"
 var $16=HEAP32[(($t)>>2)]; //@line 3590 "tcc_bootstrap.c"
 var $17=($16|0)==0; //@line 3590 "tcc_bootstrap.c"
 if($17){label=9;break;}else{label=10;break;} //@line 3590 "tcc_bootstrap.c"
 case 9: 
 label=35;break; //@line 3591 "tcc_bootstrap.c"
 case 10: 
 var $20=HEAP32[(($t)>>2)]; //@line 3592 "tcc_bootstrap.c"
 var $21=($20|0)==205; //@line 3592 "tcc_bootstrap.c"
 if($21){label=11;break;}else{label=12;break;} //@line 3592 "tcc_bootstrap.c"
 case 11: 
 label=8;break; //@line 3593 "tcc_bootstrap.c"
 case 12: 
 label=13;break; //@line 3594 "tcc_bootstrap.c"
 case 13: 
 var $25=HEAP32[(($ptr)>>2)]; //@line 3594 "tcc_bootstrap.c"
 var $26=HEAP32[(($25)>>2)]; //@line 3594 "tcc_bootstrap.c"
 var $27=($26|0)==205; //@line 3594 "tcc_bootstrap.c"
 if($27){label=14;break;}else{label=29;break;} //@line 3594 "tcc_bootstrap.c"
 case 14: 
 var $29=$start_of_nosubsts; //@line 3596 "tcc_bootstrap.c"
 var $30=($29|0)>=0; //@line 3596 "tcc_bootstrap.c"
 if($30){label=15;break;}else{label=16;break;} //@line 3596 "tcc_bootstrap.c"
 case 15: 
 var $32=$start_of_nosubsts; //@line 3597 "tcc_bootstrap.c"
 var $33=(($macro_str1+4)|0); //@line 3597 "tcc_bootstrap.c"
 HEAP32[(($33)>>2)]=$32; //@line 3597 "tcc_bootstrap.c"
 label=16;break; //@line 3597 "tcc_bootstrap.c"
 case 16: 
 label=17;break; //@line 3598 "tcc_bootstrap.c"
 case 17: 
 var $36=HEAP32[(($ptr)>>2)]; //@line 3598 "tcc_bootstrap.c"
 var $37=(($36+4)|0); //@line 3598 "tcc_bootstrap.c"
 HEAP32[(($ptr)>>2)]=$37; //@line 3598 "tcc_bootstrap.c"
 var $38=HEAP32[(($37)>>2)]; //@line 3598 "tcc_bootstrap.c"
 HEAP32[(($t1)>>2)]=$38; //@line 3598 "tcc_bootstrap.c"
 var $39=($38|0)==204; //@line 3598 "tcc_bootstrap.c"
 if($39){label=18;break;}else{label=19;break;} //@line 3598 "tcc_bootstrap.c"
 case 18: 
 label=17;break; //@line 3598 "tcc_bootstrap.c"
 case 19: 
 var $42=HEAP32[(($t1)>>2)]; //@line 3600 "tcc_bootstrap.c"
 var $43=($42|0)!=0; //@line 3600 "tcc_bootstrap.c"
 if($43){label=20;break;}else{label=28;break;} //@line 3600 "tcc_bootstrap.c"
 case 20: 
 var $45=HEAP32[(($t1)>>2)]; //@line 3600 "tcc_bootstrap.c"
 var $46=($45|0)!=205; //@line 3600 "tcc_bootstrap.c"
 if($46){label=21;break;}else{label=28;break;} //@line 3600 "tcc_bootstrap.c"
 case 21: 
 _TOK_GET($t1,$ptr,$cv1); //@line 3601 "tcc_bootstrap.c"
 var $48=HEAP32[(($t)>>2)]; //@line 3602 "tcc_bootstrap.c"
 var $49=($48|0)!=203; //@line 3602 "tcc_bootstrap.c"
 if($49){label=23;break;}else{label=22;break;} //@line 3602 "tcc_bootstrap.c"
 case 22: 
 var $51=HEAP32[(($t1)>>2)]; //@line 3602 "tcc_bootstrap.c"
 var $52=($51|0)!=203; //@line 3602 "tcc_bootstrap.c"
 if($52){label=23;break;}else{label=27;break;} //@line 3602 "tcc_bootstrap.c"
 case 23: 
 var $54=HEAP32[(($t)>>2)]; //@line 3603 "tcc_bootstrap.c"
 var $55=HEAP32[(($t1)>>2)]; //@line 3603 "tcc_bootstrap.c"
 var $56=_paste_tokens($54,$cval,$55,$cv1); //@line 3603 "tcc_bootstrap.c"
 var $57=($56|0)!=0; //@line 3603 "tcc_bootstrap.c"
 if($57){label=24;break;}else{label=25;break;} //@line 3603 "tcc_bootstrap.c"
 case 24: 
 var $59=HEAP32[((10472)>>2)]; //@line 3604 "tcc_bootstrap.c"
 HEAP32[(($t)>>2)]=$59; //@line 3604 "tcc_bootstrap.c"
 var $60=$cval; //@line 3604 "tcc_bootstrap.c"
 assert(16 % 1 === 0);HEAP32[(($60)>>2)]=HEAP32[((10440)>>2)];HEAP32[((($60)+(4))>>2)]=HEAP32[((10444)>>2)];HEAP32[((($60)+(8))>>2)]=HEAP32[((10448)>>2)];HEAP32[((($60)+(12))>>2)]=HEAP32[((10452)>>2)]; //@line 3604 "tcc_bootstrap.c"
 label=26;break; //@line 3605 "tcc_bootstrap.c"
 case 25: 
 var $62=HEAP32[(($t)>>2)]; //@line 3606 "tcc_bootstrap.c"
 _tok_str_add2($macro_str1,$62,$cval); //@line 3606 "tcc_bootstrap.c"
 var $63=HEAP32[(($t1)>>2)]; //@line 3607 "tcc_bootstrap.c"
 HEAP32[(($t)>>2)]=$63; //@line 3607 "tcc_bootstrap.c"
 var $64=$cval; //@line 3607 "tcc_bootstrap.c"
 var $65=$cv1; //@line 3607 "tcc_bootstrap.c"
 assert(16 % 1 === 0);HEAP32[(($64)>>2)]=HEAP32[(($65)>>2)];HEAP32[((($64)+(4))>>2)]=HEAP32[((($65)+(4))>>2)];HEAP32[((($64)+(8))>>2)]=HEAP32[((($65)+(8))>>2)];HEAP32[((($64)+(12))>>2)]=HEAP32[((($65)+(12))>>2)]; //@line 3607 "tcc_bootstrap.c"
 label=26;break;
 case 26: 
 label=27;break; //@line 3609 "tcc_bootstrap.c"
 case 27: 
 label=28;break; //@line 3610 "tcc_bootstrap.c"
 case 28: 
 label=13;break; //@line 3611 "tcc_bootstrap.c"
 case 29: 
 var $70=HEAP32[(($t)>>2)]; //@line 3612 "tcc_bootstrap.c"
 var $71=($70|0)==204; //@line 3612 "tcc_bootstrap.c"
 if($71){label=30;break;}else{label=33;break;} //@line 3612 "tcc_bootstrap.c"
 case 30: 
 var $73=$start_of_nosubsts; //@line 3613 "tcc_bootstrap.c"
 var $74=($73|0)<0; //@line 3613 "tcc_bootstrap.c"
 if($74){label=31;break;}else{label=32;break;} //@line 3613 "tcc_bootstrap.c"
 case 31: 
 var $76=(($macro_str1+4)|0); //@line 3614 "tcc_bootstrap.c"
 var $77=HEAP32[(($76)>>2)]; //@line 3614 "tcc_bootstrap.c"
 $start_of_nosubsts=$77; //@line 3614 "tcc_bootstrap.c"
 label=32;break; //@line 3614 "tcc_bootstrap.c"
 case 32: 
 label=34;break; //@line 3615 "tcc_bootstrap.c"
 case 33: 
 $start_of_nosubsts=-1; //@line 3616 "tcc_bootstrap.c"
 label=34;break;
 case 34: 
 var $81=HEAP32[(($t)>>2)]; //@line 3618 "tcc_bootstrap.c"
 _tok_str_add2($macro_str1,$81,$cval); //@line 3618 "tcc_bootstrap.c"
 label=8;break; //@line 3619 "tcc_bootstrap.c"
 case 35: 
 _tok_str_add($macro_str1,0); //@line 3620 "tcc_bootstrap.c"
 var $83=(($macro_str1)|0); //@line 3621 "tcc_bootstrap.c"
 var $84=HEAP32[(($83)>>2)]; //@line 3621 "tcc_bootstrap.c"
 $1=$84; //@line 3621 "tcc_bootstrap.c"
 label=36;break; //@line 3621 "tcc_bootstrap.c"
 case 36: 
 var $86=$1; //@line 3622 "tcc_bootstrap.c"
 STACKTOP=sp;return $86; //@line 3622 "tcc_bootstrap.c"
  default: assert(0, "bad label: " + label);
 }

}


function _macro_subst($tok_str,$nested_list,$macro_str){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+80)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3=sp;
 var $s;
 var $t=(sp)+(8);
 var $spc=(sp)+(16);
 var $nosubst;
 var $cval=(sp)+(24);
 var $str=(sp)+(40);
 $1=$tok_str;
 $2=$nested_list;
 HEAP32[(($3)>>2)]=$macro_str;
 $nosubst=0; //@line 3811 "tcc_bootstrap.c"
 HEAP32[(($spc)>>2)]=0; //@line 3811 "tcc_bootstrap.c"
 label=2;break; //@line 3812 "tcc_bootstrap.c"
 case 2: 
 _TOK_GET($t,$3,$cval); //@line 3813 "tcc_bootstrap.c"
 var $5=HEAP32[(($t)>>2)]; //@line 3814 "tcc_bootstrap.c"
 var $6=($5|0)<=0; //@line 3814 "tcc_bootstrap.c"
 if($6){label=3;break;}else{label=4;break;} //@line 3814 "tcc_bootstrap.c"
 case 3: 
 label=35;break; //@line 3815 "tcc_bootstrap.c"
 case 4: 
 var $9=HEAP32[(($t)>>2)]; //@line 3816 "tcc_bootstrap.c"
 var $10=($9|0)>=256; //@line 3816 "tcc_bootstrap.c"
 if($10){label=5;break;}else{label=15;break;} //@line 3816 "tcc_bootstrap.c"
 case 5: 
 var $12=$nosubst; //@line 3816 "tcc_bootstrap.c"
 var $13=0==($12|0); //@line 3816 "tcc_bootstrap.c"
 if($13){label=6;break;}else{label=15;break;} //@line 3816 "tcc_bootstrap.c"
 case 6: 
 var $15=HEAP32[(($t)>>2)]; //@line 3817 "tcc_bootstrap.c"
 var $16=_define_find($15); //@line 3817 "tcc_bootstrap.c"
 $s=$16; //@line 3817 "tcc_bootstrap.c"
 var $17=$s; //@line 3818 "tcc_bootstrap.c"
 var $18=($17|0)==0; //@line 3818 "tcc_bootstrap.c"
 if($18){label=7;break;}else{label=8;break;} //@line 3818 "tcc_bootstrap.c"
 case 7: 
 label=19;break; //@line 3819 "tcc_bootstrap.c"
 case 8: 
 var $21=$2; //@line 3820 "tcc_bootstrap.c"
 var $22=HEAP32[(($21)>>2)]; //@line 3820 "tcc_bootstrap.c"
 var $23=HEAP32[(($t)>>2)]; //@line 3820 "tcc_bootstrap.c"
 var $24=_sym_find2($22,$23); //@line 3820 "tcc_bootstrap.c"
 var $25=($24|0)!=0; //@line 3820 "tcc_bootstrap.c"
 if($25){label=9;break;}else{label=10;break;} //@line 3820 "tcc_bootstrap.c"
 case 9: 
 var $27=$1; //@line 3821 "tcc_bootstrap.c"
 _tok_str_add2($27,204,0); //@line 3821 "tcc_bootstrap.c"
 label=19;break; //@line 3822 "tcc_bootstrap.c"
 case 10: 
 var $29=HEAP32[(($3)>>2)]; //@line 3825 "tcc_bootstrap.c"
 var $30=(($str)|0); //@line 3825 "tcc_bootstrap.c"
 HEAP32[(($30)>>2)]=$29; //@line 3825 "tcc_bootstrap.c"
 _begin_macro($str,2); //@line 3826 "tcc_bootstrap.c"
 var $31=HEAP32[(($t)>>2)]; //@line 3827 "tcc_bootstrap.c"
 HEAP32[((10472)>>2)]=$31; //@line 3827 "tcc_bootstrap.c"
 var $32=$1; //@line 3828 "tcc_bootstrap.c"
 var $33=$2; //@line 3828 "tcc_bootstrap.c"
 var $34=$s; //@line 3828 "tcc_bootstrap.c"
 var $35=_macro_subst_tok($32,$33,$34); //@line 3828 "tcc_bootstrap.c"
 var $36=(($str+32)|0); //@line 3829 "tcc_bootstrap.c"
 var $37=HEAP8[(($36)>>0)]; //@line 3829 "tcc_bootstrap.c"
 var $38=(($37<<24)>>24); //@line 3829 "tcc_bootstrap.c"
 var $39=($38|0)==3; //@line 3829 "tcc_bootstrap.c"
 if($39){label=11;break;}else{label=12;break;} //@line 3829 "tcc_bootstrap.c"
 case 11: 
 label=35;break; //@line 3830 "tcc_bootstrap.c"
 case 12: 
 var $42=HEAP32[((10680)>>2)]; //@line 3832 "tcc_bootstrap.c"
 HEAP32[(($3)>>2)]=$42; //@line 3832 "tcc_bootstrap.c"
 _end_macro(); //@line 3833 "tcc_bootstrap.c"
 var $43=$1; //@line 3834 "tcc_bootstrap.c"
 var $44=(($43+4)|0); //@line 3834 "tcc_bootstrap.c"
 var $45=HEAP32[(($44)>>2)]; //@line 3834 "tcc_bootstrap.c"
 var $46=($45|0)!=0; //@line 3834 "tcc_bootstrap.c"
 if($46){label=13;break;}else{label=14;break;} //@line 3834 "tcc_bootstrap.c"
 case 13: 
 var $48=$1; //@line 3835 "tcc_bootstrap.c"
 var $49=(($48+8)|0); //@line 3835 "tcc_bootstrap.c"
 var $50=HEAP32[(($49)>>2)]; //@line 3835 "tcc_bootstrap.c"
 var $51=$1; //@line 3835 "tcc_bootstrap.c"
 var $52=(($51)|0); //@line 3835 "tcc_bootstrap.c"
 var $53=HEAP32[(($52)>>2)]; //@line 3835 "tcc_bootstrap.c"
 var $54=(($53+($50<<2))|0); //@line 3835 "tcc_bootstrap.c"
 var $55=HEAP32[(($54)>>2)]; //@line 3835 "tcc_bootstrap.c"
 HEAP32[(($t)>>2)]=$55; //@line 3835 "tcc_bootstrap.c"
 var $56=_is_space($55); //@line 3835 "tcc_bootstrap.c"
 HEAP32[(($spc)>>2)]=$56; //@line 3835 "tcc_bootstrap.c"
 label=14;break; //@line 3835 "tcc_bootstrap.c"
 case 14: 
 label=31;break; //@line 3836 "tcc_bootstrap.c"
 case 15: 
 var $59=HEAP32[(($t)>>2)]; //@line 3837 "tcc_bootstrap.c"
 var $60=($59|0)==92; //@line 3837 "tcc_bootstrap.c"
 if($60){label=16;break;}else{label=18;break;} //@line 3837 "tcc_bootstrap.c"
 case 16: 
 var $62=HEAP32[((10608)>>2)]; //@line 3837 "tcc_bootstrap.c"
 var $63=$62&32; //@line 3837 "tcc_bootstrap.c"
 var $64=($63|0)!=0; //@line 3837 "tcc_bootstrap.c"
 if($64){label=18;break;}else{label=17;break;} //@line 3837 "tcc_bootstrap.c"
 case 17: 
 _tcc_error(4896,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs; //@line 3838 "tcc_bootstrap.c"
 label=18;break; //@line 3838 "tcc_bootstrap.c"
 case 18: 
 label=19;break; //@line 3838 "tcc_bootstrap.c"
 case 19: 
 var $68=HEAP32[(($t)>>2)]; //@line 3840 "tcc_bootstrap.c"
 var $69=_check_space($68,$spc); //@line 3840 "tcc_bootstrap.c"
 var $70=($69|0)!=0; //@line 3840 "tcc_bootstrap.c"
 if($70){label=21;break;}else{label=20;break;} //@line 3840 "tcc_bootstrap.c"
 case 20: 
 var $72=$1; //@line 3841 "tcc_bootstrap.c"
 var $73=HEAP32[(($t)>>2)]; //@line 3841 "tcc_bootstrap.c"
 _tok_str_add2($72,$73,$cval); //@line 3841 "tcc_bootstrap.c"
 label=21;break; //@line 3841 "tcc_bootstrap.c"
 case 21: 
 var $75=$nosubst; //@line 3843 "tcc_bootstrap.c"
 var $76=($75|0)!=0; //@line 3843 "tcc_bootstrap.c"
 if($76){label=22;break;}else{label=28;break;} //@line 3843 "tcc_bootstrap.c"
 case 22: 
 var $78=$nosubst; //@line 3844 "tcc_bootstrap.c"
 var $79=($78|0)>1; //@line 3844 "tcc_bootstrap.c"
 if($79){label=23;break;}else{label=27;break;} //@line 3844 "tcc_bootstrap.c"
 case 23: 
 var $81=HEAP32[(($spc)>>2)]; //@line 3844 "tcc_bootstrap.c"
 var $82=($81|0)!=0; //@line 3844 "tcc_bootstrap.c"
 if($82){label=26;break;}else{label=24;break;} //@line 3844 "tcc_bootstrap.c"
 case 24: 
 var $84=$nosubst; //@line 3844 "tcc_bootstrap.c"
 var $85=((($84)+(1))|0); //@line 3844 "tcc_bootstrap.c"
 $nosubst=$85; //@line 3844 "tcc_bootstrap.c"
 var $86=($85|0)==3; //@line 3844 "tcc_bootstrap.c"
 if($86){label=25;break;}else{label=27;break;} //@line 3844 "tcc_bootstrap.c"
 case 25: 
 var $88=HEAP32[(($t)>>2)]; //@line 3844 "tcc_bootstrap.c"
 var $89=($88|0)==40; //@line 3844 "tcc_bootstrap.c"
 if($89){label=26;break;}else{label=27;break;} //@line 3844 "tcc_bootstrap.c"
 case 26: 
 label=2;break; //@line 3845 "tcc_bootstrap.c"
 case 27: 
 $nosubst=0; //@line 3846 "tcc_bootstrap.c"
 label=28;break; //@line 3847 "tcc_bootstrap.c"
 case 28: 
 var $93=HEAP32[(($t)>>2)]; //@line 3848 "tcc_bootstrap.c"
 var $94=($93|0)==204; //@line 3848 "tcc_bootstrap.c"
 if($94){label=29;break;}else{label=30;break;} //@line 3848 "tcc_bootstrap.c"
 case 29: 
 $nosubst=1; //@line 3849 "tcc_bootstrap.c"
 label=30;break; //@line 3849 "tcc_bootstrap.c"
 case 30: 
 label=31;break;
 case 31: 
 var $98=HEAP32[(($t)>>2)]; //@line 3851 "tcc_bootstrap.c"
 var $99=($98|0)==321; //@line 3851 "tcc_bootstrap.c"
 if($99){label=32;break;}else{label=34;break;} //@line 3851 "tcc_bootstrap.c"
 case 32: 
 var $101=HEAP32[((10576)>>2)]; //@line 3851 "tcc_bootstrap.c"
 var $102=($101|0)!=0; //@line 3851 "tcc_bootstrap.c"
 if($102){label=33;break;}else{label=34;break;} //@line 3851 "tcc_bootstrap.c"
 case 33: 
 $nosubst=2; //@line 3852 "tcc_bootstrap.c"
 label=34;break; //@line 3852 "tcc_bootstrap.c"
 case 34: 
 label=2;break; //@line 3853 "tcc_bootstrap.c"
 case 35: 
 STACKTOP=sp;return; //@line 3854 "tcc_bootstrap.c"
  default: assert(0, "bad label: " + label);
 }

}


function _sym_find2($s,$v){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 $2=$s;
 $3=$v;
 label=2;break; //@line 4295 "tcc_bootstrap.c"
 case 2: 
 var $5=$2; //@line 4295 "tcc_bootstrap.c"
 var $6=($5|0)!=0; //@line 4295 "tcc_bootstrap.c"
 if($6){label=3;break;}else{label=9;break;} //@line 4295 "tcc_bootstrap.c"
 case 3: 
 var $8=$2; //@line 4296 "tcc_bootstrap.c"
 var $9=(($8)|0); //@line 4296 "tcc_bootstrap.c"
 var $10=HEAP32[(($9)>>2)]; //@line 4296 "tcc_bootstrap.c"
 var $11=$3; //@line 4296 "tcc_bootstrap.c"
 var $12=($10|0)==($11|0); //@line 4296 "tcc_bootstrap.c"
 if($12){label=4;break;}else{label=5;break;} //@line 4296 "tcc_bootstrap.c"
 case 4: 
 var $14=$2; //@line 4297 "tcc_bootstrap.c"
 $1=$14; //@line 4297 "tcc_bootstrap.c"
 label=10;break; //@line 4297 "tcc_bootstrap.c"
 case 5: 
 var $16=$2; //@line 4298 "tcc_bootstrap.c"
 var $17=(($16)|0); //@line 4298 "tcc_bootstrap.c"
 var $18=HEAP32[(($17)>>2)]; //@line 4298 "tcc_bootstrap.c"
 var $19=($18|0)==-1; //@line 4298 "tcc_bootstrap.c"
 if($19){label=6;break;}else{label=7;break;} //@line 4298 "tcc_bootstrap.c"
 case 6: 
 $1=0; //@line 4299 "tcc_bootstrap.c"
 label=10;break; //@line 4299 "tcc_bootstrap.c"
 case 7: 
 label=8;break;
 case 8: 
 var $23=$2; //@line 4300 "tcc_bootstrap.c"
 var $24=(($23+28)|0); //@line 4300 "tcc_bootstrap.c"
 var $25=HEAP32[(($24)>>2)]; //@line 4300 "tcc_bootstrap.c"
 $2=$25; //@line 4300 "tcc_bootstrap.c"
 label=2;break; //@line 4301 "tcc_bootstrap.c"
 case 9: 
 $1=0; //@line 4302 "tcc_bootstrap.c"
 label=10;break; //@line 4302 "tcc_bootstrap.c"
 case 10: 
 var $28=$1; //@line 4303 "tcc_bootstrap.c"
 STACKTOP=sp;return $28; //@line 4303 "tcc_bootstrap.c"
  default: assert(0, "bad label: " + label);
 }

}


function _paste_tokens($t1,$v1,$t2,$v2){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $cstr=sp;
 var $n;
 var $ret;
 $1=$t1;
 $2=$v1;
 $3=$t2;
 $4=$v2;
 $ret=1; //@line 3547 "tcc_bootstrap.c"
 _cstr_new($cstr); //@line 3548 "tcc_bootstrap.c"
 var $5=$1; //@line 3549 "tcc_bootstrap.c"
 var $6=($5|0)!=203; //@line 3549 "tcc_bootstrap.c"
 if($6){label=2;break;}else{label=3;break;} //@line 3549 "tcc_bootstrap.c"
 case 2: 
 var $8=$1; //@line 3550 "tcc_bootstrap.c"
 var $9=$2; //@line 3550 "tcc_bootstrap.c"
 var $10=_get_tok_str($8,$9); //@line 3550 "tcc_bootstrap.c"
 _cstr_cat($cstr,$10,-1); //@line 3550 "tcc_bootstrap.c"
 label=3;break; //@line 3550 "tcc_bootstrap.c"
 case 3: 
 var $12=(($cstr)|0); //@line 3551 "tcc_bootstrap.c"
 var $13=HEAP32[(($12)>>2)]; //@line 3551 "tcc_bootstrap.c"
 $n=$13; //@line 3551 "tcc_bootstrap.c"
 var $14=$3; //@line 3552 "tcc_bootstrap.c"
 var $15=($14|0)!=203; //@line 3552 "tcc_bootstrap.c"
 if($15){label=4;break;}else{label=5;break;} //@line 3552 "tcc_bootstrap.c"
 case 4: 
 var $17=$3; //@line 3553 "tcc_bootstrap.c"
 var $18=$4; //@line 3553 "tcc_bootstrap.c"
 var $19=_get_tok_str($17,$18); //@line 3553 "tcc_bootstrap.c"
 _cstr_cat($cstr,$19,-1); //@line 3553 "tcc_bootstrap.c"
 label=5;break; //@line 3553 "tcc_bootstrap.c"
 case 5: 
 _cstr_ccat($cstr,0); //@line 3554 "tcc_bootstrap.c"
 var $21=HEAP32[((10488)>>2)]; //@line 3555 "tcc_bootstrap.c"
 var $22=(($cstr)|0); //@line 3555 "tcc_bootstrap.c"
 var $23=HEAP32[(($22)>>2)]; //@line 3555 "tcc_bootstrap.c"
 _tcc_open_bf($21,4888,$23); //@line 3555 "tcc_bootstrap.c"
 var $24=HEAP32[((76648)>>2)]; //@line 3556 "tcc_bootstrap.c"
 var $25=(($24+1072)|0); //@line 3556 "tcc_bootstrap.c"
 var $26=$25; //@line 3556 "tcc_bootstrap.c"
 var $27=(($cstr+4)|0); //@line 3556 "tcc_bootstrap.c"
 var $28=HEAP32[(($27)>>2)]; //@line 3556 "tcc_bootstrap.c"
 var $29=(($cstr)|0); //@line 3556 "tcc_bootstrap.c"
 var $30=HEAP32[(($29)>>2)]; //@line 3556 "tcc_bootstrap.c"
 assert($30 % 1 === 0);(_memcpy($26, $28, $30)|0); //@line 3556 "tcc_bootstrap.c"
 HEAP32[((10464)>>2)]=0; //@line 3557 "tcc_bootstrap.c"
 label=6;break; //@line 3558 "tcc_bootstrap.c"
 case 6: 
 _next_nomacro1(); //@line 3559 "tcc_bootstrap.c"
 var $32=HEAP32[((76648)>>2)]; //@line 3560 "tcc_bootstrap.c"
 var $33=(($32)|0); //@line 3560 "tcc_bootstrap.c"
 var $34=HEAP32[(($33)>>2)]; //@line 3560 "tcc_bootstrap.c"
 var $35=HEAP8[(($34)>>0)]; //@line 3560 "tcc_bootstrap.c"
 var $36=($35&255); //@line 3560 "tcc_bootstrap.c"
 var $37=0==($36|0); //@line 3560 "tcc_bootstrap.c"
 if($37){label=7;break;}else{label=8;break;} //@line 3560 "tcc_bootstrap.c"
 case 7: 
 label=11;break; //@line 3561 "tcc_bootstrap.c"
 case 8: 
 var $40=HEAP32[((10472)>>2)]; //@line 3562 "tcc_bootstrap.c"
 var $41=_is_space($40); //@line 3562 "tcc_bootstrap.c"
 var $42=($41|0)!=0; //@line 3562 "tcc_bootstrap.c"
 if($42){label=9;break;}else{label=10;break;} //@line 3562 "tcc_bootstrap.c"
 case 9: 
 label=6;break; //@line 3563 "tcc_bootstrap.c"
 case 10: 
 var $45=$n; //@line 3564 "tcc_bootstrap.c"
 var $46=(($cstr+4)|0); //@line 3564 "tcc_bootstrap.c"
 var $47=HEAP32[(($46)>>2)]; //@line 3564 "tcc_bootstrap.c"
 var $48=(($cstr+4)|0); //@line 3564 "tcc_bootstrap.c"
 var $49=HEAP32[(($48)>>2)]; //@line 3564 "tcc_bootstrap.c"
 var $50=$n; //@line 3564 "tcc_bootstrap.c"
 var $51=(($49+$50)|0); //@line 3564 "tcc_bootstrap.c"
 _tcc_warning(4800,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 24)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$45,HEAP32[(((tempVarArgs)+(8))>>2)]=$47,HEAP32[(((tempVarArgs)+(16))>>2)]=$51,tempVarArgs)); STACKTOP=tempVarArgs; //@line 3564 "tcc_bootstrap.c"
 $ret=0; //@line 3566 "tcc_bootstrap.c"
 label=11;break; //@line 3567 "tcc_bootstrap.c"
 case 11: 
 _tcc_close(); //@line 3569 "tcc_bootstrap.c"
 _cstr_free($cstr); //@line 3570 "tcc_bootstrap.c"
 var $53=$ret; //@line 3571 "tcc_bootstrap.c"
 STACKTOP=sp;return $53; //@line 3571 "tcc_bootstrap.c"
  default: assert(0, "bad label: " + label);
 }

}


function _handle_stray(){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=_handle_stray_noerror(); //@line 1594 "tcc_bootstrap.c"
 var $2=($1|0)!=0; //@line 1594 "tcc_bootstrap.c"
 if($2){label=2;break;}else{label=3;break;} //@line 1594 "tcc_bootstrap.c"
 case 2: 
 _tcc_error(4896,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs; //@line 1595 "tcc_bootstrap.c"
 label=3;break; //@line 1595 "tcc_bootstrap.c"
 case 3: 
 STACKTOP=sp;return; //@line 1596 "tcc_bootstrap.c"
  default: assert(0, "bad label: " + label);
 }

}


function _tccelf_begin_file($s1){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $s;
 var $i;
 $1=$s1;
 $i=1; //@line 9262 "tcc_bootstrap.c"
 label=2;break; //@line 9262 "tcc_bootstrap.c"
 case 2: 
 var $3=$i; //@line 9262 "tcc_bootstrap.c"
 var $4=$1; //@line 9262 "tcc_bootstrap.c"
 var $5=(($4+684)|0); //@line 9262 "tcc_bootstrap.c"
 var $6=HEAP32[(($5)>>2)]; //@line 9262 "tcc_bootstrap.c"
 var $7=($3|0)<($6|0); //@line 9262 "tcc_bootstrap.c"
 if($7){label=3;break;}else{label=5;break;} //@line 9262 "tcc_bootstrap.c"
 case 3: 
 var $9=$i; //@line 9263 "tcc_bootstrap.c"
 var $10=$1; //@line 9263 "tcc_bootstrap.c"
 var $11=(($10+680)|0); //@line 9263 "tcc_bootstrap.c"
 var $12=HEAP32[(($11)>>2)]; //@line 9263 "tcc_bootstrap.c"
 var $13=(($12+($9<<2))|0); //@line 9263 "tcc_bootstrap.c"
 var $14=HEAP32[(($13)>>2)]; //@line 9263 "tcc_bootstrap.c"
 $s=$14; //@line 9263 "tcc_bootstrap.c"
 var $15=$s; //@line 9264 "tcc_bootstrap.c"
 var $16=(($15)|0); //@line 9264 "tcc_bootstrap.c"
 var $17=HEAP32[(($16)>>2)]; //@line 9264 "tcc_bootstrap.c"
 var $18=$s; //@line 9264 "tcc_bootstrap.c"
 var $19=(($18+48)|0); //@line 9264 "tcc_bootstrap.c"
 HEAP32[(($19)>>2)]=$17; //@line 9264 "tcc_bootstrap.c"
 label=4;break; //@line 9265 "tcc_bootstrap.c"
 case 4: 
 var $21=$i; //@line 9262 "tcc_bootstrap.c"
 var $22=((($21)+(1))|0); //@line 9262 "tcc_bootstrap.c"
 $i=$22; //@line 9262 "tcc_bootstrap.c"
 label=2;break; //@line 9262 "tcc_bootstrap.c"
 case 5: 
 var $24=$1; //@line 9266 "tcc_bootstrap.c"
 var $25=(($24+700)|0); //@line 9266 "tcc_bootstrap.c"
 var $26=HEAP32[(($25)>>2)]; //@line 9266 "tcc_bootstrap.c"
 $s=$26; //@line 9266 "tcc_bootstrap.c"
 var $27=$s; //@line 9266 "tcc_bootstrap.c"
 var $28=(($27+64)|0); //@line 9266 "tcc_bootstrap.c"
 var $29=HEAP32[(($28)>>2)]; //@line 9266 "tcc_bootstrap.c"
 var $30=$s; //@line 9266 "tcc_bootstrap.c"
 var $31=(($30+60)|0); //@line 9266 "tcc_bootstrap.c"
 HEAP32[(($31)>>2)]=$29; //@line 9266 "tcc_bootstrap.c"
 var $32=$s; //@line 9266 "tcc_bootstrap.c"
 var $33=(($32+64)|0); //@line 9266 "tcc_bootstrap.c"
 HEAP32[(($33)>>2)]=0; //@line 9266 "tcc_bootstrap.c"
 STACKTOP=sp;return; //@line 9267 "tcc_bootstrap.c"
  default: assert(0, "bad label: " + label);
 }

}


function _preprocess_start($s1,$is_asm){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $cstr=sp;
 var $i;
 $1=$s1;
 $2=$is_asm;
 var $3=$1; //@line 3901 "tcc_bootstrap.c"
 var $4=(($3+108)|0); //@line 3901 "tcc_bootstrap.c"
 var $5=(($4)|0); //@line 3901 "tcc_bootstrap.c"
 var $6=$1; //@line 3901 "tcc_bootstrap.c"
 var $7=(($6+236)|0); //@line 3901 "tcc_bootstrap.c"
 HEAP32[(($7)>>2)]=$5; //@line 3901 "tcc_bootstrap.c"
 var $8=$1; //@line 3902 "tcc_bootstrap.c"
 var $9=(($8+240)|0); //@line 3902 "tcc_bootstrap.c"
 var $10=(($9)|0); //@line 3902 "tcc_bootstrap.c"
 var $11=$1; //@line 3902 "tcc_bootstrap.c"
 var $12=(($11+496)|0); //@line 3902 "tcc_bootstrap.c"
 HEAP32[(($12)>>2)]=$10; //@line 3902 "tcc_bootstrap.c"
 var $13=$1; //@line 3903 "tcc_bootstrap.c"
 var $14=(($13+496)|0); //@line 3903 "tcc_bootstrap.c"
 var $15=HEAP32[(($14)>>2)]; //@line 3903 "tcc_bootstrap.c"
 var $16=HEAP32[((76648)>>2)]; //@line 3903 "tcc_bootstrap.c"
 var $17=(($16+32)|0); //@line 3903 "tcc_bootstrap.c"
 HEAP32[(($17)>>2)]=$15; //@line 3903 "tcc_bootstrap.c"
 HEAP32[((10576)>>2)]=0; //@line 3904 "tcc_bootstrap.c"
 HEAP32[((10600)>>2)]=0; //@line 3905 "tcc_bootstrap.c"
 HEAP32[((10592)>>2)]=0; //@line 3906 "tcc_bootstrap.c"
 HEAP32[((10584)>>2)]=0; //@line 3906 "tcc_bootstrap.c"
 var $18=HEAP32[((10568)>>2)]; //@line 3907 "tcc_bootstrap.c"
 var $19=((($18)+(1))|0); //@line 3907 "tcc_bootstrap.c"
 HEAP32[((10568)>>2)]=$19; //@line 3907 "tcc_bootstrap.c"
 HEAP32[((9288)>>2)]=77240; //@line 3908 "tcc_bootstrap.c"
 HEAP32[((10552)>>2)]=77240; //@line 3908 "tcc_bootstrap.c"
 var $20=$1; //@line 3909 "tcc_bootstrap.c"
 var $21=(($20+636)|0); //@line 3909 "tcc_bootstrap.c"
 var $22=(($21)|0); //@line 3909 "tcc_bootstrap.c"
 HEAP32[(($22)>>2)]=0; //@line 3909 "tcc_bootstrap.c"
 var $23=$1; //@line 3910 "tcc_bootstrap.c"
 var $24=(($23+636)|0); //@line 3910 "tcc_bootstrap.c"
 var $25=(($24)|0); //@line 3910 "tcc_bootstrap.c"
 var $26=$1; //@line 3910 "tcc_bootstrap.c"
 var $27=(($26+668)|0); //@line 3910 "tcc_bootstrap.c"
 HEAP32[(($27)>>2)]=$25; //@line 3910 "tcc_bootstrap.c"
 var $28=$1; //@line 3911 "tcc_bootstrap.c"
 var $29=(($28+16)|0); //@line 3911 "tcc_bootstrap.c"
 var $30=HEAP32[(($29)>>2)]; //@line 3911 "tcc_bootstrap.c"
 var $31=($30|0)!=0; //@line 3911 "tcc_bootstrap.c"
 var $32=($31?2:0); //@line 3911 "tcc_bootstrap.c"
 var $33=_set_idnum(36,$32); //@line 3911 "tcc_bootstrap.c"
 var $34=$2; //@line 3912 "tcc_bootstrap.c"
 var $35=($34|0)!=0; //@line 3912 "tcc_bootstrap.c"
 var $36=($35?2:0); //@line 3912 "tcc_bootstrap.c"
 var $37=_set_idnum(46,$36); //@line 3912 "tcc_bootstrap.c"
 _cstr_new($cstr); //@line 3913 "tcc_bootstrap.c"
 _cstr_cat($cstr,4736,-1); //@line 3914 "tcc_bootstrap.c"
 var $38=HEAP32[((76648)>>2)]; //@line 3915 "tcc_bootstrap.c"
 var $39=(($38+40)|0); //@line 3915 "tcc_bootstrap.c"
 var $40=(($39)|0); //@line 3915 "tcc_bootstrap.c"
 _cstr_cat($cstr,$40,-1); //@line 3915 "tcc_bootstrap.c"
 _cstr_cat($cstr,4736,0); //@line 3916 "tcc_bootstrap.c"
 var $41=$1; //@line 3917 "tcc_bootstrap.c"
 var $42=(($cstr+4)|0); //@line 3917 "tcc_bootstrap.c"
 var $43=HEAP32[(($42)>>2)]; //@line 3917 "tcc_bootstrap.c"
 _tcc_define_symbol($41,4720,$43); //@line 3917 "tcc_bootstrap.c"
 _cstr_reset($cstr); //@line 3918 "tcc_bootstrap.c"
 $i=0; //@line 3919 "tcc_bootstrap.c"
 label=2;break; //@line 3919 "tcc_bootstrap.c"
 case 2: 
 var $45=$i; //@line 3919 "tcc_bootstrap.c"
 var $46=$1; //@line 3919 "tcc_bootstrap.c"
 var $47=(($46+72)|0); //@line 3919 "tcc_bootstrap.c"
 var $48=HEAP32[(($47)>>2)]; //@line 3919 "tcc_bootstrap.c"
 var $49=($45|0)<($48|0); //@line 3919 "tcc_bootstrap.c"
 if($49){label=3;break;}else{label=5;break;} //@line 3919 "tcc_bootstrap.c"
 case 3: 
 _cstr_cat($cstr,4704,-1); //@line 3920 "tcc_bootstrap.c"
 var $51=$i; //@line 3921 "tcc_bootstrap.c"
 var $52=$1; //@line 3921 "tcc_bootstrap.c"
 var $53=(($52+68)|0); //@line 3921 "tcc_bootstrap.c"
 var $54=HEAP32[(($53)>>2)]; //@line 3921 "tcc_bootstrap.c"
 var $55=(($54+($51<<2))|0); //@line 3921 "tcc_bootstrap.c"
 var $56=HEAP32[(($55)>>2)]; //@line 3921 "tcc_bootstrap.c"
 _cstr_cat($cstr,$56,-1); //@line 3921 "tcc_bootstrap.c"
 _cstr_cat($cstr,4696,-1); //@line 3922 "tcc_bootstrap.c"
 label=4;break; //@line 3923 "tcc_bootstrap.c"
 case 4: 
 var $58=$i; //@line 3919 "tcc_bootstrap.c"
 var $59=((($58)+(1))|0); //@line 3919 "tcc_bootstrap.c"
 $i=$59; //@line 3919 "tcc_bootstrap.c"
 label=2;break; //@line 3919 "tcc_bootstrap.c"
 case 5: 
 var $61=(($cstr)|0); //@line 3924 "tcc_bootstrap.c"
 var $62=HEAP32[(($61)>>2)]; //@line 3924 "tcc_bootstrap.c"
 var $63=($62|0)!=0; //@line 3924 "tcc_bootstrap.c"
 if($63){label=6;break;}else{label=7;break;} //@line 3924 "tcc_bootstrap.c"
 case 6: 
 var $65=HEAP32[((76648)>>2)]; //@line 3925 "tcc_bootstrap.c"
 var $66=$1; //@line 3925 "tcc_bootstrap.c"
 var $67=(($66+236)|0); //@line 3925 "tcc_bootstrap.c"
 var $68=HEAP32[(($67)>>2)]; //@line 3925 "tcc_bootstrap.c"
 var $69=(($68+4)|0); //@line 3925 "tcc_bootstrap.c"
 HEAP32[(($67)>>2)]=$69; //@line 3925 "tcc_bootstrap.c"
 HEAP32[(($68)>>2)]=$65; //@line 3925 "tcc_bootstrap.c"
 var $70=$1; //@line 3926 "tcc_bootstrap.c"
 var $71=(($cstr)|0); //@line 3926 "tcc_bootstrap.c"
 var $72=HEAP32[(($71)>>2)]; //@line 3926 "tcc_bootstrap.c"
 _tcc_open_bf($70,4680,$72); //@line 3926 "tcc_bootstrap.c"
 var $73=HEAP32[((76648)>>2)]; //@line 3927 "tcc_bootstrap.c"
 var $74=(($73+1072)|0); //@line 3927 "tcc_bootstrap.c"
 var $75=$74; //@line 3927 "tcc_bootstrap.c"
 var $76=(($cstr+4)|0); //@line 3927 "tcc_bootstrap.c"
 var $77=HEAP32[(($76)>>2)]; //@line 3927 "tcc_bootstrap.c"
 var $78=(($cstr)|0); //@line 3927 "tcc_bootstrap.c"
 var $79=HEAP32[(($78)>>2)]; //@line 3927 "tcc_bootstrap.c"
 assert($79 % 1 === 0);(_memcpy($75, $77, $79)|0); //@line 3927 "tcc_bootstrap.c"
 label=7;break; //@line 3928 "tcc_bootstrap.c"
 case 7: 
 _cstr_free($cstr); //@line 3929 "tcc_bootstrap.c"
 var $81=$2; //@line 3930 "tcc_bootstrap.c"
 var $82=($81|0)!=0; //@line 3930 "tcc_bootstrap.c"
 if($82){label=8;break;}else{label=9;break;} //@line 3930 "tcc_bootstrap.c"
 case 8: 
 var $84=$1; //@line 3931 "tcc_bootstrap.c"
 _tcc_define_symbol($84,4664,0); //@line 3931 "tcc_bootstrap.c"
 label=9;break; //@line 3931 "tcc_bootstrap.c"
 case 9: 
 var $86=$2; //@line 3932 "tcc_bootstrap.c"
 var $87=($86|0)!=0; //@line 3932 "tcc_bootstrap.c"
 var $88=($87?8:0); //@line 3932 "tcc_bootstrap.c"
 HEAP32[((10608)>>2)]=$88; //@line 3932 "tcc_bootstrap.c"
 HEAP32[((10464)>>2)]=3; //@line 3933 "tcc_bootstrap.c"
 STACKTOP=sp;return; //@line 3934 "tcc_bootstrap.c"
  default: assert(0, "bad label: " + label);
 }

}


function _tccgen_compile($s1){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 $1=$s1;
 HEAP32[((76672)>>2)]=0; //@line 4135 "tcc_bootstrap.c"
 HEAP32[((76584)>>2)]=76760; //@line 4136 "tcc_bootstrap.c"
 HEAP32[((76752)>>2)]=268435456; //@line 4137 "tcc_bootstrap.c"
 HEAP32[((10536)>>2)]=0; //@line 4138 "tcc_bootstrap.c"
 HEAP32[((76712)>>2)]=0; //@line 4139 "tcc_bootstrap.c"
 HEAP32[((10616)>>2)]=-2147483648; //@line 4140 "tcc_bootstrap.c"
 HEAP32[((11000)>>2)]=3; //@line 4141 "tcc_bootstrap.c"
 HEAP32[((76728)>>2)]=1; //@line 4142 "tcc_bootstrap.c"
 _mk_pointer(76728); //@line 4143 "tcc_bootstrap.c"
 HEAP32[((10528)>>2)]=19; //@line 4144 "tcc_bootstrap.c"
 HEAP32[((10560)>>2)]=3; //@line 4145 "tcc_bootstrap.c"
 HEAP32[((76632)>>2)]=6; //@line 4146 "tcc_bootstrap.c"
 var $2=_sym_push(536870912,11000,0,0); //@line 4147 "tcc_bootstrap.c"
 HEAP32[((76636)>>2)]=$2; //@line 4147 "tcc_bootstrap.c"
 var $3=HEAP32[((76636)>>2)]; //@line 4148 "tcc_bootstrap.c"
 var $4=(($3+8)|0); //@line 4148 "tcc_bootstrap.c"
 var $5=$4; //@line 4148 "tcc_bootstrap.c"
 var $6=(($5+4)|0); //@line 4148 "tcc_bootstrap.c"
 var $7=$6; //@line 4148 "tcc_bootstrap.c"
 var $8=$7; //@line 4148 "tcc_bootstrap.c"
 var $9=HEAP16[(($8)>>1)]; //@line 4148 "tcc_bootstrap.c"
 var $10=$9&-8; //@line 4148 "tcc_bootstrap.c"
 HEAP16[(($8)>>1)]=$10; //@line 4148 "tcc_bootstrap.c"
 var $11=HEAP32[((76636)>>2)]; //@line 4149 "tcc_bootstrap.c"
 var $12=(($11+8)|0); //@line 4149 "tcc_bootstrap.c"
 var $13=$12; //@line 4149 "tcc_bootstrap.c"
 var $14=(($13+4)|0); //@line 4149 "tcc_bootstrap.c"
 var $15=$14; //@line 4149 "tcc_bootstrap.c"
 var $16=$15; //@line 4149 "tcc_bootstrap.c"
 var $17=HEAP16[(($16)>>1)]; //@line 4149 "tcc_bootstrap.c"
 var $18=$17&-25; //@line 4149 "tcc_bootstrap.c"
 var $19=$18|16; //@line 4149 "tcc_bootstrap.c"
 HEAP16[(($16)>>1)]=$19; //@line 4149 "tcc_bootstrap.c"
 HEAP32[((10608)>>2)]=67; //@line 4150 "tcc_bootstrap.c"
 _next(); //@line 4151 "tcc_bootstrap.c"
 _decl(48); //@line 4152 "tcc_bootstrap.c"
 var $20=$1; //@line 4153 "tcc_bootstrap.c"
 _gen_inline_functions($20); //@line 4153 "tcc_bootstrap.c"
 _check_vstack(); //@line 4154 "tcc_bootstrap.c"
 STACKTOP=sp;return 0; //@line 4155 "tcc_bootstrap.c"
}


function _preprocess_end($s1){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 $1=$s1;
 label=2;break; //@line 3938 "tcc_bootstrap.c"
 case 2: 
 var $3=HEAP32[((10672)>>2)]; //@line 3938 "tcc_bootstrap.c"
 var $4=($3|0)!=0; //@line 3938 "tcc_bootstrap.c"
 if($4){label=3;break;}else{label=4;break;} //@line 3938 "tcc_bootstrap.c"
 case 3: 
 _end_macro(); //@line 3939 "tcc_bootstrap.c"
 label=2;break; //@line 3939 "tcc_bootstrap.c"
 case 4: 
 HEAP32[((10680)>>2)]=0; //@line 3940 "tcc_bootstrap.c"
 STACKTOP=sp;return; //@line 3941 "tcc_bootstrap.c"
  default: assert(0, "bad label: " + label);
 }

}


function _free_inline_functions($s){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $i;
 var $fn;
 $1=$s;
 $i=0; //@line 9040 "tcc_bootstrap.c"
 label=2;break; //@line 9040 "tcc_bootstrap.c"
 case 2: 
 var $3=$i; //@line 9040 "tcc_bootstrap.c"
 var $4=$1; //@line 9040 "tcc_bootstrap.c"
 var $5=(($4+676)|0); //@line 9040 "tcc_bootstrap.c"
 var $6=HEAP32[(($5)>>2)]; //@line 9040 "tcc_bootstrap.c"
 var $7=($3|0)<($6|0); //@line 9040 "tcc_bootstrap.c"
 if($7){label=3;break;}else{label=7;break;} //@line 9040 "tcc_bootstrap.c"
 case 3: 
 var $9=$i; //@line 9041 "tcc_bootstrap.c"
 var $10=$1; //@line 9041 "tcc_bootstrap.c"
 var $11=(($10+672)|0); //@line 9041 "tcc_bootstrap.c"
 var $12=HEAP32[(($11)>>2)]; //@line 9041 "tcc_bootstrap.c"
 var $13=(($12+($9<<2))|0); //@line 9041 "tcc_bootstrap.c"
 var $14=HEAP32[(($13)>>2)]; //@line 9041 "tcc_bootstrap.c"
 $fn=$14; //@line 9041 "tcc_bootstrap.c"
 var $15=$fn; //@line 9042 "tcc_bootstrap.c"
 var $16=(($15+4)|0); //@line 9042 "tcc_bootstrap.c"
 var $17=HEAP32[(($16)>>2)]; //@line 9042 "tcc_bootstrap.c"
 var $18=($17|0)!=0; //@line 9042 "tcc_bootstrap.c"
 if($18){label=4;break;}else{label=5;break;} //@line 9042 "tcc_bootstrap.c"
 case 4: 
 var $20=$fn; //@line 9043 "tcc_bootstrap.c"
 var $21=(($20)|0); //@line 9043 "tcc_bootstrap.c"
 var $22=HEAP32[(($21)>>2)]; //@line 9043 "tcc_bootstrap.c"
 _tok_str_free($22); //@line 9043 "tcc_bootstrap.c"
 label=5;break; //@line 9043 "tcc_bootstrap.c"
 case 5: 
 label=6;break; //@line 9044 "tcc_bootstrap.c"
 case 6: 
 var $25=$i; //@line 9040 "tcc_bootstrap.c"
 var $26=((($25)+(1))|0); //@line 9040 "tcc_bootstrap.c"
 $i=$26; //@line 9040 "tcc_bootstrap.c"
 label=2;break; //@line 9040 "tcc_bootstrap.c"
 case 7: 
 var $28=$1; //@line 9045 "tcc_bootstrap.c"
 var $29=(($28+672)|0); //@line 9045 "tcc_bootstrap.c"
 var $30=$29; //@line 9045 "tcc_bootstrap.c"
 var $31=$1; //@line 9045 "tcc_bootstrap.c"
 var $32=(($31+676)|0); //@line 9045 "tcc_bootstrap.c"
 _dynarray_reset($30,$32); //@line 9045 "tcc_bootstrap.c"
 STACKTOP=sp;return; //@line 9046 "tcc_bootstrap.c"
  default: assert(0, "bad label: " + label);
 }

}


function _tccelf_end_file($s1){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $s;
 var $first_sym;
 var $nb_syms;
 var $tr;
 var $i;
 var $sym;
 var $sr;
 var $rel;
 var $rel_end;
 var $n;
 $1=$s1;
 var $2=$1; //@line 9270 "tcc_bootstrap.c"
 var $3=(($2+700)|0); //@line 9270 "tcc_bootstrap.c"
 var $4=HEAP32[(($3)>>2)]; //@line 9270 "tcc_bootstrap.c"
 $s=$4; //@line 9270 "tcc_bootstrap.c"
 var $5=$s; //@line 9272 "tcc_bootstrap.c"
 var $6=(($5+48)|0); //@line 9272 "tcc_bootstrap.c"
 var $7=HEAP32[(($6)>>2)]; //@line 9272 "tcc_bootstrap.c"
 var $8=(((($7>>>0))/(16))&-1); //@line 9272 "tcc_bootstrap.c"
 $first_sym=$8; //@line 9272 "tcc_bootstrap.c"
 var $9=$s; //@line 9273 "tcc_bootstrap.c"
 var $10=(($9)|0); //@line 9273 "tcc_bootstrap.c"
 var $11=HEAP32[(($10)>>2)]; //@line 9273 "tcc_bootstrap.c"
 var $12=(((($11>>>0))/(16))&-1); //@line 9273 "tcc_bootstrap.c"
 var $13=$first_sym; //@line 9273 "tcc_bootstrap.c"
 var $14=((($12)-($13))|0); //@line 9273 "tcc_bootstrap.c"
 $nb_syms=$14; //@line 9273 "tcc_bootstrap.c"
 var $15=$s; //@line 9274 "tcc_bootstrap.c"
 var $16=(($15+48)|0); //@line 9274 "tcc_bootstrap.c"
 var $17=HEAP32[(($16)>>2)]; //@line 9274 "tcc_bootstrap.c"
 var $18=$s; //@line 9274 "tcc_bootstrap.c"
 var $19=(($18)|0); //@line 9274 "tcc_bootstrap.c"
 HEAP32[(($19)>>2)]=$17; //@line 9274 "tcc_bootstrap.c"
 var $20=$s; //@line 9275 "tcc_bootstrap.c"
 var $21=(($20+56)|0); //@line 9275 "tcc_bootstrap.c"
 var $22=HEAP32[(($21)>>2)]; //@line 9275 "tcc_bootstrap.c"
 var $23=(($22+48)|0); //@line 9275 "tcc_bootstrap.c"
 var $24=HEAP32[(($23)>>2)]; //@line 9275 "tcc_bootstrap.c"
 var $25=$s; //@line 9275 "tcc_bootstrap.c"
 var $26=(($25+56)|0); //@line 9275 "tcc_bootstrap.c"
 var $27=HEAP32[(($26)>>2)]; //@line 9275 "tcc_bootstrap.c"
 var $28=(($27)|0); //@line 9275 "tcc_bootstrap.c"
 HEAP32[(($28)>>2)]=$24; //@line 9275 "tcc_bootstrap.c"
 var $29=$s; //@line 9276 "tcc_bootstrap.c"
 var $30=(($29+60)|0); //@line 9276 "tcc_bootstrap.c"
 var $31=HEAP32[(($30)>>2)]; //@line 9276 "tcc_bootstrap.c"
 var $32=$s; //@line 9276 "tcc_bootstrap.c"
 var $33=(($32+64)|0); //@line 9276 "tcc_bootstrap.c"
 HEAP32[(($33)>>2)]=$31; //@line 9276 "tcc_bootstrap.c"
 var $34=$s; //@line 9276 "tcc_bootstrap.c"
 var $35=(($34+60)|0); //@line 9276 "tcc_bootstrap.c"
 HEAP32[(($35)>>2)]=0; //@line 9276 "tcc_bootstrap.c"
 var $36=$nb_syms; //@line 9277 "tcc_bootstrap.c"
 var $37=($36<<2); //@line 9277 "tcc_bootstrap.c"
 var $38=_tcc_mallocz($37); //@line 9277 "tcc_bootstrap.c"
 var $39=$38; //@line 9277 "tcc_bootstrap.c"
 $tr=$39; //@line 9277 "tcc_bootstrap.c"
 $i=0; //@line 9278 "tcc_bootstrap.c"
 label=2;break; //@line 9278 "tcc_bootstrap.c"
 case 2: 
 var $41=$i; //@line 9278 "tcc_bootstrap.c"
 var $42=$nb_syms; //@line 9278 "tcc_bootstrap.c"
 var $43=($41|0)<($42|0); //@line 9278 "tcc_bootstrap.c"
 if($43){label=3;break;}else{label=8;break;} //@line 9278 "tcc_bootstrap.c"
 case 3: 
 var $45=$s; //@line 9279 "tcc_bootstrap.c"
 var $46=(($45+4)|0); //@line 9279 "tcc_bootstrap.c"
 var $47=HEAP32[(($46)>>2)]; //@line 9279 "tcc_bootstrap.c"
 var $48=$47; //@line 9279 "tcc_bootstrap.c"
 var $49=$first_sym; //@line 9279 "tcc_bootstrap.c"
 var $50=(($48+($49<<4))|0); //@line 9279 "tcc_bootstrap.c"
 var $51=$i; //@line 9279 "tcc_bootstrap.c"
 var $52=(($50+($51<<4))|0); //@line 9279 "tcc_bootstrap.c"
 $sym=$52; //@line 9279 "tcc_bootstrap.c"
 var $53=$sym; //@line 9280 "tcc_bootstrap.c"
 var $54=(($53+14)|0); //@line 9280 "tcc_bootstrap.c"
 var $55=HEAP16[(($54)>>1)]; //@line 9280 "tcc_bootstrap.c"
 var $56=($55&65535); //@line 9280 "tcc_bootstrap.c"
 var $57=($56|0)==0; //@line 9280 "tcc_bootstrap.c"
 if($57){label=4;break;}else{label=6;break;} //@line 9280 "tcc_bootstrap.c"
 case 4: 
 var $59=$sym; //@line 9280 "tcc_bootstrap.c"
 var $60=(($59+12)|0); //@line 9280 "tcc_bootstrap.c"
 var $61=HEAP8[(($60)>>0)]; //@line 9280 "tcc_bootstrap.c"
 var $62=($61&255); //@line 9280 "tcc_bootstrap.c"
 var $63=$62>>4; //@line 9280 "tcc_bootstrap.c"
 var $64=($63|0)==0; //@line 9280 "tcc_bootstrap.c"
 if($64){label=5;break;}else{label=6;break;} //@line 9280 "tcc_bootstrap.c"
 case 5: 
 var $66=$sym; //@line 9282 "tcc_bootstrap.c"
 var $67=(($66+12)|0); //@line 9282 "tcc_bootstrap.c"
 var $68=HEAP8[(($67)>>0)]; //@line 9282 "tcc_bootstrap.c"
 var $69=($68&255); //@line 9282 "tcc_bootstrap.c"
 var $70=$69&15; //@line 9282 "tcc_bootstrap.c"
 var $71=$70&15; //@line 9282 "tcc_bootstrap.c"
 var $72=((($71)+(16))|0); //@line 9282 "tcc_bootstrap.c"
 var $73=(($72)&255); //@line 9282 "tcc_bootstrap.c"
 var $74=$sym; //@line 9282 "tcc_bootstrap.c"
 var $75=(($74+12)|0); //@line 9282 "tcc_bootstrap.c"
 HEAP8[(($75)>>0)]=$73; //@line 9282 "tcc_bootstrap.c"
 label=6;break; //@line 9282 "tcc_bootstrap.c"
 case 6: 
 var $77=$s; //@line 9283 "tcc_bootstrap.c"
 var $78=$sym; //@line 9283 "tcc_bootstrap.c"
 var $79=(($78+4)|0); //@line 9283 "tcc_bootstrap.c"
 var $80=HEAP32[(($79)>>2)]; //@line 9283 "tcc_bootstrap.c"
 var $81=$sym; //@line 9283 "tcc_bootstrap.c"
 var $82=(($81+8)|0); //@line 9283 "tcc_bootstrap.c"
 var $83=HEAP32[(($82)>>2)]; //@line 9283 "tcc_bootstrap.c"
 var $84=$sym; //@line 9283 "tcc_bootstrap.c"
 var $85=(($84+12)|0); //@line 9283 "tcc_bootstrap.c"
 var $86=HEAP8[(($85)>>0)]; //@line 9283 "tcc_bootstrap.c"
 var $87=($86&255); //@line 9283 "tcc_bootstrap.c"
 var $88=$sym; //@line 9283 "tcc_bootstrap.c"
 var $89=(($88+13)|0); //@line 9283 "tcc_bootstrap.c"
 var $90=HEAP8[(($89)>>0)]; //@line 9283 "tcc_bootstrap.c"
 var $91=($90&255); //@line 9283 "tcc_bootstrap.c"
 var $92=$sym; //@line 9283 "tcc_bootstrap.c"
 var $93=(($92+14)|0); //@line 9283 "tcc_bootstrap.c"
 var $94=HEAP16[(($93)>>1)]; //@line 9283 "tcc_bootstrap.c"
 var $95=($94&65535); //@line 9283 "tcc_bootstrap.c"
 var $96=$s; //@line 9283 "tcc_bootstrap.c"
 var $97=(($96+56)|0); //@line 9283 "tcc_bootstrap.c"
 var $98=HEAP32[(($97)>>2)]; //@line 9283 "tcc_bootstrap.c"
 var $99=(($98+4)|0); //@line 9283 "tcc_bootstrap.c"
 var $100=HEAP32[(($99)>>2)]; //@line 9283 "tcc_bootstrap.c"
 var $101=$sym; //@line 9283 "tcc_bootstrap.c"
 var $102=(($101)|0); //@line 9283 "tcc_bootstrap.c"
 var $103=HEAP32[(($102)>>2)]; //@line 9283 "tcc_bootstrap.c"
 var $104=(($100+$103)|0); //@line 9283 "tcc_bootstrap.c"
 var $105=_set_elf_sym($77,$80,$83,$87,$91,$95,$104); //@line 9283 "tcc_bootstrap.c"
 var $106=$i; //@line 9283 "tcc_bootstrap.c"
 var $107=$tr; //@line 9283 "tcc_bootstrap.c"
 var $108=(($107+($106<<2))|0); //@line 9283 "tcc_bootstrap.c"
 HEAP32[(($108)>>2)]=$105; //@line 9283 "tcc_bootstrap.c"
 label=7;break; //@line 9285 "tcc_bootstrap.c"
 case 7: 
 var $110=$i; //@line 9278 "tcc_bootstrap.c"
 var $111=((($110)+(1))|0); //@line 9278 "tcc_bootstrap.c"
 $i=$111; //@line 9278 "tcc_bootstrap.c"
 label=2;break; //@line 9278 "tcc_bootstrap.c"
 case 8: 
 $i=1; //@line 9286 "tcc_bootstrap.c"
 label=9;break; //@line 9286 "tcc_bootstrap.c"
 case 9: 
 var $114=$i; //@line 9286 "tcc_bootstrap.c"
 var $115=$1; //@line 9286 "tcc_bootstrap.c"
 var $116=(($115+684)|0); //@line 9286 "tcc_bootstrap.c"
 var $117=HEAP32[(($116)>>2)]; //@line 9286 "tcc_bootstrap.c"
 var $118=($114|0)<($117|0); //@line 9286 "tcc_bootstrap.c"
 if($118){label=10;break;}else{label=19;break;} //@line 9286 "tcc_bootstrap.c"
 case 10: 
 var $120=$i; //@line 9287 "tcc_bootstrap.c"
 var $121=$1; //@line 9287 "tcc_bootstrap.c"
 var $122=(($121+680)|0); //@line 9287 "tcc_bootstrap.c"
 var $123=HEAP32[(($122)>>2)]; //@line 9287 "tcc_bootstrap.c"
 var $124=(($123+($120<<2))|0); //@line 9287 "tcc_bootstrap.c"
 var $125=HEAP32[(($124)>>2)]; //@line 9287 "tcc_bootstrap.c"
 $sr=$125; //@line 9287 "tcc_bootstrap.c"
 var $126=$sr; //@line 9288 "tcc_bootstrap.c"
 var $127=(($126+20)|0); //@line 9288 "tcc_bootstrap.c"
 var $128=HEAP32[(($127)>>2)]; //@line 9288 "tcc_bootstrap.c"
 var $129=($128|0)==9; //@line 9288 "tcc_bootstrap.c"
 if($129){label=11;break;}else{label=17;break;} //@line 9288 "tcc_bootstrap.c"
 case 11: 
 var $131=$sr; //@line 9288 "tcc_bootstrap.c"
 var $132=(($131+56)|0); //@line 9288 "tcc_bootstrap.c"
 var $133=HEAP32[(($132)>>2)]; //@line 9288 "tcc_bootstrap.c"
 var $134=$s; //@line 9288 "tcc_bootstrap.c"
 var $135=($133|0)==($134|0); //@line 9288 "tcc_bootstrap.c"
 if($135){label=12;break;}else{label=17;break;} //@line 9288 "tcc_bootstrap.c"
 case 12: 
 var $137=$sr; //@line 9289 "tcc_bootstrap.c"
 var $138=(($137+4)|0); //@line 9289 "tcc_bootstrap.c"
 var $139=HEAP32[(($138)>>2)]; //@line 9289 "tcc_bootstrap.c"
 var $140=$sr; //@line 9289 "tcc_bootstrap.c"
 var $141=(($140+48)|0); //@line 9289 "tcc_bootstrap.c"
 var $142=HEAP32[(($141)>>2)]; //@line 9289 "tcc_bootstrap.c"
 var $143=(($139+$142)|0); //@line 9289 "tcc_bootstrap.c"
 var $144=$143; //@line 9289 "tcc_bootstrap.c"
 $rel=$144; //@line 9289 "tcc_bootstrap.c"
 var $145=$sr; //@line 9290 "tcc_bootstrap.c"
 var $146=(($145+4)|0); //@line 9290 "tcc_bootstrap.c"
 var $147=HEAP32[(($146)>>2)]; //@line 9290 "tcc_bootstrap.c"
 var $148=$sr; //@line 9290 "tcc_bootstrap.c"
 var $149=(($148)|0); //@line 9290 "tcc_bootstrap.c"
 var $150=HEAP32[(($149)>>2)]; //@line 9290 "tcc_bootstrap.c"
 var $151=(($147+$150)|0); //@line 9290 "tcc_bootstrap.c"
 var $152=$151; //@line 9290 "tcc_bootstrap.c"
 $rel_end=$152; //@line 9290 "tcc_bootstrap.c"
 label=13;break; //@line 9291 "tcc_bootstrap.c"
 case 13: 
 var $154=$rel; //@line 9291 "tcc_bootstrap.c"
 var $155=$rel_end; //@line 9291 "tcc_bootstrap.c"
 var $156=($154>>>0)<($155>>>0); //@line 9291 "tcc_bootstrap.c"
 if($156){label=14;break;}else{label=16;break;} //@line 9291 "tcc_bootstrap.c"
 case 14: 
 var $158=$rel; //@line 9292 "tcc_bootstrap.c"
 var $159=(($158+4)|0); //@line 9292 "tcc_bootstrap.c"
 var $160=HEAP32[(($159)>>2)]; //@line 9292 "tcc_bootstrap.c"
 var $161=$160>>>8; //@line 9292 "tcc_bootstrap.c"
 var $162=$first_sym; //@line 9292 "tcc_bootstrap.c"
 var $163=((($161)-($162))|0); //@line 9292 "tcc_bootstrap.c"
 $n=$163; //@line 9292 "tcc_bootstrap.c"
 var $164=$n; //@line 9293 "tcc_bootstrap.c"
 var $165=$tr; //@line 9293 "tcc_bootstrap.c"
 var $166=(($165+($164<<2))|0); //@line 9293 "tcc_bootstrap.c"
 var $167=HEAP32[(($166)>>2)]; //@line 9293 "tcc_bootstrap.c"
 var $168=$167<<8; //@line 9293 "tcc_bootstrap.c"
 var $169=$rel; //@line 9293 "tcc_bootstrap.c"
 var $170=(($169+4)|0); //@line 9293 "tcc_bootstrap.c"
 var $171=HEAP32[(($170)>>2)]; //@line 9293 "tcc_bootstrap.c"
 var $172=$171&255; //@line 9293 "tcc_bootstrap.c"
 var $173=$172&255; //@line 9293 "tcc_bootstrap.c"
 var $174=((($168)+($173))|0); //@line 9293 "tcc_bootstrap.c"
 var $175=$rel; //@line 9293 "tcc_bootstrap.c"
 var $176=(($175+4)|0); //@line 9293 "tcc_bootstrap.c"
 HEAP32[(($176)>>2)]=$174; //@line 9293 "tcc_bootstrap.c"
 label=15;break; //@line 9294 "tcc_bootstrap.c"
 case 15: 
 var $178=$rel; //@line 9291 "tcc_bootstrap.c"
 var $179=(($178+8)|0); //@line 9291 "tcc_bootstrap.c"
 $rel=$179; //@line 9291 "tcc_bootstrap.c"
 label=13;break; //@line 9291 "tcc_bootstrap.c"
 case 16: 
 label=17;break; //@line 9295 "tcc_bootstrap.c"
 case 17: 
 label=18;break; //@line 9296 "tcc_bootstrap.c"
 case 18: 
 var $183=$i; //@line 9286 "tcc_bootstrap.c"
 var $184=((($183)+(1))|0); //@line 9286 "tcc_bootstrap.c"
 $i=$184; //@line 9286 "tcc_bootstrap.c"
 label=9;break; //@line 9286 "tcc_bootstrap.c"
 case 19: 
 var $186=$tr; //@line 9297 "tcc_bootstrap.c"
 var $187=$186; //@line 9297 "tcc_bootstrap.c"
 _tcc_free($187); //@line 9297 "tcc_bootstrap.c"
 STACKTOP=sp;return; //@line 9298 "tcc_bootstrap.c"
  default: assert(0, "bad label: " + label);
 }

}


function _set_elf_sym($s,$value,$size,$info,$other,$shndx,$name){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 var $7;
 var $8;
 var $esym;
 var $sym_bind;
 var $sym_index;
 var $sym_type;
 var $esym_bind;
 var $sym_vis;
 var $esym_vis;
 var $new_vis;
 $2=$s;
 $3=$value;
 $4=$size;
 $5=$info;
 $6=$other;
 $7=$shndx;
 $8=$name;
 var $9=$5; //@line 9512 "tcc_bootstrap.c"
 var $10=(($9)&255); //@line 9512 "tcc_bootstrap.c"
 var $11=($10&255); //@line 9512 "tcc_bootstrap.c"
 var $12=$11>>4; //@line 9512 "tcc_bootstrap.c"
 $sym_bind=$12; //@line 9512 "tcc_bootstrap.c"
 var $13=$5; //@line 9513 "tcc_bootstrap.c"
 var $14=$13&15; //@line 9513 "tcc_bootstrap.c"
 $sym_type=$14; //@line 9513 "tcc_bootstrap.c"
 var $15=$6; //@line 9514 "tcc_bootstrap.c"
 var $16=$15&3; //@line 9514 "tcc_bootstrap.c"
 var $17=(($16)&255); //@line 9514 "tcc_bootstrap.c"
 $sym_vis=$17; //@line 9514 "tcc_bootstrap.c"
 var $18=$sym_bind; //@line 9515 "tcc_bootstrap.c"
 var $19=($18|0)!=0; //@line 9515 "tcc_bootstrap.c"
 if($19){label=2;break;}else{label=59;break;} //@line 9515 "tcc_bootstrap.c"
 case 2: 
 var $21=$2; //@line 9516 "tcc_bootstrap.c"
 var $22=$8; //@line 9516 "tcc_bootstrap.c"
 var $23=_find_elf_sym($21,$22); //@line 9516 "tcc_bootstrap.c"
 $sym_index=$23; //@line 9516 "tcc_bootstrap.c"
 var $24=$sym_index; //@line 9517 "tcc_bootstrap.c"
 var $25=($24|0)!=0; //@line 9517 "tcc_bootstrap.c"
 if($25){label=4;break;}else{label=3;break;} //@line 9517 "tcc_bootstrap.c"
 case 3: 
 label=60;break; //@line 9518 "tcc_bootstrap.c"
 case 4: 
 var $28=$sym_index; //@line 9519 "tcc_bootstrap.c"
 var $29=$2; //@line 9519 "tcc_bootstrap.c"
 var $30=(($29+4)|0); //@line 9519 "tcc_bootstrap.c"
 var $31=HEAP32[(($30)>>2)]; //@line 9519 "tcc_bootstrap.c"
 var $32=$31; //@line 9519 "tcc_bootstrap.c"
 var $33=(($32+($28<<4))|0); //@line 9519 "tcc_bootstrap.c"
 $esym=$33; //@line 9519 "tcc_bootstrap.c"
 var $34=$esym; //@line 9520 "tcc_bootstrap.c"
 var $35=(($34+4)|0); //@line 9520 "tcc_bootstrap.c"
 var $36=HEAP32[(($35)>>2)]; //@line 9520 "tcc_bootstrap.c"
 var $37=$3; //@line 9520 "tcc_bootstrap.c"
 var $38=($36|0)==($37|0); //@line 9520 "tcc_bootstrap.c"
 if($38){label=5;break;}else{label=10;break;} //@line 9520 "tcc_bootstrap.c"
 case 5: 
 var $40=$esym; //@line 9520 "tcc_bootstrap.c"
 var $41=(($40+8)|0); //@line 9520 "tcc_bootstrap.c"
 var $42=HEAP32[(($41)>>2)]; //@line 9520 "tcc_bootstrap.c"
 var $43=$4; //@line 9520 "tcc_bootstrap.c"
 var $44=($42|0)==($43|0); //@line 9520 "tcc_bootstrap.c"
 if($44){label=6;break;}else{label=10;break;} //@line 9520 "tcc_bootstrap.c"
 case 6: 
 var $46=$esym; //@line 9520 "tcc_bootstrap.c"
 var $47=(($46+12)|0); //@line 9520 "tcc_bootstrap.c"
 var $48=HEAP8[(($47)>>0)]; //@line 9520 "tcc_bootstrap.c"
 var $49=($48&255); //@line 9520 "tcc_bootstrap.c"
 var $50=$5; //@line 9520 "tcc_bootstrap.c"
 var $51=($49|0)==($50|0); //@line 9520 "tcc_bootstrap.c"
 if($51){label=7;break;}else{label=10;break;} //@line 9520 "tcc_bootstrap.c"
 case 7: 
 var $53=$esym; //@line 9520 "tcc_bootstrap.c"
 var $54=(($53+13)|0); //@line 9520 "tcc_bootstrap.c"
 var $55=HEAP8[(($54)>>0)]; //@line 9520 "tcc_bootstrap.c"
 var $56=($55&255); //@line 9520 "tcc_bootstrap.c"
 var $57=$6; //@line 9520 "tcc_bootstrap.c"
 var $58=($56|0)==($57|0); //@line 9520 "tcc_bootstrap.c"
 if($58){label=8;break;}else{label=10;break;} //@line 9520 "tcc_bootstrap.c"
 case 8: 
 var $60=$esym; //@line 9520 "tcc_bootstrap.c"
 var $61=(($60+14)|0); //@line 9520 "tcc_bootstrap.c"
 var $62=HEAP16[(($61)>>1)]; //@line 9520 "tcc_bootstrap.c"
 var $63=($62&65535); //@line 9520 "tcc_bootstrap.c"
 var $64=$7; //@line 9520 "tcc_bootstrap.c"
 var $65=($63|0)==($64|0); //@line 9520 "tcc_bootstrap.c"
 if($65){label=9;break;}else{label=10;break;} //@line 9520 "tcc_bootstrap.c"
 case 9: 
 var $67=$sym_index; //@line 9522 "tcc_bootstrap.c"
 $1=$67; //@line 9522 "tcc_bootstrap.c"
 label=62;break; //@line 9522 "tcc_bootstrap.c"
 case 10: 
 var $69=$esym; //@line 9523 "tcc_bootstrap.c"
 var $70=(($69+14)|0); //@line 9523 "tcc_bootstrap.c"
 var $71=HEAP16[(($70)>>1)]; //@line 9523 "tcc_bootstrap.c"
 var $72=($71&65535); //@line 9523 "tcc_bootstrap.c"
 var $73=($72|0)!=0; //@line 9523 "tcc_bootstrap.c"
 if($73){label=11;break;}else{label=56;break;} //@line 9523 "tcc_bootstrap.c"
 case 11: 
 var $75=$esym; //@line 9524 "tcc_bootstrap.c"
 var $76=(($75+12)|0); //@line 9524 "tcc_bootstrap.c"
 var $77=HEAP8[(($76)>>0)]; //@line 9524 "tcc_bootstrap.c"
 var $78=($77&255); //@line 9524 "tcc_bootstrap.c"
 var $79=$78>>4; //@line 9524 "tcc_bootstrap.c"
 $esym_bind=$79; //@line 9524 "tcc_bootstrap.c"
 var $80=$esym; //@line 9525 "tcc_bootstrap.c"
 var $81=(($80+13)|0); //@line 9525 "tcc_bootstrap.c"
 var $82=HEAP8[(($81)>>0)]; //@line 9525 "tcc_bootstrap.c"
 var $83=($82&255); //@line 9525 "tcc_bootstrap.c"
 var $84=$83&3; //@line 9525 "tcc_bootstrap.c"
 var $85=(($84)&255); //@line 9525 "tcc_bootstrap.c"
 $esym_vis=$85; //@line 9525 "tcc_bootstrap.c"
 var $86=$esym_vis; //@line 9526 "tcc_bootstrap.c"
 var $87=($86&255); //@line 9526 "tcc_bootstrap.c"
 var $88=($87|0)==0; //@line 9526 "tcc_bootstrap.c"
 if($88){label=12;break;}else{label=13;break;} //@line 9526 "tcc_bootstrap.c"
 case 12: 
 var $90=$sym_vis; //@line 9527 "tcc_bootstrap.c"
 $new_vis=$90; //@line 9527 "tcc_bootstrap.c"
 label=20;break; //@line 9528 "tcc_bootstrap.c"
 case 13: 
 var $92=$sym_vis; //@line 9528 "tcc_bootstrap.c"
 var $93=($92&255); //@line 9528 "tcc_bootstrap.c"
 var $94=($93|0)==0; //@line 9528 "tcc_bootstrap.c"
 if($94){label=14;break;}else{label=15;break;} //@line 9528 "tcc_bootstrap.c"
 case 14: 
 var $96=$esym_vis; //@line 9529 "tcc_bootstrap.c"
 $new_vis=$96; //@line 9529 "tcc_bootstrap.c"
 label=19;break; //@line 9530 "tcc_bootstrap.c"
 case 15: 
 var $98=$esym_vis; //@line 9531 "tcc_bootstrap.c"
 var $99=($98&255); //@line 9531 "tcc_bootstrap.c"
 var $100=$sym_vis; //@line 9531 "tcc_bootstrap.c"
 var $101=($100&255); //@line 9531 "tcc_bootstrap.c"
 var $102=($99|0)<($101|0); //@line 9531 "tcc_bootstrap.c"
 if($102){label=16;break;}else{label=17;break;} //@line 9531 "tcc_bootstrap.c"
 case 16: 
 var $104=$esym_vis; //@line 9531 "tcc_bootstrap.c"
 var $105=($104&255); //@line 9531 "tcc_bootstrap.c"
 var $110=$105;label=18;break; //@line 9531 "tcc_bootstrap.c"
 case 17: 
 var $107=$sym_vis; //@line 9531 "tcc_bootstrap.c"
 var $108=($107&255); //@line 9531 "tcc_bootstrap.c"
 var $110=$108;label=18;break; //@line 9531 "tcc_bootstrap.c"
 case 18: 
 var $110; //@line 9531 "tcc_bootstrap.c"
 var $111=(($110)&255); //@line 9531 "tcc_bootstrap.c"
 $new_vis=$111; //@line 9531 "tcc_bootstrap.c"
 label=19;break;
 case 19: 
 label=20;break;
 case 20: 
 var $114=$esym; //@line 9533 "tcc_bootstrap.c"
 var $115=(($114+13)|0); //@line 9533 "tcc_bootstrap.c"
 var $116=HEAP8[(($115)>>0)]; //@line 9533 "tcc_bootstrap.c"
 var $117=($116&255); //@line 9533 "tcc_bootstrap.c"
 var $118=$117&-4; //@line 9533 "tcc_bootstrap.c"
 var $119=$new_vis; //@line 9533 "tcc_bootstrap.c"
 var $120=($119&255); //@line 9533 "tcc_bootstrap.c"
 var $121=$118|$120; //@line 9533 "tcc_bootstrap.c"
 var $122=(($121)&255); //@line 9533 "tcc_bootstrap.c"
 var $123=$esym; //@line 9533 "tcc_bootstrap.c"
 var $124=(($123+13)|0); //@line 9533 "tcc_bootstrap.c"
 HEAP8[(($124)>>0)]=$122; //@line 9533 "tcc_bootstrap.c"
 var $125=$esym; //@line 9535 "tcc_bootstrap.c"
 var $126=(($125+13)|0); //@line 9535 "tcc_bootstrap.c"
 var $127=HEAP8[(($126)>>0)]; //@line 9535 "tcc_bootstrap.c"
 var $128=($127&255); //@line 9535 "tcc_bootstrap.c"
 $6=$128; //@line 9535 "tcc_bootstrap.c"
 var $129=$7; //@line 9536 "tcc_bootstrap.c"
 var $130=($129|0)==0; //@line 9536 "tcc_bootstrap.c"
 if($130){label=21;break;}else{label=22;break;} //@line 9536 "tcc_bootstrap.c"
 case 21: 
 label=55;break; //@line 9537 "tcc_bootstrap.c"
 case 22: 
 var $133=$sym_bind; //@line 9537 "tcc_bootstrap.c"
 var $134=($133|0)==1; //@line 9537 "tcc_bootstrap.c"
 if($134){label=23;break;}else{label=25;break;} //@line 9537 "tcc_bootstrap.c"
 case 23: 
 var $136=$esym_bind; //@line 9537 "tcc_bootstrap.c"
 var $137=($136|0)==2; //@line 9537 "tcc_bootstrap.c"
 if($137){label=24;break;}else{label=25;break;} //@line 9537 "tcc_bootstrap.c"
 case 24: 
 label=57;break; //@line 9538 "tcc_bootstrap.c"
 case 25: 
 var $140=$sym_bind; //@line 9539 "tcc_bootstrap.c"
 var $141=($140|0)==2; //@line 9539 "tcc_bootstrap.c"
 if($141){label=26;break;}else{label=28;break;} //@line 9539 "tcc_bootstrap.c"
 case 26: 
 var $143=$esym_bind; //@line 9539 "tcc_bootstrap.c"
 var $144=($143|0)==1; //@line 9539 "tcc_bootstrap.c"
 if($144){label=27;break;}else{label=28;break;} //@line 9539 "tcc_bootstrap.c"
 case 27: 
 label=53;break; //@line 9540 "tcc_bootstrap.c"
 case 28: 
 var $147=$sym_bind; //@line 9540 "tcc_bootstrap.c"
 var $148=($147|0)==2; //@line 9540 "tcc_bootstrap.c"
 if($148){label=29;break;}else{label=31;break;} //@line 9540 "tcc_bootstrap.c"
 case 29: 
 var $150=$esym_bind; //@line 9540 "tcc_bootstrap.c"
 var $151=($150|0)==2; //@line 9540 "tcc_bootstrap.c"
 if($151){label=30;break;}else{label=31;break;} //@line 9540 "tcc_bootstrap.c"
 case 30: 
 label=52;break; //@line 9541 "tcc_bootstrap.c"
 case 31: 
 var $154=$sym_vis; //@line 9541 "tcc_bootstrap.c"
 var $155=($154&255); //@line 9541 "tcc_bootstrap.c"
 var $156=($155|0)==2; //@line 9541 "tcc_bootstrap.c"
 if($156){label=33;break;}else{label=32;break;} //@line 9541 "tcc_bootstrap.c"
 case 32: 
 var $158=$sym_vis; //@line 9541 "tcc_bootstrap.c"
 var $159=($158&255); //@line 9541 "tcc_bootstrap.c"
 var $160=($159|0)==1; //@line 9541 "tcc_bootstrap.c"
 if($160){label=33;break;}else{label=34;break;} //@line 9541 "tcc_bootstrap.c"
 case 33: 
 label=51;break; //@line 9542 "tcc_bootstrap.c"
 case 34: 
 var $163=$esym; //@line 9542 "tcc_bootstrap.c"
 var $164=(($163+14)|0); //@line 9542 "tcc_bootstrap.c"
 var $165=HEAP16[(($164)>>1)]; //@line 9542 "tcc_bootstrap.c"
 var $166=($165&65535); //@line 9542 "tcc_bootstrap.c"
 var $167=($166|0)==65522; //@line 9542 "tcc_bootstrap.c"
 if($167){label=36;break;}else{label=35;break;} //@line 9542 "tcc_bootstrap.c"
 case 35: 
 var $169=$esym; //@line 9542 "tcc_bootstrap.c"
 var $170=(($169+14)|0); //@line 9542 "tcc_bootstrap.c"
 var $171=HEAP16[(($170)>>1)]; //@line 9542 "tcc_bootstrap.c"
 var $172=($171&65535); //@line 9542 "tcc_bootstrap.c"
 var $173=HEAP32[((76744)>>2)]; //@line 9542 "tcc_bootstrap.c"
 var $174=(($173+16)|0); //@line 9542 "tcc_bootstrap.c"
 var $175=HEAP32[(($174)>>2)]; //@line 9542 "tcc_bootstrap.c"
 var $176=($172|0)==($175|0); //@line 9542 "tcc_bootstrap.c"
 if($176){label=36;break;}else{label=39;break;} //@line 9542 "tcc_bootstrap.c"
 case 36: 
 var $178=$7; //@line 9542 "tcc_bootstrap.c"
 var $179=($178|0)<65280; //@line 9542 "tcc_bootstrap.c"
 if($179){label=37;break;}else{label=39;break;} //@line 9542 "tcc_bootstrap.c"
 case 37: 
 var $181=$7; //@line 9542 "tcc_bootstrap.c"
 var $182=HEAP32[((76744)>>2)]; //@line 9542 "tcc_bootstrap.c"
 var $183=(($182+16)|0); //@line 9542 "tcc_bootstrap.c"
 var $184=HEAP32[(($183)>>2)]; //@line 9542 "tcc_bootstrap.c"
 var $185=($181|0)!=($184|0); //@line 9542 "tcc_bootstrap.c"
 if($185){label=38;break;}else{label=39;break;} //@line 9542 "tcc_bootstrap.c"
 case 38: 
 label=57;break; //@line 9546 "tcc_bootstrap.c"
 case 39: 
 var $188=$7; //@line 9547 "tcc_bootstrap.c"
 var $189=($188|0)==65522; //@line 9547 "tcc_bootstrap.c"
 if($189){label=41;break;}else{label=40;break;} //@line 9547 "tcc_bootstrap.c"
 case 40: 
 var $191=$7; //@line 9547 "tcc_bootstrap.c"
 var $192=HEAP32[((76744)>>2)]; //@line 9547 "tcc_bootstrap.c"
 var $193=(($192+16)|0); //@line 9547 "tcc_bootstrap.c"
 var $194=HEAP32[(($193)>>2)]; //@line 9547 "tcc_bootstrap.c"
 var $195=($191|0)==($194|0); //@line 9547 "tcc_bootstrap.c"
 if($195){label=41;break;}else{label=42;break;} //@line 9547 "tcc_bootstrap.c"
 case 41: 
 label=49;break; //@line 9548 "tcc_bootstrap.c"
 case 42: 
 var $198=$2; //@line 9548 "tcc_bootstrap.c"
 var $199=(($198+24)|0); //@line 9548 "tcc_bootstrap.c"
 var $200=HEAP32[(($199)>>2)]; //@line 9548 "tcc_bootstrap.c"
 var $201=$200&1073741824; //@line 9548 "tcc_bootstrap.c"
 var $202=($201|0)!=0; //@line 9548 "tcc_bootstrap.c"
 if($202){label=43;break;}else{label=44;break;} //@line 9548 "tcc_bootstrap.c"
 case 43: 
 label=48;break; //@line 9549 "tcc_bootstrap.c"
 case 44: 
 var $205=$esym; //@line 9549 "tcc_bootstrap.c"
 var $206=(($205+13)|0); //@line 9549 "tcc_bootstrap.c"
 var $207=HEAP8[(($206)>>0)]; //@line 9549 "tcc_bootstrap.c"
 var $208=($207&255); //@line 9549 "tcc_bootstrap.c"
 var $209=$208&4; //@line 9549 "tcc_bootstrap.c"
 var $210=($209|0)!=0; //@line 9549 "tcc_bootstrap.c"
 if($210){label=45;break;}else{label=46;break;} //@line 9549 "tcc_bootstrap.c"
 case 45: 
 label=57;break; //@line 9550 "tcc_bootstrap.c"
 case 46: 
 var $213=$8; //@line 9552 "tcc_bootstrap.c"
 _tcc_error_noabort(4744,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$213,tempVarArgs)); STACKTOP=tempVarArgs; //@line 9552 "tcc_bootstrap.c"
 label=47;break;
 case 47: 
 label=48;break;
 case 48: 
 label=49;break;
 case 49: 
 label=50;break;
 case 50: 
 label=51;break;
 case 51: 
 label=52;break;
 case 52: 
 label=53;break;
 case 53: 
 label=54;break;
 case 54: 
 label=55;break;
 case 55: 
 label=58;break; //@line 9554 "tcc_bootstrap.c"
 case 56: 
 label=57;break; //@line 9554 "tcc_bootstrap.c"
 case 57: 
 var $225=$sym_bind; //@line 9556 "tcc_bootstrap.c"
 var $226=$225<<4; //@line 9556 "tcc_bootstrap.c"
 var $227=$sym_type; //@line 9556 "tcc_bootstrap.c"
 var $228=$227&15; //@line 9556 "tcc_bootstrap.c"
 var $229=((($226)+($228))|0); //@line 9556 "tcc_bootstrap.c"
 var $230=(($229)&255); //@line 9556 "tcc_bootstrap.c"
 var $231=$esym; //@line 9556 "tcc_bootstrap.c"
 var $232=(($231+12)|0); //@line 9556 "tcc_bootstrap.c"
 HEAP8[(($232)>>0)]=$230; //@line 9556 "tcc_bootstrap.c"
 var $233=$7; //@line 9557 "tcc_bootstrap.c"
 var $234=(($233)&65535); //@line 9557 "tcc_bootstrap.c"
 var $235=$esym; //@line 9557 "tcc_bootstrap.c"
 var $236=(($235+14)|0); //@line 9557 "tcc_bootstrap.c"
 HEAP16[(($236)>>1)]=$234; //@line 9557 "tcc_bootstrap.c"
 HEAP32[((10624)>>2)]=1; //@line 9558 "tcc_bootstrap.c"
 var $237=$3; //@line 9559 "tcc_bootstrap.c"
 var $238=$esym; //@line 9559 "tcc_bootstrap.c"
 var $239=(($238+4)|0); //@line 9559 "tcc_bootstrap.c"
 HEAP32[(($239)>>2)]=$237; //@line 9559 "tcc_bootstrap.c"
 var $240=$4; //@line 9560 "tcc_bootstrap.c"
 var $241=$esym; //@line 9560 "tcc_bootstrap.c"
 var $242=(($241+8)|0); //@line 9560 "tcc_bootstrap.c"
 HEAP32[(($242)>>2)]=$240; //@line 9560 "tcc_bootstrap.c"
 var $243=$6; //@line 9561 "tcc_bootstrap.c"
 var $244=(($243)&255); //@line 9561 "tcc_bootstrap.c"
 var $245=$esym; //@line 9561 "tcc_bootstrap.c"
 var $246=(($245+13)|0); //@line 9561 "tcc_bootstrap.c"
 HEAP8[(($246)>>0)]=$244; //@line 9561 "tcc_bootstrap.c"
 label=58;break;
 case 58: 
 label=61;break; //@line 9563 "tcc_bootstrap.c"
 case 59: 
 label=60;break; //@line 9563 "tcc_bootstrap.c"
 case 60: 
 var $250=$2; //@line 9565 "tcc_bootstrap.c"
 var $251=$3; //@line 9565 "tcc_bootstrap.c"
 var $252=$4; //@line 9565 "tcc_bootstrap.c"
 var $253=$sym_bind; //@line 9565 "tcc_bootstrap.c"
 var $254=$253<<4; //@line 9565 "tcc_bootstrap.c"
 var $255=$sym_type; //@line 9565 "tcc_bootstrap.c"
 var $256=$255&15; //@line 9565 "tcc_bootstrap.c"
 var $257=((($254)+($256))|0); //@line 9565 "tcc_bootstrap.c"
 var $258=$6; //@line 9565 "tcc_bootstrap.c"
 var $259=$7; //@line 9565 "tcc_bootstrap.c"
 var $260=$8; //@line 9565 "tcc_bootstrap.c"
 var $261=_put_elf_sym($250,$251,$252,$257,$258,$259,$260); //@line 9565 "tcc_bootstrap.c"
 $sym_index=$261; //@line 9565 "tcc_bootstrap.c"
 label=61;break;
 case 61: 
 var $263=$sym_index; //@line 9569 "tcc_bootstrap.c"
 $1=$263; //@line 9569 "tcc_bootstrap.c"
 label=62;break; //@line 9569 "tcc_bootstrap.c"
 case 62: 
 var $265=$1; //@line 9570 "tcc_bootstrap.c"
 STACKTOP=sp;return $265; //@line 9570 "tcc_bootstrap.c"
  default: assert(0, "bad label: " + label);
 }

}


function _find_elf_sym($s,$name){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $sym;
 var $hs;
 var $nbuckets;
 var $sym_index;
 var $h;
 var $name1;
 $2=$s;
 $3=$name;
 var $4=$2; //@line 9491 "tcc_bootstrap.c"
 var $5=(($4+64)|0); //@line 9491 "tcc_bootstrap.c"
 var $6=HEAP32[(($5)>>2)]; //@line 9491 "tcc_bootstrap.c"
 $hs=$6; //@line 9491 "tcc_bootstrap.c"
 var $7=$hs; //@line 9492 "tcc_bootstrap.c"
 var $8=($7|0)!=0; //@line 9492 "tcc_bootstrap.c"
 if($8){label=3;break;}else{label=2;break;} //@line 9492 "tcc_bootstrap.c"
 case 2: 
 $1=0; //@line 9493 "tcc_bootstrap.c"
 label=9;break; //@line 9493 "tcc_bootstrap.c"
 case 3: 
 var $11=$hs; //@line 9494 "tcc_bootstrap.c"
 var $12=(($11+4)|0); //@line 9494 "tcc_bootstrap.c"
 var $13=HEAP32[(($12)>>2)]; //@line 9494 "tcc_bootstrap.c"
 var $14=$13; //@line 9494 "tcc_bootstrap.c"
 var $15=(($14)|0); //@line 9494 "tcc_bootstrap.c"
 var $16=HEAP32[(($15)>>2)]; //@line 9494 "tcc_bootstrap.c"
 $nbuckets=$16; //@line 9494 "tcc_bootstrap.c"
 var $17=$3; //@line 9495 "tcc_bootstrap.c"
 var $18=_elf_hash($17); //@line 9495 "tcc_bootstrap.c"
 var $19=$nbuckets; //@line 9495 "tcc_bootstrap.c"
 var $20=(((($18>>>0))%(($19>>>0)))&-1); //@line 9495 "tcc_bootstrap.c"
 $h=$20; //@line 9495 "tcc_bootstrap.c"
 var $21=$h; //@line 9496 "tcc_bootstrap.c"
 var $22=((($21)+(2))|0); //@line 9496 "tcc_bootstrap.c"
 var $23=$hs; //@line 9496 "tcc_bootstrap.c"
 var $24=(($23+4)|0); //@line 9496 "tcc_bootstrap.c"
 var $25=HEAP32[(($24)>>2)]; //@line 9496 "tcc_bootstrap.c"
 var $26=$25; //@line 9496 "tcc_bootstrap.c"
 var $27=(($26+($22<<2))|0); //@line 9496 "tcc_bootstrap.c"
 var $28=HEAP32[(($27)>>2)]; //@line 9496 "tcc_bootstrap.c"
 $sym_index=$28; //@line 9496 "tcc_bootstrap.c"
 label=4;break; //@line 9497 "tcc_bootstrap.c"
 case 4: 
 var $30=$sym_index; //@line 9497 "tcc_bootstrap.c"
 var $31=($30|0)!=0; //@line 9497 "tcc_bootstrap.c"
 if($31){label=5;break;}else{label=8;break;} //@line 9497 "tcc_bootstrap.c"
 case 5: 
 var $33=$sym_index; //@line 9498 "tcc_bootstrap.c"
 var $34=$2; //@line 9498 "tcc_bootstrap.c"
 var $35=(($34+4)|0); //@line 9498 "tcc_bootstrap.c"
 var $36=HEAP32[(($35)>>2)]; //@line 9498 "tcc_bootstrap.c"
 var $37=$36; //@line 9498 "tcc_bootstrap.c"
 var $38=(($37+($33<<4))|0); //@line 9498 "tcc_bootstrap.c"
 $sym=$38; //@line 9498 "tcc_bootstrap.c"
 var $39=$2; //@line 9499 "tcc_bootstrap.c"
 var $40=(($39+56)|0); //@line 9499 "tcc_bootstrap.c"
 var $41=HEAP32[(($40)>>2)]; //@line 9499 "tcc_bootstrap.c"
 var $42=(($41+4)|0); //@line 9499 "tcc_bootstrap.c"
 var $43=HEAP32[(($42)>>2)]; //@line 9499 "tcc_bootstrap.c"
 var $44=$sym; //@line 9499 "tcc_bootstrap.c"
 var $45=(($44)|0); //@line 9499 "tcc_bootstrap.c"
 var $46=HEAP32[(($45)>>2)]; //@line 9499 "tcc_bootstrap.c"
 var $47=(($43+$46)|0); //@line 9499 "tcc_bootstrap.c"
 $name1=$47; //@line 9499 "tcc_bootstrap.c"
 var $48=$3; //@line 9500 "tcc_bootstrap.c"
 var $49=$name1; //@line 9500 "tcc_bootstrap.c"
 var $50=_strcmp($48,$49); //@line 9500 "tcc_bootstrap.c"
 var $51=($50|0)!=0; //@line 9500 "tcc_bootstrap.c"
 if($51){label=7;break;}else{label=6;break;} //@line 9500 "tcc_bootstrap.c"
 case 6: 
 var $53=$sym_index; //@line 9501 "tcc_bootstrap.c"
 $1=$53; //@line 9501 "tcc_bootstrap.c"
 label=9;break; //@line 9501 "tcc_bootstrap.c"
 case 7: 
 var $55=$nbuckets; //@line 9502 "tcc_bootstrap.c"
 var $56=((($55)+(2))|0); //@line 9502 "tcc_bootstrap.c"
 var $57=$sym_index; //@line 9502 "tcc_bootstrap.c"
 var $58=((($56)+($57))|0); //@line 9502 "tcc_bootstrap.c"
 var $59=$hs; //@line 9502 "tcc_bootstrap.c"
 var $60=(($59+4)|0); //@line 9502 "tcc_bootstrap.c"
 var $61=HEAP32[(($60)>>2)]; //@line 9502 "tcc_bootstrap.c"
 var $62=$61; //@line 9502 "tcc_bootstrap.c"
 var $63=(($62+($58<<2))|0); //@line 9502 "tcc_bootstrap.c"
 var $64=HEAP32[(($63)>>2)]; //@line 9502 "tcc_bootstrap.c"
 $sym_index=$64; //@line 9502 "tcc_bootstrap.c"
 label=4;break; //@line 9503 "tcc_bootstrap.c"
 case 8: 
 $1=0; //@line 9504 "tcc_bootstrap.c"
 label=9;break; //@line 9504 "tcc_bootstrap.c"
 case 9: 
 var $67=$1; //@line 9505 "tcc_bootstrap.c"
 STACKTOP=sp;return $67; //@line 9505 "tcc_bootstrap.c"
  default: assert(0, "bad label: " + label);
 }

}


function _gen_inline_functions($s){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $sym;
 var $inline_generated;
 var $i;
 var $ln;
 var $fn;
 $1=$s;
 var $2=HEAP32[((76648)>>2)]; //@line 9015 "tcc_bootstrap.c"
 var $3=(($2+16)|0); //@line 9015 "tcc_bootstrap.c"
 var $4=HEAP32[(($3)>>2)]; //@line 9015 "tcc_bootstrap.c"
 $ln=$4; //@line 9015 "tcc_bootstrap.c"
 label=2;break; //@line 9016 "tcc_bootstrap.c"
 case 2: 
 $inline_generated=0; //@line 9017 "tcc_bootstrap.c"
 $i=0; //@line 9018 "tcc_bootstrap.c"
 label=3;break; //@line 9018 "tcc_bootstrap.c"
 case 3: 
 var $7=$i; //@line 9018 "tcc_bootstrap.c"
 var $8=$1; //@line 9018 "tcc_bootstrap.c"
 var $9=(($8+676)|0); //@line 9018 "tcc_bootstrap.c"
 var $10=HEAP32[(($9)>>2)]; //@line 9018 "tcc_bootstrap.c"
 var $11=($7|0)<($10|0); //@line 9018 "tcc_bootstrap.c"
 if($11){label=4;break;}else{label=11;break;} //@line 9018 "tcc_bootstrap.c"
 case 4: 
 var $13=$i; //@line 9019 "tcc_bootstrap.c"
 var $14=$1; //@line 9019 "tcc_bootstrap.c"
 var $15=(($14+672)|0); //@line 9019 "tcc_bootstrap.c"
 var $16=HEAP32[(($15)>>2)]; //@line 9019 "tcc_bootstrap.c"
 var $17=(($16+($13<<2))|0); //@line 9019 "tcc_bootstrap.c"
 var $18=HEAP32[(($17)>>2)]; //@line 9019 "tcc_bootstrap.c"
 $fn=$18; //@line 9019 "tcc_bootstrap.c"
 var $19=$fn; //@line 9020 "tcc_bootstrap.c"
 var $20=(($19+4)|0); //@line 9020 "tcc_bootstrap.c"
 var $21=HEAP32[(($20)>>2)]; //@line 9020 "tcc_bootstrap.c"
 $sym=$21; //@line 9020 "tcc_bootstrap.c"
 var $22=$sym; //@line 9021 "tcc_bootstrap.c"
 var $23=($22|0)!=0; //@line 9021 "tcc_bootstrap.c"
 if($23){label=5;break;}else{label=9;break;} //@line 9021 "tcc_bootstrap.c"
 case 5: 
 var $25=$sym; //@line 9021 "tcc_bootstrap.c"
 var $26=(($25+8)|0); //@line 9021 "tcc_bootstrap.c"
 var $27=$26; //@line 9021 "tcc_bootstrap.c"
 var $28=(($27)|0); //@line 9021 "tcc_bootstrap.c"
 var $29=HEAP32[(($28)>>2)]; //@line 9021 "tcc_bootstrap.c"
 var $30=($29|0)!=0; //@line 9021 "tcc_bootstrap.c"
 if($30){label=6;break;}else{label=9;break;} //@line 9021 "tcc_bootstrap.c"
 case 6: 
 var $32=$fn; //@line 9022 "tcc_bootstrap.c"
 var $33=(($32+4)|0); //@line 9022 "tcc_bootstrap.c"
 HEAP32[(($33)>>2)]=0; //@line 9022 "tcc_bootstrap.c"
 var $34=HEAP32[((76648)>>2)]; //@line 9023 "tcc_bootstrap.c"
 var $35=($34|0)!=0; //@line 9023 "tcc_bootstrap.c"
 if($35){label=7;break;}else{label=8;break;} //@line 9023 "tcc_bootstrap.c"
 case 7: 
 var $37=HEAP32[((76648)>>2)]; //@line 9024 "tcc_bootstrap.c"
 var $38=(($37+40)|0); //@line 9024 "tcc_bootstrap.c"
 var $39=(($38)|0); //@line 9024 "tcc_bootstrap.c"
 var $40=$fn; //@line 9024 "tcc_bootstrap.c"
 var $41=(($40+8)|0); //@line 9024 "tcc_bootstrap.c"
 var $42=(($41)|0); //@line 9024 "tcc_bootstrap.c"
 var $43=_pstrcpy($39,1024,$42); //@line 9024 "tcc_bootstrap.c"
 label=8;break; //@line 9024 "tcc_bootstrap.c"
 case 8: 
 var $45=$sym; //@line 9025 "tcc_bootstrap.c"
 var $46=(($45+16)|0); //@line 9025 "tcc_bootstrap.c"
 var $47=(($46)|0); //@line 9025 "tcc_bootstrap.c"
 var $48=HEAP32[(($47)>>2)]; //@line 9025 "tcc_bootstrap.c"
 var $49=$48&-32769; //@line 9025 "tcc_bootstrap.c"
 HEAP32[(($47)>>2)]=$49; //@line 9025 "tcc_bootstrap.c"
 var $50=$fn; //@line 9026 "tcc_bootstrap.c"
 var $51=(($50)|0); //@line 9026 "tcc_bootstrap.c"
 var $52=HEAP32[(($51)>>2)]; //@line 9026 "tcc_bootstrap.c"
 _begin_macro($52,1); //@line 9026 "tcc_bootstrap.c"
 _next(); //@line 9027 "tcc_bootstrap.c"
 var $53=HEAP32[((10480)>>2)]; //@line 9028 "tcc_bootstrap.c"
 HEAP32[((76672)>>2)]=$53; //@line 9028 "tcc_bootstrap.c"
 var $54=$sym; //@line 9029 "tcc_bootstrap.c"
 _gen_function($54); //@line 9029 "tcc_bootstrap.c"
 _end_macro(); //@line 9030 "tcc_bootstrap.c"
 $inline_generated=1; //@line 9031 "tcc_bootstrap.c"
 label=9;break; //@line 9032 "tcc_bootstrap.c"
 case 9: 
 label=10;break; //@line 9033 "tcc_bootstrap.c"
 case 10: 
 var $57=$i; //@line 9018 "tcc_bootstrap.c"
 var $58=((($57)+(1))|0); //@line 9018 "tcc_bootstrap.c"
 $i=$58; //@line 9018 "tcc_bootstrap.c"
 label=3;break; //@line 9018 "tcc_bootstrap.c"
 case 11: 
 label=12;break; //@line 9034 "tcc_bootstrap.c"
 case 12: 
 var $61=$inline_generated; //@line 9034 "tcc_bootstrap.c"
 var $62=($61|0)!=0; //@line 9034 "tcc_bootstrap.c"
 if($62){label=2;break;}else{label=13;break;} //@line 9034 "tcc_bootstrap.c"
 case 13: 
 var $64=$ln; //@line 9035 "tcc_bootstrap.c"
 var $65=HEAP32[((76648)>>2)]; //@line 9035 "tcc_bootstrap.c"
 var $66=(($65+16)|0); //@line 9035 "tcc_bootstrap.c"
 HEAP32[(($66)>>2)]=$64; //@line 9035 "tcc_bootstrap.c"
 STACKTOP=sp;return; //@line 9036 "tcc_bootstrap.c"
  default: assert(0, "bad label: " + label);
 }

}


function _strcat_printf($buf,$buf_size,$fmt,varrp){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 var $2;
 var $3=sp;
 var $ap;
 $1=$buf;
 $2=$buf_size;
 HEAP32[(($3)>>2)]=$fmt;
 var $4=$3; //@line 10792 "tcc_bootstrap.c"
 var $5=(($4+4)|0); //@line 10792 "tcc_bootstrap.c"
 $ap=$5; //@line 10792 "tcc_bootstrap.c"
 var $6=$1; //@line 10793 "tcc_bootstrap.c"
 var $7=$2; //@line 10793 "tcc_bootstrap.c"
 var $8=HEAP32[(($3)>>2)]; //@line 10793 "tcc_bootstrap.c"
 var $9=$ap; //@line 10793 "tcc_bootstrap.c"
 _strcat_vprintf($6,$7,$8,$9); //@line 10793 "tcc_bootstrap.c"
 STACKTOP=sp;return; //@line 10794 "tcc_bootstrap.c"
}


function _strcat_vprintf($buf,$buf_size,$fmt,$ap){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 var $2;
 var $3;
 var $4;
 var $len;
 $1=$buf;
 $2=$buf_size;
 $3=$fmt;
 $4=$ap;
 var $5=$1; //@line 10786 "tcc_bootstrap.c"
 var $6=_strlen($5); //@line 10786 "tcc_bootstrap.c"
 $len=$6; //@line 10786 "tcc_bootstrap.c"
 var $7=$1; //@line 10787 "tcc_bootstrap.c"
 var $8=$len; //@line 10787 "tcc_bootstrap.c"
 var $9=(($7+$8)|0); //@line 10787 "tcc_bootstrap.c"
 var $10=$2; //@line 10787 "tcc_bootstrap.c"
 var $11=$len; //@line 10787 "tcc_bootstrap.c"
 var $12=((($10)-($11))|0); //@line 10787 "tcc_bootstrap.c"
 var $13=$3; //@line 10787 "tcc_bootstrap.c"
 var $14=$4; //@line 10787 "tcc_bootstrap.c"
 var $15=_vsnprintf($9,$12,$13,$14); //@line 10787 "tcc_bootstrap.c"
 STACKTOP=sp;return; //@line 10788 "tcc_bootstrap.c"
}


function _resolve_common_syms($s1){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $sym;
 $1=$s1;
 var $2=HEAP32[((10504)>>2)]; //@line 9936 "tcc_bootstrap.c"
 var $3=(($2+4)|0); //@line 9936 "tcc_bootstrap.c"
 var $4=HEAP32[(($3)>>2)]; //@line 9936 "tcc_bootstrap.c"
 var $5=$4; //@line 9936 "tcc_bootstrap.c"
 var $6=(($5+16)|0); //@line 9936 "tcc_bootstrap.c"
 $sym=$6; //@line 9936 "tcc_bootstrap.c"
 label=2;break; //@line 9936 "tcc_bootstrap.c"
 case 2: 
 var $8=$sym; //@line 9936 "tcc_bootstrap.c"
 var $9=HEAP32[((10504)>>2)]; //@line 9936 "tcc_bootstrap.c"
 var $10=(($9+4)|0); //@line 9936 "tcc_bootstrap.c"
 var $11=HEAP32[(($10)>>2)]; //@line 9936 "tcc_bootstrap.c"
 var $12=HEAP32[((10504)>>2)]; //@line 9936 "tcc_bootstrap.c"
 var $13=(($12)|0); //@line 9936 "tcc_bootstrap.c"
 var $14=HEAP32[(($13)>>2)]; //@line 9936 "tcc_bootstrap.c"
 var $15=(($11+$14)|0); //@line 9936 "tcc_bootstrap.c"
 var $16=$15; //@line 9936 "tcc_bootstrap.c"
 var $17=($8>>>0)<($16>>>0); //@line 9936 "tcc_bootstrap.c"
 if($17){label=3;break;}else{label=7;break;} //@line 9936 "tcc_bootstrap.c"
 case 3: 
 var $19=$sym; //@line 9937 "tcc_bootstrap.c"
 var $20=(($19+14)|0); //@line 9937 "tcc_bootstrap.c"
 var $21=HEAP16[(($20)>>1)]; //@line 9937 "tcc_bootstrap.c"
 var $22=($21&65535); //@line 9937 "tcc_bootstrap.c"
 var $23=($22|0)==65522; //@line 9937 "tcc_bootstrap.c"
 if($23){label=4;break;}else{label=5;break;} //@line 9937 "tcc_bootstrap.c"
 case 4: 
 var $25=HEAP32[((76744)>>2)]; //@line 9938 "tcc_bootstrap.c"
 var $26=$sym; //@line 9938 "tcc_bootstrap.c"
 var $27=(($26+8)|0); //@line 9938 "tcc_bootstrap.c"
 var $28=HEAP32[(($27)>>2)]; //@line 9938 "tcc_bootstrap.c"
 var $29=$sym; //@line 9938 "tcc_bootstrap.c"
 var $30=(($29+4)|0); //@line 9938 "tcc_bootstrap.c"
 var $31=HEAP32[(($30)>>2)]; //@line 9938 "tcc_bootstrap.c"
 var $32=_section_add($25,$28,$31); //@line 9938 "tcc_bootstrap.c"
 var $33=$sym; //@line 9938 "tcc_bootstrap.c"
 var $34=(($33+4)|0); //@line 9938 "tcc_bootstrap.c"
 HEAP32[(($34)>>2)]=$32; //@line 9938 "tcc_bootstrap.c"
 var $35=HEAP32[((76744)>>2)]; //@line 9940 "tcc_bootstrap.c"
 var $36=(($35+16)|0); //@line 9940 "tcc_bootstrap.c"
 var $37=HEAP32[(($36)>>2)]; //@line 9940 "tcc_bootstrap.c"
 var $38=(($37)&65535); //@line 9940 "tcc_bootstrap.c"
 var $39=$sym; //@line 9940 "tcc_bootstrap.c"
 var $40=(($39+14)|0); //@line 9940 "tcc_bootstrap.c"
 HEAP16[(($40)>>1)]=$38; //@line 9940 "tcc_bootstrap.c"
 label=5;break; //@line 9941 "tcc_bootstrap.c"
 case 5: 
 label=6;break; //@line 9942 "tcc_bootstrap.c"
 case 6: 
 var $43=$sym; //@line 9936 "tcc_bootstrap.c"
 var $44=(($43+16)|0); //@line 9936 "tcc_bootstrap.c"
 $sym=$44; //@line 9936 "tcc_bootstrap.c"
 label=2;break; //@line 9936 "tcc_bootstrap.c"
 case 7: 
 var $46=$1; //@line 9943 "tcc_bootstrap.c"
 _tcc_add_linker_symbols($46); //@line 9943 "tcc_bootstrap.c"
 STACKTOP=sp;return; //@line 9944 "tcc_bootstrap.c"
  default: assert(0, "bad label: " + label);
 }

}


function _alloc_sec_names($s1,$file_type,$strsec){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $i;
 var $s;
 var $textrel;
 $1=$s1;
 $2=$file_type;
 $3=$strsec;
 $textrel=0; //@line 9670 "tcc_bootstrap.c"
 $i=1; //@line 9671 "tcc_bootstrap.c"
 label=2;break; //@line 9671 "tcc_bootstrap.c"
 case 2: 
 var $5=$i; //@line 9671 "tcc_bootstrap.c"
 var $6=$1; //@line 9671 "tcc_bootstrap.c"
 var $7=(($6+684)|0); //@line 9671 "tcc_bootstrap.c"
 var $8=HEAP32[(($7)>>2)]; //@line 9671 "tcc_bootstrap.c"
 var $9=($5|0)<($8|0); //@line 9671 "tcc_bootstrap.c"
 if($9){label=3;break;}else{label=12;break;} //@line 9671 "tcc_bootstrap.c"
 case 3: 
 var $11=$i; //@line 9672 "tcc_bootstrap.c"
 var $12=$1; //@line 9672 "tcc_bootstrap.c"
 var $13=(($12+680)|0); //@line 9672 "tcc_bootstrap.c"
 var $14=HEAP32[(($13)>>2)]; //@line 9672 "tcc_bootstrap.c"
 var $15=(($14+($11<<2))|0); //@line 9672 "tcc_bootstrap.c"
 var $16=HEAP32[(($15)>>2)]; //@line 9672 "tcc_bootstrap.c"
 $s=$16; //@line 9672 "tcc_bootstrap.c"
 var $17=$2; //@line 9673 "tcc_bootstrap.c"
 var $18=($17|0)==4; //@line 9673 "tcc_bootstrap.c"
 if($18){label=6;break;}else{label=4;break;} //@line 9673 "tcc_bootstrap.c"
 case 4: 
 var $20=$s; //@line 9673 "tcc_bootstrap.c"
 var $21=(($20+24)|0); //@line 9673 "tcc_bootstrap.c"
 var $22=HEAP32[(($21)>>2)]; //@line 9673 "tcc_bootstrap.c"
 var $23=$22&2; //@line 9673 "tcc_bootstrap.c"
 var $24=($23|0)!=0; //@line 9673 "tcc_bootstrap.c"
 if($24){label=6;break;}else{label=5;break;} //@line 9673 "tcc_bootstrap.c"
 case 5: 
 var $26=$i; //@line 9673 "tcc_bootstrap.c"
 var $27=$1; //@line 9673 "tcc_bootstrap.c"
 var $28=(($27+684)|0); //@line 9673 "tcc_bootstrap.c"
 var $29=HEAP32[(($28)>>2)]; //@line 9673 "tcc_bootstrap.c"
 var $30=((($29)-(1))|0); //@line 9673 "tcc_bootstrap.c"
 var $31=($26|0)==($30|0); //@line 9673 "tcc_bootstrap.c"
 if($31){label=6;break;}else{label=7;break;} //@line 9673 "tcc_bootstrap.c"
 case 6: 
 var $33=$s; //@line 9676 "tcc_bootstrap.c"
 var $34=(($33)|0); //@line 9676 "tcc_bootstrap.c"
 var $35=HEAP32[(($34)>>2)]; //@line 9676 "tcc_bootstrap.c"
 var $36=$s; //@line 9676 "tcc_bootstrap.c"
 var $37=(($36+40)|0); //@line 9676 "tcc_bootstrap.c"
 HEAP32[(($37)>>2)]=$35; //@line 9676 "tcc_bootstrap.c"
 label=7;break; //@line 9677 "tcc_bootstrap.c"
 case 7: 
 var $39=$s; //@line 9678 "tcc_bootstrap.c"
 var $40=(($39+40)|0); //@line 9678 "tcc_bootstrap.c"
 var $41=HEAP32[(($40)>>2)]; //@line 9678 "tcc_bootstrap.c"
 var $42=($41|0)!=0; //@line 9678 "tcc_bootstrap.c"
 if($42){label=9;break;}else{label=8;break;} //@line 9678 "tcc_bootstrap.c"
 case 8: 
 var $44=$s; //@line 9678 "tcc_bootstrap.c"
 var $45=(($44+24)|0); //@line 9678 "tcc_bootstrap.c"
 var $46=HEAP32[(($45)>>2)]; //@line 9678 "tcc_bootstrap.c"
 var $47=$46&2; //@line 9678 "tcc_bootstrap.c"
 var $48=($47|0)!=0; //@line 9678 "tcc_bootstrap.c"
 if($48){label=9;break;}else{label=10;break;} //@line 9678 "tcc_bootstrap.c"
 case 9: 
 var $50=$3; //@line 9679 "tcc_bootstrap.c"
 var $51=$s; //@line 9679 "tcc_bootstrap.c"
 var $52=(($51+72)|0); //@line 9679 "tcc_bootstrap.c"
 var $53=(($52)|0); //@line 9679 "tcc_bootstrap.c"
 var $54=_put_elf_str($50,$53); //@line 9679 "tcc_bootstrap.c"
 var $55=$s; //@line 9679 "tcc_bootstrap.c"
 var $56=(($55+12)|0); //@line 9679 "tcc_bootstrap.c"
 HEAP32[(($56)>>2)]=$54; //@line 9679 "tcc_bootstrap.c"
 label=10;break; //@line 9679 "tcc_bootstrap.c"
 case 10: 
 label=11;break; //@line 9680 "tcc_bootstrap.c"
 case 11: 
 var $59=$i; //@line 9671 "tcc_bootstrap.c"
 var $60=((($59)+(1))|0); //@line 9671 "tcc_bootstrap.c"
 $i=$60; //@line 9671 "tcc_bootstrap.c"
 label=2;break; //@line 9671 "tcc_bootstrap.c"
 case 12: 
 var $62=$3; //@line 9681 "tcc_bootstrap.c"
 var $63=(($62)|0); //@line 9681 "tcc_bootstrap.c"
 var $64=HEAP32[(($63)>>2)]; //@line 9681 "tcc_bootstrap.c"
 var $65=$3; //@line 9681 "tcc_bootstrap.c"
 var $66=(($65+40)|0); //@line 9681 "tcc_bootstrap.c"
 HEAP32[(($66)>>2)]=$64; //@line 9681 "tcc_bootstrap.c"
 var $67=$textrel; //@line 9682 "tcc_bootstrap.c"
 STACKTOP=sp;return $67; //@line 9682 "tcc_bootstrap.c"
  default: assert(0, "bad label: " + label);
 }

}


function _layout_sections($s1,$phdr,$phnum,$interp,$strsec,$dyninf,$sec_order){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 var $7;
 var $i;
 var $j;
 var $k;
 var $file_type;
 var $sh_order_index;
 var $file_offset;
 var $s_align;
 var $tmp=sp;
 var $addr;
 var $ph;
 var $s;
 var $a_offset;
 var $p_offset;
 $1=$s1;
 $2=$phdr;
 $3=$phnum;
 $4=$interp;
 $5=$strsec;
 $6=$dyninf;
 $7=$sec_order;
 var $8=$1; //@line 9703 "tcc_bootstrap.c"
 var $9=(($8+4)|0); //@line 9703 "tcc_bootstrap.c"
 var $10=HEAP32[(($9)>>2)]; //@line 9703 "tcc_bootstrap.c"
 $file_type=$10; //@line 9703 "tcc_bootstrap.c"
 $sh_order_index=1; //@line 9704 "tcc_bootstrap.c"
 $file_offset=0; //@line 9705 "tcc_bootstrap.c"
 var $11=$1; //@line 9706 "tcc_bootstrap.c"
 var $12=(($11+8)|0); //@line 9706 "tcc_bootstrap.c"
 var $13=HEAP32[(($12)>>2)]; //@line 9706 "tcc_bootstrap.c"
 var $14=($13|0)==0; //@line 9706 "tcc_bootstrap.c"
 if($14){label=2;break;}else{label=3;break;} //@line 9706 "tcc_bootstrap.c"
 case 2: 
 var $16=$3; //@line 9707 "tcc_bootstrap.c"
 var $17=($16<<5); //@line 9707 "tcc_bootstrap.c"
 var $18=((($17)+(52))|0); //@line 9707 "tcc_bootstrap.c"
 $file_offset=$18; //@line 9707 "tcc_bootstrap.c"
 label=3;break; //@line 9707 "tcc_bootstrap.c"
 case 3: 
 $s_align=4096; //@line 9708 "tcc_bootstrap.c"
 var $20=$1; //@line 9709 "tcc_bootstrap.c"
 var $21=(($20+52)|0); //@line 9709 "tcc_bootstrap.c"
 var $22=HEAP32[(($21)>>2)]; //@line 9709 "tcc_bootstrap.c"
 var $23=($22|0)!=0; //@line 9709 "tcc_bootstrap.c"
 if($23){label=4;break;}else{label=5;break;} //@line 9709 "tcc_bootstrap.c"
 case 4: 
 var $25=$1; //@line 9710 "tcc_bootstrap.c"
 var $26=(($25+52)|0); //@line 9710 "tcc_bootstrap.c"
 var $27=HEAP32[(($26)>>2)]; //@line 9710 "tcc_bootstrap.c"
 $s_align=$27; //@line 9710 "tcc_bootstrap.c"
 label=5;break; //@line 9710 "tcc_bootstrap.c"
 case 5: 
 var $29=$3; //@line 9711 "tcc_bootstrap.c"
 var $30=($29|0)>0; //@line 9711 "tcc_bootstrap.c"
 if($30){label=6;break;}else{label=74;break;} //@line 9711 "tcc_bootstrap.c"
 case 6: 
 var $32=$1; //@line 9713 "tcc_bootstrap.c"
 var $33=(($32+44)|0); //@line 9713 "tcc_bootstrap.c"
 var $34=HEAP32[(($33)>>2)]; //@line 9713 "tcc_bootstrap.c"
 $addr=$34; //@line 9713 "tcc_bootstrap.c"
 var $35=$addr; //@line 9714 "tcc_bootstrap.c"
 var $36=$s_align; //@line 9714 "tcc_bootstrap.c"
 var $37=((($36)-(1))|0); //@line 9714 "tcc_bootstrap.c"
 var $38=$35&$37; //@line 9714 "tcc_bootstrap.c"
 $a_offset=$38; //@line 9714 "tcc_bootstrap.c"
 var $39=$file_offset; //@line 9715 "tcc_bootstrap.c"
 var $40=$s_align; //@line 9715 "tcc_bootstrap.c"
 var $41=((($40)-(1))|0); //@line 9715 "tcc_bootstrap.c"
 var $42=$39&$41; //@line 9715 "tcc_bootstrap.c"
 $p_offset=$42; //@line 9715 "tcc_bootstrap.c"
 var $43=$a_offset; //@line 9716 "tcc_bootstrap.c"
 var $44=$p_offset; //@line 9716 "tcc_bootstrap.c"
 var $45=($43|0)<($44|0); //@line 9716 "tcc_bootstrap.c"
 if($45){label=7;break;}else{label=8;break;} //@line 9716 "tcc_bootstrap.c"
 case 7: 
 var $47=$s_align; //@line 9717 "tcc_bootstrap.c"
 var $48=$a_offset; //@line 9717 "tcc_bootstrap.c"
 var $49=((($48)+($47))|0); //@line 9717 "tcc_bootstrap.c"
 $a_offset=$49; //@line 9717 "tcc_bootstrap.c"
 label=8;break; //@line 9717 "tcc_bootstrap.c"
 case 8: 
 var $51=$a_offset; //@line 9718 "tcc_bootstrap.c"
 var $52=$p_offset; //@line 9718 "tcc_bootstrap.c"
 var $53=((($51)-($52))|0); //@line 9718 "tcc_bootstrap.c"
 var $54=$file_offset; //@line 9718 "tcc_bootstrap.c"
 var $55=((($54)+($53))|0); //@line 9718 "tcc_bootstrap.c"
 $file_offset=$55; //@line 9718 "tcc_bootstrap.c"
 var $56=$2; //@line 9719 "tcc_bootstrap.c"
 var $57=(($56)|0); //@line 9719 "tcc_bootstrap.c"
 $ph=$57; //@line 9719 "tcc_bootstrap.c"
 var $58=$4; //@line 9720 "tcc_bootstrap.c"
 var $59=($58|0)!=0; //@line 9720 "tcc_bootstrap.c"
 if($59){label=9;break;}else{label=10;break;} //@line 9720 "tcc_bootstrap.c"
 case 9: 
 var $61=$ph; //@line 9721 "tcc_bootstrap.c"
 var $62=(($61+64)|0); //@line 9721 "tcc_bootstrap.c"
 $ph=$62; //@line 9721 "tcc_bootstrap.c"
 label=10;break; //@line 9721 "tcc_bootstrap.c"
 case 10: 
 var $64=$6; //@line 9722 "tcc_bootstrap.c"
 var $65=(($64+16)|0); //@line 9722 "tcc_bootstrap.c"
 HEAP32[(($65)>>2)]=0; //@line 9722 "tcc_bootstrap.c"
 var $66=$6; //@line 9722 "tcc_bootstrap.c"
 var $67=(($66+12)|0); //@line 9722 "tcc_bootstrap.c"
 HEAP32[(($67)>>2)]=0; //@line 9722 "tcc_bootstrap.c"
 $j=0; //@line 9723 "tcc_bootstrap.c"
 label=11;break; //@line 9723 "tcc_bootstrap.c"
 case 11: 
 var $69=$j; //@line 9723 "tcc_bootstrap.c"
 var $70=($69|0)<2; //@line 9723 "tcc_bootstrap.c"
 if($70){label=12;break;}else{label=73;break;} //@line 9723 "tcc_bootstrap.c"
 case 12: 
 var $72=$ph; //@line 9724 "tcc_bootstrap.c"
 var $73=(($72)|0); //@line 9724 "tcc_bootstrap.c"
 HEAP32[(($73)>>2)]=1; //@line 9724 "tcc_bootstrap.c"
 var $74=$j; //@line 9725 "tcc_bootstrap.c"
 var $75=($74|0)==0; //@line 9725 "tcc_bootstrap.c"
 if($75){label=13;break;}else{label=14;break;} //@line 9725 "tcc_bootstrap.c"
 case 13: 
 var $77=$ph; //@line 9726 "tcc_bootstrap.c"
 var $78=(($77+24)|0); //@line 9726 "tcc_bootstrap.c"
 HEAP32[(($78)>>2)]=5; //@line 9726 "tcc_bootstrap.c"
 label=15;break; //@line 9726 "tcc_bootstrap.c"
 case 14: 
 var $80=$ph; //@line 9728 "tcc_bootstrap.c"
 var $81=(($80+24)|0); //@line 9728 "tcc_bootstrap.c"
 HEAP32[(($81)>>2)]=6; //@line 9728 "tcc_bootstrap.c"
 label=15;break;
 case 15: 
 var $83=$s_align; //@line 9729 "tcc_bootstrap.c"
 var $84=$ph; //@line 9729 "tcc_bootstrap.c"
 var $85=(($84+28)|0); //@line 9729 "tcc_bootstrap.c"
 HEAP32[(($85)>>2)]=$83; //@line 9729 "tcc_bootstrap.c"
 $k=0; //@line 9730 "tcc_bootstrap.c"
 label=16;break; //@line 9730 "tcc_bootstrap.c"
 case 16: 
 var $87=$k; //@line 9730 "tcc_bootstrap.c"
 var $88=($87|0)<5; //@line 9730 "tcc_bootstrap.c"
 if($88){label=17;break;}else{label=62;break;} //@line 9730 "tcc_bootstrap.c"
 case 17: 
 $i=1; //@line 9731 "tcc_bootstrap.c"
 label=18;break; //@line 9731 "tcc_bootstrap.c"
 case 18: 
 var $91=$i; //@line 9731 "tcc_bootstrap.c"
 var $92=$1; //@line 9731 "tcc_bootstrap.c"
 var $93=(($92+684)|0); //@line 9731 "tcc_bootstrap.c"
 var $94=HEAP32[(($93)>>2)]; //@line 9731 "tcc_bootstrap.c"
 var $95=($91|0)<($94|0); //@line 9731 "tcc_bootstrap.c"
 if($95){label=19;break;}else{label=60;break;} //@line 9731 "tcc_bootstrap.c"
 case 19: 
 var $97=$i; //@line 9732 "tcc_bootstrap.c"
 var $98=$1; //@line 9732 "tcc_bootstrap.c"
 var $99=(($98+680)|0); //@line 9732 "tcc_bootstrap.c"
 var $100=HEAP32[(($99)>>2)]; //@line 9732 "tcc_bootstrap.c"
 var $101=(($100+($97<<2))|0); //@line 9732 "tcc_bootstrap.c"
 var $102=HEAP32[(($101)>>2)]; //@line 9732 "tcc_bootstrap.c"
 $s=$102; //@line 9732 "tcc_bootstrap.c"
 var $103=$j; //@line 9733 "tcc_bootstrap.c"
 var $104=($103|0)==0; //@line 9733 "tcc_bootstrap.c"
 if($104){label=20;break;}else{label=23;break;} //@line 9733 "tcc_bootstrap.c"
 case 20: 
 var $106=$s; //@line 9734 "tcc_bootstrap.c"
 var $107=(($106+24)|0); //@line 9734 "tcc_bootstrap.c"
 var $108=HEAP32[(($107)>>2)]; //@line 9734 "tcc_bootstrap.c"
 var $109=$108&3; //@line 9734 "tcc_bootstrap.c"
 var $110=($109|0)!=2; //@line 9734 "tcc_bootstrap.c"
 if($110){label=21;break;}else{label=22;break;} //@line 9734 "tcc_bootstrap.c"
 case 21: 
 label=59;break; //@line 9736 "tcc_bootstrap.c"
 case 22: 
 label=26;break; //@line 9737 "tcc_bootstrap.c"
 case 23: 
 var $114=$s; //@line 9738 "tcc_bootstrap.c"
 var $115=(($114+24)|0); //@line 9738 "tcc_bootstrap.c"
 var $116=HEAP32[(($115)>>2)]; //@line 9738 "tcc_bootstrap.c"
 var $117=$116&3; //@line 9738 "tcc_bootstrap.c"
 var $118=($117|0)!=3; //@line 9738 "tcc_bootstrap.c"
 if($118){label=24;break;}else{label=25;break;} //@line 9738 "tcc_bootstrap.c"
 case 24: 
 label=59;break; //@line 9740 "tcc_bootstrap.c"
 case 25: 
 label=26;break;
 case 26: 
 var $122=$s; //@line 9742 "tcc_bootstrap.c"
 var $123=$4; //@line 9742 "tcc_bootstrap.c"
 var $124=($122|0)==($123|0); //@line 9742 "tcc_bootstrap.c"
 if($124){label=27;break;}else{label=30;break;} //@line 9742 "tcc_bootstrap.c"
 case 27: 
 var $126=$k; //@line 9743 "tcc_bootstrap.c"
 var $127=($126|0)!=0; //@line 9743 "tcc_bootstrap.c"
 if($127){label=28;break;}else{label=29;break;} //@line 9743 "tcc_bootstrap.c"
 case 28: 
 label=59;break; //@line 9744 "tcc_bootstrap.c"
 case 29: 
 label=50;break; //@line 9745 "tcc_bootstrap.c"
 case 30: 
 var $131=$s; //@line 9745 "tcc_bootstrap.c"
 var $132=(($131+20)|0); //@line 9745 "tcc_bootstrap.c"
 var $133=HEAP32[(($132)>>2)]; //@line 9745 "tcc_bootstrap.c"
 var $134=($133|0)==11; //@line 9745 "tcc_bootstrap.c"
 if($134){label=33;break;}else{label=31;break;} //@line 9745 "tcc_bootstrap.c"
 case 31: 
 var $136=$s; //@line 9745 "tcc_bootstrap.c"
 var $137=(($136+20)|0); //@line 9745 "tcc_bootstrap.c"
 var $138=HEAP32[(($137)>>2)]; //@line 9745 "tcc_bootstrap.c"
 var $139=($138|0)==3; //@line 9745 "tcc_bootstrap.c"
 if($139){label=33;break;}else{label=32;break;} //@line 9745 "tcc_bootstrap.c"
 case 32: 
 var $141=$s; //@line 9745 "tcc_bootstrap.c"
 var $142=(($141+20)|0); //@line 9745 "tcc_bootstrap.c"
 var $143=HEAP32[(($142)>>2)]; //@line 9745 "tcc_bootstrap.c"
 var $144=($143|0)==5; //@line 9745 "tcc_bootstrap.c"
 if($144){label=33;break;}else{label=36;break;} //@line 9745 "tcc_bootstrap.c"
 case 33: 
 var $146=$k; //@line 9748 "tcc_bootstrap.c"
 var $147=($146|0)!=1; //@line 9748 "tcc_bootstrap.c"
 if($147){label=34;break;}else{label=35;break;} //@line 9748 "tcc_bootstrap.c"
 case 34: 
 label=59;break; //@line 9749 "tcc_bootstrap.c"
 case 35: 
 label=49;break; //@line 9750 "tcc_bootstrap.c"
 case 36: 
 var $151=$s; //@line 9750 "tcc_bootstrap.c"
 var $152=(($151+20)|0); //@line 9750 "tcc_bootstrap.c"
 var $153=HEAP32[(($152)>>2)]; //@line 9750 "tcc_bootstrap.c"
 var $154=($153|0)==9; //@line 9750 "tcc_bootstrap.c"
 if($154){label=37;break;}else{label=40;break;} //@line 9750 "tcc_bootstrap.c"
 case 37: 
 var $156=$k; //@line 9751 "tcc_bootstrap.c"
 var $157=($156|0)!=2; //@line 9751 "tcc_bootstrap.c"
 if($157){label=38;break;}else{label=39;break;} //@line 9751 "tcc_bootstrap.c"
 case 38: 
 label=59;break; //@line 9752 "tcc_bootstrap.c"
 case 39: 
 label=48;break; //@line 9753 "tcc_bootstrap.c"
 case 40: 
 var $161=$s; //@line 9753 "tcc_bootstrap.c"
 var $162=(($161+20)|0); //@line 9753 "tcc_bootstrap.c"
 var $163=HEAP32[(($162)>>2)]; //@line 9753 "tcc_bootstrap.c"
 var $164=($163|0)==8; //@line 9753 "tcc_bootstrap.c"
 if($164){label=41;break;}else{label=44;break;} //@line 9753 "tcc_bootstrap.c"
 case 41: 
 var $166=$k; //@line 9754 "tcc_bootstrap.c"
 var $167=($166|0)!=4; //@line 9754 "tcc_bootstrap.c"
 if($167){label=42;break;}else{label=43;break;} //@line 9754 "tcc_bootstrap.c"
 case 42: 
 label=59;break; //@line 9755 "tcc_bootstrap.c"
 case 43: 
 label=47;break; //@line 9756 "tcc_bootstrap.c"
 case 44: 
 var $171=$k; //@line 9757 "tcc_bootstrap.c"
 var $172=($171|0)!=3; //@line 9757 "tcc_bootstrap.c"
 if($172){label=45;break;}else{label=46;break;} //@line 9757 "tcc_bootstrap.c"
 case 45: 
 label=59;break; //@line 9758 "tcc_bootstrap.c"
 case 46: 
 label=47;break;
 case 47: 
 label=48;break;
 case 48: 
 label=49;break;
 case 49: 
 label=50;break;
 case 50: 
 var $179=$i; //@line 9760 "tcc_bootstrap.c"
 var $180=$sh_order_index; //@line 9760 "tcc_bootstrap.c"
 var $181=((($180)+(1))|0); //@line 9760 "tcc_bootstrap.c"
 $sh_order_index=$181; //@line 9760 "tcc_bootstrap.c"
 var $182=$7; //@line 9760 "tcc_bootstrap.c"
 var $183=(($182+($180<<2))|0); //@line 9760 "tcc_bootstrap.c"
 HEAP32[(($183)>>2)]=$179; //@line 9760 "tcc_bootstrap.c"
 var $184=$addr; //@line 9761 "tcc_bootstrap.c"
 var $185$0=$184;
 var $185$1=0;
 var $st$0$0=(($tmp)|0);
 HEAP32[(($st$0$0)>>2)]=$185$0;
 var $st$1$1=(($tmp+4)|0);
 HEAP32[(($st$1$1)>>2)]=$185$1;
 var $186=$addr; //@line 9762 "tcc_bootstrap.c"
 var $187=$s; //@line 9762 "tcc_bootstrap.c"
 var $188=(($187+32)|0); //@line 9762 "tcc_bootstrap.c"
 var $189=HEAP32[(($188)>>2)]; //@line 9762 "tcc_bootstrap.c"
 var $190=((($186)+($189))|0); //@line 9762 "tcc_bootstrap.c"
 var $191=((($190)-(1))|0); //@line 9762 "tcc_bootstrap.c"
 var $192=$s; //@line 9762 "tcc_bootstrap.c"
 var $193=(($192+32)|0); //@line 9762 "tcc_bootstrap.c"
 var $194=HEAP32[(($193)>>2)]; //@line 9762 "tcc_bootstrap.c"
 var $195=((($194)-(1))|0); //@line 9762 "tcc_bootstrap.c"
 var $196=$195^-1; //@line 9762 "tcc_bootstrap.c"
 var $197=$191&$196; //@line 9762 "tcc_bootstrap.c"
 $addr=$197; //@line 9762 "tcc_bootstrap.c"
 var $198=$addr; //@line 9764 "tcc_bootstrap.c"
 var $199$0=$198;
 var $199$1=0;
 var $ld$2$0=(($tmp)|0);
 var $200$0=HEAP32[(($ld$2$0)>>2)];
 var $ld$3$1=(($tmp+4)|0);
 var $200$1=HEAP32[(($ld$3$1)>>2)];
 var $201$0=_i64Subtract($199$0,$199$1,$200$0,$200$1);var $201$1=tempRet0; //@line 9764 "tcc_bootstrap.c"
 var $202$0=$201$0;
 var $202=$202$0;
 var $203=$file_offset; //@line 9764 "tcc_bootstrap.c"
 var $204=((($203)+($202))|0); //@line 9764 "tcc_bootstrap.c"
 $file_offset=$204; //@line 9764 "tcc_bootstrap.c"
 var $205=$file_offset; //@line 9765 "tcc_bootstrap.c"
 var $206=$s; //@line 9765 "tcc_bootstrap.c"
 var $207=(($206+48)|0); //@line 9765 "tcc_bootstrap.c"
 HEAP32[(($207)>>2)]=$205; //@line 9765 "tcc_bootstrap.c"
 var $208=$addr; //@line 9766 "tcc_bootstrap.c"
 var $209=$s; //@line 9766 "tcc_bootstrap.c"
 var $210=(($209+44)|0); //@line 9766 "tcc_bootstrap.c"
 HEAP32[(($210)>>2)]=$208; //@line 9766 "tcc_bootstrap.c"
 var $211=$ph; //@line 9767 "tcc_bootstrap.c"
 var $212=(($211+4)|0); //@line 9767 "tcc_bootstrap.c"
 var $213=HEAP32[(($212)>>2)]; //@line 9767 "tcc_bootstrap.c"
 var $214=($213|0)==0; //@line 9767 "tcc_bootstrap.c"
 if($214){label=51;break;}else{label=52;break;} //@line 9767 "tcc_bootstrap.c"
 case 51: 
 var $216=$file_offset; //@line 9768 "tcc_bootstrap.c"
 var $217=$ph; //@line 9768 "tcc_bootstrap.c"
 var $218=(($217+4)|0); //@line 9768 "tcc_bootstrap.c"
 HEAP32[(($218)>>2)]=$216; //@line 9768 "tcc_bootstrap.c"
 var $219=$addr; //@line 9769 "tcc_bootstrap.c"
 var $220=$ph; //@line 9769 "tcc_bootstrap.c"
 var $221=(($220+8)|0); //@line 9769 "tcc_bootstrap.c"
 HEAP32[(($221)>>2)]=$219; //@line 9769 "tcc_bootstrap.c"
 var $222=$ph; //@line 9770 "tcc_bootstrap.c"
 var $223=(($222+8)|0); //@line 9770 "tcc_bootstrap.c"
 var $224=HEAP32[(($223)>>2)]; //@line 9770 "tcc_bootstrap.c"
 var $225=$ph; //@line 9770 "tcc_bootstrap.c"
 var $226=(($225+12)|0); //@line 9770 "tcc_bootstrap.c"
 HEAP32[(($226)>>2)]=$224; //@line 9770 "tcc_bootstrap.c"
 label=52;break; //@line 9771 "tcc_bootstrap.c"
 case 52: 
 var $228=$s; //@line 9772 "tcc_bootstrap.c"
 var $229=(($228+20)|0); //@line 9772 "tcc_bootstrap.c"
 var $230=HEAP32[(($229)>>2)]; //@line 9772 "tcc_bootstrap.c"
 var $231=($230|0)==9; //@line 9772 "tcc_bootstrap.c"
 if($231){label=53;break;}else{label=56;break;} //@line 9772 "tcc_bootstrap.c"
 case 53: 
 var $233=$6; //@line 9773 "tcc_bootstrap.c"
 var $234=(($233+16)|0); //@line 9773 "tcc_bootstrap.c"
 var $235=HEAP32[(($234)>>2)]; //@line 9773 "tcc_bootstrap.c"
 var $236=($235|0)==0; //@line 9773 "tcc_bootstrap.c"
 if($236){label=54;break;}else{label=55;break;} //@line 9773 "tcc_bootstrap.c"
 case 54: 
 var $238=$addr; //@line 9774 "tcc_bootstrap.c"
 var $239=$6; //@line 9774 "tcc_bootstrap.c"
 var $240=(($239+12)|0); //@line 9774 "tcc_bootstrap.c"
 HEAP32[(($240)>>2)]=$238; //@line 9774 "tcc_bootstrap.c"
 label=55;break; //@line 9774 "tcc_bootstrap.c"
 case 55: 
 var $242=$s; //@line 9775 "tcc_bootstrap.c"
 var $243=(($242+40)|0); //@line 9775 "tcc_bootstrap.c"
 var $244=HEAP32[(($243)>>2)]; //@line 9775 "tcc_bootstrap.c"
 var $245=$6; //@line 9775 "tcc_bootstrap.c"
 var $246=(($245+16)|0); //@line 9775 "tcc_bootstrap.c"
 var $247=HEAP32[(($246)>>2)]; //@line 9775 "tcc_bootstrap.c"
 var $248=((($247)+($244))|0); //@line 9775 "tcc_bootstrap.c"
 HEAP32[(($246)>>2)]=$248; //@line 9775 "tcc_bootstrap.c"
 label=56;break; //@line 9776 "tcc_bootstrap.c"
 case 56: 
 var $250=$s; //@line 9777 "tcc_bootstrap.c"
 var $251=(($250+40)|0); //@line 9777 "tcc_bootstrap.c"
 var $252=HEAP32[(($251)>>2)]; //@line 9777 "tcc_bootstrap.c"
 var $253=$addr; //@line 9777 "tcc_bootstrap.c"
 var $254=((($253)+($252))|0); //@line 9777 "tcc_bootstrap.c"
 $addr=$254; //@line 9777 "tcc_bootstrap.c"
 var $255=$s; //@line 9778 "tcc_bootstrap.c"
 var $256=(($255+20)|0); //@line 9778 "tcc_bootstrap.c"
 var $257=HEAP32[(($256)>>2)]; //@line 9778 "tcc_bootstrap.c"
 var $258=($257|0)!=8; //@line 9778 "tcc_bootstrap.c"
 if($258){label=57;break;}else{label=58;break;} //@line 9778 "tcc_bootstrap.c"
 case 57: 
 var $260=$s; //@line 9779 "tcc_bootstrap.c"
 var $261=(($260+40)|0); //@line 9779 "tcc_bootstrap.c"
 var $262=HEAP32[(($261)>>2)]; //@line 9779 "tcc_bootstrap.c"
 var $263=$file_offset; //@line 9779 "tcc_bootstrap.c"
 var $264=((($263)+($262))|0); //@line 9779 "tcc_bootstrap.c"
 $file_offset=$264; //@line 9779 "tcc_bootstrap.c"
 label=58;break; //@line 9779 "tcc_bootstrap.c"
 case 58: 
 label=59;break; //@line 9780 "tcc_bootstrap.c"
 case 59: 
 var $267=$i; //@line 9731 "tcc_bootstrap.c"
 var $268=((($267)+(1))|0); //@line 9731 "tcc_bootstrap.c"
 $i=$268; //@line 9731 "tcc_bootstrap.c"
 label=18;break; //@line 9731 "tcc_bootstrap.c"
 case 60: 
 label=61;break; //@line 9781 "tcc_bootstrap.c"
 case 61: 
 var $271=$k; //@line 9730 "tcc_bootstrap.c"
 var $272=((($271)+(1))|0); //@line 9730 "tcc_bootstrap.c"
 $k=$272; //@line 9730 "tcc_bootstrap.c"
 label=16;break; //@line 9730 "tcc_bootstrap.c"
 case 62: 
 var $274=$j; //@line 9782 "tcc_bootstrap.c"
 var $275=($274|0)==0; //@line 9782 "tcc_bootstrap.c"
 if($275){label=63;break;}else{label=64;break;} //@line 9782 "tcc_bootstrap.c"
 case 63: 
 var $277=$ph; //@line 9783 "tcc_bootstrap.c"
 var $278=(($277+28)|0); //@line 9783 "tcc_bootstrap.c"
 var $279=HEAP32[(($278)>>2)]; //@line 9783 "tcc_bootstrap.c"
 var $280=((($279)-(1))|0); //@line 9783 "tcc_bootstrap.c"
 var $281=$280^-1; //@line 9783 "tcc_bootstrap.c"
 var $282=$ph; //@line 9783 "tcc_bootstrap.c"
 var $283=(($282+4)|0); //@line 9783 "tcc_bootstrap.c"
 var $284=HEAP32[(($283)>>2)]; //@line 9783 "tcc_bootstrap.c"
 var $285=$284&$281; //@line 9783 "tcc_bootstrap.c"
 HEAP32[(($283)>>2)]=$285; //@line 9783 "tcc_bootstrap.c"
 var $286=$ph; //@line 9784 "tcc_bootstrap.c"
 var $287=(($286+28)|0); //@line 9784 "tcc_bootstrap.c"
 var $288=HEAP32[(($287)>>2)]; //@line 9784 "tcc_bootstrap.c"
 var $289=((($288)-(1))|0); //@line 9784 "tcc_bootstrap.c"
 var $290=$289^-1; //@line 9784 "tcc_bootstrap.c"
 var $291=$ph; //@line 9784 "tcc_bootstrap.c"
 var $292=(($291+8)|0); //@line 9784 "tcc_bootstrap.c"
 var $293=HEAP32[(($292)>>2)]; //@line 9784 "tcc_bootstrap.c"
 var $294=$293&$290; //@line 9784 "tcc_bootstrap.c"
 HEAP32[(($292)>>2)]=$294; //@line 9784 "tcc_bootstrap.c"
 var $295=$ph; //@line 9785 "tcc_bootstrap.c"
 var $296=(($295+28)|0); //@line 9785 "tcc_bootstrap.c"
 var $297=HEAP32[(($296)>>2)]; //@line 9785 "tcc_bootstrap.c"
 var $298=((($297)-(1))|0); //@line 9785 "tcc_bootstrap.c"
 var $299=$298^-1; //@line 9785 "tcc_bootstrap.c"
 var $300=$ph; //@line 9785 "tcc_bootstrap.c"
 var $301=(($300+12)|0); //@line 9785 "tcc_bootstrap.c"
 var $302=HEAP32[(($301)>>2)]; //@line 9785 "tcc_bootstrap.c"
 var $303=$302&$299; //@line 9785 "tcc_bootstrap.c"
 HEAP32[(($301)>>2)]=$303; //@line 9785 "tcc_bootstrap.c"
 label=64;break; //@line 9786 "tcc_bootstrap.c"
 case 64: 
 var $305=$file_offset; //@line 9787 "tcc_bootstrap.c"
 var $306=$ph; //@line 9787 "tcc_bootstrap.c"
 var $307=(($306+4)|0); //@line 9787 "tcc_bootstrap.c"
 var $308=HEAP32[(($307)>>2)]; //@line 9787 "tcc_bootstrap.c"
 var $309=((($305)-($308))|0); //@line 9787 "tcc_bootstrap.c"
 var $310=$ph; //@line 9787 "tcc_bootstrap.c"
 var $311=(($310+16)|0); //@line 9787 "tcc_bootstrap.c"
 HEAP32[(($311)>>2)]=$309; //@line 9787 "tcc_bootstrap.c"
 var $312=$addr; //@line 9788 "tcc_bootstrap.c"
 var $313=$ph; //@line 9788 "tcc_bootstrap.c"
 var $314=(($313+8)|0); //@line 9788 "tcc_bootstrap.c"
 var $315=HEAP32[(($314)>>2)]; //@line 9788 "tcc_bootstrap.c"
 var $316=((($312)-($315))|0); //@line 9788 "tcc_bootstrap.c"
 var $317=$ph; //@line 9788 "tcc_bootstrap.c"
 var $318=(($317+20)|0); //@line 9788 "tcc_bootstrap.c"
 HEAP32[(($318)>>2)]=$316; //@line 9788 "tcc_bootstrap.c"
 var $319=$ph; //@line 9789 "tcc_bootstrap.c"
 var $320=(($319+32)|0); //@line 9789 "tcc_bootstrap.c"
 $ph=$320; //@line 9789 "tcc_bootstrap.c"
 var $321=$j; //@line 9790 "tcc_bootstrap.c"
 var $322=($321|0)==0; //@line 9790 "tcc_bootstrap.c"
 if($322){label=65;break;}else{label=71;break;} //@line 9790 "tcc_bootstrap.c"
 case 65: 
 var $324=$1; //@line 9791 "tcc_bootstrap.c"
 var $325=(($324+8)|0); //@line 9791 "tcc_bootstrap.c"
 var $326=HEAP32[(($325)>>2)]; //@line 9791 "tcc_bootstrap.c"
 var $327=($326|0)==0; //@line 9791 "tcc_bootstrap.c"
 if($327){label=66;break;}else{label=69;break;} //@line 9791 "tcc_bootstrap.c"
 case 66: 
 var $329=$addr; //@line 9792 "tcc_bootstrap.c"
 var $330=$s_align; //@line 9792 "tcc_bootstrap.c"
 var $331=((($330)-(1))|0); //@line 9792 "tcc_bootstrap.c"
 var $332=$329&$331; //@line 9792 "tcc_bootstrap.c"
 var $333=($332|0)!=0; //@line 9792 "tcc_bootstrap.c"
 if($333){label=67;break;}else{label=68;break;} //@line 9792 "tcc_bootstrap.c"
 case 67: 
 var $335=$s_align; //@line 9793 "tcc_bootstrap.c"
 var $336=$addr; //@line 9793 "tcc_bootstrap.c"
 var $337=((($336)+($335))|0); //@line 9793 "tcc_bootstrap.c"
 $addr=$337; //@line 9793 "tcc_bootstrap.c"
 label=68;break; //@line 9793 "tcc_bootstrap.c"
 case 68: 
 label=70;break; //@line 9794 "tcc_bootstrap.c"
 case 69: 
 var $340=$addr; //@line 9795 "tcc_bootstrap.c"
 var $341=$s_align; //@line 9795 "tcc_bootstrap.c"
 var $342=((($340)+($341))|0); //@line 9795 "tcc_bootstrap.c"
 var $343=((($342)-(1))|0); //@line 9795 "tcc_bootstrap.c"
 var $344=$s_align; //@line 9795 "tcc_bootstrap.c"
 var $345=((($344)-(1))|0); //@line 9795 "tcc_bootstrap.c"
 var $346=$345^-1; //@line 9795 "tcc_bootstrap.c"
 var $347=$343&$346; //@line 9795 "tcc_bootstrap.c"
 $addr=$347; //@line 9795 "tcc_bootstrap.c"
 var $348=$file_offset; //@line 9796 "tcc_bootstrap.c"
 var $349=$s_align; //@line 9796 "tcc_bootstrap.c"
 var $350=((($348)+($349))|0); //@line 9796 "tcc_bootstrap.c"
 var $351=((($350)-(1))|0); //@line 9796 "tcc_bootstrap.c"
 var $352=$s_align; //@line 9796 "tcc_bootstrap.c"
 var $353=((($352)-(1))|0); //@line 9796 "tcc_bootstrap.c"
 var $354=$353^-1; //@line 9796 "tcc_bootstrap.c"
 var $355=$351&$354; //@line 9796 "tcc_bootstrap.c"
 $file_offset=$355; //@line 9796 "tcc_bootstrap.c"
 label=70;break;
 case 70: 
 label=71;break; //@line 9798 "tcc_bootstrap.c"
 case 71: 
 label=72;break; //@line 9799 "tcc_bootstrap.c"
 case 72: 
 var $359=$j; //@line 9723 "tcc_bootstrap.c"
 var $360=((($359)+(1))|0); //@line 9723 "tcc_bootstrap.c"
 $j=$360; //@line 9723 "tcc_bootstrap.c"
 label=11;break; //@line 9723 "tcc_bootstrap.c"
 case 73: 
 label=74;break; //@line 9800 "tcc_bootstrap.c"
 case 74: 
 $i=1; //@line 9801 "tcc_bootstrap.c"
 label=75;break; //@line 9801 "tcc_bootstrap.c"
 case 75: 
 var $364=$i; //@line 9801 "tcc_bootstrap.c"
 var $365=$1; //@line 9801 "tcc_bootstrap.c"
 var $366=(($365+684)|0); //@line 9801 "tcc_bootstrap.c"
 var $367=HEAP32[(($366)>>2)]; //@line 9801 "tcc_bootstrap.c"
 var $368=($364|0)<($367|0); //@line 9801 "tcc_bootstrap.c"
 if($368){label=76;break;}else{label=83;break;} //@line 9801 "tcc_bootstrap.c"
 case 76: 
 var $370=$i; //@line 9802 "tcc_bootstrap.c"
 var $371=$1; //@line 9802 "tcc_bootstrap.c"
 var $372=(($371+680)|0); //@line 9802 "tcc_bootstrap.c"
 var $373=HEAP32[(($372)>>2)]; //@line 9802 "tcc_bootstrap.c"
 var $374=(($373+($370<<2))|0); //@line 9802 "tcc_bootstrap.c"
 var $375=HEAP32[(($374)>>2)]; //@line 9802 "tcc_bootstrap.c"
 $s=$375; //@line 9802 "tcc_bootstrap.c"
 var $376=$3; //@line 9803 "tcc_bootstrap.c"
 var $377=($376|0)>0; //@line 9803 "tcc_bootstrap.c"
 if($377){label=77;break;}else{label=79;break;} //@line 9803 "tcc_bootstrap.c"
 case 77: 
 var $379=$s; //@line 9803 "tcc_bootstrap.c"
 var $380=(($379+24)|0); //@line 9803 "tcc_bootstrap.c"
 var $381=HEAP32[(($380)>>2)]; //@line 9803 "tcc_bootstrap.c"
 var $382=$381&2; //@line 9803 "tcc_bootstrap.c"
 var $383=($382|0)!=0; //@line 9803 "tcc_bootstrap.c"
 if($383){label=78;break;}else{label=79;break;} //@line 9803 "tcc_bootstrap.c"
 case 78: 
 label=82;break; //@line 9804 "tcc_bootstrap.c"
 case 79: 
 var $386=$i; //@line 9805 "tcc_bootstrap.c"
 var $387=$sh_order_index; //@line 9805 "tcc_bootstrap.c"
 var $388=((($387)+(1))|0); //@line 9805 "tcc_bootstrap.c"
 $sh_order_index=$388; //@line 9805 "tcc_bootstrap.c"
 var $389=$7; //@line 9805 "tcc_bootstrap.c"
 var $390=(($389+($387<<2))|0); //@line 9805 "tcc_bootstrap.c"
 HEAP32[(($390)>>2)]=$386; //@line 9805 "tcc_bootstrap.c"
 var $391=$file_offset; //@line 9807 "tcc_bootstrap.c"
 var $392=$s; //@line 9807 "tcc_bootstrap.c"
 var $393=(($392+32)|0); //@line 9807 "tcc_bootstrap.c"
 var $394=HEAP32[(($393)>>2)]; //@line 9807 "tcc_bootstrap.c"
 var $395=((($391)+($394))|0); //@line 9807 "tcc_bootstrap.c"
 var $396=((($395)-(1))|0); //@line 9807 "tcc_bootstrap.c"
 var $397=$s; //@line 9807 "tcc_bootstrap.c"
 var $398=(($397+32)|0); //@line 9807 "tcc_bootstrap.c"
 var $399=HEAP32[(($398)>>2)]; //@line 9807 "tcc_bootstrap.c"
 var $400=((($399)-(1))|0); //@line 9807 "tcc_bootstrap.c"
 var $401=$400^-1; //@line 9807 "tcc_bootstrap.c"
 var $402=$396&$401; //@line 9807 "tcc_bootstrap.c"
 $file_offset=$402; //@line 9807 "tcc_bootstrap.c"
 var $403=$file_offset; //@line 9809 "tcc_bootstrap.c"
 var $404=$s; //@line 9809 "tcc_bootstrap.c"
 var $405=(($404+48)|0); //@line 9809 "tcc_bootstrap.c"
 HEAP32[(($405)>>2)]=$403; //@line 9809 "tcc_bootstrap.c"
 var $406=$s; //@line 9810 "tcc_bootstrap.c"
 var $407=(($406+20)|0); //@line 9810 "tcc_bootstrap.c"
 var $408=HEAP32[(($407)>>2)]; //@line 9810 "tcc_bootstrap.c"
 var $409=($408|0)!=8; //@line 9810 "tcc_bootstrap.c"
 if($409){label=80;break;}else{label=81;break;} //@line 9810 "tcc_bootstrap.c"
 case 80: 
 var $411=$s; //@line 9811 "tcc_bootstrap.c"
 var $412=(($411+40)|0); //@line 9811 "tcc_bootstrap.c"
 var $413=HEAP32[(($412)>>2)]; //@line 9811 "tcc_bootstrap.c"
 var $414=$file_offset; //@line 9811 "tcc_bootstrap.c"
 var $415=((($414)+($413))|0); //@line 9811 "tcc_bootstrap.c"
 $file_offset=$415; //@line 9811 "tcc_bootstrap.c"
 label=81;break; //@line 9811 "tcc_bootstrap.c"
 case 81: 
 label=82;break; //@line 9812 "tcc_bootstrap.c"
 case 82: 
 var $418=$i; //@line 9801 "tcc_bootstrap.c"
 var $419=((($418)+(1))|0); //@line 9801 "tcc_bootstrap.c"
 $i=$419; //@line 9801 "tcc_bootstrap.c"
 label=75;break; //@line 9801 "tcc_bootstrap.c"
 case 83: 
 var $421=$file_offset; //@line 9814 "tcc_bootstrap.c"
 STACKTOP=sp;return $421; //@line 9814 "tcc_bootstrap.c"
  default: assert(0, "bad label: " + label);
 }

}


function _tcc_write_elf_file($s1,$filename,$phnum,$phdr,$file_offset,$sec_order){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 var $fd;
 var $mode;
 var $file_type;
 var $f;
 $1=$s1;
 $2=$filename;
 $3=$phnum;
 $4=$phdr;
 $5=$file_offset;
 $6=$sec_order;
 var $7=$2; //@line 9893 "tcc_bootstrap.c"
 var $8=_unlink($7); //@line 9893 "tcc_bootstrap.c"
 var $9=$2; //@line 9894 "tcc_bootstrap.c"
 var $10=_fopen($9,4528); //@line 9894 "tcc_bootstrap.c"
 $f=$10; //@line 9894 "tcc_bootstrap.c"
 var $11=$1; //@line 9895 "tcc_bootstrap.c"
 var $12=$f; //@line 9895 "tcc_bootstrap.c"
 var $13=$3; //@line 9895 "tcc_bootstrap.c"
 var $14=$4; //@line 9895 "tcc_bootstrap.c"
 var $15=$5; //@line 9895 "tcc_bootstrap.c"
 var $16=$6; //@line 9895 "tcc_bootstrap.c"
 _tcc_output_elf($11,$12,$13,$14,$15,$16); //@line 9895 "tcc_bootstrap.c"
 var $17=$f; //@line 9896 "tcc_bootstrap.c"
 var $18=_fclose($17); //@line 9896 "tcc_bootstrap.c"
 STACKTOP=sp;return 0; //@line 9897 "tcc_bootstrap.c"
}


function _tcc_output_elf($s1,$f,$phnum,$phdr,$file_offset,$sec_order){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+96)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 var $i;
 var $shnum;
 var $offset;
 var $size;
 var $file_type;
 var $s;
 var $ehdr=sp;
 var $shdr=(sp)+(56);
 var $sh;
 $1=$s1;
 $2=$f;
 $3=$phnum;
 $4=$phdr;
 $5=$file_offset;
 $6=$sec_order;
 var $7=$1; //@line 9823 "tcc_bootstrap.c"
 var $8=(($7+4)|0); //@line 9823 "tcc_bootstrap.c"
 var $9=HEAP32[(($8)>>2)]; //@line 9823 "tcc_bootstrap.c"
 $file_type=$9; //@line 9823 "tcc_bootstrap.c"
 var $10=$1; //@line 9824 "tcc_bootstrap.c"
 var $11=(($10+684)|0); //@line 9824 "tcc_bootstrap.c"
 var $12=HEAP32[(($11)>>2)]; //@line 9824 "tcc_bootstrap.c"
 $shnum=$12; //@line 9824 "tcc_bootstrap.c"
 var $13=$ehdr; //@line 9825 "tcc_bootstrap.c"
 _memset($13, 0, 52)|0; //@line 9825 "tcc_bootstrap.c"
 var $14=$3; //@line 9826 "tcc_bootstrap.c"
 var $15=($14|0)>0; //@line 9826 "tcc_bootstrap.c"
 if($15){label=2;break;}else{label=3;break;} //@line 9826 "tcc_bootstrap.c"
 case 2: 
 var $17=(($ehdr+42)|0); //@line 9827 "tcc_bootstrap.c"
 HEAP16[(($17)>>1)]=32; //@line 9827 "tcc_bootstrap.c"
 var $18=$3; //@line 9828 "tcc_bootstrap.c"
 var $19=(($18)&65535); //@line 9828 "tcc_bootstrap.c"
 var $20=(($ehdr+44)|0); //@line 9828 "tcc_bootstrap.c"
 HEAP16[(($20)>>1)]=$19; //@line 9828 "tcc_bootstrap.c"
 var $21=(($ehdr+28)|0); //@line 9829 "tcc_bootstrap.c"
 HEAP32[(($21)>>2)]=52; //@line 9829 "tcc_bootstrap.c"
 label=3;break; //@line 9830 "tcc_bootstrap.c"
 case 3: 
 var $23=$5; //@line 9831 "tcc_bootstrap.c"
 var $24=((($23)+(3))|0); //@line 9831 "tcc_bootstrap.c"
 var $25=$24&-4; //@line 9831 "tcc_bootstrap.c"
 $5=$25; //@line 9831 "tcc_bootstrap.c"
 var $26=(($ehdr)|0); //@line 9832 "tcc_bootstrap.c"
 var $27=(($26)|0); //@line 9832 "tcc_bootstrap.c"
 HEAP8[(($27)>>0)]=127; //@line 9832 "tcc_bootstrap.c"
 var $28=(($ehdr)|0); //@line 9833 "tcc_bootstrap.c"
 var $29=(($28+1)|0); //@line 9833 "tcc_bootstrap.c"
 HEAP8[(($29)>>0)]=69; //@line 9833 "tcc_bootstrap.c"
 var $30=(($ehdr)|0); //@line 9834 "tcc_bootstrap.c"
 var $31=(($30+2)|0); //@line 9834 "tcc_bootstrap.c"
 HEAP8[(($31)>>0)]=76; //@line 9834 "tcc_bootstrap.c"
 var $32=(($ehdr)|0); //@line 9835 "tcc_bootstrap.c"
 var $33=(($32+3)|0); //@line 9835 "tcc_bootstrap.c"
 HEAP8[(($33)>>0)]=70; //@line 9835 "tcc_bootstrap.c"
 var $34=(($ehdr)|0); //@line 9836 "tcc_bootstrap.c"
 var $35=(($34+4)|0); //@line 9836 "tcc_bootstrap.c"
 HEAP8[(($35)>>0)]=1; //@line 9836 "tcc_bootstrap.c"
 var $36=(($ehdr)|0); //@line 9837 "tcc_bootstrap.c"
 var $37=(($36+5)|0); //@line 9837 "tcc_bootstrap.c"
 HEAP8[(($37)>>0)]=1; //@line 9837 "tcc_bootstrap.c"
 var $38=(($ehdr)|0); //@line 9838 "tcc_bootstrap.c"
 var $39=(($38+6)|0); //@line 9838 "tcc_bootstrap.c"
 HEAP8[(($39)>>0)]=1; //@line 9838 "tcc_bootstrap.c"
 var $40=(($ehdr+16)|0); //@line 9839 "tcc_bootstrap.c"
 HEAP16[(($40)>>1)]=1; //@line 9839 "tcc_bootstrap.c"
 var $41=(($ehdr+18)|0); //@line 9840 "tcc_bootstrap.c"
 HEAP16[(($41)>>1)]=3; //@line 9840 "tcc_bootstrap.c"
 var $42=(($ehdr+20)|0); //@line 9841 "tcc_bootstrap.c"
 HEAP32[(($42)>>2)]=1; //@line 9841 "tcc_bootstrap.c"
 var $43=$5; //@line 9842 "tcc_bootstrap.c"
 var $44=(($ehdr+32)|0); //@line 9842 "tcc_bootstrap.c"
 HEAP32[(($44)>>2)]=$43; //@line 9842 "tcc_bootstrap.c"
 var $45=(($ehdr+40)|0); //@line 9843 "tcc_bootstrap.c"
 HEAP16[(($45)>>1)]=52; //@line 9843 "tcc_bootstrap.c"
 var $46=(($ehdr+46)|0); //@line 9844 "tcc_bootstrap.c"
 HEAP16[(($46)>>1)]=40; //@line 9844 "tcc_bootstrap.c"
 var $47=$shnum; //@line 9845 "tcc_bootstrap.c"
 var $48=(($47)&65535); //@line 9845 "tcc_bootstrap.c"
 var $49=(($ehdr+48)|0); //@line 9845 "tcc_bootstrap.c"
 HEAP16[(($49)>>1)]=$48; //@line 9845 "tcc_bootstrap.c"
 var $50=$shnum; //@line 9846 "tcc_bootstrap.c"
 var $51=((($50)-(1))|0); //@line 9846 "tcc_bootstrap.c"
 var $52=(($51)&65535); //@line 9846 "tcc_bootstrap.c"
 var $53=(($ehdr+50)|0); //@line 9846 "tcc_bootstrap.c"
 HEAP16[(($53)>>1)]=$52; //@line 9846 "tcc_bootstrap.c"
 var $54=$ehdr; //@line 9847 "tcc_bootstrap.c"
 var $55=$2; //@line 9847 "tcc_bootstrap.c"
 var $56=_fwrite($54,1,52,$55); //@line 9847 "tcc_bootstrap.c"
 var $57=$4; //@line 9848 "tcc_bootstrap.c"
 var $58=$57; //@line 9848 "tcc_bootstrap.c"
 var $59=$3; //@line 9848 "tcc_bootstrap.c"
 var $60=($59<<5); //@line 9848 "tcc_bootstrap.c"
 var $61=$2; //@line 9848 "tcc_bootstrap.c"
 var $62=_fwrite($58,1,$60,$61); //@line 9848 "tcc_bootstrap.c"
 var $63=$3; //@line 9849 "tcc_bootstrap.c"
 var $64=($63<<5); //@line 9849 "tcc_bootstrap.c"
 var $65=((($64)+(52))|0); //@line 9849 "tcc_bootstrap.c"
 $offset=$65; //@line 9849 "tcc_bootstrap.c"
 var $66=$1; //@line 9850 "tcc_bootstrap.c"
 var $67=HEAP32[((10504)>>2)]; //@line 9850 "tcc_bootstrap.c"
 _sort_syms($66,$67); //@line 9850 "tcc_bootstrap.c"
 $i=1; //@line 9851 "tcc_bootstrap.c"
 label=4;break; //@line 9851 "tcc_bootstrap.c"
 case 4: 
 var $69=$i; //@line 9851 "tcc_bootstrap.c"
 var $70=$1; //@line 9851 "tcc_bootstrap.c"
 var $71=(($70+684)|0); //@line 9851 "tcc_bootstrap.c"
 var $72=HEAP32[(($71)>>2)]; //@line 9851 "tcc_bootstrap.c"
 var $73=($69|0)<($72|0); //@line 9851 "tcc_bootstrap.c"
 if($73){label=5;break;}else{label=14;break;} //@line 9851 "tcc_bootstrap.c"
 case 5: 
 var $75=$i; //@line 9852 "tcc_bootstrap.c"
 var $76=$6; //@line 9852 "tcc_bootstrap.c"
 var $77=(($76+($75<<2))|0); //@line 9852 "tcc_bootstrap.c"
 var $78=HEAP32[(($77)>>2)]; //@line 9852 "tcc_bootstrap.c"
 var $79=$1; //@line 9852 "tcc_bootstrap.c"
 var $80=(($79+680)|0); //@line 9852 "tcc_bootstrap.c"
 var $81=HEAP32[(($80)>>2)]; //@line 9852 "tcc_bootstrap.c"
 var $82=(($81+($78<<2))|0); //@line 9852 "tcc_bootstrap.c"
 var $83=HEAP32[(($82)>>2)]; //@line 9852 "tcc_bootstrap.c"
 $s=$83; //@line 9852 "tcc_bootstrap.c"
 var $84=$s; //@line 9853 "tcc_bootstrap.c"
 var $85=(($84+20)|0); //@line 9853 "tcc_bootstrap.c"
 var $86=HEAP32[(($85)>>2)]; //@line 9853 "tcc_bootstrap.c"
 var $87=($86|0)!=8; //@line 9853 "tcc_bootstrap.c"
 if($87){label=6;break;}else{label=12;break;} //@line 9853 "tcc_bootstrap.c"
 case 6: 
 label=7;break; //@line 9854 "tcc_bootstrap.c"
 case 7: 
 var $90=$offset; //@line 9854 "tcc_bootstrap.c"
 var $91=$s; //@line 9854 "tcc_bootstrap.c"
 var $92=(($91+48)|0); //@line 9854 "tcc_bootstrap.c"
 var $93=HEAP32[(($92)>>2)]; //@line 9854 "tcc_bootstrap.c"
 var $94=($90>>>0)<($93>>>0); //@line 9854 "tcc_bootstrap.c"
 if($94){label=8;break;}else{label=9;break;} //@line 9854 "tcc_bootstrap.c"
 case 8: 
 var $96=$2; //@line 9855 "tcc_bootstrap.c"
 var $97=_fputc(0,$96); //@line 9855 "tcc_bootstrap.c"
 var $98=$offset; //@line 9856 "tcc_bootstrap.c"
 var $99=((($98)+(1))|0); //@line 9856 "tcc_bootstrap.c"
 $offset=$99; //@line 9856 "tcc_bootstrap.c"
 label=7;break; //@line 9857 "tcc_bootstrap.c"
 case 9: 
 var $101=$s; //@line 9858 "tcc_bootstrap.c"
 var $102=(($101+40)|0); //@line 9858 "tcc_bootstrap.c"
 var $103=HEAP32[(($102)>>2)]; //@line 9858 "tcc_bootstrap.c"
 $size=$103; //@line 9858 "tcc_bootstrap.c"
 var $104=$size; //@line 9859 "tcc_bootstrap.c"
 var $105=($104|0)!=0; //@line 9859 "tcc_bootstrap.c"
 if($105){label=10;break;}else{label=11;break;} //@line 9859 "tcc_bootstrap.c"
 case 10: 
 var $107=$s; //@line 9860 "tcc_bootstrap.c"
 var $108=(($107+4)|0); //@line 9860 "tcc_bootstrap.c"
 var $109=HEAP32[(($108)>>2)]; //@line 9860 "tcc_bootstrap.c"
 var $110=$size; //@line 9860 "tcc_bootstrap.c"
 var $111=$2; //@line 9860 "tcc_bootstrap.c"
 var $112=_fwrite($109,1,$110,$111); //@line 9860 "tcc_bootstrap.c"
 label=11;break; //@line 9860 "tcc_bootstrap.c"
 case 11: 
 var $114=$size; //@line 9861 "tcc_bootstrap.c"
 var $115=$offset; //@line 9861 "tcc_bootstrap.c"
 var $116=((($115)+($114))|0); //@line 9861 "tcc_bootstrap.c"
 $offset=$116; //@line 9861 "tcc_bootstrap.c"
 label=12;break; //@line 9862 "tcc_bootstrap.c"
 case 12: 
 label=13;break; //@line 9863 "tcc_bootstrap.c"
 case 13: 
 var $119=$i; //@line 9851 "tcc_bootstrap.c"
 var $120=((($119)+(1))|0); //@line 9851 "tcc_bootstrap.c"
 $i=$120; //@line 9851 "tcc_bootstrap.c"
 label=4;break; //@line 9851 "tcc_bootstrap.c"
 case 14: 
 label=15;break; //@line 9864 "tcc_bootstrap.c"
 case 15: 
 var $123=$offset; //@line 9864 "tcc_bootstrap.c"
 var $124=(($ehdr+32)|0); //@line 9864 "tcc_bootstrap.c"
 var $125=HEAP32[(($124)>>2)]; //@line 9864 "tcc_bootstrap.c"
 var $126=($123>>>0)<($125>>>0); //@line 9864 "tcc_bootstrap.c"
 if($126){label=16;break;}else{label=17;break;} //@line 9864 "tcc_bootstrap.c"
 case 16: 
 var $128=$2; //@line 9865 "tcc_bootstrap.c"
 var $129=_fputc(0,$128); //@line 9865 "tcc_bootstrap.c"
 var $130=$offset; //@line 9866 "tcc_bootstrap.c"
 var $131=((($130)+(1))|0); //@line 9866 "tcc_bootstrap.c"
 $offset=$131; //@line 9866 "tcc_bootstrap.c"
 label=15;break; //@line 9867 "tcc_bootstrap.c"
 case 17: 
 $i=0; //@line 9868 "tcc_bootstrap.c"
 label=18;break; //@line 9868 "tcc_bootstrap.c"
 case 18: 
 var $134=$i; //@line 9868 "tcc_bootstrap.c"
 var $135=$1; //@line 9868 "tcc_bootstrap.c"
 var $136=(($135+684)|0); //@line 9868 "tcc_bootstrap.c"
 var $137=HEAP32[(($136)>>2)]; //@line 9868 "tcc_bootstrap.c"
 var $138=($134|0)<($137|0); //@line 9868 "tcc_bootstrap.c"
 if($138){label=19;break;}else{label=25;break;} //@line 9868 "tcc_bootstrap.c"
 case 19: 
 $sh=$shdr; //@line 9869 "tcc_bootstrap.c"
 var $140=$sh; //@line 9870 "tcc_bootstrap.c"
 var $141=$140; //@line 9870 "tcc_bootstrap.c"
 _memset($141, 0, 40)|0; //@line 9870 "tcc_bootstrap.c"
 var $142=$i; //@line 9871 "tcc_bootstrap.c"
 var $143=$1; //@line 9871 "tcc_bootstrap.c"
 var $144=(($143+680)|0); //@line 9871 "tcc_bootstrap.c"
 var $145=HEAP32[(($144)>>2)]; //@line 9871 "tcc_bootstrap.c"
 var $146=(($145+($142<<2))|0); //@line 9871 "tcc_bootstrap.c"
 var $147=HEAP32[(($146)>>2)]; //@line 9871 "tcc_bootstrap.c"
 $s=$147; //@line 9871 "tcc_bootstrap.c"
 var $148=$s; //@line 9872 "tcc_bootstrap.c"
 var $149=($148|0)!=0; //@line 9872 "tcc_bootstrap.c"
 if($149){label=20;break;}else{label=23;break;} //@line 9872 "tcc_bootstrap.c"
 case 20: 
 var $151=$s; //@line 9873 "tcc_bootstrap.c"
 var $152=(($151+12)|0); //@line 9873 "tcc_bootstrap.c"
 var $153=HEAP32[(($152)>>2)]; //@line 9873 "tcc_bootstrap.c"
 var $154=$sh; //@line 9873 "tcc_bootstrap.c"
 var $155=(($154)|0); //@line 9873 "tcc_bootstrap.c"
 HEAP32[(($155)>>2)]=$153; //@line 9873 "tcc_bootstrap.c"
 var $156=$s; //@line 9874 "tcc_bootstrap.c"
 var $157=(($156+20)|0); //@line 9874 "tcc_bootstrap.c"
 var $158=HEAP32[(($157)>>2)]; //@line 9874 "tcc_bootstrap.c"
 var $159=$sh; //@line 9874 "tcc_bootstrap.c"
 var $160=(($159+4)|0); //@line 9874 "tcc_bootstrap.c"
 HEAP32[(($160)>>2)]=$158; //@line 9874 "tcc_bootstrap.c"
 var $161=$s; //@line 9875 "tcc_bootstrap.c"
 var $162=(($161+24)|0); //@line 9875 "tcc_bootstrap.c"
 var $163=HEAP32[(($162)>>2)]; //@line 9875 "tcc_bootstrap.c"
 var $164=$sh; //@line 9875 "tcc_bootstrap.c"
 var $165=(($164+8)|0); //@line 9875 "tcc_bootstrap.c"
 HEAP32[(($165)>>2)]=$163; //@line 9875 "tcc_bootstrap.c"
 var $166=$s; //@line 9876 "tcc_bootstrap.c"
 var $167=(($166+36)|0); //@line 9876 "tcc_bootstrap.c"
 var $168=HEAP32[(($167)>>2)]; //@line 9876 "tcc_bootstrap.c"
 var $169=$sh; //@line 9876 "tcc_bootstrap.c"
 var $170=(($169+36)|0); //@line 9876 "tcc_bootstrap.c"
 HEAP32[(($170)>>2)]=$168; //@line 9876 "tcc_bootstrap.c"
 var $171=$s; //@line 9877 "tcc_bootstrap.c"
 var $172=(($171+28)|0); //@line 9877 "tcc_bootstrap.c"
 var $173=HEAP32[(($172)>>2)]; //@line 9877 "tcc_bootstrap.c"
 var $174=$sh; //@line 9877 "tcc_bootstrap.c"
 var $175=(($174+28)|0); //@line 9877 "tcc_bootstrap.c"
 HEAP32[(($175)>>2)]=$173; //@line 9877 "tcc_bootstrap.c"
 var $176=$s; //@line 9878 "tcc_bootstrap.c"
 var $177=(($176+56)|0); //@line 9878 "tcc_bootstrap.c"
 var $178=HEAP32[(($177)>>2)]; //@line 9878 "tcc_bootstrap.c"
 var $179=($178|0)!=0; //@line 9878 "tcc_bootstrap.c"
 if($179){label=21;break;}else{label=22;break;} //@line 9878 "tcc_bootstrap.c"
 case 21: 
 var $181=$s; //@line 9879 "tcc_bootstrap.c"
 var $182=(($181+56)|0); //@line 9879 "tcc_bootstrap.c"
 var $183=HEAP32[(($182)>>2)]; //@line 9879 "tcc_bootstrap.c"
 var $184=(($183+16)|0); //@line 9879 "tcc_bootstrap.c"
 var $185=HEAP32[(($184)>>2)]; //@line 9879 "tcc_bootstrap.c"
 var $186=$sh; //@line 9879 "tcc_bootstrap.c"
 var $187=(($186+24)|0); //@line 9879 "tcc_bootstrap.c"
 HEAP32[(($187)>>2)]=$185; //@line 9879 "tcc_bootstrap.c"
 label=22;break; //@line 9879 "tcc_bootstrap.c"
 case 22: 
 var $189=$s; //@line 9880 "tcc_bootstrap.c"
 var $190=(($189+32)|0); //@line 9880 "tcc_bootstrap.c"
 var $191=HEAP32[(($190)>>2)]; //@line 9880 "tcc_bootstrap.c"
 var $192=$sh; //@line 9880 "tcc_bootstrap.c"
 var $193=(($192+32)|0); //@line 9880 "tcc_bootstrap.c"
 HEAP32[(($193)>>2)]=$191; //@line 9880 "tcc_bootstrap.c"
 var $194=$s; //@line 9881 "tcc_bootstrap.c"
 var $195=(($194+44)|0); //@line 9881 "tcc_bootstrap.c"
 var $196=HEAP32[(($195)>>2)]; //@line 9881 "tcc_bootstrap.c"
 var $197=$sh; //@line 9881 "tcc_bootstrap.c"
 var $198=(($197+12)|0); //@line 9881 "tcc_bootstrap.c"
 HEAP32[(($198)>>2)]=$196; //@line 9881 "tcc_bootstrap.c"
 var $199=$s; //@line 9882 "tcc_bootstrap.c"
 var $200=(($199+48)|0); //@line 9882 "tcc_bootstrap.c"
 var $201=HEAP32[(($200)>>2)]; //@line 9882 "tcc_bootstrap.c"
 var $202=$sh; //@line 9882 "tcc_bootstrap.c"
 var $203=(($202+16)|0); //@line 9882 "tcc_bootstrap.c"
 HEAP32[(($203)>>2)]=$201; //@line 9882 "tcc_bootstrap.c"
 var $204=$s; //@line 9883 "tcc_bootstrap.c"
 var $205=(($204+40)|0); //@line 9883 "tcc_bootstrap.c"
 var $206=HEAP32[(($205)>>2)]; //@line 9883 "tcc_bootstrap.c"
 var $207=$sh; //@line 9883 "tcc_bootstrap.c"
 var $208=(($207+20)|0); //@line 9883 "tcc_bootstrap.c"
 HEAP32[(($208)>>2)]=$206; //@line 9883 "tcc_bootstrap.c"
 label=23;break; //@line 9884 "tcc_bootstrap.c"
 case 23: 
 var $210=$sh; //@line 9885 "tcc_bootstrap.c"
 var $211=$210; //@line 9885 "tcc_bootstrap.c"
 var $212=$2; //@line 9885 "tcc_bootstrap.c"
 var $213=_fwrite($211,1,40,$212); //@line 9885 "tcc_bootstrap.c"
 label=24;break; //@line 9886 "tcc_bootstrap.c"
 case 24: 
 var $215=$i; //@line 9868 "tcc_bootstrap.c"
 var $216=((($215)+(1))|0); //@line 9868 "tcc_bootstrap.c"
 $i=$216; //@line 9868 "tcc_bootstrap.c"
 label=18;break; //@line 9868 "tcc_bootstrap.c"
 case 25: 
 STACKTOP=sp;return; //@line 9887 "tcc_bootstrap.c"
  default: assert(0, "bad label: " + label);
 }

}


function _sort_syms($s1,$s){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $old_to_new_syms;
 var $new_syms;
 var $nb_syms;
 var $i;
 var $p;
 var $q;
 var $rel;
 var $sr;
 var $type;
 var $sym_index;
 $1=$s1;
 $2=$s;
 var $3=$2; //@line 9629 "tcc_bootstrap.c"
 var $4=(($3)|0); //@line 9629 "tcc_bootstrap.c"
 var $5=HEAP32[(($4)>>2)]; //@line 9629 "tcc_bootstrap.c"
 var $6=(((($5>>>0))/(16))&-1); //@line 9629 "tcc_bootstrap.c"
 $nb_syms=$6; //@line 9629 "tcc_bootstrap.c"
 var $7=$nb_syms; //@line 9630 "tcc_bootstrap.c"
 var $8=($7<<4); //@line 9630 "tcc_bootstrap.c"
 var $9=_tcc_malloc($8); //@line 9630 "tcc_bootstrap.c"
 var $10=$9; //@line 9630 "tcc_bootstrap.c"
 $new_syms=$10; //@line 9630 "tcc_bootstrap.c"
 var $11=$nb_syms; //@line 9631 "tcc_bootstrap.c"
 var $12=($11<<2); //@line 9631 "tcc_bootstrap.c"
 var $13=_tcc_malloc($12); //@line 9631 "tcc_bootstrap.c"
 var $14=$13; //@line 9631 "tcc_bootstrap.c"
 $old_to_new_syms=$14; //@line 9631 "tcc_bootstrap.c"
 var $15=$2; //@line 9632 "tcc_bootstrap.c"
 var $16=(($15+4)|0); //@line 9632 "tcc_bootstrap.c"
 var $17=HEAP32[(($16)>>2)]; //@line 9632 "tcc_bootstrap.c"
 var $18=$17; //@line 9632 "tcc_bootstrap.c"
 $p=$18; //@line 9632 "tcc_bootstrap.c"
 var $19=$new_syms; //@line 9633 "tcc_bootstrap.c"
 $q=$19; //@line 9633 "tcc_bootstrap.c"
 $i=0; //@line 9634 "tcc_bootstrap.c"
 label=2;break; //@line 9634 "tcc_bootstrap.c"
 case 2: 
 var $21=$i; //@line 9634 "tcc_bootstrap.c"
 var $22=$nb_syms; //@line 9634 "tcc_bootstrap.c"
 var $23=($21|0)<($22|0); //@line 9634 "tcc_bootstrap.c"
 if($23){label=3;break;}else{label=7;break;} //@line 9634 "tcc_bootstrap.c"
 case 3: 
 var $25=$p; //@line 9635 "tcc_bootstrap.c"
 var $26=(($25+12)|0); //@line 9635 "tcc_bootstrap.c"
 var $27=HEAP8[(($26)>>0)]; //@line 9635 "tcc_bootstrap.c"
 var $28=($27&255); //@line 9635 "tcc_bootstrap.c"
 var $29=$28>>4; //@line 9635 "tcc_bootstrap.c"
 var $30=($29|0)==0; //@line 9635 "tcc_bootstrap.c"
 if($30){label=4;break;}else{label=5;break;} //@line 9635 "tcc_bootstrap.c"
 case 4: 
 var $32=$q; //@line 9636 "tcc_bootstrap.c"
 var $33=$new_syms; //@line 9636 "tcc_bootstrap.c"
 var $34=$32; //@line 9636 "tcc_bootstrap.c"
 var $35=$33; //@line 9636 "tcc_bootstrap.c"
 var $36=((($34)-($35))|0); //@line 9636 "tcc_bootstrap.c"
 var $37=(((($36|0))/(16))&-1); //@line 9636 "tcc_bootstrap.c"
 var $38=$i; //@line 9636 "tcc_bootstrap.c"
 var $39=$old_to_new_syms; //@line 9636 "tcc_bootstrap.c"
 var $40=(($39+($38<<2))|0); //@line 9636 "tcc_bootstrap.c"
 HEAP32[(($40)>>2)]=$37; //@line 9636 "tcc_bootstrap.c"
 var $41=$q; //@line 9637 "tcc_bootstrap.c"
 var $42=(($41+16)|0); //@line 9637 "tcc_bootstrap.c"
 $q=$42; //@line 9637 "tcc_bootstrap.c"
 var $43=$p; //@line 9637 "tcc_bootstrap.c"
 var $44=$41; //@line 9637 "tcc_bootstrap.c"
 var $45=$43; //@line 9637 "tcc_bootstrap.c"
 assert(16 % 1 === 0);HEAP32[(($44)>>2)]=HEAP32[(($45)>>2)];HEAP32[((($44)+(4))>>2)]=HEAP32[((($45)+(4))>>2)];HEAP32[((($44)+(8))>>2)]=HEAP32[((($45)+(8))>>2)];HEAP32[((($44)+(12))>>2)]=HEAP32[((($45)+(12))>>2)]; //@line 9637 "tcc_bootstrap.c"
 label=5;break; //@line 9638 "tcc_bootstrap.c"
 case 5: 
 var $47=$p; //@line 9639 "tcc_bootstrap.c"
 var $48=(($47+16)|0); //@line 9639 "tcc_bootstrap.c"
 $p=$48; //@line 9639 "tcc_bootstrap.c"
 label=6;break; //@line 9640 "tcc_bootstrap.c"
 case 6: 
 var $50=$i; //@line 9634 "tcc_bootstrap.c"
 var $51=((($50)+(1))|0); //@line 9634 "tcc_bootstrap.c"
 $i=$51; //@line 9634 "tcc_bootstrap.c"
 label=2;break; //@line 9634 "tcc_bootstrap.c"
 case 7: 
 var $53=$2; //@line 9641 "tcc_bootstrap.c"
 var $54=(($53+40)|0); //@line 9641 "tcc_bootstrap.c"
 var $55=HEAP32[(($54)>>2)]; //@line 9641 "tcc_bootstrap.c"
 var $56=($55|0)!=0; //@line 9641 "tcc_bootstrap.c"
 if($56){label=8;break;}else{label=9;break;} //@line 9641 "tcc_bootstrap.c"
 case 8: 
 var $58=$q; //@line 9642 "tcc_bootstrap.c"
 var $59=$new_syms; //@line 9642 "tcc_bootstrap.c"
 var $60=$58; //@line 9642 "tcc_bootstrap.c"
 var $61=$59; //@line 9642 "tcc_bootstrap.c"
 var $62=((($60)-($61))|0); //@line 9642 "tcc_bootstrap.c"
 var $63=(((($62|0))/(16))&-1); //@line 9642 "tcc_bootstrap.c"
 var $64=$2; //@line 9642 "tcc_bootstrap.c"
 var $65=(($64+28)|0); //@line 9642 "tcc_bootstrap.c"
 HEAP32[(($65)>>2)]=$63; //@line 9642 "tcc_bootstrap.c"
 label=9;break; //@line 9642 "tcc_bootstrap.c"
 case 9: 
 var $67=$2; //@line 9643 "tcc_bootstrap.c"
 var $68=(($67+4)|0); //@line 9643 "tcc_bootstrap.c"
 var $69=HEAP32[(($68)>>2)]; //@line 9643 "tcc_bootstrap.c"
 var $70=$69; //@line 9643 "tcc_bootstrap.c"
 $p=$70; //@line 9643 "tcc_bootstrap.c"
 $i=0; //@line 9644 "tcc_bootstrap.c"
 label=10;break; //@line 9644 "tcc_bootstrap.c"
 case 10: 
 var $72=$i; //@line 9644 "tcc_bootstrap.c"
 var $73=$nb_syms; //@line 9644 "tcc_bootstrap.c"
 var $74=($72|0)<($73|0); //@line 9644 "tcc_bootstrap.c"
 if($74){label=11;break;}else{label=15;break;} //@line 9644 "tcc_bootstrap.c"
 case 11: 
 var $76=$p; //@line 9645 "tcc_bootstrap.c"
 var $77=(($76+12)|0); //@line 9645 "tcc_bootstrap.c"
 var $78=HEAP8[(($77)>>0)]; //@line 9645 "tcc_bootstrap.c"
 var $79=($78&255); //@line 9645 "tcc_bootstrap.c"
 var $80=$79>>4; //@line 9645 "tcc_bootstrap.c"
 var $81=($80|0)!=0; //@line 9645 "tcc_bootstrap.c"
 if($81){label=12;break;}else{label=13;break;} //@line 9645 "tcc_bootstrap.c"
 case 12: 
 var $83=$q; //@line 9646 "tcc_bootstrap.c"
 var $84=$new_syms; //@line 9646 "tcc_bootstrap.c"
 var $85=$83; //@line 9646 "tcc_bootstrap.c"
 var $86=$84; //@line 9646 "tcc_bootstrap.c"
 var $87=((($85)-($86))|0); //@line 9646 "tcc_bootstrap.c"
 var $88=(((($87|0))/(16))&-1); //@line 9646 "tcc_bootstrap.c"
 var $89=$i; //@line 9646 "tcc_bootstrap.c"
 var $90=$old_to_new_syms; //@line 9646 "tcc_bootstrap.c"
 var $91=(($90+($89<<2))|0); //@line 9646 "tcc_bootstrap.c"
 HEAP32[(($91)>>2)]=$88; //@line 9646 "tcc_bootstrap.c"
 var $92=$q; //@line 9647 "tcc_bootstrap.c"
 var $93=(($92+16)|0); //@line 9647 "tcc_bootstrap.c"
 $q=$93; //@line 9647 "tcc_bootstrap.c"
 var $94=$p; //@line 9647 "tcc_bootstrap.c"
 var $95=$92; //@line 9647 "tcc_bootstrap.c"
 var $96=$94; //@line 9647 "tcc_bootstrap.c"
 assert(16 % 1 === 0);HEAP32[(($95)>>2)]=HEAP32[(($96)>>2)];HEAP32[((($95)+(4))>>2)]=HEAP32[((($96)+(4))>>2)];HEAP32[((($95)+(8))>>2)]=HEAP32[((($96)+(8))>>2)];HEAP32[((($95)+(12))>>2)]=HEAP32[((($96)+(12))>>2)]; //@line 9647 "tcc_bootstrap.c"
 label=13;break; //@line 9648 "tcc_bootstrap.c"
 case 13: 
 var $98=$p; //@line 9649 "tcc_bootstrap.c"
 var $99=(($98+16)|0); //@line 9649 "tcc_bootstrap.c"
 $p=$99; //@line 9649 "tcc_bootstrap.c"
 label=14;break; //@line 9650 "tcc_bootstrap.c"
 case 14: 
 var $101=$i; //@line 9644 "tcc_bootstrap.c"
 var $102=((($101)+(1))|0); //@line 9644 "tcc_bootstrap.c"
 $i=$102; //@line 9644 "tcc_bootstrap.c"
 label=10;break; //@line 9644 "tcc_bootstrap.c"
 case 15: 
 var $104=$2; //@line 9651 "tcc_bootstrap.c"
 var $105=(($104+4)|0); //@line 9651 "tcc_bootstrap.c"
 var $106=HEAP32[(($105)>>2)]; //@line 9651 "tcc_bootstrap.c"
 var $107=$new_syms; //@line 9651 "tcc_bootstrap.c"
 var $108=$107; //@line 9651 "tcc_bootstrap.c"
 var $109=$nb_syms; //@line 9651 "tcc_bootstrap.c"
 var $110=($109<<4); //@line 9651 "tcc_bootstrap.c"
 assert($110 % 1 === 0);(_memcpy($106, $108, $110)|0); //@line 9651 "tcc_bootstrap.c"
 var $111=$new_syms; //@line 9652 "tcc_bootstrap.c"
 var $112=$111; //@line 9652 "tcc_bootstrap.c"
 _tcc_free($112); //@line 9652 "tcc_bootstrap.c"
 $i=1; //@line 9653 "tcc_bootstrap.c"
 label=16;break; //@line 9653 "tcc_bootstrap.c"
 case 16: 
 var $114=$i; //@line 9653 "tcc_bootstrap.c"
 var $115=$1; //@line 9653 "tcc_bootstrap.c"
 var $116=(($115+684)|0); //@line 9653 "tcc_bootstrap.c"
 var $117=HEAP32[(($116)>>2)]; //@line 9653 "tcc_bootstrap.c"
 var $118=($114|0)<($117|0); //@line 9653 "tcc_bootstrap.c"
 if($118){label=17;break;}else{label=26;break;} //@line 9653 "tcc_bootstrap.c"
 case 17: 
 var $120=$i; //@line 9654 "tcc_bootstrap.c"
 var $121=$1; //@line 9654 "tcc_bootstrap.c"
 var $122=(($121+680)|0); //@line 9654 "tcc_bootstrap.c"
 var $123=HEAP32[(($122)>>2)]; //@line 9654 "tcc_bootstrap.c"
 var $124=(($123+($120<<2))|0); //@line 9654 "tcc_bootstrap.c"
 var $125=HEAP32[(($124)>>2)]; //@line 9654 "tcc_bootstrap.c"
 $sr=$125; //@line 9654 "tcc_bootstrap.c"
 var $126=$sr; //@line 9655 "tcc_bootstrap.c"
 var $127=(($126+20)|0); //@line 9655 "tcc_bootstrap.c"
 var $128=HEAP32[(($127)>>2)]; //@line 9655 "tcc_bootstrap.c"
 var $129=($128|0)==9; //@line 9655 "tcc_bootstrap.c"
 if($129){label=18;break;}else{label=24;break;} //@line 9655 "tcc_bootstrap.c"
 case 18: 
 var $131=$sr; //@line 9655 "tcc_bootstrap.c"
 var $132=(($131+56)|0); //@line 9655 "tcc_bootstrap.c"
 var $133=HEAP32[(($132)>>2)]; //@line 9655 "tcc_bootstrap.c"
 var $134=$2; //@line 9655 "tcc_bootstrap.c"
 var $135=($133|0)==($134|0); //@line 9655 "tcc_bootstrap.c"
 if($135){label=19;break;}else{label=24;break;} //@line 9655 "tcc_bootstrap.c"
 case 19: 
 var $137=$sr; //@line 9656 "tcc_bootstrap.c"
 var $138=(($137+4)|0); //@line 9656 "tcc_bootstrap.c"
 var $139=HEAP32[(($138)>>2)]; //@line 9656 "tcc_bootstrap.c"
 var $140=$139; //@line 9656 "tcc_bootstrap.c"
 var $141=(($140)|0); //@line 9656 "tcc_bootstrap.c"
 $rel=$141; //@line 9656 "tcc_bootstrap.c"
 label=20;break; //@line 9656 "tcc_bootstrap.c"
 case 20: 
 var $143=$rel; //@line 9656 "tcc_bootstrap.c"
 var $144=$sr; //@line 9656 "tcc_bootstrap.c"
 var $145=(($144+4)|0); //@line 9656 "tcc_bootstrap.c"
 var $146=HEAP32[(($145)>>2)]; //@line 9656 "tcc_bootstrap.c"
 var $147=$sr; //@line 9656 "tcc_bootstrap.c"
 var $148=(($147)|0); //@line 9656 "tcc_bootstrap.c"
 var $149=HEAP32[(($148)>>2)]; //@line 9656 "tcc_bootstrap.c"
 var $150=(($146+$149)|0); //@line 9656 "tcc_bootstrap.c"
 var $151=$150; //@line 9656 "tcc_bootstrap.c"
 var $152=($143>>>0)<($151>>>0); //@line 9656 "tcc_bootstrap.c"
 if($152){label=21;break;}else{label=23;break;} //@line 9656 "tcc_bootstrap.c"
 case 21: 
 var $154=$rel; //@line 9657 "tcc_bootstrap.c"
 var $155=(($154+4)|0); //@line 9657 "tcc_bootstrap.c"
 var $156=HEAP32[(($155)>>2)]; //@line 9657 "tcc_bootstrap.c"
 var $157=$156>>>8; //@line 9657 "tcc_bootstrap.c"
 $sym_index=$157; //@line 9657 "tcc_bootstrap.c"
 var $158=$rel; //@line 9658 "tcc_bootstrap.c"
 var $159=(($158+4)|0); //@line 9658 "tcc_bootstrap.c"
 var $160=HEAP32[(($159)>>2)]; //@line 9658 "tcc_bootstrap.c"
 var $161=$160&255; //@line 9658 "tcc_bootstrap.c"
 $type=$161; //@line 9658 "tcc_bootstrap.c"
 var $162=$sym_index; //@line 9659 "tcc_bootstrap.c"
 var $163=$old_to_new_syms; //@line 9659 "tcc_bootstrap.c"
 var $164=(($163+($162<<2))|0); //@line 9659 "tcc_bootstrap.c"
 var $165=HEAP32[(($164)>>2)]; //@line 9659 "tcc_bootstrap.c"
 $sym_index=$165; //@line 9659 "tcc_bootstrap.c"
 var $166=$sym_index; //@line 9660 "tcc_bootstrap.c"
 var $167=$166<<8; //@line 9660 "tcc_bootstrap.c"
 var $168=$type; //@line 9660 "tcc_bootstrap.c"
 var $169=$168&255; //@line 9660 "tcc_bootstrap.c"
 var $170=((($167)+($169))|0); //@line 9660 "tcc_bootstrap.c"
 var $171=$rel; //@line 9660 "tcc_bootstrap.c"
 var $172=(($171+4)|0); //@line 9660 "tcc_bootstrap.c"
 HEAP32[(($172)>>2)]=$170; //@line 9660 "tcc_bootstrap.c"
 label=22;break; //@line 9661 "tcc_bootstrap.c"
 case 22: 
 var $174=$rel; //@line 9656 "tcc_bootstrap.c"
 var $175=(($174+8)|0); //@line 9656 "tcc_bootstrap.c"
 $rel=$175; //@line 9656 "tcc_bootstrap.c"
 label=20;break; //@line 9656 "tcc_bootstrap.c"
 case 23: 
 label=24;break; //@line 9662 "tcc_bootstrap.c"
 case 24: 
 label=25;break; //@line 9663 "tcc_bootstrap.c"
 case 25: 
 var $179=$i; //@line 9653 "tcc_bootstrap.c"
 var $180=((($179)+(1))|0); //@line 9653 "tcc_bootstrap.c"
 $i=$180; //@line 9653 "tcc_bootstrap.c"
 label=16;break; //@line 9653 "tcc_bootstrap.c"
 case 26: 
 var $182=$old_to_new_syms; //@line 9664 "tcc_bootstrap.c"
 var $183=$182; //@line 9664 "tcc_bootstrap.c"
 _tcc_free($183); //@line 9664 "tcc_bootstrap.c"
 STACKTOP=sp;return; //@line 9665 "tcc_bootstrap.c"
  default: assert(0, "bad label: " + label);
 }

}


function _tcc_add_linker_symbols($s1){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+1024)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $buf=sp;
 var $i;
 var $s;
 var $p;
 var $ch;
 $1=$s1;
 $i=1; //@line 9904 "tcc_bootstrap.c"
 label=2;break; //@line 9904 "tcc_bootstrap.c"
 case 2: 
 var $3=$i; //@line 9904 "tcc_bootstrap.c"
 var $4=$1; //@line 9904 "tcc_bootstrap.c"
 var $5=(($4+684)|0); //@line 9904 "tcc_bootstrap.c"
 var $6=HEAP32[(($5)>>2)]; //@line 9904 "tcc_bootstrap.c"
 var $7=($3|0)<($6|0); //@line 9904 "tcc_bootstrap.c"
 if($7){label=3;break;}else{label=16;break;} //@line 9904 "tcc_bootstrap.c"
 case 3: 
 var $9=$i; //@line 9905 "tcc_bootstrap.c"
 var $10=$1; //@line 9905 "tcc_bootstrap.c"
 var $11=(($10+680)|0); //@line 9905 "tcc_bootstrap.c"
 var $12=HEAP32[(($11)>>2)]; //@line 9905 "tcc_bootstrap.c"
 var $13=(($12+($9<<2))|0); //@line 9905 "tcc_bootstrap.c"
 var $14=HEAP32[(($13)>>2)]; //@line 9905 "tcc_bootstrap.c"
 $s=$14; //@line 9905 "tcc_bootstrap.c"
 var $15=$s; //@line 9906 "tcc_bootstrap.c"
 var $16=(($15+20)|0); //@line 9906 "tcc_bootstrap.c"
 var $17=HEAP32[(($16)>>2)]; //@line 9906 "tcc_bootstrap.c"
 var $18=($17|0)==1; //@line 9906 "tcc_bootstrap.c"
 if($18){label=4;break;}else{label=13;break;} //@line 9906 "tcc_bootstrap.c"
 case 4: 
 var $20=$s; //@line 9906 "tcc_bootstrap.c"
 var $21=(($20+24)|0); //@line 9906 "tcc_bootstrap.c"
 var $22=HEAP32[(($21)>>2)]; //@line 9906 "tcc_bootstrap.c"
 var $23=$22&2; //@line 9906 "tcc_bootstrap.c"
 var $24=($23|0)!=0; //@line 9906 "tcc_bootstrap.c"
 if($24){label=5;break;}else{label=13;break;} //@line 9906 "tcc_bootstrap.c"
 case 5: 
 var $26=$s; //@line 9910 "tcc_bootstrap.c"
 var $27=(($26+72)|0); //@line 9910 "tcc_bootstrap.c"
 var $28=(($27)|0); //@line 9910 "tcc_bootstrap.c"
 $p=$28; //@line 9910 "tcc_bootstrap.c"
 label=6;break; //@line 9911 "tcc_bootstrap.c"
 case 6: 
 var $30=$p; //@line 9912 "tcc_bootstrap.c"
 var $31=HEAP8[(($30)>>0)]; //@line 9912 "tcc_bootstrap.c"
 var $32=(($31<<24)>>24); //@line 9912 "tcc_bootstrap.c"
 $ch=$32; //@line 9912 "tcc_bootstrap.c"
 var $33=$ch; //@line 9913 "tcc_bootstrap.c"
 var $34=($33|0)!=0; //@line 9913 "tcc_bootstrap.c"
 if($34){label=8;break;}else{label=7;break;} //@line 9913 "tcc_bootstrap.c"
 case 7: 
 label=12;break; //@line 9914 "tcc_bootstrap.c"
 case 8: 
 var $37=$ch; //@line 9915 "tcc_bootstrap.c"
 var $38=_isid($37); //@line 9915 "tcc_bootstrap.c"
 var $39=($38|0)!=0; //@line 9915 "tcc_bootstrap.c"
 if($39){label=11;break;}else{label=9;break;} //@line 9915 "tcc_bootstrap.c"
 case 9: 
 var $41=$ch; //@line 9915 "tcc_bootstrap.c"
 var $42=_isnum($41); //@line 9915 "tcc_bootstrap.c"
 var $43=($42|0)!=0; //@line 9915 "tcc_bootstrap.c"
 if($43){label=11;break;}else{label=10;break;} //@line 9915 "tcc_bootstrap.c"
 case 10: 
 label=14;break; //@line 9916 "tcc_bootstrap.c"
 case 11: 
 var $46=$p; //@line 9917 "tcc_bootstrap.c"
 var $47=(($46+1)|0); //@line 9917 "tcc_bootstrap.c"
 $p=$47; //@line 9917 "tcc_bootstrap.c"
 label=6;break; //@line 9918 "tcc_bootstrap.c"
 case 12: 
 var $49=(($buf)|0); //@line 9919 "tcc_bootstrap.c"
 var $50=$s; //@line 9919 "tcc_bootstrap.c"
 var $51=(($50+72)|0); //@line 9919 "tcc_bootstrap.c"
 var $52=(($51)|0); //@line 9919 "tcc_bootstrap.c"
 var $53=_snprintf($49,1024,4512,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$52,tempVarArgs)); STACKTOP=tempVarArgs; //@line 9919 "tcc_bootstrap.c"
 var $54=HEAP32[((10504)>>2)]; //@line 9920 "tcc_bootstrap.c"
 var $55=$s; //@line 9920 "tcc_bootstrap.c"
 var $56=(($55+16)|0); //@line 9920 "tcc_bootstrap.c"
 var $57=HEAP32[(($56)>>2)]; //@line 9920 "tcc_bootstrap.c"
 var $58=(($buf)|0); //@line 9920 "tcc_bootstrap.c"
 var $59=_set_elf_sym($54,0,0,16,0,$57,$58); //@line 9920 "tcc_bootstrap.c"
 var $60=(($buf)|0); //@line 9924 "tcc_bootstrap.c"
 var $61=$s; //@line 9924 "tcc_bootstrap.c"
 var $62=(($61+72)|0); //@line 9924 "tcc_bootstrap.c"
 var $63=(($62)|0); //@line 9924 "tcc_bootstrap.c"
 var $64=_snprintf($60,1024,4496,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$63,tempVarArgs)); STACKTOP=tempVarArgs; //@line 9924 "tcc_bootstrap.c"
 var $65=HEAP32[((10504)>>2)]; //@line 9925 "tcc_bootstrap.c"
 var $66=$s; //@line 9925 "tcc_bootstrap.c"
 var $67=(($66)|0); //@line 9925 "tcc_bootstrap.c"
 var $68=HEAP32[(($67)>>2)]; //@line 9925 "tcc_bootstrap.c"
 var $69=$s; //@line 9925 "tcc_bootstrap.c"
 var $70=(($69+16)|0); //@line 9925 "tcc_bootstrap.c"
 var $71=HEAP32[(($70)>>2)]; //@line 9925 "tcc_bootstrap.c"
 var $72=(($buf)|0); //@line 9925 "tcc_bootstrap.c"
 var $73=_set_elf_sym($65,$68,0,16,0,$71,$72); //@line 9925 "tcc_bootstrap.c"
 label=13;break; //@line 9929 "tcc_bootstrap.c"
 case 13: 
 label=14;break; //@line 9929 "tcc_bootstrap.c"
 case 14: 
 label=15;break; //@line 9931 "tcc_bootstrap.c"
 case 15: 
 var $77=$i; //@line 9904 "tcc_bootstrap.c"
 var $78=((($77)+(1))|0); //@line 9904 "tcc_bootstrap.c"
 $i=$78; //@line 9904 "tcc_bootstrap.c"
 label=2;break; //@line 9904 "tcc_bootstrap.c"
 case 16: 
 STACKTOP=sp;return; //@line 9932 "tcc_bootstrap.c"
  default: assert(0, "bad label: " + label);
 }

}


function _ldexp($x,$n){
 var label=0;


 var $1=_scalbn($x,$n);
 return $1;
}


function _qsort($base,$nel,$width,$cmp){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+936)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $tmp_i26=sp;
 var $tmp_i=(sp)+(256);
 var $ar_i=(sp)+(512);
 var $lp=(sp)+(744);
 var $1=$lp;
 var $$etemp$0$0=192;
 var $$etemp$0$1=0;

 var $2=(Math_imul($width,$nel)|0);
 var $3=($2|0)==0;
 if($3){label=65;break;}else{label=2;break;}
 case 2: 
 var $_sum=((($2)-($width))|0);
 var $5=(($lp+4)|0);
 HEAP32[(($5)>>2)]=$width;
 var $6=(($lp)|0);
 HEAP32[(($6)>>2)]=$width;
 var $i_0=2;var $9=$width;var $8=$width;label=3;break;
 case 3: 
 var $8;
 var $9;
 var $i_0;
 var $10=((($9)+($width))|0);
 var $11=((($10)+($8))|0);
 var $12=(($lp+($i_0<<2))|0);
 HEAP32[(($12)>>2)]=$11;
 var $13=($11>>>0)<($2>>>0);
 var $14=((($i_0)+(1))|0);
 if($13){var $i_0=$14;var $9=$8;var $8=$11;label=3;break;}else{label=4;break;}
 case 4: 
 var $15=(((-$width))|0);
 var $16=(($base+$_sum)|0);
 var $17=($_sum|0)>0;
 if($17){label=5;break;}else{var $_lcssa74=0;var $_lcssa75=1;var $head_0_lcssa=$base;var $pshift_0_lcssa=1;label=48;break;}
 case 5: 
 var $18=$ar_i;
 var $19=(($ar_i)|0);
 var $20=(($tmp_i)|0);
 var $21=($width|0)==0;
 var $22=($width>>>0)>256;
 var $23=($22?256:$width);
 var $24=($23|0)==($width|0);
 var $25=$16;
 var $26=(($tmp_i26)|0);
 var $29=0;var $28=1;var $head_076=$base;var $pshift_077=1;label=6;break;
 case 6: 
 var $pshift_077;
 var $head_076;
 var $28;
 var $29;
 var $30=$28&3;
 var $31=($30|0)==3;
 if($31){label=7;break;}else{label=25;break;}
 case 7: 
 var $$etemp$1$0=228;
 var $$etemp$1$1=0;

 HEAP32[(($19)>>2)]=$head_076;
 var $33=($pshift_077|0)>1;
 if($33){var $_012_i=$pshift_077;var $_03_i=$head_076;var $i_04_i=1;var $34=$head_076;label=8;break;}else{label=24;break;}
 case 8: 
 var $34;
 var $i_04_i;
 var $_03_i;
 var $_012_i;
 var $35=(($_03_i+$15)|0);
 var $36=((($_012_i)-(2))|0);
 var $37=(($lp+($36<<2))|0);
 var $38=HEAP32[(($37)>>2)];
 var $sum_i=((($38)+($width))|0);
 var $_sum_i=(((-$sum_i))|0);
 var $39=(($_03_i+$_sum_i)|0);
 var $40=FUNCTION_TABLE[$cmp]($34,$39);
 var $41=($40|0)>-1;
 if($41){label=9;break;}else{label=10;break;}
 case 9: 
 var $43=FUNCTION_TABLE[$cmp]($34,$35);
 var $44=($43|0)>-1;
 if($44){var $i_0_lcssa_i=$i_04_i;label=15;break;}else{label=10;break;}
 case 10: 
 var $46=FUNCTION_TABLE[$cmp]($39,$35);
 var $47=($46|0)>-1;
 var $48=((($i_04_i)+(1))|0);
 var $49=(($ar_i+($i_04_i<<2))|0);
 if($47){label=11;break;}else{label=12;break;}
 case 11: 
 HEAP32[(($49)>>2)]=$39;
 var $51=((($_012_i)-(1))|0);
 var $_0_be_i=$39;var $_01_be_i=$51;label=13;break;
 case 12: 
 HEAP32[(($49)>>2)]=$35;
 var $_0_be_i=$35;var $_01_be_i=$36;label=13;break;
 case 13: 
 var $_01_be_i;
 var $_0_be_i;
 var $53=($_01_be_i|0)>1;
 if($53){label=14;break;}else{var $i_0_lcssa_i=$48;label=15;break;}
 case 14: 
 var $_pre_i=HEAP32[(($19)>>2)];
 var $_012_i=$_01_be_i;var $_03_i=$_0_be_i;var $i_04_i=$48;var $34=$_pre_i;label=8;break;
 case 15: 
 var $i_0_lcssa_i;
 var $$etemp$2$0=256;
 var $$etemp$2$1=0;

 var $54=($i_0_lcssa_i|0)<2;
 if($54){label=24;break;}else{label=16;break;}
 case 16: 
 var $56=(($ar_i+($i_0_lcssa_i<<2))|0);
 HEAP32[(($56)>>2)]=$20;
 if($21){label=24;break;}else{label=17;break;}
 case 17: 
 var $57=($i_0_lcssa_i|0)>0;
 if($57){var $_02_us_i=$width;var $70=$20;label=22;break;}else{label=18;break;}
 case 18: 
 var $58=HEAP32[(($19)>>2)];
 assert($23 % 1 === 0);(_memcpy($20, $58, $23)|0);
 if($24){label=24;break;}else{var $_02_i71=$width;var $74=$23;label=23;break;}
 case 19: 
 var $60=($_02_us_i|0)==($72|0);
 if($60){label=24;break;}else{label=20;break;}
 case 20: 
 var $61=((($_02_us_i)-($72))|0);
 var $_pre_i9=HEAP32[(($56)>>2)];
 var $_02_us_i=$61;var $70=$_pre_i9;label=22;break;
 case 21: 
 var $63;
 var $i_01_us_i;
 var $64=(($ar_i+($i_01_us_i<<2))|0);
 var $65=((($i_01_us_i)+(1))|0);
 var $66=(($ar_i+($65<<2))|0);
 var $67=HEAP32[(($66)>>2)];
 assert($72 % 1 === 0);(_memcpy($63, $67, $72)|0);
 var $68=(($63+$72)|0);
 HEAP32[(($64)>>2)]=$68;
 var $69=($65|0)<($i_0_lcssa_i|0);
 if($69){var $i_01_us_i=$65;var $63=$67;label=21;break;}else{label=19;break;}
 case 22: 
 var $70;
 var $_02_us_i;
 var $71=($_02_us_i>>>0)>256;
 var $72=($71?256:$_02_us_i);
 var $73=HEAP32[(($19)>>2)];
 assert($72 % 1 === 0);(_memcpy($70, $73, $72)|0);
 var $i_01_us_i=0;var $63=$73;label=21;break;
 case 23: 
 var $74;
 var $_02_i71;
 var $75=((($_02_i71)-($74))|0);
 var $76=($75>>>0)>256;
 var $77=($76?256:$75);
 assert($77 % 1 === 0);(_memcpy($20, $58, $77)|0);
 var $78=($75|0)==($77|0);
 if($78){label=24;break;}else{var $_02_i71=$75;var $74=$77;label=23;break;}
 case 24: 
 var $$etemp$3$0=256;
 var $$etemp$3$1=0;

 var $$etemp$4$0=228;
 var $$etemp$4$1=0;

 var $79=$28>>>2;
 var $80=$29<<30;
 var $81=$79|$80;
 var $82=$29>>>2;
 var $83=((($pshift_077)+(2))|0);
 var $pshift_1=$83;var $154=$81;var $153=$82;label=47;break;
 case 25: 
 var $85=((($pshift_077)-(1))|0);
 var $86=(($lp+($85<<2))|0);
 var $87=HEAP32[(($86)>>2)];
 var $88=$head_076;
 var $89=((($25)-($88))|0);
 var $90=($87>>>0)<($89>>>0);
 if($90){label=27;break;}else{label=26;break;}
 case 26: 
 _trinkle($head_076,$width,$cmp,$28,$29,$pshift_077,0,$6);
 label=44;break;
 case 27: 
 var $$etemp$5$0=228;
 var $$etemp$5$1=0;

 HEAP32[(($19)>>2)]=$head_076;
 var $93=($pshift_077|0)>1;
 if($93){var $_012_i16=$pshift_077;var $_03_i15=$head_076;var $i_04_i14=1;var $94=$head_076;label=28;break;}else{label=44;break;}
 case 28: 
 var $94;
 var $i_04_i14;
 var $_03_i15;
 var $_012_i16;
 var $95=(($_03_i15+$15)|0);
 var $96=((($_012_i16)-(2))|0);
 var $97=(($lp+($96<<2))|0);
 var $98=HEAP32[(($97)>>2)];
 var $sum_i17=((($98)+($width))|0);
 var $_sum_i18=(((-$sum_i17))|0);
 var $99=(($_03_i15+$_sum_i18)|0);
 var $100=FUNCTION_TABLE[$cmp]($94,$99);
 var $101=($100|0)>-1;
 if($101){label=29;break;}else{label=30;break;}
 case 29: 
 var $103=FUNCTION_TABLE[$cmp]($94,$95);
 var $104=($103|0)>-1;
 if($104){var $i_0_lcssa_i24=$i_04_i14;label=35;break;}else{label=30;break;}
 case 30: 
 var $106=FUNCTION_TABLE[$cmp]($99,$95);
 var $107=($106|0)>-1;
 var $108=((($i_04_i14)+(1))|0);
 var $109=(($ar_i+($i_04_i14<<2))|0);
 if($107){label=31;break;}else{label=32;break;}
 case 31: 
 HEAP32[(($109)>>2)]=$99;
 var $111=((($_012_i16)-(1))|0);
 var $_0_be_i20=$99;var $_01_be_i19=$111;label=33;break;
 case 32: 
 HEAP32[(($109)>>2)]=$95;
 var $_0_be_i20=$95;var $_01_be_i19=$96;label=33;break;
 case 33: 
 var $_01_be_i19;
 var $_0_be_i20;
 var $113=($_01_be_i19|0)>1;
 if($113){label=34;break;}else{var $i_0_lcssa_i24=$108;label=35;break;}
 case 34: 
 var $_pre_i22=HEAP32[(($19)>>2)];
 var $_012_i16=$_01_be_i19;var $_03_i15=$_0_be_i20;var $i_04_i14=$108;var $94=$_pre_i22;label=28;break;
 case 35: 
 var $i_0_lcssa_i24;
 var $$etemp$6$0=256;
 var $$etemp$6$1=0;

 var $114=($i_0_lcssa_i24|0)<2;
 if($114){label=44;break;}else{label=36;break;}
 case 36: 
 var $116=(($ar_i+($i_0_lcssa_i24<<2))|0);
 HEAP32[(($116)>>2)]=$26;
 if($21){label=44;break;}else{label=37;break;}
 case 37: 
 var $117=($i_0_lcssa_i24|0)>0;
 if($117){var $_02_us_i31=$width;var $130=$26;label=42;break;}else{label=38;break;}
 case 38: 
 var $118=HEAP32[(($19)>>2)];
 assert($23 % 1 === 0);(_memcpy($26, $118, $23)|0);
 if($24){label=44;break;}else{var $_02_i3368=$width;var $134=$23;label=43;break;}
 case 39: 
 var $120=($_02_us_i31|0)==($132|0);
 if($120){label=44;break;}else{label=40;break;}
 case 40: 
 var $121=((($_02_us_i31)-($132))|0);
 var $_pre_i28=HEAP32[(($116)>>2)];
 var $_02_us_i31=$121;var $130=$_pre_i28;label=42;break;
 case 41: 
 var $123;
 var $i_01_us_i30;
 var $124=(($ar_i+($i_01_us_i30<<2))|0);
 var $125=((($i_01_us_i30)+(1))|0);
 var $126=(($ar_i+($125<<2))|0);
 var $127=HEAP32[(($126)>>2)];
 assert($132 % 1 === 0);(_memcpy($123, $127, $132)|0);
 var $128=(($123+$132)|0);
 HEAP32[(($124)>>2)]=$128;
 var $129=($125|0)<($i_0_lcssa_i24|0);
 if($129){var $i_01_us_i30=$125;var $123=$127;label=41;break;}else{label=39;break;}
 case 42: 
 var $130;
 var $_02_us_i31;
 var $131=($_02_us_i31>>>0)>256;
 var $132=($131?256:$_02_us_i31);
 var $133=HEAP32[(($19)>>2)];
 assert($132 % 1 === 0);(_memcpy($130, $133, $132)|0);
 var $i_01_us_i30=0;var $123=$133;label=41;break;
 case 43: 
 var $134;
 var $_02_i3368;
 var $135=((($_02_i3368)-($134))|0);
 var $136=($135>>>0)>256;
 var $137=($136?256:$135);
 assert($137 % 1 === 0);(_memcpy($26, $118, $137)|0);
 var $138=($135|0)==($137|0);
 if($138){label=44;break;}else{var $_02_i3368=$135;var $134=$137;label=43;break;}
 case 44: 
 var $139=($pshift_077|0)==1;
 if($139){label=45;break;}else{label=46;break;}
 case 45: 
 var $141=$29<<1;
 var $142=$28>>>31;
 var $143=$142|$141;
 var $144=$28<<1;
 var $pshift_1=0;var $154=$144;var $153=$143;label=47;break;
 case 46: 
 var $145=($85>>>0)>31;
 var $146=((($pshift_077)-(33))|0);
 var $_=($145?0:$28);
 var $_65=($145?$28:$29);
 var $_66=($145?$146:$85);
 var $147=$_65<<$_66;
 var $148=(((32)-($_66))|0);
 var $149=$_>>>($148>>>0);
 var $150=$149|$147;
 var $151=$_<<$_66;
 var $pshift_1=1;var $154=$151;var $153=$150;label=47;break;
 case 47: 
 var $153;
 var $154;
 var $pshift_1;
 var $155=$154|1;
 var $156=(($head_076+$width)|0);
 var $157=($156>>>0)<($16>>>0);
 if($157){var $29=$153;var $28=$155;var $head_076=$156;var $pshift_077=$pshift_1;label=6;break;}else{var $_lcssa74=$153;var $_lcssa75=$155;var $head_0_lcssa=$156;var $pshift_0_lcssa=$pshift_1;label=48;break;}
 case 48: 
 var $pshift_0_lcssa;
 var $head_0_lcssa;
 var $_lcssa75;
 var $_lcssa74;
 _trinkle($head_0_lcssa,$width,$cmp,$_lcssa75,$_lcssa74,$pshift_0_lcssa,0,$6);
 var $pshift_2=$pshift_0_lcssa;var $head_1=$head_0_lcssa;var $160=$_lcssa75;var $159=$_lcssa74;label=49;break;
 case 49: 
 var $159;
 var $160;
 var $head_1;
 var $pshift_2;
 var $161=($pshift_2|0)==1;
 if($161){label=50;break;}else{label=52;break;}
 case 50: 
 var $163=($160|0)==1;
 if($163){label=51;break;}else{label=53;break;}
 case 51: 
 var $165=($159|0)==0;
 if($165){label=65;break;}else{label=52;break;}
 case 52: 
 var $166=($pshift_2|0)<2;
 if($166){label=53;break;}else{label=64;break;}
 case 53: 
 var $167=((($160)-(1))|0);
 var $168=($167|0)==0;
 if($168){var $187=32;label=62;break;}else{label=54;break;}
 case 54: 
 var $169=$167&1;
 var $170=($169|0)==0;
 if($170){var $_02_i_i=$167;var $nTrailingZeros_03_i_i=0;label=55;break;}else{label=57;break;}
 case 55: 
 var $nTrailingZeros_03_i_i;
 var $_02_i_i;
 var $171=((($nTrailingZeros_03_i_i)+(1))|0);
 var $172=$_02_i_i>>>1;
 var $173=$172&1;
 var $174=($173|0)==0;
 if($174){var $_02_i_i=$172;var $nTrailingZeros_03_i_i=$171;label=55;break;}else{label=56;break;}
 case 56: 
 var $175=($171|0)==0;
 if($175){label=57;break;}else{var $185=$171;label=61;break;}
 case 57: 
 var $176=($159|0)==0;
 if($176){var $_01_i5_i=32;label=60;break;}else{label=58;break;}
 case 58: 
 var $177=$159&1;
 var $178=($177|0)==0;
 if($178){var $_02_i3_i=$159;var $nTrailingZeros_03_i2_i=0;label=59;break;}else{var $_01_i5_i=0;label=60;break;}
 case 59: 
 var $nTrailingZeros_03_i2_i;
 var $_02_i3_i;
 var $179=((($nTrailingZeros_03_i2_i)+(1))|0);
 var $180=$_02_i3_i>>>1;
 var $181=$180&1;
 var $182=($181|0)==0;
 if($182){var $_02_i3_i=$180;var $nTrailingZeros_03_i2_i=$179;label=59;break;}else{var $_01_i5_i=$179;label=60;break;}
 case 60: 
 var $_01_i5_i;
 var $183=((($_01_i5_i)+(32))|0);
 var $184=($_01_i5_i|0)==0;
 var $__i=($184?0:$183);
 var $185=$__i;label=61;break;
 case 61: 
 var $185;
 var $186=($185>>>0)>31;
 if($186){var $187=$185;label=62;break;}else{var $_0_i49=$185;var $191=$160;var $190=$159;var $189=$185;label=63;break;}
 case 62: 
 var $187;
 var $188=((($187)-(32))|0);
 var $_0_i49=$188;var $191=$159;var $190=0;var $189=$187;label=63;break;
 case 63: 
 var $189;
 var $190;
 var $191;
 var $_0_i49;
 var $192=$191>>>($_0_i49>>>0);
 var $193=(((32)-($_0_i49))|0);
 var $194=$190<<$193;
 var $195=$194|$192;
 var $196=$190>>>($_0_i49>>>0);
 var $197=((($189)+($pshift_2))|0);
 var $_pre=(($head_1+$15)|0);
 var $pshift_2=$197;var $head_1=$_pre;var $160=$195;var $159=$196;label=49;break;
 case 64: 
 var $199=$159<<2;
 var $200=$160>>>30;
 var $201=$200|$199;
 var $202=((($pshift_2)-(2))|0);
 var $203=$160<<1;
 var $204=$203&2147483646;
 var $205=$200<<31;
 var $206=$204|$205;
 var $207=$206^3;
 var $208=$201>>>1;
 var $209=(($lp+($202<<2))|0);
 var $210=HEAP32[(($209)>>2)];
 var $sum=((($210)+($width))|0);
 var $_sum2=(((-$sum))|0);
 var $211=(($head_1+$_sum2)|0);
 var $212=((($pshift_2)-(1))|0);
 _trinkle($211,$width,$cmp,$207,$208,$212,1,$6);
 var $213=$208<<1;
 var $214=$200&1;
 var $215=$213|$214;
 var $216=$207<<1;
 var $217=$216|1;
 var $218=(($head_1+$15)|0);
 _trinkle($218,$width,$cmp,$217,$215,$202,1,$6);
 var $pshift_2=$202;var $head_1=$218;var $160=$217;var $159=$215;label=49;break;
 case 65: 
 var $$etemp$7$0=192;
 var $$etemp$7$1=0;

 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function _trinkle($head,$width,$cmp,$pp_val,$pp_1_val,$pshift,$trusty,$lp){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+976)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $tmp_i6=sp;
 var $tmp_i=(sp)+(256);
 var $ar_i=(sp)+(512);
 var $ar=(sp)+(744);
 var $1=$ar;
 var $$etemp$0$0=228;
 var $$etemp$0$1=0;

 var $2=(($ar)|0);
 HEAP32[(($2)>>2)]=$head;
 var $3=(((-$width))|0);
 var $4=($pp_val|0)==1;
 var $5=($pp_1_val|0)==0;
 var $or_cond18=$4&$5;
 if($or_cond18){var $_02_lcssa=$trusty;var $_01_lcssa=$pshift;var $i_0_lcssa=1;var $_0_lcssa=$head;label=18;break;}else{var $8=$pp_1_val;var $7=$pp_val;var $_029=$trusty;var $_0110=$pshift;var $i_011=1;var $_012=$head;var $6=$head;label=2;break;}
 case 2: 
 var $6;
 var $_012;
 var $i_011;
 var $_0110;
 var $_029;
 var $7;
 var $8;
 var $9=(($lp+($_0110<<2))|0);
 var $10=HEAP32[(($9)>>2)];
 var $11=(((-$10))|0);
 var $12=(($_012+$11)|0);
 var $13=FUNCTION_TABLE[$cmp]($12,$6);
 var $14=($13|0)<1;
 if($14){var $_02_lcssa=$_029;var $_01_lcssa=$_0110;var $i_0_lcssa=$i_011;var $_0_lcssa=$_012;label=18;break;}else{label=3;break;}
 case 3: 
 var $16=($_029|0)==0;
 var $17=($_0110|0)>1;
 var $or_cond=$16&$17;
 if($or_cond){label=4;break;}else{label=6;break;}
 case 4: 
 var $19=(($_012+$3)|0);
 var $20=((($_0110)-(2))|0);
 var $21=(($lp+($20<<2))|0);
 var $22=HEAP32[(($21)>>2)];
 var $23=FUNCTION_TABLE[$cmp]($19,$12);
 var $24=($23|0)>-1;
 if($24){var $_0_lcssa26=$_012;var $i_0_lcssa27=$i_011;var $_01_lcssa28=$_0110;label=19;break;}else{label=5;break;}
 case 5: 
 var $sum=((($22)+($width))|0);
 var $_sum=(((-$sum))|0);
 var $26=(($_012+$_sum)|0);
 var $27=FUNCTION_TABLE[$cmp]($26,$12);
 var $28=($27|0)>-1;
 if($28){var $_0_lcssa26=$_012;var $i_0_lcssa27=$i_011;var $_01_lcssa28=$_0110;label=19;break;}else{label=6;break;}
 case 6: 
 var $30=((($i_011)+(1))|0);
 var $31=(($ar+($i_011<<2))|0);
 HEAP32[(($31)>>2)]=$12;
 var $32=((($7)-(1))|0);
 var $33=($32|0)==0;
 if($33){var $52=32;label=15;break;}else{label=7;break;}
 case 7: 
 var $34=$32&1;
 var $35=($34|0)==0;
 if($35){var $_02_i_i=$32;var $nTrailingZeros_03_i_i=0;label=8;break;}else{label=10;break;}
 case 8: 
 var $nTrailingZeros_03_i_i;
 var $_02_i_i;
 var $36=((($nTrailingZeros_03_i_i)+(1))|0);
 var $37=$_02_i_i>>>1;
 var $38=$37&1;
 var $39=($38|0)==0;
 if($39){var $_02_i_i=$37;var $nTrailingZeros_03_i_i=$36;label=8;break;}else{label=9;break;}
 case 9: 
 var $40=($36|0)==0;
 if($40){label=10;break;}else{var $50=$36;label=14;break;}
 case 10: 
 var $41=($8|0)==0;
 if($41){var $_01_i5_i=32;label=13;break;}else{label=11;break;}
 case 11: 
 var $42=$8&1;
 var $43=($42|0)==0;
 if($43){var $_02_i3_i=$8;var $nTrailingZeros_03_i2_i=0;label=12;break;}else{var $_01_i5_i=0;label=13;break;}
 case 12: 
 var $nTrailingZeros_03_i2_i;
 var $_02_i3_i;
 var $44=((($nTrailingZeros_03_i2_i)+(1))|0);
 var $45=$_02_i3_i>>>1;
 var $46=$45&1;
 var $47=($46|0)==0;
 if($47){var $_02_i3_i=$45;var $nTrailingZeros_03_i2_i=$44;label=12;break;}else{var $_01_i5_i=$44;label=13;break;}
 case 13: 
 var $_01_i5_i;
 var $48=((($_01_i5_i)+(32))|0);
 var $49=($_01_i5_i|0)==0;
 var $__i=($49?0:$48);
 var $50=$__i;label=14;break;
 case 14: 
 var $50;
 var $51=($50>>>0)>31;
 if($51){var $52=$50;label=15;break;}else{var $_0_i=$50;var $56=$7;var $55=$8;var $54=$50;label=16;break;}
 case 15: 
 var $52;
 var $53=((($52)-(32))|0);
 var $_0_i=$53;var $56=$8;var $55=0;var $54=$52;label=16;break;
 case 16: 
 var $54;
 var $55;
 var $56;
 var $_0_i;
 var $57=$56>>>($_0_i>>>0);
 var $58=(((32)-($_0_i))|0);
 var $59=$55<<$58;
 var $60=$59|$57;
 var $61=$55>>>($_0_i>>>0);
 var $62=((($54)+($_0110))|0);
 var $63=($60|0)==1;
 var $64=($61|0)==0;
 var $or_cond1=$63&$64;
 if($or_cond1){var $_0_lcssa26=$12;var $i_0_lcssa27=$30;var $_01_lcssa28=$62;label=19;break;}else{label=17;break;}
 case 17: 
 var $_pre=HEAP32[(($2)>>2)];
 var $8=$61;var $7=$60;var $_029=0;var $_0110=$62;var $i_011=$30;var $_012=$12;var $6=$_pre;label=2;break;
 case 18: 
 var $_0_lcssa;
 var $i_0_lcssa;
 var $_01_lcssa;
 var $_02_lcssa;
 var $65=($_02_lcssa|0)==0;
 if($65){var $_0_lcssa26=$_0_lcssa;var $i_0_lcssa27=$i_0_lcssa;var $_01_lcssa28=$_01_lcssa;label=19;break;}else{label=47;break;}
 case 19: 
 var $_01_lcssa28;
 var $i_0_lcssa27;
 var $_0_lcssa26;
 var $66=(($tmp_i6)|0);
 var $$etemp$1$0=256;
 var $$etemp$1$1=0;

 var $67=($i_0_lcssa27|0)<2;
 if($67){label=28;break;}else{label=20;break;}
 case 20: 
 var $69=(($ar+($i_0_lcssa27<<2))|0);
 HEAP32[(($69)>>2)]=$66;
 var $70=($width|0)==0;
 if($70){label=28;break;}else{label=21;break;}
 case 21: 
 var $71=($i_0_lcssa27|0)>0;
 if($71){var $_02_us_i11=$width;var $87=$66;label=26;break;}else{label=22;break;}
 case 22: 
 var $72=($width>>>0)>256;
 var $73=($72?256:$width);
 var $74=HEAP32[(($2)>>2)];
 assert($73 % 1 === 0);(_memcpy($66, $74, $73)|0);
 var $75=($73|0)==($width|0);
 if($75){label=28;break;}else{var $_02_i136=$width;var $91=$73;label=27;break;}
 case 23: 
 var $77=($_02_us_i11|0)==($89|0);
 if($77){label=28;break;}else{label=24;break;}
 case 24: 
 var $78=((($_02_us_i11)-($89))|0);
 var $_pre_i8=HEAP32[(($69)>>2)];
 var $_02_us_i11=$78;var $87=$_pre_i8;label=26;break;
 case 25: 
 var $80;
 var $i_01_us_i10;
 var $81=(($ar+($i_01_us_i10<<2))|0);
 var $82=((($i_01_us_i10)+(1))|0);
 var $83=(($ar+($82<<2))|0);
 var $84=HEAP32[(($83)>>2)];
 assert($89 % 1 === 0);(_memcpy($80, $84, $89)|0);
 var $85=(($80+$89)|0);
 HEAP32[(($81)>>2)]=$85;
 var $86=($82|0)<($i_0_lcssa27|0);
 if($86){var $i_01_us_i10=$82;var $80=$84;label=25;break;}else{label=23;break;}
 case 26: 
 var $87;
 var $_02_us_i11;
 var $88=($_02_us_i11>>>0)>256;
 var $89=($88?256:$_02_us_i11);
 var $90=HEAP32[(($2)>>2)];
 assert($89 % 1 === 0);(_memcpy($87, $90, $89)|0);
 var $i_01_us_i10=0;var $80=$90;label=25;break;
 case 27: 
 var $91;
 var $_02_i136;
 var $92=((($_02_i136)-($91))|0);
 var $93=($92>>>0)>256;
 var $94=($93?256:$92);
 assert($94 % 1 === 0);(_memcpy($66, $74, $94)|0);
 var $95=($92|0)==($94|0);
 if($95){label=28;break;}else{var $_02_i136=$92;var $91=$94;label=27;break;}
 case 28: 
 var $$etemp$2$0=256;
 var $$etemp$2$1=0;

 var $96=$ar_i;
 var $$etemp$3$0=228;
 var $$etemp$3$1=0;

 var $97=(($ar_i)|0);
 HEAP32[(($97)>>2)]=$_0_lcssa26;
 var $98=($_01_lcssa28|0)>1;
 if($98){var $_012_i=$_01_lcssa28;var $_03_i=$_0_lcssa26;var $i_04_i=1;var $100=$_0_lcssa26;label=30;break;}else{label=29;break;}
 case 29: 
 var $99=(($tmp_i)|0);
 var $$etemp$4$0=256;
 var $$etemp$4$1=0;

 var $150=$99;label=46;break;
 case 30: 
 var $100;
 var $i_04_i;
 var $_03_i;
 var $_012_i;
 var $101=(($_03_i+$3)|0);
 var $102=((($_012_i)-(2))|0);
 var $103=(($lp+($102<<2))|0);
 var $104=HEAP32[(($103)>>2)];
 var $sum_i=((($104)+($width))|0);
 var $_sum_i=(((-$sum_i))|0);
 var $105=(($_03_i+$_sum_i)|0);
 var $106=FUNCTION_TABLE[$cmp]($100,$105);
 var $107=($106|0)>-1;
 if($107){label=31;break;}else{label=32;break;}
 case 31: 
 var $109=FUNCTION_TABLE[$cmp]($100,$101);
 var $110=($109|0)>-1;
 if($110){var $i_0_lcssa_i=$i_04_i;label=37;break;}else{label=32;break;}
 case 32: 
 var $112=FUNCTION_TABLE[$cmp]($105,$101);
 var $113=($112|0)>-1;
 var $114=((($i_04_i)+(1))|0);
 var $115=(($ar_i+($i_04_i<<2))|0);
 if($113){label=33;break;}else{label=34;break;}
 case 33: 
 HEAP32[(($115)>>2)]=$105;
 var $117=((($_012_i)-(1))|0);
 var $_0_be_i=$105;var $_01_be_i=$117;label=35;break;
 case 34: 
 HEAP32[(($115)>>2)]=$101;
 var $_0_be_i=$101;var $_01_be_i=$102;label=35;break;
 case 35: 
 var $_01_be_i;
 var $_0_be_i;
 var $119=($_01_be_i|0)>1;
 if($119){label=36;break;}else{var $i_0_lcssa_i=$114;label=37;break;}
 case 36: 
 var $_pre_i=HEAP32[(($97)>>2)];
 var $_012_i=$_01_be_i;var $_03_i=$_0_be_i;var $i_04_i=$114;var $100=$_pre_i;label=30;break;
 case 37: 
 var $i_0_lcssa_i;
 var $120=(($tmp_i)|0);
 var $$etemp$5$0=256;
 var $$etemp$5$1=0;

 var $121=($i_0_lcssa_i|0)<2;
 if($121){var $150=$120;label=46;break;}else{label=38;break;}
 case 38: 
 var $123=(($ar_i+($i_0_lcssa_i<<2))|0);
 HEAP32[(($123)>>2)]=$120;
 var $124=($width|0)==0;
 if($124){var $150=$120;label=46;break;}else{label=39;break;}
 case 39: 
 var $125=($i_0_lcssa_i|0)>0;
 if($125){var $_02_us_i=$width;var $141=$120;label=44;break;}else{label=40;break;}
 case 40: 
 var $126=($width>>>0)>256;
 var $127=($126?256:$width);
 var $128=HEAP32[(($97)>>2)];
 assert($127 % 1 === 0);(_memcpy($120, $128, $127)|0);
 var $129=($127|0)==($width|0);
 if($129){var $150=$120;label=46;break;}else{var $_02_i3=$width;var $145=$127;label=45;break;}
 case 41: 
 var $131=($_02_us_i|0)==($143|0);
 if($131){var $150=$120;label=46;break;}else{label=42;break;}
 case 42: 
 var $132=((($_02_us_i)-($143))|0);
 var $_pre_i3=HEAP32[(($123)>>2)];
 var $_02_us_i=$132;var $141=$_pre_i3;label=44;break;
 case 43: 
 var $134;
 var $i_01_us_i;
 var $135=(($ar_i+($i_01_us_i<<2))|0);
 var $136=((($i_01_us_i)+(1))|0);
 var $137=(($ar_i+($136<<2))|0);
 var $138=HEAP32[(($137)>>2)];
 assert($143 % 1 === 0);(_memcpy($134, $138, $143)|0);
 var $139=(($134+$143)|0);
 HEAP32[(($135)>>2)]=$139;
 var $140=($136|0)<($i_0_lcssa_i|0);
 if($140){var $i_01_us_i=$136;var $134=$138;label=43;break;}else{label=41;break;}
 case 44: 
 var $141;
 var $_02_us_i;
 var $142=($_02_us_i>>>0)>256;
 var $143=($142?256:$_02_us_i);
 var $144=HEAP32[(($97)>>2)];
 assert($143 % 1 === 0);(_memcpy($141, $144, $143)|0);
 var $i_01_us_i=0;var $134=$144;label=43;break;
 case 45: 
 var $145;
 var $_02_i3;
 var $146=((($_02_i3)-($145))|0);
 var $147=($146>>>0)>256;
 var $148=($147?256:$146);
 assert($148 % 1 === 0);(_memcpy($120, $128, $148)|0);
 var $149=($146|0)==($148|0);
 if($149){var $150=$120;label=46;break;}else{var $_02_i3=$146;var $145=$148;label=45;break;}
 case 46: 
 var $150;
 var $$etemp$6$0=256;
 var $$etemp$6$1=0;

 var $$etemp$7$0=228;
 var $$etemp$7$1=0;

 label=47;break;
 case 47: 
 var $$etemp$8$0=228;
 var $$etemp$8$1=0;

 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function _strchr($s,$c){
 var label=0;


 var $1=___strchrnul($s,$c);
 var $2=HEAP8[(($1)>>0)];
 var $3=(($c)&255);
 var $4=(($2<<24)>>24)==(($3<<24)>>24);
 var $5=($4?$1:0);
 return $5;
}


function ___strchrnul($s,$c){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=$c&255;
 var $2=($1|0)==0;
 if($2){label=4;break;}else{label=2;break;}
 case 2: 
 var $3=$s;
 var $4=$3&3;
 var $5=($4|0)==0;
 if($5){var $_02_lcssa=$s;label=8;break;}else{label=3;break;}
 case 3: 
 var $6=(($c)&255);
 var $_026=$s;label=6;break;
 case 4: 
 var $8=_strlen($s);
 var $9=(($s+$8)|0);
 var $_0=$9;label=13;break;
 case 5: 
 var $11=$19;
 var $12=$11&3;
 var $13=($12|0)==0;
 if($13){var $_02_lcssa=$19;label=8;break;}else{var $_026=$19;label=6;break;}
 case 6: 
 var $_026;
 var $15=HEAP8[(($_026)>>0)];
 var $16=(($15<<24)>>24)==0;
 if($16){var $_0=$_026;label=13;break;}else{label=7;break;}
 case 7: 
 var $18=(($15<<24)>>24)==(($6<<24)>>24);
 var $19=(($_026+1)|0);
 if($18){var $_0=$_026;label=13;break;}else{label=5;break;}
 case 8: 
 var $_02_lcssa;
 var $20=(Math_imul($1,16843009)|0);
 var $21=$_02_lcssa;
 var $22=HEAP32[(($21)>>2)];
 var $23=((($22)-(16843009))|0);
 var $24=$22&-2139062144;
 var $25=$24^-2139062144;
 var $26=$25&$23;
 var $27=($26|0)==0;
 if($27){var $w_03=$21;var $35=$22;label=10;break;}else{var $w_0_lcssa=$21;label=11;break;}
 case 9: 
 var $29=HEAP32[(($42)>>2)];
 var $30=((($29)-(16843009))|0);
 var $31=$29&-2139062144;
 var $32=$31^-2139062144;
 var $33=$32&$30;
 var $34=($33|0)==0;
 if($34){var $w_03=$42;var $35=$29;label=10;break;}else{var $w_0_lcssa=$42;label=11;break;}
 case 10: 
 var $35;
 var $w_03;
 var $36=$35^$20;
 var $37=((($36)-(16843009))|0);
 var $38=$36&-2139062144;
 var $39=$38^-2139062144;
 var $40=$39&$37;
 var $41=($40|0)==0;
 var $42=(($w_03+4)|0);
 if($41){label=9;break;}else{var $w_0_lcssa=$w_03;label=11;break;}
 case 11: 
 var $w_0_lcssa;
 var $43=$w_0_lcssa;
 var $44=(($c)&255);
 var $_1=$43;label=12;break;
 case 12: 
 var $_1;
 var $46=HEAP8[(($_1)>>0)];
 var $47=(($46<<24)>>24)==0;
 var $48=(($46<<24)>>24)==(($44<<24)>>24);
 var $or_cond=$47|$48;
 var $49=(($_1+1)|0);
 if($or_cond){var $_0=$_1;label=13;break;}else{var $_1=$49;label=12;break;}
 case 13: 
 var $_0;
 return $_0;
  default: assert(0, "bad label: " + label);
 }

}


function _malloc($bytes){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($bytes>>>0)<245;
 if($1){label=2;break;}else{label=78;break;}
 case 2: 
 var $3=($bytes>>>0)<11;
 if($3){var $8=16;label=4;break;}else{label=3;break;}
 case 3: 
 var $5=((($bytes)+(11))|0);
 var $6=$5&-8;
 var $8=$6;label=4;break;
 case 4: 
 var $8;
 var $9=$8>>>3;
 var $10=HEAP32[((76768)>>2)];
 var $11=$10>>>($9>>>0);
 var $12=$11&3;
 var $13=($12|0)==0;
 if($13){label=12;break;}else{label=5;break;}
 case 5: 
 var $15=$11&1;
 var $16=$15^1;
 var $17=((($16)+($9))|0);
 var $18=$17<<1;
 var $19=((76808+($18<<2))|0);
 var $20=$19;
 var $_sum11=((($18)+(2))|0);
 var $21=((76808+($_sum11<<2))|0);
 var $22=HEAP32[(($21)>>2)];
 var $23=(($22+8)|0);
 var $24=HEAP32[(($23)>>2)];
 var $25=($20|0)==($24|0);
 if($25){label=6;break;}else{label=7;break;}
 case 6: 
 var $27=1<<$17;
 var $28=$27^-1;
 var $29=$10&$28;
 HEAP32[((76768)>>2)]=$29;
 label=11;break;
 case 7: 
 var $31=$24;
 var $32=HEAP32[((76784)>>2)];
 var $33=($31>>>0)<($32>>>0);
 if($33){label=10;break;}else{label=8;break;}
 case 8: 
 var $35=(($24+12)|0);
 var $36=HEAP32[(($35)>>2)];
 var $37=($36|0)==($22|0);
 if($37){label=9;break;}else{label=10;break;}
 case 9: 
 HEAP32[(($35)>>2)]=$20;
 HEAP32[(($21)>>2)]=$24;
 label=11;break;
 case 10: 
 _abort();
 throw "Reached an unreachable!";
 case 11: 
 var $40=$17<<3;
 var $41=$40|3;
 var $42=(($22+4)|0);
 HEAP32[(($42)>>2)]=$41;
 var $43=$22;
 var $_sum1314=$40|4;
 var $44=(($43+$_sum1314)|0);
 var $45=$44;
 var $46=HEAP32[(($45)>>2)];
 var $47=$46|1;
 HEAP32[(($45)>>2)]=$47;
 var $48=$23;
 var $mem_0=$48;label=344;break;
 case 12: 
 var $50=HEAP32[((76776)>>2)];
 var $51=($8>>>0)>($50>>>0);
 if($51){label=13;break;}else{var $nb_0=$8;label=161;break;}
 case 13: 
 var $53=($11|0)==0;
 if($53){label=27;break;}else{label=14;break;}
 case 14: 
 var $55=$11<<$9;
 var $56=2<<$9;
 var $57=(((-$56))|0);
 var $58=$56|$57;
 var $59=$55&$58;
 var $60=(((-$59))|0);
 var $61=$59&$60;
 var $62=((($61)-(1))|0);
 var $63=$62>>>12;
 var $64=$63&16;
 var $65=$62>>>($64>>>0);
 var $66=$65>>>5;
 var $67=$66&8;
 var $68=$67|$64;
 var $69=$65>>>($67>>>0);
 var $70=$69>>>2;
 var $71=$70&4;
 var $72=$68|$71;
 var $73=$69>>>($71>>>0);
 var $74=$73>>>1;
 var $75=$74&2;
 var $76=$72|$75;
 var $77=$73>>>($75>>>0);
 var $78=$77>>>1;
 var $79=$78&1;
 var $80=$76|$79;
 var $81=$77>>>($79>>>0);
 var $82=((($80)+($81))|0);
 var $83=$82<<1;
 var $84=((76808+($83<<2))|0);
 var $85=$84;
 var $_sum4=((($83)+(2))|0);
 var $86=((76808+($_sum4<<2))|0);
 var $87=HEAP32[(($86)>>2)];
 var $88=(($87+8)|0);
 var $89=HEAP32[(($88)>>2)];
 var $90=($85|0)==($89|0);
 if($90){label=15;break;}else{label=16;break;}
 case 15: 
 var $92=1<<$82;
 var $93=$92^-1;
 var $94=$10&$93;
 HEAP32[((76768)>>2)]=$94;
 label=20;break;
 case 16: 
 var $96=$89;
 var $97=HEAP32[((76784)>>2)];
 var $98=($96>>>0)<($97>>>0);
 if($98){label=19;break;}else{label=17;break;}
 case 17: 
 var $100=(($89+12)|0);
 var $101=HEAP32[(($100)>>2)];
 var $102=($101|0)==($87|0);
 if($102){label=18;break;}else{label=19;break;}
 case 18: 
 HEAP32[(($100)>>2)]=$85;
 HEAP32[(($86)>>2)]=$89;
 label=20;break;
 case 19: 
 _abort();
 throw "Reached an unreachable!";
 case 20: 
 var $105=$82<<3;
 var $106=((($105)-($8))|0);
 var $107=$8|3;
 var $108=(($87+4)|0);
 HEAP32[(($108)>>2)]=$107;
 var $109=$87;
 var $110=(($109+$8)|0);
 var $111=$110;
 var $112=$106|1;
 var $_sum67=$8|4;
 var $113=(($109+$_sum67)|0);
 var $114=$113;
 HEAP32[(($114)>>2)]=$112;
 var $115=(($109+$105)|0);
 var $116=$115;
 HEAP32[(($116)>>2)]=$106;
 var $117=HEAP32[((76776)>>2)];
 var $118=($117|0)==0;
 if($118){label=26;break;}else{label=21;break;}
 case 21: 
 var $120=HEAP32[((76788)>>2)];
 var $121=$117>>>3;
 var $122=$121<<1;
 var $123=((76808+($122<<2))|0);
 var $124=$123;
 var $125=HEAP32[((76768)>>2)];
 var $126=1<<$121;
 var $127=$125&$126;
 var $128=($127|0)==0;
 if($128){label=22;break;}else{label=23;break;}
 case 22: 
 var $130=$125|$126;
 HEAP32[((76768)>>2)]=$130;
 var $_sum9_pre=((($122)+(2))|0);
 var $_pre=((76808+($_sum9_pre<<2))|0);
 var $F4_0=$124;var $_pre_phi=$_pre;label=25;break;
 case 23: 
 var $_sum10=((($122)+(2))|0);
 var $132=((76808+($_sum10<<2))|0);
 var $133=HEAP32[(($132)>>2)];
 var $134=$133;
 var $135=HEAP32[((76784)>>2)];
 var $136=($134>>>0)<($135>>>0);
 if($136){label=24;break;}else{var $F4_0=$133;var $_pre_phi=$132;label=25;break;}
 case 24: 
 _abort();
 throw "Reached an unreachable!";
 case 25: 
 var $_pre_phi;
 var $F4_0;
 HEAP32[(($_pre_phi)>>2)]=$120;
 var $139=(($F4_0+12)|0);
 HEAP32[(($139)>>2)]=$120;
 var $140=(($120+8)|0);
 HEAP32[(($140)>>2)]=$F4_0;
 var $141=(($120+12)|0);
 HEAP32[(($141)>>2)]=$124;
 label=26;break;
 case 26: 
 HEAP32[((76776)>>2)]=$106;
 HEAP32[((76788)>>2)]=$111;
 var $143=$88;
 var $mem_0=$143;label=344;break;
 case 27: 
 var $145=HEAP32[((76772)>>2)];
 var $146=($145|0)==0;
 if($146){var $nb_0=$8;label=161;break;}else{label=28;break;}
 case 28: 
 var $148=(((-$145))|0);
 var $149=$145&$148;
 var $150=((($149)-(1))|0);
 var $151=$150>>>12;
 var $152=$151&16;
 var $153=$150>>>($152>>>0);
 var $154=$153>>>5;
 var $155=$154&8;
 var $156=$155|$152;
 var $157=$153>>>($155>>>0);
 var $158=$157>>>2;
 var $159=$158&4;
 var $160=$156|$159;
 var $161=$157>>>($159>>>0);
 var $162=$161>>>1;
 var $163=$162&2;
 var $164=$160|$163;
 var $165=$161>>>($163>>>0);
 var $166=$165>>>1;
 var $167=$166&1;
 var $168=$164|$167;
 var $169=$165>>>($167>>>0);
 var $170=((($168)+($169))|0);
 var $171=((77072+($170<<2))|0);
 var $172=HEAP32[(($171)>>2)];
 var $173=(($172+4)|0);
 var $174=HEAP32[(($173)>>2)];
 var $175=$174&-8;
 var $176=((($175)-($8))|0);
 var $t_0_i=$172;var $v_0_i=$172;var $rsize_0_i=$176;label=29;break;
 case 29: 
 var $rsize_0_i;
 var $v_0_i;
 var $t_0_i;
 var $178=(($t_0_i+16)|0);
 var $179=HEAP32[(($178)>>2)];
 var $180=($179|0)==0;
 if($180){label=30;break;}else{var $185=$179;label=31;break;}
 case 30: 
 var $182=(($t_0_i+20)|0);
 var $183=HEAP32[(($182)>>2)];
 var $184=($183|0)==0;
 if($184){label=32;break;}else{var $185=$183;label=31;break;}
 case 31: 
 var $185;
 var $186=(($185+4)|0);
 var $187=HEAP32[(($186)>>2)];
 var $188=$187&-8;
 var $189=((($188)-($8))|0);
 var $190=($189>>>0)<($rsize_0_i>>>0);
 var $_rsize_0_i=($190?$189:$rsize_0_i);
 var $_v_0_i=($190?$185:$v_0_i);
 var $t_0_i=$185;var $v_0_i=$_v_0_i;var $rsize_0_i=$_rsize_0_i;label=29;break;
 case 32: 
 var $192=$v_0_i;
 var $193=HEAP32[((76784)>>2)];
 var $194=($192>>>0)<($193>>>0);
 if($194){label=76;break;}else{label=33;break;}
 case 33: 
 var $196=(($192+$8)|0);
 var $197=$196;
 var $198=($192>>>0)<($196>>>0);
 if($198){label=34;break;}else{label=76;break;}
 case 34: 
 var $200=(($v_0_i+24)|0);
 var $201=HEAP32[(($200)>>2)];
 var $202=(($v_0_i+12)|0);
 var $203=HEAP32[(($202)>>2)];
 var $204=($203|0)==($v_0_i|0);
 if($204){label=40;break;}else{label=35;break;}
 case 35: 
 var $206=(($v_0_i+8)|0);
 var $207=HEAP32[(($206)>>2)];
 var $208=$207;
 var $209=($208>>>0)<($193>>>0);
 if($209){label=39;break;}else{label=36;break;}
 case 36: 
 var $211=(($207+12)|0);
 var $212=HEAP32[(($211)>>2)];
 var $213=($212|0)==($v_0_i|0);
 if($213){label=37;break;}else{label=39;break;}
 case 37: 
 var $215=(($203+8)|0);
 var $216=HEAP32[(($215)>>2)];
 var $217=($216|0)==($v_0_i|0);
 if($217){label=38;break;}else{label=39;break;}
 case 38: 
 HEAP32[(($211)>>2)]=$203;
 HEAP32[(($215)>>2)]=$207;
 var $R_1_i=$203;label=47;break;
 case 39: 
 _abort();
 throw "Reached an unreachable!";
 case 40: 
 var $220=(($v_0_i+20)|0);
 var $221=HEAP32[(($220)>>2)];
 var $222=($221|0)==0;
 if($222){label=41;break;}else{var $R_0_i=$221;var $RP_0_i=$220;label=42;break;}
 case 41: 
 var $224=(($v_0_i+16)|0);
 var $225=HEAP32[(($224)>>2)];
 var $226=($225|0)==0;
 if($226){var $R_1_i=0;label=47;break;}else{var $R_0_i=$225;var $RP_0_i=$224;label=42;break;}
 case 42: 
 var $RP_0_i;
 var $R_0_i;
 var $227=(($R_0_i+20)|0);
 var $228=HEAP32[(($227)>>2)];
 var $229=($228|0)==0;
 if($229){label=43;break;}else{var $R_0_i=$228;var $RP_0_i=$227;label=42;break;}
 case 43: 
 var $231=(($R_0_i+16)|0);
 var $232=HEAP32[(($231)>>2)];
 var $233=($232|0)==0;
 if($233){label=44;break;}else{var $R_0_i=$232;var $RP_0_i=$231;label=42;break;}
 case 44: 
 var $235=$RP_0_i;
 var $236=($235>>>0)<($193>>>0);
 if($236){label=46;break;}else{label=45;break;}
 case 45: 
 HEAP32[(($RP_0_i)>>2)]=0;
 var $R_1_i=$R_0_i;label=47;break;
 case 46: 
 _abort();
 throw "Reached an unreachable!";
 case 47: 
 var $R_1_i;
 var $240=($201|0)==0;
 if($240){label=67;break;}else{label=48;break;}
 case 48: 
 var $242=(($v_0_i+28)|0);
 var $243=HEAP32[(($242)>>2)];
 var $244=((77072+($243<<2))|0);
 var $245=HEAP32[(($244)>>2)];
 var $246=($v_0_i|0)==($245|0);
 if($246){label=49;break;}else{label=51;break;}
 case 49: 
 HEAP32[(($244)>>2)]=$R_1_i;
 var $cond_i=($R_1_i|0)==0;
 if($cond_i){label=50;break;}else{label=57;break;}
 case 50: 
 var $248=1<<$243;
 var $249=$248^-1;
 var $250=HEAP32[((76772)>>2)];
 var $251=$250&$249;
 HEAP32[((76772)>>2)]=$251;
 label=67;break;
 case 51: 
 var $253=$201;
 var $254=HEAP32[((76784)>>2)];
 var $255=($253>>>0)<($254>>>0);
 if($255){label=55;break;}else{label=52;break;}
 case 52: 
 var $257=(($201+16)|0);
 var $258=HEAP32[(($257)>>2)];
 var $259=($258|0)==($v_0_i|0);
 if($259){label=53;break;}else{label=54;break;}
 case 53: 
 HEAP32[(($257)>>2)]=$R_1_i;
 label=56;break;
 case 54: 
 var $262=(($201+20)|0);
 HEAP32[(($262)>>2)]=$R_1_i;
 label=56;break;
 case 55: 
 _abort();
 throw "Reached an unreachable!";
 case 56: 
 var $265=($R_1_i|0)==0;
 if($265){label=67;break;}else{label=57;break;}
 case 57: 
 var $267=$R_1_i;
 var $268=HEAP32[((76784)>>2)];
 var $269=($267>>>0)<($268>>>0);
 if($269){label=66;break;}else{label=58;break;}
 case 58: 
 var $271=(($R_1_i+24)|0);
 HEAP32[(($271)>>2)]=$201;
 var $272=(($v_0_i+16)|0);
 var $273=HEAP32[(($272)>>2)];
 var $274=($273|0)==0;
 if($274){label=62;break;}else{label=59;break;}
 case 59: 
 var $276=$273;
 var $277=HEAP32[((76784)>>2)];
 var $278=($276>>>0)<($277>>>0);
 if($278){label=61;break;}else{label=60;break;}
 case 60: 
 var $280=(($R_1_i+16)|0);
 HEAP32[(($280)>>2)]=$273;
 var $281=(($273+24)|0);
 HEAP32[(($281)>>2)]=$R_1_i;
 label=62;break;
 case 61: 
 _abort();
 throw "Reached an unreachable!";
 case 62: 
 var $284=(($v_0_i+20)|0);
 var $285=HEAP32[(($284)>>2)];
 var $286=($285|0)==0;
 if($286){label=67;break;}else{label=63;break;}
 case 63: 
 var $288=$285;
 var $289=HEAP32[((76784)>>2)];
 var $290=($288>>>0)<($289>>>0);
 if($290){label=65;break;}else{label=64;break;}
 case 64: 
 var $292=(($R_1_i+20)|0);
 HEAP32[(($292)>>2)]=$285;
 var $293=(($285+24)|0);
 HEAP32[(($293)>>2)]=$R_1_i;
 label=67;break;
 case 65: 
 _abort();
 throw "Reached an unreachable!";
 case 66: 
 _abort();
 throw "Reached an unreachable!";
 case 67: 
 var $297=($rsize_0_i>>>0)<16;
 if($297){label=68;break;}else{label=69;break;}
 case 68: 
 var $299=((($rsize_0_i)+($8))|0);
 var $300=$299|3;
 var $301=(($v_0_i+4)|0);
 HEAP32[(($301)>>2)]=$300;
 var $_sum4_i=((($299)+(4))|0);
 var $302=(($192+$_sum4_i)|0);
 var $303=$302;
 var $304=HEAP32[(($303)>>2)];
 var $305=$304|1;
 HEAP32[(($303)>>2)]=$305;
 label=77;break;
 case 69: 
 var $307=$8|3;
 var $308=(($v_0_i+4)|0);
 HEAP32[(($308)>>2)]=$307;
 var $309=$rsize_0_i|1;
 var $_sum_i37=$8|4;
 var $310=(($192+$_sum_i37)|0);
 var $311=$310;
 HEAP32[(($311)>>2)]=$309;
 var $_sum1_i=((($rsize_0_i)+($8))|0);
 var $312=(($192+$_sum1_i)|0);
 var $313=$312;
 HEAP32[(($313)>>2)]=$rsize_0_i;
 var $314=HEAP32[((76776)>>2)];
 var $315=($314|0)==0;
 if($315){label=75;break;}else{label=70;break;}
 case 70: 
 var $317=HEAP32[((76788)>>2)];
 var $318=$314>>>3;
 var $319=$318<<1;
 var $320=((76808+($319<<2))|0);
 var $321=$320;
 var $322=HEAP32[((76768)>>2)];
 var $323=1<<$318;
 var $324=$322&$323;
 var $325=($324|0)==0;
 if($325){label=71;break;}else{label=72;break;}
 case 71: 
 var $327=$322|$323;
 HEAP32[((76768)>>2)]=$327;
 var $_sum2_pre_i=((($319)+(2))|0);
 var $_pre_i=((76808+($_sum2_pre_i<<2))|0);
 var $F1_0_i=$321;var $_pre_phi_i=$_pre_i;label=74;break;
 case 72: 
 var $_sum3_i=((($319)+(2))|0);
 var $329=((76808+($_sum3_i<<2))|0);
 var $330=HEAP32[(($329)>>2)];
 var $331=$330;
 var $332=HEAP32[((76784)>>2)];
 var $333=($331>>>0)<($332>>>0);
 if($333){label=73;break;}else{var $F1_0_i=$330;var $_pre_phi_i=$329;label=74;break;}
 case 73: 
 _abort();
 throw "Reached an unreachable!";
 case 74: 
 var $_pre_phi_i;
 var $F1_0_i;
 HEAP32[(($_pre_phi_i)>>2)]=$317;
 var $336=(($F1_0_i+12)|0);
 HEAP32[(($336)>>2)]=$317;
 var $337=(($317+8)|0);
 HEAP32[(($337)>>2)]=$F1_0_i;
 var $338=(($317+12)|0);
 HEAP32[(($338)>>2)]=$321;
 label=75;break;
 case 75: 
 HEAP32[((76776)>>2)]=$rsize_0_i;
 HEAP32[((76788)>>2)]=$197;
 label=77;break;
 case 76: 
 _abort();
 throw "Reached an unreachable!";
 case 77: 
 var $341=(($v_0_i+8)|0);
 var $342=$341;
 var $mem_0=$342;label=344;break;
 case 78: 
 var $344=($bytes>>>0)>4294967231;
 if($344){var $nb_0=-1;label=161;break;}else{label=79;break;}
 case 79: 
 var $346=((($bytes)+(11))|0);
 var $347=$346&-8;
 var $348=HEAP32[((76772)>>2)];
 var $349=($348|0)==0;
 if($349){var $nb_0=$347;label=161;break;}else{label=80;break;}
 case 80: 
 var $351=(((-$347))|0);
 var $352=$346>>>8;
 var $353=($352|0)==0;
 if($353){var $idx_0_i=0;label=83;break;}else{label=81;break;}
 case 81: 
 var $355=($347>>>0)>16777215;
 if($355){var $idx_0_i=31;label=83;break;}else{label=82;break;}
 case 82: 
 var $357=((($352)+(1048320))|0);
 var $358=$357>>>16;
 var $359=$358&8;
 var $360=$352<<$359;
 var $361=((($360)+(520192))|0);
 var $362=$361>>>16;
 var $363=$362&4;
 var $364=$363|$359;
 var $365=$360<<$363;
 var $366=((($365)+(245760))|0);
 var $367=$366>>>16;
 var $368=$367&2;
 var $369=$364|$368;
 var $370=(((14)-($369))|0);
 var $371=$365<<$368;
 var $372=$371>>>15;
 var $373=((($370)+($372))|0);
 var $374=$373<<1;
 var $375=((($373)+(7))|0);
 var $376=$347>>>($375>>>0);
 var $377=$376&1;
 var $378=$377|$374;
 var $idx_0_i=$378;label=83;break;
 case 83: 
 var $idx_0_i;
 var $380=((77072+($idx_0_i<<2))|0);
 var $381=HEAP32[(($380)>>2)];
 var $382=($381|0)==0;
 if($382){var $v_2_i=0;var $rsize_2_i=$351;var $t_1_i=0;label=90;break;}else{label=84;break;}
 case 84: 
 var $384=($idx_0_i|0)==31;
 if($384){var $389=0;label=86;break;}else{label=85;break;}
 case 85: 
 var $386=$idx_0_i>>>1;
 var $387=(((25)-($386))|0);
 var $389=$387;label=86;break;
 case 86: 
 var $389;
 var $390=$347<<$389;
 var $v_0_i18=0;var $rsize_0_i17=$351;var $t_0_i16=$381;var $sizebits_0_i=$390;var $rst_0_i=0;label=87;break;
 case 87: 
 var $rst_0_i;
 var $sizebits_0_i;
 var $t_0_i16;
 var $rsize_0_i17;
 var $v_0_i18;
 var $392=(($t_0_i16+4)|0);
 var $393=HEAP32[(($392)>>2)];
 var $394=$393&-8;
 var $395=((($394)-($347))|0);
 var $396=($395>>>0)<($rsize_0_i17>>>0);
 if($396){label=88;break;}else{var $v_1_i=$v_0_i18;var $rsize_1_i=$rsize_0_i17;label=89;break;}
 case 88: 
 var $398=($394|0)==($347|0);
 if($398){var $v_2_i=$t_0_i16;var $rsize_2_i=$395;var $t_1_i=$t_0_i16;label=90;break;}else{var $v_1_i=$t_0_i16;var $rsize_1_i=$395;label=89;break;}
 case 89: 
 var $rsize_1_i;
 var $v_1_i;
 var $400=(($t_0_i16+20)|0);
 var $401=HEAP32[(($400)>>2)];
 var $402=$sizebits_0_i>>>31;
 var $403=(($t_0_i16+16+($402<<2))|0);
 var $404=HEAP32[(($403)>>2)];
 var $405=($401|0)==0;
 var $406=($401|0)==($404|0);
 var $or_cond_i=$405|$406;
 var $rst_1_i=($or_cond_i?$rst_0_i:$401);
 var $407=($404|0)==0;
 var $408=$sizebits_0_i<<1;
 if($407){var $v_2_i=$v_1_i;var $rsize_2_i=$rsize_1_i;var $t_1_i=$rst_1_i;label=90;break;}else{var $v_0_i18=$v_1_i;var $rsize_0_i17=$rsize_1_i;var $t_0_i16=$404;var $sizebits_0_i=$408;var $rst_0_i=$rst_1_i;label=87;break;}
 case 90: 
 var $t_1_i;
 var $rsize_2_i;
 var $v_2_i;
 var $409=($t_1_i|0)==0;
 var $410=($v_2_i|0)==0;
 var $or_cond21_i=$409&$410;
 if($or_cond21_i){label=91;break;}else{var $t_2_ph_i=$t_1_i;label=93;break;}
 case 91: 
 var $412=2<<$idx_0_i;
 var $413=(((-$412))|0);
 var $414=$412|$413;
 var $415=$348&$414;
 var $416=($415|0)==0;
 if($416){var $nb_0=$347;label=161;break;}else{label=92;break;}
 case 92: 
 var $418=(((-$415))|0);
 var $419=$415&$418;
 var $420=((($419)-(1))|0);
 var $421=$420>>>12;
 var $422=$421&16;
 var $423=$420>>>($422>>>0);
 var $424=$423>>>5;
 var $425=$424&8;
 var $426=$425|$422;
 var $427=$423>>>($425>>>0);
 var $428=$427>>>2;
 var $429=$428&4;
 var $430=$426|$429;
 var $431=$427>>>($429>>>0);
 var $432=$431>>>1;
 var $433=$432&2;
 var $434=$430|$433;
 var $435=$431>>>($433>>>0);
 var $436=$435>>>1;
 var $437=$436&1;
 var $438=$434|$437;
 var $439=$435>>>($437>>>0);
 var $440=((($438)+($439))|0);
 var $441=((77072+($440<<2))|0);
 var $442=HEAP32[(($441)>>2)];
 var $t_2_ph_i=$442;label=93;break;
 case 93: 
 var $t_2_ph_i;
 var $443=($t_2_ph_i|0)==0;
 if($443){var $rsize_3_lcssa_i=$rsize_2_i;var $v_3_lcssa_i=$v_2_i;label=96;break;}else{var $t_230_i=$t_2_ph_i;var $rsize_331_i=$rsize_2_i;var $v_332_i=$v_2_i;label=94;break;}
 case 94: 
 var $v_332_i;
 var $rsize_331_i;
 var $t_230_i;
 var $444=(($t_230_i+4)|0);
 var $445=HEAP32[(($444)>>2)];
 var $446=$445&-8;
 var $447=((($446)-($347))|0);
 var $448=($447>>>0)<($rsize_331_i>>>0);
 var $_rsize_3_i=($448?$447:$rsize_331_i);
 var $t_2_v_3_i=($448?$t_230_i:$v_332_i);
 var $449=(($t_230_i+16)|0);
 var $450=HEAP32[(($449)>>2)];
 var $451=($450|0)==0;
 if($451){label=95;break;}else{var $t_230_i=$450;var $rsize_331_i=$_rsize_3_i;var $v_332_i=$t_2_v_3_i;label=94;break;}
 case 95: 
 var $452=(($t_230_i+20)|0);
 var $453=HEAP32[(($452)>>2)];
 var $454=($453|0)==0;
 if($454){var $rsize_3_lcssa_i=$_rsize_3_i;var $v_3_lcssa_i=$t_2_v_3_i;label=96;break;}else{var $t_230_i=$453;var $rsize_331_i=$_rsize_3_i;var $v_332_i=$t_2_v_3_i;label=94;break;}
 case 96: 
 var $v_3_lcssa_i;
 var $rsize_3_lcssa_i;
 var $455=($v_3_lcssa_i|0)==0;
 if($455){var $nb_0=$347;label=161;break;}else{label=97;break;}
 case 97: 
 var $457=HEAP32[((76776)>>2)];
 var $458=((($457)-($347))|0);
 var $459=($rsize_3_lcssa_i>>>0)<($458>>>0);
 if($459){label=98;break;}else{var $nb_0=$347;label=161;break;}
 case 98: 
 var $461=$v_3_lcssa_i;
 var $462=HEAP32[((76784)>>2)];
 var $463=($461>>>0)<($462>>>0);
 if($463){label=159;break;}else{label=99;break;}
 case 99: 
 var $465=(($461+$347)|0);
 var $466=$465;
 var $467=($461>>>0)<($465>>>0);
 if($467){label=100;break;}else{label=159;break;}
 case 100: 
 var $469=(($v_3_lcssa_i+24)|0);
 var $470=HEAP32[(($469)>>2)];
 var $471=(($v_3_lcssa_i+12)|0);
 var $472=HEAP32[(($471)>>2)];
 var $473=($472|0)==($v_3_lcssa_i|0);
 if($473){label=106;break;}else{label=101;break;}
 case 101: 
 var $475=(($v_3_lcssa_i+8)|0);
 var $476=HEAP32[(($475)>>2)];
 var $477=$476;
 var $478=($477>>>0)<($462>>>0);
 if($478){label=105;break;}else{label=102;break;}
 case 102: 
 var $480=(($476+12)|0);
 var $481=HEAP32[(($480)>>2)];
 var $482=($481|0)==($v_3_lcssa_i|0);
 if($482){label=103;break;}else{label=105;break;}
 case 103: 
 var $484=(($472+8)|0);
 var $485=HEAP32[(($484)>>2)];
 var $486=($485|0)==($v_3_lcssa_i|0);
 if($486){label=104;break;}else{label=105;break;}
 case 104: 
 HEAP32[(($480)>>2)]=$472;
 HEAP32[(($484)>>2)]=$476;
 var $R_1_i22=$472;label=113;break;
 case 105: 
 _abort();
 throw "Reached an unreachable!";
 case 106: 
 var $489=(($v_3_lcssa_i+20)|0);
 var $490=HEAP32[(($489)>>2)];
 var $491=($490|0)==0;
 if($491){label=107;break;}else{var $R_0_i20=$490;var $RP_0_i19=$489;label=108;break;}
 case 107: 
 var $493=(($v_3_lcssa_i+16)|0);
 var $494=HEAP32[(($493)>>2)];
 var $495=($494|0)==0;
 if($495){var $R_1_i22=0;label=113;break;}else{var $R_0_i20=$494;var $RP_0_i19=$493;label=108;break;}
 case 108: 
 var $RP_0_i19;
 var $R_0_i20;
 var $496=(($R_0_i20+20)|0);
 var $497=HEAP32[(($496)>>2)];
 var $498=($497|0)==0;
 if($498){label=109;break;}else{var $R_0_i20=$497;var $RP_0_i19=$496;label=108;break;}
 case 109: 
 var $500=(($R_0_i20+16)|0);
 var $501=HEAP32[(($500)>>2)];
 var $502=($501|0)==0;
 if($502){label=110;break;}else{var $R_0_i20=$501;var $RP_0_i19=$500;label=108;break;}
 case 110: 
 var $504=$RP_0_i19;
 var $505=($504>>>0)<($462>>>0);
 if($505){label=112;break;}else{label=111;break;}
 case 111: 
 HEAP32[(($RP_0_i19)>>2)]=0;
 var $R_1_i22=$R_0_i20;label=113;break;
 case 112: 
 _abort();
 throw "Reached an unreachable!";
 case 113: 
 var $R_1_i22;
 var $509=($470|0)==0;
 if($509){label=133;break;}else{label=114;break;}
 case 114: 
 var $511=(($v_3_lcssa_i+28)|0);
 var $512=HEAP32[(($511)>>2)];
 var $513=((77072+($512<<2))|0);
 var $514=HEAP32[(($513)>>2)];
 var $515=($v_3_lcssa_i|0)==($514|0);
 if($515){label=115;break;}else{label=117;break;}
 case 115: 
 HEAP32[(($513)>>2)]=$R_1_i22;
 var $cond_i23=($R_1_i22|0)==0;
 if($cond_i23){label=116;break;}else{label=123;break;}
 case 116: 
 var $517=1<<$512;
 var $518=$517^-1;
 var $519=HEAP32[((76772)>>2)];
 var $520=$519&$518;
 HEAP32[((76772)>>2)]=$520;
 label=133;break;
 case 117: 
 var $522=$470;
 var $523=HEAP32[((76784)>>2)];
 var $524=($522>>>0)<($523>>>0);
 if($524){label=121;break;}else{label=118;break;}
 case 118: 
 var $526=(($470+16)|0);
 var $527=HEAP32[(($526)>>2)];
 var $528=($527|0)==($v_3_lcssa_i|0);
 if($528){label=119;break;}else{label=120;break;}
 case 119: 
 HEAP32[(($526)>>2)]=$R_1_i22;
 label=122;break;
 case 120: 
 var $531=(($470+20)|0);
 HEAP32[(($531)>>2)]=$R_1_i22;
 label=122;break;
 case 121: 
 _abort();
 throw "Reached an unreachable!";
 case 122: 
 var $534=($R_1_i22|0)==0;
 if($534){label=133;break;}else{label=123;break;}
 case 123: 
 var $536=$R_1_i22;
 var $537=HEAP32[((76784)>>2)];
 var $538=($536>>>0)<($537>>>0);
 if($538){label=132;break;}else{label=124;break;}
 case 124: 
 var $540=(($R_1_i22+24)|0);
 HEAP32[(($540)>>2)]=$470;
 var $541=(($v_3_lcssa_i+16)|0);
 var $542=HEAP32[(($541)>>2)];
 var $543=($542|0)==0;
 if($543){label=128;break;}else{label=125;break;}
 case 125: 
 var $545=$542;
 var $546=HEAP32[((76784)>>2)];
 var $547=($545>>>0)<($546>>>0);
 if($547){label=127;break;}else{label=126;break;}
 case 126: 
 var $549=(($R_1_i22+16)|0);
 HEAP32[(($549)>>2)]=$542;
 var $550=(($542+24)|0);
 HEAP32[(($550)>>2)]=$R_1_i22;
 label=128;break;
 case 127: 
 _abort();
 throw "Reached an unreachable!";
 case 128: 
 var $553=(($v_3_lcssa_i+20)|0);
 var $554=HEAP32[(($553)>>2)];
 var $555=($554|0)==0;
 if($555){label=133;break;}else{label=129;break;}
 case 129: 
 var $557=$554;
 var $558=HEAP32[((76784)>>2)];
 var $559=($557>>>0)<($558>>>0);
 if($559){label=131;break;}else{label=130;break;}
 case 130: 
 var $561=(($R_1_i22+20)|0);
 HEAP32[(($561)>>2)]=$554;
 var $562=(($554+24)|0);
 HEAP32[(($562)>>2)]=$R_1_i22;
 label=133;break;
 case 131: 
 _abort();
 throw "Reached an unreachable!";
 case 132: 
 _abort();
 throw "Reached an unreachable!";
 case 133: 
 var $566=($rsize_3_lcssa_i>>>0)<16;
 if($566){label=134;break;}else{label=135;break;}
 case 134: 
 var $568=((($rsize_3_lcssa_i)+($347))|0);
 var $569=$568|3;
 var $570=(($v_3_lcssa_i+4)|0);
 HEAP32[(($570)>>2)]=$569;
 var $_sum19_i=((($568)+(4))|0);
 var $571=(($461+$_sum19_i)|0);
 var $572=$571;
 var $573=HEAP32[(($572)>>2)];
 var $574=$573|1;
 HEAP32[(($572)>>2)]=$574;
 label=160;break;
 case 135: 
 var $576=$347|3;
 var $577=(($v_3_lcssa_i+4)|0);
 HEAP32[(($577)>>2)]=$576;
 var $578=$rsize_3_lcssa_i|1;
 var $_sum_i2536=$347|4;
 var $579=(($461+$_sum_i2536)|0);
 var $580=$579;
 HEAP32[(($580)>>2)]=$578;
 var $_sum1_i26=((($rsize_3_lcssa_i)+($347))|0);
 var $581=(($461+$_sum1_i26)|0);
 var $582=$581;
 HEAP32[(($582)>>2)]=$rsize_3_lcssa_i;
 var $583=$rsize_3_lcssa_i>>>3;
 var $584=($rsize_3_lcssa_i>>>0)<256;
 if($584){label=136;break;}else{label=141;break;}
 case 136: 
 var $586=$583<<1;
 var $587=((76808+($586<<2))|0);
 var $588=$587;
 var $589=HEAP32[((76768)>>2)];
 var $590=1<<$583;
 var $591=$589&$590;
 var $592=($591|0)==0;
 if($592){label=137;break;}else{label=138;break;}
 case 137: 
 var $594=$589|$590;
 HEAP32[((76768)>>2)]=$594;
 var $_sum15_pre_i=((($586)+(2))|0);
 var $_pre_i27=((76808+($_sum15_pre_i<<2))|0);
 var $F5_0_i=$588;var $_pre_phi_i28=$_pre_i27;label=140;break;
 case 138: 
 var $_sum18_i=((($586)+(2))|0);
 var $596=((76808+($_sum18_i<<2))|0);
 var $597=HEAP32[(($596)>>2)];
 var $598=$597;
 var $599=HEAP32[((76784)>>2)];
 var $600=($598>>>0)<($599>>>0);
 if($600){label=139;break;}else{var $F5_0_i=$597;var $_pre_phi_i28=$596;label=140;break;}
 case 139: 
 _abort();
 throw "Reached an unreachable!";
 case 140: 
 var $_pre_phi_i28;
 var $F5_0_i;
 HEAP32[(($_pre_phi_i28)>>2)]=$466;
 var $603=(($F5_0_i+12)|0);
 HEAP32[(($603)>>2)]=$466;
 var $_sum16_i=((($347)+(8))|0);
 var $604=(($461+$_sum16_i)|0);
 var $605=$604;
 HEAP32[(($605)>>2)]=$F5_0_i;
 var $_sum17_i=((($347)+(12))|0);
 var $606=(($461+$_sum17_i)|0);
 var $607=$606;
 HEAP32[(($607)>>2)]=$588;
 label=160;break;
 case 141: 
 var $609=$465;
 var $610=$rsize_3_lcssa_i>>>8;
 var $611=($610|0)==0;
 if($611){var $I7_0_i=0;label=144;break;}else{label=142;break;}
 case 142: 
 var $613=($rsize_3_lcssa_i>>>0)>16777215;
 if($613){var $I7_0_i=31;label=144;break;}else{label=143;break;}
 case 143: 
 var $615=((($610)+(1048320))|0);
 var $616=$615>>>16;
 var $617=$616&8;
 var $618=$610<<$617;
 var $619=((($618)+(520192))|0);
 var $620=$619>>>16;
 var $621=$620&4;
 var $622=$621|$617;
 var $623=$618<<$621;
 var $624=((($623)+(245760))|0);
 var $625=$624>>>16;
 var $626=$625&2;
 var $627=$622|$626;
 var $628=(((14)-($627))|0);
 var $629=$623<<$626;
 var $630=$629>>>15;
 var $631=((($628)+($630))|0);
 var $632=$631<<1;
 var $633=((($631)+(7))|0);
 var $634=$rsize_3_lcssa_i>>>($633>>>0);
 var $635=$634&1;
 var $636=$635|$632;
 var $I7_0_i=$636;label=144;break;
 case 144: 
 var $I7_0_i;
 var $638=((77072+($I7_0_i<<2))|0);
 var $_sum2_i=((($347)+(28))|0);
 var $639=(($461+$_sum2_i)|0);
 var $640=$639;
 HEAP32[(($640)>>2)]=$I7_0_i;
 var $_sum3_i29=((($347)+(16))|0);
 var $641=(($461+$_sum3_i29)|0);
 var $_sum4_i30=((($347)+(20))|0);
 var $642=(($461+$_sum4_i30)|0);
 var $643=$642;
 HEAP32[(($643)>>2)]=0;
 var $644=$641;
 HEAP32[(($644)>>2)]=0;
 var $645=HEAP32[((76772)>>2)];
 var $646=1<<$I7_0_i;
 var $647=$645&$646;
 var $648=($647|0)==0;
 if($648){label=145;break;}else{label=146;break;}
 case 145: 
 var $650=$645|$646;
 HEAP32[((76772)>>2)]=$650;
 HEAP32[(($638)>>2)]=$609;
 var $651=$638;
 var $_sum5_i=((($347)+(24))|0);
 var $652=(($461+$_sum5_i)|0);
 var $653=$652;
 HEAP32[(($653)>>2)]=$651;
 var $_sum6_i=((($347)+(12))|0);
 var $654=(($461+$_sum6_i)|0);
 var $655=$654;
 HEAP32[(($655)>>2)]=$609;
 var $_sum7_i=((($347)+(8))|0);
 var $656=(($461+$_sum7_i)|0);
 var $657=$656;
 HEAP32[(($657)>>2)]=$609;
 label=160;break;
 case 146: 
 var $659=HEAP32[(($638)>>2)];
 var $660=($I7_0_i|0)==31;
 if($660){var $665=0;label=148;break;}else{label=147;break;}
 case 147: 
 var $662=$I7_0_i>>>1;
 var $663=(((25)-($662))|0);
 var $665=$663;label=148;break;
 case 148: 
 var $665;
 var $666=(($659+4)|0);
 var $667=HEAP32[(($666)>>2)];
 var $668=$667&-8;
 var $669=($668|0)==($rsize_3_lcssa_i|0);
 if($669){var $T_0_lcssa_i=$659;label=155;break;}else{label=149;break;}
 case 149: 
 var $670=$rsize_3_lcssa_i<<$665;
 var $T_026_i=$659;var $K12_027_i=$670;label=151;break;
 case 150: 
 var $672=$K12_027_i<<1;
 var $673=(($680+4)|0);
 var $674=HEAP32[(($673)>>2)];
 var $675=$674&-8;
 var $676=($675|0)==($rsize_3_lcssa_i|0);
 if($676){var $T_0_lcssa_i=$680;label=155;break;}else{var $T_026_i=$680;var $K12_027_i=$672;label=151;break;}
 case 151: 
 var $K12_027_i;
 var $T_026_i;
 var $678=$K12_027_i>>>31;
 var $679=(($T_026_i+16+($678<<2))|0);
 var $680=HEAP32[(($679)>>2)];
 var $681=($680|0)==0;
 if($681){label=152;break;}else{label=150;break;}
 case 152: 
 var $683=$679;
 var $684=HEAP32[((76784)>>2)];
 var $685=($683>>>0)<($684>>>0);
 if($685){label=154;break;}else{label=153;break;}
 case 153: 
 HEAP32[(($679)>>2)]=$609;
 var $_sum12_i=((($347)+(24))|0);
 var $687=(($461+$_sum12_i)|0);
 var $688=$687;
 HEAP32[(($688)>>2)]=$T_026_i;
 var $_sum13_i=((($347)+(12))|0);
 var $689=(($461+$_sum13_i)|0);
 var $690=$689;
 HEAP32[(($690)>>2)]=$609;
 var $_sum14_i=((($347)+(8))|0);
 var $691=(($461+$_sum14_i)|0);
 var $692=$691;
 HEAP32[(($692)>>2)]=$609;
 label=160;break;
 case 154: 
 _abort();
 throw "Reached an unreachable!";
 case 155: 
 var $T_0_lcssa_i;
 var $694=(($T_0_lcssa_i+8)|0);
 var $695=HEAP32[(($694)>>2)];
 var $696=$T_0_lcssa_i;
 var $697=HEAP32[((76784)>>2)];
 var $698=($696>>>0)<($697>>>0);
 if($698){label=158;break;}else{label=156;break;}
 case 156: 
 var $700=$695;
 var $701=($700>>>0)<($697>>>0);
 if($701){label=158;break;}else{label=157;break;}
 case 157: 
 var $703=(($695+12)|0);
 HEAP32[(($703)>>2)]=$609;
 HEAP32[(($694)>>2)]=$609;
 var $_sum9_i=((($347)+(8))|0);
 var $704=(($461+$_sum9_i)|0);
 var $705=$704;
 HEAP32[(($705)>>2)]=$695;
 var $_sum10_i=((($347)+(12))|0);
 var $706=(($461+$_sum10_i)|0);
 var $707=$706;
 HEAP32[(($707)>>2)]=$T_0_lcssa_i;
 var $_sum11_i=((($347)+(24))|0);
 var $708=(($461+$_sum11_i)|0);
 var $709=$708;
 HEAP32[(($709)>>2)]=0;
 label=160;break;
 case 158: 
 _abort();
 throw "Reached an unreachable!";
 case 159: 
 _abort();
 throw "Reached an unreachable!";
 case 160: 
 var $711=(($v_3_lcssa_i+8)|0);
 var $712=$711;
 var $mem_0=$712;label=344;break;
 case 161: 
 var $nb_0;
 var $713=HEAP32[((76776)>>2)];
 var $714=($nb_0>>>0)>($713>>>0);
 if($714){label=166;break;}else{label=162;break;}
 case 162: 
 var $716=((($713)-($nb_0))|0);
 var $717=HEAP32[((76788)>>2)];
 var $718=($716>>>0)>15;
 if($718){label=163;break;}else{label=164;break;}
 case 163: 
 var $720=$717;
 var $721=(($720+$nb_0)|0);
 var $722=$721;
 HEAP32[((76788)>>2)]=$722;
 HEAP32[((76776)>>2)]=$716;
 var $723=$716|1;
 var $_sum2=((($nb_0)+(4))|0);
 var $724=(($720+$_sum2)|0);
 var $725=$724;
 HEAP32[(($725)>>2)]=$723;
 var $726=(($720+$713)|0);
 var $727=$726;
 HEAP32[(($727)>>2)]=$716;
 var $728=$nb_0|3;
 var $729=(($717+4)|0);
 HEAP32[(($729)>>2)]=$728;
 label=165;break;
 case 164: 
 HEAP32[((76776)>>2)]=0;
 HEAP32[((76788)>>2)]=0;
 var $731=$713|3;
 var $732=(($717+4)|0);
 HEAP32[(($732)>>2)]=$731;
 var $733=$717;
 var $_sum1=((($713)+(4))|0);
 var $734=(($733+$_sum1)|0);
 var $735=$734;
 var $736=HEAP32[(($735)>>2)];
 var $737=$736|1;
 HEAP32[(($735)>>2)]=$737;
 label=165;break;
 case 165: 
 var $739=(($717+8)|0);
 var $740=$739;
 var $mem_0=$740;label=344;break;
 case 166: 
 var $742=HEAP32[((76780)>>2)];
 var $743=($nb_0>>>0)<($742>>>0);
 if($743){label=167;break;}else{label=168;break;}
 case 167: 
 var $745=((($742)-($nb_0))|0);
 HEAP32[((76780)>>2)]=$745;
 var $746=HEAP32[((76792)>>2)];
 var $747=$746;
 var $748=(($747+$nb_0)|0);
 var $749=$748;
 HEAP32[((76792)>>2)]=$749;
 var $750=$745|1;
 var $_sum=((($nb_0)+(4))|0);
 var $751=(($747+$_sum)|0);
 var $752=$751;
 HEAP32[(($752)>>2)]=$750;
 var $753=$nb_0|3;
 var $754=(($746+4)|0);
 HEAP32[(($754)>>2)]=$753;
 var $755=(($746+8)|0);
 var $756=$755;
 var $mem_0=$756;label=344;break;
 case 168: 
 var $758=HEAP32[((10648)>>2)];
 var $759=($758|0)==0;
 if($759){label=169;break;}else{label=172;break;}
 case 169: 
 var $761=_sysconf(30);
 var $762=((($761)-(1))|0);
 var $763=$762&$761;
 var $764=($763|0)==0;
 if($764){label=171;break;}else{label=170;break;}
 case 170: 
 _abort();
 throw "Reached an unreachable!";
 case 171: 
 HEAP32[((10656)>>2)]=$761;
 HEAP32[((10652)>>2)]=$761;
 HEAP32[((10660)>>2)]=-1;
 HEAP32[((10664)>>2)]=-1;
 HEAP32[((10668)>>2)]=0;
 HEAP32[((77212)>>2)]=0;
 var $766=_time(0);
 var $767=$766&-16;
 var $768=$767^1431655768;
 HEAP32[((10648)>>2)]=$768;
 label=172;break;
 case 172: 
 var $770=((($nb_0)+(48))|0);
 var $771=HEAP32[((10656)>>2)];
 var $772=((($nb_0)+(47))|0);
 var $773=((($771)+($772))|0);
 var $774=(((-$771))|0);
 var $775=$773&$774;
 var $776=($775>>>0)>($nb_0>>>0);
 if($776){label=173;break;}else{var $mem_0=0;label=344;break;}
 case 173: 
 var $778=HEAP32[((77208)>>2)];
 var $779=($778|0)==0;
 if($779){label=175;break;}else{label=174;break;}
 case 174: 
 var $781=HEAP32[((77200)>>2)];
 var $782=((($781)+($775))|0);
 var $783=($782>>>0)<=($781>>>0);
 var $784=($782>>>0)>($778>>>0);
 var $or_cond1_i=$783|$784;
 if($or_cond1_i){var $mem_0=0;label=344;break;}else{label=175;break;}
 case 175: 
 var $786=HEAP32[((77212)>>2)];
 var $787=$786&4;
 var $788=($787|0)==0;
 if($788){label=176;break;}else{var $tsize_1_i=0;label=199;break;}
 case 176: 
 var $790=HEAP32[((76792)>>2)];
 var $791=($790|0)==0;
 if($791){label=182;break;}else{label=177;break;}
 case 177: 
 var $793=$790;
 var $sp_0_i_i=77216;label=178;break;
 case 178: 
 var $sp_0_i_i;
 var $795=(($sp_0_i_i)|0);
 var $796=HEAP32[(($795)>>2)];
 var $797=($796>>>0)>($793>>>0);
 if($797){label=180;break;}else{label=179;break;}
 case 179: 
 var $799=(($sp_0_i_i+4)|0);
 var $800=HEAP32[(($799)>>2)];
 var $801=(($796+$800)|0);
 var $802=($801>>>0)>($793>>>0);
 if($802){label=181;break;}else{label=180;break;}
 case 180: 
 var $804=(($sp_0_i_i+8)|0);
 var $805=HEAP32[(($804)>>2)];
 var $806=($805|0)==0;
 if($806){label=182;break;}else{var $sp_0_i_i=$805;label=178;break;}
 case 181: 
 var $807=($sp_0_i_i|0)==0;
 if($807){label=182;break;}else{label=189;break;}
 case 182: 
 var $808=_sbrk(0);
 var $809=($808|0)==-1;
 if($809){var $tsize_0323841_i=0;label=198;break;}else{label=183;break;}
 case 183: 
 var $811=$808;
 var $812=HEAP32[((10652)>>2)];
 var $813=((($812)-(1))|0);
 var $814=$813&$811;
 var $815=($814|0)==0;
 if($815){var $ssize_0_i=$775;label=185;break;}else{label=184;break;}
 case 184: 
 var $817=((($813)+($811))|0);
 var $818=(((-$812))|0);
 var $819=$817&$818;
 var $820=((($775)-($811))|0);
 var $821=((($820)+($819))|0);
 var $ssize_0_i=$821;label=185;break;
 case 185: 
 var $ssize_0_i;
 var $823=HEAP32[((77200)>>2)];
 var $824=((($823)+($ssize_0_i))|0);
 var $825=($ssize_0_i>>>0)>($nb_0>>>0);
 var $826=($ssize_0_i>>>0)<2147483647;
 var $or_cond_i31=$825&$826;
 if($or_cond_i31){label=186;break;}else{var $tsize_0323841_i=0;label=198;break;}
 case 186: 
 var $828=HEAP32[((77208)>>2)];
 var $829=($828|0)==0;
 if($829){label=188;break;}else{label=187;break;}
 case 187: 
 var $831=($824>>>0)<=($823>>>0);
 var $832=($824>>>0)>($828>>>0);
 var $or_cond2_i=$831|$832;
 if($or_cond2_i){var $tsize_0323841_i=0;label=198;break;}else{label=188;break;}
 case 188: 
 var $834=_sbrk($ssize_0_i);
 var $835=($834|0)==($808|0);
 var $ssize_0__i=($835?$ssize_0_i:0);
 var $__i=($835?$808:-1);
 var $tbase_0_i=$__i;var $tsize_0_i=$ssize_0__i;var $br_0_i=$834;var $ssize_1_i=$ssize_0_i;label=191;break;
 case 189: 
 var $837=HEAP32[((76780)>>2)];
 var $838=((($773)-($837))|0);
 var $839=$838&$774;
 var $840=($839>>>0)<2147483647;
 if($840){label=190;break;}else{var $tsize_0323841_i=0;label=198;break;}
 case 190: 
 var $842=_sbrk($839);
 var $843=HEAP32[(($795)>>2)];
 var $844=HEAP32[(($799)>>2)];
 var $845=(($843+$844)|0);
 var $846=($842|0)==($845|0);
 var $_3_i=($846?$839:0);
 var $_4_i=($846?$842:-1);
 var $tbase_0_i=$_4_i;var $tsize_0_i=$_3_i;var $br_0_i=$842;var $ssize_1_i=$839;label=191;break;
 case 191: 
 var $ssize_1_i;
 var $br_0_i;
 var $tsize_0_i;
 var $tbase_0_i;
 var $848=(((-$ssize_1_i))|0);
 var $849=($tbase_0_i|0)==-1;
 if($849){label=192;break;}else{var $tsize_246_i=$tsize_0_i;var $tbase_247_i=$tbase_0_i;label=202;break;}
 case 192: 
 var $851=($br_0_i|0)!=-1;
 var $852=($ssize_1_i>>>0)<2147483647;
 var $or_cond5_i=$851&$852;
 var $853=($ssize_1_i>>>0)<($770>>>0);
 var $or_cond6_i=$or_cond5_i&$853;
 if($or_cond6_i){label=193;break;}else{var $ssize_2_i=$ssize_1_i;label=197;break;}
 case 193: 
 var $855=HEAP32[((10656)>>2)];
 var $856=((($772)-($ssize_1_i))|0);
 var $857=((($856)+($855))|0);
 var $858=(((-$855))|0);
 var $859=$857&$858;
 var $860=($859>>>0)<2147483647;
 if($860){label=194;break;}else{var $ssize_2_i=$ssize_1_i;label=197;break;}
 case 194: 
 var $862=_sbrk($859);
 var $863=($862|0)==-1;
 if($863){label=196;break;}else{label=195;break;}
 case 195: 
 var $865=((($859)+($ssize_1_i))|0);
 var $ssize_2_i=$865;label=197;break;
 case 196: 
 var $867=_sbrk($848);
 var $tsize_0323841_i=$tsize_0_i;label=198;break;
 case 197: 
 var $ssize_2_i;
 var $869=($br_0_i|0)==-1;
 if($869){var $tsize_0323841_i=$tsize_0_i;label=198;break;}else{var $tsize_246_i=$ssize_2_i;var $tbase_247_i=$br_0_i;label=202;break;}
 case 198: 
 var $tsize_0323841_i;
 var $870=HEAP32[((77212)>>2)];
 var $871=$870|4;
 HEAP32[((77212)>>2)]=$871;
 var $tsize_1_i=$tsize_0323841_i;label=199;break;
 case 199: 
 var $tsize_1_i;
 var $873=($775>>>0)<2147483647;
 if($873){label=200;break;}else{label=343;break;}
 case 200: 
 var $875=_sbrk($775);
 var $876=_sbrk(0);
 var $notlhs_i=($875|0)!=-1;
 var $notrhs_i=($876|0)!=-1;
 var $or_cond8_not_i=$notrhs_i&$notlhs_i;
 var $877=($875>>>0)<($876>>>0);
 var $or_cond9_i=$or_cond8_not_i&$877;
 if($or_cond9_i){label=201;break;}else{label=343;break;}
 case 201: 
 var $878=$876;
 var $879=$875;
 var $880=((($878)-($879))|0);
 var $881=((($nb_0)+(40))|0);
 var $882=($880>>>0)>($881>>>0);
 var $_tsize_1_i=($882?$880:$tsize_1_i);
 if($882){var $tsize_246_i=$_tsize_1_i;var $tbase_247_i=$875;label=202;break;}else{label=343;break;}
 case 202: 
 var $tbase_247_i;
 var $tsize_246_i;
 var $883=HEAP32[((77200)>>2)];
 var $884=((($883)+($tsize_246_i))|0);
 HEAP32[((77200)>>2)]=$884;
 var $885=HEAP32[((77204)>>2)];
 var $886=($884>>>0)>($885>>>0);
 if($886){label=203;break;}else{label=204;break;}
 case 203: 
 HEAP32[((77204)>>2)]=$884;
 label=204;break;
 case 204: 
 var $888=HEAP32[((76792)>>2)];
 var $889=($888|0)==0;
 if($889){label=205;break;}else{var $sp_075_i=77216;label=212;break;}
 case 205: 
 var $891=HEAP32[((76784)>>2)];
 var $892=($891|0)==0;
 var $893=($tbase_247_i>>>0)<($891>>>0);
 var $or_cond10_i=$892|$893;
 if($or_cond10_i){label=206;break;}else{label=207;break;}
 case 206: 
 HEAP32[((76784)>>2)]=$tbase_247_i;
 label=207;break;
 case 207: 
 HEAP32[((77216)>>2)]=$tbase_247_i;
 HEAP32[((77220)>>2)]=$tsize_246_i;
 HEAP32[((77228)>>2)]=0;
 var $895=HEAP32[((10648)>>2)];
 HEAP32[((76804)>>2)]=$895;
 HEAP32[((76800)>>2)]=-1;
 var $i_02_i_i=0;label=208;break;
 case 208: 
 var $i_02_i_i;
 var $897=$i_02_i_i<<1;
 var $898=((76808+($897<<2))|0);
 var $899=$898;
 var $_sum_i_i=((($897)+(3))|0);
 var $900=((76808+($_sum_i_i<<2))|0);
 HEAP32[(($900)>>2)]=$899;
 var $_sum1_i_i=((($897)+(2))|0);
 var $901=((76808+($_sum1_i_i<<2))|0);
 HEAP32[(($901)>>2)]=$899;
 var $902=((($i_02_i_i)+(1))|0);
 var $903=($902>>>0)<32;
 if($903){var $i_02_i_i=$902;label=208;break;}else{label=209;break;}
 case 209: 
 var $904=((($tsize_246_i)-(40))|0);
 var $905=(($tbase_247_i+8)|0);
 var $906=$905;
 var $907=$906&7;
 var $908=($907|0)==0;
 if($908){var $912=0;label=211;break;}else{label=210;break;}
 case 210: 
 var $910=(((-$906))|0);
 var $911=$910&7;
 var $912=$911;label=211;break;
 case 211: 
 var $912;
 var $913=(($tbase_247_i+$912)|0);
 var $914=$913;
 var $915=((($904)-($912))|0);
 HEAP32[((76792)>>2)]=$914;
 HEAP32[((76780)>>2)]=$915;
 var $916=$915|1;
 var $_sum_i14_i=((($912)+(4))|0);
 var $917=(($tbase_247_i+$_sum_i14_i)|0);
 var $918=$917;
 HEAP32[(($918)>>2)]=$916;
 var $_sum2_i_i=((($tsize_246_i)-(36))|0);
 var $919=(($tbase_247_i+$_sum2_i_i)|0);
 var $920=$919;
 HEAP32[(($920)>>2)]=40;
 var $921=HEAP32[((10664)>>2)];
 HEAP32[((76796)>>2)]=$921;
 label=341;break;
 case 212: 
 var $sp_075_i;
 var $922=(($sp_075_i)|0);
 var $923=HEAP32[(($922)>>2)];
 var $924=(($sp_075_i+4)|0);
 var $925=HEAP32[(($924)>>2)];
 var $926=(($923+$925)|0);
 var $927=($tbase_247_i|0)==($926|0);
 if($927){label=214;break;}else{label=213;break;}
 case 213: 
 var $929=(($sp_075_i+8)|0);
 var $930=HEAP32[(($929)>>2)];
 var $931=($930|0)==0;
 if($931){label=219;break;}else{var $sp_075_i=$930;label=212;break;}
 case 214: 
 var $932=(($sp_075_i+12)|0);
 var $933=HEAP32[(($932)>>2)];
 var $934=$933&8;
 var $935=($934|0)==0;
 if($935){label=215;break;}else{label=219;break;}
 case 215: 
 var $937=$888;
 var $938=($937>>>0)>=($923>>>0);
 var $939=($937>>>0)<($tbase_247_i>>>0);
 var $or_cond49_i=$938&$939;
 if($or_cond49_i){label=216;break;}else{label=219;break;}
 case 216: 
 var $941=((($925)+($tsize_246_i))|0);
 HEAP32[(($924)>>2)]=$941;
 var $942=HEAP32[((76780)>>2)];
 var $943=((($942)+($tsize_246_i))|0);
 var $944=(($888+8)|0);
 var $945=$944;
 var $946=$945&7;
 var $947=($946|0)==0;
 if($947){var $951=0;label=218;break;}else{label=217;break;}
 case 217: 
 var $949=(((-$945))|0);
 var $950=$949&7;
 var $951=$950;label=218;break;
 case 218: 
 var $951;
 var $952=(($937+$951)|0);
 var $953=$952;
 var $954=((($943)-($951))|0);
 HEAP32[((76792)>>2)]=$953;
 HEAP32[((76780)>>2)]=$954;
 var $955=$954|1;
 var $_sum_i18_i=((($951)+(4))|0);
 var $956=(($937+$_sum_i18_i)|0);
 var $957=$956;
 HEAP32[(($957)>>2)]=$955;
 var $_sum2_i19_i=((($943)+(4))|0);
 var $958=(($937+$_sum2_i19_i)|0);
 var $959=$958;
 HEAP32[(($959)>>2)]=40;
 var $960=HEAP32[((10664)>>2)];
 HEAP32[((76796)>>2)]=$960;
 label=341;break;
 case 219: 
 var $961=HEAP32[((76784)>>2)];
 var $962=($tbase_247_i>>>0)<($961>>>0);
 if($962){label=220;break;}else{label=221;break;}
 case 220: 
 HEAP32[((76784)>>2)]=$tbase_247_i;
 label=221;break;
 case 221: 
 var $964=(($tbase_247_i+$tsize_246_i)|0);
 var $sp_168_i=77216;label=222;break;
 case 222: 
 var $sp_168_i;
 var $966=(($sp_168_i)|0);
 var $967=HEAP32[(($966)>>2)];
 var $968=($967|0)==($964|0);
 if($968){label=224;break;}else{label=223;break;}
 case 223: 
 var $970=(($sp_168_i+8)|0);
 var $971=HEAP32[(($970)>>2)];
 var $972=($971|0)==0;
 if($972){label=306;break;}else{var $sp_168_i=$971;label=222;break;}
 case 224: 
 var $973=(($sp_168_i+12)|0);
 var $974=HEAP32[(($973)>>2)];
 var $975=$974&8;
 var $976=($975|0)==0;
 if($976){label=225;break;}else{label=306;break;}
 case 225: 
 HEAP32[(($966)>>2)]=$tbase_247_i;
 var $978=(($sp_168_i+4)|0);
 var $979=HEAP32[(($978)>>2)];
 var $980=((($979)+($tsize_246_i))|0);
 HEAP32[(($978)>>2)]=$980;
 var $981=(($tbase_247_i+8)|0);
 var $982=$981;
 var $983=$982&7;
 var $984=($983|0)==0;
 if($984){var $989=0;label=227;break;}else{label=226;break;}
 case 226: 
 var $986=(((-$982))|0);
 var $987=$986&7;
 var $989=$987;label=227;break;
 case 227: 
 var $989;
 var $990=(($tbase_247_i+$989)|0);
 var $_sum107_i=((($tsize_246_i)+(8))|0);
 var $991=(($tbase_247_i+$_sum107_i)|0);
 var $992=$991;
 var $993=$992&7;
 var $994=($993|0)==0;
 if($994){var $999=0;label=229;break;}else{label=228;break;}
 case 228: 
 var $996=(((-$992))|0);
 var $997=$996&7;
 var $999=$997;label=229;break;
 case 229: 
 var $999;
 var $_sum108_i=((($999)+($tsize_246_i))|0);
 var $1000=(($tbase_247_i+$_sum108_i)|0);
 var $1001=$1000;
 var $1002=$1000;
 var $1003=$990;
 var $1004=((($1002)-($1003))|0);
 var $_sum_i21_i=((($989)+($nb_0))|0);
 var $1005=(($tbase_247_i+$_sum_i21_i)|0);
 var $1006=$1005;
 var $1007=((($1004)-($nb_0))|0);
 var $1008=$nb_0|3;
 var $_sum1_i22_i=((($989)+(4))|0);
 var $1009=(($tbase_247_i+$_sum1_i22_i)|0);
 var $1010=$1009;
 HEAP32[(($1010)>>2)]=$1008;
 var $1011=HEAP32[((76792)>>2)];
 var $1012=($1001|0)==($1011|0);
 if($1012){label=230;break;}else{label=231;break;}
 case 230: 
 var $1014=HEAP32[((76780)>>2)];
 var $1015=((($1014)+($1007))|0);
 HEAP32[((76780)>>2)]=$1015;
 HEAP32[((76792)>>2)]=$1006;
 var $1016=$1015|1;
 var $_sum46_i_i=((($_sum_i21_i)+(4))|0);
 var $1017=(($tbase_247_i+$_sum46_i_i)|0);
 var $1018=$1017;
 HEAP32[(($1018)>>2)]=$1016;
 label=305;break;
 case 231: 
 var $1020=HEAP32[((76788)>>2)];
 var $1021=($1001|0)==($1020|0);
 if($1021){label=232;break;}else{label=233;break;}
 case 232: 
 var $1023=HEAP32[((76776)>>2)];
 var $1024=((($1023)+($1007))|0);
 HEAP32[((76776)>>2)]=$1024;
 HEAP32[((76788)>>2)]=$1006;
 var $1025=$1024|1;
 var $_sum44_i_i=((($_sum_i21_i)+(4))|0);
 var $1026=(($tbase_247_i+$_sum44_i_i)|0);
 var $1027=$1026;
 HEAP32[(($1027)>>2)]=$1025;
 var $_sum45_i_i=((($1024)+($_sum_i21_i))|0);
 var $1028=(($tbase_247_i+$_sum45_i_i)|0);
 var $1029=$1028;
 HEAP32[(($1029)>>2)]=$1024;
 label=305;break;
 case 233: 
 var $_sum2_i23_i=((($tsize_246_i)+(4))|0);
 var $_sum109_i=((($_sum2_i23_i)+($999))|0);
 var $1031=(($tbase_247_i+$_sum109_i)|0);
 var $1032=$1031;
 var $1033=HEAP32[(($1032)>>2)];
 var $1034=$1033&3;
 var $1035=($1034|0)==1;
 if($1035){label=234;break;}else{var $oldfirst_0_i_i=$1001;var $qsize_0_i_i=$1007;label=281;break;}
 case 234: 
 var $1037=$1033&-8;
 var $1038=$1033>>>3;
 var $1039=($1033>>>0)<256;
 if($1039){label=235;break;}else{label=247;break;}
 case 235: 
 var $_sum3940_i_i=$999|8;
 var $_sum119_i=((($_sum3940_i_i)+($tsize_246_i))|0);
 var $1041=(($tbase_247_i+$_sum119_i)|0);
 var $1042=$1041;
 var $1043=HEAP32[(($1042)>>2)];
 var $_sum41_i_i=((($tsize_246_i)+(12))|0);
 var $_sum120_i=((($_sum41_i_i)+($999))|0);
 var $1044=(($tbase_247_i+$_sum120_i)|0);
 var $1045=$1044;
 var $1046=HEAP32[(($1045)>>2)];
 var $1047=$1038<<1;
 var $1048=((76808+($1047<<2))|0);
 var $1049=$1048;
 var $1050=($1043|0)==($1049|0);
 if($1050){label=238;break;}else{label=236;break;}
 case 236: 
 var $1052=$1043;
 var $1053=HEAP32[((76784)>>2)];
 var $1054=($1052>>>0)<($1053>>>0);
 if($1054){label=246;break;}else{label=237;break;}
 case 237: 
 var $1056=(($1043+12)|0);
 var $1057=HEAP32[(($1056)>>2)];
 var $1058=($1057|0)==($1001|0);
 if($1058){label=238;break;}else{label=246;break;}
 case 238: 
 var $1059=($1046|0)==($1043|0);
 if($1059){label=239;break;}else{label=240;break;}
 case 239: 
 var $1061=1<<$1038;
 var $1062=$1061^-1;
 var $1063=HEAP32[((76768)>>2)];
 var $1064=$1063&$1062;
 HEAP32[((76768)>>2)]=$1064;
 label=280;break;
 case 240: 
 var $1066=($1046|0)==($1049|0);
 if($1066){label=241;break;}else{label=242;break;}
 case 241: 
 var $_pre61_i_i=(($1046+8)|0);
 var $_pre_phi62_i_i=$_pre61_i_i;label=244;break;
 case 242: 
 var $1068=$1046;
 var $1069=HEAP32[((76784)>>2)];
 var $1070=($1068>>>0)<($1069>>>0);
 if($1070){label=245;break;}else{label=243;break;}
 case 243: 
 var $1072=(($1046+8)|0);
 var $1073=HEAP32[(($1072)>>2)];
 var $1074=($1073|0)==($1001|0);
 if($1074){var $_pre_phi62_i_i=$1072;label=244;break;}else{label=245;break;}
 case 244: 
 var $_pre_phi62_i_i;
 var $1075=(($1043+12)|0);
 HEAP32[(($1075)>>2)]=$1046;
 HEAP32[(($_pre_phi62_i_i)>>2)]=$1043;
 label=280;break;
 case 245: 
 _abort();
 throw "Reached an unreachable!";
 case 246: 
 _abort();
 throw "Reached an unreachable!";
 case 247: 
 var $1077=$1000;
 var $_sum34_i_i=$999|24;
 var $_sum110_i=((($_sum34_i_i)+($tsize_246_i))|0);
 var $1078=(($tbase_247_i+$_sum110_i)|0);
 var $1079=$1078;
 var $1080=HEAP32[(($1079)>>2)];
 var $_sum5_i_i=((($tsize_246_i)+(12))|0);
 var $_sum111_i=((($_sum5_i_i)+($999))|0);
 var $1081=(($tbase_247_i+$_sum111_i)|0);
 var $1082=$1081;
 var $1083=HEAP32[(($1082)>>2)];
 var $1084=($1083|0)==($1077|0);
 if($1084){label=253;break;}else{label=248;break;}
 case 248: 
 var $_sum3637_i_i=$999|8;
 var $_sum112_i=((($_sum3637_i_i)+($tsize_246_i))|0);
 var $1086=(($tbase_247_i+$_sum112_i)|0);
 var $1087=$1086;
 var $1088=HEAP32[(($1087)>>2)];
 var $1089=$1088;
 var $1090=HEAP32[((76784)>>2)];
 var $1091=($1089>>>0)<($1090>>>0);
 if($1091){label=252;break;}else{label=249;break;}
 case 249: 
 var $1093=(($1088+12)|0);
 var $1094=HEAP32[(($1093)>>2)];
 var $1095=($1094|0)==($1077|0);
 if($1095){label=250;break;}else{label=252;break;}
 case 250: 
 var $1097=(($1083+8)|0);
 var $1098=HEAP32[(($1097)>>2)];
 var $1099=($1098|0)==($1077|0);
 if($1099){label=251;break;}else{label=252;break;}
 case 251: 
 HEAP32[(($1093)>>2)]=$1083;
 HEAP32[(($1097)>>2)]=$1088;
 var $R_1_i_i=$1083;label=260;break;
 case 252: 
 _abort();
 throw "Reached an unreachable!";
 case 253: 
 var $_sum67_i_i=$999|16;
 var $_sum117_i=((($_sum2_i23_i)+($_sum67_i_i))|0);
 var $1102=(($tbase_247_i+$_sum117_i)|0);
 var $1103=$1102;
 var $1104=HEAP32[(($1103)>>2)];
 var $1105=($1104|0)==0;
 if($1105){label=254;break;}else{var $R_0_i_i=$1104;var $RP_0_i_i=$1103;label=255;break;}
 case 254: 
 var $_sum118_i=((($_sum67_i_i)+($tsize_246_i))|0);
 var $1107=(($tbase_247_i+$_sum118_i)|0);
 var $1108=$1107;
 var $1109=HEAP32[(($1108)>>2)];
 var $1110=($1109|0)==0;
 if($1110){var $R_1_i_i=0;label=260;break;}else{var $R_0_i_i=$1109;var $RP_0_i_i=$1108;label=255;break;}
 case 255: 
 var $RP_0_i_i;
 var $R_0_i_i;
 var $1111=(($R_0_i_i+20)|0);
 var $1112=HEAP32[(($1111)>>2)];
 var $1113=($1112|0)==0;
 if($1113){label=256;break;}else{var $R_0_i_i=$1112;var $RP_0_i_i=$1111;label=255;break;}
 case 256: 
 var $1115=(($R_0_i_i+16)|0);
 var $1116=HEAP32[(($1115)>>2)];
 var $1117=($1116|0)==0;
 if($1117){label=257;break;}else{var $R_0_i_i=$1116;var $RP_0_i_i=$1115;label=255;break;}
 case 257: 
 var $1119=$RP_0_i_i;
 var $1120=HEAP32[((76784)>>2)];
 var $1121=($1119>>>0)<($1120>>>0);
 if($1121){label=259;break;}else{label=258;break;}
 case 258: 
 HEAP32[(($RP_0_i_i)>>2)]=0;
 var $R_1_i_i=$R_0_i_i;label=260;break;
 case 259: 
 _abort();
 throw "Reached an unreachable!";
 case 260: 
 var $R_1_i_i;
 var $1125=($1080|0)==0;
 if($1125){label=280;break;}else{label=261;break;}
 case 261: 
 var $_sum31_i_i=((($tsize_246_i)+(28))|0);
 var $_sum113_i=((($_sum31_i_i)+($999))|0);
 var $1127=(($tbase_247_i+$_sum113_i)|0);
 var $1128=$1127;
 var $1129=HEAP32[(($1128)>>2)];
 var $1130=((77072+($1129<<2))|0);
 var $1131=HEAP32[(($1130)>>2)];
 var $1132=($1077|0)==($1131|0);
 if($1132){label=262;break;}else{label=264;break;}
 case 262: 
 HEAP32[(($1130)>>2)]=$R_1_i_i;
 var $cond_i_i=($R_1_i_i|0)==0;
 if($cond_i_i){label=263;break;}else{label=270;break;}
 case 263: 
 var $1134=1<<$1129;
 var $1135=$1134^-1;
 var $1136=HEAP32[((76772)>>2)];
 var $1137=$1136&$1135;
 HEAP32[((76772)>>2)]=$1137;
 label=280;break;
 case 264: 
 var $1139=$1080;
 var $1140=HEAP32[((76784)>>2)];
 var $1141=($1139>>>0)<($1140>>>0);
 if($1141){label=268;break;}else{label=265;break;}
 case 265: 
 var $1143=(($1080+16)|0);
 var $1144=HEAP32[(($1143)>>2)];
 var $1145=($1144|0)==($1077|0);
 if($1145){label=266;break;}else{label=267;break;}
 case 266: 
 HEAP32[(($1143)>>2)]=$R_1_i_i;
 label=269;break;
 case 267: 
 var $1148=(($1080+20)|0);
 HEAP32[(($1148)>>2)]=$R_1_i_i;
 label=269;break;
 case 268: 
 _abort();
 throw "Reached an unreachable!";
 case 269: 
 var $1151=($R_1_i_i|0)==0;
 if($1151){label=280;break;}else{label=270;break;}
 case 270: 
 var $1153=$R_1_i_i;
 var $1154=HEAP32[((76784)>>2)];
 var $1155=($1153>>>0)<($1154>>>0);
 if($1155){label=279;break;}else{label=271;break;}
 case 271: 
 var $1157=(($R_1_i_i+24)|0);
 HEAP32[(($1157)>>2)]=$1080;
 var $_sum3233_i_i=$999|16;
 var $_sum114_i=((($_sum3233_i_i)+($tsize_246_i))|0);
 var $1158=(($tbase_247_i+$_sum114_i)|0);
 var $1159=$1158;
 var $1160=HEAP32[(($1159)>>2)];
 var $1161=($1160|0)==0;
 if($1161){label=275;break;}else{label=272;break;}
 case 272: 
 var $1163=$1160;
 var $1164=HEAP32[((76784)>>2)];
 var $1165=($1163>>>0)<($1164>>>0);
 if($1165){label=274;break;}else{label=273;break;}
 case 273: 
 var $1167=(($R_1_i_i+16)|0);
 HEAP32[(($1167)>>2)]=$1160;
 var $1168=(($1160+24)|0);
 HEAP32[(($1168)>>2)]=$R_1_i_i;
 label=275;break;
 case 274: 
 _abort();
 throw "Reached an unreachable!";
 case 275: 
 var $_sum115_i=((($_sum2_i23_i)+($_sum3233_i_i))|0);
 var $1171=(($tbase_247_i+$_sum115_i)|0);
 var $1172=$1171;
 var $1173=HEAP32[(($1172)>>2)];
 var $1174=($1173|0)==0;
 if($1174){label=280;break;}else{label=276;break;}
 case 276: 
 var $1176=$1173;
 var $1177=HEAP32[((76784)>>2)];
 var $1178=($1176>>>0)<($1177>>>0);
 if($1178){label=278;break;}else{label=277;break;}
 case 277: 
 var $1180=(($R_1_i_i+20)|0);
 HEAP32[(($1180)>>2)]=$1173;
 var $1181=(($1173+24)|0);
 HEAP32[(($1181)>>2)]=$R_1_i_i;
 label=280;break;
 case 278: 
 _abort();
 throw "Reached an unreachable!";
 case 279: 
 _abort();
 throw "Reached an unreachable!";
 case 280: 
 var $_sum9_i_i=$1037|$999;
 var $_sum116_i=((($_sum9_i_i)+($tsize_246_i))|0);
 var $1185=(($tbase_247_i+$_sum116_i)|0);
 var $1186=$1185;
 var $1187=((($1037)+($1007))|0);
 var $oldfirst_0_i_i=$1186;var $qsize_0_i_i=$1187;label=281;break;
 case 281: 
 var $qsize_0_i_i;
 var $oldfirst_0_i_i;
 var $1189=(($oldfirst_0_i_i+4)|0);
 var $1190=HEAP32[(($1189)>>2)];
 var $1191=$1190&-2;
 HEAP32[(($1189)>>2)]=$1191;
 var $1192=$qsize_0_i_i|1;
 var $_sum10_i_i=((($_sum_i21_i)+(4))|0);
 var $1193=(($tbase_247_i+$_sum10_i_i)|0);
 var $1194=$1193;
 HEAP32[(($1194)>>2)]=$1192;
 var $_sum11_i_i=((($qsize_0_i_i)+($_sum_i21_i))|0);
 var $1195=(($tbase_247_i+$_sum11_i_i)|0);
 var $1196=$1195;
 HEAP32[(($1196)>>2)]=$qsize_0_i_i;
 var $1197=$qsize_0_i_i>>>3;
 var $1198=($qsize_0_i_i>>>0)<256;
 if($1198){label=282;break;}else{label=287;break;}
 case 282: 
 var $1200=$1197<<1;
 var $1201=((76808+($1200<<2))|0);
 var $1202=$1201;
 var $1203=HEAP32[((76768)>>2)];
 var $1204=1<<$1197;
 var $1205=$1203&$1204;
 var $1206=($1205|0)==0;
 if($1206){label=283;break;}else{label=284;break;}
 case 283: 
 var $1208=$1203|$1204;
 HEAP32[((76768)>>2)]=$1208;
 var $_sum27_pre_i_i=((($1200)+(2))|0);
 var $_pre_i24_i=((76808+($_sum27_pre_i_i<<2))|0);
 var $F4_0_i_i=$1202;var $_pre_phi_i25_i=$_pre_i24_i;label=286;break;
 case 284: 
 var $_sum30_i_i=((($1200)+(2))|0);
 var $1210=((76808+($_sum30_i_i<<2))|0);
 var $1211=HEAP32[(($1210)>>2)];
 var $1212=$1211;
 var $1213=HEAP32[((76784)>>2)];
 var $1214=($1212>>>0)<($1213>>>0);
 if($1214){label=285;break;}else{var $F4_0_i_i=$1211;var $_pre_phi_i25_i=$1210;label=286;break;}
 case 285: 
 _abort();
 throw "Reached an unreachable!";
 case 286: 
 var $_pre_phi_i25_i;
 var $F4_0_i_i;
 HEAP32[(($_pre_phi_i25_i)>>2)]=$1006;
 var $1217=(($F4_0_i_i+12)|0);
 HEAP32[(($1217)>>2)]=$1006;
 var $_sum28_i_i=((($_sum_i21_i)+(8))|0);
 var $1218=(($tbase_247_i+$_sum28_i_i)|0);
 var $1219=$1218;
 HEAP32[(($1219)>>2)]=$F4_0_i_i;
 var $_sum29_i_i=((($_sum_i21_i)+(12))|0);
 var $1220=(($tbase_247_i+$_sum29_i_i)|0);
 var $1221=$1220;
 HEAP32[(($1221)>>2)]=$1202;
 label=305;break;
 case 287: 
 var $1223=$1005;
 var $1224=$qsize_0_i_i>>>8;
 var $1225=($1224|0)==0;
 if($1225){var $I7_0_i_i=0;label=290;break;}else{label=288;break;}
 case 288: 
 var $1227=($qsize_0_i_i>>>0)>16777215;
 if($1227){var $I7_0_i_i=31;label=290;break;}else{label=289;break;}
 case 289: 
 var $1229=((($1224)+(1048320))|0);
 var $1230=$1229>>>16;
 var $1231=$1230&8;
 var $1232=$1224<<$1231;
 var $1233=((($1232)+(520192))|0);
 var $1234=$1233>>>16;
 var $1235=$1234&4;
 var $1236=$1235|$1231;
 var $1237=$1232<<$1235;
 var $1238=((($1237)+(245760))|0);
 var $1239=$1238>>>16;
 var $1240=$1239&2;
 var $1241=$1236|$1240;
 var $1242=(((14)-($1241))|0);
 var $1243=$1237<<$1240;
 var $1244=$1243>>>15;
 var $1245=((($1242)+($1244))|0);
 var $1246=$1245<<1;
 var $1247=((($1245)+(7))|0);
 var $1248=$qsize_0_i_i>>>($1247>>>0);
 var $1249=$1248&1;
 var $1250=$1249|$1246;
 var $I7_0_i_i=$1250;label=290;break;
 case 290: 
 var $I7_0_i_i;
 var $1252=((77072+($I7_0_i_i<<2))|0);
 var $_sum12_i26_i=((($_sum_i21_i)+(28))|0);
 var $1253=(($tbase_247_i+$_sum12_i26_i)|0);
 var $1254=$1253;
 HEAP32[(($1254)>>2)]=$I7_0_i_i;
 var $_sum13_i_i=((($_sum_i21_i)+(16))|0);
 var $1255=(($tbase_247_i+$_sum13_i_i)|0);
 var $_sum14_i_i=((($_sum_i21_i)+(20))|0);
 var $1256=(($tbase_247_i+$_sum14_i_i)|0);
 var $1257=$1256;
 HEAP32[(($1257)>>2)]=0;
 var $1258=$1255;
 HEAP32[(($1258)>>2)]=0;
 var $1259=HEAP32[((76772)>>2)];
 var $1260=1<<$I7_0_i_i;
 var $1261=$1259&$1260;
 var $1262=($1261|0)==0;
 if($1262){label=291;break;}else{label=292;break;}
 case 291: 
 var $1264=$1259|$1260;
 HEAP32[((76772)>>2)]=$1264;
 HEAP32[(($1252)>>2)]=$1223;
 var $1265=$1252;
 var $_sum15_i_i=((($_sum_i21_i)+(24))|0);
 var $1266=(($tbase_247_i+$_sum15_i_i)|0);
 var $1267=$1266;
 HEAP32[(($1267)>>2)]=$1265;
 var $_sum16_i_i=((($_sum_i21_i)+(12))|0);
 var $1268=(($tbase_247_i+$_sum16_i_i)|0);
 var $1269=$1268;
 HEAP32[(($1269)>>2)]=$1223;
 var $_sum17_i_i=((($_sum_i21_i)+(8))|0);
 var $1270=(($tbase_247_i+$_sum17_i_i)|0);
 var $1271=$1270;
 HEAP32[(($1271)>>2)]=$1223;
 label=305;break;
 case 292: 
 var $1273=HEAP32[(($1252)>>2)];
 var $1274=($I7_0_i_i|0)==31;
 if($1274){var $1279=0;label=294;break;}else{label=293;break;}
 case 293: 
 var $1276=$I7_0_i_i>>>1;
 var $1277=(((25)-($1276))|0);
 var $1279=$1277;label=294;break;
 case 294: 
 var $1279;
 var $1280=(($1273+4)|0);
 var $1281=HEAP32[(($1280)>>2)];
 var $1282=$1281&-8;
 var $1283=($1282|0)==($qsize_0_i_i|0);
 if($1283){var $T_0_lcssa_i28_i=$1273;label=301;break;}else{label=295;break;}
 case 295: 
 var $1284=$qsize_0_i_i<<$1279;
 var $T_055_i_i=$1273;var $K8_056_i_i=$1284;label=297;break;
 case 296: 
 var $1286=$K8_056_i_i<<1;
 var $1287=(($1294+4)|0);
 var $1288=HEAP32[(($1287)>>2)];
 var $1289=$1288&-8;
 var $1290=($1289|0)==($qsize_0_i_i|0);
 if($1290){var $T_0_lcssa_i28_i=$1294;label=301;break;}else{var $T_055_i_i=$1294;var $K8_056_i_i=$1286;label=297;break;}
 case 297: 
 var $K8_056_i_i;
 var $T_055_i_i;
 var $1292=$K8_056_i_i>>>31;
 var $1293=(($T_055_i_i+16+($1292<<2))|0);
 var $1294=HEAP32[(($1293)>>2)];
 var $1295=($1294|0)==0;
 if($1295){label=298;break;}else{label=296;break;}
 case 298: 
 var $1297=$1293;
 var $1298=HEAP32[((76784)>>2)];
 var $1299=($1297>>>0)<($1298>>>0);
 if($1299){label=300;break;}else{label=299;break;}
 case 299: 
 HEAP32[(($1293)>>2)]=$1223;
 var $_sum24_i_i=((($_sum_i21_i)+(24))|0);
 var $1301=(($tbase_247_i+$_sum24_i_i)|0);
 var $1302=$1301;
 HEAP32[(($1302)>>2)]=$T_055_i_i;
 var $_sum25_i_i=((($_sum_i21_i)+(12))|0);
 var $1303=(($tbase_247_i+$_sum25_i_i)|0);
 var $1304=$1303;
 HEAP32[(($1304)>>2)]=$1223;
 var $_sum26_i_i=((($_sum_i21_i)+(8))|0);
 var $1305=(($tbase_247_i+$_sum26_i_i)|0);
 var $1306=$1305;
 HEAP32[(($1306)>>2)]=$1223;
 label=305;break;
 case 300: 
 _abort();
 throw "Reached an unreachable!";
 case 301: 
 var $T_0_lcssa_i28_i;
 var $1308=(($T_0_lcssa_i28_i+8)|0);
 var $1309=HEAP32[(($1308)>>2)];
 var $1310=$T_0_lcssa_i28_i;
 var $1311=HEAP32[((76784)>>2)];
 var $1312=($1310>>>0)<($1311>>>0);
 if($1312){label=304;break;}else{label=302;break;}
 case 302: 
 var $1314=$1309;
 var $1315=($1314>>>0)<($1311>>>0);
 if($1315){label=304;break;}else{label=303;break;}
 case 303: 
 var $1317=(($1309+12)|0);
 HEAP32[(($1317)>>2)]=$1223;
 HEAP32[(($1308)>>2)]=$1223;
 var $_sum21_i_i=((($_sum_i21_i)+(8))|0);
 var $1318=(($tbase_247_i+$_sum21_i_i)|0);
 var $1319=$1318;
 HEAP32[(($1319)>>2)]=$1309;
 var $_sum22_i_i=((($_sum_i21_i)+(12))|0);
 var $1320=(($tbase_247_i+$_sum22_i_i)|0);
 var $1321=$1320;
 HEAP32[(($1321)>>2)]=$T_0_lcssa_i28_i;
 var $_sum23_i_i=((($_sum_i21_i)+(24))|0);
 var $1322=(($tbase_247_i+$_sum23_i_i)|0);
 var $1323=$1322;
 HEAP32[(($1323)>>2)]=0;
 label=305;break;
 case 304: 
 _abort();
 throw "Reached an unreachable!";
 case 305: 
 var $_sum1819_i_i=$989|8;
 var $1324=(($tbase_247_i+$_sum1819_i_i)|0);
 var $mem_0=$1324;label=344;break;
 case 306: 
 var $1325=$888;
 var $sp_0_i_i_i=77216;label=307;break;
 case 307: 
 var $sp_0_i_i_i;
 var $1327=(($sp_0_i_i_i)|0);
 var $1328=HEAP32[(($1327)>>2)];
 var $1329=($1328>>>0)>($1325>>>0);
 if($1329){label=309;break;}else{label=308;break;}
 case 308: 
 var $1331=(($sp_0_i_i_i+4)|0);
 var $1332=HEAP32[(($1331)>>2)];
 var $1333=(($1328+$1332)|0);
 var $1334=($1333>>>0)>($1325>>>0);
 if($1334){label=310;break;}else{label=309;break;}
 case 309: 
 var $1336=(($sp_0_i_i_i+8)|0);
 var $1337=HEAP32[(($1336)>>2)];
 var $sp_0_i_i_i=$1337;label=307;break;
 case 310: 
 var $_sum_i15_i=((($1332)-(47))|0);
 var $_sum1_i16_i=((($1332)-(39))|0);
 var $1338=(($1328+$_sum1_i16_i)|0);
 var $1339=$1338;
 var $1340=$1339&7;
 var $1341=($1340|0)==0;
 if($1341){var $1346=0;label=312;break;}else{label=311;break;}
 case 311: 
 var $1343=(((-$1339))|0);
 var $1344=$1343&7;
 var $1346=$1344;label=312;break;
 case 312: 
 var $1346;
 var $_sum2_i17_i=((($_sum_i15_i)+($1346))|0);
 var $1347=(($1328+$_sum2_i17_i)|0);
 var $1348=(($888+16)|0);
 var $1349=$1348;
 var $1350=($1347>>>0)<($1349>>>0);
 var $1351=($1350?$1325:$1347);
 var $1352=(($1351+8)|0);
 var $1353=$1352;
 var $1354=((($tsize_246_i)-(40))|0);
 var $1355=(($tbase_247_i+8)|0);
 var $1356=$1355;
 var $1357=$1356&7;
 var $1358=($1357|0)==0;
 if($1358){var $1362=0;label=314;break;}else{label=313;break;}
 case 313: 
 var $1360=(((-$1356))|0);
 var $1361=$1360&7;
 var $1362=$1361;label=314;break;
 case 314: 
 var $1362;
 var $1363=(($tbase_247_i+$1362)|0);
 var $1364=$1363;
 var $1365=((($1354)-($1362))|0);
 HEAP32[((76792)>>2)]=$1364;
 HEAP32[((76780)>>2)]=$1365;
 var $1366=$1365|1;
 var $_sum_i_i_i=((($1362)+(4))|0);
 var $1367=(($tbase_247_i+$_sum_i_i_i)|0);
 var $1368=$1367;
 HEAP32[(($1368)>>2)]=$1366;
 var $_sum2_i_i_i=((($tsize_246_i)-(36))|0);
 var $1369=(($tbase_247_i+$_sum2_i_i_i)|0);
 var $1370=$1369;
 HEAP32[(($1370)>>2)]=40;
 var $1371=HEAP32[((10664)>>2)];
 HEAP32[((76796)>>2)]=$1371;
 var $1372=(($1351+4)|0);
 var $1373=$1372;
 HEAP32[(($1373)>>2)]=27;
 assert(16 % 1 === 0);HEAP32[(($1352)>>2)]=HEAP32[((77216)>>2)];HEAP32[((($1352)+(4))>>2)]=HEAP32[((77220)>>2)];HEAP32[((($1352)+(8))>>2)]=HEAP32[((77224)>>2)];HEAP32[((($1352)+(12))>>2)]=HEAP32[((77228)>>2)];
 HEAP32[((77216)>>2)]=$tbase_247_i;
 HEAP32[((77220)>>2)]=$tsize_246_i;
 HEAP32[((77228)>>2)]=0;
 HEAP32[((77224)>>2)]=$1353;
 var $1374=(($1351+28)|0);
 var $1375=$1374;
 HEAP32[(($1375)>>2)]=7;
 var $1376=(($1351+32)|0);
 var $1377=($1376>>>0)<($1333>>>0);
 if($1377){var $1378=$1375;label=315;break;}else{label=316;break;}
 case 315: 
 var $1378;
 var $1379=(($1378+4)|0);
 HEAP32[(($1379)>>2)]=7;
 var $1380=(($1378+8)|0);
 var $1381=$1380;
 var $1382=($1381>>>0)<($1333>>>0);
 if($1382){var $1378=$1379;label=315;break;}else{label=316;break;}
 case 316: 
 var $1383=($1351|0)==($1325|0);
 if($1383){label=341;break;}else{label=317;break;}
 case 317: 
 var $1385=$1351;
 var $1386=$888;
 var $1387=((($1385)-($1386))|0);
 var $1388=(($1325+$1387)|0);
 var $_sum3_i_i=((($1387)+(4))|0);
 var $1389=(($1325+$_sum3_i_i)|0);
 var $1390=$1389;
 var $1391=HEAP32[(($1390)>>2)];
 var $1392=$1391&-2;
 HEAP32[(($1390)>>2)]=$1392;
 var $1393=$1387|1;
 var $1394=(($888+4)|0);
 HEAP32[(($1394)>>2)]=$1393;
 var $1395=$1388;
 HEAP32[(($1395)>>2)]=$1387;
 var $1396=$1387>>>3;
 var $1397=($1387>>>0)<256;
 if($1397){label=318;break;}else{label=323;break;}
 case 318: 
 var $1399=$1396<<1;
 var $1400=((76808+($1399<<2))|0);
 var $1401=$1400;
 var $1402=HEAP32[((76768)>>2)];
 var $1403=1<<$1396;
 var $1404=$1402&$1403;
 var $1405=($1404|0)==0;
 if($1405){label=319;break;}else{label=320;break;}
 case 319: 
 var $1407=$1402|$1403;
 HEAP32[((76768)>>2)]=$1407;
 var $_sum11_pre_i_i=((($1399)+(2))|0);
 var $_pre_i_i=((76808+($_sum11_pre_i_i<<2))|0);
 var $F_0_i_i=$1401;var $_pre_phi_i_i=$_pre_i_i;label=322;break;
 case 320: 
 var $_sum12_i_i=((($1399)+(2))|0);
 var $1409=((76808+($_sum12_i_i<<2))|0);
 var $1410=HEAP32[(($1409)>>2)];
 var $1411=$1410;
 var $1412=HEAP32[((76784)>>2)];
 var $1413=($1411>>>0)<($1412>>>0);
 if($1413){label=321;break;}else{var $F_0_i_i=$1410;var $_pre_phi_i_i=$1409;label=322;break;}
 case 321: 
 _abort();
 throw "Reached an unreachable!";
 case 322: 
 var $_pre_phi_i_i;
 var $F_0_i_i;
 HEAP32[(($_pre_phi_i_i)>>2)]=$888;
 var $1416=(($F_0_i_i+12)|0);
 HEAP32[(($1416)>>2)]=$888;
 var $1417=(($888+8)|0);
 HEAP32[(($1417)>>2)]=$F_0_i_i;
 var $1418=(($888+12)|0);
 HEAP32[(($1418)>>2)]=$1401;
 label=341;break;
 case 323: 
 var $1420=$888;
 var $1421=$1387>>>8;
 var $1422=($1421|0)==0;
 if($1422){var $I1_0_i_i=0;label=326;break;}else{label=324;break;}
 case 324: 
 var $1424=($1387>>>0)>16777215;
 if($1424){var $I1_0_i_i=31;label=326;break;}else{label=325;break;}
 case 325: 
 var $1426=((($1421)+(1048320))|0);
 var $1427=$1426>>>16;
 var $1428=$1427&8;
 var $1429=$1421<<$1428;
 var $1430=((($1429)+(520192))|0);
 var $1431=$1430>>>16;
 var $1432=$1431&4;
 var $1433=$1432|$1428;
 var $1434=$1429<<$1432;
 var $1435=((($1434)+(245760))|0);
 var $1436=$1435>>>16;
 var $1437=$1436&2;
 var $1438=$1433|$1437;
 var $1439=(((14)-($1438))|0);
 var $1440=$1434<<$1437;
 var $1441=$1440>>>15;
 var $1442=((($1439)+($1441))|0);
 var $1443=$1442<<1;
 var $1444=((($1442)+(7))|0);
 var $1445=$1387>>>($1444>>>0);
 var $1446=$1445&1;
 var $1447=$1446|$1443;
 var $I1_0_i_i=$1447;label=326;break;
 case 326: 
 var $I1_0_i_i;
 var $1449=((77072+($I1_0_i_i<<2))|0);
 var $1450=(($888+28)|0);
 var $I1_0_c_i_i=$I1_0_i_i;
 HEAP32[(($1450)>>2)]=$I1_0_c_i_i;
 var $1451=(($888+20)|0);
 HEAP32[(($1451)>>2)]=0;
 var $1452=(($888+16)|0);
 HEAP32[(($1452)>>2)]=0;
 var $1453=HEAP32[((76772)>>2)];
 var $1454=1<<$I1_0_i_i;
 var $1455=$1453&$1454;
 var $1456=($1455|0)==0;
 if($1456){label=327;break;}else{label=328;break;}
 case 327: 
 var $1458=$1453|$1454;
 HEAP32[((76772)>>2)]=$1458;
 HEAP32[(($1449)>>2)]=$1420;
 var $1459=(($888+24)|0);
 var $_c_i_i=$1449;
 HEAP32[(($1459)>>2)]=$_c_i_i;
 var $1460=(($888+12)|0);
 HEAP32[(($1460)>>2)]=$888;
 var $1461=(($888+8)|0);
 HEAP32[(($1461)>>2)]=$888;
 label=341;break;
 case 328: 
 var $1463=HEAP32[(($1449)>>2)];
 var $1464=($I1_0_i_i|0)==31;
 if($1464){var $1469=0;label=330;break;}else{label=329;break;}
 case 329: 
 var $1466=$I1_0_i_i>>>1;
 var $1467=(((25)-($1466))|0);
 var $1469=$1467;label=330;break;
 case 330: 
 var $1469;
 var $1470=(($1463+4)|0);
 var $1471=HEAP32[(($1470)>>2)];
 var $1472=$1471&-8;
 var $1473=($1472|0)==($1387|0);
 if($1473){var $T_0_lcssa_i_i=$1463;label=337;break;}else{label=331;break;}
 case 331: 
 var $1474=$1387<<$1469;
 var $T_014_i_i=$1463;var $K2_015_i_i=$1474;label=333;break;
 case 332: 
 var $1476=$K2_015_i_i<<1;
 var $1477=(($1484+4)|0);
 var $1478=HEAP32[(($1477)>>2)];
 var $1479=$1478&-8;
 var $1480=($1479|0)==($1387|0);
 if($1480){var $T_0_lcssa_i_i=$1484;label=337;break;}else{var $T_014_i_i=$1484;var $K2_015_i_i=$1476;label=333;break;}
 case 333: 
 var $K2_015_i_i;
 var $T_014_i_i;
 var $1482=$K2_015_i_i>>>31;
 var $1483=(($T_014_i_i+16+($1482<<2))|0);
 var $1484=HEAP32[(($1483)>>2)];
 var $1485=($1484|0)==0;
 if($1485){label=334;break;}else{label=332;break;}
 case 334: 
 var $1487=$1483;
 var $1488=HEAP32[((76784)>>2)];
 var $1489=($1487>>>0)<($1488>>>0);
 if($1489){label=336;break;}else{label=335;break;}
 case 335: 
 HEAP32[(($1483)>>2)]=$1420;
 var $1491=(($888+24)|0);
 var $T_0_c8_i_i=$T_014_i_i;
 HEAP32[(($1491)>>2)]=$T_0_c8_i_i;
 var $1492=(($888+12)|0);
 HEAP32[(($1492)>>2)]=$888;
 var $1493=(($888+8)|0);
 HEAP32[(($1493)>>2)]=$888;
 label=341;break;
 case 336: 
 _abort();
 throw "Reached an unreachable!";
 case 337: 
 var $T_0_lcssa_i_i;
 var $1495=(($T_0_lcssa_i_i+8)|0);
 var $1496=HEAP32[(($1495)>>2)];
 var $1497=$T_0_lcssa_i_i;
 var $1498=HEAP32[((76784)>>2)];
 var $1499=($1497>>>0)<($1498>>>0);
 if($1499){label=340;break;}else{label=338;break;}
 case 338: 
 var $1501=$1496;
 var $1502=($1501>>>0)<($1498>>>0);
 if($1502){label=340;break;}else{label=339;break;}
 case 339: 
 var $1504=(($1496+12)|0);
 HEAP32[(($1504)>>2)]=$1420;
 HEAP32[(($1495)>>2)]=$1420;
 var $1505=(($888+8)|0);
 var $_c7_i_i=$1496;
 HEAP32[(($1505)>>2)]=$_c7_i_i;
 var $1506=(($888+12)|0);
 var $T_0_c_i_i=$T_0_lcssa_i_i;
 HEAP32[(($1506)>>2)]=$T_0_c_i_i;
 var $1507=(($888+24)|0);
 HEAP32[(($1507)>>2)]=0;
 label=341;break;
 case 340: 
 _abort();
 throw "Reached an unreachable!";
 case 341: 
 var $1508=HEAP32[((76780)>>2)];
 var $1509=($1508>>>0)>($nb_0>>>0);
 if($1509){label=342;break;}else{label=343;break;}
 case 342: 
 var $1511=((($1508)-($nb_0))|0);
 HEAP32[((76780)>>2)]=$1511;
 var $1512=HEAP32[((76792)>>2)];
 var $1513=$1512;
 var $1514=(($1513+$nb_0)|0);
 var $1515=$1514;
 HEAP32[((76792)>>2)]=$1515;
 var $1516=$1511|1;
 var $_sum_i34=((($nb_0)+(4))|0);
 var $1517=(($1513+$_sum_i34)|0);
 var $1518=$1517;
 HEAP32[(($1518)>>2)]=$1516;
 var $1519=$nb_0|3;
 var $1520=(($1512+4)|0);
 HEAP32[(($1520)>>2)]=$1519;
 var $1521=(($1512+8)|0);
 var $1522=$1521;
 var $mem_0=$1522;label=344;break;
 case 343: 
 var $1523=___errno_location();
 HEAP32[(($1523)>>2)]=12;
 var $mem_0=0;label=344;break;
 case 344: 
 var $mem_0;
 return $mem_0;
  default: assert(0, "bad label: " + label);
 }

}
Module["_malloc"] = _malloc;

function _free($mem){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($mem|0)==0;
 if($1){label=141;break;}else{label=2;break;}
 case 2: 
 var $3=((($mem)-(8))|0);
 var $4=$3;
 var $5=HEAP32[((76784)>>2)];
 var $6=($3>>>0)<($5>>>0);
 if($6){label=140;break;}else{label=3;break;}
 case 3: 
 var $8=((($mem)-(4))|0);
 var $9=$8;
 var $10=HEAP32[(($9)>>2)];
 var $11=$10&3;
 var $12=($11|0)==1;
 if($12){label=140;break;}else{label=4;break;}
 case 4: 
 var $14=$10&-8;
 var $_sum=((($14)-(8))|0);
 var $15=(($mem+$_sum)|0);
 var $16=$15;
 var $17=$10&1;
 var $18=($17|0)==0;
 if($18){label=5;break;}else{var $p_0=$4;var $psize_0=$14;label=56;break;}
 case 5: 
 var $20=$3;
 var $21=HEAP32[(($20)>>2)];
 var $22=($11|0)==0;
 if($22){label=141;break;}else{label=6;break;}
 case 6: 
 var $_sum3=(((-8)-($21))|0);
 var $24=(($mem+$_sum3)|0);
 var $25=$24;
 var $26=((($21)+($14))|0);
 var $27=($24>>>0)<($5>>>0);
 if($27){label=140;break;}else{label=7;break;}
 case 7: 
 var $29=HEAP32[((76788)>>2)];
 var $30=($25|0)==($29|0);
 if($30){label=54;break;}else{label=8;break;}
 case 8: 
 var $32=$21>>>3;
 var $33=($21>>>0)<256;
 if($33){label=9;break;}else{label=21;break;}
 case 9: 
 var $_sum47=((($_sum3)+(8))|0);
 var $35=(($mem+$_sum47)|0);
 var $36=$35;
 var $37=HEAP32[(($36)>>2)];
 var $_sum48=((($_sum3)+(12))|0);
 var $38=(($mem+$_sum48)|0);
 var $39=$38;
 var $40=HEAP32[(($39)>>2)];
 var $41=$32<<1;
 var $42=((76808+($41<<2))|0);
 var $43=$42;
 var $44=($37|0)==($43|0);
 if($44){label=12;break;}else{label=10;break;}
 case 10: 
 var $46=$37;
 var $47=($46>>>0)<($5>>>0);
 if($47){label=20;break;}else{label=11;break;}
 case 11: 
 var $49=(($37+12)|0);
 var $50=HEAP32[(($49)>>2)];
 var $51=($50|0)==($25|0);
 if($51){label=12;break;}else{label=20;break;}
 case 12: 
 var $52=($40|0)==($37|0);
 if($52){label=13;break;}else{label=14;break;}
 case 13: 
 var $54=1<<$32;
 var $55=$54^-1;
 var $56=HEAP32[((76768)>>2)];
 var $57=$56&$55;
 HEAP32[((76768)>>2)]=$57;
 var $p_0=$25;var $psize_0=$26;label=56;break;
 case 14: 
 var $59=($40|0)==($43|0);
 if($59){label=15;break;}else{label=16;break;}
 case 15: 
 var $_pre84=(($40+8)|0);
 var $_pre_phi85=$_pre84;label=18;break;
 case 16: 
 var $61=$40;
 var $62=($61>>>0)<($5>>>0);
 if($62){label=19;break;}else{label=17;break;}
 case 17: 
 var $64=(($40+8)|0);
 var $65=HEAP32[(($64)>>2)];
 var $66=($65|0)==($25|0);
 if($66){var $_pre_phi85=$64;label=18;break;}else{label=19;break;}
 case 18: 
 var $_pre_phi85;
 var $67=(($37+12)|0);
 HEAP32[(($67)>>2)]=$40;
 HEAP32[(($_pre_phi85)>>2)]=$37;
 var $p_0=$25;var $psize_0=$26;label=56;break;
 case 19: 
 _abort();
 throw "Reached an unreachable!";
 case 20: 
 _abort();
 throw "Reached an unreachable!";
 case 21: 
 var $69=$24;
 var $_sum37=((($_sum3)+(24))|0);
 var $70=(($mem+$_sum37)|0);
 var $71=$70;
 var $72=HEAP32[(($71)>>2)];
 var $_sum38=((($_sum3)+(12))|0);
 var $73=(($mem+$_sum38)|0);
 var $74=$73;
 var $75=HEAP32[(($74)>>2)];
 var $76=($75|0)==($69|0);
 if($76){label=27;break;}else{label=22;break;}
 case 22: 
 var $_sum44=((($_sum3)+(8))|0);
 var $78=(($mem+$_sum44)|0);
 var $79=$78;
 var $80=HEAP32[(($79)>>2)];
 var $81=$80;
 var $82=($81>>>0)<($5>>>0);
 if($82){label=26;break;}else{label=23;break;}
 case 23: 
 var $84=(($80+12)|0);
 var $85=HEAP32[(($84)>>2)];
 var $86=($85|0)==($69|0);
 if($86){label=24;break;}else{label=26;break;}
 case 24: 
 var $88=(($75+8)|0);
 var $89=HEAP32[(($88)>>2)];
 var $90=($89|0)==($69|0);
 if($90){label=25;break;}else{label=26;break;}
 case 25: 
 HEAP32[(($84)>>2)]=$75;
 HEAP32[(($88)>>2)]=$80;
 var $R_1=$75;label=34;break;
 case 26: 
 _abort();
 throw "Reached an unreachable!";
 case 27: 
 var $_sum40=((($_sum3)+(20))|0);
 var $93=(($mem+$_sum40)|0);
 var $94=$93;
 var $95=HEAP32[(($94)>>2)];
 var $96=($95|0)==0;
 if($96){label=28;break;}else{var $R_0=$95;var $RP_0=$94;label=29;break;}
 case 28: 
 var $_sum39=((($_sum3)+(16))|0);
 var $98=(($mem+$_sum39)|0);
 var $99=$98;
 var $100=HEAP32[(($99)>>2)];
 var $101=($100|0)==0;
 if($101){var $R_1=0;label=34;break;}else{var $R_0=$100;var $RP_0=$99;label=29;break;}
 case 29: 
 var $RP_0;
 var $R_0;
 var $102=(($R_0+20)|0);
 var $103=HEAP32[(($102)>>2)];
 var $104=($103|0)==0;
 if($104){label=30;break;}else{var $R_0=$103;var $RP_0=$102;label=29;break;}
 case 30: 
 var $106=(($R_0+16)|0);
 var $107=HEAP32[(($106)>>2)];
 var $108=($107|0)==0;
 if($108){label=31;break;}else{var $R_0=$107;var $RP_0=$106;label=29;break;}
 case 31: 
 var $110=$RP_0;
 var $111=($110>>>0)<($5>>>0);
 if($111){label=33;break;}else{label=32;break;}
 case 32: 
 HEAP32[(($RP_0)>>2)]=0;
 var $R_1=$R_0;label=34;break;
 case 33: 
 _abort();
 throw "Reached an unreachable!";
 case 34: 
 var $R_1;
 var $115=($72|0)==0;
 if($115){var $p_0=$25;var $psize_0=$26;label=56;break;}else{label=35;break;}
 case 35: 
 var $_sum41=((($_sum3)+(28))|0);
 var $117=(($mem+$_sum41)|0);
 var $118=$117;
 var $119=HEAP32[(($118)>>2)];
 var $120=((77072+($119<<2))|0);
 var $121=HEAP32[(($120)>>2)];
 var $122=($69|0)==($121|0);
 if($122){label=36;break;}else{label=38;break;}
 case 36: 
 HEAP32[(($120)>>2)]=$R_1;
 var $cond=($R_1|0)==0;
 if($cond){label=37;break;}else{label=44;break;}
 case 37: 
 var $124=1<<$119;
 var $125=$124^-1;
 var $126=HEAP32[((76772)>>2)];
 var $127=$126&$125;
 HEAP32[((76772)>>2)]=$127;
 var $p_0=$25;var $psize_0=$26;label=56;break;
 case 38: 
 var $129=$72;
 var $130=HEAP32[((76784)>>2)];
 var $131=($129>>>0)<($130>>>0);
 if($131){label=42;break;}else{label=39;break;}
 case 39: 
 var $133=(($72+16)|0);
 var $134=HEAP32[(($133)>>2)];
 var $135=($134|0)==($69|0);
 if($135){label=40;break;}else{label=41;break;}
 case 40: 
 HEAP32[(($133)>>2)]=$R_1;
 label=43;break;
 case 41: 
 var $138=(($72+20)|0);
 HEAP32[(($138)>>2)]=$R_1;
 label=43;break;
 case 42: 
 _abort();
 throw "Reached an unreachable!";
 case 43: 
 var $141=($R_1|0)==0;
 if($141){var $p_0=$25;var $psize_0=$26;label=56;break;}else{label=44;break;}
 case 44: 
 var $143=$R_1;
 var $144=HEAP32[((76784)>>2)];
 var $145=($143>>>0)<($144>>>0);
 if($145){label=53;break;}else{label=45;break;}
 case 45: 
 var $147=(($R_1+24)|0);
 HEAP32[(($147)>>2)]=$72;
 var $_sum42=((($_sum3)+(16))|0);
 var $148=(($mem+$_sum42)|0);
 var $149=$148;
 var $150=HEAP32[(($149)>>2)];
 var $151=($150|0)==0;
 if($151){label=49;break;}else{label=46;break;}
 case 46: 
 var $153=$150;
 var $154=HEAP32[((76784)>>2)];
 var $155=($153>>>0)<($154>>>0);
 if($155){label=48;break;}else{label=47;break;}
 case 47: 
 var $157=(($R_1+16)|0);
 HEAP32[(($157)>>2)]=$150;
 var $158=(($150+24)|0);
 HEAP32[(($158)>>2)]=$R_1;
 label=49;break;
 case 48: 
 _abort();
 throw "Reached an unreachable!";
 case 49: 
 var $_sum43=((($_sum3)+(20))|0);
 var $161=(($mem+$_sum43)|0);
 var $162=$161;
 var $163=HEAP32[(($162)>>2)];
 var $164=($163|0)==0;
 if($164){var $p_0=$25;var $psize_0=$26;label=56;break;}else{label=50;break;}
 case 50: 
 var $166=$163;
 var $167=HEAP32[((76784)>>2)];
 var $168=($166>>>0)<($167>>>0);
 if($168){label=52;break;}else{label=51;break;}
 case 51: 
 var $170=(($R_1+20)|0);
 HEAP32[(($170)>>2)]=$163;
 var $171=(($163+24)|0);
 HEAP32[(($171)>>2)]=$R_1;
 var $p_0=$25;var $psize_0=$26;label=56;break;
 case 52: 
 _abort();
 throw "Reached an unreachable!";
 case 53: 
 _abort();
 throw "Reached an unreachable!";
 case 54: 
 var $_sum4=((($14)-(4))|0);
 var $175=(($mem+$_sum4)|0);
 var $176=$175;
 var $177=HEAP32[(($176)>>2)];
 var $178=$177&3;
 var $179=($178|0)==3;
 if($179){label=55;break;}else{var $p_0=$25;var $psize_0=$26;label=56;break;}
 case 55: 
 HEAP32[((76776)>>2)]=$26;
 var $181=HEAP32[(($176)>>2)];
 var $182=$181&-2;
 HEAP32[(($176)>>2)]=$182;
 var $183=$26|1;
 var $_sum35=((($_sum3)+(4))|0);
 var $184=(($mem+$_sum35)|0);
 var $185=$184;
 HEAP32[(($185)>>2)]=$183;
 var $186=$15;
 HEAP32[(($186)>>2)]=$26;
 label=141;break;
 case 56: 
 var $psize_0;
 var $p_0;
 var $188=$p_0;
 var $189=($188>>>0)<($15>>>0);
 if($189){label=57;break;}else{label=140;break;}
 case 57: 
 var $_sum34=((($14)-(4))|0);
 var $191=(($mem+$_sum34)|0);
 var $192=$191;
 var $193=HEAP32[(($192)>>2)];
 var $194=$193&1;
 var $phitmp=($194|0)==0;
 if($phitmp){label=140;break;}else{label=58;break;}
 case 58: 
 var $196=$193&2;
 var $197=($196|0)==0;
 if($197){label=59;break;}else{label=112;break;}
 case 59: 
 var $199=HEAP32[((76792)>>2)];
 var $200=($16|0)==($199|0);
 if($200){label=60;break;}else{label=62;break;}
 case 60: 
 var $202=HEAP32[((76780)>>2)];
 var $203=((($202)+($psize_0))|0);
 HEAP32[((76780)>>2)]=$203;
 HEAP32[((76792)>>2)]=$p_0;
 var $204=$203|1;
 var $205=(($p_0+4)|0);
 HEAP32[(($205)>>2)]=$204;
 var $206=HEAP32[((76788)>>2)];
 var $207=($p_0|0)==($206|0);
 if($207){label=61;break;}else{label=141;break;}
 case 61: 
 HEAP32[((76788)>>2)]=0;
 HEAP32[((76776)>>2)]=0;
 label=141;break;
 case 62: 
 var $210=HEAP32[((76788)>>2)];
 var $211=($16|0)==($210|0);
 if($211){label=63;break;}else{label=64;break;}
 case 63: 
 var $213=HEAP32[((76776)>>2)];
 var $214=((($213)+($psize_0))|0);
 HEAP32[((76776)>>2)]=$214;
 HEAP32[((76788)>>2)]=$p_0;
 var $215=$214|1;
 var $216=(($p_0+4)|0);
 HEAP32[(($216)>>2)]=$215;
 var $217=(($188+$214)|0);
 var $218=$217;
 HEAP32[(($218)>>2)]=$214;
 label=141;break;
 case 64: 
 var $220=$193&-8;
 var $221=((($220)+($psize_0))|0);
 var $222=$193>>>3;
 var $223=($193>>>0)<256;
 if($223){label=65;break;}else{label=77;break;}
 case 65: 
 var $225=(($mem+$14)|0);
 var $226=$225;
 var $227=HEAP32[(($226)>>2)];
 var $_sum2829=$14|4;
 var $228=(($mem+$_sum2829)|0);
 var $229=$228;
 var $230=HEAP32[(($229)>>2)];
 var $231=$222<<1;
 var $232=((76808+($231<<2))|0);
 var $233=$232;
 var $234=($227|0)==($233|0);
 if($234){label=68;break;}else{label=66;break;}
 case 66: 
 var $236=$227;
 var $237=HEAP32[((76784)>>2)];
 var $238=($236>>>0)<($237>>>0);
 if($238){label=76;break;}else{label=67;break;}
 case 67: 
 var $240=(($227+12)|0);
 var $241=HEAP32[(($240)>>2)];
 var $242=($241|0)==($16|0);
 if($242){label=68;break;}else{label=76;break;}
 case 68: 
 var $243=($230|0)==($227|0);
 if($243){label=69;break;}else{label=70;break;}
 case 69: 
 var $245=1<<$222;
 var $246=$245^-1;
 var $247=HEAP32[((76768)>>2)];
 var $248=$247&$246;
 HEAP32[((76768)>>2)]=$248;
 label=110;break;
 case 70: 
 var $250=($230|0)==($233|0);
 if($250){label=71;break;}else{label=72;break;}
 case 71: 
 var $_pre82=(($230+8)|0);
 var $_pre_phi83=$_pre82;label=74;break;
 case 72: 
 var $252=$230;
 var $253=HEAP32[((76784)>>2)];
 var $254=($252>>>0)<($253>>>0);
 if($254){label=75;break;}else{label=73;break;}
 case 73: 
 var $256=(($230+8)|0);
 var $257=HEAP32[(($256)>>2)];
 var $258=($257|0)==($16|0);
 if($258){var $_pre_phi83=$256;label=74;break;}else{label=75;break;}
 case 74: 
 var $_pre_phi83;
 var $259=(($227+12)|0);
 HEAP32[(($259)>>2)]=$230;
 HEAP32[(($_pre_phi83)>>2)]=$227;
 label=110;break;
 case 75: 
 _abort();
 throw "Reached an unreachable!";
 case 76: 
 _abort();
 throw "Reached an unreachable!";
 case 77: 
 var $261=$15;
 var $_sum6=((($14)+(16))|0);
 var $262=(($mem+$_sum6)|0);
 var $263=$262;
 var $264=HEAP32[(($263)>>2)];
 var $_sum78=$14|4;
 var $265=(($mem+$_sum78)|0);
 var $266=$265;
 var $267=HEAP32[(($266)>>2)];
 var $268=($267|0)==($261|0);
 if($268){label=83;break;}else{label=78;break;}
 case 78: 
 var $270=(($mem+$14)|0);
 var $271=$270;
 var $272=HEAP32[(($271)>>2)];
 var $273=$272;
 var $274=HEAP32[((76784)>>2)];
 var $275=($273>>>0)<($274>>>0);
 if($275){label=82;break;}else{label=79;break;}
 case 79: 
 var $277=(($272+12)|0);
 var $278=HEAP32[(($277)>>2)];
 var $279=($278|0)==($261|0);
 if($279){label=80;break;}else{label=82;break;}
 case 80: 
 var $281=(($267+8)|0);
 var $282=HEAP32[(($281)>>2)];
 var $283=($282|0)==($261|0);
 if($283){label=81;break;}else{label=82;break;}
 case 81: 
 HEAP32[(($277)>>2)]=$267;
 HEAP32[(($281)>>2)]=$272;
 var $R7_1=$267;label=90;break;
 case 82: 
 _abort();
 throw "Reached an unreachable!";
 case 83: 
 var $_sum10=((($14)+(12))|0);
 var $286=(($mem+$_sum10)|0);
 var $287=$286;
 var $288=HEAP32[(($287)>>2)];
 var $289=($288|0)==0;
 if($289){label=84;break;}else{var $R7_0=$288;var $RP9_0=$287;label=85;break;}
 case 84: 
 var $_sum9=((($14)+(8))|0);
 var $291=(($mem+$_sum9)|0);
 var $292=$291;
 var $293=HEAP32[(($292)>>2)];
 var $294=($293|0)==0;
 if($294){var $R7_1=0;label=90;break;}else{var $R7_0=$293;var $RP9_0=$292;label=85;break;}
 case 85: 
 var $RP9_0;
 var $R7_0;
 var $295=(($R7_0+20)|0);
 var $296=HEAP32[(($295)>>2)];
 var $297=($296|0)==0;
 if($297){label=86;break;}else{var $R7_0=$296;var $RP9_0=$295;label=85;break;}
 case 86: 
 var $299=(($R7_0+16)|0);
 var $300=HEAP32[(($299)>>2)];
 var $301=($300|0)==0;
 if($301){label=87;break;}else{var $R7_0=$300;var $RP9_0=$299;label=85;break;}
 case 87: 
 var $303=$RP9_0;
 var $304=HEAP32[((76784)>>2)];
 var $305=($303>>>0)<($304>>>0);
 if($305){label=89;break;}else{label=88;break;}
 case 88: 
 HEAP32[(($RP9_0)>>2)]=0;
 var $R7_1=$R7_0;label=90;break;
 case 89: 
 _abort();
 throw "Reached an unreachable!";
 case 90: 
 var $R7_1;
 var $309=($264|0)==0;
 if($309){label=110;break;}else{label=91;break;}
 case 91: 
 var $_sum21=((($14)+(20))|0);
 var $311=(($mem+$_sum21)|0);
 var $312=$311;
 var $313=HEAP32[(($312)>>2)];
 var $314=((77072+($313<<2))|0);
 var $315=HEAP32[(($314)>>2)];
 var $316=($261|0)==($315|0);
 if($316){label=92;break;}else{label=94;break;}
 case 92: 
 HEAP32[(($314)>>2)]=$R7_1;
 var $cond69=($R7_1|0)==0;
 if($cond69){label=93;break;}else{label=100;break;}
 case 93: 
 var $318=1<<$313;
 var $319=$318^-1;
 var $320=HEAP32[((76772)>>2)];
 var $321=$320&$319;
 HEAP32[((76772)>>2)]=$321;
 label=110;break;
 case 94: 
 var $323=$264;
 var $324=HEAP32[((76784)>>2)];
 var $325=($323>>>0)<($324>>>0);
 if($325){label=98;break;}else{label=95;break;}
 case 95: 
 var $327=(($264+16)|0);
 var $328=HEAP32[(($327)>>2)];
 var $329=($328|0)==($261|0);
 if($329){label=96;break;}else{label=97;break;}
 case 96: 
 HEAP32[(($327)>>2)]=$R7_1;
 label=99;break;
 case 97: 
 var $332=(($264+20)|0);
 HEAP32[(($332)>>2)]=$R7_1;
 label=99;break;
 case 98: 
 _abort();
 throw "Reached an unreachable!";
 case 99: 
 var $335=($R7_1|0)==0;
 if($335){label=110;break;}else{label=100;break;}
 case 100: 
 var $337=$R7_1;
 var $338=HEAP32[((76784)>>2)];
 var $339=($337>>>0)<($338>>>0);
 if($339){label=109;break;}else{label=101;break;}
 case 101: 
 var $341=(($R7_1+24)|0);
 HEAP32[(($341)>>2)]=$264;
 var $_sum22=((($14)+(8))|0);
 var $342=(($mem+$_sum22)|0);
 var $343=$342;
 var $344=HEAP32[(($343)>>2)];
 var $345=($344|0)==0;
 if($345){label=105;break;}else{label=102;break;}
 case 102: 
 var $347=$344;
 var $348=HEAP32[((76784)>>2)];
 var $349=($347>>>0)<($348>>>0);
 if($349){label=104;break;}else{label=103;break;}
 case 103: 
 var $351=(($R7_1+16)|0);
 HEAP32[(($351)>>2)]=$344;
 var $352=(($344+24)|0);
 HEAP32[(($352)>>2)]=$R7_1;
 label=105;break;
 case 104: 
 _abort();
 throw "Reached an unreachable!";
 case 105: 
 var $_sum23=((($14)+(12))|0);
 var $355=(($mem+$_sum23)|0);
 var $356=$355;
 var $357=HEAP32[(($356)>>2)];
 var $358=($357|0)==0;
 if($358){label=110;break;}else{label=106;break;}
 case 106: 
 var $360=$357;
 var $361=HEAP32[((76784)>>2)];
 var $362=($360>>>0)<($361>>>0);
 if($362){label=108;break;}else{label=107;break;}
 case 107: 
 var $364=(($R7_1+20)|0);
 HEAP32[(($364)>>2)]=$357;
 var $365=(($357+24)|0);
 HEAP32[(($365)>>2)]=$R7_1;
 label=110;break;
 case 108: 
 _abort();
 throw "Reached an unreachable!";
 case 109: 
 _abort();
 throw "Reached an unreachable!";
 case 110: 
 var $368=$221|1;
 var $369=(($p_0+4)|0);
 HEAP32[(($369)>>2)]=$368;
 var $370=(($188+$221)|0);
 var $371=$370;
 HEAP32[(($371)>>2)]=$221;
 var $372=HEAP32[((76788)>>2)];
 var $373=($p_0|0)==($372|0);
 if($373){label=111;break;}else{var $psize_1=$221;label=113;break;}
 case 111: 
 HEAP32[((76776)>>2)]=$221;
 label=141;break;
 case 112: 
 var $376=$193&-2;
 HEAP32[(($192)>>2)]=$376;
 var $377=$psize_0|1;
 var $378=(($p_0+4)|0);
 HEAP32[(($378)>>2)]=$377;
 var $379=(($188+$psize_0)|0);
 var $380=$379;
 HEAP32[(($380)>>2)]=$psize_0;
 var $psize_1=$psize_0;label=113;break;
 case 113: 
 var $psize_1;
 var $382=$psize_1>>>3;
 var $383=($psize_1>>>0)<256;
 if($383){label=114;break;}else{label=119;break;}
 case 114: 
 var $385=$382<<1;
 var $386=((76808+($385<<2))|0);
 var $387=$386;
 var $388=HEAP32[((76768)>>2)];
 var $389=1<<$382;
 var $390=$388&$389;
 var $391=($390|0)==0;
 if($391){label=115;break;}else{label=116;break;}
 case 115: 
 var $393=$388|$389;
 HEAP32[((76768)>>2)]=$393;
 var $_sum19_pre=((($385)+(2))|0);
 var $_pre=((76808+($_sum19_pre<<2))|0);
 var $F16_0=$387;var $_pre_phi=$_pre;label=118;break;
 case 116: 
 var $_sum20=((($385)+(2))|0);
 var $395=((76808+($_sum20<<2))|0);
 var $396=HEAP32[(($395)>>2)];
 var $397=$396;
 var $398=HEAP32[((76784)>>2)];
 var $399=($397>>>0)<($398>>>0);
 if($399){label=117;break;}else{var $F16_0=$396;var $_pre_phi=$395;label=118;break;}
 case 117: 
 _abort();
 throw "Reached an unreachable!";
 case 118: 
 var $_pre_phi;
 var $F16_0;
 HEAP32[(($_pre_phi)>>2)]=$p_0;
 var $402=(($F16_0+12)|0);
 HEAP32[(($402)>>2)]=$p_0;
 var $403=(($p_0+8)|0);
 HEAP32[(($403)>>2)]=$F16_0;
 var $404=(($p_0+12)|0);
 HEAP32[(($404)>>2)]=$387;
 label=141;break;
 case 119: 
 var $406=$p_0;
 var $407=$psize_1>>>8;
 var $408=($407|0)==0;
 if($408){var $I18_0=0;label=122;break;}else{label=120;break;}
 case 120: 
 var $410=($psize_1>>>0)>16777215;
 if($410){var $I18_0=31;label=122;break;}else{label=121;break;}
 case 121: 
 var $412=((($407)+(1048320))|0);
 var $413=$412>>>16;
 var $414=$413&8;
 var $415=$407<<$414;
 var $416=((($415)+(520192))|0);
 var $417=$416>>>16;
 var $418=$417&4;
 var $419=$418|$414;
 var $420=$415<<$418;
 var $421=((($420)+(245760))|0);
 var $422=$421>>>16;
 var $423=$422&2;
 var $424=$419|$423;
 var $425=(((14)-($424))|0);
 var $426=$420<<$423;
 var $427=$426>>>15;
 var $428=((($425)+($427))|0);
 var $429=$428<<1;
 var $430=((($428)+(7))|0);
 var $431=$psize_1>>>($430>>>0);
 var $432=$431&1;
 var $433=$432|$429;
 var $I18_0=$433;label=122;break;
 case 122: 
 var $I18_0;
 var $435=((77072+($I18_0<<2))|0);
 var $436=(($p_0+28)|0);
 var $I18_0_c=$I18_0;
 HEAP32[(($436)>>2)]=$I18_0_c;
 var $437=(($p_0+20)|0);
 HEAP32[(($437)>>2)]=0;
 var $438=(($p_0+16)|0);
 HEAP32[(($438)>>2)]=0;
 var $439=HEAP32[((76772)>>2)];
 var $440=1<<$I18_0;
 var $441=$439&$440;
 var $442=($441|0)==0;
 if($442){label=123;break;}else{label=124;break;}
 case 123: 
 var $444=$439|$440;
 HEAP32[((76772)>>2)]=$444;
 HEAP32[(($435)>>2)]=$406;
 var $445=(($p_0+24)|0);
 var $_c=$435;
 HEAP32[(($445)>>2)]=$_c;
 var $446=(($p_0+12)|0);
 HEAP32[(($446)>>2)]=$p_0;
 var $447=(($p_0+8)|0);
 HEAP32[(($447)>>2)]=$p_0;
 label=137;break;
 case 124: 
 var $449=HEAP32[(($435)>>2)];
 var $450=($I18_0|0)==31;
 if($450){var $455=0;label=126;break;}else{label=125;break;}
 case 125: 
 var $452=$I18_0>>>1;
 var $453=(((25)-($452))|0);
 var $455=$453;label=126;break;
 case 126: 
 var $455;
 var $456=(($449+4)|0);
 var $457=HEAP32[(($456)>>2)];
 var $458=$457&-8;
 var $459=($458|0)==($psize_1|0);
 if($459){var $T_0_lcssa=$449;label=133;break;}else{label=127;break;}
 case 127: 
 var $460=$psize_1<<$455;
 var $T_071=$449;var $K19_072=$460;label=129;break;
 case 128: 
 var $462=$K19_072<<1;
 var $463=(($470+4)|0);
 var $464=HEAP32[(($463)>>2)];
 var $465=$464&-8;
 var $466=($465|0)==($psize_1|0);
 if($466){var $T_0_lcssa=$470;label=133;break;}else{var $T_071=$470;var $K19_072=$462;label=129;break;}
 case 129: 
 var $K19_072;
 var $T_071;
 var $468=$K19_072>>>31;
 var $469=(($T_071+16+($468<<2))|0);
 var $470=HEAP32[(($469)>>2)];
 var $471=($470|0)==0;
 if($471){label=130;break;}else{label=128;break;}
 case 130: 
 var $473=$469;
 var $474=HEAP32[((76784)>>2)];
 var $475=($473>>>0)<($474>>>0);
 if($475){label=132;break;}else{label=131;break;}
 case 131: 
 HEAP32[(($469)>>2)]=$406;
 var $477=(($p_0+24)|0);
 var $T_0_c16=$T_071;
 HEAP32[(($477)>>2)]=$T_0_c16;
 var $478=(($p_0+12)|0);
 HEAP32[(($478)>>2)]=$p_0;
 var $479=(($p_0+8)|0);
 HEAP32[(($479)>>2)]=$p_0;
 label=137;break;
 case 132: 
 _abort();
 throw "Reached an unreachable!";
 case 133: 
 var $T_0_lcssa;
 var $481=(($T_0_lcssa+8)|0);
 var $482=HEAP32[(($481)>>2)];
 var $483=$T_0_lcssa;
 var $484=HEAP32[((76784)>>2)];
 var $485=($483>>>0)<($484>>>0);
 if($485){label=136;break;}else{label=134;break;}
 case 134: 
 var $487=$482;
 var $488=($487>>>0)<($484>>>0);
 if($488){label=136;break;}else{label=135;break;}
 case 135: 
 var $490=(($482+12)|0);
 HEAP32[(($490)>>2)]=$406;
 HEAP32[(($481)>>2)]=$406;
 var $491=(($p_0+8)|0);
 var $_c15=$482;
 HEAP32[(($491)>>2)]=$_c15;
 var $492=(($p_0+12)|0);
 var $T_0_c=$T_0_lcssa;
 HEAP32[(($492)>>2)]=$T_0_c;
 var $493=(($p_0+24)|0);
 HEAP32[(($493)>>2)]=0;
 label=137;break;
 case 136: 
 _abort();
 throw "Reached an unreachable!";
 case 137: 
 var $495=HEAP32[((76800)>>2)];
 var $496=((($495)-(1))|0);
 HEAP32[((76800)>>2)]=$496;
 var $497=($496|0)==0;
 if($497){var $sp_0_in_i=77224;label=138;break;}else{label=141;break;}
 case 138: 
 var $sp_0_in_i;
 var $sp_0_i=HEAP32[(($sp_0_in_i)>>2)];
 var $498=($sp_0_i|0)==0;
 var $499=(($sp_0_i+8)|0);
 if($498){label=139;break;}else{var $sp_0_in_i=$499;label=138;break;}
 case 139: 
 HEAP32[((76800)>>2)]=-1;
 label=141;break;
 case 140: 
 _abort();
 throw "Reached an unreachable!";
 case 141: 
 return;
  default: assert(0, "bad label: " + label);
 }

}
Module["_free"] = _free;

function _realloc($oldmem,$bytes){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($oldmem|0)==0;
 if($1){label=2;break;}else{label=3;break;}
 case 2: 
 var $3=_malloc($bytes);
 var $mem_0=$3;label=11;break;
 case 3: 
 var $5=($bytes>>>0)>4294967231;
 if($5){label=4;break;}else{label=5;break;}
 case 4: 
 var $7=___errno_location();
 HEAP32[(($7)>>2)]=12;
 var $mem_0=0;label=11;break;
 case 5: 
 var $9=($bytes>>>0)<11;
 if($9){var $14=16;label=7;break;}else{label=6;break;}
 case 6: 
 var $11=((($bytes)+(11))|0);
 var $12=$11&-8;
 var $14=$12;label=7;break;
 case 7: 
 var $14;
 var $15=((($oldmem)-(8))|0);
 var $16=$15;
 var $17=_try_realloc_chunk($16,$14);
 var $18=($17|0)==0;
 if($18){label=9;break;}else{label=8;break;}
 case 8: 
 var $20=(($17+8)|0);
 var $21=$20;
 var $mem_0=$21;label=11;break;
 case 9: 
 var $23=_malloc($bytes);
 var $24=($23|0)==0;
 if($24){var $mem_0=0;label=11;break;}else{label=10;break;}
 case 10: 
 var $26=((($oldmem)-(4))|0);
 var $27=$26;
 var $28=HEAP32[(($27)>>2)];
 var $29=$28&-8;
 var $30=$28&3;
 var $31=($30|0)==0;
 var $32=($31?8:4);
 var $33=((($29)-($32))|0);
 var $34=($33>>>0)<($bytes>>>0);
 var $35=($34?$33:$bytes);
 assert($35 % 1 === 0);(_memcpy($23, $oldmem, $35)|0);
 _free($oldmem);
 var $mem_0=$23;label=11;break;
 case 11: 
 var $mem_0;
 return $mem_0;
  default: assert(0, "bad label: " + label);
 }

}
Module["_realloc"] = _realloc;

function _try_realloc_chunk($p,$nb){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($p+4)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=$2&-8;
 var $4=$p;
 var $5=(($4+$3)|0);
 var $6=$5;
 var $7=HEAP32[((76784)>>2)];
 var $8=($4>>>0)<($7>>>0);
 if($8){label=72;break;}else{label=2;break;}
 case 2: 
 var $10=$2&3;
 var $11=($10|0)!=1;
 var $12=($4>>>0)<($5>>>0);
 var $or_cond=$11&$12;
 if($or_cond){label=3;break;}else{label=72;break;}
 case 3: 
 var $_sum3334=$3|4;
 var $14=(($4+$_sum3334)|0);
 var $15=$14;
 var $16=HEAP32[(($15)>>2)];
 var $17=$16&1;
 var $phitmp=($17|0)==0;
 if($phitmp){label=72;break;}else{label=4;break;}
 case 4: 
 var $19=($10|0)==0;
 if($19){label=5;break;}else{label=9;break;}
 case 5: 
 var $21=($nb>>>0)<256;
 if($21){var $newp_0=0;label=73;break;}else{label=6;break;}
 case 6: 
 var $23=((($nb)+(4))|0);
 var $24=($3>>>0)<($23>>>0);
 if($24){label=8;break;}else{label=7;break;}
 case 7: 
 var $26=((($3)-($nb))|0);
 var $27=HEAP32[((10656)>>2)];
 var $28=$27<<1;
 var $29=($26>>>0)>($28>>>0);
 if($29){label=8;break;}else{var $newp_0=$p;label=73;break;}
 case 8: 
 var $newp_0=0;label=73;break;
 case 9: 
 var $32=($3>>>0)<($nb>>>0);
 if($32){label=12;break;}else{label=10;break;}
 case 10: 
 var $34=((($3)-($nb))|0);
 var $35=($34>>>0)>15;
 if($35){label=11;break;}else{var $newp_0=$p;label=73;break;}
 case 11: 
 var $37=(($4+$nb)|0);
 var $38=$37;
 var $39=$2&1;
 var $40=$39|$nb;
 var $41=$40|2;
 HEAP32[(($1)>>2)]=$41;
 var $_sum29=((($nb)+(4))|0);
 var $42=(($4+$_sum29)|0);
 var $43=$42;
 var $44=$34|3;
 HEAP32[(($43)>>2)]=$44;
 var $45=HEAP32[(($15)>>2)];
 var $46=$45|1;
 HEAP32[(($15)>>2)]=$46;
 _dispose_chunk($38,$34);
 var $newp_0=$p;label=73;break;
 case 12: 
 var $48=HEAP32[((76792)>>2)];
 var $49=($6|0)==($48|0);
 if($49){label=13;break;}else{label=15;break;}
 case 13: 
 var $51=HEAP32[((76780)>>2)];
 var $52=((($51)+($3))|0);
 var $53=($52>>>0)>($nb>>>0);
 if($53){label=14;break;}else{var $newp_0=0;label=73;break;}
 case 14: 
 var $55=((($52)-($nb))|0);
 var $56=(($4+$nb)|0);
 var $57=$56;
 var $58=$2&1;
 var $59=$58|$nb;
 var $60=$59|2;
 HEAP32[(($1)>>2)]=$60;
 var $_sum28=((($nb)+(4))|0);
 var $61=(($4+$_sum28)|0);
 var $62=$61;
 var $63=$55|1;
 HEAP32[(($62)>>2)]=$63;
 HEAP32[((76792)>>2)]=$57;
 HEAP32[((76780)>>2)]=$55;
 var $newp_0=$p;label=73;break;
 case 15: 
 var $65=HEAP32[((76788)>>2)];
 var $66=($6|0)==($65|0);
 if($66){label=16;break;}else{label=21;break;}
 case 16: 
 var $68=HEAP32[((76776)>>2)];
 var $69=((($68)+($3))|0);
 var $70=($69>>>0)<($nb>>>0);
 if($70){var $newp_0=0;label=73;break;}else{label=17;break;}
 case 17: 
 var $72=((($69)-($nb))|0);
 var $73=($72>>>0)>15;
 if($73){label=18;break;}else{label=19;break;}
 case 18: 
 var $75=(($4+$nb)|0);
 var $76=$75;
 var $77=(($4+$69)|0);
 var $78=$2&1;
 var $79=$78|$nb;
 var $80=$79|2;
 HEAP32[(($1)>>2)]=$80;
 var $_sum25=((($nb)+(4))|0);
 var $81=(($4+$_sum25)|0);
 var $82=$81;
 var $83=$72|1;
 HEAP32[(($82)>>2)]=$83;
 var $84=$77;
 HEAP32[(($84)>>2)]=$72;
 var $_sum26=((($69)+(4))|0);
 var $85=(($4+$_sum26)|0);
 var $86=$85;
 var $87=HEAP32[(($86)>>2)];
 var $88=$87&-2;
 HEAP32[(($86)>>2)]=$88;
 var $storemerge=$76;var $storemerge27=$72;label=20;break;
 case 19: 
 var $90=$2&1;
 var $91=$90|$69;
 var $92=$91|2;
 HEAP32[(($1)>>2)]=$92;
 var $_sum23=((($69)+(4))|0);
 var $93=(($4+$_sum23)|0);
 var $94=$93;
 var $95=HEAP32[(($94)>>2)];
 var $96=$95|1;
 HEAP32[(($94)>>2)]=$96;
 var $storemerge=0;var $storemerge27=0;label=20;break;
 case 20: 
 var $storemerge27;
 var $storemerge;
 HEAP32[((76776)>>2)]=$storemerge27;
 HEAP32[((76788)>>2)]=$storemerge;
 var $newp_0=$p;label=73;break;
 case 21: 
 var $99=$16&2;
 var $100=($99|0)==0;
 if($100){label=22;break;}else{var $newp_0=0;label=73;break;}
 case 22: 
 var $102=$16&-8;
 var $103=((($102)+($3))|0);
 var $104=($103>>>0)<($nb>>>0);
 if($104){var $newp_0=0;label=73;break;}else{label=23;break;}
 case 23: 
 var $106=((($103)-($nb))|0);
 var $107=$16>>>3;
 var $108=($16>>>0)<256;
 if($108){label=24;break;}else{label=36;break;}
 case 24: 
 var $_sum17=((($3)+(8))|0);
 var $110=(($4+$_sum17)|0);
 var $111=$110;
 var $112=HEAP32[(($111)>>2)];
 var $_sum18=((($3)+(12))|0);
 var $113=(($4+$_sum18)|0);
 var $114=$113;
 var $115=HEAP32[(($114)>>2)];
 var $116=$107<<1;
 var $117=((76808+($116<<2))|0);
 var $118=$117;
 var $119=($112|0)==($118|0);
 if($119){label=27;break;}else{label=25;break;}
 case 25: 
 var $121=$112;
 var $122=($121>>>0)<($7>>>0);
 if($122){label=35;break;}else{label=26;break;}
 case 26: 
 var $124=(($112+12)|0);
 var $125=HEAP32[(($124)>>2)];
 var $126=($125|0)==($6|0);
 if($126){label=27;break;}else{label=35;break;}
 case 27: 
 var $127=($115|0)==($112|0);
 if($127){label=28;break;}else{label=29;break;}
 case 28: 
 var $129=1<<$107;
 var $130=$129^-1;
 var $131=HEAP32[((76768)>>2)];
 var $132=$131&$130;
 HEAP32[((76768)>>2)]=$132;
 label=69;break;
 case 29: 
 var $134=($115|0)==($118|0);
 if($134){label=30;break;}else{label=31;break;}
 case 30: 
 var $_pre=(($115+8)|0);
 var $_pre_phi=$_pre;label=33;break;
 case 31: 
 var $136=$115;
 var $137=($136>>>0)<($7>>>0);
 if($137){label=34;break;}else{label=32;break;}
 case 32: 
 var $139=(($115+8)|0);
 var $140=HEAP32[(($139)>>2)];
 var $141=($140|0)==($6|0);
 if($141){var $_pre_phi=$139;label=33;break;}else{label=34;break;}
 case 33: 
 var $_pre_phi;
 var $142=(($112+12)|0);
 HEAP32[(($142)>>2)]=$115;
 HEAP32[(($_pre_phi)>>2)]=$112;
 label=69;break;
 case 34: 
 _abort();
 throw "Reached an unreachable!";
 case 35: 
 _abort();
 throw "Reached an unreachable!";
 case 36: 
 var $144=$5;
 var $_sum=((($3)+(24))|0);
 var $145=(($4+$_sum)|0);
 var $146=$145;
 var $147=HEAP32[(($146)>>2)];
 var $_sum2=((($3)+(12))|0);
 var $148=(($4+$_sum2)|0);
 var $149=$148;
 var $150=HEAP32[(($149)>>2)];
 var $151=($150|0)==($144|0);
 if($151){label=42;break;}else{label=37;break;}
 case 37: 
 var $_sum14=((($3)+(8))|0);
 var $153=(($4+$_sum14)|0);
 var $154=$153;
 var $155=HEAP32[(($154)>>2)];
 var $156=$155;
 var $157=($156>>>0)<($7>>>0);
 if($157){label=41;break;}else{label=38;break;}
 case 38: 
 var $159=(($155+12)|0);
 var $160=HEAP32[(($159)>>2)];
 var $161=($160|0)==($144|0);
 if($161){label=39;break;}else{label=41;break;}
 case 39: 
 var $163=(($150+8)|0);
 var $164=HEAP32[(($163)>>2)];
 var $165=($164|0)==($144|0);
 if($165){label=40;break;}else{label=41;break;}
 case 40: 
 HEAP32[(($159)>>2)]=$150;
 HEAP32[(($163)>>2)]=$155;
 var $R_1=$150;label=49;break;
 case 41: 
 _abort();
 throw "Reached an unreachable!";
 case 42: 
 var $_sum4=((($3)+(20))|0);
 var $168=(($4+$_sum4)|0);
 var $169=$168;
 var $170=HEAP32[(($169)>>2)];
 var $171=($170|0)==0;
 if($171){label=43;break;}else{var $R_0=$170;var $RP_0=$169;label=44;break;}
 case 43: 
 var $_sum3=((($3)+(16))|0);
 var $173=(($4+$_sum3)|0);
 var $174=$173;
 var $175=HEAP32[(($174)>>2)];
 var $176=($175|0)==0;
 if($176){var $R_1=0;label=49;break;}else{var $R_0=$175;var $RP_0=$174;label=44;break;}
 case 44: 
 var $RP_0;
 var $R_0;
 var $177=(($R_0+20)|0);
 var $178=HEAP32[(($177)>>2)];
 var $179=($178|0)==0;
 if($179){label=45;break;}else{var $R_0=$178;var $RP_0=$177;label=44;break;}
 case 45: 
 var $181=(($R_0+16)|0);
 var $182=HEAP32[(($181)>>2)];
 var $183=($182|0)==0;
 if($183){label=46;break;}else{var $R_0=$182;var $RP_0=$181;label=44;break;}
 case 46: 
 var $185=$RP_0;
 var $186=($185>>>0)<($7>>>0);
 if($186){label=48;break;}else{label=47;break;}
 case 47: 
 HEAP32[(($RP_0)>>2)]=0;
 var $R_1=$R_0;label=49;break;
 case 48: 
 _abort();
 throw "Reached an unreachable!";
 case 49: 
 var $R_1;
 var $190=($147|0)==0;
 if($190){label=69;break;}else{label=50;break;}
 case 50: 
 var $_sum11=((($3)+(28))|0);
 var $192=(($4+$_sum11)|0);
 var $193=$192;
 var $194=HEAP32[(($193)>>2)];
 var $195=((77072+($194<<2))|0);
 var $196=HEAP32[(($195)>>2)];
 var $197=($144|0)==($196|0);
 if($197){label=51;break;}else{label=53;break;}
 case 51: 
 HEAP32[(($195)>>2)]=$R_1;
 var $cond=($R_1|0)==0;
 if($cond){label=52;break;}else{label=59;break;}
 case 52: 
 var $199=1<<$194;
 var $200=$199^-1;
 var $201=HEAP32[((76772)>>2)];
 var $202=$201&$200;
 HEAP32[((76772)>>2)]=$202;
 label=69;break;
 case 53: 
 var $204=$147;
 var $205=HEAP32[((76784)>>2)];
 var $206=($204>>>0)<($205>>>0);
 if($206){label=57;break;}else{label=54;break;}
 case 54: 
 var $208=(($147+16)|0);
 var $209=HEAP32[(($208)>>2)];
 var $210=($209|0)==($144|0);
 if($210){label=55;break;}else{label=56;break;}
 case 55: 
 HEAP32[(($208)>>2)]=$R_1;
 label=58;break;
 case 56: 
 var $213=(($147+20)|0);
 HEAP32[(($213)>>2)]=$R_1;
 label=58;break;
 case 57: 
 _abort();
 throw "Reached an unreachable!";
 case 58: 
 var $216=($R_1|0)==0;
 if($216){label=69;break;}else{label=59;break;}
 case 59: 
 var $218=$R_1;
 var $219=HEAP32[((76784)>>2)];
 var $220=($218>>>0)<($219>>>0);
 if($220){label=68;break;}else{label=60;break;}
 case 60: 
 var $222=(($R_1+24)|0);
 HEAP32[(($222)>>2)]=$147;
 var $_sum12=((($3)+(16))|0);
 var $223=(($4+$_sum12)|0);
 var $224=$223;
 var $225=HEAP32[(($224)>>2)];
 var $226=($225|0)==0;
 if($226){label=64;break;}else{label=61;break;}
 case 61: 
 var $228=$225;
 var $229=HEAP32[((76784)>>2)];
 var $230=($228>>>0)<($229>>>0);
 if($230){label=63;break;}else{label=62;break;}
 case 62: 
 var $232=(($R_1+16)|0);
 HEAP32[(($232)>>2)]=$225;
 var $233=(($225+24)|0);
 HEAP32[(($233)>>2)]=$R_1;
 label=64;break;
 case 63: 
 _abort();
 throw "Reached an unreachable!";
 case 64: 
 var $_sum13=((($3)+(20))|0);
 var $236=(($4+$_sum13)|0);
 var $237=$236;
 var $238=HEAP32[(($237)>>2)];
 var $239=($238|0)==0;
 if($239){label=69;break;}else{label=65;break;}
 case 65: 
 var $241=$238;
 var $242=HEAP32[((76784)>>2)];
 var $243=($241>>>0)<($242>>>0);
 if($243){label=67;break;}else{label=66;break;}
 case 66: 
 var $245=(($R_1+20)|0);
 HEAP32[(($245)>>2)]=$238;
 var $246=(($238+24)|0);
 HEAP32[(($246)>>2)]=$R_1;
 label=69;break;
 case 67: 
 _abort();
 throw "Reached an unreachable!";
 case 68: 
 _abort();
 throw "Reached an unreachable!";
 case 69: 
 var $250=($106>>>0)<16;
 if($250){label=70;break;}else{label=71;break;}
 case 70: 
 var $252=HEAP32[(($1)>>2)];
 var $253=$252&1;
 var $254=$103|$253;
 var $255=$254|2;
 HEAP32[(($1)>>2)]=$255;
 var $_sum910=$103|4;
 var $256=(($4+$_sum910)|0);
 var $257=$256;
 var $258=HEAP32[(($257)>>2)];
 var $259=$258|1;
 HEAP32[(($257)>>2)]=$259;
 var $newp_0=$p;label=73;break;
 case 71: 
 var $261=(($4+$nb)|0);
 var $262=$261;
 var $263=HEAP32[(($1)>>2)];
 var $264=$263&1;
 var $265=$264|$nb;
 var $266=$265|2;
 HEAP32[(($1)>>2)]=$266;
 var $_sum5=((($nb)+(4))|0);
 var $267=(($4+$_sum5)|0);
 var $268=$267;
 var $269=$106|3;
 HEAP32[(($268)>>2)]=$269;
 var $_sum78=$103|4;
 var $270=(($4+$_sum78)|0);
 var $271=$270;
 var $272=HEAP32[(($271)>>2)];
 var $273=$272|1;
 HEAP32[(($271)>>2)]=$273;
 _dispose_chunk($262,$106);
 var $newp_0=$p;label=73;break;
 case 72: 
 _abort();
 throw "Reached an unreachable!";
 case 73: 
 var $newp_0;
 return $newp_0;
  default: assert(0, "bad label: " + label);
 }

}


function _dispose_chunk($p,$psize){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=$p;
 var $2=(($1+$psize)|0);
 var $3=$2;
 var $4=(($p+4)|0);
 var $5=HEAP32[(($4)>>2)];
 var $6=$5&1;
 var $7=($6|0)==0;
 if($7){label=2;break;}else{var $_0=$p;var $_02=$psize;label=54;break;}
 case 2: 
 var $9=(($p)|0);
 var $10=HEAP32[(($9)>>2)];
 var $11=$5&3;
 var $12=($11|0)==0;
 if($12){label=135;break;}else{label=3;break;}
 case 3: 
 var $14=(((-$10))|0);
 var $15=(($1+$14)|0);
 var $16=$15;
 var $17=((($10)+($psize))|0);
 var $18=HEAP32[((76784)>>2)];
 var $19=($15>>>0)<($18>>>0);
 if($19){label=53;break;}else{label=4;break;}
 case 4: 
 var $21=HEAP32[((76788)>>2)];
 var $22=($16|0)==($21|0);
 if($22){label=51;break;}else{label=5;break;}
 case 5: 
 var $24=$10>>>3;
 var $25=($10>>>0)<256;
 if($25){label=6;break;}else{label=18;break;}
 case 6: 
 var $_sum35=(((8)-($10))|0);
 var $27=(($1+$_sum35)|0);
 var $28=$27;
 var $29=HEAP32[(($28)>>2)];
 var $_sum36=(((12)-($10))|0);
 var $30=(($1+$_sum36)|0);
 var $31=$30;
 var $32=HEAP32[(($31)>>2)];
 var $33=$24<<1;
 var $34=((76808+($33<<2))|0);
 var $35=$34;
 var $36=($29|0)==($35|0);
 if($36){label=9;break;}else{label=7;break;}
 case 7: 
 var $38=$29;
 var $39=($38>>>0)<($18>>>0);
 if($39){label=17;break;}else{label=8;break;}
 case 8: 
 var $41=(($29+12)|0);
 var $42=HEAP32[(($41)>>2)];
 var $43=($42|0)==($16|0);
 if($43){label=9;break;}else{label=17;break;}
 case 9: 
 var $44=($32|0)==($29|0);
 if($44){label=10;break;}else{label=11;break;}
 case 10: 
 var $46=1<<$24;
 var $47=$46^-1;
 var $48=HEAP32[((76768)>>2)];
 var $49=$48&$47;
 HEAP32[((76768)>>2)]=$49;
 var $_0=$16;var $_02=$17;label=54;break;
 case 11: 
 var $51=($32|0)==($35|0);
 if($51){label=12;break;}else{label=13;break;}
 case 12: 
 var $_pre71=(($32+8)|0);
 var $_pre_phi72=$_pre71;label=15;break;
 case 13: 
 var $53=$32;
 var $54=($53>>>0)<($18>>>0);
 if($54){label=16;break;}else{label=14;break;}
 case 14: 
 var $56=(($32+8)|0);
 var $57=HEAP32[(($56)>>2)];
 var $58=($57|0)==($16|0);
 if($58){var $_pre_phi72=$56;label=15;break;}else{label=16;break;}
 case 15: 
 var $_pre_phi72;
 var $59=(($29+12)|0);
 HEAP32[(($59)>>2)]=$32;
 HEAP32[(($_pre_phi72)>>2)]=$29;
 var $_0=$16;var $_02=$17;label=54;break;
 case 16: 
 _abort();
 throw "Reached an unreachable!";
 case 17: 
 _abort();
 throw "Reached an unreachable!";
 case 18: 
 var $61=$15;
 var $_sum26=(((24)-($10))|0);
 var $62=(($1+$_sum26)|0);
 var $63=$62;
 var $64=HEAP32[(($63)>>2)];
 var $_sum27=(((12)-($10))|0);
 var $65=(($1+$_sum27)|0);
 var $66=$65;
 var $67=HEAP32[(($66)>>2)];
 var $68=($67|0)==($61|0);
 if($68){label=24;break;}else{label=19;break;}
 case 19: 
 var $_sum33=(((8)-($10))|0);
 var $70=(($1+$_sum33)|0);
 var $71=$70;
 var $72=HEAP32[(($71)>>2)];
 var $73=$72;
 var $74=($73>>>0)<($18>>>0);
 if($74){label=23;break;}else{label=20;break;}
 case 20: 
 var $76=(($72+12)|0);
 var $77=HEAP32[(($76)>>2)];
 var $78=($77|0)==($61|0);
 if($78){label=21;break;}else{label=23;break;}
 case 21: 
 var $80=(($67+8)|0);
 var $81=HEAP32[(($80)>>2)];
 var $82=($81|0)==($61|0);
 if($82){label=22;break;}else{label=23;break;}
 case 22: 
 HEAP32[(($76)>>2)]=$67;
 HEAP32[(($80)>>2)]=$72;
 var $R_1=$67;label=31;break;
 case 23: 
 _abort();
 throw "Reached an unreachable!";
 case 24: 
 var $_sum28=(((16)-($10))|0);
 var $_sum29=((($_sum28)+(4))|0);
 var $85=(($1+$_sum29)|0);
 var $86=$85;
 var $87=HEAP32[(($86)>>2)];
 var $88=($87|0)==0;
 if($88){label=25;break;}else{var $R_0=$87;var $RP_0=$86;label=26;break;}
 case 25: 
 var $90=(($1+$_sum28)|0);
 var $91=$90;
 var $92=HEAP32[(($91)>>2)];
 var $93=($92|0)==0;
 if($93){var $R_1=0;label=31;break;}else{var $R_0=$92;var $RP_0=$91;label=26;break;}
 case 26: 
 var $RP_0;
 var $R_0;
 var $94=(($R_0+20)|0);
 var $95=HEAP32[(($94)>>2)];
 var $96=($95|0)==0;
 if($96){label=27;break;}else{var $R_0=$95;var $RP_0=$94;label=26;break;}
 case 27: 
 var $98=(($R_0+16)|0);
 var $99=HEAP32[(($98)>>2)];
 var $100=($99|0)==0;
 if($100){label=28;break;}else{var $R_0=$99;var $RP_0=$98;label=26;break;}
 case 28: 
 var $102=$RP_0;
 var $103=($102>>>0)<($18>>>0);
 if($103){label=30;break;}else{label=29;break;}
 case 29: 
 HEAP32[(($RP_0)>>2)]=0;
 var $R_1=$R_0;label=31;break;
 case 30: 
 _abort();
 throw "Reached an unreachable!";
 case 31: 
 var $R_1;
 var $107=($64|0)==0;
 if($107){var $_0=$16;var $_02=$17;label=54;break;}else{label=32;break;}
 case 32: 
 var $_sum30=(((28)-($10))|0);
 var $109=(($1+$_sum30)|0);
 var $110=$109;
 var $111=HEAP32[(($110)>>2)];
 var $112=((77072+($111<<2))|0);
 var $113=HEAP32[(($112)>>2)];
 var $114=($61|0)==($113|0);
 if($114){label=33;break;}else{label=35;break;}
 case 33: 
 HEAP32[(($112)>>2)]=$R_1;
 var $cond=($R_1|0)==0;
 if($cond){label=34;break;}else{label=41;break;}
 case 34: 
 var $116=1<<$111;
 var $117=$116^-1;
 var $118=HEAP32[((76772)>>2)];
 var $119=$118&$117;
 HEAP32[((76772)>>2)]=$119;
 var $_0=$16;var $_02=$17;label=54;break;
 case 35: 
 var $121=$64;
 var $122=HEAP32[((76784)>>2)];
 var $123=($121>>>0)<($122>>>0);
 if($123){label=39;break;}else{label=36;break;}
 case 36: 
 var $125=(($64+16)|0);
 var $126=HEAP32[(($125)>>2)];
 var $127=($126|0)==($61|0);
 if($127){label=37;break;}else{label=38;break;}
 case 37: 
 HEAP32[(($125)>>2)]=$R_1;
 label=40;break;
 case 38: 
 var $130=(($64+20)|0);
 HEAP32[(($130)>>2)]=$R_1;
 label=40;break;
 case 39: 
 _abort();
 throw "Reached an unreachable!";
 case 40: 
 var $133=($R_1|0)==0;
 if($133){var $_0=$16;var $_02=$17;label=54;break;}else{label=41;break;}
 case 41: 
 var $135=$R_1;
 var $136=HEAP32[((76784)>>2)];
 var $137=($135>>>0)<($136>>>0);
 if($137){label=50;break;}else{label=42;break;}
 case 42: 
 var $139=(($R_1+24)|0);
 HEAP32[(($139)>>2)]=$64;
 var $_sum31=(((16)-($10))|0);
 var $140=(($1+$_sum31)|0);
 var $141=$140;
 var $142=HEAP32[(($141)>>2)];
 var $143=($142|0)==0;
 if($143){label=46;break;}else{label=43;break;}
 case 43: 
 var $145=$142;
 var $146=HEAP32[((76784)>>2)];
 var $147=($145>>>0)<($146>>>0);
 if($147){label=45;break;}else{label=44;break;}
 case 44: 
 var $149=(($R_1+16)|0);
 HEAP32[(($149)>>2)]=$142;
 var $150=(($142+24)|0);
 HEAP32[(($150)>>2)]=$R_1;
 label=46;break;
 case 45: 
 _abort();
 throw "Reached an unreachable!";
 case 46: 
 var $_sum32=((($_sum31)+(4))|0);
 var $153=(($1+$_sum32)|0);
 var $154=$153;
 var $155=HEAP32[(($154)>>2)];
 var $156=($155|0)==0;
 if($156){var $_0=$16;var $_02=$17;label=54;break;}else{label=47;break;}
 case 47: 
 var $158=$155;
 var $159=HEAP32[((76784)>>2)];
 var $160=($158>>>0)<($159>>>0);
 if($160){label=49;break;}else{label=48;break;}
 case 48: 
 var $162=(($R_1+20)|0);
 HEAP32[(($162)>>2)]=$155;
 var $163=(($155+24)|0);
 HEAP32[(($163)>>2)]=$R_1;
 var $_0=$16;var $_02=$17;label=54;break;
 case 49: 
 _abort();
 throw "Reached an unreachable!";
 case 50: 
 _abort();
 throw "Reached an unreachable!";
 case 51: 
 var $_sum=((($psize)+(4))|0);
 var $167=(($1+$_sum)|0);
 var $168=$167;
 var $169=HEAP32[(($168)>>2)];
 var $170=$169&3;
 var $171=($170|0)==3;
 if($171){label=52;break;}else{var $_0=$16;var $_02=$17;label=54;break;}
 case 52: 
 HEAP32[((76776)>>2)]=$17;
 var $173=HEAP32[(($168)>>2)];
 var $174=$173&-2;
 HEAP32[(($168)>>2)]=$174;
 var $175=$17|1;
 var $_sum24=(((4)-($10))|0);
 var $176=(($1+$_sum24)|0);
 var $177=$176;
 HEAP32[(($177)>>2)]=$175;
 var $178=$2;
 HEAP32[(($178)>>2)]=$17;
 label=135;break;
 case 53: 
 _abort();
 throw "Reached an unreachable!";
 case 54: 
 var $_02;
 var $_0;
 var $180=HEAP32[((76784)>>2)];
 var $181=($2>>>0)<($180>>>0);
 if($181){label=134;break;}else{label=55;break;}
 case 55: 
 var $_sum1=((($psize)+(4))|0);
 var $183=(($1+$_sum1)|0);
 var $184=$183;
 var $185=HEAP32[(($184)>>2)];
 var $186=$185&2;
 var $187=($186|0)==0;
 if($187){label=56;break;}else{label=109;break;}
 case 56: 
 var $189=HEAP32[((76792)>>2)];
 var $190=($3|0)==($189|0);
 if($190){label=57;break;}else{label=59;break;}
 case 57: 
 var $192=HEAP32[((76780)>>2)];
 var $193=((($192)+($_02))|0);
 HEAP32[((76780)>>2)]=$193;
 HEAP32[((76792)>>2)]=$_0;
 var $194=$193|1;
 var $195=(($_0+4)|0);
 HEAP32[(($195)>>2)]=$194;
 var $196=HEAP32[((76788)>>2)];
 var $197=($_0|0)==($196|0);
 if($197){label=58;break;}else{label=135;break;}
 case 58: 
 HEAP32[((76788)>>2)]=0;
 HEAP32[((76776)>>2)]=0;
 label=135;break;
 case 59: 
 var $200=HEAP32[((76788)>>2)];
 var $201=($3|0)==($200|0);
 if($201){label=60;break;}else{label=61;break;}
 case 60: 
 var $203=HEAP32[((76776)>>2)];
 var $204=((($203)+($_02))|0);
 HEAP32[((76776)>>2)]=$204;
 HEAP32[((76788)>>2)]=$_0;
 var $205=$204|1;
 var $206=(($_0+4)|0);
 HEAP32[(($206)>>2)]=$205;
 var $207=$_0;
 var $208=(($207+$204)|0);
 var $209=$208;
 HEAP32[(($209)>>2)]=$204;
 label=135;break;
 case 61: 
 var $211=$185&-8;
 var $212=((($211)+($_02))|0);
 var $213=$185>>>3;
 var $214=($185>>>0)<256;
 if($214){label=62;break;}else{label=74;break;}
 case 62: 
 var $_sum20=((($psize)+(8))|0);
 var $216=(($1+$_sum20)|0);
 var $217=$216;
 var $218=HEAP32[(($217)>>2)];
 var $_sum21=((($psize)+(12))|0);
 var $219=(($1+$_sum21)|0);
 var $220=$219;
 var $221=HEAP32[(($220)>>2)];
 var $222=$213<<1;
 var $223=((76808+($222<<2))|0);
 var $224=$223;
 var $225=($218|0)==($224|0);
 if($225){label=65;break;}else{label=63;break;}
 case 63: 
 var $227=$218;
 var $228=($227>>>0)<($180>>>0);
 if($228){label=73;break;}else{label=64;break;}
 case 64: 
 var $230=(($218+12)|0);
 var $231=HEAP32[(($230)>>2)];
 var $232=($231|0)==($3|0);
 if($232){label=65;break;}else{label=73;break;}
 case 65: 
 var $233=($221|0)==($218|0);
 if($233){label=66;break;}else{label=67;break;}
 case 66: 
 var $235=1<<$213;
 var $236=$235^-1;
 var $237=HEAP32[((76768)>>2)];
 var $238=$237&$236;
 HEAP32[((76768)>>2)]=$238;
 label=107;break;
 case 67: 
 var $240=($221|0)==($224|0);
 if($240){label=68;break;}else{label=69;break;}
 case 68: 
 var $_pre69=(($221+8)|0);
 var $_pre_phi70=$_pre69;label=71;break;
 case 69: 
 var $242=$221;
 var $243=($242>>>0)<($180>>>0);
 if($243){label=72;break;}else{label=70;break;}
 case 70: 
 var $245=(($221+8)|0);
 var $246=HEAP32[(($245)>>2)];
 var $247=($246|0)==($3|0);
 if($247){var $_pre_phi70=$245;label=71;break;}else{label=72;break;}
 case 71: 
 var $_pre_phi70;
 var $248=(($218+12)|0);
 HEAP32[(($248)>>2)]=$221;
 HEAP32[(($_pre_phi70)>>2)]=$218;
 label=107;break;
 case 72: 
 _abort();
 throw "Reached an unreachable!";
 case 73: 
 _abort();
 throw "Reached an unreachable!";
 case 74: 
 var $250=$2;
 var $_sum2=((($psize)+(24))|0);
 var $251=(($1+$_sum2)|0);
 var $252=$251;
 var $253=HEAP32[(($252)>>2)];
 var $_sum3=((($psize)+(12))|0);
 var $254=(($1+$_sum3)|0);
 var $255=$254;
 var $256=HEAP32[(($255)>>2)];
 var $257=($256|0)==($250|0);
 if($257){label=80;break;}else{label=75;break;}
 case 75: 
 var $_sum18=((($psize)+(8))|0);
 var $259=(($1+$_sum18)|0);
 var $260=$259;
 var $261=HEAP32[(($260)>>2)];
 var $262=$261;
 var $263=($262>>>0)<($180>>>0);
 if($263){label=79;break;}else{label=76;break;}
 case 76: 
 var $265=(($261+12)|0);
 var $266=HEAP32[(($265)>>2)];
 var $267=($266|0)==($250|0);
 if($267){label=77;break;}else{label=79;break;}
 case 77: 
 var $269=(($256+8)|0);
 var $270=HEAP32[(($269)>>2)];
 var $271=($270|0)==($250|0);
 if($271){label=78;break;}else{label=79;break;}
 case 78: 
 HEAP32[(($265)>>2)]=$256;
 HEAP32[(($269)>>2)]=$261;
 var $R7_1=$256;label=87;break;
 case 79: 
 _abort();
 throw "Reached an unreachable!";
 case 80: 
 var $_sum5=((($psize)+(20))|0);
 var $274=(($1+$_sum5)|0);
 var $275=$274;
 var $276=HEAP32[(($275)>>2)];
 var $277=($276|0)==0;
 if($277){label=81;break;}else{var $R7_0=$276;var $RP9_0=$275;label=82;break;}
 case 81: 
 var $_sum4=((($psize)+(16))|0);
 var $279=(($1+$_sum4)|0);
 var $280=$279;
 var $281=HEAP32[(($280)>>2)];
 var $282=($281|0)==0;
 if($282){var $R7_1=0;label=87;break;}else{var $R7_0=$281;var $RP9_0=$280;label=82;break;}
 case 82: 
 var $RP9_0;
 var $R7_0;
 var $283=(($R7_0+20)|0);
 var $284=HEAP32[(($283)>>2)];
 var $285=($284|0)==0;
 if($285){label=83;break;}else{var $R7_0=$284;var $RP9_0=$283;label=82;break;}
 case 83: 
 var $287=(($R7_0+16)|0);
 var $288=HEAP32[(($287)>>2)];
 var $289=($288|0)==0;
 if($289){label=84;break;}else{var $R7_0=$288;var $RP9_0=$287;label=82;break;}
 case 84: 
 var $291=$RP9_0;
 var $292=($291>>>0)<($180>>>0);
 if($292){label=86;break;}else{label=85;break;}
 case 85: 
 HEAP32[(($RP9_0)>>2)]=0;
 var $R7_1=$R7_0;label=87;break;
 case 86: 
 _abort();
 throw "Reached an unreachable!";
 case 87: 
 var $R7_1;
 var $296=($253|0)==0;
 if($296){label=107;break;}else{label=88;break;}
 case 88: 
 var $_sum15=((($psize)+(28))|0);
 var $298=(($1+$_sum15)|0);
 var $299=$298;
 var $300=HEAP32[(($299)>>2)];
 var $301=((77072+($300<<2))|0);
 var $302=HEAP32[(($301)>>2)];
 var $303=($250|0)==($302|0);
 if($303){label=89;break;}else{label=91;break;}
 case 89: 
 HEAP32[(($301)>>2)]=$R7_1;
 var $cond53=($R7_1|0)==0;
 if($cond53){label=90;break;}else{label=97;break;}
 case 90: 
 var $305=1<<$300;
 var $306=$305^-1;
 var $307=HEAP32[((76772)>>2)];
 var $308=$307&$306;
 HEAP32[((76772)>>2)]=$308;
 label=107;break;
 case 91: 
 var $310=$253;
 var $311=HEAP32[((76784)>>2)];
 var $312=($310>>>0)<($311>>>0);
 if($312){label=95;break;}else{label=92;break;}
 case 92: 
 var $314=(($253+16)|0);
 var $315=HEAP32[(($314)>>2)];
 var $316=($315|0)==($250|0);
 if($316){label=93;break;}else{label=94;break;}
 case 93: 
 HEAP32[(($314)>>2)]=$R7_1;
 label=96;break;
 case 94: 
 var $319=(($253+20)|0);
 HEAP32[(($319)>>2)]=$R7_1;
 label=96;break;
 case 95: 
 _abort();
 throw "Reached an unreachable!";
 case 96: 
 var $322=($R7_1|0)==0;
 if($322){label=107;break;}else{label=97;break;}
 case 97: 
 var $324=$R7_1;
 var $325=HEAP32[((76784)>>2)];
 var $326=($324>>>0)<($325>>>0);
 if($326){label=106;break;}else{label=98;break;}
 case 98: 
 var $328=(($R7_1+24)|0);
 HEAP32[(($328)>>2)]=$253;
 var $_sum16=((($psize)+(16))|0);
 var $329=(($1+$_sum16)|0);
 var $330=$329;
 var $331=HEAP32[(($330)>>2)];
 var $332=($331|0)==0;
 if($332){label=102;break;}else{label=99;break;}
 case 99: 
 var $334=$331;
 var $335=HEAP32[((76784)>>2)];
 var $336=($334>>>0)<($335>>>0);
 if($336){label=101;break;}else{label=100;break;}
 case 100: 
 var $338=(($R7_1+16)|0);
 HEAP32[(($338)>>2)]=$331;
 var $339=(($331+24)|0);
 HEAP32[(($339)>>2)]=$R7_1;
 label=102;break;
 case 101: 
 _abort();
 throw "Reached an unreachable!";
 case 102: 
 var $_sum17=((($psize)+(20))|0);
 var $342=(($1+$_sum17)|0);
 var $343=$342;
 var $344=HEAP32[(($343)>>2)];
 var $345=($344|0)==0;
 if($345){label=107;break;}else{label=103;break;}
 case 103: 
 var $347=$344;
 var $348=HEAP32[((76784)>>2)];
 var $349=($347>>>0)<($348>>>0);
 if($349){label=105;break;}else{label=104;break;}
 case 104: 
 var $351=(($R7_1+20)|0);
 HEAP32[(($351)>>2)]=$344;
 var $352=(($344+24)|0);
 HEAP32[(($352)>>2)]=$R7_1;
 label=107;break;
 case 105: 
 _abort();
 throw "Reached an unreachable!";
 case 106: 
 _abort();
 throw "Reached an unreachable!";
 case 107: 
 var $355=$212|1;
 var $356=(($_0+4)|0);
 HEAP32[(($356)>>2)]=$355;
 var $357=$_0;
 var $358=(($357+$212)|0);
 var $359=$358;
 HEAP32[(($359)>>2)]=$212;
 var $360=HEAP32[((76788)>>2)];
 var $361=($_0|0)==($360|0);
 if($361){label=108;break;}else{var $_1=$212;label=110;break;}
 case 108: 
 HEAP32[((76776)>>2)]=$212;
 label=135;break;
 case 109: 
 var $364=$185&-2;
 HEAP32[(($184)>>2)]=$364;
 var $365=$_02|1;
 var $366=(($_0+4)|0);
 HEAP32[(($366)>>2)]=$365;
 var $367=$_0;
 var $368=(($367+$_02)|0);
 var $369=$368;
 HEAP32[(($369)>>2)]=$_02;
 var $_1=$_02;label=110;break;
 case 110: 
 var $_1;
 var $371=$_1>>>3;
 var $372=($_1>>>0)<256;
 if($372){label=111;break;}else{label=116;break;}
 case 111: 
 var $374=$371<<1;
 var $375=((76808+($374<<2))|0);
 var $376=$375;
 var $377=HEAP32[((76768)>>2)];
 var $378=1<<$371;
 var $379=$377&$378;
 var $380=($379|0)==0;
 if($380){label=112;break;}else{label=113;break;}
 case 112: 
 var $382=$377|$378;
 HEAP32[((76768)>>2)]=$382;
 var $_sum13_pre=((($374)+(2))|0);
 var $_pre=((76808+($_sum13_pre<<2))|0);
 var $F16_0=$376;var $_pre_phi=$_pre;label=115;break;
 case 113: 
 var $_sum14=((($374)+(2))|0);
 var $384=((76808+($_sum14<<2))|0);
 var $385=HEAP32[(($384)>>2)];
 var $386=$385;
 var $387=HEAP32[((76784)>>2)];
 var $388=($386>>>0)<($387>>>0);
 if($388){label=114;break;}else{var $F16_0=$385;var $_pre_phi=$384;label=115;break;}
 case 114: 
 _abort();
 throw "Reached an unreachable!";
 case 115: 
 var $_pre_phi;
 var $F16_0;
 HEAP32[(($_pre_phi)>>2)]=$_0;
 var $391=(($F16_0+12)|0);
 HEAP32[(($391)>>2)]=$_0;
 var $392=(($_0+8)|0);
 HEAP32[(($392)>>2)]=$F16_0;
 var $393=(($_0+12)|0);
 HEAP32[(($393)>>2)]=$376;
 label=135;break;
 case 116: 
 var $395=$_0;
 var $396=$_1>>>8;
 var $397=($396|0)==0;
 if($397){var $I19_0=0;label=119;break;}else{label=117;break;}
 case 117: 
 var $399=($_1>>>0)>16777215;
 if($399){var $I19_0=31;label=119;break;}else{label=118;break;}
 case 118: 
 var $401=((($396)+(1048320))|0);
 var $402=$401>>>16;
 var $403=$402&8;
 var $404=$396<<$403;
 var $405=((($404)+(520192))|0);
 var $406=$405>>>16;
 var $407=$406&4;
 var $408=$407|$403;
 var $409=$404<<$407;
 var $410=((($409)+(245760))|0);
 var $411=$410>>>16;
 var $412=$411&2;
 var $413=$408|$412;
 var $414=(((14)-($413))|0);
 var $415=$409<<$412;
 var $416=$415>>>15;
 var $417=((($414)+($416))|0);
 var $418=$417<<1;
 var $419=((($417)+(7))|0);
 var $420=$_1>>>($419>>>0);
 var $421=$420&1;
 var $422=$421|$418;
 var $I19_0=$422;label=119;break;
 case 119: 
 var $I19_0;
 var $424=((77072+($I19_0<<2))|0);
 var $425=(($_0+28)|0);
 var $I19_0_c=$I19_0;
 HEAP32[(($425)>>2)]=$I19_0_c;
 var $426=(($_0+20)|0);
 HEAP32[(($426)>>2)]=0;
 var $427=(($_0+16)|0);
 HEAP32[(($427)>>2)]=0;
 var $428=HEAP32[((76772)>>2)];
 var $429=1<<$I19_0;
 var $430=$428&$429;
 var $431=($430|0)==0;
 if($431){label=120;break;}else{label=121;break;}
 case 120: 
 var $433=$428|$429;
 HEAP32[((76772)>>2)]=$433;
 HEAP32[(($424)>>2)]=$395;
 var $434=(($_0+24)|0);
 var $_c=$424;
 HEAP32[(($434)>>2)]=$_c;
 var $435=(($_0+12)|0);
 HEAP32[(($435)>>2)]=$_0;
 var $436=(($_0+8)|0);
 HEAP32[(($436)>>2)]=$_0;
 label=135;break;
 case 121: 
 var $438=HEAP32[(($424)>>2)];
 var $439=($I19_0|0)==31;
 if($439){var $444=0;label=123;break;}else{label=122;break;}
 case 122: 
 var $441=$I19_0>>>1;
 var $442=(((25)-($441))|0);
 var $444=$442;label=123;break;
 case 123: 
 var $444;
 var $445=(($438+4)|0);
 var $446=HEAP32[(($445)>>2)];
 var $447=$446&-8;
 var $448=($447|0)==($_1|0);
 if($448){var $T_0_lcssa=$438;label=130;break;}else{label=124;break;}
 case 124: 
 var $449=$_1<<$444;
 var $T_055=$438;var $K20_056=$449;label=126;break;
 case 125: 
 var $451=$K20_056<<1;
 var $452=(($459+4)|0);
 var $453=HEAP32[(($452)>>2)];
 var $454=$453&-8;
 var $455=($454|0)==($_1|0);
 if($455){var $T_0_lcssa=$459;label=130;break;}else{var $T_055=$459;var $K20_056=$451;label=126;break;}
 case 126: 
 var $K20_056;
 var $T_055;
 var $457=$K20_056>>>31;
 var $458=(($T_055+16+($457<<2))|0);
 var $459=HEAP32[(($458)>>2)];
 var $460=($459|0)==0;
 if($460){label=127;break;}else{label=125;break;}
 case 127: 
 var $462=$458;
 var $463=HEAP32[((76784)>>2)];
 var $464=($462>>>0)<($463>>>0);
 if($464){label=129;break;}else{label=128;break;}
 case 128: 
 HEAP32[(($458)>>2)]=$395;
 var $466=(($_0+24)|0);
 var $T_0_c10=$T_055;
 HEAP32[(($466)>>2)]=$T_0_c10;
 var $467=(($_0+12)|0);
 HEAP32[(($467)>>2)]=$_0;
 var $468=(($_0+8)|0);
 HEAP32[(($468)>>2)]=$_0;
 label=135;break;
 case 129: 
 _abort();
 throw "Reached an unreachable!";
 case 130: 
 var $T_0_lcssa;
 var $470=(($T_0_lcssa+8)|0);
 var $471=HEAP32[(($470)>>2)];
 var $472=$T_0_lcssa;
 var $473=HEAP32[((76784)>>2)];
 var $474=($472>>>0)<($473>>>0);
 if($474){label=133;break;}else{label=131;break;}
 case 131: 
 var $476=$471;
 var $477=($476>>>0)<($473>>>0);
 if($477){label=133;break;}else{label=132;break;}
 case 132: 
 var $479=(($471+12)|0);
 HEAP32[(($479)>>2)]=$395;
 HEAP32[(($470)>>2)]=$395;
 var $480=(($_0+8)|0);
 var $_c9=$471;
 HEAP32[(($480)>>2)]=$_c9;
 var $481=(($_0+12)|0);
 var $T_0_c=$T_0_lcssa;
 HEAP32[(($481)>>2)]=$T_0_c;
 var $482=(($_0+24)|0);
 HEAP32[(($482)>>2)]=0;
 label=135;break;
 case 133: 
 _abort();
 throw "Reached an unreachable!";
 case 134: 
 _abort();
 throw "Reached an unreachable!";
 case 135: 
 return;
  default: assert(0, "bad label: " + label);
 }

}


function _isspace($c){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($c|0)==32;
 if($1){var $6=1;label=3;break;}else{label=2;break;}
 case 2: 
 var $3=((($c)-(9))|0);
 var $4=($3>>>0)<5;
 var $phitmp=($4&1);
 var $6=$phitmp;label=3;break;
 case 3: 
 var $6;
 return $6;
  default: assert(0, "bad label: " + label);
 }

}


function ___intscan($f,$base,$pok,$lim$0,$lim$1){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($base>>>0)>36;
 if($1){label=3;break;}else{label=2;break;}
 case 2: 
 var $2=(($f+4)|0);
 var $3=(($f+100)|0);
 label=4;break;
 case 3: 
 var $5=___errno_location();
 HEAP32[(($5)>>2)]=22;
 var $_0$1=0;var $_0$0=0;label=87;break;
 case 4: 
 var $7=HEAP32[(($2)>>2)];
 var $8=HEAP32[(($3)>>2)];
 var $9=($7>>>0)<($8>>>0);
 if($9){label=5;break;}else{label=6;break;}
 case 5: 
 var $11=(($7+1)|0);
 HEAP32[(($2)>>2)]=$11;
 var $12=HEAP8[(($7)>>0)];
 var $13=($12&255);
 var $17=$13;label=7;break;
 case 6: 
 var $15=___shgetc($f);
 var $17=$15;label=7;break;
 case 7: 
 var $17;
 var $18=_isspace($17);
 var $19=($18|0)==0;
 if($19){label=8;break;}else{label=4;break;}
 case 8: 
 var $21=($17|0)==45;
 if(($17|0)==45|($17|0)==43){ label=9;break;}else{var $neg_0=0;var $c_0=$17;label=12;break;}
 case 9: 
 var $23=(($21<<31)>>31);
 var $24=HEAP32[(($2)>>2)];
 var $25=HEAP32[(($3)>>2)];
 var $26=($24>>>0)<($25>>>0);
 if($26){label=10;break;}else{label=11;break;}
 case 10: 
 var $28=(($24+1)|0);
 HEAP32[(($2)>>2)]=$28;
 var $29=HEAP8[(($24)>>0)];
 var $30=($29&255);
 var $neg_0=$23;var $c_0=$30;label=12;break;
 case 11: 
 var $32=___shgetc($f);
 var $neg_0=$23;var $c_0=$32;label=12;break;
 case 12: 
 var $c_0;
 var $neg_0;
 var $34=($base|0)==0;
 var $35=$base&-17;
 var $36=($35|0)==0;
 var $37=($c_0|0)==48;
 var $or_cond=$36&$37;
 if($or_cond){label=13;break;}else{label=28;break;}
 case 13: 
 var $39=HEAP32[(($2)>>2)];
 var $40=HEAP32[(($3)>>2)];
 var $41=($39>>>0)<($40>>>0);
 if($41){label=14;break;}else{label=15;break;}
 case 14: 
 var $43=(($39+1)|0);
 HEAP32[(($2)>>2)]=$43;
 var $44=HEAP8[(($39)>>0)];
 var $45=($44&255);
 var $49=$45;label=16;break;
 case 15: 
 var $47=___shgetc($f);
 var $49=$47;label=16;break;
 case 16: 
 var $49;
 var $50=$49|32;
 var $51=($50|0)==120;
 if($51){label=17;break;}else{label=27;break;}
 case 17: 
 var $53=HEAP32[(($2)>>2)];
 var $54=HEAP32[(($3)>>2)];
 var $55=($53>>>0)<($54>>>0);
 if($55){label=18;break;}else{label=19;break;}
 case 18: 
 var $57=(($53+1)|0);
 HEAP32[(($2)>>2)]=$57;
 var $58=HEAP8[(($53)>>0)];
 var $59=($58&255);
 var $63=$59;label=20;break;
 case 19: 
 var $61=___shgetc($f);
 var $63=$61;label=20;break;
 case 20: 
 var $63;
 var $_sum15=((($63)+(1))|0);
 var $64=((2096+$_sum15)|0);
 var $65=HEAP8[(($64)>>0)];
 var $66=($65&255)>15;
 if($66){label=21;break;}else{var $_122=16;var $c_123=$63;label=47;break;}
 case 21: 
 var $68=HEAP32[(($3)>>2)];
 var $69=($68|0)==0;
 if($69){label=23;break;}else{label=22;break;}
 case 22: 
 var $71=HEAP32[(($2)>>2)];
 var $72=((($71)-(1))|0);
 HEAP32[(($2)>>2)]=$72;
 label=23;break;
 case 23: 
 var $74=($pok|0)==0;
 if($74){label=26;break;}else{label=24;break;}
 case 24: 
 if($69){var $_0$1=0;var $_0$0=0;label=87;break;}else{label=25;break;}
 case 25: 
 var $77=HEAP32[(($2)>>2)];
 var $78=((($77)-(1))|0);
 HEAP32[(($2)>>2)]=$78;
 var $_0$1=0;var $_0$0=0;label=87;break;
 case 26: 
 ___shlim($f,0);
 var $_0$1=0;var $_0$0=0;label=87;break;
 case 27: 
 var $_base=($34?8:$base);
 var $c_1=$49;var $_1=$_base;label=32;break;
 case 28: 
 var $_base16=($34?10:$base);
 var $_sum=((($c_0)+(1))|0);
 var $82=((2096+$_sum)|0);
 var $83=HEAP8[(($82)>>0)];
 var $84=($83&255);
 var $85=($84>>>0)<($_base16>>>0);
 if($85){var $c_1=$c_0;var $_1=$_base16;label=32;break;}else{label=29;break;}
 case 29: 
 var $87=HEAP32[(($3)>>2)];
 var $88=($87|0)==0;
 if($88){label=31;break;}else{label=30;break;}
 case 30: 
 var $90=HEAP32[(($2)>>2)];
 var $91=((($90)-(1))|0);
 HEAP32[(($2)>>2)]=$91;
 label=31;break;
 case 31: 
 ___shlim($f,0);
 var $93=___errno_location();
 HEAP32[(($93)>>2)]=22;
 var $_0$1=0;var $_0$0=0;label=87;break;
 case 32: 
 var $_1;
 var $c_1;
 var $95=($_1|0)==10;
 if($95){label=33;break;}else{var $_122=$_1;var $c_123=$c_1;label=47;break;}
 case 33: 
 var $96=((($c_1)-(48))|0);
 var $97=($96>>>0)<10;
 if($97){var $x_068=0;var $98=$96;label=34;break;}else{var $c_2_lcssa=$c_1;var $x_0_lcssa$1=0;var $x_0_lcssa$0=0;label=40;break;}
 case 34: 
 var $98;
 var $x_068;
 var $99=((($x_068)+($98))|0);
 var $100=HEAP32[(($2)>>2)];
 var $101=HEAP32[(($3)>>2)];
 var $102=($100>>>0)<($101>>>0);
 if($102){label=35;break;}else{label=36;break;}
 case 35: 
 var $104=(($100+1)|0);
 HEAP32[(($2)>>2)]=$104;
 var $105=HEAP8[(($100)>>0)];
 var $106=($105&255);
 var $c_2_be=$106;label=37;break;
 case 36: 
 var $108=___shgetc($f);
 var $c_2_be=$108;label=37;break;
 case 37: 
 var $c_2_be;
 var $109=((($c_2_be)-(48))|0);
 var $110=($109>>>0)<10;
 var $111=($99>>>0)<429496729;
 var $_=$110&$111;
 if($_){label=38;break;}else{label=39;break;}
 case 38: 
 var $phitmp93=((($99)*(10))&-1);
 var $x_068=$phitmp93;var $98=$109;label=34;break;
 case 39: 
 var $phitmp78$0=$99;
 var $phitmp78$1=0;
 var $c_2_lcssa=$c_2_be;var $x_0_lcssa$1=$phitmp78$1;var $x_0_lcssa$0=$phitmp78$0;label=40;break;
 case 40: 
 var $x_0_lcssa$0;
 var $x_0_lcssa$1;
 var $c_2_lcssa;
 var $113=((($c_2_lcssa)-(48))|0);
 var $114=($113>>>0)<10;
 if($114){var $c_359=$c_2_lcssa;var $y_060$1=$x_0_lcssa$1;var $y_060$0=$x_0_lcssa$0;var $115=$113;label=41;break;}else{var $y_4$1=$x_0_lcssa$1;var $y_4$0=$x_0_lcssa$0;label=79;break;}
 case 41: 
 var $115;
 var $y_060$0;
 var $y_060$1;
 var $c_359;
 var $$etemp$0$0=10;
 var $$etemp$0$1=0;
 var $116$0=___muldi3($y_060$0,$y_060$1,$$etemp$0$0,$$etemp$0$1);var $116$1=tempRet0;
 var $117$0=$115;
 var $117$1=((((($115|0)<0))|0)?-1:0);
 var $$etemp$1$0=-1;
 var $$etemp$1$1=-1;
 var $118$0=$117$0^$$etemp$1$0;
 var $118$1=$117$1^$$etemp$1$1;
 var $119=(($116$1>>>0) > ($118$1>>>0)) | (((($116$1>>>0) == ($118$1>>>0) & ($116$0>>>0) >  ($118$0>>>0))));
 if($119){var $c_3_lcssa=$c_359;var $y_0_lcssa$1=$y_060$1;var $y_0_lcssa$0=$y_060$0;var $_lcssa=$115;label=46;break;}else{label=42;break;}
 case 42: 
 var $121$0=_i64Add($116$0,$116$1,$117$0,$117$1);var $121$1=tempRet0;
 var $122=HEAP32[(($2)>>2)];
 var $123=HEAP32[(($3)>>2)];
 var $124=($122>>>0)<($123>>>0);
 if($124){label=43;break;}else{label=44;break;}
 case 43: 
 var $126=(($122+1)|0);
 HEAP32[(($2)>>2)]=$126;
 var $127=HEAP8[(($122)>>0)];
 var $128=($127&255);
 var $c_3_be=$128;label=45;break;
 case 44: 
 var $130=___shgetc($f);
 var $c_3_be=$130;label=45;break;
 case 45: 
 var $c_3_be;
 var $131=((($c_3_be)-(48))|0);
 var $132=($131>>>0)<10;
 var $$etemp$2$0=-1717986918;
 var $$etemp$2$1=429496729;
 var $133=(($121$1>>>0) < ($$etemp$2$1>>>0)) | (((($121$1>>>0) == ($$etemp$2$1>>>0) & ($121$0>>>0) <  ($$etemp$2$0>>>0))));
 var $or_cond17=$132&$133;
 if($or_cond17){var $c_359=$c_3_be;var $y_060$1=$121$1;var $y_060$0=$121$0;var $115=$131;label=41;break;}else{var $c_3_lcssa=$c_3_be;var $y_0_lcssa$1=$121$1;var $y_0_lcssa$0=$121$0;var $_lcssa=$131;label=46;break;}
 case 46: 
 var $_lcssa;
 var $y_0_lcssa$0;
 var $y_0_lcssa$1;
 var $c_3_lcssa;
 var $134=($_lcssa>>>0)>9;
 if($134){var $y_4$1=$y_0_lcssa$1;var $y_4$0=$y_0_lcssa$0;label=79;break;}else{var $y_3$1=$y_0_lcssa$1;var $y_3$0=$y_0_lcssa$0;var $c_8=$c_3_lcssa;var $_121=10;label=73;break;}
 case 47: 
 var $c_123;
 var $_122;
 var $135=((($_122)-(1))|0);
 var $136=$135&$_122;
 var $137=($136|0)==0;
 if($137){label=49;break;}else{label=48;break;}
 case 48: 
 var $_sum1352=((($c_123)+(1))|0);
 var $138=((2096+$_sum1352)|0);
 var $139=HEAP8[(($138)>>0)];
 var $140=($139&255);
 var $141=($140>>>0)<($_122>>>0);
 if($141){var $x_253=0;var $195=$140;label=60;break;}else{var $c_6_lcssa=$c_123;var $x_2_lcssa$1=0;var $x_2_lcssa$0=0;var $213=$139;label=65;break;}
 case 49: 
 var $143=((($_122)*(23))&-1);
 var $144=$143>>>5;
 var $145=$144&7;
 var $146=((4248+$145)|0);
 var $147=HEAP8[(($146)>>0)];
 var $148=(($147<<24)>>24);
 var $_sum934=((($c_123)+(1))|0);
 var $149=((2096+$_sum934)|0);
 var $150=HEAP8[(($149)>>0)];
 var $151=($150&255);
 var $152=($151>>>0)<($_122>>>0);
 if($152){var $x_135=0;var $153=$151;label=50;break;}else{var $c_4_lcssa=$c_123;var $x_1_lcssa$1=0;var $x_1_lcssa$0=0;var $171=$150;label=55;break;}
 case 50: 
 var $153;
 var $x_135;
 var $154=$x_135<<$148;
 var $155=$153|$154;
 var $156=HEAP32[(($2)>>2)];
 var $157=HEAP32[(($3)>>2)];
 var $158=($156>>>0)<($157>>>0);
 if($158){label=51;break;}else{label=52;break;}
 case 51: 
 var $160=(($156+1)|0);
 HEAP32[(($2)>>2)]=$160;
 var $161=HEAP8[(($156)>>0)];
 var $162=($161&255);
 var $c_4_be=$162;label=53;break;
 case 52: 
 var $164=___shgetc($f);
 var $c_4_be=$164;label=53;break;
 case 53: 
 var $c_4_be;
 var $_sum9=((($c_4_be)+(1))|0);
 var $165=((2096+$_sum9)|0);
 var $166=HEAP8[(($165)>>0)];
 var $167=($166&255);
 var $168=($167>>>0)<($_122>>>0);
 var $169=($155>>>0)<134217728;
 var $_18=$168&$169;
 if($_18){var $x_135=$155;var $153=$167;label=50;break;}else{label=54;break;}
 case 54: 
 var $phitmp77$0=$155;
 var $phitmp77$1=0;
 var $c_4_lcssa=$c_4_be;var $x_1_lcssa$1=$phitmp77$1;var $x_1_lcssa$0=$phitmp77$0;var $171=$166;label=55;break;
 case 55: 
 var $171;
 var $x_1_lcssa$0;
 var $x_1_lcssa$1;
 var $c_4_lcssa;
 var $172$0=$148;
 var $172$1=0;
 var $$etemp$3$0=-1;
 var $$etemp$3$1=-1;
 var $173$0=_bitshift64Lshr($$etemp$3$0,$$etemp$3$1,$172$0);var $173$1=tempRet0;
 var $174=($171&255);
 var $175=($174>>>0)>=($_122>>>0);
 var $176=(($x_1_lcssa$1>>>0) > ($173$1>>>0)) | (((($x_1_lcssa$1>>>0) == ($173$1>>>0) & ($x_1_lcssa$0>>>0) >  ($173$0>>>0))));
 var $or_cond2628=$175|$176;
 if($or_cond2628){var $y_3$1=$x_1_lcssa$1;var $y_3$0=$x_1_lcssa$0;var $c_8=$c_4_lcssa;var $_121=$_122;label=73;break;}else{var $y_129$1=$x_1_lcssa$1;var $y_129$0=$x_1_lcssa$0;var $177=$171;label=56;break;}
 case 56: 
 var $177;
 var $y_129$0;
 var $y_129$1;
 var $178$0=_bitshift64Shl($y_129$0,$y_129$1,$172$0);var $178$1=tempRet0;
 var $179$0=($177&255);
 var $179$1=0;
 var $180$0=$179$0|$178$0;
 var $180$1=$179$1|$178$1;
 var $181=HEAP32[(($2)>>2)];
 var $182=HEAP32[(($3)>>2)];
 var $183=($181>>>0)<($182>>>0);
 if($183){label=57;break;}else{label=58;break;}
 case 57: 
 var $185=(($181+1)|0);
 HEAP32[(($2)>>2)]=$185;
 var $186=HEAP8[(($181)>>0)];
 var $187=($186&255);
 var $c_5_be=$187;label=59;break;
 case 58: 
 var $189=___shgetc($f);
 var $c_5_be=$189;label=59;break;
 case 59: 
 var $c_5_be;
 var $_sum10=((($c_5_be)+(1))|0);
 var $190=((2096+$_sum10)|0);
 var $191=HEAP8[(($190)>>0)];
 var $192=($191&255);
 var $193=($192>>>0)>=($_122>>>0);
 var $194=(($180$1>>>0) > ($173$1>>>0)) | (((($180$1>>>0) == ($173$1>>>0) & ($180$0>>>0) >  ($173$0>>>0))));
 var $or_cond26=$193|$194;
 if($or_cond26){var $y_3$1=$180$1;var $y_3$0=$180$0;var $c_8=$c_5_be;var $_121=$_122;label=73;break;}else{var $y_129$1=$180$1;var $y_129$0=$180$0;var $177=$191;label=56;break;}
 case 60: 
 var $195;
 var $x_253;
 var $196=(Math_imul($x_253,$_122)|0);
 var $197=((($195)+($196))|0);
 var $198=HEAP32[(($2)>>2)];
 var $199=HEAP32[(($3)>>2)];
 var $200=($198>>>0)<($199>>>0);
 if($200){label=61;break;}else{label=62;break;}
 case 61: 
 var $202=(($198+1)|0);
 HEAP32[(($2)>>2)]=$202;
 var $203=HEAP8[(($198)>>0)];
 var $204=($203&255);
 var $c_6_be=$204;label=63;break;
 case 62: 
 var $206=___shgetc($f);
 var $c_6_be=$206;label=63;break;
 case 63: 
 var $c_6_be;
 var $_sum13=((($c_6_be)+(1))|0);
 var $207=((2096+$_sum13)|0);
 var $208=HEAP8[(($207)>>0)];
 var $209=($208&255);
 var $210=($209>>>0)<($_122>>>0);
 var $211=($197>>>0)<119304647;
 var $_19=$210&$211;
 if($_19){var $x_253=$197;var $195=$209;label=60;break;}else{label=64;break;}
 case 64: 
 var $phitmp$0=$197;
 var $phitmp$1=0;
 var $c_6_lcssa=$c_6_be;var $x_2_lcssa$1=$phitmp$1;var $x_2_lcssa$0=$phitmp$0;var $213=$208;label=65;break;
 case 65: 
 var $213;
 var $x_2_lcssa$0;
 var $x_2_lcssa$1;
 var $c_6_lcssa;
 var $214$0=$_122;
 var $214$1=0;
 var $215=($213&255);
 var $216=($215>>>0)<($_122>>>0);
 if($216){label=66;break;}else{var $y_3$1=$x_2_lcssa$1;var $y_3$0=$x_2_lcssa$0;var $c_8=$c_6_lcssa;var $_121=$_122;label=73;break;}
 case 66: 
 var $$etemp$4$0=-1;
 var $$etemp$4$1=-1;
 var $217$0=___udivdi3($$etemp$4$0,$$etemp$4$1,$214$0,$214$1);var $217$1=tempRet0;
 var $c_744=$c_6_lcssa;var $y_245$1=$x_2_lcssa$1;var $y_245$0=$x_2_lcssa$0;var $219=$213;label=67;break;
 case 67: 
 var $219;
 var $y_245$0;
 var $y_245$1;
 var $c_744;
 var $220=(($y_245$1>>>0) > ($217$1>>>0)) | (((($y_245$1>>>0) == ($217$1>>>0) & ($y_245$0>>>0) >  ($217$0>>>0))));
 if($220){var $y_3$1=$y_245$1;var $y_3$0=$y_245$0;var $c_8=$c_744;var $_121=$_122;label=73;break;}else{label=68;break;}
 case 68: 
 var $222$0=___muldi3($y_245$0,$y_245$1,$214$0,$214$1);var $222$1=tempRet0;
 var $223$0=($219&255);
 var $223$1=0;
 var $$etemp$5$0=-1;
 var $$etemp$5$1=-1;
 var $224$0=$223$0^$$etemp$5$0;
 var $224$1=$223$1^$$etemp$5$1;
 var $225=(($222$1>>>0) > ($224$1>>>0)) | (((($222$1>>>0) == ($224$1>>>0) & ($222$0>>>0) >  ($224$0>>>0))));
 if($225){var $y_3$1=$y_245$1;var $y_3$0=$y_245$0;var $c_8=$c_744;var $_121=$_122;label=73;break;}else{label=69;break;}
 case 69: 
 var $227$0=_i64Add($223$0,$223$1,$222$0,$222$1);var $227$1=tempRet0;
 var $228=HEAP32[(($2)>>2)];
 var $229=HEAP32[(($3)>>2)];
 var $230=($228>>>0)<($229>>>0);
 if($230){label=70;break;}else{label=71;break;}
 case 70: 
 var $232=(($228+1)|0);
 HEAP32[(($2)>>2)]=$232;
 var $233=HEAP8[(($228)>>0)];
 var $234=($233&255);
 var $c_7_be=$234;label=72;break;
 case 71: 
 var $236=___shgetc($f);
 var $c_7_be=$236;label=72;break;
 case 72: 
 var $c_7_be;
 var $_sum14=((($c_7_be)+(1))|0);
 var $237=((2096+$_sum14)|0);
 var $238=HEAP8[(($237)>>0)];
 var $239=($238&255);
 var $240=($239>>>0)<($_122>>>0);
 if($240){var $c_744=$c_7_be;var $y_245$1=$227$1;var $y_245$0=$227$0;var $219=$238;label=67;break;}else{var $y_3$1=$227$1;var $y_3$0=$227$0;var $c_8=$c_7_be;var $_121=$_122;label=73;break;}
 case 73: 
 var $_121;
 var $c_8;
 var $y_3$0;
 var $y_3$1;
 var $_sum11=((($c_8)+(1))|0);
 var $241=((2096+$_sum11)|0);
 var $242=HEAP8[(($241)>>0)];
 var $243=($242&255);
 var $244=($243>>>0)<($_121>>>0);
 if($244){label=74;break;}else{var $y_4$1=$y_3$1;var $y_4$0=$y_3$0;label=79;break;}
 case 74: 
 var $245=HEAP32[(($2)>>2)];
 var $246=HEAP32[(($3)>>2)];
 var $247=($245>>>0)<($246>>>0);
 if($247){label=75;break;}else{label=76;break;}
 case 75: 
 var $249=(($245+1)|0);
 HEAP32[(($2)>>2)]=$249;
 var $250=HEAP8[(($245)>>0)];
 var $251=($250&255);
 var $c_9_be=$251;label=77;break;
 case 76: 
 var $253=___shgetc($f);
 var $c_9_be=$253;label=77;break;
 case 77: 
 var $c_9_be;
 var $_sum12=((($c_9_be)+(1))|0);
 var $254=((2096+$_sum12)|0);
 var $255=HEAP8[(($254)>>0)];
 var $256=($255&255);
 var $257=($256>>>0)<($_121>>>0);
 if($257){label=74;break;}else{label=78;break;}
 case 78: 
 var $258=___errno_location();
 HEAP32[(($258)>>2)]=34;
 var $y_4$1=$lim$1;var $y_4$0=$lim$0;label=79;break;
 case 79: 
 var $y_4$0;
 var $y_4$1;
 var $259=HEAP32[(($3)>>2)];
 var $260=($259|0)==0;
 if($260){label=81;break;}else{label=80;break;}
 case 80: 
 var $262=HEAP32[(($2)>>2)];
 var $263=((($262)-(1))|0);
 HEAP32[(($2)>>2)]=$263;
 label=81;break;
 case 81: 
 var $265=(($y_4$1>>>0) < ($lim$1>>>0)) | (((($y_4$1>>>0) == ($lim$1>>>0) & ($y_4$0>>>0) <  ($lim$0>>>0))));
 if($265){label=86;break;}else{label=82;break;}
 case 82: 
 var $$etemp$6$0=1;
 var $$etemp$6$1=0;
 var $267$0=$lim$0&$$etemp$6$0;
 var $267$1=$lim$1&$$etemp$6$1;
 var $$etemp$7$0=0;
 var $$etemp$7$1=0;
 var $268=(($267$0|0) == ($$etemp$7$0|0)) & (($267$1|0) == ($$etemp$7$1|0));
 var $269=($neg_0|0)==0;
 var $or_cond20=$268&$269;
 if($or_cond20){label=83;break;}else{label=84;break;}
 case 83: 
 var $271=___errno_location();
 HEAP32[(($271)>>2)]=34;
 var $$etemp$8$0=-1;
 var $$etemp$8$1=-1;
 var $272$0=_i64Add($lim$0,$lim$1,$$etemp$8$0,$$etemp$8$1);var $272$1=tempRet0;
 var $_0$1=$272$1;var $_0$0=$272$0;label=87;break;
 case 84: 
 var $274=(($y_4$1>>>0) > ($lim$1>>>0)) | (((($y_4$1>>>0) == ($lim$1>>>0) & ($y_4$0>>>0) >  ($lim$0>>>0))));
 if($274){label=85;break;}else{label=86;break;}
 case 85: 
 var $276=___errno_location();
 HEAP32[(($276)>>2)]=34;
 var $_0$1=$lim$1;var $_0$0=$lim$0;label=87;break;
 case 86: 
 var $278$0=$neg_0;
 var $278$1=((((($neg_0|0)<0))|0)?-1:0);
 var $279$0=$y_4$0^$278$0;
 var $279$1=$y_4$1^$278$1;
 var $280$0=_i64Subtract($279$0,$279$1,$278$0,$278$1);var $280$1=tempRet0;
 var $_0$1=$280$1;var $_0$0=$280$0;label=87;break;
 case 87: 
 var $_0$0;
 var $_0$1;
 return (tempRet0=$_0$1,$_0$0);
  default: assert(0, "bad label: " + label);
 }

}


function ___floatscan($f,$prec,$pok){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+512)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $x_i=sp;
 if(($prec|0)==1){ label=2;break;}else if(($prec|0)==2){ label=3;break;}else if(($prec|0)==0){ var $emin_0_ph=-149;var $bits_0_ph=24;label=4;break;}else{var $_0=0;label=273;break;}
 case 2: 
 var $emin_0_ph=-1074;var $bits_0_ph=53;label=4;break;
 case 3: 
 var $emin_0_ph=-1074;var $bits_0_ph=53;label=4;break;
 case 4: 
 var $bits_0_ph;
 var $emin_0_ph;
 var $3=(($f+4)|0);
 var $4=(($f+100)|0);
 label=5;break;
 case 5: 
 var $6=HEAP32[(($3)>>2)];
 var $7=HEAP32[(($4)>>2)];
 var $8=($6>>>0)<($7>>>0);
 if($8){label=6;break;}else{label=7;break;}
 case 6: 
 var $10=(($6+1)|0);
 HEAP32[(($3)>>2)]=$10;
 var $11=HEAP8[(($6)>>0)];
 var $12=($11&255);
 var $16=$12;label=8;break;
 case 7: 
 var $14=___shgetc($f);
 var $16=$14;label=8;break;
 case 8: 
 var $16;
 var $17=_isspace($16);
 var $18=($17|0)==0;
 if($18){label=9;break;}else{label=5;break;}
 case 9: 
 var $20=($16|0)==45;
 if(($16|0)==45|($16|0)==43){ label=10;break;}else{var $c_0=$16;var $sign_0=1;label=13;break;}
 case 10: 
 var $22=($20&1);
 var $23=$22<<1;
 var $24=(((1)-($23))|0);
 var $25=HEAP32[(($3)>>2)];
 var $26=HEAP32[(($4)>>2)];
 var $27=($25>>>0)<($26>>>0);
 if($27){label=11;break;}else{label=12;break;}
 case 11: 
 var $29=(($25+1)|0);
 HEAP32[(($3)>>2)]=$29;
 var $30=HEAP8[(($25)>>0)];
 var $31=($30&255);
 var $c_0=$31;var $sign_0=$24;label=13;break;
 case 12: 
 var $33=___shgetc($f);
 var $c_0=$33;var $sign_0=$24;label=13;break;
 case 13: 
 var $sign_0;
 var $c_0;
 var $i_068=0;var $c_169=$c_0;label=14;break;
 case 14: 
 var $c_169;
 var $i_068;
 var $36=$c_169|32;
 var $37=((4072+$i_068)|0);
 var $38=HEAP8[(($37)>>0)];
 var $39=(($38<<24)>>24);
 var $40=($36|0)==($39|0);
 if($40){label=15;break;}else{var $i_0_lcssa=$i_068;var $c_1_lcssa=$c_169;label=20;break;}
 case 15: 
 var $42=($i_068>>>0)<7;
 if($42){label=16;break;}else{var $c_2=$c_169;label=19;break;}
 case 16: 
 var $44=HEAP32[(($3)>>2)];
 var $45=HEAP32[(($4)>>2)];
 var $46=($44>>>0)<($45>>>0);
 if($46){label=17;break;}else{label=18;break;}
 case 17: 
 var $48=(($44+1)|0);
 HEAP32[(($3)>>2)]=$48;
 var $49=HEAP8[(($44)>>0)];
 var $50=($49&255);
 var $c_2=$50;label=19;break;
 case 18: 
 var $52=___shgetc($f);
 var $c_2=$52;label=19;break;
 case 19: 
 var $c_2;
 var $54=((($i_068)+(1))|0);
 var $55=($54>>>0)<8;
 if($55){var $i_068=$54;var $c_169=$c_2;label=14;break;}else{var $i_0_lcssa=$54;var $c_1_lcssa=$c_2;label=20;break;}
 case 20: 
 var $c_1_lcssa;
 var $i_0_lcssa;
 if(($i_0_lcssa|0)==3){ label=23;break;}else if(($i_0_lcssa|0)==8){ label=27;break;}else{label=21;break;}
 case 21: 
 var $57=($i_0_lcssa>>>0)<4;
 var $58=($pok|0)==0;
 var $or_cond=$57|$58;
 if($or_cond){label=28;break;}else{label=22;break;}
 case 22: 
 var $60=($i_0_lcssa|0)==8;
 if($60){label=27;break;}else{label=23;break;}
 case 23: 
 var $61=HEAP32[(($4)>>2)];
 var $62=($61|0)==0;
 if($62){label=25;break;}else{label=24;break;}
 case 24: 
 var $64=HEAP32[(($3)>>2)];
 var $65=((($64)-(1))|0);
 HEAP32[(($3)>>2)]=$65;
 label=25;break;
 case 25: 
 var $notlhs=($pok|0)==0;
 var $notrhs=($i_0_lcssa>>>0)<4;
 var $or_cond106_not=$notrhs|$notlhs;
 var $brmerge=$or_cond106_not|$62;
 if($brmerge){label=27;break;}else{var $i_166=$i_0_lcssa;label=26;break;}
 case 26: 
 var $i_166;
 var $68=HEAP32[(($3)>>2)];
 var $69=((($68)-(1))|0);
 HEAP32[(($3)>>2)]=$69;
 var $70=((($i_166)-(1))|0);
 var $71=($70>>>0)>3;
 if($71){var $i_166=$70;label=26;break;}else{label=27;break;}
 case 27: 
 var $72=($sign_0|0);
 var $73=($72)*(Infinity);
 var $74=$73;
 var $_0=$74;label=273;break;
 case 28: 
 var $76=($i_0_lcssa|0)==0;
 if($76){var $i_263=0;var $c_364=$c_1_lcssa;label=29;break;}else{var $c_5=$c_1_lcssa;var $i_3=$i_0_lcssa;label=35;break;}
 case 29: 
 var $c_364;
 var $i_263;
 var $77=$c_364|32;
 var $78=((7912+$i_263)|0);
 var $79=HEAP8[(($78)>>0)];
 var $80=(($79<<24)>>24);
 var $81=($77|0)==($80|0);
 if($81){label=30;break;}else{var $c_5=$c_364;var $i_3=$i_263;label=35;break;}
 case 30: 
 var $83=($i_263>>>0)<2;
 if($83){label=31;break;}else{var $c_4=$c_364;label=34;break;}
 case 31: 
 var $85=HEAP32[(($3)>>2)];
 var $86=HEAP32[(($4)>>2)];
 var $87=($85>>>0)<($86>>>0);
 if($87){label=32;break;}else{label=33;break;}
 case 32: 
 var $89=(($85+1)|0);
 HEAP32[(($3)>>2)]=$89;
 var $90=HEAP8[(($85)>>0)];
 var $91=($90&255);
 var $c_4=$91;label=34;break;
 case 33: 
 var $93=___shgetc($f);
 var $c_4=$93;label=34;break;
 case 34: 
 var $c_4;
 var $95=((($i_263)+(1))|0);
 var $96=($95>>>0)<3;
 if($96){var $i_263=$95;var $c_364=$c_4;label=29;break;}else{var $c_5=$c_4;var $i_3=$95;label=35;break;}
 case 35: 
 var $i_3;
 var $c_5;
 if(($i_3|0)==3){ label=36;break;}else if(($i_3|0)==0){ label=58;break;}else{label=55;break;}
 case 36: 
 var $98=HEAP32[(($3)>>2)];
 var $99=HEAP32[(($4)>>2)];
 var $100=($98>>>0)<($99>>>0);
 if($100){label=37;break;}else{label=38;break;}
 case 37: 
 var $102=(($98+1)|0);
 HEAP32[(($3)>>2)]=$102;
 var $103=HEAP8[(($98)>>0)];
 var $104=($103&255);
 var $108=$104;label=39;break;
 case 38: 
 var $106=___shgetc($f);
 var $108=$106;label=39;break;
 case 39: 
 var $108;
 var $109=($108|0)==40;
 if($109){var $i_4=1;label=42;break;}else{label=40;break;}
 case 40: 
 var $111=HEAP32[(($4)>>2)];
 var $112=($111|0)==0;
 if($112){var $_0=NaN;label=273;break;}else{label=41;break;}
 case 41: 
 var $114=HEAP32[(($3)>>2)];
 var $115=((($114)-(1))|0);
 HEAP32[(($3)>>2)]=$115;
 var $_0=NaN;label=273;break;
 case 42: 
 var $i_4;
 var $116=HEAP32[(($3)>>2)];
 var $117=HEAP32[(($4)>>2)];
 var $118=($116>>>0)<($117>>>0);
 if($118){label=43;break;}else{label=44;break;}
 case 43: 
 var $120=(($116+1)|0);
 HEAP32[(($3)>>2)]=$120;
 var $121=HEAP8[(($116)>>0)];
 var $122=($121&255);
 var $126=$122;label=45;break;
 case 44: 
 var $124=___shgetc($f);
 var $126=$124;label=45;break;
 case 45: 
 var $126;
 var $127=((($126)-(48))|0);
 var $128=($127>>>0)<10;
 var $129=((($126)-(65))|0);
 var $130=($129>>>0)<26;
 var $or_cond8=$128|$130;
 if($or_cond8){label=54;break;}else{label=46;break;}
 case 46: 
 var $132=((($126)-(97))|0);
 var $133=($132>>>0)<26;
 var $134=($126|0)==95;
 var $or_cond5=$133|$134;
 if($or_cond5){label=54;break;}else{label=47;break;}
 case 47: 
 var $136=($126|0)==41;
 if($136){var $_0=NaN;label=273;break;}else{label=48;break;}
 case 48: 
 var $138=HEAP32[(($4)>>2)];
 var $139=($138|0)==0;
 if($139){label=50;break;}else{label=49;break;}
 case 49: 
 var $141=HEAP32[(($3)>>2)];
 var $142=((($141)-(1))|0);
 HEAP32[(($3)>>2)]=$142;
 label=50;break;
 case 50: 
 if($58){label=52;break;}else{label=51;break;}
 case 51: 
 var $144=($i_4|0)==0;
 var $brmerge107=$144|$139;
 if($brmerge107){var $_0=NaN;label=273;break;}else{var $_in=$i_4;label=53;break;}
 case 52: 
 var $146=___errno_location();
 HEAP32[(($146)>>2)]=22;
 ___shlim($f,0);
 var $_0=0;label=273;break;
 case 53: 
 var $_in;
 var $147=((($_in)-(1))|0);
 var $148=HEAP32[(($3)>>2)];
 var $149=((($148)-(1))|0);
 HEAP32[(($3)>>2)]=$149;
 var $150=($147|0)==0;
 if($150){var $_0=NaN;label=273;break;}else{var $_in=$147;label=53;break;}
 case 54: 
 var $152=((($i_4)+(1))|0);
 var $i_4=$152;label=42;break;
 case 55: 
 var $154=HEAP32[(($4)>>2)];
 var $155=($154|0)==0;
 if($155){label=57;break;}else{label=56;break;}
 case 56: 
 var $157=HEAP32[(($3)>>2)];
 var $158=((($157)-(1))|0);
 HEAP32[(($3)>>2)]=$158;
 label=57;break;
 case 57: 
 var $160=___errno_location();
 HEAP32[(($160)>>2)]=22;
 ___shlim($f,0);
 var $_0=0;label=273;break;
 case 58: 
 var $162=($c_5|0)==48;
 if($162){label=59;break;}else{var $c_6=$c_5;label=134;break;}
 case 59: 
 var $164=HEAP32[(($3)>>2)];
 var $165=HEAP32[(($4)>>2)];
 var $166=($164>>>0)<($165>>>0);
 if($166){label=60;break;}else{label=61;break;}
 case 60: 
 var $168=(($164+1)|0);
 HEAP32[(($3)>>2)]=$168;
 var $169=HEAP8[(($164)>>0)];
 var $170=($169&255);
 var $174=$170;label=62;break;
 case 61: 
 var $172=___shgetc($f);
 var $174=$172;label=62;break;
 case 62: 
 var $174;
 var $175=$174|32;
 var $176=($175|0)==120;
 if($176){label=63;break;}else{label=132;break;}
 case 63: 
 var $178=HEAP32[(($3)>>2)];
 var $179=HEAP32[(($4)>>2)];
 var $180=($178>>>0)<($179>>>0);
 if($180){label=64;break;}else{label=65;break;}
 case 64: 
 var $182=(($178+1)|0);
 HEAP32[(($3)>>2)]=$182;
 var $183=HEAP8[(($178)>>0)];
 var $184=($183&255);
 var $c_0_i=$184;var $gotdig_0_i=0;label=66;break;
 case 65: 
 var $186=___shgetc($f);
 var $c_0_i=$186;var $gotdig_0_i=0;label=66;break;
 case 66: 
 var $gotdig_0_i;
 var $c_0_i;
 if(($c_0_i|0)==48){ label=67;break;}else if(($c_0_i|0)==46){ label=70;break;}else{var $c_2_i=$c_0_i;var $dc_0_i$1=0;var $dc_0_i$0=0;var $rp_1_i$1=0;var $rp_1_i$0=0;var $gotdig_2_i=$gotdig_0_i;var $gotrad_0_i=0;var $gottail_0_i=0;var $scale_0_i=1;var $y_0_i=0;var $x_0_i=0;label=79;break;}
 case 67: 
 var $188=HEAP32[(($3)>>2)];
 var $189=HEAP32[(($4)>>2)];
 var $190=($188>>>0)<($189>>>0);
 if($190){label=68;break;}else{label=69;break;}
 case 68: 
 var $192=(($188+1)|0);
 HEAP32[(($3)>>2)]=$192;
 var $193=HEAP8[(($188)>>0)];
 var $194=($193&255);
 var $c_0_i=$194;var $gotdig_0_i=1;label=66;break;
 case 69: 
 var $196=___shgetc($f);
 var $c_0_i=$196;var $gotdig_0_i=1;label=66;break;
 case 70: 
 var $198=HEAP32[(($3)>>2)];
 var $199=HEAP32[(($4)>>2)];
 var $200=($198>>>0)<($199>>>0);
 if($200){label=71;break;}else{label=72;break;}
 case 71: 
 var $202=(($198+1)|0);
 HEAP32[(($3)>>2)]=$202;
 var $203=HEAP8[(($198)>>0)];
 var $204=($203&255);
 var $c_1_ph_i=$204;label=73;break;
 case 72: 
 var $206=___shgetc($f);
 var $c_1_ph_i=$206;label=73;break;
 case 73: 
 var $c_1_ph_i;
 var $207=($c_1_ph_i|0)==48;
 if($207){var $rp_021_i$1=-1;var $rp_021_i$0=-1;label=74;break;}else{var $c_2_i=$c_1_ph_i;var $dc_0_i$1=0;var $dc_0_i$0=0;var $rp_1_i$1=0;var $rp_1_i$0=0;var $gotdig_2_i=$gotdig_0_i;var $gotrad_0_i=1;var $gottail_0_i=0;var $scale_0_i=1;var $y_0_i=0;var $x_0_i=0;label=79;break;}
 case 74: 
 var $rp_021_i$0;
 var $rp_021_i$1;
 var $208=HEAP32[(($3)>>2)];
 var $209=HEAP32[(($4)>>2)];
 var $210=($208>>>0)<($209>>>0);
 if($210){label=75;break;}else{label=76;break;}
 case 75: 
 var $212=(($208+1)|0);
 HEAP32[(($3)>>2)]=$212;
 var $213=HEAP8[(($208)>>0)];
 var $214=($213&255);
 var $218=$214;label=77;break;
 case 76: 
 var $216=___shgetc($f);
 var $218=$216;label=77;break;
 case 77: 
 var $218;
 var $219=($218|0)==48;
 if($219){label=78;break;}else{var $c_2_i=$218;var $dc_0_i$1=0;var $dc_0_i$0=0;var $rp_1_i$1=$rp_021_i$1;var $rp_1_i$0=$rp_021_i$0;var $gotdig_2_i=1;var $gotrad_0_i=1;var $gottail_0_i=0;var $scale_0_i=1;var $y_0_i=0;var $x_0_i=0;label=79;break;}
 case 78: 
 var $$etemp$0$0=-1;
 var $$etemp$0$1=-1;
 var $phitmp_i$0=_i64Add($rp_021_i$0,$rp_021_i$1,$$etemp$0$0,$$etemp$0$1);var $phitmp_i$1=tempRet0;
 var $rp_021_i$1=$phitmp_i$1;var $rp_021_i$0=$phitmp_i$0;label=74;break;
 case 79: 
 var $x_0_i;
 var $y_0_i;
 var $scale_0_i;
 var $gottail_0_i;
 var $gotrad_0_i;
 var $gotdig_2_i;
 var $rp_1_i$0;
 var $rp_1_i$1;
 var $dc_0_i$0;
 var $dc_0_i$1;
 var $c_2_i;
 var $220=((($c_2_i)-(48))|0);
 var $221=($220>>>0)<10;
 if($221){var $d_0_i=$220;label=84;break;}else{label=80;break;}
 case 80: 
 var $223=$c_2_i|32;
 var $224=((($223)-(97))|0);
 var $225=($224>>>0)<6;
 var $226=($c_2_i|0)==46;
 var $or_cond_i=$225|$226;
 if($or_cond_i){label=81;break;}else{var $c_2_lcssa_i=$c_2_i;label=94;break;}
 case 81: 
 if($226){label=82;break;}else{label=83;break;}
 case 82: 
 var $228=($gotrad_0_i|0)==0;
 if($228){var $dc_1_i$1=$dc_0_i$1;var $dc_1_i$0=$dc_0_i$0;var $rp_2_i$1=$dc_0_i$1;var $rp_2_i$0=$dc_0_i$0;var $gotdig_3_i=$gotdig_2_i;var $gotrad_1_i=1;var $gottail_2_i=$gottail_0_i;var $scale_2_i=$scale_0_i;var $y_2_i=$y_0_i;var $x_2_i=$x_0_i;label=91;break;}else{var $c_2_lcssa_i=46;label=94;break;}
 case 83: 
 var $230=($c_2_i|0)>57;
 var $231=((($223)-(87))|0);
 var $_38_i=($230?$231:$220);
 var $d_0_i=$_38_i;label=84;break;
 case 84: 
 var $d_0_i;
 var $$etemp$1$0=8;
 var $$etemp$1$1=0;
 var $232=(($dc_0_i$1|0) < ($$etemp$1$1|0)) | (((($dc_0_i$1|0) == ($$etemp$1$1|0) & ($dc_0_i$0>>>0) <  ($$etemp$1$0>>>0))));
 if($232){label=85;break;}else{label=86;break;}
 case 85: 
 var $234=$x_0_i<<4;
 var $235=((($d_0_i)+($234))|0);
 var $gottail_1_i=$gottail_0_i;var $scale_1_i=$scale_0_i;var $y_1_i=$y_0_i;var $x_1_i=$235;label=90;break;
 case 86: 
 var $$etemp$2$0=14;
 var $$etemp$2$1=0;
 var $237=(($dc_0_i$1|0) < ($$etemp$2$1|0)) | (((($dc_0_i$1|0) == ($$etemp$2$1|0) & ($dc_0_i$0>>>0) <  ($$etemp$2$0>>>0))));
 if($237){label=87;break;}else{label=88;break;}
 case 87: 
 var $239=($d_0_i|0);
 var $240=($scale_0_i)*((0.0625));
 var $241=($240)*($239);
 var $242=($y_0_i)+($241);
 var $gottail_1_i=$gottail_0_i;var $scale_1_i=$240;var $y_1_i=$242;var $x_1_i=$x_0_i;label=90;break;
 case 88: 
 var $244=($d_0_i|0)!=0;
 var $245=($gottail_0_i|0)==0;
 var $or_cond3_i=$244&$245;
 if($or_cond3_i){label=89;break;}else{var $gottail_1_i=$gottail_0_i;var $scale_1_i=$scale_0_i;var $y_1_i=$y_0_i;var $x_1_i=$x_0_i;label=90;break;}
 case 89: 
 var $247=($scale_0_i)*((0.5));
 var $248=($y_0_i)+($247);
 var $gottail_1_i=1;var $scale_1_i=$scale_0_i;var $y_1_i=$248;var $x_1_i=$x_0_i;label=90;break;
 case 90: 
 var $x_1_i;
 var $y_1_i;
 var $scale_1_i;
 var $gottail_1_i;
 var $$etemp$3$0=1;
 var $$etemp$3$1=0;
 var $250$0=_i64Add($dc_0_i$0,$dc_0_i$1,$$etemp$3$0,$$etemp$3$1);var $250$1=tempRet0;
 var $dc_1_i$1=$250$1;var $dc_1_i$0=$250$0;var $rp_2_i$1=$rp_1_i$1;var $rp_2_i$0=$rp_1_i$0;var $gotdig_3_i=1;var $gotrad_1_i=$gotrad_0_i;var $gottail_2_i=$gottail_1_i;var $scale_2_i=$scale_1_i;var $y_2_i=$y_1_i;var $x_2_i=$x_1_i;label=91;break;
 case 91: 
 var $x_2_i;
 var $y_2_i;
 var $scale_2_i;
 var $gottail_2_i;
 var $gotrad_1_i;
 var $gotdig_3_i;
 var $rp_2_i$0;
 var $rp_2_i$1;
 var $dc_1_i$0;
 var $dc_1_i$1;
 var $251=HEAP32[(($3)>>2)];
 var $252=HEAP32[(($4)>>2)];
 var $253=($251>>>0)<($252>>>0);
 if($253){label=92;break;}else{label=93;break;}
 case 92: 
 var $255=(($251+1)|0);
 HEAP32[(($3)>>2)]=$255;
 var $256=HEAP8[(($251)>>0)];
 var $257=($256&255);
 var $c_2_i=$257;var $dc_0_i$1=$dc_1_i$1;var $dc_0_i$0=$dc_1_i$0;var $rp_1_i$1=$rp_2_i$1;var $rp_1_i$0=$rp_2_i$0;var $gotdig_2_i=$gotdig_3_i;var $gotrad_0_i=$gotrad_1_i;var $gottail_0_i=$gottail_2_i;var $scale_0_i=$scale_2_i;var $y_0_i=$y_2_i;var $x_0_i=$x_2_i;label=79;break;
 case 93: 
 var $259=___shgetc($f);
 var $c_2_i=$259;var $dc_0_i$1=$dc_1_i$1;var $dc_0_i$0=$dc_1_i$0;var $rp_1_i$1=$rp_2_i$1;var $rp_1_i$0=$rp_2_i$0;var $gotdig_2_i=$gotdig_3_i;var $gotrad_0_i=$gotrad_1_i;var $gottail_0_i=$gottail_2_i;var $scale_0_i=$scale_2_i;var $y_0_i=$y_2_i;var $x_0_i=$x_2_i;label=79;break;
 case 94: 
 var $c_2_lcssa_i;
 var $261=($gotdig_2_i|0)==0;
 if($261){label=95;break;}else{label=103;break;}
 case 95: 
 var $263=HEAP32[(($4)>>2)];
 var $264=($263|0)==0;
 if($264){label=97;break;}else{label=96;break;}
 case 96: 
 var $266=HEAP32[(($3)>>2)];
 var $267=((($266)-(1))|0);
 HEAP32[(($3)>>2)]=$267;
 label=97;break;
 case 97: 
 if($58){label=101;break;}else{label=98;break;}
 case 98: 
 if($264){label=102;break;}else{label=99;break;}
 case 99: 
 var $271=HEAP32[(($3)>>2)];
 var $272=((($271)-(1))|0);
 HEAP32[(($3)>>2)]=$272;
 var $273=($gotrad_0_i|0)==0;
 if($273){label=102;break;}else{label=100;break;}
 case 100: 
 var $275=((($271)-(2))|0);
 HEAP32[(($3)>>2)]=$275;
 label=102;break;
 case 101: 
 ___shlim($f,0);
 label=102;break;
 case 102: 
 var $277=($sign_0|0);
 var $278=($277)*(0);
 var $_0=$278;label=273;break;
 case 103: 
 var $280=($gotrad_0_i|0)==0;
 var $dc_0_rp_1_i$0=($280?$dc_0_i$0:$rp_1_i$0);
 var $dc_0_rp_1_i$1=($280?$dc_0_i$1:$rp_1_i$1);
 var $$etemp$4$0=8;
 var $$etemp$4$1=0;
 var $281=(($dc_0_i$1|0) < ($$etemp$4$1|0)) | (((($dc_0_i$1|0) == ($$etemp$4$1|0) & ($dc_0_i$0>>>0) <  ($$etemp$4$0>>>0))));
 if($281){var $x_313_i=$x_0_i;var $dc_214_i$1=$dc_0_i$1;var $dc_214_i$0=$dc_0_i$0;label=104;break;}else{var $x_3_lcssa_i=$x_0_i;label=105;break;}
 case 104: 
 var $dc_214_i$0;
 var $dc_214_i$1;
 var $x_313_i;
 var $282=$x_313_i<<4;
 var $$etemp$5$0=1;
 var $$etemp$5$1=0;
 var $283$0=_i64Add($dc_214_i$0,$dc_214_i$1,$$etemp$5$0,$$etemp$5$1);var $283$1=tempRet0;
 var $$etemp$6$0=8;
 var $$etemp$6$1=0;
 var $284=(($283$1|0) < ($$etemp$6$1|0)) | (((($283$1|0) == ($$etemp$6$1|0) & ($283$0>>>0) <  ($$etemp$6$0>>>0))));
 if($284){var $x_313_i=$282;var $dc_214_i$1=$283$1;var $dc_214_i$0=$283$0;label=104;break;}else{var $x_3_lcssa_i=$282;label=105;break;}
 case 105: 
 var $x_3_lcssa_i;
 var $285=$c_2_lcssa_i|32;
 var $286=($285|0)==112;
 if($286){label=106;break;}else{label=111;break;}
 case 106: 
 var $288$0=_scanexp($f,$pok);
 var $288$1=tempRet0;
 var $$etemp$7$0=0;
 var $$etemp$7$1=-2147483648;
 var $289=(($288$0|0) == ($$etemp$7$0|0)) & (($288$1|0) == ($$etemp$7$1|0));
 if($289){label=107;break;}else{var $e2_0_i$1=$288$1;var $e2_0_i$0=$288$0;label=113;break;}
 case 107: 
 if($58){label=110;break;}else{label=108;break;}
 case 108: 
 var $292=HEAP32[(($4)>>2)];
 var $293=($292|0)==0;
 if($293){var $e2_0_i$1=0;var $e2_0_i$0=0;label=113;break;}else{label=109;break;}
 case 109: 
 var $295=HEAP32[(($3)>>2)];
 var $296=((($295)-(1))|0);
 HEAP32[(($3)>>2)]=$296;
 var $e2_0_i$1=0;var $e2_0_i$0=0;label=113;break;
 case 110: 
 ___shlim($f,0);
 var $_0=0;label=273;break;
 case 111: 
 var $299=HEAP32[(($4)>>2)];
 var $300=($299|0)==0;
 if($300){var $e2_0_i$1=0;var $e2_0_i$0=0;label=113;break;}else{label=112;break;}
 case 112: 
 var $302=HEAP32[(($3)>>2)];
 var $303=((($302)-(1))|0);
 HEAP32[(($3)>>2)]=$303;
 var $e2_0_i$1=0;var $e2_0_i$0=0;label=113;break;
 case 113: 
 var $e2_0_i$0;
 var $e2_0_i$1;
 var $305$0=($dc_0_rp_1_i$0<<2)|(0>>>30);
 var $305$1=($dc_0_rp_1_i$1<<2)|($dc_0_rp_1_i$0>>>30);
 var $$etemp$8$0=-32;
 var $$etemp$8$1=-1;
 var $306$0=_i64Add($305$0,$305$1,$$etemp$8$0,$$etemp$8$1);var $306$1=tempRet0;
 var $307$0=_i64Add($306$0,$306$1,$e2_0_i$0,$e2_0_i$1);var $307$1=tempRet0;
 var $308=($x_3_lcssa_i|0)==0;
 if($308){label=114;break;}else{label=115;break;}
 case 114: 
 var $310=($sign_0|0);
 var $311=($310)*(0);
 var $_0=$311;label=273;break;
 case 115: 
 var $313=(((-$emin_0_ph))|0);
 var $314$0=$313;
 var $314$1=0;
 var $315=(($307$1|0) > ($314$1|0)) | (((($307$1|0) == ($314$1|0) & ($307$0>>>0) >  ($314$0>>>0))));
 if($315){label=116;break;}else{label=117;break;}
 case 116: 
 var $317=___errno_location();
 HEAP32[(($317)>>2)]=34;
 var $318=($sign_0|0);
 var $319=($318)*((1.7976931348623157e+308));
 var $320=($319)*((1.7976931348623157e+308));
 var $_0=$320;label=273;break;
 case 117: 
 var $322=((($emin_0_ph)-(106))|0);
 var $323$0=$322;
 var $323$1=((((($322|0)<0))|0)?-1:0);
 var $324=(($307$1|0) < ($323$1|0)) | (((($307$1|0) == ($323$1|0) & ($307$0>>>0) <  ($323$0>>>0))));
 if($324){label=119;break;}else{label=118;break;}
 case 118: 
 var $325=($x_3_lcssa_i|0)>-1;
 if($325){var $x_48_i=$x_3_lcssa_i;var $y_39_i=$y_0_i;var $e2_110_i$1=$307$1;var $e2_110_i$0=$307$0;label=120;break;}else{var $x_4_lcssa_i=$x_3_lcssa_i;var $y_3_lcssa_i=$y_0_i;var $e2_1_lcssa_i$1=$307$1;var $e2_1_lcssa_i$0=$307$0;label=123;break;}
 case 119: 
 var $327=___errno_location();
 HEAP32[(($327)>>2)]=34;
 var $328=($sign_0|0);
 var $329=($328)*((2.2250738585072014e-308));
 var $330=($329)*((2.2250738585072014e-308));
 var $_0=$330;label=273;break;
 case 120: 
 var $e2_110_i$0;
 var $e2_110_i$1;
 var $y_39_i;
 var $x_48_i;
 var $331=$y_39_i<(0.5);
 var $332=$x_48_i<<1;
 if($331){var $_pn_i=$y_39_i;var $x_5_i=$332;label=122;break;}else{label=121;break;}
 case 121: 
 var $334=$332|1;
 var $335=($y_39_i)-(1);
 var $_pn_i=$335;var $x_5_i=$334;label=122;break;
 case 122: 
 var $x_5_i;
 var $_pn_i;
 var $y_4_i=($y_39_i)+($_pn_i);
 var $$etemp$9$0=-1;
 var $$etemp$9$1=-1;
 var $337$0=_i64Add($e2_110_i$0,$e2_110_i$1,$$etemp$9$0,$$etemp$9$1);var $337$1=tempRet0;
 var $338=($x_5_i|0)>-1;
 if($338){var $x_48_i=$x_5_i;var $y_39_i=$y_4_i;var $e2_110_i$1=$337$1;var $e2_110_i$0=$337$0;label=120;break;}else{var $x_4_lcssa_i=$x_5_i;var $y_3_lcssa_i=$y_4_i;var $e2_1_lcssa_i$1=$337$1;var $e2_1_lcssa_i$0=$337$0;label=123;break;}
 case 123: 
 var $e2_1_lcssa_i$0;
 var $e2_1_lcssa_i$1;
 var $y_3_lcssa_i;
 var $x_4_lcssa_i;
 var $339$0=$bits_0_ph;
 var $339$1=0;
 var $340$0=$emin_0_ph;
 var $340$1=((((($emin_0_ph|0)<0))|0)?-1:0);
 var $$etemp$10$0=32;
 var $$etemp$10$1=0;
 var $341$0=_i64Subtract($$etemp$10$0,$$etemp$10$1,$340$0,$340$1);var $341$1=tempRet0;
 var $342$0=_i64Add($e2_1_lcssa_i$0,$e2_1_lcssa_i$1,$341$0,$341$1);var $342$1=tempRet0;
 var $343=(($339$1|0) > ($342$1|0)) | (((($339$1|0) == ($342$1|0) & ($339$0>>>0) >  ($342$0>>>0))));
 if($343){label=124;break;}else{var $_02_i=$bits_0_ph;label=125;break;}
 case 124: 
 var $345$0=$342$0;
 var $345=$345$0;
 var $346=($345|0)<0;
 var $__i=($346?0:$345);
 var $_02_i=$__i;label=125;break;
 case 125: 
 var $_02_i;
 var $348=($_02_i|0)<53;
 if($348){label=127;break;}else{label=126;break;}
 case 126: 
 var $_pre_i=($sign_0|0);
 var $y_5_i=$y_3_lcssa_i;var $x_6_i=$x_4_lcssa_i;var $bias_07_i=0;var $_pre_phi_i=$_pre_i;label=129;break;
 case 127: 
 var $350=(((84)-($_02_i))|0);
 var $351=_scalbn(1,$350);
 var $352=($sign_0|0);
 var $353=_copysignl($351,$352);
 var $354=($_02_i|0)<32;
 var $355=$y_3_lcssa_i!=0;
 var $or_cond4_i=$354&$355;
 if($or_cond4_i){label=128;break;}else{var $y_5_i=$y_3_lcssa_i;var $x_6_i=$x_4_lcssa_i;var $bias_07_i=$353;var $_pre_phi_i=$352;label=129;break;}
 case 128: 
 var $357=$x_4_lcssa_i&1;
 var $358=($357|0)==0;
 var $359=$357^1;
 var $_x_4_i=((($359)+($x_4_lcssa_i))|0);
 var $_y_3_i=($358?0:$y_3_lcssa_i);
 var $y_5_i=$_y_3_i;var $x_6_i=$_x_4_i;var $bias_07_i=$353;var $_pre_phi_i=$352;label=129;break;
 case 129: 
 var $_pre_phi_i;
 var $bias_07_i;
 var $x_6_i;
 var $y_5_i;
 var $360=($x_6_i>>>0);
 var $361=($_pre_phi_i)*($360);
 var $362=($bias_07_i)+($361);
 var $363=($_pre_phi_i)*($y_5_i);
 var $364=($363)+($362);
 var $365=($364)-($bias_07_i);
 var $366=$365!=0;
 if($366){label=131;break;}else{label=130;break;}
 case 130: 
 var $368=___errno_location();
 HEAP32[(($368)>>2)]=34;
 label=131;break;
 case 131: 
 var $370$0=$e2_1_lcssa_i$0;
 var $370=$370$0;
 var $371=_scalbnl($365,$370);
 var $_0=$371;label=273;break;
 case 132: 
 var $373=HEAP32[(($4)>>2)];
 var $374=($373|0)==0;
 if($374){var $c_6=48;label=134;break;}else{label=133;break;}
 case 133: 
 var $376=HEAP32[(($3)>>2)];
 var $377=((($376)-(1))|0);
 HEAP32[(($3)>>2)]=$377;
 var $c_6=48;label=134;break;
 case 134: 
 var $c_6;
 var $379=$x_i;
 var $$etemp$11$0=512;
 var $$etemp$11$1=0;

 var $sum_i=((($emin_0_ph)+($bits_0_ph))|0);
 var $380=(((-$sum_i))|0);
 var $_08_i=$c_6;var $gotdig_0_i9=0;label=135;break;
 case 135: 
 var $gotdig_0_i9;
 var $_08_i;
 if(($_08_i|0)==48){ label=136;break;}else if(($_08_i|0)==46){ label=139;break;}else{var $_2_i=$_08_i;var $gotrad_0_i12=0;var $gotdig_2_i11=$gotdig_0_i9;var $lrp_1_i$1=0;var $lrp_1_i$0=0;label=148;break;}
 case 136: 
 var $382=HEAP32[(($3)>>2)];
 var $383=HEAP32[(($4)>>2)];
 var $384=($382>>>0)<($383>>>0);
 if($384){label=137;break;}else{label=138;break;}
 case 137: 
 var $386=(($382+1)|0);
 HEAP32[(($3)>>2)]=$386;
 var $387=HEAP8[(($382)>>0)];
 var $388=($387&255);
 var $_08_i=$388;var $gotdig_0_i9=1;label=135;break;
 case 138: 
 var $390=___shgetc($f);
 var $_08_i=$390;var $gotdig_0_i9=1;label=135;break;
 case 139: 
 var $392=HEAP32[(($3)>>2)];
 var $393=HEAP32[(($4)>>2)];
 var $394=($392>>>0)<($393>>>0);
 if($394){label=140;break;}else{label=141;break;}
 case 140: 
 var $396=(($392+1)|0);
 HEAP32[(($3)>>2)]=$396;
 var $397=HEAP8[(($392)>>0)];
 var $398=($397&255);
 var $_1_ph_i=$398;label=142;break;
 case 141: 
 var $400=___shgetc($f);
 var $_1_ph_i=$400;label=142;break;
 case 142: 
 var $_1_ph_i;
 var $401=($_1_ph_i|0)==48;
 if($401){var $lrp_0110_i$1=-1;var $lrp_0110_i$0=-1;label=143;break;}else{var $_2_i=$_1_ph_i;var $gotrad_0_i12=1;var $gotdig_2_i11=$gotdig_0_i9;var $lrp_1_i$1=0;var $lrp_1_i$0=0;label=148;break;}
 case 143: 
 var $lrp_0110_i$0;
 var $lrp_0110_i$1;
 var $402=HEAP32[(($3)>>2)];
 var $403=HEAP32[(($4)>>2)];
 var $404=($402>>>0)<($403>>>0);
 if($404){label=144;break;}else{label=145;break;}
 case 144: 
 var $406=(($402+1)|0);
 HEAP32[(($3)>>2)]=$406;
 var $407=HEAP8[(($402)>>0)];
 var $408=($407&255);
 var $_1_be_i=$408;label=146;break;
 case 145: 
 var $410=___shgetc($f);
 var $_1_be_i=$410;label=146;break;
 case 146: 
 var $_1_be_i;
 var $411=($_1_be_i|0)==48;
 if($411){label=147;break;}else{var $_2_i=$_1_be_i;var $gotrad_0_i12=1;var $gotdig_2_i11=1;var $lrp_1_i$1=$lrp_0110_i$1;var $lrp_1_i$0=$lrp_0110_i$0;label=148;break;}
 case 147: 
 var $$etemp$12$0=-1;
 var $$etemp$12$1=-1;
 var $phitmp_i10$0=_i64Add($lrp_0110_i$0,$lrp_0110_i$1,$$etemp$12$0,$$etemp$12$1);var $phitmp_i10$1=tempRet0;
 var $lrp_0110_i$1=$phitmp_i10$1;var $lrp_0110_i$0=$phitmp_i10$0;label=143;break;
 case 148: 
 var $lrp_1_i$0;
 var $lrp_1_i$1;
 var $gotdig_2_i11;
 var $gotrad_0_i12;
 var $_2_i;
 var $412=(($x_i)|0);
 HEAP32[(($412)>>2)]=0;
 var $413=((($_2_i)-(48))|0);
 var $414=($413>>>0)<10;
 var $415=($_2_i|0)==46;
 var $or_cond789_i=$414|$415;
 if($or_cond789_i){label=149;break;}else{var $lrp_2_lcssa_i$1=$lrp_1_i$1;var $lrp_2_lcssa_i$0=$lrp_1_i$0;var $dc_0_lcssa_i$1=0;var $dc_0_lcssa_i$0=0;var $lnz_0_lcssa_i=0;var $gotdig_3_lcssa_i=$gotdig_2_i11;var $gotrad_1_lcssa_i=$gotrad_0_i12;var $k_0_lcssa_i=0;var $j_0_lcssa_i=0;var $_3_lcssa_i=$_2_i;label=162;break;}
 case 149: 
 var $416=(($x_i+496)|0);
 var $lrp_290_i$1=$lrp_1_i$1;var $lrp_290_i$0=$lrp_1_i$0;var $dc_091_i$1=0;var $dc_091_i$0=0;var $lnz_092_i=0;var $gotdig_393_i=$gotdig_2_i11;var $gotrad_194_i=$gotrad_0_i12;var $k_095_i=0;var $j_096_i=0;var $_397_i=$_2_i;var $418=$413;var $417=$415;label=150;break;
 case 150: 
 var $417;
 var $418;
 var $_397_i;
 var $j_096_i;
 var $k_095_i;
 var $gotrad_194_i;
 var $gotdig_393_i;
 var $lnz_092_i;
 var $dc_091_i$0;
 var $dc_091_i$1;
 var $lrp_290_i$0;
 var $lrp_290_i$1;
 if($417){label=151;break;}else{label=152;break;}
 case 151: 
 var $cond_i=($gotrad_194_i|0)==0;
 if($cond_i){var $j_2_i=$j_096_i;var $k_2_i=$k_095_i;var $gotrad_2_i=1;var $gotdig_4_i=$gotdig_393_i;var $lnz_2_i=$lnz_092_i;var $dc_1_i14$1=$dc_091_i$1;var $dc_1_i14$0=$dc_091_i$0;var $lrp_3_i$1=$dc_091_i$1;var $lrp_3_i$0=$dc_091_i$0;label=158;break;}else{var $lrp_4_i$1=$lrp_290_i$1;var $lrp_4_i$0=$lrp_290_i$0;var $dc_077_i$1=$dc_091_i$1;var $dc_077_i$0=$dc_091_i$0;var $lnz_079_i=$lnz_092_i;var $gotdig_381_i=$gotdig_393_i;var $k_084_i=$k_095_i;var $j_086_i=$j_096_i;var $_388_i=$_397_i;label=163;break;}
 case 152: 
 var $421=($k_095_i|0)<125;
 var $$etemp$13$0=1;
 var $$etemp$13$1=0;
 var $422$0=_i64Add($dc_091_i$0,$dc_091_i$1,$$etemp$13$0,$$etemp$13$1);var $422$1=tempRet0;
 var $423=($_397_i|0)!=48;
 if($421){label=153;break;}else{label=156;break;}
 case 153: 
 var $425$0=$422$0;
 var $425=$425$0;
 var $_lnz_0_i=($423?$425:$lnz_092_i);
 var $426=($j_096_i|0)==0;
 var $427=(($x_i+($k_095_i<<2))|0);
 if($426){var $storemerge_i=$418;label=155;break;}else{label=154;break;}
 case 154: 
 var $429=HEAP32[(($427)>>2)];
 var $430=((($429)*(10))&-1);
 var $431=((($_397_i)-(48))|0);
 var $432=((($431)+($430))|0);
 var $storemerge_i=$432;label=155;break;
 case 155: 
 var $storemerge_i;
 HEAP32[(($427)>>2)]=$storemerge_i;
 var $434=((($j_096_i)+(1))|0);
 var $435=($434|0)==9;
 var $436=($435&1);
 var $_k_0_i=((($436)+($k_095_i))|0);
 var $_10_i=($435?0:$434);
 var $j_2_i=$_10_i;var $k_2_i=$_k_0_i;var $gotrad_2_i=$gotrad_194_i;var $gotdig_4_i=1;var $lnz_2_i=$_lnz_0_i;var $dc_1_i14$1=$422$1;var $dc_1_i14$0=$422$0;var $lrp_3_i$1=$lrp_290_i$1;var $lrp_3_i$0=$lrp_290_i$0;label=158;break;
 case 156: 
 if($423){label=157;break;}else{var $j_2_i=$j_096_i;var $k_2_i=$k_095_i;var $gotrad_2_i=$gotrad_194_i;var $gotdig_4_i=$gotdig_393_i;var $lnz_2_i=$lnz_092_i;var $dc_1_i14$1=$422$1;var $dc_1_i14$0=$422$0;var $lrp_3_i$1=$lrp_290_i$1;var $lrp_3_i$0=$lrp_290_i$0;label=158;break;}
 case 157: 
 var $439=HEAP32[(($416)>>2)];
 var $440=$439|1;
 HEAP32[(($416)>>2)]=$440;
 var $j_2_i=$j_096_i;var $k_2_i=$k_095_i;var $gotrad_2_i=$gotrad_194_i;var $gotdig_4_i=$gotdig_393_i;var $lnz_2_i=$lnz_092_i;var $dc_1_i14$1=$422$1;var $dc_1_i14$0=$422$0;var $lrp_3_i$1=$lrp_290_i$1;var $lrp_3_i$0=$lrp_290_i$0;label=158;break;
 case 158: 
 var $lrp_3_i$0;
 var $lrp_3_i$1;
 var $dc_1_i14$0;
 var $dc_1_i14$1;
 var $lnz_2_i;
 var $gotdig_4_i;
 var $gotrad_2_i;
 var $k_2_i;
 var $j_2_i;
 var $441=HEAP32[(($3)>>2)];
 var $442=HEAP32[(($4)>>2)];
 var $443=($441>>>0)<($442>>>0);
 if($443){label=159;break;}else{label=160;break;}
 case 159: 
 var $445=(($441+1)|0);
 HEAP32[(($3)>>2)]=$445;
 var $446=HEAP8[(($441)>>0)];
 var $447=($446&255);
 var $_3_be_i=$447;label=161;break;
 case 160: 
 var $449=___shgetc($f);
 var $_3_be_i=$449;label=161;break;
 case 161: 
 var $_3_be_i;
 var $450=((($_3_be_i)-(48))|0);
 var $451=($450>>>0)<10;
 var $452=($_3_be_i|0)==46;
 var $or_cond7_i=$451|$452;
 if($or_cond7_i){var $lrp_290_i$1=$lrp_3_i$1;var $lrp_290_i$0=$lrp_3_i$0;var $dc_091_i$1=$dc_1_i14$1;var $dc_091_i$0=$dc_1_i14$0;var $lnz_092_i=$lnz_2_i;var $gotdig_393_i=$gotdig_4_i;var $gotrad_194_i=$gotrad_2_i;var $k_095_i=$k_2_i;var $j_096_i=$j_2_i;var $_397_i=$_3_be_i;var $418=$450;var $417=$452;label=150;break;}else{var $lrp_2_lcssa_i$1=$lrp_3_i$1;var $lrp_2_lcssa_i$0=$lrp_3_i$0;var $dc_0_lcssa_i$1=$dc_1_i14$1;var $dc_0_lcssa_i$0=$dc_1_i14$0;var $lnz_0_lcssa_i=$lnz_2_i;var $gotdig_3_lcssa_i=$gotdig_4_i;var $gotrad_1_lcssa_i=$gotrad_2_i;var $k_0_lcssa_i=$k_2_i;var $j_0_lcssa_i=$j_2_i;var $_3_lcssa_i=$_3_be_i;label=162;break;}
 case 162: 
 var $_3_lcssa_i;
 var $j_0_lcssa_i;
 var $k_0_lcssa_i;
 var $gotrad_1_lcssa_i;
 var $gotdig_3_lcssa_i;
 var $lnz_0_lcssa_i;
 var $dc_0_lcssa_i$0;
 var $dc_0_lcssa_i$1;
 var $lrp_2_lcssa_i$0;
 var $lrp_2_lcssa_i$1;
 var $453=($gotrad_1_lcssa_i|0)==0;
 var $dc_0_lrp_2_i$0=($453?$dc_0_lcssa_i$0:$lrp_2_lcssa_i$0);
 var $dc_0_lrp_2_i$1=($453?$dc_0_lcssa_i$1:$lrp_2_lcssa_i$1);
 var $lrp_4_i$1=$dc_0_lrp_2_i$1;var $lrp_4_i$0=$dc_0_lrp_2_i$0;var $dc_077_i$1=$dc_0_lcssa_i$1;var $dc_077_i$0=$dc_0_lcssa_i$0;var $lnz_079_i=$lnz_0_lcssa_i;var $gotdig_381_i=$gotdig_3_lcssa_i;var $k_084_i=$k_0_lcssa_i;var $j_086_i=$j_0_lcssa_i;var $_388_i=$_3_lcssa_i;label=163;break;
 case 163: 
 var $_388_i;
 var $j_086_i;
 var $k_084_i;
 var $gotdig_381_i;
 var $lnz_079_i;
 var $dc_077_i$0;
 var $dc_077_i$1;
 var $lrp_4_i$0;
 var $lrp_4_i$1;
 var $454=($gotdig_381_i|0)!=0;
 if($454){label=164;break;}else{label=171;break;}
 case 164: 
 var $456=$_388_i|32;
 var $457=($456|0)==101;
 if($457){label=165;break;}else{label=171;break;}
 case 165: 
 var $459$0=_scanexp($f,$pok);
 var $459$1=tempRet0;
 var $$etemp$14$0=0;
 var $$etemp$14$1=-2147483648;
 var $460=(($459$0|0) == ($$etemp$14$0|0)) & (($459$1|0) == ($$etemp$14$1|0));
 if($460){label=166;break;}else{var $e10_0_i$1=$459$1;var $e10_0_i$0=$459$0;label=170;break;}
 case 166: 
 if($58){label=169;break;}else{label=167;break;}
 case 167: 
 var $463=HEAP32[(($4)>>2)];
 var $464=($463|0)==0;
 if($464){var $e10_0_i$1=0;var $e10_0_i$0=0;label=170;break;}else{label=168;break;}
 case 168: 
 var $466=HEAP32[(($3)>>2)];
 var $467=((($466)-(1))|0);
 HEAP32[(($3)>>2)]=$467;
 var $e10_0_i$1=0;var $e10_0_i$0=0;label=170;break;
 case 169: 
 ___shlim($f,0);
 var $_0=0;label=273;break;
 case 170: 
 var $e10_0_i$0;
 var $e10_0_i$1;
 var $470$0=_i64Add($e10_0_i$0,$e10_0_i$1,$lrp_4_i$0,$lrp_4_i$1);var $470$1=tempRet0;
 var $lrp_5_i$1=$470$1;var $lrp_5_i$0=$470$0;label=174;break;
 case 171: 
 var $472=($_388_i|0)>-1;
 if($472){label=172;break;}else{var $lrp_5_i$1=$lrp_4_i$1;var $lrp_5_i$0=$lrp_4_i$0;label=174;break;}
 case 172: 
 var $474=HEAP32[(($4)>>2)];
 var $475=($474|0)==0;
 if($475){var $lrp_5_i$1=$lrp_4_i$1;var $lrp_5_i$0=$lrp_4_i$0;label=174;break;}else{label=173;break;}
 case 173: 
 var $477=HEAP32[(($3)>>2)];
 var $478=((($477)-(1))|0);
 HEAP32[(($3)>>2)]=$478;
 var $lrp_5_i$1=$lrp_4_i$1;var $lrp_5_i$0=$lrp_4_i$0;label=174;break;
 case 174: 
 var $lrp_5_i$0;
 var $lrp_5_i$1;
 if($454){label=176;break;}else{label=175;break;}
 case 175: 
 var $481=___errno_location();
 HEAP32[(($481)>>2)]=22;
 ___shlim($f,0);
 var $_0=0;label=273;break;
 case 176: 
 var $483=HEAP32[(($412)>>2)];
 var $484=($483|0)==0;
 if($484){label=177;break;}else{label=178;break;}
 case 177: 
 var $486=($sign_0|0);
 var $487=($486)*(0);
 var $_0=$487;label=273;break;
 case 178: 
 var $489=(($lrp_5_i$0|0) == ($dc_077_i$0|0)) & (($lrp_5_i$1|0) == ($dc_077_i$1|0));
 var $$etemp$15$0=10;
 var $$etemp$15$1=0;
 var $490=(($dc_077_i$1|0) < ($$etemp$15$1|0)) | (((($dc_077_i$1|0) == ($$etemp$15$1|0) & ($dc_077_i$0>>>0) <  ($$etemp$15$0>>>0))));
 var $or_cond_i15=$489&$490;
 if($or_cond_i15){label=179;break;}else{label=182;break;}
 case 179: 
 var $492=($bits_0_ph>>>0)>30;
 if($492){label=181;break;}else{label=180;break;}
 case 180: 
 var $494=$483>>>($bits_0_ph>>>0);
 var $495=($494|0)==0;
 if($495){label=181;break;}else{label=182;break;}
 case 181: 
 var $497=($sign_0|0);
 var $498=($483>>>0);
 var $499=($497)*($498);
 var $_0=$499;label=273;break;
 case 182: 
 var $501=(((($emin_0_ph|0))/(-2))&-1);
 var $502$0=$501;
 var $502$1=((((($501|0)<0))|0)?-1:0);
 var $503=(($lrp_5_i$1|0) > ($502$1|0)) | (((($lrp_5_i$1|0) == ($502$1|0) & ($lrp_5_i$0>>>0) >  ($502$0>>>0))));
 if($503){label=183;break;}else{label=184;break;}
 case 183: 
 var $505=___errno_location();
 HEAP32[(($505)>>2)]=34;
 var $506=($sign_0|0);
 var $507=($506)*((1.7976931348623157e+308));
 var $508=($507)*((1.7976931348623157e+308));
 var $_0=$508;label=273;break;
 case 184: 
 var $510=((($emin_0_ph)-(106))|0);
 var $511$0=$510;
 var $511$1=((((($510|0)<0))|0)?-1:0);
 var $512=(($lrp_5_i$1|0) < ($511$1|0)) | (((($lrp_5_i$1|0) == ($511$1|0) & ($lrp_5_i$0>>>0) <  ($511$0>>>0))));
 if($512){label=185;break;}else{label=186;break;}
 case 185: 
 var $514=___errno_location();
 HEAP32[(($514)>>2)]=34;
 var $515=($sign_0|0);
 var $516=($515)*((2.2250738585072014e-308));
 var $517=($516)*((2.2250738585072014e-308));
 var $_0=$517;label=273;break;
 case 186: 
 var $519=($j_086_i|0)==0;
 if($519){var $k_3_i=$k_084_i;label=192;break;}else{label=187;break;}
 case 187: 
 var $520=($j_086_i|0)<9;
 if($520){label=188;break;}else{label=191;break;}
 case 188: 
 var $521=(($x_i+($k_084_i<<2))|0);
 var $_promoted_i=HEAP32[(($521)>>2)];
 var $j_371_i=$j_086_i;var $523=$_promoted_i;label=189;break;
 case 189: 
 var $523;
 var $j_371_i;
 var $524=((($523)*(10))&-1);
 var $525=((($j_371_i)+(1))|0);
 var $526=($525|0)<9;
 if($526){var $j_371_i=$525;var $523=$524;label=189;break;}else{label=190;break;}
 case 190: 
 HEAP32[(($521)>>2)]=$524;
 label=191;break;
 case 191: 
 var $528=((($k_084_i)+(1))|0);
 var $k_3_i=$528;label=192;break;
 case 192: 
 var $k_3_i;
 var $530$0=$lrp_5_i$0;
 var $530=$530$0;
 var $531=($lnz_079_i|0)<9;
 if($531){label=193;break;}else{label=201;break;}
 case 193: 
 var $533=($lnz_079_i|0)<=($530|0);
 var $534=($530|0)<18;
 var $or_cond3_i16=$533&$534;
 if($or_cond3_i16){label=194;break;}else{label=201;break;}
 case 194: 
 var $536=($530|0)==9;
 if($536){label=195;break;}else{label=196;break;}
 case 195: 
 var $538=($sign_0|0);
 var $539=HEAP32[(($412)>>2)];
 var $540=($539>>>0);
 var $541=($538)*($540);
 var $_0=$541;label=273;break;
 case 196: 
 var $543=($530|0)<9;
 if($543){label=197;break;}else{label=198;break;}
 case 197: 
 var $545=($sign_0|0);
 var $546=HEAP32[(($412)>>2)];
 var $547=($546>>>0);
 var $548=($545)*($547);
 var $549=(((8)-($530))|0);
 var $550=((2864+($549<<2))|0);
 var $551=HEAP32[(($550)>>2)];
 var $552=($551|0);
 var $553=($548)/($552);
 var $_0=$553;label=273;break;
 case 198: 
 var $555=((($530)*(-3))&-1);
 var $_neg20_i=((($bits_0_ph)+(27))|0);
 var $556=((($_neg20_i)+($555))|0);
 var $557=($556|0)>30;
 var $_pre_i17=HEAP32[(($412)>>2)];
 if($557){label=200;break;}else{label=199;break;}
 case 199: 
 var $559=$_pre_i17>>>($556>>>0);
 var $560=($559|0)==0;
 if($560){label=200;break;}else{label=201;break;}
 case 200: 
 var $561=($sign_0|0);
 var $562=($_pre_i17>>>0);
 var $563=($561)*($562);
 var $564=((($530)-(10))|0);
 var $565=((2864+($564<<2))|0);
 var $566=HEAP32[(($565)>>2)];
 var $567=($566|0);
 var $568=($563)*($567);
 var $_0=$568;label=273;break;
 case 201: 
 var $570=(((($530|0))%(9))&-1);
 var $571=($570|0)==0;
 if($571){var $a_2_ph40_i=0;var $z_1_ph39_i=$k_3_i;var $e2_0_ph_i=0;var $rp_2_ph38_i=$530;label=210;break;}else{label=202;break;}
 case 202: 
 var $573=($530|0)>-1;
 var $574=((($570)+(9))|0);
 var $575=($573?$570:$574);
 var $576=(((8)-($575))|0);
 var $577=((2864+($576<<2))|0);
 var $578=HEAP32[(($577)>>2)];
 var $579=($k_3_i|0)==0;
 if($579){var $z_0_i=0;var $a_0_lcssa161_i=0;var $rp_0_lcssa162_i=$530;label=209;break;}else{label=203;break;}
 case 203: 
 var $580=(((1000000000)/(($578|0)))&-1);
 var $rp_060_i=$530;var $a_061_i=0;var $k_462_i=0;var $carry_063_i=0;label=204;break;
 case 204: 
 var $carry_063_i;
 var $k_462_i;
 var $a_061_i;
 var $rp_060_i;
 var $581=(($x_i+($k_462_i<<2))|0);
 var $582=HEAP32[(($581)>>2)];
 var $583=(((($582>>>0))%(($578>>>0)))&-1);
 var $584=(((($582>>>0))/(($578>>>0)))&-1);
 var $585=((($584)+($carry_063_i))|0);
 HEAP32[(($581)>>2)]=$585;
 var $586=(Math_imul($583,$580)|0);
 var $587=($k_462_i|0)==($a_061_i|0);
 var $588=($585|0)==0;
 var $or_cond11_i=$587&$588;
 var $589=((($k_462_i)+(1))|0);
 if($or_cond11_i){label=205;break;}else{var $a_1_i=$a_061_i;var $rp_1_i18=$rp_060_i;label=206;break;}
 case 205: 
 var $591=$589&127;
 var $592=((($rp_060_i)-(9))|0);
 var $a_1_i=$591;var $rp_1_i18=$592;label=206;break;
 case 206: 
 var $rp_1_i18;
 var $a_1_i;
 var $593=($589|0)==($k_3_i|0);
 if($593){label=207;break;}else{var $rp_060_i=$rp_1_i18;var $a_061_i=$a_1_i;var $k_462_i=$589;var $carry_063_i=$586;label=204;break;}
 case 207: 
 var $594=($586|0)==0;
 if($594){var $z_0_i=$k_3_i;var $a_0_lcssa161_i=$a_1_i;var $rp_0_lcssa162_i=$rp_1_i18;label=209;break;}else{label=208;break;}
 case 208: 
 var $596=((($k_3_i)+(1))|0);
 var $597=(($x_i+($k_3_i<<2))|0);
 HEAP32[(($597)>>2)]=$586;
 var $z_0_i=$596;var $a_0_lcssa161_i=$a_1_i;var $rp_0_lcssa162_i=$rp_1_i18;label=209;break;
 case 209: 
 var $rp_0_lcssa162_i;
 var $a_0_lcssa161_i;
 var $z_0_i;
 var $598=(((9)-($575))|0);
 var $599=((($598)+($rp_0_lcssa162_i))|0);
 var $a_2_ph40_i=$a_0_lcssa161_i;var $z_1_ph39_i=$z_0_i;var $e2_0_ph_i=0;var $rp_2_ph38_i=$599;label=210;break;
 case 210: 
 var $rp_2_ph38_i;
 var $e2_0_ph_i;
 var $z_1_ph39_i;
 var $a_2_ph40_i;
 var $600=($rp_2_ph38_i|0)<18;
 var $601=(($x_i+($a_2_ph40_i<<2))|0);
 if($600){var $z_1_us_i=$z_1_ph39_i;var $e2_0_us_i=$e2_0_ph_i;label=212;break;}else{label=211;break;}
 case 211: 
 var $602=($rp_2_ph38_i|0)==18;
 if($602){var $z_1_us45_i=$z_1_ph39_i;var $e2_0_us44_i=$e2_0_ph_i;label=219;break;}else{var $a_3_ph_i=$a_2_ph40_i;var $z_5_ph_i=$z_1_ph39_i;var $e2_1_ph_i=$e2_0_ph_i;var $rp_3_ph33_i=$rp_2_ph38_i;label=243;break;}
 case 212: 
 var $e2_0_us_i;
 var $z_1_us_i;
 var $603=((($z_1_us_i)+(127))|0);
 var $carry1_0_us_i=0;var $k_5_in_us_i=$603;var $z_2_us_i=$z_1_us_i;label=213;break;
 case 213: 
 var $z_2_us_i;
 var $k_5_in_us_i;
 var $carry1_0_us_i;
 var $k_5_us_i=$k_5_in_us_i&127;
 var $605=(($x_i+($k_5_us_i<<2))|0);
 var $606=HEAP32[(($605)>>2)];
 var $607$0=$606;
 var $607$1=0;
 var $608$0=($607$0<<29)|(0>>>3);
 var $608$1=($607$1<<29)|($607$0>>>3);
 var $609$0=$carry1_0_us_i;
 var $609$1=0;
 var $610$0=_i64Add($608$0,$608$1,$609$0,$609$1);var $610$1=tempRet0;
 var $$etemp$16$0=1000000000;
 var $$etemp$16$1=0;
 var $611=(($610$1>>>0) > ($$etemp$16$1>>>0)) | (((($610$1>>>0) == ($$etemp$16$1>>>0) & ($610$0>>>0) >  ($$etemp$16$0>>>0))));
 var $extract_t19_us_i$0=$610$0;
 var $extract_t19_us_i=$extract_t19_us_i$0;
 if($611){label=214;break;}else{var $carry1_1_us_i=0;var $_sink_off0_us_i=$extract_t19_us_i;label=215;break;}
 case 214: 
 var $$etemp$17$0=1000000000;
 var $$etemp$17$1=0;
 var $613$0=___udivdi3($610$0,$610$1,$$etemp$17$0,$$etemp$17$1);var $613$1=tempRet0;
 var $614$0=$613$0;
 var $614=$614$0;
 var $$etemp$18$0=1000000000;
 var $$etemp$18$1=0;
 var $615$0=___uremdi3($610$0,$610$1,$$etemp$18$0,$$etemp$18$1);var $615$1=tempRet0;
 var $extract_t_us_i$0=$615$0;
 var $extract_t_us_i=$extract_t_us_i$0;
 var $carry1_1_us_i=$614;var $_sink_off0_us_i=$extract_t_us_i;label=215;break;
 case 215: 
 var $_sink_off0_us_i;
 var $carry1_1_us_i;
 HEAP32[(($605)>>2)]=$_sink_off0_us_i;
 var $617=((($z_2_us_i)+(127))|0);
 var $618=$617&127;
 var $619=($k_5_us_i|0)!=($618|0);
 var $620=($k_5_us_i|0)==($a_2_ph40_i|0);
 var $or_cond12_us_i=$619|$620;
 if($or_cond12_us_i){var $z_3_us_i=$z_2_us_i;label=217;break;}else{label=216;break;}
 case 216: 
 var $622=($_sink_off0_us_i|0)==0;
 var $k_5_z_2_us_i=($622?$k_5_us_i:$z_2_us_i);
 var $z_3_us_i=$k_5_z_2_us_i;label=217;break;
 case 217: 
 var $z_3_us_i;
 var $624=((($k_5_us_i)-(1))|0);
 if($620){label=218;break;}else{var $carry1_0_us_i=$carry1_1_us_i;var $k_5_in_us_i=$624;var $z_2_us_i=$z_3_us_i;label=213;break;}
 case 218: 
 var $626=((($e2_0_us_i)-(29))|0);
 var $627=($carry1_1_us_i|0)==0;
 if($627){var $z_1_us_i=$z_3_us_i;var $e2_0_us_i=$626;label=212;break;}else{var $_lcssa43_i=$626;var $z_3_lcssa_lcssa_i=$z_3_us_i;var $carry1_1_lcssa_lcssa_i=$carry1_1_us_i;label=227;break;}
 case 219: 
 var $e2_0_us44_i;
 var $z_1_us45_i;
 var $628=HEAP32[(($601)>>2)];
 var $629=($628>>>0)<9007199;
 if($629){label=220;break;}else{var $a_3_ph_i=$a_2_ph40_i;var $z_5_ph_i=$z_1_us45_i;var $e2_1_ph_i=$e2_0_us44_i;var $rp_3_ph33_i=18;label=243;break;}
 case 220: 
 var $630=((($z_1_us45_i)+(127))|0);
 var $carry1_0_us49_i=0;var $k_5_in_us48_i=$630;var $z_2_us47_i=$z_1_us45_i;label=221;break;
 case 221: 
 var $z_2_us47_i;
 var $k_5_in_us48_i;
 var $carry1_0_us49_i;
 var $k_5_us50_i=$k_5_in_us48_i&127;
 var $632=(($x_i+($k_5_us50_i<<2))|0);
 var $633=HEAP32[(($632)>>2)];
 var $634$0=$633;
 var $634$1=0;
 var $635$0=($634$0<<29)|(0>>>3);
 var $635$1=($634$1<<29)|($634$0>>>3);
 var $636$0=$carry1_0_us49_i;
 var $636$1=0;
 var $637$0=_i64Add($635$0,$635$1,$636$0,$636$1);var $637$1=tempRet0;
 var $$etemp$19$0=1000000000;
 var $$etemp$19$1=0;
 var $638=(($637$1>>>0) > ($$etemp$19$1>>>0)) | (((($637$1>>>0) == ($$etemp$19$1>>>0) & ($637$0>>>0) >  ($$etemp$19$0>>>0))));
 var $extract_t19_us51_i$0=$637$0;
 var $extract_t19_us51_i=$extract_t19_us51_i$0;
 if($638){label=222;break;}else{var $carry1_1_us54_i=0;var $_sink_off0_us53_i=$extract_t19_us51_i;label=223;break;}
 case 222: 
 var $$etemp$20$0=1000000000;
 var $$etemp$20$1=0;
 var $640$0=___udivdi3($637$0,$637$1,$$etemp$20$0,$$etemp$20$1);var $640$1=tempRet0;
 var $641$0=$640$0;
 var $641=$641$0;
 var $$etemp$21$0=1000000000;
 var $$etemp$21$1=0;
 var $642$0=___uremdi3($637$0,$637$1,$$etemp$21$0,$$etemp$21$1);var $642$1=tempRet0;
 var $extract_t_us52_i$0=$642$0;
 var $extract_t_us52_i=$extract_t_us52_i$0;
 var $carry1_1_us54_i=$641;var $_sink_off0_us53_i=$extract_t_us52_i;label=223;break;
 case 223: 
 var $_sink_off0_us53_i;
 var $carry1_1_us54_i;
 HEAP32[(($632)>>2)]=$_sink_off0_us53_i;
 var $644=((($z_2_us47_i)+(127))|0);
 var $645=$644&127;
 var $646=($k_5_us50_i|0)!=($645|0);
 var $647=($k_5_us50_i|0)==($a_2_ph40_i|0);
 var $or_cond12_us55_i=$646|$647;
 if($or_cond12_us55_i){var $z_3_us57_i=$z_2_us47_i;label=225;break;}else{label=224;break;}
 case 224: 
 var $649=($_sink_off0_us53_i|0)==0;
 var $k_5_z_2_us56_i=($649?$k_5_us50_i:$z_2_us47_i);
 var $z_3_us57_i=$k_5_z_2_us56_i;label=225;break;
 case 225: 
 var $z_3_us57_i;
 var $651=((($k_5_us50_i)-(1))|0);
 if($647){label=226;break;}else{var $carry1_0_us49_i=$carry1_1_us54_i;var $k_5_in_us48_i=$651;var $z_2_us47_i=$z_3_us57_i;label=221;break;}
 case 226: 
 var $653=((($e2_0_us44_i)-(29))|0);
 var $654=($carry1_1_us54_i|0)==0;
 if($654){var $z_1_us45_i=$z_3_us57_i;var $e2_0_us44_i=$653;label=219;break;}else{var $_lcssa43_i=$653;var $z_3_lcssa_lcssa_i=$z_3_us57_i;var $carry1_1_lcssa_lcssa_i=$carry1_1_us54_i;label=227;break;}
 case 227: 
 var $carry1_1_lcssa_lcssa_i;
 var $z_3_lcssa_lcssa_i;
 var $_lcssa43_i;
 var $655=((($rp_2_ph38_i)+(9))|0);
 var $656=((($a_2_ph40_i)+(127))|0);
 var $657=$656&127;
 var $658=($657|0)==($z_3_lcssa_lcssa_i|0);
 if($658){label=228;break;}else{var $z_4_i=$z_3_lcssa_lcssa_i;label=229;break;}
 case 228: 
 var $660=((($z_3_lcssa_lcssa_i)+(127))|0);
 var $661=$660&127;
 var $662=(($x_i+($661<<2))|0);
 var $663=HEAP32[(($662)>>2)];
 var $664=((($z_3_lcssa_lcssa_i)+(126))|0);
 var $665=$664&127;
 var $666=(($x_i+($665<<2))|0);
 var $667=HEAP32[(($666)>>2)];
 var $668=$667|$663;
 HEAP32[(($666)>>2)]=$668;
 var $z_4_i=$661;label=229;break;
 case 229: 
 var $z_4_i;
 var $670=(($x_i+($657<<2))|0);
 HEAP32[(($670)>>2)]=$carry1_1_lcssa_lcssa_i;
 var $a_2_ph40_i=$657;var $z_1_ph39_i=$z_4_i;var $e2_0_ph_i=$_lcssa43_i;var $rp_2_ph38_i=$655;label=210;break;
 case 230: 
 var $e2_1_i;
 var $a_3_i;
 var $i_025_i=0;label=232;break;
 case 231: 
 var $672=($685|0)<2;
 if($672){var $i_025_i=$685;label=232;break;}else{var $i_1_i=$685;label=235;break;}
 case 232: 
 var $i_025_i;
 var $674=((($i_025_i)+($a_3_i))|0);
 var $675=$674&127;
 var $676=($675|0)==($z_5_ph_i|0);
 if($676){var $i_1_i=2;label=235;break;}else{label=233;break;}
 case 233: 
 var $678=(($x_i+($675<<2))|0);
 var $679=HEAP32[(($678)>>2)];
 var $680=((2856+($i_025_i<<2))|0);
 var $681=HEAP32[(($680)>>2)];
 var $682=($679>>>0)<($681>>>0);
 if($682){var $i_1_i=2;label=235;break;}else{label=234;break;}
 case 234: 
 var $684=($679>>>0)>($681>>>0);
 var $685=((($i_025_i)+(1))|0);
 if($684){var $i_1_i=$i_025_i;label=235;break;}else{label=231;break;}
 case 235: 
 var $i_1_i;
 var $687=($i_1_i|0)==2;
 var $or_cond13_i=$687&$718;
 if($or_cond13_i){label=236;break;}else{label=237;break;}
 case 236: 
 var $688=$a_3_i&127;
 var $689=($688|0)==($z_5_ph_i|0);
 if($689){label=246;break;}else{var $z_7_i=$z_5_ph_i;label=247;break;}
 case 237: 
 var $691=((($_14_i)+($e2_1_i))|0);
 var $692=($a_3_i|0)==($z_5_ph_i|0);
 if($692){var $a_3_i=$z_5_ph_i;var $e2_1_i=$691;label=230;break;}else{label=238;break;}
 case 238: 
 var $693=1<<$_14_i;
 var $694=((($693)-(1))|0);
 var $695=1000000000>>>($_14_i>>>0);
 var $rp_426_i=$rp_3_i_ph;var $a_427_i=$a_3_i;var $k_628_i=$a_3_i;var $carry3_030_i=0;label=239;break;
 case 239: 
 var $carry3_030_i;
 var $k_628_i;
 var $a_427_i;
 var $rp_426_i;
 var $696=(($x_i+($k_628_i<<2))|0);
 var $697=HEAP32[(($696)>>2)];
 var $698=$697&$694;
 var $699=$697>>>($_14_i>>>0);
 var $700=((($699)+($carry3_030_i))|0);
 HEAP32[(($696)>>2)]=$700;
 var $701=(Math_imul($698,$695)|0);
 var $702=($k_628_i|0)==($a_427_i|0);
 var $703=($700|0)==0;
 var $or_cond15_i=$702&$703;
 var $704=((($k_628_i)+(1))|0);
 var $705=$704&127;
 var $706=((($rp_426_i)-(9))|0);
 var $rp_5_i=($or_cond15_i?$706:$rp_426_i);
 var $a_5_i=($or_cond15_i?$705:$a_427_i);
 var $707=($705|0)==($z_5_ph_i|0);
 if($707){label=240;break;}else{var $rp_426_i=$rp_5_i;var $a_427_i=$a_5_i;var $k_628_i=$705;var $carry3_030_i=$701;label=239;break;}
 case 240: 
 var $708=($701|0)==0;
 if($708){var $a_3_i_ph=$a_5_i;var $e2_1_i_ph=$691;var $rp_3_i_ph=$rp_5_i;label=244;break;}else{label=241;break;}
 case 241: 
 var $710=($714|0)==($a_5_i|0);
 if($710){label=245;break;}else{label=242;break;}
 case 242: 
 var $712=(($x_i+($z_5_ph_i<<2))|0);
 HEAP32[(($712)>>2)]=$701;
 var $a_3_ph_i=$a_5_i;var $z_5_ph_i=$714;var $e2_1_ph_i=$691;var $rp_3_ph33_i=$rp_5_i;label=243;break;
 case 243: 
 var $rp_3_ph33_i;
 var $e2_1_ph_i;
 var $z_5_ph_i;
 var $a_3_ph_i;
 var $713=((($z_5_ph_i)+(1))|0);
 var $714=$713&127;
 var $715=((($z_5_ph_i)+(127))|0);
 var $716=$715&127;
 var $717=(($x_i+($716<<2))|0);
 var $a_3_i_ph=$a_3_ph_i;var $e2_1_i_ph=$e2_1_ph_i;var $rp_3_i_ph=$rp_3_ph33_i;label=244;break;
 case 244: 
 var $rp_3_i_ph;
 var $e2_1_i_ph;
 var $a_3_i_ph;
 var $718=($rp_3_i_ph|0)==18;
 var $719=($rp_3_i_ph|0)>27;
 var $_14_i=($719?9:1);
 var $a_3_i=$a_3_i_ph;var $e2_1_i=$e2_1_i_ph;label=230;break;
 case 245: 
 var $721=HEAP32[(($717)>>2)];
 var $722=$721|1;
 HEAP32[(($717)>>2)]=$722;
 var $a_3_i_ph=$a_5_i;var $e2_1_i_ph=$691;var $rp_3_i_ph=$rp_5_i;label=244;break;
 case 246: 
 var $724=((($714)-(1))|0);
 var $725=(($x_i+($724<<2))|0);
 HEAP32[(($725)>>2)]=0;
 var $z_7_i=$714;label=247;break;
 case 247: 
 var $z_7_i;
 var $727=(($x_i+($688<<2))|0);
 var $728=HEAP32[(($727)>>2)];
 var $729=($728>>>0);
 var $730=((($a_3_i)+(1))|0);
 var $731=$730&127;
 var $732=($731|0)==($z_7_i|0);
 if($732){label=271;break;}else{var $z_7_1_i=$z_7_i;label=272;break;}
 case 248: 
 var $734=($824|0)<0;
 var $__i22=($734?0:$824);
 var $_09_i=$__i22;var $denormal_0_i=1;label=249;break;
 case 249: 
 var $denormal_0_i;
 var $_09_i;
 var $736=($_09_i|0)<53;
 if($736){label=250;break;}else{var $bias_0_i=0;var $frac_0_i=0;var $y_1_i23=$822;label=251;break;}
 case 250: 
 var $738=(((105)-($_09_i))|0);
 var $739=_scalbn(1,$738);
 var $740=_copysignl($739,$822);
 var $741=(((53)-($_09_i))|0);
 var $742=_scalbn(1,$741);
 var $743=_fmodl($822,$742);
 var $744=($822)-($743);
 var $745=($740)+($744);
 var $bias_0_i=$740;var $frac_0_i=$743;var $y_1_i23=$745;label=251;break;
 case 251: 
 var $y_1_i23;
 var $frac_0_i;
 var $bias_0_i;
 var $747=((($a_3_i)+(2))|0);
 var $748=$747&127;
 var $749=($748|0)==($z_7_1_i|0);
 if($749){var $frac_2_i=$frac_0_i;label=264;break;}else{label=252;break;}
 case 252: 
 var $751=(($x_i+($748<<2))|0);
 var $752=HEAP32[(($751)>>2)];
 var $753=($752>>>0)<500000000;
 if($753){label=253;break;}else{label=256;break;}
 case 253: 
 var $755=($752|0)==0;
 if($755){label=254;break;}else{label=255;break;}
 case 254: 
 var $757=((($a_3_i)+(3))|0);
 var $758=$757&127;
 var $759=($758|0)==($z_7_1_i|0);
 if($759){var $frac_1_i=$frac_0_i;label=261;break;}else{label=255;break;}
 case 255: 
 var $761=($821)*((0.25));
 var $762=($761)+($frac_0_i);
 var $frac_1_i=$762;label=261;break;
 case 256: 
 var $764=($752>>>0)>500000000;
 if($764){label=257;break;}else{label=258;break;}
 case 257: 
 var $766=($821)*((0.75));
 var $767=($766)+($frac_0_i);
 var $frac_1_i=$767;label=261;break;
 case 258: 
 var $769=((($a_3_i)+(3))|0);
 var $770=$769&127;
 var $771=($770|0)==($z_7_1_i|0);
 if($771){label=259;break;}else{label=260;break;}
 case 259: 
 var $773=($821)*((0.5));
 var $774=($773)+($frac_0_i);
 var $frac_1_i=$774;label=261;break;
 case 260: 
 var $776=($821)*((0.75));
 var $777=($776)+($frac_0_i);
 var $frac_1_i=$777;label=261;break;
 case 261: 
 var $frac_1_i;
 var $779=(((53)-($_09_i))|0);
 var $780=($779|0)>1;
 if($780){label=262;break;}else{var $frac_2_i=$frac_1_i;label=264;break;}
 case 262: 
 var $782=_fmodl($frac_1_i,1);
 var $783=$782!=0;
 if($783){var $frac_2_i=$frac_1_i;label=264;break;}else{label=263;break;}
 case 263: 
 var $785=($frac_1_i)+(1);
 var $frac_2_i=$785;label=264;break;
 case 264: 
 var $frac_2_i;
 var $787=($y_1_i23)+($frac_2_i);
 var $788=($787)-($bias_0_i);
 var $789=$823&2147483647;
 var $790=(((-2)-($sum_i))|0);
 var $791=($789|0)>($790|0);
 if($791){label=265;break;}else{var $y_3_i=$788;var $e2_3_i=$e2_1_i;label=270;break;}
 case 265: 
 var $793=Math_abs($788);
 var $794=$793<9007199254740992;
 if($794){var $y_2_i24=$788;var $denormal_2_i=$denormal_0_i;var $e2_2_i=$e2_1_i;label=267;break;}else{label=266;break;}
 case 266: 
 var $796=($denormal_0_i|0)!=0;
 var $797=($_09_i|0)==($824|0);
 var $or_cond16_i=$796&$797;
 var $denormal_1_i=($or_cond16_i?0:$denormal_0_i);
 var $798=($788)*((0.5));
 var $799=((($e2_1_i)+(1))|0);
 var $y_2_i24=$798;var $denormal_2_i=$denormal_1_i;var $e2_2_i=$799;label=267;break;
 case 267: 
 var $e2_2_i;
 var $denormal_2_i;
 var $y_2_i24;
 var $801=((($e2_2_i)+(50))|0);
 var $802=($801|0)>($380|0);
 if($802){label=269;break;}else{label=268;break;}
 case 268: 
 var $804=($denormal_2_i|0)!=0;
 var $805=$frac_2_i!=0;
 var $or_cond17_i=$804&$805;
 if($or_cond17_i){label=269;break;}else{var $y_3_i=$y_2_i24;var $e2_3_i=$e2_2_i;label=270;break;}
 case 269: 
 var $807=___errno_location();
 HEAP32[(($807)>>2)]=34;
 var $y_3_i=$y_2_i24;var $e2_3_i=$e2_2_i;label=270;break;
 case 270: 
 var $e2_3_i;
 var $y_3_i;
 var $809=_scalbnl($y_3_i,$e2_3_i);
 var $_0=$809;label=273;break;
 case 271: 
 var $811=((($z_7_i)+(1))|0);
 var $812=$811&127;
 var $813=((($812)-(1))|0);
 var $814=(($x_i+($813<<2))|0);
 HEAP32[(($814)>>2)]=0;
 var $z_7_1_i=$812;label=272;break;
 case 272: 
 var $z_7_1_i;
 var $816=($729)*(1000000000);
 var $817=(($x_i+($731<<2))|0);
 var $818=HEAP32[(($817)>>2)];
 var $819=($818>>>0);
 var $820=($816)+($819);
 var $821=($sign_0|0);
 var $822=($821)*($820);
 var $823=((($e2_1_i)+(53))|0);
 var $824=((($823)-($emin_0_ph))|0);
 var $825=($824|0)<($bits_0_ph|0);
 if($825){label=248;break;}else{var $_09_i=$bits_0_ph;var $denormal_0_i=0;label=249;break;}
 case 273: 
 var $_0;
 STACKTOP=sp;return $_0;
  default: assert(0, "bad label: " + label);
 }

}


function _scanexp($f,$pok){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($f+4)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($f+100)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=($2>>>0)<($4>>>0);
 if($5){label=2;break;}else{label=3;break;}
 case 2: 
 var $7=(($2+1)|0);
 HEAP32[(($1)>>2)]=$7;
 var $8=HEAP8[(($2)>>0)];
 var $9=($8&255);
 var $13=$9;label=4;break;
 case 3: 
 var $11=___shgetc($f);
 var $13=$11;label=4;break;
 case 4: 
 var $13;
 var $14=($13|0)==45;
 if(($13|0)==45|($13|0)==43){ label=5;break;}else{var $neg_0=0;var $c_0=$13;label=11;break;}
 case 5: 
 var $15=($14&1);
 var $16=HEAP32[(($1)>>2)];
 var $17=HEAP32[(($3)>>2)];
 var $18=($16>>>0)<($17>>>0);
 if($18){label=6;break;}else{label=7;break;}
 case 6: 
 var $20=(($16+1)|0);
 HEAP32[(($1)>>2)]=$20;
 var $21=HEAP8[(($16)>>0)];
 var $22=($21&255);
 var $26=$22;label=8;break;
 case 7: 
 var $24=___shgetc($f);
 var $26=$24;label=8;break;
 case 8: 
 var $26;
 var $27=((($26)-(48))|0);
 var $28=($27>>>0)<10;
 var $29=($pok|0)==0;
 var $or_cond=$28|$29;
 if($or_cond){var $neg_0=$15;var $c_0=$26;label=11;break;}else{label=9;break;}
 case 9: 
 var $31=HEAP32[(($3)>>2)];
 var $32=($31|0)==0;
 if($32){var $neg_0=$15;var $c_0=$26;label=11;break;}else{label=10;break;}
 case 10: 
 var $34=HEAP32[(($1)>>2)];
 var $35=((($34)-(1))|0);
 HEAP32[(($1)>>2)]=$35;
 var $neg_0=$15;var $c_0=$26;label=11;break;
 case 11: 
 var $c_0;
 var $neg_0;
 var $37=((($c_0)-(48))|0);
 var $38=($37>>>0)>9;
 if($38){label=12;break;}else{var $c_18=$c_0;var $x_09=0;label=14;break;}
 case 12: 
 var $40=HEAP32[(($3)>>2)];
 var $41=($40|0)==0;
 if($41){var $_0$1=-2147483648;var $_0$0=0;label=32;break;}else{label=13;break;}
 case 13: 
 var $43=HEAP32[(($1)>>2)];
 var $44=((($43)-(1))|0);
 HEAP32[(($1)>>2)]=$44;
 var $_0$1=-2147483648;var $_0$0=0;label=32;break;
 case 14: 
 var $x_09;
 var $c_18;
 var $45=((($c_18)-(48))|0);
 var $46=((($45)+($x_09))|0);
 var $47=HEAP32[(($1)>>2)];
 var $48=HEAP32[(($3)>>2)];
 var $49=($47>>>0)<($48>>>0);
 if($49){label=15;break;}else{label=16;break;}
 case 15: 
 var $51=(($47+1)|0);
 HEAP32[(($1)>>2)]=$51;
 var $52=HEAP8[(($47)>>0)];
 var $53=($52&255);
 var $c_1_be=$53;label=17;break;
 case 16: 
 var $55=___shgetc($f);
 var $c_1_be=$55;label=17;break;
 case 17: 
 var $c_1_be;
 var $56=((($c_1_be)-(48))|0);
 var $57=($56>>>0)<10;
 var $58=($46|0)<214748364;
 var $_=$57&$58;
 if($_){label=18;break;}else{label=19;break;}
 case 18: 
 var $phitmp16=((($46)*(10))&-1);
 var $c_18=$c_1_be;var $x_09=$phitmp16;label=14;break;
 case 19: 
 var $phitmp$0=$46;
 var $phitmp$1=((((($46|0)<0))|0)?-1:0);
 var $60=((($c_1_be)-(48))|0);
 var $61=($60>>>0)<10;
 if($61){var $c_23=$c_1_be;var $y_04$1=$phitmp$1;var $y_04$0=$phitmp$0;label=21;break;}else{var $c_2_lcssa=$c_1_be;var $y_0_lcssa$1=$phitmp$1;var $y_0_lcssa$0=$phitmp$0;label=20;break;}
 case 20: 
 var $y_0_lcssa$0;
 var $y_0_lcssa$1;
 var $c_2_lcssa;
 var $62=((($c_2_lcssa)-(48))|0);
 var $63=($62>>>0)<10;
 if($63){label=25;break;}else{label=29;break;}
 case 21: 
 var $y_04$0;
 var $y_04$1;
 var $c_23;
 var $$etemp$0$0=10;
 var $$etemp$0$1=0;
 var $64$0=___muldi3($y_04$0,$y_04$1,$$etemp$0$0,$$etemp$0$1);var $64$1=tempRet0;
 var $65$0=$c_23;
 var $65$1=((((($c_23|0)<0))|0)?-1:0);
 var $$etemp$1$0=-48;
 var $$etemp$1$1=-1;
 var $66$0=_i64Add($65$0,$65$1,$$etemp$1$0,$$etemp$1$1);var $66$1=tempRet0;
 var $67$0=_i64Add($66$0,$66$1,$64$0,$64$1);var $67$1=tempRet0;
 var $68=HEAP32[(($1)>>2)];
 var $69=HEAP32[(($3)>>2)];
 var $70=($68>>>0)<($69>>>0);
 if($70){label=22;break;}else{label=23;break;}
 case 22: 
 var $72=(($68+1)|0);
 HEAP32[(($1)>>2)]=$72;
 var $73=HEAP8[(($68)>>0)];
 var $74=($73&255);
 var $c_2_be=$74;label=24;break;
 case 23: 
 var $76=___shgetc($f);
 var $c_2_be=$76;label=24;break;
 case 24: 
 var $c_2_be;
 var $77=((($c_2_be)-(48))|0);
 var $78=($77>>>0)<10;
 var $$etemp$2$0=2061584302;
 var $$etemp$2$1=21474836;
 var $79=(($67$1|0) < ($$etemp$2$1|0)) | (((($67$1|0) == ($$etemp$2$1|0) & ($67$0>>>0) <  ($$etemp$2$0>>>0))));
 var $or_cond2=$78&$79;
 if($or_cond2){var $c_23=$c_2_be;var $y_04$1=$67$1;var $y_04$0=$67$0;label=21;break;}else{var $c_2_lcssa=$c_2_be;var $y_0_lcssa$1=$67$1;var $y_0_lcssa$0=$67$0;label=20;break;}
 case 25: 
 var $80=HEAP32[(($1)>>2)];
 var $81=HEAP32[(($3)>>2)];
 var $82=($80>>>0)<($81>>>0);
 if($82){label=26;break;}else{label=27;break;}
 case 26: 
 var $84=(($80+1)|0);
 HEAP32[(($1)>>2)]=$84;
 var $85=HEAP8[(($80)>>0)];
 var $86=($85&255);
 var $c_3_be=$86;label=28;break;
 case 27: 
 var $88=___shgetc($f);
 var $c_3_be=$88;label=28;break;
 case 28: 
 var $c_3_be;
 var $89=((($c_3_be)-(48))|0);
 var $90=($89>>>0)<10;
 if($90){label=25;break;}else{label=29;break;}
 case 29: 
 var $91=HEAP32[(($3)>>2)];
 var $92=($91|0)==0;
 if($92){label=31;break;}else{label=30;break;}
 case 30: 
 var $94=HEAP32[(($1)>>2)];
 var $95=((($94)-(1))|0);
 HEAP32[(($1)>>2)]=$95;
 label=31;break;
 case 31: 
 var $97=($neg_0|0)!=0;
 var $$etemp$3$0=0;
 var $$etemp$3$1=0;
 var $98$0=_i64Subtract($$etemp$3$0,$$etemp$3$1,$y_0_lcssa$0,$y_0_lcssa$1);var $98$1=tempRet0;
 var $99$0=($97?$98$0:$y_0_lcssa$0);
 var $99$1=($97?$98$1:$y_0_lcssa$1);
 var $_0$1=$99$1;var $_0$0=$99$0;label=32;break;
 case 32: 
 var $_0$0;
 var $_0$1;
 return (tempRet0=$_0$1,$_0$0);
  default: assert(0, "bad label: " + label);
 }

}


function ___shlim($f,$lim){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($f+104)|0);
 HEAP32[(($1)>>2)]=$lim;
 var $2=(($f+8)|0);
 var $3=HEAP32[(($2)>>2)];
 var $4=(($f+4)|0);
 var $5=HEAP32[(($4)>>2)];
 var $6=$3;
 var $7=$5;
 var $8=((($6)-($7))|0);
 var $9=(($f+108)|0);
 HEAP32[(($9)>>2)]=$8;
 var $10=($lim|0)!=0;
 var $11=($8|0)>($lim|0);
 var $or_cond=$10&$11;
 if($or_cond){label=2;break;}else{label=3;break;}
 case 2: 
 var $13=(($5+$lim)|0);
 var $14=(($f+100)|0);
 HEAP32[(($14)>>2)]=$13;
 label=4;break;
 case 3: 
 var $16=(($f+100)|0);
 HEAP32[(($16)>>2)]=$3;
 label=4;break;
 case 4: 
 return;
  default: assert(0, "bad label: " + label);
 }

}


function ___shgetc($f){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($f+104)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=($2|0)==0;
 if($3){label=3;break;}else{label=2;break;}
 case 2: 
 var $5=(($f+108)|0);
 var $6=HEAP32[(($5)>>2)];
 var $7=($6|0)<($2|0);
 if($7){label=3;break;}else{label=4;break;}
 case 3: 
 var $9=___uflow($f);
 var $10=($9|0)<0;
 if($10){label=4;break;}else{label=5;break;}
 case 4: 
 var $12=(($f+100)|0);
 HEAP32[(($12)>>2)]=0;
 var $_0=-1;label=13;break;
 case 5: 
 var $14=HEAP32[(($1)>>2)];
 var $15=($14|0)==0;
 var $_phi_trans_insert=(($f+8)|0);
 var $_pre=HEAP32[(($_phi_trans_insert)>>2)];
 if($15){label=8;break;}else{label=6;break;}
 case 6: 
 var $17=(($f+4)|0);
 var $18=HEAP32[(($17)>>2)];
 var $19=$_pre;
 var $20=$18;
 var $21=((($19)-($20))|0);
 var $22=(($f+108)|0);
 var $23=HEAP32[(($22)>>2)];
 var $24=((($14)-($23))|0);
 var $25=((($24)-(1))|0);
 var $26=($21|0)>($25|0);
 if($26){label=7;break;}else{label=8;break;}
 case 7: 
 var $28=(($18+$25)|0);
 var $29=(($f+100)|0);
 HEAP32[(($29)>>2)]=$28;
 label=9;break;
 case 8: 
 var $30=(($f+100)|0);
 HEAP32[(($30)>>2)]=$_pre;
 label=9;break;
 case 9: 
 var $32=($_pre|0)==0;
 var $_phi_trans_insert2=(($f+4)|0);
 var $_pre3=HEAP32[(($_phi_trans_insert2)>>2)];
 if($32){label=11;break;}else{label=10;break;}
 case 10: 
 var $34=$_pre;
 var $35=$_pre3;
 var $36=(($f+108)|0);
 var $37=HEAP32[(($36)>>2)];
 var $38=((($34)+(1))|0);
 var $39=((($38)-($35))|0);
 var $40=((($39)+($37))|0);
 HEAP32[(($36)>>2)]=$40;
 label=11;break;
 case 11: 
 var $41=((($_pre3)-(1))|0);
 var $42=HEAP8[(($41)>>0)];
 var $43=($42&255);
 var $44=($43|0)==($9|0);
 if($44){var $_0=$9;label=13;break;}else{label=12;break;}
 case 12: 
 var $46=(($9)&255);
 HEAP8[(($41)>>0)]=$46;
 var $_0=$9;label=13;break;
 case 13: 
 var $_0;
 return $_0;
  default: assert(0, "bad label: " + label);
 }

}


function _frexp($x,$e){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 HEAPF64[(tempDoublePtr)>>3]=$x; var $1$0=HEAP32[((tempDoublePtr)>>2)];var $1$1=HEAP32[(((tempDoublePtr)+(4))>>2)];
 var $2$0=($1$1>>>20)|(0<<12);
 var $2$1=(0>>>20)|(0<<12);
 var $_tr$0=$2$0;
 var $_tr=$_tr$0;
 var $3=$_tr&2047;
 if(($3|0)==0){ label=2;break;}else if(($3|0)==2047){ var $_0=$x;label=6;break;}else{label=5;break;}
 case 2: 
 var $5=$x!=0;
 if($5){label=3;break;}else{var $_01=$x;var $storemerge=0;label=4;break;}
 case 3: 
 var $7=($x)*(18446744073709552000);
 var $8=_frexp($7,$e);
 var $9=HEAP32[(($e)>>2)];
 var $10=((($9)-(64))|0);
 var $_01=$8;var $storemerge=$10;label=4;break;
 case 4: 
 var $storemerge;
 var $_01;
 HEAP32[(($e)>>2)]=$storemerge;
 var $_0=$_01;label=6;break;
 case 5: 
 var $13=((($3)-(1022))|0);
 HEAP32[(($e)>>2)]=$13;
 var $$etemp$0$0=-1;
 var $$etemp$0$1=-2146435073;
 var $14$0=$1$0&$$etemp$0$0;
 var $14$1=$1$1&$$etemp$0$1;
 var $$etemp$1$0=0;
 var $$etemp$1$1=1071644672;
 var $15$0=$14$0|$$etemp$1$0;
 var $15$1=$14$1|$$etemp$1$1;
 var $16=(HEAP32[((tempDoublePtr)>>2)]=$15$0, HEAP32[(((tempDoublePtr)+(4))>>2)]=$15$1, HEAPF64[(tempDoublePtr)>>3]);
 var $_0=$16;label=6;break;
 case 6: 
 var $_0;
 return $_0;
  default: assert(0, "bad label: " + label);
 }

}


function _frexpl($x,$e){
 var label=0;


 var $1=_frexp($x,$e);
 return $1;
}


function _scalbn($x,$n){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($n|0)>1023;
 if($1){label=2;break;}else{label=4;break;}
 case 2: 
 var $3=($x)*((8.98846567431158e+307));
 var $4=((($n)-(1023))|0);
 var $5=($4|0)>1023;
 if($5){label=3;break;}else{var $y_0=$3;var $_0=$4;label=7;break;}
 case 3: 
 var $7=($3)*((8.98846567431158e+307));
 var $8=((($n)-(2046))|0);
 var $9=($8|0)>1023;
 var $_=($9?1023:$8);
 var $y_0=$7;var $_0=$_;label=7;break;
 case 4: 
 var $11=($n|0)<-1022;
 if($11){label=5;break;}else{var $y_0=$x;var $_0=$n;label=7;break;}
 case 5: 
 var $13=($x)*((2.2250738585072014e-308));
 var $14=((($n)+(1022))|0);
 var $15=($14|0)<-1022;
 if($15){label=6;break;}else{var $y_0=$13;var $_0=$14;label=7;break;}
 case 6: 
 var $17=($13)*((2.2250738585072014e-308));
 var $18=((($n)+(2044))|0);
 var $19=($18|0)<-1022;
 var $_1=($19?-1022:$18);
 var $y_0=$17;var $_0=$_1;label=7;break;
 case 7: 
 var $_0;
 var $y_0;
 var $21=((($_0)+(1023))|0);
 var $22$0=$21;
 var $22$1=0;
 var $23$0=(0<<20)|(0>>>12);
 var $23$1=($22$0<<20)|(0>>>12);
 var $24=(HEAP32[((tempDoublePtr)>>2)]=$23$0, HEAP32[(((tempDoublePtr)+(4))>>2)]=$23$1, HEAPF64[(tempDoublePtr)>>3]);
 var $25=($y_0)*($24);
 return $25;
  default: assert(0, "bad label: " + label);
 }

}


function _scalbnl($x,$n){
 var label=0;


 var $1=_scalbn($x,$n);
 return $1;
}


function _wctomb($s,$wc){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($s|0)==0;
 if($1){var $_0=0;label=3;break;}else{label=2;break;}
 case 2: 
 var $3=_wcrtomb($s,$wc,0);
 var $_0=$3;label=3;break;
 case 3: 
 var $_0;
 return $_0;
  default: assert(0, "bad label: " + label);
 }

}


function _wcrtomb($s,$wc,$st){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($s|0)==0;
 if($1){var $_0=1;label=11;break;}else{label=2;break;}
 case 2: 
 var $3=($wc>>>0)<128;
 if($3){label=3;break;}else{label=4;break;}
 case 3: 
 var $5=(($wc)&255);
 HEAP8[(($s)>>0)]=$5;
 var $_0=1;label=11;break;
 case 4: 
 var $7=($wc>>>0)<2048;
 if($7){label=5;break;}else{label=6;break;}
 case 5: 
 var $9=$wc>>>6;
 var $10=$9|192;
 var $11=(($10)&255);
 var $12=(($s+1)|0);
 HEAP8[(($s)>>0)]=$11;
 var $13=$wc&63;
 var $14=$13|128;
 var $15=(($14)&255);
 HEAP8[(($12)>>0)]=$15;
 var $_0=2;label=11;break;
 case 6: 
 var $17=($wc>>>0)<55296;
 var $18=((($wc)-(57344))|0);
 var $19=($18>>>0)<8192;
 var $or_cond=$17|$19;
 if($or_cond){label=7;break;}else{label=8;break;}
 case 7: 
 var $21=$wc>>>12;
 var $22=$21|224;
 var $23=(($22)&255);
 var $24=(($s+1)|0);
 HEAP8[(($s)>>0)]=$23;
 var $25=$wc>>>6;
 var $26=$25&63;
 var $27=$26|128;
 var $28=(($27)&255);
 var $29=(($s+2)|0);
 HEAP8[(($24)>>0)]=$28;
 var $30=$wc&63;
 var $31=$30|128;
 var $32=(($31)&255);
 HEAP8[(($29)>>0)]=$32;
 var $_0=3;label=11;break;
 case 8: 
 var $34=((($wc)-(65536))|0);
 var $35=($34>>>0)<1048576;
 if($35){label=9;break;}else{label=10;break;}
 case 9: 
 var $37=$wc>>>18;
 var $38=$37|240;
 var $39=(($38)&255);
 var $40=(($s+1)|0);
 HEAP8[(($s)>>0)]=$39;
 var $41=$wc>>>12;
 var $42=$41&63;
 var $43=$42|128;
 var $44=(($43)&255);
 var $45=(($s+2)|0);
 HEAP8[(($40)>>0)]=$44;
 var $46=$wc>>>6;
 var $47=$46&63;
 var $48=$47|128;
 var $49=(($48)&255);
 var $50=(($s+3)|0);
 HEAP8[(($45)>>0)]=$49;
 var $51=$wc&63;
 var $52=$51|128;
 var $53=(($52)&255);
 HEAP8[(($50)>>0)]=$53;
 var $_0=4;label=11;break;
 case 10: 
 var $55=___errno_location();
 HEAP32[(($55)>>2)]=84;
 var $_0=-1;label=11;break;
 case 11: 
 var $_0;
 return $_0;
  default: assert(0, "bad label: " + label);
 }

}


function ___toread($f){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($f+74)|0);
 var $2=HEAP8[(($1)>>0)];
 var $3=((($2)-(1))&255);
 var $4=$3|$2;
 HEAP8[(($1)>>0)]=$4;
 var $5=(($f+20)|0);
 var $6=HEAP32[(($5)>>2)];
 var $7=(($f+44)|0);
 var $8=HEAP32[(($7)>>2)];
 var $9=($6>>>0)>($8>>>0);
 if($9){label=2;break;}else{label=3;break;}
 case 2: 
 var $11=(($f+36)|0);
 var $12=HEAP32[(($11)>>2)];
 var $13=FUNCTION_TABLE[$12]($f,0,0);
 label=3;break;
 case 3: 
 var $15=(($f+16)|0);
 HEAP32[(($15)>>2)]=0;
 var $16=(($f+28)|0);
 HEAP32[(($16)>>2)]=0;
 HEAP32[(($5)>>2)]=0;
 var $17=(($f)|0);
 var $18=HEAP32[(($17)>>2)];
 var $19=$18&20;
 var $20=($19|0)==0;
 if($20){label=6;break;}else{label=4;break;}
 case 4: 
 var $22=$18&4;
 var $23=($22|0)==0;
 if($23){var $_0=-1;label=7;break;}else{label=5;break;}
 case 5: 
 var $25=$18|32;
 HEAP32[(($17)>>2)]=$25;
 var $_0=-1;label=7;break;
 case 6: 
 var $27=HEAP32[(($7)>>2)];
 var $28=(($f+8)|0);
 HEAP32[(($28)>>2)]=$27;
 var $29=(($f+4)|0);
 HEAP32[(($29)>>2)]=$27;
 var $_0=0;label=7;break;
 case 7: 
 var $_0;
 return $_0;
  default: assert(0, "bad label: " + label);
 }

}


function ___towrite($f){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($f+74)|0);
 var $2=HEAP8[(($1)>>0)];
 var $3=((($2)-(1))&255);
 var $4=$3|$2;
 HEAP8[(($1)>>0)]=$4;
 var $5=(($f)|0);
 var $6=HEAP32[(($5)>>2)];
 var $7=$6&8;
 var $8=($7|0)==0;
 if($8){label=3;break;}else{label=2;break;}
 case 2: 
 var $10=$6|32;
 HEAP32[(($5)>>2)]=$10;
 var $_0=-1;label=4;break;
 case 3: 
 var $12=(($f+8)|0);
 HEAP32[(($12)>>2)]=0;
 var $13=(($f+4)|0);
 HEAP32[(($13)>>2)]=0;
 var $14=(($f+44)|0);
 var $15=HEAP32[(($14)>>2)];
 var $16=(($f+28)|0);
 HEAP32[(($16)>>2)]=$15;
 var $17=(($f+20)|0);
 HEAP32[(($17)>>2)]=$15;
 var $18=(($f+48)|0);
 var $19=HEAP32[(($18)>>2)];
 var $20=(($15+$19)|0);
 var $21=(($f+16)|0);
 HEAP32[(($21)>>2)]=$20;
 var $_0=0;label=4;break;
 case 4: 
 var $_0;
 return $_0;
  default: assert(0, "bad label: " + label);
 }

}


function ___uflow($f){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $c=sp;
 var $1=(($f+8)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=($2|0)==0;
 if($3){label=2;break;}else{label=3;break;}
 case 2: 
 var $5=___toread($f);
 var $6=($5|0)==0;
 if($6){label=3;break;}else{var $_0=-1;label=5;break;}
 case 3: 
 var $8=(($f+32)|0);
 var $9=HEAP32[(($8)>>2)];
 var $10=FUNCTION_TABLE[$9]($f,$c,1);
 var $11=($10|0)==1;
 if($11){label=4;break;}else{var $_0=-1;label=5;break;}
 case 4: 
 var $13=HEAP8[(($c)>>0)];
 var $14=($13&255);
 var $_0=$14;label=5;break;
 case 5: 
 var $_0;
 STACKTOP=sp;return $_0;
  default: assert(0, "bad label: " + label);
 }

}


function ___fwritex($s,$l,$f){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($f+16)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=($2|0)==0;
 if($3){label=2;break;}else{var $8=$2;label=4;break;}
 case 2: 
 var $5=___towrite($f);
 var $6=($5|0)==0;
 if($6){label=3;break;}else{var $_0=0;label=12;break;}
 case 3: 
 var $_pre6=HEAP32[(($1)>>2)];
 var $8=$_pre6;label=4;break;
 case 4: 
 var $8;
 var $9=(($f+20)|0);
 var $10=HEAP32[(($9)>>2)];
 var $11=$8;
 var $12=$10;
 var $13=((($11)-($12))|0);
 var $14=($13>>>0)<($l>>>0);
 if($14){label=5;break;}else{label=6;break;}
 case 5: 
 var $16=(($f+36)|0);
 var $17=HEAP32[(($16)>>2)];
 var $18=FUNCTION_TABLE[$17]($f,$s,$l);
 var $_0=$18;label=12;break;
 case 6: 
 var $20=(($f+75)|0);
 var $21=HEAP8[(($20)>>0)];
 var $22=(($21<<24)>>24)>-1;
 if($22){var $i_0=$l;label=7;break;}else{var $i_1=0;var $_01=$l;var $_02=$s;var $37=$10;label=11;break;}
 case 7: 
 var $i_0;
 var $23=($i_0|0)==0;
 if($23){var $i_1=0;var $_01=$l;var $_02=$s;var $37=$10;label=11;break;}else{label=8;break;}
 case 8: 
 var $25=((($i_0)-(1))|0);
 var $26=(($s+$25)|0);
 var $27=HEAP8[(($26)>>0)];
 var $28=(($27<<24)>>24)==10;
 if($28){label=9;break;}else{var $i_0=$25;label=7;break;}
 case 9: 
 var $30=(($f+36)|0);
 var $31=HEAP32[(($30)>>2)];
 var $32=FUNCTION_TABLE[$31]($f,$s,$i_0);
 var $33=($32>>>0)<($i_0>>>0);
 if($33){var $_0=$i_0;label=12;break;}else{label=10;break;}
 case 10: 
 var $35=(($s+$i_0)|0);
 var $36=((($l)-($i_0))|0);
 var $_pre=HEAP32[(($9)>>2)];
 var $i_1=$i_0;var $_01=$36;var $_02=$35;var $37=$_pre;label=11;break;
 case 11: 
 var $37;
 var $_02;
 var $_01;
 var $i_1;
 assert($_01 % 1 === 0);(_memcpy($37, $_02, $_01)|0);
 var $38=HEAP32[(($9)>>2)];
 var $39=(($38+$_01)|0);
 HEAP32[(($9)>>2)]=$39;
 var $40=((($i_1)+($_01))|0);
 var $_0=$40;label=12;break;
 case 12: 
 var $_0;
 return $_0;
  default: assert(0, "bad label: " + label);
 }

}


function _snprintf($s,$n,$fmt,varrp){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $ap=sp;
 var $1=(($ap)|0);
 var $2=$ap;
 HEAP32[(($2)>>2)]=varrp;HEAP32[((($2)+(4))>>2)]=0;
 var $3=_vsnprintf($s,$n,$fmt,$1);

 STACKTOP=sp;return $3;
}


function _sprintf($s,$fmt,varrp){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $ap=sp;
 var $1=(($ap)|0);
 var $2=$ap;
 HEAP32[(($2)>>2)]=varrp;HEAP32[((($2)+(4))>>2)]=0;
 var $3=_vsprintf($s,$fmt,$1);

 STACKTOP=sp;return $3;
}


function _MUSL_vfprintf($f,$fmt,$ap){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+216)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $ap2=sp;
 var $nl_type=(sp)+(16);
 var $nl_arg=(sp)+(56);
 var $internal_buf=(sp)+(136);
 var $1=$nl_type;
 var $$etemp$0$0=40;
 var $$etemp$0$1=0;

 _memset($1, 0, 40)|0;
 var $2=$nl_arg;
 var $$etemp$1$0=80;
 var $$etemp$1$1=0;

 var $3=(($internal_buf)|0);
 var $$etemp$2$0=80;
 var $$etemp$2$1=0;

 var $4=$ap2;
 var $5=$ap;
 _llvm_va_copy($4,$5);
 var $6=(($nl_arg)|0);
 var $7=(($nl_type)|0);
 var $8=_printf_core(0,$fmt,$ap2,$6,$7);
 var $9=($8|0)<0;
 if($9){label=2;break;}else{label=3;break;}
 case 2: 

 var $_0=-1;label=8;break;
 case 3: 
 var $12=(($f+48)|0);
 var $13=HEAP32[(($12)>>2)];
 var $14=($13|0)==0;
 if($14){label=5;break;}else{label=4;break;}
 case 4: 
 var $15=_printf_core($f,$fmt,$ap2,$6,$7);
 var $ret_1=$15;label=7;break;
 case 5: 
 var $17=(($f+44)|0);
 var $18=HEAP32[(($17)>>2)];
 HEAP32[(($17)>>2)]=$3;
 var $19=(($f+28)|0);
 HEAP32[(($19)>>2)]=$3;
 var $20=(($f+20)|0);
 HEAP32[(($20)>>2)]=$3;
 HEAP32[(($12)>>2)]=80;
 var $21=(($internal_buf+80)|0);
 var $22=(($f+16)|0);
 HEAP32[(($22)>>2)]=$21;
 var $23=_printf_core($f,$fmt,$ap2,$6,$7);
 var $24=($18|0)==0;
 if($24){var $ret_1=$23;label=7;break;}else{label=6;break;}
 case 6: 
 var $26=(($f+36)|0);
 var $27=HEAP32[(($26)>>2)];
 var $28=FUNCTION_TABLE[$27]($f,0,0);
 var $29=HEAP32[(($20)>>2)];
 var $30=($29|0)==0;
 var $_=($30?-1:$23);
 HEAP32[(($17)>>2)]=$18;
 HEAP32[(($12)>>2)]=0;
 HEAP32[(($22)>>2)]=0;
 HEAP32[(($19)>>2)]=0;
 HEAP32[(($20)>>2)]=0;
 var $ret_1=$_;label=7;break;
 case 7: 
 var $ret_1;

 var $_0=$ret_1;label=8;break;
 case 8: 
 var $_0;
 var $$etemp$3$0=80;
 var $$etemp$3$1=0;

 var $$etemp$4$0=80;
 var $$etemp$4$1=0;

 var $$etemp$5$0=40;
 var $$etemp$5$1=0;

 STACKTOP=sp;return $_0;
  default: assert(0, "bad label: " + label);
 }

}


function _printf_core($f,$fmt,$ap,$nl_arg,$nl_type){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+536)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $big_i=sp;
 var $e2_i=(sp)+(504);
 var $buf_i=(sp)+(512);
 var $1=$buf_i;
 var $ebuf0_i=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $pad_i=STACKTOP;STACKTOP = (STACKTOP + 256)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $buf=STACKTOP;STACKTOP = (STACKTOP + 40)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $wc=STACKTOP;STACKTOP = (STACKTOP + 8)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $mb=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $2=(($buf)|0);
 var $$etemp$0$0=40;
 var $$etemp$0$1=0;

 var $3=($f|0)!=0;
 var $4=(($ap)|0);
 var $5=(($buf+40)|0);
 var $6=(($pad_i)|0);
 var $7=$5;
 var $8=(($buf+39)|0);
 var $9=(($wc)|0);
 var $10=(($wc+4)|0);
 var $11=$wc;
 var $12=(($mb)|0);
 var $13=$e2_i;
 var $14=(($buf_i)|0);
 var $15=(($ebuf0_i)|0);
 var $16=$big_i;
 var $17=(($ebuf0_i+12)|0);
 var $18=(($ebuf0_i+11)|0);
 var $19=$17;
 var $20=((($19)-($1))|0);
 var $21=(((-2)-($1))|0);
 var $22=((($19)+(2))|0);
 var $23=(($big_i)|0);
 var $24=(($big_i+288)|0);
 var $25=(($buf_i+9)|0);
 var $26=$25;
 var $27=(($buf_i+8)|0);
 var $l_0=0;var $cnt_0=0;var $l10n_0=0;var $30=0;var $29=0;var $28=$fmt;label=2;break;
 case 2: 
 var $28;
 var $29;
 var $30;
 var $l10n_0;
 var $cnt_0;
 var $l_0;
 var $31=($cnt_0|0)>-1;
 if($31){label=3;break;}else{var $cnt_1=$cnt_0;label=6;break;}
 case 3: 
 var $33=(((2147483647)-($cnt_0))|0);
 var $34=($l_0|0)>($33|0);
 if($34){label=4;break;}else{label=5;break;}
 case 4: 
 var $36=___errno_location();
 HEAP32[(($36)>>2)]=75;
 var $cnt_1=-1;label=6;break;
 case 5: 
 var $38=((($l_0)+($cnt_0))|0);
 var $cnt_1=$38;label=6;break;
 case 6: 
 var $cnt_1;
 var $39=HEAP8[(($28)>>0)];
 var $40=(($39<<24)>>24)==0;
 if($40){label=338;break;}else{var $42=$28;var $41=$39;label=7;break;}
 case 7: 
 var $41;
 var $42;
 if((($41<<24)>>24)==0){ var $_lcssa92=$42;var $z_0_lcssa=$42;label=11;break;}else if((($41<<24)>>24)==37){ var $45=$42;var $z_093=$42;label=9;break;}else{label=8;break;}
 case 8: 
 var $44=(($42+1)|0);
 var $_pre=HEAP8[(($44)>>0)];
 var $42=$44;var $41=$_pre;label=7;break;
 case 9: 
 var $z_093;
 var $45;
 var $46=(($45+1)|0);
 var $47=HEAP8[(($46)>>0)];
 var $48=(($47<<24)>>24)==37;
 if($48){label=10;break;}else{var $_lcssa92=$45;var $z_0_lcssa=$z_093;label=11;break;}
 case 10: 
 var $49=(($z_093+1)|0);
 var $50=(($45+2)|0);
 var $51=HEAP8[(($50)>>0)];
 var $52=(($51<<24)>>24)==37;
 if($52){var $45=$50;var $z_093=$49;label=9;break;}else{var $_lcssa92=$50;var $z_0_lcssa=$49;label=11;break;}
 case 11: 
 var $z_0_lcssa;
 var $_lcssa92;
 var $53=$z_0_lcssa;
 var $54=$28;
 var $55=((($53)-($54))|0);
 if($3){label=12;break;}else{label=13;break;}
 case 12: 
 var $57=___fwritex($28,$55,$f);
 label=13;break;
 case 13: 
 var $59=($z_0_lcssa|0)==($28|0);
 if($59){label=14;break;}else{var $l_0=$55;var $cnt_0=$cnt_1;var $l10n_0=$l10n_0;var $30=$30;var $29=$29;var $28=$_lcssa92;label=2;break;}
 case 14: 
 var $61=(($_lcssa92+1)|0);
 var $62=HEAP8[(($61)>>0)];
 var $63=(($62<<24)>>24);
 var $isdigittmp=((($63)-(48))|0);
 var $isdigit=($isdigittmp>>>0)<10;
 if($isdigit){label=15;break;}else{var $argpos_0=-1;var $l10n_1=$l10n_0;var $storemerge=$61;var $71=$62;label=17;break;}
 case 15: 
 var $65=(($_lcssa92+2)|0);
 var $66=HEAP8[(($65)>>0)];
 var $67=(($66<<24)>>24)==36;
 if($67){label=16;break;}else{var $argpos_0=-1;var $l10n_1=$l10n_0;var $storemerge=$61;var $71=$62;label=17;break;}
 case 16: 
 var $69=(($_lcssa92+3)|0);
 var $_pre287=HEAP8[(($69)>>0)];
 var $argpos_0=$isdigittmp;var $l10n_1=1;var $storemerge=$69;var $71=$_pre287;label=17;break;
 case 17: 
 var $71;
 var $storemerge;
 var $l10n_1;
 var $argpos_0;
 var $72=(($71<<24)>>24);
 var $73=((($72)-(32))|0);
 var $74=($73>>>0)<32;
 if($74){var $storemerge7103=$storemerge;var $fl_0104=0;var $76=$72;var $75=$71;label=18;break;}else{var $91=$71;var $storemerge798=$storemerge;var $fl_0100=0;label=20;break;}
 case 18: 
 var $75;
 var $76;
 var $fl_0104;
 var $storemerge7103;
 var $77=((($76)-(32))|0);
 var $78=1<<$77;
 var $79=$78&75913;
 var $80=($79|0)==0;
 if($80){var $91=$75;var $storemerge798=$storemerge7103;var $fl_0100=$fl_0104;label=20;break;}else{label=19;break;}
 case 19: 
 var $82=(($75<<24)>>24);
 var $83=((($82)-(32))|0);
 var $84=1<<$83;
 var $85=$84|$fl_0104;
 var $86=(($storemerge7103+1)|0);
 var $87=HEAP8[(($86)>>0)];
 var $88=(($87<<24)>>24);
 var $89=((($88)-(32))|0);
 var $90=($89>>>0)<32;
 if($90){var $storemerge7103=$86;var $fl_0104=$85;var $76=$88;var $75=$87;label=18;break;}else{var $91=$87;var $storemerge798=$86;var $fl_0100=$85;label=20;break;}
 case 20: 
 var $fl_0100;
 var $storemerge798;
 var $91;
 var $92=(($91<<24)>>24)==42;
 if($92){label=21;break;}else{label=29;break;}
 case 21: 
 var $94=(($storemerge798+1)|0);
 var $95=HEAP8[(($94)>>0)];
 var $96=(($95<<24)>>24);
 var $isdigittmp10=((($96)-(48))|0);
 var $isdigit11=($isdigittmp10>>>0)<10;
 if($isdigit11){label=22;break;}else{label=24;break;}
 case 22: 
 var $98=(($storemerge798+2)|0);
 var $99=HEAP8[(($98)>>0)];
 var $100=(($99<<24)>>24)==36;
 if($100){label=23;break;}else{label=24;break;}
 case 23: 
 var $102=(($nl_type+($isdigittmp10<<2))|0);
 HEAP32[(($102)>>2)]=10;
 var $103=HEAP8[(($94)>>0)];
 var $104=(($103<<24)>>24);
 var $105=((($104)-(48))|0);
 var $106=(($nl_arg+($105<<3))|0);
 var $ld$1$0=(($106)|0);
 var $107$0=HEAP32[(($ld$1$0)>>2)];
 var $ld$2$1=(($106+4)|0);
 var $107$1=HEAP32[(($ld$2$1)>>2)];
 var $107$$SHADOW=HEAPF64[(($106)>>3)];
 var $108$0=$107$0;
 var $108=$108$0;
 var $109=(($storemerge798+3)|0);
 var $w_0=$108;var $l10n_2=1;var $storemerge12=$109;label=27;break;
 case 24: 
 var $111=($l10n_1|0)==0;
 if($111){label=25;break;}else{var $_0=-1;label=356;break;}
 case 25: 
 if($3){label=26;break;}else{var $w_1=0;var $fl_1=$fl_0100;var $l10n_3=0;var $131=$94;label=32;break;}
 case 26: 
 var $114=(tempInt=HEAP32[((($4)+(4))>>2)],HEAP32[((($4)+(4))>>2)]=tempInt + 8,HEAP32[(((HEAP32[(($4)>>2)])+(tempInt))>>2)]);
 var $w_0=$114;var $l10n_2=0;var $storemerge12=$94;label=27;break;
 case 27: 
 var $storemerge12;
 var $l10n_2;
 var $w_0;
 var $116=($w_0|0)<0;
 if($116){label=28;break;}else{var $w_1=$w_0;var $fl_1=$fl_0100;var $l10n_3=$l10n_2;var $131=$storemerge12;label=32;break;}
 case 28: 
 var $118=$fl_0100|8192;
 var $119=(((-$w_0))|0);
 var $w_1=$119;var $fl_1=$118;var $l10n_3=$l10n_2;var $131=$storemerge12;label=32;break;
 case 29: 
 var $121=(($91<<24)>>24);
 var $isdigittmp1_i=((($121)-(48))|0);
 var $isdigit2_i=($isdigittmp1_i>>>0)<10;
 if($isdigit2_i){var $i_03_i=0;var $123=$storemerge798;var $122=$121;label=30;break;}else{var $w_1=0;var $fl_1=$fl_0100;var $l10n_3=$l10n_1;var $131=$storemerge798;label=32;break;}
 case 30: 
 var $122;
 var $123;
 var $i_03_i;
 var $124=((($i_03_i)*(10))&-1);
 var $125=((($122)-(48))|0);
 var $126=((($125)+($124))|0);
 var $127=(($123+1)|0);
 var $128=HEAP8[(($127)>>0)];
 var $129=(($128<<24)>>24);
 var $isdigittmp_i=((($129)-(48))|0);
 var $isdigit_i=($isdigittmp_i>>>0)<10;
 if($isdigit_i){var $i_03_i=$126;var $123=$127;var $122=$129;label=30;break;}else{label=31;break;}
 case 31: 
 var $130=($126|0)<0;
 if($130){var $_0=-1;label=356;break;}else{var $w_1=$126;var $fl_1=$fl_0100;var $l10n_3=$l10n_1;var $131=$127;label=32;break;}
 case 32: 
 var $131;
 var $l10n_3;
 var $fl_1;
 var $w_1;
 var $132=HEAP8[(($131)>>0)];
 var $133=(($132<<24)>>24)==46;
 if($133){label=33;break;}else{var $p_0=-1;var $170=$131;label=42;break;}
 case 33: 
 var $135=(($131+1)|0);
 var $136=HEAP8[(($135)>>0)];
 var $137=(($136<<24)>>24)==42;
 if($137){label=34;break;}else{label=40;break;}
 case 34: 
 var $139=(($131+2)|0);
 var $140=HEAP8[(($139)>>0)];
 var $141=(($140<<24)>>24);
 var $isdigittmp8=((($141)-(48))|0);
 var $isdigit9=($isdigittmp8>>>0)<10;
 if($isdigit9){label=35;break;}else{label=37;break;}
 case 35: 
 var $143=(($131+3)|0);
 var $144=HEAP8[(($143)>>0)];
 var $145=(($144<<24)>>24)==36;
 if($145){label=36;break;}else{label=37;break;}
 case 36: 
 var $147=(($nl_type+($isdigittmp8<<2))|0);
 HEAP32[(($147)>>2)]=10;
 var $148=HEAP8[(($139)>>0)];
 var $149=(($148<<24)>>24);
 var $150=((($149)-(48))|0);
 var $151=(($nl_arg+($150<<3))|0);
 var $ld$3$0=(($151)|0);
 var $152$0=HEAP32[(($ld$3$0)>>2)];
 var $ld$4$1=(($151+4)|0);
 var $152$1=HEAP32[(($ld$4$1)>>2)];
 var $152$$SHADOW=HEAPF64[(($151)>>3)];
 var $153$0=$152$0;
 var $153=$153$0;
 var $154=(($131+4)|0);
 var $p_0=$153;var $170=$154;label=42;break;
 case 37: 
 var $156=($l10n_3|0)==0;
 if($156){label=38;break;}else{var $_0=-1;label=356;break;}
 case 38: 
 if($3){label=39;break;}else{var $p_0=0;var $170=$139;label=42;break;}
 case 39: 
 var $159=(tempInt=HEAP32[((($4)+(4))>>2)],HEAP32[((($4)+(4))>>2)]=tempInt + 8,HEAP32[(((HEAP32[(($4)>>2)])+(tempInt))>>2)]);
 var $p_0=$159;var $170=$139;label=42;break;
 case 40: 
 var $161=(($136<<24)>>24);
 var $isdigittmp1_i20=((($161)-(48))|0);
 var $isdigit2_i21=($isdigittmp1_i20>>>0)<10;
 if($isdigit2_i21){var $i_03_i22=0;var $163=$135;var $162=$161;label=41;break;}else{var $p_0=0;var $170=$135;label=42;break;}
 case 41: 
 var $162;
 var $163;
 var $i_03_i22;
 var $164=((($i_03_i22)*(10))&-1);
 var $165=((($162)-(48))|0);
 var $166=((($165)+($164))|0);
 var $167=(($163+1)|0);
 var $168=HEAP8[(($167)>>0)];
 var $169=(($168<<24)>>24);
 var $isdigittmp_i23=((($169)-(48))|0);
 var $isdigit_i24=($isdigittmp_i23>>>0)<10;
 if($isdigit_i24){var $i_03_i22=$166;var $163=$167;var $162=$169;label=41;break;}else{var $p_0=$166;var $170=$167;label=42;break;}
 case 42: 
 var $170;
 var $p_0;
 var $st_0=0;var $171=$170;label=43;break;
 case 43: 
 var $171;
 var $st_0;
 var $172=HEAP8[(($171)>>0)];
 var $173=(($172<<24)>>24);
 var $174=((($173)-(65))|0);
 var $175=($174>>>0)>57;
 if($175){var $_0=-1;label=356;break;}else{label=44;break;}
 case 44: 
 var $177=(($171+1)|0);
 var $178=((2360+((($st_0)*(58))&-1)+$174)|0);
 var $179=HEAP8[(($178)>>0)];
 var $180=($179&255);
 var $181=((($180)-(1))|0);
 var $182=($181>>>0)<8;
 if($182){var $st_0=$180;var $171=$177;label=43;break;}else{label=45;break;}
 case 45: 
 var $184=(($179<<24)>>24)==0;
 if($184){var $_0=-1;label=356;break;}else{label=46;break;}
 case 46: 
 var $186=(($179<<24)>>24)==19;
 var $187=($argpos_0|0)>-1;
 if($186){label=47;break;}else{label=48;break;}
 case 47: 
 if($187){var $_0=-1;label=356;break;}else{var $256=$30;var $255=$29;label=63;break;}
 case 48: 
 if($187){label=49;break;}else{label=50;break;}
 case 49: 
 var $191=(($nl_type+($argpos_0<<2))|0);
 HEAP32[(($191)>>2)]=$180;
 var $192=(($nl_arg+($argpos_0<<3))|0);
 var $ld$5$0=(($192)|0);
 var $193$0=HEAP32[(($ld$5$0)>>2)];
 var $ld$6$1=(($192+4)|0);
 var $193$1=HEAP32[(($ld$6$1)>>2)];
 var $193$$SHADOW=HEAPF64[(($192)>>3)];
 var $194$0=$193$0;
 var $194=$194$0;
 var $195=$194;
 var $196$0=$193$1;
 var $196$1=0;
 var $197$0=$196$0;
 var $197=$197$0;
 var $256=$195;var $255=$197;label=63;break;
 case 50: 
 if($3){label=51;break;}else{var $_0=0;label=356;break;}
 case 51: 
 var $200=($179&255)>20;
 if($200){var $261=$29;var $260=$30;var $259=$172;label=65;break;}else{label=52;break;}
 case 52: 
 switch(($180|0)){case 9:{ label=53;break;}case 10:{ label=54;break;}case 11:{ label=55;break;}case 12:{ label=56;break;}case 13:{ label=57;break;}case 14:{ label=58;break;}case 15:{ label=59;break;}case 16:{ label=60;break;}case 17:{ label=61;break;}case 18:{ label=62;break;}default:{var $258=$29;var $257=$30;label=64;break;}}break;
 case 53: 
 var $203=(tempInt=HEAP32[((($4)+(4))>>2)],HEAP32[((($4)+(4))>>2)]=tempInt + 8,HEAP32[(((HEAP32[(($4)>>2)])+(tempInt))>>2)]);
 var $258=$29;var $257=$203;label=64;break;
 case 54: 
 var $205=(tempInt=HEAP32[((($4)+(4))>>2)],HEAP32[((($4)+(4))>>2)]=tempInt + 8,HEAP32[(((HEAP32[(($4)>>2)])+(tempInt))>>2)]);
 var $206$0=$205;
 var $206$1=((((($205|0)<0))|0)?-1:0);
 var $207=$205;
 var $208$0=$206$1;
 var $208$1=0;
 var $209$0=$208$0;
 var $209=$209$0;
 var $258=$209;var $257=$207;label=64;break;
 case 55: 
 var $211=(tempInt=HEAP32[((($4)+(4))>>2)],HEAP32[((($4)+(4))>>2)]=tempInt + 8,HEAP32[(((HEAP32[(($4)>>2)])+(tempInt))>>2)]);
 var $212=$211;
 var $258=0;var $257=$212;label=64;break;
 case 56: 
 var $214$0=(tempInt=HEAP32[((($4)+(4))>>2)],HEAP32[((($4)+(4))>>2)]=tempInt + 8,HEAP32[(((HEAP32[(($4)>>2)])+(tempInt))>>2)]);
 var $214$1=(tempInt=HEAP32[((($4)+(4))>>2)],HEAP32[((($4)+(4))>>2)]=tempInt + 8,HEAP32[(((HEAP32[(($4)>>2)])+(tempInt))>>2)]);
 var $215$0=$214$0;
 var $215=$215$0;
 var $216=$215;
 var $217$0=$214$1;
 var $217$1=0;
 var $218$0=$217$0;
 var $218=$218$0;
 var $258=$218;var $257=$216;label=64;break;
 case 57: 
 var $220=(tempInt=HEAP32[((($4)+(4))>>2)],HEAP32[((($4)+(4))>>2)]=tempInt + 8,HEAP32[(((HEAP32[(($4)>>2)])+(tempInt))>>2)]);
 var $221=(($220)&65535);
 var $222$0=(($221<<16)>>16);
 var $222$1=(((((($221<<16)>>16)<0))|0)?-1:0);
 var $223=(($221<<16)>>16);
 var $224=$223;
 var $225$0=$222$1;
 var $225$1=0;
 var $226$0=$225$0;
 var $226=$226$0;
 var $258=$226;var $257=$224;label=64;break;
 case 58: 
 var $228=(tempInt=HEAP32[((($4)+(4))>>2)],HEAP32[((($4)+(4))>>2)]=tempInt + 8,HEAP32[(((HEAP32[(($4)>>2)])+(tempInt))>>2)]);
 var $_mask1_i29=$228&65535;
 var $229=$_mask1_i29;
 var $258=0;var $257=$229;label=64;break;
 case 59: 
 var $231=(tempInt=HEAP32[((($4)+(4))>>2)],HEAP32[((($4)+(4))>>2)]=tempInt + 8,HEAP32[(((HEAP32[(($4)>>2)])+(tempInt))>>2)]);
 var $232=(($231)&255);
 var $233$0=(($232<<24)>>24);
 var $233$1=(((((($232<<24)>>24)<0))|0)?-1:0);
 var $234=(($232<<24)>>24);
 var $235=$234;
 var $236$0=$233$1;
 var $236$1=0;
 var $237$0=$236$0;
 var $237=$237$0;
 var $258=$237;var $257=$235;label=64;break;
 case 60: 
 var $239=(tempInt=HEAP32[((($4)+(4))>>2)],HEAP32[((($4)+(4))>>2)]=tempInt + 8,HEAP32[(((HEAP32[(($4)>>2)])+(tempInt))>>2)]);
 var $_mask_i30=$239&255;
 var $240=$_mask_i30;
 var $258=0;var $257=$240;label=64;break;
 case 61: 
 var $242=(tempInt=HEAP32[((($4)+(4))>>2)],HEAP32[((($4)+(4))>>2)]=tempInt + 8,HEAPF64[(((HEAP32[(($4)>>2)])+(tempInt))>>3)]);
 HEAPF64[(tempDoublePtr)>>3]=$242; var $243$0=HEAP32[((tempDoublePtr)>>2)];var $243$1=HEAP32[(((tempDoublePtr)+(4))>>2)];
 var $244$0=$243$0;
 var $244=$244$0;
 var $245=$244;
 var $246$0=$243$1;
 var $246$1=0;
 var $247$0=$246$0;
 var $247=$247$0;
 var $258=$247;var $257=$245;label=64;break;
 case 62: 
 var $249=(tempInt=HEAP32[((($4)+(4))>>2)],HEAP32[((($4)+(4))>>2)]=tempInt + 8,HEAPF64[(((HEAP32[(($4)>>2)])+(tempInt))>>3)]);
 HEAPF64[(tempDoublePtr)>>3]=$249; var $250$0=HEAP32[((tempDoublePtr)>>2)];var $250$1=HEAP32[(((tempDoublePtr)+(4))>>2)];
 var $251$0=$250$0;
 var $251=$251$0;
 var $252=$251;
 var $253$0=$250$1;
 var $253$1=0;
 var $254$0=$253$0;
 var $254=$254$0;
 var $256=$252;var $255=$254;label=63;break;
 case 63: 
 var $255;
 var $256;
 if($3){var $258=$255;var $257=$256;label=64;break;}else{var $l_0=$55;var $cnt_0=$cnt_1;var $l10n_0=$l10n_3;var $30=$256;var $29=$255;var $28=$177;label=2;break;}
 case 64: 
 var $257;
 var $258;
 var $_pre289=HEAP8[(($171)>>0)];
 var $261=$258;var $260=$257;var $259=$_pre289;label=65;break;
 case 65: 
 var $259;
 var $260;
 var $261;
 var $262=(($259<<24)>>24);
 var $263=($st_0|0)==0;
 if($263){var $t_0=$262;label=67;break;}else{label=66;break;}
 case 66: 
 var $265=$262&15;
 var $266=($265|0)==3;
 var $267=$262&-33;
 var $_=($266?$267:$262);
 var $t_0=$_;label=67;break;
 case 67: 
 var $t_0;
 var $269=$fl_1&8192;
 var $270=($269|0)==0;
 var $271=$fl_1&-65537;
 var $fl_1_=($270?$fl_1:$271);
 switch(($t_0|0)){case 67:{ label=102;break;}case 83:{ label=103;break;}case 101:case 102:case 103:case 97:case 69:case 70:case 71:case 65:{ label=123;break;}case 110:{ label=68;break;}case 112:{ label=76;break;}case 120:case 88:{ var $t_1=$t_0;var $p_1=$p_0;var $fl_3=$fl_1_;label=77;break;}case 111:{ label=81;break;}case 100:case 105:{ label=85;break;}case 117:{ var $pl_0=0;var $prefix_0=6320;var $354=$260;var $353=$261;label=89;break;}case 99:{ label=96;break;}case 109:{ label=97;break;}case 115:{ label=98;break;}default:{var $pl_2=0;var $prefix_2=6320;var $p_5=$p_0;var $fl_6=$fl_1_;var $z_2=$5;var $a_2=$28;var $1125=$260;var $1124=$261;label=322;break;}}break;
 case 68: 
 switch(($st_0|0)){case 0:{ label=69;break;}case 1:{ label=70;break;}case 2:{ label=71;break;}case 3:{ label=72;break;}case 4:{ label=73;break;}case 6:{ label=74;break;}case 7:{ label=75;break;}default:{var $l_0=$55;var $cnt_0=$cnt_1;var $l10n_0=$l10n_3;var $30=$260;var $29=$261;var $28=$177;label=2;break;}}break;
 case 69: 
 var $274=$260;
 HEAP32[(($274)>>2)]=$cnt_1;
 var $l_0=$55;var $cnt_0=$cnt_1;var $l10n_0=$l10n_3;var $30=$260;var $29=$261;var $28=$177;label=2;break;
 case 70: 
 var $276=$260;
 HEAP32[(($276)>>2)]=$cnt_1;
 var $l_0=$55;var $cnt_0=$cnt_1;var $l10n_0=$l10n_3;var $30=$260;var $29=$261;var $28=$177;label=2;break;
 case 71: 
 var $278$0=$cnt_1;
 var $278$1=((((($cnt_1|0)<0))|0)?-1:0);
 var $279=$260;
 var $st$7$0=(($279)|0);
 HEAP32[(($st$7$0)>>2)]=$278$0;
 var $st$8$1=(($279+4)|0);
 HEAP32[(($st$8$1)>>2)]=$278$1;
 var $l_0=$55;var $cnt_0=$cnt_1;var $l10n_0=$l10n_3;var $30=$260;var $29=$261;var $28=$177;label=2;break;
 case 72: 
 var $281=(($cnt_1)&65535);
 var $282=$260;
 HEAP16[(($282)>>1)]=$281;
 var $l_0=$55;var $cnt_0=$cnt_1;var $l10n_0=$l10n_3;var $30=$260;var $29=$261;var $28=$177;label=2;break;
 case 73: 
 var $284=(($cnt_1)&255);
 HEAP8[(($260)>>0)]=$284;
 var $l_0=$55;var $cnt_0=$cnt_1;var $l10n_0=$l10n_3;var $30=$260;var $29=$261;var $28=$177;label=2;break;
 case 74: 
 var $286=$260;
 HEAP32[(($286)>>2)]=$cnt_1;
 var $l_0=$55;var $cnt_0=$cnt_1;var $l10n_0=$l10n_3;var $30=$260;var $29=$261;var $28=$177;label=2;break;
 case 75: 
 var $288$0=$cnt_1;
 var $288$1=((((($cnt_1|0)<0))|0)?-1:0);
 var $289=$260;
 var $st$9$0=(($289)|0);
 HEAP32[(($st$9$0)>>2)]=$288$0;
 var $st$10$1=(($289+4)|0);
 HEAP32[(($st$10$1)>>2)]=$288$1;
 var $l_0=$55;var $cnt_0=$cnt_1;var $l10n_0=$l10n_3;var $30=$260;var $29=$261;var $28=$177;label=2;break;
 case 76: 
 var $291=($p_0>>>0)>8;
 var $292=($291?$p_0:8);
 var $293=$fl_1_|8;
 var $t_1=120;var $p_1=$292;var $fl_3=$293;label=77;break;
 case 77: 
 var $fl_3;
 var $p_1;
 var $t_1;
 var $295=$260;
 var $296$0=$261;
 var $296$1=0;
 var $297$0=0;
 var $297$1=$296$0;
 var $298$0=$295;
 var $298$1=0;
 var $299$0=$297$0|$298$0;
 var $299$1=$297$1|$298$1;
 var $300=$t_1&32;
 var $$etemp$11$0=0;
 var $$etemp$11$1=0;
 var $301=(($299$0|0) == ($$etemp$11$0|0)) & (($299$1|0) == ($$etemp$11$1|0));
 if($301){var $pl_1=0;var $prefix_1=6320;var $p_2=$p_1;var $fl_4=$fl_3;var $a_0=$5;var $376=$260;var $375=$261;label=94;break;}else{var $_012_i=$5;var $_03_i$1=$299$1;var $_03_i$0=$299$0;label=78;break;}
 case 78: 
 var $_03_i$0;
 var $_03_i$1;
 var $_012_i;
 var $_0_tr_i$0=$_03_i$0;
 var $_0_tr_i=$_0_tr_i$0;
 var $302=$_0_tr_i&15;
 var $303=((8+$302)|0);
 var $304=HEAP8[(($303)>>0)];
 var $305=($304&255);
 var $306=$305|$300;
 var $307=(($306)&255);
 var $308=((($_012_i)-(1))|0);
 HEAP8[(($308)>>0)]=$307;
 var $309$0=($_03_i$0>>>4)|($_03_i$1<<28);
 var $309$1=($_03_i$1>>>4)|(0<<28);
 var $$etemp$12$0=0;
 var $$etemp$12$1=0;
 var $310=(($309$0|0) == ($$etemp$12$0|0)) & (($309$1|0) == ($$etemp$12$1|0));
 if($310){label=79;break;}else{var $_012_i=$308;var $_03_i$1=$309$1;var $_03_i$0=$309$0;label=78;break;}
 case 79: 
 var $311=$fl_3&8;
 var $312=($311|0)==0;
 if($312){var $pl_1=0;var $prefix_1=6320;var $p_2=$p_1;var $fl_4=$fl_3;var $a_0=$308;var $376=$260;var $375=$261;label=94;break;}else{label=80;break;}
 case 80: 
 var $314=$t_1>>4;
 var $315=((6320+$314)|0);
 var $pl_1=2;var $prefix_1=$315;var $p_2=$p_1;var $fl_4=$fl_3;var $a_0=$308;var $376=$260;var $375=$261;label=94;break;
 case 81: 
 var $317=$260;
 var $318$0=$261;
 var $318$1=0;
 var $319$0=0;
 var $319$1=$318$0;
 var $320$0=$317;
 var $320$1=0;
 var $321$0=$319$0|$320$0;
 var $321$1=$319$1|$320$1;
 var $$etemp$13$0=0;
 var $$etemp$13$1=0;
 var $322=(($321$0|0) == ($$etemp$13$0|0)) & (($321$1|0) == ($$etemp$13$1|0));
 if($322){var $_0_lcssa_i43=$5;label=83;break;}else{var $_012_i41$1=$321$1;var $_012_i41$0=$321$0;var $_03_i40=$5;label=82;break;}
 case 82: 
 var $_03_i40;
 var $_012_i41$0;
 var $_012_i41$1;
 var $$etemp$14$0=7;
 var $$etemp$14$1=0;
 var $323$0=$_012_i41$0&$$etemp$14$0;
 var $323$1=$_012_i41$1&$$etemp$14$1;
 var $$etemp$15$0=48;
 var $$etemp$15$1=0;
 var $324$0=$323$0|$$etemp$15$0;
 var $324$1=$323$1|$$etemp$15$1;
 var $325$0=$324$0;
 var $325=$325$0&255;
 var $326=((($_03_i40)-(1))|0);
 HEAP8[(($326)>>0)]=$325;
 var $327$0=($_012_i41$0>>>3)|($_012_i41$1<<29);
 var $327$1=($_012_i41$1>>>3)|(0<<29);
 var $$etemp$16$0=0;
 var $$etemp$16$1=0;
 var $328=(($327$0|0) == ($$etemp$16$0|0)) & (($327$1|0) == ($$etemp$16$1|0));
 if($328){var $_0_lcssa_i43=$326;label=83;break;}else{var $_012_i41$1=$327$1;var $_012_i41$0=$327$0;var $_03_i40=$326;label=82;break;}
 case 83: 
 var $_0_lcssa_i43;
 var $329=$fl_1_&8;
 var $330=($329|0)==0;
 if($330){var $pl_1=0;var $prefix_1=6320;var $p_2=$p_0;var $fl_4=$fl_1_;var $a_0=$_0_lcssa_i43;var $376=$260;var $375=$261;label=94;break;}else{label=84;break;}
 case 84: 
 var $_13=($322?6320:6325);
 var $332=($322&1);
 var $_14=$332^1;
 var $pl_1=$_14;var $prefix_1=$_13;var $p_2=$p_0;var $fl_4=$fl_1_;var $a_0=$_0_lcssa_i43;var $376=$260;var $375=$261;label=94;break;
 case 85: 
 var $334=$260;
 var $335$0=$261;
 var $335$1=0;
 var $336$0=0;
 var $336$1=$335$0;
 var $337$0=$334;
 var $337$1=0;
 var $338$0=$336$0|$337$0;
 var $338$1=$336$1|$337$1;
 var $$etemp$17$0=0;
 var $$etemp$17$1=0;
 var $339=(($338$1|0) < ($$etemp$17$1|0)) | (((($338$1|0) == ($$etemp$17$1|0) & ($338$0>>>0) <  ($$etemp$17$0>>>0))));
 if($339){label=86;break;}else{label=87;break;}
 case 86: 
 var $$etemp$18$0=0;
 var $$etemp$18$1=0;
 var $341$0=_i64Subtract($$etemp$18$0,$$etemp$18$1,$338$0,$338$1);var $341$1=tempRet0;
 var $342$0=$341$0;
 var $342=$342$0;
 var $343=$342;
 var $344$0=$341$1;
 var $344$1=0;
 var $345$0=$344$0;
 var $345=$345$0;
 var $pl_0=1;var $prefix_0=6320;var $354=$343;var $353=$345;label=89;break;
 case 87: 
 var $347=$fl_1_&2048;
 var $348=($347|0)==0;
 if($348){label=88;break;}else{var $pl_0=1;var $prefix_0=6321;var $354=$260;var $353=$261;label=89;break;}
 case 88: 
 var $350=$fl_1_&1;
 var $351=($350|0)==0;
 var $_15=($351?6320:6322);
 var $pl_0=$350;var $prefix_0=$_15;var $354=$260;var $353=$261;label=89;break;
 case 89: 
 var $353;
 var $354;
 var $prefix_0;
 var $pl_0;
 var $355=$354;
 var $356$0=$353;
 var $356$1=0;
 var $357$0=0;
 var $357$1=$356$0;
 var $358$0=$355;
 var $358$1=0;
 var $359$0=$358$0|$357$0;
 var $359$1=$358$1|$357$1;
 var $$etemp$19$0=-1;
 var $$etemp$19$1=0;
 var $360=(($359$1>>>0) > ($$etemp$19$1>>>0)) | (((($359$1>>>0) == ($$etemp$19$1>>>0) & ($359$0>>>0) >  ($$etemp$19$0>>>0))));
 if($360){var $_014_i$1=$359$1;var $_014_i$0=$359$0;var $_05_i=$5;label=90;break;}else{var $_01_lcssa_off0_i=$355;var $_0_lcssa_i45=$5;label=92;break;}
 case 90: 
 var $_05_i;
 var $_014_i$0;
 var $_014_i$1;
 var $$etemp$20$0=10;
 var $$etemp$20$1=0;
 var $361$0=___uremdi3($_014_i$0,$_014_i$1,$$etemp$20$0,$$etemp$20$1);var $361$1=tempRet0;
 var $$etemp$21$0=48;
 var $$etemp$21$1=0;
 var $362$0=$361$0|$$etemp$21$0;
 var $362$1=$361$1|$$etemp$21$1;
 var $363$0=$362$0;
 var $363=$363$0&255;
 var $364=((($_05_i)-(1))|0);
 HEAP8[(($364)>>0)]=$363;
 var $$etemp$22$0=10;
 var $$etemp$22$1=0;
 var $365$0=___udivdi3($_014_i$0,$_014_i$1,$$etemp$22$0,$$etemp$22$1);var $365$1=tempRet0;
 var $$etemp$23$0=-1;
 var $$etemp$23$1=9;
 var $366=(($_014_i$1>>>0) > ($$etemp$23$1>>>0)) | (((($_014_i$1>>>0) == ($$etemp$23$1>>>0) & ($_014_i$0>>>0) >  ($$etemp$23$0>>>0))));
 if($366){var $_014_i$1=$365$1;var $_014_i$0=$365$0;var $_05_i=$364;label=90;break;}else{label=91;break;}
 case 91: 
 var $extract_t_i$0=$365$0;
 var $extract_t_i=$extract_t_i$0;
 var $_01_lcssa_off0_i=$extract_t_i;var $_0_lcssa_i45=$364;label=92;break;
 case 92: 
 var $_0_lcssa_i45;
 var $_01_lcssa_off0_i;
 var $368=($_01_lcssa_off0_i|0)==0;
 if($368){var $pl_1=$pl_0;var $prefix_1=$prefix_0;var $p_2=$p_0;var $fl_4=$fl_1_;var $a_0=$_0_lcssa_i45;var $376=$354;var $375=$353;label=94;break;}else{var $_12_i=$_0_lcssa_i45;var $y_03_i=$_01_lcssa_off0_i;label=93;break;}
 case 93: 
 var $y_03_i;
 var $_12_i;
 var $369=(((($y_03_i>>>0))%(10))&-1);
 var $370=$369|48;
 var $371=(($370)&255);
 var $372=((($_12_i)-(1))|0);
 HEAP8[(($372)>>0)]=$371;
 var $373=(((($y_03_i>>>0))/(10))&-1);
 var $374=($y_03_i>>>0)<10;
 if($374){var $pl_1=$pl_0;var $prefix_1=$prefix_0;var $p_2=$p_0;var $fl_4=$fl_1_;var $a_0=$372;var $376=$354;var $375=$353;label=94;break;}else{var $_12_i=$372;var $y_03_i=$373;label=93;break;}
 case 94: 
 var $375;
 var $376;
 var $a_0;
 var $fl_4;
 var $p_2;
 var $prefix_1;
 var $pl_1;
 var $377=($p_2|0)>-1;
 var $378=$fl_4&-65537;
 var $_fl_4=($377?$378:$fl_4);
 var $379=$376;
 var $380$0=$375;
 var $380$1=0;
 var $381$0=0;
 var $381$1=$380$0;
 var $382$0=$379;
 var $382$1=0;
 var $383$0=$382$0|$381$0;
 var $383$1=$382$1|$381$1;
 var $$etemp$24$0=0;
 var $$etemp$24$1=0;
 var $384=(($383$0|0) == ($$etemp$24$0|0)) & (($383$1|0) == ($$etemp$24$1|0));
 var $385=($p_2|0)==0;
 var $or_cond=$384&$385;
 if($or_cond){var $pl_2=$pl_1;var $prefix_2=$prefix_1;var $p_5=0;var $fl_6=$_fl_4;var $z_2=$5;var $a_2=$5;var $1125=$376;var $1124=$375;label=322;break;}else{label=95;break;}
 case 95: 
 var $387=$a_0;
 var $388=((($7)-($387))|0);
 var $389=($384&1);
 var $390=((($389)+($388))|0);
 var $391=($p_2|0)>($390|0);
 var $p_2_=($391?$p_2:$390);
 var $pl_2=$pl_1;var $prefix_2=$prefix_1;var $p_5=$p_2_;var $fl_6=$_fl_4;var $z_2=$5;var $a_2=$a_0;var $1125=$376;var $1124=$375;label=322;break;
 case 96: 
 var $393=$260;
 var $394=(($393)&255);
 HEAP8[(($8)>>0)]=$394;
 var $pl_2=0;var $prefix_2=6320;var $p_5=1;var $fl_6=$271;var $z_2=$5;var $a_2=$8;var $1125=$260;var $1124=$261;label=322;break;
 case 97: 
 var $396=___errno_location();
 var $397=HEAP32[(($396)>>2)];
 var $398=_strerror($397);
 var $a_1=$398;label=99;break;
 case 98: 
 var $400=($260|0)==0;
 var $_17=($400?8648:$260);
 var $a_1=$_17;label=99;break;
 case 99: 
 var $a_1;
 var $402=_memchr($a_1,0,$p_0);
 var $403=($402|0)==0;
 if($403){label=100;break;}else{label=101;break;}
 case 100: 
 var $405=(($a_1+$p_0)|0);
 var $pl_2=0;var $prefix_2=6320;var $p_5=$p_0;var $fl_6=$271;var $z_2=$405;var $a_2=$a_1;var $1125=$260;var $1124=$261;label=322;break;
 case 101: 
 var $407=$402;
 var $408=$a_1;
 var $409=((($407)-($408))|0);
 var $pl_2=0;var $prefix_2=6320;var $p_5=$409;var $fl_6=$271;var $z_2=$402;var $a_2=$a_1;var $1125=$260;var $1124=$261;label=322;break;
 case 102: 
 var $410=$260;
 HEAP32[(($9)>>2)]=$410;
 HEAP32[(($10)>>2)]=0;
 var $411=(($wc)|0);
 var $416=$11;var $p_4293=-1;var $415=$411;label=104;break;
 case 103: 
 var $413=$260;
 var $414=($p_0|0)==0;
 if($414){var $i_0164=0;var $432=$260;var $431=$413;label=110;break;}else{var $416=$260;var $p_4293=$p_0;var $415=$413;label=104;break;}
 case 104: 
 var $415;
 var $p_4293;
 var $416;
 var $l_1165=0;var $i_0166=0;var $ws_0167=$415;label=106;break;
 case 105: 
 var $418=(($ws_0167+4)|0);
 var $419=($429>>>0)<($p_4293>>>0);
 if($419){var $l_1165=$424;var $i_0166=$429;var $ws_0167=$418;label=106;break;}else{var $l_1_lcssa=$424;var $i_0_lcssa=$429;label=109;break;}
 case 106: 
 var $ws_0167;
 var $i_0166;
 var $l_1165;
 var $421=HEAP32[(($ws_0167)>>2)];
 var $422=($421|0)==0;
 if($422){var $l_1_lcssa=$l_1165;var $i_0_lcssa=$i_0166;label=109;break;}else{label=107;break;}
 case 107: 
 var $424=_wctomb($12,$421);
 var $425=($424|0)>-1;
 if($425){label=108;break;}else{var $_0=-1;label=356;break;}
 case 108: 
 var $427=((($p_4293)-($i_0166))|0);
 var $428=($424>>>0)>($427>>>0);
 var $429=((($424)+($i_0166))|0);
 if($428){var $i_0164=$i_0166;var $432=$416;var $431=$415;label=110;break;}else{label=105;break;}
 case 109: 
 var $i_0_lcssa;
 var $l_1_lcssa;
 var $430=($l_1_lcssa|0)<0;
 if($430){var $_0=-1;label=356;break;}else{var $i_0164=$i_0_lcssa;var $432=$416;var $431=$415;label=110;break;}
 case 110: 
 var $431;
 var $432;
 var $i_0164;
 var $$etemp$25$0=256;
 var $$etemp$25$1=0;

 var $433=$fl_1_&73728;
 var $434=($433|0)==0;
 var $435=($i_0164|0)<($w_1|0);
 var $or_cond_i56=$434&$435;
 if($or_cond_i56){label=111;break;}else{label=114;break;}
 case 111: 
 var $437=((($w_1)-($i_0164))|0);
 var $438=($437>>>0)>256;
 var $439=($438?256:$437);
 _memset($6, 32, $439)|0;
 var $440=($437>>>0)>255;
 if($440){var $_01_i57=$437;label=112;break;}else{var $_0_lcssa_i59=$437;label=113;break;}
 case 112: 
 var $_01_i57;
 var $441=___fwritex($6,256,$f);
 var $442=((($_01_i57)-(256))|0);
 var $443=($442>>>0)>255;
 if($443){var $_01_i57=$442;label=112;break;}else{var $_0_lcssa_i59=$442;label=113;break;}
 case 113: 
 var $_0_lcssa_i59;
 var $444=___fwritex($6,$_0_lcssa_i59,$f);
 label=114;break;
 case 114: 
 var $445=($i_0164|0)==0;
 if($445){label=118;break;}else{var $i_1172=0;var $ws_1173=$431;label=115;break;}
 case 115: 
 var $ws_1173;
 var $i_1172;
 var $446=HEAP32[(($ws_1173)>>2)];
 var $447=($446|0)==0;
 if($447){label=118;break;}else{label=116;break;}
 case 116: 
 var $449=_wctomb($12,$446);
 var $450=((($449)+($i_1172))|0);
 var $451=($450|0)>($i_0164|0);
 if($451){label=118;break;}else{label=117;break;}
 case 117: 
 var $452=(($ws_1173+4)|0);
 var $453=___fwritex($12,$449,$f);
 var $454=($450>>>0)<($i_0164>>>0);
 if($454){var $i_1172=$450;var $ws_1173=$452;label=115;break;}else{label=118;break;}
 case 118: 
 var $$etemp$26$0=256;
 var $$etemp$26$1=0;

 var $455=($433|0)==8192;
 var $or_cond_i63=$455&$435;
 if($or_cond_i63){label=119;break;}else{label=122;break;}
 case 119: 
 var $457=((($w_1)-($i_0164))|0);
 var $458=($457>>>0)>256;
 var $459=($458?256:$457);
 _memset($6, 32, $459)|0;
 var $460=($457>>>0)>255;
 if($460){var $_01_i64=$457;label=120;break;}else{var $_0_lcssa_i66=$457;label=121;break;}
 case 120: 
 var $_01_i64;
 var $461=___fwritex($6,256,$f);
 var $462=((($_01_i64)-(256))|0);
 var $463=($462>>>0)>255;
 if($463){var $_01_i64=$462;label=120;break;}else{var $_0_lcssa_i66=$462;label=121;break;}
 case 121: 
 var $_0_lcssa_i66;
 var $464=___fwritex($6,$_0_lcssa_i66,$f);
 label=122;break;
 case 122: 
 var $$etemp$27$0=256;
 var $$etemp$27$1=0;

 var $465=($435?$w_1:$i_0164);
 var $l_0=$465;var $cnt_0=$cnt_1;var $l10n_0=$l10n_3;var $30=$432;var $29=$261;var $28=$177;label=2;break;
 case 123: 
 var $467=$260;
 var $468$0=$261;
 var $468$1=0;
 var $469$0=0;
 var $469$1=$468$0;
 var $470$0=$467;
 var $470$1=0;
 var $471$0=$469$0|$470$0;
 var $471$1=$469$1|$470$1;
 var $472=(HEAP32[((tempDoublePtr)>>2)]=$471$0, HEAP32[(((tempDoublePtr)+(4))>>2)]=$471$1, HEAPF64[(tempDoublePtr)>>3]);
 var $$etemp$28$0=4;
 var $$etemp$28$1=0;

 var $$etemp$29$0=22;
 var $$etemp$29$1=0;

 var $$etemp$30$0=12;
 var $$etemp$30$1=0;

 var $$etemp$31$0=504;
 var $$etemp$31$1=0;

 HEAP32[(($e2_i)>>2)]=0;
 var $$etemp$32$0=0;
 var $$etemp$32$1=0;
 var $473=(($471$1|0) < ($$etemp$32$1|0)) | (((($471$1|0) == ($$etemp$32$1|0) & ($471$0>>>0) <  ($$etemp$32$0>>>0))));
 if($473){label=124;break;}else{label=125;break;}
 case 124: 
 var $475=((-.0))-($472);
 var $_07_i=$475;var $pl_0_i=1;var $prefix_0_i=5592;label=127;break;
 case 125: 
 var $477=$fl_1_&2048;
 var $478=($477|0)==0;
 if($478){label=126;break;}else{var $_07_i=$472;var $pl_0_i=1;var $prefix_0_i=5595;label=127;break;}
 case 126: 
 var $480=$fl_1_&1;
 var $481=($480|0)==0;
 var $__i=($481?5593:5598);
 var $_07_i=$472;var $pl_0_i=$480;var $prefix_0_i=$__i;label=127;break;
 case 127: 
 var $prefix_0_i;
 var $pl_0_i;
 var $_07_i;
 HEAPF64[(tempDoublePtr)>>3]=$_07_i; var $483$0=HEAP32[((tempDoublePtr)>>2)];var $483$1=HEAP32[(((tempDoublePtr)+(4))>>2)];
 var $$etemp$33$0=0;
 var $$etemp$33$1=2146435072;
 var $484$0=$483$0&$$etemp$33$0;
 var $484$1=$483$1&$$etemp$33$1;
 var $$etemp$34$0=0;
 var $$etemp$34$1=2146435072;
 var $485=(($484$1>>>0) < ($$etemp$34$1>>>0)) | (((($484$1>>>0) == ($$etemp$34$1>>>0) & ($484$0>>>0) <  ($$etemp$34$0>>>0))));
 if($485){label=139;break;}else{label=128;break;}
 case 128: 
 var $487=$t_0&32;
 var $488=($487|0)!=0;
 var $489=($488?4296:4104);
 var $490=isNaN($_07_i)|isNaN(0);
 if($490){label=129;break;}else{var $s1_0_i=$489;var $pl_1_i=$pl_0_i;label=130;break;}
 case 129: 
 var $492=($488?3952:3816);
 var $s1_0_i=$492;var $pl_1_i=0;label=130;break;
 case 130: 
 var $pl_1_i;
 var $s1_0_i;
 var $494=((($pl_1_i)+(3))|0);
 var $$etemp$35$0=256;
 var $$etemp$35$1=0;

 var $495=$fl_1_&8192;
 var $496=($495|0)==0;
 var $497=($494|0)<($w_1|0);
 var $or_cond_i34_i=$496&$497;
 if($or_cond_i34_i){label=131;break;}else{label=134;break;}
 case 131: 
 var $499=((($w_1)-($494))|0);
 var $500=($499>>>0)>256;
 var $501=($500?256:$499);
 _memset($6, 32, $501)|0;
 var $502=($499>>>0)>255;
 if($502){var $_01_i35_i=$499;label=132;break;}else{var $_0_lcssa_i37_i=$499;label=133;break;}
 case 132: 
 var $_01_i35_i;
 var $503=___fwritex($6,256,$f);
 var $504=((($_01_i35_i)-(256))|0);
 var $505=($504>>>0)>255;
 if($505){var $_01_i35_i=$504;label=132;break;}else{var $_0_lcssa_i37_i=$504;label=133;break;}
 case 133: 
 var $_0_lcssa_i37_i;
 var $506=___fwritex($6,$_0_lcssa_i37_i,$f);
 label=134;break;
 case 134: 
 var $$etemp$36$0=256;
 var $$etemp$36$1=0;

 var $507=___fwritex($prefix_0_i,$pl_1_i,$f);
 var $508=___fwritex($s1_0_i,3,$f);
 var $$etemp$37$0=256;
 var $$etemp$37$1=0;

 var $509=$fl_1_&73728;
 var $510=($509|0)==8192;
 var $or_cond_i41_i=$510&$497;
 if($or_cond_i41_i){label=135;break;}else{label=138;break;}
 case 135: 
 var $512=((($w_1)-($494))|0);
 var $513=($512>>>0)>256;
 var $514=($513?256:$512);
 _memset($6, 32, $514)|0;
 var $515=($512>>>0)>255;
 if($515){var $_01_i42_i=$512;label=136;break;}else{var $_0_lcssa_i44_i=$512;label=137;break;}
 case 136: 
 var $_01_i42_i;
 var $516=___fwritex($6,256,$f);
 var $517=((($_01_i42_i)-(256))|0);
 var $518=($517>>>0)>255;
 if($518){var $_01_i42_i=$517;label=136;break;}else{var $_0_lcssa_i44_i=$517;label=137;break;}
 case 137: 
 var $_0_lcssa_i44_i;
 var $519=___fwritex($6,$_0_lcssa_i44_i,$f);
 label=138;break;
 case 138: 
 var $$etemp$38$0=256;
 var $$etemp$38$1=0;

 var $w__i=($497?$w_1:$494);
 var $l_0=$w__i;var $cnt_0=$cnt_1;var $l10n_0=$l10n_3;var $30=$260;var $29=$261;var $28=$177;label=2;break;
 case 139: 
 var $521=_frexpl($_07_i,$e2_i);
 var $522=($521)*(2);
 var $523=$522!=0;
 if($523){label=140;break;}else{label=141;break;}
 case 140: 
 var $525=HEAP32[(($e2_i)>>2)];
 var $526=((($525)-(1))|0);
 HEAP32[(($e2_i)>>2)]=$526;
 label=141;break;
 case 141: 
 var $528=$t_0|32;
 var $529=($528|0)==97;
 if($529){label=142;break;}else{label=191;break;}
 case 142: 
 var $531=$t_0&32;
 var $532=($531|0)==0;
 var $533=(($prefix_0_i+9)|0);
 var $prefix_0__i=($532?$prefix_0_i:$533);
 var $534=$pl_0_i|2;
 var $535=($p_0>>>0)>11;
 var $536=(((12)-($p_0))|0);
 var $re_0_i=($535?0:$536);
 var $537=($re_0_i|0)==0;
 if($537){var $_1_i=$522;label=147;break;}else{var $round_0163_i=8;var $re_1164_i=$re_0_i;label=143;break;}
 case 143: 
 var $re_1164_i;
 var $round_0163_i;
 var $538=((($re_1164_i)-(1))|0);
 var $539=($round_0163_i)*(16);
 var $540=($538|0)==0;
 if($540){label=144;break;}else{var $round_0163_i=$539;var $re_1164_i=$538;label=143;break;}
 case 144: 
 var $541=HEAP8[(($prefix_0__i)>>0)];
 var $542=(($541<<24)>>24)==45;
 if($542){label=145;break;}else{label=146;break;}
 case 145: 
 var $544=((-.0))-($522);
 var $545=($544)-($539);
 var $546=($539)+($545);
 var $547=((-.0))-($546);
 var $_1_i=$547;label=147;break;
 case 146: 
 var $549=($522)+($539);
 var $550=($549)-($539);
 var $_1_i=$550;label=147;break;
 case 147: 
 var $_1_i;
 var $551=HEAP32[(($e2_i)>>2)];
 var $552=($551|0)<0;
 var $553=(((-$551))|0);
 var $554=($552?$553:$551);
 var $555=($554|0)<0;
 if($555){label=148;break;}else{var $_01_lcssa_off0_i_i=$554;var $_0_lcssa_i47_i=$17;label=151;break;}
 case 148: 
 var $556$0=$554;
 var $556$1=((((($554|0)<0))|0)?-1:0);
 var $_014_i_i$1=$556$1;var $_014_i_i$0=$556$0;var $_05_i_i=$17;label=149;break;
 case 149: 
 var $_05_i_i;
 var $_014_i_i$0;
 var $_014_i_i$1;
 var $$etemp$39$0=10;
 var $$etemp$39$1=0;
 var $557$0=___uremdi3($_014_i_i$0,$_014_i_i$1,$$etemp$39$0,$$etemp$39$1);var $557$1=tempRet0;
 var $$etemp$40$0=48;
 var $$etemp$40$1=0;
 var $558$0=$557$0|$$etemp$40$0;
 var $558$1=$557$1|$$etemp$40$1;
 var $559$0=$558$0;
 var $559=$559$0&255;
 var $560=((($_05_i_i)-(1))|0);
 HEAP8[(($560)>>0)]=$559;
 var $$etemp$41$0=10;
 var $$etemp$41$1=0;
 var $561$0=___udivdi3($_014_i_i$0,$_014_i_i$1,$$etemp$41$0,$$etemp$41$1);var $561$1=tempRet0;
 var $$etemp$42$0=-1;
 var $$etemp$42$1=9;
 var $562=(($_014_i_i$1>>>0) > ($$etemp$42$1>>>0)) | (((($_014_i_i$1>>>0) == ($$etemp$42$1>>>0) & ($_014_i_i$0>>>0) >  ($$etemp$42$0>>>0))));
 if($562){var $_014_i_i$1=$561$1;var $_014_i_i$0=$561$0;var $_05_i_i=$560;label=149;break;}else{label=150;break;}
 case 150: 
 var $extract_t_i_i$0=$561$0;
 var $extract_t_i_i=$extract_t_i_i$0;
 var $_01_lcssa_off0_i_i=$extract_t_i_i;var $_0_lcssa_i47_i=$560;label=151;break;
 case 151: 
 var $_0_lcssa_i47_i;
 var $_01_lcssa_off0_i_i;
 var $564=($_01_lcssa_off0_i_i|0)==0;
 if($564){var $_1_lcssa_i_i=$_0_lcssa_i47_i;label=153;break;}else{var $_12_i_i=$_0_lcssa_i47_i;var $y_03_i_i=$_01_lcssa_off0_i_i;label=152;break;}
 case 152: 
 var $y_03_i_i;
 var $_12_i_i;
 var $565=(((($y_03_i_i>>>0))%(10))&-1);
 var $566=$565|48;
 var $567=(($566)&255);
 var $568=((($_12_i_i)-(1))|0);
 HEAP8[(($568)>>0)]=$567;
 var $569=(((($y_03_i_i>>>0))/(10))&-1);
 var $570=($y_03_i_i>>>0)<10;
 if($570){var $_1_lcssa_i_i=$568;label=153;break;}else{var $_12_i_i=$568;var $y_03_i_i=$569;label=152;break;}
 case 153: 
 var $_1_lcssa_i_i;
 var $571=($_1_lcssa_i_i|0)==($17|0);
 if($571){label=154;break;}else{var $estr_0_i=$_1_lcssa_i_i;label=155;break;}
 case 154: 
 HEAP8[(($18)>>0)]=48;
 var $estr_0_i=$18;label=155;break;
 case 155: 
 var $estr_0_i;
 var $573=HEAP32[(($e2_i)>>2)];
 var $574=$573>>31;
 var $575=$574&2;
 var $576=((($575)+(43))|0);
 var $577=(($576)&255);
 var $578=((($estr_0_i)-(1))|0);
 HEAP8[(($578)>>0)]=$577;
 var $579=((($t_0)+(15))|0);
 var $580=(($579)&255);
 var $581=((($estr_0_i)-(2))|0);
 HEAP8[(($581)>>0)]=$580;
 var $582=($p_0|0)>0;
 var $583=$fl_1_&8;
 var $584=($583|0)==0;
 if($582){label=157;break;}else{label=156;break;}
 case 156: 
 if($584){var $_2_us158_i=$_1_i;var $s_0_us157_i=$14;label=164;break;}else{var $_2_i=$_1_i;var $s_0_i=$14;label=167;break;}
 case 157: 
 if($584){var $_2_us_us_i=$_1_i;var $s_0_us_us_i=$14;label=158;break;}else{var $_2_us_i=$_1_i;var $s_0_us_i=$14;label=161;break;}
 case 158: 
 var $s_0_us_us_i;
 var $_2_us_us_i;
 var $585=(($_2_us_us_i)&-1);
 var $586=((8+$585)|0);
 var $587=HEAP8[(($586)>>0)];
 var $588=($587&255);
 var $589=$588|$531;
 var $590=(($589)&255);
 var $591=(($s_0_us_us_i+1)|0);
 HEAP8[(($s_0_us_us_i)>>0)]=$590;
 var $592=($585|0);
 var $593=($_2_us_us_i)-($592);
 var $594=($593)*(16);
 var $595=$591;
 var $596=((($595)-($1))|0);
 var $597=($596|0)==1;
 if($597){label=159;break;}else{var $s_1_us_us_i=$591;label=160;break;}
 case 159: 
 var $599=(($s_0_us_us_i+2)|0);
 HEAP8[(($591)>>0)]=46;
 var $s_1_us_us_i=$599;label=160;break;
 case 160: 
 var $s_1_us_us_i;
 var $601=$594!=0;
 if($601){var $_2_us_us_i=$594;var $s_0_us_us_i=$s_1_us_us_i;label=158;break;}else{var $s_1_lcssa_i=$s_1_us_us_i;label=170;break;}
 case 161: 
 var $s_0_us_i;
 var $_2_us_i;
 var $602=(($_2_us_i)&-1);
 var $603=((8+$602)|0);
 var $604=HEAP8[(($603)>>0)];
 var $605=($604&255);
 var $606=$605|$531;
 var $607=(($606)&255);
 var $608=(($s_0_us_i+1)|0);
 HEAP8[(($s_0_us_i)>>0)]=$607;
 var $609=($602|0);
 var $610=($_2_us_i)-($609);
 var $611=($610)*(16);
 var $612=$608;
 var $613=((($612)-($1))|0);
 var $614=($613|0)==1;
 if($614){label=162;break;}else{var $s_1_us_i=$608;label=163;break;}
 case 162: 
 var $616=(($s_0_us_i+2)|0);
 HEAP8[(($608)>>0)]=46;
 var $s_1_us_i=$616;label=163;break;
 case 163: 
 var $s_1_us_i;
 var $618=$611!=0;
 if($618){var $_2_us_i=$611;var $s_0_us_i=$s_1_us_i;label=161;break;}else{var $s_1_lcssa_i=$s_1_us_i;label=170;break;}
 case 164: 
 var $s_0_us157_i;
 var $_2_us158_i;
 var $619=(($_2_us158_i)&-1);
 var $620=((8+$619)|0);
 var $621=HEAP8[(($620)>>0)];
 var $622=($621&255);
 var $623=$622|$531;
 var $624=(($623)&255);
 var $625=(($s_0_us157_i+1)|0);
 HEAP8[(($s_0_us157_i)>>0)]=$624;
 var $626=($619|0);
 var $627=($_2_us158_i)-($626);
 var $628=($627)*(16);
 var $629=$625;
 var $630=((($629)-($1))|0);
 var $631=($630|0)==1;
 var $632=$628!=0;
 var $or_cond_i71=$631&$632;
 if($or_cond_i71){label=165;break;}else{var $s_1_us159_i=$625;label=166;break;}
 case 165: 
 var $634=(($s_0_us157_i+2)|0);
 HEAP8[(($625)>>0)]=46;
 var $s_1_us159_i=$634;label=166;break;
 case 166: 
 var $s_1_us159_i;
 if($632){var $_2_us158_i=$628;var $s_0_us157_i=$s_1_us159_i;label=164;break;}else{var $s_1_lcssa_i=$s_1_us159_i;label=170;break;}
 case 167: 
 var $s_0_i;
 var $_2_i;
 var $636=(($_2_i)&-1);
 var $637=((8+$636)|0);
 var $638=HEAP8[(($637)>>0)];
 var $639=($638&255);
 var $640=$639|$531;
 var $641=(($640)&255);
 var $642=(($s_0_i+1)|0);
 HEAP8[(($s_0_i)>>0)]=$641;
 var $643=($636|0);
 var $644=($_2_i)-($643);
 var $645=($644)*(16);
 var $646=$642;
 var $647=((($646)-($1))|0);
 var $648=($647|0)==1;
 if($648){label=168;break;}else{var $s_1_i=$642;label=169;break;}
 case 168: 
 var $650=(($s_0_i+2)|0);
 HEAP8[(($642)>>0)]=46;
 var $s_1_i=$650;label=169;break;
 case 169: 
 var $s_1_i;
 var $652=$645!=0;
 if($652){var $_2_i=$645;var $s_0_i=$s_1_i;label=167;break;}else{var $s_1_lcssa_i=$s_1_i;label=170;break;}
 case 170: 
 var $s_1_lcssa_i;
 var $653=($p_0|0)==0;
 var $_pre315_i=$s_1_lcssa_i;
 if($653){label=173;break;}else{label=171;break;}
 case 171: 
 var $655=((($21)+($_pre315_i))|0);
 var $656=($655|0)<($p_0|0);
 if($656){label=172;break;}else{label=173;break;}
 case 172: 
 var $658=$581;
 var $659=((($22)+($p_0))|0);
 var $660=((($659)-($658))|0);
 var $l_0_i=$660;label=174;break;
 case 173: 
 var $661=$581;
 var $662=((($20)-($661))|0);
 var $663=((($662)+($_pre315_i))|0);
 var $l_0_i=$663;label=174;break;
 case 174: 
 var $l_0_i;
 var $665=((($l_0_i)+($534))|0);
 var $$etemp$43$0=256;
 var $$etemp$43$1=0;

 var $666=$fl_1_&73728;
 var $667=($666|0)==0;
 var $668=($665|0)<($w_1|0);
 var $or_cond_i51_i=$667&$668;
 if($or_cond_i51_i){label=175;break;}else{label=178;break;}
 case 175: 
 var $670=((($w_1)-($665))|0);
 var $671=($670>>>0)>256;
 var $672=($671?256:$670);
 _memset($6, 32, $672)|0;
 var $673=($670>>>0)>255;
 if($673){var $_01_i52_i=$670;label=176;break;}else{var $_0_lcssa_i54_i=$670;label=177;break;}
 case 176: 
 var $_01_i52_i;
 var $674=___fwritex($6,256,$f);
 var $675=((($_01_i52_i)-(256))|0);
 var $676=($675>>>0)>255;
 if($676){var $_01_i52_i=$675;label=176;break;}else{var $_0_lcssa_i54_i=$675;label=177;break;}
 case 177: 
 var $_0_lcssa_i54_i;
 var $677=___fwritex($6,$_0_lcssa_i54_i,$f);
 label=178;break;
 case 178: 
 var $$etemp$44$0=256;
 var $$etemp$44$1=0;

 var $678=___fwritex($prefix_0__i,$534,$f);
 var $$etemp$45$0=256;
 var $$etemp$45$1=0;

 var $679=($666|0)==65536;
 var $or_cond_i58_i=$679&$668;
 if($or_cond_i58_i){label=179;break;}else{label=182;break;}
 case 179: 
 var $681=((($w_1)-($665))|0);
 var $682=($681>>>0)>256;
 var $683=($682?256:$681);
 _memset($6, 48, $683)|0;
 var $684=($681>>>0)>255;
 if($684){var $_01_i59_i=$681;label=180;break;}else{var $_0_lcssa_i61_i=$681;label=181;break;}
 case 180: 
 var $_01_i59_i;
 var $685=___fwritex($6,256,$f);
 var $686=((($_01_i59_i)-(256))|0);
 var $687=($686>>>0)>255;
 if($687){var $_01_i59_i=$686;label=180;break;}else{var $_0_lcssa_i61_i=$686;label=181;break;}
 case 181: 
 var $_0_lcssa_i61_i;
 var $688=___fwritex($6,$_0_lcssa_i61_i,$f);
 label=182;break;
 case 182: 
 var $$etemp$46$0=256;
 var $$etemp$46$1=0;

 var $689=((($_pre315_i)-($1))|0);
 var $690=___fwritex($14,$689,$f);
 var $691=$581;
 var $692=((($19)-($691))|0);
 var $693=((($l_0_i)-($692))|0);
 var $694=((($693)-($689))|0);
 var $$etemp$47$0=256;
 var $$etemp$47$1=0;

 var $695=($694|0)>0;
 if($695){label=183;break;}else{label=186;break;}
 case 183: 
 var $697=($694>>>0)>256;
 var $698=($697?256:$694);
 _memset($6, 48, $698)|0;
 var $699=($694>>>0)>255;
 if($699){var $_01_i65_i=$694;label=184;break;}else{var $_0_lcssa_i67_i=$694;label=185;break;}
 case 184: 
 var $_01_i65_i;
 var $700=___fwritex($6,256,$f);
 var $701=((($_01_i65_i)-(256))|0);
 var $702=($701>>>0)>255;
 if($702){var $_01_i65_i=$701;label=184;break;}else{var $_0_lcssa_i67_i=$701;label=185;break;}
 case 185: 
 var $_0_lcssa_i67_i;
 var $703=___fwritex($6,$_0_lcssa_i67_i,$f);
 label=186;break;
 case 186: 
 var $$etemp$48$0=256;
 var $$etemp$48$1=0;

 var $704=___fwritex($581,$692,$f);
 var $$etemp$49$0=256;
 var $$etemp$49$1=0;

 var $705=($666|0)==8192;
 var $or_cond_i71_i=$705&$668;
 if($or_cond_i71_i){label=187;break;}else{label=190;break;}
 case 187: 
 var $707=((($w_1)-($665))|0);
 var $708=($707>>>0)>256;
 var $709=($708?256:$707);
 _memset($6, 32, $709)|0;
 var $710=($707>>>0)>255;
 if($710){var $_01_i72_i=$707;label=188;break;}else{var $_0_lcssa_i74_i=$707;label=189;break;}
 case 188: 
 var $_01_i72_i;
 var $711=___fwritex($6,256,$f);
 var $712=((($_01_i72_i)-(256))|0);
 var $713=($712>>>0)>255;
 if($713){var $_01_i72_i=$712;label=188;break;}else{var $_0_lcssa_i74_i=$712;label=189;break;}
 case 189: 
 var $_0_lcssa_i74_i;
 var $714=___fwritex($6,$_0_lcssa_i74_i,$f);
 label=190;break;
 case 190: 
 var $$etemp$50$0=256;
 var $$etemp$50$1=0;

 var $w_19_i=($668?$w_1:$665);
 var $l_0=$w_19_i;var $cnt_0=$cnt_1;var $l10n_0=$l10n_3;var $30=$260;var $29=$261;var $28=$177;label=2;break;
 case 191: 
 var $716=($p_0|0)<0;
 var $_p_i=($716?6:$p_0);
 if($523){label=193;break;}else{label=192;break;}
 case 192: 
 var $_pre_i=HEAP32[(($e2_i)>>2)];
 var $_3_i=$522;var $722=$_pre_i;label=194;break;
 case 193: 
 var $718=($522)*(268435456);
 var $719=HEAP32[(($e2_i)>>2)];
 var $720=((($719)-(28))|0);
 HEAP32[(($e2_i)>>2)]=$720;
 var $_3_i=$718;var $722=$720;label=194;break;
 case 194: 
 var $722;
 var $_3_i;
 var $723=($722|0)<0;
 var $_30_i=($723?$23:$24);
 var $_4_i=$_3_i;var $z_0_i=$_30_i;label=195;break;
 case 195: 
 var $z_0_i;
 var $_4_i;
 var $725=($_4_i>=0 ? Math_floor($_4_i) : Math_ceil($_4_i));
 HEAP32[(($z_0_i)>>2)]=$725;
 var $726=(($z_0_i+4)|0);
 var $727=($725>>>0);
 var $728=($_4_i)-($727);
 var $729=($728)*(1000000000);
 var $730=$729!=0;
 if($730){var $_4_i=$729;var $z_0_i=$726;label=195;break;}else{label=196;break;}
 case 196: 
 var $_pr_i=HEAP32[(($e2_i)>>2)];
 var $731=($_pr_i|0)>0;
 if($731){var $732=$_pr_i;var $z_1261_i=$726;var $a_1262_i=$_30_i;label=197;break;}else{var $z_1_lcssa_i=$726;var $a_1_lcssa_i=$_30_i;var $_pr145_i=$_pr_i;label=206;break;}
 case 197: 
 var $a_1262_i;
 var $z_1261_i;
 var $732;
 var $733=($732|0)>29;
 var $734=($733?29:$732);
 var $d_0253_i=((($z_1261_i)-(4))|0);
 var $735=($d_0253_i>>>0)<($a_1262_i>>>0);
 if($735){var $a_2_ph_i=$a_1262_i;label=202;break;}else{label=198;break;}
 case 198: 
 var $736$0=$734;
 var $736$1=0;
 var $carry_0254_i=0;var $d_0255_i=$d_0253_i;label=199;break;
 case 199: 
 var $d_0255_i;
 var $carry_0254_i;
 var $738=HEAP32[(($d_0255_i)>>2)];
 var $739$0=$738;
 var $739$1=0;
 var $740$0=_bitshift64Shl($739$0,$739$1,$736$0);var $740$1=tempRet0;
 var $741$0=$carry_0254_i;
 var $741$1=0;
 var $742$0=_i64Add($740$0,$740$1,$741$0,$741$1);var $742$1=tempRet0;
 var $$etemp$51$0=1000000000;
 var $$etemp$51$1=0;
 var $743$0=___uremdi3($742$0,$742$1,$$etemp$51$0,$$etemp$51$1);var $743$1=tempRet0;
 var $744$0=$743$0;
 var $744=$744$0;
 HEAP32[(($d_0255_i)>>2)]=$744;
 var $$etemp$52$0=1000000000;
 var $$etemp$52$1=0;
 var $745$0=___udivdi3($742$0,$742$1,$$etemp$52$0,$$etemp$52$1);var $745$1=tempRet0;
 var $746$0=$745$0;
 var $746=$746$0;
 var $d_0_i=((($d_0255_i)-(4))|0);
 var $747=($d_0_i>>>0)<($a_1262_i>>>0);
 if($747){label=200;break;}else{var $carry_0254_i=$746;var $d_0255_i=$d_0_i;label=199;break;}
 case 200: 
 var $748=($746|0)==0;
 if($748){var $a_2_ph_i=$a_1262_i;label=202;break;}else{label=201;break;}
 case 201: 
 var $750=((($a_1262_i)-(4))|0);
 HEAP32[(($750)>>2)]=$746;
 var $a_2_ph_i=$750;label=202;break;
 case 202: 
 var $a_2_ph_i;
 var $z_2_i=$z_1261_i;label=203;break;
 case 203: 
 var $z_2_i;
 var $752=($z_2_i>>>0)>($a_2_ph_i>>>0);
 if($752){label=204;break;}else{label=205;break;}
 case 204: 
 var $754=((($z_2_i)-(4))|0);
 var $755=HEAP32[(($754)>>2)];
 var $756=($755|0)==0;
 if($756){var $z_2_i=$754;label=203;break;}else{label=205;break;}
 case 205: 
 var $757=HEAP32[(($e2_i)>>2)];
 var $758=((($757)-($734))|0);
 HEAP32[(($e2_i)>>2)]=$758;
 var $759=($758|0)>0;
 if($759){var $732=$758;var $z_1261_i=$z_2_i;var $a_1262_i=$a_2_ph_i;label=197;break;}else{var $z_1_lcssa_i=$z_2_i;var $a_1_lcssa_i=$a_2_ph_i;var $_pr145_i=$758;label=206;break;}
 case 206: 
 var $_pr145_i;
 var $a_1_lcssa_i;
 var $z_1_lcssa_i;
 var $760=($_pr145_i|0)<0;
 if($760){label=207;break;}else{var $z_3_lcssa_i=$z_1_lcssa_i;var $a_3_lcssa_i=$a_1_lcssa_i;label=217;break;}
 case 207: 
 var $761=((($_p_i)+(25))|0);
 var $762=(((($761|0))/(9))&-1);
 var $763=((($762)+(1))|0);
 var $764=($528|0)==102;
 var $766=$_pr145_i;var $z_3247_i=$z_1_lcssa_i;var $a_3248_i=$a_1_lcssa_i;label=208;break;
 case 208: 
 var $a_3248_i;
 var $z_3247_i;
 var $766;
 var $767=(((-$766))|0);
 var $768=($767|0)>9;
 var $_20_i=($768?9:$767);
 var $769=($a_3248_i>>>0)<($z_3247_i>>>0);
 if($769){label=210;break;}else{label=209;break;}
 case 209: 
 var $770=HEAP32[(($a_3248_i)>>2)];
 var $771=($770|0)==0;
 var $772=(($a_3248_i+4)|0);
 var $_a_3316_i=($771?$772:$a_3248_i);
 var $z_4_i=$z_3247_i;var $_a_3317_i=$_a_3316_i;label=214;break;
 case 210: 
 var $773=1<<$_20_i;
 var $774=((($773)-(1))|0);
 var $775=1000000000>>>($_20_i>>>0);
 var $d_1241_i=$a_3248_i;var $carry3_0242_i=0;label=211;break;
 case 211: 
 var $carry3_0242_i;
 var $d_1241_i;
 var $777=HEAP32[(($d_1241_i)>>2)];
 var $778=$777&$774;
 var $779=$777>>>($_20_i>>>0);
 var $780=((($779)+($carry3_0242_i))|0);
 HEAP32[(($d_1241_i)>>2)]=$780;
 var $781=(Math_imul($778,$775)|0);
 var $782=(($d_1241_i+4)|0);
 var $783=($782>>>0)<($z_3247_i>>>0);
 if($783){var $d_1241_i=$782;var $carry3_0242_i=$781;label=211;break;}else{label=212;break;}
 case 212: 
 var $784=HEAP32[(($a_3248_i)>>2)];
 var $785=($784|0)==0;
 var $786=(($a_3248_i+4)|0);
 var $_a_3_i=($785?$786:$a_3248_i);
 var $787=($781|0)==0;
 if($787){var $z_4_i=$z_3247_i;var $_a_3317_i=$_a_3_i;label=214;break;}else{label=213;break;}
 case 213: 
 var $789=(($z_3247_i+4)|0);
 HEAP32[(($z_3247_i)>>2)]=$781;
 var $z_4_i=$789;var $_a_3317_i=$_a_3_i;label=214;break;
 case 214: 
 var $_a_3317_i;
 var $z_4_i;
 var $791=($764?$_30_i:$_a_3317_i);
 var $792=$z_4_i;
 var $793=$791;
 var $794=((($792)-($793))|0);
 var $795=$794>>2;
 var $796=($795|0)>($763|0);
 if($796){label=215;break;}else{var $z_5_i=$z_4_i;label=216;break;}
 case 215: 
 var $798=(($791+($763<<2))|0);
 var $z_5_i=$798;label=216;break;
 case 216: 
 var $z_5_i;
 var $799=HEAP32[(($e2_i)>>2)];
 var $800=((($799)+($_20_i))|0);
 HEAP32[(($e2_i)>>2)]=$800;
 var $801=($800|0)<0;
 if($801){var $766=$800;var $z_3247_i=$z_5_i;var $a_3248_i=$_a_3317_i;label=208;break;}else{var $z_3_lcssa_i=$z_5_i;var $a_3_lcssa_i=$_a_3317_i;label=217;break;}
 case 217: 
 var $a_3_lcssa_i;
 var $z_3_lcssa_i;
 var $802=($a_3_lcssa_i>>>0)<($z_3_lcssa_i>>>0);
 if($802){label=218;break;}else{var $e_1_i=0;label=220;break;}
 case 218: 
 var $804=$_30_i;
 var $805=$a_3_lcssa_i;
 var $806=((($804)-($805))|0);
 var $807=$806>>2;
 var $808=((($807)*(9))&-1);
 var $809=HEAP32[(($a_3_lcssa_i)>>2)];
 var $810=($809>>>0)<10;
 if($810){var $e_1_i=$808;label=220;break;}else{var $i_0236_i=10;var $e_0237_i=$808;label=219;break;}
 case 219: 
 var $e_0237_i;
 var $i_0236_i;
 var $811=((($i_0236_i)*(10))&-1);
 var $812=((($e_0237_i)+(1))|0);
 var $813=($809>>>0)<($811>>>0);
 if($813){var $e_1_i=$812;label=220;break;}else{var $i_0236_i=$811;var $e_0237_i=$812;label=219;break;}
 case 220: 
 var $e_1_i;
 var $814=($528|0)!=102;
 var $815=($814?$e_1_i:0);
 var $816=((($_p_i)-($815))|0);
 var $817=($528|0)==103;
 if($817){label=221;break;}else{var $821=0;label=222;break;}
 case 221: 
 var $819=($_p_i|0)!=0;
 var $phitmp_i=($819&1);
 var $821=$phitmp_i;label=222;break;
 case 222: 
 var $821;
 var $822=((($816)-($821))|0);
 var $823=$z_3_lcssa_i;
 var $824=$_30_i;
 var $825=((($823)-($824))|0);
 var $826=$825>>2;
 var $827=((($826)*(9))&-1);
 var $828=((($827)-(9))|0);
 var $829=($822|0)<($828|0);
 if($829){label=223;break;}else{var $a_8_ph_i=$a_3_lcssa_i;var $z_6_ph_i=$z_3_lcssa_i;var $e_4_ph_i=$e_1_i;label=242;break;}
 case 223: 
 var $831=((($822)+(9216))|0);
 var $832=(((($831|0))/(9))&-1);
 var $_sum_i=((($832)-(1023))|0);
 var $833=(($_30_i+($_sum_i<<2))|0);
 var $834=(((($831|0))%(9))&-1);
 var $j_0228_i=((($834)+(1))|0);
 var $835=($j_0228_i|0)<9;
 if($835){var $i_1229_i=10;var $j_0230_i=$j_0228_i;label=224;break;}else{var $i_1_lcssa_i=10;label=225;break;}
 case 224: 
 var $j_0230_i;
 var $i_1229_i;
 var $836=((($i_1229_i)*(10))&-1);
 var $j_0_i=((($j_0230_i)+(1))|0);
 var $837=($j_0_i|0)<9;
 if($837){var $i_1229_i=$836;var $j_0230_i=$j_0_i;label=224;break;}else{var $i_1_lcssa_i=$836;label=225;break;}
 case 225: 
 var $i_1_lcssa_i;
 var $838=HEAP32[(($833)>>2)];
 var $839=(((($838>>>0))%(($i_1_lcssa_i>>>0)))&-1);
 var $840=($839|0)==0;
 if($840){label=226;break;}else{label=227;break;}
 case 226: 
 var $_sum16_i=((($832)-(1022))|0);
 var $842=(($_30_i+($_sum16_i<<2))|0);
 var $843=($842|0)==($z_3_lcssa_i|0);
 if($843){var $a_7_i=$a_3_lcssa_i;var $d_3_i=$833;var $e_3_i=$e_1_i;label=241;break;}else{label=227;break;}
 case 227: 
 var $845=(((($838>>>0))/(($i_1_lcssa_i>>>0)))&-1);
 var $846=$845&1;
 var $847=($846|0)==0;
 var $_21_i=($847?9007199254740992:9007199254740994);
 var $848=(((($i_1_lcssa_i|0))/(2))&-1);
 var $849=($839>>>0)<($848>>>0);
 if($849){var $small_0_i=0.5;label=231;break;}else{label=228;break;}
 case 228: 
 var $851=($839|0)==($848|0);
 if($851){label=229;break;}else{label=230;break;}
 case 229: 
 var $_sum17_i=((($832)-(1022))|0);
 var $853=(($_30_i+($_sum17_i<<2))|0);
 var $854=($853|0)==($z_3_lcssa_i|0);
 if($854){var $small_0_i=1;label=231;break;}else{label=230;break;}
 case 230: 
 var $small_0_i=1.5;label=231;break;
 case 231: 
 var $small_0_i;
 var $857=($pl_0_i|0)==0;
 if($857){var $small_1_i=$small_0_i;var $round6_1_i=$_21_i;label=234;break;}else{label=232;break;}
 case 232: 
 var $859=HEAP8[(($prefix_0_i)>>0)];
 var $860=(($859<<24)>>24)==45;
 if($860){label=233;break;}else{var $small_1_i=$small_0_i;var $round6_1_i=$_21_i;label=234;break;}
 case 233: 
 var $862=($_21_i)*(-1);
 var $863=($small_0_i)*(-1);
 var $small_1_i=$863;var $round6_1_i=$862;label=234;break;
 case 234: 
 var $round6_1_i;
 var $small_1_i;
 var $865=((($838)-($839))|0);
 HEAP32[(($833)>>2)]=$865;
 var $866=($round6_1_i)+($small_1_i);
 var $867=$866!=$round6_1_i;
 if($867){label=235;break;}else{var $a_7_i=$a_3_lcssa_i;var $d_3_i=$833;var $e_3_i=$e_1_i;label=241;break;}
 case 235: 
 var $869=((($865)+($i_1_lcssa_i))|0);
 HEAP32[(($833)>>2)]=$869;
 var $870=($869>>>0)>999999999;
 if($870){var $d_2221_i=$833;var $a_5222_i=$a_3_lcssa_i;label=236;break;}else{var $d_2_lcssa_i=$833;var $a_5_lcssa_i=$a_3_lcssa_i;label=239;break;}
 case 236: 
 var $a_5222_i;
 var $d_2221_i;
 var $871=((($d_2221_i)-(4))|0);
 HEAP32[(($d_2221_i)>>2)]=0;
 var $872=($871>>>0)<($a_5222_i>>>0);
 if($872){label=237;break;}else{var $a_6_i=$a_5222_i;label=238;break;}
 case 237: 
 var $874=((($a_5222_i)-(4))|0);
 HEAP32[(($874)>>2)]=0;
 var $a_6_i=$874;label=238;break;
 case 238: 
 var $a_6_i;
 var $876=HEAP32[(($871)>>2)];
 var $877=((($876)+(1))|0);
 HEAP32[(($871)>>2)]=$877;
 var $878=($877>>>0)>999999999;
 if($878){var $d_2221_i=$871;var $a_5222_i=$a_6_i;label=236;break;}else{var $d_2_lcssa_i=$871;var $a_5_lcssa_i=$a_6_i;label=239;break;}
 case 239: 
 var $a_5_lcssa_i;
 var $d_2_lcssa_i;
 var $879=$a_5_lcssa_i;
 var $880=((($824)-($879))|0);
 var $881=$880>>2;
 var $882=((($881)*(9))&-1);
 var $883=HEAP32[(($a_5_lcssa_i)>>2)];
 var $884=($883>>>0)<10;
 if($884){var $a_7_i=$a_5_lcssa_i;var $d_3_i=$d_2_lcssa_i;var $e_3_i=$882;label=241;break;}else{var $i_2216_i=10;var $e_2217_i=$882;label=240;break;}
 case 240: 
 var $e_2217_i;
 var $i_2216_i;
 var $885=((($i_2216_i)*(10))&-1);
 var $886=((($e_2217_i)+(1))|0);
 var $887=($883>>>0)<($885>>>0);
 if($887){var $a_7_i=$a_5_lcssa_i;var $d_3_i=$d_2_lcssa_i;var $e_3_i=$886;label=241;break;}else{var $i_2216_i=$885;var $e_2217_i=$886;label=240;break;}
 case 241: 
 var $e_3_i;
 var $d_3_i;
 var $a_7_i;
 var $888=(($d_3_i+4)|0);
 var $889=($z_3_lcssa_i>>>0)>($888>>>0);
 var $_z_3_i=($889?$888:$z_3_lcssa_i);
 var $a_8_ph_i=$a_7_i;var $z_6_ph_i=$_z_3_i;var $e_4_ph_i=$e_3_i;label=242;break;
 case 242: 
 var $e_4_ph_i;
 var $z_6_ph_i;
 var $a_8_ph_i;
 var $890=(((-$e_4_ph_i))|0);
 var $z_6_i=$z_6_ph_i;label=243;break;
 case 243: 
 var $z_6_i;
 var $892=($z_6_i>>>0)>($a_8_ph_i>>>0);
 if($892){label=244;break;}else{var $_lcssa299_i=0;label=245;break;}
 case 244: 
 var $894=((($z_6_i)-(4))|0);
 var $895=HEAP32[(($894)>>2)];
 var $896=($895|0)==0;
 if($896){var $z_6_i=$894;label=243;break;}else{var $_lcssa299_i=1;label=245;break;}
 case 245: 
 var $_lcssa299_i;
 if($817){label=246;break;}else{var $_311_i=$_p_i;var $_114_i=$t_0;label=257;break;}
 case 246: 
 var $898=($_p_i|0)==0;
 var $899=($898&1);
 var $__p_i=((($899)+($_p_i))|0);
 var $900=($__p_i|0)>($e_4_ph_i|0);
 var $901=($e_4_ph_i|0)>-5;
 var $or_cond4_i=$900&$901;
 if($or_cond4_i){label=247;break;}else{label=248;break;}
 case 247: 
 var $903=((($t_0)-(1))|0);
 var $_neg151_i=((($__p_i)-(1))|0);
 var $904=((($_neg151_i)-($e_4_ph_i))|0);
 var $_210_i=$904;var $_013_i=$903;label=249;break;
 case 248: 
 var $906=((($t_0)-(2))|0);
 var $907=((($__p_i)-(1))|0);
 var $_210_i=$907;var $_013_i=$906;label=249;break;
 case 249: 
 var $_013_i;
 var $_210_i;
 var $909=$fl_1_&8;
 var $910=($909|0)==0;
 if($910){label=250;break;}else{var $_311_i=$_210_i;var $_114_i=$_013_i;label=257;break;}
 case 250: 
 if($_lcssa299_i){label=251;break;}else{var $j_2_i=9;label=254;break;}
 case 251: 
 var $913=((($z_6_i)-(4))|0);
 var $914=HEAP32[(($913)>>2)];
 var $915=($914|0)==0;
 if($915){var $j_2_i=9;label=254;break;}else{label=252;break;}
 case 252: 
 var $916=(((($914>>>0))%(10))&-1);
 var $917=($916|0)==0;
 if($917){var $i_3208_i=10;var $j_1209_i=0;label=253;break;}else{var $j_2_i=0;label=254;break;}
 case 253: 
 var $j_1209_i;
 var $i_3208_i;
 var $918=((($i_3208_i)*(10))&-1);
 var $919=((($j_1209_i)+(1))|0);
 var $920=(((($914>>>0))%(($918>>>0)))&-1);
 var $921=($920|0)==0;
 if($921){var $i_3208_i=$918;var $j_1209_i=$919;label=253;break;}else{var $j_2_i=$919;label=254;break;}
 case 254: 
 var $j_2_i;
 var $922=$_013_i|32;
 var $923=($922|0)==102;
 var $924=$z_6_i;
 var $925=((($924)-($824))|0);
 var $926=$925>>2;
 var $927=((($926)*(9))&-1);
 var $928=((($927)-(9))|0);
 if($923){label=255;break;}else{label=256;break;}
 case 255: 
 var $930=((($928)-($j_2_i))|0);
 var $931=($930|0)<0;
 var $_22_i=($931?0:$930);
 var $932=($_210_i|0)<($_22_i|0);
 var $_210__22_i=($932?$_210_i:$_22_i);
 var $_311_i=$_210__22_i;var $_114_i=$_013_i;label=257;break;
 case 256: 
 var $934=((($928)+($e_4_ph_i))|0);
 var $935=((($934)-($j_2_i))|0);
 var $936=($935|0)<0;
 var $_24_i=($936?0:$935);
 var $937=($_210_i|0)<($_24_i|0);
 var $_210__24_i=($937?$_210_i:$_24_i);
 var $_311_i=$_210__24_i;var $_114_i=$_013_i;label=257;break;
 case 257: 
 var $_114_i;
 var $_311_i;
 var $939=($_311_i|0)!=0;
 if($939){var $943=1;label=259;break;}else{label=258;break;}
 case 258: 
 var $941=$fl_1_>>>3;
 var $_lobit_i=$941&1;
 var $943=$_lobit_i;label=259;break;
 case 259: 
 var $943;
 var $944=$_114_i|32;
 var $945=($944|0)==102;
 if($945){label=260;break;}else{label=261;break;}
 case 260: 
 var $947=($e_4_ph_i|0)>0;
 var $948=($947?$e_4_ph_i:0);
 var $estr_2_i=0;var $_pn_i=$948;label=270;break;
 case 261: 
 var $950=($e_4_ph_i|0)<0;
 var $951=($950?$890:$e_4_ph_i);
 var $952=($951|0)<0;
 if($952){label=262;break;}else{var $_01_lcssa_off0_i84_i=$951;var $_0_lcssa_i83_i=$17;label=265;break;}
 case 262: 
 var $953$0=$951;
 var $953$1=((((($951|0)<0))|0)?-1:0);
 var $_014_i79_i$1=$953$1;var $_014_i79_i$0=$953$0;var $_05_i78_i=$17;label=263;break;
 case 263: 
 var $_05_i78_i;
 var $_014_i79_i$0;
 var $_014_i79_i$1;
 var $$etemp$53$0=10;
 var $$etemp$53$1=0;
 var $954$0=___uremdi3($_014_i79_i$0,$_014_i79_i$1,$$etemp$53$0,$$etemp$53$1);var $954$1=tempRet0;
 var $$etemp$54$0=48;
 var $$etemp$54$1=0;
 var $955$0=$954$0|$$etemp$54$0;
 var $955$1=$954$1|$$etemp$54$1;
 var $956$0=$955$0;
 var $956=$956$0&255;
 var $957=((($_05_i78_i)-(1))|0);
 HEAP8[(($957)>>0)]=$956;
 var $$etemp$55$0=10;
 var $$etemp$55$1=0;
 var $958$0=___udivdi3($_014_i79_i$0,$_014_i79_i$1,$$etemp$55$0,$$etemp$55$1);var $958$1=tempRet0;
 var $$etemp$56$0=-1;
 var $$etemp$56$1=9;
 var $959=(($_014_i79_i$1>>>0) > ($$etemp$56$1>>>0)) | (((($_014_i79_i$1>>>0) == ($$etemp$56$1>>>0) & ($_014_i79_i$0>>>0) >  ($$etemp$56$0>>>0))));
 if($959){var $_014_i79_i$1=$958$1;var $_014_i79_i$0=$958$0;var $_05_i78_i=$957;label=263;break;}else{label=264;break;}
 case 264: 
 var $extract_t_i81_i$0=$958$0;
 var $extract_t_i81_i=$extract_t_i81_i$0;
 var $_01_lcssa_off0_i84_i=$extract_t_i81_i;var $_0_lcssa_i83_i=$957;label=265;break;
 case 265: 
 var $_0_lcssa_i83_i;
 var $_01_lcssa_off0_i84_i;
 var $961=($_01_lcssa_off0_i84_i|0)==0;
 if($961){var $estr_1_ph_i=$_0_lcssa_i83_i;label=267;break;}else{var $_12_i86_i=$_0_lcssa_i83_i;var $y_03_i85_i=$_01_lcssa_off0_i84_i;label=266;break;}
 case 266: 
 var $y_03_i85_i;
 var $_12_i86_i;
 var $962=(((($y_03_i85_i>>>0))%(10))&-1);
 var $963=$962|48;
 var $964=(($963)&255);
 var $965=((($_12_i86_i)-(1))|0);
 HEAP8[(($965)>>0)]=$964;
 var $966=(((($y_03_i85_i>>>0))/(10))&-1);
 var $967=($y_03_i85_i>>>0)<10;
 if($967){var $estr_1_ph_i=$965;label=267;break;}else{var $_12_i86_i=$965;var $y_03_i85_i=$966;label=266;break;}
 case 267: 
 var $estr_1_ph_i;
 var $968=$estr_1_ph_i;
 var $969=((($19)-($968))|0);
 var $970=($969|0)<2;
 if($970){var $estr_1199_i=$estr_1_ph_i;label=268;break;}else{var $estr_1_lcssa_i=$estr_1_ph_i;label=269;break;}
 case 268: 
 var $estr_1199_i;
 var $971=((($estr_1199_i)-(1))|0);
 HEAP8[(($971)>>0)]=48;
 var $972=$971;
 var $973=((($19)-($972))|0);
 var $974=($973|0)<2;
 if($974){var $estr_1199_i=$971;label=268;break;}else{var $estr_1_lcssa_i=$971;label=269;break;}
 case 269: 
 var $estr_1_lcssa_i;
 var $975=$e_4_ph_i>>31;
 var $976=$975&2;
 var $977=((($976)+(43))|0);
 var $978=(($977)&255);
 var $979=((($estr_1_lcssa_i)-(1))|0);
 HEAP8[(($979)>>0)]=$978;
 var $980=(($_114_i)&255);
 var $981=((($estr_1_lcssa_i)-(2))|0);
 HEAP8[(($981)>>0)]=$980;
 var $982=$981;
 var $983=((($19)-($982))|0);
 var $estr_2_i=$981;var $_pn_i=$983;label=270;break;
 case 270: 
 var $_pn_i;
 var $estr_2_i;
 var $985=((($pl_0_i)+(1))|0);
 var $986=((($985)+($_311_i))|0);
 var $l_1_i=((($986)+($943))|0);
 var $987=((($l_1_i)+($_pn_i))|0);
 var $$etemp$57$0=256;
 var $$etemp$57$1=0;

 var $988=$fl_1_&73728;
 var $989=($988|0)==0;
 var $990=($987|0)<($w_1|0);
 var $or_cond_i92_i=$989&$990;
 if($or_cond_i92_i){label=271;break;}else{label=274;break;}
 case 271: 
 var $992=((($w_1)-($987))|0);
 var $993=($992>>>0)>256;
 var $994=($993?256:$992);
 _memset($6, 32, $994)|0;
 var $995=($992>>>0)>255;
 if($995){var $_01_i93_i=$992;label=272;break;}else{var $_0_lcssa_i95_i=$992;label=273;break;}
 case 272: 
 var $_01_i93_i;
 var $996=___fwritex($6,256,$f);
 var $997=((($_01_i93_i)-(256))|0);
 var $998=($997>>>0)>255;
 if($998){var $_01_i93_i=$997;label=272;break;}else{var $_0_lcssa_i95_i=$997;label=273;break;}
 case 273: 
 var $_0_lcssa_i95_i;
 var $999=___fwritex($6,$_0_lcssa_i95_i,$f);
 label=274;break;
 case 274: 
 var $$etemp$58$0=256;
 var $$etemp$58$1=0;

 var $1000=___fwritex($prefix_0_i,$pl_0_i,$f);
 var $$etemp$59$0=256;
 var $$etemp$59$1=0;

 var $1001=($988|0)==65536;
 var $or_cond_i99_i=$1001&$990;
 if($or_cond_i99_i){label=275;break;}else{label=278;break;}
 case 275: 
 var $1003=((($w_1)-($987))|0);
 var $1004=($1003>>>0)>256;
 var $1005=($1004?256:$1003);
 _memset($6, 48, $1005)|0;
 var $1006=($1003>>>0)>255;
 if($1006){var $_01_i100_i=$1003;label=276;break;}else{var $_0_lcssa_i102_i=$1003;label=277;break;}
 case 276: 
 var $_01_i100_i;
 var $1007=___fwritex($6,256,$f);
 var $1008=((($_01_i100_i)-(256))|0);
 var $1009=($1008>>>0)>255;
 if($1009){var $_01_i100_i=$1008;label=276;break;}else{var $_0_lcssa_i102_i=$1008;label=277;break;}
 case 277: 
 var $_0_lcssa_i102_i;
 var $1010=___fwritex($6,$_0_lcssa_i102_i,$f);
 label=278;break;
 case 278: 
 var $$etemp$60$0=256;
 var $$etemp$60$1=0;

 if($945){label=279;break;}else{label=300;break;}
 case 279: 
 var $1012=($a_8_ph_i>>>0)>($_30_i>>>0);
 var $r_0_a_8_i=($1012?$_30_i:$a_8_ph_i);
 var $d_4182_i=$r_0_a_8_i;label=280;break;
 case 280: 
 var $d_4182_i;
 var $1014=HEAP32[(($d_4182_i)>>2)];
 var $1015=($1014|0)==0;
 if($1015){var $_1_lcssa_i111_i=$25;label=282;break;}else{var $_12_i109_i=$25;var $y_03_i108_i=$1014;label=281;break;}
 case 281: 
 var $y_03_i108_i;
 var $_12_i109_i;
 var $1016=(((($y_03_i108_i>>>0))%(10))&-1);
 var $1017=$1016|48;
 var $1018=(($1017)&255);
 var $1019=((($_12_i109_i)-(1))|0);
 HEAP8[(($1019)>>0)]=$1018;
 var $1020=(((($y_03_i108_i>>>0))/(10))&-1);
 var $1021=($y_03_i108_i>>>0)<10;
 if($1021){var $_1_lcssa_i111_i=$1019;label=282;break;}else{var $_12_i109_i=$1019;var $y_03_i108_i=$1020;label=281;break;}
 case 282: 
 var $_1_lcssa_i111_i;
 var $1022=($d_4182_i|0)==($r_0_a_8_i|0);
 if($1022){label=285;break;}else{label=283;break;}
 case 283: 
 var $1023=($_1_lcssa_i111_i>>>0)>($14>>>0);
 if($1023){var $s7_0179_i=$_1_lcssa_i111_i;label=284;break;}else{var $s7_1_i=$_1_lcssa_i111_i;label=287;break;}
 case 284: 
 var $s7_0179_i;
 var $1024=((($s7_0179_i)-(1))|0);
 HEAP8[(($1024)>>0)]=48;
 var $1025=($1024>>>0)>($14>>>0);
 if($1025){var $s7_0179_i=$1024;label=284;break;}else{var $s7_1_i=$1024;label=287;break;}
 case 285: 
 var $1027=($_1_lcssa_i111_i|0)==($25|0);
 if($1027){label=286;break;}else{var $s7_1_i=$_1_lcssa_i111_i;label=287;break;}
 case 286: 
 HEAP8[(($27)>>0)]=48;
 var $s7_1_i=$27;label=287;break;
 case 287: 
 var $s7_1_i;
 var $1029=$s7_1_i;
 var $1030=((($26)-($1029))|0);
 var $1031=___fwritex($s7_1_i,$1030,$f);
 var $1032=(($d_4182_i+4)|0);
 var $1033=($1032>>>0)>($_30_i>>>0);
 if($1033){label=288;break;}else{var $d_4182_i=$1032;label=280;break;}
 case 288: 
 if($939){label=290;break;}else{label=289;break;}
 case 289: 
 var $1036=$fl_1_&8;
 var $1037=($1036|0)==0;
 if($1037){label=317;break;}else{label=290;break;}
 case 290: 
 var $1038=___fwritex(3528,1,$f);
 var $1039=($1032>>>0)<($z_6_i>>>0);
 var $1040=($_311_i|0)>0;
 var $or_cond27172_i=$1039&$1040;
 if($or_cond27172_i){var $d_5173_i=$1032;var $_412174_i=$_311_i;label=291;break;}else{var $_412_lcssa_i=$_311_i;label=296;break;}
 case 291: 
 var $_412174_i;
 var $d_5173_i;
 var $1041=HEAP32[(($d_5173_i)>>2)];
 var $1042=($1041|0)==0;
 if($1042){var $s8_0168_i=$25;label=294;break;}else{var $_12_i118_i=$25;var $y_03_i117_i=$1041;label=292;break;}
 case 292: 
 var $y_03_i117_i;
 var $_12_i118_i;
 var $1043=(((($y_03_i117_i>>>0))%(10))&-1);
 var $1044=$1043|48;
 var $1045=(($1044)&255);
 var $1046=((($_12_i118_i)-(1))|0);
 HEAP8[(($1046)>>0)]=$1045;
 var $1047=(((($y_03_i117_i>>>0))/(10))&-1);
 var $1048=($y_03_i117_i>>>0)<10;
 if($1048){label=293;break;}else{var $_12_i118_i=$1046;var $y_03_i117_i=$1047;label=292;break;}
 case 293: 
 var $1049=($1046>>>0)>($14>>>0);
 if($1049){var $s8_0168_i=$1046;label=294;break;}else{var $s8_0_lcssa_i=$1046;label=295;break;}
 case 294: 
 var $s8_0168_i;
 var $1050=((($s8_0168_i)-(1))|0);
 HEAP8[(($1050)>>0)]=48;
 var $1051=($1050>>>0)>($14>>>0);
 if($1051){var $s8_0168_i=$1050;label=294;break;}else{var $s8_0_lcssa_i=$1050;label=295;break;}
 case 295: 
 var $s8_0_lcssa_i;
 var $1052=($_412174_i|0)>9;
 var $1053=($1052?9:$_412174_i);
 var $1054=___fwritex($s8_0_lcssa_i,$1053,$f);
 var $1055=(($d_5173_i+4)|0);
 var $1056=((($_412174_i)-(9))|0);
 var $1057=($1055>>>0)<($z_6_i>>>0);
 var $1058=($1056|0)>0;
 var $or_cond27_i=$1057&$1058;
 if($or_cond27_i){var $d_5173_i=$1055;var $_412174_i=$1056;label=291;break;}else{var $_412_lcssa_i=$1056;label=296;break;}
 case 296: 
 var $_412_lcssa_i;
 var $$etemp$61$0=256;
 var $$etemp$61$1=0;

 var $1059=($_412_lcssa_i|0)>0;
 if($1059){label=297;break;}else{label=317;break;}
 case 297: 
 var $1061=($_412_lcssa_i>>>0)>256;
 var $1062=($1061?256:$_412_lcssa_i);
 _memset($6, 48, $1062)|0;
 var $1063=($_412_lcssa_i>>>0)>255;
 if($1063){var $_01_i124_i=$_412_lcssa_i;label=298;break;}else{var $_0_lcssa_i126_i=$_412_lcssa_i;label=299;break;}
 case 298: 
 var $_01_i124_i;
 var $1064=___fwritex($6,256,$f);
 var $1065=((($_01_i124_i)-(256))|0);
 var $1066=($1065>>>0)>255;
 if($1066){var $_01_i124_i=$1065;label=298;break;}else{var $_0_lcssa_i126_i=$1065;label=299;break;}
 case 299: 
 var $_0_lcssa_i126_i;
 var $1067=___fwritex($6,$_0_lcssa_i126_i,$f);
 label=317;break;
 case 300: 
 var $1069=(($a_8_ph_i+4)|0);
 var $z_6__i=($_lcssa299_i?$z_6_i:$1069);
 var $1070=($_311_i|0)>-1;
 if($1070){label=301;break;}else{label=316;break;}
 case 301: 
 var $1071=$fl_1_&8;
 var $_not_i=($1071|0)!=0;
 var $d_6191_i=$a_8_ph_i;var $_5192_i=$_311_i;label=302;break;
 case 302: 
 var $_5192_i;
 var $d_6191_i;
 var $1073=HEAP32[(($d_6191_i)>>2)];
 var $1074=($1073|0)==0;
 if($1074){label=305;break;}else{var $_12_i133_i=$25;var $y_03_i132_i=$1073;label=303;break;}
 case 303: 
 var $y_03_i132_i;
 var $_12_i133_i;
 var $1075=(((($y_03_i132_i>>>0))%(10))&-1);
 var $1076=$1075|48;
 var $1077=(($1076)&255);
 var $1078=((($_12_i133_i)-(1))|0);
 HEAP8[(($1078)>>0)]=$1077;
 var $1079=(((($y_03_i132_i>>>0))/(10))&-1);
 var $1080=($y_03_i132_i>>>0)<10;
 if($1080){label=304;break;}else{var $_12_i133_i=$1078;var $y_03_i132_i=$1079;label=303;break;}
 case 304: 
 var $1081=($1078|0)==($25|0);
 if($1081){label=305;break;}else{var $s9_0_i=$1078;label=306;break;}
 case 305: 
 HEAP8[(($27)>>0)]=48;
 var $s9_0_i=$27;label=306;break;
 case 306: 
 var $s9_0_i;
 var $1083=($d_6191_i|0)==($a_8_ph_i|0);
 if($1083){label=309;break;}else{label=307;break;}
 case 307: 
 var $1084=($s9_0_i>>>0)>($14>>>0);
 if($1084){var $s9_1187_i=$s9_0_i;label=308;break;}else{var $s9_2_i=$s9_0_i;label=311;break;}
 case 308: 
 var $s9_1187_i;
 var $1085=((($s9_1187_i)-(1))|0);
 HEAP8[(($1085)>>0)]=48;
 var $1086=($1085>>>0)>($14>>>0);
 if($1086){var $s9_1187_i=$1085;label=308;break;}else{var $s9_2_i=$1085;label=311;break;}
 case 309: 
 var $1088=(($s9_0_i+1)|0);
 var $1089=___fwritex($s9_0_i,1,$f);
 var $1090=($_5192_i|0)>0;
 var $brmerge_i=$1090|$_not_i;
 if($brmerge_i){label=310;break;}else{var $s9_2_i=$1088;label=311;break;}
 case 310: 
 var $1092=___fwritex(3528,1,$f);
 var $s9_2_i=$1088;label=311;break;
 case 311: 
 var $s9_2_i;
 var $1093=$s9_2_i;
 var $1094=((($26)-($1093))|0);
 var $1095=($1094|0)<($_5192_i|0);
 var $__5_i=($1095?$1094:$_5192_i);
 var $1096=___fwritex($s9_2_i,$__5_i,$f);
 var $1097=((($_5192_i)-($1094))|0);
 var $1098=(($d_6191_i+4)|0);
 var $1099=($1098>>>0)<($z_6__i>>>0);
 var $1100=($1097|0)>-1;
 var $or_cond28_i=$1099&$1100;
 if($or_cond28_i){var $d_6191_i=$1098;var $_5192_i=$1097;label=302;break;}else{label=312;break;}
 case 312: 
 var $$etemp$62$0=256;
 var $$etemp$62$1=0;

 var $1101=($1097|0)>0;
 if($1101){label=313;break;}else{label=316;break;}
 case 313: 
 var $1103=($1097>>>0)>256;
 var $1104=($1103?256:$1097);
 _memset($6, 48, $1104)|0;
 var $1105=($1097>>>0)>255;
 if($1105){var $_01_i139_i=$1097;label=314;break;}else{var $_0_lcssa_i141_i=$1097;label=315;break;}
 case 314: 
 var $_01_i139_i;
 var $1106=___fwritex($6,256,$f);
 var $1107=((($_01_i139_i)-(256))|0);
 var $1108=($1107>>>0)>255;
 if($1108){var $_01_i139_i=$1107;label=314;break;}else{var $_0_lcssa_i141_i=$1107;label=315;break;}
 case 315: 
 var $_0_lcssa_i141_i;
 var $1109=___fwritex($6,$_0_lcssa_i141_i,$f);
 label=316;break;
 case 316: 
 var $$etemp$63$0=256;
 var $$etemp$63$1=0;

 var $1110=$estr_2_i;
 var $1111=((($19)-($1110))|0);
 var $1112=___fwritex($estr_2_i,$1111,$f);
 label=317;break;
 case 317: 
 var $$etemp$64$0=256;
 var $$etemp$64$1=0;

 var $1113=($988|0)==8192;
 var $or_cond_i_i=$1113&$990;
 if($or_cond_i_i){label=318;break;}else{label=321;break;}
 case 318: 
 var $1115=((($w_1)-($987))|0);
 var $1116=($1115>>>0)>256;
 var $1117=($1116?256:$1115);
 _memset($6, 32, $1117)|0;
 var $1118=($1115>>>0)>255;
 if($1118){var $_01_i_i=$1115;label=319;break;}else{var $_0_lcssa_i_i=$1115;label=320;break;}
 case 319: 
 var $_01_i_i;
 var $1119=___fwritex($6,256,$f);
 var $1120=((($_01_i_i)-(256))|0);
 var $1121=($1120>>>0)>255;
 if($1121){var $_01_i_i=$1120;label=319;break;}else{var $_0_lcssa_i_i=$1120;label=320;break;}
 case 320: 
 var $_0_lcssa_i_i;
 var $1122=___fwritex($6,$_0_lcssa_i_i,$f);
 label=321;break;
 case 321: 
 var $$etemp$65$0=256;
 var $$etemp$65$1=0;

 var $w_29_i=($990?$w_1:$987);
 var $l_0=$w_29_i;var $cnt_0=$cnt_1;var $l10n_0=$l10n_3;var $30=$260;var $29=$261;var $28=$177;label=2;break;
 case 322: 
 var $1124;
 var $1125;
 var $a_2;
 var $z_2;
 var $fl_6;
 var $p_5;
 var $prefix_2;
 var $pl_2;
 var $1126=$z_2;
 var $1127=$a_2;
 var $1128=((($1126)-($1127))|0);
 var $1129=($p_5|0)<($1128|0);
 var $_p_5=($1129?$1128:$p_5);
 var $1130=((($pl_2)+($_p_5))|0);
 var $1131=($w_1|0)<($1130|0);
 var $w_2=($1131?$1130:$w_1);
 var $$etemp$66$0=256;
 var $$etemp$66$1=0;

 var $1132=$fl_6&73728;
 var $1133=($1132|0)==0;
 var $1134=($1130|0)<($w_2|0);
 var $or_cond_i73=$1133&$1134;
 if($or_cond_i73){label=323;break;}else{label=326;break;}
 case 323: 
 var $1136=((($w_2)-($1130))|0);
 var $1137=($1136>>>0)>256;
 var $1138=($1137?256:$1136);
 _memset($6, 32, $1138)|0;
 var $1139=($1136>>>0)>255;
 if($1139){var $_01_i74=$1136;label=324;break;}else{var $_0_lcssa_i76=$1136;label=325;break;}
 case 324: 
 var $_01_i74;
 var $1140=___fwritex($6,256,$f);
 var $1141=((($_01_i74)-(256))|0);
 var $1142=($1141>>>0)>255;
 if($1142){var $_01_i74=$1141;label=324;break;}else{var $_0_lcssa_i76=$1141;label=325;break;}
 case 325: 
 var $_0_lcssa_i76;
 var $1143=___fwritex($6,$_0_lcssa_i76,$f);
 label=326;break;
 case 326: 
 var $$etemp$67$0=256;
 var $$etemp$67$1=0;

 var $1144=___fwritex($prefix_2,$pl_2,$f);
 var $$etemp$68$0=256;
 var $$etemp$68$1=0;

 var $1145=($1132|0)==65536;
 var $or_cond_i49=$1145&$1134;
 if($or_cond_i49){label=327;break;}else{label=330;break;}
 case 327: 
 var $1147=((($w_2)-($1130))|0);
 var $1148=($1147>>>0)>256;
 var $1149=($1148?256:$1147);
 _memset($6, 48, $1149)|0;
 var $1150=($1147>>>0)>255;
 if($1150){var $_01_i50=$1147;label=328;break;}else{var $_0_lcssa_i52=$1147;label=329;break;}
 case 328: 
 var $_01_i50;
 var $1151=___fwritex($6,256,$f);
 var $1152=((($_01_i50)-(256))|0);
 var $1153=($1152>>>0)>255;
 if($1153){var $_01_i50=$1152;label=328;break;}else{var $_0_lcssa_i52=$1152;label=329;break;}
 case 329: 
 var $_0_lcssa_i52;
 var $1154=___fwritex($6,$_0_lcssa_i52,$f);
 label=330;break;
 case 330: 
 var $$etemp$69$0=256;
 var $$etemp$69$1=0;

 var $$etemp$70$0=256;
 var $$etemp$70$1=0;

 var $1155=($1128|0)<($_p_5|0);
 if($1155){label=331;break;}else{label=334;break;}
 case 331: 
 var $1157=((($_p_5)-($1128))|0);
 var $1158=($1157>>>0)>256;
 var $1159=($1158?256:$1157);
 _memset($6, 48, $1159)|0;
 var $1160=($1157>>>0)>255;
 if($1160){var $_01_i35=$1157;label=332;break;}else{var $_0_lcssa_i37=$1157;label=333;break;}
 case 332: 
 var $_01_i35;
 var $1161=___fwritex($6,256,$f);
 var $1162=((($_01_i35)-(256))|0);
 var $1163=($1162>>>0)>255;
 if($1163){var $_01_i35=$1162;label=332;break;}else{var $_0_lcssa_i37=$1162;label=333;break;}
 case 333: 
 var $_0_lcssa_i37;
 var $1164=___fwritex($6,$_0_lcssa_i37,$f);
 label=334;break;
 case 334: 
 var $$etemp$71$0=256;
 var $$etemp$71$1=0;

 var $1165=___fwritex($a_2,$1128,$f);
 var $$etemp$72$0=256;
 var $$etemp$72$1=0;

 var $1166=($1132|0)==8192;
 var $or_cond_i=$1166&$1134;
 if($or_cond_i){label=335;break;}else{var $l_0=$w_2;var $cnt_0=$cnt_1;var $l10n_0=$l10n_3;var $30=$1125;var $29=$1124;var $28=$177;label=2;break;}
 case 335: 
 var $1168=((($w_2)-($1130))|0);
 var $1169=($1168>>>0)>256;
 var $1170=($1169?256:$1168);
 _memset($6, 32, $1170)|0;
 var $1171=($1168>>>0)>255;
 if($1171){var $_01_i=$1168;label=336;break;}else{var $_0_lcssa_i=$1168;label=337;break;}
 case 336: 
 var $_01_i;
 var $1172=___fwritex($6,256,$f);
 var $1173=((($_01_i)-(256))|0);
 var $1174=($1173>>>0)>255;
 if($1174){var $_01_i=$1173;label=336;break;}else{var $_0_lcssa_i=$1173;label=337;break;}
 case 337: 
 var $_0_lcssa_i;
 var $1175=___fwritex($6,$_0_lcssa_i,$f);
 var $l_0=$w_2;var $cnt_0=$cnt_1;var $l10n_0=$l10n_3;var $30=$1125;var $29=$1124;var $28=$177;label=2;break;
 case 338: 
 var $1177=($f|0)==0;
 if($1177){label=339;break;}else{var $_0=$cnt_1;label=356;break;}
 case 339: 
 var $1179=($l10n_0|0)==0;
 if($1179){var $_0=0;label=356;break;}else{var $i_289=1;label=340;break;}
 case 340: 
 var $i_289;
 var $1180=(($nl_type+($i_289<<2))|0);
 var $1181=HEAP32[(($1180)>>2)];
 var $1182=($1181|0)==0;
 if($1182){var $i_388=$i_289;label=355;break;}else{label=341;break;}
 case 341: 
 var $1184=(($nl_arg+($i_289<<3))|0);
 var $1185=($1181>>>0)>20;
 if($1185){label=353;break;}else{label=342;break;}
 case 342: 
 switch(($1181|0)){case 9:{ label=343;break;}case 10:{ label=344;break;}case 11:{ label=345;break;}case 12:{ label=346;break;}case 13:{ label=347;break;}case 14:{ label=348;break;}case 15:{ label=349;break;}case 16:{ label=350;break;}case 17:{ label=351;break;}case 18:{ label=352;break;}default:{label=353;break;}}break;
 case 343: 
 var $1188=(tempInt=HEAP32[((($4)+(4))>>2)],HEAP32[((($4)+(4))>>2)]=tempInt + 8,HEAP32[(((HEAP32[(($4)>>2)])+(tempInt))>>2)]);
 var $1189=$1184;
 HEAP32[(($1189)>>2)]=$1188;
 label=353;break;
 case 344: 
 var $1191=(tempInt=HEAP32[((($4)+(4))>>2)],HEAP32[((($4)+(4))>>2)]=tempInt + 8,HEAP32[(((HEAP32[(($4)>>2)])+(tempInt))>>2)]);
 var $1192$0=$1191;
 var $1192$1=((((($1191|0)<0))|0)?-1:0);
 var $1193=(($1184)|0);
 var $st$73$0=(($1193)|0);
 HEAP32[(($st$73$0)>>2)]=$1192$0;
 var $st$74$1=(($1193+4)|0);
 HEAP32[(($st$74$1)>>2)]=$1192$1;
 label=353;break;
 case 345: 
 var $1195=(tempInt=HEAP32[((($4)+(4))>>2)],HEAP32[((($4)+(4))>>2)]=tempInt + 8,HEAP32[(((HEAP32[(($4)>>2)])+(tempInt))>>2)]);
 var $1196$0=$1195;
 var $1196$1=0;
 var $1197=(($1184)|0);
 var $st$75$0=(($1197)|0);
 HEAP32[(($st$75$0)>>2)]=$1196$0;
 var $st$76$1=(($1197+4)|0);
 HEAP32[(($st$76$1)>>2)]=$1196$1;
 label=353;break;
 case 346: 
 var $1199$0=(tempInt=HEAP32[((($4)+(4))>>2)],HEAP32[((($4)+(4))>>2)]=tempInt + 8,HEAP32[(((HEAP32[(($4)>>2)])+(tempInt))>>2)]);
 var $1199$1=(tempInt=HEAP32[((($4)+(4))>>2)],HEAP32[((($4)+(4))>>2)]=tempInt + 8,HEAP32[(((HEAP32[(($4)>>2)])+(tempInt))>>2)]);
 var $1200=(($1184)|0);
 var $st$77$0=(($1200)|0);
 HEAP32[(($st$77$0)>>2)]=$1199$0;
 var $st$78$1=(($1200+4)|0);
 HEAP32[(($st$78$1)>>2)]=$1199$1;
 label=353;break;
 case 347: 
 var $1202=(tempInt=HEAP32[((($4)+(4))>>2)],HEAP32[((($4)+(4))>>2)]=tempInt + 8,HEAP32[(((HEAP32[(($4)>>2)])+(tempInt))>>2)]);
 var $1203=(($1202)&65535);
 var $1204$0=(($1203<<16)>>16);
 var $1204$1=(((((($1203<<16)>>16)<0))|0)?-1:0);
 var $1205=(($1184)|0);
 var $st$79$0=(($1205)|0);
 HEAP32[(($st$79$0)>>2)]=$1204$0;
 var $st$80$1=(($1205+4)|0);
 HEAP32[(($st$80$1)>>2)]=$1204$1;
 label=353;break;
 case 348: 
 var $1207=(tempInt=HEAP32[((($4)+(4))>>2)],HEAP32[((($4)+(4))>>2)]=tempInt + 8,HEAP32[(((HEAP32[(($4)>>2)])+(tempInt))>>2)]);
 var $_mask1_i=$1207&65535;
 var $1208$0=$_mask1_i;
 var $1208$1=0;
 var $1209=(($1184)|0);
 var $st$81$0=(($1209)|0);
 HEAP32[(($st$81$0)>>2)]=$1208$0;
 var $st$82$1=(($1209+4)|0);
 HEAP32[(($st$82$1)>>2)]=$1208$1;
 label=353;break;
 case 349: 
 var $1211=(tempInt=HEAP32[((($4)+(4))>>2)],HEAP32[((($4)+(4))>>2)]=tempInt + 8,HEAP32[(((HEAP32[(($4)>>2)])+(tempInt))>>2)]);
 var $1212=(($1211)&255);
 var $1213$0=(($1212<<24)>>24);
 var $1213$1=(((((($1212<<24)>>24)<0))|0)?-1:0);
 var $1214=(($1184)|0);
 var $st$83$0=(($1214)|0);
 HEAP32[(($st$83$0)>>2)]=$1213$0;
 var $st$84$1=(($1214+4)|0);
 HEAP32[(($st$84$1)>>2)]=$1213$1;
 label=353;break;
 case 350: 
 var $1216=(tempInt=HEAP32[((($4)+(4))>>2)],HEAP32[((($4)+(4))>>2)]=tempInt + 8,HEAP32[(((HEAP32[(($4)>>2)])+(tempInt))>>2)]);
 var $_mask_i=$1216&255;
 var $1217$0=$_mask_i;
 var $1217$1=0;
 var $1218=(($1184)|0);
 var $st$85$0=(($1218)|0);
 HEAP32[(($st$85$0)>>2)]=$1217$0;
 var $st$86$1=(($1218+4)|0);
 HEAP32[(($st$86$1)>>2)]=$1217$1;
 label=353;break;
 case 351: 
 var $1220=(tempInt=HEAP32[((($4)+(4))>>2)],HEAP32[((($4)+(4))>>2)]=tempInt + 8,HEAPF64[(((HEAP32[(($4)>>2)])+(tempInt))>>3)]);
 var $1221=$1184;
 HEAPF64[(($1221)>>3)]=$1220;
 label=353;break;
 case 352: 
 var $1223=(tempInt=HEAP32[((($4)+(4))>>2)],HEAP32[((($4)+(4))>>2)]=tempInt + 8,HEAPF64[(((HEAP32[(($4)>>2)])+(tempInt))>>3)]);
 var $1224=$1184;
 HEAPF64[(($1224)>>3)]=$1223;
 label=353;break;
 case 353: 
 var $1225=((($i_289)+(1))|0);
 var $1226=($1225|0)<10;
 if($1226){var $i_289=$1225;label=340;break;}else{var $_0=1;label=356;break;}
 case 354: 
 var $1227=($1231|0)<10;
 if($1227){var $i_388=$1231;label=355;break;}else{var $_0=1;label=356;break;}
 case 355: 
 var $i_388;
 var $1228=(($nl_type+($i_388<<2))|0);
 var $1229=HEAP32[(($1228)>>2)];
 var $1230=($1229|0)==0;
 var $1231=((($i_388)+(1))|0);
 if($1230){label=354;break;}else{var $_0=-1;label=356;break;}
 case 356: 
 var $_0;
 var $$etemp$87$0=40;
 var $$etemp$87$1=0;

 STACKTOP=sp;return $_0;
  default: assert(0, "bad label: " + label);
 }

}


function _vsnprintf($s,$n,$fmt,$ap){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+120)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $b=sp;
 var $f=(sp)+(8);
 var $1=$f;
 var $$etemp$0$0=112;
 var $$etemp$0$1=0;

 assert(112 % 1 === 0);(_memcpy($1, 24, 112)|0);
 var $2=((($n)-(1))|0);
 var $3=($2>>>0)>2147483646;
 if($3){label=2;break;}else{var $_01=$s;var $_02=$n;label=4;break;}
 case 2: 
 var $5=($n|0)==0;
 if($5){var $_01=$b;var $_02=1;label=4;break;}else{label=3;break;}
 case 3: 
 var $7=___errno_location();
 HEAP32[(($7)>>2)]=75;
 var $_0=-1;label=6;break;
 case 4: 
 var $_02;
 var $_01;
 var $9=$_01;
 var $10=(((-2)-($9))|0);
 var $11=($_02>>>0)>($10>>>0);
 var $__02=($11?$10:$_02);
 var $12=(($f+48)|0);
 HEAP32[(($12)>>2)]=$__02;
 var $13=(($f+20)|0);
 HEAP32[(($13)>>2)]=$_01;
 var $14=(($f+44)|0);
 HEAP32[(($14)>>2)]=$_01;
 var $15=(($_01+$__02)|0);
 var $16=(($f+16)|0);
 HEAP32[(($16)>>2)]=$15;
 var $17=(($f+28)|0);
 HEAP32[(($17)>>2)]=$15;
 var $18=_MUSL_vfprintf($f,$fmt,$ap);
 var $19=($__02|0)==0;
 if($19){var $_0=$18;label=6;break;}else{label=5;break;}
 case 5: 
 var $21=HEAP32[(($13)>>2)];
 var $22=HEAP32[(($16)>>2)];
 var $23=($21|0)==($22|0);
 var $24=(($23<<31)>>31);
 var $25=(($21+$24)|0);
 HEAP8[(($25)>>0)]=0;
 var $_0=$18;label=6;break;
 case 6: 
 var $_0;
 var $$etemp$1$0=112;
 var $$etemp$1$1=0;

 STACKTOP=sp;return $_0;
  default: assert(0, "bad label: " + label);
 }

}


function _sn_write($f,$s,$l){
 var label=0;


 var $1=(($f+16)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($f+20)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=$2;
 var $6=$4;
 var $7=((($5)-($6))|0);
 var $8=($7>>>0)>($l>>>0);
 var $l_=($8?$l:$7);
 assert($l_ % 1 === 0);(_memcpy($4, $s, $l_)|0);
 var $9=HEAP32[(($3)>>2)];
 var $10=(($9+$l_)|0);
 HEAP32[(($3)>>2)]=$10;
 return $l;
}


function _vsprintf($s,$fmt,$ap){
 var label=0;


 var $1=_vsnprintf($s,2147483647,$fmt,$ap);
 return $1;
}


function _strtof($s,$p){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+112)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $f_i=sp;
 var $1=$f_i;
 var $$etemp$0$0=112;
 var $$etemp$0$1=0;

 _memset($1, 0, 112)|0;
 var $2=(($f_i+4)|0);
 HEAP32[(($2)>>2)]=$s;
 var $3=(($f_i+8)|0);
 HEAP32[(($3)>>2)]=-1;
 var $4=(($f_i+44)|0);
 HEAP32[(($4)>>2)]=$s;
 var $5=(($f_i+76)|0);
 HEAP32[(($5)>>2)]=-1;
 ___shlim($f_i,0);
 var $6=___floatscan($f_i,0,1);
 var $7=(($f_i+108)|0);
 var $8=HEAP32[(($7)>>2)];
 var $9=HEAP32[(($2)>>2)];
 var $10=HEAP32[(($3)>>2)];
 var $11=$9;
 var $12=$10;
 var $13=((($11)-($12))|0);
 var $14=((($13)+($8))|0);
 var $15=($p|0)==0;
 if($15){label=5;break;}else{label=2;break;}
 case 2: 
 var $17=($14|0)==0;
 if($17){var $21=$s;label=4;break;}else{label=3;break;}
 case 3: 
 var $19=(($s+$14)|0);
 var $21=$19;label=4;break;
 case 4: 
 var $21;
 HEAP32[(($p)>>2)]=$21;
 label=5;break;
 case 5: 
 var $$etemp$1$0=112;
 var $$etemp$1$1=0;

 var $22=$6;
 STACKTOP=sp;return $22;
  default: assert(0, "bad label: " + label);
 }

}


function _strtod($s,$p){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+112)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $f_i=sp;
 var $1=$f_i;
 var $$etemp$0$0=112;
 var $$etemp$0$1=0;

 _memset($1, 0, 112)|0;
 var $2=(($f_i+4)|0);
 HEAP32[(($2)>>2)]=$s;
 var $3=(($f_i+8)|0);
 HEAP32[(($3)>>2)]=-1;
 var $4=(($f_i+44)|0);
 HEAP32[(($4)>>2)]=$s;
 var $5=(($f_i+76)|0);
 HEAP32[(($5)>>2)]=-1;
 ___shlim($f_i,0);
 var $6=___floatscan($f_i,1,1);
 var $7=(($f_i+108)|0);
 var $8=HEAP32[(($7)>>2)];
 var $9=HEAP32[(($2)>>2)];
 var $10=HEAP32[(($3)>>2)];
 var $11=$9;
 var $12=$10;
 var $13=((($11)-($12))|0);
 var $14=((($13)+($8))|0);
 var $15=($p|0)==0;
 if($15){label=5;break;}else{label=2;break;}
 case 2: 
 var $17=($14|0)==0;
 if($17){var $21=$s;label=4;break;}else{label=3;break;}
 case 3: 
 var $19=(($s+$14)|0);
 var $21=$19;label=4;break;
 case 4: 
 var $21;
 HEAP32[(($p)>>2)]=$21;
 label=5;break;
 case 5: 
 var $$etemp$1$0=112;
 var $$etemp$1$1=0;

 STACKTOP=sp;return $6;
  default: assert(0, "bad label: " + label);
 }

}


function _strtold($s,$p){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+112)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $f_i=sp;
 var $1=$f_i;
 var $$etemp$0$0=112;
 var $$etemp$0$1=0;

 _memset($1, 0, 112)|0;
 var $2=(($f_i+4)|0);
 HEAP32[(($2)>>2)]=$s;
 var $3=(($f_i+8)|0);
 HEAP32[(($3)>>2)]=-1;
 var $4=(($f_i+44)|0);
 HEAP32[(($4)>>2)]=$s;
 var $5=(($f_i+76)|0);
 HEAP32[(($5)>>2)]=-1;
 ___shlim($f_i,0);
 var $6=___floatscan($f_i,2,1);
 var $7=(($f_i+108)|0);
 var $8=HEAP32[(($7)>>2)];
 var $9=HEAP32[(($2)>>2)];
 var $10=HEAP32[(($3)>>2)];
 var $11=$9;
 var $12=$10;
 var $13=((($11)-($12))|0);
 var $14=((($13)+($8))|0);
 var $15=($p|0)==0;
 if($15){label=5;break;}else{label=2;break;}
 case 2: 
 var $17=($14|0)==0;
 if($17){var $21=$s;label=4;break;}else{label=3;break;}
 case 3: 
 var $19=(($s+$14)|0);
 var $21=$19;label=4;break;
 case 4: 
 var $21;
 HEAP32[(($p)>>2)]=$21;
 label=5;break;
 case 5: 
 var $$etemp$1$0=112;
 var $$etemp$1$1=0;

 STACKTOP=sp;return $6;
  default: assert(0, "bad label: " + label);
 }

}


function _strtoul($s,$p,$base){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+112)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $f_i=sp;
 var $1=$f_i;
 var $$etemp$0$0=112;
 var $$etemp$0$1=0;

 var $2=(($f_i)|0);
 HEAP32[(($2)>>2)]=0;
 var $3=(($f_i+4)|0);
 HEAP32[(($3)>>2)]=$s;
 var $4=(($f_i+44)|0);
 HEAP32[(($4)>>2)]=$s;
 var $5=($s|0)<0;
 if($5){label=2;break;}else{label=3;break;}
 case 2: 
 var $7=(($f_i+8)|0);
 HEAP32[(($7)>>2)]=-1;
 label=4;break;
 case 3: 
 var $9=(($s+2147483647)|0);
 var $10=(($f_i+8)|0);
 HEAP32[(($10)>>2)]=$9;
 label=4;break;
 case 4: 
 var $12=(($f_i+76)|0);
 HEAP32[(($12)>>2)]=-1;
 ___shlim($f_i,0);
 var $$etemp$1$0=-1;
 var $$etemp$1$1=0;
 var $13$0=___intscan($f_i,$base,1,$$etemp$1$0,$$etemp$1$1);
 var $13$1=tempRet0;
 var $14=($p|0)==0;
 if($14){label=6;break;}else{label=5;break;}
 case 5: 
 var $16=(($f_i+108)|0);
 var $17=HEAP32[(($16)>>2)];
 var $18=HEAP32[(($3)>>2)];
 var $19=(($f_i+8)|0);
 var $20=HEAP32[(($19)>>2)];
 var $21=$18;
 var $22=$20;
 var $23=((($21)+($17))|0);
 var $24=((($23)-($22))|0);
 var $25=(($s+$24)|0);
 HEAP32[(($p)>>2)]=$25;
 label=6;break;
 case 6: 
 var $$etemp$2$0=112;
 var $$etemp$2$1=0;

 var $26$0=$13$0;
 var $26=$26$0;
 STACKTOP=sp;return $26;
  default: assert(0, "bad label: " + label);
 }

}


function _memchr($src,$c,$n){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=$c&255;
 var $2=$src;
 var $3=$2&3;
 var $4=($3|0)==0;
 var $5=($n|0)==0;
 var $or_cond12=$4|$5;
 if($or_cond12){var $_0_lcssa=$n;var $s_0_lcssa=$src;var $_lcssa=$5;label=5;break;}else{label=2;break;}
 case 2: 
 var $6=(($c)&255);
 var $_013=$n;var $s_014=$src;label=3;break;
 case 3: 
 var $s_014;
 var $_013;
 var $8=HEAP8[(($s_014)>>0)];
 var $9=(($8<<24)>>24)==(($6<<24)>>24);
 if($9){var $s_0_lcssa33=$s_014;var $_0_lcssa34=$_013;label=6;break;}else{label=4;break;}
 case 4: 
 var $11=(($s_014+1)|0);
 var $12=((($_013)-(1))|0);
 var $13=$11;
 var $14=$13&3;
 var $15=($14|0)==0;
 var $16=($12|0)==0;
 var $or_cond=$15|$16;
 if($or_cond){var $_0_lcssa=$12;var $s_0_lcssa=$11;var $_lcssa=$16;label=5;break;}else{var $_013=$12;var $s_014=$11;label=3;break;}
 case 5: 
 var $_lcssa;
 var $s_0_lcssa;
 var $_0_lcssa;
 if($_lcssa){var $s_2=$s_0_lcssa;var $_3=0;label=13;break;}else{var $s_0_lcssa33=$s_0_lcssa;var $_0_lcssa34=$_0_lcssa;label=6;break;}
 case 6: 
 var $_0_lcssa34;
 var $s_0_lcssa33;
 var $17=HEAP8[(($s_0_lcssa33)>>0)];
 var $18=(($c)&255);
 var $19=(($17<<24)>>24)==(($18<<24)>>24);
 if($19){var $s_2=$s_0_lcssa33;var $_3=$_0_lcssa34;label=13;break;}else{label=7;break;}
 case 7: 
 var $21=(Math_imul($1,16843009)|0);
 var $22=$s_0_lcssa33;
 var $23=($_0_lcssa34>>>0)>3;
 if($23){var $_17=$_0_lcssa34;var $w_08=$22;label=8;break;}else{var $_1_lcssa=$_0_lcssa34;var $w_0_lcssa=$22;label=10;break;}
 case 8: 
 var $w_08;
 var $_17;
 var $24=HEAP32[(($w_08)>>2)];
 var $25=$24^$21;
 var $26=((($25)-(16843009))|0);
 var $27=$25&-2139062144;
 var $28=$27^-2139062144;
 var $29=$28&$26;
 var $30=($29|0)==0;
 if($30){label=9;break;}else{var $_1_lcssa=$_17;var $w_0_lcssa=$w_08;label=10;break;}
 case 9: 
 var $32=(($w_08+4)|0);
 var $33=((($_17)-(4))|0);
 var $34=($33>>>0)>3;
 if($34){var $_17=$33;var $w_08=$32;label=8;break;}else{var $_1_lcssa=$33;var $w_0_lcssa=$32;label=10;break;}
 case 10: 
 var $w_0_lcssa;
 var $_1_lcssa;
 var $35=$w_0_lcssa;
 var $36=($_1_lcssa|0)==0;
 if($36){var $s_2=$35;var $_3=0;label=13;break;}else{var $_24=$_1_lcssa;var $s_15=$35;label=11;break;}
 case 11: 
 var $s_15;
 var $_24;
 var $37=HEAP8[(($s_15)>>0)];
 var $38=(($37<<24)>>24)==(($18<<24)>>24);
 if($38){var $s_2=$s_15;var $_3=$_24;label=13;break;}else{label=12;break;}
 case 12: 
 var $40=(($s_15+1)|0);
 var $41=((($_24)-(1))|0);
 var $42=($41|0)==0;
 if($42){var $s_2=$40;var $_3=0;label=13;break;}else{var $_24=$41;var $s_15=$40;label=11;break;}
 case 13: 
 var $_3;
 var $s_2;
 var $43=($_3|0)!=0;
 var $44=($43?$s_2:0);
 return $44;
  default: assert(0, "bad label: " + label);
 }

}


function _memcmp($vl,$vr,$n){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($n|0)==0;
 if($1){var $14=0;label=5;break;}else{var $_03=$n;var $l_04=$vl;var $r_05=$vr;label=2;break;}
 case 2: 
 var $r_05;
 var $l_04;
 var $_03;
 var $2=HEAP8[(($l_04)>>0)];
 var $3=HEAP8[(($r_05)>>0)];
 var $4=(($2<<24)>>24)==(($3<<24)>>24);
 if($4){label=3;break;}else{label=4;break;}
 case 3: 
 var $6=((($_03)-(1))|0);
 var $7=(($l_04+1)|0);
 var $8=(($r_05+1)|0);
 var $9=($6|0)==0;
 if($9){var $14=0;label=5;break;}else{var $_03=$6;var $l_04=$7;var $r_05=$8;label=2;break;}
 case 4: 
 var $11=($2&255);
 var $12=($3&255);
 var $13=((($11)-($12))|0);
 var $14=$13;label=5;break;
 case 5: 
 var $14;
 return $14;
  default: assert(0, "bad label: " + label);
 }

}


function _strcmp($l,$r){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=HEAP8[(($l)>>0)];
 var $2=HEAP8[(($r)>>0)];
 var $3=(($1<<24)>>24)!=(($2<<24)>>24);
 var $4=(($1<<24)>>24)==0;
 var $or_cond3=$3|$4;
 if($or_cond3){var $_lcssa=$1;var $_lcssa2=$2;label=3;break;}else{var $_014=$l;var $_05=$r;label=2;break;}
 case 2: 
 var $_05;
 var $_014;
 var $5=(($_014+1)|0);
 var $6=(($_05+1)|0);
 var $7=HEAP8[(($5)>>0)];
 var $8=HEAP8[(($6)>>0)];
 var $9=(($7<<24)>>24)!=(($8<<24)>>24);
 var $10=(($7<<24)>>24)==0;
 var $or_cond=$9|$10;
 if($or_cond){var $_lcssa=$7;var $_lcssa2=$8;label=3;break;}else{var $_014=$5;var $_05=$6;label=2;break;}
 case 3: 
 var $_lcssa2;
 var $_lcssa;
 var $11=($_lcssa&255);
 var $12=($_lcssa2&255);
 var $13=((($11)-($12))|0);
 return $13;
  default: assert(0, "bad label: " + label);
 }

}



// EMSCRIPTEN_END_FUNCS
function _i64Add(a, b, c, d) {
    /*
      x = a + b*2^32
      y = c + d*2^32
      result = l + h*2^32
    */
    a = a|0; b = b|0; c = c|0; d = d|0;
    var l = 0, h = 0;
    l = (a + c)>>>0;
    h = (b + d + (((l>>>0) < (a>>>0))|0))>>>0; // Add carry from low word to high word on overflow.
    return tempRet0 = h,l|0;
  }
function _i64Subtract(a, b, c, d) {
    a = a|0; b = b|0; c = c|0; d = d|0;
    var l = 0, h = 0;
    l = (a - c)>>>0;
    h = (b - d)>>>0;
    h = (b - d - (((c>>>0) > (a>>>0))|0))>>>0; // Borrow one from high word to low word on underflow.
    return tempRet0 = h,l|0;
  }
function _bitshift64Shl(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = (high << bits) | ((low&(ander << (32 - bits))) >>> (32 - bits));
      return low << bits;
    }
    tempRet0 = low << (bits - 32);
    return 0;
  }
function _bitshift64Lshr(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = high >>> bits;
      return (low >>> bits) | ((high&ander) << (32 - bits));
    }
    tempRet0 = 0;
    return (high >>> (bits - 32))|0;
  }
function _bitshift64Ashr(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = high >> bits;
      return (low >>> bits) | ((high&ander) << (32 - bits));
    }
    tempRet0 = (high|0) < 0 ? -1 : 0;
    return (high >> (bits - 32))|0;
  }
function _llvm_ctlz_i32(x) {
    x = x|0;
    var ret = 0;
    ret = HEAP8[(((ctlz_i8)+(x >>> 24))>>0)];
    if ((ret|0) < 8) return ret|0;
    ret = HEAP8[(((ctlz_i8)+((x >> 16)&0xff))>>0)];
    if ((ret|0) < 8) return (ret + 8)|0;
    ret = HEAP8[(((ctlz_i8)+((x >> 8)&0xff))>>0)];
    if ((ret|0) < 8) return (ret + 16)|0;
    return (HEAP8[(((ctlz_i8)+(x&0xff))>>0)] + 24)|0;
  }
/* PRE_ASM */ var ctlz_i8 = allocate([8,7,6,6,5,5,5,5,4,4,4,4,4,4,4,4,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_DYNAMIC);

function _llvm_cttz_i32(x) {
    x = x|0;
    var ret = 0;
    ret = HEAP8[(((cttz_i8)+(x & 0xff))>>0)];
    if ((ret|0) < 8) return ret|0;
    ret = HEAP8[(((cttz_i8)+((x >> 8)&0xff))>>0)];
    if ((ret|0) < 8) return (ret + 8)|0;
    ret = HEAP8[(((cttz_i8)+((x >> 16)&0xff))>>0)];
    if ((ret|0) < 8) return (ret + 16)|0;
    return (HEAP8[(((cttz_i8)+(x >>> 24))>>0)] + 24)|0;
  }
/* PRE_ASM */ var cttz_i8 = allocate([8,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,7,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0], "i8", ALLOC_DYNAMIC);

// ======== compiled code from system/lib/compiler-rt , see readme therein
function ___muldsi3($a, $b) {
  $a = $a | 0;
  $b = $b | 0;
  var $1 = 0, $2 = 0, $3 = 0, $6 = 0, $8 = 0, $11 = 0, $12 = 0;
  $1 = $a & 65535;
  $2 = $b & 65535;
  $3 = Math_imul($2, $1) | 0;
  $6 = $a >>> 16;
  $8 = ($3 >>> 16) + (Math_imul($2, $6) | 0) | 0;
  $11 = $b >>> 16;
  $12 = Math_imul($11, $1) | 0;
  return (tempRet0 = (($8 >>> 16) + (Math_imul($11, $6) | 0) | 0) + ((($8 & 65535) + $12 | 0) >>> 16) | 0, 0 | ($8 + $12 << 16 | $3 & 65535)) | 0;
}
function ___divdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $1$0 = 0, $1$1 = 0, $2$0 = 0, $2$1 = 0, $4$0 = 0, $4$1 = 0, $6$0 = 0, $7$0 = 0, $7$1 = 0, $8$0 = 0, $10$0 = 0;
  $1$0 = $a$1 >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $1$1 = (($a$1 | 0) < 0 ? -1 : 0) >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $2$0 = $b$1 >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $2$1 = (($b$1 | 0) < 0 ? -1 : 0) >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $4$0 = _i64Subtract($1$0 ^ $a$0, $1$1 ^ $a$1, $1$0, $1$1) | 0;
  $4$1 = tempRet0;
  $6$0 = _i64Subtract($2$0 ^ $b$0, $2$1 ^ $b$1, $2$0, $2$1) | 0;
  $7$0 = $2$0 ^ $1$0;
  $7$1 = $2$1 ^ $1$1;
  $8$0 = ___udivmoddi4($4$0, $4$1, $6$0, tempRet0, 0) | 0;
  $10$0 = _i64Subtract($8$0 ^ $7$0, tempRet0 ^ $7$1, $7$0, $7$1) | 0;
  return (tempRet0 = tempRet0, $10$0) | 0;
}
function ___remdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $rem = 0, $1$0 = 0, $1$1 = 0, $2$0 = 0, $2$1 = 0, $4$0 = 0, $4$1 = 0, $6$0 = 0, $10$0 = 0, $10$1 = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  $rem = __stackBase__ | 0;
  $1$0 = $a$1 >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $1$1 = (($a$1 | 0) < 0 ? -1 : 0) >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $2$0 = $b$1 >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $2$1 = (($b$1 | 0) < 0 ? -1 : 0) >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $4$0 = _i64Subtract($1$0 ^ $a$0, $1$1 ^ $a$1, $1$0, $1$1) | 0;
  $4$1 = tempRet0;
  $6$0 = _i64Subtract($2$0 ^ $b$0, $2$1 ^ $b$1, $2$0, $2$1) | 0;
  ___udivmoddi4($4$0, $4$1, $6$0, tempRet0, $rem) | 0;
  $10$0 = _i64Subtract(HEAP32[$rem >> 2] ^ $1$0, HEAP32[$rem + 4 >> 2] ^ $1$1, $1$0, $1$1) | 0;
  $10$1 = tempRet0;
  STACKTOP = __stackBase__;
  return (tempRet0 = $10$1, $10$0) | 0;
}
function ___muldi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $x_sroa_0_0_extract_trunc = 0, $y_sroa_0_0_extract_trunc = 0, $1$0 = 0, $1$1 = 0, $2 = 0;
  $x_sroa_0_0_extract_trunc = $a$0;
  $y_sroa_0_0_extract_trunc = $b$0;
  $1$0 = ___muldsi3($x_sroa_0_0_extract_trunc, $y_sroa_0_0_extract_trunc) | 0;
  $1$1 = tempRet0;
  $2 = Math_imul($a$1, $y_sroa_0_0_extract_trunc) | 0;
  return (tempRet0 = ((Math_imul($b$1, $x_sroa_0_0_extract_trunc) | 0) + $2 | 0) + $1$1 | $1$1 & 0, 0 | $1$0 & -1) | 0;
}
function ___udivdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $1$0 = 0;
  $1$0 = ___udivmoddi4($a$0, $a$1, $b$0, $b$1, 0) | 0;
  return (tempRet0 = tempRet0, $1$0) | 0;
}
function ___uremdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $rem = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  $rem = __stackBase__ | 0;
  ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) | 0;
  STACKTOP = __stackBase__;
  return (tempRet0 = HEAP32[$rem + 4 >> 2] | 0, HEAP32[$rem >> 2] | 0) | 0;
}
function ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  $rem = $rem | 0;
  var $n_sroa_0_0_extract_trunc = 0, $n_sroa_1_4_extract_shift$0 = 0, $n_sroa_1_4_extract_trunc = 0, $d_sroa_0_0_extract_trunc = 0, $d_sroa_1_4_extract_shift$0 = 0, $d_sroa_1_4_extract_trunc = 0, $4 = 0, $17 = 0, $37 = 0, $49 = 0, $51 = 0, $57 = 0, $58 = 0, $66 = 0, $78 = 0, $86 = 0, $88 = 0, $89 = 0, $91 = 0, $92 = 0, $95 = 0, $105 = 0, $117 = 0, $119 = 0, $125 = 0, $126 = 0, $130 = 0, $q_sroa_1_1_ph = 0, $q_sroa_0_1_ph = 0, $r_sroa_1_1_ph = 0, $r_sroa_0_1_ph = 0, $sr_1_ph = 0, $d_sroa_0_0_insert_insert99$0 = 0, $d_sroa_0_0_insert_insert99$1 = 0, $137$0 = 0, $137$1 = 0, $carry_0203 = 0, $sr_1202 = 0, $r_sroa_0_1201 = 0, $r_sroa_1_1200 = 0, $q_sroa_0_1199 = 0, $q_sroa_1_1198 = 0, $147 = 0, $149 = 0, $r_sroa_0_0_insert_insert42$0 = 0, $r_sroa_0_0_insert_insert42$1 = 0, $150$1 = 0, $151$0 = 0, $152 = 0, $154$0 = 0, $r_sroa_0_0_extract_trunc = 0, $r_sroa_1_4_extract_trunc = 0, $155 = 0, $carry_0_lcssa$0 = 0, $carry_0_lcssa$1 = 0, $r_sroa_0_1_lcssa = 0, $r_sroa_1_1_lcssa = 0, $q_sroa_0_1_lcssa = 0, $q_sroa_1_1_lcssa = 0, $q_sroa_0_0_insert_ext75$0 = 0, $q_sroa_0_0_insert_ext75$1 = 0, $q_sroa_0_0_insert_insert77$1 = 0, $_0$0 = 0, $_0$1 = 0;
  $n_sroa_0_0_extract_trunc = $a$0;
  $n_sroa_1_4_extract_shift$0 = $a$1;
  $n_sroa_1_4_extract_trunc = $n_sroa_1_4_extract_shift$0;
  $d_sroa_0_0_extract_trunc = $b$0;
  $d_sroa_1_4_extract_shift$0 = $b$1;
  $d_sroa_1_4_extract_trunc = $d_sroa_1_4_extract_shift$0;
  if (($n_sroa_1_4_extract_trunc | 0) == 0) {
    $4 = ($rem | 0) != 0;
    if (($d_sroa_1_4_extract_trunc | 0) == 0) {
      if ($4) {
        HEAP32[$rem >> 2] = ($n_sroa_0_0_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
        HEAP32[$rem + 4 >> 2] = 0;
      }
      $_0$1 = 0;
      $_0$0 = ($n_sroa_0_0_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
      return (tempRet0 = $_0$1, $_0$0) | 0;
    } else {
      if (!$4) {
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      HEAP32[$rem >> 2] = $a$0 & -1;
      HEAP32[$rem + 4 >> 2] = $a$1 & 0;
      $_0$1 = 0;
      $_0$0 = 0;
      return (tempRet0 = $_0$1, $_0$0) | 0;
    }
  }
  $17 = ($d_sroa_1_4_extract_trunc | 0) == 0;
  do {
    if (($d_sroa_0_0_extract_trunc | 0) == 0) {
      if ($17) {
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
          HEAP32[$rem + 4 >> 2] = 0;
        }
        $_0$1 = 0;
        $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      if (($n_sroa_0_0_extract_trunc | 0) == 0) {
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = 0;
          HEAP32[$rem + 4 >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_1_4_extract_trunc >>> 0);
        }
        $_0$1 = 0;
        $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_1_4_extract_trunc >>> 0) >>> 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      $37 = $d_sroa_1_4_extract_trunc - 1 | 0;
      if (($37 & $d_sroa_1_4_extract_trunc | 0) == 0) {
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = 0 | $a$0 & -1;
          HEAP32[$rem + 4 >> 2] = $37 & $n_sroa_1_4_extract_trunc | $a$1 & 0;
        }
        $_0$1 = 0;
        $_0$0 = $n_sroa_1_4_extract_trunc >>> ((_llvm_cttz_i32($d_sroa_1_4_extract_trunc | 0) | 0) >>> 0);
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      $49 = _llvm_ctlz_i32($d_sroa_1_4_extract_trunc | 0) | 0;
      $51 = $49 - (_llvm_ctlz_i32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
      if ($51 >>> 0 <= 30) {
        $57 = $51 + 1 | 0;
        $58 = 31 - $51 | 0;
        $sr_1_ph = $57;
        $r_sroa_0_1_ph = $n_sroa_1_4_extract_trunc << $58 | $n_sroa_0_0_extract_trunc >>> ($57 >>> 0);
        $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($57 >>> 0);
        $q_sroa_0_1_ph = 0;
        $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $58;
        break;
      }
      if (($rem | 0) == 0) {
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      HEAP32[$rem >> 2] = 0 | $a$0 & -1;
      HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
      $_0$1 = 0;
      $_0$0 = 0;
      return (tempRet0 = $_0$1, $_0$0) | 0;
    } else {
      if (!$17) {
        $117 = _llvm_ctlz_i32($d_sroa_1_4_extract_trunc | 0) | 0;
        $119 = $117 - (_llvm_ctlz_i32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
        if ($119 >>> 0 <= 31) {
          $125 = $119 + 1 | 0;
          $126 = 31 - $119 | 0;
          $130 = $119 - 31 >> 31;
          $sr_1_ph = $125;
          $r_sroa_0_1_ph = $n_sroa_0_0_extract_trunc >>> ($125 >>> 0) & $130 | $n_sroa_1_4_extract_trunc << $126;
          $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($125 >>> 0) & $130;
          $q_sroa_0_1_ph = 0;
          $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $126;
          break;
        }
        if (($rem | 0) == 0) {
          $_0$1 = 0;
          $_0$0 = 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        HEAP32[$rem >> 2] = 0 | $a$0 & -1;
        HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      $66 = $d_sroa_0_0_extract_trunc - 1 | 0;
      if (($66 & $d_sroa_0_0_extract_trunc | 0) != 0) {
        $86 = (_llvm_ctlz_i32($d_sroa_0_0_extract_trunc | 0) | 0) + 33 | 0;
        $88 = $86 - (_llvm_ctlz_i32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
        $89 = 64 - $88 | 0;
        $91 = 32 - $88 | 0;
        $92 = $91 >> 31;
        $95 = $88 - 32 | 0;
        $105 = $95 >> 31;
        $sr_1_ph = $88;
        $r_sroa_0_1_ph = $91 - 1 >> 31 & $n_sroa_1_4_extract_trunc >>> ($95 >>> 0) | ($n_sroa_1_4_extract_trunc << $91 | $n_sroa_0_0_extract_trunc >>> ($88 >>> 0)) & $105;
        $r_sroa_1_1_ph = $105 & $n_sroa_1_4_extract_trunc >>> ($88 >>> 0);
        $q_sroa_0_1_ph = $n_sroa_0_0_extract_trunc << $89 & $92;
        $q_sroa_1_1_ph = ($n_sroa_1_4_extract_trunc << $89 | $n_sroa_0_0_extract_trunc >>> ($95 >>> 0)) & $92 | $n_sroa_0_0_extract_trunc << $91 & $88 - 33 >> 31;
        break;
      }
      if (($rem | 0) != 0) {
        HEAP32[$rem >> 2] = $66 & $n_sroa_0_0_extract_trunc;
        HEAP32[$rem + 4 >> 2] = 0;
      }
      if (($d_sroa_0_0_extract_trunc | 0) == 1) {
        $_0$1 = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
        $_0$0 = 0 | $a$0 & -1;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      } else {
        $78 = _llvm_cttz_i32($d_sroa_0_0_extract_trunc | 0) | 0;
        $_0$1 = 0 | $n_sroa_1_4_extract_trunc >>> ($78 >>> 0);
        $_0$0 = $n_sroa_1_4_extract_trunc << 32 - $78 | $n_sroa_0_0_extract_trunc >>> ($78 >>> 0) | 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
    }
  } while (0);
  if (($sr_1_ph | 0) == 0) {
    $q_sroa_1_1_lcssa = $q_sroa_1_1_ph;
    $q_sroa_0_1_lcssa = $q_sroa_0_1_ph;
    $r_sroa_1_1_lcssa = $r_sroa_1_1_ph;
    $r_sroa_0_1_lcssa = $r_sroa_0_1_ph;
    $carry_0_lcssa$1 = 0;
    $carry_0_lcssa$0 = 0;
  } else {
    $d_sroa_0_0_insert_insert99$0 = 0 | $b$0 & -1;
    $d_sroa_0_0_insert_insert99$1 = $d_sroa_1_4_extract_shift$0 | $b$1 & 0;
    $137$0 = _i64Add($d_sroa_0_0_insert_insert99$0, $d_sroa_0_0_insert_insert99$1, -1, -1) | 0;
    $137$1 = tempRet0;
    $q_sroa_1_1198 = $q_sroa_1_1_ph;
    $q_sroa_0_1199 = $q_sroa_0_1_ph;
    $r_sroa_1_1200 = $r_sroa_1_1_ph;
    $r_sroa_0_1201 = $r_sroa_0_1_ph;
    $sr_1202 = $sr_1_ph;
    $carry_0203 = 0;
    while (1) {
      $147 = $q_sroa_0_1199 >>> 31 | $q_sroa_1_1198 << 1;
      $149 = $carry_0203 | $q_sroa_0_1199 << 1;
      $r_sroa_0_0_insert_insert42$0 = 0 | ($r_sroa_0_1201 << 1 | $q_sroa_1_1198 >>> 31);
      $r_sroa_0_0_insert_insert42$1 = $r_sroa_0_1201 >>> 31 | $r_sroa_1_1200 << 1 | 0;
      _i64Subtract($137$0, $137$1, $r_sroa_0_0_insert_insert42$0, $r_sroa_0_0_insert_insert42$1) | 0;
      $150$1 = tempRet0;
      $151$0 = $150$1 >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1;
      $152 = $151$0 & 1;
      $154$0 = _i64Subtract($r_sroa_0_0_insert_insert42$0, $r_sroa_0_0_insert_insert42$1, $151$0 & $d_sroa_0_0_insert_insert99$0, ((($150$1 | 0) < 0 ? -1 : 0) >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1) & $d_sroa_0_0_insert_insert99$1) | 0;
      $r_sroa_0_0_extract_trunc = $154$0;
      $r_sroa_1_4_extract_trunc = tempRet0;
      $155 = $sr_1202 - 1 | 0;
      if (($155 | 0) == 0) {
        break;
      } else {
        $q_sroa_1_1198 = $147;
        $q_sroa_0_1199 = $149;
        $r_sroa_1_1200 = $r_sroa_1_4_extract_trunc;
        $r_sroa_0_1201 = $r_sroa_0_0_extract_trunc;
        $sr_1202 = $155;
        $carry_0203 = $152;
      }
    }
    $q_sroa_1_1_lcssa = $147;
    $q_sroa_0_1_lcssa = $149;
    $r_sroa_1_1_lcssa = $r_sroa_1_4_extract_trunc;
    $r_sroa_0_1_lcssa = $r_sroa_0_0_extract_trunc;
    $carry_0_lcssa$1 = 0;
    $carry_0_lcssa$0 = $152;
  }
  $q_sroa_0_0_insert_ext75$0 = $q_sroa_0_1_lcssa;
  $q_sroa_0_0_insert_ext75$1 = 0;
  $q_sroa_0_0_insert_insert77$1 = $q_sroa_1_1_lcssa | $q_sroa_0_0_insert_ext75$1;
  if (($rem | 0) != 0) {
    HEAP32[$rem >> 2] = 0 | $r_sroa_0_1_lcssa;
    HEAP32[$rem + 4 >> 2] = $r_sroa_1_1_lcssa | 0;
  }
  $_0$1 = (0 | $q_sroa_0_0_insert_ext75$0) >>> 31 | $q_sroa_0_0_insert_insert77$1 << 1 | ($q_sroa_0_0_insert_ext75$1 << 1 | $q_sroa_0_0_insert_ext75$0 >>> 31) & 0 | $carry_0_lcssa$1;
  $_0$0 = ($q_sroa_0_0_insert_ext75$0 << 1 | 0 >>> 31) & -2 | $carry_0_lcssa$0;
  return (tempRet0 = $_0$1, $_0$0) | 0;
}
// =======================================================================


// EMSCRIPTEN_END_FUNCS

// TODO: strip out parts of this we do not need

//======= begin closure i64 code =======

// Copyright 2009 The Closure Library Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/**
 * @fileoverview Defines a Long class for representing a 64-bit two's-complement
 * integer value, which faithfully simulates the behavior of a Java "long". This
 * implementation is derived from LongLib in GWT.
 *
 */

var i64Math = (function() { // Emscripten wrapper
  var goog = { math: {} };


  /**
   * Constructs a 64-bit two's-complement integer, given its low and high 32-bit
   * values as *signed* integers.  See the from* functions below for more
   * convenient ways of constructing Longs.
   *
   * The internal representation of a long is the two given signed, 32-bit values.
   * We use 32-bit pieces because these are the size of integers on which
   * Javascript performs bit-operations.  For operations like addition and
   * multiplication, we split each number into 16-bit pieces, which can easily be
   * multiplied within Javascript's floating-point representation without overflow
   * or change in sign.
   *
   * In the algorithms below, we frequently reduce the negative case to the
   * positive case by negating the input(s) and then post-processing the result.
   * Note that we must ALWAYS check specially whether those values are MIN_VALUE
   * (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as
   * a positive number, it overflows back into a negative).  Not handling this
   * case would often result in infinite recursion.
   *
   * @param {number} low  The low (signed) 32 bits of the long.
   * @param {number} high  The high (signed) 32 bits of the long.
   * @constructor
   */
  goog.math.Long = function(low, high) {
    /**
     * @type {number}
     * @private
     */
    this.low_ = low | 0;  // force into 32 signed bits.

    /**
     * @type {number}
     * @private
     */
    this.high_ = high | 0;  // force into 32 signed bits.
  };


  // NOTE: Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the
  // from* methods on which they depend.


  /**
   * A cache of the Long representations of small integer values.
   * @type {!Object}
   * @private
   */
  goog.math.Long.IntCache_ = {};


  /**
   * Returns a Long representing the given (32-bit) integer value.
   * @param {number} value The 32-bit integer in question.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromInt = function(value) {
    if (-128 <= value && value < 128) {
      var cachedObj = goog.math.Long.IntCache_[value];
      if (cachedObj) {
        return cachedObj;
      }
    }

    var obj = new goog.math.Long(value | 0, value < 0 ? -1 : 0);
    if (-128 <= value && value < 128) {
      goog.math.Long.IntCache_[value] = obj;
    }
    return obj;
  };


  /**
   * Returns a Long representing the given value, provided that it is a finite
   * number.  Otherwise, zero is returned.
   * @param {number} value The number in question.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromNumber = function(value) {
    if (isNaN(value) || !isFinite(value)) {
      return goog.math.Long.ZERO;
    } else if (value <= -goog.math.Long.TWO_PWR_63_DBL_) {
      return goog.math.Long.MIN_VALUE;
    } else if (value + 1 >= goog.math.Long.TWO_PWR_63_DBL_) {
      return goog.math.Long.MAX_VALUE;
    } else if (value < 0) {
      return goog.math.Long.fromNumber(-value).negate();
    } else {
      return new goog.math.Long(
          (value % goog.math.Long.TWO_PWR_32_DBL_) | 0,
          (value / goog.math.Long.TWO_PWR_32_DBL_) | 0);
    }
  };


  /**
   * Returns a Long representing the 64-bit integer that comes by concatenating
   * the given high and low bits.  Each is assumed to use 32 bits.
   * @param {number} lowBits The low 32-bits.
   * @param {number} highBits The high 32-bits.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromBits = function(lowBits, highBits) {
    return new goog.math.Long(lowBits, highBits);
  };


  /**
   * Returns a Long representation of the given string, written using the given
   * radix.
   * @param {string} str The textual representation of the Long.
   * @param {number=} opt_radix The radix in which the text is written.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromString = function(str, opt_radix) {
    if (str.length == 0) {
      throw Error('number format error: empty string');
    }

    var radix = opt_radix || 10;
    if (radix < 2 || 36 < radix) {
      throw Error('radix out of range: ' + radix);
    }

    if (str.charAt(0) == '-') {
      return goog.math.Long.fromString(str.substring(1), radix).negate();
    } else if (str.indexOf('-') >= 0) {
      throw Error('number format error: interior "-" character: ' + str);
    }

    // Do several (8) digits each time through the loop, so as to
    // minimize the calls to the very expensive emulated div.
    var radixToPower = goog.math.Long.fromNumber(Math.pow(radix, 8));

    var result = goog.math.Long.ZERO;
    for (var i = 0; i < str.length; i += 8) {
      var size = Math.min(8, str.length - i);
      var value = parseInt(str.substring(i, i + size), radix);
      if (size < 8) {
        var power = goog.math.Long.fromNumber(Math.pow(radix, size));
        result = result.multiply(power).add(goog.math.Long.fromNumber(value));
      } else {
        result = result.multiply(radixToPower);
        result = result.add(goog.math.Long.fromNumber(value));
      }
    }
    return result;
  };


  // NOTE: the compiler should inline these constant values below and then remove
  // these variables, so there should be no runtime penalty for these.


  /**
   * Number used repeated below in calculations.  This must appear before the
   * first call to any from* function below.
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_16_DBL_ = 1 << 16;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_24_DBL_ = 1 << 24;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_32_DBL_ =
      goog.math.Long.TWO_PWR_16_DBL_ * goog.math.Long.TWO_PWR_16_DBL_;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_31_DBL_ =
      goog.math.Long.TWO_PWR_32_DBL_ / 2;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_48_DBL_ =
      goog.math.Long.TWO_PWR_32_DBL_ * goog.math.Long.TWO_PWR_16_DBL_;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_64_DBL_ =
      goog.math.Long.TWO_PWR_32_DBL_ * goog.math.Long.TWO_PWR_32_DBL_;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_63_DBL_ =
      goog.math.Long.TWO_PWR_64_DBL_ / 2;


  /** @type {!goog.math.Long} */
  goog.math.Long.ZERO = goog.math.Long.fromInt(0);


  /** @type {!goog.math.Long} */
  goog.math.Long.ONE = goog.math.Long.fromInt(1);


  /** @type {!goog.math.Long} */
  goog.math.Long.NEG_ONE = goog.math.Long.fromInt(-1);


  /** @type {!goog.math.Long} */
  goog.math.Long.MAX_VALUE =
      goog.math.Long.fromBits(0xFFFFFFFF | 0, 0x7FFFFFFF | 0);


  /** @type {!goog.math.Long} */
  goog.math.Long.MIN_VALUE = goog.math.Long.fromBits(0, 0x80000000 | 0);


  /**
   * @type {!goog.math.Long}
   * @private
   */
  goog.math.Long.TWO_PWR_24_ = goog.math.Long.fromInt(1 << 24);


  /** @return {number} The value, assuming it is a 32-bit integer. */
  goog.math.Long.prototype.toInt = function() {
    return this.low_;
  };


  /** @return {number} The closest floating-point representation to this value. */
  goog.math.Long.prototype.toNumber = function() {
    return this.high_ * goog.math.Long.TWO_PWR_32_DBL_ +
           this.getLowBitsUnsigned();
  };


  /**
   * @param {number=} opt_radix The radix in which the text should be written.
   * @return {string} The textual representation of this value.
   */
  goog.math.Long.prototype.toString = function(opt_radix) {
    var radix = opt_radix || 10;
    if (radix < 2 || 36 < radix) {
      throw Error('radix out of range: ' + radix);
    }

    if (this.isZero()) {
      return '0';
    }

    if (this.isNegative()) {
      if (this.equals(goog.math.Long.MIN_VALUE)) {
        // We need to change the Long value before it can be negated, so we remove
        // the bottom-most digit in this base and then recurse to do the rest.
        var radixLong = goog.math.Long.fromNumber(radix);
        var div = this.div(radixLong);
        var rem = div.multiply(radixLong).subtract(this);
        return div.toString(radix) + rem.toInt().toString(radix);
      } else {
        return '-' + this.negate().toString(radix);
      }
    }

    // Do several (6) digits each time through the loop, so as to
    // minimize the calls to the very expensive emulated div.
    var radixToPower = goog.math.Long.fromNumber(Math.pow(radix, 6));

    var rem = this;
    var result = '';
    while (true) {
      var remDiv = rem.div(radixToPower);
      var intval = rem.subtract(remDiv.multiply(radixToPower)).toInt();
      var digits = intval.toString(radix);

      rem = remDiv;
      if (rem.isZero()) {
        return digits + result;
      } else {
        while (digits.length < 6) {
          digits = '0' + digits;
        }
        result = '' + digits + result;
      }
    }
  };


  /** @return {number} The high 32-bits as a signed value. */
  goog.math.Long.prototype.getHighBits = function() {
    return this.high_;
  };


  /** @return {number} The low 32-bits as a signed value. */
  goog.math.Long.prototype.getLowBits = function() {
    return this.low_;
  };


  /** @return {number} The low 32-bits as an unsigned value. */
  goog.math.Long.prototype.getLowBitsUnsigned = function() {
    return (this.low_ >= 0) ?
        this.low_ : goog.math.Long.TWO_PWR_32_DBL_ + this.low_;
  };


  /**
   * @return {number} Returns the number of bits needed to represent the absolute
   *     value of this Long.
   */
  goog.math.Long.prototype.getNumBitsAbs = function() {
    if (this.isNegative()) {
      if (this.equals(goog.math.Long.MIN_VALUE)) {
        return 64;
      } else {
        return this.negate().getNumBitsAbs();
      }
    } else {
      var val = this.high_ != 0 ? this.high_ : this.low_;
      for (var bit = 31; bit > 0; bit--) {
        if ((val & (1 << bit)) != 0) {
          break;
        }
      }
      return this.high_ != 0 ? bit + 33 : bit + 1;
    }
  };


  /** @return {boolean} Whether this value is zero. */
  goog.math.Long.prototype.isZero = function() {
    return this.high_ == 0 && this.low_ == 0;
  };


  /** @return {boolean} Whether this value is negative. */
  goog.math.Long.prototype.isNegative = function() {
    return this.high_ < 0;
  };


  /** @return {boolean} Whether this value is odd. */
  goog.math.Long.prototype.isOdd = function() {
    return (this.low_ & 1) == 1;
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long equals the other.
   */
  goog.math.Long.prototype.equals = function(other) {
    return (this.high_ == other.high_) && (this.low_ == other.low_);
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long does not equal the other.
   */
  goog.math.Long.prototype.notEquals = function(other) {
    return (this.high_ != other.high_) || (this.low_ != other.low_);
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is less than the other.
   */
  goog.math.Long.prototype.lessThan = function(other) {
    return this.compare(other) < 0;
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is less than or equal to the other.
   */
  goog.math.Long.prototype.lessThanOrEqual = function(other) {
    return this.compare(other) <= 0;
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is greater than the other.
   */
  goog.math.Long.prototype.greaterThan = function(other) {
    return this.compare(other) > 0;
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is greater than or equal to the other.
   */
  goog.math.Long.prototype.greaterThanOrEqual = function(other) {
    return this.compare(other) >= 0;
  };


  /**
   * Compares this Long with the given one.
   * @param {goog.math.Long} other Long to compare against.
   * @return {number} 0 if they are the same, 1 if the this is greater, and -1
   *     if the given one is greater.
   */
  goog.math.Long.prototype.compare = function(other) {
    if (this.equals(other)) {
      return 0;
    }

    var thisNeg = this.isNegative();
    var otherNeg = other.isNegative();
    if (thisNeg && !otherNeg) {
      return -1;
    }
    if (!thisNeg && otherNeg) {
      return 1;
    }

    // at this point, the signs are the same, so subtraction will not overflow
    if (this.subtract(other).isNegative()) {
      return -1;
    } else {
      return 1;
    }
  };


  /** @return {!goog.math.Long} The negation of this value. */
  goog.math.Long.prototype.negate = function() {
    if (this.equals(goog.math.Long.MIN_VALUE)) {
      return goog.math.Long.MIN_VALUE;
    } else {
      return this.not().add(goog.math.Long.ONE);
    }
  };


  /**
   * Returns the sum of this and the given Long.
   * @param {goog.math.Long} other Long to add to this one.
   * @return {!goog.math.Long} The sum of this and the given Long.
   */
  goog.math.Long.prototype.add = function(other) {
    // Divide each number into 4 chunks of 16 bits, and then sum the chunks.

    var a48 = this.high_ >>> 16;
    var a32 = this.high_ & 0xFFFF;
    var a16 = this.low_ >>> 16;
    var a00 = this.low_ & 0xFFFF;

    var b48 = other.high_ >>> 16;
    var b32 = other.high_ & 0xFFFF;
    var b16 = other.low_ >>> 16;
    var b00 = other.low_ & 0xFFFF;

    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;
    c00 += a00 + b00;
    c16 += c00 >>> 16;
    c00 &= 0xFFFF;
    c16 += a16 + b16;
    c32 += c16 >>> 16;
    c16 &= 0xFFFF;
    c32 += a32 + b32;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c48 += a48 + b48;
    c48 &= 0xFFFF;
    return goog.math.Long.fromBits((c16 << 16) | c00, (c48 << 16) | c32);
  };


  /**
   * Returns the difference of this and the given Long.
   * @param {goog.math.Long} other Long to subtract from this.
   * @return {!goog.math.Long} The difference of this and the given Long.
   */
  goog.math.Long.prototype.subtract = function(other) {
    return this.add(other.negate());
  };


  /**
   * Returns the product of this and the given long.
   * @param {goog.math.Long} other Long to multiply with this.
   * @return {!goog.math.Long} The product of this and the other.
   */
  goog.math.Long.prototype.multiply = function(other) {
    if (this.isZero()) {
      return goog.math.Long.ZERO;
    } else if (other.isZero()) {
      return goog.math.Long.ZERO;
    }

    if (this.equals(goog.math.Long.MIN_VALUE)) {
      return other.isOdd() ? goog.math.Long.MIN_VALUE : goog.math.Long.ZERO;
    } else if (other.equals(goog.math.Long.MIN_VALUE)) {
      return this.isOdd() ? goog.math.Long.MIN_VALUE : goog.math.Long.ZERO;
    }

    if (this.isNegative()) {
      if (other.isNegative()) {
        return this.negate().multiply(other.negate());
      } else {
        return this.negate().multiply(other).negate();
      }
    } else if (other.isNegative()) {
      return this.multiply(other.negate()).negate();
    }

    // If both longs are small, use float multiplication
    if (this.lessThan(goog.math.Long.TWO_PWR_24_) &&
        other.lessThan(goog.math.Long.TWO_PWR_24_)) {
      return goog.math.Long.fromNumber(this.toNumber() * other.toNumber());
    }

    // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.
    // We can skip products that would overflow.

    var a48 = this.high_ >>> 16;
    var a32 = this.high_ & 0xFFFF;
    var a16 = this.low_ >>> 16;
    var a00 = this.low_ & 0xFFFF;

    var b48 = other.high_ >>> 16;
    var b32 = other.high_ & 0xFFFF;
    var b16 = other.low_ >>> 16;
    var b00 = other.low_ & 0xFFFF;

    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;
    c00 += a00 * b00;
    c16 += c00 >>> 16;
    c00 &= 0xFFFF;
    c16 += a16 * b00;
    c32 += c16 >>> 16;
    c16 &= 0xFFFF;
    c16 += a00 * b16;
    c32 += c16 >>> 16;
    c16 &= 0xFFFF;
    c32 += a32 * b00;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c32 += a16 * b16;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c32 += a00 * b32;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;
    c48 &= 0xFFFF;
    return goog.math.Long.fromBits((c16 << 16) | c00, (c48 << 16) | c32);
  };


  /**
   * Returns this Long divided by the given one.
   * @param {goog.math.Long} other Long by which to divide.
   * @return {!goog.math.Long} This Long divided by the given one.
   */
  goog.math.Long.prototype.div = function(other) {
    if (other.isZero()) {
      throw Error('division by zero');
    } else if (this.isZero()) {
      return goog.math.Long.ZERO;
    }

    if (this.equals(goog.math.Long.MIN_VALUE)) {
      if (other.equals(goog.math.Long.ONE) ||
          other.equals(goog.math.Long.NEG_ONE)) {
        return goog.math.Long.MIN_VALUE;  // recall that -MIN_VALUE == MIN_VALUE
      } else if (other.equals(goog.math.Long.MIN_VALUE)) {
        return goog.math.Long.ONE;
      } else {
        // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.
        var halfThis = this.shiftRight(1);
        var approx = halfThis.div(other).shiftLeft(1);
        if (approx.equals(goog.math.Long.ZERO)) {
          return other.isNegative() ? goog.math.Long.ONE : goog.math.Long.NEG_ONE;
        } else {
          var rem = this.subtract(other.multiply(approx));
          var result = approx.add(rem.div(other));
          return result;
        }
      }
    } else if (other.equals(goog.math.Long.MIN_VALUE)) {
      return goog.math.Long.ZERO;
    }

    if (this.isNegative()) {
      if (other.isNegative()) {
        return this.negate().div(other.negate());
      } else {
        return this.negate().div(other).negate();
      }
    } else if (other.isNegative()) {
      return this.div(other.negate()).negate();
    }

    // Repeat the following until the remainder is less than other:  find a
    // floating-point that approximates remainder / other *from below*, add this
    // into the result, and subtract it from the remainder.  It is critical that
    // the approximate value is less than or equal to the real value so that the
    // remainder never becomes negative.
    var res = goog.math.Long.ZERO;
    var rem = this;
    while (rem.greaterThanOrEqual(other)) {
      // Approximate the result of division. This may be a little greater or
      // smaller than the actual value.
      var approx = Math.max(1, Math.floor(rem.toNumber() / other.toNumber()));

      // We will tweak the approximate result by changing it in the 48-th digit or
      // the smallest non-fractional digit, whichever is larger.
      var log2 = Math.ceil(Math.log(approx) / Math.LN2);
      var delta = (log2 <= 48) ? 1 : Math.pow(2, log2 - 48);

      // Decrease the approximation until it is smaller than the remainder.  Note
      // that if it is too large, the product overflows and is negative.
      var approxRes = goog.math.Long.fromNumber(approx);
      var approxRem = approxRes.multiply(other);
      while (approxRem.isNegative() || approxRem.greaterThan(rem)) {
        approx -= delta;
        approxRes = goog.math.Long.fromNumber(approx);
        approxRem = approxRes.multiply(other);
      }

      // We know the answer can't be zero... and actually, zero would cause
      // infinite recursion since we would make no progress.
      if (approxRes.isZero()) {
        approxRes = goog.math.Long.ONE;
      }

      res = res.add(approxRes);
      rem = rem.subtract(approxRem);
    }
    return res;
  };


  /**
   * Returns this Long modulo the given one.
   * @param {goog.math.Long} other Long by which to mod.
   * @return {!goog.math.Long} This Long modulo the given one.
   */
  goog.math.Long.prototype.modulo = function(other) {
    return this.subtract(this.div(other).multiply(other));
  };


  /** @return {!goog.math.Long} The bitwise-NOT of this value. */
  goog.math.Long.prototype.not = function() {
    return goog.math.Long.fromBits(~this.low_, ~this.high_);
  };


  /**
   * Returns the bitwise-AND of this Long and the given one.
   * @param {goog.math.Long} other The Long with which to AND.
   * @return {!goog.math.Long} The bitwise-AND of this and the other.
   */
  goog.math.Long.prototype.and = function(other) {
    return goog.math.Long.fromBits(this.low_ & other.low_,
                                   this.high_ & other.high_);
  };


  /**
   * Returns the bitwise-OR of this Long and the given one.
   * @param {goog.math.Long} other The Long with which to OR.
   * @return {!goog.math.Long} The bitwise-OR of this and the other.
   */
  goog.math.Long.prototype.or = function(other) {
    return goog.math.Long.fromBits(this.low_ | other.low_,
                                   this.high_ | other.high_);
  };


  /**
   * Returns the bitwise-XOR of this Long and the given one.
   * @param {goog.math.Long} other The Long with which to XOR.
   * @return {!goog.math.Long} The bitwise-XOR of this and the other.
   */
  goog.math.Long.prototype.xor = function(other) {
    return goog.math.Long.fromBits(this.low_ ^ other.low_,
                                   this.high_ ^ other.high_);
  };


  /**
   * Returns this Long with bits shifted to the left by the given amount.
   * @param {number} numBits The number of bits by which to shift.
   * @return {!goog.math.Long} This shifted to the left by the given amount.
   */
  goog.math.Long.prototype.shiftLeft = function(numBits) {
    numBits &= 63;
    if (numBits == 0) {
      return this;
    } else {
      var low = this.low_;
      if (numBits < 32) {
        var high = this.high_;
        return goog.math.Long.fromBits(
            low << numBits,
            (high << numBits) | (low >>> (32 - numBits)));
      } else {
        return goog.math.Long.fromBits(0, low << (numBits - 32));
      }
    }
  };


  /**
   * Returns this Long with bits shifted to the right by the given amount.
   * @param {number} numBits The number of bits by which to shift.
   * @return {!goog.math.Long} This shifted to the right by the given amount.
   */
  goog.math.Long.prototype.shiftRight = function(numBits) {
    numBits &= 63;
    if (numBits == 0) {
      return this;
    } else {
      var high = this.high_;
      if (numBits < 32) {
        var low = this.low_;
        return goog.math.Long.fromBits(
            (low >>> numBits) | (high << (32 - numBits)),
            high >> numBits);
      } else {
        return goog.math.Long.fromBits(
            high >> (numBits - 32),
            high >= 0 ? 0 : -1);
      }
    }
  };


  /**
   * Returns this Long with bits shifted to the right by the given amount, with
   * the new top bits matching the current sign bit.
   * @param {number} numBits The number of bits by which to shift.
   * @return {!goog.math.Long} This shifted to the right by the given amount, with
   *     zeros placed into the new leading bits.
   */
  goog.math.Long.prototype.shiftRightUnsigned = function(numBits) {
    numBits &= 63;
    if (numBits == 0) {
      return this;
    } else {
      var high = this.high_;
      if (numBits < 32) {
        var low = this.low_;
        return goog.math.Long.fromBits(
            (low >>> numBits) | (high << (32 - numBits)),
            high >>> numBits);
      } else if (numBits == 32) {
        return goog.math.Long.fromBits(high, 0);
      } else {
        return goog.math.Long.fromBits(high >>> (numBits - 32), 0);
      }
    }
  };

  //======= begin jsbn =======

  var navigator = { appName: 'Modern Browser' }; // polyfill a little

  // Copyright (c) 2005  Tom Wu
  // All Rights Reserved.
  // http://www-cs-students.stanford.edu/~tjw/jsbn/

  /*
   * Copyright (c) 2003-2005  Tom Wu
   * All Rights Reserved.
   *
   * Permission is hereby granted, free of charge, to any person obtaining
   * a copy of this software and associated documentation files (the
   * "Software"), to deal in the Software without restriction, including
   * without limitation the rights to use, copy, modify, merge, publish,
   * distribute, sublicense, and/or sell copies of the Software, and to
   * permit persons to whom the Software is furnished to do so, subject to
   * the following conditions:
   *
   * The above copyright notice and this permission notice shall be
   * included in all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS-IS" AND WITHOUT WARRANTY OF ANY KIND, 
   * EXPRESS, IMPLIED OR OTHERWISE, INCLUDING WITHOUT LIMITATION, ANY 
   * WARRANTY OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.  
   *
   * IN NO EVENT SHALL TOM WU BE LIABLE FOR ANY SPECIAL, INCIDENTAL,
   * INDIRECT OR CONSEQUENTIAL DAMAGES OF ANY KIND, OR ANY DAMAGES WHATSOEVER
   * RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER OR NOT ADVISED OF
   * THE POSSIBILITY OF DAMAGE, AND ON ANY THEORY OF LIABILITY, ARISING OUT
   * OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
   *
   * In addition, the following condition applies:
   *
   * All redistributions must retain an intact copy of this copyright notice
   * and disclaimer.
   */

  // Basic JavaScript BN library - subset useful for RSA encryption.

  // Bits per digit
  var dbits;

  // JavaScript engine analysis
  var canary = 0xdeadbeefcafe;
  var j_lm = ((canary&0xffffff)==0xefcafe);

  // (public) Constructor
  function BigInteger(a,b,c) {
    if(a != null)
      if("number" == typeof a) this.fromNumber(a,b,c);
      else if(b == null && "string" != typeof a) this.fromString(a,256);
      else this.fromString(a,b);
  }

  // return new, unset BigInteger
  function nbi() { return new BigInteger(null); }

  // am: Compute w_j += (x*this_i), propagate carries,
  // c is initial carry, returns final carry.
  // c < 3*dvalue, x < 2*dvalue, this_i < dvalue
  // We need to select the fastest one that works in this environment.

  // am1: use a single mult and divide to get the high bits,
  // max digit bits should be 26 because
  // max internal value = 2*dvalue^2-2*dvalue (< 2^53)
  function am1(i,x,w,j,c,n) {
    while(--n >= 0) {
      var v = x*this[i++]+w[j]+c;
      c = Math.floor(v/0x4000000);
      w[j++] = v&0x3ffffff;
    }
    return c;
  }
  // am2 avoids a big mult-and-extract completely.
  // Max digit bits should be <= 30 because we do bitwise ops
  // on values up to 2*hdvalue^2-hdvalue-1 (< 2^31)
  function am2(i,x,w,j,c,n) {
    var xl = x&0x7fff, xh = x>>15;
    while(--n >= 0) {
      var l = this[i]&0x7fff;
      var h = this[i++]>>15;
      var m = xh*l+h*xl;
      l = xl*l+((m&0x7fff)<<15)+w[j]+(c&0x3fffffff);
      c = (l>>>30)+(m>>>15)+xh*h+(c>>>30);
      w[j++] = l&0x3fffffff;
    }
    return c;
  }
  // Alternately, set max digit bits to 28 since some
  // browsers slow down when dealing with 32-bit numbers.
  function am3(i,x,w,j,c,n) {
    var xl = x&0x3fff, xh = x>>14;
    while(--n >= 0) {
      var l = this[i]&0x3fff;
      var h = this[i++]>>14;
      var m = xh*l+h*xl;
      l = xl*l+((m&0x3fff)<<14)+w[j]+c;
      c = (l>>28)+(m>>14)+xh*h;
      w[j++] = l&0xfffffff;
    }
    return c;
  }
  if(j_lm && (navigator.appName == "Microsoft Internet Explorer")) {
    BigInteger.prototype.am = am2;
    dbits = 30;
  }
  else if(j_lm && (navigator.appName != "Netscape")) {
    BigInteger.prototype.am = am1;
    dbits = 26;
  }
  else { // Mozilla/Netscape seems to prefer am3
    BigInteger.prototype.am = am3;
    dbits = 28;
  }

  BigInteger.prototype.DB = dbits;
  BigInteger.prototype.DM = ((1<<dbits)-1);
  BigInteger.prototype.DV = (1<<dbits);

  var BI_FP = 52;
  BigInteger.prototype.FV = Math.pow(2,BI_FP);
  BigInteger.prototype.F1 = BI_FP-dbits;
  BigInteger.prototype.F2 = 2*dbits-BI_FP;

  // Digit conversions
  var BI_RM = "0123456789abcdefghijklmnopqrstuvwxyz";
  var BI_RC = new Array();
  var rr,vv;
  rr = "0".charCodeAt(0);
  for(vv = 0; vv <= 9; ++vv) BI_RC[rr++] = vv;
  rr = "a".charCodeAt(0);
  for(vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv;
  rr = "A".charCodeAt(0);
  for(vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv;

  function int2char(n) { return BI_RM.charAt(n); }
  function intAt(s,i) {
    var c = BI_RC[s.charCodeAt(i)];
    return (c==null)?-1:c;
  }

  // (protected) copy this to r
  function bnpCopyTo(r) {
    for(var i = this.t-1; i >= 0; --i) r[i] = this[i];
    r.t = this.t;
    r.s = this.s;
  }

  // (protected) set from integer value x, -DV <= x < DV
  function bnpFromInt(x) {
    this.t = 1;
    this.s = (x<0)?-1:0;
    if(x > 0) this[0] = x;
    else if(x < -1) this[0] = x+DV;
    else this.t = 0;
  }

  // return bigint initialized to value
  function nbv(i) { var r = nbi(); r.fromInt(i); return r; }

  // (protected) set from string and radix
  function bnpFromString(s,b) {
    var k;
    if(b == 16) k = 4;
    else if(b == 8) k = 3;
    else if(b == 256) k = 8; // byte array
    else if(b == 2) k = 1;
    else if(b == 32) k = 5;
    else if(b == 4) k = 2;
    else { this.fromRadix(s,b); return; }
    this.t = 0;
    this.s = 0;
    var i = s.length, mi = false, sh = 0;
    while(--i >= 0) {
      var x = (k==8)?s[i]&0xff:intAt(s,i);
      if(x < 0) {
        if(s.charAt(i) == "-") mi = true;
        continue;
      }
      mi = false;
      if(sh == 0)
        this[this.t++] = x;
      else if(sh+k > this.DB) {
        this[this.t-1] |= (x&((1<<(this.DB-sh))-1))<<sh;
        this[this.t++] = (x>>(this.DB-sh));
      }
      else
        this[this.t-1] |= x<<sh;
      sh += k;
      if(sh >= this.DB) sh -= this.DB;
    }
    if(k == 8 && (s[0]&0x80) != 0) {
      this.s = -1;
      if(sh > 0) this[this.t-1] |= ((1<<(this.DB-sh))-1)<<sh;
    }
    this.clamp();
    if(mi) BigInteger.ZERO.subTo(this,this);
  }

  // (protected) clamp off excess high words
  function bnpClamp() {
    var c = this.s&this.DM;
    while(this.t > 0 && this[this.t-1] == c) --this.t;
  }

  // (public) return string representation in given radix
  function bnToString(b) {
    if(this.s < 0) return "-"+this.negate().toString(b);
    var k;
    if(b == 16) k = 4;
    else if(b == 8) k = 3;
    else if(b == 2) k = 1;
    else if(b == 32) k = 5;
    else if(b == 4) k = 2;
    else return this.toRadix(b);
    var km = (1<<k)-1, d, m = false, r = "", i = this.t;
    var p = this.DB-(i*this.DB)%k;
    if(i-- > 0) {
      if(p < this.DB && (d = this[i]>>p) > 0) { m = true; r = int2char(d); }
      while(i >= 0) {
        if(p < k) {
          d = (this[i]&((1<<p)-1))<<(k-p);
          d |= this[--i]>>(p+=this.DB-k);
        }
        else {
          d = (this[i]>>(p-=k))&km;
          if(p <= 0) { p += this.DB; --i; }
        }
        if(d > 0) m = true;
        if(m) r += int2char(d);
      }
    }
    return m?r:"0";
  }

  // (public) -this
  function bnNegate() { var r = nbi(); BigInteger.ZERO.subTo(this,r); return r; }

  // (public) |this|
  function bnAbs() { return (this.s<0)?this.negate():this; }

  // (public) return + if this > a, - if this < a, 0 if equal
  function bnCompareTo(a) {
    var r = this.s-a.s;
    if(r != 0) return r;
    var i = this.t;
    r = i-a.t;
    if(r != 0) return (this.s<0)?-r:r;
    while(--i >= 0) if((r=this[i]-a[i]) != 0) return r;
    return 0;
  }

  // returns bit length of the integer x
  function nbits(x) {
    var r = 1, t;
    if((t=x>>>16) != 0) { x = t; r += 16; }
    if((t=x>>8) != 0) { x = t; r += 8; }
    if((t=x>>4) != 0) { x = t; r += 4; }
    if((t=x>>2) != 0) { x = t; r += 2; }
    if((t=x>>1) != 0) { x = t; r += 1; }
    return r;
  }

  // (public) return the number of bits in "this"
  function bnBitLength() {
    if(this.t <= 0) return 0;
    return this.DB*(this.t-1)+nbits(this[this.t-1]^(this.s&this.DM));
  }

  // (protected) r = this << n*DB
  function bnpDLShiftTo(n,r) {
    var i;
    for(i = this.t-1; i >= 0; --i) r[i+n] = this[i];
    for(i = n-1; i >= 0; --i) r[i] = 0;
    r.t = this.t+n;
    r.s = this.s;
  }

  // (protected) r = this >> n*DB
  function bnpDRShiftTo(n,r) {
    for(var i = n; i < this.t; ++i) r[i-n] = this[i];
    r.t = Math.max(this.t-n,0);
    r.s = this.s;
  }

  // (protected) r = this << n
  function bnpLShiftTo(n,r) {
    var bs = n%this.DB;
    var cbs = this.DB-bs;
    var bm = (1<<cbs)-1;
    var ds = Math.floor(n/this.DB), c = (this.s<<bs)&this.DM, i;
    for(i = this.t-1; i >= 0; --i) {
      r[i+ds+1] = (this[i]>>cbs)|c;
      c = (this[i]&bm)<<bs;
    }
    for(i = ds-1; i >= 0; --i) r[i] = 0;
    r[ds] = c;
    r.t = this.t+ds+1;
    r.s = this.s;
    r.clamp();
  }

  // (protected) r = this >> n
  function bnpRShiftTo(n,r) {
    r.s = this.s;
    var ds = Math.floor(n/this.DB);
    if(ds >= this.t) { r.t = 0; return; }
    var bs = n%this.DB;
    var cbs = this.DB-bs;
    var bm = (1<<bs)-1;
    r[0] = this[ds]>>bs;
    for(var i = ds+1; i < this.t; ++i) {
      r[i-ds-1] |= (this[i]&bm)<<cbs;
      r[i-ds] = this[i]>>bs;
    }
    if(bs > 0) r[this.t-ds-1] |= (this.s&bm)<<cbs;
    r.t = this.t-ds;
    r.clamp();
  }

  // (protected) r = this - a
  function bnpSubTo(a,r) {
    var i = 0, c = 0, m = Math.min(a.t,this.t);
    while(i < m) {
      c += this[i]-a[i];
      r[i++] = c&this.DM;
      c >>= this.DB;
    }
    if(a.t < this.t) {
      c -= a.s;
      while(i < this.t) {
        c += this[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c += this.s;
    }
    else {
      c += this.s;
      while(i < a.t) {
        c -= a[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c -= a.s;
    }
    r.s = (c<0)?-1:0;
    if(c < -1) r[i++] = this.DV+c;
    else if(c > 0) r[i++] = c;
    r.t = i;
    r.clamp();
  }

  // (protected) r = this * a, r != this,a (HAC 14.12)
  // "this" should be the larger one if appropriate.
  function bnpMultiplyTo(a,r) {
    var x = this.abs(), y = a.abs();
    var i = x.t;
    r.t = i+y.t;
    while(--i >= 0) r[i] = 0;
    for(i = 0; i < y.t; ++i) r[i+x.t] = x.am(0,y[i],r,i,0,x.t);
    r.s = 0;
    r.clamp();
    if(this.s != a.s) BigInteger.ZERO.subTo(r,r);
  }

  // (protected) r = this^2, r != this (HAC 14.16)
  function bnpSquareTo(r) {
    var x = this.abs();
    var i = r.t = 2*x.t;
    while(--i >= 0) r[i] = 0;
    for(i = 0; i < x.t-1; ++i) {
      var c = x.am(i,x[i],r,2*i,0,1);
      if((r[i+x.t]+=x.am(i+1,2*x[i],r,2*i+1,c,x.t-i-1)) >= x.DV) {
        r[i+x.t] -= x.DV;
        r[i+x.t+1] = 1;
      }
    }
    if(r.t > 0) r[r.t-1] += x.am(i,x[i],r,2*i,0,1);
    r.s = 0;
    r.clamp();
  }

  // (protected) divide this by m, quotient and remainder to q, r (HAC 14.20)
  // r != q, this != m.  q or r may be null.
  function bnpDivRemTo(m,q,r) {
    var pm = m.abs();
    if(pm.t <= 0) return;
    var pt = this.abs();
    if(pt.t < pm.t) {
      if(q != null) q.fromInt(0);
      if(r != null) this.copyTo(r);
      return;
    }
    if(r == null) r = nbi();
    var y = nbi(), ts = this.s, ms = m.s;
    var nsh = this.DB-nbits(pm[pm.t-1]);	// normalize modulus
    if(nsh > 0) { pm.lShiftTo(nsh,y); pt.lShiftTo(nsh,r); }
    else { pm.copyTo(y); pt.copyTo(r); }
    var ys = y.t;
    var y0 = y[ys-1];
    if(y0 == 0) return;
    var yt = y0*(1<<this.F1)+((ys>1)?y[ys-2]>>this.F2:0);
    var d1 = this.FV/yt, d2 = (1<<this.F1)/yt, e = 1<<this.F2;
    var i = r.t, j = i-ys, t = (q==null)?nbi():q;
    y.dlShiftTo(j,t);
    if(r.compareTo(t) >= 0) {
      r[r.t++] = 1;
      r.subTo(t,r);
    }
    BigInteger.ONE.dlShiftTo(ys,t);
    t.subTo(y,y);	// "negative" y so we can replace sub with am later
    while(y.t < ys) y[y.t++] = 0;
    while(--j >= 0) {
      // Estimate quotient digit
      var qd = (r[--i]==y0)?this.DM:Math.floor(r[i]*d1+(r[i-1]+e)*d2);
      if((r[i]+=y.am(0,qd,r,j,0,ys)) < qd) {	// Try it out
        y.dlShiftTo(j,t);
        r.subTo(t,r);
        while(r[i] < --qd) r.subTo(t,r);
      }
    }
    if(q != null) {
      r.drShiftTo(ys,q);
      if(ts != ms) BigInteger.ZERO.subTo(q,q);
    }
    r.t = ys;
    r.clamp();
    if(nsh > 0) r.rShiftTo(nsh,r);	// Denormalize remainder
    if(ts < 0) BigInteger.ZERO.subTo(r,r);
  }

  // (public) this mod a
  function bnMod(a) {
    var r = nbi();
    this.abs().divRemTo(a,null,r);
    if(this.s < 0 && r.compareTo(BigInteger.ZERO) > 0) a.subTo(r,r);
    return r;
  }

  // Modular reduction using "classic" algorithm
  function Classic(m) { this.m = m; }
  function cConvert(x) {
    if(x.s < 0 || x.compareTo(this.m) >= 0) return x.mod(this.m);
    else return x;
  }
  function cRevert(x) { return x; }
  function cReduce(x) { x.divRemTo(this.m,null,x); }
  function cMulTo(x,y,r) { x.multiplyTo(y,r); this.reduce(r); }
  function cSqrTo(x,r) { x.squareTo(r); this.reduce(r); }

  Classic.prototype.convert = cConvert;
  Classic.prototype.revert = cRevert;
  Classic.prototype.reduce = cReduce;
  Classic.prototype.mulTo = cMulTo;
  Classic.prototype.sqrTo = cSqrTo;

  // (protected) return "-1/this % 2^DB"; useful for Mont. reduction
  // justification:
  //         xy == 1 (mod m)
  //         xy =  1+km
  //   xy(2-xy) = (1+km)(1-km)
  // x[y(2-xy)] = 1-k^2m^2
  // x[y(2-xy)] == 1 (mod m^2)
  // if y is 1/x mod m, then y(2-xy) is 1/x mod m^2
  // should reduce x and y(2-xy) by m^2 at each step to keep size bounded.
  // JS multiply "overflows" differently from C/C++, so care is needed here.
  function bnpInvDigit() {
    if(this.t < 1) return 0;
    var x = this[0];
    if((x&1) == 0) return 0;
    var y = x&3;		// y == 1/x mod 2^2
    y = (y*(2-(x&0xf)*y))&0xf;	// y == 1/x mod 2^4
    y = (y*(2-(x&0xff)*y))&0xff;	// y == 1/x mod 2^8
    y = (y*(2-(((x&0xffff)*y)&0xffff)))&0xffff;	// y == 1/x mod 2^16
    // last step - calculate inverse mod DV directly;
    // assumes 16 < DB <= 32 and assumes ability to handle 48-bit ints
    y = (y*(2-x*y%this.DV))%this.DV;		// y == 1/x mod 2^dbits
    // we really want the negative inverse, and -DV < y < DV
    return (y>0)?this.DV-y:-y;
  }

  // Montgomery reduction
  function Montgomery(m) {
    this.m = m;
    this.mp = m.invDigit();
    this.mpl = this.mp&0x7fff;
    this.mph = this.mp>>15;
    this.um = (1<<(m.DB-15))-1;
    this.mt2 = 2*m.t;
  }

  // xR mod m
  function montConvert(x) {
    var r = nbi();
    x.abs().dlShiftTo(this.m.t,r);
    r.divRemTo(this.m,null,r);
    if(x.s < 0 && r.compareTo(BigInteger.ZERO) > 0) this.m.subTo(r,r);
    return r;
  }

  // x/R mod m
  function montRevert(x) {
    var r = nbi();
    x.copyTo(r);
    this.reduce(r);
    return r;
  }

  // x = x/R mod m (HAC 14.32)
  function montReduce(x) {
    while(x.t <= this.mt2)	// pad x so am has enough room later
      x[x.t++] = 0;
    for(var i = 0; i < this.m.t; ++i) {
      // faster way of calculating u0 = x[i]*mp mod DV
      var j = x[i]&0x7fff;
      var u0 = (j*this.mpl+(((j*this.mph+(x[i]>>15)*this.mpl)&this.um)<<15))&x.DM;
      // use am to combine the multiply-shift-add into one call
      j = i+this.m.t;
      x[j] += this.m.am(0,u0,x,i,0,this.m.t);
      // propagate carry
      while(x[j] >= x.DV) { x[j] -= x.DV; x[++j]++; }
    }
    x.clamp();
    x.drShiftTo(this.m.t,x);
    if(x.compareTo(this.m) >= 0) x.subTo(this.m,x);
  }

  // r = "x^2/R mod m"; x != r
  function montSqrTo(x,r) { x.squareTo(r); this.reduce(r); }

  // r = "xy/R mod m"; x,y != r
  function montMulTo(x,y,r) { x.multiplyTo(y,r); this.reduce(r); }

  Montgomery.prototype.convert = montConvert;
  Montgomery.prototype.revert = montRevert;
  Montgomery.prototype.reduce = montReduce;
  Montgomery.prototype.mulTo = montMulTo;
  Montgomery.prototype.sqrTo = montSqrTo;

  // (protected) true iff this is even
  function bnpIsEven() { return ((this.t>0)?(this[0]&1):this.s) == 0; }

  // (protected) this^e, e < 2^32, doing sqr and mul with "r" (HAC 14.79)
  function bnpExp(e,z) {
    if(e > 0xffffffff || e < 1) return BigInteger.ONE;
    var r = nbi(), r2 = nbi(), g = z.convert(this), i = nbits(e)-1;
    g.copyTo(r);
    while(--i >= 0) {
      z.sqrTo(r,r2);
      if((e&(1<<i)) > 0) z.mulTo(r2,g,r);
      else { var t = r; r = r2; r2 = t; }
    }
    return z.revert(r);
  }

  // (public) this^e % m, 0 <= e < 2^32
  function bnModPowInt(e,m) {
    var z;
    if(e < 256 || m.isEven()) z = new Classic(m); else z = new Montgomery(m);
    return this.exp(e,z);
  }

  // protected
  BigInteger.prototype.copyTo = bnpCopyTo;
  BigInteger.prototype.fromInt = bnpFromInt;
  BigInteger.prototype.fromString = bnpFromString;
  BigInteger.prototype.clamp = bnpClamp;
  BigInteger.prototype.dlShiftTo = bnpDLShiftTo;
  BigInteger.prototype.drShiftTo = bnpDRShiftTo;
  BigInteger.prototype.lShiftTo = bnpLShiftTo;
  BigInteger.prototype.rShiftTo = bnpRShiftTo;
  BigInteger.prototype.subTo = bnpSubTo;
  BigInteger.prototype.multiplyTo = bnpMultiplyTo;
  BigInteger.prototype.squareTo = bnpSquareTo;
  BigInteger.prototype.divRemTo = bnpDivRemTo;
  BigInteger.prototype.invDigit = bnpInvDigit;
  BigInteger.prototype.isEven = bnpIsEven;
  BigInteger.prototype.exp = bnpExp;

  // public
  BigInteger.prototype.toString = bnToString;
  BigInteger.prototype.negate = bnNegate;
  BigInteger.prototype.abs = bnAbs;
  BigInteger.prototype.compareTo = bnCompareTo;
  BigInteger.prototype.bitLength = bnBitLength;
  BigInteger.prototype.mod = bnMod;
  BigInteger.prototype.modPowInt = bnModPowInt;

  // "constants"
  BigInteger.ZERO = nbv(0);
  BigInteger.ONE = nbv(1);

  // jsbn2 stuff

  // (protected) convert from radix string
  function bnpFromRadix(s,b) {
    this.fromInt(0);
    if(b == null) b = 10;
    var cs = this.chunkSize(b);
    var d = Math.pow(b,cs), mi = false, j = 0, w = 0;
    for(var i = 0; i < s.length; ++i) {
      var x = intAt(s,i);
      if(x < 0) {
        if(s.charAt(i) == "-" && this.signum() == 0) mi = true;
        continue;
      }
      w = b*w+x;
      if(++j >= cs) {
        this.dMultiply(d);
        this.dAddOffset(w,0);
        j = 0;
        w = 0;
      }
    }
    if(j > 0) {
      this.dMultiply(Math.pow(b,j));
      this.dAddOffset(w,0);
    }
    if(mi) BigInteger.ZERO.subTo(this,this);
  }

  // (protected) return x s.t. r^x < DV
  function bnpChunkSize(r) { return Math.floor(Math.LN2*this.DB/Math.log(r)); }

  // (public) 0 if this == 0, 1 if this > 0
  function bnSigNum() {
    if(this.s < 0) return -1;
    else if(this.t <= 0 || (this.t == 1 && this[0] <= 0)) return 0;
    else return 1;
  }

  // (protected) this *= n, this >= 0, 1 < n < DV
  function bnpDMultiply(n) {
    this[this.t] = this.am(0,n-1,this,0,0,this.t);
    ++this.t;
    this.clamp();
  }

  // (protected) this += n << w words, this >= 0
  function bnpDAddOffset(n,w) {
    if(n == 0) return;
    while(this.t <= w) this[this.t++] = 0;
    this[w] += n;
    while(this[w] >= this.DV) {
      this[w] -= this.DV;
      if(++w >= this.t) this[this.t++] = 0;
      ++this[w];
    }
  }

  // (protected) convert to radix string
  function bnpToRadix(b) {
    if(b == null) b = 10;
    if(this.signum() == 0 || b < 2 || b > 36) return "0";
    var cs = this.chunkSize(b);
    var a = Math.pow(b,cs);
    var d = nbv(a), y = nbi(), z = nbi(), r = "";
    this.divRemTo(d,y,z);
    while(y.signum() > 0) {
      r = (a+z.intValue()).toString(b).substr(1) + r;
      y.divRemTo(d,y,z);
    }
    return z.intValue().toString(b) + r;
  }

  // (public) return value as integer
  function bnIntValue() {
    if(this.s < 0) {
      if(this.t == 1) return this[0]-this.DV;
      else if(this.t == 0) return -1;
    }
    else if(this.t == 1) return this[0];
    else if(this.t == 0) return 0;
    // assumes 16 < DB < 32
    return ((this[1]&((1<<(32-this.DB))-1))<<this.DB)|this[0];
  }

  // (protected) r = this + a
  function bnpAddTo(a,r) {
    var i = 0, c = 0, m = Math.min(a.t,this.t);
    while(i < m) {
      c += this[i]+a[i];
      r[i++] = c&this.DM;
      c >>= this.DB;
    }
    if(a.t < this.t) {
      c += a.s;
      while(i < this.t) {
        c += this[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c += this.s;
    }
    else {
      c += this.s;
      while(i < a.t) {
        c += a[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c += a.s;
    }
    r.s = (c<0)?-1:0;
    if(c > 0) r[i++] = c;
    else if(c < -1) r[i++] = this.DV+c;
    r.t = i;
    r.clamp();
  }

  BigInteger.prototype.fromRadix = bnpFromRadix;
  BigInteger.prototype.chunkSize = bnpChunkSize;
  BigInteger.prototype.signum = bnSigNum;
  BigInteger.prototype.dMultiply = bnpDMultiply;
  BigInteger.prototype.dAddOffset = bnpDAddOffset;
  BigInteger.prototype.toRadix = bnpToRadix;
  BigInteger.prototype.intValue = bnIntValue;
  BigInteger.prototype.addTo = bnpAddTo;

  //======= end jsbn =======

  // Emscripten wrapper
  var Wrapper = {
    abs: function(l, h) {
      var x = new goog.math.Long(l, h);
      var ret;
      if (x.isNegative()) {
        ret = x.negate();
      } else {
        ret = x;
      }
      HEAP32[tempDoublePtr>>2] = ret.low_;
      HEAP32[tempDoublePtr+4>>2] = ret.high_;
    },
    ensureTemps: function() {
      if (Wrapper.ensuredTemps) return;
      Wrapper.ensuredTemps = true;
      Wrapper.two32 = new BigInteger();
      Wrapper.two32.fromString('4294967296', 10);
      Wrapper.two64 = new BigInteger();
      Wrapper.two64.fromString('18446744073709551616', 10);
      Wrapper.temp1 = new BigInteger();
      Wrapper.temp2 = new BigInteger();
    },
    lh2bignum: function(l, h) {
      var a = new BigInteger();
      a.fromString(h.toString(), 10);
      var b = new BigInteger();
      a.multiplyTo(Wrapper.two32, b);
      var c = new BigInteger();
      c.fromString(l.toString(), 10);
      var d = new BigInteger();
      c.addTo(b, d);
      return d;
    },
    stringify: function(l, h, unsigned) {
      var ret = new goog.math.Long(l, h).toString();
      if (unsigned && ret[0] == '-') {
        // unsign slowly using jsbn bignums
        Wrapper.ensureTemps();
        var bignum = new BigInteger();
        bignum.fromString(ret, 10);
        ret = new BigInteger();
        Wrapper.two64.addTo(bignum, ret);
        ret = ret.toString(10);
      }
      return ret;
    },
    fromString: function(str, base, min, max, unsigned) {
      Wrapper.ensureTemps();
      var bignum = new BigInteger();
      bignum.fromString(str, base);
      var bigmin = new BigInteger();
      bigmin.fromString(min, 10);
      var bigmax = new BigInteger();
      bigmax.fromString(max, 10);
      if (unsigned && bignum.compareTo(BigInteger.ZERO) < 0) {
        var temp = new BigInteger();
        bignum.addTo(Wrapper.two64, temp);
        bignum = temp;
      }
      var error = false;
      if (bignum.compareTo(bigmin) < 0) {
        bignum = bigmin;
        error = true;
      } else if (bignum.compareTo(bigmax) > 0) {
        bignum = bigmax;
        error = true;
      }
      var ret = goog.math.Long.fromString(bignum.toString()); // min-max checks should have clamped this to a range goog.math.Long can handle well
      HEAP32[tempDoublePtr>>2] = ret.low_;
      HEAP32[tempDoublePtr+4>>2] = ret.high_;
      if (error) throw 'range error';
    }
  };
  return Wrapper;
})();

//======= end closure i64 code =======



// === Auto-generated postamble setup entry stuff ===

if (memoryInitializer) {
  if (typeof Module['locateFile'] === 'function') {
    memoryInitializer = Module['locateFile'](memoryInitializer);
  } else if (Module['memoryInitializerPrefixURL']) {
    memoryInitializer = Module['memoryInitializerPrefixURL'] + memoryInitializer;
  }
  if (ENVIRONMENT_IS_NODE || ENVIRONMENT_IS_SHELL) {
    var data = Module['readBinary'](memoryInitializer);
    HEAPU8.set(data, STATIC_BASE);
  } else {
    addRunDependency('memory initializer');
    Browser.asyncLoad(memoryInitializer, function(data) {
      for (var i = 0; i < data.length; i++) {
        assert(HEAPU8[STATIC_BASE + i] === 0, "area for memory initializer should not have been touched before it's loaded");
      }
      HEAPU8.set(data, STATIC_BASE);
      removeRunDependency('memory initializer');
    }, function(data) {
      throw 'could not load memory initializer ' + memoryInitializer;
    });
  }
}

function ExitStatus(status) {
  this.name = "ExitStatus";
  this.message = "Program terminated with exit(" + status + ")";
  this.status = status;
};
ExitStatus.prototype = new Error();
ExitStatus.prototype.constructor = ExitStatus;

var initialStackTop;
var preloadStartTime = null;
var calledMain = false;

dependenciesFulfilled = function runCaller() {
  // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)
  if (!Module['calledRun'] && shouldRunNow) run();
  if (!Module['calledRun']) dependenciesFulfilled = runCaller; // try this again later, after new deps are fulfilled
}

Module['callMain'] = Module.callMain = function callMain(args) {
  assert(runDependencies == 0, 'cannot call main when async dependencies remain! (listen on __ATMAIN__)');
  assert(__ATPRERUN__.length == 0, 'cannot call main when preRun functions remain to be called');

  args = args || [];

  ensureInitRuntime();

  var argc = args.length+1;
  function pad() {
    for (var i = 0; i < 4-1; i++) {
      argv.push(0);
    }
  }
  var argv = [allocate(intArrayFromString(Module['thisProgram']), 'i8', ALLOC_NORMAL) ];
  pad();
  for (var i = 0; i < argc-1; i = i + 1) {
    argv.push(allocate(intArrayFromString(args[i]), 'i8', ALLOC_NORMAL));
    pad();
  }
  argv.push(0);
  argv = allocate(argv, 'i32', ALLOC_NORMAL);

  initialStackTop = STACKTOP;

  try {

    var ret = _main(argc, argv, 0);


    // if we're not running an evented main loop, it's time to exit
    exit(ret);
  }
  catch(e) {
    if (e instanceof ExitStatus) {
      // exit() throws this once it's done to make sure execution
      // has been stopped completely
      return;
    } else if (e == 'SimulateInfiniteLoop') {
      // running an evented main loop, don't immediately exit
      Module['noExitRuntime'] = true;
      return;
    } else {
      if (e && typeof e === 'object' && e.stack) Module.printErr('exception thrown: ' + [e, e.stack]);
      throw e;
    }
  } finally {
    calledMain = true;
  }
}




function run(args) {
  args = args || Module['arguments'];

  if (preloadStartTime === null) preloadStartTime = Date.now();

  if (runDependencies > 0) {
    Module.printErr('run() called, but dependencies remain, so not running');
    return;
  }

  preRun();

  if (runDependencies > 0) return; // a preRun added a dependency, run will be called later
  if (Module['calledRun']) return; // run may have just been called through dependencies being fulfilled just in this very frame

  function doRun() {
    if (Module['calledRun']) return; // run may have just been called while the async setStatus time below was happening
    Module['calledRun'] = true;

    if (ABORT) return; 

    ensureInitRuntime();

    preMain();

    if (ENVIRONMENT_IS_WEB && preloadStartTime !== null) {
      Module.printErr('pre-main prep time: ' + (Date.now() - preloadStartTime) + ' ms');
    }

    if (Module['_main'] && shouldRunNow) {
      Module['callMain'](args);
    }

    postRun();
  }

  if (Module['setStatus']) {
    Module['setStatus']('Running...');
    setTimeout(function() {
      setTimeout(function() {
        Module['setStatus']('');
      }, 1);
      doRun();
    }, 1);
  } else {
    doRun();
  }
}
Module['run'] = Module.run = run;

function exit(status) {
  if (Module['noExitRuntime']) {
    Module.printErr('exit(' + status + ') called, but noExitRuntime, so not exiting');
    return;
  }

  ABORT = true;
  EXITSTATUS = status;
  STACKTOP = initialStackTop;

  // exit the runtime
  exitRuntime();

  if (ENVIRONMENT_IS_NODE) {
    // Work around a node.js bug where stdout buffer is not flushed at process exit:
    // Instead of process.exit() directly, wait for stdout flush event.
    // See https://github.com/joyent/node/issues/1669 and https://github.com/kripken/emscripten/issues/2582
    // Workaround is based on https://github.com/RReverser/acorn/commit/50ab143cecc9ed71a2d66f78b4aec3bb2e9844f6
    process['stdout']['once']('drain', function () {
      process['exit'](status);
    });
    console.log(' '); // Make sure to print something to force the drain event to occur, in case the stdout buffer was empty.
    // Work around another node bug where sometimes 'drain' is never fired - make another effort
    // to emit the exit status, after a significant delay (if node hasn't fired drain by then, give up)
    setTimeout(function() {
      process['exit'](status);
    }, 500);
  } else
  if (ENVIRONMENT_IS_SHELL && typeof quit === 'function') {
//    quit(status);
  }
  // if we reach here, we must throw an exception to halt the current execution
  throw new ExitStatus(status);
}
Module['exit'] = Module.exit = exit;

function abort(text) {
  if (text) {
    Module.print(text);
    Module.printErr(text);
  }

  ABORT = true;
  EXITSTATUS = 1;

  var extra = '';

  throw 'abort() at ' + stackTrace() + extra;
}
Module['abort'] = Module.abort = abort;

// {{PRE_RUN_ADDITIONS}}

if (Module['preInit']) {
  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
  while (Module['preInit'].length > 0) {
    Module['preInit'].pop()();
  }
}

// shouldRunNow refers to calling main(), not run().
var shouldRunNow = true;
if (Module['noInitialRun']) {
  shouldRunNow = false;
}

load("../lib/setup_platform.js");

var st=Date.now();

function compile(out_name){
  print("starting compile");
  st=Date.now();

  run();
  print("compile took: "+ ((Date.now()-st)/1000)+"s");

  f=libc.fopen(out_name,"wb");
  op=FS.readFile("out.o");
  libc.fwrite(op,op.length,1,f);
  libc.fclose(f);
}
